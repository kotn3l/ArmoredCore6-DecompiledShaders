#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1382;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _231 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _232 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _233 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _239 = inversesqrt(dot(vec3(_231, _232, _233), vec3(_231, _232, _233)));
    float _240 = _239 * _231;
    float _241 = _239 * _232;
    float _242 = _239 * _233;
    float _246 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _247 = _246 * NORMAL.x;
    float _248 = _246 * NORMAL.y;
    float _249 = _246 * NORMAL.z;
    float _253 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _254 = _253 * TANGENT.x;
    float _255 = _253 * TANGENT.y;
    float _256 = _253 * TANGENT.z;
    uint _259 = uint(roundEven(NORMAL.w)) * 13u;
    uint _264 = _259 + 1u;
    uint _268 = _259 + 2u;
    float _277 = sqrt(((cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x) + (cbInstanceData._m0[_259].x * cbInstanceData._m0[_259].x)) + (cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x));
    float _278 = _277 * TEXCOORD.z;
    float _279 = _277 * TEXCOORD.w;
    vec4 _299 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _305 = _299.x * cbMtdParam._m0[11u].x;
    float _306 = _299.y * cbMtdParam._m0[11u].y;
    float _307 = _299.z * cbMtdParam._m0[11u].z;
    vec4 _326 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _278) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _279) + cbTextureTilingScale._m0[5u].w));
    vec4 _364 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _366 = _364.x;
    float _378 = dot(vec4(_366, _364.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _395 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_366 - _378) * cbMtdParam._m0[24u].y) + _378) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3989 = isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0));
    float _396 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
    float _403 = (_396 * ((_326.x * cbMtdParam._m0[12u].x) - _305)) + _305;
    float _404 = (_396 * ((_326.y * cbMtdParam._m0[12u].y) - _306)) + _306;
    float _405 = (_396 * ((_326.z * cbMtdParam._m0[12u].z) - _307)) + _307;
    vec4 _424 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _278) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _279) + cbTextureTilingScale._m0[14u].w));
    vec4 _444 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _278) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _279) + cbTextureTilingScale._m0[20u].w));
    vec4 _471 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _278) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _279) + cbTextureTilingScale._m0[4u].w));
    vec4 _488 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _490 = _488.x;
    float _491 = _488.y;
    float _492 = _488.z;
    float _501 = ((_471.z - _492) * _396) + _492;
    float _504 = ((((_471.x - _490) * _396) + _490) * 2.0) + (-1.0);
    float _505 = ((((_471.y - _491) * _396) + _491) * 2.0) + (-1.0);
    float _506 = dot(vec2(_504, _505), vec2(_504, _505));
    float _4000 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _511 = sqrt(1.0 - (isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0))));
    vec4 _531 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _543 = (_504 + ((((_444.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_531.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _544 = (_505 + ((((_444.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_531.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _547 = fma(_511, _247, fma(_544, _254, _543 * _240));
    float _550 = fma(_511, _248, fma(_544, _255, _543 * _241));
    float _553 = fma(_511, _249, fma(_544, _256, _543 * _242));
    float _557 = inversesqrt(dot(vec3(_547, _550, _553), vec3(_547, _550, _553)));
    vec4 _584 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _278) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _279) + cbTextureTilingScale._m0[11u].w));
    float _586 = _584.x;
    float _587 = 1.0 - _586;
    float _593 = (cbMtdParam._m0[19u].x + dot(vec4(_557 * _547, _557 * _550, _557 * _553, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_586 - _587) * cbMtdParam._m0[24u].z) + _587) * cbMtdParam._m0[21u].z);
    float _4011 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
    float _594 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
    float _596 = (-0.0) - cbMtdParam._m0[24u].x;
    float _598 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _599 = isnan(1.0) ? _598 : (isnan(_598) ? 1.0 : min(_598, 1.0));
    float _606 = _594 - ((_594 * TEXCOORD_8.x) * _599);
    float _607 = _594 - ((_594 * TEXCOORD_8.y) * _599);
    float _608 = _594 - ((_594 * TEXCOORD_8.z) * _599);
    float _615 = (_606 * ((_424.x * cbMtdParam._m0[18u].x) - _403)) + _403;
    float _616 = (_607 * ((_424.y * cbMtdParam._m0[18u].y) - _404)) + _404;
    float _617 = (_608 * ((_424.z * cbMtdParam._m0[18u].z) - _405)) + _405;
    vec4 _629 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _278) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _279) + cbTextureTilingScale._m0[19u].w));
    float _631 = _629.x;
    float _632 = 1.0 - _631;
    float _660 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_631 - _632) * cbMtdParam._m0[24u].w) + _632) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4032 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _661 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
    float _669 = ((((cbMtdParam._m0[10u].x - _615) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _661) + _615;
    float _670 = ((((cbMtdParam._m0[10u].y - _616) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _661) + _616;
    float _671 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _617)) * _661) + _617;
    vec4 _697 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _699 = _697.x;
    float _717 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _278) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _279) + cbTextureTilingScale._m0[9u].w)).x - _699) * _396) + _699;
    float _721 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _717) * cbMtdParam._m0[19u].z) + _717;
    float _723 = _721 - (_721 * _606);
    float _725 = _723 - (_723 * _661);
    float _730 = (((_444.z - _501) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _501;
    float _734 = ((_531.z - _730) * cbMtdParam._m0[19u].w) + _730;
    vec4 _748 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _278) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _279) + cbTextureTilingScale._m0[15u].w));
    float _755 = (_748.x * 2.0) + (-1.0);
    float _756 = (_748.y * 2.0) + (-1.0);
    float _757 = dot(vec2(_755, _756), vec2(_755, _756));
    float _4043 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
    float _765 = ((_748.z - _734) * _606) + _734;
    float _768 = ((cbMtdParam._m0[23u].y - _765) * _661) + _765;
    vec4 _787 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _278) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _279) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _793 = (_787.x * 2.0) + (-1.0);
    float _794 = (_787.y * 2.0) + (-1.0);
    float _795 = dot(vec2(_793, _794), vec2(_793, _794));
    float _4054 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
    float _810 = ((sqrt(1.0 - (isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0)))) - _511) * _608) + _511;
    float _813 = (((_755 - _543) * _606) + _543) + (cbMtdParam._m0[21u].x * _543);
    float _814 = (((_756 - _544) * _607) + _544) + (cbMtdParam._m0[21u].x * _544);
    float _825 = (((_793 - _813) + (_813 * cbMtdParam._m0[22u].z)) * _661) + _813;
    float _826 = (((_794 - _814) + (_814 * cbMtdParam._m0[22u].z)) * _661) + _814;
    float _827 = (_661 * (sqrt(1.0 - (isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0)))) - _810)) + _810;
    float _829 = cbMtdParam._m0[22u].x + _531.w;
    float _832 = fma(_827, _247, fma(_826, _254, _825 * _240));
    float _835 = fma(_827, _248, fma(_826, _255, _825 * _241));
    float _838 = fma(_827, _249, fma(_826, _256, _825 * _242));
    float _842 = inversesqrt(dot(vec3(_832, _835, _838), vec3(_832, _835, _838)));
    float _843 = _842 * _832;
    float _844 = _842 * _835;
    float _845 = _842 * _838;
    float _4065 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _846 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
    float _4076 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
    float _4087 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _4098 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _4109 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _4120 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
    float _851 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
    float _865 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _905 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _915 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _905);
    float _916 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _905);
    float _917 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _905);
    float _921 = inversesqrt(dot(vec3(_915, _916, _917), vec3(_915, _916, _917)));
    float _922 = _915 * _921;
    float _923 = _916 * _921;
    float _924 = _917 * _921;
    float _930 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _931 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _949 = fma(_845, cbSceneParam._m0[5u].z, fma(_844, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _843));
    float _952 = fma(_845, cbSceneParam._m0[6u].z, fma(_844, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _843));
    float _955 = fma(_845, cbSceneParam._m0[7u].z, fma(_844, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _843));
    uint _969 = (_259 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _975 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0)))) * cbInstanceData._m0[_969].x;
    float _976 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0)))) * cbInstanceData._m0[_969].y;
    float _977 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0)))) * cbInstanceData._m0[_969].z;
    float _4131 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
    float _978 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
    float _4142 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
    float _979 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
    float _4153 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
    float _980 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
    float _981 = 1.0 - _851;
    float _982 = _978 * _981;
    float _983 = _979 * _981;
    float _984 = _980 * _981;
    float _989 = (_978 + (-0.039999999105930328369140625)) * _851;
    float _990 = (_979 + (-0.039999999105930328369140625)) * _851;
    float _991 = (_980 + (-0.039999999105930328369140625)) * _851;
    float _992 = _989 + 0.039999999105930328369140625;
    float _994 = _990 + 0.039999999105930328369140625;
    float _995 = _991 + 0.039999999105930328369140625;
    vec4 _1004 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _930, cbSceneParam._m0[86u].y * _931));
    float _1008 = ((isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0))) * TEXCOORD_5.w) * _1004.x;
    float _1009 = dot(vec3(_843, _844, _845), vec3(_922, _923, _924));
    float _1012 = _1009 * 2.0;
    float _1016 = (_1012 * _843) - _922;
    float _1017 = (_1012 * _844) - _923;
    float _1018 = (_1012 * _845) - _924;
    float _1022 = abs(dot(vec3(_922, _923, _924), vec3(_843, _844, _845)));
    float _4164 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
    float _1024 = sqrt(_846);
    float _1037 = exp2((_1024 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1024 * 3.0));
    float _1043 = (1.0 - _1037) * ((_1024 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1044 = _1037 * _1024;
    float _1072 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1076 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1080 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1381;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1106 = fma(_1080, cbModelParam._m0[26u].z, fma(_1076, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1072));
        float _1110 = fma(_1080, cbModelParam._m0[27u].z, fma(_1076, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1072));
        float _1114 = fma(_1080, cbModelParam._m0[28u].z, fma(_1076, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1072));
        float _1139 = _1072 + _843;
        float _1140 = _1076 + _844;
        float _1141 = _1080 + _845;
        float _1151 = fma(_1141, cbModelParam._m0[26u].z, fma(_1140, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1139)) - _1106;
        float _1152 = fma(_1141, cbModelParam._m0[27u].z, fma(_1140, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1139)) - _1110;
        float _1153 = fma(_1141, cbModelParam._m0[28u].z, fma(_1140, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1139)) - _1114;
        float _1157 = inversesqrt(dot(vec3(_1151, _1152, _1153), vec3(_1151, _1152, _1153)));
        float _1170 = ((_1157 * _1151) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1106 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1171 = ((_1157 * _1152) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1110 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1172 = ((_1157 * _1153) / cbModelParam._m0[34u].z) + ((((((_1114 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1175 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1170, _1171, _1172), 0.0);
        vec4 _1182 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1170, _1171, _1172), 0.0);
        vec4 _1189 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1170, _1171, _1172), 0.0);
        vec4 _1196 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1170, _1171, _1172), 0.0);
        float _1209 = exp2((_1175.w + (-0.5)) * 20.0) * 2.0;
        float _1210 = _1209 * (_1175.x + (-0.5));
        float _1211 = _1209 * (_1175.y + (-0.5));
        float _1212 = _1209 * (_1175.z + (-0.5));
        float _1219 = exp2((_1182.w + (-0.5)) * 20.0) * 2.0;
        float _1220 = _1219 * (_1182.x + (-0.5));
        float _1221 = _1219 * (_1182.y + (-0.5));
        float _1222 = _1219 * (_1182.z + (-0.5));
        float _1229 = exp2((_1189.w + (-0.5)) * 20.0) * 2.0;
        float _1230 = _1229 * (_1189.x + (-0.5));
        float _1231 = _1229 * (_1189.y + (-0.5));
        float _1232 = _1229 * (_1189.z + (-0.5));
        float _1239 = exp2((_1196.w + (-0.5)) * 20.0) * 2.0;
        float _1240 = _1239 * (_1196.x + (-0.5));
        float _1241 = _1239 * (_1196.y + (-0.5));
        float _1242 = _1239 * (_1196.z + (-0.5));
        float _1243 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1244 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1245 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1246 = _1210 * 0.5;
        float _1247 = _1220 * 0.5;
        float _1248 = _1230 * 0.5;
        float _1249 = dot(vec3(_1246, _1247, _1248), vec3(_1246, _1247, _1248));
        float _1254 = (_1249 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1249);
        float _1263 = (dot(vec3(_843, _844, _845), vec3(_1254 * _1246, _1254 * _1247, _1254 * _1248)) + 1.0) * 0.5;
        float _4190 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1273 = sqrt(((_1247 * _1247) + (_1246 * _1246)) + (_1248 * _1248)) / (_1243 + 9.9999997473787516355514526367188e-06);
        float _4201 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1274 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
        float _1275 = _1274 * 2.0;
        float _1279 = (1.0 - _1274) / (_1274 + 1.0);
        float _4212 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1280 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
        float _1289 = ((((1.0 - _1280) * (_1275 + 2.0)) * exp2(log2(isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0))) * (_1275 + 1.0))) + _1280) * _1243;
        float _1290 = _1211 * 0.5;
        float _1291 = _1221 * 0.5;
        float _1292 = _1231 * 0.5;
        float _1293 = dot(vec3(_1290, _1291, _1292), vec3(_1290, _1291, _1292));
        float _1298 = (_1293 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1293);
        float _1306 = (dot(vec3(_843, _844, _845), vec3(_1298 * _1290, _1298 * _1291, _1298 * _1292)) + 1.0) * 0.5;
        float _4223 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1315 = sqrt(((_1291 * _1291) + (_1290 * _1290)) + (_1292 * _1292)) / (_1244 + 9.9999997473787516355514526367188e-06);
        float _4234 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1316 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
        float _1317 = _1316 * 2.0;
        float _1321 = (1.0 - _1316) / (_1316 + 1.0);
        float _4245 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1322 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
        float _1331 = ((((1.0 - _1322) * (_1317 + 2.0)) * exp2(log2(isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0))) * (_1317 + 1.0))) + _1322) * _1244;
        float _1332 = _1212 * 0.5;
        float _1333 = _1222 * 0.5;
        float _1334 = _1232 * 0.5;
        float _1335 = dot(vec3(_1332, _1333, _1334), vec3(_1332, _1333, _1334));
        float _1340 = (_1335 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1335);
        float _1348 = (dot(vec3(_843, _844, _845), vec3(_1340 * _1332, _1340 * _1333, _1340 * _1334)) + 1.0) * 0.5;
        float _4256 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1357 = sqrt(((_1333 * _1333) + (_1332 * _1332)) + (_1334 * _1334)) / (_1245 + 9.9999997473787516355514526367188e-06);
        float _4267 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1358 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
        float _1359 = _1358 * 2.0;
        float _1363 = (1.0 - _1358) / (_1358 + 1.0);
        float _4278 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1364 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
        float _1373 = ((((1.0 - _1364) * (_1359 + 2.0)) * exp2(log2(isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0))) * (_1359 + 1.0))) + _1364) * _1245;
        _1381 = _1212;
        _1383 = _1211;
        _1384 = _1210;
        _1385 = _1222;
        _1386 = _1221;
        _1387 = _1220;
        _1388 = _1232;
        _1389 = _1231;
        _1390 = _1230;
        _1391 = _1245;
        _1392 = _1244;
        _1393 = _1243;
        _1394 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0)));
        _1395 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0)));
        _1396 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0)));
    }
    else
    {
        _1381 = _1382;
        _1383 = _1382;
        _1384 = _1382;
        _1385 = _1382;
        _1386 = _1382;
        _1387 = _1382;
        _1388 = _1382;
        _1389 = _1382;
        _1390 = _1382;
        _1391 = _1382;
        _1392 = _1382;
        _1393 = _1382;
        _1394 = 0.0;
        _1395 = 0.0;
        _1396 = 0.0;
    }
    float _1690;
    float _1691;
    float _1692;
    float _1693;
    float _1694;
    float _1695;
    float _1696;
    float _1697;
    float _1698;
    float _1699;
    float _1700;
    float _1701;
    float _1702;
    float _1703;
    float _1704;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1421 = fma(_1080, cbModelParam._m0[30u].z, fma(_1076, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1072));
        float _1425 = fma(_1080, cbModelParam._m0[31u].z, fma(_1076, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1072));
        float _1429 = fma(_1080, cbModelParam._m0[32u].z, fma(_1076, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1072));
        float _1452 = _1072 + _843;
        float _1453 = _1076 + _844;
        float _1454 = _1080 + _845;
        float _1464 = fma(_1454, cbModelParam._m0[30u].z, fma(_1453, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1452)) - _1421;
        float _1465 = fma(_1454, cbModelParam._m0[31u].z, fma(_1453, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1452)) - _1425;
        float _1466 = fma(_1454, cbModelParam._m0[32u].z, fma(_1453, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1452)) - _1429;
        float _1470 = inversesqrt(dot(vec3(_1464, _1465, _1466), vec3(_1464, _1465, _1466)));
        float _1483 = ((_1470 * _1464) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1421 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1484 = ((_1470 * _1465) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1425 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1485 = ((_1470 * _1466) / cbModelParam._m0[35u].z) + ((((((_1429 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1487 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1483, _1484, _1485), 0.0);
        vec4 _1494 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1483, _1484, _1485), 0.0);
        vec4 _1501 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1483, _1484, _1485), 0.0);
        vec4 _1508 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1483, _1484, _1485), 0.0);
        float _1520 = exp2((_1487.w + (-0.5)) * 20.0) * 2.0;
        float _1521 = _1520 * (_1487.x + (-0.5));
        float _1522 = _1520 * (_1487.y + (-0.5));
        float _1523 = _1520 * (_1487.z + (-0.5));
        float _1530 = exp2((_1494.w + (-0.5)) * 20.0) * 2.0;
        float _1531 = _1530 * (_1494.x + (-0.5));
        float _1532 = _1530 * (_1494.y + (-0.5));
        float _1533 = _1530 * (_1494.z + (-0.5));
        float _1540 = exp2((_1501.w + (-0.5)) * 20.0) * 2.0;
        float _1541 = _1540 * (_1501.x + (-0.5));
        float _1542 = _1540 * (_1501.y + (-0.5));
        float _1543 = _1540 * (_1501.z + (-0.5));
        float _1550 = exp2((_1508.w + (-0.5)) * 20.0) * 2.0;
        float _1551 = _1550 * (_1508.x + (-0.5));
        float _1552 = _1550 * (_1508.y + (-0.5));
        float _1553 = _1550 * (_1508.z + (-0.5));
        float _1554 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1555 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1556 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1557 = _1521 * 0.5;
        float _1558 = _1531 * 0.5;
        float _1559 = _1541 * 0.5;
        float _1560 = dot(vec3(_1557, _1558, _1559), vec3(_1557, _1558, _1559));
        float _1565 = (_1560 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1560);
        float _1573 = (dot(vec3(_843, _844, _845), vec3(_1565 * _1557, _1565 * _1558, _1565 * _1559)) + 1.0) * 0.5;
        float _4319 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1582 = sqrt(((_1558 * _1558) + (_1557 * _1557)) + (_1559 * _1559)) / (_1554 + 9.9999997473787516355514526367188e-06);
        float _4330 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
        float _1583 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
        float _1584 = _1583 * 2.0;
        float _1588 = (1.0 - _1583) / (_1583 + 1.0);
        float _4341 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
        float _1589 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
        float _1598 = ((((1.0 - _1589) * (_1584 + 2.0)) * exp2(log2(isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0))) * (_1584 + 1.0))) + _1589) * _1554;
        float _1599 = _1522 * 0.5;
        float _1600 = _1532 * 0.5;
        float _1601 = _1542 * 0.5;
        float _1602 = dot(vec3(_1599, _1600, _1601), vec3(_1599, _1600, _1601));
        float _1607 = (_1602 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1602);
        float _1615 = (dot(vec3(_843, _844, _845), vec3(_1607 * _1599, _1607 * _1600, _1607 * _1601)) + 1.0) * 0.5;
        float _4352 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
        float _1624 = sqrt(((_1600 * _1600) + (_1599 * _1599)) + (_1601 * _1601)) / (_1555 + 9.9999997473787516355514526367188e-06);
        float _4363 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
        float _1625 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
        float _1626 = _1625 * 2.0;
        float _1630 = (1.0 - _1625) / (_1625 + 1.0);
        float _4374 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
        float _1631 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
        float _1640 = ((((1.0 - _1631) * (_1626 + 2.0)) * exp2(log2(isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0))) * (_1626 + 1.0))) + _1631) * _1555;
        float _1641 = _1523 * 0.5;
        float _1642 = _1533 * 0.5;
        float _1643 = _1543 * 0.5;
        float _1644 = dot(vec3(_1641, _1642, _1643), vec3(_1641, _1642, _1643));
        float _1649 = (_1644 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1644);
        float _1657 = (dot(vec3(_843, _844, _845), vec3(_1649 * _1641, _1649 * _1642, _1649 * _1643)) + 1.0) * 0.5;
        float _4385 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
        float _1666 = sqrt(((_1642 * _1642) + (_1641 * _1641)) + (_1643 * _1643)) / (_1556 + 9.9999997473787516355514526367188e-06);
        float _4396 = isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0));
        float _1667 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
        float _1668 = _1667 * 2.0;
        float _1672 = (1.0 - _1667) / (_1667 + 1.0);
        float _4407 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
        float _1673 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
        float _1682 = ((((1.0 - _1673) * (_1668 + 2.0)) * exp2(log2(isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0))) * (_1668 + 1.0))) + _1673) * _1556;
        _1690 = _1523;
        _1691 = _1522;
        _1692 = _1521;
        _1693 = _1533;
        _1694 = _1532;
        _1695 = _1531;
        _1696 = _1543;
        _1697 = _1542;
        _1698 = _1541;
        _1699 = _1556;
        _1700 = _1555;
        _1701 = _1554;
        _1702 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0)));
        _1703 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0)));
        _1704 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0)));
    }
    else
    {
        _1690 = _1382;
        _1691 = _1382;
        _1692 = _1382;
        _1693 = _1382;
        _1694 = _1382;
        _1695 = _1382;
        _1696 = _1382;
        _1697 = _1382;
        _1698 = _1382;
        _1699 = _1382;
        _1700 = _1382;
        _1701 = _1382;
        _1702 = 0.0;
        _1703 = 0.0;
        _1704 = 0.0;
    }
    float _1714 = (cbModelParam._m0[1u].x * (_1702 - _1394)) + _1394;
    float _1715 = (cbModelParam._m0[1u].x * (_1703 - _1395)) + _1395;
    float _1716 = (cbModelParam._m0[1u].x * (_1704 - _1396)) + _1396;
    float _1737 = fma(_1716, cbSceneParam._m0[89u].z, fma(_1715, cbSceneParam._m0[89u].y, _1714 * cbSceneParam._m0[89u].x));
    float _1740 = fma(_1716, cbSceneParam._m0[90u].z, fma(_1715, cbSceneParam._m0[90u].y, _1714 * cbSceneParam._m0[90u].x));
    float _1743 = fma(_1716, cbSceneParam._m0[91u].z, fma(_1715, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1714));
    float _1758 = _1016 * 0.5;
    float _1759 = _1017 * 0.5;
    float _1760 = _1018 * 0.5;
    float _1761 = dot(vec4(_1758, _1759, _1760, 1.0), vec4(_1692, _1695, _1698, _1701));
    float _1764 = dot(vec4(_1758, _1759, _1760, 1.0), vec4(_1691, _1694, _1697, _1700));
    float _1767 = dot(vec4(_1758, _1759, _1760, 1.0), vec4(_1690, _1693, _1696, _1699));
    float _1801;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1774 = dot(vec4(_1758, _1759, _1760, 1.0), vec4(_1381, _1385, _1388, _1391));
        float _1778 = dot(vec4(_1758, _1759, _1760, 1.0), vec4(_1383, _1386, _1389, _1392));
        float _1782 = dot(vec4(_1758, _1759, _1760, 1.0), vec4(_1384, _1387, _1390, _1393));
        float _1789 = dot(vec4(cbModelParam._m0[39u]), vec4(_1758, _1759, _1760, 1.0));
        _1801 = dot(vec3(isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0)), isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0)), isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1789) ? 0.0 : (isnan(0.0) ? _1789 : max(0.0, _1789))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1801 = 1.0;
    }
    float _1812;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1803 = dot(vec4(cbModelParam._m0[40u]), vec4(_1758, _1759, _1760, 1.0));
        _1812 = dot(vec3(isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0)), isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0)), isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1803) ? 0.0 : (isnan(0.0) ? _1803 : max(0.0, _1803))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1812 = 1.0;
    }
    float _1816 = (_1812 * cbModelParam._m0[1u].x) + (_1801 * (1.0 - cbModelParam._m0[1u].x));
    float _1826 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _846);
    float _1827 = isnan(_1826) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1826 : min(cbModelParam._m0[25u].z, _1826));
    float _1907;
    float _1909;
    float _1911;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1874 = fma(_1080, cbModelParam._m0[13u].z, fma(_1076, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1072)) + cbModelParam._m0[13u].w;
        float _1878 = fma(_1080, cbModelParam._m0[14u].z, fma(_1076, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1072)) + cbModelParam._m0[14u].w;
        float _1882 = fma(_1080, cbModelParam._m0[15u].z, fma(_1076, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1072)) + cbModelParam._m0[15u].w;
        float _1885 = fma(_1018, cbModelParam._m0[13u].z, fma(_1017, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1016));
        float _1888 = fma(_1018, cbModelParam._m0[14u].z, fma(_1017, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1016));
        float _1891 = fma(_1018, cbModelParam._m0[15u].z, fma(_1017, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1016));
        float _1919;
        if (_1885 > 0.0)
        {
            _1919 = abs((1.0 - _1874) / _1885);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1885 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1874 + 1.0) / _1885);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1919 = frontier_phi_14_12_ladder;
        }
        float _2090;
        if (_1888 > 0.0)
        {
            _2090 = abs((1.0 - _1878) / _1888);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1888 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1878 + 1.0) / _1888);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2090 = frontier_phi_23_19_ladder;
        }
        float _2385;
        if (_1891 > 0.0)
        {
            _2385 = abs((1.0 - _1882) / _1891);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1891 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1882 + 1.0) / _1891);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2385 = frontier_phi_35_30_ladder;
        }
        float _2387 = isnan(_2090) ? _1919 : (isnan(_1919) ? _2090 : min(_1919, _2090));
        float _2388 = isnan(_2385) ? _2387 : (isnan(_2387) ? _2385 : min(_2387, _2385));
        float _2392 = (_2388 * _1885) + _1874;
        float _2393 = (_2388 * _1888) + _1878;
        float _2394 = (_2388 * _1891) + _1882;
        float _2395 = _2388 * 9.9999997473787516355514526367188e-05;
        float _2397 = (-1.0) - _2395;
        float _2399 = _2395 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2394 > _2399) || ((_2394 < _2397) || ((_2393 > _2399) || ((_2393 < _2397) || ((_2392 < _2397) || (_2392 > _2399))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2539 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2394, cbModelParam._m0[9u].z, fma(_2393, cbModelParam._m0[9u].y, _2392 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2394, cbModelParam._m0[10u].z, fma(_2393, cbModelParam._m0[10u].y, _2392 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2394, cbModelParam._m0[11u].z, fma(_2393, cbModelParam._m0[11u].y, _2392 * cbModelParam._m0[11u].x))), _1827);
            frontier_phi_13_35_ladder = _2539.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2539.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2539.x * cbModelParam._m0[1u].y;
        }
        _1907 = frontier_phi_13_35_ladder_2;
        _1909 = frontier_phi_13_35_ladder_1;
        _1911 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1895 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1016, _1017, _1018), _1827);
        _1907 = _1895.x * cbModelParam._m0[1u].y;
        _1909 = _1895.y * cbModelParam._m0[1u].y;
        _1911 = _1895.z * cbModelParam._m0[1u].y;
    }
    float _1915 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _846);
    float _1916 = isnan(_1915) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1915 : min(cbModelParam._m0[25u].w, _1915));
    float _2005;
    float _2007;
    float _2009;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1969 = fma(_1080, cbModelParam._m0[21u].z, fma(_1076, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1072)) + cbModelParam._m0[21u].w;
        float _1973 = fma(_1080, cbModelParam._m0[22u].z, fma(_1076, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1072)) + cbModelParam._m0[22u].w;
        float _1977 = fma(_1080, cbModelParam._m0[23u].z, fma(_1076, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1072)) + cbModelParam._m0[23u].w;
        float _1980 = fma(_1018, cbModelParam._m0[21u].z, fma(_1017, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1016));
        float _1983 = fma(_1018, cbModelParam._m0[22u].z, fma(_1017, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1016));
        float _1986 = fma(_1018, cbModelParam._m0[23u].z, fma(_1017, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1016));
        float _2095;
        if (_1980 > 0.0)
        {
            _2095 = abs((1.0 - _1969) / _1980);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1980 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1969 + 1.0) / _1980);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2095 = frontier_phi_25_21_ladder;
        }
        float _2412;
        if (_1983 > 0.0)
        {
            _2412 = abs((1.0 - _1973) / _1983);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1983 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1973 + 1.0) / _1983);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2412 = frontier_phi_37_32_ladder;
        }
        float _2750;
        if (_1986 > 0.0)
        {
            _2750 = abs((1.0 - _1977) / _1986);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1986 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1977 + 1.0) / _1986);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2750 = frontier_phi_47_44_ladder;
        }
        float _2752 = isnan(_2412) ? _2095 : (isnan(_2095) ? _2412 : min(_2095, _2412));
        float _2753 = isnan(_2750) ? _2752 : (isnan(_2752) ? _2750 : min(_2752, _2750));
        float _2757 = (_2753 * _1980) + _1969;
        float _2758 = (_2753 * _1983) + _1973;
        float _2759 = (_2753 * _1986) + _1977;
        float _2760 = _2753 * 9.9999997473787516355514526367188e-05;
        float _2761 = (-1.0) - _2760;
        float _2763 = _2760 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2759 > _2763) || ((_2759 < _2761) || ((_2758 > _2763) || ((_2758 < _2761) || ((_2757 < _2761) || (_2757 > _2763))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2881 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2759, cbModelParam._m0[17u].z, fma(_2758, cbModelParam._m0[17u].y, _2757 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2759, cbModelParam._m0[18u].z, fma(_2758, cbModelParam._m0[18u].y, _2757 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2759, cbModelParam._m0[19u].z, fma(_2758, cbModelParam._m0[19u].y, _2757 * cbModelParam._m0[19u].x))), _1916);
            frontier_phi_22_47_ladder = _2881.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2881.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2881.x * cbModelParam._m0[1u].z;
        }
        _2005 = frontier_phi_22_47_ladder_2;
        _2007 = frontier_phi_22_47_ladder_1;
        _2009 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1989 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1016, _1017, _1018), _1916);
        _2005 = _1989.x * cbModelParam._m0[1u].z;
        _2007 = _1989.y * cbModelParam._m0[1u].z;
        _2009 = _1989.z * cbModelParam._m0[1u].z;
    }
    float _2022 = (((_1043 * _992) + _1044) * _1008) * ((cbModelParam._m0[1u].w * (_2005 - _1907)) + _1907);
    float _2024 = (((_1043 * _994) + _1044) * _1008) * ((cbModelParam._m0[1u].w * (_2007 - _1909)) + _1909);
    float _2026 = (((_1043 * _995) + _1044) * _1008) * ((cbModelParam._m0[1u].w * (_2009 - _1911)) + _1911);
    float _2029 = fma(_2026, cbSceneParam._m0[89u].z, fma(_2024, cbSceneParam._m0[89u].y, _2022 * cbSceneParam._m0[89u].x));
    float _2032 = fma(_2026, cbSceneParam._m0[90u].z, fma(_2024, cbSceneParam._m0[90u].y, _2022 * cbSceneParam._m0[90u].x));
    float _2035 = fma(_2026, cbSceneParam._m0[91u].z, fma(_2024, cbSceneParam._m0[91u].y, _2022 * cbSceneParam._m0[91u].x));
    float _2069 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2073 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2077 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2081 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2082 = _2069 / _2081;
    float _2083 = _2073 / _2081;
    float _2084 = _2077 / _2081;
    float _2231;
    float _2232;
    float _2233;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2111 = ((uint(_2084 > cbSceneParam._m0[59u].y) + uint(_2084 > cbSceneParam._m0[59u].x)) + uint(_2084 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2112 = _2111 + 43u;
        uint _2120 = _2111 + 44u;
        uint _2128 = _2111 + 45u;
        uint _2136 = _2111 + 46u;
        float _2147 = fma(_2081, cbSceneParam._m0[_2112].w, fma(_2077, cbSceneParam._m0[_2112].z, fma(_2073, cbSceneParam._m0[_2112].y, _2069 * cbSceneParam._m0[_2112].x)));
        float _2151 = fma(_2081, cbSceneParam._m0[_2120].w, fma(_2077, cbSceneParam._m0[_2120].z, fma(_2073, cbSceneParam._m0[_2120].y, _2069 * cbSceneParam._m0[_2120].x)));
        float _2159 = fma(_2081, cbSceneParam._m0[_2136].w, fma(_2077, cbSceneParam._m0[_2136].z, fma(_2073, cbSceneParam._m0[_2136].y, _2069 * cbSceneParam._m0[_2136].x)));
        float _2164 = cbSceneParam._m0[33u].z * _2159;
        float _2166 = cbSceneParam._m0[33u].w * _2159;
        float _2169 = fma(_2081, cbSceneParam._m0[_2128].w, fma(_2077, cbSceneParam._m0[_2128].z, fma(_2073, cbSceneParam._m0[_2128].y, _2069 * cbSceneParam._m0[_2128].x))) / _2159;
        float _2217 = (cbSceneParam._m0[33u].x - sqrt(((_2083 * _2083) + (_2082 * _2082)) + (_2084 * _2084))) * cbSceneParam._m0[33u].y;
        float _4533 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
        float _2224 = (isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2164 + _2147) / _2159, (_2166 + _2151) / _2159), _2169), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2166 + _2147) / _2159, (_2151 - _2164) / _2159), _2169), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2147 - _2164) / _2159, (_2151 - _2166) / _2159), _2169), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2147 - _2166) / _2159, (_2164 + _2151) / _2159), _2169), 0.0)).x), vec4(0.25)));
        _2231 = 1.0 - (_2224 * cbSceneParam._m0[34u].x);
        _2232 = 1.0 - (_2224 * cbSceneParam._m0[34u].y);
        _2233 = 1.0 - (_2224 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2231 = 1.0;
        _2232 = 1.0;
        _2233 = 1.0;
    }
    float _2297;
    float _2299;
    float _2301;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2285 = fma(_2081, cbSceneParam._m0[63u].w, fma(_2077, cbSceneParam._m0[63u].z, fma(_2073, cbSceneParam._m0[63u].y, _2069 * cbSceneParam._m0[63u].x)));
        float _2286 = fma(_2081, cbSceneParam._m0[60u].w, fma(_2077, cbSceneParam._m0[60u].z, fma(_2073, cbSceneParam._m0[60u].y, _2069 * cbSceneParam._m0[60u].x))) / _2285;
        float _2287 = fma(_2081, cbSceneParam._m0[61u].w, fma(_2077, cbSceneParam._m0[61u].z, fma(_2073, cbSceneParam._m0[61u].y, _2069 * cbSceneParam._m0[61u].x))) / _2285;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2286 >= cbSceneParam._m0[64u].x) && (_2287 >= cbSceneParam._m0[64u].y)) && (_2286 <= cbSceneParam._m0[64u].z)) && (_2287 <= cbSceneParam._m0[64u].w))
        {
            float _2425 = fma(_2081, cbSceneParam._m0[62u].w, fma(_2077, cbSceneParam._m0[62u].z, fma(_2073, cbSceneParam._m0[62u].y, _2069 * cbSceneParam._m0[62u].x))) / _2285;
            float _2429 = isnan(cbSceneParam._m0[41u].w) ? _2425 : (isnan(_2425) ? cbSceneParam._m0[41u].w : max(_2425, cbSceneParam._m0[41u].w));
            float _2472 = (cbSceneParam._m0[33u].x - sqrt(((_2083 * _2083) + (_2082 * _2082)) + (_2084 * _2084))) * cbSceneParam._m0[33u].y;
            float _4549 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
            float _2479 = (isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2286, cbSceneParam._m0[33u].w + _2287), _2429), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2286, _2287 - cbSceneParam._m0[33u].z), _2429), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2286 - cbSceneParam._m0[33u].z, _2287 - cbSceneParam._m0[33u].w), _2429), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2286 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2287), _2429), 0.0)).x), vec4(0.25)));
            float _2483 = 1.0 - (_2479 * cbSceneParam._m0[34u].x);
            float _2484 = 1.0 - (_2479 * cbSceneParam._m0[34u].y);
            float _2485 = 1.0 - (_2479 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2485) ? _2233 : (isnan(_2233) ? _2485 : min(_2233, _2485));
            frontier_phi_34_33_ladder_1 = isnan(_2484) ? _2232 : (isnan(_2232) ? _2484 : min(_2232, _2484));
            frontier_phi_34_33_ladder_2 = isnan(_2483) ? _2231 : (isnan(_2231) ? _2483 : min(_2231, _2483));
        }
        else
        {
            frontier_phi_34_33_ladder = _2233;
            frontier_phi_34_33_ladder_1 = _2232;
            frontier_phi_34_33_ladder_2 = _2231;
        }
        _2297 = frontier_phi_34_33_ladder_2;
        _2299 = frontier_phi_34_33_ladder_1;
        _2301 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2297 = _2231;
        _2299 = _2232;
        _2301 = _2233;
    }
    uvec4 _2306 = floatBitsToUint(cbInstanceData._m0[_259 + 5u]);
    uint _2308 = _2306.x * 14u;
    uint _2309 = _2308 + 13u;
    float _2316 = _1008 + (-1.0);
    float _2321 = (cbLight._m0[_2309].x * _2316) + 1.0;
    float _2322 = (cbLight._m0[_2309].y * _2316) + 1.0;
    float _2323 = (cbLight._m0[_2309].z * _2316) + 1.0;
    float _2324 = (cbLight._m0[_2309].w * _2316) + 1.0;
    uint _2325 = _2308 + 5u;
    float _2331 = isnan(1.0) ? _2322 : (isnan(_2322) ? 1.0 : min(_2322, 1.0));
    uint _2335 = _2308 + 4u;
    float _2344 = isnan(1.0) ? _2321 : (isnan(_2321) ? 1.0 : min(_2321, 1.0));
    uint _2348 = _2308 | 1u;
    float _2359 = dot(vec3(cbLight._m0[_2308].xyz), vec3(_843, _844, _845));
    float _2362 = dot(vec3(cbLight._m0[_2348].xyz), vec3(_843, _844, _845));
    float _4585 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0));
    float _4596 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
    float _2367 = (isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0))) * 0.3183098733425140380859375;
    float _2369 = (isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0))) * 0.3183098733425140380859375;
    float _2376 = ((cbLight._m0[_2325].x * _2331) * _2369) + (((cbLight._m0[_2335].x * _2297) * _2344) * _2367);
    float _2377 = ((_2331 * cbLight._m0[_2325].y) * _2369) + (((cbLight._m0[_2335].y * _2299) * _2344) * _2367);
    float _2378 = ((_2331 * cbLight._m0[_2325].z) * _2369) + (((cbLight._m0[_2335].z * _2301) * _2344) * _2367);
    uvec4 _2382 = floatBitsToUint(cbLight._m0[_2308 + 12u]);
    bool _2384 = _2382.x == 0u;
    float _2486;
    float _2488;
    float _2490;
    if (_2384)
    {
        _2486 = _2376;
        _2488 = _2377;
        _2490 = _2378;
    }
    else
    {
        uint _2494 = _2308 + 6u;
        float _2510 = (dot(vec3(cbLight._m0[_2308 + 2u].xyz), vec3(_843, _844, _845)) * 0.5) + 0.5;
        float _2511 = _2510 * _2510;
        float _4607 = isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : max(_2511, 0.0));
        float _2512 = isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0));
        float _2513 = isnan(1.0) ? _2323 : (isnan(_2323) ? 1.0 : min(_2323, 1.0));
        _2486 = (((cbLight._m0[_2494].x * 0.3183098733425140380859375) * _2512) * _2513) + _2376;
        _2488 = (((cbLight._m0[_2494].y * 0.3183098733425140380859375) * _2512) * _2513) + _2377;
        _2490 = (((cbLight._m0[_2494].z * 0.3183098733425140380859375) * _2512) * _2513) + _2378;
    }
    bool _2493 = _2382.y == 0u;
    float _2548;
    float _2550;
    float _2552;
    if (_2493)
    {
        _2548 = _2486;
        _2550 = _2488;
        _2552 = _2490;
    }
    else
    {
        uint _2721 = _2308 + 7u;
        float _2737 = (dot(vec3(cbLight._m0[_2308 + 3u].xyz), vec3(_843, _844, _845)) * 0.5) + 0.5;
        float _2738 = _2737 * _2737;
        float _4623 = isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : max(_2738, 0.0));
        float _2739 = isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0));
        float _2740 = isnan(1.0) ? _2324 : (isnan(_2324) ? 1.0 : min(_2324, 1.0));
        _2548 = (((cbLight._m0[_2721].x * 0.3183098733425140380859375) * _2739) * _2740) + _2486;
        _2550 = (((cbLight._m0[_2721].y * 0.3183098733425140380859375) * _2739) * _2740) + _2488;
        _2552 = (((cbLight._m0[_2721].z * 0.3183098733425140380859375) * _2739) * _2740) + _2490;
    }
    uint _2555 = _2308 + 8u;
    float _2568 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2308].w)) * _846) * 0.949999988079071044921875);
    float _2569 = _2568 * _2568;
    float _2570 = cbLight._m0[_2308].x + _922;
    float _2571 = cbLight._m0[_2308].y + _923;
    float _2572 = cbLight._m0[_2308].z + _924;
    float _2576 = inversesqrt(dot(vec3(_2570, _2571, _2572), vec3(_2570, _2571, _2572)));
    float _2577 = _2576 * _2570;
    float _2578 = _2576 * _2571;
    float _2579 = _2576 * _2572;
    float _2580 = dot(vec3(_843, _844, _845), vec3(cbLight._m0[_2308].xyz));
    float _4639 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0));
    float _2583 = isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0));
    float _4650 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
    float _2584 = isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0));
    float _2585 = dot(vec3(_843, _844, _845), vec3(_2577, _2578, _2579));
    float _4661 = isnan(0.0) ? _2585 : (isnan(_2585) ? 0.0 : max(_2585, 0.0));
    float _2588 = isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0));
    float _2589 = dot(vec3(cbLight._m0[_2308].xyz), vec3(_2577, _2578, _2579));
    float _4672 = isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0));
    float _2593 = _2569 * _2569;
    float _2597 = ((_2588 * _2588) * (_2593 + (-1.0))) + 1.0;
    float _2605 = exp2(log2(1.0 - (isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0)))) * 5.0);
    float _2606 = 0.959999978542327880859375 - _989;
    float _2608 = 0.959999978542327880859375 - _990;
    float _2609 = 0.959999978542327880859375 - _991;
    float _2616 = 1.0 - _2569;
    float _2627 = (0.5 / (((_2584 * ((_2583 * _2616) + _2569)) + 9.9999999392252902907785028219223e-09) + (((_2584 * _2616) + _2569) * _2583))) * _2583;
    float _4683 = isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : max(_2627, 0.0));
    float _2629 = (isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0))) * (_2593 / ((_2597 * _2597) * 3.141590118408203125));
    uint _2643 = _2308 + 9u;
    float _2654 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2348].w)) * _846) * 0.949999988079071044921875);
    float _2655 = _2654 * _2654;
    float _2656 = cbLight._m0[_2348].x + _922;
    float _2657 = cbLight._m0[_2348].y + _923;
    float _2658 = cbLight._m0[_2348].z + _924;
    float _2662 = inversesqrt(dot(vec3(_2656, _2657, _2658), vec3(_2656, _2657, _2658)));
    float _2663 = _2662 * _2656;
    float _2664 = _2662 * _2657;
    float _2665 = _2662 * _2658;
    float _2666 = dot(vec3(_843, _844, _845), vec3(cbLight._m0[_2348].xyz));
    float _4694 = isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : max(_2666, 0.0));
    float _2669 = isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0));
    float _2670 = dot(vec3(_843, _844, _845), vec3(_2663, _2664, _2665));
    float _4705 = isnan(0.0) ? _2670 : (isnan(_2670) ? 0.0 : max(_2670, 0.0));
    float _2673 = isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0));
    float _2674 = dot(vec3(cbLight._m0[_2348].xyz), vec3(_2663, _2664, _2665));
    float _4716 = isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : max(_2674, 0.0));
    float _2678 = _2655 * _2655;
    float _2682 = ((_2673 * _2673) * (_2678 + (-1.0))) + 1.0;
    float _2689 = exp2(log2(1.0 - (isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0)))) * 5.0);
    float _2696 = 1.0 - _2655;
    float _2706 = (0.5 / (((_2584 * ((_2669 * _2696) + _2655)) + 9.9999999392252902907785028219223e-09) + (((_2584 * _2696) + _2655) * _2669))) * _2669;
    float _4727 = isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : max(_2706, 0.0));
    float _2708 = (isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0))) * (_2678 / ((_2682 * _2682) * 3.141590118408203125));
    float _2718 = (((((_2689 * _2606) + _992) * cbLight._m0[_2643].x) * _2708) * _2331) + ((((cbLight._m0[_2555].x * _2297) * ((_2605 * _2606) + _992)) * _2629) * _2344);
    float _2719 = (((((_2689 * _2608) + _994) * cbLight._m0[_2643].y) * _2708) * _2331) + ((((cbLight._m0[_2555].y * _2299) * ((_2605 * _2608) + _994)) * _2629) * _2344);
    float _2720 = (((((_2689 * _2609) + _995) * cbLight._m0[_2643].z) * _2708) * _2331) + ((((cbLight._m0[_2555].z * _2301) * ((_2605 * _2609) + _995)) * _2629) * _2344);
    float _2776;
    float _2778;
    float _2780;
    if (_2384)
    {
        _2776 = _2718;
        _2778 = _2719;
        _2780 = _2720;
    }
    else
    {
        uint _2782 = _2308 + 2u;
        uint _2786 = _2308 + 10u;
        float _2800 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2782].w)) * _846) * 0.949999988079071044921875);
        float _2801 = _2800 * _2800;
        float _2802 = cbLight._m0[_2782].x + _922;
        float _2803 = cbLight._m0[_2782].y + _923;
        float _2804 = cbLight._m0[_2782].z + _924;
        float _2808 = inversesqrt(dot(vec3(_2802, _2803, _2804), vec3(_2802, _2803, _2804)));
        float _2809 = _2808 * _2802;
        float _2810 = _2808 * _2803;
        float _2811 = _2808 * _2804;
        float _2812 = dot(vec3(_843, _844, _845), vec3(cbLight._m0[_2782].xyz));
        float _4738 = isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0));
        float _2815 = isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0));
        float _2816 = dot(vec3(_843, _844, _845), vec3(_2809, _2810, _2811));
        float _4749 = isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : max(_2816, 0.0));
        float _2819 = isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0));
        float _2820 = dot(vec3(cbLight._m0[_2782].xyz), vec3(_2809, _2810, _2811));
        float _4760 = isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : max(_2820, 0.0));
        float _2824 = _2801 * _2801;
        float _2828 = ((_2819 * _2819) * (_2824 + (-1.0))) + 1.0;
        float _2835 = exp2(log2(1.0 - (isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0)))) * 5.0);
        float _2842 = 1.0 - _2801;
        float _2852 = (0.5 / (((_2584 * ((_2815 * _2842) + _2801)) + 9.9999999392252902907785028219223e-09) + (((_2584 * _2842) + _2801) * _2815))) * _2815;
        float _4771 = isnan(0.0) ? _2852 : (isnan(_2852) ? 0.0 : max(_2852, 0.0));
        float _2854 = (isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0))) * (_2824 / ((_2828 * _2828) * 3.141590118408203125));
        float _2855 = isnan(1.0) ? _2323 : (isnan(_2323) ? 1.0 : min(_2323, 1.0));
        _2776 = (((((_2835 * _2606) + _992) * cbLight._m0[_2786].x) * _2854) * _2855) + _2718;
        _2778 = (((((_2835 * _2608) + _994) * cbLight._m0[_2786].y) * _2854) * _2855) + _2719;
        _2780 = (((((_2835 * _2609) + _995) * cbLight._m0[_2786].z) * _2854) * _2855) + _2720;
    }
    float _2886;
    float _2888;
    float _2890;
    if (_2493)
    {
        _2886 = _2776;
        _2888 = _2778;
        _2890 = _2780;
    }
    else
    {
        uint _2897 = _2308 + 3u;
        uint _2901 = _2308 + 11u;
        float _2915 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2897].w)) * _846) * 0.949999988079071044921875);
        float _2916 = _2915 * _2915;
        float _2917 = cbLight._m0[_2897].x + _922;
        float _2918 = cbLight._m0[_2897].y + _923;
        float _2919 = cbLight._m0[_2897].z + _924;
        float _2923 = inversesqrt(dot(vec3(_2917, _2918, _2919), vec3(_2917, _2918, _2919)));
        float _2924 = _2923 * _2917;
        float _2925 = _2923 * _2918;
        float _2926 = _2923 * _2919;
        float _2927 = dot(vec3(_843, _844, _845), vec3(cbLight._m0[_2897].xyz));
        float _4787 = isnan(0.0) ? _2927 : (isnan(_2927) ? 0.0 : max(_2927, 0.0));
        float _2930 = isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0));
        float _2931 = dot(vec3(_843, _844, _845), vec3(_2924, _2925, _2926));
        float _4798 = isnan(0.0) ? _2931 : (isnan(_2931) ? 0.0 : max(_2931, 0.0));
        float _2934 = isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0));
        float _2935 = dot(vec3(cbLight._m0[_2897].xyz), vec3(_2924, _2925, _2926));
        float _4809 = isnan(0.0) ? _2935 : (isnan(_2935) ? 0.0 : max(_2935, 0.0));
        float _2939 = _2916 * _2916;
        float _2943 = ((_2934 * _2934) * (_2939 + (-1.0))) + 1.0;
        float _2950 = exp2(log2(1.0 - (isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0)))) * 5.0);
        float _2957 = 1.0 - _2916;
        float _2967 = (0.5 / (((_2584 * ((_2930 * _2957) + _2916)) + 9.9999999392252902907785028219223e-09) + (((_2584 * _2957) + _2916) * _2930))) * _2930;
        float _4820 = isnan(0.0) ? _2967 : (isnan(_2967) ? 0.0 : max(_2967, 0.0));
        float _2969 = (isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0))) * (_2939 / ((_2943 * _2943) * 3.141590118408203125));
        float _2970 = isnan(1.0) ? _2324 : (isnan(_2324) ? 1.0 : min(_2324, 1.0));
        _2886 = (((((_2950 * _2606) + _992) * cbLight._m0[_2901].x) * _2969) * _2970) + _2776;
        _2888 = (((((_2950 * _2608) + _994) * cbLight._m0[_2901].y) * _2969) * _2970) + _2778;
        _2890 = (((((_2950 * _2609) + _995) * cbLight._m0[_2901].z) * _2969) * _2970) + _2780;
    }
    float _3036;
    float _3038;
    float _3040;
    float _3042;
    float _3044;
    float _3046;
    if (_2306.y == 0u)
    {
        uvec4 _2991 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2992 = _2991.x;
        uint _3003 = uint((float(_2991.y) * floor(float(uint(cbSceneParam._m0[85u].y * _931) / _2992))) + floor(float(uint(cbSceneParam._m0[85u].x * _930) / _2992)));
        float _3013 = (log2(_2084 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3014 = isnan(0.0) ? _3013 : (isnan(_3013) ? 0.0 : max(_3013, 0.0));
        uint _3017 = uint(isnan(14.0) ? _3014 : (isnan(_3014) ? 14.0 : min(_3014, 14.0)));
        uvec4 _3022 = texelFetch(g_lightClusterGridBuffer, int(((_3017 << 2u) + (_3003 << 6u)) >> 2u));
        uint _3023 = _3022.x;
        uint _3024 = _2991.z;
        float _3103;
        float _3105;
        float _3107;
        float _3109;
        float _3111;
        float _3113;
        if (((((1u << ((_3024 >> 4u) & 15u)) + 4294967295u) & _3023) == 0u) || ((_3024 & 240u) == 0u))
        {
            _3103 = 0.0;
            _3105 = 0.0;
            _3107 = 0.0;
            _3109 = 0.0;
            _3111 = 0.0;
            _3113 = 0.0;
        }
        else
        {
            float _3104;
            float _3106;
            float _3108;
            float _3110;
            float _3112;
            float _3114;
            float _3247 = 0.0;
            float _3248 = 0.0;
            float _3249 = 0.0;
            float _3250 = 0.0;
            float _3251 = 0.0;
            float _3252 = 0.0;
            uint _3253 = 0u;
            uint _3262;
            bool _3263;
            for (;;)
            {
                _3262 = texelFetch(g_lightClassification, int((((_3017 << 5u) + (_3003 << 9u)) + (_3253 << 2u)) >> 2u)).x;
                _3263 = _3262 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3263)
                {
                    frontier_phi_66_pred = _3252;
                    frontier_phi_66_pred_1 = _3251;
                    frontier_phi_66_pred_2 = _3250;
                    frontier_phi_66_pred_3 = _3249;
                    frontier_phi_66_pred_4 = _3248;
                    frontier_phi_66_pred_5 = _3247;
                }
                else
                {
                    float _3371;
                    float _3372;
                    float _3373;
                    float _3374;
                    float _3375;
                    float _3376;
                    uint _3377;
                    _3371 = _3247;
                    _3372 = _3248;
                    _3373 = _3249;
                    _3374 = _3250;
                    _3375 = _3251;
                    _3376 = _3252;
                    _3377 = _3262;
                    float _3303;
                    float _3304;
                    float _3305;
                    float _3306;
                    float _3307;
                    float _3308;
                    for (;;)
                    {
                        uint _3381 = uint(findLSB(_3377)) + (_3253 << 5u);
                        uint _3378 = (_3377 + 4294967295u) & _3377;
                        uint _3383 = _3381 * 48u;
                        vec4 _3397 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3383)).x, texelFetch(g_PointLightRenderingBuffer, int(_3383 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3383 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3383 + 3u)).x));
                        uint _3403 = (_3381 * 48u) + 4u;
                        vec4 _3416 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3403)).x, texelFetch(g_PointLightRenderingBuffer, int(_3403 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3403 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3403 + 3u)).x));
                        uint _3422 = (_3381 * 48u) + 8u;
                        vec3 _3433 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3422)).x, texelFetch(g_PointLightRenderingBuffer, int(_3422 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3422 + 2u)).x));
                        float _3437 = _3397.x - _2082;
                        float _3438 = _3397.y - _2083;
                        float _3439 = _3397.z - _2084;
                        float _3440 = dot(vec3(_3437, _3438, _3439), vec3(_3437, _3438, _3439));
                        float _3443 = inversesqrt(_3440);
                        float _3444 = _3443 * _3437;
                        float _3445 = _3443 * _3438;
                        float _3446 = _3443 * _3439;
                        float _3447 = dot(vec3(_949, _952, _955), vec3(_3444, _3445, _3446));
                        float _3452 = 1.0 - (_3440 * _3397.w);
                        float _4846 = isnan(0.0) ? _3452 : (isnan(_3452) ? 0.0 : max(_3452, 0.0));
                        float _3453 = isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0));
                        float _3454 = sqrt(_3440) * _3416.w;
                        float _3457 = 1.39999997615814208984375 / (_3454 + 1.39999997615814208984375);
                        float _3458 = _3457 * _3457;
                        float _3461 = ((1.0 - _3458) * _3447) + _3458;
                        float _3464 = _3454 * _3454;
                        float _3468 = ((isnan(0.0) ? _3461 : (isnan(_3461) ? 0.0 : max(_3461, 0.0))) * _3453) / ((_3464 * 0.699999988079071044921875) + 1.0);
                        float _3472 = (-0.0) - _2082;
                        float _3473 = (-0.0) - _2083;
                        float _3474 = (-0.0) - _2084;
                        float _3478 = inversesqrt(dot(vec3(_3472, _3473, _3474), vec3(_3472, _3473, _3474)));
                        float _3479 = _3478 * _3472;
                        float _3480 = _3478 * _3473;
                        float _3481 = _3478 * _3474;
                        float _3488 = exp2(log2(1.0 / ((_3464 * 3.5) + 5.0)) * 0.25);
                        float _3489 = 1.0 - _1024;
                        float _3496 = sqrt(1.0 - ((1.0 - (_3489 * _3489)) * (1.0 - (_3488 * _3488))));
                        float _3497 = _3496 * _3496;
                        float _3498 = _3497 * _3497;
                        float _3499 = _3479 + _3444;
                        float _3500 = _3480 + _3445;
                        float _3501 = _3481 + _3446;
                        float _3505 = inversesqrt(dot(vec3(_3499, _3500, _3501), vec3(_3499, _3500, _3501)));
                        float _3509 = dot(vec3(_949, _952, _955), vec3(_3479, _3480, _3481));
                        float _4862 = isnan(0.0) ? _3509 : (isnan(_3509) ? 0.0 : max(_3509, 0.0));
                        float _3512 = isnan(1.0) ? _4862 : (isnan(_4862) ? 1.0 : min(_4862, 1.0));
                        float _3513 = dot(vec3(_949, _952, _955), vec3(_3505 * _3499, _3505 * _3500, _3505 * _3501));
                        float _4873 = isnan(0.0) ? _3513 : (isnan(_3513) ? 0.0 : max(_3513, 0.0));
                        float _3516 = isnan(1.0) ? _4873 : (isnan(_4873) ? 1.0 : min(_4873, 1.0));
                        float _3520 = ((_3516 * _3516) * (_3498 + (-1.0))) + 1.0;
                        float _3521 = _3457 * _3497;
                        float _3522 = _3521 * _3521;
                        float _3525 = ((1.0 - _3522) * _3447) + _3522;
                        float _4884 = isnan(0.0) ? _3525 : (isnan(_3525) ? 0.0 : max(_3525, 0.0));
                        float _3526 = isnan(1.0) ? _4884 : (isnan(_4884) ? 1.0 : min(_4884, 1.0));
                        float _3527 = 1.0 - _3497;
                        float _3537 = (0.5 / (((_3526 * ((_3512 * _3527) + _3497)) + 9.9999999392252902907785028219223e-09) + (((_3526 * _3527) + _3497) * _3512))) * _3526;
                        float _4895 = isnan(0.0) ? _3537 : (isnan(_3537) ? 0.0 : max(_3537, 0.0));
                        float _3548 = (((_3498 * 3.1415927410125732421875) * (isnan(1.0) ? _4895 : (isnan(_4895) ? 1.0 : min(_4895, 1.0)))) / ((_3520 * _3520) * ((_3464 * 2.1991131305694580078125) + 3.141590118408203125))) * _3453;
                        _3306 = (_3468 * _3416.x) + _3374;
                        _3307 = (_3468 * _3416.y) + _3375;
                        _3308 = (_3468 * _3416.z) + _3376;
                        _3303 = (_3548 * _3433.x) + _3371;
                        _3304 = (_3548 * _3433.y) + _3372;
                        _3305 = (_3548 * _3433.z) + _3373;
                        if (_3378 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3371 = _3303;
                            _3372 = _3304;
                            _3373 = _3305;
                            _3374 = _3306;
                            _3375 = _3307;
                            _3376 = _3308;
                            _3377 = _3378;
                        }
                    }
                    frontier_phi_66_pred = _3308;
                    frontier_phi_66_pred_1 = _3307;
                    frontier_phi_66_pred_2 = _3306;
                    frontier_phi_66_pred_3 = _3305;
                    frontier_phi_66_pred_4 = _3304;
                    frontier_phi_66_pred_5 = _3303;
                }
                _3114 = frontier_phi_66_pred;
                _3112 = frontier_phi_66_pred_1;
                _3110 = frontier_phi_66_pred_2;
                _3108 = frontier_phi_66_pred_3;
                _3106 = frontier_phi_66_pred_4;
                _3104 = frontier_phi_66_pred_5;
                uint _3254 = _3253 + 1u;
                if (_3254 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3247 = _3104;
                    _3248 = _3106;
                    _3249 = _3108;
                    _3250 = _3110;
                    _3251 = _3112;
                    _3252 = _3114;
                    _3253 = _3254;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3103 = _3104;
            _3105 = _3106;
            _3107 = _3108;
            _3109 = _3110;
            _3111 = _3112;
            _3113 = _3114;
        }
        uvec4 _3117 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3118 = _3117.z;
        uint _3120 = (_3118 >> 8u) & 15u;
        float _3215;
        float _3217;
        float _3219;
        float _3221;
        float _3223;
        float _3225;
        if (((4294967295u << _3120) & _3023) == 0u)
        {
            _3215 = _3103;
            _3217 = _3105;
            _3219 = _3107;
            _3221 = _3109;
            _3223 = _3111;
            _3225 = _3113;
        }
        else
        {
            float _3240 = inversesqrt(dot(vec3(_2082, _2083, _2084), vec3(_2082, _2083, _2084)));
            float _3241 = _3240 * _2082;
            float _3242 = _3240 * _2083;
            float _3243 = _3240 * _2084;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3120 < ((_3118 >> 12u) & 15u))
            {
                float _3216;
                float _3218;
                float _3220;
                float _3222;
                float _3224;
                float _3226;
                float _3354 = _3103;
                float _3355 = _3105;
                float _3356 = _3107;
                float _3357 = _3109;
                float _3358 = _3111;
                float _3359 = _3113;
                uint _3360 = _3120;
                uint _3369;
                bool _3370;
                for (;;)
                {
                    _3369 = texelFetch(g_lightClassification, int((((_3017 << 5u) + (_3003 << 9u)) + (_3360 << 2u)) >> 2u)).x;
                    _3370 = _3369 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3370)
                    {
                        frontier_phi_72_pred = _3359;
                        frontier_phi_72_pred_1 = _3358;
                        frontier_phi_72_pred_2 = _3357;
                        frontier_phi_72_pred_3 = _3356;
                        frontier_phi_72_pred_4 = _3355;
                        frontier_phi_72_pred_5 = _3354;
                    }
                    else
                    {
                        float _3553;
                        float _3554;
                        float _3555;
                        float _3556;
                        float _3557;
                        float _3558;
                        float _3846;
                        float _3847;
                        float _3848;
                        float _3849;
                        float _3850;
                        float _3851;
                        float _3566 = _3354;
                        float _3567 = _3355;
                        float _3568 = _3356;
                        float _3569 = _3357;
                        float _3570 = _3358;
                        float _3571 = _3359;
                        uint _3572 = _3369;
                        uint _3573;
                        vec4 _3598;
                        float _3599;
                        vec4 _3614;
                        vec3 _3626;
                        vec4 _3641;
                        vec4 _3656;
                        float _3702;
                        bool _3703;
                        for (;;)
                        {
                            uint _3583 = ((_3360 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3572));
                            _3573 = (_3572 + 4294967295u) & _3572;
                            uint _3585 = _3583 * 40u;
                            _3598 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3585)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3585 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3585 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3585 + 3u)).x));
                            _3599 = _3598.w;
                            uint _3601 = (_3583 * 40u) + 4u;
                            _3614 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3601)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3601 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3601 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3601 + 3u)).x));
                            uint _3616 = (_3583 * 40u) + 8u;
                            _3626 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3616)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 2u)).x));
                            uint _3628 = (_3583 * 40u) + 16u;
                            _3641 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3628)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3628 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3628 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3628 + 3u)).x));
                            uint _3643 = (_3583 * 40u) + 20u;
                            _3656 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3643)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3643 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3643 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3643 + 3u)).x));
                            uint _3658 = (_3583 * 40u) + 24u;
                            vec4 _3671 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3658)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3658 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3658 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3658 + 3u)).x));
                            uint _3677 = (_3583 * 40u) + 28u;
                            vec4 _3690 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3677)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3677 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3677 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3677 + 3u)).x));
                            _3702 = fma(_2084, _3690.z, fma(_2083, _3690.y, _3690.x * _2082)) + _3690.w;
                            _3703 = !((fma(_2084, _3671.z, fma(_2083, _3671.y, _3671.x * _2082)) + _3671.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3703)
                            {
                                float _3730 = _3598.x - _2082;
                                float _3731 = _3598.y - _2083;
                                float _3732 = _3598.z - _2084;
                                float _3733 = dot(vec3(_3730, _3731, _3732), vec3(_3730, _3731, _3732));
                                float _3736 = inversesqrt(_3733);
                                float _3737 = _3736 * _3730;
                                float _3738 = _3736 * _3731;
                                float _3739 = _3736 * _3732;
                                float _3743 = 1.0 - (_3733 / (_3599 * _3599));
                                float _4906 = isnan(0.0) ? _3743 : (isnan(_3743) ? 0.0 : max(_3743, 0.0));
                                float _3744 = isnan(1.0) ? _4906 : (isnan(_4906) ? 1.0 : min(_4906, 1.0));
                                float _3748 = sqrt(_3733) * _3614.w;
                                float _3750 = 1.39999997615814208984375 / (_3748 + 1.39999997615814208984375);
                                float _3751 = _3750 * _3750;
                                float _3754 = ((1.0 - _3751) * dot(vec3(_3737, _3738, _3739), vec3(_949, _952, _955))) + _3751;
                                float _3757 = _3748 * _3748;
                                float _3761 = (fma(_2084, _3641.z, fma(_2083, _3641.y, _3641.x * _2082)) + _3641.w) / _3702;
                                float _3762 = (fma(_2084, _3656.z, fma(_2083, _3656.y, _3656.x * _2082)) + _3656.w) / _3702;
                                float _3766 = 1.0 - dot(vec2(_3761, _3762), vec2(_3761, _3762));
                                float _4922 = isnan(0.0) ? _3766 : (isnan(_3766) ? 0.0 : max(_3766, 0.0));
                                float _3767 = isnan(1.0) ? _4922 : (isnan(_4922) ? 1.0 : min(_4922, 1.0));
                                float _3768 = _3767 * (((isnan(0.0) ? _3754 : (isnan(_3754) ? 0.0 : max(_3754, 0.0))) * _3744) / ((_3757 * 0.699999988079071044921875) + 1.0));
                                float _3780 = exp2(log2(1.0 / ((_3757 * 3.5) + 5.0)) * 0.25);
                                float _3781 = 1.0 - _1024;
                                float _3788 = sqrt(1.0 - ((1.0 - (_3781 * _3781)) * (1.0 - (_3780 * _3780))));
                                float _3789 = _3788 * _3788;
                                float _3790 = _3789 * _3789;
                                float _3791 = _3737 - _3241;
                                float _3792 = _3738 - _3242;
                                float _3793 = _3739 - _3243;
                                float _3797 = inversesqrt(dot(vec3(_3791, _3792, _3793), vec3(_3791, _3792, _3793)));
                                float _3801 = dot(vec3(_949, _952, _955), vec3((-0.0) - _3241, (-0.0) - _3242, (-0.0) - _3243));
                                float _4933 = isnan(0.0) ? _3801 : (isnan(_3801) ? 0.0 : max(_3801, 0.0));
                                float _3804 = isnan(1.0) ? _4933 : (isnan(_4933) ? 1.0 : min(_4933, 1.0));
                                float _3805 = dot(vec3(_949, _952, _955), vec3(_3797 * _3791, _3797 * _3792, _3797 * _3793));
                                float _4944 = isnan(0.0) ? _3805 : (isnan(_3805) ? 0.0 : max(_3805, 0.0));
                                float _3808 = isnan(1.0) ? _4944 : (isnan(_4944) ? 1.0 : min(_4944, 1.0));
                                float _3812 = ((_3808 * _3808) * (_3790 + (-1.0))) + 1.0;
                                float _3813 = _3750 * _3789;
                                float _3814 = _3813 * _3813;
                                float _3820 = ((1.0 - _3814) * dot(vec3(_949, _952, _955), vec3(_3737, _3738, _3739))) + _3814;
                                float _4955 = isnan(0.0) ? _3820 : (isnan(_3820) ? 0.0 : max(_3820, 0.0));
                                float _3821 = isnan(1.0) ? _4955 : (isnan(_4955) ? 1.0 : min(_4955, 1.0));
                                float _3822 = 1.0 - _3789;
                                float _3832 = (0.5 / (((_3821 * ((_3804 * _3822) + _3789)) + 9.9999999392252902907785028219223e-09) + (((_3821 * _3822) + _3789) * _3804))) * _3821;
                                float _4966 = isnan(0.0) ? _3832 : (isnan(_3832) ? 0.0 : max(_3832, 0.0));
                                float _3842 = (_3767 * _3744) * (((_3790 * 3.1415927410125732421875) * (isnan(1.0) ? _4966 : (isnan(_4966) ? 1.0 : min(_4966, 1.0)))) / ((_3812 * _3812) * ((_3757 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3768 * _3614.y;
                                frontier_phi_78_pred_1 = _3768 * _3614.x;
                                frontier_phi_78_pred_2 = _3842 * _3626.z;
                                frontier_phi_78_pred_3 = _3842 * _3626.y;
                                frontier_phi_78_pred_4 = _3842 * _3626.x;
                                frontier_phi_78_pred_5 = _3768 * _3614.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3850 = frontier_phi_78_pred;
                            _3849 = frontier_phi_78_pred_1;
                            _3848 = frontier_phi_78_pred_2;
                            _3847 = frontier_phi_78_pred_3;
                            _3846 = frontier_phi_78_pred_4;
                            _3851 = frontier_phi_78_pred_5;
                            _3556 = _3849 + _3569;
                            _3557 = _3850 + _3570;
                            _3558 = _3851 + _3571;
                            _3553 = _3846 + _3566;
                            _3554 = _3847 + _3567;
                            _3555 = _3848 + _3568;
                            if (_3573 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3566 = _3553;
                                _3567 = _3554;
                                _3568 = _3555;
                                _3569 = _3556;
                                _3570 = _3557;
                                _3571 = _3558;
                                _3572 = _3573;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3558;
                        frontier_phi_72_pred_1 = _3557;
                        frontier_phi_72_pred_2 = _3556;
                        frontier_phi_72_pred_3 = _3555;
                        frontier_phi_72_pred_4 = _3554;
                        frontier_phi_72_pred_5 = _3553;
                    }
                    _3226 = frontier_phi_72_pred;
                    _3224 = frontier_phi_72_pred_1;
                    _3222 = frontier_phi_72_pred_2;
                    _3220 = frontier_phi_72_pred_3;
                    _3218 = frontier_phi_72_pred_4;
                    _3216 = frontier_phi_72_pred_5;
                    uint _3361 = _3360 + 1u;
                    if (_3361 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3354 = _3216;
                        _3355 = _3218;
                        _3356 = _3220;
                        _3357 = _3222;
                        _3358 = _3224;
                        _3359 = _3226;
                        _3360 = _3361;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3226;
                frontier_phi_60_61_ladder_1 = _3224;
                frontier_phi_60_61_ladder_2 = _3220;
                frontier_phi_60_61_ladder_3 = _3218;
                frontier_phi_60_61_ladder_4 = _3216;
                frontier_phi_60_61_ladder_5 = _3222;
            }
            else
            {
                frontier_phi_60_61_ladder = _3113;
                frontier_phi_60_61_ladder_1 = _3111;
                frontier_phi_60_61_ladder_2 = _3107;
                frontier_phi_60_61_ladder_3 = _3105;
                frontier_phi_60_61_ladder_4 = _3103;
                frontier_phi_60_61_ladder_5 = _3109;
            }
            _3215 = frontier_phi_60_61_ladder_4;
            _3217 = frontier_phi_60_61_ladder_3;
            _3219 = frontier_phi_60_61_ladder_2;
            _3221 = frontier_phi_60_61_ladder_5;
            _3223 = frontier_phi_60_61_ladder_1;
            _3225 = frontier_phi_60_61_ladder;
        }
        float _3230 = isnan(1.0) ? _1008 : (isnan(_1008) ? 1.0 : min(_1008, 1.0));
        _3036 = (_3230 * _3221) + _2548;
        _3038 = (_3230 * _3223) + _2550;
        _3040 = (_3230 * _3225) + _2552;
        _3042 = ((_3215 * _992) * _3230) + _2886;
        _3044 = ((_3217 * _994) * _3230) + _2888;
        _3046 = ((_3219 * _995) * _3230) + _2890;
    }
    else
    {
        _3036 = _2548;
        _3038 = _2550;
        _3040 = _2552;
        _3042 = _2886;
        _3044 = _2888;
        _3046 = _2890;
    }
    float _4982 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
    float _4993 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
    float _5004 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
    uint _3066 = _259 + 6u;
    float _3074 = _930 / cbSceneParam._m0[86u].x;
    float _3075 = _931 / cbSceneParam._m0[86u].y;
    vec4 _3089 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3074, _3075, (log2((isnan(cbSceneParam._m0[77u].w) ? _865 : (isnan(_865) ? cbSceneParam._m0[77u].w : min(_865, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3091 = _3089.x;
    float _3092 = _3089.y;
    float _3093 = _3089.z;
    float _3094 = _3089.w;
    float _3165;
    float _3167;
    float _3169;
    float _3171;
    if (_865 > cbSceneParam._m0[78u].w)
    {
        float _3128 = isnan(_865) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _865 : min(cbSceneParam._m0[80u].w, _865));
        float _3129 = _3128 / _865;
        float _3140 = _3129 * _915;
        float _3141 = _916 * _3129;
        float _3142 = (-0.0) - _3141;
        float _3143 = _3129 * _917;
        float _3145 = (cbSceneParam._m0[77u].w * _3142) / _3128;
        float _3146 = _3145 + cbSceneParam._m0[79u].w;
        float _3147 = cbSceneParam._m0[79u].w - _3141;
        float _3153 = sqrt(((_3140 * _3140) + (_3141 * _3141)) + (_3143 * _3143));
        float _3156 = (1.0 - (cbSceneParam._m0[77u].w / _3128)) * _3153;
        float _3161 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3163 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3316;
        if (abs((_3142 - _3145) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3316 = ((((_3146 > 0.0) ? exp2(_3161 * _3146) : (2.0 - exp2(_3163 * _3146))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3156;
        }
        else
        {
            float _3276 = 1.0 / cbSceneParam._m0[80u].x;
            float _3277 = isnan(_3147) ? _3146 : (isnan(_3146) ? _3147 : max(_3146, _3147));
            float _3278 = isnan(_3147) ? _3146 : (isnan(_3146) ? _3147 : min(_3146, _3147));
            float _3287 = isnan(0.0) ? _3277 : (isnan(_3277) ? 0.0 : min(_3277, 0.0));
            float _3288 = isnan(0.0) ? _3278 : (isnan(_3278) ? 0.0 : min(_3278, 0.0));
            _3316 = ((abs(_3153 / _3142) * cbSceneParam._m0[80u].y) * ((((_3287 - _3288) * 2.0) - ((exp2(_3161 * (isnan(0.0) ? _3277 : (isnan(_3277) ? 0.0 : max(_3277, 0.0)))) - exp2(_3161 * (isnan(0.0) ? _3278 : (isnan(_3278) ? 0.0 : max(_3278, 0.0))))) * _3276)) - ((exp2(_3163 * _3287) - exp2(_3163 * _3288)) * _3276))) + (_3156 * cbSceneParam._m0[80u].z);
        }
        vec4 _3318 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3074, _3075, 1.0), 0.0);
        float _3327 = exp2((_3316 * (-1.44269502162933349609375)) * (1.0 - _3318.w));
        float _3328 = log2(_3327);
        float _3344 = log2(_3094);
        _3165 = (exp2(_3344 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3328 * cbSceneParam._m0[78u].x)) * _3318.x) / cbSceneParam._m0[78u].x)) + _3091;
        _3167 = (exp2(_3344 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3328 * cbSceneParam._m0[78u].y)) * _3318.y) / cbSceneParam._m0[78u].y)) + _3092;
        _3169 = (exp2(_3344 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3328 * cbSceneParam._m0[78u].z)) * _3318.z) / cbSceneParam._m0[78u].z)) + _3093;
        _3171 = _3327 * _3094;
    }
    else
    {
        _3165 = _3091;
        _3167 = _3092;
        _3169 = _3093;
        _3171 = _3094;
    }
    float _3183 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3184 = _3183 == 3.0;
    float _3185 = log2(_3171);
    float _3192 = exp2(_3185 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4982 : (isnan(_4982) ? 1.0 : min(_4982, 1.0))) * (_3036 + ((isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0))) * _1008))) + ((_3042 + ((isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0))) * _1816)) * cbPerFrame._m0[3u].x));
    float _3193 = exp2(_3185 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4993 : (isnan(_4993) ? 1.0 : min(_4993, 1.0))) * (_3038 + ((isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0))) * _1008))) + ((_3044 + ((isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0))) * _1816)) * cbPerFrame._m0[3u].x));
    float _3194 = exp2(_3185 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5004 : (isnan(_5004) ? 1.0 : min(_5004, 1.0))) * (_3040 + ((isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0))) * _1008))) + ((_3046 + ((isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0))) * _1816)) * cbPerFrame._m0[3u].x));
    float _3203 = (_3183 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3203 * (_3184 ? _3192 : (_3192 + (cbSceneParam._m0[72u].w * _3165)));
    SV_Target.y = _3203 * (_3184 ? _3193 : (_3193 + (cbSceneParam._m0[72u].w * _3167)));
    SV_Target.z = _3203 * (_3184 ? _3194 : (_3194 + (cbSceneParam._m0[72u].w * _3169)));
    SV_Target.w = cbInstanceData._m0[_3066].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3066].w;
}


