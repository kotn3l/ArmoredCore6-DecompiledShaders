#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1360;
float _3765;
float _3766;
float _3767;
float _3768;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _225 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _226 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _227 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _233 = inversesqrt(dot(vec3(_225, _226, _227), vec3(_225, _226, _227)));
    float _234 = _233 * _225;
    float _235 = _233 * _226;
    float _236 = _233 * _227;
    float _240 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _241 = _240 * NORMAL.x;
    float _242 = _240 * NORMAL.y;
    float _243 = _240 * NORMAL.z;
    float _247 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _248 = _247 * TANGENT.x;
    float _249 = _247 * TANGENT.y;
    float _250 = _247 * TANGENT.z;
    uint _253 = uint(roundEven(NORMAL.w)) * 13u;
    uint _258 = _253 + 1u;
    uint _262 = _253 + 2u;
    float _271 = sqrt(((cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x) + (cbInstanceData._m0[_253].x * cbInstanceData._m0[_253].x)) + (cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x));
    float _272 = _271 * TEXCOORD.z;
    float _273 = _271 * TEXCOORD.w;
    vec4 _293 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _299 = _293.x * cbMtdParam._m0[11u].x;
    float _300 = _293.y * cbMtdParam._m0[11u].y;
    float _301 = _293.z * cbMtdParam._m0[11u].z;
    vec4 _320 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _272) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _273) + cbTextureTilingScale._m0[5u].w));
    vec4 _358 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _360 = _358.x;
    float _372 = dot(vec4(_360, _358.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _389 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_360 - _372) * cbMtdParam._m0[24u].y) + _372) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3777 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    float _390 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
    float _397 = (_390 * ((_320.x * cbMtdParam._m0[12u].x) - _299)) + _299;
    float _398 = (_390 * ((_320.y * cbMtdParam._m0[12u].y) - _300)) + _300;
    float _399 = (_390 * ((_320.z * cbMtdParam._m0[12u].z) - _301)) + _301;
    vec4 _417 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _272) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _273) + cbTextureTilingScale._m0[4u].w));
    vec4 _434 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _436 = _434.x;
    float _437 = _434.y;
    float _438 = _434.z;
    float _447 = ((_417.z - _438) * _390) + _438;
    float _450 = ((((_417.x - _436) * _390) + _436) * 2.0) + (-1.0);
    float _452 = ((((_417.y - _437) * _390) + _437) * 2.0) + (-1.0);
    float _453 = dot(vec2(_450, _452), vec2(_450, _452));
    float _3788 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _458 = sqrt(1.0 - (isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0))));
    vec4 _474 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _486 = (((_474.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _450;
    float _487 = (((_474.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _452;
    float _490 = fma(_458, _241, fma(_487, _248, _486 * _234));
    float _493 = fma(_458, _242, fma(_487, _249, _486 * _235));
    float _496 = fma(_458, _243, fma(_487, _250, _486 * _236));
    float _500 = inversesqrt(dot(vec3(_490, _493, _496), vec3(_490, _493, _496)));
    vec4 _527 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _272) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _273) + cbTextureTilingScale._m0[11u].w));
    float _529 = _527.x;
    float _530 = 1.0 - _529;
    float _536 = (cbMtdParam._m0[19u].x + dot(vec4(_500 * _490, _500 * _493, _500 * _496, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_529 - _530) * cbMtdParam._m0[24u].z) + _530) * cbMtdParam._m0[21u].z);
    float _3799 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
    float _537 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
    float _539 = (-0.0) - cbMtdParam._m0[24u].x;
    float _541 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _542 = isnan(1.0) ? _541 : (isnan(_541) ? 1.0 : min(_541, 1.0));
    float _549 = _537 - ((_537 * TEXCOORD_8.x) * _542);
    float _550 = _537 - ((_537 * TEXCOORD_8.y) * _542);
    float _551 = _537 - ((_537 * TEXCOORD_8.z) * _542);
    float _558 = (_549 * (cbMtdParam._m0[17u].x - _397)) + _397;
    float _559 = (_550 * (cbMtdParam._m0[17u].y - _398)) + _398;
    float _560 = (_551 * (cbMtdParam._m0[17u].z - _399)) + _399;
    vec4 _572 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _272) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _273) + cbTextureTilingScale._m0[19u].w));
    float _574 = _572.x;
    float _575 = 1.0 - _574;
    float _603 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_574 - _575) * cbMtdParam._m0[24u].w) + _575) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3820 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _604 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
    float _612 = ((((cbMtdParam._m0[10u].x - _558) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _604) + _558;
    float _613 = ((((cbMtdParam._m0[10u].y - _559) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _604) + _559;
    float _614 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _560)) * _604) + _560;
    vec4 _640 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _642 = _640.x;
    float _660 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _272) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _273) + cbTextureTilingScale._m0[9u].w)).x - _642) * _390) + _642;
    float _664 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _660) * cbMtdParam._m0[19u].z) + _660;
    float _666 = _664 - (_664 * _549);
    float _668 = _666 - (_666 * _604);
    float _672 = (cbMtdParam._m0[19u].w * (_474.z - _447)) + _447;
    vec4 _686 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _272) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _273) + cbTextureTilingScale._m0[15u].w));
    float _693 = (_686.x * 2.0) + (-1.0);
    float _694 = (_686.y * 2.0) + (-1.0);
    float _695 = dot(vec2(_693, _694), vec2(_693, _694));
    float _3831 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
    float _703 = ((_686.z - _672) * _549) + _672;
    float _706 = ((cbMtdParam._m0[23u].y - _703) * _604) + _703;
    vec4 _725 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _272) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _273) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _731 = (_725.x * 2.0) + (-1.0);
    float _732 = (_725.y * 2.0) + (-1.0);
    float _733 = dot(vec2(_731, _732), vec2(_731, _732));
    float _3842 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
    float _748 = ((sqrt(1.0 - (isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0)))) - _458) * _551) + _458;
    float _751 = (((_693 - _486) * _549) + _486) + (cbMtdParam._m0[21u].x * _486);
    float _752 = (((_694 - _487) * _550) + _487) + (cbMtdParam._m0[21u].x * _487);
    float _763 = (((_731 - _751) + (_751 * cbMtdParam._m0[22u].z)) * _604) + _751;
    float _764 = (((_732 - _752) + (_752 * cbMtdParam._m0[22u].z)) * _604) + _752;
    float _765 = (_604 * (sqrt(1.0 - (isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0)))) - _748)) + _748;
    float _767 = cbMtdParam._m0[22u].x + _474.w;
    float _770 = fma(_765, _241, fma(_764, _248, _763 * _234));
    float _773 = fma(_765, _242, fma(_764, _249, _763 * _235));
    float _776 = fma(_765, _243, fma(_764, _250, _763 * _236));
    float _780 = inversesqrt(dot(vec3(_770, _773, _776), vec3(_770, _773, _776)));
    float _781 = _780 * _770;
    float _782 = _780 * _773;
    float _783 = _780 * _776;
    float _3853 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _784 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
    float _3864 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _3875 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _3886 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _3897 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _3908 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _789 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
    float _803 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _843 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _853 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _843);
    float _854 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _843);
    float _855 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _843);
    float _859 = inversesqrt(dot(vec3(_853, _854, _855), vec3(_853, _854, _855)));
    float _860 = _853 * _859;
    float _861 = _854 * _859;
    float _862 = _855 * _859;
    vec4 _867 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _869 = _867.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1041 = sqrt(((_853 * _853) + (_854 * _854)) + (_855 * _855));
        float _1047 = (cbMatDynParam._m0[5u].x * _1041) + cbMatDynParam._m0[5u].y;
        float _3919 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1048 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
        float _1052 = (cbMatDynParam._m0[5u].z * _1041) + cbMatDynParam._m0[5u].w;
        float _3930 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0))) - _1048)) + _1048) < ((_869 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _880 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _881 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _899 = fma(_783, cbSceneParam._m0[5u].z, fma(_782, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _781));
    float _902 = fma(_783, cbSceneParam._m0[6u].z, fma(_782, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _781));
    float _905 = fma(_783, cbSceneParam._m0[7u].z, fma(_782, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _781));
    uint _918 = _253 + 9u;
    uint _919 = _918 + uint(cbMatDynParam._m0[0u].w);
    float _925 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0)))) * cbInstanceData._m0[_919].x;
    float _926 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0)))) * cbInstanceData._m0[_919].y;
    float _927 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0)))) * cbInstanceData._m0[_919].z;
    float _3941 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
    float _928 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
    float _3952 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
    float _929 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
    float _3963 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
    float _930 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
    float _931 = 1.0 - _789;
    float _932 = _928 * _931;
    float _933 = _929 * _931;
    float _934 = _930 * _931;
    float _939 = (_928 + (-0.039999999105930328369140625)) * _789;
    float _940 = (_929 + (-0.039999999105930328369140625)) * _789;
    float _941 = (_930 + (-0.039999999105930328369140625)) * _789;
    float _942 = _939 + 0.039999999105930328369140625;
    float _944 = _940 + 0.039999999105930328369140625;
    float _945 = _941 + 0.039999999105930328369140625;
    vec4 _954 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _880, cbSceneParam._m0[86u].y * _881));
    float _958 = ((isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0))) * TEXCOORD_5.w) * _954.x;
    float _959 = dot(vec3(_781, _782, _783), vec3(_860, _861, _862));
    float _962 = _959 * 2.0;
    float _966 = (_962 * _781) - _860;
    float _967 = (_962 * _782) - _861;
    float _968 = (_962 * _783) - _862;
    float _972 = abs(dot(vec3(_860, _861, _862), vec3(_781, _782, _783)));
    float _3974 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
    float _974 = sqrt(_784);
    float _987 = exp2((_974 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_974 * 3.0));
    float _993 = (1.0 - _987) * ((_974 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _994 = _987 * _974;
    float _1022 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1026 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1030 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1359;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1084 = fma(_1030, cbModelParam._m0[26u].z, fma(_1026, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1022));
        float _1088 = fma(_1030, cbModelParam._m0[27u].z, fma(_1026, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1022));
        float _1092 = fma(_1030, cbModelParam._m0[28u].z, fma(_1026, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1022));
        float _1117 = _1022 + _781;
        float _1118 = _1026 + _782;
        float _1119 = _1030 + _783;
        float _1129 = fma(_1119, cbModelParam._m0[26u].z, fma(_1118, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1117)) - _1084;
        float _1130 = fma(_1119, cbModelParam._m0[27u].z, fma(_1118, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1117)) - _1088;
        float _1131 = fma(_1119, cbModelParam._m0[28u].z, fma(_1118, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1117)) - _1092;
        float _1135 = inversesqrt(dot(vec3(_1129, _1130, _1131), vec3(_1129, _1130, _1131)));
        float _1148 = ((_1135 * _1129) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1084 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1149 = ((_1135 * _1130) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1088 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1150 = ((_1135 * _1131) / cbModelParam._m0[34u].z) + ((((((_1092 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1153 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1148, _1149, _1150), 0.0);
        vec4 _1160 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1148, _1149, _1150), 0.0);
        vec4 _1167 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1148, _1149, _1150), 0.0);
        vec4 _1174 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1148, _1149, _1150), 0.0);
        float _1187 = exp2((_1153.w + (-0.5)) * 20.0) * 2.0;
        float _1188 = _1187 * (_1153.x + (-0.5));
        float _1189 = _1187 * (_1153.y + (-0.5));
        float _1190 = _1187 * (_1153.z + (-0.5));
        float _1197 = exp2((_1160.w + (-0.5)) * 20.0) * 2.0;
        float _1198 = _1197 * (_1160.x + (-0.5));
        float _1199 = _1197 * (_1160.y + (-0.5));
        float _1200 = _1197 * (_1160.z + (-0.5));
        float _1207 = exp2((_1167.w + (-0.5)) * 20.0) * 2.0;
        float _1208 = _1207 * (_1167.x + (-0.5));
        float _1209 = _1207 * (_1167.y + (-0.5));
        float _1210 = _1207 * (_1167.z + (-0.5));
        float _1217 = exp2((_1174.w + (-0.5)) * 20.0) * 2.0;
        float _1218 = _1217 * (_1174.x + (-0.5));
        float _1219 = _1217 * (_1174.y + (-0.5));
        float _1220 = _1217 * (_1174.z + (-0.5));
        float _1221 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1222 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1223 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1224 = _1188 * 0.5;
        float _1225 = _1198 * 0.5;
        float _1226 = _1208 * 0.5;
        float _1227 = dot(vec3(_1224, _1225, _1226), vec3(_1224, _1225, _1226));
        float _1232 = (_1227 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1227);
        float _1241 = (dot(vec3(_781, _782, _783), vec3(_1232 * _1224, _1232 * _1225, _1232 * _1226)) + 1.0) * 0.5;
        float _4000 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1251 = sqrt(((_1225 * _1225) + (_1224 * _1224)) + (_1226 * _1226)) / (_1221 + 9.9999997473787516355514526367188e-06);
        float _4011 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1252 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
        float _1253 = _1252 * 2.0;
        float _1257 = (1.0 - _1252) / (_1252 + 1.0);
        float _4022 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1258 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
        float _1267 = ((((1.0 - _1258) * (_1253 + 2.0)) * exp2(log2(isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0))) * (_1253 + 1.0))) + _1258) * _1221;
        float _1268 = _1189 * 0.5;
        float _1269 = _1199 * 0.5;
        float _1270 = _1209 * 0.5;
        float _1271 = dot(vec3(_1268, _1269, _1270), vec3(_1268, _1269, _1270));
        float _1276 = (_1271 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1271);
        float _1284 = (dot(vec3(_781, _782, _783), vec3(_1276 * _1268, _1276 * _1269, _1276 * _1270)) + 1.0) * 0.5;
        float _4033 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1293 = sqrt(((_1269 * _1269) + (_1268 * _1268)) + (_1270 * _1270)) / (_1222 + 9.9999997473787516355514526367188e-06);
        float _4044 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1294 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
        float _1295 = _1294 * 2.0;
        float _1299 = (1.0 - _1294) / (_1294 + 1.0);
        float _4055 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1300 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
        float _1309 = ((((1.0 - _1300) * (_1295 + 2.0)) * exp2(log2(isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0))) * (_1295 + 1.0))) + _1300) * _1222;
        float _1310 = _1190 * 0.5;
        float _1311 = _1200 * 0.5;
        float _1312 = _1210 * 0.5;
        float _1313 = dot(vec3(_1310, _1311, _1312), vec3(_1310, _1311, _1312));
        float _1318 = (_1313 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1313);
        float _1326 = (dot(vec3(_781, _782, _783), vec3(_1318 * _1310, _1318 * _1311, _1318 * _1312)) + 1.0) * 0.5;
        float _4066 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1335 = sqrt(((_1311 * _1311) + (_1310 * _1310)) + (_1312 * _1312)) / (_1223 + 9.9999997473787516355514526367188e-06);
        float _4077 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1336 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
        float _1337 = _1336 * 2.0;
        float _1341 = (1.0 - _1336) / (_1336 + 1.0);
        float _4088 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1342 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
        float _1351 = ((((1.0 - _1342) * (_1337 + 2.0)) * exp2(log2(isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0))) * (_1337 + 1.0))) + _1342) * _1223;
        _1359 = _1190;
        _1361 = _1189;
        _1362 = _1188;
        _1363 = _1200;
        _1364 = _1199;
        _1365 = _1198;
        _1366 = _1210;
        _1367 = _1209;
        _1368 = _1208;
        _1369 = _1223;
        _1370 = _1222;
        _1371 = _1221;
        _1372 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0)));
        _1373 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0)));
        _1374 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0)));
    }
    else
    {
        _1359 = _1360;
        _1361 = _1360;
        _1362 = _1360;
        _1363 = _1360;
        _1364 = _1360;
        _1365 = _1360;
        _1366 = _1360;
        _1367 = _1360;
        _1368 = _1360;
        _1369 = _1360;
        _1370 = _1360;
        _1371 = _1360;
        _1372 = 0.0;
        _1373 = 0.0;
        _1374 = 0.0;
    }
    float _1671;
    float _1672;
    float _1673;
    float _1674;
    float _1675;
    float _1676;
    float _1677;
    float _1678;
    float _1679;
    float _1680;
    float _1681;
    float _1682;
    float _1683;
    float _1684;
    float _1685;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1402 = fma(_1030, cbModelParam._m0[30u].z, fma(_1026, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1022));
        float _1406 = fma(_1030, cbModelParam._m0[31u].z, fma(_1026, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1022));
        float _1410 = fma(_1030, cbModelParam._m0[32u].z, fma(_1026, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1022));
        float _1433 = _1022 + _781;
        float _1434 = _1026 + _782;
        float _1435 = _1030 + _783;
        float _1445 = fma(_1435, cbModelParam._m0[30u].z, fma(_1434, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1433)) - _1402;
        float _1446 = fma(_1435, cbModelParam._m0[31u].z, fma(_1434, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1433)) - _1406;
        float _1447 = fma(_1435, cbModelParam._m0[32u].z, fma(_1434, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1433)) - _1410;
        float _1451 = inversesqrt(dot(vec3(_1445, _1446, _1447), vec3(_1445, _1446, _1447)));
        float _1464 = ((_1451 * _1445) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1402 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1465 = ((_1451 * _1446) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1406 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1466 = ((_1451 * _1447) / cbModelParam._m0[35u].z) + ((((((_1410 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1468 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1464, _1465, _1466), 0.0);
        vec4 _1475 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1464, _1465, _1466), 0.0);
        vec4 _1482 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1464, _1465, _1466), 0.0);
        vec4 _1489 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1464, _1465, _1466), 0.0);
        float _1501 = exp2((_1468.w + (-0.5)) * 20.0) * 2.0;
        float _1502 = _1501 * (_1468.x + (-0.5));
        float _1503 = _1501 * (_1468.y + (-0.5));
        float _1504 = _1501 * (_1468.z + (-0.5));
        float _1511 = exp2((_1475.w + (-0.5)) * 20.0) * 2.0;
        float _1512 = _1511 * (_1475.x + (-0.5));
        float _1513 = _1511 * (_1475.y + (-0.5));
        float _1514 = _1511 * (_1475.z + (-0.5));
        float _1521 = exp2((_1482.w + (-0.5)) * 20.0) * 2.0;
        float _1522 = _1521 * (_1482.x + (-0.5));
        float _1523 = _1521 * (_1482.y + (-0.5));
        float _1524 = _1521 * (_1482.z + (-0.5));
        float _1531 = exp2((_1489.w + (-0.5)) * 20.0) * 2.0;
        float _1532 = _1531 * (_1489.x + (-0.5));
        float _1533 = _1531 * (_1489.y + (-0.5));
        float _1534 = _1531 * (_1489.z + (-0.5));
        float _1535 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1536 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1537 = isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0));
        float _1538 = _1502 * 0.5;
        float _1539 = _1512 * 0.5;
        float _1540 = _1522 * 0.5;
        float _1541 = dot(vec3(_1538, _1539, _1540), vec3(_1538, _1539, _1540));
        float _1546 = (_1541 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1541);
        float _1554 = (dot(vec3(_781, _782, _783), vec3(_1546 * _1538, _1546 * _1539, _1546 * _1540)) + 1.0) * 0.5;
        float _4129 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1563 = sqrt(((_1539 * _1539) + (_1538 * _1538)) + (_1540 * _1540)) / (_1535 + 9.9999997473787516355514526367188e-06);
        float _4140 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0));
        float _1564 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
        float _1565 = _1564 * 2.0;
        float _1569 = (1.0 - _1564) / (_1564 + 1.0);
        float _4151 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
        float _1570 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
        float _1579 = ((((1.0 - _1570) * (_1565 + 2.0)) * exp2(log2(isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0))) * (_1565 + 1.0))) + _1570) * _1535;
        float _1580 = _1503 * 0.5;
        float _1581 = _1513 * 0.5;
        float _1582 = _1523 * 0.5;
        float _1583 = dot(vec3(_1580, _1581, _1582), vec3(_1580, _1581, _1582));
        float _1588 = (_1583 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1583);
        float _1596 = (dot(vec3(_781, _782, _783), vec3(_1588 * _1580, _1588 * _1581, _1588 * _1582)) + 1.0) * 0.5;
        float _4162 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
        float _1605 = sqrt(((_1581 * _1581) + (_1580 * _1580)) + (_1582 * _1582)) / (_1536 + 9.9999997473787516355514526367188e-06);
        float _4173 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
        float _1606 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
        float _1607 = _1606 * 2.0;
        float _1611 = (1.0 - _1606) / (_1606 + 1.0);
        float _4184 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
        float _1612 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
        float _1621 = ((((1.0 - _1612) * (_1607 + 2.0)) * exp2(log2(isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0))) * (_1607 + 1.0))) + _1612) * _1536;
        float _1622 = _1504 * 0.5;
        float _1623 = _1514 * 0.5;
        float _1624 = _1524 * 0.5;
        float _1625 = dot(vec3(_1622, _1623, _1624), vec3(_1622, _1623, _1624));
        float _1630 = (_1625 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1625);
        float _1638 = (dot(vec3(_781, _782, _783), vec3(_1630 * _1622, _1630 * _1623, _1630 * _1624)) + 1.0) * 0.5;
        float _4195 = isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0));
        float _1647 = sqrt(((_1623 * _1623) + (_1622 * _1622)) + (_1624 * _1624)) / (_1537 + 9.9999997473787516355514526367188e-06);
        float _4206 = isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0));
        float _1648 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
        float _1649 = _1648 * 2.0;
        float _1653 = (1.0 - _1648) / (_1648 + 1.0);
        float _4217 = isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0));
        float _1654 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
        float _1663 = ((((1.0 - _1654) * (_1649 + 2.0)) * exp2(log2(isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0))) * (_1649 + 1.0))) + _1654) * _1537;
        _1671 = _1504;
        _1672 = _1503;
        _1673 = _1502;
        _1674 = _1514;
        _1675 = _1513;
        _1676 = _1512;
        _1677 = _1524;
        _1678 = _1523;
        _1679 = _1522;
        _1680 = _1537;
        _1681 = _1536;
        _1682 = _1535;
        _1683 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0)));
        _1684 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0)));
        _1685 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0)));
    }
    else
    {
        _1671 = _1360;
        _1672 = _1360;
        _1673 = _1360;
        _1674 = _1360;
        _1675 = _1360;
        _1676 = _1360;
        _1677 = _1360;
        _1678 = _1360;
        _1679 = _1360;
        _1680 = _1360;
        _1681 = _1360;
        _1682 = _1360;
        _1683 = 0.0;
        _1684 = 0.0;
        _1685 = 0.0;
    }
    float _1695 = (cbModelParam._m0[1u].x * (_1683 - _1372)) + _1372;
    float _1696 = (cbModelParam._m0[1u].x * (_1684 - _1373)) + _1373;
    float _1697 = (cbModelParam._m0[1u].x * (_1685 - _1374)) + _1374;
    float _1718 = fma(_1697, cbSceneParam._m0[89u].z, fma(_1696, cbSceneParam._m0[89u].y, _1695 * cbSceneParam._m0[89u].x));
    float _1721 = fma(_1697, cbSceneParam._m0[90u].z, fma(_1696, cbSceneParam._m0[90u].y, _1695 * cbSceneParam._m0[90u].x));
    float _1724 = fma(_1697, cbSceneParam._m0[91u].z, fma(_1696, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1695));
    float _1739 = _966 * 0.5;
    float _1740 = _967 * 0.5;
    float _1741 = _968 * 0.5;
    float _1742 = dot(vec4(_1739, _1740, _1741, 1.0), vec4(_1673, _1676, _1679, _1682));
    float _1745 = dot(vec4(_1739, _1740, _1741, 1.0), vec4(_1672, _1675, _1678, _1681));
    float _1748 = dot(vec4(_1739, _1740, _1741, 1.0), vec4(_1671, _1674, _1677, _1680));
    float _1782;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1755 = dot(vec4(_1739, _1740, _1741, 1.0), vec4(_1359, _1363, _1366, _1369));
        float _1759 = dot(vec4(_1739, _1740, _1741, 1.0), vec4(_1361, _1364, _1367, _1370));
        float _1763 = dot(vec4(_1739, _1740, _1741, 1.0), vec4(_1362, _1365, _1368, _1371));
        float _1770 = dot(vec4(cbModelParam._m0[39u]), vec4(_1739, _1740, _1741, 1.0));
        _1782 = dot(vec3(isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0)), isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0)), isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1770) ? 0.0 : (isnan(0.0) ? _1770 : max(0.0, _1770))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1782 = 1.0;
    }
    float _1793;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1784 = dot(vec4(cbModelParam._m0[40u]), vec4(_1739, _1740, _1741, 1.0));
        _1793 = dot(vec3(isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0)), isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0)), isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1784) ? 0.0 : (isnan(0.0) ? _1784 : max(0.0, _1784))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1793 = 1.0;
    }
    float _1797 = (_1793 * cbModelParam._m0[1u].x) + (_1782 * (1.0 - cbModelParam._m0[1u].x));
    float _1807 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _784);
    float _1808 = isnan(_1807) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1807 : min(cbModelParam._m0[25u].z, _1807));
    float _1889;
    float _1891;
    float _1893;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1856 = fma(_1030, cbModelParam._m0[13u].z, fma(_1026, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1022)) + cbModelParam._m0[13u].w;
        float _1860 = fma(_1030, cbModelParam._m0[14u].z, fma(_1026, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1022)) + cbModelParam._m0[14u].w;
        float _1864 = fma(_1030, cbModelParam._m0[15u].z, fma(_1026, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1022)) + cbModelParam._m0[15u].w;
        float _1867 = fma(_968, cbModelParam._m0[13u].z, fma(_967, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _966));
        float _1870 = fma(_968, cbModelParam._m0[14u].z, fma(_967, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _966));
        float _1873 = fma(_968, cbModelParam._m0[15u].z, fma(_967, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _966));
        float _1901;
        if (_1867 > 0.0)
        {
            _1901 = abs((1.0 - _1856) / _1867);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1867 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1856 + 1.0) / _1867);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1901 = frontier_phi_17_15_ladder;
        }
        float _2125;
        if (_1870 > 0.0)
        {
            _2125 = abs((1.0 - _1860) / _1870);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1870 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1860 + 1.0) / _1870);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2125 = frontier_phi_26_22_ladder;
        }
        float _2382;
        if (_1873 > 0.0)
        {
            _2382 = abs((1.0 - _1864) / _1873);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1873 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1864 + 1.0) / _1873);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2382 = frontier_phi_38_33_ladder;
        }
        float _2384 = isnan(_2125) ? _1901 : (isnan(_1901) ? _2125 : min(_1901, _2125));
        float _2385 = isnan(_2382) ? _2384 : (isnan(_2384) ? _2382 : min(_2384, _2382));
        float _2389 = (_2385 * _1867) + _1856;
        float _2390 = (_2385 * _1870) + _1860;
        float _2391 = (_2385 * _1873) + _1864;
        float _2392 = _2385 * 9.9999997473787516355514526367188e-05;
        float _2394 = (-1.0) - _2392;
        float _2396 = _2392 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2391 > _2396) || ((_2391 < _2394) || ((_2390 > _2396) || ((_2390 < _2394) || ((_2389 < _2394) || (_2389 > _2396))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2519 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2391, cbModelParam._m0[9u].z, fma(_2390, cbModelParam._m0[9u].y, _2389 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2391, cbModelParam._m0[10u].z, fma(_2390, cbModelParam._m0[10u].y, _2389 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2391, cbModelParam._m0[11u].z, fma(_2390, cbModelParam._m0[11u].y, _2389 * cbModelParam._m0[11u].x))), _1808);
            frontier_phi_16_38_ladder = _2519.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2519.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2519.x * cbModelParam._m0[1u].y;
        }
        _1889 = frontier_phi_16_38_ladder_2;
        _1891 = frontier_phi_16_38_ladder_1;
        _1893 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1877 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_966, _967, _968), _1808);
        _1889 = _1877.x * cbModelParam._m0[1u].y;
        _1891 = _1877.y * cbModelParam._m0[1u].y;
        _1893 = _1877.z * cbModelParam._m0[1u].y;
    }
    float _1897 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _784);
    float _1898 = isnan(_1897) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1897 : min(cbModelParam._m0[25u].w, _1897));
    float _1988;
    float _1990;
    float _1992;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1952 = fma(_1030, cbModelParam._m0[21u].z, fma(_1026, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1022)) + cbModelParam._m0[21u].w;
        float _1956 = fma(_1030, cbModelParam._m0[22u].z, fma(_1026, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1022)) + cbModelParam._m0[22u].w;
        float _1960 = fma(_1030, cbModelParam._m0[23u].z, fma(_1026, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1022)) + cbModelParam._m0[23u].w;
        float _1963 = fma(_968, cbModelParam._m0[21u].z, fma(_967, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _966));
        float _1966 = fma(_968, cbModelParam._m0[22u].z, fma(_967, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _966));
        float _1969 = fma(_968, cbModelParam._m0[23u].z, fma(_967, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _966));
        float _2130;
        if (_1963 > 0.0)
        {
            _2130 = abs((1.0 - _1952) / _1963);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1963 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1952 + 1.0) / _1963);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2130 = frontier_phi_28_24_ladder;
        }
        float _2409;
        if (_1966 > 0.0)
        {
            _2409 = abs((1.0 - _1956) / _1966);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1966 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1956 + 1.0) / _1966);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2409 = frontier_phi_40_35_ladder;
        }
        float _2622;
        if (_1969 > 0.0)
        {
            _2622 = abs((1.0 - _1960) / _1969);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1969 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1960 + 1.0) / _1969);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2622 = frontier_phi_49_46_ladder;
        }
        float _2624 = isnan(_2409) ? _2130 : (isnan(_2130) ? _2409 : min(_2130, _2409));
        float _2625 = isnan(_2622) ? _2624 : (isnan(_2624) ? _2622 : min(_2624, _2622));
        float _2629 = (_2625 * _1963) + _1952;
        float _2630 = (_2625 * _1966) + _1956;
        float _2631 = (_2625 * _1969) + _1960;
        float _2632 = _2625 * 9.9999997473787516355514526367188e-05;
        float _2633 = (-1.0) - _2632;
        float _2635 = _2632 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2631 > _2635) || ((_2631 < _2633) || ((_2630 > _2635) || ((_2630 < _2633) || ((_2629 < _2633) || (_2629 > _2635))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2830 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2631, cbModelParam._m0[17u].z, fma(_2630, cbModelParam._m0[17u].y, _2629 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2631, cbModelParam._m0[18u].z, fma(_2630, cbModelParam._m0[18u].y, _2629 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2631, cbModelParam._m0[19u].z, fma(_2630, cbModelParam._m0[19u].y, _2629 * cbModelParam._m0[19u].x))), _1898);
            frontier_phi_25_49_ladder = _2830.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2830.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2830.x * cbModelParam._m0[1u].z;
        }
        _1988 = frontier_phi_25_49_ladder_2;
        _1990 = frontier_phi_25_49_ladder_1;
        _1992 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1972 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_966, _967, _968), _1898);
        _1988 = _1972.x * cbModelParam._m0[1u].z;
        _1990 = _1972.y * cbModelParam._m0[1u].z;
        _1992 = _1972.z * cbModelParam._m0[1u].z;
    }
    float _2005 = (((_993 * _942) + _994) * _958) * ((cbModelParam._m0[1u].w * (_1988 - _1889)) + _1889);
    float _2007 = (((_993 * _944) + _994) * _958) * ((cbModelParam._m0[1u].w * (_1990 - _1891)) + _1891);
    float _2009 = (((_993 * _945) + _994) * _958) * ((cbModelParam._m0[1u].w * (_1992 - _1893)) + _1893);
    float _2012 = fma(_2009, cbSceneParam._m0[89u].z, fma(_2007, cbSceneParam._m0[89u].y, _2005 * cbSceneParam._m0[89u].x));
    float _2015 = fma(_2009, cbSceneParam._m0[90u].z, fma(_2007, cbSceneParam._m0[90u].y, _2005 * cbSceneParam._m0[90u].x));
    float _2018 = fma(_2009, cbSceneParam._m0[91u].z, fma(_2007, cbSceneParam._m0[91u].y, _2005 * cbSceneParam._m0[91u].x));
    vec4 _2026 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_880, _881));
    float _2028 = _2026.w;
    float _2040 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2028);
    float _2041 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2028);
    float _2042 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2028);
    uvec4 _2046 = floatBitsToUint(cbInstanceData._m0[_253 + 5u]);
    uint _2048 = _2046.x * 14u;
    uint _2049 = _2048 + 13u;
    float _2056 = _958 + (-1.0);
    float _2061 = (cbLight._m0[_2049].x * _2056) + 1.0;
    float _2062 = (cbLight._m0[_2049].y * _2056) + 1.0;
    float _2063 = (cbLight._m0[_2049].z * _2056) + 1.0;
    float _2064 = (cbLight._m0[_2049].w * _2056) + 1.0;
    uint _2065 = _2048 + 5u;
    float _2071 = isnan(1.0) ? _2062 : (isnan(_2062) ? 1.0 : min(_2062, 1.0));
    uint _2075 = _2048 + 4u;
    float _2084 = isnan(1.0) ? _2061 : (isnan(_2061) ? 1.0 : min(_2061, 1.0));
    uint _2088 = _2048 | 1u;
    float _2099 = dot(vec3(cbLight._m0[_2048].xyz), vec3(_781, _782, _783));
    float _2102 = dot(vec3(cbLight._m0[_2088].xyz), vec3(_781, _782, _783));
    float _4353 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
    float _4364 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0));
    float _2107 = (isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0))) * 0.3183098733425140380859375;
    float _2109 = (isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0))) * 0.3183098733425140380859375;
    float _2116 = ((cbLight._m0[_2065].x * _2071) * _2109) + (((cbLight._m0[_2075].x * _2040) * _2084) * _2107);
    float _2117 = ((_2071 * cbLight._m0[_2065].y) * _2109) + (((cbLight._m0[_2075].y * _2041) * _2084) * _2107);
    float _2118 = ((_2071 * cbLight._m0[_2065].z) * _2109) + (((cbLight._m0[_2075].z * _2042) * _2084) * _2107);
    uvec4 _2122 = floatBitsToUint(cbLight._m0[_2048 + 12u]);
    bool _2124 = _2122.x == 0u;
    float _2135;
    float _2137;
    float _2139;
    if (_2124)
    {
        _2135 = _2116;
        _2137 = _2117;
        _2139 = _2118;
    }
    else
    {
        uint _2143 = _2048 + 6u;
        float _2159 = (dot(vec3(cbLight._m0[_2048 + 2u].xyz), vec3(_781, _782, _783)) * 0.5) + 0.5;
        float _2160 = _2159 * _2159;
        float _4375 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
        float _2161 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
        float _2162 = isnan(1.0) ? _2063 : (isnan(_2063) ? 1.0 : min(_2063, 1.0));
        _2135 = (((cbLight._m0[_2143].x * 0.3183098733425140380859375) * _2161) * _2162) + _2116;
        _2137 = (((cbLight._m0[_2143].y * 0.3183098733425140380859375) * _2161) * _2162) + _2117;
        _2139 = (((cbLight._m0[_2143].z * 0.3183098733425140380859375) * _2161) * _2162) + _2118;
    }
    bool _2142 = _2122.y == 0u;
    float _2180;
    float _2182;
    float _2184;
    if (_2142)
    {
        _2180 = _2135;
        _2182 = _2137;
        _2184 = _2139;
    }
    else
    {
        uint _2353 = _2048 + 7u;
        float _2369 = (dot(vec3(cbLight._m0[_2048 + 3u].xyz), vec3(_781, _782, _783)) * 0.5) + 0.5;
        float _2370 = _2369 * _2369;
        float _4391 = isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0));
        float _2371 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
        float _2372 = isnan(1.0) ? _2064 : (isnan(_2064) ? 1.0 : min(_2064, 1.0));
        _2180 = (((cbLight._m0[_2353].x * 0.3183098733425140380859375) * _2371) * _2372) + _2135;
        _2182 = (((cbLight._m0[_2353].y * 0.3183098733425140380859375) * _2371) * _2372) + _2137;
        _2184 = (((cbLight._m0[_2353].z * 0.3183098733425140380859375) * _2371) * _2372) + _2139;
    }
    uint _2187 = _2048 + 8u;
    float _2200 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2048].w)) * _784) * 0.949999988079071044921875);
    float _2201 = _2200 * _2200;
    float _2202 = cbLight._m0[_2048].x + _860;
    float _2203 = cbLight._m0[_2048].y + _861;
    float _2204 = cbLight._m0[_2048].z + _862;
    float _2208 = inversesqrt(dot(vec3(_2202, _2203, _2204), vec3(_2202, _2203, _2204)));
    float _2209 = _2208 * _2202;
    float _2210 = _2208 * _2203;
    float _2211 = _2208 * _2204;
    float _2212 = dot(vec3(_781, _782, _783), vec3(cbLight._m0[_2048].xyz));
    float _4407 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
    float _2215 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
    float _4418 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
    float _2216 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
    float _2217 = dot(vec3(_781, _782, _783), vec3(_2209, _2210, _2211));
    float _4429 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
    float _2220 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
    float _2221 = dot(vec3(cbLight._m0[_2048].xyz), vec3(_2209, _2210, _2211));
    float _4440 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
    float _2225 = _2201 * _2201;
    float _2229 = ((_2220 * _2220) * (_2225 + (-1.0))) + 1.0;
    float _2237 = exp2(log2(1.0 - (isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0)))) * 5.0);
    float _2238 = 0.959999978542327880859375 - _939;
    float _2240 = 0.959999978542327880859375 - _940;
    float _2241 = 0.959999978542327880859375 - _941;
    float _2248 = 1.0 - _2201;
    float _2259 = (0.5 / (((_2216 * ((_2215 * _2248) + _2201)) + 9.9999999392252902907785028219223e-09) + (((_2216 * _2248) + _2201) * _2215))) * _2215;
    float _4451 = isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0));
    float _2261 = (isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0))) * (_2225 / ((_2229 * _2229) * 3.141590118408203125));
    uint _2275 = _2048 + 9u;
    float _2286 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2088].w)) * _784) * 0.949999988079071044921875);
    float _2287 = _2286 * _2286;
    float _2288 = cbLight._m0[_2088].x + _860;
    float _2289 = cbLight._m0[_2088].y + _861;
    float _2290 = cbLight._m0[_2088].z + _862;
    float _2294 = inversesqrt(dot(vec3(_2288, _2289, _2290), vec3(_2288, _2289, _2290)));
    float _2295 = _2294 * _2288;
    float _2296 = _2294 * _2289;
    float _2297 = _2294 * _2290;
    float _2298 = dot(vec3(_781, _782, _783), vec3(cbLight._m0[_2088].xyz));
    float _4462 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
    float _2301 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
    float _2302 = dot(vec3(_781, _782, _783), vec3(_2295, _2296, _2297));
    float _4473 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
    float _2305 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
    float _2306 = dot(vec3(cbLight._m0[_2088].xyz), vec3(_2295, _2296, _2297));
    float _4484 = isnan(0.0) ? _2306 : (isnan(_2306) ? 0.0 : max(_2306, 0.0));
    float _2310 = _2287 * _2287;
    float _2314 = ((_2305 * _2305) * (_2310 + (-1.0))) + 1.0;
    float _2321 = exp2(log2(1.0 - (isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0)))) * 5.0);
    float _2328 = 1.0 - _2287;
    float _2338 = (0.5 / (((_2216 * ((_2301 * _2328) + _2287)) + 9.9999999392252902907785028219223e-09) + (((_2216 * _2328) + _2287) * _2301))) * _2301;
    float _4495 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
    float _2340 = (isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0))) * (_2310 / ((_2314 * _2314) * 3.141590118408203125));
    float _2350 = (((((_2321 * _2238) + _942) * cbLight._m0[_2275].x) * _2340) * _2071) + ((((cbLight._m0[_2187].x * _2040) * ((_2237 * _2238) + _942)) * _2261) * _2084);
    float _2351 = (((((_2321 * _2240) + _944) * cbLight._m0[_2275].y) * _2340) * _2071) + ((((cbLight._m0[_2187].y * _2041) * ((_2237 * _2240) + _944)) * _2261) * _2084);
    float _2352 = (((((_2321 * _2241) + _945) * cbLight._m0[_2275].z) * _2340) * _2071) + ((((cbLight._m0[_2187].z * _2042) * ((_2237 * _2241) + _945)) * _2261) * _2084);
    float _2414;
    float _2416;
    float _2418;
    if (_2124)
    {
        _2414 = _2350;
        _2416 = _2351;
        _2418 = _2352;
    }
    else
    {
        uint _2420 = _2048 + 2u;
        uint _2424 = _2048 + 10u;
        float _2438 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2420].w)) * _784) * 0.949999988079071044921875);
        float _2439 = _2438 * _2438;
        float _2440 = cbLight._m0[_2420].x + _860;
        float _2441 = cbLight._m0[_2420].y + _861;
        float _2442 = cbLight._m0[_2420].z + _862;
        float _2446 = inversesqrt(dot(vec3(_2440, _2441, _2442), vec3(_2440, _2441, _2442)));
        float _2447 = _2446 * _2440;
        float _2448 = _2446 * _2441;
        float _2449 = _2446 * _2442;
        float _2450 = dot(vec3(_781, _782, _783), vec3(cbLight._m0[_2420].xyz));
        float _4506 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
        float _2453 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
        float _2454 = dot(vec3(_781, _782, _783), vec3(_2447, _2448, _2449));
        float _4517 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
        float _2457 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
        float _2458 = dot(vec3(cbLight._m0[_2420].xyz), vec3(_2447, _2448, _2449));
        float _4528 = isnan(0.0) ? _2458 : (isnan(_2458) ? 0.0 : max(_2458, 0.0));
        float _2462 = _2439 * _2439;
        float _2466 = ((_2457 * _2457) * (_2462 + (-1.0))) + 1.0;
        float _2473 = exp2(log2(1.0 - (isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0)))) * 5.0);
        float _2480 = 1.0 - _2439;
        float _2490 = (0.5 / (((_2216 * ((_2453 * _2480) + _2439)) + 9.9999999392252902907785028219223e-09) + (((_2216 * _2480) + _2439) * _2453))) * _2453;
        float _4539 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
        float _2492 = (isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0))) * (_2462 / ((_2466 * _2466) * 3.141590118408203125));
        float _2493 = isnan(1.0) ? _2063 : (isnan(_2063) ? 1.0 : min(_2063, 1.0));
        _2414 = (((((_2473 * _2238) + _942) * cbLight._m0[_2424].x) * _2492) * _2493) + _2350;
        _2416 = (((((_2473 * _2240) + _944) * cbLight._m0[_2424].y) * _2492) * _2493) + _2351;
        _2418 = (((((_2473 * _2241) + _945) * cbLight._m0[_2424].z) * _2492) * _2493) + _2352;
    }
    float _2528;
    float _2530;
    float _2532;
    if (_2142)
    {
        _2528 = _2414;
        _2530 = _2416;
        _2532 = _2418;
    }
    else
    {
        uint _2539 = _2048 + 3u;
        uint _2543 = _2048 + 11u;
        float _2557 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2539].w)) * _784) * 0.949999988079071044921875);
        float _2558 = _2557 * _2557;
        float _2559 = cbLight._m0[_2539].x + _860;
        float _2560 = cbLight._m0[_2539].y + _861;
        float _2561 = cbLight._m0[_2539].z + _862;
        float _2565 = inversesqrt(dot(vec3(_2559, _2560, _2561), vec3(_2559, _2560, _2561)));
        float _2566 = _2565 * _2559;
        float _2567 = _2565 * _2560;
        float _2568 = _2565 * _2561;
        float _2569 = dot(vec3(_781, _782, _783), vec3(cbLight._m0[_2539].xyz));
        float _4555 = isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : max(_2569, 0.0));
        float _2572 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
        float _2573 = dot(vec3(_781, _782, _783), vec3(_2566, _2567, _2568));
        float _4566 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0));
        float _2576 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
        float _2577 = dot(vec3(cbLight._m0[_2539].xyz), vec3(_2566, _2567, _2568));
        float _4577 = isnan(0.0) ? _2577 : (isnan(_2577) ? 0.0 : max(_2577, 0.0));
        float _2581 = _2558 * _2558;
        float _2585 = ((_2576 * _2576) * (_2581 + (-1.0))) + 1.0;
        float _2592 = exp2(log2(1.0 - (isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0)))) * 5.0);
        float _2599 = 1.0 - _2558;
        float _2609 = (0.5 / (((_2216 * ((_2572 * _2599) + _2558)) + 9.9999999392252902907785028219223e-09) + (((_2216 * _2599) + _2558) * _2572))) * _2572;
        float _4588 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0));
        float _2611 = (isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0))) * (_2581 / ((_2585 * _2585) * 3.141590118408203125));
        float _2612 = isnan(1.0) ? _2064 : (isnan(_2064) ? 1.0 : min(_2064, 1.0));
        _2528 = (((((_2592 * _2238) + _942) * cbLight._m0[_2543].x) * _2611) * _2612) + _2414;
        _2530 = (((((_2592 * _2240) + _944) * cbLight._m0[_2543].y) * _2611) * _2612) + _2416;
        _2532 = (((((_2592 * _2241) + _945) * cbLight._m0[_2543].z) * _2611) * _2612) + _2418;
    }
    float _2747;
    float _2749;
    float _2751;
    float _2753;
    float _2755;
    float _2757;
    if (_2046.y == 0u)
    {
        float _2687 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2688 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2687;
        float _2689 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2687;
        float _2690 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2687;
        uvec4 _2702 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2703 = _2702.x;
        uint _2714 = uint((float(_2702.y) * floor(float(uint(cbSceneParam._m0[85u].y * _881) / _2703))) + floor(float(uint(cbSceneParam._m0[85u].x * _880) / _2703)));
        float _2724 = (log2(_2690 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2725 = isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0));
        uint _2728 = uint(isnan(14.0) ? _2725 : (isnan(_2725) ? 14.0 : min(_2725, 14.0)));
        uvec4 _2733 = texelFetch(g_lightClusterGridBuffer, int(((_2728 << 2u) + (_2714 << 6u)) >> 2u));
        uint _2734 = _2733.x;
        uint _2735 = _2702.z;
        float _2835;
        float _2837;
        float _2839;
        float _2841;
        float _2843;
        float _2845;
        if (((((1u << ((_2735 >> 4u) & 15u)) + 4294967295u) & _2734) == 0u) || ((_2735 & 240u) == 0u))
        {
            _2835 = 0.0;
            _2837 = 0.0;
            _2839 = 0.0;
            _2841 = 0.0;
            _2843 = 0.0;
            _2845 = 0.0;
        }
        else
        {
            float _2836;
            float _2838;
            float _2840;
            float _2842;
            float _2844;
            float _2846;
            float _2987 = 0.0;
            float _2988 = 0.0;
            float _2989 = 0.0;
            float _2990 = 0.0;
            float _2991 = 0.0;
            float _2992 = 0.0;
            uint _2993 = 0u;
            uint _3002;
            bool _3003;
            for (;;)
            {
                _3002 = texelFetch(g_lightClassification, int((((_2728 << 5u) + (_2714 << 9u)) + (_2993 << 2u)) >> 2u)).x;
                _3003 = _3002 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3003)
                {
                    frontier_phi_66_pred = _2987;
                    frontier_phi_66_pred_1 = _2992;
                    frontier_phi_66_pred_2 = _2991;
                    frontier_phi_66_pred_3 = _2990;
                    frontier_phi_66_pred_4 = _2989;
                    frontier_phi_66_pred_5 = _2988;
                }
                else
                {
                    float _3132;
                    float _3133;
                    float _3134;
                    float _3135;
                    float _3136;
                    float _3137;
                    uint _3138;
                    _3132 = _2987;
                    _3133 = _2988;
                    _3134 = _2989;
                    _3135 = _2990;
                    _3136 = _2991;
                    _3137 = _2992;
                    _3138 = _3002;
                    float _3059;
                    float _3060;
                    float _3061;
                    float _3062;
                    float _3063;
                    float _3064;
                    for (;;)
                    {
                        uint _3142 = uint(findLSB(_3138)) + (_2993 << 5u);
                        uint _3139 = (_3138 + 4294967295u) & _3138;
                        uint _3144 = _3142 * 48u;
                        vec4 _3158 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3144)).x, texelFetch(g_PointLightRenderingBuffer, int(_3144 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3144 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3144 + 3u)).x));
                        uint _3164 = (_3142 * 48u) + 4u;
                        vec4 _3177 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3164)).x, texelFetch(g_PointLightRenderingBuffer, int(_3164 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3164 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3164 + 3u)).x));
                        uint _3183 = (_3142 * 48u) + 8u;
                        vec3 _3194 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3183)).x, texelFetch(g_PointLightRenderingBuffer, int(_3183 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3183 + 2u)).x));
                        float _3198 = _3158.x - _2688;
                        float _3199 = _3158.y - _2689;
                        float _3200 = _3158.z - _2690;
                        float _3201 = dot(vec3(_3198, _3199, _3200), vec3(_3198, _3199, _3200));
                        float _3204 = inversesqrt(_3201);
                        float _3205 = _3204 * _3198;
                        float _3206 = _3204 * _3199;
                        float _3207 = _3204 * _3200;
                        float _3208 = dot(vec3(_899, _902, _905), vec3(_3205, _3206, _3207));
                        float _3213 = 1.0 - (_3201 * _3158.w);
                        float _4614 = isnan(0.0) ? _3213 : (isnan(_3213) ? 0.0 : max(_3213, 0.0));
                        float _3214 = isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0));
                        float _3215 = sqrt(_3201) * _3177.w;
                        float _3218 = 1.39999997615814208984375 / (_3215 + 1.39999997615814208984375);
                        float _3219 = _3218 * _3218;
                        float _3222 = ((1.0 - _3219) * _3208) + _3219;
                        float _3225 = _3215 * _3215;
                        float _3229 = ((isnan(0.0) ? _3222 : (isnan(_3222) ? 0.0 : max(_3222, 0.0))) * _3214) / ((_3225 * 0.699999988079071044921875) + 1.0);
                        float _3233 = (-0.0) - _2688;
                        float _3234 = (-0.0) - _2689;
                        float _3235 = (-0.0) - _2690;
                        float _3239 = inversesqrt(dot(vec3(_3233, _3234, _3235), vec3(_3233, _3234, _3235)));
                        float _3240 = _3239 * _3233;
                        float _3241 = _3239 * _3234;
                        float _3242 = _3239 * _3235;
                        float _3250 = exp2(log2(1.0 / ((_3225 * 3.5) + 5.0)) * 0.25);
                        float _3251 = 1.0 - _974;
                        float _3258 = sqrt(1.0 - ((1.0 - (_3251 * _3251)) * (1.0 - (_3250 * _3250))));
                        float _3259 = _3258 * _3258;
                        float _3260 = _3259 * _3259;
                        float _3261 = _3240 + _3205;
                        float _3262 = _3241 + _3206;
                        float _3263 = _3242 + _3207;
                        float _3267 = inversesqrt(dot(vec3(_3261, _3262, _3263), vec3(_3261, _3262, _3263)));
                        float _3271 = dot(vec3(_899, _902, _905), vec3(_3240, _3241, _3242));
                        float _4630 = isnan(0.0) ? _3271 : (isnan(_3271) ? 0.0 : max(_3271, 0.0));
                        float _3274 = isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0));
                        float _3275 = dot(vec3(_899, _902, _905), vec3(_3267 * _3261, _3267 * _3262, _3267 * _3263));
                        float _4641 = isnan(0.0) ? _3275 : (isnan(_3275) ? 0.0 : max(_3275, 0.0));
                        float _3278 = isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0));
                        float _3282 = ((_3278 * _3278) * (_3260 + (-1.0))) + 1.0;
                        float _3283 = _3218 * _3259;
                        float _3284 = _3283 * _3283;
                        float _3287 = ((1.0 - _3284) * _3208) + _3284;
                        float _4652 = isnan(0.0) ? _3287 : (isnan(_3287) ? 0.0 : max(_3287, 0.0));
                        float _3288 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
                        float _3289 = 1.0 - _3259;
                        float _3299 = (0.5 / (((_3288 * ((_3274 * _3289) + _3259)) + 9.9999999392252902907785028219223e-09) + (((_3288 * _3289) + _3259) * _3274))) * _3288;
                        float _4663 = isnan(0.0) ? _3299 : (isnan(_3299) ? 0.0 : max(_3299, 0.0));
                        float _3310 = (((_3260 * 3.1415927410125732421875) * (isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0)))) / ((_3282 * _3282) * ((_3225 * 2.1991131305694580078125) + 3.141590118408203125))) * _3214;
                        _3062 = (_3229 * _3177.x) + _3135;
                        _3063 = (_3229 * _3177.y) + _3136;
                        _3064 = (_3229 * _3177.z) + _3137;
                        _3059 = (_3310 * _3194.x) + _3132;
                        _3060 = (_3310 * _3194.y) + _3133;
                        _3061 = (_3310 * _3194.z) + _3134;
                        if (_3139 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3132 = _3059;
                            _3133 = _3060;
                            _3134 = _3061;
                            _3135 = _3062;
                            _3136 = _3063;
                            _3137 = _3064;
                            _3138 = _3139;
                        }
                    }
                    frontier_phi_66_pred = _3059;
                    frontier_phi_66_pred_1 = _3064;
                    frontier_phi_66_pred_2 = _3063;
                    frontier_phi_66_pred_3 = _3062;
                    frontier_phi_66_pred_4 = _3061;
                    frontier_phi_66_pred_5 = _3060;
                }
                _2836 = frontier_phi_66_pred;
                _2846 = frontier_phi_66_pred_1;
                _2844 = frontier_phi_66_pred_2;
                _2842 = frontier_phi_66_pred_3;
                _2840 = frontier_phi_66_pred_4;
                _2838 = frontier_phi_66_pred_5;
                uint _2994 = _2993 + 1u;
                if (_2994 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2987 = _2836;
                    _2988 = _2838;
                    _2989 = _2840;
                    _2990 = _2842;
                    _2991 = _2844;
                    _2992 = _2846;
                    _2993 = _2994;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2835 = _2836;
            _2837 = _2838;
            _2839 = _2840;
            _2841 = _2842;
            _2843 = _2844;
            _2845 = _2846;
        }
        uvec4 _2849 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2850 = _2849.z;
        uint _2852 = (_2850 >> 8u) & 15u;
        float _2955;
        float _2957;
        float _2959;
        float _2961;
        float _2963;
        float _2965;
        if (((4294967295u << _2852) & _2734) == 0u)
        {
            _2955 = _2835;
            _2957 = _2837;
            _2959 = _2839;
            _2961 = _2841;
            _2963 = _2843;
            _2965 = _2845;
        }
        else
        {
            float _2980 = inversesqrt(dot(vec3(_2688, _2689, _2690), vec3(_2688, _2689, _2690)));
            float _2981 = _2980 * _2688;
            float _2982 = _2980 * _2689;
            float _2983 = _2980 * _2690;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2852 < ((_2850 >> 12u) & 15u))
            {
                float _2956;
                float _2958;
                float _2960;
                float _2962;
                float _2964;
                float _2966;
                float _3115 = _2835;
                float _3116 = _2837;
                float _3117 = _2839;
                float _3118 = _2841;
                float _3119 = _2843;
                float _3120 = _2845;
                uint _3121 = _2852;
                uint _3130;
                bool _3131;
                for (;;)
                {
                    _3130 = texelFetch(g_lightClassification, int((((_2728 << 5u) + (_2714 << 9u)) + (_3121 << 2u)) >> 2u)).x;
                    _3131 = _3130 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3131)
                    {
                        frontier_phi_77_pred = _3120;
                        frontier_phi_77_pred_1 = _3119;
                        frontier_phi_77_pred_2 = _3118;
                        frontier_phi_77_pred_3 = _3117;
                        frontier_phi_77_pred_4 = _3116;
                        frontier_phi_77_pred_5 = _3115;
                    }
                    else
                    {
                        float _3324;
                        float _3325;
                        float _3326;
                        float _3327;
                        float _3328;
                        float _3329;
                        float _3618;
                        float _3619;
                        float _3620;
                        float _3621;
                        float _3622;
                        float _3623;
                        float _3337 = _3115;
                        float _3338 = _3116;
                        float _3339 = _3117;
                        float _3340 = _3118;
                        float _3341 = _3119;
                        float _3342 = _3120;
                        uint _3343 = _3130;
                        uint _3344;
                        vec4 _3369;
                        float _3370;
                        vec4 _3385;
                        vec3 _3397;
                        vec4 _3412;
                        vec4 _3428;
                        float _3474;
                        bool _3475;
                        for (;;)
                        {
                            uint _3354 = ((_3121 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3343));
                            _3344 = (_3343 + 4294967295u) & _3343;
                            uint _3356 = _3354 * 40u;
                            _3369 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3356)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 3u)).x));
                            _3370 = _3369.w;
                            uint _3372 = (_3354 * 40u) + 4u;
                            _3385 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3372)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3372 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3372 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3372 + 3u)).x));
                            uint _3387 = (_3354 * 40u) + 8u;
                            _3397 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3387)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 2u)).x));
                            uint _3399 = (_3354 * 40u) + 16u;
                            _3412 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3399)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 3u)).x));
                            uint _3415 = (_3354 * 40u) + 20u;
                            _3428 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3415)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3415 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3415 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3415 + 3u)).x));
                            uint _3430 = (_3354 * 40u) + 24u;
                            vec4 _3443 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3430)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 3u)).x));
                            uint _3449 = (_3354 * 40u) + 28u;
                            vec4 _3462 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3449)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3449 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3449 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3449 + 3u)).x));
                            _3474 = fma(_2690, _3462.z, fma(_2689, _3462.y, _3462.x * _2688)) + _3462.w;
                            _3475 = !((fma(_2690, _3443.z, fma(_2689, _3443.y, _3443.x * _2688)) + _3443.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3475)
                            {
                                float _3502 = _3369.x - _2688;
                                float _3503 = _3369.y - _2689;
                                float _3504 = _3369.z - _2690;
                                float _3505 = dot(vec3(_3502, _3503, _3504), vec3(_3502, _3503, _3504));
                                float _3508 = inversesqrt(_3505);
                                float _3509 = _3508 * _3502;
                                float _3510 = _3508 * _3503;
                                float _3511 = _3508 * _3504;
                                float _3515 = 1.0 - (_3505 / (_3370 * _3370));
                                float _4674 = isnan(0.0) ? _3515 : (isnan(_3515) ? 0.0 : max(_3515, 0.0));
                                float _3516 = isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0));
                                float _3520 = sqrt(_3505) * _3385.w;
                                float _3522 = 1.39999997615814208984375 / (_3520 + 1.39999997615814208984375);
                                float _3523 = _3522 * _3522;
                                float _3526 = ((1.0 - _3523) * dot(vec3(_3509, _3510, _3511), vec3(_899, _902, _905))) + _3523;
                                float _3529 = _3520 * _3520;
                                float _3533 = (fma(_2690, _3412.z, fma(_2689, _3412.y, _3412.x * _2688)) + _3412.w) / _3474;
                                float _3534 = (fma(_2690, _3428.z, fma(_2689, _3428.y, _3428.x * _2688)) + _3428.w) / _3474;
                                float _3538 = 1.0 - dot(vec2(_3533, _3534), vec2(_3533, _3534));
                                float _4690 = isnan(0.0) ? _3538 : (isnan(_3538) ? 0.0 : max(_3538, 0.0));
                                float _3539 = isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0));
                                float _3540 = _3539 * (((isnan(0.0) ? _3526 : (isnan(_3526) ? 0.0 : max(_3526, 0.0))) * _3516) / ((_3529 * 0.699999988079071044921875) + 1.0));
                                float _3552 = exp2(log2(1.0 / ((_3529 * 3.5) + 5.0)) * 0.25);
                                float _3553 = 1.0 - _974;
                                float _3560 = sqrt(1.0 - ((1.0 - (_3553 * _3553)) * (1.0 - (_3552 * _3552))));
                                float _3561 = _3560 * _3560;
                                float _3562 = _3561 * _3561;
                                float _3563 = _3509 - _2981;
                                float _3564 = _3510 - _2982;
                                float _3565 = _3511 - _2983;
                                float _3569 = inversesqrt(dot(vec3(_3563, _3564, _3565), vec3(_3563, _3564, _3565)));
                                float _3573 = dot(vec3(_899, _902, _905), vec3((-0.0) - _2981, (-0.0) - _2982, (-0.0) - _2983));
                                float _4701 = isnan(0.0) ? _3573 : (isnan(_3573) ? 0.0 : max(_3573, 0.0));
                                float _3576 = isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0));
                                float _3577 = dot(vec3(_899, _902, _905), vec3(_3569 * _3563, _3569 * _3564, _3569 * _3565));
                                float _4712 = isnan(0.0) ? _3577 : (isnan(_3577) ? 0.0 : max(_3577, 0.0));
                                float _3580 = isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0));
                                float _3584 = ((_3580 * _3580) * (_3562 + (-1.0))) + 1.0;
                                float _3585 = _3522 * _3561;
                                float _3586 = _3585 * _3585;
                                float _3592 = ((1.0 - _3586) * dot(vec3(_899, _902, _905), vec3(_3509, _3510, _3511))) + _3586;
                                float _4723 = isnan(0.0) ? _3592 : (isnan(_3592) ? 0.0 : max(_3592, 0.0));
                                float _3593 = isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0));
                                float _3594 = 1.0 - _3561;
                                float _3604 = (0.5 / (((_3593 * ((_3576 * _3594) + _3561)) + 9.9999999392252902907785028219223e-09) + (((_3593 * _3594) + _3561) * _3576))) * _3593;
                                float _4734 = isnan(0.0) ? _3604 : (isnan(_3604) ? 0.0 : max(_3604, 0.0));
                                float _3614 = (_3539 * _3516) * (((_3562 * 3.1415927410125732421875) * (isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0)))) / ((_3584 * _3584) * ((_3529 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3540 * _3385.y;
                                frontier_phi_83_pred_1 = _3540 * _3385.x;
                                frontier_phi_83_pred_2 = _3614 * _3397.z;
                                frontier_phi_83_pred_3 = _3614 * _3397.y;
                                frontier_phi_83_pred_4 = _3614 * _3397.x;
                                frontier_phi_83_pred_5 = _3540 * _3385.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3622 = frontier_phi_83_pred;
                            _3621 = frontier_phi_83_pred_1;
                            _3620 = frontier_phi_83_pred_2;
                            _3619 = frontier_phi_83_pred_3;
                            _3618 = frontier_phi_83_pred_4;
                            _3623 = frontier_phi_83_pred_5;
                            _3327 = _3621 + _3340;
                            _3328 = _3622 + _3341;
                            _3329 = _3623 + _3342;
                            _3324 = _3618 + _3337;
                            _3325 = _3619 + _3338;
                            _3326 = _3620 + _3339;
                            if (_3344 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3337 = _3324;
                                _3338 = _3325;
                                _3339 = _3326;
                                _3340 = _3327;
                                _3341 = _3328;
                                _3342 = _3329;
                                _3343 = _3344;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3329;
                        frontier_phi_77_pred_1 = _3328;
                        frontier_phi_77_pred_2 = _3327;
                        frontier_phi_77_pred_3 = _3326;
                        frontier_phi_77_pred_4 = _3325;
                        frontier_phi_77_pred_5 = _3324;
                    }
                    _2966 = frontier_phi_77_pred;
                    _2964 = frontier_phi_77_pred_1;
                    _2962 = frontier_phi_77_pred_2;
                    _2960 = frontier_phi_77_pred_3;
                    _2958 = frontier_phi_77_pred_4;
                    _2956 = frontier_phi_77_pred_5;
                    uint _3122 = _3121 + 1u;
                    if (_3122 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3115 = _2956;
                        _3116 = _2958;
                        _3117 = _2960;
                        _3118 = _2962;
                        _3119 = _2964;
                        _3120 = _2966;
                        _3121 = _3122;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2960;
                frontier_phi_58_59_ladder_1 = _2966;
                frontier_phi_58_59_ladder_2 = _2964;
                frontier_phi_58_59_ladder_3 = _2962;
                frontier_phi_58_59_ladder_4 = _2958;
                frontier_phi_58_59_ladder_5 = _2956;
            }
            else
            {
                frontier_phi_58_59_ladder = _2839;
                frontier_phi_58_59_ladder_1 = _2845;
                frontier_phi_58_59_ladder_2 = _2843;
                frontier_phi_58_59_ladder_3 = _2841;
                frontier_phi_58_59_ladder_4 = _2837;
                frontier_phi_58_59_ladder_5 = _2835;
            }
            _2955 = frontier_phi_58_59_ladder_5;
            _2957 = frontier_phi_58_59_ladder_4;
            _2959 = frontier_phi_58_59_ladder;
            _2961 = frontier_phi_58_59_ladder_3;
            _2963 = frontier_phi_58_59_ladder_2;
            _2965 = frontier_phi_58_59_ladder_1;
        }
        float _2970 = isnan(1.0) ? _958 : (isnan(_958) ? 1.0 : min(_958, 1.0));
        _2747 = (_2970 * _2961) + _2180;
        _2749 = (_2970 * _2963) + _2182;
        _2751 = (_2970 * _2965) + _2184;
        _2753 = ((_2955 * _942) * _2970) + _2528;
        _2755 = ((_2957 * _944) * _2970) + _2530;
        _2757 = ((_2959 * _945) * _2970) + _2532;
    }
    else
    {
        _2747 = _2180;
        _2749 = _2182;
        _2751 = _2184;
        _2753 = _2528;
        _2755 = _2530;
        _2757 = _2532;
    }
    float _4750 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
    float _4761 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
    float _4772 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
    float _2774 = ((isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0))) * (_2747 + ((isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0))) * _958))) + ((_2753 + ((isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0))) * _1797)) * cbPerFrame._m0[3u].x);
    float _2775 = ((isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0))) * (_2749 + ((isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0))) * _958))) + ((_2755 + ((isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0))) * _1797)) * cbPerFrame._m0[3u].x);
    float _2776 = ((isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0))) * (_2751 + ((isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0))) * _958))) + ((_2757 + ((isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0))) * _1797)) * cbPerFrame._m0[3u].x);
    uint _2777 = _253 + 6u;
    float _2785 = _880 / cbSceneParam._m0[86u].x;
    float _2786 = _881 / cbSceneParam._m0[86u].y;
    vec4 _2800 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2785, _2786, (log2((isnan(cbSceneParam._m0[77u].w) ? _803 : (isnan(_803) ? cbSceneParam._m0[77u].w : min(_803, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2802 = _2800.x;
    float _2803 = _2800.y;
    float _2804 = _2800.z;
    float _2805 = _2800.w;
    float _2897;
    float _2899;
    float _2901;
    float _2903;
    if (_803 > cbSceneParam._m0[78u].w)
    {
        float _2860 = isnan(_803) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _803 : min(cbSceneParam._m0[80u].w, _803));
        float _2861 = _2860 / _803;
        float _2872 = _2861 * _853;
        float _2873 = _854 * _2861;
        float _2874 = (-0.0) - _2873;
        float _2875 = _2861 * _855;
        float _2877 = (cbSceneParam._m0[77u].w * _2874) / _2860;
        float _2878 = _2877 + cbSceneParam._m0[79u].w;
        float _2879 = cbSceneParam._m0[79u].w - _2873;
        float _2885 = sqrt(((_2872 * _2872) + (_2873 * _2873)) + (_2875 * _2875));
        float _2888 = (1.0 - (cbSceneParam._m0[77u].w / _2860)) * _2885;
        float _2893 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2895 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3072;
        if (abs((_2874 - _2877) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3072 = ((((_2878 > 0.0) ? exp2(_2893 * _2878) : (2.0 - exp2(_2895 * _2878))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2888;
        }
        else
        {
            float _3016 = 1.0 / cbSceneParam._m0[80u].x;
            float _3017 = isnan(_2879) ? _2878 : (isnan(_2878) ? _2879 : max(_2878, _2879));
            float _3018 = isnan(_2879) ? _2878 : (isnan(_2878) ? _2879 : min(_2878, _2879));
            float _3027 = isnan(0.0) ? _3017 : (isnan(_3017) ? 0.0 : min(_3017, 0.0));
            float _3028 = isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : min(_3018, 0.0));
            _3072 = ((abs(_2885 / _2874) * cbSceneParam._m0[80u].y) * ((((_3027 - _3028) * 2.0) - ((exp2(_2893 * (isnan(0.0) ? _3017 : (isnan(_3017) ? 0.0 : max(_3017, 0.0)))) - exp2(_2893 * (isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : max(_3018, 0.0))))) * _3016)) - ((exp2(_2895 * _3027) - exp2(_2895 * _3028)) * _3016))) + (_2888 * cbSceneParam._m0[80u].z);
        }
        vec4 _3074 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2785, _2786, 1.0), 0.0);
        float _3083 = exp2((_3072 * (-1.44269502162933349609375)) * (1.0 - _3074.w));
        float _3084 = log2(_3083);
        float _3100 = log2(_2805);
        _2897 = (exp2(_3100 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3084 * cbSceneParam._m0[78u].x)) * _3074.x) / cbSceneParam._m0[78u].x)) + _2802;
        _2899 = (exp2(_3100 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3084 * cbSceneParam._m0[78u].y)) * _3074.y) / cbSceneParam._m0[78u].y)) + _2803;
        _2901 = (exp2(_3100 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3084 * cbSceneParam._m0[78u].z)) * _3074.z) / cbSceneParam._m0[78u].z)) + _2804;
        _2903 = _3083 * _2805;
    }
    else
    {
        _2897 = _2802;
        _2899 = _2803;
        _2901 = _2804;
        _2903 = _2805;
    }
    bool _3110;
    vec4 _2913;
    vec4 _2935;
    float _2937;
    float _2941;
    float _2942;
    float _2943;
    float _2944;
    bool _2954;
    for (;;)
    {
        _2913 = cbMatDynParam._m0[0u];
        float _2915 = roundEven(_2913.y);
        bool _2916 = _2915 == 3.0;
        float _2917 = log2(_2903);
        float _2924 = exp2(_2917 * cbSceneParam._m0[78u].x) * _2774;
        float _2925 = exp2(_2917 * cbSceneParam._m0[78u].y) * _2775;
        float _2926 = exp2(_2917 * cbSceneParam._m0[78u].z) * _2776;
        float _2933 = _869 + (-0.5);
        _2935 = cbMtdParam._m0[1u];
        _2937 = _2935.y * _2933;
        float _2940 = (_2915 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2941 = _2940 * (_2916 ? _2924 : (_2924 + (cbSceneParam._m0[72u].w * _2897)));
        _2942 = _2940 * (_2916 ? _2925 : (_2925 + (cbSceneParam._m0[72u].w * _2899)));
        _2943 = _2940 * (_2916 ? _2926 : (_2926 + (cbSceneParam._m0[72u].w * _2901)));
        _2944 = _2933 * 0.999000012874603271484375;
        _2954 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2954)
        {
            if ((cbInstanceData._m0[_253 + 7u].x + _2944) < 0.5)
            {
                _3110 = true;
                break;
            }
        }
        uint _3051 = _918 + uint(_2913.w);
        if ((cbInstanceData._m0[_3051].w < 1.0) && ((cbInstanceData._m0[_3051].w + _2944) < 0.5))
        {
            _3110 = true;
            break;
        }
        if ((_2937 + 1.0) < _2935.x)
        {
            _3110 = true;
            break;
        }
        _3110 = false;
        break;
    }
    float _3315;
    if (_3110)
    {
        discard_state = true;
        _3315 = 0.0;
    }
    else
    {
        _3315 = cbInstanceData._m0[_2777].w;
    }
    SV_Target.x = _2941;
    SV_Target.y = _2942;
    SV_Target.z = _2943;
    SV_Target.w = _3315;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2777].w;
    discard_exit();
}


