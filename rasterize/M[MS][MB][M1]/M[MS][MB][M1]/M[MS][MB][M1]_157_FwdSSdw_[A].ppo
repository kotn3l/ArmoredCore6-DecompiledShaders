#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1370;
float _3773;
float _3774;
float _3775;
float _3776;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _225 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _226 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _227 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _233 = inversesqrt(dot(vec3(_225, _226, _227), vec3(_225, _226, _227)));
    float _234 = _233 * _225;
    float _235 = _233 * _226;
    float _236 = _233 * _227;
    float _240 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _241 = _240 * NORMAL.x;
    float _242 = _240 * NORMAL.y;
    float _243 = _240 * NORMAL.z;
    float _247 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _248 = _247 * TANGENT.x;
    float _249 = _247 * TANGENT.y;
    float _250 = _247 * TANGENT.z;
    float _261 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _263 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _264 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3785 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    float _3796 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    float _3807 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    uint _274 = uint(roundEven(NORMAL.w)) * 13u;
    uint _279 = _274 + 1u;
    uint _283 = _274 + 2u;
    float _292 = sqrt(((cbInstanceData._m0[_279].x * cbInstanceData._m0[_279].x) + (cbInstanceData._m0[_274].x * cbInstanceData._m0[_274].x)) + (cbInstanceData._m0[_283].x * cbInstanceData._m0[_283].x));
    float _293 = _292 * TEXCOORD.z;
    float _294 = _292 * TEXCOORD.w;
    vec4 _307 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _293) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _294) + cbTextureTilingScale._m0[13u].w));
    vec4 _331 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _336 = _331.x * cbMtdParam._m0[11u].x;
    float _337 = _331.y * cbMtdParam._m0[11u].y;
    float _338 = _331.z * cbMtdParam._m0[11u].z;
    vec4 _357 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _293) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _294) + cbTextureTilingScale._m0[5u].w));
    vec4 _393 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _395 = _393.x;
    float _407 = dot(vec4(_395, _393.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _424 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_395 - _407) * cbMtdParam._m0[24u].y) + _407) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3818 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _425 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
    float _432 = (_425 * ((_357.x * cbMtdParam._m0[12u].x) - _336)) + _336;
    float _433 = (_425 * ((_357.y * cbMtdParam._m0[12u].y) - _337)) + _337;
    float _434 = (_425 * ((_357.z * cbMtdParam._m0[12u].z) - _338)) + _338;
    float _438 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _307.x) * _432;
    float _441 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _307.y) * _433;
    float _444 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _307.z) * _434;
    float _451 = ((_432 - _438) * (isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0)))) + _438;
    float _452 = ((_433 - _441) * (isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0)))) + _441;
    float _453 = ((_434 - _444) * (isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0)))) + _444;
    vec4 _472 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _293) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _294) + cbTextureTilingScale._m0[14u].w));
    vec4 _492 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _293) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _294) + cbTextureTilingScale._m0[20u].w));
    vec4 _519 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _293) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _294) + cbTextureTilingScale._m0[4u].w));
    vec4 _536 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _538 = _536.x;
    float _539 = _536.y;
    float _540 = _536.z;
    float _549 = ((_519.z - _540) * _425) + _540;
    float _552 = ((((_519.x - _538) * _425) + _538) * 2.0) + (-1.0);
    float _553 = ((((_519.y - _539) * _425) + _539) * 2.0) + (-1.0);
    float _554 = dot(vec2(_552, _553), vec2(_552, _553));
    float _3829 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _559 = sqrt(1.0 - (isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0))));
    vec4 _579 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _591 = (_552 + ((((_492.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_579.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _592 = (_553 + ((((_492.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_579.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _595 = fma(_559, _241, fma(_592, _248, _591 * _234));
    float _598 = fma(_559, _242, fma(_592, _249, _591 * _235));
    float _601 = fma(_559, _243, fma(_592, _250, _591 * _236));
    float _605 = inversesqrt(dot(vec3(_595, _598, _601), vec3(_595, _598, _601)));
    vec4 _632 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _293) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _294) + cbTextureTilingScale._m0[11u].w));
    float _634 = _632.x;
    float _635 = 1.0 - _634;
    float _639 = ((_634 - _635) * cbMtdParam._m0[24u].z) + _635;
    float _641 = (cbMtdParam._m0[19u].x + dot(vec4(_605 * _595, _605 * _598, _605 * _601, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_639 * cbMtdParam._m0[21u].z);
    float _3840 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _642 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
    float _657 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_639 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3851 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _658 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
    float _662 = ((_642 * ((_472.x * cbMtdParam._m0[18u].x) - _451)) * _658) + _451;
    float _663 = ((_642 * ((_472.y * cbMtdParam._m0[18u].y) - _452)) * _658) + _452;
    float _664 = ((_642 * ((_472.z * cbMtdParam._m0[18u].z) - _453)) * _658) + _453;
    vec4 _676 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _690 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _692 = _690.x;
    float _710 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _293) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _294) + cbTextureTilingScale._m0[9u].w)).x - _692) * _425) + _692;
    float _714 = ((_676.x - _710) * cbMtdParam._m0[19u].z) + _710;
    float _717 = _714 - ((_658 * _642) * _714);
    float _722 = (((_492.z - _549) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _549;
    float _726 = ((_579.z - _722) * cbMtdParam._m0[19u].w) + _722;
    vec4 _739 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _293) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _294) + cbTextureTilingScale._m0[15u].w));
    float _746 = (_739.x * 2.0) + (-1.0);
    float _747 = (_739.y * 2.0) + (-1.0);
    float _748 = dot(vec2(_746, _747), vec2(_746, _747));
    float _3862 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
    float _757 = (((_739.z - _726) * _642) * _658) + _726;
    float _772 = (((cbMtdParam._m0[21u].x * _591) + ((_746 - _591) * _642)) * _658) + _591;
    float _773 = (((cbMtdParam._m0[21u].x * _592) + ((_747 - _592) * _642)) * _658) + _592;
    float _774 = (((sqrt(1.0 - (isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0)))) - _559) * _642) * _658) + _559;
    float _776 = cbMtdParam._m0[22u].x + _579.w;
    float _779 = fma(_774, _241, fma(_773, _248, _772 * _234));
    float _782 = fma(_774, _242, fma(_773, _249, _772 * _235));
    float _785 = fma(_774, _243, fma(_773, _250, _772 * _236));
    float _789 = inversesqrt(dot(vec3(_779, _782, _785), vec3(_779, _782, _785)));
    float _790 = _789 * _779;
    float _791 = _789 * _782;
    float _792 = _789 * _785;
    float _3873 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
    float _793 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
    float _3884 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
    float _3895 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _3906 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _3917 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _3928 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
    float _798 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
    float _812 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _853 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _863 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _853);
    float _864 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _853);
    float _865 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _853);
    float _869 = inversesqrt(dot(vec3(_863, _864, _865), vec3(_863, _864, _865)));
    float _870 = _863 * _869;
    float _871 = _864 * _869;
    float _872 = _865 * _869;
    vec4 _877 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _879 = _877.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1051 = sqrt(((_863 * _863) + (_864 * _864)) + (_865 * _865));
        float _1057 = (cbMatDynParam._m0[5u].x * _1051) + cbMatDynParam._m0[5u].y;
        float _3939 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1058 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
        float _1062 = (cbMatDynParam._m0[5u].z * _1051) + cbMatDynParam._m0[5u].w;
        float _3950 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0))) - _1058)) + _1058) < ((_879 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _890 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _891 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _909 = fma(_792, cbSceneParam._m0[5u].z, fma(_791, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _790));
    float _912 = fma(_792, cbSceneParam._m0[6u].z, fma(_791, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _790));
    float _915 = fma(_792, cbSceneParam._m0[7u].z, fma(_791, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _790));
    uint _928 = _274 + 9u;
    uint _929 = _928 + uint(cbMatDynParam._m0[0u].w);
    float _935 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0)))) * cbInstanceData._m0[_929].x;
    float _936 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0)))) * cbInstanceData._m0[_929].y;
    float _937 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0)))) * cbInstanceData._m0[_929].z;
    float _3961 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
    float _938 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
    float _3972 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
    float _939 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
    float _3983 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
    float _940 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
    float _941 = 1.0 - _798;
    float _942 = _938 * _941;
    float _943 = _939 * _941;
    float _944 = _940 * _941;
    float _949 = (_938 + (-0.039999999105930328369140625)) * _798;
    float _950 = (_939 + (-0.039999999105930328369140625)) * _798;
    float _951 = (_940 + (-0.039999999105930328369140625)) * _798;
    float _952 = _949 + 0.039999999105930328369140625;
    float _954 = _950 + 0.039999999105930328369140625;
    float _955 = _951 + 0.039999999105930328369140625;
    vec4 _964 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _890, cbSceneParam._m0[86u].y * _891));
    float _968 = ((isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0))) * TEXCOORD_5.w) * _964.x;
    float _969 = dot(vec3(_790, _791, _792), vec3(_870, _871, _872));
    float _972 = _969 * 2.0;
    float _976 = (_972 * _790) - _870;
    float _977 = (_972 * _791) - _871;
    float _978 = (_972 * _792) - _872;
    float _982 = abs(dot(vec3(_870, _871, _872), vec3(_790, _791, _792)));
    float _3994 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
    float _984 = sqrt(_793);
    float _997 = exp2((_984 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_984 * 3.0));
    float _1003 = (1.0 - _997) * ((_984 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1004 = _997 * _984;
    float _1032 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1036 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1040 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1369;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1094 = fma(_1040, cbModelParam._m0[26u].z, fma(_1036, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1032));
        float _1098 = fma(_1040, cbModelParam._m0[27u].z, fma(_1036, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1032));
        float _1102 = fma(_1040, cbModelParam._m0[28u].z, fma(_1036, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1032));
        float _1127 = _1032 + _790;
        float _1128 = _1036 + _791;
        float _1129 = _1040 + _792;
        float _1139 = fma(_1129, cbModelParam._m0[26u].z, fma(_1128, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1127)) - _1094;
        float _1140 = fma(_1129, cbModelParam._m0[27u].z, fma(_1128, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1127)) - _1098;
        float _1141 = fma(_1129, cbModelParam._m0[28u].z, fma(_1128, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1127)) - _1102;
        float _1145 = inversesqrt(dot(vec3(_1139, _1140, _1141), vec3(_1139, _1140, _1141)));
        float _1158 = ((_1145 * _1139) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1094 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1159 = ((_1145 * _1140) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1098 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1160 = ((_1145 * _1141) / cbModelParam._m0[34u].z) + ((((((_1102 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1163 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1158, _1159, _1160), 0.0);
        vec4 _1170 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1158, _1159, _1160), 0.0);
        vec4 _1177 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1158, _1159, _1160), 0.0);
        vec4 _1184 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1158, _1159, _1160), 0.0);
        float _1197 = exp2((_1163.w + (-0.5)) * 20.0) * 2.0;
        float _1198 = _1197 * (_1163.x + (-0.5));
        float _1199 = _1197 * (_1163.y + (-0.5));
        float _1200 = _1197 * (_1163.z + (-0.5));
        float _1207 = exp2((_1170.w + (-0.5)) * 20.0) * 2.0;
        float _1208 = _1207 * (_1170.x + (-0.5));
        float _1209 = _1207 * (_1170.y + (-0.5));
        float _1210 = _1207 * (_1170.z + (-0.5));
        float _1217 = exp2((_1177.w + (-0.5)) * 20.0) * 2.0;
        float _1218 = _1217 * (_1177.x + (-0.5));
        float _1219 = _1217 * (_1177.y + (-0.5));
        float _1220 = _1217 * (_1177.z + (-0.5));
        float _1227 = exp2((_1184.w + (-0.5)) * 20.0) * 2.0;
        float _1228 = _1227 * (_1184.x + (-0.5));
        float _1229 = _1227 * (_1184.y + (-0.5));
        float _1230 = _1227 * (_1184.z + (-0.5));
        float _1231 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1232 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1233 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1234 = _1198 * 0.5;
        float _1235 = _1208 * 0.5;
        float _1236 = _1218 * 0.5;
        float _1237 = dot(vec3(_1234, _1235, _1236), vec3(_1234, _1235, _1236));
        float _1242 = (_1237 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1237);
        float _1251 = (dot(vec3(_790, _791, _792), vec3(_1242 * _1234, _1242 * _1235, _1242 * _1236)) + 1.0) * 0.5;
        float _4020 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1261 = sqrt(((_1235 * _1235) + (_1234 * _1234)) + (_1236 * _1236)) / (_1231 + 9.9999997473787516355514526367188e-06);
        float _4031 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1262 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
        float _1263 = _1262 * 2.0;
        float _1267 = (1.0 - _1262) / (_1262 + 1.0);
        float _4042 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1268 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
        float _1277 = ((((1.0 - _1268) * (_1263 + 2.0)) * exp2(log2(isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0))) * (_1263 + 1.0))) + _1268) * _1231;
        float _1278 = _1199 * 0.5;
        float _1279 = _1209 * 0.5;
        float _1280 = _1219 * 0.5;
        float _1281 = dot(vec3(_1278, _1279, _1280), vec3(_1278, _1279, _1280));
        float _1286 = (_1281 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1281);
        float _1294 = (dot(vec3(_790, _791, _792), vec3(_1286 * _1278, _1286 * _1279, _1286 * _1280)) + 1.0) * 0.5;
        float _4053 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1303 = sqrt(((_1279 * _1279) + (_1278 * _1278)) + (_1280 * _1280)) / (_1232 + 9.9999997473787516355514526367188e-06);
        float _4064 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1304 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
        float _1305 = _1304 * 2.0;
        float _1309 = (1.0 - _1304) / (_1304 + 1.0);
        float _4075 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1310 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
        float _1319 = ((((1.0 - _1310) * (_1305 + 2.0)) * exp2(log2(isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0))) * (_1305 + 1.0))) + _1310) * _1232;
        float _1320 = _1200 * 0.5;
        float _1321 = _1210 * 0.5;
        float _1322 = _1220 * 0.5;
        float _1323 = dot(vec3(_1320, _1321, _1322), vec3(_1320, _1321, _1322));
        float _1328 = (_1323 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1323);
        float _1336 = (dot(vec3(_790, _791, _792), vec3(_1328 * _1320, _1328 * _1321, _1328 * _1322)) + 1.0) * 0.5;
        float _4086 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1345 = sqrt(((_1321 * _1321) + (_1320 * _1320)) + (_1322 * _1322)) / (_1233 + 9.9999997473787516355514526367188e-06);
        float _4097 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1346 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
        float _1347 = _1346 * 2.0;
        float _1351 = (1.0 - _1346) / (_1346 + 1.0);
        float _4108 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1352 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
        float _1361 = ((((1.0 - _1352) * (_1347 + 2.0)) * exp2(log2(isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0))) * (_1347 + 1.0))) + _1352) * _1233;
        _1369 = _1200;
        _1371 = _1199;
        _1372 = _1198;
        _1373 = _1210;
        _1374 = _1209;
        _1375 = _1208;
        _1376 = _1220;
        _1377 = _1219;
        _1378 = _1218;
        _1379 = _1233;
        _1380 = _1232;
        _1381 = _1231;
        _1382 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0)));
        _1383 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0)));
        _1384 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0)));
    }
    else
    {
        _1369 = _1370;
        _1371 = _1370;
        _1372 = _1370;
        _1373 = _1370;
        _1374 = _1370;
        _1375 = _1370;
        _1376 = _1370;
        _1377 = _1370;
        _1378 = _1370;
        _1379 = _1370;
        _1380 = _1370;
        _1381 = _1370;
        _1382 = 0.0;
        _1383 = 0.0;
        _1384 = 0.0;
    }
    float _1681;
    float _1682;
    float _1683;
    float _1684;
    float _1685;
    float _1686;
    float _1687;
    float _1688;
    float _1689;
    float _1690;
    float _1691;
    float _1692;
    float _1693;
    float _1694;
    float _1695;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1412 = fma(_1040, cbModelParam._m0[30u].z, fma(_1036, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1032));
        float _1416 = fma(_1040, cbModelParam._m0[31u].z, fma(_1036, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1032));
        float _1420 = fma(_1040, cbModelParam._m0[32u].z, fma(_1036, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1032));
        float _1443 = _1032 + _790;
        float _1444 = _1036 + _791;
        float _1445 = _1040 + _792;
        float _1455 = fma(_1445, cbModelParam._m0[30u].z, fma(_1444, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1443)) - _1412;
        float _1456 = fma(_1445, cbModelParam._m0[31u].z, fma(_1444, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1443)) - _1416;
        float _1457 = fma(_1445, cbModelParam._m0[32u].z, fma(_1444, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1443)) - _1420;
        float _1461 = inversesqrt(dot(vec3(_1455, _1456, _1457), vec3(_1455, _1456, _1457)));
        float _1474 = ((_1461 * _1455) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1412 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1475 = ((_1461 * _1456) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1416 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1476 = ((_1461 * _1457) / cbModelParam._m0[35u].z) + ((((((_1420 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1478 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1474, _1475, _1476), 0.0);
        vec4 _1485 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1474, _1475, _1476), 0.0);
        vec4 _1492 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1474, _1475, _1476), 0.0);
        vec4 _1499 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1474, _1475, _1476), 0.0);
        float _1511 = exp2((_1478.w + (-0.5)) * 20.0) * 2.0;
        float _1512 = _1511 * (_1478.x + (-0.5));
        float _1513 = _1511 * (_1478.y + (-0.5));
        float _1514 = _1511 * (_1478.z + (-0.5));
        float _1521 = exp2((_1485.w + (-0.5)) * 20.0) * 2.0;
        float _1522 = _1521 * (_1485.x + (-0.5));
        float _1523 = _1521 * (_1485.y + (-0.5));
        float _1524 = _1521 * (_1485.z + (-0.5));
        float _1531 = exp2((_1492.w + (-0.5)) * 20.0) * 2.0;
        float _1532 = _1531 * (_1492.x + (-0.5));
        float _1533 = _1531 * (_1492.y + (-0.5));
        float _1534 = _1531 * (_1492.z + (-0.5));
        float _1541 = exp2((_1499.w + (-0.5)) * 20.0) * 2.0;
        float _1542 = _1541 * (_1499.x + (-0.5));
        float _1543 = _1541 * (_1499.y + (-0.5));
        float _1544 = _1541 * (_1499.z + (-0.5));
        float _1545 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1546 = isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0));
        float _1547 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1548 = _1512 * 0.5;
        float _1549 = _1522 * 0.5;
        float _1550 = _1532 * 0.5;
        float _1551 = dot(vec3(_1548, _1549, _1550), vec3(_1548, _1549, _1550));
        float _1556 = (_1551 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1551);
        float _1564 = (dot(vec3(_790, _791, _792), vec3(_1556 * _1548, _1556 * _1549, _1556 * _1550)) + 1.0) * 0.5;
        float _4149 = isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0));
        float _1573 = sqrt(((_1549 * _1549) + (_1548 * _1548)) + (_1550 * _1550)) / (_1545 + 9.9999997473787516355514526367188e-06);
        float _4160 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1574 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
        float _1575 = _1574 * 2.0;
        float _1579 = (1.0 - _1574) / (_1574 + 1.0);
        float _4171 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1580 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
        float _1589 = ((((1.0 - _1580) * (_1575 + 2.0)) * exp2(log2(isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0))) * (_1575 + 1.0))) + _1580) * _1545;
        float _1590 = _1513 * 0.5;
        float _1591 = _1523 * 0.5;
        float _1592 = _1533 * 0.5;
        float _1593 = dot(vec3(_1590, _1591, _1592), vec3(_1590, _1591, _1592));
        float _1598 = (_1593 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1593);
        float _1606 = (dot(vec3(_790, _791, _792), vec3(_1598 * _1590, _1598 * _1591, _1598 * _1592)) + 1.0) * 0.5;
        float _4182 = isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0));
        float _1615 = sqrt(((_1591 * _1591) + (_1590 * _1590)) + (_1592 * _1592)) / (_1546 + 9.9999997473787516355514526367188e-06);
        float _4193 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
        float _1616 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
        float _1617 = _1616 * 2.0;
        float _1621 = (1.0 - _1616) / (_1616 + 1.0);
        float _4204 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
        float _1622 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
        float _1631 = ((((1.0 - _1622) * (_1617 + 2.0)) * exp2(log2(isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0))) * (_1617 + 1.0))) + _1622) * _1546;
        float _1632 = _1514 * 0.5;
        float _1633 = _1524 * 0.5;
        float _1634 = _1534 * 0.5;
        float _1635 = dot(vec3(_1632, _1633, _1634), vec3(_1632, _1633, _1634));
        float _1640 = (_1635 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1635);
        float _1648 = (dot(vec3(_790, _791, _792), vec3(_1640 * _1632, _1640 * _1633, _1640 * _1634)) + 1.0) * 0.5;
        float _4215 = isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0));
        float _1657 = sqrt(((_1633 * _1633) + (_1632 * _1632)) + (_1634 * _1634)) / (_1547 + 9.9999997473787516355514526367188e-06);
        float _4226 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
        float _1658 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
        float _1659 = _1658 * 2.0;
        float _1663 = (1.0 - _1658) / (_1658 + 1.0);
        float _4237 = isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0));
        float _1664 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
        float _1673 = ((((1.0 - _1664) * (_1659 + 2.0)) * exp2(log2(isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0))) * (_1659 + 1.0))) + _1664) * _1547;
        _1681 = _1514;
        _1682 = _1513;
        _1683 = _1512;
        _1684 = _1524;
        _1685 = _1523;
        _1686 = _1522;
        _1687 = _1534;
        _1688 = _1533;
        _1689 = _1532;
        _1690 = _1547;
        _1691 = _1546;
        _1692 = _1545;
        _1693 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0)));
        _1694 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0)));
        _1695 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0)));
    }
    else
    {
        _1681 = _1370;
        _1682 = _1370;
        _1683 = _1370;
        _1684 = _1370;
        _1685 = _1370;
        _1686 = _1370;
        _1687 = _1370;
        _1688 = _1370;
        _1689 = _1370;
        _1690 = _1370;
        _1691 = _1370;
        _1692 = _1370;
        _1693 = 0.0;
        _1694 = 0.0;
        _1695 = 0.0;
    }
    float _1705 = (cbModelParam._m0[1u].x * (_1693 - _1382)) + _1382;
    float _1706 = (cbModelParam._m0[1u].x * (_1694 - _1383)) + _1383;
    float _1707 = (cbModelParam._m0[1u].x * (_1695 - _1384)) + _1384;
    float _1728 = fma(_1707, cbSceneParam._m0[89u].z, fma(_1706, cbSceneParam._m0[89u].y, _1705 * cbSceneParam._m0[89u].x));
    float _1731 = fma(_1707, cbSceneParam._m0[90u].z, fma(_1706, cbSceneParam._m0[90u].y, _1705 * cbSceneParam._m0[90u].x));
    float _1734 = fma(_1707, cbSceneParam._m0[91u].z, fma(_1706, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1705));
    float _1749 = _976 * 0.5;
    float _1750 = _977 * 0.5;
    float _1751 = _978 * 0.5;
    float _1752 = dot(vec4(_1749, _1750, _1751, 1.0), vec4(_1683, _1686, _1689, _1692));
    float _1755 = dot(vec4(_1749, _1750, _1751, 1.0), vec4(_1682, _1685, _1688, _1691));
    float _1758 = dot(vec4(_1749, _1750, _1751, 1.0), vec4(_1681, _1684, _1687, _1690));
    float _1792;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1765 = dot(vec4(_1749, _1750, _1751, 1.0), vec4(_1369, _1373, _1376, _1379));
        float _1769 = dot(vec4(_1749, _1750, _1751, 1.0), vec4(_1371, _1374, _1377, _1380));
        float _1773 = dot(vec4(_1749, _1750, _1751, 1.0), vec4(_1372, _1375, _1378, _1381));
        float _1780 = dot(vec4(cbModelParam._m0[39u]), vec4(_1749, _1750, _1751, 1.0));
        _1792 = dot(vec3(isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0)), isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0)), isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1780) ? 0.0 : (isnan(0.0) ? _1780 : max(0.0, _1780))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1792 = 1.0;
    }
    float _1803;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1794 = dot(vec4(cbModelParam._m0[40u]), vec4(_1749, _1750, _1751, 1.0));
        _1803 = dot(vec3(isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0)), isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0)), isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1794) ? 0.0 : (isnan(0.0) ? _1794 : max(0.0, _1794))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1803 = 1.0;
    }
    float _1807 = (_1803 * cbModelParam._m0[1u].x) + (_1792 * (1.0 - cbModelParam._m0[1u].x));
    float _1817 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _793);
    float _1818 = isnan(_1817) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1817 : min(cbModelParam._m0[25u].z, _1817));
    float _1898;
    float _1900;
    float _1902;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1865 = fma(_1040, cbModelParam._m0[13u].z, fma(_1036, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1032)) + cbModelParam._m0[13u].w;
        float _1869 = fma(_1040, cbModelParam._m0[14u].z, fma(_1036, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1032)) + cbModelParam._m0[14u].w;
        float _1873 = fma(_1040, cbModelParam._m0[15u].z, fma(_1036, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1032)) + cbModelParam._m0[15u].w;
        float _1876 = fma(_978, cbModelParam._m0[13u].z, fma(_977, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _976));
        float _1879 = fma(_978, cbModelParam._m0[14u].z, fma(_977, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _976));
        float _1882 = fma(_978, cbModelParam._m0[15u].z, fma(_977, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _976));
        float _1910;
        if (_1876 > 0.0)
        {
            _1910 = abs((1.0 - _1865) / _1876);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1876 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1865 + 1.0) / _1876);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1910 = frontier_phi_17_15_ladder;
        }
        float _2133;
        if (_1879 > 0.0)
        {
            _2133 = abs((1.0 - _1869) / _1879);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1879 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1869 + 1.0) / _1879);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2133 = frontier_phi_26_22_ladder;
        }
        float _2390;
        if (_1882 > 0.0)
        {
            _2390 = abs((1.0 - _1873) / _1882);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1882 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1873 + 1.0) / _1882);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2390 = frontier_phi_38_33_ladder;
        }
        float _2392 = isnan(_2133) ? _1910 : (isnan(_1910) ? _2133 : min(_1910, _2133));
        float _2393 = isnan(_2390) ? _2392 : (isnan(_2392) ? _2390 : min(_2392, _2390));
        float _2397 = (_2393 * _1876) + _1865;
        float _2398 = (_2393 * _1879) + _1869;
        float _2399 = (_2393 * _1882) + _1873;
        float _2400 = _2393 * 9.9999997473787516355514526367188e-05;
        float _2402 = (-1.0) - _2400;
        float _2404 = _2400 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2399 > _2404) || ((_2399 < _2402) || ((_2398 > _2404) || ((_2398 < _2402) || ((_2397 < _2402) || (_2397 > _2404))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2527 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2399, cbModelParam._m0[9u].z, fma(_2398, cbModelParam._m0[9u].y, _2397 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2399, cbModelParam._m0[10u].z, fma(_2398, cbModelParam._m0[10u].y, _2397 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2399, cbModelParam._m0[11u].z, fma(_2398, cbModelParam._m0[11u].y, _2397 * cbModelParam._m0[11u].x))), _1818);
            frontier_phi_16_38_ladder = _2527.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2527.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2527.x * cbModelParam._m0[1u].y;
        }
        _1898 = frontier_phi_16_38_ladder_2;
        _1900 = frontier_phi_16_38_ladder_1;
        _1902 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1886 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_976, _977, _978), _1818);
        _1898 = _1886.x * cbModelParam._m0[1u].y;
        _1900 = _1886.y * cbModelParam._m0[1u].y;
        _1902 = _1886.z * cbModelParam._m0[1u].y;
    }
    float _1906 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _793);
    float _1907 = isnan(_1906) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1906 : min(cbModelParam._m0[25u].w, _1906));
    float _1996;
    float _1998;
    float _2000;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1960 = fma(_1040, cbModelParam._m0[21u].z, fma(_1036, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1032)) + cbModelParam._m0[21u].w;
        float _1964 = fma(_1040, cbModelParam._m0[22u].z, fma(_1036, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1032)) + cbModelParam._m0[22u].w;
        float _1968 = fma(_1040, cbModelParam._m0[23u].z, fma(_1036, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1032)) + cbModelParam._m0[23u].w;
        float _1971 = fma(_978, cbModelParam._m0[21u].z, fma(_977, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _976));
        float _1974 = fma(_978, cbModelParam._m0[22u].z, fma(_977, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _976));
        float _1977 = fma(_978, cbModelParam._m0[23u].z, fma(_977, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _976));
        float _2138;
        if (_1971 > 0.0)
        {
            _2138 = abs((1.0 - _1960) / _1971);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1971 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1960 + 1.0) / _1971);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2138 = frontier_phi_28_24_ladder;
        }
        float _2417;
        if (_1974 > 0.0)
        {
            _2417 = abs((1.0 - _1964) / _1974);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1974 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1964 + 1.0) / _1974);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2417 = frontier_phi_40_35_ladder;
        }
        float _2630;
        if (_1977 > 0.0)
        {
            _2630 = abs((1.0 - _1968) / _1977);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1977 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1968 + 1.0) / _1977);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2630 = frontier_phi_49_46_ladder;
        }
        float _2632 = isnan(_2417) ? _2138 : (isnan(_2138) ? _2417 : min(_2138, _2417));
        float _2633 = isnan(_2630) ? _2632 : (isnan(_2632) ? _2630 : min(_2632, _2630));
        float _2637 = (_2633 * _1971) + _1960;
        float _2638 = (_2633 * _1974) + _1964;
        float _2639 = (_2633 * _1977) + _1968;
        float _2640 = _2633 * 9.9999997473787516355514526367188e-05;
        float _2641 = (-1.0) - _2640;
        float _2643 = _2640 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2639 > _2643) || ((_2639 < _2641) || ((_2638 > _2643) || ((_2638 < _2641) || ((_2637 < _2641) || (_2637 > _2643))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2838 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2639, cbModelParam._m0[17u].z, fma(_2638, cbModelParam._m0[17u].y, _2637 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2639, cbModelParam._m0[18u].z, fma(_2638, cbModelParam._m0[18u].y, _2637 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2639, cbModelParam._m0[19u].z, fma(_2638, cbModelParam._m0[19u].y, _2637 * cbModelParam._m0[19u].x))), _1907);
            frontier_phi_25_49_ladder = _2838.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2838.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2838.x * cbModelParam._m0[1u].z;
        }
        _1996 = frontier_phi_25_49_ladder_2;
        _1998 = frontier_phi_25_49_ladder_1;
        _2000 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1980 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_976, _977, _978), _1907);
        _1996 = _1980.x * cbModelParam._m0[1u].z;
        _1998 = _1980.y * cbModelParam._m0[1u].z;
        _2000 = _1980.z * cbModelParam._m0[1u].z;
    }
    float _2013 = (((_1003 * _952) + _1004) * _968) * ((cbModelParam._m0[1u].w * (_1996 - _1898)) + _1898);
    float _2015 = (((_1003 * _954) + _1004) * _968) * ((cbModelParam._m0[1u].w * (_1998 - _1900)) + _1900);
    float _2017 = (((_1003 * _955) + _1004) * _968) * ((cbModelParam._m0[1u].w * (_2000 - _1902)) + _1902);
    float _2020 = fma(_2017, cbSceneParam._m0[89u].z, fma(_2015, cbSceneParam._m0[89u].y, _2013 * cbSceneParam._m0[89u].x));
    float _2023 = fma(_2017, cbSceneParam._m0[90u].z, fma(_2015, cbSceneParam._m0[90u].y, _2013 * cbSceneParam._m0[90u].x));
    float _2026 = fma(_2017, cbSceneParam._m0[91u].z, fma(_2015, cbSceneParam._m0[91u].y, _2013 * cbSceneParam._m0[91u].x));
    vec4 _2034 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_890, _891));
    float _2036 = _2034.w;
    float _2048 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2036);
    float _2049 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2036);
    float _2050 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2036);
    uvec4 _2054 = floatBitsToUint(cbInstanceData._m0[_274 + 5u]);
    uint _2056 = _2054.x * 14u;
    uint _2057 = _2056 + 13u;
    float _2064 = _968 + (-1.0);
    float _2069 = (cbLight._m0[_2057].x * _2064) + 1.0;
    float _2070 = (cbLight._m0[_2057].y * _2064) + 1.0;
    float _2071 = (cbLight._m0[_2057].z * _2064) + 1.0;
    float _2072 = (cbLight._m0[_2057].w * _2064) + 1.0;
    uint _2073 = _2056 + 5u;
    float _2079 = isnan(1.0) ? _2070 : (isnan(_2070) ? 1.0 : min(_2070, 1.0));
    uint _2083 = _2056 + 4u;
    float _2092 = isnan(1.0) ? _2069 : (isnan(_2069) ? 1.0 : min(_2069, 1.0));
    uint _2096 = _2056 | 1u;
    float _2107 = dot(vec3(cbLight._m0[_2056].xyz), vec3(_790, _791, _792));
    float _2110 = dot(vec3(cbLight._m0[_2096].xyz), vec3(_790, _791, _792));
    float _4373 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
    float _4384 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
    float _2115 = (isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0))) * 0.3183098733425140380859375;
    float _2117 = (isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0))) * 0.3183098733425140380859375;
    float _2124 = ((cbLight._m0[_2073].x * _2079) * _2117) + (((cbLight._m0[_2083].x * _2048) * _2092) * _2115);
    float _2125 = ((_2079 * cbLight._m0[_2073].y) * _2117) + (((cbLight._m0[_2083].y * _2049) * _2092) * _2115);
    float _2126 = ((_2079 * cbLight._m0[_2073].z) * _2117) + (((cbLight._m0[_2083].z * _2050) * _2092) * _2115);
    uvec4 _2130 = floatBitsToUint(cbLight._m0[_2056 + 12u]);
    bool _2132 = _2130.x == 0u;
    float _2143;
    float _2145;
    float _2147;
    if (_2132)
    {
        _2143 = _2124;
        _2145 = _2125;
        _2147 = _2126;
    }
    else
    {
        uint _2151 = _2056 + 6u;
        float _2167 = (dot(vec3(cbLight._m0[_2056 + 2u].xyz), vec3(_790, _791, _792)) * 0.5) + 0.5;
        float _2168 = _2167 * _2167;
        float _4395 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
        float _2169 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
        float _2170 = isnan(1.0) ? _2071 : (isnan(_2071) ? 1.0 : min(_2071, 1.0));
        _2143 = (((cbLight._m0[_2151].x * 0.3183098733425140380859375) * _2169) * _2170) + _2124;
        _2145 = (((cbLight._m0[_2151].y * 0.3183098733425140380859375) * _2169) * _2170) + _2125;
        _2147 = (((cbLight._m0[_2151].z * 0.3183098733425140380859375) * _2169) * _2170) + _2126;
    }
    bool _2150 = _2130.y == 0u;
    float _2188;
    float _2190;
    float _2192;
    if (_2150)
    {
        _2188 = _2143;
        _2190 = _2145;
        _2192 = _2147;
    }
    else
    {
        uint _2361 = _2056 + 7u;
        float _2377 = (dot(vec3(cbLight._m0[_2056 + 3u].xyz), vec3(_790, _791, _792)) * 0.5) + 0.5;
        float _2378 = _2377 * _2377;
        float _4411 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
        float _2379 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
        float _2380 = isnan(1.0) ? _2072 : (isnan(_2072) ? 1.0 : min(_2072, 1.0));
        _2188 = (((cbLight._m0[_2361].x * 0.3183098733425140380859375) * _2379) * _2380) + _2143;
        _2190 = (((cbLight._m0[_2361].y * 0.3183098733425140380859375) * _2379) * _2380) + _2145;
        _2192 = (((cbLight._m0[_2361].z * 0.3183098733425140380859375) * _2379) * _2380) + _2147;
    }
    uint _2195 = _2056 + 8u;
    float _2208 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2056].w)) * _793) * 0.949999988079071044921875);
    float _2209 = _2208 * _2208;
    float _2210 = cbLight._m0[_2056].x + _870;
    float _2211 = cbLight._m0[_2056].y + _871;
    float _2212 = cbLight._m0[_2056].z + _872;
    float _2216 = inversesqrt(dot(vec3(_2210, _2211, _2212), vec3(_2210, _2211, _2212)));
    float _2217 = _2216 * _2210;
    float _2218 = _2216 * _2211;
    float _2219 = _2216 * _2212;
    float _2220 = dot(vec3(_790, _791, _792), vec3(cbLight._m0[_2056].xyz));
    float _4427 = isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0));
    float _2223 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
    float _4438 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
    float _2224 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
    float _2225 = dot(vec3(_790, _791, _792), vec3(_2217, _2218, _2219));
    float _4449 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
    float _2228 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
    float _2229 = dot(vec3(cbLight._m0[_2056].xyz), vec3(_2217, _2218, _2219));
    float _4460 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
    float _2233 = _2209 * _2209;
    float _2237 = ((_2228 * _2228) * (_2233 + (-1.0))) + 1.0;
    float _2245 = exp2(log2(1.0 - (isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0)))) * 5.0);
    float _2246 = 0.959999978542327880859375 - _949;
    float _2248 = 0.959999978542327880859375 - _950;
    float _2249 = 0.959999978542327880859375 - _951;
    float _2256 = 1.0 - _2209;
    float _2267 = (0.5 / (((_2224 * ((_2223 * _2256) + _2209)) + 9.9999999392252902907785028219223e-09) + (((_2224 * _2256) + _2209) * _2223))) * _2223;
    float _4471 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0));
    float _2269 = (isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0))) * (_2233 / ((_2237 * _2237) * 3.141590118408203125));
    uint _2283 = _2056 + 9u;
    float _2294 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2096].w)) * _793) * 0.949999988079071044921875);
    float _2295 = _2294 * _2294;
    float _2296 = cbLight._m0[_2096].x + _870;
    float _2297 = cbLight._m0[_2096].y + _871;
    float _2298 = cbLight._m0[_2096].z + _872;
    float _2302 = inversesqrt(dot(vec3(_2296, _2297, _2298), vec3(_2296, _2297, _2298)));
    float _2303 = _2302 * _2296;
    float _2304 = _2302 * _2297;
    float _2305 = _2302 * _2298;
    float _2306 = dot(vec3(_790, _791, _792), vec3(cbLight._m0[_2096].xyz));
    float _4482 = isnan(0.0) ? _2306 : (isnan(_2306) ? 0.0 : max(_2306, 0.0));
    float _2309 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
    float _2310 = dot(vec3(_790, _791, _792), vec3(_2303, _2304, _2305));
    float _4493 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
    float _2313 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
    float _2314 = dot(vec3(cbLight._m0[_2096].xyz), vec3(_2303, _2304, _2305));
    float _4504 = isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0));
    float _2318 = _2295 * _2295;
    float _2322 = ((_2313 * _2313) * (_2318 + (-1.0))) + 1.0;
    float _2329 = exp2(log2(1.0 - (isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0)))) * 5.0);
    float _2336 = 1.0 - _2295;
    float _2346 = (0.5 / (((_2224 * ((_2309 * _2336) + _2295)) + 9.9999999392252902907785028219223e-09) + (((_2224 * _2336) + _2295) * _2309))) * _2309;
    float _4515 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
    float _2348 = (isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0))) * (_2318 / ((_2322 * _2322) * 3.141590118408203125));
    float _2358 = (((((_2329 * _2246) + _952) * cbLight._m0[_2283].x) * _2348) * _2079) + ((((cbLight._m0[_2195].x * _2048) * ((_2245 * _2246) + _952)) * _2269) * _2092);
    float _2359 = (((((_2329 * _2248) + _954) * cbLight._m0[_2283].y) * _2348) * _2079) + ((((cbLight._m0[_2195].y * _2049) * ((_2245 * _2248) + _954)) * _2269) * _2092);
    float _2360 = (((((_2329 * _2249) + _955) * cbLight._m0[_2283].z) * _2348) * _2079) + ((((cbLight._m0[_2195].z * _2050) * ((_2245 * _2249) + _955)) * _2269) * _2092);
    float _2422;
    float _2424;
    float _2426;
    if (_2132)
    {
        _2422 = _2358;
        _2424 = _2359;
        _2426 = _2360;
    }
    else
    {
        uint _2428 = _2056 + 2u;
        uint _2432 = _2056 + 10u;
        float _2446 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2428].w)) * _793) * 0.949999988079071044921875);
        float _2447 = _2446 * _2446;
        float _2448 = cbLight._m0[_2428].x + _870;
        float _2449 = cbLight._m0[_2428].y + _871;
        float _2450 = cbLight._m0[_2428].z + _872;
        float _2454 = inversesqrt(dot(vec3(_2448, _2449, _2450), vec3(_2448, _2449, _2450)));
        float _2455 = _2454 * _2448;
        float _2456 = _2454 * _2449;
        float _2457 = _2454 * _2450;
        float _2458 = dot(vec3(_790, _791, _792), vec3(cbLight._m0[_2428].xyz));
        float _4526 = isnan(0.0) ? _2458 : (isnan(_2458) ? 0.0 : max(_2458, 0.0));
        float _2461 = isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0));
        float _2462 = dot(vec3(_790, _791, _792), vec3(_2455, _2456, _2457));
        float _4537 = isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0));
        float _2465 = isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0));
        float _2466 = dot(vec3(cbLight._m0[_2428].xyz), vec3(_2455, _2456, _2457));
        float _4548 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
        float _2470 = _2447 * _2447;
        float _2474 = ((_2465 * _2465) * (_2470 + (-1.0))) + 1.0;
        float _2481 = exp2(log2(1.0 - (isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0)))) * 5.0);
        float _2488 = 1.0 - _2447;
        float _2498 = (0.5 / (((_2224 * ((_2461 * _2488) + _2447)) + 9.9999999392252902907785028219223e-09) + (((_2224 * _2488) + _2447) * _2461))) * _2461;
        float _4559 = isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0));
        float _2500 = (isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0))) * (_2470 / ((_2474 * _2474) * 3.141590118408203125));
        float _2501 = isnan(1.0) ? _2071 : (isnan(_2071) ? 1.0 : min(_2071, 1.0));
        _2422 = (((((_2481 * _2246) + _952) * cbLight._m0[_2432].x) * _2500) * _2501) + _2358;
        _2424 = (((((_2481 * _2248) + _954) * cbLight._m0[_2432].y) * _2500) * _2501) + _2359;
        _2426 = (((((_2481 * _2249) + _955) * cbLight._m0[_2432].z) * _2500) * _2501) + _2360;
    }
    float _2536;
    float _2538;
    float _2540;
    if (_2150)
    {
        _2536 = _2422;
        _2538 = _2424;
        _2540 = _2426;
    }
    else
    {
        uint _2547 = _2056 + 3u;
        uint _2551 = _2056 + 11u;
        float _2565 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2547].w)) * _793) * 0.949999988079071044921875);
        float _2566 = _2565 * _2565;
        float _2567 = cbLight._m0[_2547].x + _870;
        float _2568 = cbLight._m0[_2547].y + _871;
        float _2569 = cbLight._m0[_2547].z + _872;
        float _2573 = inversesqrt(dot(vec3(_2567, _2568, _2569), vec3(_2567, _2568, _2569)));
        float _2574 = _2573 * _2567;
        float _2575 = _2573 * _2568;
        float _2576 = _2573 * _2569;
        float _2577 = dot(vec3(_790, _791, _792), vec3(cbLight._m0[_2547].xyz));
        float _4575 = isnan(0.0) ? _2577 : (isnan(_2577) ? 0.0 : max(_2577, 0.0));
        float _2580 = isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0));
        float _2581 = dot(vec3(_790, _791, _792), vec3(_2574, _2575, _2576));
        float _4586 = isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : max(_2581, 0.0));
        float _2584 = isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0));
        float _2585 = dot(vec3(cbLight._m0[_2547].xyz), vec3(_2574, _2575, _2576));
        float _4597 = isnan(0.0) ? _2585 : (isnan(_2585) ? 0.0 : max(_2585, 0.0));
        float _2589 = _2566 * _2566;
        float _2593 = ((_2584 * _2584) * (_2589 + (-1.0))) + 1.0;
        float _2600 = exp2(log2(1.0 - (isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0)))) * 5.0);
        float _2607 = 1.0 - _2566;
        float _2617 = (0.5 / (((_2224 * ((_2580 * _2607) + _2566)) + 9.9999999392252902907785028219223e-09) + (((_2224 * _2607) + _2566) * _2580))) * _2580;
        float _4608 = isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : max(_2617, 0.0));
        float _2619 = (isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0))) * (_2589 / ((_2593 * _2593) * 3.141590118408203125));
        float _2620 = isnan(1.0) ? _2072 : (isnan(_2072) ? 1.0 : min(_2072, 1.0));
        _2536 = (((((_2600 * _2246) + _952) * cbLight._m0[_2551].x) * _2619) * _2620) + _2422;
        _2538 = (((((_2600 * _2248) + _954) * cbLight._m0[_2551].y) * _2619) * _2620) + _2424;
        _2540 = (((((_2600 * _2249) + _955) * cbLight._m0[_2551].z) * _2619) * _2620) + _2426;
    }
    float _2755;
    float _2757;
    float _2759;
    float _2761;
    float _2763;
    float _2765;
    if (_2054.y == 0u)
    {
        float _2695 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2696 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2695;
        float _2697 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2695;
        float _2698 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2695;
        uvec4 _2710 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2711 = _2710.x;
        uint _2722 = uint((float(_2710.y) * floor(float(uint(cbSceneParam._m0[85u].y * _891) / _2711))) + floor(float(uint(cbSceneParam._m0[85u].x * _890) / _2711)));
        float _2732 = (log2(_2698 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2733 = isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : max(_2732, 0.0));
        uint _2736 = uint(isnan(14.0) ? _2733 : (isnan(_2733) ? 14.0 : min(_2733, 14.0)));
        uvec4 _2741 = texelFetch(g_lightClusterGridBuffer, int(((_2736 << 2u) + (_2722 << 6u)) >> 2u));
        uint _2742 = _2741.x;
        uint _2743 = _2710.z;
        float _2843;
        float _2845;
        float _2847;
        float _2849;
        float _2851;
        float _2853;
        if (((((1u << ((_2743 >> 4u) & 15u)) + 4294967295u) & _2742) == 0u) || ((_2743 & 240u) == 0u))
        {
            _2843 = 0.0;
            _2845 = 0.0;
            _2847 = 0.0;
            _2849 = 0.0;
            _2851 = 0.0;
            _2853 = 0.0;
        }
        else
        {
            float _2844;
            float _2846;
            float _2848;
            float _2850;
            float _2852;
            float _2854;
            float _2996 = 0.0;
            float _2997 = 0.0;
            float _2998 = 0.0;
            float _2999 = 0.0;
            float _3000 = 0.0;
            float _3001 = 0.0;
            uint _3002 = 0u;
            uint _3011;
            bool _3012;
            for (;;)
            {
                _3011 = texelFetch(g_lightClassification, int((((_2736 << 5u) + (_2722 << 9u)) + (_3002 << 2u)) >> 2u)).x;
                _3012 = _3011 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3012)
                {
                    frontier_phi_66_pred = _2996;
                    frontier_phi_66_pred_1 = _3001;
                    frontier_phi_66_pred_2 = _3000;
                    frontier_phi_66_pred_3 = _2999;
                    frontier_phi_66_pred_4 = _2998;
                    frontier_phi_66_pred_5 = _2997;
                }
                else
                {
                    float _3141;
                    float _3142;
                    float _3143;
                    float _3144;
                    float _3145;
                    float _3146;
                    uint _3147;
                    _3141 = _2996;
                    _3142 = _2997;
                    _3143 = _2998;
                    _3144 = _2999;
                    _3145 = _3000;
                    _3146 = _3001;
                    _3147 = _3011;
                    float _3068;
                    float _3069;
                    float _3070;
                    float _3071;
                    float _3072;
                    float _3073;
                    for (;;)
                    {
                        uint _3151 = uint(findLSB(_3147)) + (_3002 << 5u);
                        uint _3148 = (_3147 + 4294967295u) & _3147;
                        uint _3153 = _3151 * 48u;
                        vec4 _3167 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3153)).x, texelFetch(g_PointLightRenderingBuffer, int(_3153 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3153 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3153 + 3u)).x));
                        uint _3173 = (_3151 * 48u) + 4u;
                        vec4 _3186 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3173)).x, texelFetch(g_PointLightRenderingBuffer, int(_3173 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3173 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3173 + 3u)).x));
                        uint _3192 = (_3151 * 48u) + 8u;
                        vec3 _3203 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3192)).x, texelFetch(g_PointLightRenderingBuffer, int(_3192 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3192 + 2u)).x));
                        float _3207 = _3167.x - _2696;
                        float _3208 = _3167.y - _2697;
                        float _3209 = _3167.z - _2698;
                        float _3210 = dot(vec3(_3207, _3208, _3209), vec3(_3207, _3208, _3209));
                        float _3213 = inversesqrt(_3210);
                        float _3214 = _3213 * _3207;
                        float _3215 = _3213 * _3208;
                        float _3216 = _3213 * _3209;
                        float _3217 = dot(vec3(_909, _912, _915), vec3(_3214, _3215, _3216));
                        float _3222 = 1.0 - (_3210 * _3167.w);
                        float _4634 = isnan(0.0) ? _3222 : (isnan(_3222) ? 0.0 : max(_3222, 0.0));
                        float _3223 = isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0));
                        float _3224 = sqrt(_3210) * _3186.w;
                        float _3227 = 1.39999997615814208984375 / (_3224 + 1.39999997615814208984375);
                        float _3228 = _3227 * _3227;
                        float _3231 = ((1.0 - _3228) * _3217) + _3228;
                        float _3234 = _3224 * _3224;
                        float _3238 = ((isnan(0.0) ? _3231 : (isnan(_3231) ? 0.0 : max(_3231, 0.0))) * _3223) / ((_3234 * 0.699999988079071044921875) + 1.0);
                        float _3242 = (-0.0) - _2696;
                        float _3243 = (-0.0) - _2697;
                        float _3244 = (-0.0) - _2698;
                        float _3248 = inversesqrt(dot(vec3(_3242, _3243, _3244), vec3(_3242, _3243, _3244)));
                        float _3249 = _3248 * _3242;
                        float _3250 = _3248 * _3243;
                        float _3251 = _3248 * _3244;
                        float _3259 = exp2(log2(1.0 / ((_3234 * 3.5) + 5.0)) * 0.25);
                        float _3260 = 1.0 - _984;
                        float _3267 = sqrt(1.0 - ((1.0 - (_3260 * _3260)) * (1.0 - (_3259 * _3259))));
                        float _3268 = _3267 * _3267;
                        float _3269 = _3268 * _3268;
                        float _3270 = _3249 + _3214;
                        float _3271 = _3250 + _3215;
                        float _3272 = _3251 + _3216;
                        float _3276 = inversesqrt(dot(vec3(_3270, _3271, _3272), vec3(_3270, _3271, _3272)));
                        float _3280 = dot(vec3(_909, _912, _915), vec3(_3249, _3250, _3251));
                        float _4650 = isnan(0.0) ? _3280 : (isnan(_3280) ? 0.0 : max(_3280, 0.0));
                        float _3283 = isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0));
                        float _3284 = dot(vec3(_909, _912, _915), vec3(_3276 * _3270, _3276 * _3271, _3276 * _3272));
                        float _4661 = isnan(0.0) ? _3284 : (isnan(_3284) ? 0.0 : max(_3284, 0.0));
                        float _3287 = isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0));
                        float _3291 = ((_3287 * _3287) * (_3269 + (-1.0))) + 1.0;
                        float _3292 = _3227 * _3268;
                        float _3293 = _3292 * _3292;
                        float _3296 = ((1.0 - _3293) * _3217) + _3293;
                        float _4672 = isnan(0.0) ? _3296 : (isnan(_3296) ? 0.0 : max(_3296, 0.0));
                        float _3297 = isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0));
                        float _3298 = 1.0 - _3268;
                        float _3308 = (0.5 / (((_3297 * ((_3283 * _3298) + _3268)) + 9.9999999392252902907785028219223e-09) + (((_3297 * _3298) + _3268) * _3283))) * _3297;
                        float _4683 = isnan(0.0) ? _3308 : (isnan(_3308) ? 0.0 : max(_3308, 0.0));
                        float _3319 = (((_3269 * 3.1415927410125732421875) * (isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0)))) / ((_3291 * _3291) * ((_3234 * 2.1991131305694580078125) + 3.141590118408203125))) * _3223;
                        _3071 = (_3238 * _3186.x) + _3144;
                        _3072 = (_3238 * _3186.y) + _3145;
                        _3073 = (_3238 * _3186.z) + _3146;
                        _3068 = (_3319 * _3203.x) + _3141;
                        _3069 = (_3319 * _3203.y) + _3142;
                        _3070 = (_3319 * _3203.z) + _3143;
                        if (_3148 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3141 = _3068;
                            _3142 = _3069;
                            _3143 = _3070;
                            _3144 = _3071;
                            _3145 = _3072;
                            _3146 = _3073;
                            _3147 = _3148;
                        }
                    }
                    frontier_phi_66_pred = _3068;
                    frontier_phi_66_pred_1 = _3073;
                    frontier_phi_66_pred_2 = _3072;
                    frontier_phi_66_pred_3 = _3071;
                    frontier_phi_66_pred_4 = _3070;
                    frontier_phi_66_pred_5 = _3069;
                }
                _2844 = frontier_phi_66_pred;
                _2854 = frontier_phi_66_pred_1;
                _2852 = frontier_phi_66_pred_2;
                _2850 = frontier_phi_66_pred_3;
                _2848 = frontier_phi_66_pred_4;
                _2846 = frontier_phi_66_pred_5;
                uint _3003 = _3002 + 1u;
                if (_3003 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2996 = _2844;
                    _2997 = _2846;
                    _2998 = _2848;
                    _2999 = _2850;
                    _3000 = _2852;
                    _3001 = _2854;
                    _3002 = _3003;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2843 = _2844;
            _2845 = _2846;
            _2847 = _2848;
            _2849 = _2850;
            _2851 = _2852;
            _2853 = _2854;
        }
        uvec4 _2857 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2858 = _2857.z;
        uint _2860 = (_2858 >> 8u) & 15u;
        float _2964;
        float _2966;
        float _2968;
        float _2970;
        float _2972;
        float _2974;
        if (((4294967295u << _2860) & _2742) == 0u)
        {
            _2964 = _2843;
            _2966 = _2845;
            _2968 = _2847;
            _2970 = _2849;
            _2972 = _2851;
            _2974 = _2853;
        }
        else
        {
            float _2989 = inversesqrt(dot(vec3(_2696, _2697, _2698), vec3(_2696, _2697, _2698)));
            float _2990 = _2989 * _2696;
            float _2991 = _2989 * _2697;
            float _2992 = _2989 * _2698;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2860 < ((_2858 >> 12u) & 15u))
            {
                float _2965;
                float _2967;
                float _2969;
                float _2971;
                float _2973;
                float _2975;
                float _3124 = _2843;
                float _3125 = _2845;
                float _3126 = _2847;
                float _3127 = _2849;
                float _3128 = _2851;
                float _3129 = _2853;
                uint _3130 = _2860;
                uint _3139;
                bool _3140;
                for (;;)
                {
                    _3139 = texelFetch(g_lightClassification, int((((_2736 << 5u) + (_2722 << 9u)) + (_3130 << 2u)) >> 2u)).x;
                    _3140 = _3139 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3140)
                    {
                        frontier_phi_77_pred = _3129;
                        frontier_phi_77_pred_1 = _3128;
                        frontier_phi_77_pred_2 = _3127;
                        frontier_phi_77_pred_3 = _3126;
                        frontier_phi_77_pred_4 = _3125;
                        frontier_phi_77_pred_5 = _3124;
                    }
                    else
                    {
                        float _3333;
                        float _3334;
                        float _3335;
                        float _3336;
                        float _3337;
                        float _3338;
                        float _3626;
                        float _3627;
                        float _3628;
                        float _3629;
                        float _3630;
                        float _3631;
                        float _3346 = _3124;
                        float _3347 = _3125;
                        float _3348 = _3126;
                        float _3349 = _3127;
                        float _3350 = _3128;
                        float _3351 = _3129;
                        uint _3352 = _3139;
                        uint _3353;
                        vec4 _3378;
                        float _3379;
                        vec4 _3394;
                        vec3 _3406;
                        vec4 _3421;
                        vec4 _3436;
                        float _3482;
                        bool _3483;
                        for (;;)
                        {
                            uint _3363 = ((_3130 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3352));
                            _3353 = (_3352 + 4294967295u) & _3352;
                            uint _3365 = _3363 * 40u;
                            _3378 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3365)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 3u)).x));
                            _3379 = _3378.w;
                            uint _3381 = (_3363 * 40u) + 4u;
                            _3394 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3381)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3381 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3381 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3381 + 3u)).x));
                            uint _3396 = (_3363 * 40u) + 8u;
                            _3406 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3396)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 2u)).x));
                            uint _3408 = (_3363 * 40u) + 16u;
                            _3421 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3408)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3408 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3408 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3408 + 3u)).x));
                            uint _3423 = (_3363 * 40u) + 20u;
                            _3436 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3423)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3423 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3423 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3423 + 3u)).x));
                            uint _3438 = (_3363 * 40u) + 24u;
                            vec4 _3451 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3438)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 3u)).x));
                            uint _3457 = (_3363 * 40u) + 28u;
                            vec4 _3470 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3457)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3457 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3457 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3457 + 3u)).x));
                            _3482 = fma(_2698, _3470.z, fma(_2697, _3470.y, _3470.x * _2696)) + _3470.w;
                            _3483 = !((fma(_2698, _3451.z, fma(_2697, _3451.y, _3451.x * _2696)) + _3451.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3483)
                            {
                                float _3510 = _3378.x - _2696;
                                float _3511 = _3378.y - _2697;
                                float _3512 = _3378.z - _2698;
                                float _3513 = dot(vec3(_3510, _3511, _3512), vec3(_3510, _3511, _3512));
                                float _3516 = inversesqrt(_3513);
                                float _3517 = _3516 * _3510;
                                float _3518 = _3516 * _3511;
                                float _3519 = _3516 * _3512;
                                float _3523 = 1.0 - (_3513 / (_3379 * _3379));
                                float _4694 = isnan(0.0) ? _3523 : (isnan(_3523) ? 0.0 : max(_3523, 0.0));
                                float _3524 = isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0));
                                float _3528 = sqrt(_3513) * _3394.w;
                                float _3530 = 1.39999997615814208984375 / (_3528 + 1.39999997615814208984375);
                                float _3531 = _3530 * _3530;
                                float _3534 = ((1.0 - _3531) * dot(vec3(_3517, _3518, _3519), vec3(_909, _912, _915))) + _3531;
                                float _3537 = _3528 * _3528;
                                float _3541 = (fma(_2698, _3421.z, fma(_2697, _3421.y, _3421.x * _2696)) + _3421.w) / _3482;
                                float _3542 = (fma(_2698, _3436.z, fma(_2697, _3436.y, _3436.x * _2696)) + _3436.w) / _3482;
                                float _3546 = 1.0 - dot(vec2(_3541, _3542), vec2(_3541, _3542));
                                float _4710 = isnan(0.0) ? _3546 : (isnan(_3546) ? 0.0 : max(_3546, 0.0));
                                float _3547 = isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0));
                                float _3548 = _3547 * (((isnan(0.0) ? _3534 : (isnan(_3534) ? 0.0 : max(_3534, 0.0))) * _3524) / ((_3537 * 0.699999988079071044921875) + 1.0));
                                float _3560 = exp2(log2(1.0 / ((_3537 * 3.5) + 5.0)) * 0.25);
                                float _3561 = 1.0 - _984;
                                float _3568 = sqrt(1.0 - ((1.0 - (_3561 * _3561)) * (1.0 - (_3560 * _3560))));
                                float _3569 = _3568 * _3568;
                                float _3570 = _3569 * _3569;
                                float _3571 = _3517 - _2990;
                                float _3572 = _3518 - _2991;
                                float _3573 = _3519 - _2992;
                                float _3577 = inversesqrt(dot(vec3(_3571, _3572, _3573), vec3(_3571, _3572, _3573)));
                                float _3581 = dot(vec3(_909, _912, _915), vec3((-0.0) - _2990, (-0.0) - _2991, (-0.0) - _2992));
                                float _4721 = isnan(0.0) ? _3581 : (isnan(_3581) ? 0.0 : max(_3581, 0.0));
                                float _3584 = isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0));
                                float _3585 = dot(vec3(_909, _912, _915), vec3(_3577 * _3571, _3577 * _3572, _3577 * _3573));
                                float _4732 = isnan(0.0) ? _3585 : (isnan(_3585) ? 0.0 : max(_3585, 0.0));
                                float _3588 = isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0));
                                float _3592 = ((_3588 * _3588) * (_3570 + (-1.0))) + 1.0;
                                float _3593 = _3530 * _3569;
                                float _3594 = _3593 * _3593;
                                float _3600 = ((1.0 - _3594) * dot(vec3(_909, _912, _915), vec3(_3517, _3518, _3519))) + _3594;
                                float _4743 = isnan(0.0) ? _3600 : (isnan(_3600) ? 0.0 : max(_3600, 0.0));
                                float _3601 = isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0));
                                float _3602 = 1.0 - _3569;
                                float _3612 = (0.5 / (((_3601 * ((_3584 * _3602) + _3569)) + 9.9999999392252902907785028219223e-09) + (((_3601 * _3602) + _3569) * _3584))) * _3601;
                                float _4754 = isnan(0.0) ? _3612 : (isnan(_3612) ? 0.0 : max(_3612, 0.0));
                                float _3622 = (_3547 * _3524) * (((_3570 * 3.1415927410125732421875) * (isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0)))) / ((_3592 * _3592) * ((_3537 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3548 * _3394.y;
                                frontier_phi_83_pred_1 = _3548 * _3394.x;
                                frontier_phi_83_pred_2 = _3622 * _3406.z;
                                frontier_phi_83_pred_3 = _3622 * _3406.y;
                                frontier_phi_83_pred_4 = _3622 * _3406.x;
                                frontier_phi_83_pred_5 = _3548 * _3394.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3630 = frontier_phi_83_pred;
                            _3629 = frontier_phi_83_pred_1;
                            _3628 = frontier_phi_83_pred_2;
                            _3627 = frontier_phi_83_pred_3;
                            _3626 = frontier_phi_83_pred_4;
                            _3631 = frontier_phi_83_pred_5;
                            _3336 = _3629 + _3349;
                            _3337 = _3630 + _3350;
                            _3338 = _3631 + _3351;
                            _3333 = _3626 + _3346;
                            _3334 = _3627 + _3347;
                            _3335 = _3628 + _3348;
                            if (_3353 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3346 = _3333;
                                _3347 = _3334;
                                _3348 = _3335;
                                _3349 = _3336;
                                _3350 = _3337;
                                _3351 = _3338;
                                _3352 = _3353;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3338;
                        frontier_phi_77_pred_1 = _3337;
                        frontier_phi_77_pred_2 = _3336;
                        frontier_phi_77_pred_3 = _3335;
                        frontier_phi_77_pred_4 = _3334;
                        frontier_phi_77_pred_5 = _3333;
                    }
                    _2975 = frontier_phi_77_pred;
                    _2973 = frontier_phi_77_pred_1;
                    _2971 = frontier_phi_77_pred_2;
                    _2969 = frontier_phi_77_pred_3;
                    _2967 = frontier_phi_77_pred_4;
                    _2965 = frontier_phi_77_pred_5;
                    uint _3131 = _3130 + 1u;
                    if (_3131 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3124 = _2965;
                        _3125 = _2967;
                        _3126 = _2969;
                        _3127 = _2971;
                        _3128 = _2973;
                        _3129 = _2975;
                        _3130 = _3131;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2969;
                frontier_phi_58_59_ladder_1 = _2975;
                frontier_phi_58_59_ladder_2 = _2973;
                frontier_phi_58_59_ladder_3 = _2971;
                frontier_phi_58_59_ladder_4 = _2967;
                frontier_phi_58_59_ladder_5 = _2965;
            }
            else
            {
                frontier_phi_58_59_ladder = _2847;
                frontier_phi_58_59_ladder_1 = _2853;
                frontier_phi_58_59_ladder_2 = _2851;
                frontier_phi_58_59_ladder_3 = _2849;
                frontier_phi_58_59_ladder_4 = _2845;
                frontier_phi_58_59_ladder_5 = _2843;
            }
            _2964 = frontier_phi_58_59_ladder_5;
            _2966 = frontier_phi_58_59_ladder_4;
            _2968 = frontier_phi_58_59_ladder;
            _2970 = frontier_phi_58_59_ladder_3;
            _2972 = frontier_phi_58_59_ladder_2;
            _2974 = frontier_phi_58_59_ladder_1;
        }
        float _2979 = isnan(1.0) ? _968 : (isnan(_968) ? 1.0 : min(_968, 1.0));
        _2755 = (_2979 * _2970) + _2188;
        _2757 = (_2979 * _2972) + _2190;
        _2759 = (_2979 * _2974) + _2192;
        _2761 = ((_2964 * _952) * _2979) + _2536;
        _2763 = ((_2966 * _954) * _2979) + _2538;
        _2765 = ((_2968 * _955) * _2979) + _2540;
    }
    else
    {
        _2755 = _2188;
        _2757 = _2190;
        _2759 = _2192;
        _2761 = _2536;
        _2763 = _2538;
        _2765 = _2540;
    }
    float _4770 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
    float _4781 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
    float _4792 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
    float _2782 = ((isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0))) * (_2755 + ((isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0))) * _968))) + ((_2761 + ((isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0))) * _1807)) * cbPerFrame._m0[3u].x);
    float _2783 = ((isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0))) * (_2757 + ((isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0))) * _968))) + ((_2763 + ((isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0))) * _1807)) * cbPerFrame._m0[3u].x);
    float _2784 = ((isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0))) * (_2759 + ((isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0))) * _968))) + ((_2765 + ((isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0))) * _1807)) * cbPerFrame._m0[3u].x);
    uint _2785 = _274 + 6u;
    float _2793 = _890 / cbSceneParam._m0[86u].x;
    float _2794 = _891 / cbSceneParam._m0[86u].y;
    vec4 _2808 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2793, _2794, (log2((isnan(cbSceneParam._m0[77u].w) ? _812 : (isnan(_812) ? cbSceneParam._m0[77u].w : min(_812, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2810 = _2808.x;
    float _2811 = _2808.y;
    float _2812 = _2808.z;
    float _2813 = _2808.w;
    float _2906;
    float _2908;
    float _2910;
    float _2912;
    if (_812 > cbSceneParam._m0[78u].w)
    {
        float _2868 = isnan(_812) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _812 : min(cbSceneParam._m0[80u].w, _812));
        float _2869 = _2868 / _812;
        float _2880 = _2869 * _863;
        float _2881 = _864 * _2869;
        float _2882 = (-0.0) - _2881;
        float _2884 = _2869 * _865;
        float _2886 = (cbSceneParam._m0[77u].w * _2882) / _2868;
        float _2887 = _2886 + cbSceneParam._m0[79u].w;
        float _2888 = cbSceneParam._m0[79u].w - _2881;
        float _2894 = sqrt(((_2880 * _2880) + (_2881 * _2881)) + (_2884 * _2884));
        float _2897 = (1.0 - (cbSceneParam._m0[77u].w / _2868)) * _2894;
        float _2902 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2904 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3081;
        if (abs((_2882 - _2886) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3081 = ((((_2887 > 0.0) ? exp2(_2902 * _2887) : (2.0 - exp2(_2904 * _2887))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2897;
        }
        else
        {
            float _3025 = 1.0 / cbSceneParam._m0[80u].x;
            float _3026 = isnan(_2888) ? _2887 : (isnan(_2887) ? _2888 : max(_2887, _2888));
            float _3027 = isnan(_2888) ? _2887 : (isnan(_2887) ? _2888 : min(_2887, _2888));
            float _3036 = isnan(0.0) ? _3026 : (isnan(_3026) ? 0.0 : min(_3026, 0.0));
            float _3037 = isnan(0.0) ? _3027 : (isnan(_3027) ? 0.0 : min(_3027, 0.0));
            _3081 = ((abs(_2894 / _2882) * cbSceneParam._m0[80u].y) * ((((_3036 - _3037) * 2.0) - ((exp2(_2902 * (isnan(0.0) ? _3026 : (isnan(_3026) ? 0.0 : max(_3026, 0.0)))) - exp2(_2902 * (isnan(0.0) ? _3027 : (isnan(_3027) ? 0.0 : max(_3027, 0.0))))) * _3025)) - ((exp2(_2904 * _3036) - exp2(_2904 * _3037)) * _3025))) + (_2897 * cbSceneParam._m0[80u].z);
        }
        vec4 _3083 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2793, _2794, 1.0), 0.0);
        float _3092 = exp2((_3081 * (-1.44269502162933349609375)) * (1.0 - _3083.w));
        float _3093 = log2(_3092);
        float _3109 = log2(_2813);
        _2906 = (exp2(_3109 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3093 * cbSceneParam._m0[78u].x)) * _3083.x) / cbSceneParam._m0[78u].x)) + _2810;
        _2908 = (exp2(_3109 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3093 * cbSceneParam._m0[78u].y)) * _3083.y) / cbSceneParam._m0[78u].y)) + _2811;
        _2910 = (exp2(_3109 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3093 * cbSceneParam._m0[78u].z)) * _3083.z) / cbSceneParam._m0[78u].z)) + _2812;
        _2912 = _3092 * _2813;
    }
    else
    {
        _2906 = _2810;
        _2908 = _2811;
        _2910 = _2812;
        _2912 = _2813;
    }
    bool _3119;
    vec4 _2922;
    vec4 _2944;
    float _2946;
    float _2950;
    float _2951;
    float _2952;
    float _2953;
    bool _2963;
    for (;;)
    {
        _2922 = cbMatDynParam._m0[0u];
        float _2924 = roundEven(_2922.y);
        bool _2925 = _2924 == 3.0;
        float _2926 = log2(_2912);
        float _2933 = exp2(_2926 * cbSceneParam._m0[78u].x) * _2782;
        float _2934 = exp2(_2926 * cbSceneParam._m0[78u].y) * _2783;
        float _2935 = exp2(_2926 * cbSceneParam._m0[78u].z) * _2784;
        float _2942 = _879 + (-0.5);
        _2944 = cbMtdParam._m0[1u];
        _2946 = _2944.y * _2942;
        float _2949 = (_2924 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2950 = _2949 * (_2925 ? _2933 : (_2933 + (cbSceneParam._m0[72u].w * _2906)));
        _2951 = _2949 * (_2925 ? _2934 : (_2934 + (cbSceneParam._m0[72u].w * _2908)));
        _2952 = _2949 * (_2925 ? _2935 : (_2935 + (cbSceneParam._m0[72u].w * _2910)));
        _2953 = _2942 * 0.999000012874603271484375;
        _2963 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2963)
        {
            if ((cbInstanceData._m0[_274 + 7u].x + _2953) < 0.5)
            {
                _3119 = true;
                break;
            }
        }
        uint _3060 = _928 + uint(_2922.w);
        if ((cbInstanceData._m0[_3060].w < 1.0) && ((cbInstanceData._m0[_3060].w + _2953) < 0.5))
        {
            _3119 = true;
            break;
        }
        if ((_2946 + 1.0) < _2944.x)
        {
            _3119 = true;
            break;
        }
        _3119 = false;
        break;
    }
    float _3324;
    if (_3119)
    {
        discard_state = true;
        _3324 = 0.0;
    }
    else
    {
        _3324 = cbInstanceData._m0[_2785].w;
    }
    SV_Target.x = _2950;
    SV_Target.y = _2951;
    SV_Target.z = _2952;
    SV_Target.w = _3324;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2785].w;
    discard_exit();
}


