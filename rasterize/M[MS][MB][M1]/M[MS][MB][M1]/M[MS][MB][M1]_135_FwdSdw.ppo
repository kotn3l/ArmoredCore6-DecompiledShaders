#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1357;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _233 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _234 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _235 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _241 = inversesqrt(dot(vec3(_233, _234, _235), vec3(_233, _234, _235)));
    float _248 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _255 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _261 = uint(roundEven(NORMAL.w)) * 13u;
    uint _266 = _261 + 1u;
    uint _270 = _261 + 2u;
    float _279 = sqrt(((cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x) + (cbInstanceData._m0[_261].x * cbInstanceData._m0[_261].x)) + (cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x));
    float _280 = _279 * TEXCOORD.z;
    float _281 = _279 * TEXCOORD.w;
    vec4 _301 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _307 = _301.x * cbMtdParam._m0[11u].x;
    float _308 = _301.y * cbMtdParam._m0[11u].y;
    float _309 = _301.z * cbMtdParam._m0[11u].z;
    vec4 _328 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _280) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _281) + cbTextureTilingScale._m0[5u].w));
    vec4 _366 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _368 = _366.x;
    float _380 = dot(vec4(_368, _366.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _397 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_368 - _380) * cbMtdParam._m0[24u].y) + _380) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3965 = isnan(0.0) ? _397 : (isnan(_397) ? 0.0 : max(_397, 0.0));
    float _398 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
    float _405 = (_398 * ((_328.x * cbMtdParam._m0[12u].x) - _307)) + _307;
    float _406 = (_398 * ((_328.y * cbMtdParam._m0[12u].y) - _308)) + _308;
    float _407 = (_398 * ((_328.z * cbMtdParam._m0[12u].z) - _309)) + _309;
    vec4 _426 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _280) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _281) + cbTextureTilingScale._m0[14u].w));
    vec4 _446 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _280) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _281) + cbTextureTilingScale._m0[20u].w));
    vec4 _471 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _280) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _281) + cbTextureTilingScale._m0[4u].w));
    vec4 _488 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _490 = _488.x;
    float _491 = _488.y;
    float _492 = _488.z;
    float _501 = ((_471.z - _492) * _398) + _492;
    float _504 = ((((_471.x - _490) * _398) + _490) * 2.0) + (-1.0);
    float _505 = ((((_471.y - _491) * _398) + _491) * 2.0) + (-1.0);
    float _506 = dot(vec2(_504, _505), vec2(_504, _505));
    float _3976 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _511 = sqrt(1.0 - (isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0))));
    vec4 _527 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _552 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _280) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _281) + cbTextureTilingScale._m0[11u].w));
    float _554 = _552.x;
    float _555 = 1.0 - _554;
    float _561 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _564 = ((isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : min(_561, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _573 = (_564 - ((((((_554 - _555) * cbMtdParam._m0[24u].z) + _555) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _564))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3997 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _574 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
    float _581 = (_574 * ((_426.x * cbMtdParam._m0[18u].x) - _405)) + _405;
    float _582 = (_574 * ((_426.y * cbMtdParam._m0[18u].y) - _406)) + _406;
    float _583 = (_574 * ((_426.z * cbMtdParam._m0[18u].z) - _407)) + _407;
    vec4 _595 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _280) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _281) + cbTextureTilingScale._m0[19u].w));
    float _597 = _595.x;
    float _598 = 1.0 - _597;
    float _625 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_597 - _598) * cbMtdParam._m0[24u].w) + _598) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4008 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _626 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
    float _634 = ((((cbMtdParam._m0[10u].x - _581) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _626) + _581;
    float _635 = ((((cbMtdParam._m0[10u].y - _582) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _626) + _582;
    float _636 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _583)) * _626) + _583;
    vec4 _662 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _664 = _662.x;
    float _682 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _280) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _281) + cbTextureTilingScale._m0[9u].w)).x - _664) * _398) + _664;
    float _686 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _682) * cbMtdParam._m0[19u].z) + _682;
    float _688 = _686 - (_686 * _574);
    float _690 = _688 - (_688 * _626);
    float _695 = (((_446.z - _501) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _501;
    float _699 = ((_527.z - _695) * cbMtdParam._m0[19u].w) + _695;
    vec4 _713 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _280) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _281) + cbTextureTilingScale._m0[15u].w));
    float _720 = (_713.x * 2.0) + (-1.0);
    float _721 = (_713.y * 2.0) + (-1.0);
    float _722 = dot(vec2(_720, _721), vec2(_720, _721));
    float _4019 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
    float _730 = (_574 * (_713.z - _699)) + _699;
    float _733 = ((cbMtdParam._m0[23u].y - _730) * _626) + _730;
    vec4 _752 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _280) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _281) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _758 = (_752.x * 2.0) + (-1.0);
    float _759 = (_752.y * 2.0) + (-1.0);
    float _760 = dot(vec2(_758, _759), vec2(_758, _759));
    float _4030 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    float _774 = (_504 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_446.x * 2.0) + (-1.0)))) + (((_527.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _775 = (_505 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_446.y * 2.0) + (-1.0)))) + (((_527.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _787 = (((_720 - _774) + (cbMtdParam._m0[21u].x * _774)) * _574) + _774;
    float _788 = (((_721 - _775) + (cbMtdParam._m0[21u].x * _775)) * _574) + _775;
    float _789 = (_574 * (sqrt(1.0 - (isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0)))) - _511)) + _511;
    float _800 = (((_758 - _787) + (_787 * cbMtdParam._m0[22u].z)) * _626) + _787;
    float _801 = (((_759 - _788) + (_788 * cbMtdParam._m0[22u].z)) * _626) + _788;
    float _802 = ((sqrt(1.0 - (isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0)))) - _789) * _626) + _789;
    float _804 = cbMtdParam._m0[22u].x + _527.w;
    float _807 = fma(_802, _248 * NORMAL.x, fma(_801, _255 * TANGENT.x, (_241 * _233) * _800));
    float _810 = fma(_802, _248 * NORMAL.y, fma(_801, _255 * TANGENT.y, (_241 * _234) * _800));
    float _813 = fma(_802, _248 * NORMAL.z, fma(_801, _255 * TANGENT.z, (_241 * _235) * _800));
    float _817 = inversesqrt(dot(vec3(_807, _810, _813), vec3(_807, _810, _813)));
    float _818 = _817 * _807;
    float _819 = _817 * _810;
    float _820 = _817 * _813;
    float _4041 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
    float _821 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
    float _4052 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
    float _4063 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _4074 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _4085 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _4096 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _826 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
    float _840 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _880 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _890 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _880);
    float _891 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _880);
    float _892 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _880);
    float _896 = inversesqrt(dot(vec3(_890, _891, _892), vec3(_890, _891, _892)));
    float _897 = _890 * _896;
    float _898 = _891 * _896;
    float _899 = _892 * _896;
    float _905 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _906 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _924 = fma(_820, cbSceneParam._m0[5u].z, fma(_819, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _818));
    float _927 = fma(_820, cbSceneParam._m0[6u].z, fma(_819, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _818));
    float _930 = fma(_820, cbSceneParam._m0[7u].z, fma(_819, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _818));
    uint _944 = (_261 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _950 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0)))) * cbInstanceData._m0[_944].x;
    float _951 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0)))) * cbInstanceData._m0[_944].y;
    float _952 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0)))) * cbInstanceData._m0[_944].z;
    float _4107 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
    float _953 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
    float _4118 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
    float _954 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
    float _4129 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
    float _955 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
    float _956 = 1.0 - _826;
    float _957 = _953 * _956;
    float _958 = _954 * _956;
    float _959 = _955 * _956;
    float _964 = (_953 + (-0.039999999105930328369140625)) * _826;
    float _965 = (_954 + (-0.039999999105930328369140625)) * _826;
    float _966 = (_955 + (-0.039999999105930328369140625)) * _826;
    float _967 = _964 + 0.039999999105930328369140625;
    float _969 = _965 + 0.039999999105930328369140625;
    float _970 = _966 + 0.039999999105930328369140625;
    vec4 _979 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _905, cbSceneParam._m0[86u].y * _906));
    float _983 = ((isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0))) * TEXCOORD_5.w) * _979.x;
    float _984 = dot(vec3(_818, _819, _820), vec3(_897, _898, _899));
    float _987 = _984 * 2.0;
    float _991 = (_987 * _818) - _897;
    float _992 = (_987 * _819) - _898;
    float _993 = (_987 * _820) - _899;
    float _997 = abs(dot(vec3(_897, _898, _899), vec3(_818, _819, _820)));
    float _4140 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
    float _999 = sqrt(_821);
    float _1012 = exp2((_999 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_999 * 3.0));
    float _1018 = (1.0 - _1012) * ((_999 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1019 = _1012 * _999;
    float _1047 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1051 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1055 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1356;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1081 = fma(_1055, cbModelParam._m0[26u].z, fma(_1051, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1047));
        float _1085 = fma(_1055, cbModelParam._m0[27u].z, fma(_1051, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1047));
        float _1089 = fma(_1055, cbModelParam._m0[28u].z, fma(_1051, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1047));
        float _1114 = _1047 + _818;
        float _1115 = _1051 + _819;
        float _1116 = _1055 + _820;
        float _1126 = fma(_1116, cbModelParam._m0[26u].z, fma(_1115, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1114)) - _1081;
        float _1127 = fma(_1116, cbModelParam._m0[27u].z, fma(_1115, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1114)) - _1085;
        float _1128 = fma(_1116, cbModelParam._m0[28u].z, fma(_1115, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1114)) - _1089;
        float _1132 = inversesqrt(dot(vec3(_1126, _1127, _1128), vec3(_1126, _1127, _1128)));
        float _1145 = ((_1132 * _1126) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1081 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1146 = ((_1132 * _1127) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1085 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1147 = ((_1132 * _1128) / cbModelParam._m0[34u].z) + ((((((_1089 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1150 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1145, _1146, _1147), 0.0);
        vec4 _1157 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1145, _1146, _1147), 0.0);
        vec4 _1164 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1145, _1146, _1147), 0.0);
        vec4 _1171 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1145, _1146, _1147), 0.0);
        float _1184 = exp2((_1150.w + (-0.5)) * 20.0) * 2.0;
        float _1185 = _1184 * (_1150.x + (-0.5));
        float _1186 = _1184 * (_1150.y + (-0.5));
        float _1187 = _1184 * (_1150.z + (-0.5));
        float _1194 = exp2((_1157.w + (-0.5)) * 20.0) * 2.0;
        float _1195 = _1194 * (_1157.x + (-0.5));
        float _1196 = _1194 * (_1157.y + (-0.5));
        float _1197 = _1194 * (_1157.z + (-0.5));
        float _1204 = exp2((_1164.w + (-0.5)) * 20.0) * 2.0;
        float _1205 = _1204 * (_1164.x + (-0.5));
        float _1206 = _1204 * (_1164.y + (-0.5));
        float _1207 = _1204 * (_1164.z + (-0.5));
        float _1214 = exp2((_1171.w + (-0.5)) * 20.0) * 2.0;
        float _1215 = _1214 * (_1171.x + (-0.5));
        float _1216 = _1214 * (_1171.y + (-0.5));
        float _1217 = _1214 * (_1171.z + (-0.5));
        float _1218 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1219 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1220 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1221 = _1185 * 0.5;
        float _1222 = _1195 * 0.5;
        float _1223 = _1205 * 0.5;
        float _1224 = dot(vec3(_1221, _1222, _1223), vec3(_1221, _1222, _1223));
        float _1229 = (_1224 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1224);
        float _1238 = (dot(vec3(_818, _819, _820), vec3(_1229 * _1221, _1229 * _1222, _1229 * _1223)) + 1.0) * 0.5;
        float _4166 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1248 = sqrt(((_1222 * _1222) + (_1221 * _1221)) + (_1223 * _1223)) / (_1218 + 9.9999997473787516355514526367188e-06);
        float _4177 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1249 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
        float _1250 = _1249 * 2.0;
        float _1254 = (1.0 - _1249) / (_1249 + 1.0);
        float _4188 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1255 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _1264 = ((((1.0 - _1255) * (_1250 + 2.0)) * exp2(log2(isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0))) * (_1250 + 1.0))) + _1255) * _1218;
        float _1265 = _1186 * 0.5;
        float _1266 = _1196 * 0.5;
        float _1267 = _1206 * 0.5;
        float _1268 = dot(vec3(_1265, _1266, _1267), vec3(_1265, _1266, _1267));
        float _1273 = (_1268 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1268);
        float _1281 = (dot(vec3(_818, _819, _820), vec3(_1273 * _1265, _1273 * _1266, _1273 * _1267)) + 1.0) * 0.5;
        float _4199 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1290 = sqrt(((_1266 * _1266) + (_1265 * _1265)) + (_1267 * _1267)) / (_1219 + 9.9999997473787516355514526367188e-06);
        float _4210 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1291 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
        float _1292 = _1291 * 2.0;
        float _1296 = (1.0 - _1291) / (_1291 + 1.0);
        float _4221 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1297 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
        float _1306 = ((((1.0 - _1297) * (_1292 + 2.0)) * exp2(log2(isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0))) * (_1292 + 1.0))) + _1297) * _1219;
        float _1307 = _1187 * 0.5;
        float _1308 = _1197 * 0.5;
        float _1309 = _1207 * 0.5;
        float _1310 = dot(vec3(_1307, _1308, _1309), vec3(_1307, _1308, _1309));
        float _1315 = (_1310 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1310);
        float _1323 = (dot(vec3(_818, _819, _820), vec3(_1315 * _1307, _1315 * _1308, _1315 * _1309)) + 1.0) * 0.5;
        float _4232 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1332 = sqrt(((_1308 * _1308) + (_1307 * _1307)) + (_1309 * _1309)) / (_1220 + 9.9999997473787516355514526367188e-06);
        float _4243 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1333 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
        float _1334 = _1333 * 2.0;
        float _1338 = (1.0 - _1333) / (_1333 + 1.0);
        float _4254 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1339 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
        float _1348 = ((((1.0 - _1339) * (_1334 + 2.0)) * exp2(log2(isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0))) * (_1334 + 1.0))) + _1339) * _1220;
        _1356 = _1187;
        _1358 = _1186;
        _1359 = _1185;
        _1360 = _1197;
        _1361 = _1196;
        _1362 = _1195;
        _1363 = _1207;
        _1364 = _1206;
        _1365 = _1205;
        _1366 = _1220;
        _1367 = _1219;
        _1368 = _1218;
        _1369 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0)));
        _1370 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0)));
        _1371 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0)));
    }
    else
    {
        _1356 = _1357;
        _1358 = _1357;
        _1359 = _1357;
        _1360 = _1357;
        _1361 = _1357;
        _1362 = _1357;
        _1363 = _1357;
        _1364 = _1357;
        _1365 = _1357;
        _1366 = _1357;
        _1367 = _1357;
        _1368 = _1357;
        _1369 = 0.0;
        _1370 = 0.0;
        _1371 = 0.0;
    }
    float _1665;
    float _1666;
    float _1667;
    float _1668;
    float _1669;
    float _1670;
    float _1671;
    float _1672;
    float _1673;
    float _1674;
    float _1675;
    float _1676;
    float _1677;
    float _1678;
    float _1679;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1396 = fma(_1055, cbModelParam._m0[30u].z, fma(_1051, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1047));
        float _1400 = fma(_1055, cbModelParam._m0[31u].z, fma(_1051, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1047));
        float _1404 = fma(_1055, cbModelParam._m0[32u].z, fma(_1051, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1047));
        float _1427 = _1047 + _818;
        float _1428 = _1051 + _819;
        float _1429 = _1055 + _820;
        float _1439 = fma(_1429, cbModelParam._m0[30u].z, fma(_1428, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1427)) - _1396;
        float _1440 = fma(_1429, cbModelParam._m0[31u].z, fma(_1428, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1427)) - _1400;
        float _1441 = fma(_1429, cbModelParam._m0[32u].z, fma(_1428, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1427)) - _1404;
        float _1445 = inversesqrt(dot(vec3(_1439, _1440, _1441), vec3(_1439, _1440, _1441)));
        float _1458 = ((_1445 * _1439) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1396 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1459 = ((_1445 * _1440) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1400 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1460 = ((_1445 * _1441) / cbModelParam._m0[35u].z) + ((((((_1404 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1462 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1458, _1459, _1460), 0.0);
        vec4 _1469 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1458, _1459, _1460), 0.0);
        vec4 _1476 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1458, _1459, _1460), 0.0);
        vec4 _1483 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1458, _1459, _1460), 0.0);
        float _1495 = exp2((_1462.w + (-0.5)) * 20.0) * 2.0;
        float _1496 = _1495 * (_1462.x + (-0.5));
        float _1497 = _1495 * (_1462.y + (-0.5));
        float _1498 = _1495 * (_1462.z + (-0.5));
        float _1505 = exp2((_1469.w + (-0.5)) * 20.0) * 2.0;
        float _1506 = _1505 * (_1469.x + (-0.5));
        float _1507 = _1505 * (_1469.y + (-0.5));
        float _1508 = _1505 * (_1469.z + (-0.5));
        float _1515 = exp2((_1476.w + (-0.5)) * 20.0) * 2.0;
        float _1516 = _1515 * (_1476.x + (-0.5));
        float _1517 = _1515 * (_1476.y + (-0.5));
        float _1518 = _1515 * (_1476.z + (-0.5));
        float _1525 = exp2((_1483.w + (-0.5)) * 20.0) * 2.0;
        float _1526 = _1525 * (_1483.x + (-0.5));
        float _1527 = _1525 * (_1483.y + (-0.5));
        float _1528 = _1525 * (_1483.z + (-0.5));
        float _1529 = isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0));
        float _1530 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1531 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1532 = _1496 * 0.5;
        float _1533 = _1506 * 0.5;
        float _1534 = _1516 * 0.5;
        float _1535 = dot(vec3(_1532, _1533, _1534), vec3(_1532, _1533, _1534));
        float _1540 = (_1535 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1535);
        float _1548 = (dot(vec3(_818, _819, _820), vec3(_1540 * _1532, _1540 * _1533, _1540 * _1534)) + 1.0) * 0.5;
        float _4295 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1557 = sqrt(((_1533 * _1533) + (_1532 * _1532)) + (_1534 * _1534)) / (_1529 + 9.9999997473787516355514526367188e-06);
        float _4306 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1558 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
        float _1559 = _1558 * 2.0;
        float _1563 = (1.0 - _1558) / (_1558 + 1.0);
        float _4317 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0));
        float _1564 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
        float _1573 = ((((1.0 - _1564) * (_1559 + 2.0)) * exp2(log2(isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0))) * (_1559 + 1.0))) + _1564) * _1529;
        float _1574 = _1497 * 0.5;
        float _1575 = _1507 * 0.5;
        float _1576 = _1517 * 0.5;
        float _1577 = dot(vec3(_1574, _1575, _1576), vec3(_1574, _1575, _1576));
        float _1582 = (_1577 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1577);
        float _1590 = (dot(vec3(_818, _819, _820), vec3(_1582 * _1574, _1582 * _1575, _1582 * _1576)) + 1.0) * 0.5;
        float _4328 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
        float _1599 = sqrt(((_1575 * _1575) + (_1574 * _1574)) + (_1576 * _1576)) / (_1530 + 9.9999997473787516355514526367188e-06);
        float _4339 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
        float _1600 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
        float _1601 = _1600 * 2.0;
        float _1605 = (1.0 - _1600) / (_1600 + 1.0);
        float _4350 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
        float _1606 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
        float _1615 = ((((1.0 - _1606) * (_1601 + 2.0)) * exp2(log2(isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0))) * (_1601 + 1.0))) + _1606) * _1530;
        float _1616 = _1498 * 0.5;
        float _1617 = _1508 * 0.5;
        float _1618 = _1518 * 0.5;
        float _1619 = dot(vec3(_1616, _1617, _1618), vec3(_1616, _1617, _1618));
        float _1624 = (_1619 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1619);
        float _1632 = (dot(vec3(_818, _819, _820), vec3(_1624 * _1616, _1624 * _1617, _1624 * _1618)) + 1.0) * 0.5;
        float _4361 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
        float _1641 = sqrt(((_1617 * _1617) + (_1616 * _1616)) + (_1618 * _1618)) / (_1531 + 9.9999997473787516355514526367188e-06);
        float _4372 = isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0));
        float _1642 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
        float _1643 = _1642 * 2.0;
        float _1647 = (1.0 - _1642) / (_1642 + 1.0);
        float _4383 = isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0));
        float _1648 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
        float _1657 = ((((1.0 - _1648) * (_1643 + 2.0)) * exp2(log2(isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0))) * (_1643 + 1.0))) + _1648) * _1531;
        _1665 = _1498;
        _1666 = _1497;
        _1667 = _1496;
        _1668 = _1508;
        _1669 = _1507;
        _1670 = _1506;
        _1671 = _1518;
        _1672 = _1517;
        _1673 = _1516;
        _1674 = _1531;
        _1675 = _1530;
        _1676 = _1529;
        _1677 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0)));
        _1678 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0)));
        _1679 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0)));
    }
    else
    {
        _1665 = _1357;
        _1666 = _1357;
        _1667 = _1357;
        _1668 = _1357;
        _1669 = _1357;
        _1670 = _1357;
        _1671 = _1357;
        _1672 = _1357;
        _1673 = _1357;
        _1674 = _1357;
        _1675 = _1357;
        _1676 = _1357;
        _1677 = 0.0;
        _1678 = 0.0;
        _1679 = 0.0;
    }
    float _1689 = (cbModelParam._m0[1u].x * (_1677 - _1369)) + _1369;
    float _1690 = (cbModelParam._m0[1u].x * (_1678 - _1370)) + _1370;
    float _1691 = (cbModelParam._m0[1u].x * (_1679 - _1371)) + _1371;
    float _1712 = fma(_1691, cbSceneParam._m0[89u].z, fma(_1690, cbSceneParam._m0[89u].y, _1689 * cbSceneParam._m0[89u].x));
    float _1715 = fma(_1691, cbSceneParam._m0[90u].z, fma(_1690, cbSceneParam._m0[90u].y, _1689 * cbSceneParam._m0[90u].x));
    float _1718 = fma(_1691, cbSceneParam._m0[91u].z, fma(_1690, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1689));
    float _1733 = _991 * 0.5;
    float _1734 = _992 * 0.5;
    float _1735 = _993 * 0.5;
    float _1736 = dot(vec4(_1733, _1734, _1735, 1.0), vec4(_1667, _1670, _1673, _1676));
    float _1739 = dot(vec4(_1733, _1734, _1735, 1.0), vec4(_1666, _1669, _1672, _1675));
    float _1742 = dot(vec4(_1733, _1734, _1735, 1.0), vec4(_1665, _1668, _1671, _1674));
    float _1776;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1749 = dot(vec4(_1733, _1734, _1735, 1.0), vec4(_1356, _1360, _1363, _1366));
        float _1753 = dot(vec4(_1733, _1734, _1735, 1.0), vec4(_1358, _1361, _1364, _1367));
        float _1757 = dot(vec4(_1733, _1734, _1735, 1.0), vec4(_1359, _1362, _1365, _1368));
        float _1764 = dot(vec4(cbModelParam._m0[39u]), vec4(_1733, _1734, _1735, 1.0));
        _1776 = dot(vec3(isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0)), isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0)), isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1764) ? 0.0 : (isnan(0.0) ? _1764 : max(0.0, _1764))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1776 = 1.0;
    }
    float _1787;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1778 = dot(vec4(cbModelParam._m0[40u]), vec4(_1733, _1734, _1735, 1.0));
        _1787 = dot(vec3(isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0)), isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0)), isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1778) ? 0.0 : (isnan(0.0) ? _1778 : max(0.0, _1778))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1787 = 1.0;
    }
    float _1791 = (_1787 * cbModelParam._m0[1u].x) + (_1776 * (1.0 - cbModelParam._m0[1u].x));
    float _1801 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _821);
    float _1802 = isnan(_1801) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1801 : min(cbModelParam._m0[25u].z, _1801));
    float _1882;
    float _1884;
    float _1886;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1849 = fma(_1055, cbModelParam._m0[13u].z, fma(_1051, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1047)) + cbModelParam._m0[13u].w;
        float _1853 = fma(_1055, cbModelParam._m0[14u].z, fma(_1051, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1047)) + cbModelParam._m0[14u].w;
        float _1857 = fma(_1055, cbModelParam._m0[15u].z, fma(_1051, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1047)) + cbModelParam._m0[15u].w;
        float _1860 = fma(_993, cbModelParam._m0[13u].z, fma(_992, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _991));
        float _1863 = fma(_993, cbModelParam._m0[14u].z, fma(_992, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _991));
        float _1866 = fma(_993, cbModelParam._m0[15u].z, fma(_992, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _991));
        float _1894;
        if (_1860 > 0.0)
        {
            _1894 = abs((1.0 - _1849) / _1860);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1860 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1849 + 1.0) / _1860);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1894 = frontier_phi_14_12_ladder;
        }
        float _2065;
        if (_1863 > 0.0)
        {
            _2065 = abs((1.0 - _1853) / _1863);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1863 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1853 + 1.0) / _1863);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2065 = frontier_phi_23_19_ladder;
        }
        float _2360;
        if (_1866 > 0.0)
        {
            _2360 = abs((1.0 - _1857) / _1866);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1866 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1857 + 1.0) / _1866);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2360 = frontier_phi_35_30_ladder;
        }
        float _2362 = isnan(_2065) ? _1894 : (isnan(_1894) ? _2065 : min(_1894, _2065));
        float _2363 = isnan(_2360) ? _2362 : (isnan(_2362) ? _2360 : min(_2362, _2360));
        float _2367 = (_2363 * _1860) + _1849;
        float _2368 = (_2363 * _1863) + _1853;
        float _2369 = (_2363 * _1866) + _1857;
        float _2370 = _2363 * 9.9999997473787516355514526367188e-05;
        float _2372 = (-1.0) - _2370;
        float _2374 = _2370 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2369 > _2374) || ((_2369 < _2372) || ((_2368 > _2374) || ((_2368 < _2372) || ((_2367 < _2372) || (_2367 > _2374))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2514 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2369, cbModelParam._m0[9u].z, fma(_2368, cbModelParam._m0[9u].y, _2367 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2369, cbModelParam._m0[10u].z, fma(_2368, cbModelParam._m0[10u].y, _2367 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2369, cbModelParam._m0[11u].z, fma(_2368, cbModelParam._m0[11u].y, _2367 * cbModelParam._m0[11u].x))), _1802);
            frontier_phi_13_35_ladder = _2514.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2514.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2514.x * cbModelParam._m0[1u].y;
        }
        _1882 = frontier_phi_13_35_ladder_2;
        _1884 = frontier_phi_13_35_ladder_1;
        _1886 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1870 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_991, _992, _993), _1802);
        _1882 = _1870.x * cbModelParam._m0[1u].y;
        _1884 = _1870.y * cbModelParam._m0[1u].y;
        _1886 = _1870.z * cbModelParam._m0[1u].y;
    }
    float _1890 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _821);
    float _1891 = isnan(_1890) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1890 : min(cbModelParam._m0[25u].w, _1890));
    float _1980;
    float _1982;
    float _1984;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1944 = fma(_1055, cbModelParam._m0[21u].z, fma(_1051, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1047)) + cbModelParam._m0[21u].w;
        float _1948 = fma(_1055, cbModelParam._m0[22u].z, fma(_1051, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1047)) + cbModelParam._m0[22u].w;
        float _1952 = fma(_1055, cbModelParam._m0[23u].z, fma(_1051, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1047)) + cbModelParam._m0[23u].w;
        float _1955 = fma(_993, cbModelParam._m0[21u].z, fma(_992, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _991));
        float _1958 = fma(_993, cbModelParam._m0[22u].z, fma(_992, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _991));
        float _1961 = fma(_993, cbModelParam._m0[23u].z, fma(_992, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _991));
        float _2070;
        if (_1955 > 0.0)
        {
            _2070 = abs((1.0 - _1944) / _1955);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1955 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1944 + 1.0) / _1955);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2070 = frontier_phi_25_21_ladder;
        }
        float _2387;
        if (_1958 > 0.0)
        {
            _2387 = abs((1.0 - _1948) / _1958);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1958 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1948 + 1.0) / _1958);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2387 = frontier_phi_37_32_ladder;
        }
        float _2725;
        if (_1961 > 0.0)
        {
            _2725 = abs((1.0 - _1952) / _1961);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1961 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1952 + 1.0) / _1961);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2725 = frontier_phi_47_44_ladder;
        }
        float _2727 = isnan(_2387) ? _2070 : (isnan(_2070) ? _2387 : min(_2070, _2387));
        float _2728 = isnan(_2725) ? _2727 : (isnan(_2727) ? _2725 : min(_2727, _2725));
        float _2732 = (_2728 * _1955) + _1944;
        float _2733 = (_2728 * _1958) + _1948;
        float _2734 = (_2728 * _1961) + _1952;
        float _2735 = _2728 * 9.9999997473787516355514526367188e-05;
        float _2736 = (-1.0) - _2735;
        float _2738 = _2735 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2734 > _2738) || ((_2734 < _2736) || ((_2733 > _2738) || ((_2733 < _2736) || ((_2732 < _2736) || (_2732 > _2738))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2856 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2734, cbModelParam._m0[17u].z, fma(_2733, cbModelParam._m0[17u].y, _2732 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2734, cbModelParam._m0[18u].z, fma(_2733, cbModelParam._m0[18u].y, _2732 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2734, cbModelParam._m0[19u].z, fma(_2733, cbModelParam._m0[19u].y, _2732 * cbModelParam._m0[19u].x))), _1891);
            frontier_phi_22_47_ladder = _2856.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2856.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2856.x * cbModelParam._m0[1u].z;
        }
        _1980 = frontier_phi_22_47_ladder_2;
        _1982 = frontier_phi_22_47_ladder_1;
        _1984 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1964 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_991, _992, _993), _1891);
        _1980 = _1964.x * cbModelParam._m0[1u].z;
        _1982 = _1964.y * cbModelParam._m0[1u].z;
        _1984 = _1964.z * cbModelParam._m0[1u].z;
    }
    float _1997 = (((_1018 * _967) + _1019) * _983) * ((cbModelParam._m0[1u].w * (_1980 - _1882)) + _1882);
    float _1999 = (((_1018 * _969) + _1019) * _983) * ((cbModelParam._m0[1u].w * (_1982 - _1884)) + _1884);
    float _2001 = (((_1018 * _970) + _1019) * _983) * ((cbModelParam._m0[1u].w * (_1984 - _1886)) + _1886);
    float _2004 = fma(_2001, cbSceneParam._m0[89u].z, fma(_1999, cbSceneParam._m0[89u].y, _1997 * cbSceneParam._m0[89u].x));
    float _2007 = fma(_2001, cbSceneParam._m0[90u].z, fma(_1999, cbSceneParam._m0[90u].y, _1997 * cbSceneParam._m0[90u].x));
    float _2010 = fma(_2001, cbSceneParam._m0[91u].z, fma(_1999, cbSceneParam._m0[91u].y, _1997 * cbSceneParam._m0[91u].x));
    float _2044 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2048 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2052 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2056 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2057 = _2044 / _2056;
    float _2058 = _2048 / _2056;
    float _2059 = _2052 / _2056;
    float _2206;
    float _2207;
    float _2208;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2086 = ((uint(_2059 > cbSceneParam._m0[59u].y) + uint(_2059 > cbSceneParam._m0[59u].x)) + uint(_2059 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2087 = _2086 + 43u;
        uint _2095 = _2086 + 44u;
        uint _2103 = _2086 + 45u;
        uint _2111 = _2086 + 46u;
        float _2122 = fma(_2056, cbSceneParam._m0[_2087].w, fma(_2052, cbSceneParam._m0[_2087].z, fma(_2048, cbSceneParam._m0[_2087].y, _2044 * cbSceneParam._m0[_2087].x)));
        float _2126 = fma(_2056, cbSceneParam._m0[_2095].w, fma(_2052, cbSceneParam._m0[_2095].z, fma(_2048, cbSceneParam._m0[_2095].y, _2044 * cbSceneParam._m0[_2095].x)));
        float _2134 = fma(_2056, cbSceneParam._m0[_2111].w, fma(_2052, cbSceneParam._m0[_2111].z, fma(_2048, cbSceneParam._m0[_2111].y, _2044 * cbSceneParam._m0[_2111].x)));
        float _2139 = cbSceneParam._m0[33u].z * _2134;
        float _2141 = cbSceneParam._m0[33u].w * _2134;
        float _2144 = fma(_2056, cbSceneParam._m0[_2103].w, fma(_2052, cbSceneParam._m0[_2103].z, fma(_2048, cbSceneParam._m0[_2103].y, _2044 * cbSceneParam._m0[_2103].x))) / _2134;
        float _2192 = (cbSceneParam._m0[33u].x - sqrt(((_2058 * _2058) + (_2057 * _2057)) + (_2059 * _2059))) * cbSceneParam._m0[33u].y;
        float _4509 = isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0));
        float _2199 = (isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2139 + _2122) / _2134, (_2141 + _2126) / _2134), _2144), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2141 + _2122) / _2134, (_2126 - _2139) / _2134), _2144), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2122 - _2139) / _2134, (_2126 - _2141) / _2134), _2144), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2122 - _2141) / _2134, (_2139 + _2126) / _2134), _2144), 0.0)).x), vec4(0.25)));
        _2206 = 1.0 - (_2199 * cbSceneParam._m0[34u].x);
        _2207 = 1.0 - (_2199 * cbSceneParam._m0[34u].y);
        _2208 = 1.0 - (_2199 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2206 = 1.0;
        _2207 = 1.0;
        _2208 = 1.0;
    }
    float _2272;
    float _2274;
    float _2276;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2260 = fma(_2056, cbSceneParam._m0[63u].w, fma(_2052, cbSceneParam._m0[63u].z, fma(_2048, cbSceneParam._m0[63u].y, _2044 * cbSceneParam._m0[63u].x)));
        float _2261 = fma(_2056, cbSceneParam._m0[60u].w, fma(_2052, cbSceneParam._m0[60u].z, fma(_2048, cbSceneParam._m0[60u].y, _2044 * cbSceneParam._m0[60u].x))) / _2260;
        float _2262 = fma(_2056, cbSceneParam._m0[61u].w, fma(_2052, cbSceneParam._m0[61u].z, fma(_2048, cbSceneParam._m0[61u].y, _2044 * cbSceneParam._m0[61u].x))) / _2260;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2261 >= cbSceneParam._m0[64u].x) && (_2262 >= cbSceneParam._m0[64u].y)) && (_2261 <= cbSceneParam._m0[64u].z)) && (_2262 <= cbSceneParam._m0[64u].w))
        {
            float _2400 = fma(_2056, cbSceneParam._m0[62u].w, fma(_2052, cbSceneParam._m0[62u].z, fma(_2048, cbSceneParam._m0[62u].y, _2044 * cbSceneParam._m0[62u].x))) / _2260;
            float _2404 = isnan(cbSceneParam._m0[41u].w) ? _2400 : (isnan(_2400) ? cbSceneParam._m0[41u].w : max(_2400, cbSceneParam._m0[41u].w));
            float _2447 = (cbSceneParam._m0[33u].x - sqrt(((_2058 * _2058) + (_2057 * _2057)) + (_2059 * _2059))) * cbSceneParam._m0[33u].y;
            float _4525 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
            float _2454 = (isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2261, cbSceneParam._m0[33u].w + _2262), _2404), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2261, _2262 - cbSceneParam._m0[33u].z), _2404), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2261 - cbSceneParam._m0[33u].z, _2262 - cbSceneParam._m0[33u].w), _2404), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2261 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2262), _2404), 0.0)).x), vec4(0.25)));
            float _2458 = 1.0 - (_2454 * cbSceneParam._m0[34u].x);
            float _2459 = 1.0 - (_2454 * cbSceneParam._m0[34u].y);
            float _2460 = 1.0 - (_2454 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2460) ? _2208 : (isnan(_2208) ? _2460 : min(_2208, _2460));
            frontier_phi_34_33_ladder_1 = isnan(_2459) ? _2207 : (isnan(_2207) ? _2459 : min(_2207, _2459));
            frontier_phi_34_33_ladder_2 = isnan(_2458) ? _2206 : (isnan(_2206) ? _2458 : min(_2206, _2458));
        }
        else
        {
            frontier_phi_34_33_ladder = _2208;
            frontier_phi_34_33_ladder_1 = _2207;
            frontier_phi_34_33_ladder_2 = _2206;
        }
        _2272 = frontier_phi_34_33_ladder_2;
        _2274 = frontier_phi_34_33_ladder_1;
        _2276 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2272 = _2206;
        _2274 = _2207;
        _2276 = _2208;
    }
    uvec4 _2281 = floatBitsToUint(cbInstanceData._m0[_261 + 5u]);
    uint _2283 = _2281.x * 14u;
    uint _2284 = _2283 + 13u;
    float _2291 = _983 + (-1.0);
    float _2296 = (cbLight._m0[_2284].x * _2291) + 1.0;
    float _2297 = (cbLight._m0[_2284].y * _2291) + 1.0;
    float _2298 = (cbLight._m0[_2284].z * _2291) + 1.0;
    float _2299 = (cbLight._m0[_2284].w * _2291) + 1.0;
    uint _2300 = _2283 + 5u;
    float _2306 = isnan(1.0) ? _2297 : (isnan(_2297) ? 1.0 : min(_2297, 1.0));
    uint _2310 = _2283 + 4u;
    float _2319 = isnan(1.0) ? _2296 : (isnan(_2296) ? 1.0 : min(_2296, 1.0));
    uint _2323 = _2283 | 1u;
    float _2334 = dot(vec3(cbLight._m0[_2283].xyz), vec3(_818, _819, _820));
    float _2337 = dot(vec3(cbLight._m0[_2323].xyz), vec3(_818, _819, _820));
    float _4561 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
    float _4572 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
    float _2342 = (isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0))) * 0.3183098733425140380859375;
    float _2344 = (isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0))) * 0.3183098733425140380859375;
    float _2351 = ((cbLight._m0[_2300].x * _2306) * _2344) + (((cbLight._m0[_2310].x * _2272) * _2319) * _2342);
    float _2352 = ((_2306 * cbLight._m0[_2300].y) * _2344) + (((cbLight._m0[_2310].y * _2274) * _2319) * _2342);
    float _2353 = ((_2306 * cbLight._m0[_2300].z) * _2344) + (((cbLight._m0[_2310].z * _2276) * _2319) * _2342);
    uvec4 _2357 = floatBitsToUint(cbLight._m0[_2283 + 12u]);
    bool _2359 = _2357.x == 0u;
    float _2461;
    float _2463;
    float _2465;
    if (_2359)
    {
        _2461 = _2351;
        _2463 = _2352;
        _2465 = _2353;
    }
    else
    {
        uint _2469 = _2283 + 6u;
        float _2485 = (dot(vec3(cbLight._m0[_2283 + 2u].xyz), vec3(_818, _819, _820)) * 0.5) + 0.5;
        float _2486 = _2485 * _2485;
        float _4583 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
        float _2487 = isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0));
        float _2488 = isnan(1.0) ? _2298 : (isnan(_2298) ? 1.0 : min(_2298, 1.0));
        _2461 = (((cbLight._m0[_2469].x * 0.3183098733425140380859375) * _2487) * _2488) + _2351;
        _2463 = (((cbLight._m0[_2469].y * 0.3183098733425140380859375) * _2487) * _2488) + _2352;
        _2465 = (((cbLight._m0[_2469].z * 0.3183098733425140380859375) * _2487) * _2488) + _2353;
    }
    bool _2468 = _2357.y == 0u;
    float _2523;
    float _2525;
    float _2527;
    if (_2468)
    {
        _2523 = _2461;
        _2525 = _2463;
        _2527 = _2465;
    }
    else
    {
        uint _2696 = _2283 + 7u;
        float _2712 = (dot(vec3(cbLight._m0[_2283 + 3u].xyz), vec3(_818, _819, _820)) * 0.5) + 0.5;
        float _2713 = _2712 * _2712;
        float _4599 = isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : max(_2713, 0.0));
        float _2714 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
        float _2715 = isnan(1.0) ? _2299 : (isnan(_2299) ? 1.0 : min(_2299, 1.0));
        _2523 = (((cbLight._m0[_2696].x * 0.3183098733425140380859375) * _2714) * _2715) + _2461;
        _2525 = (((cbLight._m0[_2696].y * 0.3183098733425140380859375) * _2714) * _2715) + _2463;
        _2527 = (((cbLight._m0[_2696].z * 0.3183098733425140380859375) * _2714) * _2715) + _2465;
    }
    uint _2530 = _2283 + 8u;
    float _2543 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2283].w)) * _821) * 0.949999988079071044921875);
    float _2544 = _2543 * _2543;
    float _2545 = cbLight._m0[_2283].x + _897;
    float _2546 = cbLight._m0[_2283].y + _898;
    float _2547 = cbLight._m0[_2283].z + _899;
    float _2551 = inversesqrt(dot(vec3(_2545, _2546, _2547), vec3(_2545, _2546, _2547)));
    float _2552 = _2551 * _2545;
    float _2553 = _2551 * _2546;
    float _2554 = _2551 * _2547;
    float _2555 = dot(vec3(_818, _819, _820), vec3(cbLight._m0[_2283].xyz));
    float _4615 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0));
    float _2558 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
    float _4626 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
    float _2559 = isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0));
    float _2560 = dot(vec3(_818, _819, _820), vec3(_2552, _2553, _2554));
    float _4637 = isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : max(_2560, 0.0));
    float _2563 = isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0));
    float _2564 = dot(vec3(cbLight._m0[_2283].xyz), vec3(_2552, _2553, _2554));
    float _4648 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
    float _2568 = _2544 * _2544;
    float _2572 = ((_2563 * _2563) * (_2568 + (-1.0))) + 1.0;
    float _2580 = exp2(log2(1.0 - (isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0)))) * 5.0);
    float _2581 = 0.959999978542327880859375 - _964;
    float _2583 = 0.959999978542327880859375 - _965;
    float _2584 = 0.959999978542327880859375 - _966;
    float _2591 = 1.0 - _2544;
    float _2602 = (0.5 / (((_2559 * ((_2558 * _2591) + _2544)) + 9.9999999392252902907785028219223e-09) + (((_2559 * _2591) + _2544) * _2558))) * _2558;
    float _4659 = isnan(0.0) ? _2602 : (isnan(_2602) ? 0.0 : max(_2602, 0.0));
    float _2604 = (isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0))) * (_2568 / ((_2572 * _2572) * 3.141590118408203125));
    uint _2618 = _2283 + 9u;
    float _2629 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2323].w)) * _821) * 0.949999988079071044921875);
    float _2630 = _2629 * _2629;
    float _2631 = cbLight._m0[_2323].x + _897;
    float _2632 = cbLight._m0[_2323].y + _898;
    float _2633 = cbLight._m0[_2323].z + _899;
    float _2637 = inversesqrt(dot(vec3(_2631, _2632, _2633), vec3(_2631, _2632, _2633)));
    float _2638 = _2637 * _2631;
    float _2639 = _2637 * _2632;
    float _2640 = _2637 * _2633;
    float _2641 = dot(vec3(_818, _819, _820), vec3(cbLight._m0[_2323].xyz));
    float _4670 = isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : max(_2641, 0.0));
    float _2644 = isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0));
    float _2645 = dot(vec3(_818, _819, _820), vec3(_2638, _2639, _2640));
    float _4681 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0));
    float _2648 = isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0));
    float _2649 = dot(vec3(cbLight._m0[_2323].xyz), vec3(_2638, _2639, _2640));
    float _4692 = isnan(0.0) ? _2649 : (isnan(_2649) ? 0.0 : max(_2649, 0.0));
    float _2653 = _2630 * _2630;
    float _2657 = ((_2648 * _2648) * (_2653 + (-1.0))) + 1.0;
    float _2664 = exp2(log2(1.0 - (isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0)))) * 5.0);
    float _2671 = 1.0 - _2630;
    float _2681 = (0.5 / (((_2559 * ((_2644 * _2671) + _2630)) + 9.9999999392252902907785028219223e-09) + (((_2559 * _2671) + _2630) * _2644))) * _2644;
    float _4703 = isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0));
    float _2683 = (isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0))) * (_2653 / ((_2657 * _2657) * 3.141590118408203125));
    float _2693 = (((((_2664 * _2581) + _967) * cbLight._m0[_2618].x) * _2683) * _2306) + ((((cbLight._m0[_2530].x * _2272) * ((_2580 * _2581) + _967)) * _2604) * _2319);
    float _2694 = (((((_2664 * _2583) + _969) * cbLight._m0[_2618].y) * _2683) * _2306) + ((((cbLight._m0[_2530].y * _2274) * ((_2580 * _2583) + _969)) * _2604) * _2319);
    float _2695 = (((((_2664 * _2584) + _970) * cbLight._m0[_2618].z) * _2683) * _2306) + ((((cbLight._m0[_2530].z * _2276) * ((_2580 * _2584) + _970)) * _2604) * _2319);
    float _2751;
    float _2753;
    float _2755;
    if (_2359)
    {
        _2751 = _2693;
        _2753 = _2694;
        _2755 = _2695;
    }
    else
    {
        uint _2757 = _2283 + 2u;
        uint _2761 = _2283 + 10u;
        float _2775 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2757].w)) * _821) * 0.949999988079071044921875);
        float _2776 = _2775 * _2775;
        float _2777 = cbLight._m0[_2757].x + _897;
        float _2778 = cbLight._m0[_2757].y + _898;
        float _2779 = cbLight._m0[_2757].z + _899;
        float _2783 = inversesqrt(dot(vec3(_2777, _2778, _2779), vec3(_2777, _2778, _2779)));
        float _2784 = _2783 * _2777;
        float _2785 = _2783 * _2778;
        float _2786 = _2783 * _2779;
        float _2787 = dot(vec3(_818, _819, _820), vec3(cbLight._m0[_2757].xyz));
        float _4714 = isnan(0.0) ? _2787 : (isnan(_2787) ? 0.0 : max(_2787, 0.0));
        float _2790 = isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0));
        float _2791 = dot(vec3(_818, _819, _820), vec3(_2784, _2785, _2786));
        float _4725 = isnan(0.0) ? _2791 : (isnan(_2791) ? 0.0 : max(_2791, 0.0));
        float _2794 = isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0));
        float _2795 = dot(vec3(cbLight._m0[_2757].xyz), vec3(_2784, _2785, _2786));
        float _4736 = isnan(0.0) ? _2795 : (isnan(_2795) ? 0.0 : max(_2795, 0.0));
        float _2799 = _2776 * _2776;
        float _2803 = ((_2794 * _2794) * (_2799 + (-1.0))) + 1.0;
        float _2810 = exp2(log2(1.0 - (isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0)))) * 5.0);
        float _2817 = 1.0 - _2776;
        float _2827 = (0.5 / (((_2559 * ((_2790 * _2817) + _2776)) + 9.9999999392252902907785028219223e-09) + (((_2559 * _2817) + _2776) * _2790))) * _2790;
        float _4747 = isnan(0.0) ? _2827 : (isnan(_2827) ? 0.0 : max(_2827, 0.0));
        float _2829 = (isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0))) * (_2799 / ((_2803 * _2803) * 3.141590118408203125));
        float _2830 = isnan(1.0) ? _2298 : (isnan(_2298) ? 1.0 : min(_2298, 1.0));
        _2751 = (((((_2810 * _2581) + _967) * cbLight._m0[_2761].x) * _2829) * _2830) + _2693;
        _2753 = (((((_2810 * _2583) + _969) * cbLight._m0[_2761].y) * _2829) * _2830) + _2694;
        _2755 = (((((_2810 * _2584) + _970) * cbLight._m0[_2761].z) * _2829) * _2830) + _2695;
    }
    float _2861;
    float _2863;
    float _2865;
    if (_2468)
    {
        _2861 = _2751;
        _2863 = _2753;
        _2865 = _2755;
    }
    else
    {
        uint _2872 = _2283 + 3u;
        uint _2876 = _2283 + 11u;
        float _2890 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2872].w)) * _821) * 0.949999988079071044921875);
        float _2891 = _2890 * _2890;
        float _2892 = cbLight._m0[_2872].x + _897;
        float _2893 = cbLight._m0[_2872].y + _898;
        float _2894 = cbLight._m0[_2872].z + _899;
        float _2898 = inversesqrt(dot(vec3(_2892, _2893, _2894), vec3(_2892, _2893, _2894)));
        float _2899 = _2898 * _2892;
        float _2900 = _2898 * _2893;
        float _2901 = _2898 * _2894;
        float _2902 = dot(vec3(_818, _819, _820), vec3(cbLight._m0[_2872].xyz));
        float _4763 = isnan(0.0) ? _2902 : (isnan(_2902) ? 0.0 : max(_2902, 0.0));
        float _2905 = isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0));
        float _2906 = dot(vec3(_818, _819, _820), vec3(_2899, _2900, _2901));
        float _4774 = isnan(0.0) ? _2906 : (isnan(_2906) ? 0.0 : max(_2906, 0.0));
        float _2909 = isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0));
        float _2910 = dot(vec3(cbLight._m0[_2872].xyz), vec3(_2899, _2900, _2901));
        float _4785 = isnan(0.0) ? _2910 : (isnan(_2910) ? 0.0 : max(_2910, 0.0));
        float _2914 = _2891 * _2891;
        float _2918 = ((_2909 * _2909) * (_2914 + (-1.0))) + 1.0;
        float _2925 = exp2(log2(1.0 - (isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0)))) * 5.0);
        float _2932 = 1.0 - _2891;
        float _2942 = (0.5 / (((_2559 * ((_2905 * _2932) + _2891)) + 9.9999999392252902907785028219223e-09) + (((_2559 * _2932) + _2891) * _2905))) * _2905;
        float _4796 = isnan(0.0) ? _2942 : (isnan(_2942) ? 0.0 : max(_2942, 0.0));
        float _2944 = (isnan(1.0) ? _4796 : (isnan(_4796) ? 1.0 : min(_4796, 1.0))) * (_2914 / ((_2918 * _2918) * 3.141590118408203125));
        float _2945 = isnan(1.0) ? _2299 : (isnan(_2299) ? 1.0 : min(_2299, 1.0));
        _2861 = (((((_2925 * _2581) + _967) * cbLight._m0[_2876].x) * _2944) * _2945) + _2751;
        _2863 = (((((_2925 * _2583) + _969) * cbLight._m0[_2876].y) * _2944) * _2945) + _2753;
        _2865 = (((((_2925 * _2584) + _970) * cbLight._m0[_2876].z) * _2944) * _2945) + _2755;
    }
    float _3011;
    float _3013;
    float _3015;
    float _3017;
    float _3019;
    float _3021;
    if (_2281.y == 0u)
    {
        uvec4 _2966 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2967 = _2966.x;
        uint _2978 = uint((float(_2966.y) * floor(float(uint(cbSceneParam._m0[85u].y * _906) / _2967))) + floor(float(uint(cbSceneParam._m0[85u].x * _905) / _2967)));
        float _2988 = (log2(_2059 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2989 = isnan(0.0) ? _2988 : (isnan(_2988) ? 0.0 : max(_2988, 0.0));
        uint _2992 = uint(isnan(14.0) ? _2989 : (isnan(_2989) ? 14.0 : min(_2989, 14.0)));
        uvec4 _2997 = texelFetch(g_lightClusterGridBuffer, int(((_2992 << 2u) + (_2978 << 6u)) >> 2u));
        uint _2998 = _2997.x;
        uint _2999 = _2966.z;
        float _3078;
        float _3080;
        float _3082;
        float _3084;
        float _3086;
        float _3088;
        if (((((1u << ((_2999 >> 4u) & 15u)) + 4294967295u) & _2998) == 0u) || ((_2999 & 240u) == 0u))
        {
            _3078 = 0.0;
            _3080 = 0.0;
            _3082 = 0.0;
            _3084 = 0.0;
            _3086 = 0.0;
            _3088 = 0.0;
        }
        else
        {
            float _3079;
            float _3081;
            float _3083;
            float _3085;
            float _3087;
            float _3089;
            float _3223 = 0.0;
            float _3224 = 0.0;
            float _3225 = 0.0;
            float _3226 = 0.0;
            float _3227 = 0.0;
            float _3228 = 0.0;
            uint _3229 = 0u;
            uint _3238;
            bool _3239;
            for (;;)
            {
                _3238 = texelFetch(g_lightClassification, int((((_2992 << 5u) + (_2978 << 9u)) + (_3229 << 2u)) >> 2u)).x;
                _3239 = _3238 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3239)
                {
                    frontier_phi_66_pred = _3228;
                    frontier_phi_66_pred_1 = _3227;
                    frontier_phi_66_pred_2 = _3226;
                    frontier_phi_66_pred_3 = _3225;
                    frontier_phi_66_pred_4 = _3224;
                    frontier_phi_66_pred_5 = _3223;
                }
                else
                {
                    float _3347;
                    float _3348;
                    float _3349;
                    float _3350;
                    float _3351;
                    float _3352;
                    uint _3353;
                    _3347 = _3223;
                    _3348 = _3224;
                    _3349 = _3225;
                    _3350 = _3226;
                    _3351 = _3227;
                    _3352 = _3228;
                    _3353 = _3238;
                    float _3279;
                    float _3280;
                    float _3281;
                    float _3282;
                    float _3283;
                    float _3284;
                    for (;;)
                    {
                        uint _3357 = uint(findLSB(_3353)) + (_3229 << 5u);
                        uint _3354 = (_3353 + 4294967295u) & _3353;
                        uint _3359 = _3357 * 48u;
                        vec4 _3373 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3359)).x, texelFetch(g_PointLightRenderingBuffer, int(_3359 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3359 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3359 + 3u)).x));
                        uint _3379 = (_3357 * 48u) + 4u;
                        vec4 _3392 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3379)).x, texelFetch(g_PointLightRenderingBuffer, int(_3379 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3379 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3379 + 3u)).x));
                        uint _3398 = (_3357 * 48u) + 8u;
                        vec3 _3409 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3398)).x, texelFetch(g_PointLightRenderingBuffer, int(_3398 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3398 + 2u)).x));
                        float _3413 = _3373.x - _2057;
                        float _3414 = _3373.y - _2058;
                        float _3415 = _3373.z - _2059;
                        float _3416 = dot(vec3(_3413, _3414, _3415), vec3(_3413, _3414, _3415));
                        float _3419 = inversesqrt(_3416);
                        float _3420 = _3419 * _3413;
                        float _3421 = _3419 * _3414;
                        float _3422 = _3419 * _3415;
                        float _3423 = dot(vec3(_924, _927, _930), vec3(_3420, _3421, _3422));
                        float _3428 = 1.0 - (_3416 * _3373.w);
                        float _4822 = isnan(0.0) ? _3428 : (isnan(_3428) ? 0.0 : max(_3428, 0.0));
                        float _3429 = isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0));
                        float _3430 = sqrt(_3416) * _3392.w;
                        float _3433 = 1.39999997615814208984375 / (_3430 + 1.39999997615814208984375);
                        float _3434 = _3433 * _3433;
                        float _3437 = ((1.0 - _3434) * _3423) + _3434;
                        float _3440 = _3430 * _3430;
                        float _3444 = ((isnan(0.0) ? _3437 : (isnan(_3437) ? 0.0 : max(_3437, 0.0))) * _3429) / ((_3440 * 0.699999988079071044921875) + 1.0);
                        float _3448 = (-0.0) - _2057;
                        float _3449 = (-0.0) - _2058;
                        float _3450 = (-0.0) - _2059;
                        float _3454 = inversesqrt(dot(vec3(_3448, _3449, _3450), vec3(_3448, _3449, _3450)));
                        float _3455 = _3454 * _3448;
                        float _3456 = _3454 * _3449;
                        float _3457 = _3454 * _3450;
                        float _3464 = exp2(log2(1.0 / ((_3440 * 3.5) + 5.0)) * 0.25);
                        float _3465 = 1.0 - _999;
                        float _3472 = sqrt(1.0 - ((1.0 - (_3465 * _3465)) * (1.0 - (_3464 * _3464))));
                        float _3473 = _3472 * _3472;
                        float _3474 = _3473 * _3473;
                        float _3475 = _3455 + _3420;
                        float _3476 = _3456 + _3421;
                        float _3477 = _3457 + _3422;
                        float _3481 = inversesqrt(dot(vec3(_3475, _3476, _3477), vec3(_3475, _3476, _3477)));
                        float _3485 = dot(vec3(_924, _927, _930), vec3(_3455, _3456, _3457));
                        float _4838 = isnan(0.0) ? _3485 : (isnan(_3485) ? 0.0 : max(_3485, 0.0));
                        float _3488 = isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0));
                        float _3489 = dot(vec3(_924, _927, _930), vec3(_3481 * _3475, _3481 * _3476, _3481 * _3477));
                        float _4849 = isnan(0.0) ? _3489 : (isnan(_3489) ? 0.0 : max(_3489, 0.0));
                        float _3492 = isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0));
                        float _3496 = ((_3492 * _3492) * (_3474 + (-1.0))) + 1.0;
                        float _3497 = _3433 * _3473;
                        float _3498 = _3497 * _3497;
                        float _3501 = ((1.0 - _3498) * _3423) + _3498;
                        float _4860 = isnan(0.0) ? _3501 : (isnan(_3501) ? 0.0 : max(_3501, 0.0));
                        float _3502 = isnan(1.0) ? _4860 : (isnan(_4860) ? 1.0 : min(_4860, 1.0));
                        float _3503 = 1.0 - _3473;
                        float _3513 = (0.5 / (((_3502 * ((_3488 * _3503) + _3473)) + 9.9999999392252902907785028219223e-09) + (((_3502 * _3503) + _3473) * _3488))) * _3502;
                        float _4871 = isnan(0.0) ? _3513 : (isnan(_3513) ? 0.0 : max(_3513, 0.0));
                        float _3524 = (((_3474 * 3.1415927410125732421875) * (isnan(1.0) ? _4871 : (isnan(_4871) ? 1.0 : min(_4871, 1.0)))) / ((_3496 * _3496) * ((_3440 * 2.1991131305694580078125) + 3.141590118408203125))) * _3429;
                        _3282 = (_3444 * _3392.x) + _3350;
                        _3283 = (_3444 * _3392.y) + _3351;
                        _3284 = (_3444 * _3392.z) + _3352;
                        _3279 = (_3524 * _3409.x) + _3347;
                        _3280 = (_3524 * _3409.y) + _3348;
                        _3281 = (_3524 * _3409.z) + _3349;
                        if (_3354 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3347 = _3279;
                            _3348 = _3280;
                            _3349 = _3281;
                            _3350 = _3282;
                            _3351 = _3283;
                            _3352 = _3284;
                            _3353 = _3354;
                        }
                    }
                    frontier_phi_66_pred = _3284;
                    frontier_phi_66_pred_1 = _3283;
                    frontier_phi_66_pred_2 = _3282;
                    frontier_phi_66_pred_3 = _3281;
                    frontier_phi_66_pred_4 = _3280;
                    frontier_phi_66_pred_5 = _3279;
                }
                _3089 = frontier_phi_66_pred;
                _3087 = frontier_phi_66_pred_1;
                _3085 = frontier_phi_66_pred_2;
                _3083 = frontier_phi_66_pred_3;
                _3081 = frontier_phi_66_pred_4;
                _3079 = frontier_phi_66_pred_5;
                uint _3230 = _3229 + 1u;
                if (_3230 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3223 = _3079;
                    _3224 = _3081;
                    _3225 = _3083;
                    _3226 = _3085;
                    _3227 = _3087;
                    _3228 = _3089;
                    _3229 = _3230;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3078 = _3079;
            _3080 = _3081;
            _3082 = _3083;
            _3084 = _3085;
            _3086 = _3087;
            _3088 = _3089;
        }
        uvec4 _3092 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3093 = _3092.z;
        uint _3095 = (_3093 >> 8u) & 15u;
        float _3191;
        float _3193;
        float _3195;
        float _3197;
        float _3199;
        float _3201;
        if (((4294967295u << _3095) & _2998) == 0u)
        {
            _3191 = _3078;
            _3193 = _3080;
            _3195 = _3082;
            _3197 = _3084;
            _3199 = _3086;
            _3201 = _3088;
        }
        else
        {
            float _3216 = inversesqrt(dot(vec3(_2057, _2058, _2059), vec3(_2057, _2058, _2059)));
            float _3217 = _3216 * _2057;
            float _3218 = _3216 * _2058;
            float _3219 = _3216 * _2059;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3095 < ((_3093 >> 12u) & 15u))
            {
                float _3192;
                float _3194;
                float _3196;
                float _3198;
                float _3200;
                float _3202;
                float _3330 = _3078;
                float _3331 = _3080;
                float _3332 = _3082;
                float _3333 = _3084;
                float _3334 = _3086;
                float _3335 = _3088;
                uint _3336 = _3095;
                uint _3345;
                bool _3346;
                for (;;)
                {
                    _3345 = texelFetch(g_lightClassification, int((((_2992 << 5u) + (_2978 << 9u)) + (_3336 << 2u)) >> 2u)).x;
                    _3346 = _3345 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3346)
                    {
                        frontier_phi_72_pred = _3335;
                        frontier_phi_72_pred_1 = _3334;
                        frontier_phi_72_pred_2 = _3333;
                        frontier_phi_72_pred_3 = _3332;
                        frontier_phi_72_pred_4 = _3331;
                        frontier_phi_72_pred_5 = _3330;
                    }
                    else
                    {
                        float _3529;
                        float _3530;
                        float _3531;
                        float _3532;
                        float _3533;
                        float _3534;
                        float _3822;
                        float _3823;
                        float _3824;
                        float _3825;
                        float _3826;
                        float _3827;
                        float _3542 = _3330;
                        float _3543 = _3331;
                        float _3544 = _3332;
                        float _3545 = _3333;
                        float _3546 = _3334;
                        float _3547 = _3335;
                        uint _3548 = _3345;
                        uint _3549;
                        vec4 _3574;
                        float _3575;
                        vec4 _3590;
                        vec3 _3602;
                        vec4 _3617;
                        vec4 _3632;
                        float _3678;
                        bool _3679;
                        for (;;)
                        {
                            uint _3559 = ((_3336 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3548));
                            _3549 = (_3548 + 4294967295u) & _3548;
                            uint _3561 = _3559 * 40u;
                            _3574 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3561)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3561 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3561 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3561 + 3u)).x));
                            _3575 = _3574.w;
                            uint _3577 = (_3559 * 40u) + 4u;
                            _3590 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3577)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3577 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3577 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3577 + 3u)).x));
                            uint _3592 = (_3559 * 40u) + 8u;
                            _3602 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3592)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3592 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3592 + 2u)).x));
                            uint _3604 = (_3559 * 40u) + 16u;
                            _3617 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3604)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3604 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3604 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3604 + 3u)).x));
                            uint _3619 = (_3559 * 40u) + 20u;
                            _3632 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3619)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3619 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3619 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3619 + 3u)).x));
                            uint _3634 = (_3559 * 40u) + 24u;
                            vec4 _3647 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3634)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3634 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3634 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3634 + 3u)).x));
                            uint _3653 = (_3559 * 40u) + 28u;
                            vec4 _3666 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3653)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3653 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3653 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3653 + 3u)).x));
                            _3678 = fma(_2059, _3666.z, fma(_2058, _3666.y, _3666.x * _2057)) + _3666.w;
                            _3679 = !((fma(_2059, _3647.z, fma(_2058, _3647.y, _3647.x * _2057)) + _3647.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3679)
                            {
                                float _3706 = _3574.x - _2057;
                                float _3707 = _3574.y - _2058;
                                float _3708 = _3574.z - _2059;
                                float _3709 = dot(vec3(_3706, _3707, _3708), vec3(_3706, _3707, _3708));
                                float _3712 = inversesqrt(_3709);
                                float _3713 = _3712 * _3706;
                                float _3714 = _3712 * _3707;
                                float _3715 = _3712 * _3708;
                                float _3719 = 1.0 - (_3709 / (_3575 * _3575));
                                float _4882 = isnan(0.0) ? _3719 : (isnan(_3719) ? 0.0 : max(_3719, 0.0));
                                float _3720 = isnan(1.0) ? _4882 : (isnan(_4882) ? 1.0 : min(_4882, 1.0));
                                float _3724 = sqrt(_3709) * _3590.w;
                                float _3726 = 1.39999997615814208984375 / (_3724 + 1.39999997615814208984375);
                                float _3727 = _3726 * _3726;
                                float _3730 = ((1.0 - _3727) * dot(vec3(_3713, _3714, _3715), vec3(_924, _927, _930))) + _3727;
                                float _3733 = _3724 * _3724;
                                float _3737 = (fma(_2059, _3617.z, fma(_2058, _3617.y, _3617.x * _2057)) + _3617.w) / _3678;
                                float _3738 = (fma(_2059, _3632.z, fma(_2058, _3632.y, _3632.x * _2057)) + _3632.w) / _3678;
                                float _3742 = 1.0 - dot(vec2(_3737, _3738), vec2(_3737, _3738));
                                float _4898 = isnan(0.0) ? _3742 : (isnan(_3742) ? 0.0 : max(_3742, 0.0));
                                float _3743 = isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0));
                                float _3744 = _3743 * (((isnan(0.0) ? _3730 : (isnan(_3730) ? 0.0 : max(_3730, 0.0))) * _3720) / ((_3733 * 0.699999988079071044921875) + 1.0));
                                float _3756 = exp2(log2(1.0 / ((_3733 * 3.5) + 5.0)) * 0.25);
                                float _3757 = 1.0 - _999;
                                float _3764 = sqrt(1.0 - ((1.0 - (_3757 * _3757)) * (1.0 - (_3756 * _3756))));
                                float _3765 = _3764 * _3764;
                                float _3766 = _3765 * _3765;
                                float _3767 = _3713 - _3217;
                                float _3768 = _3714 - _3218;
                                float _3769 = _3715 - _3219;
                                float _3773 = inversesqrt(dot(vec3(_3767, _3768, _3769), vec3(_3767, _3768, _3769)));
                                float _3777 = dot(vec3(_924, _927, _930), vec3((-0.0) - _3217, (-0.0) - _3218, (-0.0) - _3219));
                                float _4909 = isnan(0.0) ? _3777 : (isnan(_3777) ? 0.0 : max(_3777, 0.0));
                                float _3780 = isnan(1.0) ? _4909 : (isnan(_4909) ? 1.0 : min(_4909, 1.0));
                                float _3781 = dot(vec3(_924, _927, _930), vec3(_3773 * _3767, _3773 * _3768, _3773 * _3769));
                                float _4920 = isnan(0.0) ? _3781 : (isnan(_3781) ? 0.0 : max(_3781, 0.0));
                                float _3784 = isnan(1.0) ? _4920 : (isnan(_4920) ? 1.0 : min(_4920, 1.0));
                                float _3788 = ((_3784 * _3784) * (_3766 + (-1.0))) + 1.0;
                                float _3789 = _3726 * _3765;
                                float _3790 = _3789 * _3789;
                                float _3796 = ((1.0 - _3790) * dot(vec3(_924, _927, _930), vec3(_3713, _3714, _3715))) + _3790;
                                float _4931 = isnan(0.0) ? _3796 : (isnan(_3796) ? 0.0 : max(_3796, 0.0));
                                float _3797 = isnan(1.0) ? _4931 : (isnan(_4931) ? 1.0 : min(_4931, 1.0));
                                float _3798 = 1.0 - _3765;
                                float _3808 = (0.5 / (((_3797 * ((_3780 * _3798) + _3765)) + 9.9999999392252902907785028219223e-09) + (((_3797 * _3798) + _3765) * _3780))) * _3797;
                                float _4942 = isnan(0.0) ? _3808 : (isnan(_3808) ? 0.0 : max(_3808, 0.0));
                                float _3818 = (_3743 * _3720) * (((_3766 * 3.1415927410125732421875) * (isnan(1.0) ? _4942 : (isnan(_4942) ? 1.0 : min(_4942, 1.0)))) / ((_3788 * _3788) * ((_3733 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3744 * _3590.y;
                                frontier_phi_78_pred_1 = _3744 * _3590.x;
                                frontier_phi_78_pred_2 = _3818 * _3602.z;
                                frontier_phi_78_pred_3 = _3818 * _3602.y;
                                frontier_phi_78_pred_4 = _3818 * _3602.x;
                                frontier_phi_78_pred_5 = _3744 * _3590.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3826 = frontier_phi_78_pred;
                            _3825 = frontier_phi_78_pred_1;
                            _3824 = frontier_phi_78_pred_2;
                            _3823 = frontier_phi_78_pred_3;
                            _3822 = frontier_phi_78_pred_4;
                            _3827 = frontier_phi_78_pred_5;
                            _3532 = _3825 + _3545;
                            _3533 = _3826 + _3546;
                            _3534 = _3827 + _3547;
                            _3529 = _3822 + _3542;
                            _3530 = _3823 + _3543;
                            _3531 = _3824 + _3544;
                            if (_3549 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3542 = _3529;
                                _3543 = _3530;
                                _3544 = _3531;
                                _3545 = _3532;
                                _3546 = _3533;
                                _3547 = _3534;
                                _3548 = _3549;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3534;
                        frontier_phi_72_pred_1 = _3533;
                        frontier_phi_72_pred_2 = _3532;
                        frontier_phi_72_pred_3 = _3531;
                        frontier_phi_72_pred_4 = _3530;
                        frontier_phi_72_pred_5 = _3529;
                    }
                    _3202 = frontier_phi_72_pred;
                    _3200 = frontier_phi_72_pred_1;
                    _3198 = frontier_phi_72_pred_2;
                    _3196 = frontier_phi_72_pred_3;
                    _3194 = frontier_phi_72_pred_4;
                    _3192 = frontier_phi_72_pred_5;
                    uint _3337 = _3336 + 1u;
                    if (_3337 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3330 = _3192;
                        _3331 = _3194;
                        _3332 = _3196;
                        _3333 = _3198;
                        _3334 = _3200;
                        _3335 = _3202;
                        _3336 = _3337;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3202;
                frontier_phi_60_61_ladder_1 = _3200;
                frontier_phi_60_61_ladder_2 = _3196;
                frontier_phi_60_61_ladder_3 = _3194;
                frontier_phi_60_61_ladder_4 = _3192;
                frontier_phi_60_61_ladder_5 = _3198;
            }
            else
            {
                frontier_phi_60_61_ladder = _3088;
                frontier_phi_60_61_ladder_1 = _3086;
                frontier_phi_60_61_ladder_2 = _3082;
                frontier_phi_60_61_ladder_3 = _3080;
                frontier_phi_60_61_ladder_4 = _3078;
                frontier_phi_60_61_ladder_5 = _3084;
            }
            _3191 = frontier_phi_60_61_ladder_4;
            _3193 = frontier_phi_60_61_ladder_3;
            _3195 = frontier_phi_60_61_ladder_2;
            _3197 = frontier_phi_60_61_ladder_5;
            _3199 = frontier_phi_60_61_ladder_1;
            _3201 = frontier_phi_60_61_ladder;
        }
        float _3206 = isnan(1.0) ? _983 : (isnan(_983) ? 1.0 : min(_983, 1.0));
        _3011 = (_3206 * _3197) + _2523;
        _3013 = (_3206 * _3199) + _2525;
        _3015 = (_3206 * _3201) + _2527;
        _3017 = ((_3191 * _967) * _3206) + _2861;
        _3019 = ((_3193 * _969) * _3206) + _2863;
        _3021 = ((_3195 * _970) * _3206) + _2865;
    }
    else
    {
        _3011 = _2523;
        _3013 = _2525;
        _3015 = _2527;
        _3017 = _2861;
        _3019 = _2863;
        _3021 = _2865;
    }
    float _4958 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
    float _4969 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
    float _4980 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
    uint _3041 = _261 + 6u;
    float _3049 = _905 / cbSceneParam._m0[86u].x;
    float _3050 = _906 / cbSceneParam._m0[86u].y;
    vec4 _3064 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3049, _3050, (log2((isnan(cbSceneParam._m0[77u].w) ? _840 : (isnan(_840) ? cbSceneParam._m0[77u].w : min(_840, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3066 = _3064.x;
    float _3067 = _3064.y;
    float _3068 = _3064.z;
    float _3069 = _3064.w;
    float _3141;
    float _3143;
    float _3145;
    float _3147;
    if (_840 > cbSceneParam._m0[78u].w)
    {
        float _3103 = isnan(_840) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _840 : min(cbSceneParam._m0[80u].w, _840));
        float _3104 = _3103 / _840;
        float _3115 = _3104 * _890;
        float _3116 = _891 * _3104;
        float _3117 = (-0.0) - _3116;
        float _3119 = _3104 * _892;
        float _3121 = (cbSceneParam._m0[77u].w * _3117) / _3103;
        float _3122 = _3121 + cbSceneParam._m0[79u].w;
        float _3123 = cbSceneParam._m0[79u].w - _3116;
        float _3129 = sqrt(((_3115 * _3115) + (_3116 * _3116)) + (_3119 * _3119));
        float _3132 = (1.0 - (cbSceneParam._m0[77u].w / _3103)) * _3129;
        float _3137 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3139 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3292;
        if (abs((_3117 - _3121) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3292 = ((((_3122 > 0.0) ? exp2(_3137 * _3122) : (2.0 - exp2(_3139 * _3122))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3132;
        }
        else
        {
            float _3252 = 1.0 / cbSceneParam._m0[80u].x;
            float _3253 = isnan(_3123) ? _3122 : (isnan(_3122) ? _3123 : max(_3122, _3123));
            float _3254 = isnan(_3123) ? _3122 : (isnan(_3122) ? _3123 : min(_3122, _3123));
            float _3263 = isnan(0.0) ? _3253 : (isnan(_3253) ? 0.0 : min(_3253, 0.0));
            float _3264 = isnan(0.0) ? _3254 : (isnan(_3254) ? 0.0 : min(_3254, 0.0));
            _3292 = ((abs(_3129 / _3117) * cbSceneParam._m0[80u].y) * ((((_3263 - _3264) * 2.0) - ((exp2(_3137 * (isnan(0.0) ? _3253 : (isnan(_3253) ? 0.0 : max(_3253, 0.0)))) - exp2(_3137 * (isnan(0.0) ? _3254 : (isnan(_3254) ? 0.0 : max(_3254, 0.0))))) * _3252)) - ((exp2(_3139 * _3263) - exp2(_3139 * _3264)) * _3252))) + (_3132 * cbSceneParam._m0[80u].z);
        }
        vec4 _3294 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3049, _3050, 1.0), 0.0);
        float _3303 = exp2((_3292 * (-1.44269502162933349609375)) * (1.0 - _3294.w));
        float _3304 = log2(_3303);
        float _3320 = log2(_3069);
        _3141 = (exp2(_3320 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3304 * cbSceneParam._m0[78u].x)) * _3294.x) / cbSceneParam._m0[78u].x)) + _3066;
        _3143 = (exp2(_3320 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3304 * cbSceneParam._m0[78u].y)) * _3294.y) / cbSceneParam._m0[78u].y)) + _3067;
        _3145 = (exp2(_3320 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3304 * cbSceneParam._m0[78u].z)) * _3294.z) / cbSceneParam._m0[78u].z)) + _3068;
        _3147 = _3303 * _3069;
    }
    else
    {
        _3141 = _3066;
        _3143 = _3067;
        _3145 = _3068;
        _3147 = _3069;
    }
    float _3159 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3160 = _3159 == 3.0;
    float _3161 = log2(_3147);
    float _3168 = exp2(_3161 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4958 : (isnan(_4958) ? 1.0 : min(_4958, 1.0))) * (_3011 + ((isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0))) * _983))) + ((_3017 + ((isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0))) * _1791)) * cbPerFrame._m0[3u].x));
    float _3169 = exp2(_3161 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4969 : (isnan(_4969) ? 1.0 : min(_4969, 1.0))) * (_3013 + ((isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0))) * _983))) + ((_3019 + ((isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0))) * _1791)) * cbPerFrame._m0[3u].x));
    float _3170 = exp2(_3161 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4980 : (isnan(_4980) ? 1.0 : min(_4980, 1.0))) * (_3015 + ((isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0))) * _983))) + ((_3021 + ((isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0))) * _1791)) * cbPerFrame._m0[3u].x));
    float _3179 = (_3159 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3179 * (_3160 ? _3168 : (_3168 + (cbSceneParam._m0[72u].w * _3141)));
    SV_Target.y = _3179 * (_3160 ? _3169 : (_3169 + (cbSceneParam._m0[72u].w * _3143)));
    SV_Target.z = _3179 * (_3160 ? _3170 : (_3170 + (cbSceneParam._m0[72u].w * _3145)));
    SV_Target.w = cbInstanceData._m0[_3041].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3041].w;
}


