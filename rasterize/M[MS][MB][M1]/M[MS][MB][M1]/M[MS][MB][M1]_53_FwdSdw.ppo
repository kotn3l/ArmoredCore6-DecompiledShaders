#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1043;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _198 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _199 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _200 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _206 = inversesqrt(dot(vec3(_198, _199, _200), vec3(_198, _199, _200)));
    float _207 = _206 * _198;
    float _208 = _206 * _199;
    float _209 = _206 * _200;
    float _213 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _214 = _213 * NORMAL.x;
    float _215 = _213 * NORMAL.y;
    float _216 = _213 * NORMAL.z;
    float _220 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _221 = _220 * TANGENT.x;
    float _222 = _220 * TANGENT.y;
    float _223 = _220 * TANGENT.z;
    uint _226 = uint(roundEven(NORMAL.w)) * 13u;
    uint _232 = _226 + 1u;
    uint _236 = _226 + 2u;
    float _245 = sqrt(((cbInstanceData._m0[_232].x * cbInstanceData._m0[_232].x) + (cbInstanceData._m0[_226].x * cbInstanceData._m0[_226].x)) + (cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x));
    float _246 = _245 * TEXCOORD.z;
    float _247 = _245 * TEXCOORD.w;
    vec4 _266 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _272 = _266.x * cbMtdParam._m0[9u].x;
    float _273 = _266.y * cbMtdParam._m0[9u].y;
    float _274 = _266.z * cbMtdParam._m0[9u].z;
    vec4 _293 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _246) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _247) + cbTextureTilingScale._m0[14u].w));
    vec4 _313 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _317 = _313.z;
    float _322 = (_313.x * 2.0) + (-1.0);
    float _324 = (_313.y * 2.0) + (-1.0);
    float _325 = dot(vec2(_322, _324), vec2(_322, _324));
    float _3654 = isnan(0.0) ? _325 : (isnan(_325) ? 0.0 : max(_325, 0.0));
    float _331 = sqrt(1.0 - (isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0))));
    float _334 = fma(_331, _214, fma(_324, _221, _322 * _207));
    float _337 = fma(_331, _215, fma(_324, _222, _322 * _208));
    float _340 = fma(_331, _216, fma(_324, _223, _322 * _209));
    float _344 = inversesqrt(dot(vec3(_334, _337, _340), vec3(_334, _337, _340)));
    vec4 _380 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _246) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _247) + cbTextureTilingScale._m0[11u].w));
    float _382 = _380.x;
    float _383 = 1.0 - _382;
    float _390 = ((_382 - _383) * cbMtdParam._m0[24u].z) + _383;
    float _392 = (cbMtdParam._m0[19u].x + dot(vec4(_344 * _334, _344 * _337, _344 * _340, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_390 * cbMtdParam._m0[21u].z);
    float _3665 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _393 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
    float _408 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_390 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3676 = isnan(0.0) ? _408 : (isnan(_408) ? 0.0 : max(_408, 0.0));
    float _409 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
    float _413 = ((_393 * ((_293.x * cbMtdParam._m0[18u].x) - _272)) * _409) + _272;
    float _414 = ((_393 * ((_293.y * cbMtdParam._m0[18u].y) - _273)) * _409) + _273;
    float _415 = ((_393 * ((_293.z * cbMtdParam._m0[18u].z) - _274)) * _409) + _274;
    vec4 _428 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _430 = _428.x;
    float _433 = _430 - ((_430 * _393) * _409);
    vec4 _446 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _246) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _247) + cbTextureTilingScale._m0[15u].w));
    float _453 = (_446.x * 2.0) + (-1.0);
    float _454 = (_446.y * 2.0) + (-1.0);
    float _455 = dot(vec2(_453, _454), vec2(_453, _454));
    float _3687 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _464 = (((_446.z - _317) * _393) * _409) + _317;
    float _479 = (((cbMtdParam._m0[21u].x * _322) + ((_453 - _322) * _393)) * _409) + _322;
    float _480 = (((cbMtdParam._m0[21u].x * _324) + ((_454 - _324) * _393)) * _409) + _324;
    float _481 = (((sqrt(1.0 - (isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0)))) - _331) * _393) * _409) + _331;
    float _486 = cbMtdParam._m0[22u].x + _313.w;
    float _489 = fma(_481, _214, fma(_480, _221, _479 * _207));
    float _492 = fma(_481, _215, fma(_480, _222, _479 * _208));
    float _495 = fma(_481, _216, fma(_480, _223, _479 * _209));
    float _499 = inversesqrt(dot(vec3(_489, _492, _495), vec3(_489, _492, _495)));
    float _500 = _499 * _489;
    float _501 = _499 * _492;
    float _502 = _499 * _495;
    float _3698 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _503 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
    float _3709 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _3720 = isnan(0.0) ? _413 : (isnan(_413) ? 0.0 : max(_413, 0.0));
    float _3731 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    float _3742 = isnan(0.0) ? _415 : (isnan(_415) ? 0.0 : max(_415, 0.0));
    float _3753 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _508 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
    float _522 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _563 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _573 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _563);
    float _574 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _563);
    float _575 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _563);
    float _579 = inversesqrt(dot(vec3(_573, _574, _575), vec3(_573, _574, _575)));
    float _580 = _573 * _579;
    float _581 = _574 * _579;
    float _582 = _575 * _579;
    float _588 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _589 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _610 = fma(_502, cbSceneParam._m0[5u].z, fma(_501, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _500));
    float _613 = fma(_502, cbSceneParam._m0[6u].z, fma(_501, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _500));
    float _616 = fma(_502, cbSceneParam._m0[7u].z, fma(_501, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _500));
    uint _630 = (_226 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _636 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0)))) * cbInstanceData._m0[_630].x;
    float _637 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0)))) * cbInstanceData._m0[_630].y;
    float _638 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0)))) * cbInstanceData._m0[_630].z;
    float _3764 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _639 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
    float _3775 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _640 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
    float _3786 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _641 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
    float _642 = 1.0 - _508;
    float _643 = _639 * _642;
    float _644 = _640 * _642;
    float _645 = _641 * _642;
    float _650 = (_639 + (-0.039999999105930328369140625)) * _508;
    float _651 = (_640 + (-0.039999999105930328369140625)) * _508;
    float _652 = (_641 + (-0.039999999105930328369140625)) * _508;
    float _653 = _650 + 0.039999999105930328369140625;
    float _655 = _651 + 0.039999999105930328369140625;
    float _656 = _652 + 0.039999999105930328369140625;
    vec4 _665 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _588, cbSceneParam._m0[86u].y * _589));
    float _669 = ((isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0))) * TEXCOORD_5.w) * _665.x;
    float _670 = dot(vec3(_500, _501, _502), vec3(_580, _581, _582));
    float _673 = _670 * 2.0;
    float _677 = (_673 * _500) - _580;
    float _678 = (_673 * _501) - _581;
    float _679 = (_673 * _502) - _582;
    float _683 = abs(dot(vec3(_580, _581, _582), vec3(_500, _501, _502)));
    float _3797 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
    float _685 = sqrt(_503);
    float _698 = exp2((_685 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_685 * 3.0));
    float _704 = (1.0 - _698) * ((_685 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _705 = _698 * _685;
    float _733 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _737 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _741 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1042;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _767 = fma(_741, cbModelParam._m0[26u].z, fma(_737, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _733));
        float _771 = fma(_741, cbModelParam._m0[27u].z, fma(_737, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _733));
        float _775 = fma(_741, cbModelParam._m0[28u].z, fma(_737, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _733));
        float _800 = _733 + _500;
        float _801 = _737 + _501;
        float _802 = _741 + _502;
        float _812 = fma(_802, cbModelParam._m0[26u].z, fma(_801, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _800)) - _767;
        float _813 = fma(_802, cbModelParam._m0[27u].z, fma(_801, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _800)) - _771;
        float _814 = fma(_802, cbModelParam._m0[28u].z, fma(_801, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _800)) - _775;
        float _818 = inversesqrt(dot(vec3(_812, _813, _814), vec3(_812, _813, _814)));
        float _831 = ((_818 * _812) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_767 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _832 = ((_818 * _813) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_771 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _833 = ((_818 * _814) / cbModelParam._m0[34u].z) + ((((((_775 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _836 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_831, _832, _833), 0.0);
        vec4 _843 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_831, _832, _833), 0.0);
        vec4 _850 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_831, _832, _833), 0.0);
        vec4 _857 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_831, _832, _833), 0.0);
        float _870 = exp2((_836.w + (-0.5)) * 20.0) * 2.0;
        float _871 = _870 * (_836.x + (-0.5));
        float _872 = _870 * (_836.y + (-0.5));
        float _873 = _870 * (_836.z + (-0.5));
        float _880 = exp2((_843.w + (-0.5)) * 20.0) * 2.0;
        float _881 = _880 * (_843.x + (-0.5));
        float _882 = _880 * (_843.y + (-0.5));
        float _883 = _880 * (_843.z + (-0.5));
        float _890 = exp2((_850.w + (-0.5)) * 20.0) * 2.0;
        float _891 = _890 * (_850.x + (-0.5));
        float _892 = _890 * (_850.y + (-0.5));
        float _893 = _890 * (_850.z + (-0.5));
        float _900 = exp2((_857.w + (-0.5)) * 20.0) * 2.0;
        float _901 = _900 * (_857.x + (-0.5));
        float _902 = _900 * (_857.y + (-0.5));
        float _903 = _900 * (_857.z + (-0.5));
        float _904 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
        float _905 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
        float _906 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
        float _907 = _871 * 0.5;
        float _908 = _881 * 0.5;
        float _909 = _891 * 0.5;
        float _910 = dot(vec3(_907, _908, _909), vec3(_907, _908, _909));
        float _915 = (_910 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_910);
        float _924 = (dot(vec3(_500, _501, _502), vec3(_915 * _907, _915 * _908, _915 * _909)) + 1.0) * 0.5;
        float _3823 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
        float _934 = sqrt(((_908 * _908) + (_907 * _907)) + (_909 * _909)) / (_904 + 9.9999997473787516355514526367188e-06);
        float _3834 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
        float _935 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
        float _936 = _935 * 2.0;
        float _940 = (1.0 - _935) / (_935 + 1.0);
        float _3845 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _941 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
        float _950 = ((((1.0 - _941) * (_936 + 2.0)) * exp2(log2(isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0))) * (_936 + 1.0))) + _941) * _904;
        float _951 = _872 * 0.5;
        float _952 = _882 * 0.5;
        float _953 = _892 * 0.5;
        float _954 = dot(vec3(_951, _952, _953), vec3(_951, _952, _953));
        float _959 = (_954 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_954);
        float _967 = (dot(vec3(_500, _501, _502), vec3(_959 * _951, _959 * _952, _959 * _953)) + 1.0) * 0.5;
        float _3856 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
        float _976 = sqrt(((_952 * _952) + (_951 * _951)) + (_953 * _953)) / (_905 + 9.9999997473787516355514526367188e-06);
        float _3867 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        float _977 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
        float _978 = _977 * 2.0;
        float _982 = (1.0 - _977) / (_977 + 1.0);
        float _3878 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _983 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
        float _992 = ((((1.0 - _983) * (_978 + 2.0)) * exp2(log2(isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0))) * (_978 + 1.0))) + _983) * _905;
        float _993 = _873 * 0.5;
        float _994 = _883 * 0.5;
        float _995 = _893 * 0.5;
        float _996 = dot(vec3(_993, _994, _995), vec3(_993, _994, _995));
        float _1001 = (_996 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_996);
        float _1009 = (dot(vec3(_500, _501, _502), vec3(_1001 * _993, _1001 * _994, _1001 * _995)) + 1.0) * 0.5;
        float _3889 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        float _1018 = sqrt(((_994 * _994) + (_993 * _993)) + (_995 * _995)) / (_906 + 9.9999997473787516355514526367188e-06);
        float _3900 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1019 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
        float _1020 = _1019 * 2.0;
        float _1024 = (1.0 - _1019) / (_1019 + 1.0);
        float _3911 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1025 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
        float _1034 = ((((1.0 - _1025) * (_1020 + 2.0)) * exp2(log2(isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0))) * (_1020 + 1.0))) + _1025) * _906;
        _1042 = _873;
        _1044 = _872;
        _1045 = _871;
        _1046 = _883;
        _1047 = _882;
        _1048 = _881;
        _1049 = _893;
        _1050 = _892;
        _1051 = _891;
        _1052 = _906;
        _1053 = _905;
        _1054 = _904;
        _1055 = cbModelParam._m0[36u].z * (isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0)));
        _1056 = cbModelParam._m0[36u].z * (isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0)));
        _1057 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0)));
    }
    else
    {
        _1042 = _1043;
        _1044 = _1043;
        _1045 = _1043;
        _1046 = _1043;
        _1047 = _1043;
        _1048 = _1043;
        _1049 = _1043;
        _1050 = _1043;
        _1051 = _1043;
        _1052 = _1043;
        _1053 = _1043;
        _1054 = _1043;
        _1055 = 0.0;
        _1056 = 0.0;
        _1057 = 0.0;
    }
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1082 = fma(_741, cbModelParam._m0[30u].z, fma(_737, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _733));
        float _1086 = fma(_741, cbModelParam._m0[31u].z, fma(_737, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _733));
        float _1090 = fma(_741, cbModelParam._m0[32u].z, fma(_737, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _733));
        float _1113 = _733 + _500;
        float _1114 = _737 + _501;
        float _1115 = _741 + _502;
        float _1125 = fma(_1115, cbModelParam._m0[30u].z, fma(_1114, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1113)) - _1082;
        float _1126 = fma(_1115, cbModelParam._m0[31u].z, fma(_1114, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1113)) - _1086;
        float _1127 = fma(_1115, cbModelParam._m0[32u].z, fma(_1114, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1113)) - _1090;
        float _1131 = inversesqrt(dot(vec3(_1125, _1126, _1127), vec3(_1125, _1126, _1127)));
        float _1144 = ((_1131 * _1125) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1082 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1145 = ((_1131 * _1126) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1086 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1146 = ((_1131 * _1127) / cbModelParam._m0[35u].z) + ((((((_1090 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1148 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1144, _1145, _1146), 0.0);
        vec4 _1155 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1144, _1145, _1146), 0.0);
        vec4 _1162 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1144, _1145, _1146), 0.0);
        vec4 _1169 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1144, _1145, _1146), 0.0);
        float _1181 = exp2((_1148.w + (-0.5)) * 20.0) * 2.0;
        float _1182 = _1181 * (_1148.x + (-0.5));
        float _1183 = _1181 * (_1148.y + (-0.5));
        float _1184 = _1181 * (_1148.z + (-0.5));
        float _1191 = exp2((_1155.w + (-0.5)) * 20.0) * 2.0;
        float _1192 = _1191 * (_1155.x + (-0.5));
        float _1193 = _1191 * (_1155.y + (-0.5));
        float _1194 = _1191 * (_1155.z + (-0.5));
        float _1201 = exp2((_1162.w + (-0.5)) * 20.0) * 2.0;
        float _1202 = _1201 * (_1162.x + (-0.5));
        float _1203 = _1201 * (_1162.y + (-0.5));
        float _1204 = _1201 * (_1162.z + (-0.5));
        float _1211 = exp2((_1169.w + (-0.5)) * 20.0) * 2.0;
        float _1212 = _1211 * (_1169.x + (-0.5));
        float _1213 = _1211 * (_1169.y + (-0.5));
        float _1214 = _1211 * (_1169.z + (-0.5));
        float _1215 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1216 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1217 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1218 = _1182 * 0.5;
        float _1219 = _1192 * 0.5;
        float _1220 = _1202 * 0.5;
        float _1221 = dot(vec3(_1218, _1219, _1220), vec3(_1218, _1219, _1220));
        float _1226 = (_1221 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1221);
        float _1234 = (dot(vec3(_500, _501, _502), vec3(_1226 * _1218, _1226 * _1219, _1226 * _1220)) + 1.0) * 0.5;
        float _3952 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1243 = sqrt(((_1219 * _1219) + (_1218 * _1218)) + (_1220 * _1220)) / (_1215 + 9.9999997473787516355514526367188e-06);
        float _3963 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1244 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
        float _1245 = _1244 * 2.0;
        float _1249 = (1.0 - _1244) / (_1244 + 1.0);
        float _3974 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1250 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
        float _1259 = ((((1.0 - _1250) * (_1245 + 2.0)) * exp2(log2(isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0))) * (_1245 + 1.0))) + _1250) * _1215;
        float _1260 = _1183 * 0.5;
        float _1261 = _1193 * 0.5;
        float _1262 = _1203 * 0.5;
        float _1263 = dot(vec3(_1260, _1261, _1262), vec3(_1260, _1261, _1262));
        float _1268 = (_1263 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1263);
        float _1276 = (dot(vec3(_500, _501, _502), vec3(_1268 * _1260, _1268 * _1261, _1268 * _1262)) + 1.0) * 0.5;
        float _3985 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1285 = sqrt(((_1261 * _1261) + (_1260 * _1260)) + (_1262 * _1262)) / (_1216 + 9.9999997473787516355514526367188e-06);
        float _3996 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1286 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
        float _1287 = _1286 * 2.0;
        float _1291 = (1.0 - _1286) / (_1286 + 1.0);
        float _4007 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1292 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
        float _1301 = ((((1.0 - _1292) * (_1287 + 2.0)) * exp2(log2(isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0))) * (_1287 + 1.0))) + _1292) * _1216;
        float _1302 = _1184 * 0.5;
        float _1303 = _1194 * 0.5;
        float _1304 = _1204 * 0.5;
        float _1305 = dot(vec3(_1302, _1303, _1304), vec3(_1302, _1303, _1304));
        float _1310 = (_1305 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1305);
        float _1318 = (dot(vec3(_500, _501, _502), vec3(_1310 * _1302, _1310 * _1303, _1310 * _1304)) + 1.0) * 0.5;
        float _4018 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1327 = sqrt(((_1303 * _1303) + (_1302 * _1302)) + (_1304 * _1304)) / (_1217 + 9.9999997473787516355514526367188e-06);
        float _4029 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1328 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
        float _1329 = _1328 * 2.0;
        float _1333 = (1.0 - _1328) / (_1328 + 1.0);
        float _4040 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1334 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
        float _1343 = ((((1.0 - _1334) * (_1329 + 2.0)) * exp2(log2(isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0))) * (_1329 + 1.0))) + _1334) * _1217;
        _1351 = _1184;
        _1352 = _1183;
        _1353 = _1182;
        _1354 = _1194;
        _1355 = _1193;
        _1356 = _1192;
        _1357 = _1204;
        _1358 = _1203;
        _1359 = _1202;
        _1360 = _1217;
        _1361 = _1216;
        _1362 = _1215;
        _1363 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0)));
        _1364 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0)));
        _1365 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0)));
    }
    else
    {
        _1351 = _1043;
        _1352 = _1043;
        _1353 = _1043;
        _1354 = _1043;
        _1355 = _1043;
        _1356 = _1043;
        _1357 = _1043;
        _1358 = _1043;
        _1359 = _1043;
        _1360 = _1043;
        _1361 = _1043;
        _1362 = _1043;
        _1363 = 0.0;
        _1364 = 0.0;
        _1365 = 0.0;
    }
    float _1375 = (cbModelParam._m0[1u].x * (_1363 - _1055)) + _1055;
    float _1376 = (cbModelParam._m0[1u].x * (_1364 - _1056)) + _1056;
    float _1377 = (cbModelParam._m0[1u].x * (_1365 - _1057)) + _1057;
    float _1398 = fma(_1377, cbSceneParam._m0[89u].z, fma(_1376, cbSceneParam._m0[89u].y, _1375 * cbSceneParam._m0[89u].x));
    float _1401 = fma(_1377, cbSceneParam._m0[90u].z, fma(_1376, cbSceneParam._m0[90u].y, _1375 * cbSceneParam._m0[90u].x));
    float _1404 = fma(_1377, cbSceneParam._m0[91u].z, fma(_1376, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1375));
    float _1419 = _677 * 0.5;
    float _1420 = _678 * 0.5;
    float _1421 = _679 * 0.5;
    float _1422 = dot(vec4(_1419, _1420, _1421, 1.0), vec4(_1353, _1356, _1359, _1362));
    float _1425 = dot(vec4(_1419, _1420, _1421, 1.0), vec4(_1352, _1355, _1358, _1361));
    float _1428 = dot(vec4(_1419, _1420, _1421, 1.0), vec4(_1351, _1354, _1357, _1360));
    float _1462;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1435 = dot(vec4(_1419, _1420, _1421, 1.0), vec4(_1042, _1046, _1049, _1052));
        float _1439 = dot(vec4(_1419, _1420, _1421, 1.0), vec4(_1044, _1047, _1050, _1053));
        float _1443 = dot(vec4(_1419, _1420, _1421, 1.0), vec4(_1045, _1048, _1051, _1054));
        float _1450 = dot(vec4(cbModelParam._m0[39u]), vec4(_1419, _1420, _1421, 1.0));
        _1462 = dot(vec3(isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0)), isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0)), isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1450) ? 0.0 : (isnan(0.0) ? _1450 : max(0.0, _1450))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1462 = 1.0;
    }
    float _1473;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1464 = dot(vec4(cbModelParam._m0[40u]), vec4(_1419, _1420, _1421, 1.0));
        _1473 = dot(vec3(isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0)), isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0)), isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1464) ? 0.0 : (isnan(0.0) ? _1464 : max(0.0, _1464))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1473 = 1.0;
    }
    float _1477 = (_1473 * cbModelParam._m0[1u].x) + (_1462 * (1.0 - cbModelParam._m0[1u].x));
    float _1487 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _503);
    float _1488 = isnan(_1487) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1487 : min(cbModelParam._m0[25u].z, _1487));
    float _1568;
    float _1570;
    float _1572;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1535 = fma(_741, cbModelParam._m0[13u].z, fma(_737, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _733)) + cbModelParam._m0[13u].w;
        float _1539 = fma(_741, cbModelParam._m0[14u].z, fma(_737, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _733)) + cbModelParam._m0[14u].w;
        float _1543 = fma(_741, cbModelParam._m0[15u].z, fma(_737, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _733)) + cbModelParam._m0[15u].w;
        float _1546 = fma(_679, cbModelParam._m0[13u].z, fma(_678, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _677));
        float _1549 = fma(_679, cbModelParam._m0[14u].z, fma(_678, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _677));
        float _1552 = fma(_679, cbModelParam._m0[15u].z, fma(_678, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _677));
        float _1580;
        if (_1546 > 0.0)
        {
            _1580 = abs((1.0 - _1535) / _1546);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1546 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1535 + 1.0) / _1546);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1580 = frontier_phi_14_12_ladder;
        }
        float _1751;
        if (_1549 > 0.0)
        {
            _1751 = abs((1.0 - _1539) / _1549);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1549 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1539 + 1.0) / _1549);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1751 = frontier_phi_23_19_ladder;
        }
        float _2047;
        if (_1552 > 0.0)
        {
            _2047 = abs((1.0 - _1543) / _1552);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1552 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1543 + 1.0) / _1552);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2047 = frontier_phi_35_30_ladder;
        }
        float _2049 = isnan(_1751) ? _1580 : (isnan(_1580) ? _1751 : min(_1580, _1751));
        float _2050 = isnan(_2047) ? _2049 : (isnan(_2049) ? _2047 : min(_2049, _2047));
        float _2054 = (_2050 * _1546) + _1535;
        float _2055 = (_2050 * _1549) + _1539;
        float _2056 = (_2050 * _1552) + _1543;
        float _2057 = _2050 * 9.9999997473787516355514526367188e-05;
        float _2059 = (-1.0) - _2057;
        float _2061 = _2057 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2056 > _2061) || ((_2056 < _2059) || ((_2055 > _2061) || ((_2055 < _2059) || ((_2054 < _2059) || (_2054 > _2061))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2201 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2056, cbModelParam._m0[9u].z, fma(_2055, cbModelParam._m0[9u].y, _2054 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2056, cbModelParam._m0[10u].z, fma(_2055, cbModelParam._m0[10u].y, _2054 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2056, cbModelParam._m0[11u].z, fma(_2055, cbModelParam._m0[11u].y, _2054 * cbModelParam._m0[11u].x))), _1488);
            frontier_phi_13_35_ladder = _2201.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2201.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2201.x * cbModelParam._m0[1u].y;
        }
        _1568 = frontier_phi_13_35_ladder_2;
        _1570 = frontier_phi_13_35_ladder_1;
        _1572 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1556 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_677, _678, _679), _1488);
        _1568 = _1556.x * cbModelParam._m0[1u].y;
        _1570 = _1556.y * cbModelParam._m0[1u].y;
        _1572 = _1556.z * cbModelParam._m0[1u].y;
    }
    float _1576 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _503);
    float _1577 = isnan(_1576) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1576 : min(cbModelParam._m0[25u].w, _1576));
    float _1666;
    float _1668;
    float _1670;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1630 = fma(_741, cbModelParam._m0[21u].z, fma(_737, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _733)) + cbModelParam._m0[21u].w;
        float _1634 = fma(_741, cbModelParam._m0[22u].z, fma(_737, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _733)) + cbModelParam._m0[22u].w;
        float _1638 = fma(_741, cbModelParam._m0[23u].z, fma(_737, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _733)) + cbModelParam._m0[23u].w;
        float _1641 = fma(_679, cbModelParam._m0[21u].z, fma(_678, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _677));
        float _1644 = fma(_679, cbModelParam._m0[22u].z, fma(_678, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _677));
        float _1647 = fma(_679, cbModelParam._m0[23u].z, fma(_678, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _677));
        float _1756;
        if (_1641 > 0.0)
        {
            _1756 = abs((1.0 - _1630) / _1641);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1641 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1630 + 1.0) / _1641);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1756 = frontier_phi_25_21_ladder;
        }
        float _2074;
        if (_1644 > 0.0)
        {
            _2074 = abs((1.0 - _1634) / _1644);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1644 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1634 + 1.0) / _1644);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2074 = frontier_phi_37_32_ladder;
        }
        float _2412;
        if (_1647 > 0.0)
        {
            _2412 = abs((1.0 - _1638) / _1647);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1647 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1638 + 1.0) / _1647);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2412 = frontier_phi_47_44_ladder;
        }
        float _2414 = isnan(_2074) ? _1756 : (isnan(_1756) ? _2074 : min(_1756, _2074));
        float _2415 = isnan(_2412) ? _2414 : (isnan(_2414) ? _2412 : min(_2414, _2412));
        float _2419 = (_2415 * _1641) + _1630;
        float _2420 = (_2415 * _1644) + _1634;
        float _2421 = (_2415 * _1647) + _1638;
        float _2422 = _2415 * 9.9999997473787516355514526367188e-05;
        float _2423 = (-1.0) - _2422;
        float _2425 = _2422 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2421 > _2425) || ((_2421 < _2423) || ((_2420 > _2425) || ((_2420 < _2423) || ((_2419 < _2423) || (_2419 > _2425))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2543 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2421, cbModelParam._m0[17u].z, fma(_2420, cbModelParam._m0[17u].y, _2419 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2421, cbModelParam._m0[18u].z, fma(_2420, cbModelParam._m0[18u].y, _2419 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2421, cbModelParam._m0[19u].z, fma(_2420, cbModelParam._m0[19u].y, _2419 * cbModelParam._m0[19u].x))), _1577);
            frontier_phi_22_47_ladder = _2543.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2543.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2543.x * cbModelParam._m0[1u].z;
        }
        _1666 = frontier_phi_22_47_ladder_2;
        _1668 = frontier_phi_22_47_ladder_1;
        _1670 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1650 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_677, _678, _679), _1577);
        _1666 = _1650.x * cbModelParam._m0[1u].z;
        _1668 = _1650.y * cbModelParam._m0[1u].z;
        _1670 = _1650.z * cbModelParam._m0[1u].z;
    }
    float _1683 = (((_704 * _653) + _705) * _669) * ((cbModelParam._m0[1u].w * (_1666 - _1568)) + _1568);
    float _1685 = (((_704 * _655) + _705) * _669) * ((cbModelParam._m0[1u].w * (_1668 - _1570)) + _1570);
    float _1687 = (((_704 * _656) + _705) * _669) * ((cbModelParam._m0[1u].w * (_1670 - _1572)) + _1572);
    float _1690 = fma(_1687, cbSceneParam._m0[89u].z, fma(_1685, cbSceneParam._m0[89u].y, _1683 * cbSceneParam._m0[89u].x));
    float _1693 = fma(_1687, cbSceneParam._m0[90u].z, fma(_1685, cbSceneParam._m0[90u].y, _1683 * cbSceneParam._m0[90u].x));
    float _1696 = fma(_1687, cbSceneParam._m0[91u].z, fma(_1685, cbSceneParam._m0[91u].y, _1683 * cbSceneParam._m0[91u].x));
    float _1730 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1734 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1738 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1742 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1743 = _1730 / _1742;
    float _1744 = _1734 / _1742;
    float _1745 = _1738 / _1742;
    float _1892;
    float _1893;
    float _1894;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1772 = ((uint(_1745 > cbSceneParam._m0[59u].y) + uint(_1745 > cbSceneParam._m0[59u].x)) + uint(_1745 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1773 = _1772 + 43u;
        uint _1781 = _1772 + 44u;
        uint _1789 = _1772 + 45u;
        uint _1797 = _1772 + 46u;
        float _1808 = fma(_1742, cbSceneParam._m0[_1773].w, fma(_1738, cbSceneParam._m0[_1773].z, fma(_1734, cbSceneParam._m0[_1773].y, _1730 * cbSceneParam._m0[_1773].x)));
        float _1812 = fma(_1742, cbSceneParam._m0[_1781].w, fma(_1738, cbSceneParam._m0[_1781].z, fma(_1734, cbSceneParam._m0[_1781].y, _1730 * cbSceneParam._m0[_1781].x)));
        float _1820 = fma(_1742, cbSceneParam._m0[_1797].w, fma(_1738, cbSceneParam._m0[_1797].z, fma(_1734, cbSceneParam._m0[_1797].y, _1730 * cbSceneParam._m0[_1797].x)));
        float _1825 = cbSceneParam._m0[33u].z * _1820;
        float _1827 = cbSceneParam._m0[33u].w * _1820;
        float _1830 = fma(_1742, cbSceneParam._m0[_1789].w, fma(_1738, cbSceneParam._m0[_1789].z, fma(_1734, cbSceneParam._m0[_1789].y, _1730 * cbSceneParam._m0[_1789].x))) / _1820;
        float _1878 = (cbSceneParam._m0[33u].x - sqrt(((_1744 * _1744) + (_1743 * _1743)) + (_1745 * _1745))) * cbSceneParam._m0[33u].y;
        float _4166 = isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0));
        float _1885 = (isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1825 + _1808) / _1820, (_1827 + _1812) / _1820), _1830), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1827 + _1808) / _1820, (_1812 - _1825) / _1820), _1830), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1808 - _1825) / _1820, (_1812 - _1827) / _1820), _1830), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1808 - _1827) / _1820, (_1825 + _1812) / _1820), _1830), 0.0)).x), vec4(0.25)));
        _1892 = 1.0 - (_1885 * cbSceneParam._m0[34u].x);
        _1893 = 1.0 - (_1885 * cbSceneParam._m0[34u].y);
        _1894 = 1.0 - (_1885 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1892 = 1.0;
        _1893 = 1.0;
        _1894 = 1.0;
    }
    float _1958;
    float _1960;
    float _1962;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1946 = fma(_1742, cbSceneParam._m0[63u].w, fma(_1738, cbSceneParam._m0[63u].z, fma(_1734, cbSceneParam._m0[63u].y, _1730 * cbSceneParam._m0[63u].x)));
        float _1947 = fma(_1742, cbSceneParam._m0[60u].w, fma(_1738, cbSceneParam._m0[60u].z, fma(_1734, cbSceneParam._m0[60u].y, _1730 * cbSceneParam._m0[60u].x))) / _1946;
        float _1948 = fma(_1742, cbSceneParam._m0[61u].w, fma(_1738, cbSceneParam._m0[61u].z, fma(_1734, cbSceneParam._m0[61u].y, _1730 * cbSceneParam._m0[61u].x))) / _1946;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1947 >= cbSceneParam._m0[64u].x) && (_1948 >= cbSceneParam._m0[64u].y)) && (_1947 <= cbSceneParam._m0[64u].z)) && (_1948 <= cbSceneParam._m0[64u].w))
        {
            float _2087 = fma(_1742, cbSceneParam._m0[62u].w, fma(_1738, cbSceneParam._m0[62u].z, fma(_1734, cbSceneParam._m0[62u].y, _1730 * cbSceneParam._m0[62u].x))) / _1946;
            float _2091 = isnan(cbSceneParam._m0[41u].w) ? _2087 : (isnan(_2087) ? cbSceneParam._m0[41u].w : max(_2087, cbSceneParam._m0[41u].w));
            float _2134 = (cbSceneParam._m0[33u].x - sqrt(((_1744 * _1744) + (_1743 * _1743)) + (_1745 * _1745))) * cbSceneParam._m0[33u].y;
            float _4182 = isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0));
            float _2141 = (isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1947, cbSceneParam._m0[33u].w + _1948), _2091), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1947, _1948 - cbSceneParam._m0[33u].z), _2091), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1947 - cbSceneParam._m0[33u].z, _1948 - cbSceneParam._m0[33u].w), _2091), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1947 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1948), _2091), 0.0)).x), vec4(0.25)));
            float _2145 = 1.0 - (_2141 * cbSceneParam._m0[34u].x);
            float _2146 = 1.0 - (_2141 * cbSceneParam._m0[34u].y);
            float _2147 = 1.0 - (_2141 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2147) ? _1894 : (isnan(_1894) ? _2147 : min(_1894, _2147));
            frontier_phi_34_33_ladder_1 = isnan(_2146) ? _1893 : (isnan(_1893) ? _2146 : min(_1893, _2146));
            frontier_phi_34_33_ladder_2 = isnan(_2145) ? _1892 : (isnan(_1892) ? _2145 : min(_1892, _2145));
        }
        else
        {
            frontier_phi_34_33_ladder = _1894;
            frontier_phi_34_33_ladder_1 = _1893;
            frontier_phi_34_33_ladder_2 = _1892;
        }
        _1958 = frontier_phi_34_33_ladder_2;
        _1960 = frontier_phi_34_33_ladder_1;
        _1962 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1958 = _1892;
        _1960 = _1893;
        _1962 = _1894;
    }
    uvec4 _1967 = floatBitsToUint(cbInstanceData._m0[_226 + 5u]);
    uint _1969 = _1967.x * 14u;
    uint _1970 = _1969 + 13u;
    float _1977 = _669 + (-1.0);
    float _1982 = (cbLight._m0[_1970].x * _1977) + 1.0;
    float _1983 = (cbLight._m0[_1970].y * _1977) + 1.0;
    float _1984 = (cbLight._m0[_1970].z * _1977) + 1.0;
    float _1985 = (cbLight._m0[_1970].w * _1977) + 1.0;
    uint _1986 = _1969 + 5u;
    float _1992 = isnan(1.0) ? _1983 : (isnan(_1983) ? 1.0 : min(_1983, 1.0));
    uint _1996 = _1969 + 4u;
    float _2006 = isnan(1.0) ? _1982 : (isnan(_1982) ? 1.0 : min(_1982, 1.0));
    uint _2010 = _1969 | 1u;
    float _2021 = dot(vec3(cbLight._m0[_1969].xyz), vec3(_500, _501, _502));
    float _2024 = dot(vec3(cbLight._m0[_2010].xyz), vec3(_500, _501, _502));
    float _4218 = isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0));
    float _4229 = isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0));
    float _2029 = (isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0))) * 0.3183098733425140380859375;
    float _2031 = (isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0))) * 0.3183098733425140380859375;
    float _2038 = ((cbLight._m0[_1986].x * _1992) * _2031) + (((cbLight._m0[_1996].x * _1958) * _2006) * _2029);
    float _2039 = ((_1992 * cbLight._m0[_1986].y) * _2031) + (((cbLight._m0[_1996].y * _1960) * _2006) * _2029);
    float _2040 = ((_1992 * cbLight._m0[_1986].z) * _2031) + (((cbLight._m0[_1996].z * _1962) * _2006) * _2029);
    uvec4 _2044 = floatBitsToUint(cbLight._m0[_1969 + 12u]);
    bool _2046 = _2044.x == 0u;
    float _2148;
    float _2150;
    float _2152;
    if (_2046)
    {
        _2148 = _2038;
        _2150 = _2039;
        _2152 = _2040;
    }
    else
    {
        uint _2156 = _1969 + 6u;
        float _2172 = (dot(vec3(cbLight._m0[_1969 + 2u].xyz), vec3(_500, _501, _502)) * 0.5) + 0.5;
        float _2173 = _2172 * _2172;
        float _4240 = isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0));
        float _2174 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
        float _2175 = isnan(1.0) ? _1984 : (isnan(_1984) ? 1.0 : min(_1984, 1.0));
        _2148 = (((cbLight._m0[_2156].x * 0.3183098733425140380859375) * _2174) * _2175) + _2038;
        _2150 = (((cbLight._m0[_2156].y * 0.3183098733425140380859375) * _2174) * _2175) + _2039;
        _2152 = (((cbLight._m0[_2156].z * 0.3183098733425140380859375) * _2174) * _2175) + _2040;
    }
    bool _2155 = _2044.y == 0u;
    float _2210;
    float _2212;
    float _2214;
    if (_2155)
    {
        _2210 = _2148;
        _2212 = _2150;
        _2214 = _2152;
    }
    else
    {
        uint _2383 = _1969 + 7u;
        float _2399 = (dot(vec3(cbLight._m0[_1969 + 3u].xyz), vec3(_500, _501, _502)) * 0.5) + 0.5;
        float _2400 = _2399 * _2399;
        float _4256 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
        float _2401 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
        float _2402 = isnan(1.0) ? _1985 : (isnan(_1985) ? 1.0 : min(_1985, 1.0));
        _2210 = (((cbLight._m0[_2383].x * 0.3183098733425140380859375) * _2401) * _2402) + _2148;
        _2212 = (((cbLight._m0[_2383].y * 0.3183098733425140380859375) * _2401) * _2402) + _2150;
        _2214 = (((cbLight._m0[_2383].z * 0.3183098733425140380859375) * _2401) * _2402) + _2152;
    }
    uint _2217 = _1969 + 8u;
    float _2230 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1969].w)) * _503) * 0.949999988079071044921875);
    float _2231 = _2230 * _2230;
    float _2232 = cbLight._m0[_1969].x + _580;
    float _2233 = cbLight._m0[_1969].y + _581;
    float _2234 = cbLight._m0[_1969].z + _582;
    float _2238 = inversesqrt(dot(vec3(_2232, _2233, _2234), vec3(_2232, _2233, _2234)));
    float _2239 = _2238 * _2232;
    float _2240 = _2238 * _2233;
    float _2241 = _2238 * _2234;
    float _2242 = dot(vec3(_500, _501, _502), vec3(cbLight._m0[_1969].xyz));
    float _4272 = isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0));
    float _2245 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
    float _4283 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _2246 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
    float _2247 = dot(vec3(_500, _501, _502), vec3(_2239, _2240, _2241));
    float _4294 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
    float _2250 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
    float _2251 = dot(vec3(cbLight._m0[_1969].xyz), vec3(_2239, _2240, _2241));
    float _4305 = isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0));
    float _2255 = _2231 * _2231;
    float _2259 = ((_2250 * _2250) * (_2255 + (-1.0))) + 1.0;
    float _2267 = exp2(log2(1.0 - (isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0)))) * 5.0);
    float _2268 = 0.959999978542327880859375 - _650;
    float _2270 = 0.959999978542327880859375 - _651;
    float _2271 = 0.959999978542327880859375 - _652;
    float _2278 = 1.0 - _2231;
    float _2289 = (0.5 / (((_2246 * ((_2245 * _2278) + _2231)) + 9.9999999392252902907785028219223e-09) + (((_2246 * _2278) + _2231) * _2245))) * _2245;
    float _4316 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
    float _2291 = (isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0))) * (_2255 / ((_2259 * _2259) * 3.141590118408203125));
    uint _2305 = _1969 + 9u;
    float _2316 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2010].w)) * _503) * 0.949999988079071044921875);
    float _2317 = _2316 * _2316;
    float _2318 = cbLight._m0[_2010].x + _580;
    float _2319 = cbLight._m0[_2010].y + _581;
    float _2320 = cbLight._m0[_2010].z + _582;
    float _2324 = inversesqrt(dot(vec3(_2318, _2319, _2320), vec3(_2318, _2319, _2320)));
    float _2325 = _2324 * _2318;
    float _2326 = _2324 * _2319;
    float _2327 = _2324 * _2320;
    float _2328 = dot(vec3(_500, _501, _502), vec3(cbLight._m0[_2010].xyz));
    float _4327 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
    float _2331 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
    float _2332 = dot(vec3(_500, _501, _502), vec3(_2325, _2326, _2327));
    float _4338 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0));
    float _2335 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
    float _2336 = dot(vec3(cbLight._m0[_2010].xyz), vec3(_2325, _2326, _2327));
    float _4349 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
    float _2340 = _2317 * _2317;
    float _2344 = ((_2335 * _2335) * (_2340 + (-1.0))) + 1.0;
    float _2351 = exp2(log2(1.0 - (isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0)))) * 5.0);
    float _2358 = 1.0 - _2317;
    float _2368 = (0.5 / (((_2246 * ((_2331 * _2358) + _2317)) + 9.9999999392252902907785028219223e-09) + (((_2246 * _2358) + _2317) * _2331))) * _2331;
    float _4360 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
    float _2370 = (isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0))) * (_2340 / ((_2344 * _2344) * 3.141590118408203125));
    float _2380 = (((((_2351 * _2268) + _653) * cbLight._m0[_2305].x) * _2370) * _1992) + ((((cbLight._m0[_2217].x * _1958) * ((_2267 * _2268) + _653)) * _2291) * _2006);
    float _2381 = (((((_2351 * _2270) + _655) * cbLight._m0[_2305].y) * _2370) * _1992) + ((((cbLight._m0[_2217].y * _1960) * ((_2267 * _2270) + _655)) * _2291) * _2006);
    float _2382 = (((((_2351 * _2271) + _656) * cbLight._m0[_2305].z) * _2370) * _1992) + ((((cbLight._m0[_2217].z * _1962) * ((_2267 * _2271) + _656)) * _2291) * _2006);
    float _2438;
    float _2440;
    float _2442;
    if (_2046)
    {
        _2438 = _2380;
        _2440 = _2381;
        _2442 = _2382;
    }
    else
    {
        uint _2444 = _1969 + 2u;
        uint _2448 = _1969 + 10u;
        float _2462 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2444].w)) * _503) * 0.949999988079071044921875);
        float _2463 = _2462 * _2462;
        float _2464 = cbLight._m0[_2444].x + _580;
        float _2465 = cbLight._m0[_2444].y + _581;
        float _2466 = cbLight._m0[_2444].z + _582;
        float _2470 = inversesqrt(dot(vec3(_2464, _2465, _2466), vec3(_2464, _2465, _2466)));
        float _2471 = _2470 * _2464;
        float _2472 = _2470 * _2465;
        float _2473 = _2470 * _2466;
        float _2474 = dot(vec3(_500, _501, _502), vec3(cbLight._m0[_2444].xyz));
        float _4371 = isnan(0.0) ? _2474 : (isnan(_2474) ? 0.0 : max(_2474, 0.0));
        float _2477 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
        float _2478 = dot(vec3(_500, _501, _502), vec3(_2471, _2472, _2473));
        float _4382 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0));
        float _2481 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
        float _2482 = dot(vec3(cbLight._m0[_2444].xyz), vec3(_2471, _2472, _2473));
        float _4393 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0));
        float _2486 = _2463 * _2463;
        float _2490 = ((_2481 * _2481) * (_2486 + (-1.0))) + 1.0;
        float _2497 = exp2(log2(1.0 - (isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0)))) * 5.0);
        float _2504 = 1.0 - _2463;
        float _2514 = (0.5 / (((_2246 * ((_2477 * _2504) + _2463)) + 9.9999999392252902907785028219223e-09) + (((_2246 * _2504) + _2463) * _2477))) * _2477;
        float _4404 = isnan(0.0) ? _2514 : (isnan(_2514) ? 0.0 : max(_2514, 0.0));
        float _2516 = (isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0))) * (_2486 / ((_2490 * _2490) * 3.141590118408203125));
        float _2517 = isnan(1.0) ? _1984 : (isnan(_1984) ? 1.0 : min(_1984, 1.0));
        _2438 = (((((_2497 * _2268) + _653) * cbLight._m0[_2448].x) * _2516) * _2517) + _2380;
        _2440 = (((((_2497 * _2270) + _655) * cbLight._m0[_2448].y) * _2516) * _2517) + _2381;
        _2442 = (((((_2497 * _2271) + _656) * cbLight._m0[_2448].z) * _2516) * _2517) + _2382;
    }
    float _2548;
    float _2550;
    float _2552;
    if (_2155)
    {
        _2548 = _2438;
        _2550 = _2440;
        _2552 = _2442;
    }
    else
    {
        uint _2559 = _1969 + 3u;
        uint _2563 = _1969 + 11u;
        float _2577 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2559].w)) * _503) * 0.949999988079071044921875);
        float _2578 = _2577 * _2577;
        float _2579 = cbLight._m0[_2559].x + _580;
        float _2580 = cbLight._m0[_2559].y + _581;
        float _2581 = cbLight._m0[_2559].z + _582;
        float _2585 = inversesqrt(dot(vec3(_2579, _2580, _2581), vec3(_2579, _2580, _2581)));
        float _2586 = _2585 * _2579;
        float _2587 = _2585 * _2580;
        float _2588 = _2585 * _2581;
        float _2589 = dot(vec3(_500, _501, _502), vec3(cbLight._m0[_2559].xyz));
        float _4420 = isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0));
        float _2592 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
        float _2593 = dot(vec3(_500, _501, _502), vec3(_2586, _2587, _2588));
        float _4431 = isnan(0.0) ? _2593 : (isnan(_2593) ? 0.0 : max(_2593, 0.0));
        float _2596 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
        float _2597 = dot(vec3(cbLight._m0[_2559].xyz), vec3(_2586, _2587, _2588));
        float _4442 = isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0));
        float _2601 = _2578 * _2578;
        float _2605 = ((_2596 * _2596) * (_2601 + (-1.0))) + 1.0;
        float _2612 = exp2(log2(1.0 - (isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0)))) * 5.0);
        float _2619 = 1.0 - _2578;
        float _2629 = (0.5 / (((_2246 * ((_2592 * _2619) + _2578)) + 9.9999999392252902907785028219223e-09) + (((_2246 * _2619) + _2578) * _2592))) * _2592;
        float _4453 = isnan(0.0) ? _2629 : (isnan(_2629) ? 0.0 : max(_2629, 0.0));
        float _2631 = (isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0))) * (_2601 / ((_2605 * _2605) * 3.141590118408203125));
        float _2632 = isnan(1.0) ? _1985 : (isnan(_1985) ? 1.0 : min(_1985, 1.0));
        _2548 = (((((_2612 * _2268) + _653) * cbLight._m0[_2563].x) * _2631) * _2632) + _2438;
        _2550 = (((((_2612 * _2270) + _655) * cbLight._m0[_2563].y) * _2631) * _2632) + _2440;
        _2552 = (((((_2612 * _2271) + _656) * cbLight._m0[_2563].z) * _2631) * _2632) + _2442;
    }
    float _2698;
    float _2700;
    float _2702;
    float _2704;
    float _2706;
    float _2708;
    if (_1967.y == 0u)
    {
        uvec4 _2653 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2654 = _2653.x;
        uint _2665 = uint((float(_2653.y) * floor(float(uint(cbSceneParam._m0[85u].y * _589) / _2654))) + floor(float(uint(cbSceneParam._m0[85u].x * _588) / _2654)));
        float _2675 = (log2(_1745 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2676 = isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : max(_2675, 0.0));
        uint _2679 = uint(isnan(14.0) ? _2676 : (isnan(_2676) ? 14.0 : min(_2676, 14.0)));
        uvec4 _2684 = texelFetch(g_lightClusterGridBuffer, int(((_2679 << 2u) + (_2665 << 6u)) >> 2u));
        uint _2685 = _2684.x;
        uint _2686 = _2653.z;
        float _2765;
        float _2767;
        float _2769;
        float _2771;
        float _2773;
        float _2775;
        if (((((1u << ((_2686 >> 4u) & 15u)) + 4294967295u) & _2685) == 0u) || ((_2686 & 240u) == 0u))
        {
            _2765 = 0.0;
            _2767 = 0.0;
            _2769 = 0.0;
            _2771 = 0.0;
            _2773 = 0.0;
            _2775 = 0.0;
        }
        else
        {
            float _2766;
            float _2768;
            float _2770;
            float _2772;
            float _2774;
            float _2776;
            float _2910 = 0.0;
            float _2911 = 0.0;
            float _2912 = 0.0;
            float _2913 = 0.0;
            float _2914 = 0.0;
            float _2915 = 0.0;
            uint _2916 = 0u;
            uint _2925;
            bool _2926;
            for (;;)
            {
                _2925 = texelFetch(g_lightClassification, int((((_2679 << 5u) + (_2665 << 9u)) + (_2916 << 2u)) >> 2u)).x;
                _2926 = _2925 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2926)
                {
                    frontier_phi_66_pred = _2915;
                    frontier_phi_66_pred_1 = _2914;
                    frontier_phi_66_pred_2 = _2913;
                    frontier_phi_66_pred_3 = _2912;
                    frontier_phi_66_pred_4 = _2911;
                    frontier_phi_66_pred_5 = _2910;
                }
                else
                {
                    float _3034;
                    float _3035;
                    float _3036;
                    float _3037;
                    float _3038;
                    float _3039;
                    uint _3040;
                    _3034 = _2910;
                    _3035 = _2911;
                    _3036 = _2912;
                    _3037 = _2913;
                    _3038 = _2914;
                    _3039 = _2915;
                    _3040 = _2925;
                    float _2966;
                    float _2967;
                    float _2968;
                    float _2969;
                    float _2970;
                    float _2971;
                    for (;;)
                    {
                        uint _3044 = uint(findLSB(_3040)) + (_2916 << 5u);
                        uint _3041 = (_3040 + 4294967295u) & _3040;
                        uint _3046 = _3044 * 48u;
                        vec4 _3060 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3046)).x, texelFetch(g_PointLightRenderingBuffer, int(_3046 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3046 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3046 + 3u)).x));
                        uint _3066 = (_3044 * 48u) + 4u;
                        vec4 _3079 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3066)).x, texelFetch(g_PointLightRenderingBuffer, int(_3066 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3066 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3066 + 3u)).x));
                        uint _3085 = (_3044 * 48u) + 8u;
                        vec3 _3096 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3085)).x, texelFetch(g_PointLightRenderingBuffer, int(_3085 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3085 + 2u)).x));
                        float _3100 = _3060.x - _1743;
                        float _3101 = _3060.y - _1744;
                        float _3102 = _3060.z - _1745;
                        float _3103 = dot(vec3(_3100, _3101, _3102), vec3(_3100, _3101, _3102));
                        float _3106 = inversesqrt(_3103);
                        float _3107 = _3106 * _3100;
                        float _3108 = _3106 * _3101;
                        float _3109 = _3106 * _3102;
                        float _3110 = dot(vec3(_610, _613, _616), vec3(_3107, _3108, _3109));
                        float _3115 = 1.0 - (_3103 * _3060.w);
                        float _4479 = isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : max(_3115, 0.0));
                        float _3116 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
                        float _3117 = sqrt(_3103) * _3079.w;
                        float _3120 = 1.39999997615814208984375 / (_3117 + 1.39999997615814208984375);
                        float _3121 = _3120 * _3120;
                        float _3124 = ((1.0 - _3121) * _3110) + _3121;
                        float _3127 = _3117 * _3117;
                        float _3131 = ((isnan(0.0) ? _3124 : (isnan(_3124) ? 0.0 : max(_3124, 0.0))) * _3116) / ((_3127 * 0.699999988079071044921875) + 1.0);
                        float _3135 = (-0.0) - _1743;
                        float _3136 = (-0.0) - _1744;
                        float _3137 = (-0.0) - _1745;
                        float _3141 = inversesqrt(dot(vec3(_3135, _3136, _3137), vec3(_3135, _3136, _3137)));
                        float _3142 = _3141 * _3135;
                        float _3143 = _3141 * _3136;
                        float _3144 = _3141 * _3137;
                        float _3151 = exp2(log2(1.0 / ((_3127 * 3.5) + 5.0)) * 0.25);
                        float _3152 = 1.0 - _685;
                        float _3159 = sqrt(1.0 - ((1.0 - (_3152 * _3152)) * (1.0 - (_3151 * _3151))));
                        float _3160 = _3159 * _3159;
                        float _3161 = _3160 * _3160;
                        float _3162 = _3142 + _3107;
                        float _3163 = _3143 + _3108;
                        float _3164 = _3144 + _3109;
                        float _3168 = inversesqrt(dot(vec3(_3162, _3163, _3164), vec3(_3162, _3163, _3164)));
                        float _3172 = dot(vec3(_610, _613, _616), vec3(_3142, _3143, _3144));
                        float _4495 = isnan(0.0) ? _3172 : (isnan(_3172) ? 0.0 : max(_3172, 0.0));
                        float _3175 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
                        float _3176 = dot(vec3(_610, _613, _616), vec3(_3168 * _3162, _3168 * _3163, _3168 * _3164));
                        float _4506 = isnan(0.0) ? _3176 : (isnan(_3176) ? 0.0 : max(_3176, 0.0));
                        float _3179 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
                        float _3183 = ((_3179 * _3179) * (_3161 + (-1.0))) + 1.0;
                        float _3184 = _3120 * _3160;
                        float _3185 = _3184 * _3184;
                        float _3188 = ((1.0 - _3185) * _3110) + _3185;
                        float _4517 = isnan(0.0) ? _3188 : (isnan(_3188) ? 0.0 : max(_3188, 0.0));
                        float _3189 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
                        float _3190 = 1.0 - _3160;
                        float _3200 = (0.5 / (((_3189 * ((_3175 * _3190) + _3160)) + 9.9999999392252902907785028219223e-09) + (((_3189 * _3190) + _3160) * _3175))) * _3189;
                        float _4528 = isnan(0.0) ? _3200 : (isnan(_3200) ? 0.0 : max(_3200, 0.0));
                        float _3211 = (((_3161 * 3.1415927410125732421875) * (isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0)))) / ((_3183 * _3183) * ((_3127 * 2.1991131305694580078125) + 3.141590118408203125))) * _3116;
                        _2969 = (_3131 * _3079.x) + _3037;
                        _2970 = (_3131 * _3079.y) + _3038;
                        _2971 = (_3131 * _3079.z) + _3039;
                        _2966 = (_3211 * _3096.x) + _3034;
                        _2967 = (_3211 * _3096.y) + _3035;
                        _2968 = (_3211 * _3096.z) + _3036;
                        if (_3041 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3034 = _2966;
                            _3035 = _2967;
                            _3036 = _2968;
                            _3037 = _2969;
                            _3038 = _2970;
                            _3039 = _2971;
                            _3040 = _3041;
                        }
                    }
                    frontier_phi_66_pred = _2971;
                    frontier_phi_66_pred_1 = _2970;
                    frontier_phi_66_pred_2 = _2969;
                    frontier_phi_66_pred_3 = _2968;
                    frontier_phi_66_pred_4 = _2967;
                    frontier_phi_66_pred_5 = _2966;
                }
                _2776 = frontier_phi_66_pred;
                _2774 = frontier_phi_66_pred_1;
                _2772 = frontier_phi_66_pred_2;
                _2770 = frontier_phi_66_pred_3;
                _2768 = frontier_phi_66_pred_4;
                _2766 = frontier_phi_66_pred_5;
                uint _2917 = _2916 + 1u;
                if (_2917 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2910 = _2766;
                    _2911 = _2768;
                    _2912 = _2770;
                    _2913 = _2772;
                    _2914 = _2774;
                    _2915 = _2776;
                    _2916 = _2917;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2765 = _2766;
            _2767 = _2768;
            _2769 = _2770;
            _2771 = _2772;
            _2773 = _2774;
            _2775 = _2776;
        }
        uvec4 _2779 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2780 = _2779.z;
        uint _2782 = (_2780 >> 8u) & 15u;
        float _2878;
        float _2880;
        float _2882;
        float _2884;
        float _2886;
        float _2888;
        if (((4294967295u << _2782) & _2685) == 0u)
        {
            _2878 = _2765;
            _2880 = _2767;
            _2882 = _2769;
            _2884 = _2771;
            _2886 = _2773;
            _2888 = _2775;
        }
        else
        {
            float _2903 = inversesqrt(dot(vec3(_1743, _1744, _1745), vec3(_1743, _1744, _1745)));
            float _2904 = _2903 * _1743;
            float _2905 = _2903 * _1744;
            float _2906 = _2903 * _1745;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2782 < ((_2780 >> 12u) & 15u))
            {
                float _2879;
                float _2881;
                float _2883;
                float _2885;
                float _2887;
                float _2889;
                float _3017 = _2765;
                float _3018 = _2767;
                float _3019 = _2769;
                float _3020 = _2771;
                float _3021 = _2773;
                float _3022 = _2775;
                uint _3023 = _2782;
                uint _3032;
                bool _3033;
                for (;;)
                {
                    _3032 = texelFetch(g_lightClassification, int((((_2679 << 5u) + (_2665 << 9u)) + (_3023 << 2u)) >> 2u)).x;
                    _3033 = _3032 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3033)
                    {
                        frontier_phi_72_pred = _3022;
                        frontier_phi_72_pred_1 = _3021;
                        frontier_phi_72_pred_2 = _3020;
                        frontier_phi_72_pred_3 = _3019;
                        frontier_phi_72_pred_4 = _3018;
                        frontier_phi_72_pred_5 = _3017;
                    }
                    else
                    {
                        float _3216;
                        float _3217;
                        float _3218;
                        float _3219;
                        float _3220;
                        float _3221;
                        float _3511;
                        float _3512;
                        float _3513;
                        float _3514;
                        float _3515;
                        float _3516;
                        float _3229 = _3017;
                        float _3230 = _3018;
                        float _3231 = _3019;
                        float _3232 = _3020;
                        float _3233 = _3021;
                        float _3234 = _3022;
                        uint _3235 = _3032;
                        uint _3236;
                        vec4 _3261;
                        float _3262;
                        vec4 _3277;
                        vec3 _3289;
                        vec4 _3305;
                        vec4 _3321;
                        float _3367;
                        bool _3368;
                        for (;;)
                        {
                            uint _3246 = ((_3023 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3235));
                            _3236 = (_3235 + 4294967295u) & _3235;
                            uint _3248 = _3246 * 40u;
                            _3261 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3248)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 3u)).x));
                            _3262 = _3261.w;
                            uint _3264 = (_3246 * 40u) + 4u;
                            _3277 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3264)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 3u)).x));
                            uint _3279 = (_3246 * 40u) + 8u;
                            _3289 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3279)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 2u)).x));
                            uint _3292 = (_3246 * 40u) + 16u;
                            _3305 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3292)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 3u)).x));
                            uint _3308 = (_3246 * 40u) + 20u;
                            _3321 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3308)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 3u)).x));
                            uint _3323 = (_3246 * 40u) + 24u;
                            vec4 _3336 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3323)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 3u)).x));
                            uint _3342 = (_3246 * 40u) + 28u;
                            vec4 _3355 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3342)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 3u)).x));
                            _3367 = fma(_1745, _3355.z, fma(_1744, _3355.y, _3355.x * _1743)) + _3355.w;
                            _3368 = !((fma(_1745, _3336.z, fma(_1744, _3336.y, _3336.x * _1743)) + _3336.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3368)
                            {
                                float _3395 = _3261.x - _1743;
                                float _3396 = _3261.y - _1744;
                                float _3397 = _3261.z - _1745;
                                float _3398 = dot(vec3(_3395, _3396, _3397), vec3(_3395, _3396, _3397));
                                float _3401 = inversesqrt(_3398);
                                float _3402 = _3401 * _3395;
                                float _3403 = _3401 * _3396;
                                float _3404 = _3401 * _3397;
                                float _3408 = 1.0 - (_3398 / (_3262 * _3262));
                                float _4539 = isnan(0.0) ? _3408 : (isnan(_3408) ? 0.0 : max(_3408, 0.0));
                                float _3409 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
                                float _3413 = sqrt(_3398) * _3277.w;
                                float _3415 = 1.39999997615814208984375 / (_3413 + 1.39999997615814208984375);
                                float _3416 = _3415 * _3415;
                                float _3419 = ((1.0 - _3416) * dot(vec3(_3402, _3403, _3404), vec3(_610, _613, _616))) + _3416;
                                float _3422 = _3413 * _3413;
                                float _3426 = (fma(_1745, _3305.z, fma(_1744, _3305.y, _3305.x * _1743)) + _3305.w) / _3367;
                                float _3427 = (fma(_1745, _3321.z, fma(_1744, _3321.y, _3321.x * _1743)) + _3321.w) / _3367;
                                float _3431 = 1.0 - dot(vec2(_3426, _3427), vec2(_3426, _3427));
                                float _4555 = isnan(0.0) ? _3431 : (isnan(_3431) ? 0.0 : max(_3431, 0.0));
                                float _3432 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
                                float _3433 = _3432 * (((isnan(0.0) ? _3419 : (isnan(_3419) ? 0.0 : max(_3419, 0.0))) * _3409) / ((_3422 * 0.699999988079071044921875) + 1.0));
                                float _3445 = exp2(log2(1.0 / ((_3422 * 3.5) + 5.0)) * 0.25);
                                float _3446 = 1.0 - _685;
                                float _3453 = sqrt(1.0 - ((1.0 - (_3446 * _3446)) * (1.0 - (_3445 * _3445))));
                                float _3454 = _3453 * _3453;
                                float _3455 = _3454 * _3454;
                                float _3456 = _3402 - _2904;
                                float _3457 = _3403 - _2905;
                                float _3458 = _3404 - _2906;
                                float _3462 = inversesqrt(dot(vec3(_3456, _3457, _3458), vec3(_3456, _3457, _3458)));
                                float _3466 = dot(vec3(_610, _613, _616), vec3((-0.0) - _2904, (-0.0) - _2905, (-0.0) - _2906));
                                float _4566 = isnan(0.0) ? _3466 : (isnan(_3466) ? 0.0 : max(_3466, 0.0));
                                float _3469 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
                                float _3470 = dot(vec3(_610, _613, _616), vec3(_3462 * _3456, _3462 * _3457, _3462 * _3458));
                                float _4577 = isnan(0.0) ? _3470 : (isnan(_3470) ? 0.0 : max(_3470, 0.0));
                                float _3473 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
                                float _3477 = ((_3473 * _3473) * (_3455 + (-1.0))) + 1.0;
                                float _3478 = _3415 * _3454;
                                float _3479 = _3478 * _3478;
                                float _3485 = ((1.0 - _3479) * dot(vec3(_610, _613, _616), vec3(_3402, _3403, _3404))) + _3479;
                                float _4588 = isnan(0.0) ? _3485 : (isnan(_3485) ? 0.0 : max(_3485, 0.0));
                                float _3486 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
                                float _3487 = 1.0 - _3454;
                                float _3497 = (0.5 / (((_3486 * ((_3469 * _3487) + _3454)) + 9.9999999392252902907785028219223e-09) + (((_3486 * _3487) + _3454) * _3469))) * _3486;
                                float _4599 = isnan(0.0) ? _3497 : (isnan(_3497) ? 0.0 : max(_3497, 0.0));
                                float _3507 = (_3432 * _3409) * (((_3455 * 3.1415927410125732421875) * (isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0)))) / ((_3477 * _3477) * ((_3422 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3433 * _3277.y;
                                frontier_phi_78_pred_1 = _3433 * _3277.x;
                                frontier_phi_78_pred_2 = _3507 * _3289.z;
                                frontier_phi_78_pred_3 = _3507 * _3289.y;
                                frontier_phi_78_pred_4 = _3507 * _3289.x;
                                frontier_phi_78_pred_5 = _3433 * _3277.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3515 = frontier_phi_78_pred;
                            _3514 = frontier_phi_78_pred_1;
                            _3513 = frontier_phi_78_pred_2;
                            _3512 = frontier_phi_78_pred_3;
                            _3511 = frontier_phi_78_pred_4;
                            _3516 = frontier_phi_78_pred_5;
                            _3219 = _3514 + _3232;
                            _3220 = _3515 + _3233;
                            _3221 = _3516 + _3234;
                            _3216 = _3511 + _3229;
                            _3217 = _3512 + _3230;
                            _3218 = _3513 + _3231;
                            if (_3236 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3229 = _3216;
                                _3230 = _3217;
                                _3231 = _3218;
                                _3232 = _3219;
                                _3233 = _3220;
                                _3234 = _3221;
                                _3235 = _3236;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3221;
                        frontier_phi_72_pred_1 = _3220;
                        frontier_phi_72_pred_2 = _3219;
                        frontier_phi_72_pred_3 = _3218;
                        frontier_phi_72_pred_4 = _3217;
                        frontier_phi_72_pred_5 = _3216;
                    }
                    _2889 = frontier_phi_72_pred;
                    _2887 = frontier_phi_72_pred_1;
                    _2885 = frontier_phi_72_pred_2;
                    _2883 = frontier_phi_72_pred_3;
                    _2881 = frontier_phi_72_pred_4;
                    _2879 = frontier_phi_72_pred_5;
                    uint _3024 = _3023 + 1u;
                    if (_3024 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3017 = _2879;
                        _3018 = _2881;
                        _3019 = _2883;
                        _3020 = _2885;
                        _3021 = _2887;
                        _3022 = _2889;
                        _3023 = _3024;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2889;
                frontier_phi_60_61_ladder_1 = _2887;
                frontier_phi_60_61_ladder_2 = _2883;
                frontier_phi_60_61_ladder_3 = _2881;
                frontier_phi_60_61_ladder_4 = _2879;
                frontier_phi_60_61_ladder_5 = _2885;
            }
            else
            {
                frontier_phi_60_61_ladder = _2775;
                frontier_phi_60_61_ladder_1 = _2773;
                frontier_phi_60_61_ladder_2 = _2769;
                frontier_phi_60_61_ladder_3 = _2767;
                frontier_phi_60_61_ladder_4 = _2765;
                frontier_phi_60_61_ladder_5 = _2771;
            }
            _2878 = frontier_phi_60_61_ladder_4;
            _2880 = frontier_phi_60_61_ladder_3;
            _2882 = frontier_phi_60_61_ladder_2;
            _2884 = frontier_phi_60_61_ladder_5;
            _2886 = frontier_phi_60_61_ladder_1;
            _2888 = frontier_phi_60_61_ladder;
        }
        float _2893 = isnan(1.0) ? _669 : (isnan(_669) ? 1.0 : min(_669, 1.0));
        _2698 = (_2893 * _2884) + _2210;
        _2700 = (_2893 * _2886) + _2212;
        _2702 = (_2893 * _2888) + _2214;
        _2704 = ((_2878 * _653) * _2893) + _2548;
        _2706 = ((_2880 * _655) * _2893) + _2550;
        _2708 = ((_2882 * _656) * _2893) + _2552;
    }
    else
    {
        _2698 = _2210;
        _2700 = _2212;
        _2702 = _2214;
        _2704 = _2548;
        _2706 = _2550;
        _2708 = _2552;
    }
    float _4615 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _4626 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _4637 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    uint _2728 = _226 + 6u;
    float _2736 = _588 / cbSceneParam._m0[86u].x;
    float _2737 = _589 / cbSceneParam._m0[86u].y;
    vec4 _2751 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2736, _2737, (log2((isnan(cbSceneParam._m0[77u].w) ? _522 : (isnan(_522) ? cbSceneParam._m0[77u].w : min(_522, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2753 = _2751.x;
    float _2754 = _2751.y;
    float _2755 = _2751.z;
    float _2756 = _2751.w;
    float _2828;
    float _2830;
    float _2832;
    float _2834;
    if (_522 > cbSceneParam._m0[78u].w)
    {
        float _2790 = isnan(_522) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _522 : min(cbSceneParam._m0[80u].w, _522));
        float _2791 = _2790 / _522;
        float _2802 = _2791 * _573;
        float _2803 = _574 * _2791;
        float _2804 = (-0.0) - _2803;
        float _2806 = _2791 * _575;
        float _2808 = (cbSceneParam._m0[77u].w * _2804) / _2790;
        float _2809 = _2808 + cbSceneParam._m0[79u].w;
        float _2810 = cbSceneParam._m0[79u].w - _2803;
        float _2816 = sqrt(((_2802 * _2802) + (_2803 * _2803)) + (_2806 * _2806));
        float _2819 = (1.0 - (cbSceneParam._m0[77u].w / _2790)) * _2816;
        float _2824 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2826 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2979;
        if (abs((_2804 - _2808) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2979 = ((((_2809 > 0.0) ? exp2(_2824 * _2809) : (2.0 - exp2(_2826 * _2809))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2819;
        }
        else
        {
            float _2939 = 1.0 / cbSceneParam._m0[80u].x;
            float _2940 = isnan(_2810) ? _2809 : (isnan(_2809) ? _2810 : max(_2809, _2810));
            float _2941 = isnan(_2810) ? _2809 : (isnan(_2809) ? _2810 : min(_2809, _2810));
            float _2950 = isnan(0.0) ? _2940 : (isnan(_2940) ? 0.0 : min(_2940, 0.0));
            float _2951 = isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : min(_2941, 0.0));
            _2979 = ((abs(_2816 / _2804) * cbSceneParam._m0[80u].y) * ((((_2950 - _2951) * 2.0) - ((exp2(_2824 * (isnan(0.0) ? _2940 : (isnan(_2940) ? 0.0 : max(_2940, 0.0)))) - exp2(_2824 * (isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : max(_2941, 0.0))))) * _2939)) - ((exp2(_2826 * _2950) - exp2(_2826 * _2951)) * _2939))) + (_2819 * cbSceneParam._m0[80u].z);
        }
        vec4 _2981 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2736, _2737, 1.0), 0.0);
        float _2990 = exp2((_2979 * (-1.44269502162933349609375)) * (1.0 - _2981.w));
        float _2991 = log2(_2990);
        float _3007 = log2(_2756);
        _2828 = (exp2(_3007 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2991 * cbSceneParam._m0[78u].x)) * _2981.x) / cbSceneParam._m0[78u].x)) + _2753;
        _2830 = (exp2(_3007 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2991 * cbSceneParam._m0[78u].y)) * _2981.y) / cbSceneParam._m0[78u].y)) + _2754;
        _2832 = (exp2(_3007 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2991 * cbSceneParam._m0[78u].z)) * _2981.z) / cbSceneParam._m0[78u].z)) + _2755;
        _2834 = _2990 * _2756;
    }
    else
    {
        _2828 = _2753;
        _2830 = _2754;
        _2832 = _2755;
        _2834 = _2756;
    }
    float _2846 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2847 = _2846 == 3.0;
    float _2848 = log2(_2834);
    float _2855 = exp2(_2848 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0))) * (_2698 + ((isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0))) * _669))) + ((_2704 + ((isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0))) * _1477)) * cbPerFrame._m0[3u].x));
    float _2856 = exp2(_2848 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0))) * (_2700 + ((isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0))) * _669))) + ((_2706 + ((isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0))) * _1477)) * cbPerFrame._m0[3u].x));
    float _2857 = exp2(_2848 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0))) * (_2702 + ((isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0))) * _669))) + ((_2708 + ((isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0))) * _1477)) * cbPerFrame._m0[3u].x));
    float _2866 = (_2846 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2866 * (_2847 ? _2855 : (_2855 + (cbSceneParam._m0[72u].w * _2828)));
    SV_Target.y = _2866 * (_2847 ? _2856 : (_2856 + (cbSceneParam._m0[72u].w * _2830)));
    SV_Target.z = _2866 * (_2847 ? _2857 : (_2857 + (cbSceneParam._m0[72u].w * _2832)));
    SV_Target.w = cbInstanceData._m0[_2728].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2728].w;
}


