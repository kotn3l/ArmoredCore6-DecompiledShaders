#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1100;
float _3508;
float _3509;
float _3510;
float _3511;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _206 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _207 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _208 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _214 = inversesqrt(dot(vec3(_206, _207, _208), vec3(_206, _207, _208)));
    float _221 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _228 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _234 = uint(roundEven(NORMAL.w)) * 13u;
    uint _240 = _234 + 1u;
    uint _244 = _234 + 2u;
    float _253 = sqrt(((cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x) + (cbInstanceData._m0[_234].x * cbInstanceData._m0[_234].x)) + (cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x));
    float _254 = _253 * TEXCOORD.z;
    float _255 = _253 * TEXCOORD.w;
    vec4 _275 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _281 = _275.x * cbMtdParam._m0[11u].x;
    float _282 = _275.y * cbMtdParam._m0[11u].y;
    float _283 = _275.z * cbMtdParam._m0[11u].z;
    vec4 _302 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _254) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _255) + cbTextureTilingScale._m0[5u].w));
    vec4 _340 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _342 = _340.x;
    float _354 = dot(vec4(_342, _340.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _371 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_342 - _354) * cbMtdParam._m0[24u].y) + _354) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3520 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _372 = isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0));
    float _379 = (_372 * ((_302.x * cbMtdParam._m0[12u].x) - _281)) + _281;
    float _380 = (_372 * ((_302.y * cbMtdParam._m0[12u].y) - _282)) + _282;
    float _381 = (_372 * ((_302.z * cbMtdParam._m0[12u].z) - _283)) + _283;
    vec4 _394 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _254) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _255) + cbTextureTilingScale._m0[4u].w));
    vec4 _411 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _413 = _411.x;
    float _414 = _411.y;
    float _415 = _411.z;
    float _424 = ((_394.z - _415) * _372) + _415;
    float _427 = ((((_394.x - _413) * _372) + _413) * 2.0) + (-1.0);
    float _429 = ((((_394.y - _414) * _372) + _414) * 2.0) + (-1.0);
    float _430 = dot(vec2(_427, _429), vec2(_427, _429));
    float _3531 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _435 = sqrt(1.0 - (isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0))));
    vec4 _448 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _462 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _476 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _478 = _476.x;
    float _496 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _254) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _255) + cbTextureTilingScale._m0[9u].w)).x - _478) * _372) + _478;
    float _500 = ((_462.x - _496) * cbMtdParam._m0[19u].z) + _496;
    float _505 = cbMtdParam._m0[22u].x + _448.w;
    float _508 = fma(_435, _221 * NORMAL.x, fma(_429, _228 * TANGENT.x, (_214 * _206) * _427));
    float _511 = fma(_435, _221 * NORMAL.y, fma(_429, _228 * TANGENT.y, (_214 * _207) * _427));
    float _514 = fma(_435, _221 * NORMAL.z, fma(_429, _228 * TANGENT.z, (_214 * _208) * _427));
    float _518 = inversesqrt(dot(vec3(_508, _511, _514), vec3(_508, _511, _514)));
    float _519 = _518 * _508;
    float _520 = _518 * _511;
    float _521 = _518 * _514;
    float _3542 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _522 = isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0));
    float _3553 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _3564 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _3575 = isnan(0.0) ? _380 : (isnan(_380) ? 0.0 : max(_380, 0.0));
    float _3586 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _3597 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _527 = isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0));
    float _541 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _582 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _592 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _582);
    float _593 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _582);
    float _594 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _582);
    float _598 = inversesqrt(dot(vec3(_592, _593, _594), vec3(_592, _593, _594)));
    float _599 = _592 * _598;
    float _600 = _593 * _598;
    float _601 = _594 * _598;
    vec4 _606 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _608 = _606.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _780 = sqrt(((_592 * _592) + (_593 * _593)) + (_594 * _594));
        float _786 = (cbMatDynParam._m0[5u].x * _780) + cbMatDynParam._m0[5u].y;
        float _3608 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
        float _787 = isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0));
        float _791 = (cbMatDynParam._m0[5u].z * _780) + cbMatDynParam._m0[5u].w;
        float _3619 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0))) - _787)) + _787) < ((_608 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _619 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _620 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _638 = fma(_521, cbSceneParam._m0[5u].z, fma(_520, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _519));
    float _641 = fma(_521, cbSceneParam._m0[6u].z, fma(_520, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _519));
    float _644 = fma(_521, cbSceneParam._m0[7u].z, fma(_520, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _519));
    uint _657 = _234 + 9u;
    uint _658 = _657 + uint(cbMatDynParam._m0[0u].w);
    float _664 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0)))) * cbInstanceData._m0[_658].x;
    float _665 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0)))) * cbInstanceData._m0[_658].y;
    float _666 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0)))) * cbInstanceData._m0[_658].z;
    float _3630 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _667 = isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0));
    float _3641 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _668 = isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0));
    float _3652 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _669 = isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0));
    float _670 = 1.0 - _527;
    float _671 = _667 * _670;
    float _672 = _668 * _670;
    float _673 = _669 * _670;
    float _678 = (_667 + (-0.039999999105930328369140625)) * _527;
    float _679 = (_668 + (-0.039999999105930328369140625)) * _527;
    float _680 = (_669 + (-0.039999999105930328369140625)) * _527;
    float _681 = _678 + 0.039999999105930328369140625;
    float _683 = _679 + 0.039999999105930328369140625;
    float _684 = _680 + 0.039999999105930328369140625;
    vec4 _693 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _619, cbSceneParam._m0[86u].y * _620));
    float _697 = ((isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0))) * TEXCOORD_5.w) * _693.x;
    float _698 = dot(vec3(_519, _520, _521), vec3(_599, _600, _601));
    float _701 = _698 * 2.0;
    float _705 = (_701 * _519) - _599;
    float _706 = (_701 * _520) - _600;
    float _707 = (_701 * _521) - _601;
    float _711 = abs(dot(vec3(_599, _600, _601), vec3(_519, _520, _521)));
    float _3663 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _713 = sqrt(_522);
    float _726 = exp2((_713 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_713 * 3.0));
    float _732 = (1.0 - _726) * ((_713 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _733 = _726 * _713;
    float _761 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _765 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _769 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1099;
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    float _1107;
    float _1108;
    float _1109;
    float _1110;
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _824 = fma(_769, cbModelParam._m0[26u].z, fma(_765, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _761));
        float _828 = fma(_769, cbModelParam._m0[27u].z, fma(_765, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _761));
        float _832 = fma(_769, cbModelParam._m0[28u].z, fma(_765, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _761));
        float _857 = _761 + _519;
        float _858 = _765 + _520;
        float _859 = _769 + _521;
        float _869 = fma(_859, cbModelParam._m0[26u].z, fma(_858, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _857)) - _824;
        float _870 = fma(_859, cbModelParam._m0[27u].z, fma(_858, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _857)) - _828;
        float _871 = fma(_859, cbModelParam._m0[28u].z, fma(_858, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _857)) - _832;
        float _875 = inversesqrt(dot(vec3(_869, _870, _871), vec3(_869, _870, _871)));
        float _888 = ((_875 * _869) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_824 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _889 = ((_875 * _870) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_828 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _890 = ((_875 * _871) / cbModelParam._m0[34u].z) + ((((((_832 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _893 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_888, _889, _890), 0.0);
        vec4 _900 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_888, _889, _890), 0.0);
        vec4 _907 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_888, _889, _890), 0.0);
        vec4 _914 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_888, _889, _890), 0.0);
        float _927 = exp2((_893.w + (-0.5)) * 20.0) * 2.0;
        float _928 = _927 * (_893.x + (-0.5));
        float _929 = _927 * (_893.y + (-0.5));
        float _930 = _927 * (_893.z + (-0.5));
        float _937 = exp2((_900.w + (-0.5)) * 20.0) * 2.0;
        float _938 = _937 * (_900.x + (-0.5));
        float _939 = _937 * (_900.y + (-0.5));
        float _940 = _937 * (_900.z + (-0.5));
        float _947 = exp2((_907.w + (-0.5)) * 20.0) * 2.0;
        float _948 = _947 * (_907.x + (-0.5));
        float _949 = _947 * (_907.y + (-0.5));
        float _950 = _947 * (_907.z + (-0.5));
        float _957 = exp2((_914.w + (-0.5)) * 20.0) * 2.0;
        float _958 = _957 * (_914.x + (-0.5));
        float _959 = _957 * (_914.y + (-0.5));
        float _960 = _957 * (_914.z + (-0.5));
        float _961 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
        float _962 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
        float _963 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
        float _964 = _928 * 0.5;
        float _965 = _938 * 0.5;
        float _966 = _948 * 0.5;
        float _967 = dot(vec3(_964, _965, _966), vec3(_964, _965, _966));
        float _972 = (_967 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_967);
        float _981 = (dot(vec3(_519, _520, _521), vec3(_972 * _964, _972 * _965, _972 * _966)) + 1.0) * 0.5;
        float _3689 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
        float _991 = sqrt(((_965 * _965) + (_964 * _964)) + (_966 * _966)) / (_961 + 9.9999997473787516355514526367188e-06);
        float _3700 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _992 = isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0));
        float _993 = _992 * 2.0;
        float _997 = (1.0 - _992) / (_992 + 1.0);
        float _3711 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _998 = isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0));
        float _1007 = ((((1.0 - _998) * (_993 + 2.0)) * exp2(log2(isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0))) * (_993 + 1.0))) + _998) * _961;
        float _1008 = _929 * 0.5;
        float _1009 = _939 * 0.5;
        float _1010 = _949 * 0.5;
        float _1011 = dot(vec3(_1008, _1009, _1010), vec3(_1008, _1009, _1010));
        float _1016 = (_1011 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1011);
        float _1024 = (dot(vec3(_519, _520, _521), vec3(_1016 * _1008, _1016 * _1009, _1016 * _1010)) + 1.0) * 0.5;
        float _3722 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1033 = sqrt(((_1009 * _1009) + (_1008 * _1008)) + (_1010 * _1010)) / (_962 + 9.9999997473787516355514526367188e-06);
        float _3733 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1034 = isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0));
        float _1035 = _1034 * 2.0;
        float _1039 = (1.0 - _1034) / (_1034 + 1.0);
        float _3744 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1040 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
        float _1049 = ((((1.0 - _1040) * (_1035 + 2.0)) * exp2(log2(isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0))) * (_1035 + 1.0))) + _1040) * _962;
        float _1050 = _930 * 0.5;
        float _1051 = _940 * 0.5;
        float _1052 = _950 * 0.5;
        float _1053 = dot(vec3(_1050, _1051, _1052), vec3(_1050, _1051, _1052));
        float _1058 = (_1053 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1053);
        float _1066 = (dot(vec3(_519, _520, _521), vec3(_1058 * _1050, _1058 * _1051, _1058 * _1052)) + 1.0) * 0.5;
        float _3755 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1075 = sqrt(((_1051 * _1051) + (_1050 * _1050)) + (_1052 * _1052)) / (_963 + 9.9999997473787516355514526367188e-06);
        float _3766 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1076 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
        float _1077 = _1076 * 2.0;
        float _1081 = (1.0 - _1076) / (_1076 + 1.0);
        float _3777 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1082 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
        float _1091 = ((((1.0 - _1082) * (_1077 + 2.0)) * exp2(log2(isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0))) * (_1077 + 1.0))) + _1082) * _963;
        _1099 = _930;
        _1101 = _929;
        _1102 = _928;
        _1103 = _940;
        _1104 = _939;
        _1105 = _938;
        _1106 = _950;
        _1107 = _949;
        _1108 = _948;
        _1109 = _963;
        _1110 = _962;
        _1111 = _961;
        _1112 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0)));
        _1113 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0)));
        _1114 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0)));
    }
    else
    {
        _1099 = _1100;
        _1101 = _1100;
        _1102 = _1100;
        _1103 = _1100;
        _1104 = _1100;
        _1105 = _1100;
        _1106 = _1100;
        _1107 = _1100;
        _1108 = _1100;
        _1109 = _1100;
        _1110 = _1100;
        _1111 = _1100;
        _1112 = 0.0;
        _1113 = 0.0;
        _1114 = 0.0;
    }
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1142 = fma(_769, cbModelParam._m0[30u].z, fma(_765, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _761));
        float _1146 = fma(_769, cbModelParam._m0[31u].z, fma(_765, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _761));
        float _1150 = fma(_769, cbModelParam._m0[32u].z, fma(_765, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _761));
        float _1173 = _761 + _519;
        float _1174 = _765 + _520;
        float _1175 = _769 + _521;
        float _1185 = fma(_1175, cbModelParam._m0[30u].z, fma(_1174, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1173)) - _1142;
        float _1186 = fma(_1175, cbModelParam._m0[31u].z, fma(_1174, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1173)) - _1146;
        float _1187 = fma(_1175, cbModelParam._m0[32u].z, fma(_1174, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1173)) - _1150;
        float _1191 = inversesqrt(dot(vec3(_1185, _1186, _1187), vec3(_1185, _1186, _1187)));
        float _1204 = ((_1191 * _1185) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1142 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1205 = ((_1191 * _1186) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1146 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1206 = ((_1191 * _1187) / cbModelParam._m0[35u].z) + ((((((_1150 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1208 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1204, _1205, _1206), 0.0);
        vec4 _1215 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1204, _1205, _1206), 0.0);
        vec4 _1222 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1204, _1205, _1206), 0.0);
        vec4 _1229 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1204, _1205, _1206), 0.0);
        float _1241 = exp2((_1208.w + (-0.5)) * 20.0) * 2.0;
        float _1242 = _1241 * (_1208.x + (-0.5));
        float _1243 = _1241 * (_1208.y + (-0.5));
        float _1244 = _1241 * (_1208.z + (-0.5));
        float _1251 = exp2((_1215.w + (-0.5)) * 20.0) * 2.0;
        float _1252 = _1251 * (_1215.x + (-0.5));
        float _1253 = _1251 * (_1215.y + (-0.5));
        float _1254 = _1251 * (_1215.z + (-0.5));
        float _1261 = exp2((_1222.w + (-0.5)) * 20.0) * 2.0;
        float _1262 = _1261 * (_1222.x + (-0.5));
        float _1263 = _1261 * (_1222.y + (-0.5));
        float _1264 = _1261 * (_1222.z + (-0.5));
        float _1271 = exp2((_1229.w + (-0.5)) * 20.0) * 2.0;
        float _1272 = _1271 * (_1229.x + (-0.5));
        float _1273 = _1271 * (_1229.y + (-0.5));
        float _1274 = _1271 * (_1229.z + (-0.5));
        float _1275 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1276 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1277 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1278 = _1242 * 0.5;
        float _1279 = _1252 * 0.5;
        float _1280 = _1262 * 0.5;
        float _1281 = dot(vec3(_1278, _1279, _1280), vec3(_1278, _1279, _1280));
        float _1286 = (_1281 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1281);
        float _1294 = (dot(vec3(_519, _520, _521), vec3(_1286 * _1278, _1286 * _1279, _1286 * _1280)) + 1.0) * 0.5;
        float _3818 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1303 = sqrt(((_1279 * _1279) + (_1278 * _1278)) + (_1280 * _1280)) / (_1275 + 9.9999997473787516355514526367188e-06);
        float _3829 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1304 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
        float _1305 = _1304 * 2.0;
        float _1309 = (1.0 - _1304) / (_1304 + 1.0);
        float _3840 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1310 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
        float _1319 = ((((1.0 - _1310) * (_1305 + 2.0)) * exp2(log2(isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0))) * (_1305 + 1.0))) + _1310) * _1275;
        float _1320 = _1243 * 0.5;
        float _1321 = _1253 * 0.5;
        float _1322 = _1263 * 0.5;
        float _1323 = dot(vec3(_1320, _1321, _1322), vec3(_1320, _1321, _1322));
        float _1328 = (_1323 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1323);
        float _1336 = (dot(vec3(_519, _520, _521), vec3(_1328 * _1320, _1328 * _1321, _1328 * _1322)) + 1.0) * 0.5;
        float _3851 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1345 = sqrt(((_1321 * _1321) + (_1320 * _1320)) + (_1322 * _1322)) / (_1276 + 9.9999997473787516355514526367188e-06);
        float _3862 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1346 = isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0));
        float _1347 = _1346 * 2.0;
        float _1351 = (1.0 - _1346) / (_1346 + 1.0);
        float _3873 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1352 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
        float _1361 = ((((1.0 - _1352) * (_1347 + 2.0)) * exp2(log2(isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0))) * (_1347 + 1.0))) + _1352) * _1276;
        float _1362 = _1244 * 0.5;
        float _1363 = _1254 * 0.5;
        float _1364 = _1264 * 0.5;
        float _1365 = dot(vec3(_1362, _1363, _1364), vec3(_1362, _1363, _1364));
        float _1370 = (_1365 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1365);
        float _1378 = (dot(vec3(_519, _520, _521), vec3(_1370 * _1362, _1370 * _1363, _1370 * _1364)) + 1.0) * 0.5;
        float _3884 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1387 = sqrt(((_1363 * _1363) + (_1362 * _1362)) + (_1364 * _1364)) / (_1277 + 9.9999997473787516355514526367188e-06);
        float _3895 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1388 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
        float _1389 = _1388 * 2.0;
        float _1393 = (1.0 - _1388) / (_1388 + 1.0);
        float _3906 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1394 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
        float _1403 = ((((1.0 - _1394) * (_1389 + 2.0)) * exp2(log2(isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0))) * (_1389 + 1.0))) + _1394) * _1277;
        _1411 = _1244;
        _1412 = _1243;
        _1413 = _1242;
        _1414 = _1254;
        _1415 = _1253;
        _1416 = _1252;
        _1417 = _1264;
        _1418 = _1263;
        _1419 = _1262;
        _1420 = _1277;
        _1421 = _1276;
        _1422 = _1275;
        _1423 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0)));
        _1424 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0)));
        _1425 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0)));
    }
    else
    {
        _1411 = _1100;
        _1412 = _1100;
        _1413 = _1100;
        _1414 = _1100;
        _1415 = _1100;
        _1416 = _1100;
        _1417 = _1100;
        _1418 = _1100;
        _1419 = _1100;
        _1420 = _1100;
        _1421 = _1100;
        _1422 = _1100;
        _1423 = 0.0;
        _1424 = 0.0;
        _1425 = 0.0;
    }
    float _1435 = (cbModelParam._m0[1u].x * (_1423 - _1112)) + _1112;
    float _1436 = (cbModelParam._m0[1u].x * (_1424 - _1113)) + _1113;
    float _1437 = (cbModelParam._m0[1u].x * (_1425 - _1114)) + _1114;
    float _1458 = fma(_1437, cbSceneParam._m0[89u].z, fma(_1436, cbSceneParam._m0[89u].y, _1435 * cbSceneParam._m0[89u].x));
    float _1461 = fma(_1437, cbSceneParam._m0[90u].z, fma(_1436, cbSceneParam._m0[90u].y, _1435 * cbSceneParam._m0[90u].x));
    float _1464 = fma(_1437, cbSceneParam._m0[91u].z, fma(_1436, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1435));
    float _1479 = _705 * 0.5;
    float _1480 = _706 * 0.5;
    float _1481 = _707 * 0.5;
    float _1482 = dot(vec4(_1479, _1480, _1481, 1.0), vec4(_1413, _1416, _1419, _1422));
    float _1485 = dot(vec4(_1479, _1480, _1481, 1.0), vec4(_1412, _1415, _1418, _1421));
    float _1488 = dot(vec4(_1479, _1480, _1481, 1.0), vec4(_1411, _1414, _1417, _1420));
    float _1522;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1495 = dot(vec4(_1479, _1480, _1481, 1.0), vec4(_1099, _1103, _1106, _1109));
        float _1499 = dot(vec4(_1479, _1480, _1481, 1.0), vec4(_1101, _1104, _1107, _1110));
        float _1503 = dot(vec4(_1479, _1480, _1481, 1.0), vec4(_1102, _1105, _1108, _1111));
        float _1510 = dot(vec4(cbModelParam._m0[39u]), vec4(_1479, _1480, _1481, 1.0));
        _1522 = dot(vec3(isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0)), isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0)), isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1510) ? 0.0 : (isnan(0.0) ? _1510 : max(0.0, _1510))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1522 = 1.0;
    }
    float _1533;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1524 = dot(vec4(cbModelParam._m0[40u]), vec4(_1479, _1480, _1481, 1.0));
        _1533 = dot(vec3(isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0)), isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0)), isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1524) ? 0.0 : (isnan(0.0) ? _1524 : max(0.0, _1524))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1533 = 1.0;
    }
    float _1537 = (_1533 * cbModelParam._m0[1u].x) + (_1522 * (1.0 - cbModelParam._m0[1u].x));
    float _1547 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _522);
    float _1548 = isnan(_1547) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1547 : min(cbModelParam._m0[25u].z, _1547));
    float _1630;
    float _1632;
    float _1634;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1597 = fma(_769, cbModelParam._m0[13u].z, fma(_765, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _761)) + cbModelParam._m0[13u].w;
        float _1601 = fma(_769, cbModelParam._m0[14u].z, fma(_765, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _761)) + cbModelParam._m0[14u].w;
        float _1605 = fma(_769, cbModelParam._m0[15u].z, fma(_765, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _761)) + cbModelParam._m0[15u].w;
        float _1608 = fma(_707, cbModelParam._m0[13u].z, fma(_706, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _705));
        float _1611 = fma(_707, cbModelParam._m0[14u].z, fma(_706, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _705));
        float _1614 = fma(_707, cbModelParam._m0[15u].z, fma(_706, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _705));
        float _1642;
        if (_1608 > 0.0)
        {
            _1642 = abs((1.0 - _1597) / _1608);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1608 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1597 + 1.0) / _1608);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1642 = frontier_phi_17_15_ladder;
        }
        float _1867;
        if (_1611 > 0.0)
        {
            _1867 = abs((1.0 - _1601) / _1611);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1611 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1601 + 1.0) / _1611);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1867 = frontier_phi_26_22_ladder;
        }
        float _2124;
        if (_1614 > 0.0)
        {
            _2124 = abs((1.0 - _1605) / _1614);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1614 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1605 + 1.0) / _1614);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2124 = frontier_phi_38_33_ladder;
        }
        float _2126 = isnan(_1867) ? _1642 : (isnan(_1642) ? _1867 : min(_1642, _1867));
        float _2127 = isnan(_2124) ? _2126 : (isnan(_2126) ? _2124 : min(_2126, _2124));
        float _2131 = (_2127 * _1608) + _1597;
        float _2132 = (_2127 * _1611) + _1601;
        float _2133 = (_2127 * _1614) + _1605;
        float _2134 = _2127 * 9.9999997473787516355514526367188e-05;
        float _2136 = (-1.0) - _2134;
        float _2138 = _2134 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2133 > _2138) || ((_2133 < _2136) || ((_2132 > _2138) || ((_2132 < _2136) || ((_2131 < _2136) || (_2131 > _2138))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2261 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2133, cbModelParam._m0[9u].z, fma(_2132, cbModelParam._m0[9u].y, _2131 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2133, cbModelParam._m0[10u].z, fma(_2132, cbModelParam._m0[10u].y, _2131 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2133, cbModelParam._m0[11u].z, fma(_2132, cbModelParam._m0[11u].y, _2131 * cbModelParam._m0[11u].x))), _1548);
            frontier_phi_16_38_ladder = _2261.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2261.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2261.x * cbModelParam._m0[1u].y;
        }
        _1630 = frontier_phi_16_38_ladder_2;
        _1632 = frontier_phi_16_38_ladder_1;
        _1634 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1618 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_705, _706, _707), _1548);
        _1630 = _1618.x * cbModelParam._m0[1u].y;
        _1632 = _1618.y * cbModelParam._m0[1u].y;
        _1634 = _1618.z * cbModelParam._m0[1u].y;
    }
    float _1638 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _522);
    float _1639 = isnan(_1638) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1638 : min(cbModelParam._m0[25u].w, _1638));
    float _1730;
    float _1732;
    float _1734;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1694 = fma(_769, cbModelParam._m0[21u].z, fma(_765, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _761)) + cbModelParam._m0[21u].w;
        float _1698 = fma(_769, cbModelParam._m0[22u].z, fma(_765, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _761)) + cbModelParam._m0[22u].w;
        float _1702 = fma(_769, cbModelParam._m0[23u].z, fma(_765, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _761)) + cbModelParam._m0[23u].w;
        float _1705 = fma(_707, cbModelParam._m0[21u].z, fma(_706, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _705));
        float _1708 = fma(_707, cbModelParam._m0[22u].z, fma(_706, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _705));
        float _1711 = fma(_707, cbModelParam._m0[23u].z, fma(_706, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _705));
        float _1872;
        if (_1705 > 0.0)
        {
            _1872 = abs((1.0 - _1694) / _1705);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1705 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1694 + 1.0) / _1705);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1872 = frontier_phi_28_24_ladder;
        }
        float _2151;
        if (_1708 > 0.0)
        {
            _2151 = abs((1.0 - _1698) / _1708);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1708 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1698 + 1.0) / _1708);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2151 = frontier_phi_40_35_ladder;
        }
        float _2364;
        if (_1711 > 0.0)
        {
            _2364 = abs((1.0 - _1702) / _1711);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1711 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1702 + 1.0) / _1711);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2364 = frontier_phi_49_46_ladder;
        }
        float _2366 = isnan(_2151) ? _1872 : (isnan(_1872) ? _2151 : min(_1872, _2151));
        float _2367 = isnan(_2364) ? _2366 : (isnan(_2366) ? _2364 : min(_2366, _2364));
        float _2371 = (_2367 * _1705) + _1694;
        float _2372 = (_2367 * _1708) + _1698;
        float _2373 = (_2367 * _1711) + _1702;
        float _2374 = _2367 * 9.9999997473787516355514526367188e-05;
        float _2375 = (-1.0) - _2374;
        float _2377 = _2374 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2373 > _2377) || ((_2373 < _2375) || ((_2372 > _2377) || ((_2372 < _2375) || ((_2371 < _2375) || (_2371 > _2377))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2572 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2373, cbModelParam._m0[17u].z, fma(_2372, cbModelParam._m0[17u].y, _2371 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2373, cbModelParam._m0[18u].z, fma(_2372, cbModelParam._m0[18u].y, _2371 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2373, cbModelParam._m0[19u].z, fma(_2372, cbModelParam._m0[19u].y, _2371 * cbModelParam._m0[19u].x))), _1639);
            frontier_phi_25_49_ladder = _2572.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2572.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2572.x * cbModelParam._m0[1u].z;
        }
        _1730 = frontier_phi_25_49_ladder_2;
        _1732 = frontier_phi_25_49_ladder_1;
        _1734 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1714 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_705, _706, _707), _1639);
        _1730 = _1714.x * cbModelParam._m0[1u].z;
        _1732 = _1714.y * cbModelParam._m0[1u].z;
        _1734 = _1714.z * cbModelParam._m0[1u].z;
    }
    float _1747 = (((_732 * _681) + _733) * _697) * ((cbModelParam._m0[1u].w * (_1730 - _1630)) + _1630);
    float _1749 = (((_732 * _683) + _733) * _697) * ((cbModelParam._m0[1u].w * (_1732 - _1632)) + _1632);
    float _1751 = (((_732 * _684) + _733) * _697) * ((cbModelParam._m0[1u].w * (_1734 - _1634)) + _1634);
    float _1754 = fma(_1751, cbSceneParam._m0[89u].z, fma(_1749, cbSceneParam._m0[89u].y, _1747 * cbSceneParam._m0[89u].x));
    float _1757 = fma(_1751, cbSceneParam._m0[90u].z, fma(_1749, cbSceneParam._m0[90u].y, _1747 * cbSceneParam._m0[90u].x));
    float _1760 = fma(_1751, cbSceneParam._m0[91u].z, fma(_1749, cbSceneParam._m0[91u].y, _1747 * cbSceneParam._m0[91u].x));
    vec4 _1768 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_619, _620));
    float _1770 = _1768.w;
    float _1782 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1770);
    float _1783 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1770);
    float _1784 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1770);
    uvec4 _1788 = floatBitsToUint(cbInstanceData._m0[_234 + 5u]);
    uint _1790 = _1788.x * 14u;
    uint _1791 = _1790 + 13u;
    float _1798 = _697 + (-1.0);
    float _1803 = (cbLight._m0[_1791].x * _1798) + 1.0;
    float _1804 = (cbLight._m0[_1791].y * _1798) + 1.0;
    float _1805 = (cbLight._m0[_1791].z * _1798) + 1.0;
    float _1806 = (cbLight._m0[_1791].w * _1798) + 1.0;
    uint _1807 = _1790 + 5u;
    float _1813 = isnan(1.0) ? _1804 : (isnan(_1804) ? 1.0 : min(_1804, 1.0));
    uint _1817 = _1790 + 4u;
    float _1826 = isnan(1.0) ? _1803 : (isnan(_1803) ? 1.0 : min(_1803, 1.0));
    uint _1830 = _1790 | 1u;
    float _1841 = dot(vec3(cbLight._m0[_1790].xyz), vec3(_519, _520, _521));
    float _1844 = dot(vec3(cbLight._m0[_1830].xyz), vec3(_519, _520, _521));
    float _4042 = isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0));
    float _4053 = isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0));
    float _1849 = (isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0))) * 0.3183098733425140380859375;
    float _1851 = (isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0))) * 0.3183098733425140380859375;
    float _1858 = ((cbLight._m0[_1807].x * _1813) * _1851) + (((cbLight._m0[_1817].x * _1782) * _1826) * _1849);
    float _1859 = ((_1813 * cbLight._m0[_1807].y) * _1851) + (((cbLight._m0[_1817].y * _1783) * _1826) * _1849);
    float _1860 = ((_1813 * cbLight._m0[_1807].z) * _1851) + (((cbLight._m0[_1817].z * _1784) * _1826) * _1849);
    uvec4 _1864 = floatBitsToUint(cbLight._m0[_1790 + 12u]);
    bool _1866 = _1864.x == 0u;
    float _1877;
    float _1879;
    float _1881;
    if (_1866)
    {
        _1877 = _1858;
        _1879 = _1859;
        _1881 = _1860;
    }
    else
    {
        uint _1885 = _1790 + 6u;
        float _1901 = (dot(vec3(cbLight._m0[_1790 + 2u].xyz), vec3(_519, _520, _521)) * 0.5) + 0.5;
        float _1902 = _1901 * _1901;
        float _4064 = isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0));
        float _1903 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
        float _1904 = isnan(1.0) ? _1805 : (isnan(_1805) ? 1.0 : min(_1805, 1.0));
        _1877 = (((cbLight._m0[_1885].x * 0.3183098733425140380859375) * _1903) * _1904) + _1858;
        _1879 = (((cbLight._m0[_1885].y * 0.3183098733425140380859375) * _1903) * _1904) + _1859;
        _1881 = (((cbLight._m0[_1885].z * 0.3183098733425140380859375) * _1903) * _1904) + _1860;
    }
    bool _1884 = _1864.y == 0u;
    float _1922;
    float _1924;
    float _1926;
    if (_1884)
    {
        _1922 = _1877;
        _1924 = _1879;
        _1926 = _1881;
    }
    else
    {
        uint _2095 = _1790 + 7u;
        float _2111 = (dot(vec3(cbLight._m0[_1790 + 3u].xyz), vec3(_519, _520, _521)) * 0.5) + 0.5;
        float _2112 = _2111 * _2111;
        float _4080 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
        float _2113 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
        float _2114 = isnan(1.0) ? _1806 : (isnan(_1806) ? 1.0 : min(_1806, 1.0));
        _1922 = (((cbLight._m0[_2095].x * 0.3183098733425140380859375) * _2113) * _2114) + _1877;
        _1924 = (((cbLight._m0[_2095].y * 0.3183098733425140380859375) * _2113) * _2114) + _1879;
        _1926 = (((cbLight._m0[_2095].z * 0.3183098733425140380859375) * _2113) * _2114) + _1881;
    }
    uint _1929 = _1790 + 8u;
    float _1942 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1790].w)) * _522) * 0.949999988079071044921875);
    float _1943 = _1942 * _1942;
    float _1944 = cbLight._m0[_1790].x + _599;
    float _1945 = cbLight._m0[_1790].y + _600;
    float _1946 = cbLight._m0[_1790].z + _601;
    float _1950 = inversesqrt(dot(vec3(_1944, _1945, _1946), vec3(_1944, _1945, _1946)));
    float _1951 = _1950 * _1944;
    float _1952 = _1950 * _1945;
    float _1953 = _1950 * _1946;
    float _1954 = dot(vec3(_519, _520, _521), vec3(cbLight._m0[_1790].xyz));
    float _4096 = isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0));
    float _1957 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
    float _4107 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
    float _1958 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
    float _1959 = dot(vec3(_519, _520, _521), vec3(_1951, _1952, _1953));
    float _4118 = isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0));
    float _1962 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
    float _1963 = dot(vec3(cbLight._m0[_1790].xyz), vec3(_1951, _1952, _1953));
    float _4129 = isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0));
    float _1967 = _1943 * _1943;
    float _1971 = ((_1962 * _1962) * (_1967 + (-1.0))) + 1.0;
    float _1979 = exp2(log2(1.0 - (isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0)))) * 5.0);
    float _1980 = 0.959999978542327880859375 - _678;
    float _1982 = 0.959999978542327880859375 - _679;
    float _1983 = 0.959999978542327880859375 - _680;
    float _1990 = 1.0 - _1943;
    float _2001 = (0.5 / (((_1958 * ((_1957 * _1990) + _1943)) + 9.9999999392252902907785028219223e-09) + (((_1958 * _1990) + _1943) * _1957))) * _1957;
    float _4140 = isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0));
    float _2003 = (isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0))) * (_1967 / ((_1971 * _1971) * 3.141590118408203125));
    uint _2017 = _1790 + 9u;
    float _2028 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1830].w)) * _522) * 0.949999988079071044921875);
    float _2029 = _2028 * _2028;
    float _2030 = cbLight._m0[_1830].x + _599;
    float _2031 = cbLight._m0[_1830].y + _600;
    float _2032 = cbLight._m0[_1830].z + _601;
    float _2036 = inversesqrt(dot(vec3(_2030, _2031, _2032), vec3(_2030, _2031, _2032)));
    float _2037 = _2036 * _2030;
    float _2038 = _2036 * _2031;
    float _2039 = _2036 * _2032;
    float _2040 = dot(vec3(_519, _520, _521), vec3(cbLight._m0[_1830].xyz));
    float _4151 = isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0));
    float _2043 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
    float _2044 = dot(vec3(_519, _520, _521), vec3(_2037, _2038, _2039));
    float _4162 = isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0));
    float _2047 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
    float _2048 = dot(vec3(cbLight._m0[_1830].xyz), vec3(_2037, _2038, _2039));
    float _4173 = isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0));
    float _2052 = _2029 * _2029;
    float _2056 = ((_2047 * _2047) * (_2052 + (-1.0))) + 1.0;
    float _2063 = exp2(log2(1.0 - (isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0)))) * 5.0);
    float _2070 = 1.0 - _2029;
    float _2080 = (0.5 / (((_1958 * ((_2043 * _2070) + _2029)) + 9.9999999392252902907785028219223e-09) + (((_1958 * _2070) + _2029) * _2043))) * _2043;
    float _4184 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0));
    float _2082 = (isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0))) * (_2052 / ((_2056 * _2056) * 3.141590118408203125));
    float _2092 = (((((_2063 * _1980) + _681) * cbLight._m0[_2017].x) * _2082) * _1813) + ((((cbLight._m0[_1929].x * _1782) * ((_1979 * _1980) + _681)) * _2003) * _1826);
    float _2093 = (((((_2063 * _1982) + _683) * cbLight._m0[_2017].y) * _2082) * _1813) + ((((cbLight._m0[_1929].y * _1783) * ((_1979 * _1982) + _683)) * _2003) * _1826);
    float _2094 = (((((_2063 * _1983) + _684) * cbLight._m0[_2017].z) * _2082) * _1813) + ((((cbLight._m0[_1929].z * _1784) * ((_1979 * _1983) + _684)) * _2003) * _1826);
    float _2156;
    float _2158;
    float _2160;
    if (_1866)
    {
        _2156 = _2092;
        _2158 = _2093;
        _2160 = _2094;
    }
    else
    {
        uint _2162 = _1790 + 2u;
        uint _2166 = _1790 + 10u;
        float _2180 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2162].w)) * _522) * 0.949999988079071044921875);
        float _2181 = _2180 * _2180;
        float _2182 = cbLight._m0[_2162].x + _599;
        float _2183 = cbLight._m0[_2162].y + _600;
        float _2184 = cbLight._m0[_2162].z + _601;
        float _2188 = inversesqrt(dot(vec3(_2182, _2183, _2184), vec3(_2182, _2183, _2184)));
        float _2189 = _2188 * _2182;
        float _2190 = _2188 * _2183;
        float _2191 = _2188 * _2184;
        float _2192 = dot(vec3(_519, _520, _521), vec3(cbLight._m0[_2162].xyz));
        float _4195 = isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0));
        float _2195 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
        float _2196 = dot(vec3(_519, _520, _521), vec3(_2189, _2190, _2191));
        float _4206 = isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0));
        float _2199 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
        float _2200 = dot(vec3(cbLight._m0[_2162].xyz), vec3(_2189, _2190, _2191));
        float _4217 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
        float _2204 = _2181 * _2181;
        float _2208 = ((_2199 * _2199) * (_2204 + (-1.0))) + 1.0;
        float _2215 = exp2(log2(1.0 - (isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0)))) * 5.0);
        float _2222 = 1.0 - _2181;
        float _2232 = (0.5 / (((_1958 * ((_2195 * _2222) + _2181)) + 9.9999999392252902907785028219223e-09) + (((_1958 * _2222) + _2181) * _2195))) * _2195;
        float _4228 = isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0));
        float _2234 = (isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0))) * (_2204 / ((_2208 * _2208) * 3.141590118408203125));
        float _2235 = isnan(1.0) ? _1805 : (isnan(_1805) ? 1.0 : min(_1805, 1.0));
        _2156 = (((((_2215 * _1980) + _681) * cbLight._m0[_2166].x) * _2234) * _2235) + _2092;
        _2158 = (((((_2215 * _1982) + _683) * cbLight._m0[_2166].y) * _2234) * _2235) + _2093;
        _2160 = (((((_2215 * _1983) + _684) * cbLight._m0[_2166].z) * _2234) * _2235) + _2094;
    }
    float _2270;
    float _2272;
    float _2274;
    if (_1884)
    {
        _2270 = _2156;
        _2272 = _2158;
        _2274 = _2160;
    }
    else
    {
        uint _2281 = _1790 + 3u;
        uint _2285 = _1790 + 11u;
        float _2299 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2281].w)) * _522) * 0.949999988079071044921875);
        float _2300 = _2299 * _2299;
        float _2301 = cbLight._m0[_2281].x + _599;
        float _2302 = cbLight._m0[_2281].y + _600;
        float _2303 = cbLight._m0[_2281].z + _601;
        float _2307 = inversesqrt(dot(vec3(_2301, _2302, _2303), vec3(_2301, _2302, _2303)));
        float _2308 = _2307 * _2301;
        float _2309 = _2307 * _2302;
        float _2310 = _2307 * _2303;
        float _2311 = dot(vec3(_519, _520, _521), vec3(cbLight._m0[_2281].xyz));
        float _4244 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
        float _2314 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
        float _2315 = dot(vec3(_519, _520, _521), vec3(_2308, _2309, _2310));
        float _4255 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
        float _2318 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
        float _2319 = dot(vec3(cbLight._m0[_2281].xyz), vec3(_2308, _2309, _2310));
        float _4266 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
        float _2323 = _2300 * _2300;
        float _2327 = ((_2318 * _2318) * (_2323 + (-1.0))) + 1.0;
        float _2334 = exp2(log2(1.0 - (isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0)))) * 5.0);
        float _2341 = 1.0 - _2300;
        float _2351 = (0.5 / (((_1958 * ((_2314 * _2341) + _2300)) + 9.9999999392252902907785028219223e-09) + (((_1958 * _2341) + _2300) * _2314))) * _2314;
        float _4277 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
        float _2353 = (isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0))) * (_2323 / ((_2327 * _2327) * 3.141590118408203125));
        float _2354 = isnan(1.0) ? _1806 : (isnan(_1806) ? 1.0 : min(_1806, 1.0));
        _2270 = (((((_2334 * _1980) + _681) * cbLight._m0[_2285].x) * _2353) * _2354) + _2156;
        _2272 = (((((_2334 * _1982) + _683) * cbLight._m0[_2285].y) * _2353) * _2354) + _2158;
        _2274 = (((((_2334 * _1983) + _684) * cbLight._m0[_2285].z) * _2353) * _2354) + _2160;
    }
    float _2489;
    float _2491;
    float _2493;
    float _2495;
    float _2497;
    float _2499;
    if (_1788.y == 0u)
    {
        float _2429 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2430 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2429;
        float _2431 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2429;
        float _2432 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2429;
        uvec4 _2444 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2445 = _2444.x;
        uint _2456 = uint((float(_2444.y) * floor(float(uint(cbSceneParam._m0[85u].y * _620) / _2445))) + floor(float(uint(cbSceneParam._m0[85u].x * _619) / _2445)));
        float _2466 = (log2(_2432 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2467 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
        uint _2470 = uint(isnan(14.0) ? _2467 : (isnan(_2467) ? 14.0 : min(_2467, 14.0)));
        uvec4 _2475 = texelFetch(g_lightClusterGridBuffer, int(((_2470 << 2u) + (_2456 << 6u)) >> 2u));
        uint _2476 = _2475.x;
        uint _2477 = _2444.z;
        float _2577;
        float _2579;
        float _2581;
        float _2583;
        float _2585;
        float _2587;
        if (((((1u << ((_2477 >> 4u) & 15u)) + 4294967295u) & _2476) == 0u) || ((_2477 & 240u) == 0u))
        {
            _2577 = 0.0;
            _2579 = 0.0;
            _2581 = 0.0;
            _2583 = 0.0;
            _2585 = 0.0;
            _2587 = 0.0;
        }
        else
        {
            float _2578;
            float _2580;
            float _2582;
            float _2584;
            float _2586;
            float _2588;
            float _2730 = 0.0;
            float _2731 = 0.0;
            float _2732 = 0.0;
            float _2733 = 0.0;
            float _2734 = 0.0;
            float _2735 = 0.0;
            uint _2736 = 0u;
            uint _2745;
            bool _2746;
            for (;;)
            {
                _2745 = texelFetch(g_lightClassification, int((((_2470 << 5u) + (_2456 << 9u)) + (_2736 << 2u)) >> 2u)).x;
                _2746 = _2745 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2746)
                {
                    frontier_phi_66_pred = _2730;
                    frontier_phi_66_pred_1 = _2735;
                    frontier_phi_66_pred_2 = _2734;
                    frontier_phi_66_pred_3 = _2733;
                    frontier_phi_66_pred_4 = _2732;
                    frontier_phi_66_pred_5 = _2731;
                }
                else
                {
                    float _2875;
                    float _2876;
                    float _2877;
                    float _2878;
                    float _2879;
                    float _2880;
                    uint _2881;
                    _2875 = _2730;
                    _2876 = _2731;
                    _2877 = _2732;
                    _2878 = _2733;
                    _2879 = _2734;
                    _2880 = _2735;
                    _2881 = _2745;
                    float _2802;
                    float _2803;
                    float _2804;
                    float _2805;
                    float _2806;
                    float _2807;
                    for (;;)
                    {
                        uint _2885 = uint(findLSB(_2881)) + (_2736 << 5u);
                        uint _2882 = (_2881 + 4294967295u) & _2881;
                        uint _2887 = _2885 * 48u;
                        vec4 _2901 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2887)).x, texelFetch(g_PointLightRenderingBuffer, int(_2887 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2887 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2887 + 3u)).x));
                        uint _2907 = (_2885 * 48u) + 4u;
                        vec4 _2920 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2907)).x, texelFetch(g_PointLightRenderingBuffer, int(_2907 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2907 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2907 + 3u)).x));
                        uint _2926 = (_2885 * 48u) + 8u;
                        vec3 _2937 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2926)).x, texelFetch(g_PointLightRenderingBuffer, int(_2926 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2926 + 2u)).x));
                        float _2941 = _2901.x - _2430;
                        float _2942 = _2901.y - _2431;
                        float _2943 = _2901.z - _2432;
                        float _2944 = dot(vec3(_2941, _2942, _2943), vec3(_2941, _2942, _2943));
                        float _2947 = inversesqrt(_2944);
                        float _2948 = _2947 * _2941;
                        float _2949 = _2947 * _2942;
                        float _2950 = _2947 * _2943;
                        float _2951 = dot(vec3(_638, _641, _644), vec3(_2948, _2949, _2950));
                        float _2956 = 1.0 - (_2944 * _2901.w);
                        float _4303 = isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : max(_2956, 0.0));
                        float _2957 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
                        float _2958 = sqrt(_2944) * _2920.w;
                        float _2961 = 1.39999997615814208984375 / (_2958 + 1.39999997615814208984375);
                        float _2962 = _2961 * _2961;
                        float _2965 = ((1.0 - _2962) * _2951) + _2962;
                        float _2968 = _2958 * _2958;
                        float _2972 = ((isnan(0.0) ? _2965 : (isnan(_2965) ? 0.0 : max(_2965, 0.0))) * _2957) / ((_2968 * 0.699999988079071044921875) + 1.0);
                        float _2976 = (-0.0) - _2430;
                        float _2977 = (-0.0) - _2431;
                        float _2978 = (-0.0) - _2432;
                        float _2982 = inversesqrt(dot(vec3(_2976, _2977, _2978), vec3(_2976, _2977, _2978)));
                        float _2983 = _2982 * _2976;
                        float _2984 = _2982 * _2977;
                        float _2985 = _2982 * _2978;
                        float _2993 = exp2(log2(1.0 / ((_2968 * 3.5) + 5.0)) * 0.25);
                        float _2994 = 1.0 - _713;
                        float _3001 = sqrt(1.0 - ((1.0 - (_2994 * _2994)) * (1.0 - (_2993 * _2993))));
                        float _3002 = _3001 * _3001;
                        float _3003 = _3002 * _3002;
                        float _3004 = _2983 + _2948;
                        float _3005 = _2984 + _2949;
                        float _3006 = _2985 + _2950;
                        float _3010 = inversesqrt(dot(vec3(_3004, _3005, _3006), vec3(_3004, _3005, _3006)));
                        float _3014 = dot(vec3(_638, _641, _644), vec3(_2983, _2984, _2985));
                        float _4319 = isnan(0.0) ? _3014 : (isnan(_3014) ? 0.0 : max(_3014, 0.0));
                        float _3017 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
                        float _3018 = dot(vec3(_638, _641, _644), vec3(_3010 * _3004, _3010 * _3005, _3010 * _3006));
                        float _4330 = isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : max(_3018, 0.0));
                        float _3021 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
                        float _3025 = ((_3021 * _3021) * (_3003 + (-1.0))) + 1.0;
                        float _3026 = _2961 * _3002;
                        float _3027 = _3026 * _3026;
                        float _3030 = ((1.0 - _3027) * _2951) + _3027;
                        float _4341 = isnan(0.0) ? _3030 : (isnan(_3030) ? 0.0 : max(_3030, 0.0));
                        float _3031 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
                        float _3032 = 1.0 - _3002;
                        float _3042 = (0.5 / (((_3031 * ((_3017 * _3032) + _3002)) + 9.9999999392252902907785028219223e-09) + (((_3031 * _3032) + _3002) * _3017))) * _3031;
                        float _4352 = isnan(0.0) ? _3042 : (isnan(_3042) ? 0.0 : max(_3042, 0.0));
                        float _3053 = (((_3003 * 3.1415927410125732421875) * (isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0)))) / ((_3025 * _3025) * ((_2968 * 2.1991131305694580078125) + 3.141590118408203125))) * _2957;
                        _2805 = (_2972 * _2920.x) + _2878;
                        _2806 = (_2972 * _2920.y) + _2879;
                        _2807 = (_2972 * _2920.z) + _2880;
                        _2802 = (_3053 * _2937.x) + _2875;
                        _2803 = (_3053 * _2937.y) + _2876;
                        _2804 = (_3053 * _2937.z) + _2877;
                        if (_2882 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2875 = _2802;
                            _2876 = _2803;
                            _2877 = _2804;
                            _2878 = _2805;
                            _2879 = _2806;
                            _2880 = _2807;
                            _2881 = _2882;
                        }
                    }
                    frontier_phi_66_pred = _2802;
                    frontier_phi_66_pred_1 = _2807;
                    frontier_phi_66_pred_2 = _2806;
                    frontier_phi_66_pred_3 = _2805;
                    frontier_phi_66_pred_4 = _2804;
                    frontier_phi_66_pred_5 = _2803;
                }
                _2578 = frontier_phi_66_pred;
                _2588 = frontier_phi_66_pred_1;
                _2586 = frontier_phi_66_pred_2;
                _2584 = frontier_phi_66_pred_3;
                _2582 = frontier_phi_66_pred_4;
                _2580 = frontier_phi_66_pred_5;
                uint _2737 = _2736 + 1u;
                if (_2737 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2730 = _2578;
                    _2731 = _2580;
                    _2732 = _2582;
                    _2733 = _2584;
                    _2734 = _2586;
                    _2735 = _2588;
                    _2736 = _2737;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2577 = _2578;
            _2579 = _2580;
            _2581 = _2582;
            _2583 = _2584;
            _2585 = _2586;
            _2587 = _2588;
        }
        uvec4 _2591 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2592 = _2591.z;
        uint _2594 = (_2592 >> 8u) & 15u;
        float _2698;
        float _2700;
        float _2702;
        float _2704;
        float _2706;
        float _2708;
        if (((4294967295u << _2594) & _2476) == 0u)
        {
            _2698 = _2577;
            _2700 = _2579;
            _2702 = _2581;
            _2704 = _2583;
            _2706 = _2585;
            _2708 = _2587;
        }
        else
        {
            float _2723 = inversesqrt(dot(vec3(_2430, _2431, _2432), vec3(_2430, _2431, _2432)));
            float _2724 = _2723 * _2430;
            float _2725 = _2723 * _2431;
            float _2726 = _2723 * _2432;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2594 < ((_2592 >> 12u) & 15u))
            {
                float _2699;
                float _2701;
                float _2703;
                float _2705;
                float _2707;
                float _2709;
                float _2858 = _2577;
                float _2859 = _2579;
                float _2860 = _2581;
                float _2861 = _2583;
                float _2862 = _2585;
                float _2863 = _2587;
                uint _2864 = _2594;
                uint _2873;
                bool _2874;
                for (;;)
                {
                    _2873 = texelFetch(g_lightClassification, int((((_2470 << 5u) + (_2456 << 9u)) + (_2864 << 2u)) >> 2u)).x;
                    _2874 = _2873 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2874)
                    {
                        frontier_phi_77_pred = _2863;
                        frontier_phi_77_pred_1 = _2862;
                        frontier_phi_77_pred_2 = _2861;
                        frontier_phi_77_pred_3 = _2860;
                        frontier_phi_77_pred_4 = _2859;
                        frontier_phi_77_pred_5 = _2858;
                    }
                    else
                    {
                        float _3067;
                        float _3068;
                        float _3069;
                        float _3070;
                        float _3071;
                        float _3072;
                        float _3361;
                        float _3362;
                        float _3363;
                        float _3364;
                        float _3365;
                        float _3366;
                        float _3080 = _2858;
                        float _3081 = _2859;
                        float _3082 = _2860;
                        float _3083 = _2861;
                        float _3084 = _2862;
                        float _3085 = _2863;
                        uint _3086 = _2873;
                        uint _3087;
                        vec4 _3112;
                        float _3113;
                        vec4 _3128;
                        vec3 _3140;
                        vec4 _3155;
                        vec4 _3171;
                        float _3217;
                        bool _3218;
                        for (;;)
                        {
                            uint _3097 = ((_2864 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3086));
                            _3087 = (_3086 + 4294967295u) & _3086;
                            uint _3099 = _3097 * 40u;
                            _3112 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3099)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 3u)).x));
                            _3113 = _3112.w;
                            uint _3115 = (_3097 * 40u) + 4u;
                            _3128 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3115)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 3u)).x));
                            uint _3130 = (_3097 * 40u) + 8u;
                            _3140 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3130)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 2u)).x));
                            uint _3142 = (_3097 * 40u) + 16u;
                            _3155 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3142)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3142 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3142 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3142 + 3u)).x));
                            uint _3158 = (_3097 * 40u) + 20u;
                            _3171 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3158)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 3u)).x));
                            uint _3173 = (_3097 * 40u) + 24u;
                            vec4 _3186 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3173)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 3u)).x));
                            uint _3192 = (_3097 * 40u) + 28u;
                            vec4 _3205 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3192)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3192 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3192 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3192 + 3u)).x));
                            _3217 = fma(_2432, _3205.z, fma(_2431, _3205.y, _3205.x * _2430)) + _3205.w;
                            _3218 = !((fma(_2432, _3186.z, fma(_2431, _3186.y, _3186.x * _2430)) + _3186.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3218)
                            {
                                float _3245 = _3112.x - _2430;
                                float _3246 = _3112.y - _2431;
                                float _3247 = _3112.z - _2432;
                                float _3248 = dot(vec3(_3245, _3246, _3247), vec3(_3245, _3246, _3247));
                                float _3251 = inversesqrt(_3248);
                                float _3252 = _3251 * _3245;
                                float _3253 = _3251 * _3246;
                                float _3254 = _3251 * _3247;
                                float _3258 = 1.0 - (_3248 / (_3113 * _3113));
                                float _4363 = isnan(0.0) ? _3258 : (isnan(_3258) ? 0.0 : max(_3258, 0.0));
                                float _3259 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
                                float _3263 = sqrt(_3248) * _3128.w;
                                float _3265 = 1.39999997615814208984375 / (_3263 + 1.39999997615814208984375);
                                float _3266 = _3265 * _3265;
                                float _3269 = ((1.0 - _3266) * dot(vec3(_3252, _3253, _3254), vec3(_638, _641, _644))) + _3266;
                                float _3272 = _3263 * _3263;
                                float _3276 = (fma(_2432, _3155.z, fma(_2431, _3155.y, _3155.x * _2430)) + _3155.w) / _3217;
                                float _3277 = (fma(_2432, _3171.z, fma(_2431, _3171.y, _3171.x * _2430)) + _3171.w) / _3217;
                                float _3281 = 1.0 - dot(vec2(_3276, _3277), vec2(_3276, _3277));
                                float _4379 = isnan(0.0) ? _3281 : (isnan(_3281) ? 0.0 : max(_3281, 0.0));
                                float _3282 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
                                float _3283 = _3282 * (((isnan(0.0) ? _3269 : (isnan(_3269) ? 0.0 : max(_3269, 0.0))) * _3259) / ((_3272 * 0.699999988079071044921875) + 1.0));
                                float _3295 = exp2(log2(1.0 / ((_3272 * 3.5) + 5.0)) * 0.25);
                                float _3296 = 1.0 - _713;
                                float _3303 = sqrt(1.0 - ((1.0 - (_3296 * _3296)) * (1.0 - (_3295 * _3295))));
                                float _3304 = _3303 * _3303;
                                float _3305 = _3304 * _3304;
                                float _3306 = _3252 - _2724;
                                float _3307 = _3253 - _2725;
                                float _3308 = _3254 - _2726;
                                float _3312 = inversesqrt(dot(vec3(_3306, _3307, _3308), vec3(_3306, _3307, _3308)));
                                float _3316 = dot(vec3(_638, _641, _644), vec3((-0.0) - _2724, (-0.0) - _2725, (-0.0) - _2726));
                                float _4390 = isnan(0.0) ? _3316 : (isnan(_3316) ? 0.0 : max(_3316, 0.0));
                                float _3319 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
                                float _3320 = dot(vec3(_638, _641, _644), vec3(_3312 * _3306, _3312 * _3307, _3312 * _3308));
                                float _4401 = isnan(0.0) ? _3320 : (isnan(_3320) ? 0.0 : max(_3320, 0.0));
                                float _3323 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
                                float _3327 = ((_3323 * _3323) * (_3305 + (-1.0))) + 1.0;
                                float _3328 = _3265 * _3304;
                                float _3329 = _3328 * _3328;
                                float _3335 = ((1.0 - _3329) * dot(vec3(_638, _641, _644), vec3(_3252, _3253, _3254))) + _3329;
                                float _4412 = isnan(0.0) ? _3335 : (isnan(_3335) ? 0.0 : max(_3335, 0.0));
                                float _3336 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
                                float _3337 = 1.0 - _3304;
                                float _3347 = (0.5 / (((_3336 * ((_3319 * _3337) + _3304)) + 9.9999999392252902907785028219223e-09) + (((_3336 * _3337) + _3304) * _3319))) * _3336;
                                float _4423 = isnan(0.0) ? _3347 : (isnan(_3347) ? 0.0 : max(_3347, 0.0));
                                float _3357 = (_3282 * _3259) * (((_3305 * 3.1415927410125732421875) * (isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0)))) / ((_3327 * _3327) * ((_3272 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3283 * _3128.y;
                                frontier_phi_83_pred_1 = _3283 * _3128.x;
                                frontier_phi_83_pred_2 = _3357 * _3140.z;
                                frontier_phi_83_pred_3 = _3357 * _3140.y;
                                frontier_phi_83_pred_4 = _3357 * _3140.x;
                                frontier_phi_83_pred_5 = _3283 * _3128.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3365 = frontier_phi_83_pred;
                            _3364 = frontier_phi_83_pred_1;
                            _3363 = frontier_phi_83_pred_2;
                            _3362 = frontier_phi_83_pred_3;
                            _3361 = frontier_phi_83_pred_4;
                            _3366 = frontier_phi_83_pred_5;
                            _3070 = _3364 + _3083;
                            _3071 = _3365 + _3084;
                            _3072 = _3366 + _3085;
                            _3067 = _3361 + _3080;
                            _3068 = _3362 + _3081;
                            _3069 = _3363 + _3082;
                            if (_3087 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3080 = _3067;
                                _3081 = _3068;
                                _3082 = _3069;
                                _3083 = _3070;
                                _3084 = _3071;
                                _3085 = _3072;
                                _3086 = _3087;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3072;
                        frontier_phi_77_pred_1 = _3071;
                        frontier_phi_77_pred_2 = _3070;
                        frontier_phi_77_pred_3 = _3069;
                        frontier_phi_77_pred_4 = _3068;
                        frontier_phi_77_pred_5 = _3067;
                    }
                    _2709 = frontier_phi_77_pred;
                    _2707 = frontier_phi_77_pred_1;
                    _2705 = frontier_phi_77_pred_2;
                    _2703 = frontier_phi_77_pred_3;
                    _2701 = frontier_phi_77_pred_4;
                    _2699 = frontier_phi_77_pred_5;
                    uint _2865 = _2864 + 1u;
                    if (_2865 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2858 = _2699;
                        _2859 = _2701;
                        _2860 = _2703;
                        _2861 = _2705;
                        _2862 = _2707;
                        _2863 = _2709;
                        _2864 = _2865;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2703;
                frontier_phi_58_59_ladder_1 = _2709;
                frontier_phi_58_59_ladder_2 = _2707;
                frontier_phi_58_59_ladder_3 = _2705;
                frontier_phi_58_59_ladder_4 = _2701;
                frontier_phi_58_59_ladder_5 = _2699;
            }
            else
            {
                frontier_phi_58_59_ladder = _2581;
                frontier_phi_58_59_ladder_1 = _2587;
                frontier_phi_58_59_ladder_2 = _2585;
                frontier_phi_58_59_ladder_3 = _2583;
                frontier_phi_58_59_ladder_4 = _2579;
                frontier_phi_58_59_ladder_5 = _2577;
            }
            _2698 = frontier_phi_58_59_ladder_5;
            _2700 = frontier_phi_58_59_ladder_4;
            _2702 = frontier_phi_58_59_ladder;
            _2704 = frontier_phi_58_59_ladder_3;
            _2706 = frontier_phi_58_59_ladder_2;
            _2708 = frontier_phi_58_59_ladder_1;
        }
        float _2713 = isnan(1.0) ? _697 : (isnan(_697) ? 1.0 : min(_697, 1.0));
        _2489 = (_2713 * _2704) + _1922;
        _2491 = (_2713 * _2706) + _1924;
        _2493 = (_2713 * _2708) + _1926;
        _2495 = ((_2698 * _681) * _2713) + _2270;
        _2497 = ((_2700 * _683) * _2713) + _2272;
        _2499 = ((_2702 * _684) * _2713) + _2274;
    }
    else
    {
        _2489 = _1922;
        _2491 = _1924;
        _2493 = _1926;
        _2495 = _2270;
        _2497 = _2272;
        _2499 = _2274;
    }
    float _4439 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _4450 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _4461 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _2516 = ((isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0))) * (_2489 + ((isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0))) * _697))) + ((_2495 + ((isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0))) * _1537)) * cbPerFrame._m0[3u].x);
    float _2517 = ((isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0))) * (_2491 + ((isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0))) * _697))) + ((_2497 + ((isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0))) * _1537)) * cbPerFrame._m0[3u].x);
    float _2518 = ((isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0))) * (_2493 + ((isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0))) * _697))) + ((_2499 + ((isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0))) * _1537)) * cbPerFrame._m0[3u].x);
    uint _2519 = _234 + 6u;
    float _2527 = _619 / cbSceneParam._m0[86u].x;
    float _2528 = _620 / cbSceneParam._m0[86u].y;
    vec4 _2542 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2527, _2528, (log2((isnan(cbSceneParam._m0[77u].w) ? _541 : (isnan(_541) ? cbSceneParam._m0[77u].w : min(_541, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2544 = _2542.x;
    float _2545 = _2542.y;
    float _2546 = _2542.z;
    float _2547 = _2542.w;
    float _2640;
    float _2642;
    float _2644;
    float _2646;
    if (_541 > cbSceneParam._m0[78u].w)
    {
        float _2602 = isnan(_541) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _541 : min(cbSceneParam._m0[80u].w, _541));
        float _2603 = _2602 / _541;
        float _2614 = _2603 * _592;
        float _2615 = _593 * _2603;
        float _2616 = (-0.0) - _2615;
        float _2618 = _2603 * _594;
        float _2620 = (cbSceneParam._m0[77u].w * _2616) / _2602;
        float _2621 = _2620 + cbSceneParam._m0[79u].w;
        float _2622 = cbSceneParam._m0[79u].w - _2615;
        float _2628 = sqrt(((_2614 * _2614) + (_2615 * _2615)) + (_2618 * _2618));
        float _2631 = (1.0 - (cbSceneParam._m0[77u].w / _2602)) * _2628;
        float _2636 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2638 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2815;
        if (abs((_2616 - _2620) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2815 = ((((_2621 > 0.0) ? exp2(_2636 * _2621) : (2.0 - exp2(_2638 * _2621))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2631;
        }
        else
        {
            float _2759 = 1.0 / cbSceneParam._m0[80u].x;
            float _2760 = isnan(_2622) ? _2621 : (isnan(_2621) ? _2622 : max(_2621, _2622));
            float _2761 = isnan(_2622) ? _2621 : (isnan(_2621) ? _2622 : min(_2621, _2622));
            float _2770 = isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : min(_2760, 0.0));
            float _2771 = isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : min(_2761, 0.0));
            _2815 = ((abs(_2628 / _2616) * cbSceneParam._m0[80u].y) * ((((_2770 - _2771) * 2.0) - ((exp2(_2636 * (isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0)))) - exp2(_2636 * (isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : max(_2761, 0.0))))) * _2759)) - ((exp2(_2638 * _2770) - exp2(_2638 * _2771)) * _2759))) + (_2631 * cbSceneParam._m0[80u].z);
        }
        vec4 _2817 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2527, _2528, 1.0), 0.0);
        float _2826 = exp2((_2815 * (-1.44269502162933349609375)) * (1.0 - _2817.w));
        float _2827 = log2(_2826);
        float _2843 = log2(_2547);
        _2640 = (exp2(_2843 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2827 * cbSceneParam._m0[78u].x)) * _2817.x) / cbSceneParam._m0[78u].x)) + _2544;
        _2642 = (exp2(_2843 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2827 * cbSceneParam._m0[78u].y)) * _2817.y) / cbSceneParam._m0[78u].y)) + _2545;
        _2644 = (exp2(_2843 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2827 * cbSceneParam._m0[78u].z)) * _2817.z) / cbSceneParam._m0[78u].z)) + _2546;
        _2646 = _2826 * _2547;
    }
    else
    {
        _2640 = _2544;
        _2642 = _2545;
        _2644 = _2546;
        _2646 = _2547;
    }
    bool _2853;
    vec4 _2656;
    vec4 _2678;
    float _2680;
    float _2684;
    float _2685;
    float _2686;
    float _2687;
    bool _2697;
    for (;;)
    {
        _2656 = cbMatDynParam._m0[0u];
        float _2658 = roundEven(_2656.y);
        bool _2659 = _2658 == 3.0;
        float _2660 = log2(_2646);
        float _2667 = exp2(_2660 * cbSceneParam._m0[78u].x) * _2516;
        float _2668 = exp2(_2660 * cbSceneParam._m0[78u].y) * _2517;
        float _2669 = exp2(_2660 * cbSceneParam._m0[78u].z) * _2518;
        float _2676 = _608 + (-0.5);
        _2678 = cbMtdParam._m0[1u];
        _2680 = _2678.y * _2676;
        float _2683 = (_2658 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2684 = _2683 * (_2659 ? _2667 : (_2667 + (cbSceneParam._m0[72u].w * _2640)));
        _2685 = _2683 * (_2659 ? _2668 : (_2668 + (cbSceneParam._m0[72u].w * _2642)));
        _2686 = _2683 * (_2659 ? _2669 : (_2669 + (cbSceneParam._m0[72u].w * _2644)));
        _2687 = _2676 * 0.999000012874603271484375;
        _2697 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2697)
        {
            if ((cbInstanceData._m0[_234 + 7u].x + _2687) < 0.5)
            {
                _2853 = true;
                break;
            }
        }
        uint _2794 = _657 + uint(_2656.w);
        if ((cbInstanceData._m0[_2794].w < 1.0) && ((cbInstanceData._m0[_2794].w + _2687) < 0.5))
        {
            _2853 = true;
            break;
        }
        if ((_2680 + 1.0) < _2678.x)
        {
            _2853 = true;
            break;
        }
        _2853 = false;
        break;
    }
    float _3058;
    if (_2853)
    {
        discard_state = true;
        _3058 = 0.0;
    }
    else
    {
        _3058 = cbInstanceData._m0[_2519].w;
    }
    SV_Target.x = _2684;
    SV_Target.y = _2685;
    SV_Target.z = _2686;
    SV_Target.w = _3058;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2519].w;
    discard_exit();
}


