#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1276;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _214 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _215 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _216 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _222 = inversesqrt(dot(vec3(_214, _215, _216), vec3(_214, _215, _216)));
    float _229 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _236 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _242 = uint(roundEven(NORMAL.w)) * 13u;
    uint _248 = _242 + 1u;
    uint _252 = _242 + 2u;
    float _261 = sqrt(((cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x) + (cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x)) + (cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x));
    float _262 = _261 * TEXCOORD.z;
    float _263 = _261 * TEXCOORD.w;
    vec4 _283 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _289 = _283.x * cbMtdParam._m0[11u].x;
    float _290 = _283.y * cbMtdParam._m0[11u].y;
    float _291 = _283.z * cbMtdParam._m0[11u].z;
    vec4 _310 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _262) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _263) + cbTextureTilingScale._m0[5u].w));
    vec4 _349 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _351 = _349.x;
    float _363 = dot(vec4(_351, _349.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _380 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_351 - _363) * cbMtdParam._m0[24u].y) + _363) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3602 = isnan(0.0) ? _380 : (isnan(_380) ? 0.0 : max(_380, 0.0));
    float _381 = isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0));
    float _388 = (_381 * ((_310.x * cbMtdParam._m0[12u].x) - _289)) + _289;
    float _389 = (_381 * ((_310.y * cbMtdParam._m0[12u].y) - _290)) + _290;
    float _390 = (_381 * ((_310.z * cbMtdParam._m0[12u].z) - _291)) + _291;
    vec4 _407 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _262) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _263) + cbTextureTilingScale._m0[3u].w));
    vec4 _427 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _429 = _427.x;
    float _439 = dot(vec4(_429, _427.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _453 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_429 - _439) * cbMtdParam._m0[24u].y) + _439) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3613 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _454 = isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0));
    float _461 = (_454 * ((_407.x * cbMtdParam._m0[13u].x) - _388)) + _388;
    float _462 = (_454 * ((_407.y * cbMtdParam._m0[13u].y) - _389)) + _389;
    float _463 = (_454 * ((_407.z * cbMtdParam._m0[13u].z) - _390)) + _390;
    vec4 _481 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _262) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _263) + cbTextureTilingScale._m0[4u].w));
    vec4 _498 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _500 = _498.x;
    float _501 = _498.y;
    float _502 = _498.z;
    float _509 = ((_481.x - _500) * _381) + _500;
    float _510 = ((_481.y - _501) * _381) + _501;
    float _511 = ((_481.z - _502) * _381) + _502;
    vec4 _523 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _262) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _263) + cbTextureTilingScale._m0[2u].w));
    float _536 = ((_523.z - _511) * _454) + _511;
    float _539 = ((((_523.x - _509) * _454) + _509) * 2.0) + (-1.0);
    float _541 = ((((_523.y - _510) * _454) + _510) * 2.0) + (-1.0);
    float _542 = dot(vec2(_539, _541), vec2(_539, _541));
    float _3624 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _547 = sqrt(1.0 - (isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0))));
    vec4 _560 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _578 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _262) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _263) + cbTextureTilingScale._m0[11u].w));
    float _580 = _578.x;
    float _581 = 1.0 - _580;
    float _594 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_580 - _581) * cbMtdParam._m0[24u].z) + _581) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3635 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _595 = isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0));
    float _602 = (_595 * (cbMtdParam._m0[17u].x - _461)) + _461;
    float _603 = (_595 * (cbMtdParam._m0[17u].y - _462)) + _462;
    float _604 = (_595 * (cbMtdParam._m0[17u].z - _463)) + _463;
    vec4 _616 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _630 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _632 = _630.x;
    float _650 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _262) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _263) + cbTextureTilingScale._m0[9u].w)).x - _632) * _381) + _632;
    float _667 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _262) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _263) + cbTextureTilingScale._m0[21u].w)).x - _650) * _454) + _650;
    float _671 = ((_616.x - _667) * cbMtdParam._m0[19u].z) + _667;
    float _673 = _671 - (_671 * _595);
    vec4 _686 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _262) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _263) + cbTextureTilingScale._m0[15u].w));
    float _693 = (_686.x * 2.0) + (-1.0);
    float _694 = (_686.y * 2.0) + (-1.0);
    float _695 = dot(vec2(_693, _694), vec2(_693, _694));
    float _3646 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
    float _703 = (_595 * (_686.z - _536)) + _536;
    float _715 = (((_693 - _539) + (cbMtdParam._m0[21u].x * _539)) * _595) + _539;
    float _716 = (((_694 - _541) + (cbMtdParam._m0[21u].x * _541)) * _595) + _541;
    float _717 = (_595 * (sqrt(1.0 - (isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0)))) - _547)) + _547;
    float _722 = cbMtdParam._m0[22u].x + _560.w;
    float _725 = fma(_717, _229 * NORMAL.x, fma(_716, _236 * TANGENT.x, (_222 * _214) * _715));
    float _728 = fma(_717, _229 * NORMAL.y, fma(_716, _236 * TANGENT.y, (_222 * _215) * _715));
    float _731 = fma(_717, _229 * NORMAL.z, fma(_716, _236 * TANGENT.z, (_222 * _216) * _715));
    float _735 = inversesqrt(dot(vec3(_725, _728, _731), vec3(_725, _728, _731)));
    float _736 = _735 * _725;
    float _737 = _735 * _728;
    float _738 = _735 * _731;
    float _3657 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
    float _739 = isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0));
    float _3668 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
    float _3679 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _3690 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _3701 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _3712 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _744 = isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0));
    float _758 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _799 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _809 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _799);
    float _810 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _799);
    float _811 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _799);
    float _815 = inversesqrt(dot(vec3(_809, _810, _811), vec3(_809, _810, _811)));
    float _816 = _809 * _815;
    float _817 = _810 * _815;
    float _818 = _811 * _815;
    float _824 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _825 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _843 = fma(_738, cbSceneParam._m0[5u].z, fma(_737, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _736));
    float _846 = fma(_738, cbSceneParam._m0[6u].z, fma(_737, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _736));
    float _849 = fma(_738, cbSceneParam._m0[7u].z, fma(_737, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _736));
    uint _863 = (_242 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _869 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0)))) * cbInstanceData._m0[_863].x;
    float _870 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0)))) * cbInstanceData._m0[_863].y;
    float _871 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0)))) * cbInstanceData._m0[_863].z;
    float _3723 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
    float _872 = isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0));
    float _3734 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
    float _873 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
    float _3745 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
    float _874 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
    float _875 = 1.0 - _744;
    float _876 = _872 * _875;
    float _877 = _873 * _875;
    float _878 = _874 * _875;
    float _883 = (_872 + (-0.039999999105930328369140625)) * _744;
    float _884 = (_873 + (-0.039999999105930328369140625)) * _744;
    float _885 = (_874 + (-0.039999999105930328369140625)) * _744;
    float _886 = _883 + 0.039999999105930328369140625;
    float _888 = _884 + 0.039999999105930328369140625;
    float _889 = _885 + 0.039999999105930328369140625;
    vec4 _898 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _824, cbSceneParam._m0[86u].y * _825));
    float _902 = ((isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0))) * TEXCOORD_5.w) * _898.x;
    float _903 = dot(vec3(_736, _737, _738), vec3(_816, _817, _818));
    float _906 = _903 * 2.0;
    float _910 = (_906 * _736) - _816;
    float _911 = (_906 * _737) - _817;
    float _912 = (_906 * _738) - _818;
    float _916 = abs(dot(vec3(_816, _817, _818), vec3(_736, _737, _738)));
    float _3756 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
    float _918 = sqrt(_739);
    float _931 = exp2((_918 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_918 * 3.0));
    float _937 = (1.0 - _931) * ((_918 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _938 = _931 * _918;
    float _966 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _970 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _974 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1275;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1000 = fma(_974, cbModelParam._m0[26u].z, fma(_970, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _966));
        float _1004 = fma(_974, cbModelParam._m0[27u].z, fma(_970, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _966));
        float _1008 = fma(_974, cbModelParam._m0[28u].z, fma(_970, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _966));
        float _1033 = _966 + _736;
        float _1034 = _970 + _737;
        float _1035 = _974 + _738;
        float _1045 = fma(_1035, cbModelParam._m0[26u].z, fma(_1034, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1033)) - _1000;
        float _1046 = fma(_1035, cbModelParam._m0[27u].z, fma(_1034, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1033)) - _1004;
        float _1047 = fma(_1035, cbModelParam._m0[28u].z, fma(_1034, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1033)) - _1008;
        float _1051 = inversesqrt(dot(vec3(_1045, _1046, _1047), vec3(_1045, _1046, _1047)));
        float _1064 = ((_1051 * _1045) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1000 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1065 = ((_1051 * _1046) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1004 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1066 = ((_1051 * _1047) / cbModelParam._m0[34u].z) + ((((((_1008 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1069 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1064, _1065, _1066), 0.0);
        vec4 _1076 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1064, _1065, _1066), 0.0);
        vec4 _1083 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1064, _1065, _1066), 0.0);
        vec4 _1090 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1064, _1065, _1066), 0.0);
        float _1103 = exp2((_1069.w + (-0.5)) * 20.0) * 2.0;
        float _1104 = _1103 * (_1069.x + (-0.5));
        float _1105 = _1103 * (_1069.y + (-0.5));
        float _1106 = _1103 * (_1069.z + (-0.5));
        float _1113 = exp2((_1076.w + (-0.5)) * 20.0) * 2.0;
        float _1114 = _1113 * (_1076.x + (-0.5));
        float _1115 = _1113 * (_1076.y + (-0.5));
        float _1116 = _1113 * (_1076.z + (-0.5));
        float _1123 = exp2((_1083.w + (-0.5)) * 20.0) * 2.0;
        float _1124 = _1123 * (_1083.x + (-0.5));
        float _1125 = _1123 * (_1083.y + (-0.5));
        float _1126 = _1123 * (_1083.z + (-0.5));
        float _1133 = exp2((_1090.w + (-0.5)) * 20.0) * 2.0;
        float _1134 = _1133 * (_1090.x + (-0.5));
        float _1135 = _1133 * (_1090.y + (-0.5));
        float _1136 = _1133 * (_1090.z + (-0.5));
        float _1137 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1138 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1139 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1140 = _1104 * 0.5;
        float _1141 = _1114 * 0.5;
        float _1142 = _1124 * 0.5;
        float _1143 = dot(vec3(_1140, _1141, _1142), vec3(_1140, _1141, _1142));
        float _1148 = (_1143 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1143);
        float _1157 = (dot(vec3(_736, _737, _738), vec3(_1148 * _1140, _1148 * _1141, _1148 * _1142)) + 1.0) * 0.5;
        float _3782 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1167 = sqrt(((_1141 * _1141) + (_1140 * _1140)) + (_1142 * _1142)) / (_1137 + 9.9999997473787516355514526367188e-06);
        float _3793 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1168 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
        float _1169 = _1168 * 2.0;
        float _1173 = (1.0 - _1168) / (_1168 + 1.0);
        float _3804 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1174 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
        float _1183 = ((((1.0 - _1174) * (_1169 + 2.0)) * exp2(log2(isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0))) * (_1169 + 1.0))) + _1174) * _1137;
        float _1184 = _1105 * 0.5;
        float _1185 = _1115 * 0.5;
        float _1186 = _1125 * 0.5;
        float _1187 = dot(vec3(_1184, _1185, _1186), vec3(_1184, _1185, _1186));
        float _1192 = (_1187 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1187);
        float _1200 = (dot(vec3(_736, _737, _738), vec3(_1192 * _1184, _1192 * _1185, _1192 * _1186)) + 1.0) * 0.5;
        float _3815 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1209 = sqrt(((_1185 * _1185) + (_1184 * _1184)) + (_1186 * _1186)) / (_1138 + 9.9999997473787516355514526367188e-06);
        float _3826 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1210 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
        float _1211 = _1210 * 2.0;
        float _1215 = (1.0 - _1210) / (_1210 + 1.0);
        float _3837 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1216 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
        float _1225 = ((((1.0 - _1216) * (_1211 + 2.0)) * exp2(log2(isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0))) * (_1211 + 1.0))) + _1216) * _1138;
        float _1226 = _1106 * 0.5;
        float _1227 = _1116 * 0.5;
        float _1228 = _1126 * 0.5;
        float _1229 = dot(vec3(_1226, _1227, _1228), vec3(_1226, _1227, _1228));
        float _1234 = (_1229 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1229);
        float _1242 = (dot(vec3(_736, _737, _738), vec3(_1234 * _1226, _1234 * _1227, _1234 * _1228)) + 1.0) * 0.5;
        float _3848 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1251 = sqrt(((_1227 * _1227) + (_1226 * _1226)) + (_1228 * _1228)) / (_1139 + 9.9999997473787516355514526367188e-06);
        float _3859 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1252 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
        float _1253 = _1252 * 2.0;
        float _1257 = (1.0 - _1252) / (_1252 + 1.0);
        float _3870 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1258 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
        float _1267 = ((((1.0 - _1258) * (_1253 + 2.0)) * exp2(log2(isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0))) * (_1253 + 1.0))) + _1258) * _1139;
        _1275 = _1106;
        _1277 = _1105;
        _1278 = _1104;
        _1279 = _1116;
        _1280 = _1115;
        _1281 = _1114;
        _1282 = _1126;
        _1283 = _1125;
        _1284 = _1124;
        _1285 = _1139;
        _1286 = _1138;
        _1287 = _1137;
        _1288 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0)));
        _1289 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0)));
        _1290 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0)));
    }
    else
    {
        _1275 = _1276;
        _1277 = _1276;
        _1278 = _1276;
        _1279 = _1276;
        _1280 = _1276;
        _1281 = _1276;
        _1282 = _1276;
        _1283 = _1276;
        _1284 = _1276;
        _1285 = _1276;
        _1286 = _1276;
        _1287 = _1276;
        _1288 = 0.0;
        _1289 = 0.0;
        _1290 = 0.0;
    }
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1314 = fma(_974, cbModelParam._m0[30u].z, fma(_970, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _966));
        float _1318 = fma(_974, cbModelParam._m0[31u].z, fma(_970, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _966));
        float _1322 = fma(_974, cbModelParam._m0[32u].z, fma(_970, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _966));
        float _1345 = _966 + _736;
        float _1346 = _970 + _737;
        float _1347 = _974 + _738;
        float _1357 = fma(_1347, cbModelParam._m0[30u].z, fma(_1346, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1345)) - _1314;
        float _1358 = fma(_1347, cbModelParam._m0[31u].z, fma(_1346, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1345)) - _1318;
        float _1359 = fma(_1347, cbModelParam._m0[32u].z, fma(_1346, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1345)) - _1322;
        float _1363 = inversesqrt(dot(vec3(_1357, _1358, _1359), vec3(_1357, _1358, _1359)));
        float _1376 = ((_1363 * _1357) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1314 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1377 = ((_1363 * _1358) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1318 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1378 = ((_1363 * _1359) / cbModelParam._m0[35u].z) + ((((((_1322 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1380 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1376, _1377, _1378), 0.0);
        vec4 _1387 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1376, _1377, _1378), 0.0);
        vec4 _1394 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1376, _1377, _1378), 0.0);
        vec4 _1401 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1376, _1377, _1378), 0.0);
        float _1413 = exp2((_1380.w + (-0.5)) * 20.0) * 2.0;
        float _1414 = _1413 * (_1380.x + (-0.5));
        float _1415 = _1413 * (_1380.y + (-0.5));
        float _1416 = _1413 * (_1380.z + (-0.5));
        float _1423 = exp2((_1387.w + (-0.5)) * 20.0) * 2.0;
        float _1424 = _1423 * (_1387.x + (-0.5));
        float _1425 = _1423 * (_1387.y + (-0.5));
        float _1426 = _1423 * (_1387.z + (-0.5));
        float _1433 = exp2((_1394.w + (-0.5)) * 20.0) * 2.0;
        float _1434 = _1433 * (_1394.x + (-0.5));
        float _1435 = _1433 * (_1394.y + (-0.5));
        float _1436 = _1433 * (_1394.z + (-0.5));
        float _1443 = exp2((_1401.w + (-0.5)) * 20.0) * 2.0;
        float _1444 = _1443 * (_1401.x + (-0.5));
        float _1445 = _1443 * (_1401.y + (-0.5));
        float _1446 = _1443 * (_1401.z + (-0.5));
        float _1447 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1448 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1449 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1450 = _1414 * 0.5;
        float _1451 = _1424 * 0.5;
        float _1452 = _1434 * 0.5;
        float _1453 = dot(vec3(_1450, _1451, _1452), vec3(_1450, _1451, _1452));
        float _1458 = (_1453 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1453);
        float _1466 = (dot(vec3(_736, _737, _738), vec3(_1458 * _1450, _1458 * _1451, _1458 * _1452)) + 1.0) * 0.5;
        float _3911 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1475 = sqrt(((_1451 * _1451) + (_1450 * _1450)) + (_1452 * _1452)) / (_1447 + 9.9999997473787516355514526367188e-06);
        float _3922 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1476 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
        float _1477 = _1476 * 2.0;
        float _1481 = (1.0 - _1476) / (_1476 + 1.0);
        float _3933 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1482 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
        float _1491 = ((((1.0 - _1482) * (_1477 + 2.0)) * exp2(log2(isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0))) * (_1477 + 1.0))) + _1482) * _1447;
        float _1492 = _1415 * 0.5;
        float _1493 = _1425 * 0.5;
        float _1494 = _1435 * 0.5;
        float _1495 = dot(vec3(_1492, _1493, _1494), vec3(_1492, _1493, _1494));
        float _1500 = (_1495 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1495);
        float _1508 = (dot(vec3(_736, _737, _738), vec3(_1500 * _1492, _1500 * _1493, _1500 * _1494)) + 1.0) * 0.5;
        float _3944 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1517 = sqrt(((_1493 * _1493) + (_1492 * _1492)) + (_1494 * _1494)) / (_1448 + 9.9999997473787516355514526367188e-06);
        float _3955 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
        float _1518 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
        float _1519 = _1518 * 2.0;
        float _1523 = (1.0 - _1518) / (_1518 + 1.0);
        float _3966 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
        float _1524 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
        float _1533 = ((((1.0 - _1524) * (_1519 + 2.0)) * exp2(log2(isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0))) * (_1519 + 1.0))) + _1524) * _1448;
        float _1534 = _1416 * 0.5;
        float _1535 = _1426 * 0.5;
        float _1536 = _1436 * 0.5;
        float _1537 = dot(vec3(_1534, _1535, _1536), vec3(_1534, _1535, _1536));
        float _1542 = (_1537 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1537);
        float _1550 = (dot(vec3(_736, _737, _738), vec3(_1542 * _1534, _1542 * _1535, _1542 * _1536)) + 1.0) * 0.5;
        float _3977 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1559 = sqrt(((_1535 * _1535) + (_1534 * _1534)) + (_1536 * _1536)) / (_1449 + 9.9999997473787516355514526367188e-06);
        float _3988 = isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0));
        float _1560 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
        float _1561 = _1560 * 2.0;
        float _1565 = (1.0 - _1560) / (_1560 + 1.0);
        float _3999 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
        float _1566 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
        float _1575 = ((((1.0 - _1566) * (_1561 + 2.0)) * exp2(log2(isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0))) * (_1561 + 1.0))) + _1566) * _1449;
        _1583 = _1416;
        _1584 = _1415;
        _1585 = _1414;
        _1586 = _1426;
        _1587 = _1425;
        _1588 = _1424;
        _1589 = _1436;
        _1590 = _1435;
        _1591 = _1434;
        _1592 = _1449;
        _1593 = _1448;
        _1594 = _1447;
        _1595 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0)));
        _1596 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0)));
        _1597 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0)));
    }
    else
    {
        _1583 = _1276;
        _1584 = _1276;
        _1585 = _1276;
        _1586 = _1276;
        _1587 = _1276;
        _1588 = _1276;
        _1589 = _1276;
        _1590 = _1276;
        _1591 = _1276;
        _1592 = _1276;
        _1593 = _1276;
        _1594 = _1276;
        _1595 = 0.0;
        _1596 = 0.0;
        _1597 = 0.0;
    }
    float _1607 = (cbModelParam._m0[1u].x * (_1595 - _1288)) + _1288;
    float _1608 = (cbModelParam._m0[1u].x * (_1596 - _1289)) + _1289;
    float _1609 = (cbModelParam._m0[1u].x * (_1597 - _1290)) + _1290;
    float _1630 = fma(_1609, cbSceneParam._m0[89u].z, fma(_1608, cbSceneParam._m0[89u].y, _1607 * cbSceneParam._m0[89u].x));
    float _1633 = fma(_1609, cbSceneParam._m0[90u].z, fma(_1608, cbSceneParam._m0[90u].y, _1607 * cbSceneParam._m0[90u].x));
    float _1636 = fma(_1609, cbSceneParam._m0[91u].z, fma(_1608, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1607));
    float _1651 = _910 * 0.5;
    float _1652 = _911 * 0.5;
    float _1653 = _912 * 0.5;
    float _1654 = dot(vec4(_1651, _1652, _1653, 1.0), vec4(_1585, _1588, _1591, _1594));
    float _1657 = dot(vec4(_1651, _1652, _1653, 1.0), vec4(_1584, _1587, _1590, _1593));
    float _1660 = dot(vec4(_1651, _1652, _1653, 1.0), vec4(_1583, _1586, _1589, _1592));
    float _1694;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1667 = dot(vec4(_1651, _1652, _1653, 1.0), vec4(_1275, _1279, _1282, _1285));
        float _1671 = dot(vec4(_1651, _1652, _1653, 1.0), vec4(_1277, _1280, _1283, _1286));
        float _1675 = dot(vec4(_1651, _1652, _1653, 1.0), vec4(_1278, _1281, _1284, _1287));
        float _1682 = dot(vec4(cbModelParam._m0[39u]), vec4(_1651, _1652, _1653, 1.0));
        _1694 = dot(vec3(isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0)), isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0)), isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1682) ? 0.0 : (isnan(0.0) ? _1682 : max(0.0, _1682))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1694 = 1.0;
    }
    float _1705;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1696 = dot(vec4(cbModelParam._m0[40u]), vec4(_1651, _1652, _1653, 1.0));
        _1705 = dot(vec3(isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0)), isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0)), isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1696) ? 0.0 : (isnan(0.0) ? _1696 : max(0.0, _1696))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1705 = 1.0;
    }
    float _1709 = (_1705 * cbModelParam._m0[1u].x) + (_1694 * (1.0 - cbModelParam._m0[1u].x));
    float _1719 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _739);
    float _1720 = isnan(_1719) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1719 : min(cbModelParam._m0[25u].z, _1719));
    float _1801;
    float _1803;
    float _1805;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1768 = fma(_974, cbModelParam._m0[13u].z, fma(_970, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _966)) + cbModelParam._m0[13u].w;
        float _1772 = fma(_974, cbModelParam._m0[14u].z, fma(_970, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _966)) + cbModelParam._m0[14u].w;
        float _1776 = fma(_974, cbModelParam._m0[15u].z, fma(_970, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _966)) + cbModelParam._m0[15u].w;
        float _1779 = fma(_912, cbModelParam._m0[13u].z, fma(_911, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _910));
        float _1782 = fma(_912, cbModelParam._m0[14u].z, fma(_911, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _910));
        float _1785 = fma(_912, cbModelParam._m0[15u].z, fma(_911, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _910));
        float _1813;
        if (_1779 > 0.0)
        {
            _1813 = abs((1.0 - _1768) / _1779);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1779 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1768 + 1.0) / _1779);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1813 = frontier_phi_14_12_ladder;
        }
        float _2016;
        if (_1782 > 0.0)
        {
            _2016 = abs((1.0 - _1772) / _1782);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1782 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1772 + 1.0) / _1782);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2016 = frontier_phi_23_19_ladder;
        }
        float _2270;
        if (_1785 > 0.0)
        {
            _2270 = abs((1.0 - _1776) / _1785);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1785 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1776 + 1.0) / _1785);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2270 = frontier_phi_35_30_ladder;
        }
        float _2272 = isnan(_2016) ? _1813 : (isnan(_1813) ? _2016 : min(_1813, _2016));
        float _2273 = isnan(_2270) ? _2272 : (isnan(_2272) ? _2270 : min(_2272, _2270));
        float _2277 = (_2273 * _1779) + _1768;
        float _2278 = (_2273 * _1782) + _1772;
        float _2279 = (_2273 * _1785) + _1776;
        float _2280 = _2273 * 9.9999997473787516355514526367188e-05;
        float _2282 = (-1.0) - _2280;
        float _2284 = _2280 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2279 > _2284) || ((_2279 < _2282) || ((_2278 > _2284) || ((_2278 < _2282) || ((_2277 < _2282) || (_2277 > _2284))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2407 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2279, cbModelParam._m0[9u].z, fma(_2278, cbModelParam._m0[9u].y, _2277 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2279, cbModelParam._m0[10u].z, fma(_2278, cbModelParam._m0[10u].y, _2277 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2279, cbModelParam._m0[11u].z, fma(_2278, cbModelParam._m0[11u].y, _2277 * cbModelParam._m0[11u].x))), _1720);
            frontier_phi_13_35_ladder = _2407.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2407.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2407.x * cbModelParam._m0[1u].y;
        }
        _1801 = frontier_phi_13_35_ladder_2;
        _1803 = frontier_phi_13_35_ladder_1;
        _1805 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1789 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_910, _911, _912), _1720);
        _1801 = _1789.x * cbModelParam._m0[1u].y;
        _1803 = _1789.y * cbModelParam._m0[1u].y;
        _1805 = _1789.z * cbModelParam._m0[1u].y;
    }
    float _1809 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _739);
    float _1810 = isnan(_1809) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1809 : min(cbModelParam._m0[25u].w, _1809));
    float _1900;
    float _1902;
    float _1904;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1864 = fma(_974, cbModelParam._m0[21u].z, fma(_970, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _966)) + cbModelParam._m0[21u].w;
        float _1868 = fma(_974, cbModelParam._m0[22u].z, fma(_970, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _966)) + cbModelParam._m0[22u].w;
        float _1872 = fma(_974, cbModelParam._m0[23u].z, fma(_970, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _966)) + cbModelParam._m0[23u].w;
        float _1875 = fma(_912, cbModelParam._m0[21u].z, fma(_911, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _910));
        float _1878 = fma(_912, cbModelParam._m0[22u].z, fma(_911, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _910));
        float _1881 = fma(_912, cbModelParam._m0[23u].z, fma(_911, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _910));
        float _2021;
        if (_1875 > 0.0)
        {
            _2021 = abs((1.0 - _1864) / _1875);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1875 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1864 + 1.0) / _1875);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2021 = frontier_phi_25_21_ladder;
        }
        float _2297;
        if (_1878 > 0.0)
        {
            _2297 = abs((1.0 - _1868) / _1878);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1878 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1868 + 1.0) / _1878);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2297 = frontier_phi_37_32_ladder;
        }
        float _2510;
        if (_1881 > 0.0)
        {
            _2510 = abs((1.0 - _1872) / _1881);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1881 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1872 + 1.0) / _1881);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2510 = frontier_phi_46_43_ladder;
        }
        float _2512 = isnan(_2297) ? _2021 : (isnan(_2021) ? _2297 : min(_2021, _2297));
        float _2513 = isnan(_2510) ? _2512 : (isnan(_2512) ? _2510 : min(_2512, _2510));
        float _2517 = (_2513 * _1875) + _1864;
        float _2518 = (_2513 * _1878) + _1868;
        float _2519 = (_2513 * _1881) + _1872;
        float _2520 = _2513 * 9.9999997473787516355514526367188e-05;
        float _2521 = (-1.0) - _2520;
        float _2523 = _2520 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2519 > _2523) || ((_2519 < _2521) || ((_2518 > _2523) || ((_2518 < _2521) || ((_2517 < _2521) || (_2517 > _2523))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2718 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2519, cbModelParam._m0[17u].z, fma(_2518, cbModelParam._m0[17u].y, _2517 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2519, cbModelParam._m0[18u].z, fma(_2518, cbModelParam._m0[18u].y, _2517 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2519, cbModelParam._m0[19u].z, fma(_2518, cbModelParam._m0[19u].y, _2517 * cbModelParam._m0[19u].x))), _1810);
            frontier_phi_22_46_ladder = _2718.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2718.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2718.x * cbModelParam._m0[1u].z;
        }
        _1900 = frontier_phi_22_46_ladder_2;
        _1902 = frontier_phi_22_46_ladder_1;
        _1904 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1884 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_910, _911, _912), _1810);
        _1900 = _1884.x * cbModelParam._m0[1u].z;
        _1902 = _1884.y * cbModelParam._m0[1u].z;
        _1904 = _1884.z * cbModelParam._m0[1u].z;
    }
    float _1917 = (((_937 * _886) + _938) * _902) * ((cbModelParam._m0[1u].w * (_1900 - _1801)) + _1801);
    float _1919 = (((_937 * _888) + _938) * _902) * ((cbModelParam._m0[1u].w * (_1902 - _1803)) + _1803);
    float _1921 = (((_937 * _889) + _938) * _902) * ((cbModelParam._m0[1u].w * (_1904 - _1805)) + _1805);
    float _1924 = fma(_1921, cbSceneParam._m0[89u].z, fma(_1919, cbSceneParam._m0[89u].y, _1917 * cbSceneParam._m0[89u].x));
    float _1927 = fma(_1921, cbSceneParam._m0[90u].z, fma(_1919, cbSceneParam._m0[90u].y, _1917 * cbSceneParam._m0[90u].x));
    float _1930 = fma(_1921, cbSceneParam._m0[91u].z, fma(_1919, cbSceneParam._m0[91u].y, _1917 * cbSceneParam._m0[91u].x));
    uvec4 _1940 = floatBitsToUint(cbInstanceData._m0[_242 + 5u]);
    uint _1942 = _1940.x * 14u;
    uint _1943 = _1942 + 13u;
    float _1950 = _902 + (-1.0);
    float _1955 = (cbLight._m0[_1943].x * _1950) + 1.0;
    float _1956 = (cbLight._m0[_1943].y * _1950) + 1.0;
    float _1957 = (cbLight._m0[_1943].z * _1950) + 1.0;
    float _1958 = (cbLight._m0[_1943].w * _1950) + 1.0;
    uint _1959 = _1942 + 5u;
    float _1965 = isnan(1.0) ? _1956 : (isnan(_1956) ? 1.0 : min(_1956, 1.0));
    uint _1969 = _1942 + 4u;
    float _1975 = isnan(1.0) ? _1955 : (isnan(_1955) ? 1.0 : min(_1955, 1.0));
    uint _1979 = _1942 | 1u;
    float _1990 = dot(vec3(cbLight._m0[_1942].xyz), vec3(_736, _737, _738));
    float _1993 = dot(vec3(cbLight._m0[_1979].xyz), vec3(_736, _737, _738));
    float _4135 = isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0));
    float _4146 = isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0));
    float _1998 = (isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0))) * 0.3183098733425140380859375;
    float _2000 = (isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0))) * 0.3183098733425140380859375;
    float _2007 = ((cbLight._m0[_1959].x * _1965) * _2000) + ((cbLight._m0[_1969].x * _1975) * _1998);
    float _2008 = ((_1965 * cbLight._m0[_1959].y) * _2000) + ((_1975 * cbLight._m0[_1969].y) * _1998);
    float _2009 = ((_1965 * cbLight._m0[_1959].z) * _2000) + ((_1975 * cbLight._m0[_1969].z) * _1998);
    uvec4 _2013 = floatBitsToUint(cbLight._m0[_1942 + 12u]);
    bool _2015 = _2013.x == 0u;
    float _2026;
    float _2028;
    float _2030;
    if (_2015)
    {
        _2026 = _2007;
        _2028 = _2008;
        _2030 = _2009;
    }
    else
    {
        uint _2034 = _1942 + 6u;
        float _2050 = (dot(vec3(cbLight._m0[_1942 + 2u].xyz), vec3(_736, _737, _738)) * 0.5) + 0.5;
        float _2051 = _2050 * _2050;
        float _4157 = isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0));
        float _2052 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
        float _2053 = isnan(1.0) ? _1957 : (isnan(_1957) ? 1.0 : min(_1957, 1.0));
        _2026 = (((cbLight._m0[_2034].x * 0.3183098733425140380859375) * _2052) * _2053) + _2007;
        _2028 = (((cbLight._m0[_2034].y * 0.3183098733425140380859375) * _2052) * _2053) + _2008;
        _2030 = (((cbLight._m0[_2034].z * 0.3183098733425140380859375) * _2052) * _2053) + _2009;
    }
    bool _2033 = _2013.y == 0u;
    float _2071;
    float _2073;
    float _2075;
    if (_2033)
    {
        _2071 = _2026;
        _2073 = _2028;
        _2075 = _2030;
    }
    else
    {
        uint _2241 = _1942 + 7u;
        float _2257 = (dot(vec3(cbLight._m0[_1942 + 3u].xyz), vec3(_736, _737, _738)) * 0.5) + 0.5;
        float _2258 = _2257 * _2257;
        float _4173 = isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0));
        float _2259 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
        float _2260 = isnan(1.0) ? _1958 : (isnan(_1958) ? 1.0 : min(_1958, 1.0));
        _2071 = (((cbLight._m0[_2241].x * 0.3183098733425140380859375) * _2259) * _2260) + _2026;
        _2073 = (((cbLight._m0[_2241].y * 0.3183098733425140380859375) * _2259) * _2260) + _2028;
        _2075 = (((cbLight._m0[_2241].z * 0.3183098733425140380859375) * _2259) * _2260) + _2030;
    }
    uint _2078 = _1942 + 8u;
    float _2091 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1942].w)) * _739) * 0.949999988079071044921875);
    float _2092 = _2091 * _2091;
    float _2093 = cbLight._m0[_1942].x + _816;
    float _2094 = cbLight._m0[_1942].y + _817;
    float _2095 = cbLight._m0[_1942].z + _818;
    float _2099 = inversesqrt(dot(vec3(_2093, _2094, _2095), vec3(_2093, _2094, _2095)));
    float _2100 = _2099 * _2093;
    float _2101 = _2099 * _2094;
    float _2102 = _2099 * _2095;
    float _2103 = dot(vec3(_736, _737, _738), vec3(cbLight._m0[_1942].xyz));
    float _4189 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
    float _2106 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
    float _4200 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
    float _2107 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
    float _2108 = dot(vec3(_736, _737, _738), vec3(_2100, _2101, _2102));
    float _4211 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0));
    float _2111 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
    float _2112 = dot(vec3(cbLight._m0[_1942].xyz), vec3(_2100, _2101, _2102));
    float _4222 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
    float _2116 = _2092 * _2092;
    float _2120 = ((_2111 * _2111) * (_2116 + (-1.0))) + 1.0;
    float _2128 = exp2(log2(1.0 - (isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0)))) * 5.0);
    float _2129 = 0.959999978542327880859375 - _883;
    float _2131 = 0.959999978542327880859375 - _884;
    float _2132 = 0.959999978542327880859375 - _885;
    float _2139 = 1.0 - _2092;
    float _2150 = (0.5 / (((_2107 * ((_2106 * _2139) + _2092)) + 9.9999999392252902907785028219223e-09) + (((_2107 * _2139) + _2092) * _2106))) * _2106;
    float _4233 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
    float _2152 = (isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0))) * (_2116 / ((_2120 * _2120) * 3.141590118408203125));
    uint _2163 = _1942 + 9u;
    float _2174 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1979].w)) * _739) * 0.949999988079071044921875);
    float _2175 = _2174 * _2174;
    float _2176 = cbLight._m0[_1979].x + _816;
    float _2177 = cbLight._m0[_1979].y + _817;
    float _2178 = cbLight._m0[_1979].z + _818;
    float _2182 = inversesqrt(dot(vec3(_2176, _2177, _2178), vec3(_2176, _2177, _2178)));
    float _2183 = _2182 * _2176;
    float _2184 = _2182 * _2177;
    float _2185 = _2182 * _2178;
    float _2186 = dot(vec3(_736, _737, _738), vec3(cbLight._m0[_1979].xyz));
    float _4244 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
    float _2189 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
    float _2190 = dot(vec3(_736, _737, _738), vec3(_2183, _2184, _2185));
    float _4255 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0));
    float _2193 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
    float _2194 = dot(vec3(cbLight._m0[_1979].xyz), vec3(_2183, _2184, _2185));
    float _4266 = isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : max(_2194, 0.0));
    float _2198 = _2175 * _2175;
    float _2202 = ((_2193 * _2193) * (_2198 + (-1.0))) + 1.0;
    float _2209 = exp2(log2(1.0 - (isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0)))) * 5.0);
    float _2216 = 1.0 - _2175;
    float _2226 = (0.5 / (((_2107 * ((_2189 * _2216) + _2175)) + 9.9999999392252902907785028219223e-09) + (((_2107 * _2216) + _2175) * _2189))) * _2189;
    float _4277 = isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0));
    float _2228 = (isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0))) * (_2198 / ((_2202 * _2202) * 3.141590118408203125));
    float _2238 = (((((_2209 * _2129) + _886) * cbLight._m0[_2163].x) * _2228) * _1965) + (((((_2128 * _2129) + _886) * cbLight._m0[_2078].x) * _2152) * _1975);
    float _2239 = (((((_2209 * _2131) + _888) * cbLight._m0[_2163].y) * _2228) * _1965) + (((((_2128 * _2131) + _888) * cbLight._m0[_2078].y) * _2152) * _1975);
    float _2240 = (((((_2209 * _2132) + _889) * cbLight._m0[_2163].z) * _2228) * _1965) + (((((_2128 * _2132) + _889) * cbLight._m0[_2078].z) * _2152) * _1975);
    float _2302;
    float _2304;
    float _2306;
    if (_2015)
    {
        _2302 = _2238;
        _2304 = _2239;
        _2306 = _2240;
    }
    else
    {
        uint _2308 = _1942 + 2u;
        uint _2312 = _1942 + 10u;
        float _2326 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2308].w)) * _739) * 0.949999988079071044921875);
        float _2327 = _2326 * _2326;
        float _2328 = cbLight._m0[_2308].x + _816;
        float _2329 = cbLight._m0[_2308].y + _817;
        float _2330 = cbLight._m0[_2308].z + _818;
        float _2334 = inversesqrt(dot(vec3(_2328, _2329, _2330), vec3(_2328, _2329, _2330)));
        float _2335 = _2334 * _2328;
        float _2336 = _2334 * _2329;
        float _2337 = _2334 * _2330;
        float _2338 = dot(vec3(_736, _737, _738), vec3(cbLight._m0[_2308].xyz));
        float _4288 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
        float _2341 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
        float _2342 = dot(vec3(_736, _737, _738), vec3(_2335, _2336, _2337));
        float _4299 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
        float _2345 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
        float _2346 = dot(vec3(cbLight._m0[_2308].xyz), vec3(_2335, _2336, _2337));
        float _4310 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
        float _2350 = _2327 * _2327;
        float _2354 = ((_2345 * _2345) * (_2350 + (-1.0))) + 1.0;
        float _2361 = exp2(log2(1.0 - (isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0)))) * 5.0);
        float _2368 = 1.0 - _2327;
        float _2378 = (0.5 / (((_2107 * ((_2341 * _2368) + _2327)) + 9.9999999392252902907785028219223e-09) + (((_2107 * _2368) + _2327) * _2341))) * _2341;
        float _4321 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
        float _2380 = (isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0))) * (_2350 / ((_2354 * _2354) * 3.141590118408203125));
        float _2381 = isnan(1.0) ? _1957 : (isnan(_1957) ? 1.0 : min(_1957, 1.0));
        _2302 = (((((_2361 * _2129) + _886) * cbLight._m0[_2312].x) * _2380) * _2381) + _2238;
        _2304 = (((((_2361 * _2131) + _888) * cbLight._m0[_2312].y) * _2380) * _2381) + _2239;
        _2306 = (((((_2361 * _2132) + _889) * cbLight._m0[_2312].z) * _2380) * _2381) + _2240;
    }
    float _2416;
    float _2418;
    float _2420;
    if (_2033)
    {
        _2416 = _2302;
        _2418 = _2304;
        _2420 = _2306;
    }
    else
    {
        uint _2427 = _1942 + 3u;
        uint _2431 = _1942 + 11u;
        float _2445 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2427].w)) * _739) * 0.949999988079071044921875);
        float _2446 = _2445 * _2445;
        float _2447 = cbLight._m0[_2427].x + _816;
        float _2448 = cbLight._m0[_2427].y + _817;
        float _2449 = cbLight._m0[_2427].z + _818;
        float _2453 = inversesqrt(dot(vec3(_2447, _2448, _2449), vec3(_2447, _2448, _2449)));
        float _2454 = _2453 * _2447;
        float _2455 = _2453 * _2448;
        float _2456 = _2453 * _2449;
        float _2457 = dot(vec3(_736, _737, _738), vec3(cbLight._m0[_2427].xyz));
        float _4337 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
        float _2460 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
        float _2461 = dot(vec3(_736, _737, _738), vec3(_2454, _2455, _2456));
        float _4348 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
        float _2464 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
        float _2465 = dot(vec3(cbLight._m0[_2427].xyz), vec3(_2454, _2455, _2456));
        float _4359 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
        float _2469 = _2446 * _2446;
        float _2473 = ((_2464 * _2464) * (_2469 + (-1.0))) + 1.0;
        float _2480 = exp2(log2(1.0 - (isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0)))) * 5.0);
        float _2487 = 1.0 - _2446;
        float _2497 = (0.5 / (((_2107 * ((_2460 * _2487) + _2446)) + 9.9999999392252902907785028219223e-09) + (((_2107 * _2487) + _2446) * _2460))) * _2460;
        float _4370 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
        float _2499 = (isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0))) * (_2469 / ((_2473 * _2473) * 3.141590118408203125));
        float _2500 = isnan(1.0) ? _1958 : (isnan(_1958) ? 1.0 : min(_1958, 1.0));
        _2416 = (((((_2480 * _2129) + _886) * cbLight._m0[_2431].x) * _2499) * _2500) + _2302;
        _2418 = (((((_2480 * _2131) + _888) * cbLight._m0[_2431].y) * _2499) * _2500) + _2304;
        _2420 = (((((_2480 * _2132) + _889) * cbLight._m0[_2431].z) * _2499) * _2500) + _2306;
    }
    float _2635;
    float _2637;
    float _2639;
    float _2641;
    float _2643;
    float _2645;
    if (_1940.y == 0u)
    {
        float _2575 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2576 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2575;
        float _2577 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2575;
        float _2578 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2575;
        uvec4 _2590 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2591 = _2590.x;
        uint _2602 = uint((float(_2590.y) * floor(float(uint(cbSceneParam._m0[85u].y * _825) / _2591))) + floor(float(uint(cbSceneParam._m0[85u].x * _824) / _2591)));
        float _2612 = (log2(_2578 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2613 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0));
        uint _2616 = uint(isnan(14.0) ? _2613 : (isnan(_2613) ? 14.0 : min(_2613, 14.0)));
        uvec4 _2621 = texelFetch(g_lightClusterGridBuffer, int(((_2616 << 2u) + (_2602 << 6u)) >> 2u));
        uint _2622 = _2621.x;
        uint _2623 = _2590.z;
        float _2723;
        float _2725;
        float _2727;
        float _2729;
        float _2731;
        float _2733;
        if (((((1u << ((_2623 >> 4u) & 15u)) + 4294967295u) & _2622) == 0u) || ((_2623 & 240u) == 0u))
        {
            _2723 = 0.0;
            _2725 = 0.0;
            _2727 = 0.0;
            _2729 = 0.0;
            _2731 = 0.0;
            _2733 = 0.0;
        }
        else
        {
            float _2724;
            float _2726;
            float _2728;
            float _2730;
            float _2732;
            float _2734;
            float _2868 = 0.0;
            float _2869 = 0.0;
            float _2870 = 0.0;
            float _2871 = 0.0;
            float _2872 = 0.0;
            float _2873 = 0.0;
            uint _2874 = 0u;
            uint _2883;
            bool _2884;
            for (;;)
            {
                _2883 = texelFetch(g_lightClassification, int((((_2616 << 5u) + (_2602 << 9u)) + (_2874 << 2u)) >> 2u)).x;
                _2884 = _2883 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2884)
                {
                    frontier_phi_61_pred = _2868;
                    frontier_phi_61_pred_1 = _2873;
                    frontier_phi_61_pred_2 = _2872;
                    frontier_phi_61_pred_3 = _2871;
                    frontier_phi_61_pred_4 = _2870;
                    frontier_phi_61_pred_5 = _2869;
                }
                else
                {
                    float _2992;
                    float _2993;
                    float _2994;
                    float _2995;
                    float _2996;
                    float _2997;
                    uint _2998;
                    _2992 = _2868;
                    _2993 = _2869;
                    _2994 = _2870;
                    _2995 = _2871;
                    _2996 = _2872;
                    _2997 = _2873;
                    _2998 = _2883;
                    float _2924;
                    float _2925;
                    float _2926;
                    float _2927;
                    float _2928;
                    float _2929;
                    for (;;)
                    {
                        uint _3002 = uint(findLSB(_2998)) + (_2874 << 5u);
                        uint _2999 = (_2998 + 4294967295u) & _2998;
                        uint _3004 = _3002 * 48u;
                        vec4 _3018 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3004)).x, texelFetch(g_PointLightRenderingBuffer, int(_3004 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3004 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3004 + 3u)).x));
                        uint _3024 = (_3002 * 48u) + 4u;
                        vec4 _3037 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3024)).x, texelFetch(g_PointLightRenderingBuffer, int(_3024 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3024 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3024 + 3u)).x));
                        uint _3043 = (_3002 * 48u) + 8u;
                        vec3 _3054 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3043)).x, texelFetch(g_PointLightRenderingBuffer, int(_3043 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3043 + 2u)).x));
                        float _3058 = _3018.x - _2576;
                        float _3059 = _3018.y - _2577;
                        float _3060 = _3018.z - _2578;
                        float _3061 = dot(vec3(_3058, _3059, _3060), vec3(_3058, _3059, _3060));
                        float _3064 = inversesqrt(_3061);
                        float _3065 = _3064 * _3058;
                        float _3066 = _3064 * _3059;
                        float _3067 = _3064 * _3060;
                        float _3068 = dot(vec3(_843, _846, _849), vec3(_3065, _3066, _3067));
                        float _3073 = 1.0 - (_3061 * _3018.w);
                        float _4396 = isnan(0.0) ? _3073 : (isnan(_3073) ? 0.0 : max(_3073, 0.0));
                        float _3074 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
                        float _3075 = sqrt(_3061) * _3037.w;
                        float _3078 = 1.39999997615814208984375 / (_3075 + 1.39999997615814208984375);
                        float _3079 = _3078 * _3078;
                        float _3082 = ((1.0 - _3079) * _3068) + _3079;
                        float _3085 = _3075 * _3075;
                        float _3089 = ((isnan(0.0) ? _3082 : (isnan(_3082) ? 0.0 : max(_3082, 0.0))) * _3074) / ((_3085 * 0.699999988079071044921875) + 1.0);
                        float _3093 = (-0.0) - _2576;
                        float _3094 = (-0.0) - _2577;
                        float _3095 = (-0.0) - _2578;
                        float _3099 = inversesqrt(dot(vec3(_3093, _3094, _3095), vec3(_3093, _3094, _3095)));
                        float _3100 = _3099 * _3093;
                        float _3101 = _3099 * _3094;
                        float _3102 = _3099 * _3095;
                        float _3110 = exp2(log2(1.0 / ((_3085 * 3.5) + 5.0)) * 0.25);
                        float _3111 = 1.0 - _918;
                        float _3118 = sqrt(1.0 - ((1.0 - (_3111 * _3111)) * (1.0 - (_3110 * _3110))));
                        float _3119 = _3118 * _3118;
                        float _3120 = _3119 * _3119;
                        float _3121 = _3100 + _3065;
                        float _3122 = _3101 + _3066;
                        float _3123 = _3102 + _3067;
                        float _3127 = inversesqrt(dot(vec3(_3121, _3122, _3123), vec3(_3121, _3122, _3123)));
                        float _3131 = dot(vec3(_843, _846, _849), vec3(_3100, _3101, _3102));
                        float _4412 = isnan(0.0) ? _3131 : (isnan(_3131) ? 0.0 : max(_3131, 0.0));
                        float _3134 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
                        float _3135 = dot(vec3(_843, _846, _849), vec3(_3127 * _3121, _3127 * _3122, _3127 * _3123));
                        float _4423 = isnan(0.0) ? _3135 : (isnan(_3135) ? 0.0 : max(_3135, 0.0));
                        float _3138 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
                        float _3142 = ((_3138 * _3138) * (_3120 + (-1.0))) + 1.0;
                        float _3143 = _3078 * _3119;
                        float _3144 = _3143 * _3143;
                        float _3147 = ((1.0 - _3144) * _3068) + _3144;
                        float _4434 = isnan(0.0) ? _3147 : (isnan(_3147) ? 0.0 : max(_3147, 0.0));
                        float _3148 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
                        float _3149 = 1.0 - _3119;
                        float _3159 = (0.5 / (((_3148 * ((_3134 * _3149) + _3119)) + 9.9999999392252902907785028219223e-09) + (((_3148 * _3149) + _3119) * _3134))) * _3148;
                        float _4445 = isnan(0.0) ? _3159 : (isnan(_3159) ? 0.0 : max(_3159, 0.0));
                        float _3170 = (((_3120 * 3.1415927410125732421875) * (isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0)))) / ((_3142 * _3142) * ((_3085 * 2.1991131305694580078125) + 3.141590118408203125))) * _3074;
                        _2927 = (_3089 * _3037.x) + _2995;
                        _2928 = (_3089 * _3037.y) + _2996;
                        _2929 = (_3089 * _3037.z) + _2997;
                        _2924 = (_3170 * _3054.x) + _2992;
                        _2925 = (_3170 * _3054.y) + _2993;
                        _2926 = (_3170 * _3054.z) + _2994;
                        if (_2999 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2992 = _2924;
                            _2993 = _2925;
                            _2994 = _2926;
                            _2995 = _2927;
                            _2996 = _2928;
                            _2997 = _2929;
                            _2998 = _2999;
                        }
                    }
                    frontier_phi_61_pred = _2924;
                    frontier_phi_61_pred_1 = _2929;
                    frontier_phi_61_pred_2 = _2928;
                    frontier_phi_61_pred_3 = _2927;
                    frontier_phi_61_pred_4 = _2926;
                    frontier_phi_61_pred_5 = _2925;
                }
                _2724 = frontier_phi_61_pred;
                _2734 = frontier_phi_61_pred_1;
                _2732 = frontier_phi_61_pred_2;
                _2730 = frontier_phi_61_pred_3;
                _2728 = frontier_phi_61_pred_4;
                _2726 = frontier_phi_61_pred_5;
                uint _2875 = _2874 + 1u;
                if (_2875 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2868 = _2724;
                    _2869 = _2726;
                    _2870 = _2728;
                    _2871 = _2730;
                    _2872 = _2732;
                    _2873 = _2734;
                    _2874 = _2875;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2723 = _2724;
            _2725 = _2726;
            _2727 = _2728;
            _2729 = _2730;
            _2731 = _2732;
            _2733 = _2734;
        }
        uvec4 _2737 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2738 = _2737.z;
        uint _2740 = (_2738 >> 8u) & 15u;
        float _2836;
        float _2838;
        float _2840;
        float _2842;
        float _2844;
        float _2846;
        if (((4294967295u << _2740) & _2622) == 0u)
        {
            _2836 = _2723;
            _2838 = _2725;
            _2840 = _2727;
            _2842 = _2729;
            _2844 = _2731;
            _2846 = _2733;
        }
        else
        {
            float _2861 = inversesqrt(dot(vec3(_2576, _2577, _2578), vec3(_2576, _2577, _2578)));
            float _2862 = _2861 * _2576;
            float _2863 = _2861 * _2577;
            float _2864 = _2861 * _2578;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2740 < ((_2738 >> 12u) & 15u))
            {
                float _2837;
                float _2839;
                float _2841;
                float _2843;
                float _2845;
                float _2847;
                float _2975 = _2723;
                float _2976 = _2725;
                float _2977 = _2727;
                float _2978 = _2729;
                float _2979 = _2731;
                float _2980 = _2733;
                uint _2981 = _2740;
                uint _2990;
                bool _2991;
                for (;;)
                {
                    _2990 = texelFetch(g_lightClassification, int((((_2616 << 5u) + (_2602 << 9u)) + (_2981 << 2u)) >> 2u)).x;
                    _2991 = _2990 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2991)
                    {
                        frontier_phi_67_pred = _2978;
                        frontier_phi_67_pred_1 = _2979;
                        frontier_phi_67_pred_2 = _2980;
                        frontier_phi_67_pred_3 = _2977;
                        frontier_phi_67_pred_4 = _2976;
                        frontier_phi_67_pred_5 = _2975;
                    }
                    else
                    {
                        float _3175;
                        float _3176;
                        float _3177;
                        float _3178;
                        float _3179;
                        float _3180;
                        float _3468;
                        float _3469;
                        float _3470;
                        float _3471;
                        float _3472;
                        float _3473;
                        float _3188 = _2975;
                        float _3189 = _2976;
                        float _3190 = _2977;
                        float _3191 = _2978;
                        float _3192 = _2979;
                        float _3193 = _2980;
                        uint _3194 = _2990;
                        uint _3195;
                        vec4 _3220;
                        float _3221;
                        vec4 _3236;
                        vec3 _3248;
                        vec4 _3263;
                        vec4 _3278;
                        float _3324;
                        bool _3325;
                        for (;;)
                        {
                            uint _3205 = ((_2981 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3194));
                            _3195 = (_3194 + 4294967295u) & _3194;
                            uint _3207 = _3205 * 40u;
                            _3220 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3207)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3207 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3207 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3207 + 3u)).x));
                            _3221 = _3220.w;
                            uint _3223 = (_3205 * 40u) + 4u;
                            _3236 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3223)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3223 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3223 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3223 + 3u)).x));
                            uint _3238 = (_3205 * 40u) + 8u;
                            _3248 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3238)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 2u)).x));
                            uint _3250 = (_3205 * 40u) + 16u;
                            _3263 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3250)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 3u)).x));
                            uint _3265 = (_3205 * 40u) + 20u;
                            _3278 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3265)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 3u)).x));
                            uint _3280 = (_3205 * 40u) + 24u;
                            vec4 _3293 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3280)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 3u)).x));
                            uint _3299 = (_3205 * 40u) + 28u;
                            vec4 _3312 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3299)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 3u)).x));
                            _3324 = fma(_2578, _3312.z, fma(_2577, _3312.y, _3312.x * _2576)) + _3312.w;
                            _3325 = !((fma(_2578, _3293.z, fma(_2577, _3293.y, _3293.x * _2576)) + _3293.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3325)
                            {
                                float _3352 = _3220.x - _2576;
                                float _3353 = _3220.y - _2577;
                                float _3354 = _3220.z - _2578;
                                float _3355 = dot(vec3(_3352, _3353, _3354), vec3(_3352, _3353, _3354));
                                float _3358 = inversesqrt(_3355);
                                float _3359 = _3358 * _3352;
                                float _3360 = _3358 * _3353;
                                float _3361 = _3358 * _3354;
                                float _3365 = 1.0 - (_3355 / (_3221 * _3221));
                                float _4456 = isnan(0.0) ? _3365 : (isnan(_3365) ? 0.0 : max(_3365, 0.0));
                                float _3366 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
                                float _3370 = sqrt(_3355) * _3236.w;
                                float _3372 = 1.39999997615814208984375 / (_3370 + 1.39999997615814208984375);
                                float _3373 = _3372 * _3372;
                                float _3376 = ((1.0 - _3373) * dot(vec3(_3359, _3360, _3361), vec3(_843, _846, _849))) + _3373;
                                float _3379 = _3370 * _3370;
                                float _3383 = (fma(_2578, _3263.z, fma(_2577, _3263.y, _3263.x * _2576)) + _3263.w) / _3324;
                                float _3384 = (fma(_2578, _3278.z, fma(_2577, _3278.y, _3278.x * _2576)) + _3278.w) / _3324;
                                float _3388 = 1.0 - dot(vec2(_3383, _3384), vec2(_3383, _3384));
                                float _4472 = isnan(0.0) ? _3388 : (isnan(_3388) ? 0.0 : max(_3388, 0.0));
                                float _3389 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
                                float _3390 = _3389 * (((isnan(0.0) ? _3376 : (isnan(_3376) ? 0.0 : max(_3376, 0.0))) * _3366) / ((_3379 * 0.699999988079071044921875) + 1.0));
                                float _3402 = exp2(log2(1.0 / ((_3379 * 3.5) + 5.0)) * 0.25);
                                float _3403 = 1.0 - _918;
                                float _3410 = sqrt(1.0 - ((1.0 - (_3403 * _3403)) * (1.0 - (_3402 * _3402))));
                                float _3411 = _3410 * _3410;
                                float _3412 = _3411 * _3411;
                                float _3413 = _3359 - _2862;
                                float _3414 = _3360 - _2863;
                                float _3415 = _3361 - _2864;
                                float _3419 = inversesqrt(dot(vec3(_3413, _3414, _3415), vec3(_3413, _3414, _3415)));
                                float _3423 = dot(vec3(_843, _846, _849), vec3((-0.0) - _2862, (-0.0) - _2863, (-0.0) - _2864));
                                float _4483 = isnan(0.0) ? _3423 : (isnan(_3423) ? 0.0 : max(_3423, 0.0));
                                float _3426 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
                                float _3427 = dot(vec3(_843, _846, _849), vec3(_3419 * _3413, _3419 * _3414, _3419 * _3415));
                                float _4494 = isnan(0.0) ? _3427 : (isnan(_3427) ? 0.0 : max(_3427, 0.0));
                                float _3430 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
                                float _3434 = ((_3430 * _3430) * (_3412 + (-1.0))) + 1.0;
                                float _3435 = _3372 * _3411;
                                float _3436 = _3435 * _3435;
                                float _3442 = ((1.0 - _3436) * dot(vec3(_843, _846, _849), vec3(_3359, _3360, _3361))) + _3436;
                                float _4505 = isnan(0.0) ? _3442 : (isnan(_3442) ? 0.0 : max(_3442, 0.0));
                                float _3443 = isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0));
                                float _3444 = 1.0 - _3411;
                                float _3454 = (0.5 / (((_3443 * ((_3426 * _3444) + _3411)) + 9.9999999392252902907785028219223e-09) + (((_3443 * _3444) + _3411) * _3426))) * _3443;
                                float _4516 = isnan(0.0) ? _3454 : (isnan(_3454) ? 0.0 : max(_3454, 0.0));
                                float _3464 = (_3389 * _3366) * (((_3412 * 3.1415927410125732421875) * (isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0)))) / ((_3434 * _3434) * ((_3379 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3464 * _3248.x;
                                frontier_phi_73_pred_1 = _3464 * _3248.y;
                                frontier_phi_73_pred_2 = _3390 * _3236.z;
                                frontier_phi_73_pred_3 = _3390 * _3236.y;
                                frontier_phi_73_pred_4 = _3390 * _3236.x;
                                frontier_phi_73_pred_5 = _3464 * _3248.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3468 = frontier_phi_73_pred;
                            _3469 = frontier_phi_73_pred_1;
                            _3473 = frontier_phi_73_pred_2;
                            _3472 = frontier_phi_73_pred_3;
                            _3471 = frontier_phi_73_pred_4;
                            _3470 = frontier_phi_73_pred_5;
                            _3178 = _3471 + _3191;
                            _3179 = _3472 + _3192;
                            _3180 = _3473 + _3193;
                            _3175 = _3468 + _3188;
                            _3176 = _3469 + _3189;
                            _3177 = _3470 + _3190;
                            if (_3195 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3188 = _3175;
                                _3189 = _3176;
                                _3190 = _3177;
                                _3191 = _3178;
                                _3192 = _3179;
                                _3193 = _3180;
                                _3194 = _3195;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3178;
                        frontier_phi_67_pred_1 = _3179;
                        frontier_phi_67_pred_2 = _3180;
                        frontier_phi_67_pred_3 = _3177;
                        frontier_phi_67_pred_4 = _3176;
                        frontier_phi_67_pred_5 = _3175;
                    }
                    _2843 = frontier_phi_67_pred;
                    _2845 = frontier_phi_67_pred_1;
                    _2847 = frontier_phi_67_pred_2;
                    _2841 = frontier_phi_67_pred_3;
                    _2839 = frontier_phi_67_pred_4;
                    _2837 = frontier_phi_67_pred_5;
                    uint _2982 = _2981 + 1u;
                    if (_2982 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2975 = _2837;
                        _2976 = _2839;
                        _2977 = _2841;
                        _2978 = _2843;
                        _2979 = _2845;
                        _2980 = _2847;
                        _2981 = _2982;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2845;
                frontier_phi_55_56_ladder_1 = _2847;
                frontier_phi_55_56_ladder_2 = _2843;
                frontier_phi_55_56_ladder_3 = _2841;
                frontier_phi_55_56_ladder_4 = _2839;
                frontier_phi_55_56_ladder_5 = _2837;
            }
            else
            {
                frontier_phi_55_56_ladder = _2731;
                frontier_phi_55_56_ladder_1 = _2733;
                frontier_phi_55_56_ladder_2 = _2729;
                frontier_phi_55_56_ladder_3 = _2727;
                frontier_phi_55_56_ladder_4 = _2725;
                frontier_phi_55_56_ladder_5 = _2723;
            }
            _2836 = frontier_phi_55_56_ladder_5;
            _2838 = frontier_phi_55_56_ladder_4;
            _2840 = frontier_phi_55_56_ladder_3;
            _2842 = frontier_phi_55_56_ladder_2;
            _2844 = frontier_phi_55_56_ladder;
            _2846 = frontier_phi_55_56_ladder_1;
        }
        float _2851 = isnan(1.0) ? _902 : (isnan(_902) ? 1.0 : min(_902, 1.0));
        _2635 = (_2851 * _2842) + _2071;
        _2637 = (_2851 * _2844) + _2073;
        _2639 = (_2851 * _2846) + _2075;
        _2641 = ((_2836 * _886) * _2851) + _2416;
        _2643 = ((_2838 * _888) * _2851) + _2418;
        _2645 = ((_2840 * _889) * _2851) + _2420;
    }
    else
    {
        _2635 = _2071;
        _2637 = _2073;
        _2639 = _2075;
        _2641 = _2416;
        _2643 = _2418;
        _2645 = _2420;
    }
    float _4532 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
    float _4543 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
    float _4554 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
    uint _2665 = _242 + 6u;
    float _2673 = _824 / cbSceneParam._m0[86u].x;
    float _2674 = _825 / cbSceneParam._m0[86u].y;
    vec4 _2688 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2673, _2674, (log2((isnan(cbSceneParam._m0[77u].w) ? _758 : (isnan(_758) ? cbSceneParam._m0[77u].w : min(_758, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2690 = _2688.x;
    float _2691 = _2688.y;
    float _2692 = _2688.z;
    float _2693 = _2688.w;
    float _2786;
    float _2788;
    float _2790;
    float _2792;
    if (_758 > cbSceneParam._m0[78u].w)
    {
        float _2748 = isnan(_758) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _758 : min(cbSceneParam._m0[80u].w, _758));
        float _2749 = _2748 / _758;
        float _2760 = _2749 * _809;
        float _2761 = _810 * _2749;
        float _2762 = (-0.0) - _2761;
        float _2764 = _2749 * _811;
        float _2766 = (cbSceneParam._m0[77u].w * _2762) / _2748;
        float _2767 = _2766 + cbSceneParam._m0[79u].w;
        float _2768 = cbSceneParam._m0[79u].w - _2761;
        float _2774 = sqrt(((_2760 * _2760) + (_2761 * _2761)) + (_2764 * _2764));
        float _2777 = (1.0 - (cbSceneParam._m0[77u].w / _2748)) * _2774;
        float _2782 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2784 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2937;
        if (abs((_2762 - _2766) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2937 = ((((_2767 > 0.0) ? exp2(_2782 * _2767) : (2.0 - exp2(_2784 * _2767))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2777;
        }
        else
        {
            float _2897 = 1.0 / cbSceneParam._m0[80u].x;
            float _2898 = isnan(_2768) ? _2767 : (isnan(_2767) ? _2768 : max(_2767, _2768));
            float _2899 = isnan(_2768) ? _2767 : (isnan(_2767) ? _2768 : min(_2767, _2768));
            float _2908 = isnan(0.0) ? _2898 : (isnan(_2898) ? 0.0 : min(_2898, 0.0));
            float _2909 = isnan(0.0) ? _2899 : (isnan(_2899) ? 0.0 : min(_2899, 0.0));
            _2937 = ((abs(_2774 / _2762) * cbSceneParam._m0[80u].y) * ((((_2908 - _2909) * 2.0) - ((exp2(_2782 * (isnan(0.0) ? _2898 : (isnan(_2898) ? 0.0 : max(_2898, 0.0)))) - exp2(_2782 * (isnan(0.0) ? _2899 : (isnan(_2899) ? 0.0 : max(_2899, 0.0))))) * _2897)) - ((exp2(_2784 * _2908) - exp2(_2784 * _2909)) * _2897))) + (_2777 * cbSceneParam._m0[80u].z);
        }
        vec4 _2939 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2673, _2674, 1.0), 0.0);
        float _2948 = exp2((_2937 * (-1.44269502162933349609375)) * (1.0 - _2939.w));
        float _2949 = log2(_2948);
        float _2965 = log2(_2693);
        _2786 = (exp2(_2965 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2949 * cbSceneParam._m0[78u].x)) * _2939.x) / cbSceneParam._m0[78u].x)) + _2690;
        _2788 = (exp2(_2965 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2949 * cbSceneParam._m0[78u].y)) * _2939.y) / cbSceneParam._m0[78u].y)) + _2691;
        _2790 = (exp2(_2965 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2949 * cbSceneParam._m0[78u].z)) * _2939.z) / cbSceneParam._m0[78u].z)) + _2692;
        _2792 = _2948 * _2693;
    }
    else
    {
        _2786 = _2690;
        _2788 = _2691;
        _2790 = _2692;
        _2792 = _2693;
    }
    float _2804 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2805 = _2804 == 3.0;
    float _2806 = log2(_2792);
    float _2813 = exp2(_2806 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0))) * (_2635 + ((isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0))) * _902))) + ((_2641 + ((isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0))) * _1709)) * cbPerFrame._m0[3u].x));
    float _2814 = exp2(_2806 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0))) * (_2637 + ((isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0))) * _902))) + ((_2643 + ((isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0))) * _1709)) * cbPerFrame._m0[3u].x));
    float _2815 = exp2(_2806 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0))) * (_2639 + ((isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0))) * _902))) + ((_2645 + ((isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0))) * _1709)) * cbPerFrame._m0[3u].x));
    float _2824 = (_2804 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2824 * (_2805 ? _2813 : (_2813 + (cbSceneParam._m0[72u].w * _2786)));
    SV_Target.y = _2824 * (_2805 ? _2814 : (_2814 + (cbSceneParam._m0[72u].w * _2788)));
    SV_Target.z = _2824 * (_2805 ? _2815 : (_2815 + (cbSceneParam._m0[72u].w * _2790)));
    SV_Target.w = cbInstanceData._m0[_2665].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2665].w;
}


