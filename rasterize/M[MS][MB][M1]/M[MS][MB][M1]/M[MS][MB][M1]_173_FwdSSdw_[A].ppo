#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1339;
float _3744;
float _3745;
float _3746;
float _3747;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _229 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _230 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _231 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _237 = inversesqrt(dot(vec3(_229, _230, _231), vec3(_229, _230, _231)));
    float _244 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _251 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _257 = uint(roundEven(NORMAL.w)) * 13u;
    uint _262 = _257 + 1u;
    uint _266 = _257 + 2u;
    float _275 = sqrt(((cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x) + (cbInstanceData._m0[_257].x * cbInstanceData._m0[_257].x)) + (cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x));
    float _276 = _275 * TEXCOORD.z;
    float _277 = _275 * TEXCOORD.w;
    vec4 _297 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _303 = _297.x * cbMtdParam._m0[11u].x;
    float _304 = _297.y * cbMtdParam._m0[11u].y;
    float _305 = _297.z * cbMtdParam._m0[11u].z;
    vec4 _324 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _276) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _277) + cbTextureTilingScale._m0[5u].w));
    vec4 _363 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _365 = _363.x;
    float _377 = dot(vec4(_365, _363.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _394 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_365 - _377) * cbMtdParam._m0[24u].y) + _377) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3756 = isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0));
    float _395 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
    float _402 = (_395 * ((_324.x * cbMtdParam._m0[12u].x) - _303)) + _303;
    float _403 = (_395 * ((_324.y * cbMtdParam._m0[12u].y) - _304)) + _304;
    float _404 = (_395 * ((_324.z * cbMtdParam._m0[12u].z) - _305)) + _305;
    vec4 _421 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _276) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _277) + cbTextureTilingScale._m0[3u].w));
    vec4 _441 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _443 = _441.x;
    float _453 = dot(vec4(_443, _441.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _467 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_443 - _453) * cbMtdParam._m0[24u].y) + _453) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3767 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _468 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
    float _475 = (_468 * ((_421.x * cbMtdParam._m0[13u].x) - _402)) + _402;
    float _476 = (_468 * ((_421.y * cbMtdParam._m0[13u].y) - _403)) + _403;
    float _477 = (_468 * ((_421.z * cbMtdParam._m0[13u].z) - _404)) + _404;
    vec4 _490 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _276) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _277) + cbTextureTilingScale._m0[4u].w));
    vec4 _507 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _509 = _507.x;
    float _510 = _507.y;
    float _511 = _507.z;
    float _518 = ((_490.x - _509) * _395) + _509;
    float _519 = ((_490.y - _510) * _395) + _510;
    float _520 = ((_490.z - _511) * _395) + _511;
    vec4 _532 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _276) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _277) + cbTextureTilingScale._m0[2u].w));
    float _545 = ((_532.z - _520) * _468) + _520;
    float _548 = ((((_532.x - _518) * _468) + _518) * 2.0) + (-1.0);
    float _550 = ((((_532.y - _519) * _468) + _519) * 2.0) + (-1.0);
    float _551 = dot(vec2(_548, _550), vec2(_548, _550));
    float _3778 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
    float _556 = sqrt(1.0 - (isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0))));
    vec4 _569 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _583 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _276) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _277) + cbTextureTilingScale._m0[19u].w));
    float _585 = _583.x;
    float _586 = 1.0 - _585;
    float _614 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_585 - _586) * cbMtdParam._m0[24u].w) + _586) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3789 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _615 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
    float _623 = ((((cbMtdParam._m0[10u].x - _475) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _615) + _475;
    float _624 = ((((cbMtdParam._m0[10u].y - _476) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _615) + _476;
    float _625 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _477)) * _615) + _477;
    vec4 _637 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _651 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _653 = _651.x;
    float _671 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _276) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _277) + cbTextureTilingScale._m0[9u].w)).x - _653) * _395) + _653;
    float _689 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _276) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _277) + cbTextureTilingScale._m0[21u].w)).x - _671) * _468) + _671;
    float _693 = ((_637.x - _689) * cbMtdParam._m0[19u].z) + _689;
    float _695 = _693 - (_693 * _615);
    float _699 = ((cbMtdParam._m0[23u].y - _545) * _615) + _545;
    vec4 _718 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _276) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _277) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _724 = (_718.x * 2.0) + (-1.0);
    float _725 = (_718.y * 2.0) + (-1.0);
    float _726 = dot(vec2(_724, _725), vec2(_724, _725));
    float _3800 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _742 = (_615 * (((cbMtdParam._m0[22u].z * _548) - _548) + _724)) + _548;
    float _743 = (_615 * (((cbMtdParam._m0[22u].z * _550) - _550) + _725)) + _550;
    float _744 = (_615 * (sqrt(1.0 - (isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0)))) - _556)) + _556;
    float _746 = cbMtdParam._m0[22u].x + _569.w;
    float _749 = fma(_744, _244 * NORMAL.x, fma(_743, _251 * TANGENT.x, (_237 * _229) * _742));
    float _752 = fma(_744, _244 * NORMAL.y, fma(_743, _251 * TANGENT.y, (_237 * _230) * _742));
    float _755 = fma(_744, _244 * NORMAL.z, fma(_743, _251 * TANGENT.z, (_237 * _231) * _742));
    float _759 = inversesqrt(dot(vec3(_749, _752, _755), vec3(_749, _752, _755)));
    float _760 = _759 * _749;
    float _761 = _759 * _752;
    float _762 = _759 * _755;
    float _3811 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
    float _763 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
    float _3822 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
    float _3833 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _3844 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _3855 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _3866 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
    float _768 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
    float _782 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _822 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _832 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _822);
    float _833 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _822);
    float _834 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _822);
    float _838 = inversesqrt(dot(vec3(_832, _833, _834), vec3(_832, _833, _834)));
    float _839 = _832 * _838;
    float _840 = _833 * _838;
    float _841 = _834 * _838;
    vec4 _846 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _848 = _846.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1020 = sqrt(((_832 * _832) + (_833 * _833)) + (_834 * _834));
        float _1026 = (cbMatDynParam._m0[5u].x * _1020) + cbMatDynParam._m0[5u].y;
        float _3877 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1027 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
        float _1031 = (cbMatDynParam._m0[5u].z * _1020) + cbMatDynParam._m0[5u].w;
        float _3888 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0))) - _1027)) + _1027) < ((_848 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _859 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _860 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _878 = fma(_762, cbSceneParam._m0[5u].z, fma(_761, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _760));
    float _881 = fma(_762, cbSceneParam._m0[6u].z, fma(_761, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _760));
    float _884 = fma(_762, cbSceneParam._m0[7u].z, fma(_761, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _760));
    uint _897 = _257 + 9u;
    uint _898 = _897 + uint(cbMatDynParam._m0[0u].w);
    float _904 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0)))) * cbInstanceData._m0[_898].x;
    float _905 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0)))) * cbInstanceData._m0[_898].y;
    float _906 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0)))) * cbInstanceData._m0[_898].z;
    float _3899 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
    float _907 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
    float _3910 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
    float _908 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
    float _3921 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
    float _909 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
    float _910 = 1.0 - _768;
    float _911 = _907 * _910;
    float _912 = _908 * _910;
    float _913 = _909 * _910;
    float _918 = (_907 + (-0.039999999105930328369140625)) * _768;
    float _919 = (_908 + (-0.039999999105930328369140625)) * _768;
    float _920 = (_909 + (-0.039999999105930328369140625)) * _768;
    float _921 = _918 + 0.039999999105930328369140625;
    float _923 = _919 + 0.039999999105930328369140625;
    float _924 = _920 + 0.039999999105930328369140625;
    vec4 _933 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _859, cbSceneParam._m0[86u].y * _860));
    float _937 = ((isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0))) * TEXCOORD_5.w) * _933.x;
    float _938 = dot(vec3(_760, _761, _762), vec3(_839, _840, _841));
    float _941 = _938 * 2.0;
    float _945 = (_941 * _760) - _839;
    float _946 = (_941 * _761) - _840;
    float _947 = (_941 * _762) - _841;
    float _951 = abs(dot(vec3(_839, _840, _841), vec3(_760, _761, _762)));
    float _3932 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
    float _953 = sqrt(_763);
    float _966 = exp2((_953 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_953 * 3.0));
    float _972 = (1.0 - _966) * ((_953 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _973 = _966 * _953;
    float _1001 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1005 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1009 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1338;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1063 = fma(_1009, cbModelParam._m0[26u].z, fma(_1005, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1001));
        float _1067 = fma(_1009, cbModelParam._m0[27u].z, fma(_1005, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1001));
        float _1071 = fma(_1009, cbModelParam._m0[28u].z, fma(_1005, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1001));
        float _1096 = _1001 + _760;
        float _1097 = _1005 + _761;
        float _1098 = _1009 + _762;
        float _1108 = fma(_1098, cbModelParam._m0[26u].z, fma(_1097, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1096)) - _1063;
        float _1109 = fma(_1098, cbModelParam._m0[27u].z, fma(_1097, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1096)) - _1067;
        float _1110 = fma(_1098, cbModelParam._m0[28u].z, fma(_1097, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1096)) - _1071;
        float _1114 = inversesqrt(dot(vec3(_1108, _1109, _1110), vec3(_1108, _1109, _1110)));
        float _1127 = ((_1114 * _1108) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1063 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1128 = ((_1114 * _1109) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1067 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1129 = ((_1114 * _1110) / cbModelParam._m0[34u].z) + ((((((_1071 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1132 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1127, _1128, _1129), 0.0);
        vec4 _1139 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1127, _1128, _1129), 0.0);
        vec4 _1146 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1127, _1128, _1129), 0.0);
        vec4 _1153 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1127, _1128, _1129), 0.0);
        float _1166 = exp2((_1132.w + (-0.5)) * 20.0) * 2.0;
        float _1167 = _1166 * (_1132.x + (-0.5));
        float _1168 = _1166 * (_1132.y + (-0.5));
        float _1169 = _1166 * (_1132.z + (-0.5));
        float _1176 = exp2((_1139.w + (-0.5)) * 20.0) * 2.0;
        float _1177 = _1176 * (_1139.x + (-0.5));
        float _1178 = _1176 * (_1139.y + (-0.5));
        float _1179 = _1176 * (_1139.z + (-0.5));
        float _1186 = exp2((_1146.w + (-0.5)) * 20.0) * 2.0;
        float _1187 = _1186 * (_1146.x + (-0.5));
        float _1188 = _1186 * (_1146.y + (-0.5));
        float _1189 = _1186 * (_1146.z + (-0.5));
        float _1196 = exp2((_1153.w + (-0.5)) * 20.0) * 2.0;
        float _1197 = _1196 * (_1153.x + (-0.5));
        float _1198 = _1196 * (_1153.y + (-0.5));
        float _1199 = _1196 * (_1153.z + (-0.5));
        float _1200 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1201 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1202 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1203 = _1167 * 0.5;
        float _1204 = _1177 * 0.5;
        float _1205 = _1187 * 0.5;
        float _1206 = dot(vec3(_1203, _1204, _1205), vec3(_1203, _1204, _1205));
        float _1211 = (_1206 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1206);
        float _1220 = (dot(vec3(_760, _761, _762), vec3(_1211 * _1203, _1211 * _1204, _1211 * _1205)) + 1.0) * 0.5;
        float _3958 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1230 = sqrt(((_1204 * _1204) + (_1203 * _1203)) + (_1205 * _1205)) / (_1200 + 9.9999997473787516355514526367188e-06);
        float _3969 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1231 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
        float _1232 = _1231 * 2.0;
        float _1236 = (1.0 - _1231) / (_1231 + 1.0);
        float _3980 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1237 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
        float _1246 = ((((1.0 - _1237) * (_1232 + 2.0)) * exp2(log2(isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0))) * (_1232 + 1.0))) + _1237) * _1200;
        float _1247 = _1168 * 0.5;
        float _1248 = _1178 * 0.5;
        float _1249 = _1188 * 0.5;
        float _1250 = dot(vec3(_1247, _1248, _1249), vec3(_1247, _1248, _1249));
        float _1255 = (_1250 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1250);
        float _1263 = (dot(vec3(_760, _761, _762), vec3(_1255 * _1247, _1255 * _1248, _1255 * _1249)) + 1.0) * 0.5;
        float _3991 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1272 = sqrt(((_1248 * _1248) + (_1247 * _1247)) + (_1249 * _1249)) / (_1201 + 9.9999997473787516355514526367188e-06);
        float _4002 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1273 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
        float _1274 = _1273 * 2.0;
        float _1278 = (1.0 - _1273) / (_1273 + 1.0);
        float _4013 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1279 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
        float _1288 = ((((1.0 - _1279) * (_1274 + 2.0)) * exp2(log2(isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0))) * (_1274 + 1.0))) + _1279) * _1201;
        float _1289 = _1169 * 0.5;
        float _1290 = _1179 * 0.5;
        float _1291 = _1189 * 0.5;
        float _1292 = dot(vec3(_1289, _1290, _1291), vec3(_1289, _1290, _1291));
        float _1297 = (_1292 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1292);
        float _1305 = (dot(vec3(_760, _761, _762), vec3(_1297 * _1289, _1297 * _1290, _1297 * _1291)) + 1.0) * 0.5;
        float _4024 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1314 = sqrt(((_1290 * _1290) + (_1289 * _1289)) + (_1291 * _1291)) / (_1202 + 9.9999997473787516355514526367188e-06);
        float _4035 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1315 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
        float _1316 = _1315 * 2.0;
        float _1320 = (1.0 - _1315) / (_1315 + 1.0);
        float _4046 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1321 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
        float _1330 = ((((1.0 - _1321) * (_1316 + 2.0)) * exp2(log2(isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0))) * (_1316 + 1.0))) + _1321) * _1202;
        _1338 = _1169;
        _1340 = _1168;
        _1341 = _1167;
        _1342 = _1179;
        _1343 = _1178;
        _1344 = _1177;
        _1345 = _1189;
        _1346 = _1188;
        _1347 = _1187;
        _1348 = _1202;
        _1349 = _1201;
        _1350 = _1200;
        _1351 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0)));
        _1352 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0)));
        _1353 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0)));
    }
    else
    {
        _1338 = _1339;
        _1340 = _1339;
        _1341 = _1339;
        _1342 = _1339;
        _1343 = _1339;
        _1344 = _1339;
        _1345 = _1339;
        _1346 = _1339;
        _1347 = _1339;
        _1348 = _1339;
        _1349 = _1339;
        _1350 = _1339;
        _1351 = 0.0;
        _1352 = 0.0;
        _1353 = 0.0;
    }
    float _1649;
    float _1650;
    float _1651;
    float _1652;
    float _1653;
    float _1654;
    float _1655;
    float _1656;
    float _1657;
    float _1658;
    float _1659;
    float _1660;
    float _1661;
    float _1662;
    float _1663;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1380 = fma(_1009, cbModelParam._m0[30u].z, fma(_1005, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1001));
        float _1384 = fma(_1009, cbModelParam._m0[31u].z, fma(_1005, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1001));
        float _1388 = fma(_1009, cbModelParam._m0[32u].z, fma(_1005, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1001));
        float _1411 = _1001 + _760;
        float _1412 = _1005 + _761;
        float _1413 = _1009 + _762;
        float _1423 = fma(_1413, cbModelParam._m0[30u].z, fma(_1412, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1411)) - _1380;
        float _1424 = fma(_1413, cbModelParam._m0[31u].z, fma(_1412, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1411)) - _1384;
        float _1425 = fma(_1413, cbModelParam._m0[32u].z, fma(_1412, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1411)) - _1388;
        float _1429 = inversesqrt(dot(vec3(_1423, _1424, _1425), vec3(_1423, _1424, _1425)));
        float _1442 = ((_1429 * _1423) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1380 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1443 = ((_1429 * _1424) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1384 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1444 = ((_1429 * _1425) / cbModelParam._m0[35u].z) + ((((((_1388 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1446 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1442, _1443, _1444), 0.0);
        vec4 _1453 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1442, _1443, _1444), 0.0);
        vec4 _1460 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1442, _1443, _1444), 0.0);
        vec4 _1467 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1442, _1443, _1444), 0.0);
        float _1479 = exp2((_1446.w + (-0.5)) * 20.0) * 2.0;
        float _1480 = _1479 * (_1446.x + (-0.5));
        float _1481 = _1479 * (_1446.y + (-0.5));
        float _1482 = _1479 * (_1446.z + (-0.5));
        float _1489 = exp2((_1453.w + (-0.5)) * 20.0) * 2.0;
        float _1490 = _1489 * (_1453.x + (-0.5));
        float _1491 = _1489 * (_1453.y + (-0.5));
        float _1492 = _1489 * (_1453.z + (-0.5));
        float _1499 = exp2((_1460.w + (-0.5)) * 20.0) * 2.0;
        float _1500 = _1499 * (_1460.x + (-0.5));
        float _1501 = _1499 * (_1460.y + (-0.5));
        float _1502 = _1499 * (_1460.z + (-0.5));
        float _1509 = exp2((_1467.w + (-0.5)) * 20.0) * 2.0;
        float _1510 = _1509 * (_1467.x + (-0.5));
        float _1511 = _1509 * (_1467.y + (-0.5));
        float _1512 = _1509 * (_1467.z + (-0.5));
        float _1513 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1514 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1515 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
        float _1516 = _1480 * 0.5;
        float _1517 = _1490 * 0.5;
        float _1518 = _1500 * 0.5;
        float _1519 = dot(vec3(_1516, _1517, _1518), vec3(_1516, _1517, _1518));
        float _1524 = (_1519 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1519);
        float _1532 = (dot(vec3(_760, _761, _762), vec3(_1524 * _1516, _1524 * _1517, _1524 * _1518)) + 1.0) * 0.5;
        float _4087 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1541 = sqrt(((_1517 * _1517) + (_1516 * _1516)) + (_1518 * _1518)) / (_1513 + 9.9999997473787516355514526367188e-06);
        float _4098 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
        float _1542 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
        float _1543 = _1542 * 2.0;
        float _1547 = (1.0 - _1542) / (_1542 + 1.0);
        float _4109 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
        float _1548 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
        float _1557 = ((((1.0 - _1548) * (_1543 + 2.0)) * exp2(log2(isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0))) * (_1543 + 1.0))) + _1548) * _1513;
        float _1558 = _1481 * 0.5;
        float _1559 = _1491 * 0.5;
        float _1560 = _1501 * 0.5;
        float _1561 = dot(vec3(_1558, _1559, _1560), vec3(_1558, _1559, _1560));
        float _1566 = (_1561 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1561);
        float _1574 = (dot(vec3(_760, _761, _762), vec3(_1566 * _1558, _1566 * _1559, _1566 * _1560)) + 1.0) * 0.5;
        float _4120 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
        float _1583 = sqrt(((_1559 * _1559) + (_1558 * _1558)) + (_1560 * _1560)) / (_1514 + 9.9999997473787516355514526367188e-06);
        float _4131 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1584 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
        float _1585 = _1584 * 2.0;
        float _1589 = (1.0 - _1584) / (_1584 + 1.0);
        float _4142 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
        float _1590 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
        float _1599 = ((((1.0 - _1590) * (_1585 + 2.0)) * exp2(log2(isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0))) * (_1585 + 1.0))) + _1590) * _1514;
        float _1600 = _1482 * 0.5;
        float _1601 = _1492 * 0.5;
        float _1602 = _1502 * 0.5;
        float _1603 = dot(vec3(_1600, _1601, _1602), vec3(_1600, _1601, _1602));
        float _1608 = (_1603 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1603);
        float _1616 = (dot(vec3(_760, _761, _762), vec3(_1608 * _1600, _1608 * _1601, _1608 * _1602)) + 1.0) * 0.5;
        float _4153 = isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0));
        float _1625 = sqrt(((_1601 * _1601) + (_1600 * _1600)) + (_1602 * _1602)) / (_1515 + 9.9999997473787516355514526367188e-06);
        float _4164 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
        float _1626 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
        float _1627 = _1626 * 2.0;
        float _1631 = (1.0 - _1626) / (_1626 + 1.0);
        float _4175 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
        float _1632 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
        float _1641 = ((((1.0 - _1632) * (_1627 + 2.0)) * exp2(log2(isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0))) * (_1627 + 1.0))) + _1632) * _1515;
        _1649 = _1482;
        _1650 = _1481;
        _1651 = _1480;
        _1652 = _1492;
        _1653 = _1491;
        _1654 = _1490;
        _1655 = _1502;
        _1656 = _1501;
        _1657 = _1500;
        _1658 = _1515;
        _1659 = _1514;
        _1660 = _1513;
        _1661 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0)));
        _1662 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0)));
        _1663 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0)));
    }
    else
    {
        _1649 = _1339;
        _1650 = _1339;
        _1651 = _1339;
        _1652 = _1339;
        _1653 = _1339;
        _1654 = _1339;
        _1655 = _1339;
        _1656 = _1339;
        _1657 = _1339;
        _1658 = _1339;
        _1659 = _1339;
        _1660 = _1339;
        _1661 = 0.0;
        _1662 = 0.0;
        _1663 = 0.0;
    }
    float _1673 = (cbModelParam._m0[1u].x * (_1661 - _1351)) + _1351;
    float _1674 = (cbModelParam._m0[1u].x * (_1662 - _1352)) + _1352;
    float _1675 = (cbModelParam._m0[1u].x * (_1663 - _1353)) + _1353;
    float _1696 = fma(_1675, cbSceneParam._m0[89u].z, fma(_1674, cbSceneParam._m0[89u].y, _1673 * cbSceneParam._m0[89u].x));
    float _1699 = fma(_1675, cbSceneParam._m0[90u].z, fma(_1674, cbSceneParam._m0[90u].y, _1673 * cbSceneParam._m0[90u].x));
    float _1702 = fma(_1675, cbSceneParam._m0[91u].z, fma(_1674, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1673));
    float _1717 = _945 * 0.5;
    float _1718 = _946 * 0.5;
    float _1719 = _947 * 0.5;
    float _1720 = dot(vec4(_1717, _1718, _1719, 1.0), vec4(_1651, _1654, _1657, _1660));
    float _1723 = dot(vec4(_1717, _1718, _1719, 1.0), vec4(_1650, _1653, _1656, _1659));
    float _1726 = dot(vec4(_1717, _1718, _1719, 1.0), vec4(_1649, _1652, _1655, _1658));
    float _1760;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1733 = dot(vec4(_1717, _1718, _1719, 1.0), vec4(_1338, _1342, _1345, _1348));
        float _1737 = dot(vec4(_1717, _1718, _1719, 1.0), vec4(_1340, _1343, _1346, _1349));
        float _1741 = dot(vec4(_1717, _1718, _1719, 1.0), vec4(_1341, _1344, _1347, _1350));
        float _1748 = dot(vec4(cbModelParam._m0[39u]), vec4(_1717, _1718, _1719, 1.0));
        _1760 = dot(vec3(isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0)), isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0)), isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1748) ? 0.0 : (isnan(0.0) ? _1748 : max(0.0, _1748))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1760 = 1.0;
    }
    float _1771;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1762 = dot(vec4(cbModelParam._m0[40u]), vec4(_1717, _1718, _1719, 1.0));
        _1771 = dot(vec3(isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0)), isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0)), isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1762) ? 0.0 : (isnan(0.0) ? _1762 : max(0.0, _1762))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1771 = 1.0;
    }
    float _1775 = (_1771 * cbModelParam._m0[1u].x) + (_1760 * (1.0 - cbModelParam._m0[1u].x));
    float _1785 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _763);
    float _1786 = isnan(_1785) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1785 : min(cbModelParam._m0[25u].z, _1785));
    float _1868;
    float _1870;
    float _1872;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1835 = fma(_1009, cbModelParam._m0[13u].z, fma(_1005, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1001)) + cbModelParam._m0[13u].w;
        float _1839 = fma(_1009, cbModelParam._m0[14u].z, fma(_1005, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1001)) + cbModelParam._m0[14u].w;
        float _1843 = fma(_1009, cbModelParam._m0[15u].z, fma(_1005, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1001)) + cbModelParam._m0[15u].w;
        float _1846 = fma(_947, cbModelParam._m0[13u].z, fma(_946, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _945));
        float _1849 = fma(_947, cbModelParam._m0[14u].z, fma(_946, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _945));
        float _1852 = fma(_947, cbModelParam._m0[15u].z, fma(_946, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _945));
        float _1880;
        if (_1846 > 0.0)
        {
            _1880 = abs((1.0 - _1835) / _1846);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1846 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1835 + 1.0) / _1846);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1880 = frontier_phi_17_15_ladder;
        }
        float _2104;
        if (_1849 > 0.0)
        {
            _2104 = abs((1.0 - _1839) / _1849);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1849 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1839 + 1.0) / _1849);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2104 = frontier_phi_26_22_ladder;
        }
        float _2361;
        if (_1852 > 0.0)
        {
            _2361 = abs((1.0 - _1843) / _1852);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1852 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1843 + 1.0) / _1852);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2361 = frontier_phi_38_33_ladder;
        }
        float _2363 = isnan(_2104) ? _1880 : (isnan(_1880) ? _2104 : min(_1880, _2104));
        float _2364 = isnan(_2361) ? _2363 : (isnan(_2363) ? _2361 : min(_2363, _2361));
        float _2368 = (_2364 * _1846) + _1835;
        float _2369 = (_2364 * _1849) + _1839;
        float _2370 = (_2364 * _1852) + _1843;
        float _2371 = _2364 * 9.9999997473787516355514526367188e-05;
        float _2373 = (-1.0) - _2371;
        float _2375 = _2371 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2370 > _2375) || ((_2370 < _2373) || ((_2369 > _2375) || ((_2369 < _2373) || ((_2368 < _2373) || (_2368 > _2375))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2498 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2370, cbModelParam._m0[9u].z, fma(_2369, cbModelParam._m0[9u].y, _2368 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2370, cbModelParam._m0[10u].z, fma(_2369, cbModelParam._m0[10u].y, _2368 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2370, cbModelParam._m0[11u].z, fma(_2369, cbModelParam._m0[11u].y, _2368 * cbModelParam._m0[11u].x))), _1786);
            frontier_phi_16_38_ladder = _2498.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2498.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2498.x * cbModelParam._m0[1u].y;
        }
        _1868 = frontier_phi_16_38_ladder_2;
        _1870 = frontier_phi_16_38_ladder_1;
        _1872 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1856 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_945, _946, _947), _1786);
        _1868 = _1856.x * cbModelParam._m0[1u].y;
        _1870 = _1856.y * cbModelParam._m0[1u].y;
        _1872 = _1856.z * cbModelParam._m0[1u].y;
    }
    float _1876 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _763);
    float _1877 = isnan(_1876) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1876 : min(cbModelParam._m0[25u].w, _1876));
    float _1967;
    float _1969;
    float _1971;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1931 = fma(_1009, cbModelParam._m0[21u].z, fma(_1005, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1001)) + cbModelParam._m0[21u].w;
        float _1935 = fma(_1009, cbModelParam._m0[22u].z, fma(_1005, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1001)) + cbModelParam._m0[22u].w;
        float _1939 = fma(_1009, cbModelParam._m0[23u].z, fma(_1005, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1001)) + cbModelParam._m0[23u].w;
        float _1942 = fma(_947, cbModelParam._m0[21u].z, fma(_946, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _945));
        float _1945 = fma(_947, cbModelParam._m0[22u].z, fma(_946, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _945));
        float _1948 = fma(_947, cbModelParam._m0[23u].z, fma(_946, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _945));
        float _2109;
        if (_1942 > 0.0)
        {
            _2109 = abs((1.0 - _1931) / _1942);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1942 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1931 + 1.0) / _1942);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2109 = frontier_phi_28_24_ladder;
        }
        float _2388;
        if (_1945 > 0.0)
        {
            _2388 = abs((1.0 - _1935) / _1945);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1945 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1935 + 1.0) / _1945);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2388 = frontier_phi_40_35_ladder;
        }
        float _2601;
        if (_1948 > 0.0)
        {
            _2601 = abs((1.0 - _1939) / _1948);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1948 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1939 + 1.0) / _1948);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2601 = frontier_phi_49_46_ladder;
        }
        float _2603 = isnan(_2388) ? _2109 : (isnan(_2109) ? _2388 : min(_2109, _2388));
        float _2604 = isnan(_2601) ? _2603 : (isnan(_2603) ? _2601 : min(_2603, _2601));
        float _2608 = (_2604 * _1942) + _1931;
        float _2609 = (_2604 * _1945) + _1935;
        float _2610 = (_2604 * _1948) + _1939;
        float _2611 = _2604 * 9.9999997473787516355514526367188e-05;
        float _2612 = (-1.0) - _2611;
        float _2614 = _2611 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2610 > _2614) || ((_2610 < _2612) || ((_2609 > _2614) || ((_2609 < _2612) || ((_2608 < _2612) || (_2608 > _2614))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2809 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2610, cbModelParam._m0[17u].z, fma(_2609, cbModelParam._m0[17u].y, _2608 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2610, cbModelParam._m0[18u].z, fma(_2609, cbModelParam._m0[18u].y, _2608 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2610, cbModelParam._m0[19u].z, fma(_2609, cbModelParam._m0[19u].y, _2608 * cbModelParam._m0[19u].x))), _1877);
            frontier_phi_25_49_ladder = _2809.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2809.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2809.x * cbModelParam._m0[1u].z;
        }
        _1967 = frontier_phi_25_49_ladder_2;
        _1969 = frontier_phi_25_49_ladder_1;
        _1971 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1951 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_945, _946, _947), _1877);
        _1967 = _1951.x * cbModelParam._m0[1u].z;
        _1969 = _1951.y * cbModelParam._m0[1u].z;
        _1971 = _1951.z * cbModelParam._m0[1u].z;
    }
    float _1984 = (((_972 * _921) + _973) * _937) * ((cbModelParam._m0[1u].w * (_1967 - _1868)) + _1868);
    float _1986 = (((_972 * _923) + _973) * _937) * ((cbModelParam._m0[1u].w * (_1969 - _1870)) + _1870);
    float _1988 = (((_972 * _924) + _973) * _937) * ((cbModelParam._m0[1u].w * (_1971 - _1872)) + _1872);
    float _1991 = fma(_1988, cbSceneParam._m0[89u].z, fma(_1986, cbSceneParam._m0[89u].y, _1984 * cbSceneParam._m0[89u].x));
    float _1994 = fma(_1988, cbSceneParam._m0[90u].z, fma(_1986, cbSceneParam._m0[90u].y, _1984 * cbSceneParam._m0[90u].x));
    float _1997 = fma(_1988, cbSceneParam._m0[91u].z, fma(_1986, cbSceneParam._m0[91u].y, _1984 * cbSceneParam._m0[91u].x));
    vec4 _2005 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_859, _860));
    float _2007 = _2005.w;
    float _2019 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2007);
    float _2020 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2007);
    float _2021 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2007);
    uvec4 _2025 = floatBitsToUint(cbInstanceData._m0[_257 + 5u]);
    uint _2027 = _2025.x * 14u;
    uint _2028 = _2027 + 13u;
    float _2035 = _937 + (-1.0);
    float _2040 = (cbLight._m0[_2028].x * _2035) + 1.0;
    float _2041 = (cbLight._m0[_2028].y * _2035) + 1.0;
    float _2042 = (cbLight._m0[_2028].z * _2035) + 1.0;
    float _2043 = (cbLight._m0[_2028].w * _2035) + 1.0;
    uint _2044 = _2027 + 5u;
    float _2050 = isnan(1.0) ? _2041 : (isnan(_2041) ? 1.0 : min(_2041, 1.0));
    uint _2054 = _2027 + 4u;
    float _2063 = isnan(1.0) ? _2040 : (isnan(_2040) ? 1.0 : min(_2040, 1.0));
    uint _2067 = _2027 | 1u;
    float _2078 = dot(vec3(cbLight._m0[_2027].xyz), vec3(_760, _761, _762));
    float _2081 = dot(vec3(cbLight._m0[_2067].xyz), vec3(_760, _761, _762));
    float _4311 = isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0));
    float _4322 = isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0));
    float _2086 = (isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0))) * 0.3183098733425140380859375;
    float _2088 = (isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0))) * 0.3183098733425140380859375;
    float _2095 = ((cbLight._m0[_2044].x * _2050) * _2088) + (((cbLight._m0[_2054].x * _2019) * _2063) * _2086);
    float _2096 = ((_2050 * cbLight._m0[_2044].y) * _2088) + (((cbLight._m0[_2054].y * _2020) * _2063) * _2086);
    float _2097 = ((_2050 * cbLight._m0[_2044].z) * _2088) + (((cbLight._m0[_2054].z * _2021) * _2063) * _2086);
    uvec4 _2101 = floatBitsToUint(cbLight._m0[_2027 + 12u]);
    bool _2103 = _2101.x == 0u;
    float _2114;
    float _2116;
    float _2118;
    if (_2103)
    {
        _2114 = _2095;
        _2116 = _2096;
        _2118 = _2097;
    }
    else
    {
        uint _2122 = _2027 + 6u;
        float _2138 = (dot(vec3(cbLight._m0[_2027 + 2u].xyz), vec3(_760, _761, _762)) * 0.5) + 0.5;
        float _2139 = _2138 * _2138;
        float _4333 = isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0));
        float _2140 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
        float _2141 = isnan(1.0) ? _2042 : (isnan(_2042) ? 1.0 : min(_2042, 1.0));
        _2114 = (((cbLight._m0[_2122].x * 0.3183098733425140380859375) * _2140) * _2141) + _2095;
        _2116 = (((cbLight._m0[_2122].y * 0.3183098733425140380859375) * _2140) * _2141) + _2096;
        _2118 = (((cbLight._m0[_2122].z * 0.3183098733425140380859375) * _2140) * _2141) + _2097;
    }
    bool _2121 = _2101.y == 0u;
    float _2159;
    float _2161;
    float _2163;
    if (_2121)
    {
        _2159 = _2114;
        _2161 = _2116;
        _2163 = _2118;
    }
    else
    {
        uint _2332 = _2027 + 7u;
        float _2348 = (dot(vec3(cbLight._m0[_2027 + 3u].xyz), vec3(_760, _761, _762)) * 0.5) + 0.5;
        float _2349 = _2348 * _2348;
        float _4349 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
        float _2350 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
        float _2351 = isnan(1.0) ? _2043 : (isnan(_2043) ? 1.0 : min(_2043, 1.0));
        _2159 = (((cbLight._m0[_2332].x * 0.3183098733425140380859375) * _2350) * _2351) + _2114;
        _2161 = (((cbLight._m0[_2332].y * 0.3183098733425140380859375) * _2350) * _2351) + _2116;
        _2163 = (((cbLight._m0[_2332].z * 0.3183098733425140380859375) * _2350) * _2351) + _2118;
    }
    uint _2166 = _2027 + 8u;
    float _2179 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2027].w)) * _763) * 0.949999988079071044921875);
    float _2180 = _2179 * _2179;
    float _2181 = cbLight._m0[_2027].x + _839;
    float _2182 = cbLight._m0[_2027].y + _840;
    float _2183 = cbLight._m0[_2027].z + _841;
    float _2187 = inversesqrt(dot(vec3(_2181, _2182, _2183), vec3(_2181, _2182, _2183)));
    float _2188 = _2187 * _2181;
    float _2189 = _2187 * _2182;
    float _2190 = _2187 * _2183;
    float _2191 = dot(vec3(_760, _761, _762), vec3(cbLight._m0[_2027].xyz));
    float _4365 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
    float _2194 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
    float _4376 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
    float _2195 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
    float _2196 = dot(vec3(_760, _761, _762), vec3(_2188, _2189, _2190));
    float _4387 = isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0));
    float _2199 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
    float _2200 = dot(vec3(cbLight._m0[_2027].xyz), vec3(_2188, _2189, _2190));
    float _4398 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
    float _2204 = _2180 * _2180;
    float _2208 = ((_2199 * _2199) * (_2204 + (-1.0))) + 1.0;
    float _2216 = exp2(log2(1.0 - (isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0)))) * 5.0);
    float _2217 = 0.959999978542327880859375 - _918;
    float _2219 = 0.959999978542327880859375 - _919;
    float _2220 = 0.959999978542327880859375 - _920;
    float _2227 = 1.0 - _2180;
    float _2238 = (0.5 / (((_2195 * ((_2194 * _2227) + _2180)) + 9.9999999392252902907785028219223e-09) + (((_2195 * _2227) + _2180) * _2194))) * _2194;
    float _4409 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
    float _2240 = (isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0))) * (_2204 / ((_2208 * _2208) * 3.141590118408203125));
    uint _2254 = _2027 + 9u;
    float _2265 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2067].w)) * _763) * 0.949999988079071044921875);
    float _2266 = _2265 * _2265;
    float _2267 = cbLight._m0[_2067].x + _839;
    float _2268 = cbLight._m0[_2067].y + _840;
    float _2269 = cbLight._m0[_2067].z + _841;
    float _2273 = inversesqrt(dot(vec3(_2267, _2268, _2269), vec3(_2267, _2268, _2269)));
    float _2274 = _2273 * _2267;
    float _2275 = _2273 * _2268;
    float _2276 = _2273 * _2269;
    float _2277 = dot(vec3(_760, _761, _762), vec3(cbLight._m0[_2067].xyz));
    float _4420 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
    float _2280 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
    float _2281 = dot(vec3(_760, _761, _762), vec3(_2274, _2275, _2276));
    float _4431 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
    float _2284 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
    float _2285 = dot(vec3(cbLight._m0[_2067].xyz), vec3(_2274, _2275, _2276));
    float _4442 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0));
    float _2289 = _2266 * _2266;
    float _2293 = ((_2284 * _2284) * (_2289 + (-1.0))) + 1.0;
    float _2300 = exp2(log2(1.0 - (isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0)))) * 5.0);
    float _2307 = 1.0 - _2266;
    float _2317 = (0.5 / (((_2195 * ((_2280 * _2307) + _2266)) + 9.9999999392252902907785028219223e-09) + (((_2195 * _2307) + _2266) * _2280))) * _2280;
    float _4453 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
    float _2319 = (isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0))) * (_2289 / ((_2293 * _2293) * 3.141590118408203125));
    float _2329 = (((((_2300 * _2217) + _921) * cbLight._m0[_2254].x) * _2319) * _2050) + ((((cbLight._m0[_2166].x * _2019) * ((_2216 * _2217) + _921)) * _2240) * _2063);
    float _2330 = (((((_2300 * _2219) + _923) * cbLight._m0[_2254].y) * _2319) * _2050) + ((((cbLight._m0[_2166].y * _2020) * ((_2216 * _2219) + _923)) * _2240) * _2063);
    float _2331 = (((((_2300 * _2220) + _924) * cbLight._m0[_2254].z) * _2319) * _2050) + ((((cbLight._m0[_2166].z * _2021) * ((_2216 * _2220) + _924)) * _2240) * _2063);
    float _2393;
    float _2395;
    float _2397;
    if (_2103)
    {
        _2393 = _2329;
        _2395 = _2330;
        _2397 = _2331;
    }
    else
    {
        uint _2399 = _2027 + 2u;
        uint _2403 = _2027 + 10u;
        float _2417 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2399].w)) * _763) * 0.949999988079071044921875);
        float _2418 = _2417 * _2417;
        float _2419 = cbLight._m0[_2399].x + _839;
        float _2420 = cbLight._m0[_2399].y + _840;
        float _2421 = cbLight._m0[_2399].z + _841;
        float _2425 = inversesqrt(dot(vec3(_2419, _2420, _2421), vec3(_2419, _2420, _2421)));
        float _2426 = _2425 * _2419;
        float _2427 = _2425 * _2420;
        float _2428 = _2425 * _2421;
        float _2429 = dot(vec3(_760, _761, _762), vec3(cbLight._m0[_2399].xyz));
        float _4464 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
        float _2432 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
        float _2433 = dot(vec3(_760, _761, _762), vec3(_2426, _2427, _2428));
        float _4475 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
        float _2436 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
        float _2437 = dot(vec3(cbLight._m0[_2399].xyz), vec3(_2426, _2427, _2428));
        float _4486 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
        float _2441 = _2418 * _2418;
        float _2445 = ((_2436 * _2436) * (_2441 + (-1.0))) + 1.0;
        float _2452 = exp2(log2(1.0 - (isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0)))) * 5.0);
        float _2459 = 1.0 - _2418;
        float _2469 = (0.5 / (((_2195 * ((_2432 * _2459) + _2418)) + 9.9999999392252902907785028219223e-09) + (((_2195 * _2459) + _2418) * _2432))) * _2432;
        float _4497 = isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : max(_2469, 0.0));
        float _2471 = (isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0))) * (_2441 / ((_2445 * _2445) * 3.141590118408203125));
        float _2472 = isnan(1.0) ? _2042 : (isnan(_2042) ? 1.0 : min(_2042, 1.0));
        _2393 = (((((_2452 * _2217) + _921) * cbLight._m0[_2403].x) * _2471) * _2472) + _2329;
        _2395 = (((((_2452 * _2219) + _923) * cbLight._m0[_2403].y) * _2471) * _2472) + _2330;
        _2397 = (((((_2452 * _2220) + _924) * cbLight._m0[_2403].z) * _2471) * _2472) + _2331;
    }
    float _2507;
    float _2509;
    float _2511;
    if (_2121)
    {
        _2507 = _2393;
        _2509 = _2395;
        _2511 = _2397;
    }
    else
    {
        uint _2518 = _2027 + 3u;
        uint _2522 = _2027 + 11u;
        float _2536 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2518].w)) * _763) * 0.949999988079071044921875);
        float _2537 = _2536 * _2536;
        float _2538 = cbLight._m0[_2518].x + _839;
        float _2539 = cbLight._m0[_2518].y + _840;
        float _2540 = cbLight._m0[_2518].z + _841;
        float _2544 = inversesqrt(dot(vec3(_2538, _2539, _2540), vec3(_2538, _2539, _2540)));
        float _2545 = _2544 * _2538;
        float _2546 = _2544 * _2539;
        float _2547 = _2544 * _2540;
        float _2548 = dot(vec3(_760, _761, _762), vec3(cbLight._m0[_2518].xyz));
        float _4513 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0));
        float _2551 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
        float _2552 = dot(vec3(_760, _761, _762), vec3(_2545, _2546, _2547));
        float _4524 = isnan(0.0) ? _2552 : (isnan(_2552) ? 0.0 : max(_2552, 0.0));
        float _2555 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
        float _2556 = dot(vec3(cbLight._m0[_2518].xyz), vec3(_2545, _2546, _2547));
        float _4535 = isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0));
        float _2560 = _2537 * _2537;
        float _2564 = ((_2555 * _2555) * (_2560 + (-1.0))) + 1.0;
        float _2571 = exp2(log2(1.0 - (isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0)))) * 5.0);
        float _2578 = 1.0 - _2537;
        float _2588 = (0.5 / (((_2195 * ((_2551 * _2578) + _2537)) + 9.9999999392252902907785028219223e-09) + (((_2195 * _2578) + _2537) * _2551))) * _2551;
        float _4546 = isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : max(_2588, 0.0));
        float _2590 = (isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0))) * (_2560 / ((_2564 * _2564) * 3.141590118408203125));
        float _2591 = isnan(1.0) ? _2043 : (isnan(_2043) ? 1.0 : min(_2043, 1.0));
        _2507 = (((((_2571 * _2217) + _921) * cbLight._m0[_2522].x) * _2590) * _2591) + _2393;
        _2509 = (((((_2571 * _2219) + _923) * cbLight._m0[_2522].y) * _2590) * _2591) + _2395;
        _2511 = (((((_2571 * _2220) + _924) * cbLight._m0[_2522].z) * _2590) * _2591) + _2397;
    }
    float _2726;
    float _2728;
    float _2730;
    float _2732;
    float _2734;
    float _2736;
    if (_2025.y == 0u)
    {
        float _2666 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2667 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2666;
        float _2668 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2666;
        float _2669 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2666;
        uvec4 _2681 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2682 = _2681.x;
        uint _2693 = uint((float(_2681.y) * floor(float(uint(cbSceneParam._m0[85u].y * _860) / _2682))) + floor(float(uint(cbSceneParam._m0[85u].x * _859) / _2682)));
        float _2703 = (log2(_2669 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2704 = isnan(0.0) ? _2703 : (isnan(_2703) ? 0.0 : max(_2703, 0.0));
        uint _2707 = uint(isnan(14.0) ? _2704 : (isnan(_2704) ? 14.0 : min(_2704, 14.0)));
        uvec4 _2712 = texelFetch(g_lightClusterGridBuffer, int(((_2707 << 2u) + (_2693 << 6u)) >> 2u));
        uint _2713 = _2712.x;
        uint _2714 = _2681.z;
        float _2814;
        float _2816;
        float _2818;
        float _2820;
        float _2822;
        float _2824;
        if (((((1u << ((_2714 >> 4u) & 15u)) + 4294967295u) & _2713) == 0u) || ((_2714 & 240u) == 0u))
        {
            _2814 = 0.0;
            _2816 = 0.0;
            _2818 = 0.0;
            _2820 = 0.0;
            _2822 = 0.0;
            _2824 = 0.0;
        }
        else
        {
            float _2815;
            float _2817;
            float _2819;
            float _2821;
            float _2823;
            float _2825;
            float _2967 = 0.0;
            float _2968 = 0.0;
            float _2969 = 0.0;
            float _2970 = 0.0;
            float _2971 = 0.0;
            float _2972 = 0.0;
            uint _2973 = 0u;
            uint _2982;
            bool _2983;
            for (;;)
            {
                _2982 = texelFetch(g_lightClassification, int((((_2707 << 5u) + (_2693 << 9u)) + (_2973 << 2u)) >> 2u)).x;
                _2983 = _2982 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2983)
                {
                    frontier_phi_66_pred = _2967;
                    frontier_phi_66_pred_1 = _2972;
                    frontier_phi_66_pred_2 = _2971;
                    frontier_phi_66_pred_3 = _2970;
                    frontier_phi_66_pred_4 = _2969;
                    frontier_phi_66_pred_5 = _2968;
                }
                else
                {
                    float _3112;
                    float _3113;
                    float _3114;
                    float _3115;
                    float _3116;
                    float _3117;
                    uint _3118;
                    _3112 = _2967;
                    _3113 = _2968;
                    _3114 = _2969;
                    _3115 = _2970;
                    _3116 = _2971;
                    _3117 = _2972;
                    _3118 = _2982;
                    float _3039;
                    float _3040;
                    float _3041;
                    float _3042;
                    float _3043;
                    float _3044;
                    for (;;)
                    {
                        uint _3122 = uint(findLSB(_3118)) + (_2973 << 5u);
                        uint _3119 = (_3118 + 4294967295u) & _3118;
                        uint _3124 = _3122 * 48u;
                        vec4 _3138 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3124)).x, texelFetch(g_PointLightRenderingBuffer, int(_3124 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3124 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3124 + 3u)).x));
                        uint _3144 = (_3122 * 48u) + 4u;
                        vec4 _3157 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3144)).x, texelFetch(g_PointLightRenderingBuffer, int(_3144 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3144 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3144 + 3u)).x));
                        uint _3163 = (_3122 * 48u) + 8u;
                        vec3 _3174 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3163)).x, texelFetch(g_PointLightRenderingBuffer, int(_3163 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3163 + 2u)).x));
                        float _3178 = _3138.x - _2667;
                        float _3179 = _3138.y - _2668;
                        float _3180 = _3138.z - _2669;
                        float _3181 = dot(vec3(_3178, _3179, _3180), vec3(_3178, _3179, _3180));
                        float _3184 = inversesqrt(_3181);
                        float _3185 = _3184 * _3178;
                        float _3186 = _3184 * _3179;
                        float _3187 = _3184 * _3180;
                        float _3188 = dot(vec3(_878, _881, _884), vec3(_3185, _3186, _3187));
                        float _3193 = 1.0 - (_3181 * _3138.w);
                        float _4572 = isnan(0.0) ? _3193 : (isnan(_3193) ? 0.0 : max(_3193, 0.0));
                        float _3194 = isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0));
                        float _3195 = sqrt(_3181) * _3157.w;
                        float _3198 = 1.39999997615814208984375 / (_3195 + 1.39999997615814208984375);
                        float _3199 = _3198 * _3198;
                        float _3202 = ((1.0 - _3199) * _3188) + _3199;
                        float _3205 = _3195 * _3195;
                        float _3209 = ((isnan(0.0) ? _3202 : (isnan(_3202) ? 0.0 : max(_3202, 0.0))) * _3194) / ((_3205 * 0.699999988079071044921875) + 1.0);
                        float _3213 = (-0.0) - _2667;
                        float _3214 = (-0.0) - _2668;
                        float _3215 = (-0.0) - _2669;
                        float _3219 = inversesqrt(dot(vec3(_3213, _3214, _3215), vec3(_3213, _3214, _3215)));
                        float _3220 = _3219 * _3213;
                        float _3221 = _3219 * _3214;
                        float _3222 = _3219 * _3215;
                        float _3230 = exp2(log2(1.0 / ((_3205 * 3.5) + 5.0)) * 0.25);
                        float _3231 = 1.0 - _953;
                        float _3238 = sqrt(1.0 - ((1.0 - (_3231 * _3231)) * (1.0 - (_3230 * _3230))));
                        float _3239 = _3238 * _3238;
                        float _3240 = _3239 * _3239;
                        float _3241 = _3220 + _3185;
                        float _3242 = _3221 + _3186;
                        float _3243 = _3222 + _3187;
                        float _3247 = inversesqrt(dot(vec3(_3241, _3242, _3243), vec3(_3241, _3242, _3243)));
                        float _3251 = dot(vec3(_878, _881, _884), vec3(_3220, _3221, _3222));
                        float _4588 = isnan(0.0) ? _3251 : (isnan(_3251) ? 0.0 : max(_3251, 0.0));
                        float _3254 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
                        float _3255 = dot(vec3(_878, _881, _884), vec3(_3247 * _3241, _3247 * _3242, _3247 * _3243));
                        float _4599 = isnan(0.0) ? _3255 : (isnan(_3255) ? 0.0 : max(_3255, 0.0));
                        float _3258 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
                        float _3262 = ((_3258 * _3258) * (_3240 + (-1.0))) + 1.0;
                        float _3263 = _3198 * _3239;
                        float _3264 = _3263 * _3263;
                        float _3267 = ((1.0 - _3264) * _3188) + _3264;
                        float _4610 = isnan(0.0) ? _3267 : (isnan(_3267) ? 0.0 : max(_3267, 0.0));
                        float _3268 = isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0));
                        float _3269 = 1.0 - _3239;
                        float _3279 = (0.5 / (((_3268 * ((_3254 * _3269) + _3239)) + 9.9999999392252902907785028219223e-09) + (((_3268 * _3269) + _3239) * _3254))) * _3268;
                        float _4621 = isnan(0.0) ? _3279 : (isnan(_3279) ? 0.0 : max(_3279, 0.0));
                        float _3290 = (((_3240 * 3.1415927410125732421875) * (isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0)))) / ((_3262 * _3262) * ((_3205 * 2.1991131305694580078125) + 3.141590118408203125))) * _3194;
                        _3042 = (_3209 * _3157.x) + _3115;
                        _3043 = (_3209 * _3157.y) + _3116;
                        _3044 = (_3209 * _3157.z) + _3117;
                        _3039 = (_3290 * _3174.x) + _3112;
                        _3040 = (_3290 * _3174.y) + _3113;
                        _3041 = (_3290 * _3174.z) + _3114;
                        if (_3119 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3112 = _3039;
                            _3113 = _3040;
                            _3114 = _3041;
                            _3115 = _3042;
                            _3116 = _3043;
                            _3117 = _3044;
                            _3118 = _3119;
                        }
                    }
                    frontier_phi_66_pred = _3039;
                    frontier_phi_66_pred_1 = _3044;
                    frontier_phi_66_pred_2 = _3043;
                    frontier_phi_66_pred_3 = _3042;
                    frontier_phi_66_pred_4 = _3041;
                    frontier_phi_66_pred_5 = _3040;
                }
                _2815 = frontier_phi_66_pred;
                _2825 = frontier_phi_66_pred_1;
                _2823 = frontier_phi_66_pred_2;
                _2821 = frontier_phi_66_pred_3;
                _2819 = frontier_phi_66_pred_4;
                _2817 = frontier_phi_66_pred_5;
                uint _2974 = _2973 + 1u;
                if (_2974 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2967 = _2815;
                    _2968 = _2817;
                    _2969 = _2819;
                    _2970 = _2821;
                    _2971 = _2823;
                    _2972 = _2825;
                    _2973 = _2974;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2814 = _2815;
            _2816 = _2817;
            _2818 = _2819;
            _2820 = _2821;
            _2822 = _2823;
            _2824 = _2825;
        }
        uvec4 _2828 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2829 = _2828.z;
        uint _2831 = (_2829 >> 8u) & 15u;
        float _2935;
        float _2937;
        float _2939;
        float _2941;
        float _2943;
        float _2945;
        if (((4294967295u << _2831) & _2713) == 0u)
        {
            _2935 = _2814;
            _2937 = _2816;
            _2939 = _2818;
            _2941 = _2820;
            _2943 = _2822;
            _2945 = _2824;
        }
        else
        {
            float _2960 = inversesqrt(dot(vec3(_2667, _2668, _2669), vec3(_2667, _2668, _2669)));
            float _2961 = _2960 * _2667;
            float _2962 = _2960 * _2668;
            float _2963 = _2960 * _2669;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2831 < ((_2829 >> 12u) & 15u))
            {
                float _2936;
                float _2938;
                float _2940;
                float _2942;
                float _2944;
                float _2946;
                float _3095 = _2814;
                float _3096 = _2816;
                float _3097 = _2818;
                float _3098 = _2820;
                float _3099 = _2822;
                float _3100 = _2824;
                uint _3101 = _2831;
                uint _3110;
                bool _3111;
                for (;;)
                {
                    _3110 = texelFetch(g_lightClassification, int((((_2707 << 5u) + (_2693 << 9u)) + (_3101 << 2u)) >> 2u)).x;
                    _3111 = _3110 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3111)
                    {
                        frontier_phi_77_pred = _3100;
                        frontier_phi_77_pred_1 = _3099;
                        frontier_phi_77_pred_2 = _3098;
                        frontier_phi_77_pred_3 = _3097;
                        frontier_phi_77_pred_4 = _3096;
                        frontier_phi_77_pred_5 = _3095;
                    }
                    else
                    {
                        float _3304;
                        float _3305;
                        float _3306;
                        float _3307;
                        float _3308;
                        float _3309;
                        float _3597;
                        float _3598;
                        float _3599;
                        float _3600;
                        float _3601;
                        float _3602;
                        float _3317 = _3095;
                        float _3318 = _3096;
                        float _3319 = _3097;
                        float _3320 = _3098;
                        float _3321 = _3099;
                        float _3322 = _3100;
                        uint _3323 = _3110;
                        uint _3324;
                        vec4 _3349;
                        float _3350;
                        vec4 _3365;
                        vec3 _3377;
                        vec4 _3392;
                        vec4 _3407;
                        float _3453;
                        bool _3454;
                        for (;;)
                        {
                            uint _3334 = ((_3101 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3323));
                            _3324 = (_3323 + 4294967295u) & _3323;
                            uint _3336 = _3334 * 40u;
                            _3349 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3336)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3336 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3336 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3336 + 3u)).x));
                            _3350 = _3349.w;
                            uint _3352 = (_3334 * 40u) + 4u;
                            _3365 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3352)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3352 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3352 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3352 + 3u)).x));
                            uint _3367 = (_3334 * 40u) + 8u;
                            _3377 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3367)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 2u)).x));
                            uint _3379 = (_3334 * 40u) + 16u;
                            _3392 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3379)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3379 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3379 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3379 + 3u)).x));
                            uint _3394 = (_3334 * 40u) + 20u;
                            _3407 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3394)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 3u)).x));
                            uint _3409 = (_3334 * 40u) + 24u;
                            vec4 _3422 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3409)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 3u)).x));
                            uint _3428 = (_3334 * 40u) + 28u;
                            vec4 _3441 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3428)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 3u)).x));
                            _3453 = fma(_2669, _3441.z, fma(_2668, _3441.y, _3441.x * _2667)) + _3441.w;
                            _3454 = !((fma(_2669, _3422.z, fma(_2668, _3422.y, _3422.x * _2667)) + _3422.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3454)
                            {
                                float _3481 = _3349.x - _2667;
                                float _3482 = _3349.y - _2668;
                                float _3483 = _3349.z - _2669;
                                float _3484 = dot(vec3(_3481, _3482, _3483), vec3(_3481, _3482, _3483));
                                float _3487 = inversesqrt(_3484);
                                float _3488 = _3487 * _3481;
                                float _3489 = _3487 * _3482;
                                float _3490 = _3487 * _3483;
                                float _3494 = 1.0 - (_3484 / (_3350 * _3350));
                                float _4632 = isnan(0.0) ? _3494 : (isnan(_3494) ? 0.0 : max(_3494, 0.0));
                                float _3495 = isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0));
                                float _3499 = sqrt(_3484) * _3365.w;
                                float _3501 = 1.39999997615814208984375 / (_3499 + 1.39999997615814208984375);
                                float _3502 = _3501 * _3501;
                                float _3505 = ((1.0 - _3502) * dot(vec3(_3488, _3489, _3490), vec3(_878, _881, _884))) + _3502;
                                float _3508 = _3499 * _3499;
                                float _3512 = (fma(_2669, _3392.z, fma(_2668, _3392.y, _3392.x * _2667)) + _3392.w) / _3453;
                                float _3513 = (fma(_2669, _3407.z, fma(_2668, _3407.y, _3407.x * _2667)) + _3407.w) / _3453;
                                float _3517 = 1.0 - dot(vec2(_3512, _3513), vec2(_3512, _3513));
                                float _4648 = isnan(0.0) ? _3517 : (isnan(_3517) ? 0.0 : max(_3517, 0.0));
                                float _3518 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
                                float _3519 = _3518 * (((isnan(0.0) ? _3505 : (isnan(_3505) ? 0.0 : max(_3505, 0.0))) * _3495) / ((_3508 * 0.699999988079071044921875) + 1.0));
                                float _3531 = exp2(log2(1.0 / ((_3508 * 3.5) + 5.0)) * 0.25);
                                float _3532 = 1.0 - _953;
                                float _3539 = sqrt(1.0 - ((1.0 - (_3532 * _3532)) * (1.0 - (_3531 * _3531))));
                                float _3540 = _3539 * _3539;
                                float _3541 = _3540 * _3540;
                                float _3542 = _3488 - _2961;
                                float _3543 = _3489 - _2962;
                                float _3544 = _3490 - _2963;
                                float _3548 = inversesqrt(dot(vec3(_3542, _3543, _3544), vec3(_3542, _3543, _3544)));
                                float _3552 = dot(vec3(_878, _881, _884), vec3((-0.0) - _2961, (-0.0) - _2962, (-0.0) - _2963));
                                float _4659 = isnan(0.0) ? _3552 : (isnan(_3552) ? 0.0 : max(_3552, 0.0));
                                float _3555 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
                                float _3556 = dot(vec3(_878, _881, _884), vec3(_3548 * _3542, _3548 * _3543, _3548 * _3544));
                                float _4670 = isnan(0.0) ? _3556 : (isnan(_3556) ? 0.0 : max(_3556, 0.0));
                                float _3559 = isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0));
                                float _3563 = ((_3559 * _3559) * (_3541 + (-1.0))) + 1.0;
                                float _3564 = _3501 * _3540;
                                float _3565 = _3564 * _3564;
                                float _3571 = ((1.0 - _3565) * dot(vec3(_878, _881, _884), vec3(_3488, _3489, _3490))) + _3565;
                                float _4681 = isnan(0.0) ? _3571 : (isnan(_3571) ? 0.0 : max(_3571, 0.0));
                                float _3572 = isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0));
                                float _3573 = 1.0 - _3540;
                                float _3583 = (0.5 / (((_3572 * ((_3555 * _3573) + _3540)) + 9.9999999392252902907785028219223e-09) + (((_3572 * _3573) + _3540) * _3555))) * _3572;
                                float _4692 = isnan(0.0) ? _3583 : (isnan(_3583) ? 0.0 : max(_3583, 0.0));
                                float _3593 = (_3518 * _3495) * (((_3541 * 3.1415927410125732421875) * (isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0)))) / ((_3563 * _3563) * ((_3508 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3519 * _3365.y;
                                frontier_phi_83_pred_1 = _3519 * _3365.x;
                                frontier_phi_83_pred_2 = _3593 * _3377.z;
                                frontier_phi_83_pred_3 = _3593 * _3377.y;
                                frontier_phi_83_pred_4 = _3593 * _3377.x;
                                frontier_phi_83_pred_5 = _3519 * _3365.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3601 = frontier_phi_83_pred;
                            _3600 = frontier_phi_83_pred_1;
                            _3599 = frontier_phi_83_pred_2;
                            _3598 = frontier_phi_83_pred_3;
                            _3597 = frontier_phi_83_pred_4;
                            _3602 = frontier_phi_83_pred_5;
                            _3307 = _3600 + _3320;
                            _3308 = _3601 + _3321;
                            _3309 = _3602 + _3322;
                            _3304 = _3597 + _3317;
                            _3305 = _3598 + _3318;
                            _3306 = _3599 + _3319;
                            if (_3324 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3317 = _3304;
                                _3318 = _3305;
                                _3319 = _3306;
                                _3320 = _3307;
                                _3321 = _3308;
                                _3322 = _3309;
                                _3323 = _3324;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3309;
                        frontier_phi_77_pred_1 = _3308;
                        frontier_phi_77_pred_2 = _3307;
                        frontier_phi_77_pred_3 = _3306;
                        frontier_phi_77_pred_4 = _3305;
                        frontier_phi_77_pred_5 = _3304;
                    }
                    _2946 = frontier_phi_77_pred;
                    _2944 = frontier_phi_77_pred_1;
                    _2942 = frontier_phi_77_pred_2;
                    _2940 = frontier_phi_77_pred_3;
                    _2938 = frontier_phi_77_pred_4;
                    _2936 = frontier_phi_77_pred_5;
                    uint _3102 = _3101 + 1u;
                    if (_3102 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3095 = _2936;
                        _3096 = _2938;
                        _3097 = _2940;
                        _3098 = _2942;
                        _3099 = _2944;
                        _3100 = _2946;
                        _3101 = _3102;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2940;
                frontier_phi_58_59_ladder_1 = _2946;
                frontier_phi_58_59_ladder_2 = _2944;
                frontier_phi_58_59_ladder_3 = _2942;
                frontier_phi_58_59_ladder_4 = _2938;
                frontier_phi_58_59_ladder_5 = _2936;
            }
            else
            {
                frontier_phi_58_59_ladder = _2818;
                frontier_phi_58_59_ladder_1 = _2824;
                frontier_phi_58_59_ladder_2 = _2822;
                frontier_phi_58_59_ladder_3 = _2820;
                frontier_phi_58_59_ladder_4 = _2816;
                frontier_phi_58_59_ladder_5 = _2814;
            }
            _2935 = frontier_phi_58_59_ladder_5;
            _2937 = frontier_phi_58_59_ladder_4;
            _2939 = frontier_phi_58_59_ladder;
            _2941 = frontier_phi_58_59_ladder_3;
            _2943 = frontier_phi_58_59_ladder_2;
            _2945 = frontier_phi_58_59_ladder_1;
        }
        float _2950 = isnan(1.0) ? _937 : (isnan(_937) ? 1.0 : min(_937, 1.0));
        _2726 = (_2950 * _2941) + _2159;
        _2728 = (_2950 * _2943) + _2161;
        _2730 = (_2950 * _2945) + _2163;
        _2732 = ((_2935 * _921) * _2950) + _2507;
        _2734 = ((_2937 * _923) * _2950) + _2509;
        _2736 = ((_2939 * _924) * _2950) + _2511;
    }
    else
    {
        _2726 = _2159;
        _2728 = _2161;
        _2730 = _2163;
        _2732 = _2507;
        _2734 = _2509;
        _2736 = _2511;
    }
    float _4708 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
    float _4719 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
    float _4730 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
    float _2753 = ((isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0))) * (_2726 + ((isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0))) * _937))) + ((_2732 + ((isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0))) * _1775)) * cbPerFrame._m0[3u].x);
    float _2754 = ((isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0))) * (_2728 + ((isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0))) * _937))) + ((_2734 + ((isnan(0.0) ? _1994 : (isnan(_1994) ? 0.0 : max(_1994, 0.0))) * _1775)) * cbPerFrame._m0[3u].x);
    float _2755 = ((isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0))) * (_2730 + ((isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0))) * _937))) + ((_2736 + ((isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0))) * _1775)) * cbPerFrame._m0[3u].x);
    uint _2756 = _257 + 6u;
    float _2764 = _859 / cbSceneParam._m0[86u].x;
    float _2765 = _860 / cbSceneParam._m0[86u].y;
    vec4 _2779 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2764, _2765, (log2((isnan(cbSceneParam._m0[77u].w) ? _782 : (isnan(_782) ? cbSceneParam._m0[77u].w : min(_782, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2781 = _2779.x;
    float _2782 = _2779.y;
    float _2783 = _2779.z;
    float _2784 = _2779.w;
    float _2877;
    float _2879;
    float _2881;
    float _2883;
    if (_782 > cbSceneParam._m0[78u].w)
    {
        float _2839 = isnan(_782) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _782 : min(cbSceneParam._m0[80u].w, _782));
        float _2840 = _2839 / _782;
        float _2851 = _2840 * _832;
        float _2852 = _833 * _2840;
        float _2853 = (-0.0) - _2852;
        float _2855 = _2840 * _834;
        float _2857 = (cbSceneParam._m0[77u].w * _2853) / _2839;
        float _2858 = _2857 + cbSceneParam._m0[79u].w;
        float _2859 = cbSceneParam._m0[79u].w - _2852;
        float _2865 = sqrt(((_2851 * _2851) + (_2852 * _2852)) + (_2855 * _2855));
        float _2868 = (1.0 - (cbSceneParam._m0[77u].w / _2839)) * _2865;
        float _2873 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2875 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3052;
        if (abs((_2853 - _2857) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3052 = ((((_2858 > 0.0) ? exp2(_2873 * _2858) : (2.0 - exp2(_2875 * _2858))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2868;
        }
        else
        {
            float _2996 = 1.0 / cbSceneParam._m0[80u].x;
            float _2997 = isnan(_2859) ? _2858 : (isnan(_2858) ? _2859 : max(_2858, _2859));
            float _2998 = isnan(_2859) ? _2858 : (isnan(_2858) ? _2859 : min(_2858, _2859));
            float _3007 = isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : min(_2997, 0.0));
            float _3008 = isnan(0.0) ? _2998 : (isnan(_2998) ? 0.0 : min(_2998, 0.0));
            _3052 = ((abs(_2865 / _2853) * cbSceneParam._m0[80u].y) * ((((_3007 - _3008) * 2.0) - ((exp2(_2873 * (isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : max(_2997, 0.0)))) - exp2(_2873 * (isnan(0.0) ? _2998 : (isnan(_2998) ? 0.0 : max(_2998, 0.0))))) * _2996)) - ((exp2(_2875 * _3007) - exp2(_2875 * _3008)) * _2996))) + (_2868 * cbSceneParam._m0[80u].z);
        }
        vec4 _3054 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2764, _2765, 1.0), 0.0);
        float _3063 = exp2((_3052 * (-1.44269502162933349609375)) * (1.0 - _3054.w));
        float _3064 = log2(_3063);
        float _3080 = log2(_2784);
        _2877 = (exp2(_3080 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3064 * cbSceneParam._m0[78u].x)) * _3054.x) / cbSceneParam._m0[78u].x)) + _2781;
        _2879 = (exp2(_3080 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3064 * cbSceneParam._m0[78u].y)) * _3054.y) / cbSceneParam._m0[78u].y)) + _2782;
        _2881 = (exp2(_3080 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3064 * cbSceneParam._m0[78u].z)) * _3054.z) / cbSceneParam._m0[78u].z)) + _2783;
        _2883 = _3063 * _2784;
    }
    else
    {
        _2877 = _2781;
        _2879 = _2782;
        _2881 = _2783;
        _2883 = _2784;
    }
    bool _3090;
    vec4 _2893;
    vec4 _2915;
    float _2917;
    float _2921;
    float _2922;
    float _2923;
    float _2924;
    bool _2934;
    for (;;)
    {
        _2893 = cbMatDynParam._m0[0u];
        float _2895 = roundEven(_2893.y);
        bool _2896 = _2895 == 3.0;
        float _2897 = log2(_2883);
        float _2904 = exp2(_2897 * cbSceneParam._m0[78u].x) * _2753;
        float _2905 = exp2(_2897 * cbSceneParam._m0[78u].y) * _2754;
        float _2906 = exp2(_2897 * cbSceneParam._m0[78u].z) * _2755;
        float _2913 = _848 + (-0.5);
        _2915 = cbMtdParam._m0[1u];
        _2917 = _2915.y * _2913;
        float _2920 = (_2895 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2921 = _2920 * (_2896 ? _2904 : (_2904 + (cbSceneParam._m0[72u].w * _2877)));
        _2922 = _2920 * (_2896 ? _2905 : (_2905 + (cbSceneParam._m0[72u].w * _2879)));
        _2923 = _2920 * (_2896 ? _2906 : (_2906 + (cbSceneParam._m0[72u].w * _2881)));
        _2924 = _2913 * 0.999000012874603271484375;
        _2934 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2934)
        {
            if ((cbInstanceData._m0[_257 + 7u].x + _2924) < 0.5)
            {
                _3090 = true;
                break;
            }
        }
        uint _3031 = _897 + uint(_2893.w);
        if ((cbInstanceData._m0[_3031].w < 1.0) && ((cbInstanceData._m0[_3031].w + _2924) < 0.5))
        {
            _3090 = true;
            break;
        }
        if ((_2917 + 1.0) < _2915.x)
        {
            _3090 = true;
            break;
        }
        _3090 = false;
        break;
    }
    float _3295;
    if (_3090)
    {
        discard_state = true;
        _3295 = 0.0;
    }
    else
    {
        _3295 = cbInstanceData._m0[_2756].w;
    }
    SV_Target.x = _2921;
    SV_Target.y = _2922;
    SV_Target.z = _2923;
    SV_Target.w = _3295;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2756].w;
    discard_exit();
}


