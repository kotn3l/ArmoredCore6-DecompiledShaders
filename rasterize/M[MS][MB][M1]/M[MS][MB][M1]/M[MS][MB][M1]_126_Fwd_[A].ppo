#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1237;
float _3617;
float _3618;
float _3619;
float _3620;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _212 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _213 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _214 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _220 = inversesqrt(dot(vec3(_212, _213, _214), vec3(_212, _213, _214)));
    float _227 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _234 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _240 = uint(roundEven(NORMAL.w)) * 13u;
    uint _246 = _240 + 1u;
    uint _250 = _240 + 2u;
    float _259 = sqrt(((cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x) + (cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x)) + (cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x));
    float _260 = _259 * TEXCOORD.z;
    float _261 = _259 * TEXCOORD.w;
    vec4 _281 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _287 = _281.x * cbMtdParam._m0[11u].x;
    float _288 = _281.y * cbMtdParam._m0[11u].y;
    float _289 = _281.z * cbMtdParam._m0[11u].z;
    vec4 _308 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _260) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _261) + cbTextureTilingScale._m0[5u].w));
    vec4 _346 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _348 = _346.x;
    float _360 = dot(vec4(_348, _346.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _377 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_348 - _360) * cbMtdParam._m0[24u].y) + _360) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3629 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _378 = isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0));
    float _385 = (_378 * ((_308.x * cbMtdParam._m0[12u].x) - _287)) + _287;
    float _386 = (_378 * ((_308.y * cbMtdParam._m0[12u].y) - _288)) + _288;
    float _387 = (_378 * ((_308.z * cbMtdParam._m0[12u].z) - _289)) + _289;
    vec4 _406 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _260) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _261) + cbTextureTilingScale._m0[14u].w));
    vec4 _426 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _260) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _261) + cbTextureTilingScale._m0[4u].w));
    vec4 _443 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _445 = _443.x;
    float _446 = _443.y;
    float _447 = _443.z;
    float _456 = ((_426.z - _447) * _378) + _447;
    float _459 = ((((_426.x - _445) * _378) + _445) * 2.0) + (-1.0);
    float _461 = ((((_426.y - _446) * _378) + _446) * 2.0) + (-1.0);
    float _462 = dot(vec2(_459, _461), vec2(_459, _461));
    float _3640 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _467 = sqrt(1.0 - (isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0))));
    vec4 _483 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _508 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _260) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _261) + cbTextureTilingScale._m0[11u].w));
    float _510 = _508.x;
    float _511 = 1.0 - _510;
    float _524 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_510 - _511) * cbMtdParam._m0[24u].z) + _511) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3651 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _525 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
    float _532 = (_525 * ((_406.x * cbMtdParam._m0[18u].x) - _385)) + _385;
    float _533 = (_525 * ((_406.y * cbMtdParam._m0[18u].y) - _386)) + _386;
    float _534 = (_525 * ((_406.z * cbMtdParam._m0[18u].z) - _387)) + _387;
    vec4 _546 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _560 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _562 = _560.x;
    float _580 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _260) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _261) + cbTextureTilingScale._m0[9u].w)).x - _562) * _378) + _562;
    float _584 = ((_546.x - _580) * cbMtdParam._m0[19u].z) + _580;
    float _586 = _584 - (_584 * _525);
    float _590 = (cbMtdParam._m0[19u].w * (_483.z - _456)) + _456;
    vec4 _603 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _260) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _261) + cbTextureTilingScale._m0[15u].w));
    float _610 = (_603.x * 2.0) + (-1.0);
    float _611 = (_603.y * 2.0) + (-1.0);
    float _612 = dot(vec2(_610, _611), vec2(_610, _611));
    float _3662 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _620 = (_525 * (_603.z - _590)) + _590;
    float _623 = (((_483.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _459;
    float _624 = (((_483.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _461;
    float _636 = (((_610 - _623) + (cbMtdParam._m0[21u].x * _623)) * _525) + _623;
    float _637 = (((_611 - _624) + (cbMtdParam._m0[21u].x * _624)) * _525) + _624;
    float _638 = (_525 * (sqrt(1.0 - (isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0)))) - _467)) + _467;
    float _643 = cbMtdParam._m0[22u].x + _483.w;
    float _646 = fma(_638, _227 * NORMAL.x, fma(_637, _234 * TANGENT.x, (_220 * _212) * _636));
    float _649 = fma(_638, _227 * NORMAL.y, fma(_637, _234 * TANGENT.y, (_220 * _213) * _636));
    float _652 = fma(_638, _227 * NORMAL.z, fma(_637, _234 * TANGENT.z, (_220 * _214) * _636));
    float _656 = inversesqrt(dot(vec3(_646, _649, _652), vec3(_646, _649, _652)));
    float _657 = _656 * _646;
    float _658 = _656 * _649;
    float _659 = _656 * _652;
    float _3673 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _660 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
    float _3684 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _3695 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    float _3706 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _3717 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _3728 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
    float _665 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
    float _679 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _720 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _730 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _720);
    float _731 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _720);
    float _732 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _720);
    float _736 = inversesqrt(dot(vec3(_730, _731, _732), vec3(_730, _731, _732)));
    float _737 = _730 * _736;
    float _738 = _731 * _736;
    float _739 = _732 * _736;
    vec4 _744 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _746 = _744.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _918 = sqrt(((_730 * _730) + (_731 * _731)) + (_732 * _732));
        float _924 = (cbMatDynParam._m0[5u].x * _918) + cbMatDynParam._m0[5u].y;
        float _3739 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
        float _925 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
        float _929 = (cbMatDynParam._m0[5u].z * _918) + cbMatDynParam._m0[5u].w;
        float _3750 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0))) - _925)) + _925) < ((_746 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _757 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _758 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _776 = fma(_659, cbSceneParam._m0[5u].z, fma(_658, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _657));
    float _779 = fma(_659, cbSceneParam._m0[6u].z, fma(_658, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _657));
    float _782 = fma(_659, cbSceneParam._m0[7u].z, fma(_658, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _657));
    uint _795 = _240 + 9u;
    uint _796 = _795 + uint(cbMatDynParam._m0[0u].w);
    float _802 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0)))) * cbInstanceData._m0[_796].x;
    float _803 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0)))) * cbInstanceData._m0[_796].y;
    float _804 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0)))) * cbInstanceData._m0[_796].z;
    float _3761 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
    float _805 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
    float _3772 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
    float _806 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
    float _3783 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
    float _807 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
    float _808 = 1.0 - _665;
    float _809 = _805 * _808;
    float _810 = _806 * _808;
    float _811 = _807 * _808;
    float _816 = (_805 + (-0.039999999105930328369140625)) * _665;
    float _817 = (_806 + (-0.039999999105930328369140625)) * _665;
    float _818 = (_807 + (-0.039999999105930328369140625)) * _665;
    float _819 = _816 + 0.039999999105930328369140625;
    float _821 = _817 + 0.039999999105930328369140625;
    float _822 = _818 + 0.039999999105930328369140625;
    vec4 _831 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _757, cbSceneParam._m0[86u].y * _758));
    float _835 = ((isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0))) * TEXCOORD_5.w) * _831.x;
    float _836 = dot(vec3(_657, _658, _659), vec3(_737, _738, _739));
    float _839 = _836 * 2.0;
    float _843 = (_839 * _657) - _737;
    float _844 = (_839 * _658) - _738;
    float _845 = (_839 * _659) - _739;
    float _849 = abs(dot(vec3(_737, _738, _739), vec3(_657, _658, _659)));
    float _3794 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
    float _851 = sqrt(_660);
    float _864 = exp2((_851 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_851 * 3.0));
    float _870 = (1.0 - _864) * ((_851 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _871 = _864 * _851;
    float _899 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _903 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _907 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1236;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _961 = fma(_907, cbModelParam._m0[26u].z, fma(_903, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _899));
        float _965 = fma(_907, cbModelParam._m0[27u].z, fma(_903, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _899));
        float _969 = fma(_907, cbModelParam._m0[28u].z, fma(_903, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _899));
        float _994 = _899 + _657;
        float _995 = _903 + _658;
        float _996 = _907 + _659;
        float _1006 = fma(_996, cbModelParam._m0[26u].z, fma(_995, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _994)) - _961;
        float _1007 = fma(_996, cbModelParam._m0[27u].z, fma(_995, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _994)) - _965;
        float _1008 = fma(_996, cbModelParam._m0[28u].z, fma(_995, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _994)) - _969;
        float _1012 = inversesqrt(dot(vec3(_1006, _1007, _1008), vec3(_1006, _1007, _1008)));
        float _1025 = ((_1012 * _1006) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_961 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1026 = ((_1012 * _1007) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_965 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1027 = ((_1012 * _1008) / cbModelParam._m0[34u].z) + ((((((_969 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1030 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1025, _1026, _1027), 0.0);
        vec4 _1037 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1025, _1026, _1027), 0.0);
        vec4 _1044 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1025, _1026, _1027), 0.0);
        vec4 _1051 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1025, _1026, _1027), 0.0);
        float _1064 = exp2((_1030.w + (-0.5)) * 20.0) * 2.0;
        float _1065 = _1064 * (_1030.x + (-0.5));
        float _1066 = _1064 * (_1030.y + (-0.5));
        float _1067 = _1064 * (_1030.z + (-0.5));
        float _1074 = exp2((_1037.w + (-0.5)) * 20.0) * 2.0;
        float _1075 = _1074 * (_1037.x + (-0.5));
        float _1076 = _1074 * (_1037.y + (-0.5));
        float _1077 = _1074 * (_1037.z + (-0.5));
        float _1084 = exp2((_1044.w + (-0.5)) * 20.0) * 2.0;
        float _1085 = _1084 * (_1044.x + (-0.5));
        float _1086 = _1084 * (_1044.y + (-0.5));
        float _1087 = _1084 * (_1044.z + (-0.5));
        float _1094 = exp2((_1051.w + (-0.5)) * 20.0) * 2.0;
        float _1095 = _1094 * (_1051.x + (-0.5));
        float _1096 = _1094 * (_1051.y + (-0.5));
        float _1097 = _1094 * (_1051.z + (-0.5));
        float _1098 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1099 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1100 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1101 = _1065 * 0.5;
        float _1102 = _1075 * 0.5;
        float _1103 = _1085 * 0.5;
        float _1104 = dot(vec3(_1101, _1102, _1103), vec3(_1101, _1102, _1103));
        float _1109 = (_1104 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1104);
        float _1118 = (dot(vec3(_657, _658, _659), vec3(_1109 * _1101, _1109 * _1102, _1109 * _1103)) + 1.0) * 0.5;
        float _3820 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1128 = sqrt(((_1102 * _1102) + (_1101 * _1101)) + (_1103 * _1103)) / (_1098 + 9.9999997473787516355514526367188e-06);
        float _3831 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1129 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
        float _1130 = _1129 * 2.0;
        float _1134 = (1.0 - _1129) / (_1129 + 1.0);
        float _3842 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1135 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
        float _1144 = ((((1.0 - _1135) * (_1130 + 2.0)) * exp2(log2(isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0))) * (_1130 + 1.0))) + _1135) * _1098;
        float _1145 = _1066 * 0.5;
        float _1146 = _1076 * 0.5;
        float _1147 = _1086 * 0.5;
        float _1148 = dot(vec3(_1145, _1146, _1147), vec3(_1145, _1146, _1147));
        float _1153 = (_1148 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1148);
        float _1161 = (dot(vec3(_657, _658, _659), vec3(_1153 * _1145, _1153 * _1146, _1153 * _1147)) + 1.0) * 0.5;
        float _3853 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1170 = sqrt(((_1146 * _1146) + (_1145 * _1145)) + (_1147 * _1147)) / (_1099 + 9.9999997473787516355514526367188e-06);
        float _3864 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1171 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
        float _1172 = _1171 * 2.0;
        float _1176 = (1.0 - _1171) / (_1171 + 1.0);
        float _3875 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1177 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
        float _1186 = ((((1.0 - _1177) * (_1172 + 2.0)) * exp2(log2(isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0))) * (_1172 + 1.0))) + _1177) * _1099;
        float _1187 = _1067 * 0.5;
        float _1188 = _1077 * 0.5;
        float _1189 = _1087 * 0.5;
        float _1190 = dot(vec3(_1187, _1188, _1189), vec3(_1187, _1188, _1189));
        float _1195 = (_1190 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1190);
        float _1203 = (dot(vec3(_657, _658, _659), vec3(_1195 * _1187, _1195 * _1188, _1195 * _1189)) + 1.0) * 0.5;
        float _3886 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1212 = sqrt(((_1188 * _1188) + (_1187 * _1187)) + (_1189 * _1189)) / (_1100 + 9.9999997473787516355514526367188e-06);
        float _3897 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1213 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
        float _1214 = _1213 * 2.0;
        float _1218 = (1.0 - _1213) / (_1213 + 1.0);
        float _3908 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1219 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
        float _1228 = ((((1.0 - _1219) * (_1214 + 2.0)) * exp2(log2(isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0))) * (_1214 + 1.0))) + _1219) * _1100;
        _1236 = _1067;
        _1238 = _1066;
        _1239 = _1065;
        _1240 = _1077;
        _1241 = _1076;
        _1242 = _1075;
        _1243 = _1087;
        _1244 = _1086;
        _1245 = _1085;
        _1246 = _1100;
        _1247 = _1099;
        _1248 = _1098;
        _1249 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0)));
        _1250 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0)));
        _1251 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0)));
    }
    else
    {
        _1236 = _1237;
        _1238 = _1237;
        _1239 = _1237;
        _1240 = _1237;
        _1241 = _1237;
        _1242 = _1237;
        _1243 = _1237;
        _1244 = _1237;
        _1245 = _1237;
        _1246 = _1237;
        _1247 = _1237;
        _1248 = _1237;
        _1249 = 0.0;
        _1250 = 0.0;
        _1251 = 0.0;
    }
    float _1548;
    float _1549;
    float _1550;
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1279 = fma(_907, cbModelParam._m0[30u].z, fma(_903, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _899));
        float _1283 = fma(_907, cbModelParam._m0[31u].z, fma(_903, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _899));
        float _1287 = fma(_907, cbModelParam._m0[32u].z, fma(_903, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _899));
        float _1310 = _899 + _657;
        float _1311 = _903 + _658;
        float _1312 = _907 + _659;
        float _1322 = fma(_1312, cbModelParam._m0[30u].z, fma(_1311, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1310)) - _1279;
        float _1323 = fma(_1312, cbModelParam._m0[31u].z, fma(_1311, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1310)) - _1283;
        float _1324 = fma(_1312, cbModelParam._m0[32u].z, fma(_1311, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1310)) - _1287;
        float _1328 = inversesqrt(dot(vec3(_1322, _1323, _1324), vec3(_1322, _1323, _1324)));
        float _1341 = ((_1328 * _1322) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1279 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1342 = ((_1328 * _1323) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1283 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1343 = ((_1328 * _1324) / cbModelParam._m0[35u].z) + ((((((_1287 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1345 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1341, _1342, _1343), 0.0);
        vec4 _1352 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1341, _1342, _1343), 0.0);
        vec4 _1359 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1341, _1342, _1343), 0.0);
        vec4 _1366 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1341, _1342, _1343), 0.0);
        float _1378 = exp2((_1345.w + (-0.5)) * 20.0) * 2.0;
        float _1379 = _1378 * (_1345.x + (-0.5));
        float _1380 = _1378 * (_1345.y + (-0.5));
        float _1381 = _1378 * (_1345.z + (-0.5));
        float _1388 = exp2((_1352.w + (-0.5)) * 20.0) * 2.0;
        float _1389 = _1388 * (_1352.x + (-0.5));
        float _1390 = _1388 * (_1352.y + (-0.5));
        float _1391 = _1388 * (_1352.z + (-0.5));
        float _1398 = exp2((_1359.w + (-0.5)) * 20.0) * 2.0;
        float _1399 = _1398 * (_1359.x + (-0.5));
        float _1400 = _1398 * (_1359.y + (-0.5));
        float _1401 = _1398 * (_1359.z + (-0.5));
        float _1408 = exp2((_1366.w + (-0.5)) * 20.0) * 2.0;
        float _1409 = _1408 * (_1366.x + (-0.5));
        float _1410 = _1408 * (_1366.y + (-0.5));
        float _1411 = _1408 * (_1366.z + (-0.5));
        float _1412 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1413 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1414 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1415 = _1379 * 0.5;
        float _1416 = _1389 * 0.5;
        float _1417 = _1399 * 0.5;
        float _1418 = dot(vec3(_1415, _1416, _1417), vec3(_1415, _1416, _1417));
        float _1423 = (_1418 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1418);
        float _1431 = (dot(vec3(_657, _658, _659), vec3(_1423 * _1415, _1423 * _1416, _1423 * _1417)) + 1.0) * 0.5;
        float _3949 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1440 = sqrt(((_1416 * _1416) + (_1415 * _1415)) + (_1417 * _1417)) / (_1412 + 9.9999997473787516355514526367188e-06);
        float _3960 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1441 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
        float _1442 = _1441 * 2.0;
        float _1446 = (1.0 - _1441) / (_1441 + 1.0);
        float _3971 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1447 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
        float _1456 = ((((1.0 - _1447) * (_1442 + 2.0)) * exp2(log2(isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0))) * (_1442 + 1.0))) + _1447) * _1412;
        float _1457 = _1380 * 0.5;
        float _1458 = _1390 * 0.5;
        float _1459 = _1400 * 0.5;
        float _1460 = dot(vec3(_1457, _1458, _1459), vec3(_1457, _1458, _1459));
        float _1465 = (_1460 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1460);
        float _1473 = (dot(vec3(_657, _658, _659), vec3(_1465 * _1457, _1465 * _1458, _1465 * _1459)) + 1.0) * 0.5;
        float _3982 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1482 = sqrt(((_1458 * _1458) + (_1457 * _1457)) + (_1459 * _1459)) / (_1413 + 9.9999997473787516355514526367188e-06);
        float _3993 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1483 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
        float _1484 = _1483 * 2.0;
        float _1488 = (1.0 - _1483) / (_1483 + 1.0);
        float _4004 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1489 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
        float _1498 = ((((1.0 - _1489) * (_1484 + 2.0)) * exp2(log2(isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0))) * (_1484 + 1.0))) + _1489) * _1413;
        float _1499 = _1381 * 0.5;
        float _1500 = _1391 * 0.5;
        float _1501 = _1401 * 0.5;
        float _1502 = dot(vec3(_1499, _1500, _1501), vec3(_1499, _1500, _1501));
        float _1507 = (_1502 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1502);
        float _1515 = (dot(vec3(_657, _658, _659), vec3(_1507 * _1499, _1507 * _1500, _1507 * _1501)) + 1.0) * 0.5;
        float _4015 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1524 = sqrt(((_1500 * _1500) + (_1499 * _1499)) + (_1501 * _1501)) / (_1414 + 9.9999997473787516355514526367188e-06);
        float _4026 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
        float _1525 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
        float _1526 = _1525 * 2.0;
        float _1530 = (1.0 - _1525) / (_1525 + 1.0);
        float _4037 = isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0));
        float _1531 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
        float _1540 = ((((1.0 - _1531) * (_1526 + 2.0)) * exp2(log2(isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0))) * (_1526 + 1.0))) + _1531) * _1414;
        _1548 = _1381;
        _1549 = _1380;
        _1550 = _1379;
        _1551 = _1391;
        _1552 = _1390;
        _1553 = _1389;
        _1554 = _1401;
        _1555 = _1400;
        _1556 = _1399;
        _1557 = _1414;
        _1558 = _1413;
        _1559 = _1412;
        _1560 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0)));
        _1561 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0)));
        _1562 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0)));
    }
    else
    {
        _1548 = _1237;
        _1549 = _1237;
        _1550 = _1237;
        _1551 = _1237;
        _1552 = _1237;
        _1553 = _1237;
        _1554 = _1237;
        _1555 = _1237;
        _1556 = _1237;
        _1557 = _1237;
        _1558 = _1237;
        _1559 = _1237;
        _1560 = 0.0;
        _1561 = 0.0;
        _1562 = 0.0;
    }
    float _1572 = (cbModelParam._m0[1u].x * (_1560 - _1249)) + _1249;
    float _1573 = (cbModelParam._m0[1u].x * (_1561 - _1250)) + _1250;
    float _1574 = (cbModelParam._m0[1u].x * (_1562 - _1251)) + _1251;
    float _1595 = fma(_1574, cbSceneParam._m0[89u].z, fma(_1573, cbSceneParam._m0[89u].y, _1572 * cbSceneParam._m0[89u].x));
    float _1598 = fma(_1574, cbSceneParam._m0[90u].z, fma(_1573, cbSceneParam._m0[90u].y, _1572 * cbSceneParam._m0[90u].x));
    float _1601 = fma(_1574, cbSceneParam._m0[91u].z, fma(_1573, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1572));
    float _1616 = _843 * 0.5;
    float _1617 = _844 * 0.5;
    float _1618 = _845 * 0.5;
    float _1619 = dot(vec4(_1616, _1617, _1618, 1.0), vec4(_1550, _1553, _1556, _1559));
    float _1622 = dot(vec4(_1616, _1617, _1618, 1.0), vec4(_1549, _1552, _1555, _1558));
    float _1625 = dot(vec4(_1616, _1617, _1618, 1.0), vec4(_1548, _1551, _1554, _1557));
    float _1659;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1632 = dot(vec4(_1616, _1617, _1618, 1.0), vec4(_1236, _1240, _1243, _1246));
        float _1636 = dot(vec4(_1616, _1617, _1618, 1.0), vec4(_1238, _1241, _1244, _1247));
        float _1640 = dot(vec4(_1616, _1617, _1618, 1.0), vec4(_1239, _1242, _1245, _1248));
        float _1647 = dot(vec4(cbModelParam._m0[39u]), vec4(_1616, _1617, _1618, 1.0));
        _1659 = dot(vec3(isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0)), isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0)), isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1647) ? 0.0 : (isnan(0.0) ? _1647 : max(0.0, _1647))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1659 = 1.0;
    }
    float _1670;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1661 = dot(vec4(cbModelParam._m0[40u]), vec4(_1616, _1617, _1618, 1.0));
        _1670 = dot(vec3(isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0)), isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0)), isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1661) ? 0.0 : (isnan(0.0) ? _1661 : max(0.0, _1661))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1670 = 1.0;
    }
    float _1674 = (_1670 * cbModelParam._m0[1u].x) + (_1659 * (1.0 - cbModelParam._m0[1u].x));
    float _1684 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _660);
    float _1685 = isnan(_1684) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1684 : min(cbModelParam._m0[25u].z, _1684));
    float _1765;
    float _1767;
    float _1769;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1732 = fma(_907, cbModelParam._m0[13u].z, fma(_903, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _899)) + cbModelParam._m0[13u].w;
        float _1736 = fma(_907, cbModelParam._m0[14u].z, fma(_903, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _899)) + cbModelParam._m0[14u].w;
        float _1740 = fma(_907, cbModelParam._m0[15u].z, fma(_903, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _899)) + cbModelParam._m0[15u].w;
        float _1743 = fma(_845, cbModelParam._m0[13u].z, fma(_844, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _843));
        float _1746 = fma(_845, cbModelParam._m0[14u].z, fma(_844, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _843));
        float _1749 = fma(_845, cbModelParam._m0[15u].z, fma(_844, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _843));
        float _1777;
        if (_1743 > 0.0)
        {
            _1777 = abs((1.0 - _1732) / _1743);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1743 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1732 + 1.0) / _1743);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1777 = frontier_phi_17_15_ladder;
        }
        float _1979;
        if (_1746 > 0.0)
        {
            _1979 = abs((1.0 - _1736) / _1746);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1746 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1736 + 1.0) / _1746);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1979 = frontier_phi_26_22_ladder;
        }
        float _2233;
        if (_1749 > 0.0)
        {
            _2233 = abs((1.0 - _1740) / _1749);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1749 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1740 + 1.0) / _1749);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2233 = frontier_phi_38_33_ladder;
        }
        float _2235 = isnan(_1979) ? _1777 : (isnan(_1777) ? _1979 : min(_1777, _1979));
        float _2236 = isnan(_2233) ? _2235 : (isnan(_2235) ? _2233 : min(_2235, _2233));
        float _2240 = (_2236 * _1743) + _1732;
        float _2241 = (_2236 * _1746) + _1736;
        float _2242 = (_2236 * _1749) + _1740;
        float _2243 = _2236 * 9.9999997473787516355514526367188e-05;
        float _2245 = (-1.0) - _2243;
        float _2247 = _2243 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2242 > _2247) || ((_2242 < _2245) || ((_2241 > _2247) || ((_2241 < _2245) || ((_2240 < _2245) || (_2240 > _2247))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2370 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2242, cbModelParam._m0[9u].z, fma(_2241, cbModelParam._m0[9u].y, _2240 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2242, cbModelParam._m0[10u].z, fma(_2241, cbModelParam._m0[10u].y, _2240 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2242, cbModelParam._m0[11u].z, fma(_2241, cbModelParam._m0[11u].y, _2240 * cbModelParam._m0[11u].x))), _1685);
            frontier_phi_16_38_ladder = _2370.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2370.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2370.x * cbModelParam._m0[1u].y;
        }
        _1765 = frontier_phi_16_38_ladder_2;
        _1767 = frontier_phi_16_38_ladder_1;
        _1769 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1753 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_843, _844, _845), _1685);
        _1765 = _1753.x * cbModelParam._m0[1u].y;
        _1767 = _1753.y * cbModelParam._m0[1u].y;
        _1769 = _1753.z * cbModelParam._m0[1u].y;
    }
    float _1773 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _660);
    float _1774 = isnan(_1773) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1773 : min(cbModelParam._m0[25u].w, _1773));
    float _1863;
    float _1865;
    float _1867;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1827 = fma(_907, cbModelParam._m0[21u].z, fma(_903, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _899)) + cbModelParam._m0[21u].w;
        float _1831 = fma(_907, cbModelParam._m0[22u].z, fma(_903, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _899)) + cbModelParam._m0[22u].w;
        float _1835 = fma(_907, cbModelParam._m0[23u].z, fma(_903, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _899)) + cbModelParam._m0[23u].w;
        float _1838 = fma(_845, cbModelParam._m0[21u].z, fma(_844, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _843));
        float _1841 = fma(_845, cbModelParam._m0[22u].z, fma(_844, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _843));
        float _1844 = fma(_845, cbModelParam._m0[23u].z, fma(_844, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _843));
        float _1984;
        if (_1838 > 0.0)
        {
            _1984 = abs((1.0 - _1827) / _1838);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1838 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1827 + 1.0) / _1838);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1984 = frontier_phi_28_24_ladder;
        }
        float _2260;
        if (_1841 > 0.0)
        {
            _2260 = abs((1.0 - _1831) / _1841);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1841 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1831 + 1.0) / _1841);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2260 = frontier_phi_40_35_ladder;
        }
        float _2473;
        if (_1844 > 0.0)
        {
            _2473 = abs((1.0 - _1835) / _1844);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1844 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1835 + 1.0) / _1844);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2473 = frontier_phi_49_46_ladder;
        }
        float _2475 = isnan(_2260) ? _1984 : (isnan(_1984) ? _2260 : min(_1984, _2260));
        float _2476 = isnan(_2473) ? _2475 : (isnan(_2475) ? _2473 : min(_2475, _2473));
        float _2480 = (_2476 * _1838) + _1827;
        float _2481 = (_2476 * _1841) + _1831;
        float _2482 = (_2476 * _1844) + _1835;
        float _2483 = _2476 * 9.9999997473787516355514526367188e-05;
        float _2484 = (-1.0) - _2483;
        float _2486 = _2483 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2482 > _2486) || ((_2482 < _2484) || ((_2481 > _2486) || ((_2481 < _2484) || ((_2480 < _2484) || (_2480 > _2486))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2681 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2482, cbModelParam._m0[17u].z, fma(_2481, cbModelParam._m0[17u].y, _2480 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2482, cbModelParam._m0[18u].z, fma(_2481, cbModelParam._m0[18u].y, _2480 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2482, cbModelParam._m0[19u].z, fma(_2481, cbModelParam._m0[19u].y, _2480 * cbModelParam._m0[19u].x))), _1774);
            frontier_phi_25_49_ladder = _2681.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2681.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2681.x * cbModelParam._m0[1u].z;
        }
        _1863 = frontier_phi_25_49_ladder_2;
        _1865 = frontier_phi_25_49_ladder_1;
        _1867 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1847 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_843, _844, _845), _1774);
        _1863 = _1847.x * cbModelParam._m0[1u].z;
        _1865 = _1847.y * cbModelParam._m0[1u].z;
        _1867 = _1847.z * cbModelParam._m0[1u].z;
    }
    float _1880 = (((_870 * _819) + _871) * _835) * ((cbModelParam._m0[1u].w * (_1863 - _1765)) + _1765);
    float _1882 = (((_870 * _821) + _871) * _835) * ((cbModelParam._m0[1u].w * (_1865 - _1767)) + _1767);
    float _1884 = (((_870 * _822) + _871) * _835) * ((cbModelParam._m0[1u].w * (_1867 - _1769)) + _1769);
    float _1887 = fma(_1884, cbSceneParam._m0[89u].z, fma(_1882, cbSceneParam._m0[89u].y, _1880 * cbSceneParam._m0[89u].x));
    float _1890 = fma(_1884, cbSceneParam._m0[90u].z, fma(_1882, cbSceneParam._m0[90u].y, _1880 * cbSceneParam._m0[90u].x));
    float _1893 = fma(_1884, cbSceneParam._m0[91u].z, fma(_1882, cbSceneParam._m0[91u].y, _1880 * cbSceneParam._m0[91u].x));
    uvec4 _1903 = floatBitsToUint(cbInstanceData._m0[_240 + 5u]);
    uint _1905 = _1903.x * 14u;
    uint _1906 = _1905 + 13u;
    float _1913 = _835 + (-1.0);
    float _1918 = (cbLight._m0[_1906].x * _1913) + 1.0;
    float _1919 = (cbLight._m0[_1906].y * _1913) + 1.0;
    float _1920 = (cbLight._m0[_1906].z * _1913) + 1.0;
    float _1921 = (cbLight._m0[_1906].w * _1913) + 1.0;
    uint _1922 = _1905 + 5u;
    float _1928 = isnan(1.0) ? _1919 : (isnan(_1919) ? 1.0 : min(_1919, 1.0));
    uint _1932 = _1905 + 4u;
    float _1938 = isnan(1.0) ? _1918 : (isnan(_1918) ? 1.0 : min(_1918, 1.0));
    uint _1942 = _1905 | 1u;
    float _1953 = dot(vec3(cbLight._m0[_1905].xyz), vec3(_657, _658, _659));
    float _1956 = dot(vec3(cbLight._m0[_1942].xyz), vec3(_657, _658, _659));
    float _4173 = isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0));
    float _4184 = isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0));
    float _1961 = (isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0))) * 0.3183098733425140380859375;
    float _1963 = (isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0))) * 0.3183098733425140380859375;
    float _1970 = ((cbLight._m0[_1922].x * _1928) * _1963) + ((cbLight._m0[_1932].x * _1938) * _1961);
    float _1971 = ((_1928 * cbLight._m0[_1922].y) * _1963) + ((_1938 * cbLight._m0[_1932].y) * _1961);
    float _1972 = ((_1928 * cbLight._m0[_1922].z) * _1963) + ((_1938 * cbLight._m0[_1932].z) * _1961);
    uvec4 _1976 = floatBitsToUint(cbLight._m0[_1905 + 12u]);
    bool _1978 = _1976.x == 0u;
    float _1989;
    float _1991;
    float _1993;
    if (_1978)
    {
        _1989 = _1970;
        _1991 = _1971;
        _1993 = _1972;
    }
    else
    {
        uint _1997 = _1905 + 6u;
        float _2013 = (dot(vec3(cbLight._m0[_1905 + 2u].xyz), vec3(_657, _658, _659)) * 0.5) + 0.5;
        float _2014 = _2013 * _2013;
        float _4195 = isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0));
        float _2015 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
        float _2016 = isnan(1.0) ? _1920 : (isnan(_1920) ? 1.0 : min(_1920, 1.0));
        _1989 = (((cbLight._m0[_1997].x * 0.3183098733425140380859375) * _2015) * _2016) + _1970;
        _1991 = (((cbLight._m0[_1997].y * 0.3183098733425140380859375) * _2015) * _2016) + _1971;
        _1993 = (((cbLight._m0[_1997].z * 0.3183098733425140380859375) * _2015) * _2016) + _1972;
    }
    bool _1996 = _1976.y == 0u;
    float _2034;
    float _2036;
    float _2038;
    if (_1996)
    {
        _2034 = _1989;
        _2036 = _1991;
        _2038 = _1993;
    }
    else
    {
        uint _2204 = _1905 + 7u;
        float _2220 = (dot(vec3(cbLight._m0[_1905 + 3u].xyz), vec3(_657, _658, _659)) * 0.5) + 0.5;
        float _2221 = _2220 * _2220;
        float _4211 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
        float _2222 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
        float _2223 = isnan(1.0) ? _1921 : (isnan(_1921) ? 1.0 : min(_1921, 1.0));
        _2034 = (((cbLight._m0[_2204].x * 0.3183098733425140380859375) * _2222) * _2223) + _1989;
        _2036 = (((cbLight._m0[_2204].y * 0.3183098733425140380859375) * _2222) * _2223) + _1991;
        _2038 = (((cbLight._m0[_2204].z * 0.3183098733425140380859375) * _2222) * _2223) + _1993;
    }
    uint _2041 = _1905 + 8u;
    float _2054 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1905].w)) * _660) * 0.949999988079071044921875);
    float _2055 = _2054 * _2054;
    float _2056 = cbLight._m0[_1905].x + _737;
    float _2057 = cbLight._m0[_1905].y + _738;
    float _2058 = cbLight._m0[_1905].z + _739;
    float _2062 = inversesqrt(dot(vec3(_2056, _2057, _2058), vec3(_2056, _2057, _2058)));
    float _2063 = _2062 * _2056;
    float _2064 = _2062 * _2057;
    float _2065 = _2062 * _2058;
    float _2066 = dot(vec3(_657, _658, _659), vec3(cbLight._m0[_1905].xyz));
    float _4227 = isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0));
    float _2069 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
    float _4238 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
    float _2070 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
    float _2071 = dot(vec3(_657, _658, _659), vec3(_2063, _2064, _2065));
    float _4249 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
    float _2074 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
    float _2075 = dot(vec3(cbLight._m0[_1905].xyz), vec3(_2063, _2064, _2065));
    float _4260 = isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0));
    float _2079 = _2055 * _2055;
    float _2083 = ((_2074 * _2074) * (_2079 + (-1.0))) + 1.0;
    float _2091 = exp2(log2(1.0 - (isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0)))) * 5.0);
    float _2092 = 0.959999978542327880859375 - _816;
    float _2094 = 0.959999978542327880859375 - _817;
    float _2095 = 0.959999978542327880859375 - _818;
    float _2102 = 1.0 - _2055;
    float _2113 = (0.5 / (((_2070 * ((_2069 * _2102) + _2055)) + 9.9999999392252902907785028219223e-09) + (((_2070 * _2102) + _2055) * _2069))) * _2069;
    float _4271 = isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0));
    float _2115 = (isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0))) * (_2079 / ((_2083 * _2083) * 3.141590118408203125));
    uint _2126 = _1905 + 9u;
    float _2137 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1942].w)) * _660) * 0.949999988079071044921875);
    float _2138 = _2137 * _2137;
    float _2139 = cbLight._m0[_1942].x + _737;
    float _2140 = cbLight._m0[_1942].y + _738;
    float _2141 = cbLight._m0[_1942].z + _739;
    float _2145 = inversesqrt(dot(vec3(_2139, _2140, _2141), vec3(_2139, _2140, _2141)));
    float _2146 = _2145 * _2139;
    float _2147 = _2145 * _2140;
    float _2148 = _2145 * _2141;
    float _2149 = dot(vec3(_657, _658, _659), vec3(cbLight._m0[_1942].xyz));
    float _4282 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0));
    float _2152 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
    float _2153 = dot(vec3(_657, _658, _659), vec3(_2146, _2147, _2148));
    float _4293 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
    float _2156 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
    float _2157 = dot(vec3(cbLight._m0[_1942].xyz), vec3(_2146, _2147, _2148));
    float _4304 = isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0));
    float _2161 = _2138 * _2138;
    float _2165 = ((_2156 * _2156) * (_2161 + (-1.0))) + 1.0;
    float _2172 = exp2(log2(1.0 - (isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0)))) * 5.0);
    float _2179 = 1.0 - _2138;
    float _2189 = (0.5 / (((_2070 * ((_2152 * _2179) + _2138)) + 9.9999999392252902907785028219223e-09) + (((_2070 * _2179) + _2138) * _2152))) * _2152;
    float _4315 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
    float _2191 = (isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0))) * (_2161 / ((_2165 * _2165) * 3.141590118408203125));
    float _2201 = (((((_2172 * _2092) + _819) * cbLight._m0[_2126].x) * _2191) * _1928) + (((((_2091 * _2092) + _819) * cbLight._m0[_2041].x) * _2115) * _1938);
    float _2202 = (((((_2172 * _2094) + _821) * cbLight._m0[_2126].y) * _2191) * _1928) + (((((_2091 * _2094) + _821) * cbLight._m0[_2041].y) * _2115) * _1938);
    float _2203 = (((((_2172 * _2095) + _822) * cbLight._m0[_2126].z) * _2191) * _1928) + (((((_2091 * _2095) + _822) * cbLight._m0[_2041].z) * _2115) * _1938);
    float _2265;
    float _2267;
    float _2269;
    if (_1978)
    {
        _2265 = _2201;
        _2267 = _2202;
        _2269 = _2203;
    }
    else
    {
        uint _2271 = _1905 + 2u;
        uint _2275 = _1905 + 10u;
        float _2289 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2271].w)) * _660) * 0.949999988079071044921875);
        float _2290 = _2289 * _2289;
        float _2291 = cbLight._m0[_2271].x + _737;
        float _2292 = cbLight._m0[_2271].y + _738;
        float _2293 = cbLight._m0[_2271].z + _739;
        float _2297 = inversesqrt(dot(vec3(_2291, _2292, _2293), vec3(_2291, _2292, _2293)));
        float _2298 = _2297 * _2291;
        float _2299 = _2297 * _2292;
        float _2300 = _2297 * _2293;
        float _2301 = dot(vec3(_657, _658, _659), vec3(cbLight._m0[_2271].xyz));
        float _4326 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
        float _2304 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
        float _2305 = dot(vec3(_657, _658, _659), vec3(_2298, _2299, _2300));
        float _4337 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
        float _2308 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
        float _2309 = dot(vec3(cbLight._m0[_2271].xyz), vec3(_2298, _2299, _2300));
        float _4348 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
        float _2313 = _2290 * _2290;
        float _2317 = ((_2308 * _2308) * (_2313 + (-1.0))) + 1.0;
        float _2324 = exp2(log2(1.0 - (isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0)))) * 5.0);
        float _2331 = 1.0 - _2290;
        float _2341 = (0.5 / (((_2070 * ((_2304 * _2331) + _2290)) + 9.9999999392252902907785028219223e-09) + (((_2070 * _2331) + _2290) * _2304))) * _2304;
        float _4359 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0));
        float _2343 = (isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0))) * (_2313 / ((_2317 * _2317) * 3.141590118408203125));
        float _2344 = isnan(1.0) ? _1920 : (isnan(_1920) ? 1.0 : min(_1920, 1.0));
        _2265 = (((((_2324 * _2092) + _819) * cbLight._m0[_2275].x) * _2343) * _2344) + _2201;
        _2267 = (((((_2324 * _2094) + _821) * cbLight._m0[_2275].y) * _2343) * _2344) + _2202;
        _2269 = (((((_2324 * _2095) + _822) * cbLight._m0[_2275].z) * _2343) * _2344) + _2203;
    }
    float _2379;
    float _2381;
    float _2383;
    if (_1996)
    {
        _2379 = _2265;
        _2381 = _2267;
        _2383 = _2269;
    }
    else
    {
        uint _2390 = _1905 + 3u;
        uint _2394 = _1905 + 11u;
        float _2408 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2390].w)) * _660) * 0.949999988079071044921875);
        float _2409 = _2408 * _2408;
        float _2410 = cbLight._m0[_2390].x + _737;
        float _2411 = cbLight._m0[_2390].y + _738;
        float _2412 = cbLight._m0[_2390].z + _739;
        float _2416 = inversesqrt(dot(vec3(_2410, _2411, _2412), vec3(_2410, _2411, _2412)));
        float _2417 = _2416 * _2410;
        float _2418 = _2416 * _2411;
        float _2419 = _2416 * _2412;
        float _2420 = dot(vec3(_657, _658, _659), vec3(cbLight._m0[_2390].xyz));
        float _4375 = isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0));
        float _2423 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
        float _2424 = dot(vec3(_657, _658, _659), vec3(_2417, _2418, _2419));
        float _4386 = isnan(0.0) ? _2424 : (isnan(_2424) ? 0.0 : max(_2424, 0.0));
        float _2427 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
        float _2428 = dot(vec3(cbLight._m0[_2390].xyz), vec3(_2417, _2418, _2419));
        float _4397 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
        float _2432 = _2409 * _2409;
        float _2436 = ((_2427 * _2427) * (_2432 + (-1.0))) + 1.0;
        float _2443 = exp2(log2(1.0 - (isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0)))) * 5.0);
        float _2450 = 1.0 - _2409;
        float _2460 = (0.5 / (((_2070 * ((_2423 * _2450) + _2409)) + 9.9999999392252902907785028219223e-09) + (((_2070 * _2450) + _2409) * _2423))) * _2423;
        float _4408 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
        float _2462 = (isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0))) * (_2432 / ((_2436 * _2436) * 3.141590118408203125));
        float _2463 = isnan(1.0) ? _1921 : (isnan(_1921) ? 1.0 : min(_1921, 1.0));
        _2379 = (((((_2443 * _2092) + _819) * cbLight._m0[_2394].x) * _2462) * _2463) + _2265;
        _2381 = (((((_2443 * _2094) + _821) * cbLight._m0[_2394].y) * _2462) * _2463) + _2267;
        _2383 = (((((_2443 * _2095) + _822) * cbLight._m0[_2394].z) * _2462) * _2463) + _2269;
    }
    float _2598;
    float _2600;
    float _2602;
    float _2604;
    float _2606;
    float _2608;
    if (_1903.y == 0u)
    {
        float _2538 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2539 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2538;
        float _2540 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2538;
        float _2541 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2538;
        uvec4 _2553 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2554 = _2553.x;
        uint _2565 = uint((float(_2553.y) * floor(float(uint(cbSceneParam._m0[85u].y * _758) / _2554))) + floor(float(uint(cbSceneParam._m0[85u].x * _757) / _2554)));
        float _2575 = (log2(_2541 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2576 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0));
        uint _2579 = uint(isnan(14.0) ? _2576 : (isnan(_2576) ? 14.0 : min(_2576, 14.0)));
        uvec4 _2584 = texelFetch(g_lightClusterGridBuffer, int(((_2579 << 2u) + (_2565 << 6u)) >> 2u));
        uint _2585 = _2584.x;
        uint _2586 = _2553.z;
        float _2686;
        float _2688;
        float _2690;
        float _2692;
        float _2694;
        float _2696;
        if (((((1u << ((_2586 >> 4u) & 15u)) + 4294967295u) & _2585) == 0u) || ((_2586 & 240u) == 0u))
        {
            _2686 = 0.0;
            _2688 = 0.0;
            _2690 = 0.0;
            _2692 = 0.0;
            _2694 = 0.0;
            _2696 = 0.0;
        }
        else
        {
            float _2687;
            float _2689;
            float _2691;
            float _2693;
            float _2695;
            float _2697;
            float _2839 = 0.0;
            float _2840 = 0.0;
            float _2841 = 0.0;
            float _2842 = 0.0;
            float _2843 = 0.0;
            float _2844 = 0.0;
            uint _2845 = 0u;
            uint _2854;
            bool _2855;
            for (;;)
            {
                _2854 = texelFetch(g_lightClassification, int((((_2579 << 5u) + (_2565 << 9u)) + (_2845 << 2u)) >> 2u)).x;
                _2855 = _2854 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2855)
                {
                    frontier_phi_66_pred = _2839;
                    frontier_phi_66_pred_1 = _2844;
                    frontier_phi_66_pred_2 = _2843;
                    frontier_phi_66_pred_3 = _2842;
                    frontier_phi_66_pred_4 = _2841;
                    frontier_phi_66_pred_5 = _2840;
                }
                else
                {
                    float _2984;
                    float _2985;
                    float _2986;
                    float _2987;
                    float _2988;
                    float _2989;
                    uint _2990;
                    _2984 = _2839;
                    _2985 = _2840;
                    _2986 = _2841;
                    _2987 = _2842;
                    _2988 = _2843;
                    _2989 = _2844;
                    _2990 = _2854;
                    float _2911;
                    float _2912;
                    float _2913;
                    float _2914;
                    float _2915;
                    float _2916;
                    for (;;)
                    {
                        uint _2994 = uint(findLSB(_2990)) + (_2845 << 5u);
                        uint _2991 = (_2990 + 4294967295u) & _2990;
                        uint _2996 = _2994 * 48u;
                        vec4 _3010 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2996)).x, texelFetch(g_PointLightRenderingBuffer, int(_2996 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2996 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2996 + 3u)).x));
                        uint _3016 = (_2994 * 48u) + 4u;
                        vec4 _3029 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3016)).x, texelFetch(g_PointLightRenderingBuffer, int(_3016 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3016 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3016 + 3u)).x));
                        uint _3035 = (_2994 * 48u) + 8u;
                        vec3 _3046 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3035)).x, texelFetch(g_PointLightRenderingBuffer, int(_3035 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3035 + 2u)).x));
                        float _3050 = _3010.x - _2539;
                        float _3051 = _3010.y - _2540;
                        float _3052 = _3010.z - _2541;
                        float _3053 = dot(vec3(_3050, _3051, _3052), vec3(_3050, _3051, _3052));
                        float _3056 = inversesqrt(_3053);
                        float _3057 = _3056 * _3050;
                        float _3058 = _3056 * _3051;
                        float _3059 = _3056 * _3052;
                        float _3060 = dot(vec3(_776, _779, _782), vec3(_3057, _3058, _3059));
                        float _3065 = 1.0 - (_3053 * _3010.w);
                        float _4434 = isnan(0.0) ? _3065 : (isnan(_3065) ? 0.0 : max(_3065, 0.0));
                        float _3066 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
                        float _3067 = sqrt(_3053) * _3029.w;
                        float _3070 = 1.39999997615814208984375 / (_3067 + 1.39999997615814208984375);
                        float _3071 = _3070 * _3070;
                        float _3074 = ((1.0 - _3071) * _3060) + _3071;
                        float _3077 = _3067 * _3067;
                        float _3081 = ((isnan(0.0) ? _3074 : (isnan(_3074) ? 0.0 : max(_3074, 0.0))) * _3066) / ((_3077 * 0.699999988079071044921875) + 1.0);
                        float _3085 = (-0.0) - _2539;
                        float _3086 = (-0.0) - _2540;
                        float _3087 = (-0.0) - _2541;
                        float _3091 = inversesqrt(dot(vec3(_3085, _3086, _3087), vec3(_3085, _3086, _3087)));
                        float _3092 = _3091 * _3085;
                        float _3093 = _3091 * _3086;
                        float _3094 = _3091 * _3087;
                        float _3102 = exp2(log2(1.0 / ((_3077 * 3.5) + 5.0)) * 0.25);
                        float _3103 = 1.0 - _851;
                        float _3110 = sqrt(1.0 - ((1.0 - (_3103 * _3103)) * (1.0 - (_3102 * _3102))));
                        float _3111 = _3110 * _3110;
                        float _3112 = _3111 * _3111;
                        float _3113 = _3092 + _3057;
                        float _3114 = _3093 + _3058;
                        float _3115 = _3094 + _3059;
                        float _3119 = inversesqrt(dot(vec3(_3113, _3114, _3115), vec3(_3113, _3114, _3115)));
                        float _3123 = dot(vec3(_776, _779, _782), vec3(_3092, _3093, _3094));
                        float _4450 = isnan(0.0) ? _3123 : (isnan(_3123) ? 0.0 : max(_3123, 0.0));
                        float _3126 = isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0));
                        float _3127 = dot(vec3(_776, _779, _782), vec3(_3119 * _3113, _3119 * _3114, _3119 * _3115));
                        float _4461 = isnan(0.0) ? _3127 : (isnan(_3127) ? 0.0 : max(_3127, 0.0));
                        float _3130 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
                        float _3134 = ((_3130 * _3130) * (_3112 + (-1.0))) + 1.0;
                        float _3135 = _3070 * _3111;
                        float _3136 = _3135 * _3135;
                        float _3139 = ((1.0 - _3136) * _3060) + _3136;
                        float _4472 = isnan(0.0) ? _3139 : (isnan(_3139) ? 0.0 : max(_3139, 0.0));
                        float _3140 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
                        float _3141 = 1.0 - _3111;
                        float _3151 = (0.5 / (((_3140 * ((_3126 * _3141) + _3111)) + 9.9999999392252902907785028219223e-09) + (((_3140 * _3141) + _3111) * _3126))) * _3140;
                        float _4483 = isnan(0.0) ? _3151 : (isnan(_3151) ? 0.0 : max(_3151, 0.0));
                        float _3162 = (((_3112 * 3.1415927410125732421875) * (isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0)))) / ((_3134 * _3134) * ((_3077 * 2.1991131305694580078125) + 3.141590118408203125))) * _3066;
                        _2914 = (_3081 * _3029.x) + _2987;
                        _2915 = (_3081 * _3029.y) + _2988;
                        _2916 = (_3081 * _3029.z) + _2989;
                        _2911 = (_3162 * _3046.x) + _2984;
                        _2912 = (_3162 * _3046.y) + _2985;
                        _2913 = (_3162 * _3046.z) + _2986;
                        if (_2991 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2984 = _2911;
                            _2985 = _2912;
                            _2986 = _2913;
                            _2987 = _2914;
                            _2988 = _2915;
                            _2989 = _2916;
                            _2990 = _2991;
                        }
                    }
                    frontier_phi_66_pred = _2911;
                    frontier_phi_66_pred_1 = _2916;
                    frontier_phi_66_pred_2 = _2915;
                    frontier_phi_66_pred_3 = _2914;
                    frontier_phi_66_pred_4 = _2913;
                    frontier_phi_66_pred_5 = _2912;
                }
                _2687 = frontier_phi_66_pred;
                _2697 = frontier_phi_66_pred_1;
                _2695 = frontier_phi_66_pred_2;
                _2693 = frontier_phi_66_pred_3;
                _2691 = frontier_phi_66_pred_4;
                _2689 = frontier_phi_66_pred_5;
                uint _2846 = _2845 + 1u;
                if (_2846 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2839 = _2687;
                    _2840 = _2689;
                    _2841 = _2691;
                    _2842 = _2693;
                    _2843 = _2695;
                    _2844 = _2697;
                    _2845 = _2846;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2686 = _2687;
            _2688 = _2689;
            _2690 = _2691;
            _2692 = _2693;
            _2694 = _2695;
            _2696 = _2697;
        }
        uvec4 _2700 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2701 = _2700.z;
        uint _2703 = (_2701 >> 8u) & 15u;
        float _2807;
        float _2809;
        float _2811;
        float _2813;
        float _2815;
        float _2817;
        if (((4294967295u << _2703) & _2585) == 0u)
        {
            _2807 = _2686;
            _2809 = _2688;
            _2811 = _2690;
            _2813 = _2692;
            _2815 = _2694;
            _2817 = _2696;
        }
        else
        {
            float _2832 = inversesqrt(dot(vec3(_2539, _2540, _2541), vec3(_2539, _2540, _2541)));
            float _2833 = _2832 * _2539;
            float _2834 = _2832 * _2540;
            float _2835 = _2832 * _2541;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2703 < ((_2701 >> 12u) & 15u))
            {
                float _2808;
                float _2810;
                float _2812;
                float _2814;
                float _2816;
                float _2818;
                float _2967 = _2686;
                float _2968 = _2688;
                float _2969 = _2690;
                float _2970 = _2692;
                float _2971 = _2694;
                float _2972 = _2696;
                uint _2973 = _2703;
                uint _2982;
                bool _2983;
                for (;;)
                {
                    _2982 = texelFetch(g_lightClassification, int((((_2579 << 5u) + (_2565 << 9u)) + (_2973 << 2u)) >> 2u)).x;
                    _2983 = _2982 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2983)
                    {
                        frontier_phi_77_pred = _2972;
                        frontier_phi_77_pred_1 = _2971;
                        frontier_phi_77_pred_2 = _2970;
                        frontier_phi_77_pred_3 = _2969;
                        frontier_phi_77_pred_4 = _2968;
                        frontier_phi_77_pred_5 = _2967;
                    }
                    else
                    {
                        float _3176;
                        float _3177;
                        float _3178;
                        float _3179;
                        float _3180;
                        float _3181;
                        float _3470;
                        float _3471;
                        float _3472;
                        float _3473;
                        float _3474;
                        float _3475;
                        float _3189 = _2967;
                        float _3190 = _2968;
                        float _3191 = _2969;
                        float _3192 = _2970;
                        float _3193 = _2971;
                        float _3194 = _2972;
                        uint _3195 = _2982;
                        uint _3196;
                        vec4 _3221;
                        float _3222;
                        vec4 _3237;
                        vec3 _3249;
                        vec4 _3264;
                        vec4 _3280;
                        float _3326;
                        bool _3327;
                        for (;;)
                        {
                            uint _3206 = ((_2973 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3195));
                            _3196 = (_3195 + 4294967295u) & _3195;
                            uint _3208 = _3206 * 40u;
                            _3221 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3208)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3208 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3208 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3208 + 3u)).x));
                            _3222 = _3221.w;
                            uint _3224 = (_3206 * 40u) + 4u;
                            _3237 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3224)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 3u)).x));
                            uint _3239 = (_3206 * 40u) + 8u;
                            _3249 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3239)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3239 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3239 + 2u)).x));
                            uint _3251 = (_3206 * 40u) + 16u;
                            _3264 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3251)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3251 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3251 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3251 + 3u)).x));
                            uint _3267 = (_3206 * 40u) + 20u;
                            _3280 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3267)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3267 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3267 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3267 + 3u)).x));
                            uint _3282 = (_3206 * 40u) + 24u;
                            vec4 _3295 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3282)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 3u)).x));
                            uint _3301 = (_3206 * 40u) + 28u;
                            vec4 _3314 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3301)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3301 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3301 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3301 + 3u)).x));
                            _3326 = fma(_2541, _3314.z, fma(_2540, _3314.y, _3314.x * _2539)) + _3314.w;
                            _3327 = !((fma(_2541, _3295.z, fma(_2540, _3295.y, _3295.x * _2539)) + _3295.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3327)
                            {
                                float _3354 = _3221.x - _2539;
                                float _3355 = _3221.y - _2540;
                                float _3356 = _3221.z - _2541;
                                float _3357 = dot(vec3(_3354, _3355, _3356), vec3(_3354, _3355, _3356));
                                float _3360 = inversesqrt(_3357);
                                float _3361 = _3360 * _3354;
                                float _3362 = _3360 * _3355;
                                float _3363 = _3360 * _3356;
                                float _3367 = 1.0 - (_3357 / (_3222 * _3222));
                                float _4494 = isnan(0.0) ? _3367 : (isnan(_3367) ? 0.0 : max(_3367, 0.0));
                                float _3368 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
                                float _3372 = sqrt(_3357) * _3237.w;
                                float _3374 = 1.39999997615814208984375 / (_3372 + 1.39999997615814208984375);
                                float _3375 = _3374 * _3374;
                                float _3378 = ((1.0 - _3375) * dot(vec3(_3361, _3362, _3363), vec3(_776, _779, _782))) + _3375;
                                float _3381 = _3372 * _3372;
                                float _3385 = (fma(_2541, _3264.z, fma(_2540, _3264.y, _3264.x * _2539)) + _3264.w) / _3326;
                                float _3386 = (fma(_2541, _3280.z, fma(_2540, _3280.y, _3280.x * _2539)) + _3280.w) / _3326;
                                float _3390 = 1.0 - dot(vec2(_3385, _3386), vec2(_3385, _3386));
                                float _4510 = isnan(0.0) ? _3390 : (isnan(_3390) ? 0.0 : max(_3390, 0.0));
                                float _3391 = isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0));
                                float _3392 = _3391 * (((isnan(0.0) ? _3378 : (isnan(_3378) ? 0.0 : max(_3378, 0.0))) * _3368) / ((_3381 * 0.699999988079071044921875) + 1.0));
                                float _3404 = exp2(log2(1.0 / ((_3381 * 3.5) + 5.0)) * 0.25);
                                float _3405 = 1.0 - _851;
                                float _3412 = sqrt(1.0 - ((1.0 - (_3405 * _3405)) * (1.0 - (_3404 * _3404))));
                                float _3413 = _3412 * _3412;
                                float _3414 = _3413 * _3413;
                                float _3415 = _3361 - _2833;
                                float _3416 = _3362 - _2834;
                                float _3417 = _3363 - _2835;
                                float _3421 = inversesqrt(dot(vec3(_3415, _3416, _3417), vec3(_3415, _3416, _3417)));
                                float _3425 = dot(vec3(_776, _779, _782), vec3((-0.0) - _2833, (-0.0) - _2834, (-0.0) - _2835));
                                float _4521 = isnan(0.0) ? _3425 : (isnan(_3425) ? 0.0 : max(_3425, 0.0));
                                float _3428 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
                                float _3429 = dot(vec3(_776, _779, _782), vec3(_3421 * _3415, _3421 * _3416, _3421 * _3417));
                                float _4532 = isnan(0.0) ? _3429 : (isnan(_3429) ? 0.0 : max(_3429, 0.0));
                                float _3432 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
                                float _3436 = ((_3432 * _3432) * (_3414 + (-1.0))) + 1.0;
                                float _3437 = _3374 * _3413;
                                float _3438 = _3437 * _3437;
                                float _3444 = ((1.0 - _3438) * dot(vec3(_776, _779, _782), vec3(_3361, _3362, _3363))) + _3438;
                                float _4543 = isnan(0.0) ? _3444 : (isnan(_3444) ? 0.0 : max(_3444, 0.0));
                                float _3445 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
                                float _3446 = 1.0 - _3413;
                                float _3456 = (0.5 / (((_3445 * ((_3428 * _3446) + _3413)) + 9.9999999392252902907785028219223e-09) + (((_3445 * _3446) + _3413) * _3428))) * _3445;
                                float _4554 = isnan(0.0) ? _3456 : (isnan(_3456) ? 0.0 : max(_3456, 0.0));
                                float _3466 = (_3391 * _3368) * (((_3414 * 3.1415927410125732421875) * (isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0)))) / ((_3436 * _3436) * ((_3381 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3392 * _3237.y;
                                frontier_phi_83_pred_1 = _3392 * _3237.x;
                                frontier_phi_83_pred_2 = _3466 * _3249.z;
                                frontier_phi_83_pred_3 = _3466 * _3249.y;
                                frontier_phi_83_pred_4 = _3466 * _3249.x;
                                frontier_phi_83_pred_5 = _3392 * _3237.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3474 = frontier_phi_83_pred;
                            _3473 = frontier_phi_83_pred_1;
                            _3472 = frontier_phi_83_pred_2;
                            _3471 = frontier_phi_83_pred_3;
                            _3470 = frontier_phi_83_pred_4;
                            _3475 = frontier_phi_83_pred_5;
                            _3179 = _3473 + _3192;
                            _3180 = _3474 + _3193;
                            _3181 = _3475 + _3194;
                            _3176 = _3470 + _3189;
                            _3177 = _3471 + _3190;
                            _3178 = _3472 + _3191;
                            if (_3196 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3189 = _3176;
                                _3190 = _3177;
                                _3191 = _3178;
                                _3192 = _3179;
                                _3193 = _3180;
                                _3194 = _3181;
                                _3195 = _3196;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3181;
                        frontier_phi_77_pred_1 = _3180;
                        frontier_phi_77_pred_2 = _3179;
                        frontier_phi_77_pred_3 = _3178;
                        frontier_phi_77_pred_4 = _3177;
                        frontier_phi_77_pred_5 = _3176;
                    }
                    _2818 = frontier_phi_77_pred;
                    _2816 = frontier_phi_77_pred_1;
                    _2814 = frontier_phi_77_pred_2;
                    _2812 = frontier_phi_77_pred_3;
                    _2810 = frontier_phi_77_pred_4;
                    _2808 = frontier_phi_77_pred_5;
                    uint _2974 = _2973 + 1u;
                    if (_2974 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2967 = _2808;
                        _2968 = _2810;
                        _2969 = _2812;
                        _2970 = _2814;
                        _2971 = _2816;
                        _2972 = _2818;
                        _2973 = _2974;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2812;
                frontier_phi_58_59_ladder_1 = _2818;
                frontier_phi_58_59_ladder_2 = _2816;
                frontier_phi_58_59_ladder_3 = _2814;
                frontier_phi_58_59_ladder_4 = _2810;
                frontier_phi_58_59_ladder_5 = _2808;
            }
            else
            {
                frontier_phi_58_59_ladder = _2690;
                frontier_phi_58_59_ladder_1 = _2696;
                frontier_phi_58_59_ladder_2 = _2694;
                frontier_phi_58_59_ladder_3 = _2692;
                frontier_phi_58_59_ladder_4 = _2688;
                frontier_phi_58_59_ladder_5 = _2686;
            }
            _2807 = frontier_phi_58_59_ladder_5;
            _2809 = frontier_phi_58_59_ladder_4;
            _2811 = frontier_phi_58_59_ladder;
            _2813 = frontier_phi_58_59_ladder_3;
            _2815 = frontier_phi_58_59_ladder_2;
            _2817 = frontier_phi_58_59_ladder_1;
        }
        float _2822 = isnan(1.0) ? _835 : (isnan(_835) ? 1.0 : min(_835, 1.0));
        _2598 = (_2822 * _2813) + _2034;
        _2600 = (_2822 * _2815) + _2036;
        _2602 = (_2822 * _2817) + _2038;
        _2604 = ((_2807 * _819) * _2822) + _2379;
        _2606 = ((_2809 * _821) * _2822) + _2381;
        _2608 = ((_2811 * _822) * _2822) + _2383;
    }
    else
    {
        _2598 = _2034;
        _2600 = _2036;
        _2602 = _2038;
        _2604 = _2379;
        _2606 = _2381;
        _2608 = _2383;
    }
    float _4570 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
    float _4581 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
    float _4592 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
    float _2625 = ((isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0))) * (_2598 + ((isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0))) * _835))) + ((_2604 + ((isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0))) * _1674)) * cbPerFrame._m0[3u].x);
    float _2626 = ((isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0))) * (_2600 + ((isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0))) * _835))) + ((_2606 + ((isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0))) * _1674)) * cbPerFrame._m0[3u].x);
    float _2627 = ((isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0))) * (_2602 + ((isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0))) * _835))) + ((_2608 + ((isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0))) * _1674)) * cbPerFrame._m0[3u].x);
    uint _2628 = _240 + 6u;
    float _2636 = _757 / cbSceneParam._m0[86u].x;
    float _2637 = _758 / cbSceneParam._m0[86u].y;
    vec4 _2651 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2636, _2637, (log2((isnan(cbSceneParam._m0[77u].w) ? _679 : (isnan(_679) ? cbSceneParam._m0[77u].w : min(_679, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2653 = _2651.x;
    float _2654 = _2651.y;
    float _2655 = _2651.z;
    float _2656 = _2651.w;
    float _2749;
    float _2751;
    float _2753;
    float _2755;
    if (_679 > cbSceneParam._m0[78u].w)
    {
        float _2711 = isnan(_679) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _679 : min(cbSceneParam._m0[80u].w, _679));
        float _2712 = _2711 / _679;
        float _2723 = _2712 * _730;
        float _2724 = _731 * _2712;
        float _2725 = (-0.0) - _2724;
        float _2727 = _2712 * _732;
        float _2729 = (cbSceneParam._m0[77u].w * _2725) / _2711;
        float _2730 = _2729 + cbSceneParam._m0[79u].w;
        float _2731 = cbSceneParam._m0[79u].w - _2724;
        float _2737 = sqrt(((_2723 * _2723) + (_2724 * _2724)) + (_2727 * _2727));
        float _2740 = (1.0 - (cbSceneParam._m0[77u].w / _2711)) * _2737;
        float _2745 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2747 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2924;
        if (abs((_2725 - _2729) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2924 = ((((_2730 > 0.0) ? exp2(_2745 * _2730) : (2.0 - exp2(_2747 * _2730))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2740;
        }
        else
        {
            float _2868 = 1.0 / cbSceneParam._m0[80u].x;
            float _2869 = isnan(_2731) ? _2730 : (isnan(_2730) ? _2731 : max(_2730, _2731));
            float _2870 = isnan(_2731) ? _2730 : (isnan(_2730) ? _2731 : min(_2730, _2731));
            float _2879 = isnan(0.0) ? _2869 : (isnan(_2869) ? 0.0 : min(_2869, 0.0));
            float _2880 = isnan(0.0) ? _2870 : (isnan(_2870) ? 0.0 : min(_2870, 0.0));
            _2924 = ((abs(_2737 / _2725) * cbSceneParam._m0[80u].y) * ((((_2879 - _2880) * 2.0) - ((exp2(_2745 * (isnan(0.0) ? _2869 : (isnan(_2869) ? 0.0 : max(_2869, 0.0)))) - exp2(_2745 * (isnan(0.0) ? _2870 : (isnan(_2870) ? 0.0 : max(_2870, 0.0))))) * _2868)) - ((exp2(_2747 * _2879) - exp2(_2747 * _2880)) * _2868))) + (_2740 * cbSceneParam._m0[80u].z);
        }
        vec4 _2926 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2636, _2637, 1.0), 0.0);
        float _2935 = exp2((_2924 * (-1.44269502162933349609375)) * (1.0 - _2926.w));
        float _2936 = log2(_2935);
        float _2952 = log2(_2656);
        _2749 = (exp2(_2952 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2936 * cbSceneParam._m0[78u].x)) * _2926.x) / cbSceneParam._m0[78u].x)) + _2653;
        _2751 = (exp2(_2952 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2936 * cbSceneParam._m0[78u].y)) * _2926.y) / cbSceneParam._m0[78u].y)) + _2654;
        _2753 = (exp2(_2952 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2936 * cbSceneParam._m0[78u].z)) * _2926.z) / cbSceneParam._m0[78u].z)) + _2655;
        _2755 = _2935 * _2656;
    }
    else
    {
        _2749 = _2653;
        _2751 = _2654;
        _2753 = _2655;
        _2755 = _2656;
    }
    bool _2962;
    vec4 _2765;
    vec4 _2787;
    float _2789;
    float _2793;
    float _2794;
    float _2795;
    float _2796;
    bool _2806;
    for (;;)
    {
        _2765 = cbMatDynParam._m0[0u];
        float _2767 = roundEven(_2765.y);
        bool _2768 = _2767 == 3.0;
        float _2769 = log2(_2755);
        float _2776 = exp2(_2769 * cbSceneParam._m0[78u].x) * _2625;
        float _2777 = exp2(_2769 * cbSceneParam._m0[78u].y) * _2626;
        float _2778 = exp2(_2769 * cbSceneParam._m0[78u].z) * _2627;
        float _2785 = _746 + (-0.5);
        _2787 = cbMtdParam._m0[1u];
        _2789 = _2787.y * _2785;
        float _2792 = (_2767 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2793 = _2792 * (_2768 ? _2776 : (_2776 + (cbSceneParam._m0[72u].w * _2749)));
        _2794 = _2792 * (_2768 ? _2777 : (_2777 + (cbSceneParam._m0[72u].w * _2751)));
        _2795 = _2792 * (_2768 ? _2778 : (_2778 + (cbSceneParam._m0[72u].w * _2753)));
        _2796 = _2785 * 0.999000012874603271484375;
        _2806 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2806)
        {
            if ((cbInstanceData._m0[_240 + 7u].x + _2796) < 0.5)
            {
                _2962 = true;
                break;
            }
        }
        uint _2903 = _795 + uint(_2765.w);
        if ((cbInstanceData._m0[_2903].w < 1.0) && ((cbInstanceData._m0[_2903].w + _2796) < 0.5))
        {
            _2962 = true;
            break;
        }
        if ((_2789 + 1.0) < _2787.x)
        {
            _2962 = true;
            break;
        }
        _2962 = false;
        break;
    }
    float _3167;
    if (_2962)
    {
        discard_state = true;
        _3167 = 0.0;
    }
    else
    {
        _3167 = cbInstanceData._m0[_2628].w;
    }
    SV_Target.x = _2793;
    SV_Target.y = _2794;
    SV_Target.z = _2795;
    SV_Target.w = _3167;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2628].w;
    discard_exit();
}


