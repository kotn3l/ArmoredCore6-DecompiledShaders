#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1421;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _236 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _237 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _238 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _244 = inversesqrt(dot(vec3(_236, _237, _238), vec3(_236, _237, _238)));
    float _245 = _244 * _236;
    float _246 = _244 * _237;
    float _247 = _244 * _238;
    float _251 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _252 = _251 * NORMAL.x;
    float _253 = _251 * NORMAL.y;
    float _254 = _251 * NORMAL.z;
    float _258 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _259 = _258 * TANGENT.x;
    float _260 = _258 * TANGENT.y;
    float _261 = _258 * TANGENT.z;
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _273 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4030 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _4041 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _4052 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    uint _283 = uint(roundEven(NORMAL.w)) * 13u;
    uint _288 = _283 + 1u;
    uint _292 = _283 + 2u;
    float _301 = sqrt(((cbInstanceData._m0[_288].x * cbInstanceData._m0[_288].x) + (cbInstanceData._m0[_283].x * cbInstanceData._m0[_283].x)) + (cbInstanceData._m0[_292].x * cbInstanceData._m0[_292].x));
    float _302 = _301 * TEXCOORD.z;
    float _303 = _301 * TEXCOORD.w;
    vec4 _316 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _302) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _303) + cbTextureTilingScale._m0[13u].w));
    vec4 _340 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _345 = _340.x * cbMtdParam._m0[11u].x;
    float _346 = _340.y * cbMtdParam._m0[11u].y;
    float _347 = _340.z * cbMtdParam._m0[11u].z;
    vec4 _366 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _302) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _303) + cbTextureTilingScale._m0[5u].w));
    vec4 _402 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _404 = _402.x;
    float _416 = dot(vec4(_404, _402.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _433 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_404 - _416) * cbMtdParam._m0[24u].y) + _416) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4063 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _434 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
    float _441 = (_434 * ((_366.x * cbMtdParam._m0[12u].x) - _345)) + _345;
    float _442 = (_434 * ((_366.y * cbMtdParam._m0[12u].y) - _346)) + _346;
    float _443 = (_434 * ((_366.z * cbMtdParam._m0[12u].z) - _347)) + _347;
    float _447 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _316.x) * _441;
    float _450 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _316.y) * _442;
    float _453 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _316.z) * _443;
    float _460 = ((_441 - _447) * (isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0)))) + _447;
    float _461 = ((_442 - _450) * (isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0)))) + _450;
    float _462 = ((_443 - _453) * (isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0)))) + _453;
    vec4 _480 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _302) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _303) + cbTextureTilingScale._m0[20u].w));
    vec4 _507 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _302) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _303) + cbTextureTilingScale._m0[4u].w));
    vec4 _524 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _526 = _524.x;
    float _527 = _524.y;
    float _528 = _524.z;
    float _537 = ((_507.z - _528) * _434) + _528;
    float _540 = ((((_507.x - _526) * _434) + _526) * 2.0) + (-1.0);
    float _541 = ((((_507.y - _527) * _434) + _527) * 2.0) + (-1.0);
    float _542 = dot(vec2(_540, _541), vec2(_540, _541));
    float _4074 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _547 = sqrt(1.0 - (isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0))));
    float _550 = _540 + ((((_480.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x);
    float _551 = _541 + ((((_480.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x);
    float _554 = fma(_547, _252, fma(_551, _259, _550 * _245));
    float _557 = fma(_547, _253, fma(_551, _260, _550 * _246));
    float _560 = fma(_547, _254, fma(_551, _261, _550 * _247));
    float _564 = inversesqrt(dot(vec3(_554, _557, _560), vec3(_554, _557, _560)));
    vec4 _580 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _606 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _302) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _303) + cbTextureTilingScale._m0[11u].w));
    float _608 = _606.x;
    float _609 = 1.0 - _608;
    float _613 = ((_608 - _609) * cbMtdParam._m0[24u].z) + _609;
    float _615 = (cbMtdParam._m0[19u].x + dot(vec4(_564 * _554, _564 * _557, _564 * _560, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_613 * cbMtdParam._m0[21u].z);
    float _4085 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _616 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
    float _618 = (-0.0) - cbMtdParam._m0[24u].x;
    float _620 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _621 = isnan(1.0) ? _620 : (isnan(_620) ? 1.0 : min(_620, 1.0));
    float _628 = _616 - ((_616 * TEXCOORD_8.x) * _621);
    float _629 = _616 - ((_616 * TEXCOORD_8.y) * _621);
    float _630 = _616 - ((_616 * TEXCOORD_8.z) * _621);
    float _637 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _641 = ((isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : min(_637, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _649 = (_641 - (((_613 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _641))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4116 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _650 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
    float _654 = ((_628 * (cbMtdParam._m0[17u].x - _460)) * _650) + _460;
    float _655 = ((_629 * (cbMtdParam._m0[17u].y - _461)) * _650) + _461;
    float _656 = ((_630 * (cbMtdParam._m0[17u].z - _462)) * _650) + _462;
    vec4 _668 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _302) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _303) + cbTextureTilingScale._m0[19u].w));
    float _670 = _668.x;
    float _671 = 1.0 - _670;
    float _696 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_670 - _671) * cbMtdParam._m0[24u].w) + _671) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4127 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
    float _697 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
    float _705 = ((((cbMtdParam._m0[10u].x - _654) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _697) + _654;
    float _706 = ((((cbMtdParam._m0[10u].y - _655) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _697) + _655;
    float _707 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _656)) * _697) + _656;
    vec4 _733 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _735 = _733.x;
    float _753 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _302) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _303) + cbTextureTilingScale._m0[9u].w)).x - _735) * _434) + _735;
    float _757 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _753) * cbMtdParam._m0[19u].z) + _753;
    float _760 = _757 - ((_650 * _628) * _757);
    float _762 = _760 - (_760 * _697);
    float _767 = (((_480.z - _537) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _537;
    vec4 _781 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _302) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _303) + cbTextureTilingScale._m0[15u].w));
    float _788 = (_781.x * 2.0) + (-1.0);
    float _789 = (_781.y * 2.0) + (-1.0);
    float _790 = dot(vec2(_788, _789), vec2(_788, _789));
    float _4138 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
    float _799 = (((_781.z - _767) * _628) * _650) + _767;
    float _802 = ((cbMtdParam._m0[23u].y - _799) * _697) + _799;
    vec4 _821 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _302) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _303) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _827 = (_821.x * 2.0) + (-1.0);
    float _828 = (_821.y * 2.0) + (-1.0);
    float _829 = dot(vec2(_827, _828), vec2(_827, _828));
    float _4149 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
    float _849 = (((cbMtdParam._m0[21u].x * _550) + ((_788 - _550) * _628)) * _650) + _550;
    float _850 = (((cbMtdParam._m0[21u].x * _551) + ((_789 - _551) * _629)) * _650) + _551;
    float _851 = (((sqrt(1.0 - (isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0)))) - _547) * _630) * _650) + _547;
    float _862 = (((_827 - _849) + (_849 * cbMtdParam._m0[22u].z)) * _697) + _849;
    float _863 = (((_828 - _850) + (_850 * cbMtdParam._m0[22u].z)) * _697) + _850;
    float _864 = ((sqrt(1.0 - (isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0)))) - _851) * _697) + _851;
    float _868 = cbMtdParam._m0[22u].x + _580.w;
    float _871 = fma(_864, _252, fma(_863, _259, _862 * _245));
    float _874 = fma(_864, _253, fma(_863, _260, _862 * _246));
    float _877 = fma(_864, _254, fma(_863, _261, _862 * _247));
    float _881 = inversesqrt(dot(vec3(_871, _874, _877), vec3(_871, _874, _877)));
    float _882 = _881 * _871;
    float _883 = _881 * _874;
    float _884 = _881 * _877;
    float _4160 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
    float _885 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
    float _4171 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
    float _4182 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _4193 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _4204 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _4215 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _890 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
    float _904 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _944 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _954 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _944);
    float _955 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _944);
    float _956 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _944);
    float _960 = inversesqrt(dot(vec3(_954, _955, _956), vec3(_954, _955, _956)));
    float _961 = _954 * _960;
    float _962 = _955 * _960;
    float _963 = _956 * _960;
    float _969 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _970 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _988 = fma(_884, cbSceneParam._m0[5u].z, fma(_883, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _882));
    float _991 = fma(_884, cbSceneParam._m0[6u].z, fma(_883, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _882));
    float _994 = fma(_884, cbSceneParam._m0[7u].z, fma(_883, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _882));
    uint _1008 = (_283 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1014 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0)))) * cbInstanceData._m0[_1008].x;
    float _1015 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0)))) * cbInstanceData._m0[_1008].y;
    float _1016 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0)))) * cbInstanceData._m0[_1008].z;
    float _4226 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
    float _1017 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
    float _4237 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
    float _1018 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
    float _4248 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
    float _1019 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
    float _1020 = 1.0 - _890;
    float _1021 = _1017 * _1020;
    float _1022 = _1018 * _1020;
    float _1023 = _1019 * _1020;
    float _1028 = (_1017 + (-0.039999999105930328369140625)) * _890;
    float _1029 = (_1018 + (-0.039999999105930328369140625)) * _890;
    float _1030 = (_1019 + (-0.039999999105930328369140625)) * _890;
    float _1031 = _1028 + 0.039999999105930328369140625;
    float _1033 = _1029 + 0.039999999105930328369140625;
    float _1034 = _1030 + 0.039999999105930328369140625;
    vec4 _1043 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _969, cbSceneParam._m0[86u].y * _970));
    float _1047 = ((isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0))) * TEXCOORD_5.w) * _1043.x;
    float _1048 = dot(vec3(_882, _883, _884), vec3(_961, _962, _963));
    float _1051 = _1048 * 2.0;
    float _1055 = (_1051 * _882) - _961;
    float _1056 = (_1051 * _883) - _962;
    float _1057 = (_1051 * _884) - _963;
    float _1061 = abs(dot(vec3(_961, _962, _963), vec3(_882, _883, _884)));
    float _4259 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
    float _1063 = sqrt(_885);
    float _1076 = exp2((_1063 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1063 * 3.0));
    float _1082 = (1.0 - _1076) * ((_1063 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1083 = _1076 * _1063;
    float _1111 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1115 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1119 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1420;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1145 = fma(_1119, cbModelParam._m0[26u].z, fma(_1115, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1111));
        float _1149 = fma(_1119, cbModelParam._m0[27u].z, fma(_1115, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1111));
        float _1153 = fma(_1119, cbModelParam._m0[28u].z, fma(_1115, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1111));
        float _1178 = _1111 + _882;
        float _1179 = _1115 + _883;
        float _1180 = _1119 + _884;
        float _1190 = fma(_1180, cbModelParam._m0[26u].z, fma(_1179, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1178)) - _1145;
        float _1191 = fma(_1180, cbModelParam._m0[27u].z, fma(_1179, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1178)) - _1149;
        float _1192 = fma(_1180, cbModelParam._m0[28u].z, fma(_1179, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1178)) - _1153;
        float _1196 = inversesqrt(dot(vec3(_1190, _1191, _1192), vec3(_1190, _1191, _1192)));
        float _1209 = ((_1196 * _1190) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1145 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1210 = ((_1196 * _1191) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1149 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1211 = ((_1196 * _1192) / cbModelParam._m0[34u].z) + ((((((_1153 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1214 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1209, _1210, _1211), 0.0);
        vec4 _1221 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1209, _1210, _1211), 0.0);
        vec4 _1228 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1209, _1210, _1211), 0.0);
        vec4 _1235 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1209, _1210, _1211), 0.0);
        float _1248 = exp2((_1214.w + (-0.5)) * 20.0) * 2.0;
        float _1249 = _1248 * (_1214.x + (-0.5));
        float _1250 = _1248 * (_1214.y + (-0.5));
        float _1251 = _1248 * (_1214.z + (-0.5));
        float _1258 = exp2((_1221.w + (-0.5)) * 20.0) * 2.0;
        float _1259 = _1258 * (_1221.x + (-0.5));
        float _1260 = _1258 * (_1221.y + (-0.5));
        float _1261 = _1258 * (_1221.z + (-0.5));
        float _1268 = exp2((_1228.w + (-0.5)) * 20.0) * 2.0;
        float _1269 = _1268 * (_1228.x + (-0.5));
        float _1270 = _1268 * (_1228.y + (-0.5));
        float _1271 = _1268 * (_1228.z + (-0.5));
        float _1278 = exp2((_1235.w + (-0.5)) * 20.0) * 2.0;
        float _1279 = _1278 * (_1235.x + (-0.5));
        float _1280 = _1278 * (_1235.y + (-0.5));
        float _1281 = _1278 * (_1235.z + (-0.5));
        float _1282 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1283 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1284 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1285 = _1249 * 0.5;
        float _1286 = _1259 * 0.5;
        float _1287 = _1269 * 0.5;
        float _1288 = dot(vec3(_1285, _1286, _1287), vec3(_1285, _1286, _1287));
        float _1293 = (_1288 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1288);
        float _1302 = (dot(vec3(_882, _883, _884), vec3(_1293 * _1285, _1293 * _1286, _1293 * _1287)) + 1.0) * 0.5;
        float _4285 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1312 = sqrt(((_1286 * _1286) + (_1285 * _1285)) + (_1287 * _1287)) / (_1282 + 9.9999997473787516355514526367188e-06);
        float _4296 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1313 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
        float _1314 = _1313 * 2.0;
        float _1318 = (1.0 - _1313) / (_1313 + 1.0);
        float _4307 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1319 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
        float _1328 = ((((1.0 - _1319) * (_1314 + 2.0)) * exp2(log2(isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0))) * (_1314 + 1.0))) + _1319) * _1282;
        float _1329 = _1250 * 0.5;
        float _1330 = _1260 * 0.5;
        float _1331 = _1270 * 0.5;
        float _1332 = dot(vec3(_1329, _1330, _1331), vec3(_1329, _1330, _1331));
        float _1337 = (_1332 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1332);
        float _1345 = (dot(vec3(_882, _883, _884), vec3(_1337 * _1329, _1337 * _1330, _1337 * _1331)) + 1.0) * 0.5;
        float _4318 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1354 = sqrt(((_1330 * _1330) + (_1329 * _1329)) + (_1331 * _1331)) / (_1283 + 9.9999997473787516355514526367188e-06);
        float _4329 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1355 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
        float _1356 = _1355 * 2.0;
        float _1360 = (1.0 - _1355) / (_1355 + 1.0);
        float _4340 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1361 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
        float _1370 = ((((1.0 - _1361) * (_1356 + 2.0)) * exp2(log2(isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0))) * (_1356 + 1.0))) + _1361) * _1283;
        float _1371 = _1251 * 0.5;
        float _1372 = _1261 * 0.5;
        float _1373 = _1271 * 0.5;
        float _1374 = dot(vec3(_1371, _1372, _1373), vec3(_1371, _1372, _1373));
        float _1379 = (_1374 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1374);
        float _1387 = (dot(vec3(_882, _883, _884), vec3(_1379 * _1371, _1379 * _1372, _1379 * _1373)) + 1.0) * 0.5;
        float _4351 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1396 = sqrt(((_1372 * _1372) + (_1371 * _1371)) + (_1373 * _1373)) / (_1284 + 9.9999997473787516355514526367188e-06);
        float _4362 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1397 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
        float _1398 = _1397 * 2.0;
        float _1402 = (1.0 - _1397) / (_1397 + 1.0);
        float _4373 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1403 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
        float _1412 = ((((1.0 - _1403) * (_1398 + 2.0)) * exp2(log2(isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0))) * (_1398 + 1.0))) + _1403) * _1284;
        _1420 = _1251;
        _1422 = _1250;
        _1423 = _1249;
        _1424 = _1261;
        _1425 = _1260;
        _1426 = _1259;
        _1427 = _1271;
        _1428 = _1270;
        _1429 = _1269;
        _1430 = _1284;
        _1431 = _1283;
        _1432 = _1282;
        _1433 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0)));
        _1434 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0)));
        _1435 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0)));
    }
    else
    {
        _1420 = _1421;
        _1422 = _1421;
        _1423 = _1421;
        _1424 = _1421;
        _1425 = _1421;
        _1426 = _1421;
        _1427 = _1421;
        _1428 = _1421;
        _1429 = _1421;
        _1430 = _1421;
        _1431 = _1421;
        _1432 = _1421;
        _1433 = 0.0;
        _1434 = 0.0;
        _1435 = 0.0;
    }
    float _1729;
    float _1730;
    float _1731;
    float _1732;
    float _1733;
    float _1734;
    float _1735;
    float _1736;
    float _1737;
    float _1738;
    float _1739;
    float _1740;
    float _1741;
    float _1742;
    float _1743;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1460 = fma(_1119, cbModelParam._m0[30u].z, fma(_1115, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1111));
        float _1464 = fma(_1119, cbModelParam._m0[31u].z, fma(_1115, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1111));
        float _1468 = fma(_1119, cbModelParam._m0[32u].z, fma(_1115, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1111));
        float _1491 = _1111 + _882;
        float _1492 = _1115 + _883;
        float _1493 = _1119 + _884;
        float _1503 = fma(_1493, cbModelParam._m0[30u].z, fma(_1492, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1491)) - _1460;
        float _1504 = fma(_1493, cbModelParam._m0[31u].z, fma(_1492, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1491)) - _1464;
        float _1505 = fma(_1493, cbModelParam._m0[32u].z, fma(_1492, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1491)) - _1468;
        float _1509 = inversesqrt(dot(vec3(_1503, _1504, _1505), vec3(_1503, _1504, _1505)));
        float _1522 = ((_1509 * _1503) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1460 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1523 = ((_1509 * _1504) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1464 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1524 = ((_1509 * _1505) / cbModelParam._m0[35u].z) + ((((((_1468 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1526 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1522, _1523, _1524), 0.0);
        vec4 _1533 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1522, _1523, _1524), 0.0);
        vec4 _1540 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1522, _1523, _1524), 0.0);
        vec4 _1547 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1522, _1523, _1524), 0.0);
        float _1559 = exp2((_1526.w + (-0.5)) * 20.0) * 2.0;
        float _1560 = _1559 * (_1526.x + (-0.5));
        float _1561 = _1559 * (_1526.y + (-0.5));
        float _1562 = _1559 * (_1526.z + (-0.5));
        float _1569 = exp2((_1533.w + (-0.5)) * 20.0) * 2.0;
        float _1570 = _1569 * (_1533.x + (-0.5));
        float _1571 = _1569 * (_1533.y + (-0.5));
        float _1572 = _1569 * (_1533.z + (-0.5));
        float _1579 = exp2((_1540.w + (-0.5)) * 20.0) * 2.0;
        float _1580 = _1579 * (_1540.x + (-0.5));
        float _1581 = _1579 * (_1540.y + (-0.5));
        float _1582 = _1579 * (_1540.z + (-0.5));
        float _1589 = exp2((_1547.w + (-0.5)) * 20.0) * 2.0;
        float _1590 = _1589 * (_1547.x + (-0.5));
        float _1591 = _1589 * (_1547.y + (-0.5));
        float _1592 = _1589 * (_1547.z + (-0.5));
        float _1593 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
        float _1594 = isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0));
        float _1595 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
        float _1596 = _1560 * 0.5;
        float _1597 = _1570 * 0.5;
        float _1598 = _1580 * 0.5;
        float _1599 = dot(vec3(_1596, _1597, _1598), vec3(_1596, _1597, _1598));
        float _1604 = (_1599 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1599);
        float _1612 = (dot(vec3(_882, _883, _884), vec3(_1604 * _1596, _1604 * _1597, _1604 * _1598)) + 1.0) * 0.5;
        float _4414 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
        float _1621 = sqrt(((_1597 * _1597) + (_1596 * _1596)) + (_1598 * _1598)) / (_1593 + 9.9999997473787516355514526367188e-06);
        float _4425 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
        float _1622 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
        float _1623 = _1622 * 2.0;
        float _1627 = (1.0 - _1622) / (_1622 + 1.0);
        float _4436 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
        float _1628 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
        float _1637 = ((((1.0 - _1628) * (_1623 + 2.0)) * exp2(log2(isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0))) * (_1623 + 1.0))) + _1628) * _1593;
        float _1638 = _1561 * 0.5;
        float _1639 = _1571 * 0.5;
        float _1640 = _1581 * 0.5;
        float _1641 = dot(vec3(_1638, _1639, _1640), vec3(_1638, _1639, _1640));
        float _1646 = (_1641 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1641);
        float _1654 = (dot(vec3(_882, _883, _884), vec3(_1646 * _1638, _1646 * _1639, _1646 * _1640)) + 1.0) * 0.5;
        float _4447 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
        float _1663 = sqrt(((_1639 * _1639) + (_1638 * _1638)) + (_1640 * _1640)) / (_1594 + 9.9999997473787516355514526367188e-06);
        float _4458 = isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0));
        float _1664 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
        float _1665 = _1664 * 2.0;
        float _1669 = (1.0 - _1664) / (_1664 + 1.0);
        float _4469 = isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0));
        float _1670 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
        float _1679 = ((((1.0 - _1670) * (_1665 + 2.0)) * exp2(log2(isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0))) * (_1665 + 1.0))) + _1670) * _1594;
        float _1680 = _1562 * 0.5;
        float _1681 = _1572 * 0.5;
        float _1682 = _1582 * 0.5;
        float _1683 = dot(vec3(_1680, _1681, _1682), vec3(_1680, _1681, _1682));
        float _1688 = (_1683 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1683);
        float _1696 = (dot(vec3(_882, _883, _884), vec3(_1688 * _1680, _1688 * _1681, _1688 * _1682)) + 1.0) * 0.5;
        float _4480 = isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0));
        float _1705 = sqrt(((_1681 * _1681) + (_1680 * _1680)) + (_1682 * _1682)) / (_1595 + 9.9999997473787516355514526367188e-06);
        float _4491 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
        float _1706 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
        float _1707 = _1706 * 2.0;
        float _1711 = (1.0 - _1706) / (_1706 + 1.0);
        float _4502 = isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0));
        float _1712 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
        float _1721 = ((((1.0 - _1712) * (_1707 + 2.0)) * exp2(log2(isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0))) * (_1707 + 1.0))) + _1712) * _1595;
        _1729 = _1562;
        _1730 = _1561;
        _1731 = _1560;
        _1732 = _1572;
        _1733 = _1571;
        _1734 = _1570;
        _1735 = _1582;
        _1736 = _1581;
        _1737 = _1580;
        _1738 = _1595;
        _1739 = _1594;
        _1740 = _1593;
        _1741 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0)));
        _1742 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0)));
        _1743 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0)));
    }
    else
    {
        _1729 = _1421;
        _1730 = _1421;
        _1731 = _1421;
        _1732 = _1421;
        _1733 = _1421;
        _1734 = _1421;
        _1735 = _1421;
        _1736 = _1421;
        _1737 = _1421;
        _1738 = _1421;
        _1739 = _1421;
        _1740 = _1421;
        _1741 = 0.0;
        _1742 = 0.0;
        _1743 = 0.0;
    }
    float _1753 = (cbModelParam._m0[1u].x * (_1741 - _1433)) + _1433;
    float _1754 = (cbModelParam._m0[1u].x * (_1742 - _1434)) + _1434;
    float _1755 = (cbModelParam._m0[1u].x * (_1743 - _1435)) + _1435;
    float _1776 = fma(_1755, cbSceneParam._m0[89u].z, fma(_1754, cbSceneParam._m0[89u].y, _1753 * cbSceneParam._m0[89u].x));
    float _1779 = fma(_1755, cbSceneParam._m0[90u].z, fma(_1754, cbSceneParam._m0[90u].y, _1753 * cbSceneParam._m0[90u].x));
    float _1782 = fma(_1755, cbSceneParam._m0[91u].z, fma(_1754, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1753));
    float _1797 = _1055 * 0.5;
    float _1798 = _1056 * 0.5;
    float _1799 = _1057 * 0.5;
    float _1800 = dot(vec4(_1797, _1798, _1799, 1.0), vec4(_1731, _1734, _1737, _1740));
    float _1803 = dot(vec4(_1797, _1798, _1799, 1.0), vec4(_1730, _1733, _1736, _1739));
    float _1806 = dot(vec4(_1797, _1798, _1799, 1.0), vec4(_1729, _1732, _1735, _1738));
    float _1840;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1813 = dot(vec4(_1797, _1798, _1799, 1.0), vec4(_1420, _1424, _1427, _1430));
        float _1817 = dot(vec4(_1797, _1798, _1799, 1.0), vec4(_1422, _1425, _1428, _1431));
        float _1821 = dot(vec4(_1797, _1798, _1799, 1.0), vec4(_1423, _1426, _1429, _1432));
        float _1828 = dot(vec4(cbModelParam._m0[39u]), vec4(_1797, _1798, _1799, 1.0));
        _1840 = dot(vec3(isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0)), isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0)), isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1828) ? 0.0 : (isnan(0.0) ? _1828 : max(0.0, _1828))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1840 = 1.0;
    }
    float _1851;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1842 = dot(vec4(cbModelParam._m0[40u]), vec4(_1797, _1798, _1799, 1.0));
        _1851 = dot(vec3(isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0)), isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0)), isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1842) ? 0.0 : (isnan(0.0) ? _1842 : max(0.0, _1842))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1851 = 1.0;
    }
    float _1855 = (_1851 * cbModelParam._m0[1u].x) + (_1840 * (1.0 - cbModelParam._m0[1u].x));
    float _1865 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _885);
    float _1866 = isnan(_1865) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1865 : min(cbModelParam._m0[25u].z, _1865));
    float _1947;
    float _1949;
    float _1951;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1914 = fma(_1119, cbModelParam._m0[13u].z, fma(_1115, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1111)) + cbModelParam._m0[13u].w;
        float _1918 = fma(_1119, cbModelParam._m0[14u].z, fma(_1115, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1111)) + cbModelParam._m0[14u].w;
        float _1922 = fma(_1119, cbModelParam._m0[15u].z, fma(_1115, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1111)) + cbModelParam._m0[15u].w;
        float _1925 = fma(_1057, cbModelParam._m0[13u].z, fma(_1056, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1055));
        float _1928 = fma(_1057, cbModelParam._m0[14u].z, fma(_1056, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1055));
        float _1931 = fma(_1057, cbModelParam._m0[15u].z, fma(_1056, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1055));
        float _1959;
        if (_1925 > 0.0)
        {
            _1959 = abs((1.0 - _1914) / _1925);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1925 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1914 + 1.0) / _1925);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1959 = frontier_phi_14_12_ladder;
        }
        float _2131;
        if (_1928 > 0.0)
        {
            _2131 = abs((1.0 - _1918) / _1928);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1928 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1918 + 1.0) / _1928);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2131 = frontier_phi_23_19_ladder;
        }
        float _2426;
        if (_1931 > 0.0)
        {
            _2426 = abs((1.0 - _1922) / _1931);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1931 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1922 + 1.0) / _1931);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2426 = frontier_phi_35_30_ladder;
        }
        float _2428 = isnan(_2131) ? _1959 : (isnan(_1959) ? _2131 : min(_1959, _2131));
        float _2429 = isnan(_2426) ? _2428 : (isnan(_2428) ? _2426 : min(_2428, _2426));
        float _2433 = (_2429 * _1925) + _1914;
        float _2434 = (_2429 * _1928) + _1918;
        float _2435 = (_2429 * _1931) + _1922;
        float _2436 = _2429 * 9.9999997473787516355514526367188e-05;
        float _2438 = (-1.0) - _2436;
        float _2440 = _2436 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2435 > _2440) || ((_2435 < _2438) || ((_2434 > _2440) || ((_2434 < _2438) || ((_2433 < _2438) || (_2433 > _2440))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2580 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2435, cbModelParam._m0[9u].z, fma(_2434, cbModelParam._m0[9u].y, _2433 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2435, cbModelParam._m0[10u].z, fma(_2434, cbModelParam._m0[10u].y, _2433 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2435, cbModelParam._m0[11u].z, fma(_2434, cbModelParam._m0[11u].y, _2433 * cbModelParam._m0[11u].x))), _1866);
            frontier_phi_13_35_ladder = _2580.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2580.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2580.x * cbModelParam._m0[1u].y;
        }
        _1947 = frontier_phi_13_35_ladder_2;
        _1949 = frontier_phi_13_35_ladder_1;
        _1951 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1935 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1055, _1056, _1057), _1866);
        _1947 = _1935.x * cbModelParam._m0[1u].y;
        _1949 = _1935.y * cbModelParam._m0[1u].y;
        _1951 = _1935.z * cbModelParam._m0[1u].y;
    }
    float _1955 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _885);
    float _1956 = isnan(_1955) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1955 : min(cbModelParam._m0[25u].w, _1955));
    float _2046;
    float _2048;
    float _2050;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2010 = fma(_1119, cbModelParam._m0[21u].z, fma(_1115, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1111)) + cbModelParam._m0[21u].w;
        float _2014 = fma(_1119, cbModelParam._m0[22u].z, fma(_1115, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1111)) + cbModelParam._m0[22u].w;
        float _2018 = fma(_1119, cbModelParam._m0[23u].z, fma(_1115, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1111)) + cbModelParam._m0[23u].w;
        float _2021 = fma(_1057, cbModelParam._m0[21u].z, fma(_1056, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1055));
        float _2024 = fma(_1057, cbModelParam._m0[22u].z, fma(_1056, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1055));
        float _2027 = fma(_1057, cbModelParam._m0[23u].z, fma(_1056, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1055));
        float _2136;
        if (_2021 > 0.0)
        {
            _2136 = abs((1.0 - _2010) / _2021);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2021 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2010 + 1.0) / _2021);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2136 = frontier_phi_25_21_ladder;
        }
        float _2453;
        if (_2024 > 0.0)
        {
            _2453 = abs((1.0 - _2014) / _2024);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2024 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2014 + 1.0) / _2024);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2453 = frontier_phi_37_32_ladder;
        }
        float _2791;
        if (_2027 > 0.0)
        {
            _2791 = abs((1.0 - _2018) / _2027);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2027 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2018 + 1.0) / _2027);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2791 = frontier_phi_47_44_ladder;
        }
        float _2793 = isnan(_2453) ? _2136 : (isnan(_2136) ? _2453 : min(_2136, _2453));
        float _2794 = isnan(_2791) ? _2793 : (isnan(_2793) ? _2791 : min(_2793, _2791));
        float _2798 = (_2794 * _2021) + _2010;
        float _2799 = (_2794 * _2024) + _2014;
        float _2800 = (_2794 * _2027) + _2018;
        float _2801 = _2794 * 9.9999997473787516355514526367188e-05;
        float _2802 = (-1.0) - _2801;
        float _2804 = _2801 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2800 > _2804) || ((_2800 < _2802) || ((_2799 > _2804) || ((_2799 < _2802) || ((_2798 < _2802) || (_2798 > _2804))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2922 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2800, cbModelParam._m0[17u].z, fma(_2799, cbModelParam._m0[17u].y, _2798 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2800, cbModelParam._m0[18u].z, fma(_2799, cbModelParam._m0[18u].y, _2798 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2800, cbModelParam._m0[19u].z, fma(_2799, cbModelParam._m0[19u].y, _2798 * cbModelParam._m0[19u].x))), _1956);
            frontier_phi_22_47_ladder = _2922.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2922.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2922.x * cbModelParam._m0[1u].z;
        }
        _2046 = frontier_phi_22_47_ladder_2;
        _2048 = frontier_phi_22_47_ladder_1;
        _2050 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2030 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1055, _1056, _1057), _1956);
        _2046 = _2030.x * cbModelParam._m0[1u].z;
        _2048 = _2030.y * cbModelParam._m0[1u].z;
        _2050 = _2030.z * cbModelParam._m0[1u].z;
    }
    float _2063 = (((_1082 * _1031) + _1083) * _1047) * ((cbModelParam._m0[1u].w * (_2046 - _1947)) + _1947);
    float _2065 = (((_1082 * _1033) + _1083) * _1047) * ((cbModelParam._m0[1u].w * (_2048 - _1949)) + _1949);
    float _2067 = (((_1082 * _1034) + _1083) * _1047) * ((cbModelParam._m0[1u].w * (_2050 - _1951)) + _1951);
    float _2070 = fma(_2067, cbSceneParam._m0[89u].z, fma(_2065, cbSceneParam._m0[89u].y, _2063 * cbSceneParam._m0[89u].x));
    float _2073 = fma(_2067, cbSceneParam._m0[90u].z, fma(_2065, cbSceneParam._m0[90u].y, _2063 * cbSceneParam._m0[90u].x));
    float _2076 = fma(_2067, cbSceneParam._m0[91u].z, fma(_2065, cbSceneParam._m0[91u].y, _2063 * cbSceneParam._m0[91u].x));
    float _2110 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2114 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2118 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2122 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2123 = _2110 / _2122;
    float _2124 = _2114 / _2122;
    float _2125 = _2118 / _2122;
    float _2272;
    float _2273;
    float _2274;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2152 = ((uint(_2125 > cbSceneParam._m0[59u].y) + uint(_2125 > cbSceneParam._m0[59u].x)) + uint(_2125 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2153 = _2152 + 43u;
        uint _2161 = _2152 + 44u;
        uint _2169 = _2152 + 45u;
        uint _2177 = _2152 + 46u;
        float _2188 = fma(_2122, cbSceneParam._m0[_2153].w, fma(_2118, cbSceneParam._m0[_2153].z, fma(_2114, cbSceneParam._m0[_2153].y, _2110 * cbSceneParam._m0[_2153].x)));
        float _2192 = fma(_2122, cbSceneParam._m0[_2161].w, fma(_2118, cbSceneParam._m0[_2161].z, fma(_2114, cbSceneParam._m0[_2161].y, _2110 * cbSceneParam._m0[_2161].x)));
        float _2200 = fma(_2122, cbSceneParam._m0[_2177].w, fma(_2118, cbSceneParam._m0[_2177].z, fma(_2114, cbSceneParam._m0[_2177].y, _2110 * cbSceneParam._m0[_2177].x)));
        float _2205 = cbSceneParam._m0[33u].z * _2200;
        float _2207 = cbSceneParam._m0[33u].w * _2200;
        float _2210 = fma(_2122, cbSceneParam._m0[_2169].w, fma(_2118, cbSceneParam._m0[_2169].z, fma(_2114, cbSceneParam._m0[_2169].y, _2110 * cbSceneParam._m0[_2169].x))) / _2200;
        float _2258 = (cbSceneParam._m0[33u].x - sqrt(((_2124 * _2124) + (_2123 * _2123)) + (_2125 * _2125))) * cbSceneParam._m0[33u].y;
        float _4628 = isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0));
        float _2265 = (isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2205 + _2188) / _2200, (_2207 + _2192) / _2200), _2210), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2207 + _2188) / _2200, (_2192 - _2205) / _2200), _2210), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2188 - _2205) / _2200, (_2192 - _2207) / _2200), _2210), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2188 - _2207) / _2200, (_2205 + _2192) / _2200), _2210), 0.0)).x), vec4(0.25)));
        _2272 = 1.0 - (_2265 * cbSceneParam._m0[34u].x);
        _2273 = 1.0 - (_2265 * cbSceneParam._m0[34u].y);
        _2274 = 1.0 - (_2265 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2272 = 1.0;
        _2273 = 1.0;
        _2274 = 1.0;
    }
    float _2338;
    float _2340;
    float _2342;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2326 = fma(_2122, cbSceneParam._m0[63u].w, fma(_2118, cbSceneParam._m0[63u].z, fma(_2114, cbSceneParam._m0[63u].y, _2110 * cbSceneParam._m0[63u].x)));
        float _2327 = fma(_2122, cbSceneParam._m0[60u].w, fma(_2118, cbSceneParam._m0[60u].z, fma(_2114, cbSceneParam._m0[60u].y, _2110 * cbSceneParam._m0[60u].x))) / _2326;
        float _2328 = fma(_2122, cbSceneParam._m0[61u].w, fma(_2118, cbSceneParam._m0[61u].z, fma(_2114, cbSceneParam._m0[61u].y, _2110 * cbSceneParam._m0[61u].x))) / _2326;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2327 >= cbSceneParam._m0[64u].x) && (_2328 >= cbSceneParam._m0[64u].y)) && (_2327 <= cbSceneParam._m0[64u].z)) && (_2328 <= cbSceneParam._m0[64u].w))
        {
            float _2466 = fma(_2122, cbSceneParam._m0[62u].w, fma(_2118, cbSceneParam._m0[62u].z, fma(_2114, cbSceneParam._m0[62u].y, _2110 * cbSceneParam._m0[62u].x))) / _2326;
            float _2470 = isnan(cbSceneParam._m0[41u].w) ? _2466 : (isnan(_2466) ? cbSceneParam._m0[41u].w : max(_2466, cbSceneParam._m0[41u].w));
            float _2513 = (cbSceneParam._m0[33u].x - sqrt(((_2124 * _2124) + (_2123 * _2123)) + (_2125 * _2125))) * cbSceneParam._m0[33u].y;
            float _4644 = isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0));
            float _2520 = (isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2327, cbSceneParam._m0[33u].w + _2328), _2470), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2327, _2328 - cbSceneParam._m0[33u].z), _2470), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2327 - cbSceneParam._m0[33u].z, _2328 - cbSceneParam._m0[33u].w), _2470), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2327 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2328), _2470), 0.0)).x), vec4(0.25)));
            float _2524 = 1.0 - (_2520 * cbSceneParam._m0[34u].x);
            float _2525 = 1.0 - (_2520 * cbSceneParam._m0[34u].y);
            float _2526 = 1.0 - (_2520 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2526) ? _2274 : (isnan(_2274) ? _2526 : min(_2274, _2526));
            frontier_phi_34_33_ladder_1 = isnan(_2525) ? _2273 : (isnan(_2273) ? _2525 : min(_2273, _2525));
            frontier_phi_34_33_ladder_2 = isnan(_2524) ? _2272 : (isnan(_2272) ? _2524 : min(_2272, _2524));
        }
        else
        {
            frontier_phi_34_33_ladder = _2274;
            frontier_phi_34_33_ladder_1 = _2273;
            frontier_phi_34_33_ladder_2 = _2272;
        }
        _2338 = frontier_phi_34_33_ladder_2;
        _2340 = frontier_phi_34_33_ladder_1;
        _2342 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2338 = _2272;
        _2340 = _2273;
        _2342 = _2274;
    }
    uvec4 _2347 = floatBitsToUint(cbInstanceData._m0[_283 + 5u]);
    uint _2349 = _2347.x * 14u;
    uint _2350 = _2349 + 13u;
    float _2357 = _1047 + (-1.0);
    float _2362 = (cbLight._m0[_2350].x * _2357) + 1.0;
    float _2363 = (cbLight._m0[_2350].y * _2357) + 1.0;
    float _2364 = (cbLight._m0[_2350].z * _2357) + 1.0;
    float _2365 = (cbLight._m0[_2350].w * _2357) + 1.0;
    uint _2366 = _2349 + 5u;
    float _2372 = isnan(1.0) ? _2363 : (isnan(_2363) ? 1.0 : min(_2363, 1.0));
    uint _2376 = _2349 + 4u;
    float _2385 = isnan(1.0) ? _2362 : (isnan(_2362) ? 1.0 : min(_2362, 1.0));
    uint _2389 = _2349 | 1u;
    float _2400 = dot(vec3(cbLight._m0[_2349].xyz), vec3(_882, _883, _884));
    float _2403 = dot(vec3(cbLight._m0[_2389].xyz), vec3(_882, _883, _884));
    float _4680 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
    float _4691 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
    float _2408 = (isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0))) * 0.3183098733425140380859375;
    float _2410 = (isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0))) * 0.3183098733425140380859375;
    float _2417 = ((cbLight._m0[_2366].x * _2372) * _2410) + (((cbLight._m0[_2376].x * _2338) * _2385) * _2408);
    float _2418 = ((_2372 * cbLight._m0[_2366].y) * _2410) + (((cbLight._m0[_2376].y * _2340) * _2385) * _2408);
    float _2419 = ((_2372 * cbLight._m0[_2366].z) * _2410) + (((cbLight._m0[_2376].z * _2342) * _2385) * _2408);
    uvec4 _2423 = floatBitsToUint(cbLight._m0[_2349 + 12u]);
    bool _2425 = _2423.x == 0u;
    float _2527;
    float _2529;
    float _2531;
    if (_2425)
    {
        _2527 = _2417;
        _2529 = _2418;
        _2531 = _2419;
    }
    else
    {
        uint _2535 = _2349 + 6u;
        float _2551 = (dot(vec3(cbLight._m0[_2349 + 2u].xyz), vec3(_882, _883, _884)) * 0.5) + 0.5;
        float _2552 = _2551 * _2551;
        float _4702 = isnan(0.0) ? _2552 : (isnan(_2552) ? 0.0 : max(_2552, 0.0));
        float _2553 = isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0));
        float _2554 = isnan(1.0) ? _2364 : (isnan(_2364) ? 1.0 : min(_2364, 1.0));
        _2527 = (((cbLight._m0[_2535].x * 0.3183098733425140380859375) * _2553) * _2554) + _2417;
        _2529 = (((cbLight._m0[_2535].y * 0.3183098733425140380859375) * _2553) * _2554) + _2418;
        _2531 = (((cbLight._m0[_2535].z * 0.3183098733425140380859375) * _2553) * _2554) + _2419;
    }
    bool _2534 = _2423.y == 0u;
    float _2589;
    float _2591;
    float _2593;
    if (_2534)
    {
        _2589 = _2527;
        _2591 = _2529;
        _2593 = _2531;
    }
    else
    {
        uint _2762 = _2349 + 7u;
        float _2778 = (dot(vec3(cbLight._m0[_2349 + 3u].xyz), vec3(_882, _883, _884)) * 0.5) + 0.5;
        float _2779 = _2778 * _2778;
        float _4718 = isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : max(_2779, 0.0));
        float _2780 = isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0));
        float _2781 = isnan(1.0) ? _2365 : (isnan(_2365) ? 1.0 : min(_2365, 1.0));
        _2589 = (((cbLight._m0[_2762].x * 0.3183098733425140380859375) * _2780) * _2781) + _2527;
        _2591 = (((cbLight._m0[_2762].y * 0.3183098733425140380859375) * _2780) * _2781) + _2529;
        _2593 = (((cbLight._m0[_2762].z * 0.3183098733425140380859375) * _2780) * _2781) + _2531;
    }
    uint _2596 = _2349 + 8u;
    float _2609 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2349].w)) * _885) * 0.949999988079071044921875);
    float _2610 = _2609 * _2609;
    float _2611 = cbLight._m0[_2349].x + _961;
    float _2612 = cbLight._m0[_2349].y + _962;
    float _2613 = cbLight._m0[_2349].z + _963;
    float _2617 = inversesqrt(dot(vec3(_2611, _2612, _2613), vec3(_2611, _2612, _2613)));
    float _2618 = _2617 * _2611;
    float _2619 = _2617 * _2612;
    float _2620 = _2617 * _2613;
    float _2621 = dot(vec3(_882, _883, _884), vec3(cbLight._m0[_2349].xyz));
    float _4734 = isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : max(_2621, 0.0));
    float _2624 = isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0));
    float _4745 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
    float _2625 = isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0));
    float _2626 = dot(vec3(_882, _883, _884), vec3(_2618, _2619, _2620));
    float _4756 = isnan(0.0) ? _2626 : (isnan(_2626) ? 0.0 : max(_2626, 0.0));
    float _2629 = isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0));
    float _2630 = dot(vec3(cbLight._m0[_2349].xyz), vec3(_2618, _2619, _2620));
    float _4767 = isnan(0.0) ? _2630 : (isnan(_2630) ? 0.0 : max(_2630, 0.0));
    float _2634 = _2610 * _2610;
    float _2638 = ((_2629 * _2629) * (_2634 + (-1.0))) + 1.0;
    float _2646 = exp2(log2(1.0 - (isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0)))) * 5.0);
    float _2647 = 0.959999978542327880859375 - _1028;
    float _2649 = 0.959999978542327880859375 - _1029;
    float _2650 = 0.959999978542327880859375 - _1030;
    float _2657 = 1.0 - _2610;
    float _2668 = (0.5 / (((_2625 * ((_2624 * _2657) + _2610)) + 9.9999999392252902907785028219223e-09) + (((_2625 * _2657) + _2610) * _2624))) * _2624;
    float _4778 = isnan(0.0) ? _2668 : (isnan(_2668) ? 0.0 : max(_2668, 0.0));
    float _2670 = (isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0))) * (_2634 / ((_2638 * _2638) * 3.141590118408203125));
    uint _2684 = _2349 + 9u;
    float _2695 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2389].w)) * _885) * 0.949999988079071044921875);
    float _2696 = _2695 * _2695;
    float _2697 = cbLight._m0[_2389].x + _961;
    float _2698 = cbLight._m0[_2389].y + _962;
    float _2699 = cbLight._m0[_2389].z + _963;
    float _2703 = inversesqrt(dot(vec3(_2697, _2698, _2699), vec3(_2697, _2698, _2699)));
    float _2704 = _2703 * _2697;
    float _2705 = _2703 * _2698;
    float _2706 = _2703 * _2699;
    float _2707 = dot(vec3(_882, _883, _884), vec3(cbLight._m0[_2389].xyz));
    float _4789 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0));
    float _2710 = isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0));
    float _2711 = dot(vec3(_882, _883, _884), vec3(_2704, _2705, _2706));
    float _4800 = isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : max(_2711, 0.0));
    float _2714 = isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0));
    float _2715 = dot(vec3(cbLight._m0[_2389].xyz), vec3(_2704, _2705, _2706));
    float _4811 = isnan(0.0) ? _2715 : (isnan(_2715) ? 0.0 : max(_2715, 0.0));
    float _2719 = _2696 * _2696;
    float _2723 = ((_2714 * _2714) * (_2719 + (-1.0))) + 1.0;
    float _2730 = exp2(log2(1.0 - (isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0)))) * 5.0);
    float _2737 = 1.0 - _2696;
    float _2747 = (0.5 / (((_2625 * ((_2710 * _2737) + _2696)) + 9.9999999392252902907785028219223e-09) + (((_2625 * _2737) + _2696) * _2710))) * _2710;
    float _4822 = isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : max(_2747, 0.0));
    float _2749 = (isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0))) * (_2719 / ((_2723 * _2723) * 3.141590118408203125));
    float _2759 = (((((_2730 * _2647) + _1031) * cbLight._m0[_2684].x) * _2749) * _2372) + ((((cbLight._m0[_2596].x * _2338) * ((_2646 * _2647) + _1031)) * _2670) * _2385);
    float _2760 = (((((_2730 * _2649) + _1033) * cbLight._m0[_2684].y) * _2749) * _2372) + ((((cbLight._m0[_2596].y * _2340) * ((_2646 * _2649) + _1033)) * _2670) * _2385);
    float _2761 = (((((_2730 * _2650) + _1034) * cbLight._m0[_2684].z) * _2749) * _2372) + ((((cbLight._m0[_2596].z * _2342) * ((_2646 * _2650) + _1034)) * _2670) * _2385);
    float _2817;
    float _2819;
    float _2821;
    if (_2425)
    {
        _2817 = _2759;
        _2819 = _2760;
        _2821 = _2761;
    }
    else
    {
        uint _2823 = _2349 + 2u;
        uint _2827 = _2349 + 10u;
        float _2841 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2823].w)) * _885) * 0.949999988079071044921875);
        float _2842 = _2841 * _2841;
        float _2843 = cbLight._m0[_2823].x + _961;
        float _2844 = cbLight._m0[_2823].y + _962;
        float _2845 = cbLight._m0[_2823].z + _963;
        float _2849 = inversesqrt(dot(vec3(_2843, _2844, _2845), vec3(_2843, _2844, _2845)));
        float _2850 = _2849 * _2843;
        float _2851 = _2849 * _2844;
        float _2852 = _2849 * _2845;
        float _2853 = dot(vec3(_882, _883, _884), vec3(cbLight._m0[_2823].xyz));
        float _4833 = isnan(0.0) ? _2853 : (isnan(_2853) ? 0.0 : max(_2853, 0.0));
        float _2856 = isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0));
        float _2857 = dot(vec3(_882, _883, _884), vec3(_2850, _2851, _2852));
        float _4844 = isnan(0.0) ? _2857 : (isnan(_2857) ? 0.0 : max(_2857, 0.0));
        float _2860 = isnan(1.0) ? _4844 : (isnan(_4844) ? 1.0 : min(_4844, 1.0));
        float _2861 = dot(vec3(cbLight._m0[_2823].xyz), vec3(_2850, _2851, _2852));
        float _4855 = isnan(0.0) ? _2861 : (isnan(_2861) ? 0.0 : max(_2861, 0.0));
        float _2865 = _2842 * _2842;
        float _2869 = ((_2860 * _2860) * (_2865 + (-1.0))) + 1.0;
        float _2876 = exp2(log2(1.0 - (isnan(1.0) ? _4855 : (isnan(_4855) ? 1.0 : min(_4855, 1.0)))) * 5.0);
        float _2883 = 1.0 - _2842;
        float _2893 = (0.5 / (((_2625 * ((_2856 * _2883) + _2842)) + 9.9999999392252902907785028219223e-09) + (((_2625 * _2883) + _2842) * _2856))) * _2856;
        float _4866 = isnan(0.0) ? _2893 : (isnan(_2893) ? 0.0 : max(_2893, 0.0));
        float _2895 = (isnan(1.0) ? _4866 : (isnan(_4866) ? 1.0 : min(_4866, 1.0))) * (_2865 / ((_2869 * _2869) * 3.141590118408203125));
        float _2896 = isnan(1.0) ? _2364 : (isnan(_2364) ? 1.0 : min(_2364, 1.0));
        _2817 = (((((_2876 * _2647) + _1031) * cbLight._m0[_2827].x) * _2895) * _2896) + _2759;
        _2819 = (((((_2876 * _2649) + _1033) * cbLight._m0[_2827].y) * _2895) * _2896) + _2760;
        _2821 = (((((_2876 * _2650) + _1034) * cbLight._m0[_2827].z) * _2895) * _2896) + _2761;
    }
    float _2927;
    float _2929;
    float _2931;
    if (_2534)
    {
        _2927 = _2817;
        _2929 = _2819;
        _2931 = _2821;
    }
    else
    {
        uint _2938 = _2349 + 3u;
        uint _2942 = _2349 + 11u;
        float _2956 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2938].w)) * _885) * 0.949999988079071044921875);
        float _2957 = _2956 * _2956;
        float _2958 = cbLight._m0[_2938].x + _961;
        float _2959 = cbLight._m0[_2938].y + _962;
        float _2960 = cbLight._m0[_2938].z + _963;
        float _2964 = inversesqrt(dot(vec3(_2958, _2959, _2960), vec3(_2958, _2959, _2960)));
        float _2965 = _2964 * _2958;
        float _2966 = _2964 * _2959;
        float _2967 = _2964 * _2960;
        float _2968 = dot(vec3(_882, _883, _884), vec3(cbLight._m0[_2938].xyz));
        float _4882 = isnan(0.0) ? _2968 : (isnan(_2968) ? 0.0 : max(_2968, 0.0));
        float _2971 = isnan(1.0) ? _4882 : (isnan(_4882) ? 1.0 : min(_4882, 1.0));
        float _2972 = dot(vec3(_882, _883, _884), vec3(_2965, _2966, _2967));
        float _4893 = isnan(0.0) ? _2972 : (isnan(_2972) ? 0.0 : max(_2972, 0.0));
        float _2975 = isnan(1.0) ? _4893 : (isnan(_4893) ? 1.0 : min(_4893, 1.0));
        float _2976 = dot(vec3(cbLight._m0[_2938].xyz), vec3(_2965, _2966, _2967));
        float _4904 = isnan(0.0) ? _2976 : (isnan(_2976) ? 0.0 : max(_2976, 0.0));
        float _2980 = _2957 * _2957;
        float _2984 = ((_2975 * _2975) * (_2980 + (-1.0))) + 1.0;
        float _2991 = exp2(log2(1.0 - (isnan(1.0) ? _4904 : (isnan(_4904) ? 1.0 : min(_4904, 1.0)))) * 5.0);
        float _2998 = 1.0 - _2957;
        float _3008 = (0.5 / (((_2625 * ((_2971 * _2998) + _2957)) + 9.9999999392252902907785028219223e-09) + (((_2625 * _2998) + _2957) * _2971))) * _2971;
        float _4915 = isnan(0.0) ? _3008 : (isnan(_3008) ? 0.0 : max(_3008, 0.0));
        float _3010 = (isnan(1.0) ? _4915 : (isnan(_4915) ? 1.0 : min(_4915, 1.0))) * (_2980 / ((_2984 * _2984) * 3.141590118408203125));
        float _3011 = isnan(1.0) ? _2365 : (isnan(_2365) ? 1.0 : min(_2365, 1.0));
        _2927 = (((((_2991 * _2647) + _1031) * cbLight._m0[_2942].x) * _3010) * _3011) + _2817;
        _2929 = (((((_2991 * _2649) + _1033) * cbLight._m0[_2942].y) * _3010) * _3011) + _2819;
        _2931 = (((((_2991 * _2650) + _1034) * cbLight._m0[_2942].z) * _3010) * _3011) + _2821;
    }
    float _3077;
    float _3079;
    float _3081;
    float _3083;
    float _3085;
    float _3087;
    if (_2347.y == 0u)
    {
        uvec4 _3032 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3033 = _3032.x;
        uint _3044 = uint((float(_3032.y) * floor(float(uint(cbSceneParam._m0[85u].y * _970) / _3033))) + floor(float(uint(cbSceneParam._m0[85u].x * _969) / _3033)));
        float _3054 = (log2(_2125 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3055 = isnan(0.0) ? _3054 : (isnan(_3054) ? 0.0 : max(_3054, 0.0));
        uint _3058 = uint(isnan(14.0) ? _3055 : (isnan(_3055) ? 14.0 : min(_3055, 14.0)));
        uvec4 _3063 = texelFetch(g_lightClusterGridBuffer, int(((_3058 << 2u) + (_3044 << 6u)) >> 2u));
        uint _3064 = _3063.x;
        uint _3065 = _3032.z;
        float _3144;
        float _3146;
        float _3148;
        float _3150;
        float _3152;
        float _3154;
        if (((((1u << ((_3065 >> 4u) & 15u)) + 4294967295u) & _3064) == 0u) || ((_3065 & 240u) == 0u))
        {
            _3144 = 0.0;
            _3146 = 0.0;
            _3148 = 0.0;
            _3150 = 0.0;
            _3152 = 0.0;
            _3154 = 0.0;
        }
        else
        {
            float _3145;
            float _3147;
            float _3149;
            float _3151;
            float _3153;
            float _3155;
            float _3288 = 0.0;
            float _3289 = 0.0;
            float _3290 = 0.0;
            float _3291 = 0.0;
            float _3292 = 0.0;
            float _3293 = 0.0;
            uint _3294 = 0u;
            uint _3303;
            bool _3304;
            for (;;)
            {
                _3303 = texelFetch(g_lightClassification, int((((_3058 << 5u) + (_3044 << 9u)) + (_3294 << 2u)) >> 2u)).x;
                _3304 = _3303 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3304)
                {
                    frontier_phi_66_pred = _3293;
                    frontier_phi_66_pred_1 = _3292;
                    frontier_phi_66_pred_2 = _3291;
                    frontier_phi_66_pred_3 = _3290;
                    frontier_phi_66_pred_4 = _3289;
                    frontier_phi_66_pred_5 = _3288;
                }
                else
                {
                    float _3412;
                    float _3413;
                    float _3414;
                    float _3415;
                    float _3416;
                    float _3417;
                    uint _3418;
                    _3412 = _3288;
                    _3413 = _3289;
                    _3414 = _3290;
                    _3415 = _3291;
                    _3416 = _3292;
                    _3417 = _3293;
                    _3418 = _3303;
                    float _3344;
                    float _3345;
                    float _3346;
                    float _3347;
                    float _3348;
                    float _3349;
                    for (;;)
                    {
                        uint _3422 = uint(findLSB(_3418)) + (_3294 << 5u);
                        uint _3419 = (_3418 + 4294967295u) & _3418;
                        uint _3424 = _3422 * 48u;
                        vec4 _3438 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3424)).x, texelFetch(g_PointLightRenderingBuffer, int(_3424 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3424 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3424 + 3u)).x));
                        uint _3444 = (_3422 * 48u) + 4u;
                        vec4 _3457 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3444)).x, texelFetch(g_PointLightRenderingBuffer, int(_3444 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3444 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3444 + 3u)).x));
                        uint _3463 = (_3422 * 48u) + 8u;
                        vec3 _3474 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3463)).x, texelFetch(g_PointLightRenderingBuffer, int(_3463 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3463 + 2u)).x));
                        float _3478 = _3438.x - _2123;
                        float _3479 = _3438.y - _2124;
                        float _3480 = _3438.z - _2125;
                        float _3481 = dot(vec3(_3478, _3479, _3480), vec3(_3478, _3479, _3480));
                        float _3484 = inversesqrt(_3481);
                        float _3485 = _3484 * _3478;
                        float _3486 = _3484 * _3479;
                        float _3487 = _3484 * _3480;
                        float _3488 = dot(vec3(_988, _991, _994), vec3(_3485, _3486, _3487));
                        float _3493 = 1.0 - (_3481 * _3438.w);
                        float _4941 = isnan(0.0) ? _3493 : (isnan(_3493) ? 0.0 : max(_3493, 0.0));
                        float _3494 = isnan(1.0) ? _4941 : (isnan(_4941) ? 1.0 : min(_4941, 1.0));
                        float _3495 = sqrt(_3481) * _3457.w;
                        float _3498 = 1.39999997615814208984375 / (_3495 + 1.39999997615814208984375);
                        float _3499 = _3498 * _3498;
                        float _3502 = ((1.0 - _3499) * _3488) + _3499;
                        float _3505 = _3495 * _3495;
                        float _3509 = ((isnan(0.0) ? _3502 : (isnan(_3502) ? 0.0 : max(_3502, 0.0))) * _3494) / ((_3505 * 0.699999988079071044921875) + 1.0);
                        float _3513 = (-0.0) - _2123;
                        float _3514 = (-0.0) - _2124;
                        float _3515 = (-0.0) - _2125;
                        float _3519 = inversesqrt(dot(vec3(_3513, _3514, _3515), vec3(_3513, _3514, _3515)));
                        float _3520 = _3519 * _3513;
                        float _3521 = _3519 * _3514;
                        float _3522 = _3519 * _3515;
                        float _3529 = exp2(log2(1.0 / ((_3505 * 3.5) + 5.0)) * 0.25);
                        float _3530 = 1.0 - _1063;
                        float _3537 = sqrt(1.0 - ((1.0 - (_3530 * _3530)) * (1.0 - (_3529 * _3529))));
                        float _3538 = _3537 * _3537;
                        float _3539 = _3538 * _3538;
                        float _3540 = _3520 + _3485;
                        float _3541 = _3521 + _3486;
                        float _3542 = _3522 + _3487;
                        float _3546 = inversesqrt(dot(vec3(_3540, _3541, _3542), vec3(_3540, _3541, _3542)));
                        float _3550 = dot(vec3(_988, _991, _994), vec3(_3520, _3521, _3522));
                        float _4957 = isnan(0.0) ? _3550 : (isnan(_3550) ? 0.0 : max(_3550, 0.0));
                        float _3553 = isnan(1.0) ? _4957 : (isnan(_4957) ? 1.0 : min(_4957, 1.0));
                        float _3554 = dot(vec3(_988, _991, _994), vec3(_3546 * _3540, _3546 * _3541, _3546 * _3542));
                        float _4968 = isnan(0.0) ? _3554 : (isnan(_3554) ? 0.0 : max(_3554, 0.0));
                        float _3557 = isnan(1.0) ? _4968 : (isnan(_4968) ? 1.0 : min(_4968, 1.0));
                        float _3561 = ((_3557 * _3557) * (_3539 + (-1.0))) + 1.0;
                        float _3562 = _3498 * _3538;
                        float _3563 = _3562 * _3562;
                        float _3566 = ((1.0 - _3563) * _3488) + _3563;
                        float _4979 = isnan(0.0) ? _3566 : (isnan(_3566) ? 0.0 : max(_3566, 0.0));
                        float _3567 = isnan(1.0) ? _4979 : (isnan(_4979) ? 1.0 : min(_4979, 1.0));
                        float _3568 = 1.0 - _3538;
                        float _3578 = (0.5 / (((_3567 * ((_3553 * _3568) + _3538)) + 9.9999999392252902907785028219223e-09) + (((_3567 * _3568) + _3538) * _3553))) * _3567;
                        float _4990 = isnan(0.0) ? _3578 : (isnan(_3578) ? 0.0 : max(_3578, 0.0));
                        float _3589 = (((_3539 * 3.1415927410125732421875) * (isnan(1.0) ? _4990 : (isnan(_4990) ? 1.0 : min(_4990, 1.0)))) / ((_3561 * _3561) * ((_3505 * 2.1991131305694580078125) + 3.141590118408203125))) * _3494;
                        _3347 = (_3509 * _3457.x) + _3415;
                        _3348 = (_3509 * _3457.y) + _3416;
                        _3349 = (_3509 * _3457.z) + _3417;
                        _3344 = (_3589 * _3474.x) + _3412;
                        _3345 = (_3589 * _3474.y) + _3413;
                        _3346 = (_3589 * _3474.z) + _3414;
                        if (_3419 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3412 = _3344;
                            _3413 = _3345;
                            _3414 = _3346;
                            _3415 = _3347;
                            _3416 = _3348;
                            _3417 = _3349;
                            _3418 = _3419;
                        }
                    }
                    frontier_phi_66_pred = _3349;
                    frontier_phi_66_pred_1 = _3348;
                    frontier_phi_66_pred_2 = _3347;
                    frontier_phi_66_pred_3 = _3346;
                    frontier_phi_66_pred_4 = _3345;
                    frontier_phi_66_pred_5 = _3344;
                }
                _3155 = frontier_phi_66_pred;
                _3153 = frontier_phi_66_pred_1;
                _3151 = frontier_phi_66_pred_2;
                _3149 = frontier_phi_66_pred_3;
                _3147 = frontier_phi_66_pred_4;
                _3145 = frontier_phi_66_pred_5;
                uint _3295 = _3294 + 1u;
                if (_3295 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3288 = _3145;
                    _3289 = _3147;
                    _3290 = _3149;
                    _3291 = _3151;
                    _3292 = _3153;
                    _3293 = _3155;
                    _3294 = _3295;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3144 = _3145;
            _3146 = _3147;
            _3148 = _3149;
            _3150 = _3151;
            _3152 = _3153;
            _3154 = _3155;
        }
        uvec4 _3158 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3159 = _3158.z;
        uint _3161 = (_3159 >> 8u) & 15u;
        float _3256;
        float _3258;
        float _3260;
        float _3262;
        float _3264;
        float _3266;
        if (((4294967295u << _3161) & _3064) == 0u)
        {
            _3256 = _3144;
            _3258 = _3146;
            _3260 = _3148;
            _3262 = _3150;
            _3264 = _3152;
            _3266 = _3154;
        }
        else
        {
            float _3281 = inversesqrt(dot(vec3(_2123, _2124, _2125), vec3(_2123, _2124, _2125)));
            float _3282 = _3281 * _2123;
            float _3283 = _3281 * _2124;
            float _3284 = _3281 * _2125;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3161 < ((_3159 >> 12u) & 15u))
            {
                float _3257;
                float _3259;
                float _3261;
                float _3263;
                float _3265;
                float _3267;
                float _3395 = _3144;
                float _3396 = _3146;
                float _3397 = _3148;
                float _3398 = _3150;
                float _3399 = _3152;
                float _3400 = _3154;
                uint _3401 = _3161;
                uint _3410;
                bool _3411;
                for (;;)
                {
                    _3410 = texelFetch(g_lightClassification, int((((_3058 << 5u) + (_3044 << 9u)) + (_3401 << 2u)) >> 2u)).x;
                    _3411 = _3410 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3411)
                    {
                        frontier_phi_72_pred = _3400;
                        frontier_phi_72_pred_1 = _3399;
                        frontier_phi_72_pred_2 = _3398;
                        frontier_phi_72_pred_3 = _3397;
                        frontier_phi_72_pred_4 = _3396;
                        frontier_phi_72_pred_5 = _3395;
                    }
                    else
                    {
                        float _3594;
                        float _3595;
                        float _3596;
                        float _3597;
                        float _3598;
                        float _3599;
                        float _3887;
                        float _3888;
                        float _3889;
                        float _3890;
                        float _3891;
                        float _3892;
                        float _3607 = _3395;
                        float _3608 = _3396;
                        float _3609 = _3397;
                        float _3610 = _3398;
                        float _3611 = _3399;
                        float _3612 = _3400;
                        uint _3613 = _3410;
                        uint _3614;
                        vec4 _3639;
                        float _3640;
                        vec4 _3655;
                        vec3 _3667;
                        vec4 _3682;
                        vec4 _3697;
                        float _3743;
                        bool _3744;
                        for (;;)
                        {
                            uint _3624 = ((_3401 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3613));
                            _3614 = (_3613 + 4294967295u) & _3613;
                            uint _3626 = _3624 * 40u;
                            _3639 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3626)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3626 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3626 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3626 + 3u)).x));
                            _3640 = _3639.w;
                            uint _3642 = (_3624 * 40u) + 4u;
                            _3655 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3642)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3642 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3642 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3642 + 3u)).x));
                            uint _3657 = (_3624 * 40u) + 8u;
                            _3667 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3657)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3657 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3657 + 2u)).x));
                            uint _3669 = (_3624 * 40u) + 16u;
                            _3682 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3669)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3669 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3669 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3669 + 3u)).x));
                            uint _3684 = (_3624 * 40u) + 20u;
                            _3697 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3684)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3684 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3684 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3684 + 3u)).x));
                            uint _3699 = (_3624 * 40u) + 24u;
                            vec4 _3712 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3699)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3699 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3699 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3699 + 3u)).x));
                            uint _3718 = (_3624 * 40u) + 28u;
                            vec4 _3731 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3718)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3718 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3718 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3718 + 3u)).x));
                            _3743 = fma(_2125, _3731.z, fma(_2124, _3731.y, _3731.x * _2123)) + _3731.w;
                            _3744 = !((fma(_2125, _3712.z, fma(_2124, _3712.y, _3712.x * _2123)) + _3712.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3744)
                            {
                                float _3771 = _3639.x - _2123;
                                float _3772 = _3639.y - _2124;
                                float _3773 = _3639.z - _2125;
                                float _3774 = dot(vec3(_3771, _3772, _3773), vec3(_3771, _3772, _3773));
                                float _3777 = inversesqrt(_3774);
                                float _3778 = _3777 * _3771;
                                float _3779 = _3777 * _3772;
                                float _3780 = _3777 * _3773;
                                float _3784 = 1.0 - (_3774 / (_3640 * _3640));
                                float _5001 = isnan(0.0) ? _3784 : (isnan(_3784) ? 0.0 : max(_3784, 0.0));
                                float _3785 = isnan(1.0) ? _5001 : (isnan(_5001) ? 1.0 : min(_5001, 1.0));
                                float _3789 = sqrt(_3774) * _3655.w;
                                float _3791 = 1.39999997615814208984375 / (_3789 + 1.39999997615814208984375);
                                float _3792 = _3791 * _3791;
                                float _3795 = ((1.0 - _3792) * dot(vec3(_3778, _3779, _3780), vec3(_988, _991, _994))) + _3792;
                                float _3798 = _3789 * _3789;
                                float _3802 = (fma(_2125, _3682.z, fma(_2124, _3682.y, _3682.x * _2123)) + _3682.w) / _3743;
                                float _3803 = (fma(_2125, _3697.z, fma(_2124, _3697.y, _3697.x * _2123)) + _3697.w) / _3743;
                                float _3807 = 1.0 - dot(vec2(_3802, _3803), vec2(_3802, _3803));
                                float _5017 = isnan(0.0) ? _3807 : (isnan(_3807) ? 0.0 : max(_3807, 0.0));
                                float _3808 = isnan(1.0) ? _5017 : (isnan(_5017) ? 1.0 : min(_5017, 1.0));
                                float _3809 = _3808 * (((isnan(0.0) ? _3795 : (isnan(_3795) ? 0.0 : max(_3795, 0.0))) * _3785) / ((_3798 * 0.699999988079071044921875) + 1.0));
                                float _3821 = exp2(log2(1.0 / ((_3798 * 3.5) + 5.0)) * 0.25);
                                float _3822 = 1.0 - _1063;
                                float _3829 = sqrt(1.0 - ((1.0 - (_3822 * _3822)) * (1.0 - (_3821 * _3821))));
                                float _3830 = _3829 * _3829;
                                float _3831 = _3830 * _3830;
                                float _3832 = _3778 - _3282;
                                float _3833 = _3779 - _3283;
                                float _3834 = _3780 - _3284;
                                float _3838 = inversesqrt(dot(vec3(_3832, _3833, _3834), vec3(_3832, _3833, _3834)));
                                float _3842 = dot(vec3(_988, _991, _994), vec3((-0.0) - _3282, (-0.0) - _3283, (-0.0) - _3284));
                                float _5028 = isnan(0.0) ? _3842 : (isnan(_3842) ? 0.0 : max(_3842, 0.0));
                                float _3845 = isnan(1.0) ? _5028 : (isnan(_5028) ? 1.0 : min(_5028, 1.0));
                                float _3846 = dot(vec3(_988, _991, _994), vec3(_3838 * _3832, _3838 * _3833, _3838 * _3834));
                                float _5039 = isnan(0.0) ? _3846 : (isnan(_3846) ? 0.0 : max(_3846, 0.0));
                                float _3849 = isnan(1.0) ? _5039 : (isnan(_5039) ? 1.0 : min(_5039, 1.0));
                                float _3853 = ((_3849 * _3849) * (_3831 + (-1.0))) + 1.0;
                                float _3854 = _3791 * _3830;
                                float _3855 = _3854 * _3854;
                                float _3861 = ((1.0 - _3855) * dot(vec3(_988, _991, _994), vec3(_3778, _3779, _3780))) + _3855;
                                float _5050 = isnan(0.0) ? _3861 : (isnan(_3861) ? 0.0 : max(_3861, 0.0));
                                float _3862 = isnan(1.0) ? _5050 : (isnan(_5050) ? 1.0 : min(_5050, 1.0));
                                float _3863 = 1.0 - _3830;
                                float _3873 = (0.5 / (((_3862 * ((_3845 * _3863) + _3830)) + 9.9999999392252902907785028219223e-09) + (((_3862 * _3863) + _3830) * _3845))) * _3862;
                                float _5061 = isnan(0.0) ? _3873 : (isnan(_3873) ? 0.0 : max(_3873, 0.0));
                                float _3883 = (_3808 * _3785) * (((_3831 * 3.1415927410125732421875) * (isnan(1.0) ? _5061 : (isnan(_5061) ? 1.0 : min(_5061, 1.0)))) / ((_3853 * _3853) * ((_3798 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3809 * _3655.y;
                                frontier_phi_78_pred_1 = _3809 * _3655.x;
                                frontier_phi_78_pred_2 = _3883 * _3667.z;
                                frontier_phi_78_pred_3 = _3883 * _3667.y;
                                frontier_phi_78_pred_4 = _3883 * _3667.x;
                                frontier_phi_78_pred_5 = _3809 * _3655.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3891 = frontier_phi_78_pred;
                            _3890 = frontier_phi_78_pred_1;
                            _3889 = frontier_phi_78_pred_2;
                            _3888 = frontier_phi_78_pred_3;
                            _3887 = frontier_phi_78_pred_4;
                            _3892 = frontier_phi_78_pred_5;
                            _3597 = _3890 + _3610;
                            _3598 = _3891 + _3611;
                            _3599 = _3892 + _3612;
                            _3594 = _3887 + _3607;
                            _3595 = _3888 + _3608;
                            _3596 = _3889 + _3609;
                            if (_3614 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3607 = _3594;
                                _3608 = _3595;
                                _3609 = _3596;
                                _3610 = _3597;
                                _3611 = _3598;
                                _3612 = _3599;
                                _3613 = _3614;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3599;
                        frontier_phi_72_pred_1 = _3598;
                        frontier_phi_72_pred_2 = _3597;
                        frontier_phi_72_pred_3 = _3596;
                        frontier_phi_72_pred_4 = _3595;
                        frontier_phi_72_pred_5 = _3594;
                    }
                    _3267 = frontier_phi_72_pred;
                    _3265 = frontier_phi_72_pred_1;
                    _3263 = frontier_phi_72_pred_2;
                    _3261 = frontier_phi_72_pred_3;
                    _3259 = frontier_phi_72_pred_4;
                    _3257 = frontier_phi_72_pred_5;
                    uint _3402 = _3401 + 1u;
                    if (_3402 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3395 = _3257;
                        _3396 = _3259;
                        _3397 = _3261;
                        _3398 = _3263;
                        _3399 = _3265;
                        _3400 = _3267;
                        _3401 = _3402;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3267;
                frontier_phi_60_61_ladder_1 = _3265;
                frontier_phi_60_61_ladder_2 = _3261;
                frontier_phi_60_61_ladder_3 = _3259;
                frontier_phi_60_61_ladder_4 = _3257;
                frontier_phi_60_61_ladder_5 = _3263;
            }
            else
            {
                frontier_phi_60_61_ladder = _3154;
                frontier_phi_60_61_ladder_1 = _3152;
                frontier_phi_60_61_ladder_2 = _3148;
                frontier_phi_60_61_ladder_3 = _3146;
                frontier_phi_60_61_ladder_4 = _3144;
                frontier_phi_60_61_ladder_5 = _3150;
            }
            _3256 = frontier_phi_60_61_ladder_4;
            _3258 = frontier_phi_60_61_ladder_3;
            _3260 = frontier_phi_60_61_ladder_2;
            _3262 = frontier_phi_60_61_ladder_5;
            _3264 = frontier_phi_60_61_ladder_1;
            _3266 = frontier_phi_60_61_ladder;
        }
        float _3271 = isnan(1.0) ? _1047 : (isnan(_1047) ? 1.0 : min(_1047, 1.0));
        _3077 = (_3271 * _3262) + _2589;
        _3079 = (_3271 * _3264) + _2591;
        _3081 = (_3271 * _3266) + _2593;
        _3083 = ((_3256 * _1031) * _3271) + _2927;
        _3085 = ((_3258 * _1033) * _3271) + _2929;
        _3087 = ((_3260 * _1034) * _3271) + _2931;
    }
    else
    {
        _3077 = _2589;
        _3079 = _2591;
        _3081 = _2593;
        _3083 = _2927;
        _3085 = _2929;
        _3087 = _2931;
    }
    float _5077 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
    float _5088 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
    float _5099 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
    uint _3107 = _283 + 6u;
    float _3115 = _969 / cbSceneParam._m0[86u].x;
    float _3116 = _970 / cbSceneParam._m0[86u].y;
    vec4 _3130 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3115, _3116, (log2((isnan(cbSceneParam._m0[77u].w) ? _904 : (isnan(_904) ? cbSceneParam._m0[77u].w : min(_904, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3132 = _3130.x;
    float _3133 = _3130.y;
    float _3134 = _3130.z;
    float _3135 = _3130.w;
    float _3206;
    float _3208;
    float _3210;
    float _3212;
    if (_904 > cbSceneParam._m0[78u].w)
    {
        float _3169 = isnan(_904) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _904 : min(cbSceneParam._m0[80u].w, _904));
        float _3170 = _3169 / _904;
        float _3181 = _3170 * _954;
        float _3182 = _955 * _3170;
        float _3183 = (-0.0) - _3182;
        float _3184 = _3170 * _956;
        float _3186 = (cbSceneParam._m0[77u].w * _3183) / _3169;
        float _3187 = _3186 + cbSceneParam._m0[79u].w;
        float _3188 = cbSceneParam._m0[79u].w - _3182;
        float _3194 = sqrt(((_3181 * _3181) + (_3182 * _3182)) + (_3184 * _3184));
        float _3197 = (1.0 - (cbSceneParam._m0[77u].w / _3169)) * _3194;
        float _3202 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3204 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3357;
        if (abs((_3183 - _3186) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3357 = ((((_3187 > 0.0) ? exp2(_3202 * _3187) : (2.0 - exp2(_3204 * _3187))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3197;
        }
        else
        {
            float _3317 = 1.0 / cbSceneParam._m0[80u].x;
            float _3318 = isnan(_3188) ? _3187 : (isnan(_3187) ? _3188 : max(_3187, _3188));
            float _3319 = isnan(_3188) ? _3187 : (isnan(_3187) ? _3188 : min(_3187, _3188));
            float _3328 = isnan(0.0) ? _3318 : (isnan(_3318) ? 0.0 : min(_3318, 0.0));
            float _3329 = isnan(0.0) ? _3319 : (isnan(_3319) ? 0.0 : min(_3319, 0.0));
            _3357 = ((abs(_3194 / _3183) * cbSceneParam._m0[80u].y) * ((((_3328 - _3329) * 2.0) - ((exp2(_3202 * (isnan(0.0) ? _3318 : (isnan(_3318) ? 0.0 : max(_3318, 0.0)))) - exp2(_3202 * (isnan(0.0) ? _3319 : (isnan(_3319) ? 0.0 : max(_3319, 0.0))))) * _3317)) - ((exp2(_3204 * _3328) - exp2(_3204 * _3329)) * _3317))) + (_3197 * cbSceneParam._m0[80u].z);
        }
        vec4 _3359 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3115, _3116, 1.0), 0.0);
        float _3368 = exp2((_3357 * (-1.44269502162933349609375)) * (1.0 - _3359.w));
        float _3369 = log2(_3368);
        float _3385 = log2(_3135);
        _3206 = (exp2(_3385 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3369 * cbSceneParam._m0[78u].x)) * _3359.x) / cbSceneParam._m0[78u].x)) + _3132;
        _3208 = (exp2(_3385 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3369 * cbSceneParam._m0[78u].y)) * _3359.y) / cbSceneParam._m0[78u].y)) + _3133;
        _3210 = (exp2(_3385 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3369 * cbSceneParam._m0[78u].z)) * _3359.z) / cbSceneParam._m0[78u].z)) + _3134;
        _3212 = _3368 * _3135;
    }
    else
    {
        _3206 = _3132;
        _3208 = _3133;
        _3210 = _3134;
        _3212 = _3135;
    }
    float _3224 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3225 = _3224 == 3.0;
    float _3226 = log2(_3212);
    float _3233 = exp2(_3226 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5077 : (isnan(_5077) ? 1.0 : min(_5077, 1.0))) * (_3077 + ((isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0))) * _1047))) + ((_3083 + ((isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0))) * _1855)) * cbPerFrame._m0[3u].x));
    float _3234 = exp2(_3226 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5088 : (isnan(_5088) ? 1.0 : min(_5088, 1.0))) * (_3079 + ((isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0))) * _1047))) + ((_3085 + ((isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0))) * _1855)) * cbPerFrame._m0[3u].x));
    float _3235 = exp2(_3226 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5099 : (isnan(_5099) ? 1.0 : min(_5099, 1.0))) * (_3081 + ((isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0))) * _1047))) + ((_3087 + ((isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0))) * _1855)) * cbPerFrame._m0[3u].x));
    float _3244 = (_3224 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3244 * (_3225 ? _3233 : (_3233 + (cbSceneParam._m0[72u].w * _3206)));
    SV_Target.y = _3244 * (_3225 ? _3234 : (_3234 + (cbSceneParam._m0[72u].w * _3208)));
    SV_Target.z = _3244 * (_3225 ? _3235 : (_3235 + (cbSceneParam._m0[72u].w * _3210)));
    SV_Target.w = cbInstanceData._m0[_3107].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3107].w;
}


