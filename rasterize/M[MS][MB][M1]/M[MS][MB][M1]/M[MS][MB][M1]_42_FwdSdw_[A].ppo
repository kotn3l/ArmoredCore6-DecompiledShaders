#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1210;
float _3874;
float _3875;
float _3876;
float _3877;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _223 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _224 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _225 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _231 = inversesqrt(dot(vec3(_223, _224, _225), vec3(_223, _224, _225)));
    float _238 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _245 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _251 = uint(roundEven(NORMAL.w)) * 13u;
    uint _256 = _251 + 1u;
    uint _260 = _251 + 2u;
    float _269 = sqrt(((cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x) + (cbInstanceData._m0[_251].x * cbInstanceData._m0[_251].x)) + (cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x));
    float _270 = _269 * TEXCOORD.z;
    float _271 = _269 * TEXCOORD.w;
    vec4 _290 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _296 = _290.x * cbMtdParam._m0[9u].x;
    float _297 = _290.y * cbMtdParam._m0[9u].y;
    float _298 = _290.z * cbMtdParam._m0[9u].z;
    vec4 _317 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _270) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _271) + cbTextureTilingScale._m0[14u].w));
    vec4 _337 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _270) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _271) + cbTextureTilingScale._m0[20u].w));
    vec4 _363 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _367 = _363.z;
    float _371 = (_363.x * 2.0) + (-1.0);
    float _372 = (_363.y * 2.0) + (-1.0);
    float _373 = dot(vec2(_371, _372), vec2(_371, _372));
    float _3886 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _379 = sqrt(1.0 - (isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0))));
    float _384 = _371 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_337.x * 2.0) + (-1.0)));
    float _385 = _372 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_337.y * 2.0) + (-1.0)));
    vec4 _402 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _270) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _271) + cbTextureTilingScale._m0[11u].w));
    float _404 = _402.x;
    float _405 = 1.0 - _404;
    float _414 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _417 = ((isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : min(_414, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _426 = (_417 - ((((((_404 - _405) * cbMtdParam._m0[24u].z) + _405) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _417))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3907 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _427 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
    float _434 = (_427 * ((_317.x * cbMtdParam._m0[18u].x) - _296)) + _296;
    float _435 = (_427 * ((_317.y * cbMtdParam._m0[18u].y) - _297)) + _297;
    float _436 = (_427 * ((_317.z * cbMtdParam._m0[18u].z) - _298)) + _298;
    vec4 _449 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _270) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _271) + cbTextureTilingScale._m0[19u].w));
    float _451 = _449.x;
    float _452 = 1.0 - _451;
    float _481 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_451 - _452) * cbMtdParam._m0[24u].w) + _452) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3918 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _482 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
    float _490 = ((((cbMtdParam._m0[10u].x - _434) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _482) + _434;
    float _491 = ((((cbMtdParam._m0[10u].y - _435) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _482) + _435;
    float _492 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _436)) * _482) + _436;
    vec4 _505 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _507 = _505.x;
    float _509 = _507 - (_507 * _427);
    float _511 = _509 - (_509 * _482);
    float _516 = (((_337.z - _367) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _367;
    vec4 _530 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _270) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _271) + cbTextureTilingScale._m0[15u].w));
    float _537 = (_530.x * 2.0) + (-1.0);
    float _538 = (_530.y * 2.0) + (-1.0);
    float _539 = dot(vec2(_537, _538), vec2(_537, _538));
    float _3929 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _547 = (_427 * (_530.z - _516)) + _516;
    float _550 = ((cbMtdParam._m0[23u].y - _547) * _482) + _547;
    vec4 _572 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _270) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _271) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _578 = (_572.x * 2.0) + (-1.0);
    float _579 = (_572.y * 2.0) + (-1.0);
    float _580 = dot(vec2(_578, _579), vec2(_578, _579));
    float _3940 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
    float _597 = (((_537 - _384) + (cbMtdParam._m0[21u].x * _384)) * _427) + _384;
    float _598 = (((_538 - _385) + (cbMtdParam._m0[21u].x * _385)) * _427) + _385;
    float _599 = (_427 * (sqrt(1.0 - (isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0)))) - _379)) + _379;
    float _610 = (((_578 - _597) + (_597 * cbMtdParam._m0[22u].z)) * _482) + _597;
    float _611 = (((_579 - _598) + (_598 * cbMtdParam._m0[22u].z)) * _482) + _598;
    float _612 = ((sqrt(1.0 - (isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0)))) - _599) * _482) + _599;
    float _614 = cbMtdParam._m0[22u].x + _363.w;
    float _617 = fma(_612, _238 * NORMAL.x, fma(_611, _245 * TANGENT.x, (_231 * _223) * _610));
    float _620 = fma(_612, _238 * NORMAL.y, fma(_611, _245 * TANGENT.y, (_231 * _224) * _610));
    float _623 = fma(_612, _238 * NORMAL.z, fma(_611, _245 * TANGENT.z, (_231 * _225) * _610));
    float _627 = inversesqrt(dot(vec3(_617, _620, _623), vec3(_617, _620, _623)));
    float _628 = _627 * _617;
    float _629 = _627 * _620;
    float _630 = _627 * _623;
    float _3951 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _631 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
    float _3962 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _3973 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _3984 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _3995 = isnan(0.0) ? _492 : (isnan(_492) ? 0.0 : max(_492, 0.0));
    float _4006 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _636 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
    float _650 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _690 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _700 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _690);
    float _701 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _690);
    float _702 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _690);
    float _706 = inversesqrt(dot(vec3(_700, _701, _702), vec3(_700, _701, _702)));
    float _707 = _700 * _706;
    float _708 = _701 * _706;
    float _709 = _702 * _706;
    vec4 _714 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _716 = _714.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _891 = sqrt(((_700 * _700) + (_701 * _701)) + (_702 * _702));
        float _897 = (cbMatDynParam._m0[5u].x * _891) + cbMatDynParam._m0[5u].y;
        float _4017 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
        float _898 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
        float _902 = (cbMatDynParam._m0[5u].z * _891) + cbMatDynParam._m0[5u].w;
        float _4028 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0))) - _898)) + _898) < ((_716 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _728 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _729 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _749 = fma(_630, cbSceneParam._m0[5u].z, fma(_629, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _628));
    float _752 = fma(_630, cbSceneParam._m0[6u].z, fma(_629, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _628));
    float _755 = fma(_630, cbSceneParam._m0[7u].z, fma(_629, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _628));
    uint _768 = _251 + 9u;
    uint _769 = _768 + uint(cbMatDynParam._m0[0u].w);
    float _775 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0)))) * cbInstanceData._m0[_769].x;
    float _776 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0)))) * cbInstanceData._m0[_769].y;
    float _777 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0)))) * cbInstanceData._m0[_769].z;
    float _4039 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
    float _778 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
    float _4050 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
    float _779 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
    float _4061 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
    float _780 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
    float _781 = 1.0 - _636;
    float _782 = _778 * _781;
    float _783 = _779 * _781;
    float _784 = _780 * _781;
    float _789 = (_778 + (-0.039999999105930328369140625)) * _636;
    float _790 = (_779 + (-0.039999999105930328369140625)) * _636;
    float _791 = (_780 + (-0.039999999105930328369140625)) * _636;
    float _792 = _789 + 0.039999999105930328369140625;
    float _794 = _790 + 0.039999999105930328369140625;
    float _795 = _791 + 0.039999999105930328369140625;
    vec4 _804 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _728, cbSceneParam._m0[86u].y * _729));
    float _808 = ((isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0))) * TEXCOORD_5.w) * _804.x;
    float _809 = dot(vec3(_628, _629, _630), vec3(_707, _708, _709));
    float _812 = _809 * 2.0;
    float _816 = (_812 * _628) - _707;
    float _817 = (_812 * _629) - _708;
    float _818 = (_812 * _630) - _709;
    float _822 = abs(dot(vec3(_707, _708, _709), vec3(_628, _629, _630)));
    float _4072 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
    float _824 = sqrt(_631);
    float _837 = exp2((_824 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_824 * 3.0));
    float _843 = (1.0 - _837) * ((_824 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _844 = _837 * _824;
    float _872 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _876 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _880 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1209;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _934 = fma(_880, cbModelParam._m0[26u].z, fma(_876, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _872));
        float _938 = fma(_880, cbModelParam._m0[27u].z, fma(_876, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _872));
        float _942 = fma(_880, cbModelParam._m0[28u].z, fma(_876, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _872));
        float _967 = _872 + _628;
        float _968 = _876 + _629;
        float _969 = _880 + _630;
        float _979 = fma(_969, cbModelParam._m0[26u].z, fma(_968, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _967)) - _934;
        float _980 = fma(_969, cbModelParam._m0[27u].z, fma(_968, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _967)) - _938;
        float _981 = fma(_969, cbModelParam._m0[28u].z, fma(_968, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _967)) - _942;
        float _985 = inversesqrt(dot(vec3(_979, _980, _981), vec3(_979, _980, _981)));
        float _998 = ((_985 * _979) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_934 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _999 = ((_985 * _980) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_938 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1000 = ((_985 * _981) / cbModelParam._m0[34u].z) + ((((((_942 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1003 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_998, _999, _1000), 0.0);
        vec4 _1010 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_998, _999, _1000), 0.0);
        vec4 _1017 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_998, _999, _1000), 0.0);
        vec4 _1024 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_998, _999, _1000), 0.0);
        float _1037 = exp2((_1003.w + (-0.5)) * 20.0) * 2.0;
        float _1038 = _1037 * (_1003.x + (-0.5));
        float _1039 = _1037 * (_1003.y + (-0.5));
        float _1040 = _1037 * (_1003.z + (-0.5));
        float _1047 = exp2((_1010.w + (-0.5)) * 20.0) * 2.0;
        float _1048 = _1047 * (_1010.x + (-0.5));
        float _1049 = _1047 * (_1010.y + (-0.5));
        float _1050 = _1047 * (_1010.z + (-0.5));
        float _1057 = exp2((_1017.w + (-0.5)) * 20.0) * 2.0;
        float _1058 = _1057 * (_1017.x + (-0.5));
        float _1059 = _1057 * (_1017.y + (-0.5));
        float _1060 = _1057 * (_1017.z + (-0.5));
        float _1067 = exp2((_1024.w + (-0.5)) * 20.0) * 2.0;
        float _1068 = _1067 * (_1024.x + (-0.5));
        float _1069 = _1067 * (_1024.y + (-0.5));
        float _1070 = _1067 * (_1024.z + (-0.5));
        float _1071 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1072 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1073 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1074 = _1038 * 0.5;
        float _1075 = _1048 * 0.5;
        float _1076 = _1058 * 0.5;
        float _1077 = dot(vec3(_1074, _1075, _1076), vec3(_1074, _1075, _1076));
        float _1082 = (_1077 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1077);
        float _1091 = (dot(vec3(_628, _629, _630), vec3(_1082 * _1074, _1082 * _1075, _1082 * _1076)) + 1.0) * 0.5;
        float _4098 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1101 = sqrt(((_1075 * _1075) + (_1074 * _1074)) + (_1076 * _1076)) / (_1071 + 9.9999997473787516355514526367188e-06);
        float _4109 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1102 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
        float _1103 = _1102 * 2.0;
        float _1107 = (1.0 - _1102) / (_1102 + 1.0);
        float _4120 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1108 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
        float _1117 = ((((1.0 - _1108) * (_1103 + 2.0)) * exp2(log2(isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0))) * (_1103 + 1.0))) + _1108) * _1071;
        float _1118 = _1039 * 0.5;
        float _1119 = _1049 * 0.5;
        float _1120 = _1059 * 0.5;
        float _1121 = dot(vec3(_1118, _1119, _1120), vec3(_1118, _1119, _1120));
        float _1126 = (_1121 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1121);
        float _1134 = (dot(vec3(_628, _629, _630), vec3(_1126 * _1118, _1126 * _1119, _1126 * _1120)) + 1.0) * 0.5;
        float _4131 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1143 = sqrt(((_1119 * _1119) + (_1118 * _1118)) + (_1120 * _1120)) / (_1072 + 9.9999997473787516355514526367188e-06);
        float _4142 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1144 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
        float _1145 = _1144 * 2.0;
        float _1149 = (1.0 - _1144) / (_1144 + 1.0);
        float _4153 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1150 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
        float _1159 = ((((1.0 - _1150) * (_1145 + 2.0)) * exp2(log2(isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0))) * (_1145 + 1.0))) + _1150) * _1072;
        float _1160 = _1040 * 0.5;
        float _1161 = _1050 * 0.5;
        float _1162 = _1060 * 0.5;
        float _1163 = dot(vec3(_1160, _1161, _1162), vec3(_1160, _1161, _1162));
        float _1168 = (_1163 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1163);
        float _1176 = (dot(vec3(_628, _629, _630), vec3(_1168 * _1160, _1168 * _1161, _1168 * _1162)) + 1.0) * 0.5;
        float _4164 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1185 = sqrt(((_1161 * _1161) + (_1160 * _1160)) + (_1162 * _1162)) / (_1073 + 9.9999997473787516355514526367188e-06);
        float _4175 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1186 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
        float _1187 = _1186 * 2.0;
        float _1191 = (1.0 - _1186) / (_1186 + 1.0);
        float _4186 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1192 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
        float _1201 = ((((1.0 - _1192) * (_1187 + 2.0)) * exp2(log2(isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0))) * (_1187 + 1.0))) + _1192) * _1073;
        _1209 = _1040;
        _1211 = _1039;
        _1212 = _1038;
        _1213 = _1050;
        _1214 = _1049;
        _1215 = _1048;
        _1216 = _1060;
        _1217 = _1059;
        _1218 = _1058;
        _1219 = _1073;
        _1220 = _1072;
        _1221 = _1071;
        _1222 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0)));
        _1223 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0)));
        _1224 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0)));
    }
    else
    {
        _1209 = _1210;
        _1211 = _1210;
        _1212 = _1210;
        _1213 = _1210;
        _1214 = _1210;
        _1215 = _1210;
        _1216 = _1210;
        _1217 = _1210;
        _1218 = _1210;
        _1219 = _1210;
        _1220 = _1210;
        _1221 = _1210;
        _1222 = 0.0;
        _1223 = 0.0;
        _1224 = 0.0;
    }
    float _1521;
    float _1522;
    float _1523;
    float _1524;
    float _1525;
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1252 = fma(_880, cbModelParam._m0[30u].z, fma(_876, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _872));
        float _1256 = fma(_880, cbModelParam._m0[31u].z, fma(_876, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _872));
        float _1260 = fma(_880, cbModelParam._m0[32u].z, fma(_876, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _872));
        float _1283 = _872 + _628;
        float _1284 = _876 + _629;
        float _1285 = _880 + _630;
        float _1295 = fma(_1285, cbModelParam._m0[30u].z, fma(_1284, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1283)) - _1252;
        float _1296 = fma(_1285, cbModelParam._m0[31u].z, fma(_1284, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1283)) - _1256;
        float _1297 = fma(_1285, cbModelParam._m0[32u].z, fma(_1284, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1283)) - _1260;
        float _1301 = inversesqrt(dot(vec3(_1295, _1296, _1297), vec3(_1295, _1296, _1297)));
        float _1314 = ((_1301 * _1295) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1252 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1315 = ((_1301 * _1296) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1256 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1316 = ((_1301 * _1297) / cbModelParam._m0[35u].z) + ((((((_1260 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1318 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1314, _1315, _1316), 0.0);
        vec4 _1325 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1314, _1315, _1316), 0.0);
        vec4 _1332 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1314, _1315, _1316), 0.0);
        vec4 _1339 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1314, _1315, _1316), 0.0);
        float _1351 = exp2((_1318.w + (-0.5)) * 20.0) * 2.0;
        float _1352 = _1351 * (_1318.x + (-0.5));
        float _1353 = _1351 * (_1318.y + (-0.5));
        float _1354 = _1351 * (_1318.z + (-0.5));
        float _1361 = exp2((_1325.w + (-0.5)) * 20.0) * 2.0;
        float _1362 = _1361 * (_1325.x + (-0.5));
        float _1363 = _1361 * (_1325.y + (-0.5));
        float _1364 = _1361 * (_1325.z + (-0.5));
        float _1371 = exp2((_1332.w + (-0.5)) * 20.0) * 2.0;
        float _1372 = _1371 * (_1332.x + (-0.5));
        float _1373 = _1371 * (_1332.y + (-0.5));
        float _1374 = _1371 * (_1332.z + (-0.5));
        float _1381 = exp2((_1339.w + (-0.5)) * 20.0) * 2.0;
        float _1382 = _1381 * (_1339.x + (-0.5));
        float _1383 = _1381 * (_1339.y + (-0.5));
        float _1384 = _1381 * (_1339.z + (-0.5));
        float _1385 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1386 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1387 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1388 = _1352 * 0.5;
        float _1389 = _1362 * 0.5;
        float _1390 = _1372 * 0.5;
        float _1391 = dot(vec3(_1388, _1389, _1390), vec3(_1388, _1389, _1390));
        float _1396 = (_1391 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1391);
        float _1404 = (dot(vec3(_628, _629, _630), vec3(_1396 * _1388, _1396 * _1389, _1396 * _1390)) + 1.0) * 0.5;
        float _4227 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1413 = sqrt(((_1389 * _1389) + (_1388 * _1388)) + (_1390 * _1390)) / (_1385 + 9.9999997473787516355514526367188e-06);
        float _4238 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1414 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
        float _1415 = _1414 * 2.0;
        float _1419 = (1.0 - _1414) / (_1414 + 1.0);
        float _4249 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1420 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
        float _1429 = ((((1.0 - _1420) * (_1415 + 2.0)) * exp2(log2(isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0))) * (_1415 + 1.0))) + _1420) * _1385;
        float _1430 = _1353 * 0.5;
        float _1431 = _1363 * 0.5;
        float _1432 = _1373 * 0.5;
        float _1433 = dot(vec3(_1430, _1431, _1432), vec3(_1430, _1431, _1432));
        float _1438 = (_1433 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1433);
        float _1446 = (dot(vec3(_628, _629, _630), vec3(_1438 * _1430, _1438 * _1431, _1438 * _1432)) + 1.0) * 0.5;
        float _4260 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1455 = sqrt(((_1431 * _1431) + (_1430 * _1430)) + (_1432 * _1432)) / (_1386 + 9.9999997473787516355514526367188e-06);
        float _4271 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1456 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
        float _1457 = _1456 * 2.0;
        float _1461 = (1.0 - _1456) / (_1456 + 1.0);
        float _4282 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1462 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
        float _1471 = ((((1.0 - _1462) * (_1457 + 2.0)) * exp2(log2(isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0))) * (_1457 + 1.0))) + _1462) * _1386;
        float _1472 = _1354 * 0.5;
        float _1473 = _1364 * 0.5;
        float _1474 = _1374 * 0.5;
        float _1475 = dot(vec3(_1472, _1473, _1474), vec3(_1472, _1473, _1474));
        float _1480 = (_1475 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1475);
        float _1488 = (dot(vec3(_628, _629, _630), vec3(_1480 * _1472, _1480 * _1473, _1480 * _1474)) + 1.0) * 0.5;
        float _4293 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1497 = sqrt(((_1473 * _1473) + (_1472 * _1472)) + (_1474 * _1474)) / (_1387 + 9.9999997473787516355514526367188e-06);
        float _4304 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
        float _1498 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
        float _1499 = _1498 * 2.0;
        float _1503 = (1.0 - _1498) / (_1498 + 1.0);
        float _4315 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1504 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
        float _1513 = ((((1.0 - _1504) * (_1499 + 2.0)) * exp2(log2(isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0))) * (_1499 + 1.0))) + _1504) * _1387;
        _1521 = _1354;
        _1522 = _1353;
        _1523 = _1352;
        _1524 = _1364;
        _1525 = _1363;
        _1526 = _1362;
        _1527 = _1374;
        _1528 = _1373;
        _1529 = _1372;
        _1530 = _1387;
        _1531 = _1386;
        _1532 = _1385;
        _1533 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0)));
        _1534 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0)));
        _1535 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0)));
    }
    else
    {
        _1521 = _1210;
        _1522 = _1210;
        _1523 = _1210;
        _1524 = _1210;
        _1525 = _1210;
        _1526 = _1210;
        _1527 = _1210;
        _1528 = _1210;
        _1529 = _1210;
        _1530 = _1210;
        _1531 = _1210;
        _1532 = _1210;
        _1533 = 0.0;
        _1534 = 0.0;
        _1535 = 0.0;
    }
    float _1545 = (cbModelParam._m0[1u].x * (_1533 - _1222)) + _1222;
    float _1546 = (cbModelParam._m0[1u].x * (_1534 - _1223)) + _1223;
    float _1547 = (cbModelParam._m0[1u].x * (_1535 - _1224)) + _1224;
    float _1568 = fma(_1547, cbSceneParam._m0[89u].z, fma(_1546, cbSceneParam._m0[89u].y, _1545 * cbSceneParam._m0[89u].x));
    float _1571 = fma(_1547, cbSceneParam._m0[90u].z, fma(_1546, cbSceneParam._m0[90u].y, _1545 * cbSceneParam._m0[90u].x));
    float _1574 = fma(_1547, cbSceneParam._m0[91u].z, fma(_1546, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1545));
    float _1589 = _816 * 0.5;
    float _1590 = _817 * 0.5;
    float _1591 = _818 * 0.5;
    float _1592 = dot(vec4(_1589, _1590, _1591, 1.0), vec4(_1523, _1526, _1529, _1532));
    float _1595 = dot(vec4(_1589, _1590, _1591, 1.0), vec4(_1522, _1525, _1528, _1531));
    float _1598 = dot(vec4(_1589, _1590, _1591, 1.0), vec4(_1521, _1524, _1527, _1530));
    float _1632;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1605 = dot(vec4(_1589, _1590, _1591, 1.0), vec4(_1209, _1213, _1216, _1219));
        float _1609 = dot(vec4(_1589, _1590, _1591, 1.0), vec4(_1211, _1214, _1217, _1220));
        float _1613 = dot(vec4(_1589, _1590, _1591, 1.0), vec4(_1212, _1215, _1218, _1221));
        float _1620 = dot(vec4(cbModelParam._m0[39u]), vec4(_1589, _1590, _1591, 1.0));
        _1632 = dot(vec3(isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0)), isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0)), isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1620) ? 0.0 : (isnan(0.0) ? _1620 : max(0.0, _1620))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1632 = 1.0;
    }
    float _1643;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1634 = dot(vec4(cbModelParam._m0[40u]), vec4(_1589, _1590, _1591, 1.0));
        _1643 = dot(vec3(isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0)), isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0)), isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1634) ? 0.0 : (isnan(0.0) ? _1634 : max(0.0, _1634))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1643 = 1.0;
    }
    float _1647 = (_1643 * cbModelParam._m0[1u].x) + (_1632 * (1.0 - cbModelParam._m0[1u].x));
    float _1657 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _631);
    float _1658 = isnan(_1657) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1657 : min(cbModelParam._m0[25u].z, _1657));
    float _1738;
    float _1740;
    float _1742;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1705 = fma(_880, cbModelParam._m0[13u].z, fma(_876, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _872)) + cbModelParam._m0[13u].w;
        float _1709 = fma(_880, cbModelParam._m0[14u].z, fma(_876, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _872)) + cbModelParam._m0[14u].w;
        float _1713 = fma(_880, cbModelParam._m0[15u].z, fma(_876, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _872)) + cbModelParam._m0[15u].w;
        float _1716 = fma(_818, cbModelParam._m0[13u].z, fma(_817, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _816));
        float _1719 = fma(_818, cbModelParam._m0[14u].z, fma(_817, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _816));
        float _1722 = fma(_818, cbModelParam._m0[15u].z, fma(_817, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _816));
        float _1750;
        if (_1716 > 0.0)
        {
            _1750 = abs((1.0 - _1705) / _1716);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1716 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1705 + 1.0) / _1716);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1750 = frontier_phi_17_15_ladder;
        }
        float _1921;
        if (_1719 > 0.0)
        {
            _1921 = abs((1.0 - _1709) / _1719);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1719 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1709 + 1.0) / _1719);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1921 = frontier_phi_26_22_ladder;
        }
        float _2217;
        if (_1722 > 0.0)
        {
            _2217 = abs((1.0 - _1713) / _1722);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1722 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1713 + 1.0) / _1722);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2217 = frontier_phi_38_33_ladder;
        }
        float _2219 = isnan(_1921) ? _1750 : (isnan(_1750) ? _1921 : min(_1750, _1921));
        float _2220 = isnan(_2217) ? _2219 : (isnan(_2219) ? _2217 : min(_2219, _2217));
        float _2224 = (_2220 * _1716) + _1705;
        float _2225 = (_2220 * _1719) + _1709;
        float _2226 = (_2220 * _1722) + _1713;
        float _2227 = _2220 * 9.9999997473787516355514526367188e-05;
        float _2229 = (-1.0) - _2227;
        float _2231 = _2227 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2226 > _2231) || ((_2226 < _2229) || ((_2225 > _2231) || ((_2225 < _2229) || ((_2224 < _2229) || (_2224 > _2231))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2371 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2226, cbModelParam._m0[9u].z, fma(_2225, cbModelParam._m0[9u].y, _2224 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2226, cbModelParam._m0[10u].z, fma(_2225, cbModelParam._m0[10u].y, _2224 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2226, cbModelParam._m0[11u].z, fma(_2225, cbModelParam._m0[11u].y, _2224 * cbModelParam._m0[11u].x))), _1658);
            frontier_phi_16_38_ladder = _2371.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2371.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2371.x * cbModelParam._m0[1u].y;
        }
        _1738 = frontier_phi_16_38_ladder_2;
        _1740 = frontier_phi_16_38_ladder_1;
        _1742 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1726 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_816, _817, _818), _1658);
        _1738 = _1726.x * cbModelParam._m0[1u].y;
        _1740 = _1726.y * cbModelParam._m0[1u].y;
        _1742 = _1726.z * cbModelParam._m0[1u].y;
    }
    float _1746 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _631);
    float _1747 = isnan(_1746) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1746 : min(cbModelParam._m0[25u].w, _1746));
    float _1836;
    float _1838;
    float _1840;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1800 = fma(_880, cbModelParam._m0[21u].z, fma(_876, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _872)) + cbModelParam._m0[21u].w;
        float _1804 = fma(_880, cbModelParam._m0[22u].z, fma(_876, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _872)) + cbModelParam._m0[22u].w;
        float _1808 = fma(_880, cbModelParam._m0[23u].z, fma(_876, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _872)) + cbModelParam._m0[23u].w;
        float _1811 = fma(_818, cbModelParam._m0[21u].z, fma(_817, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _816));
        float _1814 = fma(_818, cbModelParam._m0[22u].z, fma(_817, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _816));
        float _1817 = fma(_818, cbModelParam._m0[23u].z, fma(_817, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _816));
        float _1926;
        if (_1811 > 0.0)
        {
            _1926 = abs((1.0 - _1800) / _1811);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1811 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1800 + 1.0) / _1811);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1926 = frontier_phi_28_24_ladder;
        }
        float _2244;
        if (_1814 > 0.0)
        {
            _2244 = abs((1.0 - _1804) / _1814);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1814 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1804 + 1.0) / _1814);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2244 = frontier_phi_40_35_ladder;
        }
        float _2582;
        if (_1817 > 0.0)
        {
            _2582 = abs((1.0 - _1808) / _1817);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1817 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1808 + 1.0) / _1817);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2582 = frontier_phi_50_47_ladder;
        }
        float _2584 = isnan(_2244) ? _1926 : (isnan(_1926) ? _2244 : min(_1926, _2244));
        float _2585 = isnan(_2582) ? _2584 : (isnan(_2584) ? _2582 : min(_2584, _2582));
        float _2589 = (_2585 * _1811) + _1800;
        float _2590 = (_2585 * _1814) + _1804;
        float _2591 = (_2585 * _1817) + _1808;
        float _2592 = _2585 * 9.9999997473787516355514526367188e-05;
        float _2593 = (-1.0) - _2592;
        float _2595 = _2592 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2591 > _2595) || ((_2591 < _2593) || ((_2590 > _2595) || ((_2590 < _2593) || ((_2589 < _2593) || (_2589 > _2595))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2713 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2591, cbModelParam._m0[17u].z, fma(_2590, cbModelParam._m0[17u].y, _2589 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2591, cbModelParam._m0[18u].z, fma(_2590, cbModelParam._m0[18u].y, _2589 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2591, cbModelParam._m0[19u].z, fma(_2590, cbModelParam._m0[19u].y, _2589 * cbModelParam._m0[19u].x))), _1747);
            frontier_phi_25_50_ladder = _2713.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2713.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2713.x * cbModelParam._m0[1u].z;
        }
        _1836 = frontier_phi_25_50_ladder_2;
        _1838 = frontier_phi_25_50_ladder_1;
        _1840 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1820 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_816, _817, _818), _1747);
        _1836 = _1820.x * cbModelParam._m0[1u].z;
        _1838 = _1820.y * cbModelParam._m0[1u].z;
        _1840 = _1820.z * cbModelParam._m0[1u].z;
    }
    float _1853 = (((_843 * _792) + _844) * _808) * ((cbModelParam._m0[1u].w * (_1836 - _1738)) + _1738);
    float _1855 = (((_843 * _794) + _844) * _808) * ((cbModelParam._m0[1u].w * (_1838 - _1740)) + _1740);
    float _1857 = (((_843 * _795) + _844) * _808) * ((cbModelParam._m0[1u].w * (_1840 - _1742)) + _1742);
    float _1860 = fma(_1857, cbSceneParam._m0[89u].z, fma(_1855, cbSceneParam._m0[89u].y, _1853 * cbSceneParam._m0[89u].x));
    float _1863 = fma(_1857, cbSceneParam._m0[90u].z, fma(_1855, cbSceneParam._m0[90u].y, _1853 * cbSceneParam._m0[90u].x));
    float _1866 = fma(_1857, cbSceneParam._m0[91u].z, fma(_1855, cbSceneParam._m0[91u].y, _1853 * cbSceneParam._m0[91u].x));
    float _1900 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1904 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1908 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1912 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1913 = _1900 / _1912;
    float _1914 = _1904 / _1912;
    float _1915 = _1908 / _1912;
    float _2062;
    float _2063;
    float _2064;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1942 = ((uint(_1915 > cbSceneParam._m0[59u].y) + uint(_1915 > cbSceneParam._m0[59u].x)) + uint(_1915 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1943 = _1942 + 43u;
        uint _1951 = _1942 + 44u;
        uint _1959 = _1942 + 45u;
        uint _1967 = _1942 + 46u;
        float _1978 = fma(_1912, cbSceneParam._m0[_1943].w, fma(_1908, cbSceneParam._m0[_1943].z, fma(_1904, cbSceneParam._m0[_1943].y, _1900 * cbSceneParam._m0[_1943].x)));
        float _1982 = fma(_1912, cbSceneParam._m0[_1951].w, fma(_1908, cbSceneParam._m0[_1951].z, fma(_1904, cbSceneParam._m0[_1951].y, _1900 * cbSceneParam._m0[_1951].x)));
        float _1990 = fma(_1912, cbSceneParam._m0[_1967].w, fma(_1908, cbSceneParam._m0[_1967].z, fma(_1904, cbSceneParam._m0[_1967].y, _1900 * cbSceneParam._m0[_1967].x)));
        float _1995 = cbSceneParam._m0[33u].z * _1990;
        float _1997 = cbSceneParam._m0[33u].w * _1990;
        float _2000 = fma(_1912, cbSceneParam._m0[_1959].w, fma(_1908, cbSceneParam._m0[_1959].z, fma(_1904, cbSceneParam._m0[_1959].y, _1900 * cbSceneParam._m0[_1959].x))) / _1990;
        float _2048 = (cbSceneParam._m0[33u].x - sqrt(((_1914 * _1914) + (_1913 * _1913)) + (_1915 * _1915))) * cbSceneParam._m0[33u].y;
        float _4441 = isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0));
        float _2055 = (isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1995 + _1978) / _1990, (_1997 + _1982) / _1990), _2000), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1997 + _1978) / _1990, (_1982 - _1995) / _1990), _2000), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1978 - _1995) / _1990, (_1982 - _1997) / _1990), _2000), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1978 - _1997) / _1990, (_1995 + _1982) / _1990), _2000), 0.0)).x), vec4(0.25)));
        _2062 = 1.0 - (_2055 * cbSceneParam._m0[34u].x);
        _2063 = 1.0 - (_2055 * cbSceneParam._m0[34u].y);
        _2064 = 1.0 - (_2055 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2062 = 1.0;
        _2063 = 1.0;
        _2064 = 1.0;
    }
    float _2128;
    float _2130;
    float _2132;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2116 = fma(_1912, cbSceneParam._m0[63u].w, fma(_1908, cbSceneParam._m0[63u].z, fma(_1904, cbSceneParam._m0[63u].y, _1900 * cbSceneParam._m0[63u].x)));
        float _2117 = fma(_1912, cbSceneParam._m0[60u].w, fma(_1908, cbSceneParam._m0[60u].z, fma(_1904, cbSceneParam._m0[60u].y, _1900 * cbSceneParam._m0[60u].x))) / _2116;
        float _2118 = fma(_1912, cbSceneParam._m0[61u].w, fma(_1908, cbSceneParam._m0[61u].z, fma(_1904, cbSceneParam._m0[61u].y, _1900 * cbSceneParam._m0[61u].x))) / _2116;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2117 >= cbSceneParam._m0[64u].x) && (_2118 >= cbSceneParam._m0[64u].y)) && (_2117 <= cbSceneParam._m0[64u].z)) && (_2118 <= cbSceneParam._m0[64u].w))
        {
            float _2257 = fma(_1912, cbSceneParam._m0[62u].w, fma(_1908, cbSceneParam._m0[62u].z, fma(_1904, cbSceneParam._m0[62u].y, _1900 * cbSceneParam._m0[62u].x))) / _2116;
            float _2261 = isnan(cbSceneParam._m0[41u].w) ? _2257 : (isnan(_2257) ? cbSceneParam._m0[41u].w : max(_2257, cbSceneParam._m0[41u].w));
            float _2304 = (cbSceneParam._m0[33u].x - sqrt(((_1914 * _1914) + (_1913 * _1913)) + (_1915 * _1915))) * cbSceneParam._m0[33u].y;
            float _4457 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
            float _2311 = (isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2117, cbSceneParam._m0[33u].w + _2118), _2261), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2117, _2118 - cbSceneParam._m0[33u].z), _2261), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2117 - cbSceneParam._m0[33u].z, _2118 - cbSceneParam._m0[33u].w), _2261), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2117 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2118), _2261), 0.0)).x), vec4(0.25)));
            float _2315 = 1.0 - (_2311 * cbSceneParam._m0[34u].x);
            float _2316 = 1.0 - (_2311 * cbSceneParam._m0[34u].y);
            float _2317 = 1.0 - (_2311 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2317) ? _2064 : (isnan(_2064) ? _2317 : min(_2064, _2317));
            frontier_phi_37_36_ladder_1 = isnan(_2316) ? _2063 : (isnan(_2063) ? _2316 : min(_2063, _2316));
            frontier_phi_37_36_ladder_2 = isnan(_2315) ? _2062 : (isnan(_2062) ? _2315 : min(_2062, _2315));
        }
        else
        {
            frontier_phi_37_36_ladder = _2064;
            frontier_phi_37_36_ladder_1 = _2063;
            frontier_phi_37_36_ladder_2 = _2062;
        }
        _2128 = frontier_phi_37_36_ladder_2;
        _2130 = frontier_phi_37_36_ladder_1;
        _2132 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2128 = _2062;
        _2130 = _2063;
        _2132 = _2064;
    }
    uvec4 _2137 = floatBitsToUint(cbInstanceData._m0[_251 + 5u]);
    uint _2139 = _2137.x * 14u;
    uint _2140 = _2139 + 13u;
    float _2147 = _808 + (-1.0);
    float _2152 = (cbLight._m0[_2140].x * _2147) + 1.0;
    float _2153 = (cbLight._m0[_2140].y * _2147) + 1.0;
    float _2154 = (cbLight._m0[_2140].z * _2147) + 1.0;
    float _2155 = (cbLight._m0[_2140].w * _2147) + 1.0;
    uint _2156 = _2139 + 5u;
    float _2162 = isnan(1.0) ? _2153 : (isnan(_2153) ? 1.0 : min(_2153, 1.0));
    uint _2166 = _2139 + 4u;
    float _2176 = isnan(1.0) ? _2152 : (isnan(_2152) ? 1.0 : min(_2152, 1.0));
    uint _2180 = _2139 | 1u;
    float _2191 = dot(vec3(cbLight._m0[_2139].xyz), vec3(_628, _629, _630));
    float _2194 = dot(vec3(cbLight._m0[_2180].xyz), vec3(_628, _629, _630));
    float _4493 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
    float _4504 = isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : max(_2194, 0.0));
    float _2199 = (isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0))) * 0.3183098733425140380859375;
    float _2201 = (isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0))) * 0.3183098733425140380859375;
    float _2208 = ((cbLight._m0[_2156].x * _2162) * _2201) + (((cbLight._m0[_2166].x * _2128) * _2176) * _2199);
    float _2209 = ((_2162 * cbLight._m0[_2156].y) * _2201) + (((cbLight._m0[_2166].y * _2130) * _2176) * _2199);
    float _2210 = ((_2162 * cbLight._m0[_2156].z) * _2201) + (((cbLight._m0[_2166].z * _2132) * _2176) * _2199);
    uvec4 _2214 = floatBitsToUint(cbLight._m0[_2139 + 12u]);
    bool _2216 = _2214.x == 0u;
    float _2318;
    float _2320;
    float _2322;
    if (_2216)
    {
        _2318 = _2208;
        _2320 = _2209;
        _2322 = _2210;
    }
    else
    {
        uint _2326 = _2139 + 6u;
        float _2342 = (dot(vec3(cbLight._m0[_2139 + 2u].xyz), vec3(_628, _629, _630)) * 0.5) + 0.5;
        float _2343 = _2342 * _2342;
        float _4515 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
        float _2344 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
        float _2345 = isnan(1.0) ? _2154 : (isnan(_2154) ? 1.0 : min(_2154, 1.0));
        _2318 = (((cbLight._m0[_2326].x * 0.3183098733425140380859375) * _2344) * _2345) + _2208;
        _2320 = (((cbLight._m0[_2326].y * 0.3183098733425140380859375) * _2344) * _2345) + _2209;
        _2322 = (((cbLight._m0[_2326].z * 0.3183098733425140380859375) * _2344) * _2345) + _2210;
    }
    bool _2325 = _2214.y == 0u;
    float _2380;
    float _2382;
    float _2384;
    if (_2325)
    {
        _2380 = _2318;
        _2382 = _2320;
        _2384 = _2322;
    }
    else
    {
        uint _2553 = _2139 + 7u;
        float _2569 = (dot(vec3(cbLight._m0[_2139 + 3u].xyz), vec3(_628, _629, _630)) * 0.5) + 0.5;
        float _2570 = _2569 * _2569;
        float _4531 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
        float _2571 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
        float _2572 = isnan(1.0) ? _2155 : (isnan(_2155) ? 1.0 : min(_2155, 1.0));
        _2380 = (((cbLight._m0[_2553].x * 0.3183098733425140380859375) * _2571) * _2572) + _2318;
        _2382 = (((cbLight._m0[_2553].y * 0.3183098733425140380859375) * _2571) * _2572) + _2320;
        _2384 = (((cbLight._m0[_2553].z * 0.3183098733425140380859375) * _2571) * _2572) + _2322;
    }
    uint _2387 = _2139 + 8u;
    float _2400 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2139].w)) * _631) * 0.949999988079071044921875);
    float _2401 = _2400 * _2400;
    float _2402 = cbLight._m0[_2139].x + _707;
    float _2403 = cbLight._m0[_2139].y + _708;
    float _2404 = cbLight._m0[_2139].z + _709;
    float _2408 = inversesqrt(dot(vec3(_2402, _2403, _2404), vec3(_2402, _2403, _2404)));
    float _2409 = _2408 * _2402;
    float _2410 = _2408 * _2403;
    float _2411 = _2408 * _2404;
    float _2412 = dot(vec3(_628, _629, _630), vec3(cbLight._m0[_2139].xyz));
    float _4547 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
    float _2415 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
    float _4558 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
    float _2416 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
    float _2417 = dot(vec3(_628, _629, _630), vec3(_2409, _2410, _2411));
    float _4569 = isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0));
    float _2420 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
    float _2421 = dot(vec3(cbLight._m0[_2139].xyz), vec3(_2409, _2410, _2411));
    float _4580 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
    float _2425 = _2401 * _2401;
    float _2429 = ((_2420 * _2420) * (_2425 + (-1.0))) + 1.0;
    float _2437 = exp2(log2(1.0 - (isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0)))) * 5.0);
    float _2438 = 0.959999978542327880859375 - _789;
    float _2440 = 0.959999978542327880859375 - _790;
    float _2441 = 0.959999978542327880859375 - _791;
    float _2448 = 1.0 - _2401;
    float _2459 = (0.5 / (((_2416 * ((_2415 * _2448) + _2401)) + 9.9999999392252902907785028219223e-09) + (((_2416 * _2448) + _2401) * _2415))) * _2415;
    float _4591 = isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : max(_2459, 0.0));
    float _2461 = (isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0))) * (_2425 / ((_2429 * _2429) * 3.141590118408203125));
    uint _2475 = _2139 + 9u;
    float _2486 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2180].w)) * _631) * 0.949999988079071044921875);
    float _2487 = _2486 * _2486;
    float _2488 = cbLight._m0[_2180].x + _707;
    float _2489 = cbLight._m0[_2180].y + _708;
    float _2490 = cbLight._m0[_2180].z + _709;
    float _2494 = inversesqrt(dot(vec3(_2488, _2489, _2490), vec3(_2488, _2489, _2490)));
    float _2495 = _2494 * _2488;
    float _2496 = _2494 * _2489;
    float _2497 = _2494 * _2490;
    float _2498 = dot(vec3(_628, _629, _630), vec3(cbLight._m0[_2180].xyz));
    float _4602 = isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0));
    float _2501 = isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0));
    float _2502 = dot(vec3(_628, _629, _630), vec3(_2495, _2496, _2497));
    float _4613 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
    float _2505 = isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0));
    float _2506 = dot(vec3(cbLight._m0[_2180].xyz), vec3(_2495, _2496, _2497));
    float _4624 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
    float _2510 = _2487 * _2487;
    float _2514 = ((_2505 * _2505) * (_2510 + (-1.0))) + 1.0;
    float _2521 = exp2(log2(1.0 - (isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0)))) * 5.0);
    float _2528 = 1.0 - _2487;
    float _2538 = (0.5 / (((_2416 * ((_2501 * _2528) + _2487)) + 9.9999999392252902907785028219223e-09) + (((_2416 * _2528) + _2487) * _2501))) * _2501;
    float _4635 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0));
    float _2540 = (isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0))) * (_2510 / ((_2514 * _2514) * 3.141590118408203125));
    float _2550 = (((((_2521 * _2438) + _792) * cbLight._m0[_2475].x) * _2540) * _2162) + ((((cbLight._m0[_2387].x * _2128) * ((_2437 * _2438) + _792)) * _2461) * _2176);
    float _2551 = (((((_2521 * _2440) + _794) * cbLight._m0[_2475].y) * _2540) * _2162) + ((((cbLight._m0[_2387].y * _2130) * ((_2437 * _2440) + _794)) * _2461) * _2176);
    float _2552 = (((((_2521 * _2441) + _795) * cbLight._m0[_2475].z) * _2540) * _2162) + ((((cbLight._m0[_2387].z * _2132) * ((_2437 * _2441) + _795)) * _2461) * _2176);
    float _2608;
    float _2610;
    float _2612;
    if (_2216)
    {
        _2608 = _2550;
        _2610 = _2551;
        _2612 = _2552;
    }
    else
    {
        uint _2614 = _2139 + 2u;
        uint _2618 = _2139 + 10u;
        float _2632 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2614].w)) * _631) * 0.949999988079071044921875);
        float _2633 = _2632 * _2632;
        float _2634 = cbLight._m0[_2614].x + _707;
        float _2635 = cbLight._m0[_2614].y + _708;
        float _2636 = cbLight._m0[_2614].z + _709;
        float _2640 = inversesqrt(dot(vec3(_2634, _2635, _2636), vec3(_2634, _2635, _2636)));
        float _2641 = _2640 * _2634;
        float _2642 = _2640 * _2635;
        float _2643 = _2640 * _2636;
        float _2644 = dot(vec3(_628, _629, _630), vec3(cbLight._m0[_2614].xyz));
        float _4646 = isnan(0.0) ? _2644 : (isnan(_2644) ? 0.0 : max(_2644, 0.0));
        float _2647 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
        float _2648 = dot(vec3(_628, _629, _630), vec3(_2641, _2642, _2643));
        float _4657 = isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0));
        float _2651 = isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0));
        float _2652 = dot(vec3(cbLight._m0[_2614].xyz), vec3(_2641, _2642, _2643));
        float _4668 = isnan(0.0) ? _2652 : (isnan(_2652) ? 0.0 : max(_2652, 0.0));
        float _2656 = _2633 * _2633;
        float _2660 = ((_2651 * _2651) * (_2656 + (-1.0))) + 1.0;
        float _2667 = exp2(log2(1.0 - (isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0)))) * 5.0);
        float _2674 = 1.0 - _2633;
        float _2684 = (0.5 / (((_2416 * ((_2647 * _2674) + _2633)) + 9.9999999392252902907785028219223e-09) + (((_2416 * _2674) + _2633) * _2647))) * _2647;
        float _4679 = isnan(0.0) ? _2684 : (isnan(_2684) ? 0.0 : max(_2684, 0.0));
        float _2686 = (isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0))) * (_2656 / ((_2660 * _2660) * 3.141590118408203125));
        float _2687 = isnan(1.0) ? _2154 : (isnan(_2154) ? 1.0 : min(_2154, 1.0));
        _2608 = (((((_2667 * _2438) + _792) * cbLight._m0[_2618].x) * _2686) * _2687) + _2550;
        _2610 = (((((_2667 * _2440) + _794) * cbLight._m0[_2618].y) * _2686) * _2687) + _2551;
        _2612 = (((((_2667 * _2441) + _795) * cbLight._m0[_2618].z) * _2686) * _2687) + _2552;
    }
    float _2718;
    float _2720;
    float _2722;
    if (_2325)
    {
        _2718 = _2608;
        _2720 = _2610;
        _2722 = _2612;
    }
    else
    {
        uint _2729 = _2139 + 3u;
        uint _2733 = _2139 + 11u;
        float _2747 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2729].w)) * _631) * 0.949999988079071044921875);
        float _2748 = _2747 * _2747;
        float _2749 = cbLight._m0[_2729].x + _707;
        float _2750 = cbLight._m0[_2729].y + _708;
        float _2751 = cbLight._m0[_2729].z + _709;
        float _2755 = inversesqrt(dot(vec3(_2749, _2750, _2751), vec3(_2749, _2750, _2751)));
        float _2756 = _2755 * _2749;
        float _2757 = _2755 * _2750;
        float _2758 = _2755 * _2751;
        float _2759 = dot(vec3(_628, _629, _630), vec3(cbLight._m0[_2729].xyz));
        float _4695 = isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : max(_2759, 0.0));
        float _2762 = isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0));
        float _2763 = dot(vec3(_628, _629, _630), vec3(_2756, _2757, _2758));
        float _4706 = isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0));
        float _2766 = isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0));
        float _2767 = dot(vec3(cbLight._m0[_2729].xyz), vec3(_2756, _2757, _2758));
        float _4717 = isnan(0.0) ? _2767 : (isnan(_2767) ? 0.0 : max(_2767, 0.0));
        float _2771 = _2748 * _2748;
        float _2775 = ((_2766 * _2766) * (_2771 + (-1.0))) + 1.0;
        float _2782 = exp2(log2(1.0 - (isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0)))) * 5.0);
        float _2789 = 1.0 - _2748;
        float _2799 = (0.5 / (((_2416 * ((_2762 * _2789) + _2748)) + 9.9999999392252902907785028219223e-09) + (((_2416 * _2789) + _2748) * _2762))) * _2762;
        float _4728 = isnan(0.0) ? _2799 : (isnan(_2799) ? 0.0 : max(_2799, 0.0));
        float _2801 = (isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0))) * (_2771 / ((_2775 * _2775) * 3.141590118408203125));
        float _2802 = isnan(1.0) ? _2155 : (isnan(_2155) ? 1.0 : min(_2155, 1.0));
        _2718 = (((((_2782 * _2438) + _792) * cbLight._m0[_2733].x) * _2801) * _2802) + _2608;
        _2720 = (((((_2782 * _2440) + _794) * cbLight._m0[_2733].y) * _2801) * _2802) + _2610;
        _2722 = (((((_2782 * _2441) + _795) * cbLight._m0[_2733].z) * _2801) * _2802) + _2612;
    }
    float _2868;
    float _2870;
    float _2872;
    float _2874;
    float _2876;
    float _2878;
    if (_2137.y == 0u)
    {
        uvec4 _2823 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2824 = _2823.x;
        uint _2835 = uint((float(_2823.y) * floor(float(uint(cbSceneParam._m0[85u].y * _729) / _2824))) + floor(float(uint(cbSceneParam._m0[85u].x * _728) / _2824)));
        float _2845 = (log2(_1915 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2846 = isnan(0.0) ? _2845 : (isnan(_2845) ? 0.0 : max(_2845, 0.0));
        uint _2849 = uint(isnan(14.0) ? _2846 : (isnan(_2846) ? 14.0 : min(_2846, 14.0)));
        uvec4 _2854 = texelFetch(g_lightClusterGridBuffer, int(((_2849 << 2u) + (_2835 << 6u)) >> 2u));
        uint _2855 = _2854.x;
        uint _2856 = _2823.z;
        float _2935;
        float _2937;
        float _2939;
        float _2941;
        float _2943;
        float _2945;
        if (((((1u << ((_2856 >> 4u) & 15u)) + 4294967295u) & _2855) == 0u) || ((_2856 & 240u) == 0u))
        {
            _2935 = 0.0;
            _2937 = 0.0;
            _2939 = 0.0;
            _2941 = 0.0;
            _2943 = 0.0;
            _2945 = 0.0;
        }
        else
        {
            float _2936;
            float _2938;
            float _2940;
            float _2942;
            float _2944;
            float _2946;
            float _3088 = 0.0;
            float _3089 = 0.0;
            float _3090 = 0.0;
            float _3091 = 0.0;
            float _3092 = 0.0;
            float _3093 = 0.0;
            uint _3094 = 0u;
            uint _3103;
            bool _3104;
            for (;;)
            {
                _3103 = texelFetch(g_lightClassification, int((((_2849 << 5u) + (_2835 << 9u)) + (_3094 << 2u)) >> 2u)).x;
                _3104 = _3103 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3104)
                {
                    frontier_phi_71_pred = _3093;
                    frontier_phi_71_pred_1 = _3092;
                    frontier_phi_71_pred_2 = _3091;
                    frontier_phi_71_pred_3 = _3090;
                    frontier_phi_71_pred_4 = _3089;
                    frontier_phi_71_pred_5 = _3088;
                }
                else
                {
                    float _3233;
                    float _3234;
                    float _3235;
                    float _3236;
                    float _3237;
                    float _3238;
                    uint _3239;
                    _3233 = _3088;
                    _3234 = _3089;
                    _3235 = _3090;
                    _3236 = _3091;
                    _3237 = _3092;
                    _3238 = _3093;
                    _3239 = _3103;
                    float _3160;
                    float _3161;
                    float _3162;
                    float _3163;
                    float _3164;
                    float _3165;
                    for (;;)
                    {
                        uint _3243 = uint(findLSB(_3239)) + (_3094 << 5u);
                        uint _3240 = (_3239 + 4294967295u) & _3239;
                        uint _3245 = _3243 * 48u;
                        vec4 _3259 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3245)).x, texelFetch(g_PointLightRenderingBuffer, int(_3245 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3245 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3245 + 3u)).x));
                        uint _3265 = (_3243 * 48u) + 4u;
                        vec4 _3278 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3265)).x, texelFetch(g_PointLightRenderingBuffer, int(_3265 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3265 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3265 + 3u)).x));
                        uint _3284 = (_3243 * 48u) + 8u;
                        vec3 _3295 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3284)).x, texelFetch(g_PointLightRenderingBuffer, int(_3284 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3284 + 2u)).x));
                        float _3299 = _3259.x - _1913;
                        float _3300 = _3259.y - _1914;
                        float _3301 = _3259.z - _1915;
                        float _3302 = dot(vec3(_3299, _3300, _3301), vec3(_3299, _3300, _3301));
                        float _3305 = inversesqrt(_3302);
                        float _3306 = _3305 * _3299;
                        float _3307 = _3305 * _3300;
                        float _3308 = _3305 * _3301;
                        float _3309 = dot(vec3(_749, _752, _755), vec3(_3306, _3307, _3308));
                        float _3314 = 1.0 - (_3302 * _3259.w);
                        float _4754 = isnan(0.0) ? _3314 : (isnan(_3314) ? 0.0 : max(_3314, 0.0));
                        float _3315 = isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0));
                        float _3316 = sqrt(_3302) * _3278.w;
                        float _3319 = 1.39999997615814208984375 / (_3316 + 1.39999997615814208984375);
                        float _3320 = _3319 * _3319;
                        float _3323 = ((1.0 - _3320) * _3309) + _3320;
                        float _3326 = _3316 * _3316;
                        float _3330 = ((isnan(0.0) ? _3323 : (isnan(_3323) ? 0.0 : max(_3323, 0.0))) * _3315) / ((_3326 * 0.699999988079071044921875) + 1.0);
                        float _3334 = (-0.0) - _1913;
                        float _3335 = (-0.0) - _1914;
                        float _3336 = (-0.0) - _1915;
                        float _3340 = inversesqrt(dot(vec3(_3334, _3335, _3336), vec3(_3334, _3335, _3336)));
                        float _3341 = _3340 * _3334;
                        float _3342 = _3340 * _3335;
                        float _3343 = _3340 * _3336;
                        float _3350 = exp2(log2(1.0 / ((_3326 * 3.5) + 5.0)) * 0.25);
                        float _3351 = 1.0 - _824;
                        float _3358 = sqrt(1.0 - ((1.0 - (_3351 * _3351)) * (1.0 - (_3350 * _3350))));
                        float _3359 = _3358 * _3358;
                        float _3360 = _3359 * _3359;
                        float _3361 = _3341 + _3306;
                        float _3362 = _3342 + _3307;
                        float _3363 = _3343 + _3308;
                        float _3367 = inversesqrt(dot(vec3(_3361, _3362, _3363), vec3(_3361, _3362, _3363)));
                        float _3371 = dot(vec3(_749, _752, _755), vec3(_3341, _3342, _3343));
                        float _4770 = isnan(0.0) ? _3371 : (isnan(_3371) ? 0.0 : max(_3371, 0.0));
                        float _3374 = isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0));
                        float _3375 = dot(vec3(_749, _752, _755), vec3(_3367 * _3361, _3367 * _3362, _3367 * _3363));
                        float _4781 = isnan(0.0) ? _3375 : (isnan(_3375) ? 0.0 : max(_3375, 0.0));
                        float _3378 = isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0));
                        float _3382 = ((_3378 * _3378) * (_3360 + (-1.0))) + 1.0;
                        float _3383 = _3319 * _3359;
                        float _3384 = _3383 * _3383;
                        float _3387 = ((1.0 - _3384) * _3309) + _3384;
                        float _4792 = isnan(0.0) ? _3387 : (isnan(_3387) ? 0.0 : max(_3387, 0.0));
                        float _3388 = isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0));
                        float _3389 = 1.0 - _3359;
                        float _3399 = (0.5 / (((_3388 * ((_3374 * _3389) + _3359)) + 9.9999999392252902907785028219223e-09) + (((_3388 * _3389) + _3359) * _3374))) * _3388;
                        float _4803 = isnan(0.0) ? _3399 : (isnan(_3399) ? 0.0 : max(_3399, 0.0));
                        float _3410 = (((_3360 * 3.1415927410125732421875) * (isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0)))) / ((_3382 * _3382) * ((_3326 * 2.1991131305694580078125) + 3.141590118408203125))) * _3315;
                        _3163 = (_3330 * _3278.x) + _3236;
                        _3164 = (_3330 * _3278.y) + _3237;
                        _3165 = (_3330 * _3278.z) + _3238;
                        _3160 = (_3410 * _3295.x) + _3233;
                        _3161 = (_3410 * _3295.y) + _3234;
                        _3162 = (_3410 * _3295.z) + _3235;
                        if (_3240 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3233 = _3160;
                            _3234 = _3161;
                            _3235 = _3162;
                            _3236 = _3163;
                            _3237 = _3164;
                            _3238 = _3165;
                            _3239 = _3240;
                        }
                    }
                    frontier_phi_71_pred = _3165;
                    frontier_phi_71_pred_1 = _3164;
                    frontier_phi_71_pred_2 = _3163;
                    frontier_phi_71_pred_3 = _3162;
                    frontier_phi_71_pred_4 = _3161;
                    frontier_phi_71_pred_5 = _3160;
                }
                _2946 = frontier_phi_71_pred;
                _2944 = frontier_phi_71_pred_1;
                _2942 = frontier_phi_71_pred_2;
                _2940 = frontier_phi_71_pred_3;
                _2938 = frontier_phi_71_pred_4;
                _2936 = frontier_phi_71_pred_5;
                uint _3095 = _3094 + 1u;
                if (_3095 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3088 = _2936;
                    _3089 = _2938;
                    _3090 = _2940;
                    _3091 = _2942;
                    _3092 = _2944;
                    _3093 = _2946;
                    _3094 = _3095;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2935 = _2936;
            _2937 = _2938;
            _2939 = _2940;
            _2941 = _2942;
            _2943 = _2944;
            _2945 = _2946;
        }
        uvec4 _2949 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2950 = _2949.z;
        uint _2952 = (_2950 >> 8u) & 15u;
        float _3056;
        float _3058;
        float _3060;
        float _3062;
        float _3064;
        float _3066;
        if (((4294967295u << _2952) & _2855) == 0u)
        {
            _3056 = _2935;
            _3058 = _2937;
            _3060 = _2939;
            _3062 = _2941;
            _3064 = _2943;
            _3066 = _2945;
        }
        else
        {
            float _3081 = inversesqrt(dot(vec3(_1913, _1914, _1915), vec3(_1913, _1914, _1915)));
            float _3082 = _3081 * _1913;
            float _3083 = _3081 * _1914;
            float _3084 = _3081 * _1915;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2952 < ((_2950 >> 12u) & 15u))
            {
                float _3057;
                float _3059;
                float _3061;
                float _3063;
                float _3065;
                float _3067;
                float _3216 = _2935;
                float _3217 = _2937;
                float _3218 = _2939;
                float _3219 = _2941;
                float _3220 = _2943;
                float _3221 = _2945;
                uint _3222 = _2952;
                uint _3231;
                bool _3232;
                for (;;)
                {
                    _3231 = texelFetch(g_lightClassification, int((((_2849 << 5u) + (_2835 << 9u)) + (_3222 << 2u)) >> 2u)).x;
                    _3232 = _3231 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3232)
                    {
                        frontier_phi_82_pred = _3221;
                        frontier_phi_82_pred_1 = _3220;
                        frontier_phi_82_pred_2 = _3219;
                        frontier_phi_82_pred_3 = _3218;
                        frontier_phi_82_pred_4 = _3217;
                        frontier_phi_82_pred_5 = _3216;
                    }
                    else
                    {
                        float _3424;
                        float _3425;
                        float _3426;
                        float _3427;
                        float _3428;
                        float _3429;
                        float _3718;
                        float _3719;
                        float _3720;
                        float _3721;
                        float _3722;
                        float _3723;
                        float _3437 = _3216;
                        float _3438 = _3217;
                        float _3439 = _3218;
                        float _3440 = _3219;
                        float _3441 = _3220;
                        float _3442 = _3221;
                        uint _3443 = _3231;
                        uint _3444;
                        vec4 _3469;
                        float _3470;
                        vec4 _3485;
                        vec3 _3497;
                        vec4 _3513;
                        vec4 _3528;
                        float _3574;
                        bool _3575;
                        for (;;)
                        {
                            uint _3454 = ((_3222 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3443));
                            _3444 = (_3443 + 4294967295u) & _3443;
                            uint _3456 = _3454 * 40u;
                            _3469 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3456)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3456 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3456 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3456 + 3u)).x));
                            _3470 = _3469.w;
                            uint _3472 = (_3454 * 40u) + 4u;
                            _3485 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3472)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 3u)).x));
                            uint _3487 = (_3454 * 40u) + 8u;
                            _3497 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3487)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3487 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3487 + 2u)).x));
                            uint _3500 = (_3454 * 40u) + 16u;
                            _3513 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3500)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3500 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3500 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3500 + 3u)).x));
                            uint _3515 = (_3454 * 40u) + 20u;
                            _3528 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3515)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 3u)).x));
                            uint _3530 = (_3454 * 40u) + 24u;
                            vec4 _3543 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3530)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3530 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3530 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3530 + 3u)).x));
                            uint _3549 = (_3454 * 40u) + 28u;
                            vec4 _3562 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3549)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 3u)).x));
                            _3574 = fma(_1915, _3562.z, fma(_1914, _3562.y, _3562.x * _1913)) + _3562.w;
                            _3575 = !((fma(_1915, _3543.z, fma(_1914, _3543.y, _3543.x * _1913)) + _3543.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3575)
                            {
                                float _3602 = _3469.x - _1913;
                                float _3603 = _3469.y - _1914;
                                float _3604 = _3469.z - _1915;
                                float _3605 = dot(vec3(_3602, _3603, _3604), vec3(_3602, _3603, _3604));
                                float _3608 = inversesqrt(_3605);
                                float _3609 = _3608 * _3602;
                                float _3610 = _3608 * _3603;
                                float _3611 = _3608 * _3604;
                                float _3615 = 1.0 - (_3605 / (_3470 * _3470));
                                float _4814 = isnan(0.0) ? _3615 : (isnan(_3615) ? 0.0 : max(_3615, 0.0));
                                float _3616 = isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0));
                                float _3620 = sqrt(_3605) * _3485.w;
                                float _3622 = 1.39999997615814208984375 / (_3620 + 1.39999997615814208984375);
                                float _3623 = _3622 * _3622;
                                float _3626 = ((1.0 - _3623) * dot(vec3(_3609, _3610, _3611), vec3(_749, _752, _755))) + _3623;
                                float _3629 = _3620 * _3620;
                                float _3633 = (fma(_1915, _3513.z, fma(_1914, _3513.y, _3513.x * _1913)) + _3513.w) / _3574;
                                float _3634 = (fma(_1915, _3528.z, fma(_1914, _3528.y, _3528.x * _1913)) + _3528.w) / _3574;
                                float _3638 = 1.0 - dot(vec2(_3633, _3634), vec2(_3633, _3634));
                                float _4830 = isnan(0.0) ? _3638 : (isnan(_3638) ? 0.0 : max(_3638, 0.0));
                                float _3639 = isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0));
                                float _3640 = _3639 * (((isnan(0.0) ? _3626 : (isnan(_3626) ? 0.0 : max(_3626, 0.0))) * _3616) / ((_3629 * 0.699999988079071044921875) + 1.0));
                                float _3652 = exp2(log2(1.0 / ((_3629 * 3.5) + 5.0)) * 0.25);
                                float _3653 = 1.0 - _824;
                                float _3660 = sqrt(1.0 - ((1.0 - (_3653 * _3653)) * (1.0 - (_3652 * _3652))));
                                float _3661 = _3660 * _3660;
                                float _3662 = _3661 * _3661;
                                float _3663 = _3609 - _3082;
                                float _3664 = _3610 - _3083;
                                float _3665 = _3611 - _3084;
                                float _3669 = inversesqrt(dot(vec3(_3663, _3664, _3665), vec3(_3663, _3664, _3665)));
                                float _3673 = dot(vec3(_749, _752, _755), vec3((-0.0) - _3082, (-0.0) - _3083, (-0.0) - _3084));
                                float _4841 = isnan(0.0) ? _3673 : (isnan(_3673) ? 0.0 : max(_3673, 0.0));
                                float _3676 = isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0));
                                float _3677 = dot(vec3(_749, _752, _755), vec3(_3669 * _3663, _3669 * _3664, _3669 * _3665));
                                float _4852 = isnan(0.0) ? _3677 : (isnan(_3677) ? 0.0 : max(_3677, 0.0));
                                float _3680 = isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0));
                                float _3684 = ((_3680 * _3680) * (_3662 + (-1.0))) + 1.0;
                                float _3685 = _3622 * _3661;
                                float _3686 = _3685 * _3685;
                                float _3692 = ((1.0 - _3686) * dot(vec3(_749, _752, _755), vec3(_3609, _3610, _3611))) + _3686;
                                float _4863 = isnan(0.0) ? _3692 : (isnan(_3692) ? 0.0 : max(_3692, 0.0));
                                float _3693 = isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0));
                                float _3694 = 1.0 - _3661;
                                float _3704 = (0.5 / (((_3693 * ((_3676 * _3694) + _3661)) + 9.9999999392252902907785028219223e-09) + (((_3693 * _3694) + _3661) * _3676))) * _3693;
                                float _4874 = isnan(0.0) ? _3704 : (isnan(_3704) ? 0.0 : max(_3704, 0.0));
                                float _3714 = (_3639 * _3616) * (((_3662 * 3.1415927410125732421875) * (isnan(1.0) ? _4874 : (isnan(_4874) ? 1.0 : min(_4874, 1.0)))) / ((_3684 * _3684) * ((_3629 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3640 * _3485.z;
                                frontier_phi_88_pred_1 = _3640 * _3485.y;
                                frontier_phi_88_pred_2 = _3640 * _3485.x;
                                frontier_phi_88_pred_3 = _3714 * _3497.z;
                                frontier_phi_88_pred_4 = _3714 * _3497.y;
                                frontier_phi_88_pred_5 = _3714 * _3497.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3723 = frontier_phi_88_pred;
                            _3722 = frontier_phi_88_pred_1;
                            _3721 = frontier_phi_88_pred_2;
                            _3720 = frontier_phi_88_pred_3;
                            _3719 = frontier_phi_88_pred_4;
                            _3718 = frontier_phi_88_pred_5;
                            _3427 = _3721 + _3440;
                            _3428 = _3722 + _3441;
                            _3429 = _3723 + _3442;
                            _3424 = _3718 + _3437;
                            _3425 = _3719 + _3438;
                            _3426 = _3720 + _3439;
                            if (_3444 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3437 = _3424;
                                _3438 = _3425;
                                _3439 = _3426;
                                _3440 = _3427;
                                _3441 = _3428;
                                _3442 = _3429;
                                _3443 = _3444;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3429;
                        frontier_phi_82_pred_1 = _3428;
                        frontier_phi_82_pred_2 = _3427;
                        frontier_phi_82_pred_3 = _3426;
                        frontier_phi_82_pred_4 = _3425;
                        frontier_phi_82_pred_5 = _3424;
                    }
                    _3067 = frontier_phi_82_pred;
                    _3065 = frontier_phi_82_pred_1;
                    _3063 = frontier_phi_82_pred_2;
                    _3061 = frontier_phi_82_pred_3;
                    _3059 = frontier_phi_82_pred_4;
                    _3057 = frontier_phi_82_pred_5;
                    uint _3223 = _3222 + 1u;
                    if (_3223 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3216 = _3057;
                        _3217 = _3059;
                        _3218 = _3061;
                        _3219 = _3063;
                        _3220 = _3065;
                        _3221 = _3067;
                        _3222 = _3223;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3063;
                frontier_phi_63_64_ladder_1 = _3067;
                frontier_phi_63_64_ladder_2 = _3065;
                frontier_phi_63_64_ladder_3 = _3061;
                frontier_phi_63_64_ladder_4 = _3059;
                frontier_phi_63_64_ladder_5 = _3057;
            }
            else
            {
                frontier_phi_63_64_ladder = _2941;
                frontier_phi_63_64_ladder_1 = _2945;
                frontier_phi_63_64_ladder_2 = _2943;
                frontier_phi_63_64_ladder_3 = _2939;
                frontier_phi_63_64_ladder_4 = _2937;
                frontier_phi_63_64_ladder_5 = _2935;
            }
            _3056 = frontier_phi_63_64_ladder_5;
            _3058 = frontier_phi_63_64_ladder_4;
            _3060 = frontier_phi_63_64_ladder_3;
            _3062 = frontier_phi_63_64_ladder;
            _3064 = frontier_phi_63_64_ladder_2;
            _3066 = frontier_phi_63_64_ladder_1;
        }
        float _3071 = isnan(1.0) ? _808 : (isnan(_808) ? 1.0 : min(_808, 1.0));
        _2868 = (_3071 * _3062) + _2380;
        _2870 = (_3071 * _3064) + _2382;
        _2872 = (_3071 * _3066) + _2384;
        _2874 = ((_3056 * _792) * _3071) + _2718;
        _2876 = ((_3058 * _794) * _3071) + _2720;
        _2878 = ((_3060 * _795) * _3071) + _2722;
    }
    else
    {
        _2868 = _2380;
        _2870 = _2382;
        _2872 = _2384;
        _2874 = _2718;
        _2876 = _2720;
        _2878 = _2722;
    }
    float _4890 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _4901 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
    float _4912 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _2895 = ((isnan(1.0) ? _4890 : (isnan(_4890) ? 1.0 : min(_4890, 1.0))) * (_2868 + ((isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0))) * _808))) + ((_2874 + ((isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0))) * _1647)) * cbPerFrame._m0[3u].x);
    float _2896 = ((isnan(1.0) ? _4901 : (isnan(_4901) ? 1.0 : min(_4901, 1.0))) * (_2870 + ((isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0))) * _808))) + ((_2876 + ((isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0))) * _1647)) * cbPerFrame._m0[3u].x);
    float _2897 = ((isnan(1.0) ? _4912 : (isnan(_4912) ? 1.0 : min(_4912, 1.0))) * (_2872 + ((isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0))) * _808))) + ((_2878 + ((isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0))) * _1647)) * cbPerFrame._m0[3u].x);
    uint _2898 = _251 + 6u;
    float _2906 = _728 / cbSceneParam._m0[86u].x;
    float _2907 = _729 / cbSceneParam._m0[86u].y;
    vec4 _2921 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2906, _2907, (log2((isnan(cbSceneParam._m0[77u].w) ? _650 : (isnan(_650) ? cbSceneParam._m0[77u].w : min(_650, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2923 = _2921.x;
    float _2924 = _2921.y;
    float _2925 = _2921.z;
    float _2926 = _2921.w;
    float _2998;
    float _3000;
    float _3002;
    float _3004;
    if (_650 > cbSceneParam._m0[78u].w)
    {
        float _2960 = isnan(_650) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _650 : min(cbSceneParam._m0[80u].w, _650));
        float _2961 = _2960 / _650;
        float _2972 = _2961 * _700;
        float _2973 = _701 * _2961;
        float _2974 = (-0.0) - _2973;
        float _2976 = _2961 * _702;
        float _2978 = (cbSceneParam._m0[77u].w * _2974) / _2960;
        float _2979 = _2978 + cbSceneParam._m0[79u].w;
        float _2980 = cbSceneParam._m0[79u].w - _2973;
        float _2986 = sqrt(((_2972 * _2972) + (_2973 * _2973)) + (_2976 * _2976));
        float _2989 = (1.0 - (cbSceneParam._m0[77u].w / _2960)) * _2986;
        float _2994 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2996 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3173;
        if (abs((_2974 - _2978) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3173 = ((((_2979 > 0.0) ? exp2(_2994 * _2979) : (2.0 - exp2(_2996 * _2979))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2989;
        }
        else
        {
            float _3117 = 1.0 / cbSceneParam._m0[80u].x;
            float _3118 = isnan(_2980) ? _2979 : (isnan(_2979) ? _2980 : max(_2979, _2980));
            float _3119 = isnan(_2980) ? _2979 : (isnan(_2979) ? _2980 : min(_2979, _2980));
            float _3128 = isnan(0.0) ? _3118 : (isnan(_3118) ? 0.0 : min(_3118, 0.0));
            float _3129 = isnan(0.0) ? _3119 : (isnan(_3119) ? 0.0 : min(_3119, 0.0));
            _3173 = ((abs(_2986 / _2974) * cbSceneParam._m0[80u].y) * ((((_3128 - _3129) * 2.0) - ((exp2(_2994 * (isnan(0.0) ? _3118 : (isnan(_3118) ? 0.0 : max(_3118, 0.0)))) - exp2(_2994 * (isnan(0.0) ? _3119 : (isnan(_3119) ? 0.0 : max(_3119, 0.0))))) * _3117)) - ((exp2(_2996 * _3128) - exp2(_2996 * _3129)) * _3117))) + (_2989 * cbSceneParam._m0[80u].z);
        }
        vec4 _3175 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2906, _2907, 1.0), 0.0);
        float _3184 = exp2((_3173 * (-1.44269502162933349609375)) * (1.0 - _3175.w));
        float _3185 = log2(_3184);
        float _3201 = log2(_2926);
        _2998 = (exp2(_3201 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3185 * cbSceneParam._m0[78u].x)) * _3175.x) / cbSceneParam._m0[78u].x)) + _2923;
        _3000 = (exp2(_3201 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3185 * cbSceneParam._m0[78u].y)) * _3175.y) / cbSceneParam._m0[78u].y)) + _2924;
        _3002 = (exp2(_3201 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3185 * cbSceneParam._m0[78u].z)) * _3175.z) / cbSceneParam._m0[78u].z)) + _2925;
        _3004 = _3184 * _2926;
    }
    else
    {
        _2998 = _2923;
        _3000 = _2924;
        _3002 = _2925;
        _3004 = _2926;
    }
    bool _3211;
    vec4 _3014;
    vec4 _3036;
    float _3038;
    float _3042;
    float _3043;
    float _3044;
    float _3045;
    bool _3055;
    for (;;)
    {
        _3014 = cbMatDynParam._m0[0u];
        float _3016 = roundEven(_3014.y);
        bool _3017 = _3016 == 3.0;
        float _3018 = log2(_3004);
        float _3025 = exp2(_3018 * cbSceneParam._m0[78u].x) * _2895;
        float _3026 = exp2(_3018 * cbSceneParam._m0[78u].y) * _2896;
        float _3027 = exp2(_3018 * cbSceneParam._m0[78u].z) * _2897;
        float _3034 = _716 + (-0.5);
        _3036 = cbMtdParam._m0[1u];
        _3038 = _3036.y * _3034;
        float _3041 = (_3016 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3042 = _3041 * (_3017 ? _3025 : (_3025 + (cbSceneParam._m0[72u].w * _2998)));
        _3043 = _3041 * (_3017 ? _3026 : (_3026 + (cbSceneParam._m0[72u].w * _3000)));
        _3044 = _3041 * (_3017 ? _3027 : (_3027 + (cbSceneParam._m0[72u].w * _3002)));
        _3045 = _3034 * 0.999000012874603271484375;
        _3055 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3055)
        {
            if ((cbInstanceData._m0[_251 + 7u].x + _3045) < 0.5)
            {
                _3211 = true;
                break;
            }
        }
        uint _3152 = _768 + uint(_3014.w);
        if ((cbInstanceData._m0[_3152].w < 1.0) && ((cbInstanceData._m0[_3152].w + _3045) < 0.5))
        {
            _3211 = true;
            break;
        }
        if ((_3038 + 1.0) < _3036.x)
        {
            _3211 = true;
            break;
        }
        _3211 = false;
        break;
    }
    float _3415;
    if (_3211)
    {
        discard_state = true;
        _3415 = 0.0;
    }
    else
    {
        _3415 = cbInstanceData._m0[_2898].w;
    }
    SV_Target.x = _3042;
    SV_Target.y = _3043;
    SV_Target.z = _3044;
    SV_Target.w = _3415;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2898].w;
    discard_exit();
}


