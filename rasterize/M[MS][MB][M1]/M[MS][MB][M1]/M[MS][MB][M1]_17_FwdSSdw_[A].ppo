#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1144;
float _3552;
float _3553;
float _3554;
float _3555;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _213 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _214 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _215 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _221 = inversesqrt(dot(vec3(_213, _214, _215), vec3(_213, _214, _215)));
    float _228 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _235 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _241 = uint(roundEven(NORMAL.w)) * 13u;
    uint _246 = _241 + 1u;
    uint _250 = _241 + 2u;
    float _259 = sqrt(((cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x) + (cbInstanceData._m0[_241].x * cbInstanceData._m0[_241].x)) + (cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x));
    float _260 = _259 * TEXCOORD.z;
    float _261 = _259 * TEXCOORD.w;
    vec4 _280 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _286 = _280.x * cbMtdParam._m0[9u].x;
    float _287 = _280.y * cbMtdParam._m0[9u].y;
    float _288 = _280.z * cbMtdParam._m0[9u].z;
    vec4 _306 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _310 = _306.z;
    float _315 = (_306.x * 2.0) + (-1.0);
    float _317 = (_306.y * 2.0) + (-1.0);
    float _318 = dot(vec2(_315, _317), vec2(_315, _317));
    float _3564 = isnan(0.0) ? _318 : (isnan(_318) ? 0.0 : max(_318, 0.0));
    float _324 = sqrt(1.0 - (isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0))));
    vec4 _341 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _260) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _261) + cbTextureTilingScale._m0[11u].w));
    float _343 = _341.x;
    float _344 = 1.0 - _343;
    float _353 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _356 = ((isnan(0.0) ? _353 : (isnan(_353) ? 0.0 : min(_353, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _365 = (_356 - ((((((_343 - _344) * cbMtdParam._m0[24u].z) + _344) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _356))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3585 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    float _366 = isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0));
    float _373 = (_366 * (cbMtdParam._m0[17u].x - _286)) + _286;
    float _374 = (_366 * (cbMtdParam._m0[17u].y - _287)) + _287;
    float _375 = (_366 * (cbMtdParam._m0[17u].z - _288)) + _288;
    vec4 _388 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _260) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _261) + cbTextureTilingScale._m0[19u].w));
    float _390 = _388.x;
    float _391 = 1.0 - _390;
    float _420 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_390 - _391) * cbMtdParam._m0[24u].w) + _391) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3596 = isnan(0.0) ? _420 : (isnan(_420) ? 0.0 : max(_420, 0.0));
    float _421 = isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0));
    float _429 = ((((cbMtdParam._m0[10u].x - _373) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _421) + _373;
    float _430 = ((((cbMtdParam._m0[10u].y - _374) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _421) + _374;
    float _431 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _375)) * _421) + _375;
    vec4 _444 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _446 = _444.x;
    float _448 = _446 - (_446 * _366);
    float _450 = _448 - (_448 * _421);
    vec4 _464 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _260) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _261) + cbTextureTilingScale._m0[15u].w));
    float _471 = (_464.x * 2.0) + (-1.0);
    float _472 = (_464.y * 2.0) + (-1.0);
    float _473 = dot(vec2(_471, _472), vec2(_471, _472));
    float _3607 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _481 = (_366 * (_464.z - _310)) + _310;
    float _484 = ((cbMtdParam._m0[23u].y - _481) * _421) + _481;
    vec4 _506 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _260) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _261) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _512 = (_506.x * 2.0) + (-1.0);
    float _513 = (_506.y * 2.0) + (-1.0);
    float _514 = dot(vec2(_512, _513), vec2(_512, _513));
    float _3618 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _531 = (((_471 - _315) + (cbMtdParam._m0[21u].x * _315)) * _366) + _315;
    float _532 = (((_472 - _317) + (cbMtdParam._m0[21u].x * _317)) * _366) + _317;
    float _533 = (_366 * (sqrt(1.0 - (isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0)))) - _324)) + _324;
    float _544 = (((_512 - _531) + (_531 * cbMtdParam._m0[22u].z)) * _421) + _531;
    float _545 = (((_513 - _532) + (_532 * cbMtdParam._m0[22u].z)) * _421) + _532;
    float _546 = ((sqrt(1.0 - (isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0)))) - _533) * _421) + _533;
    float _548 = cbMtdParam._m0[22u].x + _306.w;
    float _551 = fma(_546, _228 * NORMAL.x, fma(_545, _235 * TANGENT.x, (_221 * _213) * _544));
    float _554 = fma(_546, _228 * NORMAL.y, fma(_545, _235 * TANGENT.y, (_221 * _214) * _544));
    float _557 = fma(_546, _228 * NORMAL.z, fma(_545, _235 * TANGENT.z, (_221 * _215) * _544));
    float _561 = inversesqrt(dot(vec3(_551, _554, _557), vec3(_551, _554, _557)));
    float _562 = _561 * _551;
    float _563 = _561 * _554;
    float _564 = _561 * _557;
    float _3629 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _565 = isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0));
    float _3640 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _3651 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _3662 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _3673 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _3684 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _570 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
    float _584 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _624 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _634 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _624);
    float _635 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _624);
    float _636 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _624);
    float _640 = inversesqrt(dot(vec3(_634, _635, _636), vec3(_634, _635, _636)));
    float _641 = _634 * _640;
    float _642 = _635 * _640;
    float _643 = _636 * _640;
    vec4 _648 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _650 = _648.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _825 = sqrt(((_634 * _634) + (_635 * _635)) + (_636 * _636));
        float _831 = (cbMatDynParam._m0[5u].x * _825) + cbMatDynParam._m0[5u].y;
        float _3695 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
        float _832 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
        float _836 = (cbMatDynParam._m0[5u].z * _825) + cbMatDynParam._m0[5u].w;
        float _3706 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0))) - _832)) + _832) < ((_650 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _662 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _663 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _683 = fma(_564, cbSceneParam._m0[5u].z, fma(_563, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _562));
    float _686 = fma(_564, cbSceneParam._m0[6u].z, fma(_563, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _562));
    float _689 = fma(_564, cbSceneParam._m0[7u].z, fma(_563, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _562));
    uint _702 = _241 + 9u;
    uint _703 = _702 + uint(cbMatDynParam._m0[0u].w);
    float _709 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0)))) * cbInstanceData._m0[_703].x;
    float _710 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0)))) * cbInstanceData._m0[_703].y;
    float _711 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0)))) * cbInstanceData._m0[_703].z;
    float _3717 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
    float _712 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
    float _3728 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
    float _713 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
    float _3739 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _714 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
    float _715 = 1.0 - _570;
    float _716 = _712 * _715;
    float _717 = _713 * _715;
    float _718 = _714 * _715;
    float _723 = (_712 + (-0.039999999105930328369140625)) * _570;
    float _724 = (_713 + (-0.039999999105930328369140625)) * _570;
    float _725 = (_714 + (-0.039999999105930328369140625)) * _570;
    float _726 = _723 + 0.039999999105930328369140625;
    float _728 = _724 + 0.039999999105930328369140625;
    float _729 = _725 + 0.039999999105930328369140625;
    vec4 _738 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _662, cbSceneParam._m0[86u].y * _663));
    float _742 = ((isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0))) * TEXCOORD_5.w) * _738.x;
    float _743 = dot(vec3(_562, _563, _564), vec3(_641, _642, _643));
    float _746 = _743 * 2.0;
    float _750 = (_746 * _562) - _641;
    float _751 = (_746 * _563) - _642;
    float _752 = (_746 * _564) - _643;
    float _756 = abs(dot(vec3(_641, _642, _643), vec3(_562, _563, _564)));
    float _3750 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _758 = sqrt(_565);
    float _771 = exp2((_758 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_758 * 3.0));
    float _777 = (1.0 - _771) * ((_758 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _778 = _771 * _758;
    float _806 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _810 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _814 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1143;
    float _1145;
    float _1146;
    float _1147;
    float _1148;
    float _1149;
    float _1150;
    float _1151;
    float _1152;
    float _1153;
    float _1154;
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _868 = fma(_814, cbModelParam._m0[26u].z, fma(_810, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _806));
        float _872 = fma(_814, cbModelParam._m0[27u].z, fma(_810, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _806));
        float _876 = fma(_814, cbModelParam._m0[28u].z, fma(_810, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _806));
        float _901 = _806 + _562;
        float _902 = _810 + _563;
        float _903 = _814 + _564;
        float _913 = fma(_903, cbModelParam._m0[26u].z, fma(_902, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _901)) - _868;
        float _914 = fma(_903, cbModelParam._m0[27u].z, fma(_902, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _901)) - _872;
        float _915 = fma(_903, cbModelParam._m0[28u].z, fma(_902, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _901)) - _876;
        float _919 = inversesqrt(dot(vec3(_913, _914, _915), vec3(_913, _914, _915)));
        float _932 = ((_919 * _913) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_868 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _933 = ((_919 * _914) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_872 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _934 = ((_919 * _915) / cbModelParam._m0[34u].z) + ((((((_876 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _937 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_932, _933, _934), 0.0);
        vec4 _944 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_932, _933, _934), 0.0);
        vec4 _951 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_932, _933, _934), 0.0);
        vec4 _958 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_932, _933, _934), 0.0);
        float _971 = exp2((_937.w + (-0.5)) * 20.0) * 2.0;
        float _972 = _971 * (_937.x + (-0.5));
        float _973 = _971 * (_937.y + (-0.5));
        float _974 = _971 * (_937.z + (-0.5));
        float _981 = exp2((_944.w + (-0.5)) * 20.0) * 2.0;
        float _982 = _981 * (_944.x + (-0.5));
        float _983 = _981 * (_944.y + (-0.5));
        float _984 = _981 * (_944.z + (-0.5));
        float _991 = exp2((_951.w + (-0.5)) * 20.0) * 2.0;
        float _992 = _991 * (_951.x + (-0.5));
        float _993 = _991 * (_951.y + (-0.5));
        float _994 = _991 * (_951.z + (-0.5));
        float _1001 = exp2((_958.w + (-0.5)) * 20.0) * 2.0;
        float _1002 = _1001 * (_958.x + (-0.5));
        float _1003 = _1001 * (_958.y + (-0.5));
        float _1004 = _1001 * (_958.z + (-0.5));
        float _1005 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1006 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1007 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1008 = _972 * 0.5;
        float _1009 = _982 * 0.5;
        float _1010 = _992 * 0.5;
        float _1011 = dot(vec3(_1008, _1009, _1010), vec3(_1008, _1009, _1010));
        float _1016 = (_1011 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1011);
        float _1025 = (dot(vec3(_562, _563, _564), vec3(_1016 * _1008, _1016 * _1009, _1016 * _1010)) + 1.0) * 0.5;
        float _3776 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1035 = sqrt(((_1009 * _1009) + (_1008 * _1008)) + (_1010 * _1010)) / (_1005 + 9.9999997473787516355514526367188e-06);
        float _3787 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1036 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
        float _1037 = _1036 * 2.0;
        float _1041 = (1.0 - _1036) / (_1036 + 1.0);
        float _3798 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1042 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
        float _1051 = ((((1.0 - _1042) * (_1037 + 2.0)) * exp2(log2(isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0))) * (_1037 + 1.0))) + _1042) * _1005;
        float _1052 = _973 * 0.5;
        float _1053 = _983 * 0.5;
        float _1054 = _993 * 0.5;
        float _1055 = dot(vec3(_1052, _1053, _1054), vec3(_1052, _1053, _1054));
        float _1060 = (_1055 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1055);
        float _1068 = (dot(vec3(_562, _563, _564), vec3(_1060 * _1052, _1060 * _1053, _1060 * _1054)) + 1.0) * 0.5;
        float _3809 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1077 = sqrt(((_1053 * _1053) + (_1052 * _1052)) + (_1054 * _1054)) / (_1006 + 9.9999997473787516355514526367188e-06);
        float _3820 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1078 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
        float _1079 = _1078 * 2.0;
        float _1083 = (1.0 - _1078) / (_1078 + 1.0);
        float _3831 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1084 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
        float _1093 = ((((1.0 - _1084) * (_1079 + 2.0)) * exp2(log2(isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0))) * (_1079 + 1.0))) + _1084) * _1006;
        float _1094 = _974 * 0.5;
        float _1095 = _984 * 0.5;
        float _1096 = _994 * 0.5;
        float _1097 = dot(vec3(_1094, _1095, _1096), vec3(_1094, _1095, _1096));
        float _1102 = (_1097 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1097);
        float _1110 = (dot(vec3(_562, _563, _564), vec3(_1102 * _1094, _1102 * _1095, _1102 * _1096)) + 1.0) * 0.5;
        float _3842 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1119 = sqrt(((_1095 * _1095) + (_1094 * _1094)) + (_1096 * _1096)) / (_1007 + 9.9999997473787516355514526367188e-06);
        float _3853 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1120 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
        float _1121 = _1120 * 2.0;
        float _1125 = (1.0 - _1120) / (_1120 + 1.0);
        float _3864 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1126 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
        float _1135 = ((((1.0 - _1126) * (_1121 + 2.0)) * exp2(log2(isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0))) * (_1121 + 1.0))) + _1126) * _1007;
        _1143 = _974;
        _1145 = _973;
        _1146 = _972;
        _1147 = _984;
        _1148 = _983;
        _1149 = _982;
        _1150 = _994;
        _1151 = _993;
        _1152 = _992;
        _1153 = _1007;
        _1154 = _1006;
        _1155 = _1005;
        _1156 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0)));
        _1157 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0)));
        _1158 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0)));
    }
    else
    {
        _1143 = _1144;
        _1145 = _1144;
        _1146 = _1144;
        _1147 = _1144;
        _1148 = _1144;
        _1149 = _1144;
        _1150 = _1144;
        _1151 = _1144;
        _1152 = _1144;
        _1153 = _1144;
        _1154 = _1144;
        _1155 = _1144;
        _1156 = 0.0;
        _1157 = 0.0;
        _1158 = 0.0;
    }
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1186 = fma(_814, cbModelParam._m0[30u].z, fma(_810, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _806));
        float _1190 = fma(_814, cbModelParam._m0[31u].z, fma(_810, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _806));
        float _1194 = fma(_814, cbModelParam._m0[32u].z, fma(_810, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _806));
        float _1217 = _806 + _562;
        float _1218 = _810 + _563;
        float _1219 = _814 + _564;
        float _1229 = fma(_1219, cbModelParam._m0[30u].z, fma(_1218, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1217)) - _1186;
        float _1230 = fma(_1219, cbModelParam._m0[31u].z, fma(_1218, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1217)) - _1190;
        float _1231 = fma(_1219, cbModelParam._m0[32u].z, fma(_1218, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1217)) - _1194;
        float _1235 = inversesqrt(dot(vec3(_1229, _1230, _1231), vec3(_1229, _1230, _1231)));
        float _1248 = ((_1235 * _1229) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1186 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1249 = ((_1235 * _1230) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1190 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1250 = ((_1235 * _1231) / cbModelParam._m0[35u].z) + ((((((_1194 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1252 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1248, _1249, _1250), 0.0);
        vec4 _1259 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1248, _1249, _1250), 0.0);
        vec4 _1266 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1248, _1249, _1250), 0.0);
        vec4 _1273 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1248, _1249, _1250), 0.0);
        float _1285 = exp2((_1252.w + (-0.5)) * 20.0) * 2.0;
        float _1286 = _1285 * (_1252.x + (-0.5));
        float _1287 = _1285 * (_1252.y + (-0.5));
        float _1288 = _1285 * (_1252.z + (-0.5));
        float _1295 = exp2((_1259.w + (-0.5)) * 20.0) * 2.0;
        float _1296 = _1295 * (_1259.x + (-0.5));
        float _1297 = _1295 * (_1259.y + (-0.5));
        float _1298 = _1295 * (_1259.z + (-0.5));
        float _1305 = exp2((_1266.w + (-0.5)) * 20.0) * 2.0;
        float _1306 = _1305 * (_1266.x + (-0.5));
        float _1307 = _1305 * (_1266.y + (-0.5));
        float _1308 = _1305 * (_1266.z + (-0.5));
        float _1315 = exp2((_1273.w + (-0.5)) * 20.0) * 2.0;
        float _1316 = _1315 * (_1273.x + (-0.5));
        float _1317 = _1315 * (_1273.y + (-0.5));
        float _1318 = _1315 * (_1273.z + (-0.5));
        float _1319 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1320 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1321 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1322 = _1286 * 0.5;
        float _1323 = _1296 * 0.5;
        float _1324 = _1306 * 0.5;
        float _1325 = dot(vec3(_1322, _1323, _1324), vec3(_1322, _1323, _1324));
        float _1330 = (_1325 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1325);
        float _1338 = (dot(vec3(_562, _563, _564), vec3(_1330 * _1322, _1330 * _1323, _1330 * _1324)) + 1.0) * 0.5;
        float _3905 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1347 = sqrt(((_1323 * _1323) + (_1322 * _1322)) + (_1324 * _1324)) / (_1319 + 9.9999997473787516355514526367188e-06);
        float _3916 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1348 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
        float _1349 = _1348 * 2.0;
        float _1353 = (1.0 - _1348) / (_1348 + 1.0);
        float _3927 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1354 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
        float _1363 = ((((1.0 - _1354) * (_1349 + 2.0)) * exp2(log2(isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0))) * (_1349 + 1.0))) + _1354) * _1319;
        float _1364 = _1287 * 0.5;
        float _1365 = _1297 * 0.5;
        float _1366 = _1307 * 0.5;
        float _1367 = dot(vec3(_1364, _1365, _1366), vec3(_1364, _1365, _1366));
        float _1372 = (_1367 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1367);
        float _1380 = (dot(vec3(_562, _563, _564), vec3(_1372 * _1364, _1372 * _1365, _1372 * _1366)) + 1.0) * 0.5;
        float _3938 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1389 = sqrt(((_1365 * _1365) + (_1364 * _1364)) + (_1366 * _1366)) / (_1320 + 9.9999997473787516355514526367188e-06);
        float _3949 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1390 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
        float _1391 = _1390 * 2.0;
        float _1395 = (1.0 - _1390) / (_1390 + 1.0);
        float _3960 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1396 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
        float _1405 = ((((1.0 - _1396) * (_1391 + 2.0)) * exp2(log2(isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0))) * (_1391 + 1.0))) + _1396) * _1320;
        float _1406 = _1288 * 0.5;
        float _1407 = _1298 * 0.5;
        float _1408 = _1308 * 0.5;
        float _1409 = dot(vec3(_1406, _1407, _1408), vec3(_1406, _1407, _1408));
        float _1414 = (_1409 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1409);
        float _1422 = (dot(vec3(_562, _563, _564), vec3(_1414 * _1406, _1414 * _1407, _1414 * _1408)) + 1.0) * 0.5;
        float _3971 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1431 = sqrt(((_1407 * _1407) + (_1406 * _1406)) + (_1408 * _1408)) / (_1321 + 9.9999997473787516355514526367188e-06);
        float _3982 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1432 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
        float _1433 = _1432 * 2.0;
        float _1437 = (1.0 - _1432) / (_1432 + 1.0);
        float _3993 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1438 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
        float _1447 = ((((1.0 - _1438) * (_1433 + 2.0)) * exp2(log2(isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0))) * (_1433 + 1.0))) + _1438) * _1321;
        _1455 = _1288;
        _1456 = _1287;
        _1457 = _1286;
        _1458 = _1298;
        _1459 = _1297;
        _1460 = _1296;
        _1461 = _1308;
        _1462 = _1307;
        _1463 = _1306;
        _1464 = _1321;
        _1465 = _1320;
        _1466 = _1319;
        _1467 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0)));
        _1468 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0)));
        _1469 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0)));
    }
    else
    {
        _1455 = _1144;
        _1456 = _1144;
        _1457 = _1144;
        _1458 = _1144;
        _1459 = _1144;
        _1460 = _1144;
        _1461 = _1144;
        _1462 = _1144;
        _1463 = _1144;
        _1464 = _1144;
        _1465 = _1144;
        _1466 = _1144;
        _1467 = 0.0;
        _1468 = 0.0;
        _1469 = 0.0;
    }
    float _1479 = (cbModelParam._m0[1u].x * (_1467 - _1156)) + _1156;
    float _1480 = (cbModelParam._m0[1u].x * (_1468 - _1157)) + _1157;
    float _1481 = (cbModelParam._m0[1u].x * (_1469 - _1158)) + _1158;
    float _1502 = fma(_1481, cbSceneParam._m0[89u].z, fma(_1480, cbSceneParam._m0[89u].y, _1479 * cbSceneParam._m0[89u].x));
    float _1505 = fma(_1481, cbSceneParam._m0[90u].z, fma(_1480, cbSceneParam._m0[90u].y, _1479 * cbSceneParam._m0[90u].x));
    float _1508 = fma(_1481, cbSceneParam._m0[91u].z, fma(_1480, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1479));
    float _1523 = _750 * 0.5;
    float _1524 = _751 * 0.5;
    float _1525 = _752 * 0.5;
    float _1526 = dot(vec4(_1523, _1524, _1525, 1.0), vec4(_1457, _1460, _1463, _1466));
    float _1529 = dot(vec4(_1523, _1524, _1525, 1.0), vec4(_1456, _1459, _1462, _1465));
    float _1532 = dot(vec4(_1523, _1524, _1525, 1.0), vec4(_1455, _1458, _1461, _1464));
    float _1566;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1539 = dot(vec4(_1523, _1524, _1525, 1.0), vec4(_1143, _1147, _1150, _1153));
        float _1543 = dot(vec4(_1523, _1524, _1525, 1.0), vec4(_1145, _1148, _1151, _1154));
        float _1547 = dot(vec4(_1523, _1524, _1525, 1.0), vec4(_1146, _1149, _1152, _1155));
        float _1554 = dot(vec4(cbModelParam._m0[39u]), vec4(_1523, _1524, _1525, 1.0));
        _1566 = dot(vec3(isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0)), isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0)), isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1554) ? 0.0 : (isnan(0.0) ? _1554 : max(0.0, _1554))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1566 = 1.0;
    }
    float _1577;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1568 = dot(vec4(cbModelParam._m0[40u]), vec4(_1523, _1524, _1525, 1.0));
        _1577 = dot(vec3(isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0)), isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0)), isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1568) ? 0.0 : (isnan(0.0) ? _1568 : max(0.0, _1568))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1577 = 1.0;
    }
    float _1581 = (_1577 * cbModelParam._m0[1u].x) + (_1566 * (1.0 - cbModelParam._m0[1u].x));
    float _1591 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _565);
    float _1592 = isnan(_1591) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1591 : min(cbModelParam._m0[25u].z, _1591));
    float _1673;
    float _1675;
    float _1677;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1640 = fma(_814, cbModelParam._m0[13u].z, fma(_810, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _806)) + cbModelParam._m0[13u].w;
        float _1644 = fma(_814, cbModelParam._m0[14u].z, fma(_810, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _806)) + cbModelParam._m0[14u].w;
        float _1648 = fma(_814, cbModelParam._m0[15u].z, fma(_810, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _806)) + cbModelParam._m0[15u].w;
        float _1651 = fma(_752, cbModelParam._m0[13u].z, fma(_751, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _750));
        float _1654 = fma(_752, cbModelParam._m0[14u].z, fma(_751, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _750));
        float _1657 = fma(_752, cbModelParam._m0[15u].z, fma(_751, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _750));
        float _1685;
        if (_1651 > 0.0)
        {
            _1685 = abs((1.0 - _1640) / _1651);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1651 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1640 + 1.0) / _1651);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1685 = frontier_phi_17_15_ladder;
        }
        float _1910;
        if (_1654 > 0.0)
        {
            _1910 = abs((1.0 - _1644) / _1654);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1654 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1644 + 1.0) / _1654);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1910 = frontier_phi_26_22_ladder;
        }
        float _2167;
        if (_1657 > 0.0)
        {
            _2167 = abs((1.0 - _1648) / _1657);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1657 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1648 + 1.0) / _1657);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2167 = frontier_phi_38_33_ladder;
        }
        float _2169 = isnan(_1910) ? _1685 : (isnan(_1685) ? _1910 : min(_1685, _1910));
        float _2170 = isnan(_2167) ? _2169 : (isnan(_2169) ? _2167 : min(_2169, _2167));
        float _2174 = (_2170 * _1651) + _1640;
        float _2175 = (_2170 * _1654) + _1644;
        float _2176 = (_2170 * _1657) + _1648;
        float _2177 = _2170 * 9.9999997473787516355514526367188e-05;
        float _2179 = (-1.0) - _2177;
        float _2181 = _2177 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2176 > _2181) || ((_2176 < _2179) || ((_2175 > _2181) || ((_2175 < _2179) || ((_2174 < _2179) || (_2174 > _2181))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2304 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2176, cbModelParam._m0[9u].z, fma(_2175, cbModelParam._m0[9u].y, _2174 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2176, cbModelParam._m0[10u].z, fma(_2175, cbModelParam._m0[10u].y, _2174 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2176, cbModelParam._m0[11u].z, fma(_2175, cbModelParam._m0[11u].y, _2174 * cbModelParam._m0[11u].x))), _1592);
            frontier_phi_16_38_ladder = _2304.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2304.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2304.x * cbModelParam._m0[1u].y;
        }
        _1673 = frontier_phi_16_38_ladder_2;
        _1675 = frontier_phi_16_38_ladder_1;
        _1677 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1661 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_750, _751, _752), _1592);
        _1673 = _1661.x * cbModelParam._m0[1u].y;
        _1675 = _1661.y * cbModelParam._m0[1u].y;
        _1677 = _1661.z * cbModelParam._m0[1u].y;
    }
    float _1681 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _565);
    float _1682 = isnan(_1681) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1681 : min(cbModelParam._m0[25u].w, _1681));
    float _1772;
    float _1774;
    float _1776;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1736 = fma(_814, cbModelParam._m0[21u].z, fma(_810, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _806)) + cbModelParam._m0[21u].w;
        float _1740 = fma(_814, cbModelParam._m0[22u].z, fma(_810, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _806)) + cbModelParam._m0[22u].w;
        float _1744 = fma(_814, cbModelParam._m0[23u].z, fma(_810, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _806)) + cbModelParam._m0[23u].w;
        float _1747 = fma(_752, cbModelParam._m0[21u].z, fma(_751, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _750));
        float _1750 = fma(_752, cbModelParam._m0[22u].z, fma(_751, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _750));
        float _1753 = fma(_752, cbModelParam._m0[23u].z, fma(_751, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _750));
        float _1915;
        if (_1747 > 0.0)
        {
            _1915 = abs((1.0 - _1736) / _1747);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1747 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1736 + 1.0) / _1747);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1915 = frontier_phi_28_24_ladder;
        }
        float _2194;
        if (_1750 > 0.0)
        {
            _2194 = abs((1.0 - _1740) / _1750);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1750 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1740 + 1.0) / _1750);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2194 = frontier_phi_40_35_ladder;
        }
        float _2407;
        if (_1753 > 0.0)
        {
            _2407 = abs((1.0 - _1744) / _1753);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1753 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1744 + 1.0) / _1753);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2407 = frontier_phi_49_46_ladder;
        }
        float _2409 = isnan(_2194) ? _1915 : (isnan(_1915) ? _2194 : min(_1915, _2194));
        float _2410 = isnan(_2407) ? _2409 : (isnan(_2409) ? _2407 : min(_2409, _2407));
        float _2414 = (_2410 * _1747) + _1736;
        float _2415 = (_2410 * _1750) + _1740;
        float _2416 = (_2410 * _1753) + _1744;
        float _2417 = _2410 * 9.9999997473787516355514526367188e-05;
        float _2418 = (-1.0) - _2417;
        float _2420 = _2417 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2416 > _2420) || ((_2416 < _2418) || ((_2415 > _2420) || ((_2415 < _2418) || ((_2414 < _2418) || (_2414 > _2420))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2615 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2416, cbModelParam._m0[17u].z, fma(_2415, cbModelParam._m0[17u].y, _2414 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2416, cbModelParam._m0[18u].z, fma(_2415, cbModelParam._m0[18u].y, _2414 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2416, cbModelParam._m0[19u].z, fma(_2415, cbModelParam._m0[19u].y, _2414 * cbModelParam._m0[19u].x))), _1682);
            frontier_phi_25_49_ladder = _2615.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2615.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2615.x * cbModelParam._m0[1u].z;
        }
        _1772 = frontier_phi_25_49_ladder_2;
        _1774 = frontier_phi_25_49_ladder_1;
        _1776 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1756 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_750, _751, _752), _1682);
        _1772 = _1756.x * cbModelParam._m0[1u].z;
        _1774 = _1756.y * cbModelParam._m0[1u].z;
        _1776 = _1756.z * cbModelParam._m0[1u].z;
    }
    float _1789 = (((_777 * _726) + _778) * _742) * ((cbModelParam._m0[1u].w * (_1772 - _1673)) + _1673);
    float _1791 = (((_777 * _728) + _778) * _742) * ((cbModelParam._m0[1u].w * (_1774 - _1675)) + _1675);
    float _1793 = (((_777 * _729) + _778) * _742) * ((cbModelParam._m0[1u].w * (_1776 - _1677)) + _1677);
    float _1796 = fma(_1793, cbSceneParam._m0[89u].z, fma(_1791, cbSceneParam._m0[89u].y, _1789 * cbSceneParam._m0[89u].x));
    float _1799 = fma(_1793, cbSceneParam._m0[90u].z, fma(_1791, cbSceneParam._m0[90u].y, _1789 * cbSceneParam._m0[90u].x));
    float _1802 = fma(_1793, cbSceneParam._m0[91u].z, fma(_1791, cbSceneParam._m0[91u].y, _1789 * cbSceneParam._m0[91u].x));
    vec4 _1810 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_662, _663));
    float _1812 = _1810.w;
    float _1824 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1812);
    float _1825 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1812);
    float _1826 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1812);
    uvec4 _1830 = floatBitsToUint(cbInstanceData._m0[_241 + 5u]);
    uint _1832 = _1830.x * 14u;
    uint _1833 = _1832 + 13u;
    float _1840 = _742 + (-1.0);
    float _1845 = (cbLight._m0[_1833].x * _1840) + 1.0;
    float _1846 = (cbLight._m0[_1833].y * _1840) + 1.0;
    float _1847 = (cbLight._m0[_1833].z * _1840) + 1.0;
    float _1848 = (cbLight._m0[_1833].w * _1840) + 1.0;
    uint _1849 = _1832 + 5u;
    float _1855 = isnan(1.0) ? _1846 : (isnan(_1846) ? 1.0 : min(_1846, 1.0));
    uint _1859 = _1832 + 4u;
    float _1869 = isnan(1.0) ? _1845 : (isnan(_1845) ? 1.0 : min(_1845, 1.0));
    uint _1873 = _1832 | 1u;
    float _1884 = dot(vec3(cbLight._m0[_1832].xyz), vec3(_562, _563, _564));
    float _1887 = dot(vec3(cbLight._m0[_1873].xyz), vec3(_562, _563, _564));
    float _4129 = isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0));
    float _4140 = isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0));
    float _1892 = (isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0))) * 0.3183098733425140380859375;
    float _1894 = (isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0))) * 0.3183098733425140380859375;
    float _1901 = ((cbLight._m0[_1849].x * _1855) * _1894) + (((cbLight._m0[_1859].x * _1824) * _1869) * _1892);
    float _1902 = ((_1855 * cbLight._m0[_1849].y) * _1894) + (((cbLight._m0[_1859].y * _1825) * _1869) * _1892);
    float _1903 = ((_1855 * cbLight._m0[_1849].z) * _1894) + (((cbLight._m0[_1859].z * _1826) * _1869) * _1892);
    uvec4 _1907 = floatBitsToUint(cbLight._m0[_1832 + 12u]);
    bool _1909 = _1907.x == 0u;
    float _1920;
    float _1922;
    float _1924;
    if (_1909)
    {
        _1920 = _1901;
        _1922 = _1902;
        _1924 = _1903;
    }
    else
    {
        uint _1928 = _1832 + 6u;
        float _1944 = (dot(vec3(cbLight._m0[_1832 + 2u].xyz), vec3(_562, _563, _564)) * 0.5) + 0.5;
        float _1945 = _1944 * _1944;
        float _4151 = isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0));
        float _1946 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
        float _1947 = isnan(1.0) ? _1847 : (isnan(_1847) ? 1.0 : min(_1847, 1.0));
        _1920 = (((cbLight._m0[_1928].x * 0.3183098733425140380859375) * _1946) * _1947) + _1901;
        _1922 = (((cbLight._m0[_1928].y * 0.3183098733425140380859375) * _1946) * _1947) + _1902;
        _1924 = (((cbLight._m0[_1928].z * 0.3183098733425140380859375) * _1946) * _1947) + _1903;
    }
    bool _1927 = _1907.y == 0u;
    float _1965;
    float _1967;
    float _1969;
    if (_1927)
    {
        _1965 = _1920;
        _1967 = _1922;
        _1969 = _1924;
    }
    else
    {
        uint _2138 = _1832 + 7u;
        float _2154 = (dot(vec3(cbLight._m0[_1832 + 3u].xyz), vec3(_562, _563, _564)) * 0.5) + 0.5;
        float _2155 = _2154 * _2154;
        float _4167 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
        float _2156 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
        float _2157 = isnan(1.0) ? _1848 : (isnan(_1848) ? 1.0 : min(_1848, 1.0));
        _1965 = (((cbLight._m0[_2138].x * 0.3183098733425140380859375) * _2156) * _2157) + _1920;
        _1967 = (((cbLight._m0[_2138].y * 0.3183098733425140380859375) * _2156) * _2157) + _1922;
        _1969 = (((cbLight._m0[_2138].z * 0.3183098733425140380859375) * _2156) * _2157) + _1924;
    }
    uint _1972 = _1832 + 8u;
    float _1985 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1832].w)) * _565) * 0.949999988079071044921875);
    float _1986 = _1985 * _1985;
    float _1987 = cbLight._m0[_1832].x + _641;
    float _1988 = cbLight._m0[_1832].y + _642;
    float _1989 = cbLight._m0[_1832].z + _643;
    float _1993 = inversesqrt(dot(vec3(_1987, _1988, _1989), vec3(_1987, _1988, _1989)));
    float _1994 = _1993 * _1987;
    float _1995 = _1993 * _1988;
    float _1996 = _1993 * _1989;
    float _1997 = dot(vec3(_562, _563, _564), vec3(cbLight._m0[_1832].xyz));
    float _4183 = isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0));
    float _2000 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
    float _4194 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _2001 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
    float _2002 = dot(vec3(_562, _563, _564), vec3(_1994, _1995, _1996));
    float _4205 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0));
    float _2005 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
    float _2006 = dot(vec3(cbLight._m0[_1832].xyz), vec3(_1994, _1995, _1996));
    float _4216 = isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0));
    float _2010 = _1986 * _1986;
    float _2014 = ((_2005 * _2005) * (_2010 + (-1.0))) + 1.0;
    float _2022 = exp2(log2(1.0 - (isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0)))) * 5.0);
    float _2023 = 0.959999978542327880859375 - _723;
    float _2025 = 0.959999978542327880859375 - _724;
    float _2026 = 0.959999978542327880859375 - _725;
    float _2033 = 1.0 - _1986;
    float _2044 = (0.5 / (((_2001 * ((_2000 * _2033) + _1986)) + 9.9999999392252902907785028219223e-09) + (((_2001 * _2033) + _1986) * _2000))) * _2000;
    float _4227 = isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0));
    float _2046 = (isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0))) * (_2010 / ((_2014 * _2014) * 3.141590118408203125));
    uint _2060 = _1832 + 9u;
    float _2071 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1873].w)) * _565) * 0.949999988079071044921875);
    float _2072 = _2071 * _2071;
    float _2073 = cbLight._m0[_1873].x + _641;
    float _2074 = cbLight._m0[_1873].y + _642;
    float _2075 = cbLight._m0[_1873].z + _643;
    float _2079 = inversesqrt(dot(vec3(_2073, _2074, _2075), vec3(_2073, _2074, _2075)));
    float _2080 = _2079 * _2073;
    float _2081 = _2079 * _2074;
    float _2082 = _2079 * _2075;
    float _2083 = dot(vec3(_562, _563, _564), vec3(cbLight._m0[_1873].xyz));
    float _4238 = isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0));
    float _2086 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
    float _2087 = dot(vec3(_562, _563, _564), vec3(_2080, _2081, _2082));
    float _4249 = isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0));
    float _2090 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
    float _2091 = dot(vec3(cbLight._m0[_1873].xyz), vec3(_2080, _2081, _2082));
    float _4260 = isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0));
    float _2095 = _2072 * _2072;
    float _2099 = ((_2090 * _2090) * (_2095 + (-1.0))) + 1.0;
    float _2106 = exp2(log2(1.0 - (isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0)))) * 5.0);
    float _2113 = 1.0 - _2072;
    float _2123 = (0.5 / (((_2001 * ((_2086 * _2113) + _2072)) + 9.9999999392252902907785028219223e-09) + (((_2001 * _2113) + _2072) * _2086))) * _2086;
    float _4271 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
    float _2125 = (isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0))) * (_2095 / ((_2099 * _2099) * 3.141590118408203125));
    float _2135 = (((((_2106 * _2023) + _726) * cbLight._m0[_2060].x) * _2125) * _1855) + ((((cbLight._m0[_1972].x * _1824) * ((_2022 * _2023) + _726)) * _2046) * _1869);
    float _2136 = (((((_2106 * _2025) + _728) * cbLight._m0[_2060].y) * _2125) * _1855) + ((((cbLight._m0[_1972].y * _1825) * ((_2022 * _2025) + _728)) * _2046) * _1869);
    float _2137 = (((((_2106 * _2026) + _729) * cbLight._m0[_2060].z) * _2125) * _1855) + ((((cbLight._m0[_1972].z * _1826) * ((_2022 * _2026) + _729)) * _2046) * _1869);
    float _2199;
    float _2201;
    float _2203;
    if (_1909)
    {
        _2199 = _2135;
        _2201 = _2136;
        _2203 = _2137;
    }
    else
    {
        uint _2205 = _1832 + 2u;
        uint _2209 = _1832 + 10u;
        float _2223 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2205].w)) * _565) * 0.949999988079071044921875);
        float _2224 = _2223 * _2223;
        float _2225 = cbLight._m0[_2205].x + _641;
        float _2226 = cbLight._m0[_2205].y + _642;
        float _2227 = cbLight._m0[_2205].z + _643;
        float _2231 = inversesqrt(dot(vec3(_2225, _2226, _2227), vec3(_2225, _2226, _2227)));
        float _2232 = _2231 * _2225;
        float _2233 = _2231 * _2226;
        float _2234 = _2231 * _2227;
        float _2235 = dot(vec3(_562, _563, _564), vec3(cbLight._m0[_2205].xyz));
        float _4282 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
        float _2238 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
        float _2239 = dot(vec3(_562, _563, _564), vec3(_2232, _2233, _2234));
        float _4293 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
        float _2242 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
        float _2243 = dot(vec3(cbLight._m0[_2205].xyz), vec3(_2232, _2233, _2234));
        float _4304 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
        float _2247 = _2224 * _2224;
        float _2251 = ((_2242 * _2242) * (_2247 + (-1.0))) + 1.0;
        float _2258 = exp2(log2(1.0 - (isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0)))) * 5.0);
        float _2265 = 1.0 - _2224;
        float _2275 = (0.5 / (((_2001 * ((_2238 * _2265) + _2224)) + 9.9999999392252902907785028219223e-09) + (((_2001 * _2265) + _2224) * _2238))) * _2238;
        float _4315 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
        float _2277 = (isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0))) * (_2247 / ((_2251 * _2251) * 3.141590118408203125));
        float _2278 = isnan(1.0) ? _1847 : (isnan(_1847) ? 1.0 : min(_1847, 1.0));
        _2199 = (((((_2258 * _2023) + _726) * cbLight._m0[_2209].x) * _2277) * _2278) + _2135;
        _2201 = (((((_2258 * _2025) + _728) * cbLight._m0[_2209].y) * _2277) * _2278) + _2136;
        _2203 = (((((_2258 * _2026) + _729) * cbLight._m0[_2209].z) * _2277) * _2278) + _2137;
    }
    float _2313;
    float _2315;
    float _2317;
    if (_1927)
    {
        _2313 = _2199;
        _2315 = _2201;
        _2317 = _2203;
    }
    else
    {
        uint _2324 = _1832 + 3u;
        uint _2328 = _1832 + 11u;
        float _2342 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2324].w)) * _565) * 0.949999988079071044921875);
        float _2343 = _2342 * _2342;
        float _2344 = cbLight._m0[_2324].x + _641;
        float _2345 = cbLight._m0[_2324].y + _642;
        float _2346 = cbLight._m0[_2324].z + _643;
        float _2350 = inversesqrt(dot(vec3(_2344, _2345, _2346), vec3(_2344, _2345, _2346)));
        float _2351 = _2350 * _2344;
        float _2352 = _2350 * _2345;
        float _2353 = _2350 * _2346;
        float _2354 = dot(vec3(_562, _563, _564), vec3(cbLight._m0[_2324].xyz));
        float _4331 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
        float _2357 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
        float _2358 = dot(vec3(_562, _563, _564), vec3(_2351, _2352, _2353));
        float _4342 = isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : max(_2358, 0.0));
        float _2361 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
        float _2362 = dot(vec3(cbLight._m0[_2324].xyz), vec3(_2351, _2352, _2353));
        float _4353 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
        float _2366 = _2343 * _2343;
        float _2370 = ((_2361 * _2361) * (_2366 + (-1.0))) + 1.0;
        float _2377 = exp2(log2(1.0 - (isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0)))) * 5.0);
        float _2384 = 1.0 - _2343;
        float _2394 = (0.5 / (((_2001 * ((_2357 * _2384) + _2343)) + 9.9999999392252902907785028219223e-09) + (((_2001 * _2384) + _2343) * _2357))) * _2357;
        float _4364 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
        float _2396 = (isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0))) * (_2366 / ((_2370 * _2370) * 3.141590118408203125));
        float _2397 = isnan(1.0) ? _1848 : (isnan(_1848) ? 1.0 : min(_1848, 1.0));
        _2313 = (((((_2377 * _2023) + _726) * cbLight._m0[_2328].x) * _2396) * _2397) + _2199;
        _2315 = (((((_2377 * _2025) + _728) * cbLight._m0[_2328].y) * _2396) * _2397) + _2201;
        _2317 = (((((_2377 * _2026) + _729) * cbLight._m0[_2328].z) * _2396) * _2397) + _2203;
    }
    float _2532;
    float _2534;
    float _2536;
    float _2538;
    float _2540;
    float _2542;
    if (_1830.y == 0u)
    {
        float _2472 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2473 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2472;
        float _2474 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2472;
        float _2475 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2472;
        uvec4 _2487 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2488 = _2487.x;
        uint _2499 = uint((float(_2487.y) * floor(float(uint(cbSceneParam._m0[85u].y * _663) / _2488))) + floor(float(uint(cbSceneParam._m0[85u].x * _662) / _2488)));
        float _2509 = (log2(_2475 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2510 = isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0));
        uint _2513 = uint(isnan(14.0) ? _2510 : (isnan(_2510) ? 14.0 : min(_2510, 14.0)));
        uvec4 _2518 = texelFetch(g_lightClusterGridBuffer, int(((_2513 << 2u) + (_2499 << 6u)) >> 2u));
        uint _2519 = _2518.x;
        uint _2520 = _2487.z;
        float _2620;
        float _2622;
        float _2624;
        float _2626;
        float _2628;
        float _2630;
        if (((((1u << ((_2520 >> 4u) & 15u)) + 4294967295u) & _2519) == 0u) || ((_2520 & 240u) == 0u))
        {
            _2620 = 0.0;
            _2622 = 0.0;
            _2624 = 0.0;
            _2626 = 0.0;
            _2628 = 0.0;
            _2630 = 0.0;
        }
        else
        {
            float _2621;
            float _2623;
            float _2625;
            float _2627;
            float _2629;
            float _2631;
            float _2773 = 0.0;
            float _2774 = 0.0;
            float _2775 = 0.0;
            float _2776 = 0.0;
            float _2777 = 0.0;
            float _2778 = 0.0;
            uint _2779 = 0u;
            uint _2788;
            bool _2789;
            for (;;)
            {
                _2788 = texelFetch(g_lightClassification, int((((_2513 << 5u) + (_2499 << 9u)) + (_2779 << 2u)) >> 2u)).x;
                _2789 = _2788 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2789)
                {
                    frontier_phi_66_pred = _2773;
                    frontier_phi_66_pred_1 = _2778;
                    frontier_phi_66_pred_2 = _2777;
                    frontier_phi_66_pred_3 = _2776;
                    frontier_phi_66_pred_4 = _2775;
                    frontier_phi_66_pred_5 = _2774;
                }
                else
                {
                    float _2918;
                    float _2919;
                    float _2920;
                    float _2921;
                    float _2922;
                    float _2923;
                    uint _2924;
                    _2918 = _2773;
                    _2919 = _2774;
                    _2920 = _2775;
                    _2921 = _2776;
                    _2922 = _2777;
                    _2923 = _2778;
                    _2924 = _2788;
                    float _2845;
                    float _2846;
                    float _2847;
                    float _2848;
                    float _2849;
                    float _2850;
                    for (;;)
                    {
                        uint _2928 = uint(findLSB(_2924)) + (_2779 << 5u);
                        uint _2925 = (_2924 + 4294967295u) & _2924;
                        uint _2930 = _2928 * 48u;
                        vec4 _2944 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2930)).x, texelFetch(g_PointLightRenderingBuffer, int(_2930 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2930 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2930 + 3u)).x));
                        uint _2950 = (_2928 * 48u) + 4u;
                        vec4 _2963 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2950)).x, texelFetch(g_PointLightRenderingBuffer, int(_2950 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2950 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2950 + 3u)).x));
                        uint _2969 = (_2928 * 48u) + 8u;
                        vec3 _2980 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2969)).x, texelFetch(g_PointLightRenderingBuffer, int(_2969 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2969 + 2u)).x));
                        float _2984 = _2944.x - _2473;
                        float _2985 = _2944.y - _2474;
                        float _2986 = _2944.z - _2475;
                        float _2987 = dot(vec3(_2984, _2985, _2986), vec3(_2984, _2985, _2986));
                        float _2990 = inversesqrt(_2987);
                        float _2991 = _2990 * _2984;
                        float _2992 = _2990 * _2985;
                        float _2993 = _2990 * _2986;
                        float _2994 = dot(vec3(_683, _686, _689), vec3(_2991, _2992, _2993));
                        float _2999 = 1.0 - (_2987 * _2944.w);
                        float _4390 = isnan(0.0) ? _2999 : (isnan(_2999) ? 0.0 : max(_2999, 0.0));
                        float _3000 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
                        float _3001 = sqrt(_2987) * _2963.w;
                        float _3004 = 1.39999997615814208984375 / (_3001 + 1.39999997615814208984375);
                        float _3005 = _3004 * _3004;
                        float _3008 = ((1.0 - _3005) * _2994) + _3005;
                        float _3011 = _3001 * _3001;
                        float _3015 = ((isnan(0.0) ? _3008 : (isnan(_3008) ? 0.0 : max(_3008, 0.0))) * _3000) / ((_3011 * 0.699999988079071044921875) + 1.0);
                        float _3019 = (-0.0) - _2473;
                        float _3020 = (-0.0) - _2474;
                        float _3021 = (-0.0) - _2475;
                        float _3025 = inversesqrt(dot(vec3(_3019, _3020, _3021), vec3(_3019, _3020, _3021)));
                        float _3026 = _3025 * _3019;
                        float _3027 = _3025 * _3020;
                        float _3028 = _3025 * _3021;
                        float _3036 = exp2(log2(1.0 / ((_3011 * 3.5) + 5.0)) * 0.25);
                        float _3037 = 1.0 - _758;
                        float _3044 = sqrt(1.0 - ((1.0 - (_3037 * _3037)) * (1.0 - (_3036 * _3036))));
                        float _3045 = _3044 * _3044;
                        float _3046 = _3045 * _3045;
                        float _3047 = _3026 + _2991;
                        float _3048 = _3027 + _2992;
                        float _3049 = _3028 + _2993;
                        float _3053 = inversesqrt(dot(vec3(_3047, _3048, _3049), vec3(_3047, _3048, _3049)));
                        float _3057 = dot(vec3(_683, _686, _689), vec3(_3026, _3027, _3028));
                        float _4406 = isnan(0.0) ? _3057 : (isnan(_3057) ? 0.0 : max(_3057, 0.0));
                        float _3060 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
                        float _3061 = dot(vec3(_683, _686, _689), vec3(_3053 * _3047, _3053 * _3048, _3053 * _3049));
                        float _4417 = isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : max(_3061, 0.0));
                        float _3064 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
                        float _3068 = ((_3064 * _3064) * (_3046 + (-1.0))) + 1.0;
                        float _3069 = _3004 * _3045;
                        float _3070 = _3069 * _3069;
                        float _3073 = ((1.0 - _3070) * _2994) + _3070;
                        float _4428 = isnan(0.0) ? _3073 : (isnan(_3073) ? 0.0 : max(_3073, 0.0));
                        float _3074 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
                        float _3075 = 1.0 - _3045;
                        float _3085 = (0.5 / (((_3074 * ((_3060 * _3075) + _3045)) + 9.9999999392252902907785028219223e-09) + (((_3074 * _3075) + _3045) * _3060))) * _3074;
                        float _4439 = isnan(0.0) ? _3085 : (isnan(_3085) ? 0.0 : max(_3085, 0.0));
                        float _3096 = (((_3046 * 3.1415927410125732421875) * (isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0)))) / ((_3068 * _3068) * ((_3011 * 2.1991131305694580078125) + 3.141590118408203125))) * _3000;
                        _2848 = (_3015 * _2963.x) + _2921;
                        _2849 = (_3015 * _2963.y) + _2922;
                        _2850 = (_3015 * _2963.z) + _2923;
                        _2845 = (_3096 * _2980.x) + _2918;
                        _2846 = (_3096 * _2980.y) + _2919;
                        _2847 = (_3096 * _2980.z) + _2920;
                        if (_2925 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2918 = _2845;
                            _2919 = _2846;
                            _2920 = _2847;
                            _2921 = _2848;
                            _2922 = _2849;
                            _2923 = _2850;
                            _2924 = _2925;
                        }
                    }
                    frontier_phi_66_pred = _2845;
                    frontier_phi_66_pred_1 = _2850;
                    frontier_phi_66_pred_2 = _2849;
                    frontier_phi_66_pred_3 = _2848;
                    frontier_phi_66_pred_4 = _2847;
                    frontier_phi_66_pred_5 = _2846;
                }
                _2621 = frontier_phi_66_pred;
                _2631 = frontier_phi_66_pred_1;
                _2629 = frontier_phi_66_pred_2;
                _2627 = frontier_phi_66_pred_3;
                _2625 = frontier_phi_66_pred_4;
                _2623 = frontier_phi_66_pred_5;
                uint _2780 = _2779 + 1u;
                if (_2780 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2773 = _2621;
                    _2774 = _2623;
                    _2775 = _2625;
                    _2776 = _2627;
                    _2777 = _2629;
                    _2778 = _2631;
                    _2779 = _2780;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2620 = _2621;
            _2622 = _2623;
            _2624 = _2625;
            _2626 = _2627;
            _2628 = _2629;
            _2630 = _2631;
        }
        uvec4 _2634 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2635 = _2634.z;
        uint _2637 = (_2635 >> 8u) & 15u;
        float _2741;
        float _2743;
        float _2745;
        float _2747;
        float _2749;
        float _2751;
        if (((4294967295u << _2637) & _2519) == 0u)
        {
            _2741 = _2620;
            _2743 = _2622;
            _2745 = _2624;
            _2747 = _2626;
            _2749 = _2628;
            _2751 = _2630;
        }
        else
        {
            float _2766 = inversesqrt(dot(vec3(_2473, _2474, _2475), vec3(_2473, _2474, _2475)));
            float _2767 = _2766 * _2473;
            float _2768 = _2766 * _2474;
            float _2769 = _2766 * _2475;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2637 < ((_2635 >> 12u) & 15u))
            {
                float _2742;
                float _2744;
                float _2746;
                float _2748;
                float _2750;
                float _2752;
                float _2901 = _2620;
                float _2902 = _2622;
                float _2903 = _2624;
                float _2904 = _2626;
                float _2905 = _2628;
                float _2906 = _2630;
                uint _2907 = _2637;
                uint _2916;
                bool _2917;
                for (;;)
                {
                    _2916 = texelFetch(g_lightClassification, int((((_2513 << 5u) + (_2499 << 9u)) + (_2907 << 2u)) >> 2u)).x;
                    _2917 = _2916 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2917)
                    {
                        frontier_phi_77_pred = _2906;
                        frontier_phi_77_pred_1 = _2905;
                        frontier_phi_77_pred_2 = _2904;
                        frontier_phi_77_pred_3 = _2903;
                        frontier_phi_77_pred_4 = _2902;
                        frontier_phi_77_pred_5 = _2901;
                    }
                    else
                    {
                        float _3110;
                        float _3111;
                        float _3112;
                        float _3113;
                        float _3114;
                        float _3115;
                        float _3405;
                        float _3406;
                        float _3407;
                        float _3408;
                        float _3409;
                        float _3410;
                        float _3123 = _2901;
                        float _3124 = _2902;
                        float _3125 = _2903;
                        float _3126 = _2904;
                        float _3127 = _2905;
                        float _3128 = _2906;
                        uint _3129 = _2916;
                        uint _3130;
                        vec4 _3155;
                        float _3156;
                        vec4 _3171;
                        vec3 _3183;
                        vec4 _3199;
                        vec4 _3215;
                        float _3261;
                        bool _3262;
                        for (;;)
                        {
                            uint _3140 = ((_2907 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3129));
                            _3130 = (_3129 + 4294967295u) & _3129;
                            uint _3142 = _3140 * 40u;
                            _3155 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3142)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3142 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3142 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3142 + 3u)).x));
                            _3156 = _3155.w;
                            uint _3158 = (_3140 * 40u) + 4u;
                            _3171 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3158)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 3u)).x));
                            uint _3173 = (_3140 * 40u) + 8u;
                            _3183 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3173)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 2u)).x));
                            uint _3186 = (_3140 * 40u) + 16u;
                            _3199 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3186)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 3u)).x));
                            uint _3202 = (_3140 * 40u) + 20u;
                            _3215 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3202)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 3u)).x));
                            uint _3217 = (_3140 * 40u) + 24u;
                            vec4 _3230 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3217)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 3u)).x));
                            uint _3236 = (_3140 * 40u) + 28u;
                            vec4 _3249 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3236)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3236 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3236 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3236 + 3u)).x));
                            _3261 = fma(_2475, _3249.z, fma(_2474, _3249.y, _3249.x * _2473)) + _3249.w;
                            _3262 = !((fma(_2475, _3230.z, fma(_2474, _3230.y, _3230.x * _2473)) + _3230.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3262)
                            {
                                float _3289 = _3155.x - _2473;
                                float _3290 = _3155.y - _2474;
                                float _3291 = _3155.z - _2475;
                                float _3292 = dot(vec3(_3289, _3290, _3291), vec3(_3289, _3290, _3291));
                                float _3295 = inversesqrt(_3292);
                                float _3296 = _3295 * _3289;
                                float _3297 = _3295 * _3290;
                                float _3298 = _3295 * _3291;
                                float _3302 = 1.0 - (_3292 / (_3156 * _3156));
                                float _4450 = isnan(0.0) ? _3302 : (isnan(_3302) ? 0.0 : max(_3302, 0.0));
                                float _3303 = isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0));
                                float _3307 = sqrt(_3292) * _3171.w;
                                float _3309 = 1.39999997615814208984375 / (_3307 + 1.39999997615814208984375);
                                float _3310 = _3309 * _3309;
                                float _3313 = ((1.0 - _3310) * dot(vec3(_3296, _3297, _3298), vec3(_683, _686, _689))) + _3310;
                                float _3316 = _3307 * _3307;
                                float _3320 = (fma(_2475, _3199.z, fma(_2474, _3199.y, _3199.x * _2473)) + _3199.w) / _3261;
                                float _3321 = (fma(_2475, _3215.z, fma(_2474, _3215.y, _3215.x * _2473)) + _3215.w) / _3261;
                                float _3325 = 1.0 - dot(vec2(_3320, _3321), vec2(_3320, _3321));
                                float _4466 = isnan(0.0) ? _3325 : (isnan(_3325) ? 0.0 : max(_3325, 0.0));
                                float _3326 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
                                float _3327 = _3326 * (((isnan(0.0) ? _3313 : (isnan(_3313) ? 0.0 : max(_3313, 0.0))) * _3303) / ((_3316 * 0.699999988079071044921875) + 1.0));
                                float _3339 = exp2(log2(1.0 / ((_3316 * 3.5) + 5.0)) * 0.25);
                                float _3340 = 1.0 - _758;
                                float _3347 = sqrt(1.0 - ((1.0 - (_3340 * _3340)) * (1.0 - (_3339 * _3339))));
                                float _3348 = _3347 * _3347;
                                float _3349 = _3348 * _3348;
                                float _3350 = _3296 - _2767;
                                float _3351 = _3297 - _2768;
                                float _3352 = _3298 - _2769;
                                float _3356 = inversesqrt(dot(vec3(_3350, _3351, _3352), vec3(_3350, _3351, _3352)));
                                float _3360 = dot(vec3(_683, _686, _689), vec3((-0.0) - _2767, (-0.0) - _2768, (-0.0) - _2769));
                                float _4477 = isnan(0.0) ? _3360 : (isnan(_3360) ? 0.0 : max(_3360, 0.0));
                                float _3363 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
                                float _3364 = dot(vec3(_683, _686, _689), vec3(_3356 * _3350, _3356 * _3351, _3356 * _3352));
                                float _4488 = isnan(0.0) ? _3364 : (isnan(_3364) ? 0.0 : max(_3364, 0.0));
                                float _3367 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
                                float _3371 = ((_3367 * _3367) * (_3349 + (-1.0))) + 1.0;
                                float _3372 = _3309 * _3348;
                                float _3373 = _3372 * _3372;
                                float _3379 = ((1.0 - _3373) * dot(vec3(_683, _686, _689), vec3(_3296, _3297, _3298))) + _3373;
                                float _4499 = isnan(0.0) ? _3379 : (isnan(_3379) ? 0.0 : max(_3379, 0.0));
                                float _3380 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
                                float _3381 = 1.0 - _3348;
                                float _3391 = (0.5 / (((_3380 * ((_3363 * _3381) + _3348)) + 9.9999999392252902907785028219223e-09) + (((_3380 * _3381) + _3348) * _3363))) * _3380;
                                float _4510 = isnan(0.0) ? _3391 : (isnan(_3391) ? 0.0 : max(_3391, 0.0));
                                float _3401 = (_3326 * _3303) * (((_3349 * 3.1415927410125732421875) * (isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0)))) / ((_3371 * _3371) * ((_3316 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3327 * _3171.y;
                                frontier_phi_83_pred_1 = _3327 * _3171.x;
                                frontier_phi_83_pred_2 = _3401 * _3183.z;
                                frontier_phi_83_pred_3 = _3401 * _3183.y;
                                frontier_phi_83_pred_4 = _3401 * _3183.x;
                                frontier_phi_83_pred_5 = _3327 * _3171.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3409 = frontier_phi_83_pred;
                            _3408 = frontier_phi_83_pred_1;
                            _3407 = frontier_phi_83_pred_2;
                            _3406 = frontier_phi_83_pred_3;
                            _3405 = frontier_phi_83_pred_4;
                            _3410 = frontier_phi_83_pred_5;
                            _3113 = _3408 + _3126;
                            _3114 = _3409 + _3127;
                            _3115 = _3410 + _3128;
                            _3110 = _3405 + _3123;
                            _3111 = _3406 + _3124;
                            _3112 = _3407 + _3125;
                            if (_3130 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3123 = _3110;
                                _3124 = _3111;
                                _3125 = _3112;
                                _3126 = _3113;
                                _3127 = _3114;
                                _3128 = _3115;
                                _3129 = _3130;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3115;
                        frontier_phi_77_pred_1 = _3114;
                        frontier_phi_77_pred_2 = _3113;
                        frontier_phi_77_pred_3 = _3112;
                        frontier_phi_77_pred_4 = _3111;
                        frontier_phi_77_pred_5 = _3110;
                    }
                    _2752 = frontier_phi_77_pred;
                    _2750 = frontier_phi_77_pred_1;
                    _2748 = frontier_phi_77_pred_2;
                    _2746 = frontier_phi_77_pred_3;
                    _2744 = frontier_phi_77_pred_4;
                    _2742 = frontier_phi_77_pred_5;
                    uint _2908 = _2907 + 1u;
                    if (_2908 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2901 = _2742;
                        _2902 = _2744;
                        _2903 = _2746;
                        _2904 = _2748;
                        _2905 = _2750;
                        _2906 = _2752;
                        _2907 = _2908;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2746;
                frontier_phi_58_59_ladder_1 = _2752;
                frontier_phi_58_59_ladder_2 = _2750;
                frontier_phi_58_59_ladder_3 = _2748;
                frontier_phi_58_59_ladder_4 = _2744;
                frontier_phi_58_59_ladder_5 = _2742;
            }
            else
            {
                frontier_phi_58_59_ladder = _2624;
                frontier_phi_58_59_ladder_1 = _2630;
                frontier_phi_58_59_ladder_2 = _2628;
                frontier_phi_58_59_ladder_3 = _2626;
                frontier_phi_58_59_ladder_4 = _2622;
                frontier_phi_58_59_ladder_5 = _2620;
            }
            _2741 = frontier_phi_58_59_ladder_5;
            _2743 = frontier_phi_58_59_ladder_4;
            _2745 = frontier_phi_58_59_ladder;
            _2747 = frontier_phi_58_59_ladder_3;
            _2749 = frontier_phi_58_59_ladder_2;
            _2751 = frontier_phi_58_59_ladder_1;
        }
        float _2756 = isnan(1.0) ? _742 : (isnan(_742) ? 1.0 : min(_742, 1.0));
        _2532 = (_2756 * _2747) + _1965;
        _2534 = (_2756 * _2749) + _1967;
        _2536 = (_2756 * _2751) + _1969;
        _2538 = ((_2741 * _726) * _2756) + _2313;
        _2540 = ((_2743 * _728) * _2756) + _2315;
        _2542 = ((_2745 * _729) * _2756) + _2317;
    }
    else
    {
        _2532 = _1965;
        _2534 = _1967;
        _2536 = _1969;
        _2538 = _2313;
        _2540 = _2315;
        _2542 = _2317;
    }
    float _4526 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
    float _4537 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
    float _4548 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
    float _2559 = ((isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0))) * (_2532 + ((isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0))) * _742))) + ((_2538 + ((isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0))) * _1581)) * cbPerFrame._m0[3u].x);
    float _2560 = ((isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0))) * (_2534 + ((isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0))) * _742))) + ((_2540 + ((isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0))) * _1581)) * cbPerFrame._m0[3u].x);
    float _2561 = ((isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0))) * (_2536 + ((isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0))) * _742))) + ((_2542 + ((isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0))) * _1581)) * cbPerFrame._m0[3u].x);
    uint _2562 = _241 + 6u;
    float _2570 = _662 / cbSceneParam._m0[86u].x;
    float _2571 = _663 / cbSceneParam._m0[86u].y;
    vec4 _2585 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2570, _2571, (log2((isnan(cbSceneParam._m0[77u].w) ? _584 : (isnan(_584) ? cbSceneParam._m0[77u].w : min(_584, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2587 = _2585.x;
    float _2588 = _2585.y;
    float _2589 = _2585.z;
    float _2590 = _2585.w;
    float _2683;
    float _2685;
    float _2687;
    float _2689;
    if (_584 > cbSceneParam._m0[78u].w)
    {
        float _2645 = isnan(_584) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _584 : min(cbSceneParam._m0[80u].w, _584));
        float _2646 = _2645 / _584;
        float _2657 = _2646 * _634;
        float _2658 = _635 * _2646;
        float _2659 = (-0.0) - _2658;
        float _2661 = _2646 * _636;
        float _2663 = (cbSceneParam._m0[77u].w * _2659) / _2645;
        float _2664 = _2663 + cbSceneParam._m0[79u].w;
        float _2665 = cbSceneParam._m0[79u].w - _2658;
        float _2671 = sqrt(((_2657 * _2657) + (_2658 * _2658)) + (_2661 * _2661));
        float _2674 = (1.0 - (cbSceneParam._m0[77u].w / _2645)) * _2671;
        float _2679 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2681 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2858;
        if (abs((_2659 - _2663) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2858 = ((((_2664 > 0.0) ? exp2(_2679 * _2664) : (2.0 - exp2(_2681 * _2664))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2674;
        }
        else
        {
            float _2802 = 1.0 / cbSceneParam._m0[80u].x;
            float _2803 = isnan(_2665) ? _2664 : (isnan(_2664) ? _2665 : max(_2664, _2665));
            float _2804 = isnan(_2665) ? _2664 : (isnan(_2664) ? _2665 : min(_2664, _2665));
            float _2813 = isnan(0.0) ? _2803 : (isnan(_2803) ? 0.0 : min(_2803, 0.0));
            float _2814 = isnan(0.0) ? _2804 : (isnan(_2804) ? 0.0 : min(_2804, 0.0));
            _2858 = ((abs(_2671 / _2659) * cbSceneParam._m0[80u].y) * ((((_2813 - _2814) * 2.0) - ((exp2(_2679 * (isnan(0.0) ? _2803 : (isnan(_2803) ? 0.0 : max(_2803, 0.0)))) - exp2(_2679 * (isnan(0.0) ? _2804 : (isnan(_2804) ? 0.0 : max(_2804, 0.0))))) * _2802)) - ((exp2(_2681 * _2813) - exp2(_2681 * _2814)) * _2802))) + (_2674 * cbSceneParam._m0[80u].z);
        }
        vec4 _2860 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2570, _2571, 1.0), 0.0);
        float _2869 = exp2((_2858 * (-1.44269502162933349609375)) * (1.0 - _2860.w));
        float _2870 = log2(_2869);
        float _2886 = log2(_2590);
        _2683 = (exp2(_2886 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2870 * cbSceneParam._m0[78u].x)) * _2860.x) / cbSceneParam._m0[78u].x)) + _2587;
        _2685 = (exp2(_2886 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2870 * cbSceneParam._m0[78u].y)) * _2860.y) / cbSceneParam._m0[78u].y)) + _2588;
        _2687 = (exp2(_2886 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2870 * cbSceneParam._m0[78u].z)) * _2860.z) / cbSceneParam._m0[78u].z)) + _2589;
        _2689 = _2869 * _2590;
    }
    else
    {
        _2683 = _2587;
        _2685 = _2588;
        _2687 = _2589;
        _2689 = _2590;
    }
    bool _2896;
    vec4 _2699;
    vec4 _2721;
    float _2723;
    float _2727;
    float _2728;
    float _2729;
    float _2730;
    bool _2740;
    for (;;)
    {
        _2699 = cbMatDynParam._m0[0u];
        float _2701 = roundEven(_2699.y);
        bool _2702 = _2701 == 3.0;
        float _2703 = log2(_2689);
        float _2710 = exp2(_2703 * cbSceneParam._m0[78u].x) * _2559;
        float _2711 = exp2(_2703 * cbSceneParam._m0[78u].y) * _2560;
        float _2712 = exp2(_2703 * cbSceneParam._m0[78u].z) * _2561;
        float _2719 = _650 + (-0.5);
        _2721 = cbMtdParam._m0[1u];
        _2723 = _2721.y * _2719;
        float _2726 = (_2701 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2727 = _2726 * (_2702 ? _2710 : (_2710 + (cbSceneParam._m0[72u].w * _2683)));
        _2728 = _2726 * (_2702 ? _2711 : (_2711 + (cbSceneParam._m0[72u].w * _2685)));
        _2729 = _2726 * (_2702 ? _2712 : (_2712 + (cbSceneParam._m0[72u].w * _2687)));
        _2730 = _2719 * 0.999000012874603271484375;
        _2740 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2740)
        {
            if ((cbInstanceData._m0[_241 + 7u].x + _2730) < 0.5)
            {
                _2896 = true;
                break;
            }
        }
        uint _2837 = _702 + uint(_2699.w);
        if ((cbInstanceData._m0[_2837].w < 1.0) && ((cbInstanceData._m0[_2837].w + _2730) < 0.5))
        {
            _2896 = true;
            break;
        }
        if ((_2723 + 1.0) < _2721.x)
        {
            _2896 = true;
            break;
        }
        _2896 = false;
        break;
    }
    float _3101;
    if (_2896)
    {
        discard_state = true;
        _3101 = 0.0;
    }
    else
    {
        _3101 = cbInstanceData._m0[_2562].w;
    }
    SV_Target.x = _2727;
    SV_Target.y = _2728;
    SV_Target.z = _2729;
    SV_Target.w = _3101;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2562].w;
    discard_exit();
}


