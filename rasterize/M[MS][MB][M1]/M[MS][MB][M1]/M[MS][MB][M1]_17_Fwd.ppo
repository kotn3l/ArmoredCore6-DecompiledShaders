#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1098;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _207 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _208 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _209 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _215 = inversesqrt(dot(vec3(_207, _208, _209), vec3(_207, _208, _209)));
    float _222 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _229 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _235 = uint(roundEven(NORMAL.w)) * 13u;
    uint _240 = _235 + 1u;
    uint _244 = _235 + 2u;
    float _253 = sqrt(((cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x) + (cbInstanceData._m0[_235].x * cbInstanceData._m0[_235].x)) + (cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x));
    float _254 = _253 * TEXCOORD.z;
    float _255 = _253 * TEXCOORD.w;
    vec4 _274 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _280 = _274.x * cbMtdParam._m0[9u].x;
    float _281 = _274.y * cbMtdParam._m0[9u].y;
    float _282 = _274.z * cbMtdParam._m0[9u].z;
    vec4 _300 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _304 = _300.z;
    float _309 = (_300.x * 2.0) + (-1.0);
    float _311 = (_300.y * 2.0) + (-1.0);
    float _312 = dot(vec2(_309, _311), vec2(_309, _311));
    float _3428 = isnan(0.0) ? _312 : (isnan(_312) ? 0.0 : max(_312, 0.0));
    float _318 = sqrt(1.0 - (isnan(1.0) ? _3428 : (isnan(_3428) ? 1.0 : min(_3428, 1.0))));
    vec4 _335 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _254) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _255) + cbTextureTilingScale._m0[11u].w));
    float _337 = _335.x;
    float _338 = 1.0 - _337;
    float _347 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _350 = ((isnan(0.0) ? _347 : (isnan(_347) ? 0.0 : min(_347, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _359 = (_350 - ((((((_337 - _338) * cbMtdParam._m0[24u].z) + _338) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _350))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3449 = isnan(0.0) ? _359 : (isnan(_359) ? 0.0 : max(_359, 0.0));
    float _360 = isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0));
    float _367 = (_360 * (cbMtdParam._m0[17u].x - _280)) + _280;
    float _368 = (_360 * (cbMtdParam._m0[17u].y - _281)) + _281;
    float _369 = (_360 * (cbMtdParam._m0[17u].z - _282)) + _282;
    vec4 _382 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _254) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _255) + cbTextureTilingScale._m0[19u].w));
    float _384 = _382.x;
    float _385 = 1.0 - _384;
    float _414 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_384 - _385) * cbMtdParam._m0[24u].w) + _385) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3460 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    float _415 = isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0));
    float _423 = ((((cbMtdParam._m0[10u].x - _367) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _415) + _367;
    float _424 = ((((cbMtdParam._m0[10u].y - _368) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _415) + _368;
    float _425 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _369)) * _415) + _369;
    vec4 _438 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _440 = _438.x;
    float _442 = _440 - (_440 * _360);
    float _444 = _442 - (_442 * _415);
    vec4 _458 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _254) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _255) + cbTextureTilingScale._m0[15u].w));
    float _465 = (_458.x * 2.0) + (-1.0);
    float _466 = (_458.y * 2.0) + (-1.0);
    float _467 = dot(vec2(_465, _466), vec2(_465, _466));
    float _3471 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _475 = (_360 * (_458.z - _304)) + _304;
    float _478 = ((cbMtdParam._m0[23u].y - _475) * _415) + _475;
    vec4 _500 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _254) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _255) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _506 = (_500.x * 2.0) + (-1.0);
    float _507 = (_500.y * 2.0) + (-1.0);
    float _508 = dot(vec2(_506, _507), vec2(_506, _507));
    float _3482 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _525 = (((_465 - _309) + (cbMtdParam._m0[21u].x * _309)) * _360) + _309;
    float _526 = (((_466 - _311) + (cbMtdParam._m0[21u].x * _311)) * _360) + _311;
    float _527 = (_360 * (sqrt(1.0 - (isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0)))) - _318)) + _318;
    float _538 = (((_506 - _525) + (_525 * cbMtdParam._m0[22u].z)) * _415) + _525;
    float _539 = (((_507 - _526) + (_526 * cbMtdParam._m0[22u].z)) * _415) + _526;
    float _540 = ((sqrt(1.0 - (isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0)))) - _527) * _415) + _527;
    float _542 = cbMtdParam._m0[22u].x + _300.w;
    float _545 = fma(_540, _222 * NORMAL.x, fma(_539, _229 * TANGENT.x, (_215 * _207) * _538));
    float _548 = fma(_540, _222 * NORMAL.y, fma(_539, _229 * TANGENT.y, (_215 * _208) * _538));
    float _551 = fma(_540, _222 * NORMAL.z, fma(_539, _229 * TANGENT.z, (_215 * _209) * _538));
    float _555 = inversesqrt(dot(vec3(_545, _548, _551), vec3(_545, _548, _551)));
    float _556 = _555 * _545;
    float _557 = _555 * _548;
    float _558 = _555 * _551;
    float _3493 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _559 = isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0));
    float _3504 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _3515 = isnan(0.0) ? _423 : (isnan(_423) ? 0.0 : max(_423, 0.0));
    float _3526 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _3537 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
    float _3548 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _564 = isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0));
    float _578 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _618 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _628 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _618);
    float _629 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _618);
    float _630 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _618);
    float _634 = inversesqrt(dot(vec3(_628, _629, _630), vec3(_628, _629, _630)));
    float _635 = _628 * _634;
    float _636 = _629 * _634;
    float _637 = _630 * _634;
    float _643 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _644 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _665 = fma(_558, cbSceneParam._m0[5u].z, fma(_557, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _556));
    float _668 = fma(_558, cbSceneParam._m0[6u].z, fma(_557, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _556));
    float _671 = fma(_558, cbSceneParam._m0[7u].z, fma(_557, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _556));
    uint _685 = (_235 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _691 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0)))) * cbInstanceData._m0[_685].x;
    float _692 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0)))) * cbInstanceData._m0[_685].y;
    float _693 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0)))) * cbInstanceData._m0[_685].z;
    float _3559 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _694 = isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0));
    float _3570 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
    float _695 = isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0));
    float _3581 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _696 = isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0));
    float _697 = 1.0 - _564;
    float _698 = _694 * _697;
    float _699 = _695 * _697;
    float _700 = _696 * _697;
    float _705 = (_694 + (-0.039999999105930328369140625)) * _564;
    float _706 = (_695 + (-0.039999999105930328369140625)) * _564;
    float _707 = (_696 + (-0.039999999105930328369140625)) * _564;
    float _708 = _705 + 0.039999999105930328369140625;
    float _710 = _706 + 0.039999999105930328369140625;
    float _711 = _707 + 0.039999999105930328369140625;
    vec4 _720 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _643, cbSceneParam._m0[86u].y * _644));
    float _724 = ((isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0))) * TEXCOORD_5.w) * _720.x;
    float _725 = dot(vec3(_556, _557, _558), vec3(_635, _636, _637));
    float _728 = _725 * 2.0;
    float _732 = (_728 * _556) - _635;
    float _733 = (_728 * _557) - _636;
    float _734 = (_728 * _558) - _637;
    float _738 = abs(dot(vec3(_635, _636, _637), vec3(_556, _557, _558)));
    float _3592 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
    float _740 = sqrt(_559);
    float _753 = exp2((_740 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_740 * 3.0));
    float _759 = (1.0 - _753) * ((_740 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _760 = _753 * _740;
    float _788 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _792 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _796 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1097;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    float _1107;
    float _1108;
    float _1109;
    float _1110;
    float _1111;
    float _1112;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _822 = fma(_796, cbModelParam._m0[26u].z, fma(_792, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _788));
        float _826 = fma(_796, cbModelParam._m0[27u].z, fma(_792, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _788));
        float _830 = fma(_796, cbModelParam._m0[28u].z, fma(_792, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _788));
        float _855 = _788 + _556;
        float _856 = _792 + _557;
        float _857 = _796 + _558;
        float _867 = fma(_857, cbModelParam._m0[26u].z, fma(_856, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _855)) - _822;
        float _868 = fma(_857, cbModelParam._m0[27u].z, fma(_856, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _855)) - _826;
        float _869 = fma(_857, cbModelParam._m0[28u].z, fma(_856, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _855)) - _830;
        float _873 = inversesqrt(dot(vec3(_867, _868, _869), vec3(_867, _868, _869)));
        float _886 = ((_873 * _867) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_822 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _887 = ((_873 * _868) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_826 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _888 = ((_873 * _869) / cbModelParam._m0[34u].z) + ((((((_830 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _891 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_886, _887, _888), 0.0);
        vec4 _898 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_886, _887, _888), 0.0);
        vec4 _905 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_886, _887, _888), 0.0);
        vec4 _912 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_886, _887, _888), 0.0);
        float _925 = exp2((_891.w + (-0.5)) * 20.0) * 2.0;
        float _926 = _925 * (_891.x + (-0.5));
        float _927 = _925 * (_891.y + (-0.5));
        float _928 = _925 * (_891.z + (-0.5));
        float _935 = exp2((_898.w + (-0.5)) * 20.0) * 2.0;
        float _936 = _935 * (_898.x + (-0.5));
        float _937 = _935 * (_898.y + (-0.5));
        float _938 = _935 * (_898.z + (-0.5));
        float _945 = exp2((_905.w + (-0.5)) * 20.0) * 2.0;
        float _946 = _945 * (_905.x + (-0.5));
        float _947 = _945 * (_905.y + (-0.5));
        float _948 = _945 * (_905.z + (-0.5));
        float _955 = exp2((_912.w + (-0.5)) * 20.0) * 2.0;
        float _956 = _955 * (_912.x + (-0.5));
        float _957 = _955 * (_912.y + (-0.5));
        float _958 = _955 * (_912.z + (-0.5));
        float _959 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
        float _960 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
        float _961 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
        float _962 = _926 * 0.5;
        float _963 = _936 * 0.5;
        float _964 = _946 * 0.5;
        float _965 = dot(vec3(_962, _963, _964), vec3(_962, _963, _964));
        float _970 = (_965 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_965);
        float _979 = (dot(vec3(_556, _557, _558), vec3(_970 * _962, _970 * _963, _970 * _964)) + 1.0) * 0.5;
        float _3618 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _989 = sqrt(((_963 * _963) + (_962 * _962)) + (_964 * _964)) / (_959 + 9.9999997473787516355514526367188e-06);
        float _3629 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _990 = isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0));
        float _991 = _990 * 2.0;
        float _995 = (1.0 - _990) / (_990 + 1.0);
        float _3640 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _996 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
        float _1005 = ((((1.0 - _996) * (_991 + 2.0)) * exp2(log2(isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0))) * (_991 + 1.0))) + _996) * _959;
        float _1006 = _927 * 0.5;
        float _1007 = _937 * 0.5;
        float _1008 = _947 * 0.5;
        float _1009 = dot(vec3(_1006, _1007, _1008), vec3(_1006, _1007, _1008));
        float _1014 = (_1009 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1009);
        float _1022 = (dot(vec3(_556, _557, _558), vec3(_1014 * _1006, _1014 * _1007, _1014 * _1008)) + 1.0) * 0.5;
        float _3651 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1031 = sqrt(((_1007 * _1007) + (_1006 * _1006)) + (_1008 * _1008)) / (_960 + 9.9999997473787516355514526367188e-06);
        float _3662 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1032 = isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0));
        float _1033 = _1032 * 2.0;
        float _1037 = (1.0 - _1032) / (_1032 + 1.0);
        float _3673 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1038 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
        float _1047 = ((((1.0 - _1038) * (_1033 + 2.0)) * exp2(log2(isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0))) * (_1033 + 1.0))) + _1038) * _960;
        float _1048 = _928 * 0.5;
        float _1049 = _938 * 0.5;
        float _1050 = _948 * 0.5;
        float _1051 = dot(vec3(_1048, _1049, _1050), vec3(_1048, _1049, _1050));
        float _1056 = (_1051 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1051);
        float _1064 = (dot(vec3(_556, _557, _558), vec3(_1056 * _1048, _1056 * _1049, _1056 * _1050)) + 1.0) * 0.5;
        float _3684 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1073 = sqrt(((_1049 * _1049) + (_1048 * _1048)) + (_1050 * _1050)) / (_961 + 9.9999997473787516355514526367188e-06);
        float _3695 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1074 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
        float _1075 = _1074 * 2.0;
        float _1079 = (1.0 - _1074) / (_1074 + 1.0);
        float _3706 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1080 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
        float _1089 = ((((1.0 - _1080) * (_1075 + 2.0)) * exp2(log2(isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0))) * (_1075 + 1.0))) + _1080) * _961;
        _1097 = _928;
        _1099 = _927;
        _1100 = _926;
        _1101 = _938;
        _1102 = _937;
        _1103 = _936;
        _1104 = _948;
        _1105 = _947;
        _1106 = _946;
        _1107 = _961;
        _1108 = _960;
        _1109 = _959;
        _1110 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0)));
        _1111 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0)));
        _1112 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0)));
    }
    else
    {
        _1097 = _1098;
        _1099 = _1098;
        _1100 = _1098;
        _1101 = _1098;
        _1102 = _1098;
        _1103 = _1098;
        _1104 = _1098;
        _1105 = _1098;
        _1106 = _1098;
        _1107 = _1098;
        _1108 = _1098;
        _1109 = _1098;
        _1110 = 0.0;
        _1111 = 0.0;
        _1112 = 0.0;
    }
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1137 = fma(_796, cbModelParam._m0[30u].z, fma(_792, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _788));
        float _1141 = fma(_796, cbModelParam._m0[31u].z, fma(_792, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _788));
        float _1145 = fma(_796, cbModelParam._m0[32u].z, fma(_792, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _788));
        float _1168 = _788 + _556;
        float _1169 = _792 + _557;
        float _1170 = _796 + _558;
        float _1180 = fma(_1170, cbModelParam._m0[30u].z, fma(_1169, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1168)) - _1137;
        float _1181 = fma(_1170, cbModelParam._m0[31u].z, fma(_1169, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1168)) - _1141;
        float _1182 = fma(_1170, cbModelParam._m0[32u].z, fma(_1169, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1168)) - _1145;
        float _1186 = inversesqrt(dot(vec3(_1180, _1181, _1182), vec3(_1180, _1181, _1182)));
        float _1199 = ((_1186 * _1180) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1137 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1200 = ((_1186 * _1181) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1141 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1201 = ((_1186 * _1182) / cbModelParam._m0[35u].z) + ((((((_1145 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1203 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1199, _1200, _1201), 0.0);
        vec4 _1210 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1199, _1200, _1201), 0.0);
        vec4 _1217 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1199, _1200, _1201), 0.0);
        vec4 _1224 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1199, _1200, _1201), 0.0);
        float _1236 = exp2((_1203.w + (-0.5)) * 20.0) * 2.0;
        float _1237 = _1236 * (_1203.x + (-0.5));
        float _1238 = _1236 * (_1203.y + (-0.5));
        float _1239 = _1236 * (_1203.z + (-0.5));
        float _1246 = exp2((_1210.w + (-0.5)) * 20.0) * 2.0;
        float _1247 = _1246 * (_1210.x + (-0.5));
        float _1248 = _1246 * (_1210.y + (-0.5));
        float _1249 = _1246 * (_1210.z + (-0.5));
        float _1256 = exp2((_1217.w + (-0.5)) * 20.0) * 2.0;
        float _1257 = _1256 * (_1217.x + (-0.5));
        float _1258 = _1256 * (_1217.y + (-0.5));
        float _1259 = _1256 * (_1217.z + (-0.5));
        float _1266 = exp2((_1224.w + (-0.5)) * 20.0) * 2.0;
        float _1267 = _1266 * (_1224.x + (-0.5));
        float _1268 = _1266 * (_1224.y + (-0.5));
        float _1269 = _1266 * (_1224.z + (-0.5));
        float _1270 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1271 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1272 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1273 = _1237 * 0.5;
        float _1274 = _1247 * 0.5;
        float _1275 = _1257 * 0.5;
        float _1276 = dot(vec3(_1273, _1274, _1275), vec3(_1273, _1274, _1275));
        float _1281 = (_1276 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1276);
        float _1289 = (dot(vec3(_556, _557, _558), vec3(_1281 * _1273, _1281 * _1274, _1281 * _1275)) + 1.0) * 0.5;
        float _3747 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1298 = sqrt(((_1274 * _1274) + (_1273 * _1273)) + (_1275 * _1275)) / (_1270 + 9.9999997473787516355514526367188e-06);
        float _3758 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1299 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
        float _1300 = _1299 * 2.0;
        float _1304 = (1.0 - _1299) / (_1299 + 1.0);
        float _3769 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1305 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
        float _1314 = ((((1.0 - _1305) * (_1300 + 2.0)) * exp2(log2(isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0))) * (_1300 + 1.0))) + _1305) * _1270;
        float _1315 = _1238 * 0.5;
        float _1316 = _1248 * 0.5;
        float _1317 = _1258 * 0.5;
        float _1318 = dot(vec3(_1315, _1316, _1317), vec3(_1315, _1316, _1317));
        float _1323 = (_1318 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1318);
        float _1331 = (dot(vec3(_556, _557, _558), vec3(_1323 * _1315, _1323 * _1316, _1323 * _1317)) + 1.0) * 0.5;
        float _3780 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1340 = sqrt(((_1316 * _1316) + (_1315 * _1315)) + (_1317 * _1317)) / (_1271 + 9.9999997473787516355514526367188e-06);
        float _3791 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1341 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
        float _1342 = _1341 * 2.0;
        float _1346 = (1.0 - _1341) / (_1341 + 1.0);
        float _3802 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1347 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
        float _1356 = ((((1.0 - _1347) * (_1342 + 2.0)) * exp2(log2(isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0))) * (_1342 + 1.0))) + _1347) * _1271;
        float _1357 = _1239 * 0.5;
        float _1358 = _1249 * 0.5;
        float _1359 = _1259 * 0.5;
        float _1360 = dot(vec3(_1357, _1358, _1359), vec3(_1357, _1358, _1359));
        float _1365 = (_1360 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1360);
        float _1373 = (dot(vec3(_556, _557, _558), vec3(_1365 * _1357, _1365 * _1358, _1365 * _1359)) + 1.0) * 0.5;
        float _3813 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1382 = sqrt(((_1358 * _1358) + (_1357 * _1357)) + (_1359 * _1359)) / (_1272 + 9.9999997473787516355514526367188e-06);
        float _3824 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1383 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
        float _1384 = _1383 * 2.0;
        float _1388 = (1.0 - _1383) / (_1383 + 1.0);
        float _3835 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1389 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
        float _1398 = ((((1.0 - _1389) * (_1384 + 2.0)) * exp2(log2(isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0))) * (_1384 + 1.0))) + _1389) * _1272;
        _1406 = _1239;
        _1407 = _1238;
        _1408 = _1237;
        _1409 = _1249;
        _1410 = _1248;
        _1411 = _1247;
        _1412 = _1259;
        _1413 = _1258;
        _1414 = _1257;
        _1415 = _1272;
        _1416 = _1271;
        _1417 = _1270;
        _1418 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0)));
        _1419 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0)));
        _1420 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0)));
    }
    else
    {
        _1406 = _1098;
        _1407 = _1098;
        _1408 = _1098;
        _1409 = _1098;
        _1410 = _1098;
        _1411 = _1098;
        _1412 = _1098;
        _1413 = _1098;
        _1414 = _1098;
        _1415 = _1098;
        _1416 = _1098;
        _1417 = _1098;
        _1418 = 0.0;
        _1419 = 0.0;
        _1420 = 0.0;
    }
    float _1430 = (cbModelParam._m0[1u].x * (_1418 - _1110)) + _1110;
    float _1431 = (cbModelParam._m0[1u].x * (_1419 - _1111)) + _1111;
    float _1432 = (cbModelParam._m0[1u].x * (_1420 - _1112)) + _1112;
    float _1453 = fma(_1432, cbSceneParam._m0[89u].z, fma(_1431, cbSceneParam._m0[89u].y, _1430 * cbSceneParam._m0[89u].x));
    float _1456 = fma(_1432, cbSceneParam._m0[90u].z, fma(_1431, cbSceneParam._m0[90u].y, _1430 * cbSceneParam._m0[90u].x));
    float _1459 = fma(_1432, cbSceneParam._m0[91u].z, fma(_1431, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1430));
    float _1474 = _732 * 0.5;
    float _1475 = _733 * 0.5;
    float _1476 = _734 * 0.5;
    float _1477 = dot(vec4(_1474, _1475, _1476, 1.0), vec4(_1408, _1411, _1414, _1417));
    float _1480 = dot(vec4(_1474, _1475, _1476, 1.0), vec4(_1407, _1410, _1413, _1416));
    float _1483 = dot(vec4(_1474, _1475, _1476, 1.0), vec4(_1406, _1409, _1412, _1415));
    float _1517;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1490 = dot(vec4(_1474, _1475, _1476, 1.0), vec4(_1097, _1101, _1104, _1107));
        float _1494 = dot(vec4(_1474, _1475, _1476, 1.0), vec4(_1099, _1102, _1105, _1108));
        float _1498 = dot(vec4(_1474, _1475, _1476, 1.0), vec4(_1100, _1103, _1106, _1109));
        float _1505 = dot(vec4(cbModelParam._m0[39u]), vec4(_1474, _1475, _1476, 1.0));
        _1517 = dot(vec3(isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0)), isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0)), isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1505) ? 0.0 : (isnan(0.0) ? _1505 : max(0.0, _1505))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1517 = 1.0;
    }
    float _1528;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1519 = dot(vec4(cbModelParam._m0[40u]), vec4(_1474, _1475, _1476, 1.0));
        _1528 = dot(vec3(isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0)), isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0)), isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1519) ? 0.0 : (isnan(0.0) ? _1519 : max(0.0, _1519))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1528 = 1.0;
    }
    float _1532 = (_1528 * cbModelParam._m0[1u].x) + (_1517 * (1.0 - cbModelParam._m0[1u].x));
    float _1542 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _559);
    float _1543 = isnan(_1542) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1542 : min(cbModelParam._m0[25u].z, _1542));
    float _1624;
    float _1626;
    float _1628;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1591 = fma(_796, cbModelParam._m0[13u].z, fma(_792, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _788)) + cbModelParam._m0[13u].w;
        float _1595 = fma(_796, cbModelParam._m0[14u].z, fma(_792, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _788)) + cbModelParam._m0[14u].w;
        float _1599 = fma(_796, cbModelParam._m0[15u].z, fma(_792, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _788)) + cbModelParam._m0[15u].w;
        float _1602 = fma(_734, cbModelParam._m0[13u].z, fma(_733, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _732));
        float _1605 = fma(_734, cbModelParam._m0[14u].z, fma(_733, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _732));
        float _1608 = fma(_734, cbModelParam._m0[15u].z, fma(_733, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _732));
        float _1636;
        if (_1602 > 0.0)
        {
            _1636 = abs((1.0 - _1591) / _1602);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1602 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1591 + 1.0) / _1602);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1636 = frontier_phi_14_12_ladder;
        }
        float _1840;
        if (_1605 > 0.0)
        {
            _1840 = abs((1.0 - _1595) / _1605);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1605 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1595 + 1.0) / _1605);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1840 = frontier_phi_23_19_ladder;
        }
        float _2094;
        if (_1608 > 0.0)
        {
            _2094 = abs((1.0 - _1599) / _1608);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1608 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1599 + 1.0) / _1608);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2094 = frontier_phi_35_30_ladder;
        }
        float _2096 = isnan(_1840) ? _1636 : (isnan(_1636) ? _1840 : min(_1636, _1840));
        float _2097 = isnan(_2094) ? _2096 : (isnan(_2096) ? _2094 : min(_2096, _2094));
        float _2101 = (_2097 * _1602) + _1591;
        float _2102 = (_2097 * _1605) + _1595;
        float _2103 = (_2097 * _1608) + _1599;
        float _2104 = _2097 * 9.9999997473787516355514526367188e-05;
        float _2106 = (-1.0) - _2104;
        float _2108 = _2104 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2103 > _2108) || ((_2103 < _2106) || ((_2102 > _2108) || ((_2102 < _2106) || ((_2101 < _2106) || (_2101 > _2108))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2231 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2103, cbModelParam._m0[9u].z, fma(_2102, cbModelParam._m0[9u].y, _2101 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2103, cbModelParam._m0[10u].z, fma(_2102, cbModelParam._m0[10u].y, _2101 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2103, cbModelParam._m0[11u].z, fma(_2102, cbModelParam._m0[11u].y, _2101 * cbModelParam._m0[11u].x))), _1543);
            frontier_phi_13_35_ladder = _2231.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2231.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2231.x * cbModelParam._m0[1u].y;
        }
        _1624 = frontier_phi_13_35_ladder_2;
        _1626 = frontier_phi_13_35_ladder_1;
        _1628 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1612 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_732, _733, _734), _1543);
        _1624 = _1612.x * cbModelParam._m0[1u].y;
        _1626 = _1612.y * cbModelParam._m0[1u].y;
        _1628 = _1612.z * cbModelParam._m0[1u].y;
    }
    float _1632 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _559);
    float _1633 = isnan(_1632) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1632 : min(cbModelParam._m0[25u].w, _1632));
    float _1723;
    float _1725;
    float _1727;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1687 = fma(_796, cbModelParam._m0[21u].z, fma(_792, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _788)) + cbModelParam._m0[21u].w;
        float _1691 = fma(_796, cbModelParam._m0[22u].z, fma(_792, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _788)) + cbModelParam._m0[22u].w;
        float _1695 = fma(_796, cbModelParam._m0[23u].z, fma(_792, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _788)) + cbModelParam._m0[23u].w;
        float _1698 = fma(_734, cbModelParam._m0[21u].z, fma(_733, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _732));
        float _1701 = fma(_734, cbModelParam._m0[22u].z, fma(_733, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _732));
        float _1704 = fma(_734, cbModelParam._m0[23u].z, fma(_733, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _732));
        float _1845;
        if (_1698 > 0.0)
        {
            _1845 = abs((1.0 - _1687) / _1698);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1698 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1687 + 1.0) / _1698);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1845 = frontier_phi_25_21_ladder;
        }
        float _2121;
        if (_1701 > 0.0)
        {
            _2121 = abs((1.0 - _1691) / _1701);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1701 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1691 + 1.0) / _1701);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2121 = frontier_phi_37_32_ladder;
        }
        float _2334;
        if (_1704 > 0.0)
        {
            _2334 = abs((1.0 - _1695) / _1704);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1704 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1695 + 1.0) / _1704);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2334 = frontier_phi_46_43_ladder;
        }
        float _2336 = isnan(_2121) ? _1845 : (isnan(_1845) ? _2121 : min(_1845, _2121));
        float _2337 = isnan(_2334) ? _2336 : (isnan(_2336) ? _2334 : min(_2336, _2334));
        float _2341 = (_2337 * _1698) + _1687;
        float _2342 = (_2337 * _1701) + _1691;
        float _2343 = (_2337 * _1704) + _1695;
        float _2344 = _2337 * 9.9999997473787516355514526367188e-05;
        float _2345 = (-1.0) - _2344;
        float _2347 = _2344 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2343 > _2347) || ((_2343 < _2345) || ((_2342 > _2347) || ((_2342 < _2345) || ((_2341 < _2345) || (_2341 > _2347))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2542 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2343, cbModelParam._m0[17u].z, fma(_2342, cbModelParam._m0[17u].y, _2341 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2343, cbModelParam._m0[18u].z, fma(_2342, cbModelParam._m0[18u].y, _2341 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2343, cbModelParam._m0[19u].z, fma(_2342, cbModelParam._m0[19u].y, _2341 * cbModelParam._m0[19u].x))), _1633);
            frontier_phi_22_46_ladder = _2542.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2542.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2542.x * cbModelParam._m0[1u].z;
        }
        _1723 = frontier_phi_22_46_ladder_2;
        _1725 = frontier_phi_22_46_ladder_1;
        _1727 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1707 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_732, _733, _734), _1633);
        _1723 = _1707.x * cbModelParam._m0[1u].z;
        _1725 = _1707.y * cbModelParam._m0[1u].z;
        _1727 = _1707.z * cbModelParam._m0[1u].z;
    }
    float _1740 = (((_759 * _708) + _760) * _724) * ((cbModelParam._m0[1u].w * (_1723 - _1624)) + _1624);
    float _1742 = (((_759 * _710) + _760) * _724) * ((cbModelParam._m0[1u].w * (_1725 - _1626)) + _1626);
    float _1744 = (((_759 * _711) + _760) * _724) * ((cbModelParam._m0[1u].w * (_1727 - _1628)) + _1628);
    float _1747 = fma(_1744, cbSceneParam._m0[89u].z, fma(_1742, cbSceneParam._m0[89u].y, _1740 * cbSceneParam._m0[89u].x));
    float _1750 = fma(_1744, cbSceneParam._m0[90u].z, fma(_1742, cbSceneParam._m0[90u].y, _1740 * cbSceneParam._m0[90u].x));
    float _1753 = fma(_1744, cbSceneParam._m0[91u].z, fma(_1742, cbSceneParam._m0[91u].y, _1740 * cbSceneParam._m0[91u].x));
    uvec4 _1763 = floatBitsToUint(cbInstanceData._m0[_235 + 5u]);
    uint _1765 = _1763.x * 14u;
    uint _1766 = _1765 + 13u;
    float _1773 = _724 + (-1.0);
    float _1778 = (cbLight._m0[_1766].x * _1773) + 1.0;
    float _1779 = (cbLight._m0[_1766].y * _1773) + 1.0;
    float _1780 = (cbLight._m0[_1766].z * _1773) + 1.0;
    float _1781 = (cbLight._m0[_1766].w * _1773) + 1.0;
    uint _1782 = _1765 + 5u;
    float _1788 = isnan(1.0) ? _1779 : (isnan(_1779) ? 1.0 : min(_1779, 1.0));
    uint _1792 = _1765 + 4u;
    float _1799 = isnan(1.0) ? _1778 : (isnan(_1778) ? 1.0 : min(_1778, 1.0));
    uint _1803 = _1765 | 1u;
    float _1814 = dot(vec3(cbLight._m0[_1765].xyz), vec3(_556, _557, _558));
    float _1817 = dot(vec3(cbLight._m0[_1803].xyz), vec3(_556, _557, _558));
    float _3971 = isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0));
    float _3982 = isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0));
    float _1822 = (isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0))) * 0.3183098733425140380859375;
    float _1824 = (isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0))) * 0.3183098733425140380859375;
    float _1831 = ((cbLight._m0[_1782].x * _1788) * _1824) + ((cbLight._m0[_1792].x * _1799) * _1822);
    float _1832 = ((_1788 * cbLight._m0[_1782].y) * _1824) + ((_1799 * cbLight._m0[_1792].y) * _1822);
    float _1833 = ((_1788 * cbLight._m0[_1782].z) * _1824) + ((_1799 * cbLight._m0[_1792].z) * _1822);
    uvec4 _1837 = floatBitsToUint(cbLight._m0[_1765 + 12u]);
    bool _1839 = _1837.x == 0u;
    float _1850;
    float _1852;
    float _1854;
    if (_1839)
    {
        _1850 = _1831;
        _1852 = _1832;
        _1854 = _1833;
    }
    else
    {
        uint _1858 = _1765 + 6u;
        float _1874 = (dot(vec3(cbLight._m0[_1765 + 2u].xyz), vec3(_556, _557, _558)) * 0.5) + 0.5;
        float _1875 = _1874 * _1874;
        float _3993 = isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0));
        float _1876 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
        float _1877 = isnan(1.0) ? _1780 : (isnan(_1780) ? 1.0 : min(_1780, 1.0));
        _1850 = (((cbLight._m0[_1858].x * 0.3183098733425140380859375) * _1876) * _1877) + _1831;
        _1852 = (((cbLight._m0[_1858].y * 0.3183098733425140380859375) * _1876) * _1877) + _1832;
        _1854 = (((cbLight._m0[_1858].z * 0.3183098733425140380859375) * _1876) * _1877) + _1833;
    }
    bool _1857 = _1837.y == 0u;
    float _1895;
    float _1897;
    float _1899;
    if (_1857)
    {
        _1895 = _1850;
        _1897 = _1852;
        _1899 = _1854;
    }
    else
    {
        uint _2065 = _1765 + 7u;
        float _2081 = (dot(vec3(cbLight._m0[_1765 + 3u].xyz), vec3(_556, _557, _558)) * 0.5) + 0.5;
        float _2082 = _2081 * _2081;
        float _4009 = isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0));
        float _2083 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
        float _2084 = isnan(1.0) ? _1781 : (isnan(_1781) ? 1.0 : min(_1781, 1.0));
        _1895 = (((cbLight._m0[_2065].x * 0.3183098733425140380859375) * _2083) * _2084) + _1850;
        _1897 = (((cbLight._m0[_2065].y * 0.3183098733425140380859375) * _2083) * _2084) + _1852;
        _1899 = (((cbLight._m0[_2065].z * 0.3183098733425140380859375) * _2083) * _2084) + _1854;
    }
    uint _1902 = _1765 + 8u;
    float _1915 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1765].w)) * _559) * 0.949999988079071044921875);
    float _1916 = _1915 * _1915;
    float _1917 = cbLight._m0[_1765].x + _635;
    float _1918 = cbLight._m0[_1765].y + _636;
    float _1919 = cbLight._m0[_1765].z + _637;
    float _1923 = inversesqrt(dot(vec3(_1917, _1918, _1919), vec3(_1917, _1918, _1919)));
    float _1924 = _1923 * _1917;
    float _1925 = _1923 * _1918;
    float _1926 = _1923 * _1919;
    float _1927 = dot(vec3(_556, _557, _558), vec3(cbLight._m0[_1765].xyz));
    float _4025 = isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0));
    float _1930 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
    float _4036 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
    float _1931 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
    float _1932 = dot(vec3(_556, _557, _558), vec3(_1924, _1925, _1926));
    float _4047 = isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0));
    float _1935 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
    float _1936 = dot(vec3(cbLight._m0[_1765].xyz), vec3(_1924, _1925, _1926));
    float _4058 = isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0));
    float _1940 = _1916 * _1916;
    float _1944 = ((_1935 * _1935) * (_1940 + (-1.0))) + 1.0;
    float _1952 = exp2(log2(1.0 - (isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0)))) * 5.0);
    float _1953 = 0.959999978542327880859375 - _705;
    float _1955 = 0.959999978542327880859375 - _706;
    float _1956 = 0.959999978542327880859375 - _707;
    float _1963 = 1.0 - _1916;
    float _1974 = (0.5 / (((_1931 * ((_1930 * _1963) + _1916)) + 9.9999999392252902907785028219223e-09) + (((_1931 * _1963) + _1916) * _1930))) * _1930;
    float _4069 = isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0));
    float _1976 = (isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0))) * (_1940 / ((_1944 * _1944) * 3.141590118408203125));
    uint _1987 = _1765 + 9u;
    float _1998 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1803].w)) * _559) * 0.949999988079071044921875);
    float _1999 = _1998 * _1998;
    float _2000 = cbLight._m0[_1803].x + _635;
    float _2001 = cbLight._m0[_1803].y + _636;
    float _2002 = cbLight._m0[_1803].z + _637;
    float _2006 = inversesqrt(dot(vec3(_2000, _2001, _2002), vec3(_2000, _2001, _2002)));
    float _2007 = _2006 * _2000;
    float _2008 = _2006 * _2001;
    float _2009 = _2006 * _2002;
    float _2010 = dot(vec3(_556, _557, _558), vec3(cbLight._m0[_1803].xyz));
    float _4080 = isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0));
    float _2013 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
    float _2014 = dot(vec3(_556, _557, _558), vec3(_2007, _2008, _2009));
    float _4091 = isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0));
    float _2017 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
    float _2018 = dot(vec3(cbLight._m0[_1803].xyz), vec3(_2007, _2008, _2009));
    float _4102 = isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0));
    float _2022 = _1999 * _1999;
    float _2026 = ((_2017 * _2017) * (_2022 + (-1.0))) + 1.0;
    float _2033 = exp2(log2(1.0 - (isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0)))) * 5.0);
    float _2040 = 1.0 - _1999;
    float _2050 = (0.5 / (((_1931 * ((_2013 * _2040) + _1999)) + 9.9999999392252902907785028219223e-09) + (((_1931 * _2040) + _1999) * _2013))) * _2013;
    float _4113 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
    float _2052 = (isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0))) * (_2022 / ((_2026 * _2026) * 3.141590118408203125));
    float _2062 = (((((_2033 * _1953) + _708) * cbLight._m0[_1987].x) * _2052) * _1788) + (((((_1952 * _1953) + _708) * cbLight._m0[_1902].x) * _1976) * _1799);
    float _2063 = (((((_2033 * _1955) + _710) * cbLight._m0[_1987].y) * _2052) * _1788) + (((((_1952 * _1955) + _710) * cbLight._m0[_1902].y) * _1976) * _1799);
    float _2064 = (((((_2033 * _1956) + _711) * cbLight._m0[_1987].z) * _2052) * _1788) + (((((_1952 * _1956) + _711) * cbLight._m0[_1902].z) * _1976) * _1799);
    float _2126;
    float _2128;
    float _2130;
    if (_1839)
    {
        _2126 = _2062;
        _2128 = _2063;
        _2130 = _2064;
    }
    else
    {
        uint _2132 = _1765 + 2u;
        uint _2136 = _1765 + 10u;
        float _2150 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2132].w)) * _559) * 0.949999988079071044921875);
        float _2151 = _2150 * _2150;
        float _2152 = cbLight._m0[_2132].x + _635;
        float _2153 = cbLight._m0[_2132].y + _636;
        float _2154 = cbLight._m0[_2132].z + _637;
        float _2158 = inversesqrt(dot(vec3(_2152, _2153, _2154), vec3(_2152, _2153, _2154)));
        float _2159 = _2158 * _2152;
        float _2160 = _2158 * _2153;
        float _2161 = _2158 * _2154;
        float _2162 = dot(vec3(_556, _557, _558), vec3(cbLight._m0[_2132].xyz));
        float _4124 = isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0));
        float _2165 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
        float _2166 = dot(vec3(_556, _557, _558), vec3(_2159, _2160, _2161));
        float _4135 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
        float _2169 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
        float _2170 = dot(vec3(cbLight._m0[_2132].xyz), vec3(_2159, _2160, _2161));
        float _4146 = isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0));
        float _2174 = _2151 * _2151;
        float _2178 = ((_2169 * _2169) * (_2174 + (-1.0))) + 1.0;
        float _2185 = exp2(log2(1.0 - (isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0)))) * 5.0);
        float _2192 = 1.0 - _2151;
        float _2202 = (0.5 / (((_1931 * ((_2165 * _2192) + _2151)) + 9.9999999392252902907785028219223e-09) + (((_1931 * _2192) + _2151) * _2165))) * _2165;
        float _4157 = isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0));
        float _2204 = (isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0))) * (_2174 / ((_2178 * _2178) * 3.141590118408203125));
        float _2205 = isnan(1.0) ? _1780 : (isnan(_1780) ? 1.0 : min(_1780, 1.0));
        _2126 = (((((_2185 * _1953) + _708) * cbLight._m0[_2136].x) * _2204) * _2205) + _2062;
        _2128 = (((((_2185 * _1955) + _710) * cbLight._m0[_2136].y) * _2204) * _2205) + _2063;
        _2130 = (((((_2185 * _1956) + _711) * cbLight._m0[_2136].z) * _2204) * _2205) + _2064;
    }
    float _2240;
    float _2242;
    float _2244;
    if (_1857)
    {
        _2240 = _2126;
        _2242 = _2128;
        _2244 = _2130;
    }
    else
    {
        uint _2251 = _1765 + 3u;
        uint _2255 = _1765 + 11u;
        float _2269 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2251].w)) * _559) * 0.949999988079071044921875);
        float _2270 = _2269 * _2269;
        float _2271 = cbLight._m0[_2251].x + _635;
        float _2272 = cbLight._m0[_2251].y + _636;
        float _2273 = cbLight._m0[_2251].z + _637;
        float _2277 = inversesqrt(dot(vec3(_2271, _2272, _2273), vec3(_2271, _2272, _2273)));
        float _2278 = _2277 * _2271;
        float _2279 = _2277 * _2272;
        float _2280 = _2277 * _2273;
        float _2281 = dot(vec3(_556, _557, _558), vec3(cbLight._m0[_2251].xyz));
        float _4173 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
        float _2284 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
        float _2285 = dot(vec3(_556, _557, _558), vec3(_2278, _2279, _2280));
        float _4184 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0));
        float _2288 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
        float _2289 = dot(vec3(cbLight._m0[_2251].xyz), vec3(_2278, _2279, _2280));
        float _4195 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
        float _2293 = _2270 * _2270;
        float _2297 = ((_2288 * _2288) * (_2293 + (-1.0))) + 1.0;
        float _2304 = exp2(log2(1.0 - (isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0)))) * 5.0);
        float _2311 = 1.0 - _2270;
        float _2321 = (0.5 / (((_1931 * ((_2284 * _2311) + _2270)) + 9.9999999392252902907785028219223e-09) + (((_1931 * _2311) + _2270) * _2284))) * _2284;
        float _4206 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
        float _2323 = (isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0))) * (_2293 / ((_2297 * _2297) * 3.141590118408203125));
        float _2324 = isnan(1.0) ? _1781 : (isnan(_1781) ? 1.0 : min(_1781, 1.0));
        _2240 = (((((_2304 * _1953) + _708) * cbLight._m0[_2255].x) * _2323) * _2324) + _2126;
        _2242 = (((((_2304 * _1955) + _710) * cbLight._m0[_2255].y) * _2323) * _2324) + _2128;
        _2244 = (((((_2304 * _1956) + _711) * cbLight._m0[_2255].z) * _2323) * _2324) + _2130;
    }
    float _2459;
    float _2461;
    float _2463;
    float _2465;
    float _2467;
    float _2469;
    if (_1763.y == 0u)
    {
        float _2399 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2400 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2399;
        float _2401 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2399;
        float _2402 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2399;
        uvec4 _2414 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2415 = _2414.x;
        uint _2426 = uint((float(_2414.y) * floor(float(uint(cbSceneParam._m0[85u].y * _644) / _2415))) + floor(float(uint(cbSceneParam._m0[85u].x * _643) / _2415)));
        float _2436 = (log2(_2402 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2437 = isnan(0.0) ? _2436 : (isnan(_2436) ? 0.0 : max(_2436, 0.0));
        uint _2440 = uint(isnan(14.0) ? _2437 : (isnan(_2437) ? 14.0 : min(_2437, 14.0)));
        uvec4 _2445 = texelFetch(g_lightClusterGridBuffer, int(((_2440 << 2u) + (_2426 << 6u)) >> 2u));
        uint _2446 = _2445.x;
        uint _2447 = _2414.z;
        float _2547;
        float _2549;
        float _2551;
        float _2553;
        float _2555;
        float _2557;
        if (((((1u << ((_2447 >> 4u) & 15u)) + 4294967295u) & _2446) == 0u) || ((_2447 & 240u) == 0u))
        {
            _2547 = 0.0;
            _2549 = 0.0;
            _2551 = 0.0;
            _2553 = 0.0;
            _2555 = 0.0;
            _2557 = 0.0;
        }
        else
        {
            float _2548;
            float _2550;
            float _2552;
            float _2554;
            float _2556;
            float _2558;
            float _2692 = 0.0;
            float _2693 = 0.0;
            float _2694 = 0.0;
            float _2695 = 0.0;
            float _2696 = 0.0;
            float _2697 = 0.0;
            uint _2698 = 0u;
            uint _2707;
            bool _2708;
            for (;;)
            {
                _2707 = texelFetch(g_lightClassification, int((((_2440 << 5u) + (_2426 << 9u)) + (_2698 << 2u)) >> 2u)).x;
                _2708 = _2707 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2708)
                {
                    frontier_phi_61_pred = _2692;
                    frontier_phi_61_pred_1 = _2697;
                    frontier_phi_61_pred_2 = _2696;
                    frontier_phi_61_pred_3 = _2695;
                    frontier_phi_61_pred_4 = _2694;
                    frontier_phi_61_pred_5 = _2693;
                }
                else
                {
                    float _2816;
                    float _2817;
                    float _2818;
                    float _2819;
                    float _2820;
                    float _2821;
                    uint _2822;
                    _2816 = _2692;
                    _2817 = _2693;
                    _2818 = _2694;
                    _2819 = _2695;
                    _2820 = _2696;
                    _2821 = _2697;
                    _2822 = _2707;
                    float _2748;
                    float _2749;
                    float _2750;
                    float _2751;
                    float _2752;
                    float _2753;
                    for (;;)
                    {
                        uint _2826 = uint(findLSB(_2822)) + (_2698 << 5u);
                        uint _2823 = (_2822 + 4294967295u) & _2822;
                        uint _2828 = _2826 * 48u;
                        vec4 _2842 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2828)).x, texelFetch(g_PointLightRenderingBuffer, int(_2828 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2828 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2828 + 3u)).x));
                        uint _2848 = (_2826 * 48u) + 4u;
                        vec4 _2861 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2848)).x, texelFetch(g_PointLightRenderingBuffer, int(_2848 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2848 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2848 + 3u)).x));
                        uint _2867 = (_2826 * 48u) + 8u;
                        vec3 _2878 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2867)).x, texelFetch(g_PointLightRenderingBuffer, int(_2867 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2867 + 2u)).x));
                        float _2882 = _2842.x - _2400;
                        float _2883 = _2842.y - _2401;
                        float _2884 = _2842.z - _2402;
                        float _2885 = dot(vec3(_2882, _2883, _2884), vec3(_2882, _2883, _2884));
                        float _2888 = inversesqrt(_2885);
                        float _2889 = _2888 * _2882;
                        float _2890 = _2888 * _2883;
                        float _2891 = _2888 * _2884;
                        float _2892 = dot(vec3(_665, _668, _671), vec3(_2889, _2890, _2891));
                        float _2897 = 1.0 - (_2885 * _2842.w);
                        float _4232 = isnan(0.0) ? _2897 : (isnan(_2897) ? 0.0 : max(_2897, 0.0));
                        float _2898 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
                        float _2899 = sqrt(_2885) * _2861.w;
                        float _2902 = 1.39999997615814208984375 / (_2899 + 1.39999997615814208984375);
                        float _2903 = _2902 * _2902;
                        float _2906 = ((1.0 - _2903) * _2892) + _2903;
                        float _2909 = _2899 * _2899;
                        float _2913 = ((isnan(0.0) ? _2906 : (isnan(_2906) ? 0.0 : max(_2906, 0.0))) * _2898) / ((_2909 * 0.699999988079071044921875) + 1.0);
                        float _2917 = (-0.0) - _2400;
                        float _2918 = (-0.0) - _2401;
                        float _2919 = (-0.0) - _2402;
                        float _2923 = inversesqrt(dot(vec3(_2917, _2918, _2919), vec3(_2917, _2918, _2919)));
                        float _2924 = _2923 * _2917;
                        float _2925 = _2923 * _2918;
                        float _2926 = _2923 * _2919;
                        float _2934 = exp2(log2(1.0 / ((_2909 * 3.5) + 5.0)) * 0.25);
                        float _2935 = 1.0 - _740;
                        float _2942 = sqrt(1.0 - ((1.0 - (_2935 * _2935)) * (1.0 - (_2934 * _2934))));
                        float _2943 = _2942 * _2942;
                        float _2944 = _2943 * _2943;
                        float _2945 = _2924 + _2889;
                        float _2946 = _2925 + _2890;
                        float _2947 = _2926 + _2891;
                        float _2951 = inversesqrt(dot(vec3(_2945, _2946, _2947), vec3(_2945, _2946, _2947)));
                        float _2955 = dot(vec3(_665, _668, _671), vec3(_2924, _2925, _2926));
                        float _4248 = isnan(0.0) ? _2955 : (isnan(_2955) ? 0.0 : max(_2955, 0.0));
                        float _2958 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
                        float _2959 = dot(vec3(_665, _668, _671), vec3(_2951 * _2945, _2951 * _2946, _2951 * _2947));
                        float _4259 = isnan(0.0) ? _2959 : (isnan(_2959) ? 0.0 : max(_2959, 0.0));
                        float _2962 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
                        float _2966 = ((_2962 * _2962) * (_2944 + (-1.0))) + 1.0;
                        float _2967 = _2902 * _2943;
                        float _2968 = _2967 * _2967;
                        float _2971 = ((1.0 - _2968) * _2892) + _2968;
                        float _4270 = isnan(0.0) ? _2971 : (isnan(_2971) ? 0.0 : max(_2971, 0.0));
                        float _2972 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
                        float _2973 = 1.0 - _2943;
                        float _2983 = (0.5 / (((_2972 * ((_2958 * _2973) + _2943)) + 9.9999999392252902907785028219223e-09) + (((_2972 * _2973) + _2943) * _2958))) * _2972;
                        float _4281 = isnan(0.0) ? _2983 : (isnan(_2983) ? 0.0 : max(_2983, 0.0));
                        float _2994 = (((_2944 * 3.1415927410125732421875) * (isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0)))) / ((_2966 * _2966) * ((_2909 * 2.1991131305694580078125) + 3.141590118408203125))) * _2898;
                        _2751 = (_2913 * _2861.x) + _2819;
                        _2752 = (_2913 * _2861.y) + _2820;
                        _2753 = (_2913 * _2861.z) + _2821;
                        _2748 = (_2994 * _2878.x) + _2816;
                        _2749 = (_2994 * _2878.y) + _2817;
                        _2750 = (_2994 * _2878.z) + _2818;
                        if (_2823 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2816 = _2748;
                            _2817 = _2749;
                            _2818 = _2750;
                            _2819 = _2751;
                            _2820 = _2752;
                            _2821 = _2753;
                            _2822 = _2823;
                        }
                    }
                    frontier_phi_61_pred = _2748;
                    frontier_phi_61_pred_1 = _2753;
                    frontier_phi_61_pred_2 = _2752;
                    frontier_phi_61_pred_3 = _2751;
                    frontier_phi_61_pred_4 = _2750;
                    frontier_phi_61_pred_5 = _2749;
                }
                _2548 = frontier_phi_61_pred;
                _2558 = frontier_phi_61_pred_1;
                _2556 = frontier_phi_61_pred_2;
                _2554 = frontier_phi_61_pred_3;
                _2552 = frontier_phi_61_pred_4;
                _2550 = frontier_phi_61_pred_5;
                uint _2699 = _2698 + 1u;
                if (_2699 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2692 = _2548;
                    _2693 = _2550;
                    _2694 = _2552;
                    _2695 = _2554;
                    _2696 = _2556;
                    _2697 = _2558;
                    _2698 = _2699;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2547 = _2548;
            _2549 = _2550;
            _2551 = _2552;
            _2553 = _2554;
            _2555 = _2556;
            _2557 = _2558;
        }
        uvec4 _2561 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2562 = _2561.z;
        uint _2564 = (_2562 >> 8u) & 15u;
        float _2660;
        float _2662;
        float _2664;
        float _2666;
        float _2668;
        float _2670;
        if (((4294967295u << _2564) & _2446) == 0u)
        {
            _2660 = _2547;
            _2662 = _2549;
            _2664 = _2551;
            _2666 = _2553;
            _2668 = _2555;
            _2670 = _2557;
        }
        else
        {
            float _2685 = inversesqrt(dot(vec3(_2400, _2401, _2402), vec3(_2400, _2401, _2402)));
            float _2686 = _2685 * _2400;
            float _2687 = _2685 * _2401;
            float _2688 = _2685 * _2402;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2564 < ((_2562 >> 12u) & 15u))
            {
                float _2661;
                float _2663;
                float _2665;
                float _2667;
                float _2669;
                float _2671;
                float _2799 = _2547;
                float _2800 = _2549;
                float _2801 = _2551;
                float _2802 = _2553;
                float _2803 = _2555;
                float _2804 = _2557;
                uint _2805 = _2564;
                uint _2814;
                bool _2815;
                for (;;)
                {
                    _2814 = texelFetch(g_lightClassification, int((((_2440 << 5u) + (_2426 << 9u)) + (_2805 << 2u)) >> 2u)).x;
                    _2815 = _2814 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2815)
                    {
                        frontier_phi_67_pred = _2802;
                        frontier_phi_67_pred_1 = _2803;
                        frontier_phi_67_pred_2 = _2804;
                        frontier_phi_67_pred_3 = _2801;
                        frontier_phi_67_pred_4 = _2800;
                        frontier_phi_67_pred_5 = _2799;
                    }
                    else
                    {
                        float _2999;
                        float _3000;
                        float _3001;
                        float _3002;
                        float _3003;
                        float _3004;
                        float _3294;
                        float _3295;
                        float _3296;
                        float _3297;
                        float _3298;
                        float _3299;
                        float _3012 = _2799;
                        float _3013 = _2800;
                        float _3014 = _2801;
                        float _3015 = _2802;
                        float _3016 = _2803;
                        float _3017 = _2804;
                        uint _3018 = _2814;
                        uint _3019;
                        vec4 _3044;
                        float _3045;
                        vec4 _3060;
                        vec3 _3072;
                        vec4 _3088;
                        vec4 _3104;
                        float _3150;
                        bool _3151;
                        for (;;)
                        {
                            uint _3029 = ((_2805 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3018));
                            _3019 = (_3018 + 4294967295u) & _3018;
                            uint _3031 = _3029 * 40u;
                            _3044 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3031)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3031 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3031 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3031 + 3u)).x));
                            _3045 = _3044.w;
                            uint _3047 = (_3029 * 40u) + 4u;
                            _3060 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3047)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3047 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3047 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3047 + 3u)).x));
                            uint _3062 = (_3029 * 40u) + 8u;
                            _3072 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3062)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3062 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3062 + 2u)).x));
                            uint _3075 = (_3029 * 40u) + 16u;
                            _3088 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3075)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3075 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3075 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3075 + 3u)).x));
                            uint _3091 = (_3029 * 40u) + 20u;
                            _3104 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3091)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3091 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3091 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3091 + 3u)).x));
                            uint _3106 = (_3029 * 40u) + 24u;
                            vec4 _3119 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3106)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3106 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3106 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3106 + 3u)).x));
                            uint _3125 = (_3029 * 40u) + 28u;
                            vec4 _3138 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3125)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 3u)).x));
                            _3150 = fma(_2402, _3138.z, fma(_2401, _3138.y, _3138.x * _2400)) + _3138.w;
                            _3151 = !((fma(_2402, _3119.z, fma(_2401, _3119.y, _3119.x * _2400)) + _3119.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3151)
                            {
                                float _3178 = _3044.x - _2400;
                                float _3179 = _3044.y - _2401;
                                float _3180 = _3044.z - _2402;
                                float _3181 = dot(vec3(_3178, _3179, _3180), vec3(_3178, _3179, _3180));
                                float _3184 = inversesqrt(_3181);
                                float _3185 = _3184 * _3178;
                                float _3186 = _3184 * _3179;
                                float _3187 = _3184 * _3180;
                                float _3191 = 1.0 - (_3181 / (_3045 * _3045));
                                float _4292 = isnan(0.0) ? _3191 : (isnan(_3191) ? 0.0 : max(_3191, 0.0));
                                float _3192 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
                                float _3196 = sqrt(_3181) * _3060.w;
                                float _3198 = 1.39999997615814208984375 / (_3196 + 1.39999997615814208984375);
                                float _3199 = _3198 * _3198;
                                float _3202 = ((1.0 - _3199) * dot(vec3(_3185, _3186, _3187), vec3(_665, _668, _671))) + _3199;
                                float _3205 = _3196 * _3196;
                                float _3209 = (fma(_2402, _3088.z, fma(_2401, _3088.y, _3088.x * _2400)) + _3088.w) / _3150;
                                float _3210 = (fma(_2402, _3104.z, fma(_2401, _3104.y, _3104.x * _2400)) + _3104.w) / _3150;
                                float _3214 = 1.0 - dot(vec2(_3209, _3210), vec2(_3209, _3210));
                                float _4308 = isnan(0.0) ? _3214 : (isnan(_3214) ? 0.0 : max(_3214, 0.0));
                                float _3215 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
                                float _3216 = _3215 * (((isnan(0.0) ? _3202 : (isnan(_3202) ? 0.0 : max(_3202, 0.0))) * _3192) / ((_3205 * 0.699999988079071044921875) + 1.0));
                                float _3228 = exp2(log2(1.0 / ((_3205 * 3.5) + 5.0)) * 0.25);
                                float _3229 = 1.0 - _740;
                                float _3236 = sqrt(1.0 - ((1.0 - (_3229 * _3229)) * (1.0 - (_3228 * _3228))));
                                float _3237 = _3236 * _3236;
                                float _3238 = _3237 * _3237;
                                float _3239 = _3185 - _2686;
                                float _3240 = _3186 - _2687;
                                float _3241 = _3187 - _2688;
                                float _3245 = inversesqrt(dot(vec3(_3239, _3240, _3241), vec3(_3239, _3240, _3241)));
                                float _3249 = dot(vec3(_665, _668, _671), vec3((-0.0) - _2686, (-0.0) - _2687, (-0.0) - _2688));
                                float _4319 = isnan(0.0) ? _3249 : (isnan(_3249) ? 0.0 : max(_3249, 0.0));
                                float _3252 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
                                float _3253 = dot(vec3(_665, _668, _671), vec3(_3245 * _3239, _3245 * _3240, _3245 * _3241));
                                float _4330 = isnan(0.0) ? _3253 : (isnan(_3253) ? 0.0 : max(_3253, 0.0));
                                float _3256 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
                                float _3260 = ((_3256 * _3256) * (_3238 + (-1.0))) + 1.0;
                                float _3261 = _3198 * _3237;
                                float _3262 = _3261 * _3261;
                                float _3268 = ((1.0 - _3262) * dot(vec3(_665, _668, _671), vec3(_3185, _3186, _3187))) + _3262;
                                float _4341 = isnan(0.0) ? _3268 : (isnan(_3268) ? 0.0 : max(_3268, 0.0));
                                float _3269 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
                                float _3270 = 1.0 - _3237;
                                float _3280 = (0.5 / (((_3269 * ((_3252 * _3270) + _3237)) + 9.9999999392252902907785028219223e-09) + (((_3269 * _3270) + _3237) * _3252))) * _3269;
                                float _4352 = isnan(0.0) ? _3280 : (isnan(_3280) ? 0.0 : max(_3280, 0.0));
                                float _3290 = (_3215 * _3192) * (((_3238 * 3.1415927410125732421875) * (isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0)))) / ((_3260 * _3260) * ((_3205 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3290 * _3072.x;
                                frontier_phi_73_pred_1 = _3290 * _3072.y;
                                frontier_phi_73_pred_2 = _3216 * _3060.z;
                                frontier_phi_73_pred_3 = _3216 * _3060.y;
                                frontier_phi_73_pred_4 = _3216 * _3060.x;
                                frontier_phi_73_pred_5 = _3290 * _3072.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3294 = frontier_phi_73_pred;
                            _3295 = frontier_phi_73_pred_1;
                            _3299 = frontier_phi_73_pred_2;
                            _3298 = frontier_phi_73_pred_3;
                            _3297 = frontier_phi_73_pred_4;
                            _3296 = frontier_phi_73_pred_5;
                            _3002 = _3297 + _3015;
                            _3003 = _3298 + _3016;
                            _3004 = _3299 + _3017;
                            _2999 = _3294 + _3012;
                            _3000 = _3295 + _3013;
                            _3001 = _3296 + _3014;
                            if (_3019 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3012 = _2999;
                                _3013 = _3000;
                                _3014 = _3001;
                                _3015 = _3002;
                                _3016 = _3003;
                                _3017 = _3004;
                                _3018 = _3019;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3002;
                        frontier_phi_67_pred_1 = _3003;
                        frontier_phi_67_pred_2 = _3004;
                        frontier_phi_67_pred_3 = _3001;
                        frontier_phi_67_pred_4 = _3000;
                        frontier_phi_67_pred_5 = _2999;
                    }
                    _2667 = frontier_phi_67_pred;
                    _2669 = frontier_phi_67_pred_1;
                    _2671 = frontier_phi_67_pred_2;
                    _2665 = frontier_phi_67_pred_3;
                    _2663 = frontier_phi_67_pred_4;
                    _2661 = frontier_phi_67_pred_5;
                    uint _2806 = _2805 + 1u;
                    if (_2806 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2799 = _2661;
                        _2800 = _2663;
                        _2801 = _2665;
                        _2802 = _2667;
                        _2803 = _2669;
                        _2804 = _2671;
                        _2805 = _2806;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2669;
                frontier_phi_55_56_ladder_1 = _2671;
                frontier_phi_55_56_ladder_2 = _2667;
                frontier_phi_55_56_ladder_3 = _2665;
                frontier_phi_55_56_ladder_4 = _2663;
                frontier_phi_55_56_ladder_5 = _2661;
            }
            else
            {
                frontier_phi_55_56_ladder = _2555;
                frontier_phi_55_56_ladder_1 = _2557;
                frontier_phi_55_56_ladder_2 = _2553;
                frontier_phi_55_56_ladder_3 = _2551;
                frontier_phi_55_56_ladder_4 = _2549;
                frontier_phi_55_56_ladder_5 = _2547;
            }
            _2660 = frontier_phi_55_56_ladder_5;
            _2662 = frontier_phi_55_56_ladder_4;
            _2664 = frontier_phi_55_56_ladder_3;
            _2666 = frontier_phi_55_56_ladder_2;
            _2668 = frontier_phi_55_56_ladder;
            _2670 = frontier_phi_55_56_ladder_1;
        }
        float _2675 = isnan(1.0) ? _724 : (isnan(_724) ? 1.0 : min(_724, 1.0));
        _2459 = (_2675 * _2666) + _1895;
        _2461 = (_2675 * _2668) + _1897;
        _2463 = (_2675 * _2670) + _1899;
        _2465 = ((_2660 * _708) * _2675) + _2240;
        _2467 = ((_2662 * _710) * _2675) + _2242;
        _2469 = ((_2664 * _711) * _2675) + _2244;
    }
    else
    {
        _2459 = _1895;
        _2461 = _1897;
        _2463 = _1899;
        _2465 = _2240;
        _2467 = _2242;
        _2469 = _2244;
    }
    float _4368 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
    float _4379 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
    float _4390 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
    uint _2489 = _235 + 6u;
    float _2497 = _643 / cbSceneParam._m0[86u].x;
    float _2498 = _644 / cbSceneParam._m0[86u].y;
    vec4 _2512 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2497, _2498, (log2((isnan(cbSceneParam._m0[77u].w) ? _578 : (isnan(_578) ? cbSceneParam._m0[77u].w : min(_578, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2514 = _2512.x;
    float _2515 = _2512.y;
    float _2516 = _2512.z;
    float _2517 = _2512.w;
    float _2610;
    float _2612;
    float _2614;
    float _2616;
    if (_578 > cbSceneParam._m0[78u].w)
    {
        float _2572 = isnan(_578) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _578 : min(cbSceneParam._m0[80u].w, _578));
        float _2573 = _2572 / _578;
        float _2584 = _2573 * _628;
        float _2585 = _629 * _2573;
        float _2586 = (-0.0) - _2585;
        float _2588 = _2573 * _630;
        float _2590 = (cbSceneParam._m0[77u].w * _2586) / _2572;
        float _2591 = _2590 + cbSceneParam._m0[79u].w;
        float _2592 = cbSceneParam._m0[79u].w - _2585;
        float _2598 = sqrt(((_2584 * _2584) + (_2585 * _2585)) + (_2588 * _2588));
        float _2601 = (1.0 - (cbSceneParam._m0[77u].w / _2572)) * _2598;
        float _2606 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2608 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2761;
        if (abs((_2586 - _2590) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2761 = ((((_2591 > 0.0) ? exp2(_2606 * _2591) : (2.0 - exp2(_2608 * _2591))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2601;
        }
        else
        {
            float _2721 = 1.0 / cbSceneParam._m0[80u].x;
            float _2722 = isnan(_2592) ? _2591 : (isnan(_2591) ? _2592 : max(_2591, _2592));
            float _2723 = isnan(_2592) ? _2591 : (isnan(_2591) ? _2592 : min(_2591, _2592));
            float _2732 = isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : min(_2722, 0.0));
            float _2733 = isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : min(_2723, 0.0));
            _2761 = ((abs(_2598 / _2586) * cbSceneParam._m0[80u].y) * ((((_2732 - _2733) * 2.0) - ((exp2(_2606 * (isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0)))) - exp2(_2606 * (isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : max(_2723, 0.0))))) * _2721)) - ((exp2(_2608 * _2732) - exp2(_2608 * _2733)) * _2721))) + (_2601 * cbSceneParam._m0[80u].z);
        }
        vec4 _2763 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2497, _2498, 1.0), 0.0);
        float _2772 = exp2((_2761 * (-1.44269502162933349609375)) * (1.0 - _2763.w));
        float _2773 = log2(_2772);
        float _2789 = log2(_2517);
        _2610 = (exp2(_2789 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2773 * cbSceneParam._m0[78u].x)) * _2763.x) / cbSceneParam._m0[78u].x)) + _2514;
        _2612 = (exp2(_2789 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2773 * cbSceneParam._m0[78u].y)) * _2763.y) / cbSceneParam._m0[78u].y)) + _2515;
        _2614 = (exp2(_2789 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2773 * cbSceneParam._m0[78u].z)) * _2763.z) / cbSceneParam._m0[78u].z)) + _2516;
        _2616 = _2772 * _2517;
    }
    else
    {
        _2610 = _2514;
        _2612 = _2515;
        _2614 = _2516;
        _2616 = _2517;
    }
    float _2628 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2629 = _2628 == 3.0;
    float _2630 = log2(_2616);
    float _2637 = exp2(_2630 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0))) * (_2459 + ((isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0))) * _724))) + ((_2465 + ((isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0))) * _1532)) * cbPerFrame._m0[3u].x));
    float _2638 = exp2(_2630 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0))) * (_2461 + ((isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0))) * _724))) + ((_2467 + ((isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0))) * _1532)) * cbPerFrame._m0[3u].x));
    float _2639 = exp2(_2630 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0))) * (_2463 + ((isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0))) * _724))) + ((_2469 + ((isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0))) * _1532)) * cbPerFrame._m0[3u].x));
    float _2648 = (_2628 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2648 * (_2629 ? _2637 : (_2637 + (cbSceneParam._m0[72u].w * _2610)));
    SV_Target.y = _2648 * (_2629 ? _2638 : (_2638 + (cbSceneParam._m0[72u].w * _2612)));
    SV_Target.z = _2648 * (_2629 ? _2639 : (_2639 + (cbSceneParam._m0[72u].w * _2614)));
    SV_Target.w = cbInstanceData._m0[_2489].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2489].w;
}


