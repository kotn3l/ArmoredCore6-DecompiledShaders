#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1170;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _217 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _218 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _219 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _225 = inversesqrt(dot(vec3(_217, _218, _219), vec3(_217, _218, _219)));
    float _232 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _239 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _245 = uint(roundEven(NORMAL.w)) * 13u;
    uint _250 = _245 + 1u;
    uint _254 = _245 + 2u;
    float _263 = sqrt(((cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x) + (cbInstanceData._m0[_245].x * cbInstanceData._m0[_245].x)) + (cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x));
    float _264 = _263 * TEXCOORD.z;
    float _265 = _263 * TEXCOORD.w;
    vec4 _285 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _291 = _285.x * cbMtdParam._m0[11u].x;
    float _292 = _285.y * cbMtdParam._m0[11u].y;
    float _293 = _285.z * cbMtdParam._m0[11u].z;
    vec4 _312 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _264) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _265) + cbTextureTilingScale._m0[5u].w));
    vec4 _350 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _352 = _350.x;
    float _364 = dot(vec4(_352, _350.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _381 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_352 - _364) * cbMtdParam._m0[24u].y) + _364) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3524 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _382 = isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0));
    float _389 = (_382 * ((_312.x * cbMtdParam._m0[12u].x) - _291)) + _291;
    float _390 = (_382 * ((_312.y * cbMtdParam._m0[12u].y) - _292)) + _292;
    float _391 = (_382 * ((_312.z * cbMtdParam._m0[12u].z) - _293)) + _293;
    vec4 _404 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _264) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _265) + cbTextureTilingScale._m0[4u].w));
    vec4 _421 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _423 = _421.x;
    float _424 = _421.y;
    float _425 = _421.z;
    float _434 = ((_404.z - _425) * _382) + _425;
    float _437 = ((((_404.x - _423) * _382) + _423) * 2.0) + (-1.0);
    float _439 = ((((_404.y - _424) * _382) + _424) * 2.0) + (-1.0);
    float _440 = dot(vec2(_437, _439), vec2(_437, _439));
    float _3535 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _445 = sqrt(1.0 - (isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0))));
    vec4 _458 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _472 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _264) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _265) + cbTextureTilingScale._m0[19u].w));
    float _474 = _472.x;
    float _475 = 1.0 - _474;
    float _503 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_474 - _475) * cbMtdParam._m0[24u].w) + _475) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3546 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _504 = isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0));
    float _512 = ((((cbMtdParam._m0[10u].x - _389) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _504) + _389;
    float _513 = ((((cbMtdParam._m0[10u].y - _390) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _504) + _390;
    float _514 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _391)) * _504) + _391;
    vec4 _526 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _540 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _542 = _540.x;
    float _560 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _264) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _265) + cbTextureTilingScale._m0[9u].w)).x - _542) * _382) + _542;
    float _564 = ((_526.x - _560) * cbMtdParam._m0[19u].z) + _560;
    float _566 = _564 - (_564 * _504);
    float _570 = ((cbMtdParam._m0[23u].y - _434) * _504) + _434;
    vec4 _589 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _264) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _265) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _595 = (_589.x * 2.0) + (-1.0);
    float _596 = (_589.y * 2.0) + (-1.0);
    float _597 = dot(vec2(_595, _596), vec2(_595, _596));
    float _3557 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _613 = (_504 * (((cbMtdParam._m0[22u].z * _437) - _437) + _595)) + _437;
    float _614 = (_504 * (((cbMtdParam._m0[22u].z * _439) - _439) + _596)) + _439;
    float _615 = (_504 * (sqrt(1.0 - (isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0)))) - _445)) + _445;
    float _617 = cbMtdParam._m0[22u].x + _458.w;
    float _620 = fma(_615, _232 * NORMAL.x, fma(_614, _239 * TANGENT.x, (_225 * _217) * _613));
    float _623 = fma(_615, _232 * NORMAL.y, fma(_614, _239 * TANGENT.y, (_225 * _218) * _613));
    float _626 = fma(_615, _232 * NORMAL.z, fma(_614, _239 * TANGENT.z, (_225 * _219) * _613));
    float _630 = inversesqrt(dot(vec3(_620, _623, _626), vec3(_620, _623, _626)));
    float _631 = _630 * _620;
    float _632 = _630 * _623;
    float _633 = _630 * _626;
    float _3568 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
    float _634 = isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0));
    float _3579 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _3590 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _3601 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _3612 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _3623 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _639 = isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0));
    float _653 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _693 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _703 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _693);
    float _704 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _693);
    float _705 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _693);
    float _709 = inversesqrt(dot(vec3(_703, _704, _705), vec3(_703, _704, _705)));
    float _710 = _703 * _709;
    float _711 = _704 * _709;
    float _712 = _705 * _709;
    float _718 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _719 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _737 = fma(_633, cbSceneParam._m0[5u].z, fma(_632, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _631));
    float _740 = fma(_633, cbSceneParam._m0[6u].z, fma(_632, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _631));
    float _743 = fma(_633, cbSceneParam._m0[7u].z, fma(_632, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _631));
    uint _757 = (_245 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _763 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0)))) * cbInstanceData._m0[_757].x;
    float _764 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0)))) * cbInstanceData._m0[_757].y;
    float _765 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0)))) * cbInstanceData._m0[_757].z;
    float _3634 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
    float _766 = isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0));
    float _3645 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    float _767 = isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0));
    float _3656 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    float _768 = isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0));
    float _769 = 1.0 - _639;
    float _770 = _766 * _769;
    float _771 = _767 * _769;
    float _772 = _768 * _769;
    float _777 = (_766 + (-0.039999999105930328369140625)) * _639;
    float _778 = (_767 + (-0.039999999105930328369140625)) * _639;
    float _779 = (_768 + (-0.039999999105930328369140625)) * _639;
    float _780 = _777 + 0.039999999105930328369140625;
    float _782 = _778 + 0.039999999105930328369140625;
    float _783 = _779 + 0.039999999105930328369140625;
    vec4 _792 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _718, cbSceneParam._m0[86u].y * _719));
    float _796 = ((isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0))) * TEXCOORD_5.w) * _792.x;
    float _797 = dot(vec3(_631, _632, _633), vec3(_710, _711, _712));
    float _800 = _797 * 2.0;
    float _804 = (_800 * _631) - _710;
    float _805 = (_800 * _632) - _711;
    float _806 = (_800 * _633) - _712;
    float _810 = abs(dot(vec3(_710, _711, _712), vec3(_631, _632, _633)));
    float _3667 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
    float _812 = sqrt(_634);
    float _825 = exp2((_812 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_812 * 3.0));
    float _831 = (1.0 - _825) * ((_812 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _832 = _825 * _812;
    float _860 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _864 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _868 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1169;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _894 = fma(_868, cbModelParam._m0[26u].z, fma(_864, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _860));
        float _898 = fma(_868, cbModelParam._m0[27u].z, fma(_864, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _860));
        float _902 = fma(_868, cbModelParam._m0[28u].z, fma(_864, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _860));
        float _927 = _860 + _631;
        float _928 = _864 + _632;
        float _929 = _868 + _633;
        float _939 = fma(_929, cbModelParam._m0[26u].z, fma(_928, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _927)) - _894;
        float _940 = fma(_929, cbModelParam._m0[27u].z, fma(_928, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _927)) - _898;
        float _941 = fma(_929, cbModelParam._m0[28u].z, fma(_928, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _927)) - _902;
        float _945 = inversesqrt(dot(vec3(_939, _940, _941), vec3(_939, _940, _941)));
        float _958 = ((_945 * _939) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_894 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _959 = ((_945 * _940) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_898 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _960 = ((_945 * _941) / cbModelParam._m0[34u].z) + ((((((_902 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _963 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_958, _959, _960), 0.0);
        vec4 _970 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_958, _959, _960), 0.0);
        vec4 _977 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_958, _959, _960), 0.0);
        vec4 _984 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_958, _959, _960), 0.0);
        float _997 = exp2((_963.w + (-0.5)) * 20.0) * 2.0;
        float _998 = _997 * (_963.x + (-0.5));
        float _999 = _997 * (_963.y + (-0.5));
        float _1000 = _997 * (_963.z + (-0.5));
        float _1007 = exp2((_970.w + (-0.5)) * 20.0) * 2.0;
        float _1008 = _1007 * (_970.x + (-0.5));
        float _1009 = _1007 * (_970.y + (-0.5));
        float _1010 = _1007 * (_970.z + (-0.5));
        float _1017 = exp2((_977.w + (-0.5)) * 20.0) * 2.0;
        float _1018 = _1017 * (_977.x + (-0.5));
        float _1019 = _1017 * (_977.y + (-0.5));
        float _1020 = _1017 * (_977.z + (-0.5));
        float _1027 = exp2((_984.w + (-0.5)) * 20.0) * 2.0;
        float _1028 = _1027 * (_984.x + (-0.5));
        float _1029 = _1027 * (_984.y + (-0.5));
        float _1030 = _1027 * (_984.z + (-0.5));
        float _1031 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1032 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1033 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1034 = _998 * 0.5;
        float _1035 = _1008 * 0.5;
        float _1036 = _1018 * 0.5;
        float _1037 = dot(vec3(_1034, _1035, _1036), vec3(_1034, _1035, _1036));
        float _1042 = (_1037 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1037);
        float _1051 = (dot(vec3(_631, _632, _633), vec3(_1042 * _1034, _1042 * _1035, _1042 * _1036)) + 1.0) * 0.5;
        float _3693 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1061 = sqrt(((_1035 * _1035) + (_1034 * _1034)) + (_1036 * _1036)) / (_1031 + 9.9999997473787516355514526367188e-06);
        float _3704 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1062 = isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0));
        float _1063 = _1062 * 2.0;
        float _1067 = (1.0 - _1062) / (_1062 + 1.0);
        float _3715 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1068 = isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0));
        float _1077 = ((((1.0 - _1068) * (_1063 + 2.0)) * exp2(log2(isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0))) * (_1063 + 1.0))) + _1068) * _1031;
        float _1078 = _999 * 0.5;
        float _1079 = _1009 * 0.5;
        float _1080 = _1019 * 0.5;
        float _1081 = dot(vec3(_1078, _1079, _1080), vec3(_1078, _1079, _1080));
        float _1086 = (_1081 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1081);
        float _1094 = (dot(vec3(_631, _632, _633), vec3(_1086 * _1078, _1086 * _1079, _1086 * _1080)) + 1.0) * 0.5;
        float _3726 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1103 = sqrt(((_1079 * _1079) + (_1078 * _1078)) + (_1080 * _1080)) / (_1032 + 9.9999997473787516355514526367188e-06);
        float _3737 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1104 = isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0));
        float _1105 = _1104 * 2.0;
        float _1109 = (1.0 - _1104) / (_1104 + 1.0);
        float _3748 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1110 = isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0));
        float _1119 = ((((1.0 - _1110) * (_1105 + 2.0)) * exp2(log2(isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0))) * (_1105 + 1.0))) + _1110) * _1032;
        float _1120 = _1000 * 0.5;
        float _1121 = _1010 * 0.5;
        float _1122 = _1020 * 0.5;
        float _1123 = dot(vec3(_1120, _1121, _1122), vec3(_1120, _1121, _1122));
        float _1128 = (_1123 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1123);
        float _1136 = (dot(vec3(_631, _632, _633), vec3(_1128 * _1120, _1128 * _1121, _1128 * _1122)) + 1.0) * 0.5;
        float _3759 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1145 = sqrt(((_1121 * _1121) + (_1120 * _1120)) + (_1122 * _1122)) / (_1033 + 9.9999997473787516355514526367188e-06);
        float _3770 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1146 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
        float _1147 = _1146 * 2.0;
        float _1151 = (1.0 - _1146) / (_1146 + 1.0);
        float _3781 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1152 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
        float _1161 = ((((1.0 - _1152) * (_1147 + 2.0)) * exp2(log2(isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0))) * (_1147 + 1.0))) + _1152) * _1033;
        _1169 = _1000;
        _1171 = _999;
        _1172 = _998;
        _1173 = _1010;
        _1174 = _1009;
        _1175 = _1008;
        _1176 = _1020;
        _1177 = _1019;
        _1178 = _1018;
        _1179 = _1033;
        _1180 = _1032;
        _1181 = _1031;
        _1182 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0)));
        _1183 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0)));
        _1184 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0)));
    }
    else
    {
        _1169 = _1170;
        _1171 = _1170;
        _1172 = _1170;
        _1173 = _1170;
        _1174 = _1170;
        _1175 = _1170;
        _1176 = _1170;
        _1177 = _1170;
        _1178 = _1170;
        _1179 = _1170;
        _1180 = _1170;
        _1181 = _1170;
        _1182 = 0.0;
        _1183 = 0.0;
        _1184 = 0.0;
    }
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1209 = fma(_868, cbModelParam._m0[30u].z, fma(_864, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _860));
        float _1213 = fma(_868, cbModelParam._m0[31u].z, fma(_864, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _860));
        float _1217 = fma(_868, cbModelParam._m0[32u].z, fma(_864, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _860));
        float _1240 = _860 + _631;
        float _1241 = _864 + _632;
        float _1242 = _868 + _633;
        float _1252 = fma(_1242, cbModelParam._m0[30u].z, fma(_1241, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1240)) - _1209;
        float _1253 = fma(_1242, cbModelParam._m0[31u].z, fma(_1241, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1240)) - _1213;
        float _1254 = fma(_1242, cbModelParam._m0[32u].z, fma(_1241, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1240)) - _1217;
        float _1258 = inversesqrt(dot(vec3(_1252, _1253, _1254), vec3(_1252, _1253, _1254)));
        float _1271 = ((_1258 * _1252) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1209 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1272 = ((_1258 * _1253) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1213 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1273 = ((_1258 * _1254) / cbModelParam._m0[35u].z) + ((((((_1217 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1275 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1271, _1272, _1273), 0.0);
        vec4 _1282 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1271, _1272, _1273), 0.0);
        vec4 _1289 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1271, _1272, _1273), 0.0);
        vec4 _1296 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1271, _1272, _1273), 0.0);
        float _1308 = exp2((_1275.w + (-0.5)) * 20.0) * 2.0;
        float _1309 = _1308 * (_1275.x + (-0.5));
        float _1310 = _1308 * (_1275.y + (-0.5));
        float _1311 = _1308 * (_1275.z + (-0.5));
        float _1318 = exp2((_1282.w + (-0.5)) * 20.0) * 2.0;
        float _1319 = _1318 * (_1282.x + (-0.5));
        float _1320 = _1318 * (_1282.y + (-0.5));
        float _1321 = _1318 * (_1282.z + (-0.5));
        float _1328 = exp2((_1289.w + (-0.5)) * 20.0) * 2.0;
        float _1329 = _1328 * (_1289.x + (-0.5));
        float _1330 = _1328 * (_1289.y + (-0.5));
        float _1331 = _1328 * (_1289.z + (-0.5));
        float _1338 = exp2((_1296.w + (-0.5)) * 20.0) * 2.0;
        float _1339 = _1338 * (_1296.x + (-0.5));
        float _1340 = _1338 * (_1296.y + (-0.5));
        float _1341 = _1338 * (_1296.z + (-0.5));
        float _1342 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1343 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1344 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1345 = _1309 * 0.5;
        float _1346 = _1319 * 0.5;
        float _1347 = _1329 * 0.5;
        float _1348 = dot(vec3(_1345, _1346, _1347), vec3(_1345, _1346, _1347));
        float _1353 = (_1348 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1348);
        float _1361 = (dot(vec3(_631, _632, _633), vec3(_1353 * _1345, _1353 * _1346, _1353 * _1347)) + 1.0) * 0.5;
        float _3822 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1370 = sqrt(((_1346 * _1346) + (_1345 * _1345)) + (_1347 * _1347)) / (_1342 + 9.9999997473787516355514526367188e-06);
        float _3833 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1371 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
        float _1372 = _1371 * 2.0;
        float _1376 = (1.0 - _1371) / (_1371 + 1.0);
        float _3844 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1377 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
        float _1386 = ((((1.0 - _1377) * (_1372 + 2.0)) * exp2(log2(isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0))) * (_1372 + 1.0))) + _1377) * _1342;
        float _1387 = _1310 * 0.5;
        float _1388 = _1320 * 0.5;
        float _1389 = _1330 * 0.5;
        float _1390 = dot(vec3(_1387, _1388, _1389), vec3(_1387, _1388, _1389));
        float _1395 = (_1390 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1390);
        float _1403 = (dot(vec3(_631, _632, _633), vec3(_1395 * _1387, _1395 * _1388, _1395 * _1389)) + 1.0) * 0.5;
        float _3855 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1412 = sqrt(((_1388 * _1388) + (_1387 * _1387)) + (_1389 * _1389)) / (_1343 + 9.9999997473787516355514526367188e-06);
        float _3866 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1413 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
        float _1414 = _1413 * 2.0;
        float _1418 = (1.0 - _1413) / (_1413 + 1.0);
        float _3877 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1419 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
        float _1428 = ((((1.0 - _1419) * (_1414 + 2.0)) * exp2(log2(isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0))) * (_1414 + 1.0))) + _1419) * _1343;
        float _1429 = _1311 * 0.5;
        float _1430 = _1321 * 0.5;
        float _1431 = _1331 * 0.5;
        float _1432 = dot(vec3(_1429, _1430, _1431), vec3(_1429, _1430, _1431));
        float _1437 = (_1432 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1432);
        float _1445 = (dot(vec3(_631, _632, _633), vec3(_1437 * _1429, _1437 * _1430, _1437 * _1431)) + 1.0) * 0.5;
        float _3888 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1454 = sqrt(((_1430 * _1430) + (_1429 * _1429)) + (_1431 * _1431)) / (_1344 + 9.9999997473787516355514526367188e-06);
        float _3899 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1455 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
        float _1456 = _1455 * 2.0;
        float _1460 = (1.0 - _1455) / (_1455 + 1.0);
        float _3910 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1461 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
        float _1470 = ((((1.0 - _1461) * (_1456 + 2.0)) * exp2(log2(isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0))) * (_1456 + 1.0))) + _1461) * _1344;
        _1478 = _1311;
        _1479 = _1310;
        _1480 = _1309;
        _1481 = _1321;
        _1482 = _1320;
        _1483 = _1319;
        _1484 = _1331;
        _1485 = _1330;
        _1486 = _1329;
        _1487 = _1344;
        _1488 = _1343;
        _1489 = _1342;
        _1490 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0)));
        _1491 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0)));
        _1492 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0)));
    }
    else
    {
        _1478 = _1170;
        _1479 = _1170;
        _1480 = _1170;
        _1481 = _1170;
        _1482 = _1170;
        _1483 = _1170;
        _1484 = _1170;
        _1485 = _1170;
        _1486 = _1170;
        _1487 = _1170;
        _1488 = _1170;
        _1489 = _1170;
        _1490 = 0.0;
        _1491 = 0.0;
        _1492 = 0.0;
    }
    float _1502 = (cbModelParam._m0[1u].x * (_1490 - _1182)) + _1182;
    float _1503 = (cbModelParam._m0[1u].x * (_1491 - _1183)) + _1183;
    float _1504 = (cbModelParam._m0[1u].x * (_1492 - _1184)) + _1184;
    float _1525 = fma(_1504, cbSceneParam._m0[89u].z, fma(_1503, cbSceneParam._m0[89u].y, _1502 * cbSceneParam._m0[89u].x));
    float _1528 = fma(_1504, cbSceneParam._m0[90u].z, fma(_1503, cbSceneParam._m0[90u].y, _1502 * cbSceneParam._m0[90u].x));
    float _1531 = fma(_1504, cbSceneParam._m0[91u].z, fma(_1503, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1502));
    float _1546 = _804 * 0.5;
    float _1547 = _805 * 0.5;
    float _1548 = _806 * 0.5;
    float _1549 = dot(vec4(_1546, _1547, _1548, 1.0), vec4(_1480, _1483, _1486, _1489));
    float _1552 = dot(vec4(_1546, _1547, _1548, 1.0), vec4(_1479, _1482, _1485, _1488));
    float _1555 = dot(vec4(_1546, _1547, _1548, 1.0), vec4(_1478, _1481, _1484, _1487));
    float _1589;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1562 = dot(vec4(_1546, _1547, _1548, 1.0), vec4(_1169, _1173, _1176, _1179));
        float _1566 = dot(vec4(_1546, _1547, _1548, 1.0), vec4(_1171, _1174, _1177, _1180));
        float _1570 = dot(vec4(_1546, _1547, _1548, 1.0), vec4(_1172, _1175, _1178, _1181));
        float _1577 = dot(vec4(cbModelParam._m0[39u]), vec4(_1546, _1547, _1548, 1.0));
        _1589 = dot(vec3(isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0)), isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0)), isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1577) ? 0.0 : (isnan(0.0) ? _1577 : max(0.0, _1577))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1589 = 1.0;
    }
    float _1600;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1591 = dot(vec4(cbModelParam._m0[40u]), vec4(_1546, _1547, _1548, 1.0));
        _1600 = dot(vec3(isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0)), isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0)), isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1591) ? 0.0 : (isnan(0.0) ? _1591 : max(0.0, _1591))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1600 = 1.0;
    }
    float _1604 = (_1600 * cbModelParam._m0[1u].x) + (_1589 * (1.0 - cbModelParam._m0[1u].x));
    float _1614 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _634);
    float _1615 = isnan(_1614) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1614 : min(cbModelParam._m0[25u].z, _1614));
    float _1697;
    float _1699;
    float _1701;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1664 = fma(_868, cbModelParam._m0[13u].z, fma(_864, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _860)) + cbModelParam._m0[13u].w;
        float _1668 = fma(_868, cbModelParam._m0[14u].z, fma(_864, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _860)) + cbModelParam._m0[14u].w;
        float _1672 = fma(_868, cbModelParam._m0[15u].z, fma(_864, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _860)) + cbModelParam._m0[15u].w;
        float _1675 = fma(_806, cbModelParam._m0[13u].z, fma(_805, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _804));
        float _1678 = fma(_806, cbModelParam._m0[14u].z, fma(_805, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _804));
        float _1681 = fma(_806, cbModelParam._m0[15u].z, fma(_805, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _804));
        float _1709;
        if (_1675 > 0.0)
        {
            _1709 = abs((1.0 - _1664) / _1675);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1675 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1664 + 1.0) / _1675);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1709 = frontier_phi_14_12_ladder;
        }
        float _1934;
        if (_1678 > 0.0)
        {
            _1934 = abs((1.0 - _1668) / _1678);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1678 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1668 + 1.0) / _1678);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1934 = frontier_phi_23_19_ladder;
        }
        float _2191;
        if (_1681 > 0.0)
        {
            _2191 = abs((1.0 - _1672) / _1681);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1681 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1672 + 1.0) / _1681);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2191 = frontier_phi_35_30_ladder;
        }
        float _2193 = isnan(_1934) ? _1709 : (isnan(_1709) ? _1934 : min(_1709, _1934));
        float _2194 = isnan(_2191) ? _2193 : (isnan(_2193) ? _2191 : min(_2193, _2191));
        float _2198 = (_2194 * _1675) + _1664;
        float _2199 = (_2194 * _1678) + _1668;
        float _2200 = (_2194 * _1681) + _1672;
        float _2201 = _2194 * 9.9999997473787516355514526367188e-05;
        float _2203 = (-1.0) - _2201;
        float _2205 = _2201 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2200 > _2205) || ((_2200 < _2203) || ((_2199 > _2205) || ((_2199 < _2203) || ((_2198 < _2203) || (_2198 > _2205))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2328 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2200, cbModelParam._m0[9u].z, fma(_2199, cbModelParam._m0[9u].y, _2198 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2200, cbModelParam._m0[10u].z, fma(_2199, cbModelParam._m0[10u].y, _2198 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2200, cbModelParam._m0[11u].z, fma(_2199, cbModelParam._m0[11u].y, _2198 * cbModelParam._m0[11u].x))), _1615);
            frontier_phi_13_35_ladder = _2328.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2328.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2328.x * cbModelParam._m0[1u].y;
        }
        _1697 = frontier_phi_13_35_ladder_2;
        _1699 = frontier_phi_13_35_ladder_1;
        _1701 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1685 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_804, _805, _806), _1615);
        _1697 = _1685.x * cbModelParam._m0[1u].y;
        _1699 = _1685.y * cbModelParam._m0[1u].y;
        _1701 = _1685.z * cbModelParam._m0[1u].y;
    }
    float _1705 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _634);
    float _1706 = isnan(_1705) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1705 : min(cbModelParam._m0[25u].w, _1705));
    float _1797;
    float _1799;
    float _1801;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1761 = fma(_868, cbModelParam._m0[21u].z, fma(_864, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _860)) + cbModelParam._m0[21u].w;
        float _1765 = fma(_868, cbModelParam._m0[22u].z, fma(_864, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _860)) + cbModelParam._m0[22u].w;
        float _1769 = fma(_868, cbModelParam._m0[23u].z, fma(_864, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _860)) + cbModelParam._m0[23u].w;
        float _1772 = fma(_806, cbModelParam._m0[21u].z, fma(_805, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _804));
        float _1775 = fma(_806, cbModelParam._m0[22u].z, fma(_805, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _804));
        float _1778 = fma(_806, cbModelParam._m0[23u].z, fma(_805, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _804));
        float _1939;
        if (_1772 > 0.0)
        {
            _1939 = abs((1.0 - _1761) / _1772);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1772 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1761 + 1.0) / _1772);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1939 = frontier_phi_25_21_ladder;
        }
        float _2218;
        if (_1775 > 0.0)
        {
            _2218 = abs((1.0 - _1765) / _1775);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1775 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1765 + 1.0) / _1775);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2218 = frontier_phi_37_32_ladder;
        }
        float _2431;
        if (_1778 > 0.0)
        {
            _2431 = abs((1.0 - _1769) / _1778);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1778 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1769 + 1.0) / _1778);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2431 = frontier_phi_46_43_ladder;
        }
        float _2433 = isnan(_2218) ? _1939 : (isnan(_1939) ? _2218 : min(_1939, _2218));
        float _2434 = isnan(_2431) ? _2433 : (isnan(_2433) ? _2431 : min(_2433, _2431));
        float _2438 = (_2434 * _1772) + _1761;
        float _2439 = (_2434 * _1775) + _1765;
        float _2440 = (_2434 * _1778) + _1769;
        float _2441 = _2434 * 9.9999997473787516355514526367188e-05;
        float _2442 = (-1.0) - _2441;
        float _2444 = _2441 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2440 > _2444) || ((_2440 < _2442) || ((_2439 > _2444) || ((_2439 < _2442) || ((_2438 < _2442) || (_2438 > _2444))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2639 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2440, cbModelParam._m0[17u].z, fma(_2439, cbModelParam._m0[17u].y, _2438 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2440, cbModelParam._m0[18u].z, fma(_2439, cbModelParam._m0[18u].y, _2438 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2440, cbModelParam._m0[19u].z, fma(_2439, cbModelParam._m0[19u].y, _2438 * cbModelParam._m0[19u].x))), _1706);
            frontier_phi_22_46_ladder = _2639.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2639.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2639.x * cbModelParam._m0[1u].z;
        }
        _1797 = frontier_phi_22_46_ladder_2;
        _1799 = frontier_phi_22_46_ladder_1;
        _1801 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1781 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_804, _805, _806), _1706);
        _1797 = _1781.x * cbModelParam._m0[1u].z;
        _1799 = _1781.y * cbModelParam._m0[1u].z;
        _1801 = _1781.z * cbModelParam._m0[1u].z;
    }
    float _1814 = (((_831 * _780) + _832) * _796) * ((cbModelParam._m0[1u].w * (_1797 - _1697)) + _1697);
    float _1816 = (((_831 * _782) + _832) * _796) * ((cbModelParam._m0[1u].w * (_1799 - _1699)) + _1699);
    float _1818 = (((_831 * _783) + _832) * _796) * ((cbModelParam._m0[1u].w * (_1801 - _1701)) + _1701);
    float _1821 = fma(_1818, cbSceneParam._m0[89u].z, fma(_1816, cbSceneParam._m0[89u].y, _1814 * cbSceneParam._m0[89u].x));
    float _1824 = fma(_1818, cbSceneParam._m0[90u].z, fma(_1816, cbSceneParam._m0[90u].y, _1814 * cbSceneParam._m0[90u].x));
    float _1827 = fma(_1818, cbSceneParam._m0[91u].z, fma(_1816, cbSceneParam._m0[91u].y, _1814 * cbSceneParam._m0[91u].x));
    vec4 _1835 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_718, _719));
    float _1837 = _1835.w;
    float _1849 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1837);
    float _1850 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1837);
    float _1851 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1837);
    uvec4 _1855 = floatBitsToUint(cbInstanceData._m0[_245 + 5u]);
    uint _1857 = _1855.x * 14u;
    uint _1858 = _1857 + 13u;
    float _1865 = _796 + (-1.0);
    float _1870 = (cbLight._m0[_1858].x * _1865) + 1.0;
    float _1871 = (cbLight._m0[_1858].y * _1865) + 1.0;
    float _1872 = (cbLight._m0[_1858].z * _1865) + 1.0;
    float _1873 = (cbLight._m0[_1858].w * _1865) + 1.0;
    uint _1874 = _1857 + 5u;
    float _1880 = isnan(1.0) ? _1871 : (isnan(_1871) ? 1.0 : min(_1871, 1.0));
    uint _1884 = _1857 + 4u;
    float _1893 = isnan(1.0) ? _1870 : (isnan(_1870) ? 1.0 : min(_1870, 1.0));
    uint _1897 = _1857 | 1u;
    float _1908 = dot(vec3(cbLight._m0[_1857].xyz), vec3(_631, _632, _633));
    float _1911 = dot(vec3(cbLight._m0[_1897].xyz), vec3(_631, _632, _633));
    float _4046 = isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0));
    float _4057 = isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0));
    float _1916 = (isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0))) * 0.3183098733425140380859375;
    float _1918 = (isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0))) * 0.3183098733425140380859375;
    float _1925 = ((cbLight._m0[_1874].x * _1880) * _1918) + (((cbLight._m0[_1884].x * _1849) * _1893) * _1916);
    float _1926 = ((_1880 * cbLight._m0[_1874].y) * _1918) + (((cbLight._m0[_1884].y * _1850) * _1893) * _1916);
    float _1927 = ((_1880 * cbLight._m0[_1874].z) * _1918) + (((cbLight._m0[_1884].z * _1851) * _1893) * _1916);
    uvec4 _1931 = floatBitsToUint(cbLight._m0[_1857 + 12u]);
    bool _1933 = _1931.x == 0u;
    float _1944;
    float _1946;
    float _1948;
    if (_1933)
    {
        _1944 = _1925;
        _1946 = _1926;
        _1948 = _1927;
    }
    else
    {
        uint _1952 = _1857 + 6u;
        float _1968 = (dot(vec3(cbLight._m0[_1857 + 2u].xyz), vec3(_631, _632, _633)) * 0.5) + 0.5;
        float _1969 = _1968 * _1968;
        float _4068 = isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0));
        float _1970 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
        float _1971 = isnan(1.0) ? _1872 : (isnan(_1872) ? 1.0 : min(_1872, 1.0));
        _1944 = (((cbLight._m0[_1952].x * 0.3183098733425140380859375) * _1970) * _1971) + _1925;
        _1946 = (((cbLight._m0[_1952].y * 0.3183098733425140380859375) * _1970) * _1971) + _1926;
        _1948 = (((cbLight._m0[_1952].z * 0.3183098733425140380859375) * _1970) * _1971) + _1927;
    }
    bool _1951 = _1931.y == 0u;
    float _1989;
    float _1991;
    float _1993;
    if (_1951)
    {
        _1989 = _1944;
        _1991 = _1946;
        _1993 = _1948;
    }
    else
    {
        uint _2162 = _1857 + 7u;
        float _2178 = (dot(vec3(cbLight._m0[_1857 + 3u].xyz), vec3(_631, _632, _633)) * 0.5) + 0.5;
        float _2179 = _2178 * _2178;
        float _4084 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
        float _2180 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
        float _2181 = isnan(1.0) ? _1873 : (isnan(_1873) ? 1.0 : min(_1873, 1.0));
        _1989 = (((cbLight._m0[_2162].x * 0.3183098733425140380859375) * _2180) * _2181) + _1944;
        _1991 = (((cbLight._m0[_2162].y * 0.3183098733425140380859375) * _2180) * _2181) + _1946;
        _1993 = (((cbLight._m0[_2162].z * 0.3183098733425140380859375) * _2180) * _2181) + _1948;
    }
    uint _1996 = _1857 + 8u;
    float _2009 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1857].w)) * _634) * 0.949999988079071044921875);
    float _2010 = _2009 * _2009;
    float _2011 = cbLight._m0[_1857].x + _710;
    float _2012 = cbLight._m0[_1857].y + _711;
    float _2013 = cbLight._m0[_1857].z + _712;
    float _2017 = inversesqrt(dot(vec3(_2011, _2012, _2013), vec3(_2011, _2012, _2013)));
    float _2018 = _2017 * _2011;
    float _2019 = _2017 * _2012;
    float _2020 = _2017 * _2013;
    float _2021 = dot(vec3(_631, _632, _633), vec3(cbLight._m0[_1857].xyz));
    float _4100 = isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0));
    float _2024 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
    float _4111 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
    float _2025 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
    float _2026 = dot(vec3(_631, _632, _633), vec3(_2018, _2019, _2020));
    float _4122 = isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0));
    float _2029 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
    float _2030 = dot(vec3(cbLight._m0[_1857].xyz), vec3(_2018, _2019, _2020));
    float _4133 = isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0));
    float _2034 = _2010 * _2010;
    float _2038 = ((_2029 * _2029) * (_2034 + (-1.0))) + 1.0;
    float _2046 = exp2(log2(1.0 - (isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0)))) * 5.0);
    float _2047 = 0.959999978542327880859375 - _777;
    float _2049 = 0.959999978542327880859375 - _778;
    float _2050 = 0.959999978542327880859375 - _779;
    float _2057 = 1.0 - _2010;
    float _2068 = (0.5 / (((_2025 * ((_2024 * _2057) + _2010)) + 9.9999999392252902907785028219223e-09) + (((_2025 * _2057) + _2010) * _2024))) * _2024;
    float _4144 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
    float _2070 = (isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0))) * (_2034 / ((_2038 * _2038) * 3.141590118408203125));
    uint _2084 = _1857 + 9u;
    float _2095 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1897].w)) * _634) * 0.949999988079071044921875);
    float _2096 = _2095 * _2095;
    float _2097 = cbLight._m0[_1897].x + _710;
    float _2098 = cbLight._m0[_1897].y + _711;
    float _2099 = cbLight._m0[_1897].z + _712;
    float _2103 = inversesqrt(dot(vec3(_2097, _2098, _2099), vec3(_2097, _2098, _2099)));
    float _2104 = _2103 * _2097;
    float _2105 = _2103 * _2098;
    float _2106 = _2103 * _2099;
    float _2107 = dot(vec3(_631, _632, _633), vec3(cbLight._m0[_1897].xyz));
    float _4155 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
    float _2110 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
    float _2111 = dot(vec3(_631, _632, _633), vec3(_2104, _2105, _2106));
    float _4166 = isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0));
    float _2114 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
    float _2115 = dot(vec3(cbLight._m0[_1897].xyz), vec3(_2104, _2105, _2106));
    float _4177 = isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0));
    float _2119 = _2096 * _2096;
    float _2123 = ((_2114 * _2114) * (_2119 + (-1.0))) + 1.0;
    float _2130 = exp2(log2(1.0 - (isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0)))) * 5.0);
    float _2137 = 1.0 - _2096;
    float _2147 = (0.5 / (((_2025 * ((_2110 * _2137) + _2096)) + 9.9999999392252902907785028219223e-09) + (((_2025 * _2137) + _2096) * _2110))) * _2110;
    float _4188 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
    float _2149 = (isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0))) * (_2119 / ((_2123 * _2123) * 3.141590118408203125));
    float _2159 = (((((_2130 * _2047) + _780) * cbLight._m0[_2084].x) * _2149) * _1880) + ((((cbLight._m0[_1996].x * _1849) * ((_2046 * _2047) + _780)) * _2070) * _1893);
    float _2160 = (((((_2130 * _2049) + _782) * cbLight._m0[_2084].y) * _2149) * _1880) + ((((cbLight._m0[_1996].y * _1850) * ((_2046 * _2049) + _782)) * _2070) * _1893);
    float _2161 = (((((_2130 * _2050) + _783) * cbLight._m0[_2084].z) * _2149) * _1880) + ((((cbLight._m0[_1996].z * _1851) * ((_2046 * _2050) + _783)) * _2070) * _1893);
    float _2223;
    float _2225;
    float _2227;
    if (_1933)
    {
        _2223 = _2159;
        _2225 = _2160;
        _2227 = _2161;
    }
    else
    {
        uint _2229 = _1857 + 2u;
        uint _2233 = _1857 + 10u;
        float _2247 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2229].w)) * _634) * 0.949999988079071044921875);
        float _2248 = _2247 * _2247;
        float _2249 = cbLight._m0[_2229].x + _710;
        float _2250 = cbLight._m0[_2229].y + _711;
        float _2251 = cbLight._m0[_2229].z + _712;
        float _2255 = inversesqrt(dot(vec3(_2249, _2250, _2251), vec3(_2249, _2250, _2251)));
        float _2256 = _2255 * _2249;
        float _2257 = _2255 * _2250;
        float _2258 = _2255 * _2251;
        float _2259 = dot(vec3(_631, _632, _633), vec3(cbLight._m0[_2229].xyz));
        float _4199 = isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0));
        float _2262 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _2263 = dot(vec3(_631, _632, _633), vec3(_2256, _2257, _2258));
        float _4210 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0));
        float _2266 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
        float _2267 = dot(vec3(cbLight._m0[_2229].xyz), vec3(_2256, _2257, _2258));
        float _4221 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0));
        float _2271 = _2248 * _2248;
        float _2275 = ((_2266 * _2266) * (_2271 + (-1.0))) + 1.0;
        float _2282 = exp2(log2(1.0 - (isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0)))) * 5.0);
        float _2289 = 1.0 - _2248;
        float _2299 = (0.5 / (((_2025 * ((_2262 * _2289) + _2248)) + 9.9999999392252902907785028219223e-09) + (((_2025 * _2289) + _2248) * _2262))) * _2262;
        float _4232 = isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0));
        float _2301 = (isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0))) * (_2271 / ((_2275 * _2275) * 3.141590118408203125));
        float _2302 = isnan(1.0) ? _1872 : (isnan(_1872) ? 1.0 : min(_1872, 1.0));
        _2223 = (((((_2282 * _2047) + _780) * cbLight._m0[_2233].x) * _2301) * _2302) + _2159;
        _2225 = (((((_2282 * _2049) + _782) * cbLight._m0[_2233].y) * _2301) * _2302) + _2160;
        _2227 = (((((_2282 * _2050) + _783) * cbLight._m0[_2233].z) * _2301) * _2302) + _2161;
    }
    float _2337;
    float _2339;
    float _2341;
    if (_1951)
    {
        _2337 = _2223;
        _2339 = _2225;
        _2341 = _2227;
    }
    else
    {
        uint _2348 = _1857 + 3u;
        uint _2352 = _1857 + 11u;
        float _2366 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2348].w)) * _634) * 0.949999988079071044921875);
        float _2367 = _2366 * _2366;
        float _2368 = cbLight._m0[_2348].x + _710;
        float _2369 = cbLight._m0[_2348].y + _711;
        float _2370 = cbLight._m0[_2348].z + _712;
        float _2374 = inversesqrt(dot(vec3(_2368, _2369, _2370), vec3(_2368, _2369, _2370)));
        float _2375 = _2374 * _2368;
        float _2376 = _2374 * _2369;
        float _2377 = _2374 * _2370;
        float _2378 = dot(vec3(_631, _632, _633), vec3(cbLight._m0[_2348].xyz));
        float _4248 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
        float _2381 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
        float _2382 = dot(vec3(_631, _632, _633), vec3(_2375, _2376, _2377));
        float _4259 = isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0));
        float _2385 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
        float _2386 = dot(vec3(cbLight._m0[_2348].xyz), vec3(_2375, _2376, _2377));
        float _4270 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
        float _2390 = _2367 * _2367;
        float _2394 = ((_2385 * _2385) * (_2390 + (-1.0))) + 1.0;
        float _2401 = exp2(log2(1.0 - (isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0)))) * 5.0);
        float _2408 = 1.0 - _2367;
        float _2418 = (0.5 / (((_2025 * ((_2381 * _2408) + _2367)) + 9.9999999392252902907785028219223e-09) + (((_2025 * _2408) + _2367) * _2381))) * _2381;
        float _4281 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
        float _2420 = (isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0))) * (_2390 / ((_2394 * _2394) * 3.141590118408203125));
        float _2421 = isnan(1.0) ? _1873 : (isnan(_1873) ? 1.0 : min(_1873, 1.0));
        _2337 = (((((_2401 * _2047) + _780) * cbLight._m0[_2352].x) * _2420) * _2421) + _2223;
        _2339 = (((((_2401 * _2049) + _782) * cbLight._m0[_2352].y) * _2420) * _2421) + _2225;
        _2341 = (((((_2401 * _2050) + _783) * cbLight._m0[_2352].z) * _2420) * _2421) + _2227;
    }
    float _2556;
    float _2558;
    float _2560;
    float _2562;
    float _2564;
    float _2566;
    if (_1855.y == 0u)
    {
        float _2496 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2497 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2496;
        float _2498 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2496;
        float _2499 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2496;
        uvec4 _2511 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2512 = _2511.x;
        uint _2523 = uint((float(_2511.y) * floor(float(uint(cbSceneParam._m0[85u].y * _719) / _2512))) + floor(float(uint(cbSceneParam._m0[85u].x * _718) / _2512)));
        float _2533 = (log2(_2499 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2534 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
        uint _2537 = uint(isnan(14.0) ? _2534 : (isnan(_2534) ? 14.0 : min(_2534, 14.0)));
        uvec4 _2542 = texelFetch(g_lightClusterGridBuffer, int(((_2537 << 2u) + (_2523 << 6u)) >> 2u));
        uint _2543 = _2542.x;
        uint _2544 = _2511.z;
        float _2644;
        float _2646;
        float _2648;
        float _2650;
        float _2652;
        float _2654;
        if (((((1u << ((_2544 >> 4u) & 15u)) + 4294967295u) & _2543) == 0u) || ((_2544 & 240u) == 0u))
        {
            _2644 = 0.0;
            _2646 = 0.0;
            _2648 = 0.0;
            _2650 = 0.0;
            _2652 = 0.0;
            _2654 = 0.0;
        }
        else
        {
            float _2645;
            float _2647;
            float _2649;
            float _2651;
            float _2653;
            float _2655;
            float _2789 = 0.0;
            float _2790 = 0.0;
            float _2791 = 0.0;
            float _2792 = 0.0;
            float _2793 = 0.0;
            float _2794 = 0.0;
            uint _2795 = 0u;
            uint _2804;
            bool _2805;
            for (;;)
            {
                _2804 = texelFetch(g_lightClassification, int((((_2537 << 5u) + (_2523 << 9u)) + (_2795 << 2u)) >> 2u)).x;
                _2805 = _2804 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2805)
                {
                    frontier_phi_61_pred = _2789;
                    frontier_phi_61_pred_1 = _2794;
                    frontier_phi_61_pred_2 = _2793;
                    frontier_phi_61_pred_3 = _2792;
                    frontier_phi_61_pred_4 = _2791;
                    frontier_phi_61_pred_5 = _2790;
                }
                else
                {
                    float _2913;
                    float _2914;
                    float _2915;
                    float _2916;
                    float _2917;
                    float _2918;
                    uint _2919;
                    _2913 = _2789;
                    _2914 = _2790;
                    _2915 = _2791;
                    _2916 = _2792;
                    _2917 = _2793;
                    _2918 = _2794;
                    _2919 = _2804;
                    float _2845;
                    float _2846;
                    float _2847;
                    float _2848;
                    float _2849;
                    float _2850;
                    for (;;)
                    {
                        uint _2923 = uint(findLSB(_2919)) + (_2795 << 5u);
                        uint _2920 = (_2919 + 4294967295u) & _2919;
                        uint _2925 = _2923 * 48u;
                        vec4 _2939 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2925)).x, texelFetch(g_PointLightRenderingBuffer, int(_2925 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2925 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2925 + 3u)).x));
                        uint _2945 = (_2923 * 48u) + 4u;
                        vec4 _2958 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2945)).x, texelFetch(g_PointLightRenderingBuffer, int(_2945 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2945 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2945 + 3u)).x));
                        uint _2964 = (_2923 * 48u) + 8u;
                        vec3 _2975 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2964)).x, texelFetch(g_PointLightRenderingBuffer, int(_2964 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2964 + 2u)).x));
                        float _2979 = _2939.x - _2497;
                        float _2980 = _2939.y - _2498;
                        float _2981 = _2939.z - _2499;
                        float _2982 = dot(vec3(_2979, _2980, _2981), vec3(_2979, _2980, _2981));
                        float _2985 = inversesqrt(_2982);
                        float _2986 = _2985 * _2979;
                        float _2987 = _2985 * _2980;
                        float _2988 = _2985 * _2981;
                        float _2989 = dot(vec3(_737, _740, _743), vec3(_2986, _2987, _2988));
                        float _2994 = 1.0 - (_2982 * _2939.w);
                        float _4307 = isnan(0.0) ? _2994 : (isnan(_2994) ? 0.0 : max(_2994, 0.0));
                        float _2995 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
                        float _2996 = sqrt(_2982) * _2958.w;
                        float _2999 = 1.39999997615814208984375 / (_2996 + 1.39999997615814208984375);
                        float _3000 = _2999 * _2999;
                        float _3003 = ((1.0 - _3000) * _2989) + _3000;
                        float _3006 = _2996 * _2996;
                        float _3010 = ((isnan(0.0) ? _3003 : (isnan(_3003) ? 0.0 : max(_3003, 0.0))) * _2995) / ((_3006 * 0.699999988079071044921875) + 1.0);
                        float _3014 = (-0.0) - _2497;
                        float _3015 = (-0.0) - _2498;
                        float _3016 = (-0.0) - _2499;
                        float _3020 = inversesqrt(dot(vec3(_3014, _3015, _3016), vec3(_3014, _3015, _3016)));
                        float _3021 = _3020 * _3014;
                        float _3022 = _3020 * _3015;
                        float _3023 = _3020 * _3016;
                        float _3031 = exp2(log2(1.0 / ((_3006 * 3.5) + 5.0)) * 0.25);
                        float _3032 = 1.0 - _812;
                        float _3039 = sqrt(1.0 - ((1.0 - (_3032 * _3032)) * (1.0 - (_3031 * _3031))));
                        float _3040 = _3039 * _3039;
                        float _3041 = _3040 * _3040;
                        float _3042 = _3021 + _2986;
                        float _3043 = _3022 + _2987;
                        float _3044 = _3023 + _2988;
                        float _3048 = inversesqrt(dot(vec3(_3042, _3043, _3044), vec3(_3042, _3043, _3044)));
                        float _3052 = dot(vec3(_737, _740, _743), vec3(_3021, _3022, _3023));
                        float _4323 = isnan(0.0) ? _3052 : (isnan(_3052) ? 0.0 : max(_3052, 0.0));
                        float _3055 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
                        float _3056 = dot(vec3(_737, _740, _743), vec3(_3048 * _3042, _3048 * _3043, _3048 * _3044));
                        float _4334 = isnan(0.0) ? _3056 : (isnan(_3056) ? 0.0 : max(_3056, 0.0));
                        float _3059 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
                        float _3063 = ((_3059 * _3059) * (_3041 + (-1.0))) + 1.0;
                        float _3064 = _2999 * _3040;
                        float _3065 = _3064 * _3064;
                        float _3068 = ((1.0 - _3065) * _2989) + _3065;
                        float _4345 = isnan(0.0) ? _3068 : (isnan(_3068) ? 0.0 : max(_3068, 0.0));
                        float _3069 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
                        float _3070 = 1.0 - _3040;
                        float _3080 = (0.5 / (((_3069 * ((_3055 * _3070) + _3040)) + 9.9999999392252902907785028219223e-09) + (((_3069 * _3070) + _3040) * _3055))) * _3069;
                        float _4356 = isnan(0.0) ? _3080 : (isnan(_3080) ? 0.0 : max(_3080, 0.0));
                        float _3091 = (((_3041 * 3.1415927410125732421875) * (isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0)))) / ((_3063 * _3063) * ((_3006 * 2.1991131305694580078125) + 3.141590118408203125))) * _2995;
                        _2848 = (_3010 * _2958.x) + _2916;
                        _2849 = (_3010 * _2958.y) + _2917;
                        _2850 = (_3010 * _2958.z) + _2918;
                        _2845 = (_3091 * _2975.x) + _2913;
                        _2846 = (_3091 * _2975.y) + _2914;
                        _2847 = (_3091 * _2975.z) + _2915;
                        if (_2920 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2913 = _2845;
                            _2914 = _2846;
                            _2915 = _2847;
                            _2916 = _2848;
                            _2917 = _2849;
                            _2918 = _2850;
                            _2919 = _2920;
                        }
                    }
                    frontier_phi_61_pred = _2845;
                    frontier_phi_61_pred_1 = _2850;
                    frontier_phi_61_pred_2 = _2849;
                    frontier_phi_61_pred_3 = _2848;
                    frontier_phi_61_pred_4 = _2847;
                    frontier_phi_61_pred_5 = _2846;
                }
                _2645 = frontier_phi_61_pred;
                _2655 = frontier_phi_61_pred_1;
                _2653 = frontier_phi_61_pred_2;
                _2651 = frontier_phi_61_pred_3;
                _2649 = frontier_phi_61_pred_4;
                _2647 = frontier_phi_61_pred_5;
                uint _2796 = _2795 + 1u;
                if (_2796 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2789 = _2645;
                    _2790 = _2647;
                    _2791 = _2649;
                    _2792 = _2651;
                    _2793 = _2653;
                    _2794 = _2655;
                    _2795 = _2796;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2644 = _2645;
            _2646 = _2647;
            _2648 = _2649;
            _2650 = _2651;
            _2652 = _2653;
            _2654 = _2655;
        }
        uvec4 _2658 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2659 = _2658.z;
        uint _2661 = (_2659 >> 8u) & 15u;
        float _2757;
        float _2759;
        float _2761;
        float _2763;
        float _2765;
        float _2767;
        if (((4294967295u << _2661) & _2543) == 0u)
        {
            _2757 = _2644;
            _2759 = _2646;
            _2761 = _2648;
            _2763 = _2650;
            _2765 = _2652;
            _2767 = _2654;
        }
        else
        {
            float _2782 = inversesqrt(dot(vec3(_2497, _2498, _2499), vec3(_2497, _2498, _2499)));
            float _2783 = _2782 * _2497;
            float _2784 = _2782 * _2498;
            float _2785 = _2782 * _2499;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2661 < ((_2659 >> 12u) & 15u))
            {
                float _2758;
                float _2760;
                float _2762;
                float _2764;
                float _2766;
                float _2768;
                float _2896 = _2644;
                float _2897 = _2646;
                float _2898 = _2648;
                float _2899 = _2650;
                float _2900 = _2652;
                float _2901 = _2654;
                uint _2902 = _2661;
                uint _2911;
                bool _2912;
                for (;;)
                {
                    _2911 = texelFetch(g_lightClassification, int((((_2537 << 5u) + (_2523 << 9u)) + (_2902 << 2u)) >> 2u)).x;
                    _2912 = _2911 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2912)
                    {
                        frontier_phi_67_pred = _2899;
                        frontier_phi_67_pred_1 = _2900;
                        frontier_phi_67_pred_2 = _2901;
                        frontier_phi_67_pred_3 = _2898;
                        frontier_phi_67_pred_4 = _2897;
                        frontier_phi_67_pred_5 = _2896;
                    }
                    else
                    {
                        float _3096;
                        float _3097;
                        float _3098;
                        float _3099;
                        float _3100;
                        float _3101;
                        float _3390;
                        float _3391;
                        float _3392;
                        float _3393;
                        float _3394;
                        float _3395;
                        float _3109 = _2896;
                        float _3110 = _2897;
                        float _3111 = _2898;
                        float _3112 = _2899;
                        float _3113 = _2900;
                        float _3114 = _2901;
                        uint _3115 = _2911;
                        uint _3116;
                        vec4 _3141;
                        float _3142;
                        vec4 _3157;
                        vec3 _3169;
                        vec4 _3184;
                        vec4 _3200;
                        float _3246;
                        bool _3247;
                        for (;;)
                        {
                            uint _3126 = ((_2902 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3115));
                            _3116 = (_3115 + 4294967295u) & _3115;
                            uint _3128 = _3126 * 40u;
                            _3141 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3128)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3128 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3128 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3128 + 3u)).x));
                            _3142 = _3141.w;
                            uint _3144 = (_3126 * 40u) + 4u;
                            _3157 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3144)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3144 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3144 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3144 + 3u)).x));
                            uint _3159 = (_3126 * 40u) + 8u;
                            _3169 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3159)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3159 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3159 + 2u)).x));
                            uint _3171 = (_3126 * 40u) + 16u;
                            _3184 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3171)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3171 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3171 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3171 + 3u)).x));
                            uint _3187 = (_3126 * 40u) + 20u;
                            _3200 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3187)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3187 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3187 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3187 + 3u)).x));
                            uint _3202 = (_3126 * 40u) + 24u;
                            vec4 _3215 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3202)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 3u)).x));
                            uint _3221 = (_3126 * 40u) + 28u;
                            vec4 _3234 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3221)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 3u)).x));
                            _3246 = fma(_2499, _3234.z, fma(_2498, _3234.y, _3234.x * _2497)) + _3234.w;
                            _3247 = !((fma(_2499, _3215.z, fma(_2498, _3215.y, _3215.x * _2497)) + _3215.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3247)
                            {
                                float _3274 = _3141.x - _2497;
                                float _3275 = _3141.y - _2498;
                                float _3276 = _3141.z - _2499;
                                float _3277 = dot(vec3(_3274, _3275, _3276), vec3(_3274, _3275, _3276));
                                float _3280 = inversesqrt(_3277);
                                float _3281 = _3280 * _3274;
                                float _3282 = _3280 * _3275;
                                float _3283 = _3280 * _3276;
                                float _3287 = 1.0 - (_3277 / (_3142 * _3142));
                                float _4367 = isnan(0.0) ? _3287 : (isnan(_3287) ? 0.0 : max(_3287, 0.0));
                                float _3288 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
                                float _3292 = sqrt(_3277) * _3157.w;
                                float _3294 = 1.39999997615814208984375 / (_3292 + 1.39999997615814208984375);
                                float _3295 = _3294 * _3294;
                                float _3298 = ((1.0 - _3295) * dot(vec3(_3281, _3282, _3283), vec3(_737, _740, _743))) + _3295;
                                float _3301 = _3292 * _3292;
                                float _3305 = (fma(_2499, _3184.z, fma(_2498, _3184.y, _3184.x * _2497)) + _3184.w) / _3246;
                                float _3306 = (fma(_2499, _3200.z, fma(_2498, _3200.y, _3200.x * _2497)) + _3200.w) / _3246;
                                float _3310 = 1.0 - dot(vec2(_3305, _3306), vec2(_3305, _3306));
                                float _4383 = isnan(0.0) ? _3310 : (isnan(_3310) ? 0.0 : max(_3310, 0.0));
                                float _3311 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
                                float _3312 = _3311 * (((isnan(0.0) ? _3298 : (isnan(_3298) ? 0.0 : max(_3298, 0.0))) * _3288) / ((_3301 * 0.699999988079071044921875) + 1.0));
                                float _3324 = exp2(log2(1.0 / ((_3301 * 3.5) + 5.0)) * 0.25);
                                float _3325 = 1.0 - _812;
                                float _3332 = sqrt(1.0 - ((1.0 - (_3325 * _3325)) * (1.0 - (_3324 * _3324))));
                                float _3333 = _3332 * _3332;
                                float _3334 = _3333 * _3333;
                                float _3335 = _3281 - _2783;
                                float _3336 = _3282 - _2784;
                                float _3337 = _3283 - _2785;
                                float _3341 = inversesqrt(dot(vec3(_3335, _3336, _3337), vec3(_3335, _3336, _3337)));
                                float _3345 = dot(vec3(_737, _740, _743), vec3((-0.0) - _2783, (-0.0) - _2784, (-0.0) - _2785));
                                float _4394 = isnan(0.0) ? _3345 : (isnan(_3345) ? 0.0 : max(_3345, 0.0));
                                float _3348 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
                                float _3349 = dot(vec3(_737, _740, _743), vec3(_3341 * _3335, _3341 * _3336, _3341 * _3337));
                                float _4405 = isnan(0.0) ? _3349 : (isnan(_3349) ? 0.0 : max(_3349, 0.0));
                                float _3352 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
                                float _3356 = ((_3352 * _3352) * (_3334 + (-1.0))) + 1.0;
                                float _3357 = _3294 * _3333;
                                float _3358 = _3357 * _3357;
                                float _3364 = ((1.0 - _3358) * dot(vec3(_737, _740, _743), vec3(_3281, _3282, _3283))) + _3358;
                                float _4416 = isnan(0.0) ? _3364 : (isnan(_3364) ? 0.0 : max(_3364, 0.0));
                                float _3365 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
                                float _3366 = 1.0 - _3333;
                                float _3376 = (0.5 / (((_3365 * ((_3348 * _3366) + _3333)) + 9.9999999392252902907785028219223e-09) + (((_3365 * _3366) + _3333) * _3348))) * _3365;
                                float _4427 = isnan(0.0) ? _3376 : (isnan(_3376) ? 0.0 : max(_3376, 0.0));
                                float _3386 = (_3311 * _3288) * (((_3334 * 3.1415927410125732421875) * (isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0)))) / ((_3356 * _3356) * ((_3301 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3386 * _3169.x;
                                frontier_phi_73_pred_1 = _3386 * _3169.y;
                                frontier_phi_73_pred_2 = _3312 * _3157.z;
                                frontier_phi_73_pred_3 = _3312 * _3157.y;
                                frontier_phi_73_pred_4 = _3312 * _3157.x;
                                frontier_phi_73_pred_5 = _3386 * _3169.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3390 = frontier_phi_73_pred;
                            _3391 = frontier_phi_73_pred_1;
                            _3395 = frontier_phi_73_pred_2;
                            _3394 = frontier_phi_73_pred_3;
                            _3393 = frontier_phi_73_pred_4;
                            _3392 = frontier_phi_73_pred_5;
                            _3099 = _3393 + _3112;
                            _3100 = _3394 + _3113;
                            _3101 = _3395 + _3114;
                            _3096 = _3390 + _3109;
                            _3097 = _3391 + _3110;
                            _3098 = _3392 + _3111;
                            if (_3116 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3109 = _3096;
                                _3110 = _3097;
                                _3111 = _3098;
                                _3112 = _3099;
                                _3113 = _3100;
                                _3114 = _3101;
                                _3115 = _3116;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3099;
                        frontier_phi_67_pred_1 = _3100;
                        frontier_phi_67_pred_2 = _3101;
                        frontier_phi_67_pred_3 = _3098;
                        frontier_phi_67_pred_4 = _3097;
                        frontier_phi_67_pred_5 = _3096;
                    }
                    _2764 = frontier_phi_67_pred;
                    _2766 = frontier_phi_67_pred_1;
                    _2768 = frontier_phi_67_pred_2;
                    _2762 = frontier_phi_67_pred_3;
                    _2760 = frontier_phi_67_pred_4;
                    _2758 = frontier_phi_67_pred_5;
                    uint _2903 = _2902 + 1u;
                    if (_2903 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2896 = _2758;
                        _2897 = _2760;
                        _2898 = _2762;
                        _2899 = _2764;
                        _2900 = _2766;
                        _2901 = _2768;
                        _2902 = _2903;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2766;
                frontier_phi_55_56_ladder_1 = _2768;
                frontier_phi_55_56_ladder_2 = _2764;
                frontier_phi_55_56_ladder_3 = _2762;
                frontier_phi_55_56_ladder_4 = _2760;
                frontier_phi_55_56_ladder_5 = _2758;
            }
            else
            {
                frontier_phi_55_56_ladder = _2652;
                frontier_phi_55_56_ladder_1 = _2654;
                frontier_phi_55_56_ladder_2 = _2650;
                frontier_phi_55_56_ladder_3 = _2648;
                frontier_phi_55_56_ladder_4 = _2646;
                frontier_phi_55_56_ladder_5 = _2644;
            }
            _2757 = frontier_phi_55_56_ladder_5;
            _2759 = frontier_phi_55_56_ladder_4;
            _2761 = frontier_phi_55_56_ladder_3;
            _2763 = frontier_phi_55_56_ladder_2;
            _2765 = frontier_phi_55_56_ladder;
            _2767 = frontier_phi_55_56_ladder_1;
        }
        float _2772 = isnan(1.0) ? _796 : (isnan(_796) ? 1.0 : min(_796, 1.0));
        _2556 = (_2772 * _2763) + _1989;
        _2558 = (_2772 * _2765) + _1991;
        _2560 = (_2772 * _2767) + _1993;
        _2562 = ((_2757 * _780) * _2772) + _2337;
        _2564 = ((_2759 * _782) * _2772) + _2339;
        _2566 = ((_2761 * _783) * _2772) + _2341;
    }
    else
    {
        _2556 = _1989;
        _2558 = _1991;
        _2560 = _1993;
        _2562 = _2337;
        _2564 = _2339;
        _2566 = _2341;
    }
    float _4443 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _4454 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _4465 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    uint _2586 = _245 + 6u;
    float _2594 = _718 / cbSceneParam._m0[86u].x;
    float _2595 = _719 / cbSceneParam._m0[86u].y;
    vec4 _2609 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2594, _2595, (log2((isnan(cbSceneParam._m0[77u].w) ? _653 : (isnan(_653) ? cbSceneParam._m0[77u].w : min(_653, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2611 = _2609.x;
    float _2612 = _2609.y;
    float _2613 = _2609.z;
    float _2614 = _2609.w;
    float _2707;
    float _2709;
    float _2711;
    float _2713;
    if (_653 > cbSceneParam._m0[78u].w)
    {
        float _2669 = isnan(_653) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _653 : min(cbSceneParam._m0[80u].w, _653));
        float _2670 = _2669 / _653;
        float _2681 = _2670 * _703;
        float _2682 = _704 * _2670;
        float _2683 = (-0.0) - _2682;
        float _2685 = _2670 * _705;
        float _2687 = (cbSceneParam._m0[77u].w * _2683) / _2669;
        float _2688 = _2687 + cbSceneParam._m0[79u].w;
        float _2689 = cbSceneParam._m0[79u].w - _2682;
        float _2695 = sqrt(((_2681 * _2681) + (_2682 * _2682)) + (_2685 * _2685));
        float _2698 = (1.0 - (cbSceneParam._m0[77u].w / _2669)) * _2695;
        float _2703 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2705 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2858;
        if (abs((_2683 - _2687) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2858 = ((((_2688 > 0.0) ? exp2(_2703 * _2688) : (2.0 - exp2(_2705 * _2688))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2698;
        }
        else
        {
            float _2818 = 1.0 / cbSceneParam._m0[80u].x;
            float _2819 = isnan(_2689) ? _2688 : (isnan(_2688) ? _2689 : max(_2688, _2689));
            float _2820 = isnan(_2689) ? _2688 : (isnan(_2688) ? _2689 : min(_2688, _2689));
            float _2829 = isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : min(_2819, 0.0));
            float _2830 = isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : min(_2820, 0.0));
            _2858 = ((abs(_2695 / _2683) * cbSceneParam._m0[80u].y) * ((((_2829 - _2830) * 2.0) - ((exp2(_2703 * (isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : max(_2819, 0.0)))) - exp2(_2703 * (isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : max(_2820, 0.0))))) * _2818)) - ((exp2(_2705 * _2829) - exp2(_2705 * _2830)) * _2818))) + (_2698 * cbSceneParam._m0[80u].z);
        }
        vec4 _2860 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2594, _2595, 1.0), 0.0);
        float _2869 = exp2((_2858 * (-1.44269502162933349609375)) * (1.0 - _2860.w));
        float _2870 = log2(_2869);
        float _2886 = log2(_2614);
        _2707 = (exp2(_2886 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2870 * cbSceneParam._m0[78u].x)) * _2860.x) / cbSceneParam._m0[78u].x)) + _2611;
        _2709 = (exp2(_2886 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2870 * cbSceneParam._m0[78u].y)) * _2860.y) / cbSceneParam._m0[78u].y)) + _2612;
        _2711 = (exp2(_2886 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2870 * cbSceneParam._m0[78u].z)) * _2860.z) / cbSceneParam._m0[78u].z)) + _2613;
        _2713 = _2869 * _2614;
    }
    else
    {
        _2707 = _2611;
        _2709 = _2612;
        _2711 = _2613;
        _2713 = _2614;
    }
    float _2725 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2726 = _2725 == 3.0;
    float _2727 = log2(_2713);
    float _2734 = exp2(_2727 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0))) * (_2556 + ((isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0))) * _796))) + ((_2562 + ((isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0))) * _1604)) * cbPerFrame._m0[3u].x));
    float _2735 = exp2(_2727 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0))) * (_2558 + ((isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0))) * _796))) + ((_2564 + ((isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0))) * _1604)) * cbPerFrame._m0[3u].x));
    float _2736 = exp2(_2727 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0))) * (_2560 + ((isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0))) * _796))) + ((_2566 + ((isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0))) * _1604)) * cbPerFrame._m0[3u].x));
    float _2745 = (_2725 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2745 * (_2726 ? _2734 : (_2734 + (cbSceneParam._m0[72u].w * _2707)));
    SV_Target.y = _2745 * (_2726 ? _2735 : (_2735 + (cbSceneParam._m0[72u].w * _2709)));
    SV_Target.z = _2745 * (_2726 ? _2736 : (_2736 + (cbSceneParam._m0[72u].w * _2711)));
    SV_Target.w = cbInstanceData._m0[_2586].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2586].w;
}


