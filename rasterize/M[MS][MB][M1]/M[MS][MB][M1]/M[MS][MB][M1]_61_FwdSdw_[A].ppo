#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1102;
float _3769;
float _3770;
float _3771;
float _3772;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _208 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _209 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _210 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _216 = inversesqrt(dot(vec3(_208, _209, _210), vec3(_208, _209, _210)));
    float _223 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _230 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _236 = uint(roundEven(NORMAL.w)) * 13u;
    uint _242 = _236 + 1u;
    uint _246 = _236 + 2u;
    float _255 = sqrt(((cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x) + (cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x)) + (cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x));
    float _256 = _255 * TEXCOORD.z;
    float _257 = _255 * TEXCOORD.w;
    vec4 _277 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _283 = _277.x * cbMtdParam._m0[11u].x;
    float _284 = _277.y * cbMtdParam._m0[11u].y;
    float _285 = _277.z * cbMtdParam._m0[11u].z;
    vec4 _304 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _256) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _257) + cbTextureTilingScale._m0[5u].w));
    vec4 _342 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _344 = _342.x;
    float _356 = dot(vec4(_344, _342.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _373 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_344 - _356) * cbMtdParam._m0[24u].y) + _356) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3781 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _374 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
    float _381 = (_374 * ((_304.x * cbMtdParam._m0[12u].x) - _283)) + _283;
    float _382 = (_374 * ((_304.y * cbMtdParam._m0[12u].y) - _284)) + _284;
    float _383 = (_374 * ((_304.z * cbMtdParam._m0[12u].z) - _285)) + _285;
    vec4 _396 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _256) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _257) + cbTextureTilingScale._m0[4u].w));
    vec4 _413 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _415 = _413.x;
    float _416 = _413.y;
    float _417 = _413.z;
    float _426 = ((_396.z - _417) * _374) + _417;
    float _429 = ((((_396.x - _415) * _374) + _415) * 2.0) + (-1.0);
    float _431 = ((((_396.y - _416) * _374) + _416) * 2.0) + (-1.0);
    float _432 = dot(vec2(_429, _431), vec2(_429, _431));
    float _3792 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _437 = sqrt(1.0 - (isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0))));
    vec4 _450 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _464 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _478 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _480 = _478.x;
    float _498 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _256) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _257) + cbTextureTilingScale._m0[9u].w)).x - _480) * _374) + _480;
    float _502 = ((_464.x - _498) * cbMtdParam._m0[19u].z) + _498;
    float _507 = cbMtdParam._m0[22u].x + _450.w;
    float _510 = fma(_437, _223 * NORMAL.x, fma(_431, _230 * TANGENT.x, (_216 * _208) * _429));
    float _513 = fma(_437, _223 * NORMAL.y, fma(_431, _230 * TANGENT.y, (_216 * _209) * _429));
    float _516 = fma(_437, _223 * NORMAL.z, fma(_431, _230 * TANGENT.z, (_216 * _210) * _429));
    float _520 = inversesqrt(dot(vec3(_510, _513, _516), vec3(_510, _513, _516)));
    float _521 = _520 * _510;
    float _522 = _520 * _513;
    float _523 = _520 * _516;
    float _3803 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _524 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
    float _3814 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _3825 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _3836 = isnan(0.0) ? _382 : (isnan(_382) ? 0.0 : max(_382, 0.0));
    float _3847 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _3858 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _529 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
    float _543 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _584 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _594 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _584);
    float _595 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _584);
    float _596 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _584);
    float _600 = inversesqrt(dot(vec3(_594, _595, _596), vec3(_594, _595, _596)));
    float _601 = _594 * _600;
    float _602 = _595 * _600;
    float _603 = _596 * _600;
    vec4 _608 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _610 = _608.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _782 = sqrt(((_594 * _594) + (_595 * _595)) + (_596 * _596));
        float _788 = (cbMatDynParam._m0[5u].x * _782) + cbMatDynParam._m0[5u].y;
        float _3869 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
        float _789 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
        float _793 = (cbMatDynParam._m0[5u].z * _782) + cbMatDynParam._m0[5u].w;
        float _3880 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0))) - _789)) + _789) < ((_610 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _621 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _622 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _640 = fma(_523, cbSceneParam._m0[5u].z, fma(_522, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _521));
    float _643 = fma(_523, cbSceneParam._m0[6u].z, fma(_522, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _521));
    float _646 = fma(_523, cbSceneParam._m0[7u].z, fma(_522, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _521));
    uint _659 = _236 + 9u;
    uint _660 = _659 + uint(cbMatDynParam._m0[0u].w);
    float _666 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0)))) * cbInstanceData._m0[_660].x;
    float _667 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0)))) * cbInstanceData._m0[_660].y;
    float _668 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0)))) * cbInstanceData._m0[_660].z;
    float _3891 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _669 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
    float _3902 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _670 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
    float _3913 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _671 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
    float _672 = 1.0 - _529;
    float _673 = _669 * _672;
    float _674 = _670 * _672;
    float _675 = _671 * _672;
    float _680 = (_669 + (-0.039999999105930328369140625)) * _529;
    float _681 = (_670 + (-0.039999999105930328369140625)) * _529;
    float _682 = (_671 + (-0.039999999105930328369140625)) * _529;
    float _683 = _680 + 0.039999999105930328369140625;
    float _685 = _681 + 0.039999999105930328369140625;
    float _686 = _682 + 0.039999999105930328369140625;
    vec4 _695 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _621, cbSceneParam._m0[86u].y * _622));
    float _699 = ((isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0))) * TEXCOORD_5.w) * _695.x;
    float _700 = dot(vec3(_521, _522, _523), vec3(_601, _602, _603));
    float _703 = _700 * 2.0;
    float _707 = (_703 * _521) - _601;
    float _708 = (_703 * _522) - _602;
    float _709 = (_703 * _523) - _603;
    float _713 = abs(dot(vec3(_601, _602, _603), vec3(_521, _522, _523)));
    float _3924 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _715 = sqrt(_524);
    float _728 = exp2((_715 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_715 * 3.0));
    float _734 = (1.0 - _728) * ((_715 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _735 = _728 * _715;
    float _763 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _767 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _771 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1101;
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    float _1107;
    float _1108;
    float _1109;
    float _1110;
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _826 = fma(_771, cbModelParam._m0[26u].z, fma(_767, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _763));
        float _830 = fma(_771, cbModelParam._m0[27u].z, fma(_767, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _763));
        float _834 = fma(_771, cbModelParam._m0[28u].z, fma(_767, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _763));
        float _859 = _763 + _521;
        float _860 = _767 + _522;
        float _861 = _771 + _523;
        float _871 = fma(_861, cbModelParam._m0[26u].z, fma(_860, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _859)) - _826;
        float _872 = fma(_861, cbModelParam._m0[27u].z, fma(_860, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _859)) - _830;
        float _873 = fma(_861, cbModelParam._m0[28u].z, fma(_860, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _859)) - _834;
        float _877 = inversesqrt(dot(vec3(_871, _872, _873), vec3(_871, _872, _873)));
        float _890 = ((_877 * _871) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_826 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _891 = ((_877 * _872) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_830 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _892 = ((_877 * _873) / cbModelParam._m0[34u].z) + ((((((_834 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _895 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_890, _891, _892), 0.0);
        vec4 _902 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_890, _891, _892), 0.0);
        vec4 _909 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_890, _891, _892), 0.0);
        vec4 _916 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_890, _891, _892), 0.0);
        float _929 = exp2((_895.w + (-0.5)) * 20.0) * 2.0;
        float _930 = _929 * (_895.x + (-0.5));
        float _931 = _929 * (_895.y + (-0.5));
        float _932 = _929 * (_895.z + (-0.5));
        float _939 = exp2((_902.w + (-0.5)) * 20.0) * 2.0;
        float _940 = _939 * (_902.x + (-0.5));
        float _941 = _939 * (_902.y + (-0.5));
        float _942 = _939 * (_902.z + (-0.5));
        float _949 = exp2((_909.w + (-0.5)) * 20.0) * 2.0;
        float _950 = _949 * (_909.x + (-0.5));
        float _951 = _949 * (_909.y + (-0.5));
        float _952 = _949 * (_909.z + (-0.5));
        float _959 = exp2((_916.w + (-0.5)) * 20.0) * 2.0;
        float _960 = _959 * (_916.x + (-0.5));
        float _961 = _959 * (_916.y + (-0.5));
        float _962 = _959 * (_916.z + (-0.5));
        float _963 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
        float _964 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
        float _965 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
        float _966 = _930 * 0.5;
        float _967 = _940 * 0.5;
        float _968 = _950 * 0.5;
        float _969 = dot(vec3(_966, _967, _968), vec3(_966, _967, _968));
        float _974 = (_969 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_969);
        float _983 = (dot(vec3(_521, _522, _523), vec3(_974 * _966, _974 * _967, _974 * _968)) + 1.0) * 0.5;
        float _3950 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _993 = sqrt(((_967 * _967) + (_966 * _966)) + (_968 * _968)) / (_963 + 9.9999997473787516355514526367188e-06);
        float _3961 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _994 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
        float _995 = _994 * 2.0;
        float _999 = (1.0 - _994) / (_994 + 1.0);
        float _3972 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1000 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
        float _1009 = ((((1.0 - _1000) * (_995 + 2.0)) * exp2(log2(isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0))) * (_995 + 1.0))) + _1000) * _963;
        float _1010 = _931 * 0.5;
        float _1011 = _941 * 0.5;
        float _1012 = _951 * 0.5;
        float _1013 = dot(vec3(_1010, _1011, _1012), vec3(_1010, _1011, _1012));
        float _1018 = (_1013 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1013);
        float _1026 = (dot(vec3(_521, _522, _523), vec3(_1018 * _1010, _1018 * _1011, _1018 * _1012)) + 1.0) * 0.5;
        float _3983 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1035 = sqrt(((_1011 * _1011) + (_1010 * _1010)) + (_1012 * _1012)) / (_964 + 9.9999997473787516355514526367188e-06);
        float _3994 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1036 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
        float _1037 = _1036 * 2.0;
        float _1041 = (1.0 - _1036) / (_1036 + 1.0);
        float _4005 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1042 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
        float _1051 = ((((1.0 - _1042) * (_1037 + 2.0)) * exp2(log2(isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0))) * (_1037 + 1.0))) + _1042) * _964;
        float _1052 = _932 * 0.5;
        float _1053 = _942 * 0.5;
        float _1054 = _952 * 0.5;
        float _1055 = dot(vec3(_1052, _1053, _1054), vec3(_1052, _1053, _1054));
        float _1060 = (_1055 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1055);
        float _1068 = (dot(vec3(_521, _522, _523), vec3(_1060 * _1052, _1060 * _1053, _1060 * _1054)) + 1.0) * 0.5;
        float _4016 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1077 = sqrt(((_1053 * _1053) + (_1052 * _1052)) + (_1054 * _1054)) / (_965 + 9.9999997473787516355514526367188e-06);
        float _4027 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1078 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
        float _1079 = _1078 * 2.0;
        float _1083 = (1.0 - _1078) / (_1078 + 1.0);
        float _4038 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1084 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
        float _1093 = ((((1.0 - _1084) * (_1079 + 2.0)) * exp2(log2(isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0))) * (_1079 + 1.0))) + _1084) * _965;
        _1101 = _932;
        _1103 = _931;
        _1104 = _930;
        _1105 = _942;
        _1106 = _941;
        _1107 = _940;
        _1108 = _952;
        _1109 = _951;
        _1110 = _950;
        _1111 = _965;
        _1112 = _964;
        _1113 = _963;
        _1114 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0)));
        _1115 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0)));
        _1116 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0)));
    }
    else
    {
        _1101 = _1102;
        _1103 = _1102;
        _1104 = _1102;
        _1105 = _1102;
        _1106 = _1102;
        _1107 = _1102;
        _1108 = _1102;
        _1109 = _1102;
        _1110 = _1102;
        _1111 = _1102;
        _1112 = _1102;
        _1113 = _1102;
        _1114 = 0.0;
        _1115 = 0.0;
        _1116 = 0.0;
    }
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1144 = fma(_771, cbModelParam._m0[30u].z, fma(_767, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _763));
        float _1148 = fma(_771, cbModelParam._m0[31u].z, fma(_767, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _763));
        float _1152 = fma(_771, cbModelParam._m0[32u].z, fma(_767, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _763));
        float _1175 = _763 + _521;
        float _1176 = _767 + _522;
        float _1177 = _771 + _523;
        float _1187 = fma(_1177, cbModelParam._m0[30u].z, fma(_1176, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1175)) - _1144;
        float _1188 = fma(_1177, cbModelParam._m0[31u].z, fma(_1176, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1175)) - _1148;
        float _1189 = fma(_1177, cbModelParam._m0[32u].z, fma(_1176, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1175)) - _1152;
        float _1193 = inversesqrt(dot(vec3(_1187, _1188, _1189), vec3(_1187, _1188, _1189)));
        float _1206 = ((_1193 * _1187) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1144 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1207 = ((_1193 * _1188) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1148 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1208 = ((_1193 * _1189) / cbModelParam._m0[35u].z) + ((((((_1152 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1210 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1206, _1207, _1208), 0.0);
        vec4 _1217 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1206, _1207, _1208), 0.0);
        vec4 _1224 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1206, _1207, _1208), 0.0);
        vec4 _1231 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1206, _1207, _1208), 0.0);
        float _1243 = exp2((_1210.w + (-0.5)) * 20.0) * 2.0;
        float _1244 = _1243 * (_1210.x + (-0.5));
        float _1245 = _1243 * (_1210.y + (-0.5));
        float _1246 = _1243 * (_1210.z + (-0.5));
        float _1253 = exp2((_1217.w + (-0.5)) * 20.0) * 2.0;
        float _1254 = _1253 * (_1217.x + (-0.5));
        float _1255 = _1253 * (_1217.y + (-0.5));
        float _1256 = _1253 * (_1217.z + (-0.5));
        float _1263 = exp2((_1224.w + (-0.5)) * 20.0) * 2.0;
        float _1264 = _1263 * (_1224.x + (-0.5));
        float _1265 = _1263 * (_1224.y + (-0.5));
        float _1266 = _1263 * (_1224.z + (-0.5));
        float _1273 = exp2((_1231.w + (-0.5)) * 20.0) * 2.0;
        float _1274 = _1273 * (_1231.x + (-0.5));
        float _1275 = _1273 * (_1231.y + (-0.5));
        float _1276 = _1273 * (_1231.z + (-0.5));
        float _1277 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1278 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1279 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1280 = _1244 * 0.5;
        float _1281 = _1254 * 0.5;
        float _1282 = _1264 * 0.5;
        float _1283 = dot(vec3(_1280, _1281, _1282), vec3(_1280, _1281, _1282));
        float _1288 = (_1283 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1283);
        float _1296 = (dot(vec3(_521, _522, _523), vec3(_1288 * _1280, _1288 * _1281, _1288 * _1282)) + 1.0) * 0.5;
        float _4079 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1305 = sqrt(((_1281 * _1281) + (_1280 * _1280)) + (_1282 * _1282)) / (_1277 + 9.9999997473787516355514526367188e-06);
        float _4090 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1306 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
        float _1307 = _1306 * 2.0;
        float _1311 = (1.0 - _1306) / (_1306 + 1.0);
        float _4101 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1312 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
        float _1321 = ((((1.0 - _1312) * (_1307 + 2.0)) * exp2(log2(isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0))) * (_1307 + 1.0))) + _1312) * _1277;
        float _1322 = _1245 * 0.5;
        float _1323 = _1255 * 0.5;
        float _1324 = _1265 * 0.5;
        float _1325 = dot(vec3(_1322, _1323, _1324), vec3(_1322, _1323, _1324));
        float _1330 = (_1325 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1325);
        float _1338 = (dot(vec3(_521, _522, _523), vec3(_1330 * _1322, _1330 * _1323, _1330 * _1324)) + 1.0) * 0.5;
        float _4112 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1347 = sqrt(((_1323 * _1323) + (_1322 * _1322)) + (_1324 * _1324)) / (_1278 + 9.9999997473787516355514526367188e-06);
        float _4123 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1348 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
        float _1349 = _1348 * 2.0;
        float _1353 = (1.0 - _1348) / (_1348 + 1.0);
        float _4134 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1354 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
        float _1363 = ((((1.0 - _1354) * (_1349 + 2.0)) * exp2(log2(isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0))) * (_1349 + 1.0))) + _1354) * _1278;
        float _1364 = _1246 * 0.5;
        float _1365 = _1256 * 0.5;
        float _1366 = _1266 * 0.5;
        float _1367 = dot(vec3(_1364, _1365, _1366), vec3(_1364, _1365, _1366));
        float _1372 = (_1367 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1367);
        float _1380 = (dot(vec3(_521, _522, _523), vec3(_1372 * _1364, _1372 * _1365, _1372 * _1366)) + 1.0) * 0.5;
        float _4145 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1389 = sqrt(((_1365 * _1365) + (_1364 * _1364)) + (_1366 * _1366)) / (_1279 + 9.9999997473787516355514526367188e-06);
        float _4156 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1390 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
        float _1391 = _1390 * 2.0;
        float _1395 = (1.0 - _1390) / (_1390 + 1.0);
        float _4167 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1396 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
        float _1405 = ((((1.0 - _1396) * (_1391 + 2.0)) * exp2(log2(isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0))) * (_1391 + 1.0))) + _1396) * _1279;
        _1413 = _1246;
        _1414 = _1245;
        _1415 = _1244;
        _1416 = _1256;
        _1417 = _1255;
        _1418 = _1254;
        _1419 = _1266;
        _1420 = _1265;
        _1421 = _1264;
        _1422 = _1279;
        _1423 = _1278;
        _1424 = _1277;
        _1425 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0)));
        _1426 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0)));
        _1427 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0)));
    }
    else
    {
        _1413 = _1102;
        _1414 = _1102;
        _1415 = _1102;
        _1416 = _1102;
        _1417 = _1102;
        _1418 = _1102;
        _1419 = _1102;
        _1420 = _1102;
        _1421 = _1102;
        _1422 = _1102;
        _1423 = _1102;
        _1424 = _1102;
        _1425 = 0.0;
        _1426 = 0.0;
        _1427 = 0.0;
    }
    float _1437 = (cbModelParam._m0[1u].x * (_1425 - _1114)) + _1114;
    float _1438 = (cbModelParam._m0[1u].x * (_1426 - _1115)) + _1115;
    float _1439 = (cbModelParam._m0[1u].x * (_1427 - _1116)) + _1116;
    float _1460 = fma(_1439, cbSceneParam._m0[89u].z, fma(_1438, cbSceneParam._m0[89u].y, _1437 * cbSceneParam._m0[89u].x));
    float _1463 = fma(_1439, cbSceneParam._m0[90u].z, fma(_1438, cbSceneParam._m0[90u].y, _1437 * cbSceneParam._m0[90u].x));
    float _1466 = fma(_1439, cbSceneParam._m0[91u].z, fma(_1438, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1437));
    float _1481 = _707 * 0.5;
    float _1482 = _708 * 0.5;
    float _1483 = _709 * 0.5;
    float _1484 = dot(vec4(_1481, _1482, _1483, 1.0), vec4(_1415, _1418, _1421, _1424));
    float _1487 = dot(vec4(_1481, _1482, _1483, 1.0), vec4(_1414, _1417, _1420, _1423));
    float _1490 = dot(vec4(_1481, _1482, _1483, 1.0), vec4(_1413, _1416, _1419, _1422));
    float _1524;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1497 = dot(vec4(_1481, _1482, _1483, 1.0), vec4(_1101, _1105, _1108, _1111));
        float _1501 = dot(vec4(_1481, _1482, _1483, 1.0), vec4(_1103, _1106, _1109, _1112));
        float _1505 = dot(vec4(_1481, _1482, _1483, 1.0), vec4(_1104, _1107, _1110, _1113));
        float _1512 = dot(vec4(cbModelParam._m0[39u]), vec4(_1481, _1482, _1483, 1.0));
        _1524 = dot(vec3(isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0)), isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0)), isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1512) ? 0.0 : (isnan(0.0) ? _1512 : max(0.0, _1512))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1524 = 1.0;
    }
    float _1535;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1526 = dot(vec4(cbModelParam._m0[40u]), vec4(_1481, _1482, _1483, 1.0));
        _1535 = dot(vec3(isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0)), isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0)), isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1526) ? 0.0 : (isnan(0.0) ? _1526 : max(0.0, _1526))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1535 = 1.0;
    }
    float _1539 = (_1535 * cbModelParam._m0[1u].x) + (_1524 * (1.0 - cbModelParam._m0[1u].x));
    float _1549 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _524);
    float _1550 = isnan(_1549) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1549 : min(cbModelParam._m0[25u].z, _1549));
    float _1632;
    float _1634;
    float _1636;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1599 = fma(_771, cbModelParam._m0[13u].z, fma(_767, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _763)) + cbModelParam._m0[13u].w;
        float _1603 = fma(_771, cbModelParam._m0[14u].z, fma(_767, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _763)) + cbModelParam._m0[14u].w;
        float _1607 = fma(_771, cbModelParam._m0[15u].z, fma(_767, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _763)) + cbModelParam._m0[15u].w;
        float _1610 = fma(_709, cbModelParam._m0[13u].z, fma(_708, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _707));
        float _1613 = fma(_709, cbModelParam._m0[14u].z, fma(_708, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _707));
        float _1616 = fma(_709, cbModelParam._m0[15u].z, fma(_708, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _707));
        float _1644;
        if (_1610 > 0.0)
        {
            _1644 = abs((1.0 - _1599) / _1610);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1610 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1599 + 1.0) / _1610);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1644 = frontier_phi_17_15_ladder;
        }
        float _1817;
        if (_1613 > 0.0)
        {
            _1817 = abs((1.0 - _1603) / _1613);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1613 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1603 + 1.0) / _1613);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1817 = frontier_phi_26_22_ladder;
        }
        float _2112;
        if (_1616 > 0.0)
        {
            _2112 = abs((1.0 - _1607) / _1616);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1616 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1607 + 1.0) / _1616);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2112 = frontier_phi_38_33_ladder;
        }
        float _2114 = isnan(_1817) ? _1644 : (isnan(_1644) ? _1817 : min(_1644, _1817));
        float _2115 = isnan(_2112) ? _2114 : (isnan(_2114) ? _2112 : min(_2114, _2112));
        float _2119 = (_2115 * _1610) + _1599;
        float _2120 = (_2115 * _1613) + _1603;
        float _2121 = (_2115 * _1616) + _1607;
        float _2122 = _2115 * 9.9999997473787516355514526367188e-05;
        float _2124 = (-1.0) - _2122;
        float _2126 = _2122 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2121 > _2126) || ((_2121 < _2124) || ((_2120 > _2126) || ((_2120 < _2124) || ((_2119 < _2124) || (_2119 > _2126))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2266 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2121, cbModelParam._m0[9u].z, fma(_2120, cbModelParam._m0[9u].y, _2119 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2121, cbModelParam._m0[10u].z, fma(_2120, cbModelParam._m0[10u].y, _2119 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2121, cbModelParam._m0[11u].z, fma(_2120, cbModelParam._m0[11u].y, _2119 * cbModelParam._m0[11u].x))), _1550);
            frontier_phi_16_38_ladder = _2266.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2266.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2266.x * cbModelParam._m0[1u].y;
        }
        _1632 = frontier_phi_16_38_ladder_2;
        _1634 = frontier_phi_16_38_ladder_1;
        _1636 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1620 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_707, _708, _709), _1550);
        _1632 = _1620.x * cbModelParam._m0[1u].y;
        _1634 = _1620.y * cbModelParam._m0[1u].y;
        _1636 = _1620.z * cbModelParam._m0[1u].y;
    }
    float _1640 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _524);
    float _1641 = isnan(_1640) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1640 : min(cbModelParam._m0[25u].w, _1640));
    float _1732;
    float _1734;
    float _1736;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1696 = fma(_771, cbModelParam._m0[21u].z, fma(_767, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _763)) + cbModelParam._m0[21u].w;
        float _1700 = fma(_771, cbModelParam._m0[22u].z, fma(_767, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _763)) + cbModelParam._m0[22u].w;
        float _1704 = fma(_771, cbModelParam._m0[23u].z, fma(_767, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _763)) + cbModelParam._m0[23u].w;
        float _1707 = fma(_709, cbModelParam._m0[21u].z, fma(_708, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _707));
        float _1710 = fma(_709, cbModelParam._m0[22u].z, fma(_708, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _707));
        float _1713 = fma(_709, cbModelParam._m0[23u].z, fma(_708, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _707));
        float _1822;
        if (_1707 > 0.0)
        {
            _1822 = abs((1.0 - _1696) / _1707);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1707 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1696 + 1.0) / _1707);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1822 = frontier_phi_28_24_ladder;
        }
        float _2139;
        if (_1710 > 0.0)
        {
            _2139 = abs((1.0 - _1700) / _1710);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1710 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1700 + 1.0) / _1710);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2139 = frontier_phi_40_35_ladder;
        }
        float _2477;
        if (_1713 > 0.0)
        {
            _2477 = abs((1.0 - _1704) / _1713);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1713 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1704 + 1.0) / _1713);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2477 = frontier_phi_50_47_ladder;
        }
        float _2479 = isnan(_2139) ? _1822 : (isnan(_1822) ? _2139 : min(_1822, _2139));
        float _2480 = isnan(_2477) ? _2479 : (isnan(_2479) ? _2477 : min(_2479, _2477));
        float _2484 = (_2480 * _1707) + _1696;
        float _2485 = (_2480 * _1710) + _1700;
        float _2486 = (_2480 * _1713) + _1704;
        float _2487 = _2480 * 9.9999997473787516355514526367188e-05;
        float _2488 = (-1.0) - _2487;
        float _2490 = _2487 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2486 > _2490) || ((_2486 < _2488) || ((_2485 > _2490) || ((_2485 < _2488) || ((_2484 < _2488) || (_2484 > _2490))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2608 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2486, cbModelParam._m0[17u].z, fma(_2485, cbModelParam._m0[17u].y, _2484 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2486, cbModelParam._m0[18u].z, fma(_2485, cbModelParam._m0[18u].y, _2484 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2486, cbModelParam._m0[19u].z, fma(_2485, cbModelParam._m0[19u].y, _2484 * cbModelParam._m0[19u].x))), _1641);
            frontier_phi_25_50_ladder = _2608.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2608.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2608.x * cbModelParam._m0[1u].z;
        }
        _1732 = frontier_phi_25_50_ladder_2;
        _1734 = frontier_phi_25_50_ladder_1;
        _1736 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1716 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_707, _708, _709), _1641);
        _1732 = _1716.x * cbModelParam._m0[1u].z;
        _1734 = _1716.y * cbModelParam._m0[1u].z;
        _1736 = _1716.z * cbModelParam._m0[1u].z;
    }
    float _1749 = (((_734 * _683) + _735) * _699) * ((cbModelParam._m0[1u].w * (_1732 - _1632)) + _1632);
    float _1751 = (((_734 * _685) + _735) * _699) * ((cbModelParam._m0[1u].w * (_1734 - _1634)) + _1634);
    float _1753 = (((_734 * _686) + _735) * _699) * ((cbModelParam._m0[1u].w * (_1736 - _1636)) + _1636);
    float _1756 = fma(_1753, cbSceneParam._m0[89u].z, fma(_1751, cbSceneParam._m0[89u].y, _1749 * cbSceneParam._m0[89u].x));
    float _1759 = fma(_1753, cbSceneParam._m0[90u].z, fma(_1751, cbSceneParam._m0[90u].y, _1749 * cbSceneParam._m0[90u].x));
    float _1762 = fma(_1753, cbSceneParam._m0[91u].z, fma(_1751, cbSceneParam._m0[91u].y, _1749 * cbSceneParam._m0[91u].x));
    float _1796 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1800 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1804 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1808 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1809 = _1796 / _1808;
    float _1810 = _1800 / _1808;
    float _1811 = _1804 / _1808;
    float _1958;
    float _1959;
    float _1960;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1838 = ((uint(_1811 > cbSceneParam._m0[59u].y) + uint(_1811 > cbSceneParam._m0[59u].x)) + uint(_1811 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1839 = _1838 + 43u;
        uint _1847 = _1838 + 44u;
        uint _1855 = _1838 + 45u;
        uint _1863 = _1838 + 46u;
        float _1874 = fma(_1808, cbSceneParam._m0[_1839].w, fma(_1804, cbSceneParam._m0[_1839].z, fma(_1800, cbSceneParam._m0[_1839].y, _1796 * cbSceneParam._m0[_1839].x)));
        float _1878 = fma(_1808, cbSceneParam._m0[_1847].w, fma(_1804, cbSceneParam._m0[_1847].z, fma(_1800, cbSceneParam._m0[_1847].y, _1796 * cbSceneParam._m0[_1847].x)));
        float _1886 = fma(_1808, cbSceneParam._m0[_1863].w, fma(_1804, cbSceneParam._m0[_1863].z, fma(_1800, cbSceneParam._m0[_1863].y, _1796 * cbSceneParam._m0[_1863].x)));
        float _1891 = cbSceneParam._m0[33u].z * _1886;
        float _1893 = cbSceneParam._m0[33u].w * _1886;
        float _1896 = fma(_1808, cbSceneParam._m0[_1855].w, fma(_1804, cbSceneParam._m0[_1855].z, fma(_1800, cbSceneParam._m0[_1855].y, _1796 * cbSceneParam._m0[_1855].x))) / _1886;
        float _1944 = (cbSceneParam._m0[33u].x - sqrt(((_1810 * _1810) + (_1809 * _1809)) + (_1811 * _1811))) * cbSceneParam._m0[33u].y;
        float _4293 = isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0));
        float _1951 = (isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1891 + _1874) / _1886, (_1893 + _1878) / _1886), _1896), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1893 + _1874) / _1886, (_1878 - _1891) / _1886), _1896), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1874 - _1891) / _1886, (_1878 - _1893) / _1886), _1896), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1874 - _1893) / _1886, (_1891 + _1878) / _1886), _1896), 0.0)).x), vec4(0.25)));
        _1958 = 1.0 - (_1951 * cbSceneParam._m0[34u].x);
        _1959 = 1.0 - (_1951 * cbSceneParam._m0[34u].y);
        _1960 = 1.0 - (_1951 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1958 = 1.0;
        _1959 = 1.0;
        _1960 = 1.0;
    }
    float _2024;
    float _2026;
    float _2028;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2012 = fma(_1808, cbSceneParam._m0[63u].w, fma(_1804, cbSceneParam._m0[63u].z, fma(_1800, cbSceneParam._m0[63u].y, _1796 * cbSceneParam._m0[63u].x)));
        float _2013 = fma(_1808, cbSceneParam._m0[60u].w, fma(_1804, cbSceneParam._m0[60u].z, fma(_1800, cbSceneParam._m0[60u].y, _1796 * cbSceneParam._m0[60u].x))) / _2012;
        float _2014 = fma(_1808, cbSceneParam._m0[61u].w, fma(_1804, cbSceneParam._m0[61u].z, fma(_1800, cbSceneParam._m0[61u].y, _1796 * cbSceneParam._m0[61u].x))) / _2012;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2013 >= cbSceneParam._m0[64u].x) && (_2014 >= cbSceneParam._m0[64u].y)) && (_2013 <= cbSceneParam._m0[64u].z)) && (_2014 <= cbSceneParam._m0[64u].w))
        {
            float _2152 = fma(_1808, cbSceneParam._m0[62u].w, fma(_1804, cbSceneParam._m0[62u].z, fma(_1800, cbSceneParam._m0[62u].y, _1796 * cbSceneParam._m0[62u].x))) / _2012;
            float _2156 = isnan(cbSceneParam._m0[41u].w) ? _2152 : (isnan(_2152) ? cbSceneParam._m0[41u].w : max(_2152, cbSceneParam._m0[41u].w));
            float _2199 = (cbSceneParam._m0[33u].x - sqrt(((_1810 * _1810) + (_1809 * _1809)) + (_1811 * _1811))) * cbSceneParam._m0[33u].y;
            float _4309 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
            float _2206 = (isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2013, cbSceneParam._m0[33u].w + _2014), _2156), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2013, _2014 - cbSceneParam._m0[33u].z), _2156), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2013 - cbSceneParam._m0[33u].z, _2014 - cbSceneParam._m0[33u].w), _2156), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2013 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2014), _2156), 0.0)).x), vec4(0.25)));
            float _2210 = 1.0 - (_2206 * cbSceneParam._m0[34u].x);
            float _2211 = 1.0 - (_2206 * cbSceneParam._m0[34u].y);
            float _2212 = 1.0 - (_2206 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2212) ? _1960 : (isnan(_1960) ? _2212 : min(_1960, _2212));
            frontier_phi_37_36_ladder_1 = isnan(_2211) ? _1959 : (isnan(_1959) ? _2211 : min(_1959, _2211));
            frontier_phi_37_36_ladder_2 = isnan(_2210) ? _1958 : (isnan(_1958) ? _2210 : min(_1958, _2210));
        }
        else
        {
            frontier_phi_37_36_ladder = _1960;
            frontier_phi_37_36_ladder_1 = _1959;
            frontier_phi_37_36_ladder_2 = _1958;
        }
        _2024 = frontier_phi_37_36_ladder_2;
        _2026 = frontier_phi_37_36_ladder_1;
        _2028 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2024 = _1958;
        _2026 = _1959;
        _2028 = _1960;
    }
    uvec4 _2033 = floatBitsToUint(cbInstanceData._m0[_236 + 5u]);
    uint _2035 = _2033.x * 14u;
    uint _2036 = _2035 + 13u;
    float _2043 = _699 + (-1.0);
    float _2048 = (cbLight._m0[_2036].x * _2043) + 1.0;
    float _2049 = (cbLight._m0[_2036].y * _2043) + 1.0;
    float _2050 = (cbLight._m0[_2036].z * _2043) + 1.0;
    float _2051 = (cbLight._m0[_2036].w * _2043) + 1.0;
    uint _2052 = _2035 + 5u;
    float _2058 = isnan(1.0) ? _2049 : (isnan(_2049) ? 1.0 : min(_2049, 1.0));
    uint _2062 = _2035 + 4u;
    float _2071 = isnan(1.0) ? _2048 : (isnan(_2048) ? 1.0 : min(_2048, 1.0));
    uint _2075 = _2035 | 1u;
    float _2086 = dot(vec3(cbLight._m0[_2035].xyz), vec3(_521, _522, _523));
    float _2089 = dot(vec3(cbLight._m0[_2075].xyz), vec3(_521, _522, _523));
    float _4345 = isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0));
    float _4356 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
    float _2094 = (isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0))) * 0.3183098733425140380859375;
    float _2096 = (isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0))) * 0.3183098733425140380859375;
    float _2103 = ((cbLight._m0[_2052].x * _2058) * _2096) + (((cbLight._m0[_2062].x * _2024) * _2071) * _2094);
    float _2104 = ((_2058 * cbLight._m0[_2052].y) * _2096) + (((cbLight._m0[_2062].y * _2026) * _2071) * _2094);
    float _2105 = ((_2058 * cbLight._m0[_2052].z) * _2096) + (((cbLight._m0[_2062].z * _2028) * _2071) * _2094);
    uvec4 _2109 = floatBitsToUint(cbLight._m0[_2035 + 12u]);
    bool _2111 = _2109.x == 0u;
    float _2213;
    float _2215;
    float _2217;
    if (_2111)
    {
        _2213 = _2103;
        _2215 = _2104;
        _2217 = _2105;
    }
    else
    {
        uint _2221 = _2035 + 6u;
        float _2237 = (dot(vec3(cbLight._m0[_2035 + 2u].xyz), vec3(_521, _522, _523)) * 0.5) + 0.5;
        float _2238 = _2237 * _2237;
        float _4367 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
        float _2239 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
        float _2240 = isnan(1.0) ? _2050 : (isnan(_2050) ? 1.0 : min(_2050, 1.0));
        _2213 = (((cbLight._m0[_2221].x * 0.3183098733425140380859375) * _2239) * _2240) + _2103;
        _2215 = (((cbLight._m0[_2221].y * 0.3183098733425140380859375) * _2239) * _2240) + _2104;
        _2217 = (((cbLight._m0[_2221].z * 0.3183098733425140380859375) * _2239) * _2240) + _2105;
    }
    bool _2220 = _2109.y == 0u;
    float _2275;
    float _2277;
    float _2279;
    if (_2220)
    {
        _2275 = _2213;
        _2277 = _2215;
        _2279 = _2217;
    }
    else
    {
        uint _2448 = _2035 + 7u;
        float _2464 = (dot(vec3(cbLight._m0[_2035 + 3u].xyz), vec3(_521, _522, _523)) * 0.5) + 0.5;
        float _2465 = _2464 * _2464;
        float _4383 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
        float _2466 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
        float _2467 = isnan(1.0) ? _2051 : (isnan(_2051) ? 1.0 : min(_2051, 1.0));
        _2275 = (((cbLight._m0[_2448].x * 0.3183098733425140380859375) * _2466) * _2467) + _2213;
        _2277 = (((cbLight._m0[_2448].y * 0.3183098733425140380859375) * _2466) * _2467) + _2215;
        _2279 = (((cbLight._m0[_2448].z * 0.3183098733425140380859375) * _2466) * _2467) + _2217;
    }
    uint _2282 = _2035 + 8u;
    float _2295 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2035].w)) * _524) * 0.949999988079071044921875);
    float _2296 = _2295 * _2295;
    float _2297 = cbLight._m0[_2035].x + _601;
    float _2298 = cbLight._m0[_2035].y + _602;
    float _2299 = cbLight._m0[_2035].z + _603;
    float _2303 = inversesqrt(dot(vec3(_2297, _2298, _2299), vec3(_2297, _2298, _2299)));
    float _2304 = _2303 * _2297;
    float _2305 = _2303 * _2298;
    float _2306 = _2303 * _2299;
    float _2307 = dot(vec3(_521, _522, _523), vec3(cbLight._m0[_2035].xyz));
    float _4399 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
    float _2310 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
    float _4410 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
    float _2311 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
    float _2312 = dot(vec3(_521, _522, _523), vec3(_2304, _2305, _2306));
    float _4421 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
    float _2315 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
    float _2316 = dot(vec3(cbLight._m0[_2035].xyz), vec3(_2304, _2305, _2306));
    float _4432 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
    float _2320 = _2296 * _2296;
    float _2324 = ((_2315 * _2315) * (_2320 + (-1.0))) + 1.0;
    float _2332 = exp2(log2(1.0 - (isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0)))) * 5.0);
    float _2333 = 0.959999978542327880859375 - _680;
    float _2335 = 0.959999978542327880859375 - _681;
    float _2336 = 0.959999978542327880859375 - _682;
    float _2343 = 1.0 - _2296;
    float _2354 = (0.5 / (((_2311 * ((_2310 * _2343) + _2296)) + 9.9999999392252902907785028219223e-09) + (((_2311 * _2343) + _2296) * _2310))) * _2310;
    float _4443 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
    float _2356 = (isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0))) * (_2320 / ((_2324 * _2324) * 3.141590118408203125));
    uint _2370 = _2035 + 9u;
    float _2381 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2075].w)) * _524) * 0.949999988079071044921875);
    float _2382 = _2381 * _2381;
    float _2383 = cbLight._m0[_2075].x + _601;
    float _2384 = cbLight._m0[_2075].y + _602;
    float _2385 = cbLight._m0[_2075].z + _603;
    float _2389 = inversesqrt(dot(vec3(_2383, _2384, _2385), vec3(_2383, _2384, _2385)));
    float _2390 = _2389 * _2383;
    float _2391 = _2389 * _2384;
    float _2392 = _2389 * _2385;
    float _2393 = dot(vec3(_521, _522, _523), vec3(cbLight._m0[_2075].xyz));
    float _4454 = isnan(0.0) ? _2393 : (isnan(_2393) ? 0.0 : max(_2393, 0.0));
    float _2396 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
    float _2397 = dot(vec3(_521, _522, _523), vec3(_2390, _2391, _2392));
    float _4465 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
    float _2400 = isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0));
    float _2401 = dot(vec3(cbLight._m0[_2075].xyz), vec3(_2390, _2391, _2392));
    float _4476 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0));
    float _2405 = _2382 * _2382;
    float _2409 = ((_2400 * _2400) * (_2405 + (-1.0))) + 1.0;
    float _2416 = exp2(log2(1.0 - (isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0)))) * 5.0);
    float _2423 = 1.0 - _2382;
    float _2433 = (0.5 / (((_2311 * ((_2396 * _2423) + _2382)) + 9.9999999392252902907785028219223e-09) + (((_2311 * _2423) + _2382) * _2396))) * _2396;
    float _4487 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
    float _2435 = (isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0))) * (_2405 / ((_2409 * _2409) * 3.141590118408203125));
    float _2445 = (((((_2416 * _2333) + _683) * cbLight._m0[_2370].x) * _2435) * _2058) + ((((cbLight._m0[_2282].x * _2024) * ((_2332 * _2333) + _683)) * _2356) * _2071);
    float _2446 = (((((_2416 * _2335) + _685) * cbLight._m0[_2370].y) * _2435) * _2058) + ((((cbLight._m0[_2282].y * _2026) * ((_2332 * _2335) + _685)) * _2356) * _2071);
    float _2447 = (((((_2416 * _2336) + _686) * cbLight._m0[_2370].z) * _2435) * _2058) + ((((cbLight._m0[_2282].z * _2028) * ((_2332 * _2336) + _686)) * _2356) * _2071);
    float _2503;
    float _2505;
    float _2507;
    if (_2111)
    {
        _2503 = _2445;
        _2505 = _2446;
        _2507 = _2447;
    }
    else
    {
        uint _2509 = _2035 + 2u;
        uint _2513 = _2035 + 10u;
        float _2527 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2509].w)) * _524) * 0.949999988079071044921875);
        float _2528 = _2527 * _2527;
        float _2529 = cbLight._m0[_2509].x + _601;
        float _2530 = cbLight._m0[_2509].y + _602;
        float _2531 = cbLight._m0[_2509].z + _603;
        float _2535 = inversesqrt(dot(vec3(_2529, _2530, _2531), vec3(_2529, _2530, _2531)));
        float _2536 = _2535 * _2529;
        float _2537 = _2535 * _2530;
        float _2538 = _2535 * _2531;
        float _2539 = dot(vec3(_521, _522, _523), vec3(cbLight._m0[_2509].xyz));
        float _4498 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0));
        float _2542 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
        float _2543 = dot(vec3(_521, _522, _523), vec3(_2536, _2537, _2538));
        float _4509 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0));
        float _2546 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
        float _2547 = dot(vec3(cbLight._m0[_2509].xyz), vec3(_2536, _2537, _2538));
        float _4520 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0));
        float _2551 = _2528 * _2528;
        float _2555 = ((_2546 * _2546) * (_2551 + (-1.0))) + 1.0;
        float _2562 = exp2(log2(1.0 - (isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0)))) * 5.0);
        float _2569 = 1.0 - _2528;
        float _2579 = (0.5 / (((_2311 * ((_2542 * _2569) + _2528)) + 9.9999999392252902907785028219223e-09) + (((_2311 * _2569) + _2528) * _2542))) * _2542;
        float _4531 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0));
        float _2581 = (isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0))) * (_2551 / ((_2555 * _2555) * 3.141590118408203125));
        float _2582 = isnan(1.0) ? _2050 : (isnan(_2050) ? 1.0 : min(_2050, 1.0));
        _2503 = (((((_2562 * _2333) + _683) * cbLight._m0[_2513].x) * _2581) * _2582) + _2445;
        _2505 = (((((_2562 * _2335) + _685) * cbLight._m0[_2513].y) * _2581) * _2582) + _2446;
        _2507 = (((((_2562 * _2336) + _686) * cbLight._m0[_2513].z) * _2581) * _2582) + _2447;
    }
    float _2613;
    float _2615;
    float _2617;
    if (_2220)
    {
        _2613 = _2503;
        _2615 = _2505;
        _2617 = _2507;
    }
    else
    {
        uint _2624 = _2035 + 3u;
        uint _2628 = _2035 + 11u;
        float _2642 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2624].w)) * _524) * 0.949999988079071044921875);
        float _2643 = _2642 * _2642;
        float _2644 = cbLight._m0[_2624].x + _601;
        float _2645 = cbLight._m0[_2624].y + _602;
        float _2646 = cbLight._m0[_2624].z + _603;
        float _2650 = inversesqrt(dot(vec3(_2644, _2645, _2646), vec3(_2644, _2645, _2646)));
        float _2651 = _2650 * _2644;
        float _2652 = _2650 * _2645;
        float _2653 = _2650 * _2646;
        float _2654 = dot(vec3(_521, _522, _523), vec3(cbLight._m0[_2624].xyz));
        float _4547 = isnan(0.0) ? _2654 : (isnan(_2654) ? 0.0 : max(_2654, 0.0));
        float _2657 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
        float _2658 = dot(vec3(_521, _522, _523), vec3(_2651, _2652, _2653));
        float _4558 = isnan(0.0) ? _2658 : (isnan(_2658) ? 0.0 : max(_2658, 0.0));
        float _2661 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
        float _2662 = dot(vec3(cbLight._m0[_2624].xyz), vec3(_2651, _2652, _2653));
        float _4569 = isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : max(_2662, 0.0));
        float _2666 = _2643 * _2643;
        float _2670 = ((_2661 * _2661) * (_2666 + (-1.0))) + 1.0;
        float _2677 = exp2(log2(1.0 - (isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0)))) * 5.0);
        float _2684 = 1.0 - _2643;
        float _2694 = (0.5 / (((_2311 * ((_2657 * _2684) + _2643)) + 9.9999999392252902907785028219223e-09) + (((_2311 * _2684) + _2643) * _2657))) * _2657;
        float _4580 = isnan(0.0) ? _2694 : (isnan(_2694) ? 0.0 : max(_2694, 0.0));
        float _2696 = (isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0))) * (_2666 / ((_2670 * _2670) * 3.141590118408203125));
        float _2697 = isnan(1.0) ? _2051 : (isnan(_2051) ? 1.0 : min(_2051, 1.0));
        _2613 = (((((_2677 * _2333) + _683) * cbLight._m0[_2628].x) * _2696) * _2697) + _2503;
        _2615 = (((((_2677 * _2335) + _685) * cbLight._m0[_2628].y) * _2696) * _2697) + _2505;
        _2617 = (((((_2677 * _2336) + _686) * cbLight._m0[_2628].z) * _2696) * _2697) + _2507;
    }
    float _2763;
    float _2765;
    float _2767;
    float _2769;
    float _2771;
    float _2773;
    if (_2033.y == 0u)
    {
        uvec4 _2718 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2719 = _2718.x;
        uint _2730 = uint((float(_2718.y) * floor(float(uint(cbSceneParam._m0[85u].y * _622) / _2719))) + floor(float(uint(cbSceneParam._m0[85u].x * _621) / _2719)));
        float _2740 = (log2(_1811 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2741 = isnan(0.0) ? _2740 : (isnan(_2740) ? 0.0 : max(_2740, 0.0));
        uint _2744 = uint(isnan(14.0) ? _2741 : (isnan(_2741) ? 14.0 : min(_2741, 14.0)));
        uvec4 _2749 = texelFetch(g_lightClusterGridBuffer, int(((_2744 << 2u) + (_2730 << 6u)) >> 2u));
        uint _2750 = _2749.x;
        uint _2751 = _2718.z;
        float _2830;
        float _2832;
        float _2834;
        float _2836;
        float _2838;
        float _2840;
        if (((((1u << ((_2751 >> 4u) & 15u)) + 4294967295u) & _2750) == 0u) || ((_2751 & 240u) == 0u))
        {
            _2830 = 0.0;
            _2832 = 0.0;
            _2834 = 0.0;
            _2836 = 0.0;
            _2838 = 0.0;
            _2840 = 0.0;
        }
        else
        {
            float _2831;
            float _2833;
            float _2835;
            float _2837;
            float _2839;
            float _2841;
            float _2983 = 0.0;
            float _2984 = 0.0;
            float _2985 = 0.0;
            float _2986 = 0.0;
            float _2987 = 0.0;
            float _2988 = 0.0;
            uint _2989 = 0u;
            uint _2998;
            bool _2999;
            for (;;)
            {
                _2998 = texelFetch(g_lightClassification, int((((_2744 << 5u) + (_2730 << 9u)) + (_2989 << 2u)) >> 2u)).x;
                _2999 = _2998 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2999)
                {
                    frontier_phi_71_pred = _2988;
                    frontier_phi_71_pred_1 = _2987;
                    frontier_phi_71_pred_2 = _2986;
                    frontier_phi_71_pred_3 = _2985;
                    frontier_phi_71_pred_4 = _2984;
                    frontier_phi_71_pred_5 = _2983;
                }
                else
                {
                    float _3128;
                    float _3129;
                    float _3130;
                    float _3131;
                    float _3132;
                    float _3133;
                    uint _3134;
                    _3128 = _2983;
                    _3129 = _2984;
                    _3130 = _2985;
                    _3131 = _2986;
                    _3132 = _2987;
                    _3133 = _2988;
                    _3134 = _2998;
                    float _3055;
                    float _3056;
                    float _3057;
                    float _3058;
                    float _3059;
                    float _3060;
                    for (;;)
                    {
                        uint _3138 = uint(findLSB(_3134)) + (_2989 << 5u);
                        uint _3135 = (_3134 + 4294967295u) & _3134;
                        uint _3140 = _3138 * 48u;
                        vec4 _3154 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3140)).x, texelFetch(g_PointLightRenderingBuffer, int(_3140 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3140 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3140 + 3u)).x));
                        uint _3160 = (_3138 * 48u) + 4u;
                        vec4 _3173 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3160)).x, texelFetch(g_PointLightRenderingBuffer, int(_3160 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3160 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3160 + 3u)).x));
                        uint _3179 = (_3138 * 48u) + 8u;
                        vec3 _3190 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3179)).x, texelFetch(g_PointLightRenderingBuffer, int(_3179 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3179 + 2u)).x));
                        float _3194 = _3154.x - _1809;
                        float _3195 = _3154.y - _1810;
                        float _3196 = _3154.z - _1811;
                        float _3197 = dot(vec3(_3194, _3195, _3196), vec3(_3194, _3195, _3196));
                        float _3200 = inversesqrt(_3197);
                        float _3201 = _3200 * _3194;
                        float _3202 = _3200 * _3195;
                        float _3203 = _3200 * _3196;
                        float _3204 = dot(vec3(_640, _643, _646), vec3(_3201, _3202, _3203));
                        float _3209 = 1.0 - (_3197 * _3154.w);
                        float _4606 = isnan(0.0) ? _3209 : (isnan(_3209) ? 0.0 : max(_3209, 0.0));
                        float _3210 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
                        float _3211 = sqrt(_3197) * _3173.w;
                        float _3214 = 1.39999997615814208984375 / (_3211 + 1.39999997615814208984375);
                        float _3215 = _3214 * _3214;
                        float _3218 = ((1.0 - _3215) * _3204) + _3215;
                        float _3221 = _3211 * _3211;
                        float _3225 = ((isnan(0.0) ? _3218 : (isnan(_3218) ? 0.0 : max(_3218, 0.0))) * _3210) / ((_3221 * 0.699999988079071044921875) + 1.0);
                        float _3229 = (-0.0) - _1809;
                        float _3230 = (-0.0) - _1810;
                        float _3231 = (-0.0) - _1811;
                        float _3235 = inversesqrt(dot(vec3(_3229, _3230, _3231), vec3(_3229, _3230, _3231)));
                        float _3236 = _3235 * _3229;
                        float _3237 = _3235 * _3230;
                        float _3238 = _3235 * _3231;
                        float _3245 = exp2(log2(1.0 / ((_3221 * 3.5) + 5.0)) * 0.25);
                        float _3246 = 1.0 - _715;
                        float _3253 = sqrt(1.0 - ((1.0 - (_3246 * _3246)) * (1.0 - (_3245 * _3245))));
                        float _3254 = _3253 * _3253;
                        float _3255 = _3254 * _3254;
                        float _3256 = _3236 + _3201;
                        float _3257 = _3237 + _3202;
                        float _3258 = _3238 + _3203;
                        float _3262 = inversesqrt(dot(vec3(_3256, _3257, _3258), vec3(_3256, _3257, _3258)));
                        float _3266 = dot(vec3(_640, _643, _646), vec3(_3236, _3237, _3238));
                        float _4622 = isnan(0.0) ? _3266 : (isnan(_3266) ? 0.0 : max(_3266, 0.0));
                        float _3269 = isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0));
                        float _3270 = dot(vec3(_640, _643, _646), vec3(_3262 * _3256, _3262 * _3257, _3262 * _3258));
                        float _4633 = isnan(0.0) ? _3270 : (isnan(_3270) ? 0.0 : max(_3270, 0.0));
                        float _3273 = isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0));
                        float _3277 = ((_3273 * _3273) * (_3255 + (-1.0))) + 1.0;
                        float _3278 = _3214 * _3254;
                        float _3279 = _3278 * _3278;
                        float _3282 = ((1.0 - _3279) * _3204) + _3279;
                        float _4644 = isnan(0.0) ? _3282 : (isnan(_3282) ? 0.0 : max(_3282, 0.0));
                        float _3283 = isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0));
                        float _3284 = 1.0 - _3254;
                        float _3294 = (0.5 / (((_3283 * ((_3269 * _3284) + _3254)) + 9.9999999392252902907785028219223e-09) + (((_3283 * _3284) + _3254) * _3269))) * _3283;
                        float _4655 = isnan(0.0) ? _3294 : (isnan(_3294) ? 0.0 : max(_3294, 0.0));
                        float _3305 = (((_3255 * 3.1415927410125732421875) * (isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0)))) / ((_3277 * _3277) * ((_3221 * 2.1991131305694580078125) + 3.141590118408203125))) * _3210;
                        _3058 = (_3225 * _3173.x) + _3131;
                        _3059 = (_3225 * _3173.y) + _3132;
                        _3060 = (_3225 * _3173.z) + _3133;
                        _3055 = (_3305 * _3190.x) + _3128;
                        _3056 = (_3305 * _3190.y) + _3129;
                        _3057 = (_3305 * _3190.z) + _3130;
                        if (_3135 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3128 = _3055;
                            _3129 = _3056;
                            _3130 = _3057;
                            _3131 = _3058;
                            _3132 = _3059;
                            _3133 = _3060;
                            _3134 = _3135;
                        }
                    }
                    frontier_phi_71_pred = _3060;
                    frontier_phi_71_pred_1 = _3059;
                    frontier_phi_71_pred_2 = _3058;
                    frontier_phi_71_pred_3 = _3057;
                    frontier_phi_71_pred_4 = _3056;
                    frontier_phi_71_pred_5 = _3055;
                }
                _2841 = frontier_phi_71_pred;
                _2839 = frontier_phi_71_pred_1;
                _2837 = frontier_phi_71_pred_2;
                _2835 = frontier_phi_71_pred_3;
                _2833 = frontier_phi_71_pred_4;
                _2831 = frontier_phi_71_pred_5;
                uint _2990 = _2989 + 1u;
                if (_2990 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2983 = _2831;
                    _2984 = _2833;
                    _2985 = _2835;
                    _2986 = _2837;
                    _2987 = _2839;
                    _2988 = _2841;
                    _2989 = _2990;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2830 = _2831;
            _2832 = _2833;
            _2834 = _2835;
            _2836 = _2837;
            _2838 = _2839;
            _2840 = _2841;
        }
        uvec4 _2844 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2845 = _2844.z;
        uint _2847 = (_2845 >> 8u) & 15u;
        float _2951;
        float _2953;
        float _2955;
        float _2957;
        float _2959;
        float _2961;
        if (((4294967295u << _2847) & _2750) == 0u)
        {
            _2951 = _2830;
            _2953 = _2832;
            _2955 = _2834;
            _2957 = _2836;
            _2959 = _2838;
            _2961 = _2840;
        }
        else
        {
            float _2976 = inversesqrt(dot(vec3(_1809, _1810, _1811), vec3(_1809, _1810, _1811)));
            float _2977 = _2976 * _1809;
            float _2978 = _2976 * _1810;
            float _2979 = _2976 * _1811;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2847 < ((_2845 >> 12u) & 15u))
            {
                float _2952;
                float _2954;
                float _2956;
                float _2958;
                float _2960;
                float _2962;
                float _3111 = _2830;
                float _3112 = _2832;
                float _3113 = _2834;
                float _3114 = _2836;
                float _3115 = _2838;
                float _3116 = _2840;
                uint _3117 = _2847;
                uint _3126;
                bool _3127;
                for (;;)
                {
                    _3126 = texelFetch(g_lightClassification, int((((_2744 << 5u) + (_2730 << 9u)) + (_3117 << 2u)) >> 2u)).x;
                    _3127 = _3126 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3127)
                    {
                        frontier_phi_82_pred = _3116;
                        frontier_phi_82_pred_1 = _3115;
                        frontier_phi_82_pred_2 = _3114;
                        frontier_phi_82_pred_3 = _3113;
                        frontier_phi_82_pred_4 = _3112;
                        frontier_phi_82_pred_5 = _3111;
                    }
                    else
                    {
                        float _3319;
                        float _3320;
                        float _3321;
                        float _3322;
                        float _3323;
                        float _3324;
                        float _3613;
                        float _3614;
                        float _3615;
                        float _3616;
                        float _3617;
                        float _3618;
                        float _3332 = _3111;
                        float _3333 = _3112;
                        float _3334 = _3113;
                        float _3335 = _3114;
                        float _3336 = _3115;
                        float _3337 = _3116;
                        uint _3338 = _3126;
                        uint _3339;
                        vec4 _3364;
                        float _3365;
                        vec4 _3380;
                        vec3 _3392;
                        vec4 _3407;
                        vec4 _3423;
                        float _3469;
                        bool _3470;
                        for (;;)
                        {
                            uint _3349 = ((_3117 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3338));
                            _3339 = (_3338 + 4294967295u) & _3338;
                            uint _3351 = _3349 * 40u;
                            _3364 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3351)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 3u)).x));
                            _3365 = _3364.w;
                            uint _3367 = (_3349 * 40u) + 4u;
                            _3380 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3367)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 3u)).x));
                            uint _3382 = (_3349 * 40u) + 8u;
                            _3392 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3382)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 2u)).x));
                            uint _3394 = (_3349 * 40u) + 16u;
                            _3407 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3394)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 3u)).x));
                            uint _3410 = (_3349 * 40u) + 20u;
                            _3423 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3410)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 3u)).x));
                            uint _3425 = (_3349 * 40u) + 24u;
                            vec4 _3438 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3425)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 3u)).x));
                            uint _3444 = (_3349 * 40u) + 28u;
                            vec4 _3457 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3444)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3444 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3444 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3444 + 3u)).x));
                            _3469 = fma(_1811, _3457.z, fma(_1810, _3457.y, _3457.x * _1809)) + _3457.w;
                            _3470 = !((fma(_1811, _3438.z, fma(_1810, _3438.y, _3438.x * _1809)) + _3438.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3470)
                            {
                                float _3497 = _3364.x - _1809;
                                float _3498 = _3364.y - _1810;
                                float _3499 = _3364.z - _1811;
                                float _3500 = dot(vec3(_3497, _3498, _3499), vec3(_3497, _3498, _3499));
                                float _3503 = inversesqrt(_3500);
                                float _3504 = _3503 * _3497;
                                float _3505 = _3503 * _3498;
                                float _3506 = _3503 * _3499;
                                float _3510 = 1.0 - (_3500 / (_3365 * _3365));
                                float _4666 = isnan(0.0) ? _3510 : (isnan(_3510) ? 0.0 : max(_3510, 0.0));
                                float _3511 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
                                float _3515 = sqrt(_3500) * _3380.w;
                                float _3517 = 1.39999997615814208984375 / (_3515 + 1.39999997615814208984375);
                                float _3518 = _3517 * _3517;
                                float _3521 = ((1.0 - _3518) * dot(vec3(_3504, _3505, _3506), vec3(_640, _643, _646))) + _3518;
                                float _3524 = _3515 * _3515;
                                float _3528 = (fma(_1811, _3407.z, fma(_1810, _3407.y, _3407.x * _1809)) + _3407.w) / _3469;
                                float _3529 = (fma(_1811, _3423.z, fma(_1810, _3423.y, _3423.x * _1809)) + _3423.w) / _3469;
                                float _3533 = 1.0 - dot(vec2(_3528, _3529), vec2(_3528, _3529));
                                float _4682 = isnan(0.0) ? _3533 : (isnan(_3533) ? 0.0 : max(_3533, 0.0));
                                float _3534 = isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0));
                                float _3535 = _3534 * (((isnan(0.0) ? _3521 : (isnan(_3521) ? 0.0 : max(_3521, 0.0))) * _3511) / ((_3524 * 0.699999988079071044921875) + 1.0));
                                float _3547 = exp2(log2(1.0 / ((_3524 * 3.5) + 5.0)) * 0.25);
                                float _3548 = 1.0 - _715;
                                float _3555 = sqrt(1.0 - ((1.0 - (_3548 * _3548)) * (1.0 - (_3547 * _3547))));
                                float _3556 = _3555 * _3555;
                                float _3557 = _3556 * _3556;
                                float _3558 = _3504 - _2977;
                                float _3559 = _3505 - _2978;
                                float _3560 = _3506 - _2979;
                                float _3564 = inversesqrt(dot(vec3(_3558, _3559, _3560), vec3(_3558, _3559, _3560)));
                                float _3568 = dot(vec3(_640, _643, _646), vec3((-0.0) - _2977, (-0.0) - _2978, (-0.0) - _2979));
                                float _4693 = isnan(0.0) ? _3568 : (isnan(_3568) ? 0.0 : max(_3568, 0.0));
                                float _3571 = isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0));
                                float _3572 = dot(vec3(_640, _643, _646), vec3(_3564 * _3558, _3564 * _3559, _3564 * _3560));
                                float _4704 = isnan(0.0) ? _3572 : (isnan(_3572) ? 0.0 : max(_3572, 0.0));
                                float _3575 = isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0));
                                float _3579 = ((_3575 * _3575) * (_3557 + (-1.0))) + 1.0;
                                float _3580 = _3517 * _3556;
                                float _3581 = _3580 * _3580;
                                float _3587 = ((1.0 - _3581) * dot(vec3(_640, _643, _646), vec3(_3504, _3505, _3506))) + _3581;
                                float _4715 = isnan(0.0) ? _3587 : (isnan(_3587) ? 0.0 : max(_3587, 0.0));
                                float _3588 = isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0));
                                float _3589 = 1.0 - _3556;
                                float _3599 = (0.5 / (((_3588 * ((_3571 * _3589) + _3556)) + 9.9999999392252902907785028219223e-09) + (((_3588 * _3589) + _3556) * _3571))) * _3588;
                                float _4726 = isnan(0.0) ? _3599 : (isnan(_3599) ? 0.0 : max(_3599, 0.0));
                                float _3609 = (_3534 * _3511) * (((_3557 * 3.1415927410125732421875) * (isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0)))) / ((_3579 * _3579) * ((_3524 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3535 * _3380.z;
                                frontier_phi_88_pred_1 = _3535 * _3380.y;
                                frontier_phi_88_pred_2 = _3535 * _3380.x;
                                frontier_phi_88_pred_3 = _3609 * _3392.z;
                                frontier_phi_88_pred_4 = _3609 * _3392.y;
                                frontier_phi_88_pred_5 = _3609 * _3392.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3618 = frontier_phi_88_pred;
                            _3617 = frontier_phi_88_pred_1;
                            _3616 = frontier_phi_88_pred_2;
                            _3615 = frontier_phi_88_pred_3;
                            _3614 = frontier_phi_88_pred_4;
                            _3613 = frontier_phi_88_pred_5;
                            _3322 = _3616 + _3335;
                            _3323 = _3617 + _3336;
                            _3324 = _3618 + _3337;
                            _3319 = _3613 + _3332;
                            _3320 = _3614 + _3333;
                            _3321 = _3615 + _3334;
                            if (_3339 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3332 = _3319;
                                _3333 = _3320;
                                _3334 = _3321;
                                _3335 = _3322;
                                _3336 = _3323;
                                _3337 = _3324;
                                _3338 = _3339;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3324;
                        frontier_phi_82_pred_1 = _3323;
                        frontier_phi_82_pred_2 = _3322;
                        frontier_phi_82_pred_3 = _3321;
                        frontier_phi_82_pred_4 = _3320;
                        frontier_phi_82_pred_5 = _3319;
                    }
                    _2962 = frontier_phi_82_pred;
                    _2960 = frontier_phi_82_pred_1;
                    _2958 = frontier_phi_82_pred_2;
                    _2956 = frontier_phi_82_pred_3;
                    _2954 = frontier_phi_82_pred_4;
                    _2952 = frontier_phi_82_pred_5;
                    uint _3118 = _3117 + 1u;
                    if (_3118 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3111 = _2952;
                        _3112 = _2954;
                        _3113 = _2956;
                        _3114 = _2958;
                        _3115 = _2960;
                        _3116 = _2962;
                        _3117 = _3118;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2958;
                frontier_phi_63_64_ladder_1 = _2962;
                frontier_phi_63_64_ladder_2 = _2960;
                frontier_phi_63_64_ladder_3 = _2956;
                frontier_phi_63_64_ladder_4 = _2954;
                frontier_phi_63_64_ladder_5 = _2952;
            }
            else
            {
                frontier_phi_63_64_ladder = _2836;
                frontier_phi_63_64_ladder_1 = _2840;
                frontier_phi_63_64_ladder_2 = _2838;
                frontier_phi_63_64_ladder_3 = _2834;
                frontier_phi_63_64_ladder_4 = _2832;
                frontier_phi_63_64_ladder_5 = _2830;
            }
            _2951 = frontier_phi_63_64_ladder_5;
            _2953 = frontier_phi_63_64_ladder_4;
            _2955 = frontier_phi_63_64_ladder_3;
            _2957 = frontier_phi_63_64_ladder;
            _2959 = frontier_phi_63_64_ladder_2;
            _2961 = frontier_phi_63_64_ladder_1;
        }
        float _2966 = isnan(1.0) ? _699 : (isnan(_699) ? 1.0 : min(_699, 1.0));
        _2763 = (_2966 * _2957) + _2275;
        _2765 = (_2966 * _2959) + _2277;
        _2767 = (_2966 * _2961) + _2279;
        _2769 = ((_2951 * _683) * _2966) + _2613;
        _2771 = ((_2953 * _685) * _2966) + _2615;
        _2773 = ((_2955 * _686) * _2966) + _2617;
    }
    else
    {
        _2763 = _2275;
        _2765 = _2277;
        _2767 = _2279;
        _2769 = _2613;
        _2771 = _2615;
        _2773 = _2617;
    }
    float _4742 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _4753 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _4764 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _2790 = ((isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0))) * (_2763 + ((isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0))) * _699))) + ((_2769 + ((isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0))) * _1539)) * cbPerFrame._m0[3u].x);
    float _2791 = ((isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0))) * (_2765 + ((isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0))) * _699))) + ((_2771 + ((isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0))) * _1539)) * cbPerFrame._m0[3u].x);
    float _2792 = ((isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0))) * (_2767 + ((isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0))) * _699))) + ((_2773 + ((isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0))) * _1539)) * cbPerFrame._m0[3u].x);
    uint _2793 = _236 + 6u;
    float _2801 = _621 / cbSceneParam._m0[86u].x;
    float _2802 = _622 / cbSceneParam._m0[86u].y;
    vec4 _2816 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2801, _2802, (log2((isnan(cbSceneParam._m0[77u].w) ? _543 : (isnan(_543) ? cbSceneParam._m0[77u].w : min(_543, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2818 = _2816.x;
    float _2819 = _2816.y;
    float _2820 = _2816.z;
    float _2821 = _2816.w;
    float _2893;
    float _2895;
    float _2897;
    float _2899;
    if (_543 > cbSceneParam._m0[78u].w)
    {
        float _2855 = isnan(_543) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _543 : min(cbSceneParam._m0[80u].w, _543));
        float _2856 = _2855 / _543;
        float _2867 = _2856 * _594;
        float _2868 = _595 * _2856;
        float _2869 = (-0.0) - _2868;
        float _2871 = _2856 * _596;
        float _2873 = (cbSceneParam._m0[77u].w * _2869) / _2855;
        float _2874 = _2873 + cbSceneParam._m0[79u].w;
        float _2875 = cbSceneParam._m0[79u].w - _2868;
        float _2881 = sqrt(((_2867 * _2867) + (_2868 * _2868)) + (_2871 * _2871));
        float _2884 = (1.0 - (cbSceneParam._m0[77u].w / _2855)) * _2881;
        float _2889 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2891 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3068;
        if (abs((_2869 - _2873) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3068 = ((((_2874 > 0.0) ? exp2(_2889 * _2874) : (2.0 - exp2(_2891 * _2874))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2884;
        }
        else
        {
            float _3012 = 1.0 / cbSceneParam._m0[80u].x;
            float _3013 = isnan(_2875) ? _2874 : (isnan(_2874) ? _2875 : max(_2874, _2875));
            float _3014 = isnan(_2875) ? _2874 : (isnan(_2874) ? _2875 : min(_2874, _2875));
            float _3023 = isnan(0.0) ? _3013 : (isnan(_3013) ? 0.0 : min(_3013, 0.0));
            float _3024 = isnan(0.0) ? _3014 : (isnan(_3014) ? 0.0 : min(_3014, 0.0));
            _3068 = ((abs(_2881 / _2869) * cbSceneParam._m0[80u].y) * ((((_3023 - _3024) * 2.0) - ((exp2(_2889 * (isnan(0.0) ? _3013 : (isnan(_3013) ? 0.0 : max(_3013, 0.0)))) - exp2(_2889 * (isnan(0.0) ? _3014 : (isnan(_3014) ? 0.0 : max(_3014, 0.0))))) * _3012)) - ((exp2(_2891 * _3023) - exp2(_2891 * _3024)) * _3012))) + (_2884 * cbSceneParam._m0[80u].z);
        }
        vec4 _3070 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2801, _2802, 1.0), 0.0);
        float _3079 = exp2((_3068 * (-1.44269502162933349609375)) * (1.0 - _3070.w));
        float _3080 = log2(_3079);
        float _3096 = log2(_2821);
        _2893 = (exp2(_3096 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3080 * cbSceneParam._m0[78u].x)) * _3070.x) / cbSceneParam._m0[78u].x)) + _2818;
        _2895 = (exp2(_3096 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3080 * cbSceneParam._m0[78u].y)) * _3070.y) / cbSceneParam._m0[78u].y)) + _2819;
        _2897 = (exp2(_3096 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3080 * cbSceneParam._m0[78u].z)) * _3070.z) / cbSceneParam._m0[78u].z)) + _2820;
        _2899 = _3079 * _2821;
    }
    else
    {
        _2893 = _2818;
        _2895 = _2819;
        _2897 = _2820;
        _2899 = _2821;
    }
    bool _3106;
    vec4 _2909;
    vec4 _2931;
    float _2933;
    float _2937;
    float _2938;
    float _2939;
    float _2940;
    bool _2950;
    for (;;)
    {
        _2909 = cbMatDynParam._m0[0u];
        float _2911 = roundEven(_2909.y);
        bool _2912 = _2911 == 3.0;
        float _2913 = log2(_2899);
        float _2920 = exp2(_2913 * cbSceneParam._m0[78u].x) * _2790;
        float _2921 = exp2(_2913 * cbSceneParam._m0[78u].y) * _2791;
        float _2922 = exp2(_2913 * cbSceneParam._m0[78u].z) * _2792;
        float _2929 = _610 + (-0.5);
        _2931 = cbMtdParam._m0[1u];
        _2933 = _2931.y * _2929;
        float _2936 = (_2911 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2937 = _2936 * (_2912 ? _2920 : (_2920 + (cbSceneParam._m0[72u].w * _2893)));
        _2938 = _2936 * (_2912 ? _2921 : (_2921 + (cbSceneParam._m0[72u].w * _2895)));
        _2939 = _2936 * (_2912 ? _2922 : (_2922 + (cbSceneParam._m0[72u].w * _2897)));
        _2940 = _2929 * 0.999000012874603271484375;
        _2950 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2950)
        {
            if ((cbInstanceData._m0[_236 + 7u].x + _2940) < 0.5)
            {
                _3106 = true;
                break;
            }
        }
        uint _3047 = _659 + uint(_2909.w);
        if ((cbInstanceData._m0[_3047].w < 1.0) && ((cbInstanceData._m0[_3047].w + _2940) < 0.5))
        {
            _3106 = true;
            break;
        }
        if ((_2933 + 1.0) < _2931.x)
        {
            _3106 = true;
            break;
        }
        _3106 = false;
        break;
    }
    float _3310;
    if (_3106)
    {
        discard_state = true;
        _3310 = 0.0;
    }
    else
    {
        _3310 = cbInstanceData._m0[_2793].w;
    }
    SV_Target.x = _2937;
    SV_Target.y = _2938;
    SV_Target.z = _2939;
    SV_Target.w = _3310;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2793].w;
    discard_exit();
}


