#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1282;
float _3944;
float _3945;
float _3946;
float _3947;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _222 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _223 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _224 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _230 = inversesqrt(dot(vec3(_222, _223, _224), vec3(_222, _223, _224)));
    float _237 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _244 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _250 = uint(roundEven(NORMAL.w)) * 13u;
    uint _256 = _250 + 1u;
    uint _260 = _250 + 2u;
    float _269 = sqrt(((cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x) + (cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x)) + (cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x));
    float _270 = _269 * TEXCOORD.z;
    float _271 = _269 * TEXCOORD.w;
    vec4 _291 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _297 = _291.x * cbMtdParam._m0[11u].x;
    float _298 = _291.y * cbMtdParam._m0[11u].y;
    float _299 = _291.z * cbMtdParam._m0[11u].z;
    vec4 _318 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _270) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _271) + cbTextureTilingScale._m0[5u].w));
    vec4 _356 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _358 = _356.x;
    float _370 = dot(vec4(_358, _356.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _387 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_358 - _370) * cbMtdParam._m0[24u].y) + _370) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3956 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _388 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
    float _395 = (_388 * ((_318.x * cbMtdParam._m0[12u].x) - _297)) + _297;
    float _396 = (_388 * ((_318.y * cbMtdParam._m0[12u].y) - _298)) + _298;
    float _397 = (_388 * ((_318.z * cbMtdParam._m0[12u].z) - _299)) + _299;
    vec4 _416 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _270) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _271) + cbTextureTilingScale._m0[14u].w));
    vec4 _436 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _270) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _271) + cbTextureTilingScale._m0[20u].w));
    vec4 _461 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _270) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _271) + cbTextureTilingScale._m0[4u].w));
    vec4 _478 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _480 = _478.x;
    float _481 = _478.y;
    float _482 = _478.z;
    float _491 = ((_461.z - _482) * _388) + _482;
    float _494 = ((((_461.x - _480) * _388) + _480) * 2.0) + (-1.0);
    float _495 = ((((_461.y - _481) * _388) + _481) * 2.0) + (-1.0);
    float _496 = dot(vec2(_494, _495), vec2(_494, _495));
    float _3967 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _501 = sqrt(1.0 - (isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0))));
    vec4 _517 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _542 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _270) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _271) + cbTextureTilingScale._m0[11u].w));
    float _544 = _542.x;
    float _545 = 1.0 - _544;
    float _558 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_544 - _545) * cbMtdParam._m0[24u].z) + _545) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3978 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _559 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
    float _566 = (_559 * ((_416.x * cbMtdParam._m0[18u].x) - _395)) + _395;
    float _567 = (_559 * ((_416.y * cbMtdParam._m0[18u].y) - _396)) + _396;
    float _568 = (_559 * ((_416.z * cbMtdParam._m0[18u].z) - _397)) + _397;
    vec4 _580 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _594 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _596 = _594.x;
    float _614 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _270) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _271) + cbTextureTilingScale._m0[9u].w)).x - _596) * _388) + _596;
    float _618 = ((_580.x - _614) * cbMtdParam._m0[19u].z) + _614;
    float _620 = _618 - (_618 * _559);
    float _625 = (((_436.z - _491) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _491;
    float _629 = ((_517.z - _625) * cbMtdParam._m0[19u].w) + _625;
    vec4 _642 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _270) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _271) + cbTextureTilingScale._m0[15u].w));
    float _649 = (_642.x * 2.0) + (-1.0);
    float _650 = (_642.y * 2.0) + (-1.0);
    float _651 = dot(vec2(_649, _650), vec2(_649, _650));
    float _3989 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _659 = (_559 * (_642.z - _629)) + _629;
    float _668 = (_494 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_436.x * 2.0) + (-1.0)))) + (((_517.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _669 = (_495 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_436.y * 2.0) + (-1.0)))) + (((_517.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _681 = (((_649 - _668) + (cbMtdParam._m0[21u].x * _668)) * _559) + _668;
    float _682 = (((_650 - _669) + (cbMtdParam._m0[21u].x * _669)) * _559) + _669;
    float _683 = (_559 * (sqrt(1.0 - (isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0)))) - _501)) + _501;
    float _688 = cbMtdParam._m0[22u].x + _517.w;
    float _691 = fma(_683, _237 * NORMAL.x, fma(_682, _244 * TANGENT.x, (_230 * _222) * _681));
    float _694 = fma(_683, _237 * NORMAL.y, fma(_682, _244 * TANGENT.y, (_230 * _223) * _681));
    float _697 = fma(_683, _237 * NORMAL.z, fma(_682, _244 * TANGENT.z, (_230 * _224) * _681));
    float _701 = inversesqrt(dot(vec3(_691, _694, _697), vec3(_691, _694, _697)));
    float _702 = _701 * _691;
    float _703 = _701 * _694;
    float _704 = _701 * _697;
    float _4000 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _705 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
    float _4011 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _4022 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _4033 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _4044 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _4055 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _710 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
    float _724 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _765 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _775 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _765);
    float _776 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _765);
    float _777 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _765);
    float _781 = inversesqrt(dot(vec3(_775, _776, _777), vec3(_775, _776, _777)));
    float _782 = _775 * _781;
    float _783 = _776 * _781;
    float _784 = _777 * _781;
    vec4 _789 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _791 = _789.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _963 = sqrt(((_775 * _775) + (_776 * _776)) + (_777 * _777));
        float _969 = (cbMatDynParam._m0[5u].x * _963) + cbMatDynParam._m0[5u].y;
        float _4066 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _970 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
        float _974 = (cbMatDynParam._m0[5u].z * _963) + cbMatDynParam._m0[5u].w;
        float _4077 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0))) - _970)) + _970) < ((_791 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _802 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _803 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _821 = fma(_704, cbSceneParam._m0[5u].z, fma(_703, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _702));
    float _824 = fma(_704, cbSceneParam._m0[6u].z, fma(_703, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _702));
    float _827 = fma(_704, cbSceneParam._m0[7u].z, fma(_703, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _702));
    uint _840 = _250 + 9u;
    uint _841 = _840 + uint(cbMatDynParam._m0[0u].w);
    float _847 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0)))) * cbInstanceData._m0[_841].x;
    float _848 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0)))) * cbInstanceData._m0[_841].y;
    float _849 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0)))) * cbInstanceData._m0[_841].z;
    float _4088 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
    float _850 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
    float _4099 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
    float _851 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
    float _4110 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
    float _852 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
    float _853 = 1.0 - _710;
    float _854 = _850 * _853;
    float _855 = _851 * _853;
    float _856 = _852 * _853;
    float _861 = (_850 + (-0.039999999105930328369140625)) * _710;
    float _862 = (_851 + (-0.039999999105930328369140625)) * _710;
    float _863 = (_852 + (-0.039999999105930328369140625)) * _710;
    float _864 = _861 + 0.039999999105930328369140625;
    float _866 = _862 + 0.039999999105930328369140625;
    float _867 = _863 + 0.039999999105930328369140625;
    vec4 _876 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _802, cbSceneParam._m0[86u].y * _803));
    float _880 = ((isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0))) * TEXCOORD_5.w) * _876.x;
    float _881 = dot(vec3(_702, _703, _704), vec3(_782, _783, _784));
    float _884 = _881 * 2.0;
    float _888 = (_884 * _702) - _782;
    float _889 = (_884 * _703) - _783;
    float _890 = (_884 * _704) - _784;
    float _894 = abs(dot(vec3(_782, _783, _784), vec3(_702, _703, _704)));
    float _4121 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
    float _896 = sqrt(_705);
    float _909 = exp2((_896 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_896 * 3.0));
    float _915 = (1.0 - _909) * ((_896 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _916 = _909 * _896;
    float _944 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _948 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _952 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1281;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1006 = fma(_952, cbModelParam._m0[26u].z, fma(_948, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _944));
        float _1010 = fma(_952, cbModelParam._m0[27u].z, fma(_948, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _944));
        float _1014 = fma(_952, cbModelParam._m0[28u].z, fma(_948, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _944));
        float _1039 = _944 + _702;
        float _1040 = _948 + _703;
        float _1041 = _952 + _704;
        float _1051 = fma(_1041, cbModelParam._m0[26u].z, fma(_1040, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1039)) - _1006;
        float _1052 = fma(_1041, cbModelParam._m0[27u].z, fma(_1040, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1039)) - _1010;
        float _1053 = fma(_1041, cbModelParam._m0[28u].z, fma(_1040, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1039)) - _1014;
        float _1057 = inversesqrt(dot(vec3(_1051, _1052, _1053), vec3(_1051, _1052, _1053)));
        float _1070 = ((_1057 * _1051) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1006 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1071 = ((_1057 * _1052) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1010 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1072 = ((_1057 * _1053) / cbModelParam._m0[34u].z) + ((((((_1014 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1075 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1070, _1071, _1072), 0.0);
        vec4 _1082 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1070, _1071, _1072), 0.0);
        vec4 _1089 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1070, _1071, _1072), 0.0);
        vec4 _1096 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1070, _1071, _1072), 0.0);
        float _1109 = exp2((_1075.w + (-0.5)) * 20.0) * 2.0;
        float _1110 = _1109 * (_1075.x + (-0.5));
        float _1111 = _1109 * (_1075.y + (-0.5));
        float _1112 = _1109 * (_1075.z + (-0.5));
        float _1119 = exp2((_1082.w + (-0.5)) * 20.0) * 2.0;
        float _1120 = _1119 * (_1082.x + (-0.5));
        float _1121 = _1119 * (_1082.y + (-0.5));
        float _1122 = _1119 * (_1082.z + (-0.5));
        float _1129 = exp2((_1089.w + (-0.5)) * 20.0) * 2.0;
        float _1130 = _1129 * (_1089.x + (-0.5));
        float _1131 = _1129 * (_1089.y + (-0.5));
        float _1132 = _1129 * (_1089.z + (-0.5));
        float _1139 = exp2((_1096.w + (-0.5)) * 20.0) * 2.0;
        float _1140 = _1139 * (_1096.x + (-0.5));
        float _1141 = _1139 * (_1096.y + (-0.5));
        float _1142 = _1139 * (_1096.z + (-0.5));
        float _1143 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1144 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1145 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1146 = _1110 * 0.5;
        float _1147 = _1120 * 0.5;
        float _1148 = _1130 * 0.5;
        float _1149 = dot(vec3(_1146, _1147, _1148), vec3(_1146, _1147, _1148));
        float _1154 = (_1149 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1149);
        float _1163 = (dot(vec3(_702, _703, _704), vec3(_1154 * _1146, _1154 * _1147, _1154 * _1148)) + 1.0) * 0.5;
        float _4147 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1173 = sqrt(((_1147 * _1147) + (_1146 * _1146)) + (_1148 * _1148)) / (_1143 + 9.9999997473787516355514526367188e-06);
        float _4158 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1174 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
        float _1175 = _1174 * 2.0;
        float _1179 = (1.0 - _1174) / (_1174 + 1.0);
        float _4169 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1180 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
        float _1189 = ((((1.0 - _1180) * (_1175 + 2.0)) * exp2(log2(isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0))) * (_1175 + 1.0))) + _1180) * _1143;
        float _1190 = _1111 * 0.5;
        float _1191 = _1121 * 0.5;
        float _1192 = _1131 * 0.5;
        float _1193 = dot(vec3(_1190, _1191, _1192), vec3(_1190, _1191, _1192));
        float _1198 = (_1193 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1193);
        float _1206 = (dot(vec3(_702, _703, _704), vec3(_1198 * _1190, _1198 * _1191, _1198 * _1192)) + 1.0) * 0.5;
        float _4180 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1215 = sqrt(((_1191 * _1191) + (_1190 * _1190)) + (_1192 * _1192)) / (_1144 + 9.9999997473787516355514526367188e-06);
        float _4191 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1216 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
        float _1217 = _1216 * 2.0;
        float _1221 = (1.0 - _1216) / (_1216 + 1.0);
        float _4202 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1222 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
        float _1231 = ((((1.0 - _1222) * (_1217 + 2.0)) * exp2(log2(isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0))) * (_1217 + 1.0))) + _1222) * _1144;
        float _1232 = _1112 * 0.5;
        float _1233 = _1122 * 0.5;
        float _1234 = _1132 * 0.5;
        float _1235 = dot(vec3(_1232, _1233, _1234), vec3(_1232, _1233, _1234));
        float _1240 = (_1235 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1235);
        float _1248 = (dot(vec3(_702, _703, _704), vec3(_1240 * _1232, _1240 * _1233, _1240 * _1234)) + 1.0) * 0.5;
        float _4213 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1257 = sqrt(((_1233 * _1233) + (_1232 * _1232)) + (_1234 * _1234)) / (_1145 + 9.9999997473787516355514526367188e-06);
        float _4224 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1258 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
        float _1259 = _1258 * 2.0;
        float _1263 = (1.0 - _1258) / (_1258 + 1.0);
        float _4235 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1264 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
        float _1273 = ((((1.0 - _1264) * (_1259 + 2.0)) * exp2(log2(isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0))) * (_1259 + 1.0))) + _1264) * _1145;
        _1281 = _1112;
        _1283 = _1111;
        _1284 = _1110;
        _1285 = _1122;
        _1286 = _1121;
        _1287 = _1120;
        _1288 = _1132;
        _1289 = _1131;
        _1290 = _1130;
        _1291 = _1145;
        _1292 = _1144;
        _1293 = _1143;
        _1294 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0)));
        _1295 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0)));
        _1296 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0)));
    }
    else
    {
        _1281 = _1282;
        _1283 = _1282;
        _1284 = _1282;
        _1285 = _1282;
        _1286 = _1282;
        _1287 = _1282;
        _1288 = _1282;
        _1289 = _1282;
        _1290 = _1282;
        _1291 = _1282;
        _1292 = _1282;
        _1293 = _1282;
        _1294 = 0.0;
        _1295 = 0.0;
        _1296 = 0.0;
    }
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1324 = fma(_952, cbModelParam._m0[30u].z, fma(_948, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _944));
        float _1328 = fma(_952, cbModelParam._m0[31u].z, fma(_948, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _944));
        float _1332 = fma(_952, cbModelParam._m0[32u].z, fma(_948, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _944));
        float _1355 = _944 + _702;
        float _1356 = _948 + _703;
        float _1357 = _952 + _704;
        float _1367 = fma(_1357, cbModelParam._m0[30u].z, fma(_1356, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1355)) - _1324;
        float _1368 = fma(_1357, cbModelParam._m0[31u].z, fma(_1356, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1355)) - _1328;
        float _1369 = fma(_1357, cbModelParam._m0[32u].z, fma(_1356, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1355)) - _1332;
        float _1373 = inversesqrt(dot(vec3(_1367, _1368, _1369), vec3(_1367, _1368, _1369)));
        float _1386 = ((_1373 * _1367) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1324 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1387 = ((_1373 * _1368) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1328 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1388 = ((_1373 * _1369) / cbModelParam._m0[35u].z) + ((((((_1332 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1390 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1386, _1387, _1388), 0.0);
        vec4 _1397 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1386, _1387, _1388), 0.0);
        vec4 _1404 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1386, _1387, _1388), 0.0);
        vec4 _1411 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1386, _1387, _1388), 0.0);
        float _1423 = exp2((_1390.w + (-0.5)) * 20.0) * 2.0;
        float _1424 = _1423 * (_1390.x + (-0.5));
        float _1425 = _1423 * (_1390.y + (-0.5));
        float _1426 = _1423 * (_1390.z + (-0.5));
        float _1433 = exp2((_1397.w + (-0.5)) * 20.0) * 2.0;
        float _1434 = _1433 * (_1397.x + (-0.5));
        float _1435 = _1433 * (_1397.y + (-0.5));
        float _1436 = _1433 * (_1397.z + (-0.5));
        float _1443 = exp2((_1404.w + (-0.5)) * 20.0) * 2.0;
        float _1444 = _1443 * (_1404.x + (-0.5));
        float _1445 = _1443 * (_1404.y + (-0.5));
        float _1446 = _1443 * (_1404.z + (-0.5));
        float _1453 = exp2((_1411.w + (-0.5)) * 20.0) * 2.0;
        float _1454 = _1453 * (_1411.x + (-0.5));
        float _1455 = _1453 * (_1411.y + (-0.5));
        float _1456 = _1453 * (_1411.z + (-0.5));
        float _1457 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1458 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1459 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1460 = _1424 * 0.5;
        float _1461 = _1434 * 0.5;
        float _1462 = _1444 * 0.5;
        float _1463 = dot(vec3(_1460, _1461, _1462), vec3(_1460, _1461, _1462));
        float _1468 = (_1463 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1463);
        float _1476 = (dot(vec3(_702, _703, _704), vec3(_1468 * _1460, _1468 * _1461, _1468 * _1462)) + 1.0) * 0.5;
        float _4276 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1485 = sqrt(((_1461 * _1461) + (_1460 * _1460)) + (_1462 * _1462)) / (_1457 + 9.9999997473787516355514526367188e-06);
        float _4287 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1486 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
        float _1487 = _1486 * 2.0;
        float _1491 = (1.0 - _1486) / (_1486 + 1.0);
        float _4298 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1492 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
        float _1501 = ((((1.0 - _1492) * (_1487 + 2.0)) * exp2(log2(isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0))) * (_1487 + 1.0))) + _1492) * _1457;
        float _1502 = _1425 * 0.5;
        float _1503 = _1435 * 0.5;
        float _1504 = _1445 * 0.5;
        float _1505 = dot(vec3(_1502, _1503, _1504), vec3(_1502, _1503, _1504));
        float _1510 = (_1505 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1505);
        float _1518 = (dot(vec3(_702, _703, _704), vec3(_1510 * _1502, _1510 * _1503, _1510 * _1504)) + 1.0) * 0.5;
        float _4309 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1527 = sqrt(((_1503 * _1503) + (_1502 * _1502)) + (_1504 * _1504)) / (_1458 + 9.9999997473787516355514526367188e-06);
        float _4320 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1528 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
        float _1529 = _1528 * 2.0;
        float _1533 = (1.0 - _1528) / (_1528 + 1.0);
        float _4331 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1534 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
        float _1543 = ((((1.0 - _1534) * (_1529 + 2.0)) * exp2(log2(isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0))) * (_1529 + 1.0))) + _1534) * _1458;
        float _1544 = _1426 * 0.5;
        float _1545 = _1436 * 0.5;
        float _1546 = _1446 * 0.5;
        float _1547 = dot(vec3(_1544, _1545, _1546), vec3(_1544, _1545, _1546));
        float _1552 = (_1547 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1547);
        float _1560 = (dot(vec3(_702, _703, _704), vec3(_1552 * _1544, _1552 * _1545, _1552 * _1546)) + 1.0) * 0.5;
        float _4342 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
        float _1569 = sqrt(((_1545 * _1545) + (_1544 * _1544)) + (_1546 * _1546)) / (_1459 + 9.9999997473787516355514526367188e-06);
        float _4353 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
        float _1570 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
        float _1571 = _1570 * 2.0;
        float _1575 = (1.0 - _1570) / (_1570 + 1.0);
        float _4364 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1576 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
        float _1585 = ((((1.0 - _1576) * (_1571 + 2.0)) * exp2(log2(isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0))) * (_1571 + 1.0))) + _1576) * _1459;
        _1593 = _1426;
        _1594 = _1425;
        _1595 = _1424;
        _1596 = _1436;
        _1597 = _1435;
        _1598 = _1434;
        _1599 = _1446;
        _1600 = _1445;
        _1601 = _1444;
        _1602 = _1459;
        _1603 = _1458;
        _1604 = _1457;
        _1605 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0)));
        _1606 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0)));
        _1607 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0)));
    }
    else
    {
        _1593 = _1282;
        _1594 = _1282;
        _1595 = _1282;
        _1596 = _1282;
        _1597 = _1282;
        _1598 = _1282;
        _1599 = _1282;
        _1600 = _1282;
        _1601 = _1282;
        _1602 = _1282;
        _1603 = _1282;
        _1604 = _1282;
        _1605 = 0.0;
        _1606 = 0.0;
        _1607 = 0.0;
    }
    float _1617 = (cbModelParam._m0[1u].x * (_1605 - _1294)) + _1294;
    float _1618 = (cbModelParam._m0[1u].x * (_1606 - _1295)) + _1295;
    float _1619 = (cbModelParam._m0[1u].x * (_1607 - _1296)) + _1296;
    float _1640 = fma(_1619, cbSceneParam._m0[89u].z, fma(_1618, cbSceneParam._m0[89u].y, _1617 * cbSceneParam._m0[89u].x));
    float _1643 = fma(_1619, cbSceneParam._m0[90u].z, fma(_1618, cbSceneParam._m0[90u].y, _1617 * cbSceneParam._m0[90u].x));
    float _1646 = fma(_1619, cbSceneParam._m0[91u].z, fma(_1618, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1617));
    float _1661 = _888 * 0.5;
    float _1662 = _889 * 0.5;
    float _1663 = _890 * 0.5;
    float _1664 = dot(vec4(_1661, _1662, _1663, 1.0), vec4(_1595, _1598, _1601, _1604));
    float _1667 = dot(vec4(_1661, _1662, _1663, 1.0), vec4(_1594, _1597, _1600, _1603));
    float _1670 = dot(vec4(_1661, _1662, _1663, 1.0), vec4(_1593, _1596, _1599, _1602));
    float _1704;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1677 = dot(vec4(_1661, _1662, _1663, 1.0), vec4(_1281, _1285, _1288, _1291));
        float _1681 = dot(vec4(_1661, _1662, _1663, 1.0), vec4(_1283, _1286, _1289, _1292));
        float _1685 = dot(vec4(_1661, _1662, _1663, 1.0), vec4(_1284, _1287, _1290, _1293));
        float _1692 = dot(vec4(cbModelParam._m0[39u]), vec4(_1661, _1662, _1663, 1.0));
        _1704 = dot(vec3(isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0)), isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0)), isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1692) ? 0.0 : (isnan(0.0) ? _1692 : max(0.0, _1692))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1704 = 1.0;
    }
    float _1715;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1706 = dot(vec4(cbModelParam._m0[40u]), vec4(_1661, _1662, _1663, 1.0));
        _1715 = dot(vec3(isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0)), isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0)), isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1706) ? 0.0 : (isnan(0.0) ? _1706 : max(0.0, _1706))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1715 = 1.0;
    }
    float _1719 = (_1715 * cbModelParam._m0[1u].x) + (_1704 * (1.0 - cbModelParam._m0[1u].x));
    float _1729 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _705);
    float _1730 = isnan(_1729) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1729 : min(cbModelParam._m0[25u].z, _1729));
    float _1810;
    float _1812;
    float _1814;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1777 = fma(_952, cbModelParam._m0[13u].z, fma(_948, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _944)) + cbModelParam._m0[13u].w;
        float _1781 = fma(_952, cbModelParam._m0[14u].z, fma(_948, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _944)) + cbModelParam._m0[14u].w;
        float _1785 = fma(_952, cbModelParam._m0[15u].z, fma(_948, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _944)) + cbModelParam._m0[15u].w;
        float _1788 = fma(_890, cbModelParam._m0[13u].z, fma(_889, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _888));
        float _1791 = fma(_890, cbModelParam._m0[14u].z, fma(_889, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _888));
        float _1794 = fma(_890, cbModelParam._m0[15u].z, fma(_889, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _888));
        float _1822;
        if (_1788 > 0.0)
        {
            _1822 = abs((1.0 - _1777) / _1788);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1788 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1777 + 1.0) / _1788);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1822 = frontier_phi_17_15_ladder;
        }
        float _1993;
        if (_1791 > 0.0)
        {
            _1993 = abs((1.0 - _1781) / _1791);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1791 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1781 + 1.0) / _1791);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1993 = frontier_phi_26_22_ladder;
        }
        float _2288;
        if (_1794 > 0.0)
        {
            _2288 = abs((1.0 - _1785) / _1794);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1794 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1785 + 1.0) / _1794);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2288 = frontier_phi_38_33_ladder;
        }
        float _2290 = isnan(_1993) ? _1822 : (isnan(_1822) ? _1993 : min(_1822, _1993));
        float _2291 = isnan(_2288) ? _2290 : (isnan(_2290) ? _2288 : min(_2290, _2288));
        float _2295 = (_2291 * _1788) + _1777;
        float _2296 = (_2291 * _1791) + _1781;
        float _2297 = (_2291 * _1794) + _1785;
        float _2298 = _2291 * 9.9999997473787516355514526367188e-05;
        float _2300 = (-1.0) - _2298;
        float _2302 = _2298 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2297 > _2302) || ((_2297 < _2300) || ((_2296 > _2302) || ((_2296 < _2300) || ((_2295 < _2300) || (_2295 > _2302))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2442 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2297, cbModelParam._m0[9u].z, fma(_2296, cbModelParam._m0[9u].y, _2295 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2297, cbModelParam._m0[10u].z, fma(_2296, cbModelParam._m0[10u].y, _2295 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2297, cbModelParam._m0[11u].z, fma(_2296, cbModelParam._m0[11u].y, _2295 * cbModelParam._m0[11u].x))), _1730);
            frontier_phi_16_38_ladder = _2442.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2442.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2442.x * cbModelParam._m0[1u].y;
        }
        _1810 = frontier_phi_16_38_ladder_2;
        _1812 = frontier_phi_16_38_ladder_1;
        _1814 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1798 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_888, _889, _890), _1730);
        _1810 = _1798.x * cbModelParam._m0[1u].y;
        _1812 = _1798.y * cbModelParam._m0[1u].y;
        _1814 = _1798.z * cbModelParam._m0[1u].y;
    }
    float _1818 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _705);
    float _1819 = isnan(_1818) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1818 : min(cbModelParam._m0[25u].w, _1818));
    float _1908;
    float _1910;
    float _1912;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1872 = fma(_952, cbModelParam._m0[21u].z, fma(_948, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _944)) + cbModelParam._m0[21u].w;
        float _1876 = fma(_952, cbModelParam._m0[22u].z, fma(_948, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _944)) + cbModelParam._m0[22u].w;
        float _1880 = fma(_952, cbModelParam._m0[23u].z, fma(_948, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _944)) + cbModelParam._m0[23u].w;
        float _1883 = fma(_890, cbModelParam._m0[21u].z, fma(_889, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _888));
        float _1886 = fma(_890, cbModelParam._m0[22u].z, fma(_889, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _888));
        float _1889 = fma(_890, cbModelParam._m0[23u].z, fma(_889, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _888));
        float _1998;
        if (_1883 > 0.0)
        {
            _1998 = abs((1.0 - _1872) / _1883);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1883 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1872 + 1.0) / _1883);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1998 = frontier_phi_28_24_ladder;
        }
        float _2315;
        if (_1886 > 0.0)
        {
            _2315 = abs((1.0 - _1876) / _1886);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1886 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1876 + 1.0) / _1886);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2315 = frontier_phi_40_35_ladder;
        }
        float _2653;
        if (_1889 > 0.0)
        {
            _2653 = abs((1.0 - _1880) / _1889);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1889 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1880 + 1.0) / _1889);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2653 = frontier_phi_50_47_ladder;
        }
        float _2655 = isnan(_2315) ? _1998 : (isnan(_1998) ? _2315 : min(_1998, _2315));
        float _2656 = isnan(_2653) ? _2655 : (isnan(_2655) ? _2653 : min(_2655, _2653));
        float _2660 = (_2656 * _1883) + _1872;
        float _2661 = (_2656 * _1886) + _1876;
        float _2662 = (_2656 * _1889) + _1880;
        float _2663 = _2656 * 9.9999997473787516355514526367188e-05;
        float _2664 = (-1.0) - _2663;
        float _2666 = _2663 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2662 > _2666) || ((_2662 < _2664) || ((_2661 > _2666) || ((_2661 < _2664) || ((_2660 < _2664) || (_2660 > _2666))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2784 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2662, cbModelParam._m0[17u].z, fma(_2661, cbModelParam._m0[17u].y, _2660 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2662, cbModelParam._m0[18u].z, fma(_2661, cbModelParam._m0[18u].y, _2660 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2662, cbModelParam._m0[19u].z, fma(_2661, cbModelParam._m0[19u].y, _2660 * cbModelParam._m0[19u].x))), _1819);
            frontier_phi_25_50_ladder = _2784.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2784.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2784.x * cbModelParam._m0[1u].z;
        }
        _1908 = frontier_phi_25_50_ladder_2;
        _1910 = frontier_phi_25_50_ladder_1;
        _1912 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1892 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_888, _889, _890), _1819);
        _1908 = _1892.x * cbModelParam._m0[1u].z;
        _1910 = _1892.y * cbModelParam._m0[1u].z;
        _1912 = _1892.z * cbModelParam._m0[1u].z;
    }
    float _1925 = (((_915 * _864) + _916) * _880) * ((cbModelParam._m0[1u].w * (_1908 - _1810)) + _1810);
    float _1927 = (((_915 * _866) + _916) * _880) * ((cbModelParam._m0[1u].w * (_1910 - _1812)) + _1812);
    float _1929 = (((_915 * _867) + _916) * _880) * ((cbModelParam._m0[1u].w * (_1912 - _1814)) + _1814);
    float _1932 = fma(_1929, cbSceneParam._m0[89u].z, fma(_1927, cbSceneParam._m0[89u].y, _1925 * cbSceneParam._m0[89u].x));
    float _1935 = fma(_1929, cbSceneParam._m0[90u].z, fma(_1927, cbSceneParam._m0[90u].y, _1925 * cbSceneParam._m0[90u].x));
    float _1938 = fma(_1929, cbSceneParam._m0[91u].z, fma(_1927, cbSceneParam._m0[91u].y, _1925 * cbSceneParam._m0[91u].x));
    float _1972 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1976 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1980 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1984 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1985 = _1972 / _1984;
    float _1986 = _1976 / _1984;
    float _1987 = _1980 / _1984;
    float _2134;
    float _2135;
    float _2136;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2014 = ((uint(_1987 > cbSceneParam._m0[59u].y) + uint(_1987 > cbSceneParam._m0[59u].x)) + uint(_1987 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2015 = _2014 + 43u;
        uint _2023 = _2014 + 44u;
        uint _2031 = _2014 + 45u;
        uint _2039 = _2014 + 46u;
        float _2050 = fma(_1984, cbSceneParam._m0[_2015].w, fma(_1980, cbSceneParam._m0[_2015].z, fma(_1976, cbSceneParam._m0[_2015].y, _1972 * cbSceneParam._m0[_2015].x)));
        float _2054 = fma(_1984, cbSceneParam._m0[_2023].w, fma(_1980, cbSceneParam._m0[_2023].z, fma(_1976, cbSceneParam._m0[_2023].y, _1972 * cbSceneParam._m0[_2023].x)));
        float _2062 = fma(_1984, cbSceneParam._m0[_2039].w, fma(_1980, cbSceneParam._m0[_2039].z, fma(_1976, cbSceneParam._m0[_2039].y, _1972 * cbSceneParam._m0[_2039].x)));
        float _2067 = cbSceneParam._m0[33u].z * _2062;
        float _2069 = cbSceneParam._m0[33u].w * _2062;
        float _2072 = fma(_1984, cbSceneParam._m0[_2031].w, fma(_1980, cbSceneParam._m0[_2031].z, fma(_1976, cbSceneParam._m0[_2031].y, _1972 * cbSceneParam._m0[_2031].x))) / _2062;
        float _2120 = (cbSceneParam._m0[33u].x - sqrt(((_1986 * _1986) + (_1985 * _1985)) + (_1987 * _1987))) * cbSceneParam._m0[33u].y;
        float _4490 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
        float _2127 = (isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2067 + _2050) / _2062, (_2069 + _2054) / _2062), _2072), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2069 + _2050) / _2062, (_2054 - _2067) / _2062), _2072), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2050 - _2067) / _2062, (_2054 - _2069) / _2062), _2072), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2050 - _2069) / _2062, (_2067 + _2054) / _2062), _2072), 0.0)).x), vec4(0.25)));
        _2134 = 1.0 - (_2127 * cbSceneParam._m0[34u].x);
        _2135 = 1.0 - (_2127 * cbSceneParam._m0[34u].y);
        _2136 = 1.0 - (_2127 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2134 = 1.0;
        _2135 = 1.0;
        _2136 = 1.0;
    }
    float _2200;
    float _2202;
    float _2204;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2188 = fma(_1984, cbSceneParam._m0[63u].w, fma(_1980, cbSceneParam._m0[63u].z, fma(_1976, cbSceneParam._m0[63u].y, _1972 * cbSceneParam._m0[63u].x)));
        float _2189 = fma(_1984, cbSceneParam._m0[60u].w, fma(_1980, cbSceneParam._m0[60u].z, fma(_1976, cbSceneParam._m0[60u].y, _1972 * cbSceneParam._m0[60u].x))) / _2188;
        float _2190 = fma(_1984, cbSceneParam._m0[61u].w, fma(_1980, cbSceneParam._m0[61u].z, fma(_1976, cbSceneParam._m0[61u].y, _1972 * cbSceneParam._m0[61u].x))) / _2188;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2189 >= cbSceneParam._m0[64u].x) && (_2190 >= cbSceneParam._m0[64u].y)) && (_2189 <= cbSceneParam._m0[64u].z)) && (_2190 <= cbSceneParam._m0[64u].w))
        {
            float _2328 = fma(_1984, cbSceneParam._m0[62u].w, fma(_1980, cbSceneParam._m0[62u].z, fma(_1976, cbSceneParam._m0[62u].y, _1972 * cbSceneParam._m0[62u].x))) / _2188;
            float _2332 = isnan(cbSceneParam._m0[41u].w) ? _2328 : (isnan(_2328) ? cbSceneParam._m0[41u].w : max(_2328, cbSceneParam._m0[41u].w));
            float _2375 = (cbSceneParam._m0[33u].x - sqrt(((_1986 * _1986) + (_1985 * _1985)) + (_1987 * _1987))) * cbSceneParam._m0[33u].y;
            float _4506 = isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : max(_2375, 0.0));
            float _2382 = (isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2189, cbSceneParam._m0[33u].w + _2190), _2332), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2189, _2190 - cbSceneParam._m0[33u].z), _2332), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2189 - cbSceneParam._m0[33u].z, _2190 - cbSceneParam._m0[33u].w), _2332), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2189 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2190), _2332), 0.0)).x), vec4(0.25)));
            float _2386 = 1.0 - (_2382 * cbSceneParam._m0[34u].x);
            float _2387 = 1.0 - (_2382 * cbSceneParam._m0[34u].y);
            float _2388 = 1.0 - (_2382 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2388) ? _2136 : (isnan(_2136) ? _2388 : min(_2136, _2388));
            frontier_phi_37_36_ladder_1 = isnan(_2387) ? _2135 : (isnan(_2135) ? _2387 : min(_2135, _2387));
            frontier_phi_37_36_ladder_2 = isnan(_2386) ? _2134 : (isnan(_2134) ? _2386 : min(_2134, _2386));
        }
        else
        {
            frontier_phi_37_36_ladder = _2136;
            frontier_phi_37_36_ladder_1 = _2135;
            frontier_phi_37_36_ladder_2 = _2134;
        }
        _2200 = frontier_phi_37_36_ladder_2;
        _2202 = frontier_phi_37_36_ladder_1;
        _2204 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2200 = _2134;
        _2202 = _2135;
        _2204 = _2136;
    }
    uvec4 _2209 = floatBitsToUint(cbInstanceData._m0[_250 + 5u]);
    uint _2211 = _2209.x * 14u;
    uint _2212 = _2211 + 13u;
    float _2219 = _880 + (-1.0);
    float _2224 = (cbLight._m0[_2212].x * _2219) + 1.0;
    float _2225 = (cbLight._m0[_2212].y * _2219) + 1.0;
    float _2226 = (cbLight._m0[_2212].z * _2219) + 1.0;
    float _2227 = (cbLight._m0[_2212].w * _2219) + 1.0;
    uint _2228 = _2211 + 5u;
    float _2234 = isnan(1.0) ? _2225 : (isnan(_2225) ? 1.0 : min(_2225, 1.0));
    uint _2238 = _2211 + 4u;
    float _2247 = isnan(1.0) ? _2224 : (isnan(_2224) ? 1.0 : min(_2224, 1.0));
    uint _2251 = _2211 | 1u;
    float _2262 = dot(vec3(cbLight._m0[_2211].xyz), vec3(_702, _703, _704));
    float _2265 = dot(vec3(cbLight._m0[_2251].xyz), vec3(_702, _703, _704));
    float _4542 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
    float _4553 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
    float _2270 = (isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0))) * 0.3183098733425140380859375;
    float _2272 = (isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0))) * 0.3183098733425140380859375;
    float _2279 = ((cbLight._m0[_2228].x * _2234) * _2272) + (((cbLight._m0[_2238].x * _2200) * _2247) * _2270);
    float _2280 = ((_2234 * cbLight._m0[_2228].y) * _2272) + (((cbLight._m0[_2238].y * _2202) * _2247) * _2270);
    float _2281 = ((_2234 * cbLight._m0[_2228].z) * _2272) + (((cbLight._m0[_2238].z * _2204) * _2247) * _2270);
    uvec4 _2285 = floatBitsToUint(cbLight._m0[_2211 + 12u]);
    bool _2287 = _2285.x == 0u;
    float _2389;
    float _2391;
    float _2393;
    if (_2287)
    {
        _2389 = _2279;
        _2391 = _2280;
        _2393 = _2281;
    }
    else
    {
        uint _2397 = _2211 + 6u;
        float _2413 = (dot(vec3(cbLight._m0[_2211 + 2u].xyz), vec3(_702, _703, _704)) * 0.5) + 0.5;
        float _2414 = _2413 * _2413;
        float _4564 = isnan(0.0) ? _2414 : (isnan(_2414) ? 0.0 : max(_2414, 0.0));
        float _2415 = isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0));
        float _2416 = isnan(1.0) ? _2226 : (isnan(_2226) ? 1.0 : min(_2226, 1.0));
        _2389 = (((cbLight._m0[_2397].x * 0.3183098733425140380859375) * _2415) * _2416) + _2279;
        _2391 = (((cbLight._m0[_2397].y * 0.3183098733425140380859375) * _2415) * _2416) + _2280;
        _2393 = (((cbLight._m0[_2397].z * 0.3183098733425140380859375) * _2415) * _2416) + _2281;
    }
    bool _2396 = _2285.y == 0u;
    float _2451;
    float _2453;
    float _2455;
    if (_2396)
    {
        _2451 = _2389;
        _2453 = _2391;
        _2455 = _2393;
    }
    else
    {
        uint _2624 = _2211 + 7u;
        float _2640 = (dot(vec3(cbLight._m0[_2211 + 3u].xyz), vec3(_702, _703, _704)) * 0.5) + 0.5;
        float _2641 = _2640 * _2640;
        float _4580 = isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : max(_2641, 0.0));
        float _2642 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
        float _2643 = isnan(1.0) ? _2227 : (isnan(_2227) ? 1.0 : min(_2227, 1.0));
        _2451 = (((cbLight._m0[_2624].x * 0.3183098733425140380859375) * _2642) * _2643) + _2389;
        _2453 = (((cbLight._m0[_2624].y * 0.3183098733425140380859375) * _2642) * _2643) + _2391;
        _2455 = (((cbLight._m0[_2624].z * 0.3183098733425140380859375) * _2642) * _2643) + _2393;
    }
    uint _2458 = _2211 + 8u;
    float _2471 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2211].w)) * _705) * 0.949999988079071044921875);
    float _2472 = _2471 * _2471;
    float _2473 = cbLight._m0[_2211].x + _782;
    float _2474 = cbLight._m0[_2211].y + _783;
    float _2475 = cbLight._m0[_2211].z + _784;
    float _2479 = inversesqrt(dot(vec3(_2473, _2474, _2475), vec3(_2473, _2474, _2475)));
    float _2480 = _2479 * _2473;
    float _2481 = _2479 * _2474;
    float _2482 = _2479 * _2475;
    float _2483 = dot(vec3(_702, _703, _704), vec3(cbLight._m0[_2211].xyz));
    float _4596 = isnan(0.0) ? _2483 : (isnan(_2483) ? 0.0 : max(_2483, 0.0));
    float _2486 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
    float _4607 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
    float _2487 = isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0));
    float _2488 = dot(vec3(_702, _703, _704), vec3(_2480, _2481, _2482));
    float _4618 = isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : max(_2488, 0.0));
    float _2491 = isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0));
    float _2492 = dot(vec3(cbLight._m0[_2211].xyz), vec3(_2480, _2481, _2482));
    float _4629 = isnan(0.0) ? _2492 : (isnan(_2492) ? 0.0 : max(_2492, 0.0));
    float _2496 = _2472 * _2472;
    float _2500 = ((_2491 * _2491) * (_2496 + (-1.0))) + 1.0;
    float _2508 = exp2(log2(1.0 - (isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0)))) * 5.0);
    float _2509 = 0.959999978542327880859375 - _861;
    float _2511 = 0.959999978542327880859375 - _862;
    float _2512 = 0.959999978542327880859375 - _863;
    float _2519 = 1.0 - _2472;
    float _2530 = (0.5 / (((_2487 * ((_2486 * _2519) + _2472)) + 9.9999999392252902907785028219223e-09) + (((_2487 * _2519) + _2472) * _2486))) * _2486;
    float _4640 = isnan(0.0) ? _2530 : (isnan(_2530) ? 0.0 : max(_2530, 0.0));
    float _2532 = (isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0))) * (_2496 / ((_2500 * _2500) * 3.141590118408203125));
    uint _2546 = _2211 + 9u;
    float _2557 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2251].w)) * _705) * 0.949999988079071044921875);
    float _2558 = _2557 * _2557;
    float _2559 = cbLight._m0[_2251].x + _782;
    float _2560 = cbLight._m0[_2251].y + _783;
    float _2561 = cbLight._m0[_2251].z + _784;
    float _2565 = inversesqrt(dot(vec3(_2559, _2560, _2561), vec3(_2559, _2560, _2561)));
    float _2566 = _2565 * _2559;
    float _2567 = _2565 * _2560;
    float _2568 = _2565 * _2561;
    float _2569 = dot(vec3(_702, _703, _704), vec3(cbLight._m0[_2251].xyz));
    float _4651 = isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : max(_2569, 0.0));
    float _2572 = isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0));
    float _2573 = dot(vec3(_702, _703, _704), vec3(_2566, _2567, _2568));
    float _4662 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0));
    float _2576 = isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0));
    float _2577 = dot(vec3(cbLight._m0[_2251].xyz), vec3(_2566, _2567, _2568));
    float _4673 = isnan(0.0) ? _2577 : (isnan(_2577) ? 0.0 : max(_2577, 0.0));
    float _2581 = _2558 * _2558;
    float _2585 = ((_2576 * _2576) * (_2581 + (-1.0))) + 1.0;
    float _2592 = exp2(log2(1.0 - (isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0)))) * 5.0);
    float _2599 = 1.0 - _2558;
    float _2609 = (0.5 / (((_2487 * ((_2572 * _2599) + _2558)) + 9.9999999392252902907785028219223e-09) + (((_2487 * _2599) + _2558) * _2572))) * _2572;
    float _4684 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0));
    float _2611 = (isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0))) * (_2581 / ((_2585 * _2585) * 3.141590118408203125));
    float _2621 = (((((_2592 * _2509) + _864) * cbLight._m0[_2546].x) * _2611) * _2234) + ((((cbLight._m0[_2458].x * _2200) * ((_2508 * _2509) + _864)) * _2532) * _2247);
    float _2622 = (((((_2592 * _2511) + _866) * cbLight._m0[_2546].y) * _2611) * _2234) + ((((cbLight._m0[_2458].y * _2202) * ((_2508 * _2511) + _866)) * _2532) * _2247);
    float _2623 = (((((_2592 * _2512) + _867) * cbLight._m0[_2546].z) * _2611) * _2234) + ((((cbLight._m0[_2458].z * _2204) * ((_2508 * _2512) + _867)) * _2532) * _2247);
    float _2679;
    float _2681;
    float _2683;
    if (_2287)
    {
        _2679 = _2621;
        _2681 = _2622;
        _2683 = _2623;
    }
    else
    {
        uint _2685 = _2211 + 2u;
        uint _2689 = _2211 + 10u;
        float _2703 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2685].w)) * _705) * 0.949999988079071044921875);
        float _2704 = _2703 * _2703;
        float _2705 = cbLight._m0[_2685].x + _782;
        float _2706 = cbLight._m0[_2685].y + _783;
        float _2707 = cbLight._m0[_2685].z + _784;
        float _2711 = inversesqrt(dot(vec3(_2705, _2706, _2707), vec3(_2705, _2706, _2707)));
        float _2712 = _2711 * _2705;
        float _2713 = _2711 * _2706;
        float _2714 = _2711 * _2707;
        float _2715 = dot(vec3(_702, _703, _704), vec3(cbLight._m0[_2685].xyz));
        float _4695 = isnan(0.0) ? _2715 : (isnan(_2715) ? 0.0 : max(_2715, 0.0));
        float _2718 = isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0));
        float _2719 = dot(vec3(_702, _703, _704), vec3(_2712, _2713, _2714));
        float _4706 = isnan(0.0) ? _2719 : (isnan(_2719) ? 0.0 : max(_2719, 0.0));
        float _2722 = isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0));
        float _2723 = dot(vec3(cbLight._m0[_2685].xyz), vec3(_2712, _2713, _2714));
        float _4717 = isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : max(_2723, 0.0));
        float _2727 = _2704 * _2704;
        float _2731 = ((_2722 * _2722) * (_2727 + (-1.0))) + 1.0;
        float _2738 = exp2(log2(1.0 - (isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0)))) * 5.0);
        float _2745 = 1.0 - _2704;
        float _2755 = (0.5 / (((_2487 * ((_2718 * _2745) + _2704)) + 9.9999999392252902907785028219223e-09) + (((_2487 * _2745) + _2704) * _2718))) * _2718;
        float _4728 = isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : max(_2755, 0.0));
        float _2757 = (isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0))) * (_2727 / ((_2731 * _2731) * 3.141590118408203125));
        float _2758 = isnan(1.0) ? _2226 : (isnan(_2226) ? 1.0 : min(_2226, 1.0));
        _2679 = (((((_2738 * _2509) + _864) * cbLight._m0[_2689].x) * _2757) * _2758) + _2621;
        _2681 = (((((_2738 * _2511) + _866) * cbLight._m0[_2689].y) * _2757) * _2758) + _2622;
        _2683 = (((((_2738 * _2512) + _867) * cbLight._m0[_2689].z) * _2757) * _2758) + _2623;
    }
    float _2789;
    float _2791;
    float _2793;
    if (_2396)
    {
        _2789 = _2679;
        _2791 = _2681;
        _2793 = _2683;
    }
    else
    {
        uint _2800 = _2211 + 3u;
        uint _2804 = _2211 + 11u;
        float _2818 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2800].w)) * _705) * 0.949999988079071044921875);
        float _2819 = _2818 * _2818;
        float _2820 = cbLight._m0[_2800].x + _782;
        float _2821 = cbLight._m0[_2800].y + _783;
        float _2822 = cbLight._m0[_2800].z + _784;
        float _2826 = inversesqrt(dot(vec3(_2820, _2821, _2822), vec3(_2820, _2821, _2822)));
        float _2827 = _2826 * _2820;
        float _2828 = _2826 * _2821;
        float _2829 = _2826 * _2822;
        float _2830 = dot(vec3(_702, _703, _704), vec3(cbLight._m0[_2800].xyz));
        float _4744 = isnan(0.0) ? _2830 : (isnan(_2830) ? 0.0 : max(_2830, 0.0));
        float _2833 = isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0));
        float _2834 = dot(vec3(_702, _703, _704), vec3(_2827, _2828, _2829));
        float _4755 = isnan(0.0) ? _2834 : (isnan(_2834) ? 0.0 : max(_2834, 0.0));
        float _2837 = isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0));
        float _2838 = dot(vec3(cbLight._m0[_2800].xyz), vec3(_2827, _2828, _2829));
        float _4766 = isnan(0.0) ? _2838 : (isnan(_2838) ? 0.0 : max(_2838, 0.0));
        float _2842 = _2819 * _2819;
        float _2846 = ((_2837 * _2837) * (_2842 + (-1.0))) + 1.0;
        float _2853 = exp2(log2(1.0 - (isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0)))) * 5.0);
        float _2860 = 1.0 - _2819;
        float _2870 = (0.5 / (((_2487 * ((_2833 * _2860) + _2819)) + 9.9999999392252902907785028219223e-09) + (((_2487 * _2860) + _2819) * _2833))) * _2833;
        float _4777 = isnan(0.0) ? _2870 : (isnan(_2870) ? 0.0 : max(_2870, 0.0));
        float _2872 = (isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0))) * (_2842 / ((_2846 * _2846) * 3.141590118408203125));
        float _2873 = isnan(1.0) ? _2227 : (isnan(_2227) ? 1.0 : min(_2227, 1.0));
        _2789 = (((((_2853 * _2509) + _864) * cbLight._m0[_2804].x) * _2872) * _2873) + _2679;
        _2791 = (((((_2853 * _2511) + _866) * cbLight._m0[_2804].y) * _2872) * _2873) + _2681;
        _2793 = (((((_2853 * _2512) + _867) * cbLight._m0[_2804].z) * _2872) * _2873) + _2683;
    }
    float _2939;
    float _2941;
    float _2943;
    float _2945;
    float _2947;
    float _2949;
    if (_2209.y == 0u)
    {
        uvec4 _2894 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2895 = _2894.x;
        uint _2906 = uint((float(_2894.y) * floor(float(uint(cbSceneParam._m0[85u].y * _803) / _2895))) + floor(float(uint(cbSceneParam._m0[85u].x * _802) / _2895)));
        float _2916 = (log2(_1987 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2917 = isnan(0.0) ? _2916 : (isnan(_2916) ? 0.0 : max(_2916, 0.0));
        uint _2920 = uint(isnan(14.0) ? _2917 : (isnan(_2917) ? 14.0 : min(_2917, 14.0)));
        uvec4 _2925 = texelFetch(g_lightClusterGridBuffer, int(((_2920 << 2u) + (_2906 << 6u)) >> 2u));
        uint _2926 = _2925.x;
        uint _2927 = _2894.z;
        float _3006;
        float _3008;
        float _3010;
        float _3012;
        float _3014;
        float _3016;
        if (((((1u << ((_2927 >> 4u) & 15u)) + 4294967295u) & _2926) == 0u) || ((_2927 & 240u) == 0u))
        {
            _3006 = 0.0;
            _3008 = 0.0;
            _3010 = 0.0;
            _3012 = 0.0;
            _3014 = 0.0;
            _3016 = 0.0;
        }
        else
        {
            float _3007;
            float _3009;
            float _3011;
            float _3013;
            float _3015;
            float _3017;
            float _3159 = 0.0;
            float _3160 = 0.0;
            float _3161 = 0.0;
            float _3162 = 0.0;
            float _3163 = 0.0;
            float _3164 = 0.0;
            uint _3165 = 0u;
            uint _3174;
            bool _3175;
            for (;;)
            {
                _3174 = texelFetch(g_lightClassification, int((((_2920 << 5u) + (_2906 << 9u)) + (_3165 << 2u)) >> 2u)).x;
                _3175 = _3174 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3175)
                {
                    frontier_phi_71_pred = _3164;
                    frontier_phi_71_pred_1 = _3163;
                    frontier_phi_71_pred_2 = _3162;
                    frontier_phi_71_pred_3 = _3161;
                    frontier_phi_71_pred_4 = _3160;
                    frontier_phi_71_pred_5 = _3159;
                }
                else
                {
                    float _3304;
                    float _3305;
                    float _3306;
                    float _3307;
                    float _3308;
                    float _3309;
                    uint _3310;
                    _3304 = _3159;
                    _3305 = _3160;
                    _3306 = _3161;
                    _3307 = _3162;
                    _3308 = _3163;
                    _3309 = _3164;
                    _3310 = _3174;
                    float _3231;
                    float _3232;
                    float _3233;
                    float _3234;
                    float _3235;
                    float _3236;
                    for (;;)
                    {
                        uint _3314 = uint(findLSB(_3310)) + (_3165 << 5u);
                        uint _3311 = (_3310 + 4294967295u) & _3310;
                        uint _3316 = _3314 * 48u;
                        vec4 _3330 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3316)).x, texelFetch(g_PointLightRenderingBuffer, int(_3316 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3316 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3316 + 3u)).x));
                        uint _3336 = (_3314 * 48u) + 4u;
                        vec4 _3349 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3336)).x, texelFetch(g_PointLightRenderingBuffer, int(_3336 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3336 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3336 + 3u)).x));
                        uint _3355 = (_3314 * 48u) + 8u;
                        vec3 _3366 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3355)).x, texelFetch(g_PointLightRenderingBuffer, int(_3355 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3355 + 2u)).x));
                        float _3370 = _3330.x - _1985;
                        float _3371 = _3330.y - _1986;
                        float _3372 = _3330.z - _1987;
                        float _3373 = dot(vec3(_3370, _3371, _3372), vec3(_3370, _3371, _3372));
                        float _3376 = inversesqrt(_3373);
                        float _3377 = _3376 * _3370;
                        float _3378 = _3376 * _3371;
                        float _3379 = _3376 * _3372;
                        float _3380 = dot(vec3(_821, _824, _827), vec3(_3377, _3378, _3379));
                        float _3385 = 1.0 - (_3373 * _3330.w);
                        float _4803 = isnan(0.0) ? _3385 : (isnan(_3385) ? 0.0 : max(_3385, 0.0));
                        float _3386 = isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0));
                        float _3387 = sqrt(_3373) * _3349.w;
                        float _3390 = 1.39999997615814208984375 / (_3387 + 1.39999997615814208984375);
                        float _3391 = _3390 * _3390;
                        float _3394 = ((1.0 - _3391) * _3380) + _3391;
                        float _3397 = _3387 * _3387;
                        float _3401 = ((isnan(0.0) ? _3394 : (isnan(_3394) ? 0.0 : max(_3394, 0.0))) * _3386) / ((_3397 * 0.699999988079071044921875) + 1.0);
                        float _3405 = (-0.0) - _1985;
                        float _3406 = (-0.0) - _1986;
                        float _3407 = (-0.0) - _1987;
                        float _3411 = inversesqrt(dot(vec3(_3405, _3406, _3407), vec3(_3405, _3406, _3407)));
                        float _3412 = _3411 * _3405;
                        float _3413 = _3411 * _3406;
                        float _3414 = _3411 * _3407;
                        float _3421 = exp2(log2(1.0 / ((_3397 * 3.5) + 5.0)) * 0.25);
                        float _3422 = 1.0 - _896;
                        float _3429 = sqrt(1.0 - ((1.0 - (_3422 * _3422)) * (1.0 - (_3421 * _3421))));
                        float _3430 = _3429 * _3429;
                        float _3431 = _3430 * _3430;
                        float _3432 = _3412 + _3377;
                        float _3433 = _3413 + _3378;
                        float _3434 = _3414 + _3379;
                        float _3438 = inversesqrt(dot(vec3(_3432, _3433, _3434), vec3(_3432, _3433, _3434)));
                        float _3442 = dot(vec3(_821, _824, _827), vec3(_3412, _3413, _3414));
                        float _4819 = isnan(0.0) ? _3442 : (isnan(_3442) ? 0.0 : max(_3442, 0.0));
                        float _3445 = isnan(1.0) ? _4819 : (isnan(_4819) ? 1.0 : min(_4819, 1.0));
                        float _3446 = dot(vec3(_821, _824, _827), vec3(_3438 * _3432, _3438 * _3433, _3438 * _3434));
                        float _4830 = isnan(0.0) ? _3446 : (isnan(_3446) ? 0.0 : max(_3446, 0.0));
                        float _3449 = isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0));
                        float _3453 = ((_3449 * _3449) * (_3431 + (-1.0))) + 1.0;
                        float _3454 = _3390 * _3430;
                        float _3455 = _3454 * _3454;
                        float _3458 = ((1.0 - _3455) * _3380) + _3455;
                        float _4841 = isnan(0.0) ? _3458 : (isnan(_3458) ? 0.0 : max(_3458, 0.0));
                        float _3459 = isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0));
                        float _3460 = 1.0 - _3430;
                        float _3470 = (0.5 / (((_3459 * ((_3445 * _3460) + _3430)) + 9.9999999392252902907785028219223e-09) + (((_3459 * _3460) + _3430) * _3445))) * _3459;
                        float _4852 = isnan(0.0) ? _3470 : (isnan(_3470) ? 0.0 : max(_3470, 0.0));
                        float _3481 = (((_3431 * 3.1415927410125732421875) * (isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0)))) / ((_3453 * _3453) * ((_3397 * 2.1991131305694580078125) + 3.141590118408203125))) * _3386;
                        _3234 = (_3401 * _3349.x) + _3307;
                        _3235 = (_3401 * _3349.y) + _3308;
                        _3236 = (_3401 * _3349.z) + _3309;
                        _3231 = (_3481 * _3366.x) + _3304;
                        _3232 = (_3481 * _3366.y) + _3305;
                        _3233 = (_3481 * _3366.z) + _3306;
                        if (_3311 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3304 = _3231;
                            _3305 = _3232;
                            _3306 = _3233;
                            _3307 = _3234;
                            _3308 = _3235;
                            _3309 = _3236;
                            _3310 = _3311;
                        }
                    }
                    frontier_phi_71_pred = _3236;
                    frontier_phi_71_pred_1 = _3235;
                    frontier_phi_71_pred_2 = _3234;
                    frontier_phi_71_pred_3 = _3233;
                    frontier_phi_71_pred_4 = _3232;
                    frontier_phi_71_pred_5 = _3231;
                }
                _3017 = frontier_phi_71_pred;
                _3015 = frontier_phi_71_pred_1;
                _3013 = frontier_phi_71_pred_2;
                _3011 = frontier_phi_71_pred_3;
                _3009 = frontier_phi_71_pred_4;
                _3007 = frontier_phi_71_pred_5;
                uint _3166 = _3165 + 1u;
                if (_3166 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3159 = _3007;
                    _3160 = _3009;
                    _3161 = _3011;
                    _3162 = _3013;
                    _3163 = _3015;
                    _3164 = _3017;
                    _3165 = _3166;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3006 = _3007;
            _3008 = _3009;
            _3010 = _3011;
            _3012 = _3013;
            _3014 = _3015;
            _3016 = _3017;
        }
        uvec4 _3020 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3021 = _3020.z;
        uint _3023 = (_3021 >> 8u) & 15u;
        float _3127;
        float _3129;
        float _3131;
        float _3133;
        float _3135;
        float _3137;
        if (((4294967295u << _3023) & _2926) == 0u)
        {
            _3127 = _3006;
            _3129 = _3008;
            _3131 = _3010;
            _3133 = _3012;
            _3135 = _3014;
            _3137 = _3016;
        }
        else
        {
            float _3152 = inversesqrt(dot(vec3(_1985, _1986, _1987), vec3(_1985, _1986, _1987)));
            float _3153 = _3152 * _1985;
            float _3154 = _3152 * _1986;
            float _3155 = _3152 * _1987;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3023 < ((_3021 >> 12u) & 15u))
            {
                float _3128;
                float _3130;
                float _3132;
                float _3134;
                float _3136;
                float _3138;
                float _3287 = _3006;
                float _3288 = _3008;
                float _3289 = _3010;
                float _3290 = _3012;
                float _3291 = _3014;
                float _3292 = _3016;
                uint _3293 = _3023;
                uint _3302;
                bool _3303;
                for (;;)
                {
                    _3302 = texelFetch(g_lightClassification, int((((_2920 << 5u) + (_2906 << 9u)) + (_3293 << 2u)) >> 2u)).x;
                    _3303 = _3302 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3303)
                    {
                        frontier_phi_82_pred = _3292;
                        frontier_phi_82_pred_1 = _3291;
                        frontier_phi_82_pred_2 = _3290;
                        frontier_phi_82_pred_3 = _3289;
                        frontier_phi_82_pred_4 = _3288;
                        frontier_phi_82_pred_5 = _3287;
                    }
                    else
                    {
                        float _3495;
                        float _3496;
                        float _3497;
                        float _3498;
                        float _3499;
                        float _3500;
                        float _3788;
                        float _3789;
                        float _3790;
                        float _3791;
                        float _3792;
                        float _3793;
                        float _3508 = _3287;
                        float _3509 = _3288;
                        float _3510 = _3289;
                        float _3511 = _3290;
                        float _3512 = _3291;
                        float _3513 = _3292;
                        uint _3514 = _3302;
                        uint _3515;
                        vec4 _3540;
                        float _3541;
                        vec4 _3556;
                        vec3 _3568;
                        vec4 _3583;
                        vec4 _3598;
                        float _3644;
                        bool _3645;
                        for (;;)
                        {
                            uint _3525 = ((_3293 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3514));
                            _3515 = (_3514 + 4294967295u) & _3514;
                            uint _3527 = _3525 * 40u;
                            _3540 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3527)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3527 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3527 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3527 + 3u)).x));
                            _3541 = _3540.w;
                            uint _3543 = (_3525 * 40u) + 4u;
                            _3556 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3543)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 3u)).x));
                            uint _3558 = (_3525 * 40u) + 8u;
                            _3568 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3558)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3558 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3558 + 2u)).x));
                            uint _3570 = (_3525 * 40u) + 16u;
                            _3583 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3570)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3570 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3570 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3570 + 3u)).x));
                            uint _3585 = (_3525 * 40u) + 20u;
                            _3598 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3585)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3585 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3585 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3585 + 3u)).x));
                            uint _3600 = (_3525 * 40u) + 24u;
                            vec4 _3613 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3600)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3600 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3600 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3600 + 3u)).x));
                            uint _3619 = (_3525 * 40u) + 28u;
                            vec4 _3632 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3619)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3619 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3619 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3619 + 3u)).x));
                            _3644 = fma(_1987, _3632.z, fma(_1986, _3632.y, _3632.x * _1985)) + _3632.w;
                            _3645 = !((fma(_1987, _3613.z, fma(_1986, _3613.y, _3613.x * _1985)) + _3613.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3645)
                            {
                                float _3672 = _3540.x - _1985;
                                float _3673 = _3540.y - _1986;
                                float _3674 = _3540.z - _1987;
                                float _3675 = dot(vec3(_3672, _3673, _3674), vec3(_3672, _3673, _3674));
                                float _3678 = inversesqrt(_3675);
                                float _3679 = _3678 * _3672;
                                float _3680 = _3678 * _3673;
                                float _3681 = _3678 * _3674;
                                float _3685 = 1.0 - (_3675 / (_3541 * _3541));
                                float _4863 = isnan(0.0) ? _3685 : (isnan(_3685) ? 0.0 : max(_3685, 0.0));
                                float _3686 = isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0));
                                float _3690 = sqrt(_3675) * _3556.w;
                                float _3692 = 1.39999997615814208984375 / (_3690 + 1.39999997615814208984375);
                                float _3693 = _3692 * _3692;
                                float _3696 = ((1.0 - _3693) * dot(vec3(_3679, _3680, _3681), vec3(_821, _824, _827))) + _3693;
                                float _3699 = _3690 * _3690;
                                float _3703 = (fma(_1987, _3583.z, fma(_1986, _3583.y, _3583.x * _1985)) + _3583.w) / _3644;
                                float _3704 = (fma(_1987, _3598.z, fma(_1986, _3598.y, _3598.x * _1985)) + _3598.w) / _3644;
                                float _3708 = 1.0 - dot(vec2(_3703, _3704), vec2(_3703, _3704));
                                float _4879 = isnan(0.0) ? _3708 : (isnan(_3708) ? 0.0 : max(_3708, 0.0));
                                float _3709 = isnan(1.0) ? _4879 : (isnan(_4879) ? 1.0 : min(_4879, 1.0));
                                float _3710 = _3709 * (((isnan(0.0) ? _3696 : (isnan(_3696) ? 0.0 : max(_3696, 0.0))) * _3686) / ((_3699 * 0.699999988079071044921875) + 1.0));
                                float _3722 = exp2(log2(1.0 / ((_3699 * 3.5) + 5.0)) * 0.25);
                                float _3723 = 1.0 - _896;
                                float _3730 = sqrt(1.0 - ((1.0 - (_3723 * _3723)) * (1.0 - (_3722 * _3722))));
                                float _3731 = _3730 * _3730;
                                float _3732 = _3731 * _3731;
                                float _3733 = _3679 - _3153;
                                float _3734 = _3680 - _3154;
                                float _3735 = _3681 - _3155;
                                float _3739 = inversesqrt(dot(vec3(_3733, _3734, _3735), vec3(_3733, _3734, _3735)));
                                float _3743 = dot(vec3(_821, _824, _827), vec3((-0.0) - _3153, (-0.0) - _3154, (-0.0) - _3155));
                                float _4890 = isnan(0.0) ? _3743 : (isnan(_3743) ? 0.0 : max(_3743, 0.0));
                                float _3746 = isnan(1.0) ? _4890 : (isnan(_4890) ? 1.0 : min(_4890, 1.0));
                                float _3747 = dot(vec3(_821, _824, _827), vec3(_3739 * _3733, _3739 * _3734, _3739 * _3735));
                                float _4901 = isnan(0.0) ? _3747 : (isnan(_3747) ? 0.0 : max(_3747, 0.0));
                                float _3750 = isnan(1.0) ? _4901 : (isnan(_4901) ? 1.0 : min(_4901, 1.0));
                                float _3754 = ((_3750 * _3750) * (_3732 + (-1.0))) + 1.0;
                                float _3755 = _3692 * _3731;
                                float _3756 = _3755 * _3755;
                                float _3762 = ((1.0 - _3756) * dot(vec3(_821, _824, _827), vec3(_3679, _3680, _3681))) + _3756;
                                float _4912 = isnan(0.0) ? _3762 : (isnan(_3762) ? 0.0 : max(_3762, 0.0));
                                float _3763 = isnan(1.0) ? _4912 : (isnan(_4912) ? 1.0 : min(_4912, 1.0));
                                float _3764 = 1.0 - _3731;
                                float _3774 = (0.5 / (((_3763 * ((_3746 * _3764) + _3731)) + 9.9999999392252902907785028219223e-09) + (((_3763 * _3764) + _3731) * _3746))) * _3763;
                                float _4923 = isnan(0.0) ? _3774 : (isnan(_3774) ? 0.0 : max(_3774, 0.0));
                                float _3784 = (_3709 * _3686) * (((_3732 * 3.1415927410125732421875) * (isnan(1.0) ? _4923 : (isnan(_4923) ? 1.0 : min(_4923, 1.0)))) / ((_3754 * _3754) * ((_3699 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3710 * _3556.z;
                                frontier_phi_88_pred_1 = _3710 * _3556.y;
                                frontier_phi_88_pred_2 = _3710 * _3556.x;
                                frontier_phi_88_pred_3 = _3784 * _3568.z;
                                frontier_phi_88_pred_4 = _3784 * _3568.y;
                                frontier_phi_88_pred_5 = _3784 * _3568.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3793 = frontier_phi_88_pred;
                            _3792 = frontier_phi_88_pred_1;
                            _3791 = frontier_phi_88_pred_2;
                            _3790 = frontier_phi_88_pred_3;
                            _3789 = frontier_phi_88_pred_4;
                            _3788 = frontier_phi_88_pred_5;
                            _3498 = _3791 + _3511;
                            _3499 = _3792 + _3512;
                            _3500 = _3793 + _3513;
                            _3495 = _3788 + _3508;
                            _3496 = _3789 + _3509;
                            _3497 = _3790 + _3510;
                            if (_3515 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3508 = _3495;
                                _3509 = _3496;
                                _3510 = _3497;
                                _3511 = _3498;
                                _3512 = _3499;
                                _3513 = _3500;
                                _3514 = _3515;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3500;
                        frontier_phi_82_pred_1 = _3499;
                        frontier_phi_82_pred_2 = _3498;
                        frontier_phi_82_pred_3 = _3497;
                        frontier_phi_82_pred_4 = _3496;
                        frontier_phi_82_pred_5 = _3495;
                    }
                    _3138 = frontier_phi_82_pred;
                    _3136 = frontier_phi_82_pred_1;
                    _3134 = frontier_phi_82_pred_2;
                    _3132 = frontier_phi_82_pred_3;
                    _3130 = frontier_phi_82_pred_4;
                    _3128 = frontier_phi_82_pred_5;
                    uint _3294 = _3293 + 1u;
                    if (_3294 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3287 = _3128;
                        _3288 = _3130;
                        _3289 = _3132;
                        _3290 = _3134;
                        _3291 = _3136;
                        _3292 = _3138;
                        _3293 = _3294;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3134;
                frontier_phi_63_64_ladder_1 = _3138;
                frontier_phi_63_64_ladder_2 = _3136;
                frontier_phi_63_64_ladder_3 = _3132;
                frontier_phi_63_64_ladder_4 = _3130;
                frontier_phi_63_64_ladder_5 = _3128;
            }
            else
            {
                frontier_phi_63_64_ladder = _3012;
                frontier_phi_63_64_ladder_1 = _3016;
                frontier_phi_63_64_ladder_2 = _3014;
                frontier_phi_63_64_ladder_3 = _3010;
                frontier_phi_63_64_ladder_4 = _3008;
                frontier_phi_63_64_ladder_5 = _3006;
            }
            _3127 = frontier_phi_63_64_ladder_5;
            _3129 = frontier_phi_63_64_ladder_4;
            _3131 = frontier_phi_63_64_ladder_3;
            _3133 = frontier_phi_63_64_ladder;
            _3135 = frontier_phi_63_64_ladder_2;
            _3137 = frontier_phi_63_64_ladder_1;
        }
        float _3142 = isnan(1.0) ? _880 : (isnan(_880) ? 1.0 : min(_880, 1.0));
        _2939 = (_3142 * _3133) + _2451;
        _2941 = (_3142 * _3135) + _2453;
        _2943 = (_3142 * _3137) + _2455;
        _2945 = ((_3127 * _864) * _3142) + _2789;
        _2947 = ((_3129 * _866) * _3142) + _2791;
        _2949 = ((_3131 * _867) * _3142) + _2793;
    }
    else
    {
        _2939 = _2451;
        _2941 = _2453;
        _2943 = _2455;
        _2945 = _2789;
        _2947 = _2791;
        _2949 = _2793;
    }
    float _4939 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
    float _4950 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
    float _4961 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
    float _2966 = ((isnan(1.0) ? _4939 : (isnan(_4939) ? 1.0 : min(_4939, 1.0))) * (_2939 + ((isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0))) * _880))) + ((_2945 + ((isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0))) * _1719)) * cbPerFrame._m0[3u].x);
    float _2967 = ((isnan(1.0) ? _4950 : (isnan(_4950) ? 1.0 : min(_4950, 1.0))) * (_2941 + ((isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0))) * _880))) + ((_2947 + ((isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0))) * _1719)) * cbPerFrame._m0[3u].x);
    float _2968 = ((isnan(1.0) ? _4961 : (isnan(_4961) ? 1.0 : min(_4961, 1.0))) * (_2943 + ((isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0))) * _880))) + ((_2949 + ((isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0))) * _1719)) * cbPerFrame._m0[3u].x);
    uint _2969 = _250 + 6u;
    float _2977 = _802 / cbSceneParam._m0[86u].x;
    float _2978 = _803 / cbSceneParam._m0[86u].y;
    vec4 _2992 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2977, _2978, (log2((isnan(cbSceneParam._m0[77u].w) ? _724 : (isnan(_724) ? cbSceneParam._m0[77u].w : min(_724, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2994 = _2992.x;
    float _2995 = _2992.y;
    float _2996 = _2992.z;
    float _2997 = _2992.w;
    float _3069;
    float _3071;
    float _3073;
    float _3075;
    if (_724 > cbSceneParam._m0[78u].w)
    {
        float _3031 = isnan(_724) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _724 : min(cbSceneParam._m0[80u].w, _724));
        float _3032 = _3031 / _724;
        float _3043 = _3032 * _775;
        float _3044 = _776 * _3032;
        float _3045 = (-0.0) - _3044;
        float _3047 = _3032 * _777;
        float _3049 = (cbSceneParam._m0[77u].w * _3045) / _3031;
        float _3050 = _3049 + cbSceneParam._m0[79u].w;
        float _3051 = cbSceneParam._m0[79u].w - _3044;
        float _3057 = sqrt(((_3043 * _3043) + (_3044 * _3044)) + (_3047 * _3047));
        float _3060 = (1.0 - (cbSceneParam._m0[77u].w / _3031)) * _3057;
        float _3065 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3067 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3244;
        if (abs((_3045 - _3049) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3244 = ((((_3050 > 0.0) ? exp2(_3065 * _3050) : (2.0 - exp2(_3067 * _3050))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3060;
        }
        else
        {
            float _3188 = 1.0 / cbSceneParam._m0[80u].x;
            float _3189 = isnan(_3051) ? _3050 : (isnan(_3050) ? _3051 : max(_3050, _3051));
            float _3190 = isnan(_3051) ? _3050 : (isnan(_3050) ? _3051 : min(_3050, _3051));
            float _3199 = isnan(0.0) ? _3189 : (isnan(_3189) ? 0.0 : min(_3189, 0.0));
            float _3200 = isnan(0.0) ? _3190 : (isnan(_3190) ? 0.0 : min(_3190, 0.0));
            _3244 = ((abs(_3057 / _3045) * cbSceneParam._m0[80u].y) * ((((_3199 - _3200) * 2.0) - ((exp2(_3065 * (isnan(0.0) ? _3189 : (isnan(_3189) ? 0.0 : max(_3189, 0.0)))) - exp2(_3065 * (isnan(0.0) ? _3190 : (isnan(_3190) ? 0.0 : max(_3190, 0.0))))) * _3188)) - ((exp2(_3067 * _3199) - exp2(_3067 * _3200)) * _3188))) + (_3060 * cbSceneParam._m0[80u].z);
        }
        vec4 _3246 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2977, _2978, 1.0), 0.0);
        float _3255 = exp2((_3244 * (-1.44269502162933349609375)) * (1.0 - _3246.w));
        float _3256 = log2(_3255);
        float _3272 = log2(_2997);
        _3069 = (exp2(_3272 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3256 * cbSceneParam._m0[78u].x)) * _3246.x) / cbSceneParam._m0[78u].x)) + _2994;
        _3071 = (exp2(_3272 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3256 * cbSceneParam._m0[78u].y)) * _3246.y) / cbSceneParam._m0[78u].y)) + _2995;
        _3073 = (exp2(_3272 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3256 * cbSceneParam._m0[78u].z)) * _3246.z) / cbSceneParam._m0[78u].z)) + _2996;
        _3075 = _3255 * _2997;
    }
    else
    {
        _3069 = _2994;
        _3071 = _2995;
        _3073 = _2996;
        _3075 = _2997;
    }
    bool _3282;
    vec4 _3085;
    vec4 _3107;
    float _3109;
    float _3113;
    float _3114;
    float _3115;
    float _3116;
    bool _3126;
    for (;;)
    {
        _3085 = cbMatDynParam._m0[0u];
        float _3087 = roundEven(_3085.y);
        bool _3088 = _3087 == 3.0;
        float _3089 = log2(_3075);
        float _3096 = exp2(_3089 * cbSceneParam._m0[78u].x) * _2966;
        float _3097 = exp2(_3089 * cbSceneParam._m0[78u].y) * _2967;
        float _3098 = exp2(_3089 * cbSceneParam._m0[78u].z) * _2968;
        float _3105 = _791 + (-0.5);
        _3107 = cbMtdParam._m0[1u];
        _3109 = _3107.y * _3105;
        float _3112 = (_3087 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3113 = _3112 * (_3088 ? _3096 : (_3096 + (cbSceneParam._m0[72u].w * _3069)));
        _3114 = _3112 * (_3088 ? _3097 : (_3097 + (cbSceneParam._m0[72u].w * _3071)));
        _3115 = _3112 * (_3088 ? _3098 : (_3098 + (cbSceneParam._m0[72u].w * _3073)));
        _3116 = _3105 * 0.999000012874603271484375;
        _3126 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3126)
        {
            if ((cbInstanceData._m0[_250 + 7u].x + _3116) < 0.5)
            {
                _3282 = true;
                break;
            }
        }
        uint _3223 = _840 + uint(_3085.w);
        if ((cbInstanceData._m0[_3223].w < 1.0) && ((cbInstanceData._m0[_3223].w + _3116) < 0.5))
        {
            _3282 = true;
            break;
        }
        if ((_3109 + 1.0) < _3107.x)
        {
            _3282 = true;
            break;
        }
        _3282 = false;
        break;
    }
    float _3486;
    if (_3282)
    {
        discard_state = true;
        _3486 = 0.0;
    }
    else
    {
        _3486 = cbInstanceData._m0[_2969].w;
    }
    SV_Target.x = _3113;
    SV_Target.y = _3114;
    SV_Target.z = _3115;
    SV_Target.w = _3486;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2969].w;
    discard_exit();
}


