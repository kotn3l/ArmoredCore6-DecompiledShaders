#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 18) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_28;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1213;
float _3878;
float _3879;
float _3880;
float _3881;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _222 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _223 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _224 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _230 = inversesqrt(dot(vec3(_222, _223, _224), vec3(_222, _223, _224)));
    float _237 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _238 = _237 * NORMAL.x;
    float _239 = _237 * NORMAL.y;
    float _240 = _237 * NORMAL.z;
    float _244 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _256 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _258 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _259 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3890 = isnan(0.0) ? _256 : (isnan(_256) ? 0.0 : max(_256, 0.0));
    float _3901 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    float _3912 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    uint _269 = uint(roundEven(NORMAL.w)) * 13u;
    uint _274 = _269 + 1u;
    uint _278 = _269 + 2u;
    float _287 = sqrt(((cbInstanceData._m0[_274].x * cbInstanceData._m0[_274].x) + (cbInstanceData._m0[_269].x * cbInstanceData._m0[_269].x)) + (cbInstanceData._m0[_278].x * cbInstanceData._m0[_278].x));
    float _288 = _287 * TEXCOORD.z;
    float _289 = _287 * TEXCOORD.w;
    vec4 _302 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _288) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _289) + cbTextureTilingScale._m0[13u].w));
    vec4 _325 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _330 = _325.x * cbMtdParam._m0[9u].x;
    float _331 = _325.y * cbMtdParam._m0[9u].y;
    float _332 = _325.z * cbMtdParam._m0[9u].z;
    float _336 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _302.x) * _330;
    float _339 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _302.y) * _331;
    float _342 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _302.z) * _332;
    float _349 = ((_330 - _336) * (isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0)))) + _336;
    float _350 = ((_331 - _339) * (isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0)))) + _339;
    float _351 = ((_332 - _342) * (isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0)))) + _342;
    vec4 _364 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _288) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _289) + cbTextureTilingScale._m0[20u].w));
    vec4 _390 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _394 = _390.z;
    float _398 = (_390.x * 2.0) + (-1.0);
    float _399 = (_390.y * 2.0) + (-1.0);
    float _400 = dot(vec2(_398, _399), vec2(_398, _399));
    float _3923 = isnan(0.0) ? _400 : (isnan(_400) ? 0.0 : max(_400, 0.0));
    float _405 = sqrt(1.0 - (isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0))));
    float _410 = _398 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_364.x * 2.0) + (-1.0)));
    float _411 = _399 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_364.y * 2.0) + (-1.0)));
    vec4 _424 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _288) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _289) + cbTextureTilingScale._m0[19u].w));
    float _426 = _424.x;
    float _427 = 1.0 - _426;
    float _458 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_426 - _427) * cbMtdParam._m0[24u].w) + _427) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3934 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _459 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
    float _467 = ((((cbMtdParam._m0[10u].x - _349) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _459) + _349;
    float _468 = ((((cbMtdParam._m0[10u].y - _350) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _459) + _350;
    float _469 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _351)) * _459) + _351;
    vec4 _482 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _484 = _482.x;
    float _486 = _484 - (_484 * _459);
    float _491 = (((_364.z - _394) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _394;
    float _495 = ((cbMtdParam._m0[23u].y - _491) * _459) + _491;
    vec4 _517 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _288) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _289) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _519 = _517.x;
    float _520 = _517.y;
    float _527 = dot(vec4(cbMtdParam._m0[29u].yzw, 0.0), vec4(_238, _239, _240, 0.0));
    vec4 _542 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_28, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * _288) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * _289) + cbTextureTilingScale._m0[18u].w));
    float _544 = _542.x;
    float _549 = fract(_542.w + cbPerFrame._m0[22u].x);
    float _551 = (1.0 - _549) * _544;
    float _556 = ((_549 + (-1.0)) + _544) * 9.0;
    float _558 = ((_544 + (-1.0)) + _549) * 9.0;
    float _559 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _560 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _574 = (_551 * ((_542.y * 2.0) + (-1.0))) * sin((isnan(3.0) ? _559 : (isnan(_559) ? 3.0 : min(_559, 3.0))) * 3.1415927410125732421875);
    float _576 = (_551 * ((_542.z * 2.0) + (-1.0))) * sin((isnan(3.0) ? _560 : (isnan(_560) ? 3.0 : min(_560, 3.0))) * 3.1415927410125732421875);
    float _580 = inversesqrt(dot(vec3(_574, _576, 1.0), vec3(_574, _576, 1.0)));
    float _596 = (((((0.5 - _519) + ((_574 * 0.5) * _580)) * _527) + _519) * 2.0) + (-1.0);
    float _597 = (((((0.5 - _520) + ((_580 * 0.5) * _576)) * _527) + _520) * 2.0) + (-1.0);
    float _598 = dot(vec2(_596, _597), vec2(_596, _597));
    float _3965 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _614 = ((((cbMtdParam._m0[22u].z * _410) - _410) + _596) * _459) + _410;
    float _615 = ((((cbMtdParam._m0[22u].z * _411) - _411) + _597) * _459) + _411;
    float _616 = (_459 * (sqrt(1.0 - (isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0)))) - _405)) + _405;
    float _618 = cbMtdParam._m0[22u].x + _390.w;
    float _621 = fma(_616, _238, fma(_615, _244 * TANGENT.x, (_230 * _222) * _614));
    float _624 = fma(_616, _239, fma(_615, _244 * TANGENT.y, (_230 * _223) * _614));
    float _627 = fma(_616, _240, fma(_615, _244 * TANGENT.z, (_230 * _224) * _614));
    float _631 = inversesqrt(dot(vec3(_621, _624, _627), vec3(_621, _624, _627)));
    float _632 = _631 * _621;
    float _633 = _631 * _624;
    float _634 = _631 * _627;
    float _3976 = isnan(0.0) ? _495 : (isnan(_495) ? 0.0 : max(_495, 0.0));
    float _635 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
    float _3987 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _3998 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _4009 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _4020 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _4031 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _640 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
    float _654 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _695 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _705 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _695);
    float _706 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _695);
    float _707 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _695);
    float _711 = inversesqrt(dot(vec3(_705, _706, _707), vec3(_705, _706, _707)));
    float _712 = _705 * _711;
    float _713 = _706 * _711;
    float _714 = _707 * _711;
    vec4 _719 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _721 = _719.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _895 = sqrt(((_705 * _705) + (_706 * _706)) + (_707 * _707));
        float _901 = (cbMatDynParam._m0[5u].x * _895) + cbMatDynParam._m0[5u].y;
        float _4042 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
        float _902 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
        float _906 = (cbMatDynParam._m0[5u].z * _895) + cbMatDynParam._m0[5u].w;
        float _4053 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0))) - _902)) + _902) < ((_721 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _733 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _734 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _754 = fma(_634, cbSceneParam._m0[5u].z, fma(_633, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _632));
    float _757 = fma(_634, cbSceneParam._m0[6u].z, fma(_633, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _632));
    float _760 = fma(_634, cbSceneParam._m0[7u].z, fma(_633, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _632));
    uint _773 = _269 + 9u;
    uint _774 = _773 + uint(cbMatDynParam._m0[0u].w);
    float _780 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0)))) * cbInstanceData._m0[_774].x;
    float _781 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0)))) * cbInstanceData._m0[_774].y;
    float _782 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0)))) * cbInstanceData._m0[_774].z;
    float _4064 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _783 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
    float _4075 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
    float _784 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
    float _4086 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _785 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
    float _786 = 1.0 - _640;
    float _787 = _783 * _786;
    float _788 = _784 * _786;
    float _789 = _785 * _786;
    float _794 = (_783 + (-0.039999999105930328369140625)) * _640;
    float _795 = (_784 + (-0.039999999105930328369140625)) * _640;
    float _796 = (_785 + (-0.039999999105930328369140625)) * _640;
    float _797 = _794 + 0.039999999105930328369140625;
    float _799 = _795 + 0.039999999105930328369140625;
    float _800 = _796 + 0.039999999105930328369140625;
    vec4 _809 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _733, cbSceneParam._m0[86u].y * _734));
    float _813 = ((isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0))) * TEXCOORD_5.w) * _809.x;
    float _814 = dot(vec3(_632, _633, _634), vec3(_712, _713, _714));
    float _817 = _814 * 2.0;
    float _821 = (_817 * _632) - _712;
    float _822 = (_817 * _633) - _713;
    float _823 = (_817 * _634) - _714;
    float _827 = abs(dot(vec3(_712, _713, _714), vec3(_632, _633, _634)));
    float _4097 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
    float _829 = sqrt(_635);
    float _841 = exp2((_829 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_829 * 3.0));
    float _847 = (1.0 - _841) * ((_829 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _848 = _841 * _829;
    float _876 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _880 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _884 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1212;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _938 = fma(_884, cbModelParam._m0[26u].z, fma(_880, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _876));
        float _942 = fma(_884, cbModelParam._m0[27u].z, fma(_880, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _876));
        float _946 = fma(_884, cbModelParam._m0[28u].z, fma(_880, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _876));
        float _970 = _876 + _632;
        float _971 = _880 + _633;
        float _972 = _884 + _634;
        float _982 = fma(_972, cbModelParam._m0[26u].z, fma(_971, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _970)) - _938;
        float _983 = fma(_972, cbModelParam._m0[27u].z, fma(_971, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _970)) - _942;
        float _984 = fma(_972, cbModelParam._m0[28u].z, fma(_971, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _970)) - _946;
        float _988 = inversesqrt(dot(vec3(_982, _983, _984), vec3(_982, _983, _984)));
        float _1001 = ((_988 * _982) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_938 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1002 = ((_988 * _983) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_942 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1003 = ((_988 * _984) / cbModelParam._m0[34u].z) + ((((((_946 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1006 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1001, _1002, _1003), 0.0);
        vec4 _1013 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1001, _1002, _1003), 0.0);
        vec4 _1020 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1001, _1002, _1003), 0.0);
        vec4 _1027 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1001, _1002, _1003), 0.0);
        float _1040 = exp2((_1006.w + (-0.5)) * 20.0) * 2.0;
        float _1041 = _1040 * (_1006.x + (-0.5));
        float _1042 = _1040 * (_1006.y + (-0.5));
        float _1043 = _1040 * (_1006.z + (-0.5));
        float _1050 = exp2((_1013.w + (-0.5)) * 20.0) * 2.0;
        float _1051 = _1050 * (_1013.x + (-0.5));
        float _1052 = _1050 * (_1013.y + (-0.5));
        float _1053 = _1050 * (_1013.z + (-0.5));
        float _1060 = exp2((_1020.w + (-0.5)) * 20.0) * 2.0;
        float _1061 = _1060 * (_1020.x + (-0.5));
        float _1062 = _1060 * (_1020.y + (-0.5));
        float _1063 = _1060 * (_1020.z + (-0.5));
        float _1070 = exp2((_1027.w + (-0.5)) * 20.0) * 2.0;
        float _1071 = _1070 * (_1027.x + (-0.5));
        float _1072 = _1070 * (_1027.y + (-0.5));
        float _1073 = _1070 * (_1027.z + (-0.5));
        float _1074 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1075 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1076 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1077 = _1041 * 0.5;
        float _1078 = _1051 * 0.5;
        float _1079 = _1061 * 0.5;
        float _1080 = dot(vec3(_1077, _1078, _1079), vec3(_1077, _1078, _1079));
        float _1085 = (_1080 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1080);
        float _1094 = (dot(vec3(_632, _633, _634), vec3(_1085 * _1077, _1085 * _1078, _1085 * _1079)) + 1.0) * 0.5;
        float _4123 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1104 = sqrt(((_1078 * _1078) + (_1077 * _1077)) + (_1079 * _1079)) / (_1074 + 9.9999997473787516355514526367188e-06);
        float _4134 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1105 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
        float _1106 = _1105 * 2.0;
        float _1110 = (1.0 - _1105) / (_1105 + 1.0);
        float _4145 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1111 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
        float _1120 = ((((1.0 - _1111) * (_1106 + 2.0)) * exp2(log2(isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0))) * (_1106 + 1.0))) + _1111) * _1074;
        float _1121 = _1042 * 0.5;
        float _1122 = _1052 * 0.5;
        float _1123 = _1062 * 0.5;
        float _1124 = dot(vec3(_1121, _1122, _1123), vec3(_1121, _1122, _1123));
        float _1129 = (_1124 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1124);
        float _1137 = (dot(vec3(_632, _633, _634), vec3(_1129 * _1121, _1129 * _1122, _1129 * _1123)) + 1.0) * 0.5;
        float _4156 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1146 = sqrt(((_1122 * _1122) + (_1121 * _1121)) + (_1123 * _1123)) / (_1075 + 9.9999997473787516355514526367188e-06);
        float _4167 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1147 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
        float _1148 = _1147 * 2.0;
        float _1152 = (1.0 - _1147) / (_1147 + 1.0);
        float _4178 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1153 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
        float _1162 = ((((1.0 - _1153) * (_1148 + 2.0)) * exp2(log2(isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0))) * (_1148 + 1.0))) + _1153) * _1075;
        float _1163 = _1043 * 0.5;
        float _1164 = _1053 * 0.5;
        float _1165 = _1063 * 0.5;
        float _1166 = dot(vec3(_1163, _1164, _1165), vec3(_1163, _1164, _1165));
        float _1171 = (_1166 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1166);
        float _1179 = (dot(vec3(_632, _633, _634), vec3(_1171 * _1163, _1171 * _1164, _1171 * _1165)) + 1.0) * 0.5;
        float _4189 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1188 = sqrt(((_1164 * _1164) + (_1163 * _1163)) + (_1165 * _1165)) / (_1076 + 9.9999997473787516355514526367188e-06);
        float _4200 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1189 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
        float _1190 = _1189 * 2.0;
        float _1194 = (1.0 - _1189) / (_1189 + 1.0);
        float _4211 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1195 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
        float _1204 = ((((1.0 - _1195) * (_1190 + 2.0)) * exp2(log2(isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0))) * (_1190 + 1.0))) + _1195) * _1076;
        _1212 = _1043;
        _1214 = _1042;
        _1215 = _1041;
        _1216 = _1053;
        _1217 = _1052;
        _1218 = _1051;
        _1219 = _1063;
        _1220 = _1062;
        _1221 = _1061;
        _1222 = _1076;
        _1223 = _1075;
        _1224 = _1074;
        _1225 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0)));
        _1226 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0)));
        _1227 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0)));
    }
    else
    {
        _1212 = _1213;
        _1214 = _1213;
        _1215 = _1213;
        _1216 = _1213;
        _1217 = _1213;
        _1218 = _1213;
        _1219 = _1213;
        _1220 = _1213;
        _1221 = _1213;
        _1222 = _1213;
        _1223 = _1213;
        _1224 = _1213;
        _1225 = 0.0;
        _1226 = 0.0;
        _1227 = 0.0;
    }
    float _1524;
    float _1525;
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1255 = fma(_884, cbModelParam._m0[30u].z, fma(_880, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _876));
        float _1259 = fma(_884, cbModelParam._m0[31u].z, fma(_880, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _876));
        float _1263 = fma(_884, cbModelParam._m0[32u].z, fma(_880, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _876));
        float _1286 = _876 + _632;
        float _1287 = _880 + _633;
        float _1288 = _884 + _634;
        float _1298 = fma(_1288, cbModelParam._m0[30u].z, fma(_1287, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1286)) - _1255;
        float _1299 = fma(_1288, cbModelParam._m0[31u].z, fma(_1287, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1286)) - _1259;
        float _1300 = fma(_1288, cbModelParam._m0[32u].z, fma(_1287, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1286)) - _1263;
        float _1304 = inversesqrt(dot(vec3(_1298, _1299, _1300), vec3(_1298, _1299, _1300)));
        float _1317 = ((_1304 * _1298) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1255 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1318 = ((_1304 * _1299) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1259 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1319 = ((_1304 * _1300) / cbModelParam._m0[35u].z) + ((((((_1263 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1321 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1317, _1318, _1319), 0.0);
        vec4 _1328 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1317, _1318, _1319), 0.0);
        vec4 _1335 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1317, _1318, _1319), 0.0);
        vec4 _1342 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1317, _1318, _1319), 0.0);
        float _1354 = exp2((_1321.w + (-0.5)) * 20.0) * 2.0;
        float _1355 = _1354 * (_1321.x + (-0.5));
        float _1356 = _1354 * (_1321.y + (-0.5));
        float _1357 = _1354 * (_1321.z + (-0.5));
        float _1364 = exp2((_1328.w + (-0.5)) * 20.0) * 2.0;
        float _1365 = _1364 * (_1328.x + (-0.5));
        float _1366 = _1364 * (_1328.y + (-0.5));
        float _1367 = _1364 * (_1328.z + (-0.5));
        float _1374 = exp2((_1335.w + (-0.5)) * 20.0) * 2.0;
        float _1375 = _1374 * (_1335.x + (-0.5));
        float _1376 = _1374 * (_1335.y + (-0.5));
        float _1377 = _1374 * (_1335.z + (-0.5));
        float _1384 = exp2((_1342.w + (-0.5)) * 20.0) * 2.0;
        float _1385 = _1384 * (_1342.x + (-0.5));
        float _1386 = _1384 * (_1342.y + (-0.5));
        float _1387 = _1384 * (_1342.z + (-0.5));
        float _1388 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1389 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1390 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1391 = _1355 * 0.5;
        float _1392 = _1365 * 0.5;
        float _1393 = _1375 * 0.5;
        float _1394 = dot(vec3(_1391, _1392, _1393), vec3(_1391, _1392, _1393));
        float _1399 = (_1394 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1394);
        float _1407 = (dot(vec3(_632, _633, _634), vec3(_1399 * _1391, _1399 * _1392, _1399 * _1393)) + 1.0) * 0.5;
        float _4252 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1416 = sqrt(((_1392 * _1392) + (_1391 * _1391)) + (_1393 * _1393)) / (_1388 + 9.9999997473787516355514526367188e-06);
        float _4263 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1417 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
        float _1418 = _1417 * 2.0;
        float _1422 = (1.0 - _1417) / (_1417 + 1.0);
        float _4274 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1423 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
        float _1432 = ((((1.0 - _1423) * (_1418 + 2.0)) * exp2(log2(isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0))) * (_1418 + 1.0))) + _1423) * _1388;
        float _1433 = _1356 * 0.5;
        float _1434 = _1366 * 0.5;
        float _1435 = _1376 * 0.5;
        float _1436 = dot(vec3(_1433, _1434, _1435), vec3(_1433, _1434, _1435));
        float _1441 = (_1436 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1436);
        float _1449 = (dot(vec3(_632, _633, _634), vec3(_1441 * _1433, _1441 * _1434, _1441 * _1435)) + 1.0) * 0.5;
        float _4285 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1458 = sqrt(((_1434 * _1434) + (_1433 * _1433)) + (_1435 * _1435)) / (_1389 + 9.9999997473787516355514526367188e-06);
        float _4296 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1459 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
        float _1460 = _1459 * 2.0;
        float _1464 = (1.0 - _1459) / (_1459 + 1.0);
        float _4307 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1465 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
        float _1474 = ((((1.0 - _1465) * (_1460 + 2.0)) * exp2(log2(isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0))) * (_1460 + 1.0))) + _1465) * _1389;
        float _1475 = _1357 * 0.5;
        float _1476 = _1367 * 0.5;
        float _1477 = _1377 * 0.5;
        float _1478 = dot(vec3(_1475, _1476, _1477), vec3(_1475, _1476, _1477));
        float _1483 = (_1478 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1478);
        float _1491 = (dot(vec3(_632, _633, _634), vec3(_1483 * _1475, _1483 * _1476, _1483 * _1477)) + 1.0) * 0.5;
        float _4318 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1500 = sqrt(((_1476 * _1476) + (_1475 * _1475)) + (_1477 * _1477)) / (_1390 + 9.9999997473787516355514526367188e-06);
        float _4329 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1501 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
        float _1502 = _1501 * 2.0;
        float _1506 = (1.0 - _1501) / (_1501 + 1.0);
        float _4340 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1507 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
        float _1516 = ((((1.0 - _1507) * (_1502 + 2.0)) * exp2(log2(isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0))) * (_1502 + 1.0))) + _1507) * _1390;
        _1524 = _1357;
        _1525 = _1356;
        _1526 = _1355;
        _1527 = _1367;
        _1528 = _1366;
        _1529 = _1365;
        _1530 = _1377;
        _1531 = _1376;
        _1532 = _1375;
        _1533 = _1390;
        _1534 = _1389;
        _1535 = _1388;
        _1536 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0)));
        _1537 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0)));
        _1538 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0)));
    }
    else
    {
        _1524 = _1213;
        _1525 = _1213;
        _1526 = _1213;
        _1527 = _1213;
        _1528 = _1213;
        _1529 = _1213;
        _1530 = _1213;
        _1531 = _1213;
        _1532 = _1213;
        _1533 = _1213;
        _1534 = _1213;
        _1535 = _1213;
        _1536 = 0.0;
        _1537 = 0.0;
        _1538 = 0.0;
    }
    float _1548 = (cbModelParam._m0[1u].x * (_1536 - _1225)) + _1225;
    float _1549 = (cbModelParam._m0[1u].x * (_1537 - _1226)) + _1226;
    float _1550 = (cbModelParam._m0[1u].x * (_1538 - _1227)) + _1227;
    float _1571 = fma(_1550, cbSceneParam._m0[89u].z, fma(_1549, cbSceneParam._m0[89u].y, _1548 * cbSceneParam._m0[89u].x));
    float _1574 = fma(_1550, cbSceneParam._m0[90u].z, fma(_1549, cbSceneParam._m0[90u].y, _1548 * cbSceneParam._m0[90u].x));
    float _1577 = fma(_1550, cbSceneParam._m0[91u].z, fma(_1549, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1548));
    float _1592 = _821 * 0.5;
    float _1593 = _822 * 0.5;
    float _1594 = _823 * 0.5;
    float _1595 = dot(vec4(_1592, _1593, _1594, 1.0), vec4(_1526, _1529, _1532, _1535));
    float _1598 = dot(vec4(_1592, _1593, _1594, 1.0), vec4(_1525, _1528, _1531, _1534));
    float _1601 = dot(vec4(_1592, _1593, _1594, 1.0), vec4(_1524, _1527, _1530, _1533));
    float _1635;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1608 = dot(vec4(_1592, _1593, _1594, 1.0), vec4(_1212, _1216, _1219, _1222));
        float _1612 = dot(vec4(_1592, _1593, _1594, 1.0), vec4(_1214, _1217, _1220, _1223));
        float _1616 = dot(vec4(_1592, _1593, _1594, 1.0), vec4(_1215, _1218, _1221, _1224));
        float _1623 = dot(vec4(cbModelParam._m0[39u]), vec4(_1592, _1593, _1594, 1.0));
        _1635 = dot(vec3(isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0)), isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0)), isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1623) ? 0.0 : (isnan(0.0) ? _1623 : max(0.0, _1623))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1635 = 1.0;
    }
    float _1646;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1637 = dot(vec4(cbModelParam._m0[40u]), vec4(_1592, _1593, _1594, 1.0));
        _1646 = dot(vec3(isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0)), isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0)), isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1637) ? 0.0 : (isnan(0.0) ? _1637 : max(0.0, _1637))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1646 = 1.0;
    }
    float _1650 = (_1646 * cbModelParam._m0[1u].x) + (_1635 * (1.0 - cbModelParam._m0[1u].x));
    float _1660 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _635);
    float _1661 = isnan(_1660) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1660 : min(cbModelParam._m0[25u].z, _1660));
    float _1743;
    float _1745;
    float _1747;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1710 = fma(_884, cbModelParam._m0[13u].z, fma(_880, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _876)) + cbModelParam._m0[13u].w;
        float _1714 = fma(_884, cbModelParam._m0[14u].z, fma(_880, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _876)) + cbModelParam._m0[14u].w;
        float _1718 = fma(_884, cbModelParam._m0[15u].z, fma(_880, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _876)) + cbModelParam._m0[15u].w;
        float _1721 = fma(_823, cbModelParam._m0[13u].z, fma(_822, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _821));
        float _1724 = fma(_823, cbModelParam._m0[14u].z, fma(_822, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _821));
        float _1727 = fma(_823, cbModelParam._m0[15u].z, fma(_822, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _821));
        float _1755;
        if (_1721 > 0.0)
        {
            _1755 = abs((1.0 - _1710) / _1721);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1721 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1710 + 1.0) / _1721);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1755 = frontier_phi_17_15_ladder;
        }
        float _1927;
        if (_1724 > 0.0)
        {
            _1927 = abs((1.0 - _1714) / _1724);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1724 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1714 + 1.0) / _1724);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1927 = frontier_phi_26_22_ladder;
        }
        float _2223;
        if (_1727 > 0.0)
        {
            _2223 = abs((1.0 - _1718) / _1727);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1727 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1718 + 1.0) / _1727);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2223 = frontier_phi_38_33_ladder;
        }
        float _2225 = isnan(_1927) ? _1755 : (isnan(_1755) ? _1927 : min(_1755, _1927));
        float _2226 = isnan(_2223) ? _2225 : (isnan(_2225) ? _2223 : min(_2225, _2223));
        float _2230 = (_2226 * _1721) + _1710;
        float _2231 = (_2226 * _1724) + _1714;
        float _2232 = (_2226 * _1727) + _1718;
        float _2233 = _2226 * 9.9999997473787516355514526367188e-05;
        float _2235 = (-1.0) - _2233;
        float _2237 = _2233 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2232 > _2237) || ((_2232 < _2235) || ((_2231 > _2237) || ((_2231 < _2235) || ((_2230 < _2235) || (_2230 > _2237))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2377 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2232, cbModelParam._m0[9u].z, fma(_2231, cbModelParam._m0[9u].y, _2230 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2232, cbModelParam._m0[10u].z, fma(_2231, cbModelParam._m0[10u].y, _2230 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2232, cbModelParam._m0[11u].z, fma(_2231, cbModelParam._m0[11u].y, _2230 * cbModelParam._m0[11u].x))), _1661);
            frontier_phi_16_38_ladder = _2377.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2377.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2377.x * cbModelParam._m0[1u].y;
        }
        _1743 = frontier_phi_16_38_ladder_2;
        _1745 = frontier_phi_16_38_ladder_1;
        _1747 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1731 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_821, _822, _823), _1661);
        _1743 = _1731.x * cbModelParam._m0[1u].y;
        _1745 = _1731.y * cbModelParam._m0[1u].y;
        _1747 = _1731.z * cbModelParam._m0[1u].y;
    }
    float _1751 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _635);
    float _1752 = isnan(_1751) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1751 : min(cbModelParam._m0[25u].w, _1751));
    float _1842;
    float _1844;
    float _1846;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1806 = fma(_884, cbModelParam._m0[21u].z, fma(_880, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _876)) + cbModelParam._m0[21u].w;
        float _1810 = fma(_884, cbModelParam._m0[22u].z, fma(_880, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _876)) + cbModelParam._m0[22u].w;
        float _1814 = fma(_884, cbModelParam._m0[23u].z, fma(_880, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _876)) + cbModelParam._m0[23u].w;
        float _1817 = fma(_823, cbModelParam._m0[21u].z, fma(_822, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _821));
        float _1820 = fma(_823, cbModelParam._m0[22u].z, fma(_822, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _821));
        float _1823 = fma(_823, cbModelParam._m0[23u].z, fma(_822, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _821));
        float _1932;
        if (_1817 > 0.0)
        {
            _1932 = abs((1.0 - _1806) / _1817);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1817 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1806 + 1.0) / _1817);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1932 = frontier_phi_28_24_ladder;
        }
        float _2250;
        if (_1820 > 0.0)
        {
            _2250 = abs((1.0 - _1810) / _1820);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1820 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1810 + 1.0) / _1820);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2250 = frontier_phi_40_35_ladder;
        }
        float _2588;
        if (_1823 > 0.0)
        {
            _2588 = abs((1.0 - _1814) / _1823);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1823 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1814 + 1.0) / _1823);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2588 = frontier_phi_50_47_ladder;
        }
        float _2590 = isnan(_2250) ? _1932 : (isnan(_1932) ? _2250 : min(_1932, _2250));
        float _2591 = isnan(_2588) ? _2590 : (isnan(_2590) ? _2588 : min(_2590, _2588));
        float _2595 = (_2591 * _1817) + _1806;
        float _2596 = (_2591 * _1820) + _1810;
        float _2597 = (_2591 * _1823) + _1814;
        float _2598 = _2591 * 9.9999997473787516355514526367188e-05;
        float _2599 = (-1.0) - _2598;
        float _2601 = _2598 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2597 > _2601) || ((_2597 < _2599) || ((_2596 > _2601) || ((_2596 < _2599) || ((_2595 < _2599) || (_2595 > _2601))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2719 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2597, cbModelParam._m0[17u].z, fma(_2596, cbModelParam._m0[17u].y, _2595 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2597, cbModelParam._m0[18u].z, fma(_2596, cbModelParam._m0[18u].y, _2595 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2597, cbModelParam._m0[19u].z, fma(_2596, cbModelParam._m0[19u].y, _2595 * cbModelParam._m0[19u].x))), _1752);
            frontier_phi_25_50_ladder = _2719.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2719.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2719.x * cbModelParam._m0[1u].z;
        }
        _1842 = frontier_phi_25_50_ladder_2;
        _1844 = frontier_phi_25_50_ladder_1;
        _1846 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1826 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_821, _822, _823), _1752);
        _1842 = _1826.x * cbModelParam._m0[1u].z;
        _1844 = _1826.y * cbModelParam._m0[1u].z;
        _1846 = _1826.z * cbModelParam._m0[1u].z;
    }
    float _1859 = (((_847 * _797) + _848) * _813) * ((cbModelParam._m0[1u].w * (_1842 - _1743)) + _1743);
    float _1861 = (((_847 * _799) + _848) * _813) * ((cbModelParam._m0[1u].w * (_1844 - _1745)) + _1745);
    float _1863 = (((_847 * _800) + _848) * _813) * ((cbModelParam._m0[1u].w * (_1846 - _1747)) + _1747);
    float _1866 = fma(_1863, cbSceneParam._m0[89u].z, fma(_1861, cbSceneParam._m0[89u].y, _1859 * cbSceneParam._m0[89u].x));
    float _1869 = fma(_1863, cbSceneParam._m0[90u].z, fma(_1861, cbSceneParam._m0[90u].y, _1859 * cbSceneParam._m0[90u].x));
    float _1872 = fma(_1863, cbSceneParam._m0[91u].z, fma(_1861, cbSceneParam._m0[91u].y, _1859 * cbSceneParam._m0[91u].x));
    float _1906 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1910 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1914 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1918 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1919 = _1906 / _1918;
    float _1920 = _1910 / _1918;
    float _1921 = _1914 / _1918;
    float _2068;
    float _2069;
    float _2070;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1948 = ((uint(_1921 > cbSceneParam._m0[59u].y) + uint(_1921 > cbSceneParam._m0[59u].x)) + uint(_1921 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1949 = _1948 + 43u;
        uint _1957 = _1948 + 44u;
        uint _1965 = _1948 + 45u;
        uint _1973 = _1948 + 46u;
        float _1984 = fma(_1918, cbSceneParam._m0[_1949].w, fma(_1914, cbSceneParam._m0[_1949].z, fma(_1910, cbSceneParam._m0[_1949].y, _1906 * cbSceneParam._m0[_1949].x)));
        float _1988 = fma(_1918, cbSceneParam._m0[_1957].w, fma(_1914, cbSceneParam._m0[_1957].z, fma(_1910, cbSceneParam._m0[_1957].y, _1906 * cbSceneParam._m0[_1957].x)));
        float _1996 = fma(_1918, cbSceneParam._m0[_1973].w, fma(_1914, cbSceneParam._m0[_1973].z, fma(_1910, cbSceneParam._m0[_1973].y, _1906 * cbSceneParam._m0[_1973].x)));
        float _2001 = cbSceneParam._m0[33u].z * _1996;
        float _2003 = cbSceneParam._m0[33u].w * _1996;
        float _2006 = fma(_1918, cbSceneParam._m0[_1965].w, fma(_1914, cbSceneParam._m0[_1965].z, fma(_1910, cbSceneParam._m0[_1965].y, _1906 * cbSceneParam._m0[_1965].x))) / _1996;
        float _2054 = (cbSceneParam._m0[33u].x - sqrt(((_1920 * _1920) + (_1919 * _1919)) + (_1921 * _1921))) * cbSceneParam._m0[33u].y;
        float _4466 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
        float _2061 = (isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2001 + _1984) / _1996, (_2003 + _1988) / _1996), _2006), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2003 + _1984) / _1996, (_1988 - _2001) / _1996), _2006), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1984 - _2001) / _1996, (_1988 - _2003) / _1996), _2006), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1984 - _2003) / _1996, (_2001 + _1988) / _1996), _2006), 0.0)).x), vec4(0.25)));
        _2068 = 1.0 - (_2061 * cbSceneParam._m0[34u].x);
        _2069 = 1.0 - (_2061 * cbSceneParam._m0[34u].y);
        _2070 = 1.0 - (_2061 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2068 = 1.0;
        _2069 = 1.0;
        _2070 = 1.0;
    }
    float _2134;
    float _2136;
    float _2138;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2122 = fma(_1918, cbSceneParam._m0[63u].w, fma(_1914, cbSceneParam._m0[63u].z, fma(_1910, cbSceneParam._m0[63u].y, _1906 * cbSceneParam._m0[63u].x)));
        float _2123 = fma(_1918, cbSceneParam._m0[60u].w, fma(_1914, cbSceneParam._m0[60u].z, fma(_1910, cbSceneParam._m0[60u].y, _1906 * cbSceneParam._m0[60u].x))) / _2122;
        float _2124 = fma(_1918, cbSceneParam._m0[61u].w, fma(_1914, cbSceneParam._m0[61u].z, fma(_1910, cbSceneParam._m0[61u].y, _1906 * cbSceneParam._m0[61u].x))) / _2122;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2123 >= cbSceneParam._m0[64u].x) && (_2124 >= cbSceneParam._m0[64u].y)) && (_2123 <= cbSceneParam._m0[64u].z)) && (_2124 <= cbSceneParam._m0[64u].w))
        {
            float _2263 = fma(_1918, cbSceneParam._m0[62u].w, fma(_1914, cbSceneParam._m0[62u].z, fma(_1910, cbSceneParam._m0[62u].y, _1906 * cbSceneParam._m0[62u].x))) / _2122;
            float _2267 = isnan(cbSceneParam._m0[41u].w) ? _2263 : (isnan(_2263) ? cbSceneParam._m0[41u].w : max(_2263, cbSceneParam._m0[41u].w));
            float _2310 = (cbSceneParam._m0[33u].x - sqrt(((_1920 * _1920) + (_1919 * _1919)) + (_1921 * _1921))) * cbSceneParam._m0[33u].y;
            float _4482 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
            float _2317 = (isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2123, cbSceneParam._m0[33u].w + _2124), _2267), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2123, _2124 - cbSceneParam._m0[33u].z), _2267), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2123 - cbSceneParam._m0[33u].z, _2124 - cbSceneParam._m0[33u].w), _2267), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2123 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2124), _2267), 0.0)).x), vec4(0.25)));
            float _2321 = 1.0 - (_2317 * cbSceneParam._m0[34u].x);
            float _2322 = 1.0 - (_2317 * cbSceneParam._m0[34u].y);
            float _2323 = 1.0 - (_2317 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2323) ? _2070 : (isnan(_2070) ? _2323 : min(_2070, _2323));
            frontier_phi_37_36_ladder_1 = isnan(_2322) ? _2069 : (isnan(_2069) ? _2322 : min(_2069, _2322));
            frontier_phi_37_36_ladder_2 = isnan(_2321) ? _2068 : (isnan(_2068) ? _2321 : min(_2068, _2321));
        }
        else
        {
            frontier_phi_37_36_ladder = _2070;
            frontier_phi_37_36_ladder_1 = _2069;
            frontier_phi_37_36_ladder_2 = _2068;
        }
        _2134 = frontier_phi_37_36_ladder_2;
        _2136 = frontier_phi_37_36_ladder_1;
        _2138 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2134 = _2068;
        _2136 = _2069;
        _2138 = _2070;
    }
    uvec4 _2143 = floatBitsToUint(cbInstanceData._m0[_269 + 5u]);
    uint _2145 = _2143.x * 14u;
    uint _2146 = _2145 + 13u;
    float _2153 = _813 + (-1.0);
    float _2158 = (cbLight._m0[_2146].x * _2153) + 1.0;
    float _2159 = (cbLight._m0[_2146].y * _2153) + 1.0;
    float _2160 = (cbLight._m0[_2146].z * _2153) + 1.0;
    float _2161 = (cbLight._m0[_2146].w * _2153) + 1.0;
    uint _2162 = _2145 + 5u;
    float _2168 = isnan(1.0) ? _2159 : (isnan(_2159) ? 1.0 : min(_2159, 1.0));
    uint _2172 = _2145 + 4u;
    float _2182 = isnan(1.0) ? _2158 : (isnan(_2158) ? 1.0 : min(_2158, 1.0));
    uint _2186 = _2145 | 1u;
    float _2197 = dot(vec3(cbLight._m0[_2145].xyz), vec3(_632, _633, _634));
    float _2200 = dot(vec3(cbLight._m0[_2186].xyz), vec3(_632, _633, _634));
    float _4518 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
    float _4529 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
    float _2205 = (isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0))) * 0.3183098733425140380859375;
    float _2207 = (isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0))) * 0.3183098733425140380859375;
    float _2214 = ((cbLight._m0[_2162].x * _2168) * _2207) + (((cbLight._m0[_2172].x * _2134) * _2182) * _2205);
    float _2215 = ((_2168 * cbLight._m0[_2162].y) * _2207) + (((cbLight._m0[_2172].y * _2136) * _2182) * _2205);
    float _2216 = ((_2168 * cbLight._m0[_2162].z) * _2207) + (((cbLight._m0[_2172].z * _2138) * _2182) * _2205);
    uvec4 _2220 = floatBitsToUint(cbLight._m0[_2145 + 12u]);
    bool _2222 = _2220.x == 0u;
    float _2324;
    float _2326;
    float _2328;
    if (_2222)
    {
        _2324 = _2214;
        _2326 = _2215;
        _2328 = _2216;
    }
    else
    {
        uint _2332 = _2145 + 6u;
        float _2348 = (dot(vec3(cbLight._m0[_2145 + 2u].xyz), vec3(_632, _633, _634)) * 0.5) + 0.5;
        float _2349 = _2348 * _2348;
        float _4540 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
        float _2350 = isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0));
        float _2351 = isnan(1.0) ? _2160 : (isnan(_2160) ? 1.0 : min(_2160, 1.0));
        _2324 = (((cbLight._m0[_2332].x * 0.3183098733425140380859375) * _2350) * _2351) + _2214;
        _2326 = (((cbLight._m0[_2332].y * 0.3183098733425140380859375) * _2350) * _2351) + _2215;
        _2328 = (((cbLight._m0[_2332].z * 0.3183098733425140380859375) * _2350) * _2351) + _2216;
    }
    bool _2331 = _2220.y == 0u;
    float _2386;
    float _2388;
    float _2390;
    if (_2331)
    {
        _2386 = _2324;
        _2388 = _2326;
        _2390 = _2328;
    }
    else
    {
        uint _2559 = _2145 + 7u;
        float _2575 = (dot(vec3(cbLight._m0[_2145 + 3u].xyz), vec3(_632, _633, _634)) * 0.5) + 0.5;
        float _2576 = _2575 * _2575;
        float _4556 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0));
        float _2577 = isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0));
        float _2578 = isnan(1.0) ? _2161 : (isnan(_2161) ? 1.0 : min(_2161, 1.0));
        _2386 = (((cbLight._m0[_2559].x * 0.3183098733425140380859375) * _2577) * _2578) + _2324;
        _2388 = (((cbLight._m0[_2559].y * 0.3183098733425140380859375) * _2577) * _2578) + _2326;
        _2390 = (((cbLight._m0[_2559].z * 0.3183098733425140380859375) * _2577) * _2578) + _2328;
    }
    uint _2393 = _2145 + 8u;
    float _2406 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2145].w)) * _635) * 0.949999988079071044921875);
    float _2407 = _2406 * _2406;
    float _2408 = cbLight._m0[_2145].x + _712;
    float _2409 = cbLight._m0[_2145].y + _713;
    float _2410 = cbLight._m0[_2145].z + _714;
    float _2414 = inversesqrt(dot(vec3(_2408, _2409, _2410), vec3(_2408, _2409, _2410)));
    float _2415 = _2414 * _2408;
    float _2416 = _2414 * _2409;
    float _2417 = _2414 * _2410;
    float _2418 = dot(vec3(_632, _633, _634), vec3(cbLight._m0[_2145].xyz));
    float _4572 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
    float _2421 = isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0));
    float _4583 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
    float _2422 = isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0));
    float _2423 = dot(vec3(_632, _633, _634), vec3(_2415, _2416, _2417));
    float _4594 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
    float _2426 = isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0));
    float _2427 = dot(vec3(cbLight._m0[_2145].xyz), vec3(_2415, _2416, _2417));
    float _4605 = isnan(0.0) ? _2427 : (isnan(_2427) ? 0.0 : max(_2427, 0.0));
    float _2431 = _2407 * _2407;
    float _2435 = ((_2426 * _2426) * (_2431 + (-1.0))) + 1.0;
    float _2443 = exp2(log2(1.0 - (isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0)))) * 5.0);
    float _2444 = 0.959999978542327880859375 - _794;
    float _2446 = 0.959999978542327880859375 - _795;
    float _2447 = 0.959999978542327880859375 - _796;
    float _2454 = 1.0 - _2407;
    float _2465 = (0.5 / (((_2422 * ((_2421 * _2454) + _2407)) + 9.9999999392252902907785028219223e-09) + (((_2422 * _2454) + _2407) * _2421))) * _2421;
    float _4616 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
    float _2467 = (isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0))) * (_2431 / ((_2435 * _2435) * 3.141590118408203125));
    uint _2481 = _2145 + 9u;
    float _2492 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2186].w)) * _635) * 0.949999988079071044921875);
    float _2493 = _2492 * _2492;
    float _2494 = cbLight._m0[_2186].x + _712;
    float _2495 = cbLight._m0[_2186].y + _713;
    float _2496 = cbLight._m0[_2186].z + _714;
    float _2500 = inversesqrt(dot(vec3(_2494, _2495, _2496), vec3(_2494, _2495, _2496)));
    float _2501 = _2500 * _2494;
    float _2502 = _2500 * _2495;
    float _2503 = _2500 * _2496;
    float _2504 = dot(vec3(_632, _633, _634), vec3(cbLight._m0[_2186].xyz));
    float _4627 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
    float _2507 = isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0));
    float _2508 = dot(vec3(_632, _633, _634), vec3(_2501, _2502, _2503));
    float _4638 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
    float _2511 = isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0));
    float _2512 = dot(vec3(cbLight._m0[_2186].xyz), vec3(_2501, _2502, _2503));
    float _4649 = isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0));
    float _2516 = _2493 * _2493;
    float _2520 = ((_2511 * _2511) * (_2516 + (-1.0))) + 1.0;
    float _2527 = exp2(log2(1.0 - (isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0)))) * 5.0);
    float _2534 = 1.0 - _2493;
    float _2544 = (0.5 / (((_2422 * ((_2507 * _2534) + _2493)) + 9.9999999392252902907785028219223e-09) + (((_2422 * _2534) + _2493) * _2507))) * _2507;
    float _4660 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
    float _2546 = (isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0))) * (_2516 / ((_2520 * _2520) * 3.141590118408203125));
    float _2556 = (((((_2527 * _2444) + _797) * cbLight._m0[_2481].x) * _2546) * _2168) + ((((cbLight._m0[_2393].x * _2134) * ((_2443 * _2444) + _797)) * _2467) * _2182);
    float _2557 = (((((_2527 * _2446) + _799) * cbLight._m0[_2481].y) * _2546) * _2168) + ((((cbLight._m0[_2393].y * _2136) * ((_2443 * _2446) + _799)) * _2467) * _2182);
    float _2558 = (((((_2527 * _2447) + _800) * cbLight._m0[_2481].z) * _2546) * _2168) + ((((cbLight._m0[_2393].z * _2138) * ((_2443 * _2447) + _800)) * _2467) * _2182);
    float _2614;
    float _2616;
    float _2618;
    if (_2222)
    {
        _2614 = _2556;
        _2616 = _2557;
        _2618 = _2558;
    }
    else
    {
        uint _2620 = _2145 + 2u;
        uint _2624 = _2145 + 10u;
        float _2638 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2620].w)) * _635) * 0.949999988079071044921875);
        float _2639 = _2638 * _2638;
        float _2640 = cbLight._m0[_2620].x + _712;
        float _2641 = cbLight._m0[_2620].y + _713;
        float _2642 = cbLight._m0[_2620].z + _714;
        float _2646 = inversesqrt(dot(vec3(_2640, _2641, _2642), vec3(_2640, _2641, _2642)));
        float _2647 = _2646 * _2640;
        float _2648 = _2646 * _2641;
        float _2649 = _2646 * _2642;
        float _2650 = dot(vec3(_632, _633, _634), vec3(cbLight._m0[_2620].xyz));
        float _4671 = isnan(0.0) ? _2650 : (isnan(_2650) ? 0.0 : max(_2650, 0.0));
        float _2653 = isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0));
        float _2654 = dot(vec3(_632, _633, _634), vec3(_2647, _2648, _2649));
        float _4682 = isnan(0.0) ? _2654 : (isnan(_2654) ? 0.0 : max(_2654, 0.0));
        float _2657 = isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0));
        float _2658 = dot(vec3(cbLight._m0[_2620].xyz), vec3(_2647, _2648, _2649));
        float _4693 = isnan(0.0) ? _2658 : (isnan(_2658) ? 0.0 : max(_2658, 0.0));
        float _2662 = _2639 * _2639;
        float _2666 = ((_2657 * _2657) * (_2662 + (-1.0))) + 1.0;
        float _2673 = exp2(log2(1.0 - (isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0)))) * 5.0);
        float _2680 = 1.0 - _2639;
        float _2690 = (0.5 / (((_2422 * ((_2653 * _2680) + _2639)) + 9.9999999392252902907785028219223e-09) + (((_2422 * _2680) + _2639) * _2653))) * _2653;
        float _4704 = isnan(0.0) ? _2690 : (isnan(_2690) ? 0.0 : max(_2690, 0.0));
        float _2692 = (isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0))) * (_2662 / ((_2666 * _2666) * 3.141590118408203125));
        float _2693 = isnan(1.0) ? _2160 : (isnan(_2160) ? 1.0 : min(_2160, 1.0));
        _2614 = (((((_2673 * _2444) + _797) * cbLight._m0[_2624].x) * _2692) * _2693) + _2556;
        _2616 = (((((_2673 * _2446) + _799) * cbLight._m0[_2624].y) * _2692) * _2693) + _2557;
        _2618 = (((((_2673 * _2447) + _800) * cbLight._m0[_2624].z) * _2692) * _2693) + _2558;
    }
    float _2724;
    float _2726;
    float _2728;
    if (_2331)
    {
        _2724 = _2614;
        _2726 = _2616;
        _2728 = _2618;
    }
    else
    {
        uint _2735 = _2145 + 3u;
        uint _2739 = _2145 + 11u;
        float _2753 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2735].w)) * _635) * 0.949999988079071044921875);
        float _2754 = _2753 * _2753;
        float _2755 = cbLight._m0[_2735].x + _712;
        float _2756 = cbLight._m0[_2735].y + _713;
        float _2757 = cbLight._m0[_2735].z + _714;
        float _2761 = inversesqrt(dot(vec3(_2755, _2756, _2757), vec3(_2755, _2756, _2757)));
        float _2762 = _2761 * _2755;
        float _2763 = _2761 * _2756;
        float _2764 = _2761 * _2757;
        float _2765 = dot(vec3(_632, _633, _634), vec3(cbLight._m0[_2735].xyz));
        float _4720 = isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : max(_2765, 0.0));
        float _2768 = isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0));
        float _2769 = dot(vec3(_632, _633, _634), vec3(_2762, _2763, _2764));
        float _4731 = isnan(0.0) ? _2769 : (isnan(_2769) ? 0.0 : max(_2769, 0.0));
        float _2772 = isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0));
        float _2773 = dot(vec3(cbLight._m0[_2735].xyz), vec3(_2762, _2763, _2764));
        float _4742 = isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : max(_2773, 0.0));
        float _2777 = _2754 * _2754;
        float _2781 = ((_2772 * _2772) * (_2777 + (-1.0))) + 1.0;
        float _2788 = exp2(log2(1.0 - (isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0)))) * 5.0);
        float _2795 = 1.0 - _2754;
        float _2805 = (0.5 / (((_2422 * ((_2768 * _2795) + _2754)) + 9.9999999392252902907785028219223e-09) + (((_2422 * _2795) + _2754) * _2768))) * _2768;
        float _4753 = isnan(0.0) ? _2805 : (isnan(_2805) ? 0.0 : max(_2805, 0.0));
        float _2807 = (isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0))) * (_2777 / ((_2781 * _2781) * 3.141590118408203125));
        float _2808 = isnan(1.0) ? _2161 : (isnan(_2161) ? 1.0 : min(_2161, 1.0));
        _2724 = (((((_2788 * _2444) + _797) * cbLight._m0[_2739].x) * _2807) * _2808) + _2614;
        _2726 = (((((_2788 * _2446) + _799) * cbLight._m0[_2739].y) * _2807) * _2808) + _2616;
        _2728 = (((((_2788 * _2447) + _800) * cbLight._m0[_2739].z) * _2807) * _2808) + _2618;
    }
    float _2874;
    float _2876;
    float _2878;
    float _2880;
    float _2882;
    float _2884;
    if (_2143.y == 0u)
    {
        uvec4 _2829 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2830 = _2829.x;
        uint _2841 = uint((float(_2829.y) * floor(float(uint(cbSceneParam._m0[85u].y * _734) / _2830))) + floor(float(uint(cbSceneParam._m0[85u].x * _733) / _2830)));
        float _2851 = (log2(_1921 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2852 = isnan(0.0) ? _2851 : (isnan(_2851) ? 0.0 : max(_2851, 0.0));
        uint _2855 = uint(isnan(14.0) ? _2852 : (isnan(_2852) ? 14.0 : min(_2852, 14.0)));
        uvec4 _2860 = texelFetch(g_lightClusterGridBuffer, int(((_2855 << 2u) + (_2841 << 6u)) >> 2u));
        uint _2861 = _2860.x;
        uint _2862 = _2829.z;
        float _2941;
        float _2943;
        float _2945;
        float _2947;
        float _2949;
        float _2951;
        if (((((1u << ((_2862 >> 4u) & 15u)) + 4294967295u) & _2861) == 0u) || ((_2862 & 240u) == 0u))
        {
            _2941 = 0.0;
            _2943 = 0.0;
            _2945 = 0.0;
            _2947 = 0.0;
            _2949 = 0.0;
            _2951 = 0.0;
        }
        else
        {
            float _2942;
            float _2944;
            float _2946;
            float _2948;
            float _2950;
            float _2952;
            float _3094 = 0.0;
            float _3095 = 0.0;
            float _3096 = 0.0;
            float _3097 = 0.0;
            float _3098 = 0.0;
            float _3099 = 0.0;
            uint _3100 = 0u;
            uint _3109;
            bool _3110;
            for (;;)
            {
                _3109 = texelFetch(g_lightClassification, int((((_2855 << 5u) + (_2841 << 9u)) + (_3100 << 2u)) >> 2u)).x;
                _3110 = _3109 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3110)
                {
                    frontier_phi_71_pred = _3099;
                    frontier_phi_71_pred_1 = _3098;
                    frontier_phi_71_pred_2 = _3097;
                    frontier_phi_71_pred_3 = _3096;
                    frontier_phi_71_pred_4 = _3095;
                    frontier_phi_71_pred_5 = _3094;
                }
                else
                {
                    float _3239;
                    float _3240;
                    float _3241;
                    float _3242;
                    float _3243;
                    float _3244;
                    uint _3245;
                    _3239 = _3094;
                    _3240 = _3095;
                    _3241 = _3096;
                    _3242 = _3097;
                    _3243 = _3098;
                    _3244 = _3099;
                    _3245 = _3109;
                    float _3166;
                    float _3167;
                    float _3168;
                    float _3169;
                    float _3170;
                    float _3171;
                    for (;;)
                    {
                        uint _3249 = uint(findLSB(_3245)) + (_3100 << 5u);
                        uint _3246 = (_3245 + 4294967295u) & _3245;
                        uint _3251 = _3249 * 48u;
                        vec4 _3265 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3251)).x, texelFetch(g_PointLightRenderingBuffer, int(_3251 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3251 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3251 + 3u)).x));
                        uint _3271 = (_3249 * 48u) + 4u;
                        vec4 _3284 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3271)).x, texelFetch(g_PointLightRenderingBuffer, int(_3271 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3271 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3271 + 3u)).x));
                        uint _3290 = (_3249 * 48u) + 8u;
                        vec3 _3301 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3290)).x, texelFetch(g_PointLightRenderingBuffer, int(_3290 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3290 + 2u)).x));
                        float _3305 = _3265.x - _1919;
                        float _3306 = _3265.y - _1920;
                        float _3307 = _3265.z - _1921;
                        float _3308 = dot(vec3(_3305, _3306, _3307), vec3(_3305, _3306, _3307));
                        float _3311 = inversesqrt(_3308);
                        float _3312 = _3311 * _3305;
                        float _3313 = _3311 * _3306;
                        float _3314 = _3311 * _3307;
                        float _3315 = dot(vec3(_754, _757, _760), vec3(_3312, _3313, _3314));
                        float _3320 = 1.0 - (_3308 * _3265.w);
                        float _4779 = isnan(0.0) ? _3320 : (isnan(_3320) ? 0.0 : max(_3320, 0.0));
                        float _3321 = isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0));
                        float _3322 = sqrt(_3308) * _3284.w;
                        float _3325 = 1.39999997615814208984375 / (_3322 + 1.39999997615814208984375);
                        float _3326 = _3325 * _3325;
                        float _3329 = ((1.0 - _3326) * _3315) + _3326;
                        float _3332 = _3322 * _3322;
                        float _3336 = ((isnan(0.0) ? _3329 : (isnan(_3329) ? 0.0 : max(_3329, 0.0))) * _3321) / ((_3332 * 0.699999988079071044921875) + 1.0);
                        float _3340 = (-0.0) - _1919;
                        float _3341 = (-0.0) - _1920;
                        float _3342 = (-0.0) - _1921;
                        float _3346 = inversesqrt(dot(vec3(_3340, _3341, _3342), vec3(_3340, _3341, _3342)));
                        float _3347 = _3346 * _3340;
                        float _3348 = _3346 * _3341;
                        float _3349 = _3346 * _3342;
                        float _3356 = exp2(log2(1.0 / ((_3332 * 3.5) + 5.0)) * 0.25);
                        float _3357 = 1.0 - _829;
                        float _3364 = sqrt(1.0 - ((1.0 - (_3357 * _3357)) * (1.0 - (_3356 * _3356))));
                        float _3365 = _3364 * _3364;
                        float _3366 = _3365 * _3365;
                        float _3367 = _3347 + _3312;
                        float _3368 = _3348 + _3313;
                        float _3369 = _3349 + _3314;
                        float _3373 = inversesqrt(dot(vec3(_3367, _3368, _3369), vec3(_3367, _3368, _3369)));
                        float _3377 = dot(vec3(_754, _757, _760), vec3(_3347, _3348, _3349));
                        float _4795 = isnan(0.0) ? _3377 : (isnan(_3377) ? 0.0 : max(_3377, 0.0));
                        float _3380 = isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0));
                        float _3381 = dot(vec3(_754, _757, _760), vec3(_3373 * _3367, _3373 * _3368, _3373 * _3369));
                        float _4806 = isnan(0.0) ? _3381 : (isnan(_3381) ? 0.0 : max(_3381, 0.0));
                        float _3384 = isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0));
                        float _3388 = ((_3384 * _3384) * (_3366 + (-1.0))) + 1.0;
                        float _3389 = _3325 * _3365;
                        float _3390 = _3389 * _3389;
                        float _3393 = ((1.0 - _3390) * _3315) + _3390;
                        float _4817 = isnan(0.0) ? _3393 : (isnan(_3393) ? 0.0 : max(_3393, 0.0));
                        float _3394 = isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0));
                        float _3395 = 1.0 - _3365;
                        float _3405 = (0.5 / (((_3394 * ((_3380 * _3395) + _3365)) + 9.9999999392252902907785028219223e-09) + (((_3394 * _3395) + _3365) * _3380))) * _3394;
                        float _4828 = isnan(0.0) ? _3405 : (isnan(_3405) ? 0.0 : max(_3405, 0.0));
                        float _3415 = (((_3366 * 3.1415927410125732421875) * (isnan(1.0) ? _4828 : (isnan(_4828) ? 1.0 : min(_4828, 1.0)))) / ((_3388 * _3388) * ((_3332 * 2.1991131305694580078125) + 3.141590118408203125))) * _3321;
                        _3169 = (_3336 * _3284.x) + _3242;
                        _3170 = (_3336 * _3284.y) + _3243;
                        _3171 = (_3336 * _3284.z) + _3244;
                        _3166 = (_3415 * _3301.x) + _3239;
                        _3167 = (_3415 * _3301.y) + _3240;
                        _3168 = (_3415 * _3301.z) + _3241;
                        if (_3246 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3239 = _3166;
                            _3240 = _3167;
                            _3241 = _3168;
                            _3242 = _3169;
                            _3243 = _3170;
                            _3244 = _3171;
                            _3245 = _3246;
                        }
                    }
                    frontier_phi_71_pred = _3171;
                    frontier_phi_71_pred_1 = _3170;
                    frontier_phi_71_pred_2 = _3169;
                    frontier_phi_71_pred_3 = _3168;
                    frontier_phi_71_pred_4 = _3167;
                    frontier_phi_71_pred_5 = _3166;
                }
                _2952 = frontier_phi_71_pred;
                _2950 = frontier_phi_71_pred_1;
                _2948 = frontier_phi_71_pred_2;
                _2946 = frontier_phi_71_pred_3;
                _2944 = frontier_phi_71_pred_4;
                _2942 = frontier_phi_71_pred_5;
                uint _3101 = _3100 + 1u;
                if (_3101 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3094 = _2942;
                    _3095 = _2944;
                    _3096 = _2946;
                    _3097 = _2948;
                    _3098 = _2950;
                    _3099 = _2952;
                    _3100 = _3101;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2941 = _2942;
            _2943 = _2944;
            _2945 = _2946;
            _2947 = _2948;
            _2949 = _2950;
            _2951 = _2952;
        }
        uvec4 _2955 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2956 = _2955.z;
        uint _2958 = (_2956 >> 8u) & 15u;
        float _3062;
        float _3064;
        float _3066;
        float _3068;
        float _3070;
        float _3072;
        if (((4294967295u << _2958) & _2861) == 0u)
        {
            _3062 = _2941;
            _3064 = _2943;
            _3066 = _2945;
            _3068 = _2947;
            _3070 = _2949;
            _3072 = _2951;
        }
        else
        {
            float _3087 = inversesqrt(dot(vec3(_1919, _1920, _1921), vec3(_1919, _1920, _1921)));
            float _3088 = _3087 * _1919;
            float _3089 = _3087 * _1920;
            float _3090 = _3087 * _1921;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2958 < ((_2956 >> 12u) & 15u))
            {
                float _3063;
                float _3065;
                float _3067;
                float _3069;
                float _3071;
                float _3073;
                float _3222 = _2941;
                float _3223 = _2943;
                float _3224 = _2945;
                float _3225 = _2947;
                float _3226 = _2949;
                float _3227 = _2951;
                uint _3228 = _2958;
                uint _3237;
                bool _3238;
                for (;;)
                {
                    _3237 = texelFetch(g_lightClassification, int((((_2855 << 5u) + (_2841 << 9u)) + (_3228 << 2u)) >> 2u)).x;
                    _3238 = _3237 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3238)
                    {
                        frontier_phi_82_pred = _3227;
                        frontier_phi_82_pred_1 = _3226;
                        frontier_phi_82_pred_2 = _3225;
                        frontier_phi_82_pred_3 = _3224;
                        frontier_phi_82_pred_4 = _3223;
                        frontier_phi_82_pred_5 = _3222;
                    }
                    else
                    {
                        float _3429;
                        float _3430;
                        float _3431;
                        float _3432;
                        float _3433;
                        float _3434;
                        float _3722;
                        float _3723;
                        float _3724;
                        float _3725;
                        float _3726;
                        float _3727;
                        float _3442 = _3222;
                        float _3443 = _3223;
                        float _3444 = _3224;
                        float _3445 = _3225;
                        float _3446 = _3226;
                        float _3447 = _3227;
                        uint _3448 = _3237;
                        uint _3449;
                        vec4 _3474;
                        float _3475;
                        vec4 _3490;
                        vec3 _3502;
                        vec4 _3517;
                        vec4 _3532;
                        float _3578;
                        bool _3579;
                        for (;;)
                        {
                            uint _3459 = ((_3228 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3448));
                            _3449 = (_3448 + 4294967295u) & _3448;
                            uint _3461 = _3459 * 40u;
                            _3474 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3461)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3461 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3461 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3461 + 3u)).x));
                            _3475 = _3474.w;
                            uint _3477 = (_3459 * 40u) + 4u;
                            _3490 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3477)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 3u)).x));
                            uint _3492 = (_3459 * 40u) + 8u;
                            _3502 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3492)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3492 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3492 + 2u)).x));
                            uint _3504 = (_3459 * 40u) + 16u;
                            _3517 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3504)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3504 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3504 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3504 + 3u)).x));
                            uint _3519 = (_3459 * 40u) + 20u;
                            _3532 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3519)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3519 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3519 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3519 + 3u)).x));
                            uint _3534 = (_3459 * 40u) + 24u;
                            vec4 _3547 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3534)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3534 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3534 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3534 + 3u)).x));
                            uint _3553 = (_3459 * 40u) + 28u;
                            vec4 _3566 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3553)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3553 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3553 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3553 + 3u)).x));
                            _3578 = fma(_1921, _3566.z, fma(_1920, _3566.y, _3566.x * _1919)) + _3566.w;
                            _3579 = !((fma(_1921, _3547.z, fma(_1920, _3547.y, _3547.x * _1919)) + _3547.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3579)
                            {
                                float _3606 = _3474.x - _1919;
                                float _3607 = _3474.y - _1920;
                                float _3608 = _3474.z - _1921;
                                float _3609 = dot(vec3(_3606, _3607, _3608), vec3(_3606, _3607, _3608));
                                float _3612 = inversesqrt(_3609);
                                float _3613 = _3612 * _3606;
                                float _3614 = _3612 * _3607;
                                float _3615 = _3612 * _3608;
                                float _3619 = 1.0 - (_3609 / (_3475 * _3475));
                                float _4839 = isnan(0.0) ? _3619 : (isnan(_3619) ? 0.0 : max(_3619, 0.0));
                                float _3620 = isnan(1.0) ? _4839 : (isnan(_4839) ? 1.0 : min(_4839, 1.0));
                                float _3624 = sqrt(_3609) * _3490.w;
                                float _3626 = 1.39999997615814208984375 / (_3624 + 1.39999997615814208984375);
                                float _3627 = _3626 * _3626;
                                float _3630 = ((1.0 - _3627) * dot(vec3(_3613, _3614, _3615), vec3(_754, _757, _760))) + _3627;
                                float _3633 = _3624 * _3624;
                                float _3637 = (fma(_1921, _3517.z, fma(_1920, _3517.y, _3517.x * _1919)) + _3517.w) / _3578;
                                float _3638 = (fma(_1921, _3532.z, fma(_1920, _3532.y, _3532.x * _1919)) + _3532.w) / _3578;
                                float _3642 = 1.0 - dot(vec2(_3637, _3638), vec2(_3637, _3638));
                                float _4855 = isnan(0.0) ? _3642 : (isnan(_3642) ? 0.0 : max(_3642, 0.0));
                                float _3643 = isnan(1.0) ? _4855 : (isnan(_4855) ? 1.0 : min(_4855, 1.0));
                                float _3644 = _3643 * (((isnan(0.0) ? _3630 : (isnan(_3630) ? 0.0 : max(_3630, 0.0))) * _3620) / ((_3633 * 0.699999988079071044921875) + 1.0));
                                float _3656 = exp2(log2(1.0 / ((_3633 * 3.5) + 5.0)) * 0.25);
                                float _3657 = 1.0 - _829;
                                float _3664 = sqrt(1.0 - ((1.0 - (_3657 * _3657)) * (1.0 - (_3656 * _3656))));
                                float _3665 = _3664 * _3664;
                                float _3666 = _3665 * _3665;
                                float _3667 = _3613 - _3088;
                                float _3668 = _3614 - _3089;
                                float _3669 = _3615 - _3090;
                                float _3673 = inversesqrt(dot(vec3(_3667, _3668, _3669), vec3(_3667, _3668, _3669)));
                                float _3677 = dot(vec3(_754, _757, _760), vec3((-0.0) - _3088, (-0.0) - _3089, (-0.0) - _3090));
                                float _4866 = isnan(0.0) ? _3677 : (isnan(_3677) ? 0.0 : max(_3677, 0.0));
                                float _3680 = isnan(1.0) ? _4866 : (isnan(_4866) ? 1.0 : min(_4866, 1.0));
                                float _3681 = dot(vec3(_754, _757, _760), vec3(_3673 * _3667, _3673 * _3668, _3673 * _3669));
                                float _4877 = isnan(0.0) ? _3681 : (isnan(_3681) ? 0.0 : max(_3681, 0.0));
                                float _3684 = isnan(1.0) ? _4877 : (isnan(_4877) ? 1.0 : min(_4877, 1.0));
                                float _3688 = ((_3684 * _3684) * (_3666 + (-1.0))) + 1.0;
                                float _3689 = _3626 * _3665;
                                float _3690 = _3689 * _3689;
                                float _3696 = ((1.0 - _3690) * dot(vec3(_754, _757, _760), vec3(_3613, _3614, _3615))) + _3690;
                                float _4888 = isnan(0.0) ? _3696 : (isnan(_3696) ? 0.0 : max(_3696, 0.0));
                                float _3697 = isnan(1.0) ? _4888 : (isnan(_4888) ? 1.0 : min(_4888, 1.0));
                                float _3698 = 1.0 - _3665;
                                float _3708 = (0.5 / (((_3697 * ((_3680 * _3698) + _3665)) + 9.9999999392252902907785028219223e-09) + (((_3697 * _3698) + _3665) * _3680))) * _3697;
                                float _4899 = isnan(0.0) ? _3708 : (isnan(_3708) ? 0.0 : max(_3708, 0.0));
                                float _3718 = (_3643 * _3620) * (((_3666 * 3.1415927410125732421875) * (isnan(1.0) ? _4899 : (isnan(_4899) ? 1.0 : min(_4899, 1.0)))) / ((_3688 * _3688) * ((_3633 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3644 * _3490.z;
                                frontier_phi_88_pred_1 = _3644 * _3490.y;
                                frontier_phi_88_pred_2 = _3644 * _3490.x;
                                frontier_phi_88_pred_3 = _3718 * _3502.z;
                                frontier_phi_88_pred_4 = _3718 * _3502.y;
                                frontier_phi_88_pred_5 = _3718 * _3502.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3727 = frontier_phi_88_pred;
                            _3726 = frontier_phi_88_pred_1;
                            _3725 = frontier_phi_88_pred_2;
                            _3724 = frontier_phi_88_pred_3;
                            _3723 = frontier_phi_88_pred_4;
                            _3722 = frontier_phi_88_pred_5;
                            _3432 = _3725 + _3445;
                            _3433 = _3726 + _3446;
                            _3434 = _3727 + _3447;
                            _3429 = _3722 + _3442;
                            _3430 = _3723 + _3443;
                            _3431 = _3724 + _3444;
                            if (_3449 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3442 = _3429;
                                _3443 = _3430;
                                _3444 = _3431;
                                _3445 = _3432;
                                _3446 = _3433;
                                _3447 = _3434;
                                _3448 = _3449;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3434;
                        frontier_phi_82_pred_1 = _3433;
                        frontier_phi_82_pred_2 = _3432;
                        frontier_phi_82_pred_3 = _3431;
                        frontier_phi_82_pred_4 = _3430;
                        frontier_phi_82_pred_5 = _3429;
                    }
                    _3073 = frontier_phi_82_pred;
                    _3071 = frontier_phi_82_pred_1;
                    _3069 = frontier_phi_82_pred_2;
                    _3067 = frontier_phi_82_pred_3;
                    _3065 = frontier_phi_82_pred_4;
                    _3063 = frontier_phi_82_pred_5;
                    uint _3229 = _3228 + 1u;
                    if (_3229 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3222 = _3063;
                        _3223 = _3065;
                        _3224 = _3067;
                        _3225 = _3069;
                        _3226 = _3071;
                        _3227 = _3073;
                        _3228 = _3229;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3069;
                frontier_phi_63_64_ladder_1 = _3073;
                frontier_phi_63_64_ladder_2 = _3071;
                frontier_phi_63_64_ladder_3 = _3067;
                frontier_phi_63_64_ladder_4 = _3065;
                frontier_phi_63_64_ladder_5 = _3063;
            }
            else
            {
                frontier_phi_63_64_ladder = _2947;
                frontier_phi_63_64_ladder_1 = _2951;
                frontier_phi_63_64_ladder_2 = _2949;
                frontier_phi_63_64_ladder_3 = _2945;
                frontier_phi_63_64_ladder_4 = _2943;
                frontier_phi_63_64_ladder_5 = _2941;
            }
            _3062 = frontier_phi_63_64_ladder_5;
            _3064 = frontier_phi_63_64_ladder_4;
            _3066 = frontier_phi_63_64_ladder_3;
            _3068 = frontier_phi_63_64_ladder;
            _3070 = frontier_phi_63_64_ladder_2;
            _3072 = frontier_phi_63_64_ladder_1;
        }
        float _3077 = isnan(1.0) ? _813 : (isnan(_813) ? 1.0 : min(_813, 1.0));
        _2874 = (_3077 * _3068) + _2386;
        _2876 = (_3077 * _3070) + _2388;
        _2878 = (_3077 * _3072) + _2390;
        _2880 = ((_3062 * _797) * _3077) + _2724;
        _2882 = ((_3064 * _799) * _3077) + _2726;
        _2884 = ((_3066 * _800) * _3077) + _2728;
    }
    else
    {
        _2874 = _2386;
        _2876 = _2388;
        _2878 = _2390;
        _2880 = _2724;
        _2882 = _2726;
        _2884 = _2728;
    }
    float _4915 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
    float _4926 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
    float _4937 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
    float _2901 = ((isnan(1.0) ? _4915 : (isnan(_4915) ? 1.0 : min(_4915, 1.0))) * (_2874 + ((isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0))) * _813))) + ((_2880 + ((isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0))) * _1650)) * cbPerFrame._m0[3u].x);
    float _2902 = ((isnan(1.0) ? _4926 : (isnan(_4926) ? 1.0 : min(_4926, 1.0))) * (_2876 + ((isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0))) * _813))) + ((_2882 + ((isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0))) * _1650)) * cbPerFrame._m0[3u].x);
    float _2903 = ((isnan(1.0) ? _4937 : (isnan(_4937) ? 1.0 : min(_4937, 1.0))) * (_2878 + ((isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0))) * _813))) + ((_2884 + ((isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0))) * _1650)) * cbPerFrame._m0[3u].x);
    uint _2904 = _269 + 6u;
    float _2912 = _733 / cbSceneParam._m0[86u].x;
    float _2913 = _734 / cbSceneParam._m0[86u].y;
    vec4 _2927 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2912, _2913, (log2((isnan(cbSceneParam._m0[77u].w) ? _654 : (isnan(_654) ? cbSceneParam._m0[77u].w : min(_654, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2929 = _2927.x;
    float _2930 = _2927.y;
    float _2931 = _2927.z;
    float _2932 = _2927.w;
    float _3004;
    float _3006;
    float _3008;
    float _3010;
    if (_654 > cbSceneParam._m0[78u].w)
    {
        float _2966 = isnan(_654) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _654 : min(cbSceneParam._m0[80u].w, _654));
        float _2967 = _2966 / _654;
        float _2978 = _2967 * _705;
        float _2979 = _706 * _2967;
        float _2980 = (-0.0) - _2979;
        float _2982 = _2967 * _707;
        float _2984 = (cbSceneParam._m0[77u].w * _2980) / _2966;
        float _2985 = _2984 + cbSceneParam._m0[79u].w;
        float _2986 = cbSceneParam._m0[79u].w - _2979;
        float _2992 = sqrt(((_2978 * _2978) + (_2979 * _2979)) + (_2982 * _2982));
        float _2995 = (1.0 - (cbSceneParam._m0[77u].w / _2966)) * _2992;
        float _3000 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3002 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3179;
        if (abs((_2980 - _2984) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3179 = ((((_2985 > 0.0) ? exp2(_3000 * _2985) : (2.0 - exp2(_3002 * _2985))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2995;
        }
        else
        {
            float _3123 = 1.0 / cbSceneParam._m0[80u].x;
            float _3124 = isnan(_2986) ? _2985 : (isnan(_2985) ? _2986 : max(_2985, _2986));
            float _3125 = isnan(_2986) ? _2985 : (isnan(_2985) ? _2986 : min(_2985, _2986));
            float _3134 = isnan(0.0) ? _3124 : (isnan(_3124) ? 0.0 : min(_3124, 0.0));
            float _3135 = isnan(0.0) ? _3125 : (isnan(_3125) ? 0.0 : min(_3125, 0.0));
            _3179 = ((abs(_2992 / _2980) * cbSceneParam._m0[80u].y) * ((((_3134 - _3135) * 2.0) - ((exp2(_3000 * (isnan(0.0) ? _3124 : (isnan(_3124) ? 0.0 : max(_3124, 0.0)))) - exp2(_3000 * (isnan(0.0) ? _3125 : (isnan(_3125) ? 0.0 : max(_3125, 0.0))))) * _3123)) - ((exp2(_3002 * _3134) - exp2(_3002 * _3135)) * _3123))) + (_2995 * cbSceneParam._m0[80u].z);
        }
        vec4 _3181 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2912, _2913, 1.0), 0.0);
        float _3190 = exp2((_3179 * (-1.44269502162933349609375)) * (1.0 - _3181.w));
        float _3191 = log2(_3190);
        float _3207 = log2(_2932);
        _3004 = (exp2(_3207 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3191 * cbSceneParam._m0[78u].x)) * _3181.x) / cbSceneParam._m0[78u].x)) + _2929;
        _3006 = (exp2(_3207 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3191 * cbSceneParam._m0[78u].y)) * _3181.y) / cbSceneParam._m0[78u].y)) + _2930;
        _3008 = (exp2(_3207 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3191 * cbSceneParam._m0[78u].z)) * _3181.z) / cbSceneParam._m0[78u].z)) + _2931;
        _3010 = _3190 * _2932;
    }
    else
    {
        _3004 = _2929;
        _3006 = _2930;
        _3008 = _2931;
        _3010 = _2932;
    }
    bool _3217;
    vec4 _3020;
    vec4 _3042;
    float _3044;
    float _3048;
    float _3049;
    float _3050;
    float _3051;
    bool _3061;
    for (;;)
    {
        _3020 = cbMatDynParam._m0[0u];
        float _3022 = roundEven(_3020.y);
        bool _3023 = _3022 == 3.0;
        float _3024 = log2(_3010);
        float _3031 = exp2(_3024 * cbSceneParam._m0[78u].x) * _2901;
        float _3032 = exp2(_3024 * cbSceneParam._m0[78u].y) * _2902;
        float _3033 = exp2(_3024 * cbSceneParam._m0[78u].z) * _2903;
        float _3040 = _721 + (-0.5);
        _3042 = cbMtdParam._m0[1u];
        _3044 = _3042.y * _3040;
        float _3047 = (_3022 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3048 = _3047 * (_3023 ? _3031 : (_3031 + (cbSceneParam._m0[72u].w * _3004)));
        _3049 = _3047 * (_3023 ? _3032 : (_3032 + (cbSceneParam._m0[72u].w * _3006)));
        _3050 = _3047 * (_3023 ? _3033 : (_3033 + (cbSceneParam._m0[72u].w * _3008)));
        _3051 = _3040 * 0.999000012874603271484375;
        _3061 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3061)
        {
            if ((cbInstanceData._m0[_269 + 7u].x + _3051) < 0.5)
            {
                _3217 = true;
                break;
            }
        }
        uint _3158 = _773 + uint(_3020.w);
        if ((cbInstanceData._m0[_3158].w < 1.0) && ((cbInstanceData._m0[_3158].w + _3051) < 0.5))
        {
            _3217 = true;
            break;
        }
        if ((_3044 + 1.0) < _3042.x)
        {
            _3217 = true;
            break;
        }
        _3217 = false;
        break;
    }
    float _3420;
    if (_3217)
    {
        discard_state = true;
        _3420 = 0.0;
    }
    else
    {
        _3420 = cbInstanceData._m0[_2904].w;
    }
    SV_Target.x = _3048;
    SV_Target.y = _3049;
    SV_Target.z = _3050;
    SV_Target.w = _3420;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2904].w;
    discard_exit();
}


