#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1178;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _208 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _209 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _210 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _216 = inversesqrt(dot(vec3(_208, _209, _210), vec3(_208, _209, _210)));
    float _223 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _230 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _236 = uint(roundEven(NORMAL.w)) * 13u;
    uint _242 = _236 + 1u;
    uint _246 = _236 + 2u;
    float _255 = sqrt(((cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x) + (cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x)) + (cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x));
    float _256 = _255 * TEXCOORD.z;
    float _257 = _255 * TEXCOORD.w;
    vec4 _277 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _283 = _277.x * cbMtdParam._m0[11u].x;
    float _284 = _277.y * cbMtdParam._m0[11u].y;
    float _285 = _277.z * cbMtdParam._m0[11u].z;
    vec4 _304 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _256) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _257) + cbTextureTilingScale._m0[5u].w));
    vec4 _343 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _345 = _343.x;
    float _357 = dot(vec4(_345, _343.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _374 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_345 - _357) * cbMtdParam._m0[24u].y) + _357) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3505 = isnan(0.0) ? _374 : (isnan(_374) ? 0.0 : max(_374, 0.0));
    float _375 = isnan(1.0) ? _3505 : (isnan(_3505) ? 1.0 : min(_3505, 1.0));
    float _382 = (_375 * ((_304.x * cbMtdParam._m0[12u].x) - _283)) + _283;
    float _383 = (_375 * ((_304.y * cbMtdParam._m0[12u].y) - _284)) + _284;
    float _384 = (_375 * ((_304.z * cbMtdParam._m0[12u].z) - _285)) + _285;
    vec4 _401 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _256) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _257) + cbTextureTilingScale._m0[3u].w));
    vec4 _421 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _423 = _421.x;
    float _433 = dot(vec4(_423, _421.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _447 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_423 - _433) * cbMtdParam._m0[24u].y) + _433) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3516 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _448 = isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0));
    float _455 = (_448 * ((_401.x * cbMtdParam._m0[13u].x) - _382)) + _382;
    float _456 = (_448 * ((_401.y * cbMtdParam._m0[13u].y) - _383)) + _383;
    float _457 = (_448 * ((_401.z * cbMtdParam._m0[13u].z) - _384)) + _384;
    vec4 _470 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _256) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _257) + cbTextureTilingScale._m0[4u].w));
    vec4 _487 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _489 = _487.x;
    float _490 = _487.y;
    float _491 = _487.z;
    float _498 = ((_470.x - _489) * _375) + _489;
    float _499 = ((_470.y - _490) * _375) + _490;
    float _500 = ((_470.z - _491) * _375) + _491;
    vec4 _512 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _256) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _257) + cbTextureTilingScale._m0[2u].w));
    float _525 = ((_512.z - _500) * _448) + _500;
    float _528 = ((((_512.x - _498) * _448) + _498) * 2.0) + (-1.0);
    float _530 = ((((_512.y - _499) * _448) + _499) * 2.0) + (-1.0);
    float _531 = dot(vec2(_528, _530), vec2(_528, _530));
    float _3527 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _536 = sqrt(1.0 - (isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0))));
    vec4 _549 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _563 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _577 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _579 = _577.x;
    float _597 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _256) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _257) + cbTextureTilingScale._m0[9u].w)).x - _579) * _375) + _579;
    float _615 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _256) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _257) + cbTextureTilingScale._m0[21u].w)).x - _597) * _448) + _597;
    float _619 = ((_563.x - _615) * cbMtdParam._m0[19u].z) + _615;
    float _624 = cbMtdParam._m0[22u].x + _549.w;
    float _627 = fma(_536, _223 * NORMAL.x, fma(_530, _230 * TANGENT.x, (_216 * _208) * _528));
    float _630 = fma(_536, _223 * NORMAL.y, fma(_530, _230 * TANGENT.y, (_216 * _209) * _528));
    float _633 = fma(_536, _223 * NORMAL.z, fma(_530, _230 * TANGENT.z, (_216 * _210) * _528));
    float _637 = inversesqrt(dot(vec3(_627, _630, _633), vec3(_627, _630, _633)));
    float _638 = _637 * _627;
    float _639 = _637 * _630;
    float _640 = _637 * _633;
    float _3538 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _641 = isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0));
    float _3549 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _3560 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _3571 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _3582 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _3593 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _646 = isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0));
    float _660 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _701 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _711 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _701);
    float _712 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _701);
    float _713 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _701);
    float _717 = inversesqrt(dot(vec3(_711, _712, _713), vec3(_711, _712, _713)));
    float _718 = _711 * _717;
    float _719 = _712 * _717;
    float _720 = _713 * _717;
    float _726 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _727 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _745 = fma(_640, cbSceneParam._m0[5u].z, fma(_639, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _638));
    float _748 = fma(_640, cbSceneParam._m0[6u].z, fma(_639, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _638));
    float _751 = fma(_640, cbSceneParam._m0[7u].z, fma(_639, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _638));
    uint _765 = (_236 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _771 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0)))) * cbInstanceData._m0[_765].x;
    float _772 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0)))) * cbInstanceData._m0[_765].y;
    float _773 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0)))) * cbInstanceData._m0[_765].z;
    float _3604 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _774 = isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0));
    float _3615 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _775 = isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0));
    float _3626 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
    float _776 = isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0));
    float _777 = 1.0 - _646;
    float _778 = _774 * _777;
    float _779 = _775 * _777;
    float _780 = _776 * _777;
    float _785 = (_774 + (-0.039999999105930328369140625)) * _646;
    float _786 = (_775 + (-0.039999999105930328369140625)) * _646;
    float _787 = (_776 + (-0.039999999105930328369140625)) * _646;
    float _788 = _785 + 0.039999999105930328369140625;
    float _790 = _786 + 0.039999999105930328369140625;
    float _791 = _787 + 0.039999999105930328369140625;
    vec4 _800 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _726, cbSceneParam._m0[86u].y * _727));
    float _804 = ((isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0))) * TEXCOORD_5.w) * _800.x;
    float _805 = dot(vec3(_638, _639, _640), vec3(_718, _719, _720));
    float _808 = _805 * 2.0;
    float _812 = (_808 * _638) - _718;
    float _813 = (_808 * _639) - _719;
    float _814 = (_808 * _640) - _720;
    float _818 = abs(dot(vec3(_718, _719, _720), vec3(_638, _639, _640)));
    float _3637 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
    float _820 = sqrt(_641);
    float _833 = exp2((_820 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_820 * 3.0));
    float _839 = (1.0 - _833) * ((_820 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _840 = _833 * _820;
    float _868 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _872 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _876 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1177;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _902 = fma(_876, cbModelParam._m0[26u].z, fma(_872, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _868));
        float _906 = fma(_876, cbModelParam._m0[27u].z, fma(_872, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _868));
        float _910 = fma(_876, cbModelParam._m0[28u].z, fma(_872, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _868));
        float _935 = _868 + _638;
        float _936 = _872 + _639;
        float _937 = _876 + _640;
        float _947 = fma(_937, cbModelParam._m0[26u].z, fma(_936, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _935)) - _902;
        float _948 = fma(_937, cbModelParam._m0[27u].z, fma(_936, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _935)) - _906;
        float _949 = fma(_937, cbModelParam._m0[28u].z, fma(_936, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _935)) - _910;
        float _953 = inversesqrt(dot(vec3(_947, _948, _949), vec3(_947, _948, _949)));
        float _966 = ((_953 * _947) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_902 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _967 = ((_953 * _948) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_906 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _968 = ((_953 * _949) / cbModelParam._m0[34u].z) + ((((((_910 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _971 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_966, _967, _968), 0.0);
        vec4 _978 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_966, _967, _968), 0.0);
        vec4 _985 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_966, _967, _968), 0.0);
        vec4 _992 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_966, _967, _968), 0.0);
        float _1005 = exp2((_971.w + (-0.5)) * 20.0) * 2.0;
        float _1006 = _1005 * (_971.x + (-0.5));
        float _1007 = _1005 * (_971.y + (-0.5));
        float _1008 = _1005 * (_971.z + (-0.5));
        float _1015 = exp2((_978.w + (-0.5)) * 20.0) * 2.0;
        float _1016 = _1015 * (_978.x + (-0.5));
        float _1017 = _1015 * (_978.y + (-0.5));
        float _1018 = _1015 * (_978.z + (-0.5));
        float _1025 = exp2((_985.w + (-0.5)) * 20.0) * 2.0;
        float _1026 = _1025 * (_985.x + (-0.5));
        float _1027 = _1025 * (_985.y + (-0.5));
        float _1028 = _1025 * (_985.z + (-0.5));
        float _1035 = exp2((_992.w + (-0.5)) * 20.0) * 2.0;
        float _1036 = _1035 * (_992.x + (-0.5));
        float _1037 = _1035 * (_992.y + (-0.5));
        float _1038 = _1035 * (_992.z + (-0.5));
        float _1039 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1040 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1041 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        float _1042 = _1006 * 0.5;
        float _1043 = _1016 * 0.5;
        float _1044 = _1026 * 0.5;
        float _1045 = dot(vec3(_1042, _1043, _1044), vec3(_1042, _1043, _1044));
        float _1050 = (_1045 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1045);
        float _1059 = (dot(vec3(_638, _639, _640), vec3(_1050 * _1042, _1050 * _1043, _1050 * _1044)) + 1.0) * 0.5;
        float _3663 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1069 = sqrt(((_1043 * _1043) + (_1042 * _1042)) + (_1044 * _1044)) / (_1039 + 9.9999997473787516355514526367188e-06);
        float _3674 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1070 = isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0));
        float _1071 = _1070 * 2.0;
        float _1075 = (1.0 - _1070) / (_1070 + 1.0);
        float _3685 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1076 = isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0));
        float _1085 = ((((1.0 - _1076) * (_1071 + 2.0)) * exp2(log2(isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0))) * (_1071 + 1.0))) + _1076) * _1039;
        float _1086 = _1007 * 0.5;
        float _1087 = _1017 * 0.5;
        float _1088 = _1027 * 0.5;
        float _1089 = dot(vec3(_1086, _1087, _1088), vec3(_1086, _1087, _1088));
        float _1094 = (_1089 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1089);
        float _1102 = (dot(vec3(_638, _639, _640), vec3(_1094 * _1086, _1094 * _1087, _1094 * _1088)) + 1.0) * 0.5;
        float _3696 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1111 = sqrt(((_1087 * _1087) + (_1086 * _1086)) + (_1088 * _1088)) / (_1040 + 9.9999997473787516355514526367188e-06);
        float _3707 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1112 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
        float _1113 = _1112 * 2.0;
        float _1117 = (1.0 - _1112) / (_1112 + 1.0);
        float _3718 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1118 = isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0));
        float _1127 = ((((1.0 - _1118) * (_1113 + 2.0)) * exp2(log2(isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0))) * (_1113 + 1.0))) + _1118) * _1040;
        float _1128 = _1008 * 0.5;
        float _1129 = _1018 * 0.5;
        float _1130 = _1028 * 0.5;
        float _1131 = dot(vec3(_1128, _1129, _1130), vec3(_1128, _1129, _1130));
        float _1136 = (_1131 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1131);
        float _1144 = (dot(vec3(_638, _639, _640), vec3(_1136 * _1128, _1136 * _1129, _1136 * _1130)) + 1.0) * 0.5;
        float _3729 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1153 = sqrt(((_1129 * _1129) + (_1128 * _1128)) + (_1130 * _1130)) / (_1041 + 9.9999997473787516355514526367188e-06);
        float _3740 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1154 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
        float _1155 = _1154 * 2.0;
        float _1159 = (1.0 - _1154) / (_1154 + 1.0);
        float _3751 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1160 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
        float _1169 = ((((1.0 - _1160) * (_1155 + 2.0)) * exp2(log2(isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0))) * (_1155 + 1.0))) + _1160) * _1041;
        _1177 = _1008;
        _1179 = _1007;
        _1180 = _1006;
        _1181 = _1018;
        _1182 = _1017;
        _1183 = _1016;
        _1184 = _1028;
        _1185 = _1027;
        _1186 = _1026;
        _1187 = _1041;
        _1188 = _1040;
        _1189 = _1039;
        _1190 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0)));
        _1191 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0)));
        _1192 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0)));
    }
    else
    {
        _1177 = _1178;
        _1179 = _1178;
        _1180 = _1178;
        _1181 = _1178;
        _1182 = _1178;
        _1183 = _1178;
        _1184 = _1178;
        _1185 = _1178;
        _1186 = _1178;
        _1187 = _1178;
        _1188 = _1178;
        _1189 = _1178;
        _1190 = 0.0;
        _1191 = 0.0;
        _1192 = 0.0;
    }
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1216 = fma(_876, cbModelParam._m0[30u].z, fma(_872, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _868));
        float _1220 = fma(_876, cbModelParam._m0[31u].z, fma(_872, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _868));
        float _1224 = fma(_876, cbModelParam._m0[32u].z, fma(_872, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _868));
        float _1247 = _868 + _638;
        float _1248 = _872 + _639;
        float _1249 = _876 + _640;
        float _1259 = fma(_1249, cbModelParam._m0[30u].z, fma(_1248, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1247)) - _1216;
        float _1260 = fma(_1249, cbModelParam._m0[31u].z, fma(_1248, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1247)) - _1220;
        float _1261 = fma(_1249, cbModelParam._m0[32u].z, fma(_1248, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1247)) - _1224;
        float _1265 = inversesqrt(dot(vec3(_1259, _1260, _1261), vec3(_1259, _1260, _1261)));
        float _1278 = ((_1265 * _1259) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1216 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1279 = ((_1265 * _1260) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1220 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1280 = ((_1265 * _1261) / cbModelParam._m0[35u].z) + ((((((_1224 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1282 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1278, _1279, _1280), 0.0);
        vec4 _1289 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1278, _1279, _1280), 0.0);
        vec4 _1296 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1278, _1279, _1280), 0.0);
        vec4 _1303 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1278, _1279, _1280), 0.0);
        float _1315 = exp2((_1282.w + (-0.5)) * 20.0) * 2.0;
        float _1316 = _1315 * (_1282.x + (-0.5));
        float _1317 = _1315 * (_1282.y + (-0.5));
        float _1318 = _1315 * (_1282.z + (-0.5));
        float _1325 = exp2((_1289.w + (-0.5)) * 20.0) * 2.0;
        float _1326 = _1325 * (_1289.x + (-0.5));
        float _1327 = _1325 * (_1289.y + (-0.5));
        float _1328 = _1325 * (_1289.z + (-0.5));
        float _1335 = exp2((_1296.w + (-0.5)) * 20.0) * 2.0;
        float _1336 = _1335 * (_1296.x + (-0.5));
        float _1337 = _1335 * (_1296.y + (-0.5));
        float _1338 = _1335 * (_1296.z + (-0.5));
        float _1345 = exp2((_1303.w + (-0.5)) * 20.0) * 2.0;
        float _1346 = _1345 * (_1303.x + (-0.5));
        float _1347 = _1345 * (_1303.y + (-0.5));
        float _1348 = _1345 * (_1303.z + (-0.5));
        float _1349 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1350 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1351 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1352 = _1316 * 0.5;
        float _1353 = _1326 * 0.5;
        float _1354 = _1336 * 0.5;
        float _1355 = dot(vec3(_1352, _1353, _1354), vec3(_1352, _1353, _1354));
        float _1360 = (_1355 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1355);
        float _1368 = (dot(vec3(_638, _639, _640), vec3(_1360 * _1352, _1360 * _1353, _1360 * _1354)) + 1.0) * 0.5;
        float _3792 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1377 = sqrt(((_1353 * _1353) + (_1352 * _1352)) + (_1354 * _1354)) / (_1349 + 9.9999997473787516355514526367188e-06);
        float _3803 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1378 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
        float _1379 = _1378 * 2.0;
        float _1383 = (1.0 - _1378) / (_1378 + 1.0);
        float _3814 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1384 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
        float _1393 = ((((1.0 - _1384) * (_1379 + 2.0)) * exp2(log2(isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0))) * (_1379 + 1.0))) + _1384) * _1349;
        float _1394 = _1317 * 0.5;
        float _1395 = _1327 * 0.5;
        float _1396 = _1337 * 0.5;
        float _1397 = dot(vec3(_1394, _1395, _1396), vec3(_1394, _1395, _1396));
        float _1402 = (_1397 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1397);
        float _1410 = (dot(vec3(_638, _639, _640), vec3(_1402 * _1394, _1402 * _1395, _1402 * _1396)) + 1.0) * 0.5;
        float _3825 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1419 = sqrt(((_1395 * _1395) + (_1394 * _1394)) + (_1396 * _1396)) / (_1350 + 9.9999997473787516355514526367188e-06);
        float _3836 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1420 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
        float _1421 = _1420 * 2.0;
        float _1425 = (1.0 - _1420) / (_1420 + 1.0);
        float _3847 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1426 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
        float _1435 = ((((1.0 - _1426) * (_1421 + 2.0)) * exp2(log2(isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0))) * (_1421 + 1.0))) + _1426) * _1350;
        float _1436 = _1318 * 0.5;
        float _1437 = _1328 * 0.5;
        float _1438 = _1338 * 0.5;
        float _1439 = dot(vec3(_1436, _1437, _1438), vec3(_1436, _1437, _1438));
        float _1444 = (_1439 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1439);
        float _1452 = (dot(vec3(_638, _639, _640), vec3(_1444 * _1436, _1444 * _1437, _1444 * _1438)) + 1.0) * 0.5;
        float _3858 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1461 = sqrt(((_1437 * _1437) + (_1436 * _1436)) + (_1438 * _1438)) / (_1351 + 9.9999997473787516355514526367188e-06);
        float _3869 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1462 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
        float _1463 = _1462 * 2.0;
        float _1467 = (1.0 - _1462) / (_1462 + 1.0);
        float _3880 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1468 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
        float _1477 = ((((1.0 - _1468) * (_1463 + 2.0)) * exp2(log2(isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0))) * (_1463 + 1.0))) + _1468) * _1351;
        _1485 = _1318;
        _1486 = _1317;
        _1487 = _1316;
        _1488 = _1328;
        _1489 = _1327;
        _1490 = _1326;
        _1491 = _1338;
        _1492 = _1337;
        _1493 = _1336;
        _1494 = _1351;
        _1495 = _1350;
        _1496 = _1349;
        _1497 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0)));
        _1498 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0)));
        _1499 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0)));
    }
    else
    {
        _1485 = _1178;
        _1486 = _1178;
        _1487 = _1178;
        _1488 = _1178;
        _1489 = _1178;
        _1490 = _1178;
        _1491 = _1178;
        _1492 = _1178;
        _1493 = _1178;
        _1494 = _1178;
        _1495 = _1178;
        _1496 = _1178;
        _1497 = 0.0;
        _1498 = 0.0;
        _1499 = 0.0;
    }
    float _1509 = (cbModelParam._m0[1u].x * (_1497 - _1190)) + _1190;
    float _1510 = (cbModelParam._m0[1u].x * (_1498 - _1191)) + _1191;
    float _1511 = (cbModelParam._m0[1u].x * (_1499 - _1192)) + _1192;
    float _1532 = fma(_1511, cbSceneParam._m0[89u].z, fma(_1510, cbSceneParam._m0[89u].y, _1509 * cbSceneParam._m0[89u].x));
    float _1535 = fma(_1511, cbSceneParam._m0[90u].z, fma(_1510, cbSceneParam._m0[90u].y, _1509 * cbSceneParam._m0[90u].x));
    float _1538 = fma(_1511, cbSceneParam._m0[91u].z, fma(_1510, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1509));
    float _1553 = _812 * 0.5;
    float _1554 = _813 * 0.5;
    float _1555 = _814 * 0.5;
    float _1556 = dot(vec4(_1553, _1554, _1555, 1.0), vec4(_1487, _1490, _1493, _1496));
    float _1559 = dot(vec4(_1553, _1554, _1555, 1.0), vec4(_1486, _1489, _1492, _1495));
    float _1562 = dot(vec4(_1553, _1554, _1555, 1.0), vec4(_1485, _1488, _1491, _1494));
    float _1596;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1569 = dot(vec4(_1553, _1554, _1555, 1.0), vec4(_1177, _1181, _1184, _1187));
        float _1573 = dot(vec4(_1553, _1554, _1555, 1.0), vec4(_1179, _1182, _1185, _1188));
        float _1577 = dot(vec4(_1553, _1554, _1555, 1.0), vec4(_1180, _1183, _1186, _1189));
        float _1584 = dot(vec4(cbModelParam._m0[39u]), vec4(_1553, _1554, _1555, 1.0));
        _1596 = dot(vec3(isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0)), isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0)), isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1584) ? 0.0 : (isnan(0.0) ? _1584 : max(0.0, _1584))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1596 = 1.0;
    }
    float _1607;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1598 = dot(vec4(cbModelParam._m0[40u]), vec4(_1553, _1554, _1555, 1.0));
        _1607 = dot(vec3(isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0)), isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0)), isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1598) ? 0.0 : (isnan(0.0) ? _1598 : max(0.0, _1598))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1607 = 1.0;
    }
    float _1611 = (_1607 * cbModelParam._m0[1u].x) + (_1596 * (1.0 - cbModelParam._m0[1u].x));
    float _1621 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _641);
    float _1622 = isnan(_1621) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1621 : min(cbModelParam._m0[25u].z, _1621));
    float _1704;
    float _1706;
    float _1708;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1671 = fma(_876, cbModelParam._m0[13u].z, fma(_872, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _868)) + cbModelParam._m0[13u].w;
        float _1675 = fma(_876, cbModelParam._m0[14u].z, fma(_872, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _868)) + cbModelParam._m0[14u].w;
        float _1679 = fma(_876, cbModelParam._m0[15u].z, fma(_872, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _868)) + cbModelParam._m0[15u].w;
        float _1682 = fma(_814, cbModelParam._m0[13u].z, fma(_813, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _812));
        float _1685 = fma(_814, cbModelParam._m0[14u].z, fma(_813, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _812));
        float _1688 = fma(_814, cbModelParam._m0[15u].z, fma(_813, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _812));
        float _1716;
        if (_1682 > 0.0)
        {
            _1716 = abs((1.0 - _1671) / _1682);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1682 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1671 + 1.0) / _1682);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1716 = frontier_phi_14_12_ladder;
        }
        float _1919;
        if (_1685 > 0.0)
        {
            _1919 = abs((1.0 - _1675) / _1685);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1685 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1675 + 1.0) / _1685);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1919 = frontier_phi_23_19_ladder;
        }
        float _2173;
        if (_1688 > 0.0)
        {
            _2173 = abs((1.0 - _1679) / _1688);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1688 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1679 + 1.0) / _1688);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2173 = frontier_phi_35_30_ladder;
        }
        float _2175 = isnan(_1919) ? _1716 : (isnan(_1716) ? _1919 : min(_1716, _1919));
        float _2176 = isnan(_2173) ? _2175 : (isnan(_2175) ? _2173 : min(_2175, _2173));
        float _2180 = (_2176 * _1682) + _1671;
        float _2181 = (_2176 * _1685) + _1675;
        float _2182 = (_2176 * _1688) + _1679;
        float _2183 = _2176 * 9.9999997473787516355514526367188e-05;
        float _2185 = (-1.0) - _2183;
        float _2187 = _2183 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2182 > _2187) || ((_2182 < _2185) || ((_2181 > _2187) || ((_2181 < _2185) || ((_2180 < _2185) || (_2180 > _2187))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2310 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2182, cbModelParam._m0[9u].z, fma(_2181, cbModelParam._m0[9u].y, _2180 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2182, cbModelParam._m0[10u].z, fma(_2181, cbModelParam._m0[10u].y, _2180 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2182, cbModelParam._m0[11u].z, fma(_2181, cbModelParam._m0[11u].y, _2180 * cbModelParam._m0[11u].x))), _1622);
            frontier_phi_13_35_ladder = _2310.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2310.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2310.x * cbModelParam._m0[1u].y;
        }
        _1704 = frontier_phi_13_35_ladder_2;
        _1706 = frontier_phi_13_35_ladder_1;
        _1708 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1692 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_812, _813, _814), _1622);
        _1704 = _1692.x * cbModelParam._m0[1u].y;
        _1706 = _1692.y * cbModelParam._m0[1u].y;
        _1708 = _1692.z * cbModelParam._m0[1u].y;
    }
    float _1712 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _641);
    float _1713 = isnan(_1712) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1712 : min(cbModelParam._m0[25u].w, _1712));
    float _1803;
    float _1805;
    float _1807;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1767 = fma(_876, cbModelParam._m0[21u].z, fma(_872, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _868)) + cbModelParam._m0[21u].w;
        float _1771 = fma(_876, cbModelParam._m0[22u].z, fma(_872, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _868)) + cbModelParam._m0[22u].w;
        float _1775 = fma(_876, cbModelParam._m0[23u].z, fma(_872, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _868)) + cbModelParam._m0[23u].w;
        float _1778 = fma(_814, cbModelParam._m0[21u].z, fma(_813, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _812));
        float _1781 = fma(_814, cbModelParam._m0[22u].z, fma(_813, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _812));
        float _1784 = fma(_814, cbModelParam._m0[23u].z, fma(_813, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _812));
        float _1924;
        if (_1778 > 0.0)
        {
            _1924 = abs((1.0 - _1767) / _1778);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1778 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1767 + 1.0) / _1778);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1924 = frontier_phi_25_21_ladder;
        }
        float _2200;
        if (_1781 > 0.0)
        {
            _2200 = abs((1.0 - _1771) / _1781);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1781 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1771 + 1.0) / _1781);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2200 = frontier_phi_37_32_ladder;
        }
        float _2413;
        if (_1784 > 0.0)
        {
            _2413 = abs((1.0 - _1775) / _1784);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1784 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1775 + 1.0) / _1784);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2413 = frontier_phi_46_43_ladder;
        }
        float _2415 = isnan(_2200) ? _1924 : (isnan(_1924) ? _2200 : min(_1924, _2200));
        float _2416 = isnan(_2413) ? _2415 : (isnan(_2415) ? _2413 : min(_2415, _2413));
        float _2420 = (_2416 * _1778) + _1767;
        float _2421 = (_2416 * _1781) + _1771;
        float _2422 = (_2416 * _1784) + _1775;
        float _2423 = _2416 * 9.9999997473787516355514526367188e-05;
        float _2424 = (-1.0) - _2423;
        float _2426 = _2423 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2422 > _2426) || ((_2422 < _2424) || ((_2421 > _2426) || ((_2421 < _2424) || ((_2420 < _2424) || (_2420 > _2426))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2621 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2422, cbModelParam._m0[17u].z, fma(_2421, cbModelParam._m0[17u].y, _2420 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2422, cbModelParam._m0[18u].z, fma(_2421, cbModelParam._m0[18u].y, _2420 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2422, cbModelParam._m0[19u].z, fma(_2421, cbModelParam._m0[19u].y, _2420 * cbModelParam._m0[19u].x))), _1713);
            frontier_phi_22_46_ladder = _2621.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2621.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2621.x * cbModelParam._m0[1u].z;
        }
        _1803 = frontier_phi_22_46_ladder_2;
        _1805 = frontier_phi_22_46_ladder_1;
        _1807 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1787 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_812, _813, _814), _1713);
        _1803 = _1787.x * cbModelParam._m0[1u].z;
        _1805 = _1787.y * cbModelParam._m0[1u].z;
        _1807 = _1787.z * cbModelParam._m0[1u].z;
    }
    float _1820 = (((_839 * _788) + _840) * _804) * ((cbModelParam._m0[1u].w * (_1803 - _1704)) + _1704);
    float _1822 = (((_839 * _790) + _840) * _804) * ((cbModelParam._m0[1u].w * (_1805 - _1706)) + _1706);
    float _1824 = (((_839 * _791) + _840) * _804) * ((cbModelParam._m0[1u].w * (_1807 - _1708)) + _1708);
    float _1827 = fma(_1824, cbSceneParam._m0[89u].z, fma(_1822, cbSceneParam._m0[89u].y, _1820 * cbSceneParam._m0[89u].x));
    float _1830 = fma(_1824, cbSceneParam._m0[90u].z, fma(_1822, cbSceneParam._m0[90u].y, _1820 * cbSceneParam._m0[90u].x));
    float _1833 = fma(_1824, cbSceneParam._m0[91u].z, fma(_1822, cbSceneParam._m0[91u].y, _1820 * cbSceneParam._m0[91u].x));
    uvec4 _1843 = floatBitsToUint(cbInstanceData._m0[_236 + 5u]);
    uint _1845 = _1843.x * 14u;
    uint _1846 = _1845 + 13u;
    float _1853 = _804 + (-1.0);
    float _1858 = (cbLight._m0[_1846].x * _1853) + 1.0;
    float _1859 = (cbLight._m0[_1846].y * _1853) + 1.0;
    float _1860 = (cbLight._m0[_1846].z * _1853) + 1.0;
    float _1861 = (cbLight._m0[_1846].w * _1853) + 1.0;
    uint _1862 = _1845 + 5u;
    float _1868 = isnan(1.0) ? _1859 : (isnan(_1859) ? 1.0 : min(_1859, 1.0));
    uint _1872 = _1845 + 4u;
    float _1878 = isnan(1.0) ? _1858 : (isnan(_1858) ? 1.0 : min(_1858, 1.0));
    uint _1882 = _1845 | 1u;
    float _1893 = dot(vec3(cbLight._m0[_1845].xyz), vec3(_638, _639, _640));
    float _1896 = dot(vec3(cbLight._m0[_1882].xyz), vec3(_638, _639, _640));
    float _4016 = isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0));
    float _4027 = isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0));
    float _1901 = (isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0))) * 0.3183098733425140380859375;
    float _1903 = (isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0))) * 0.3183098733425140380859375;
    float _1910 = ((cbLight._m0[_1862].x * _1868) * _1903) + ((cbLight._m0[_1872].x * _1878) * _1901);
    float _1911 = ((_1868 * cbLight._m0[_1862].y) * _1903) + ((_1878 * cbLight._m0[_1872].y) * _1901);
    float _1912 = ((_1868 * cbLight._m0[_1862].z) * _1903) + ((_1878 * cbLight._m0[_1872].z) * _1901);
    uvec4 _1916 = floatBitsToUint(cbLight._m0[_1845 + 12u]);
    bool _1918 = _1916.x == 0u;
    float _1929;
    float _1931;
    float _1933;
    if (_1918)
    {
        _1929 = _1910;
        _1931 = _1911;
        _1933 = _1912;
    }
    else
    {
        uint _1937 = _1845 + 6u;
        float _1953 = (dot(vec3(cbLight._m0[_1845 + 2u].xyz), vec3(_638, _639, _640)) * 0.5) + 0.5;
        float _1954 = _1953 * _1953;
        float _4038 = isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0));
        float _1955 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
        float _1956 = isnan(1.0) ? _1860 : (isnan(_1860) ? 1.0 : min(_1860, 1.0));
        _1929 = (((cbLight._m0[_1937].x * 0.3183098733425140380859375) * _1955) * _1956) + _1910;
        _1931 = (((cbLight._m0[_1937].y * 0.3183098733425140380859375) * _1955) * _1956) + _1911;
        _1933 = (((cbLight._m0[_1937].z * 0.3183098733425140380859375) * _1955) * _1956) + _1912;
    }
    bool _1936 = _1916.y == 0u;
    float _1974;
    float _1976;
    float _1978;
    if (_1936)
    {
        _1974 = _1929;
        _1976 = _1931;
        _1978 = _1933;
    }
    else
    {
        uint _2144 = _1845 + 7u;
        float _2160 = (dot(vec3(cbLight._m0[_1845 + 3u].xyz), vec3(_638, _639, _640)) * 0.5) + 0.5;
        float _2161 = _2160 * _2160;
        float _4054 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
        float _2162 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
        float _2163 = isnan(1.0) ? _1861 : (isnan(_1861) ? 1.0 : min(_1861, 1.0));
        _1974 = (((cbLight._m0[_2144].x * 0.3183098733425140380859375) * _2162) * _2163) + _1929;
        _1976 = (((cbLight._m0[_2144].y * 0.3183098733425140380859375) * _2162) * _2163) + _1931;
        _1978 = (((cbLight._m0[_2144].z * 0.3183098733425140380859375) * _2162) * _2163) + _1933;
    }
    uint _1981 = _1845 + 8u;
    float _1994 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1845].w)) * _641) * 0.949999988079071044921875);
    float _1995 = _1994 * _1994;
    float _1996 = cbLight._m0[_1845].x + _718;
    float _1997 = cbLight._m0[_1845].y + _719;
    float _1998 = cbLight._m0[_1845].z + _720;
    float _2002 = inversesqrt(dot(vec3(_1996, _1997, _1998), vec3(_1996, _1997, _1998)));
    float _2003 = _2002 * _1996;
    float _2004 = _2002 * _1997;
    float _2005 = _2002 * _1998;
    float _2006 = dot(vec3(_638, _639, _640), vec3(cbLight._m0[_1845].xyz));
    float _4070 = isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0));
    float _2009 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
    float _4081 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
    float _2010 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
    float _2011 = dot(vec3(_638, _639, _640), vec3(_2003, _2004, _2005));
    float _4092 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
    float _2014 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
    float _2015 = dot(vec3(cbLight._m0[_1845].xyz), vec3(_2003, _2004, _2005));
    float _4103 = isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0));
    float _2019 = _1995 * _1995;
    float _2023 = ((_2014 * _2014) * (_2019 + (-1.0))) + 1.0;
    float _2031 = exp2(log2(1.0 - (isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0)))) * 5.0);
    float _2032 = 0.959999978542327880859375 - _785;
    float _2034 = 0.959999978542327880859375 - _786;
    float _2035 = 0.959999978542327880859375 - _787;
    float _2042 = 1.0 - _1995;
    float _2053 = (0.5 / (((_2010 * ((_2009 * _2042) + _1995)) + 9.9999999392252902907785028219223e-09) + (((_2010 * _2042) + _1995) * _2009))) * _2009;
    float _4114 = isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0));
    float _2055 = (isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0))) * (_2019 / ((_2023 * _2023) * 3.141590118408203125));
    uint _2066 = _1845 + 9u;
    float _2077 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1882].w)) * _641) * 0.949999988079071044921875);
    float _2078 = _2077 * _2077;
    float _2079 = cbLight._m0[_1882].x + _718;
    float _2080 = cbLight._m0[_1882].y + _719;
    float _2081 = cbLight._m0[_1882].z + _720;
    float _2085 = inversesqrt(dot(vec3(_2079, _2080, _2081), vec3(_2079, _2080, _2081)));
    float _2086 = _2085 * _2079;
    float _2087 = _2085 * _2080;
    float _2088 = _2085 * _2081;
    float _2089 = dot(vec3(_638, _639, _640), vec3(cbLight._m0[_1882].xyz));
    float _4125 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
    float _2092 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
    float _2093 = dot(vec3(_638, _639, _640), vec3(_2086, _2087, _2088));
    float _4136 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
    float _2096 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
    float _2097 = dot(vec3(cbLight._m0[_1882].xyz), vec3(_2086, _2087, _2088));
    float _4147 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
    float _2101 = _2078 * _2078;
    float _2105 = ((_2096 * _2096) * (_2101 + (-1.0))) + 1.0;
    float _2112 = exp2(log2(1.0 - (isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0)))) * 5.0);
    float _2119 = 1.0 - _2078;
    float _2129 = (0.5 / (((_2010 * ((_2092 * _2119) + _2078)) + 9.9999999392252902907785028219223e-09) + (((_2010 * _2119) + _2078) * _2092))) * _2092;
    float _4158 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
    float _2131 = (isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0))) * (_2101 / ((_2105 * _2105) * 3.141590118408203125));
    float _2141 = (((((_2112 * _2032) + _788) * cbLight._m0[_2066].x) * _2131) * _1868) + (((((_2031 * _2032) + _788) * cbLight._m0[_1981].x) * _2055) * _1878);
    float _2142 = (((((_2112 * _2034) + _790) * cbLight._m0[_2066].y) * _2131) * _1868) + (((((_2031 * _2034) + _790) * cbLight._m0[_1981].y) * _2055) * _1878);
    float _2143 = (((((_2112 * _2035) + _791) * cbLight._m0[_2066].z) * _2131) * _1868) + (((((_2031 * _2035) + _791) * cbLight._m0[_1981].z) * _2055) * _1878);
    float _2205;
    float _2207;
    float _2209;
    if (_1918)
    {
        _2205 = _2141;
        _2207 = _2142;
        _2209 = _2143;
    }
    else
    {
        uint _2211 = _1845 + 2u;
        uint _2215 = _1845 + 10u;
        float _2229 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2211].w)) * _641) * 0.949999988079071044921875);
        float _2230 = _2229 * _2229;
        float _2231 = cbLight._m0[_2211].x + _718;
        float _2232 = cbLight._m0[_2211].y + _719;
        float _2233 = cbLight._m0[_2211].z + _720;
        float _2237 = inversesqrt(dot(vec3(_2231, _2232, _2233), vec3(_2231, _2232, _2233)));
        float _2238 = _2237 * _2231;
        float _2239 = _2237 * _2232;
        float _2240 = _2237 * _2233;
        float _2241 = dot(vec3(_638, _639, _640), vec3(cbLight._m0[_2211].xyz));
        float _4169 = isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0));
        float _2244 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
        float _2245 = dot(vec3(_638, _639, _640), vec3(_2238, _2239, _2240));
        float _4180 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
        float _2248 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
        float _2249 = dot(vec3(cbLight._m0[_2211].xyz), vec3(_2238, _2239, _2240));
        float _4191 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0));
        float _2253 = _2230 * _2230;
        float _2257 = ((_2248 * _2248) * (_2253 + (-1.0))) + 1.0;
        float _2264 = exp2(log2(1.0 - (isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0)))) * 5.0);
        float _2271 = 1.0 - _2230;
        float _2281 = (0.5 / (((_2010 * ((_2244 * _2271) + _2230)) + 9.9999999392252902907785028219223e-09) + (((_2010 * _2271) + _2230) * _2244))) * _2244;
        float _4202 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
        float _2283 = (isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0))) * (_2253 / ((_2257 * _2257) * 3.141590118408203125));
        float _2284 = isnan(1.0) ? _1860 : (isnan(_1860) ? 1.0 : min(_1860, 1.0));
        _2205 = (((((_2264 * _2032) + _788) * cbLight._m0[_2215].x) * _2283) * _2284) + _2141;
        _2207 = (((((_2264 * _2034) + _790) * cbLight._m0[_2215].y) * _2283) * _2284) + _2142;
        _2209 = (((((_2264 * _2035) + _791) * cbLight._m0[_2215].z) * _2283) * _2284) + _2143;
    }
    float _2319;
    float _2321;
    float _2323;
    if (_1936)
    {
        _2319 = _2205;
        _2321 = _2207;
        _2323 = _2209;
    }
    else
    {
        uint _2330 = _1845 + 3u;
        uint _2334 = _1845 + 11u;
        float _2348 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2330].w)) * _641) * 0.949999988079071044921875);
        float _2349 = _2348 * _2348;
        float _2350 = cbLight._m0[_2330].x + _718;
        float _2351 = cbLight._m0[_2330].y + _719;
        float _2352 = cbLight._m0[_2330].z + _720;
        float _2356 = inversesqrt(dot(vec3(_2350, _2351, _2352), vec3(_2350, _2351, _2352)));
        float _2357 = _2356 * _2350;
        float _2358 = _2356 * _2351;
        float _2359 = _2356 * _2352;
        float _2360 = dot(vec3(_638, _639, _640), vec3(cbLight._m0[_2330].xyz));
        float _4218 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
        float _2363 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
        float _2364 = dot(vec3(_638, _639, _640), vec3(_2357, _2358, _2359));
        float _4229 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
        float _2367 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
        float _2368 = dot(vec3(cbLight._m0[_2330].xyz), vec3(_2357, _2358, _2359));
        float _4240 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
        float _2372 = _2349 * _2349;
        float _2376 = ((_2367 * _2367) * (_2372 + (-1.0))) + 1.0;
        float _2383 = exp2(log2(1.0 - (isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0)))) * 5.0);
        float _2390 = 1.0 - _2349;
        float _2400 = (0.5 / (((_2010 * ((_2363 * _2390) + _2349)) + 9.9999999392252902907785028219223e-09) + (((_2010 * _2390) + _2349) * _2363))) * _2363;
        float _4251 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
        float _2402 = (isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0))) * (_2372 / ((_2376 * _2376) * 3.141590118408203125));
        float _2403 = isnan(1.0) ? _1861 : (isnan(_1861) ? 1.0 : min(_1861, 1.0));
        _2319 = (((((_2383 * _2032) + _788) * cbLight._m0[_2334].x) * _2402) * _2403) + _2205;
        _2321 = (((((_2383 * _2034) + _790) * cbLight._m0[_2334].y) * _2402) * _2403) + _2207;
        _2323 = (((((_2383 * _2035) + _791) * cbLight._m0[_2334].z) * _2402) * _2403) + _2209;
    }
    float _2538;
    float _2540;
    float _2542;
    float _2544;
    float _2546;
    float _2548;
    if (_1843.y == 0u)
    {
        float _2478 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2479 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2478;
        float _2480 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2478;
        float _2481 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2478;
        uvec4 _2493 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2494 = _2493.x;
        uint _2505 = uint((float(_2493.y) * floor(float(uint(cbSceneParam._m0[85u].y * _727) / _2494))) + floor(float(uint(cbSceneParam._m0[85u].x * _726) / _2494)));
        float _2515 = (log2(_2481 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2516 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
        uint _2519 = uint(isnan(14.0) ? _2516 : (isnan(_2516) ? 14.0 : min(_2516, 14.0)));
        uvec4 _2524 = texelFetch(g_lightClusterGridBuffer, int(((_2519 << 2u) + (_2505 << 6u)) >> 2u));
        uint _2525 = _2524.x;
        uint _2526 = _2493.z;
        float _2626;
        float _2628;
        float _2630;
        float _2632;
        float _2634;
        float _2636;
        if (((((1u << ((_2526 >> 4u) & 15u)) + 4294967295u) & _2525) == 0u) || ((_2526 & 240u) == 0u))
        {
            _2626 = 0.0;
            _2628 = 0.0;
            _2630 = 0.0;
            _2632 = 0.0;
            _2634 = 0.0;
            _2636 = 0.0;
        }
        else
        {
            float _2627;
            float _2629;
            float _2631;
            float _2633;
            float _2635;
            float _2637;
            float _2771 = 0.0;
            float _2772 = 0.0;
            float _2773 = 0.0;
            float _2774 = 0.0;
            float _2775 = 0.0;
            float _2776 = 0.0;
            uint _2777 = 0u;
            uint _2786;
            bool _2787;
            for (;;)
            {
                _2786 = texelFetch(g_lightClassification, int((((_2519 << 5u) + (_2505 << 9u)) + (_2777 << 2u)) >> 2u)).x;
                _2787 = _2786 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2787)
                {
                    frontier_phi_61_pred = _2771;
                    frontier_phi_61_pred_1 = _2776;
                    frontier_phi_61_pred_2 = _2775;
                    frontier_phi_61_pred_3 = _2774;
                    frontier_phi_61_pred_4 = _2773;
                    frontier_phi_61_pred_5 = _2772;
                }
                else
                {
                    float _2895;
                    float _2896;
                    float _2897;
                    float _2898;
                    float _2899;
                    float _2900;
                    uint _2901;
                    _2895 = _2771;
                    _2896 = _2772;
                    _2897 = _2773;
                    _2898 = _2774;
                    _2899 = _2775;
                    _2900 = _2776;
                    _2901 = _2786;
                    float _2827;
                    float _2828;
                    float _2829;
                    float _2830;
                    float _2831;
                    float _2832;
                    for (;;)
                    {
                        uint _2905 = uint(findLSB(_2901)) + (_2777 << 5u);
                        uint _2902 = (_2901 + 4294967295u) & _2901;
                        uint _2907 = _2905 * 48u;
                        vec4 _2921 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2907)).x, texelFetch(g_PointLightRenderingBuffer, int(_2907 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2907 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2907 + 3u)).x));
                        uint _2927 = (_2905 * 48u) + 4u;
                        vec4 _2940 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2927)).x, texelFetch(g_PointLightRenderingBuffer, int(_2927 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2927 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2927 + 3u)).x));
                        uint _2946 = (_2905 * 48u) + 8u;
                        vec3 _2957 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2946)).x, texelFetch(g_PointLightRenderingBuffer, int(_2946 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2946 + 2u)).x));
                        float _2961 = _2921.x - _2479;
                        float _2962 = _2921.y - _2480;
                        float _2963 = _2921.z - _2481;
                        float _2964 = dot(vec3(_2961, _2962, _2963), vec3(_2961, _2962, _2963));
                        float _2967 = inversesqrt(_2964);
                        float _2968 = _2967 * _2961;
                        float _2969 = _2967 * _2962;
                        float _2970 = _2967 * _2963;
                        float _2971 = dot(vec3(_745, _748, _751), vec3(_2968, _2969, _2970));
                        float _2976 = 1.0 - (_2964 * _2921.w);
                        float _4277 = isnan(0.0) ? _2976 : (isnan(_2976) ? 0.0 : max(_2976, 0.0));
                        float _2977 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
                        float _2978 = sqrt(_2964) * _2940.w;
                        float _2981 = 1.39999997615814208984375 / (_2978 + 1.39999997615814208984375);
                        float _2982 = _2981 * _2981;
                        float _2985 = ((1.0 - _2982) * _2971) + _2982;
                        float _2988 = _2978 * _2978;
                        float _2992 = ((isnan(0.0) ? _2985 : (isnan(_2985) ? 0.0 : max(_2985, 0.0))) * _2977) / ((_2988 * 0.699999988079071044921875) + 1.0);
                        float _2996 = (-0.0) - _2479;
                        float _2997 = (-0.0) - _2480;
                        float _2998 = (-0.0) - _2481;
                        float _3002 = inversesqrt(dot(vec3(_2996, _2997, _2998), vec3(_2996, _2997, _2998)));
                        float _3003 = _3002 * _2996;
                        float _3004 = _3002 * _2997;
                        float _3005 = _3002 * _2998;
                        float _3013 = exp2(log2(1.0 / ((_2988 * 3.5) + 5.0)) * 0.25);
                        float _3014 = 1.0 - _820;
                        float _3021 = sqrt(1.0 - ((1.0 - (_3014 * _3014)) * (1.0 - (_3013 * _3013))));
                        float _3022 = _3021 * _3021;
                        float _3023 = _3022 * _3022;
                        float _3024 = _3003 + _2968;
                        float _3025 = _3004 + _2969;
                        float _3026 = _3005 + _2970;
                        float _3030 = inversesqrt(dot(vec3(_3024, _3025, _3026), vec3(_3024, _3025, _3026)));
                        float _3034 = dot(vec3(_745, _748, _751), vec3(_3003, _3004, _3005));
                        float _4293 = isnan(0.0) ? _3034 : (isnan(_3034) ? 0.0 : max(_3034, 0.0));
                        float _3037 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
                        float _3038 = dot(vec3(_745, _748, _751), vec3(_3030 * _3024, _3030 * _3025, _3030 * _3026));
                        float _4304 = isnan(0.0) ? _3038 : (isnan(_3038) ? 0.0 : max(_3038, 0.0));
                        float _3041 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
                        float _3045 = ((_3041 * _3041) * (_3023 + (-1.0))) + 1.0;
                        float _3046 = _2981 * _3022;
                        float _3047 = _3046 * _3046;
                        float _3050 = ((1.0 - _3047) * _2971) + _3047;
                        float _4315 = isnan(0.0) ? _3050 : (isnan(_3050) ? 0.0 : max(_3050, 0.0));
                        float _3051 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
                        float _3052 = 1.0 - _3022;
                        float _3062 = (0.5 / (((_3051 * ((_3037 * _3052) + _3022)) + 9.9999999392252902907785028219223e-09) + (((_3051 * _3052) + _3022) * _3037))) * _3051;
                        float _4326 = isnan(0.0) ? _3062 : (isnan(_3062) ? 0.0 : max(_3062, 0.0));
                        float _3073 = (((_3023 * 3.1415927410125732421875) * (isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0)))) / ((_3045 * _3045) * ((_2988 * 2.1991131305694580078125) + 3.141590118408203125))) * _2977;
                        _2830 = (_2992 * _2940.x) + _2898;
                        _2831 = (_2992 * _2940.y) + _2899;
                        _2832 = (_2992 * _2940.z) + _2900;
                        _2827 = (_3073 * _2957.x) + _2895;
                        _2828 = (_3073 * _2957.y) + _2896;
                        _2829 = (_3073 * _2957.z) + _2897;
                        if (_2902 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2895 = _2827;
                            _2896 = _2828;
                            _2897 = _2829;
                            _2898 = _2830;
                            _2899 = _2831;
                            _2900 = _2832;
                            _2901 = _2902;
                        }
                    }
                    frontier_phi_61_pred = _2827;
                    frontier_phi_61_pred_1 = _2832;
                    frontier_phi_61_pred_2 = _2831;
                    frontier_phi_61_pred_3 = _2830;
                    frontier_phi_61_pred_4 = _2829;
                    frontier_phi_61_pred_5 = _2828;
                }
                _2627 = frontier_phi_61_pred;
                _2637 = frontier_phi_61_pred_1;
                _2635 = frontier_phi_61_pred_2;
                _2633 = frontier_phi_61_pred_3;
                _2631 = frontier_phi_61_pred_4;
                _2629 = frontier_phi_61_pred_5;
                uint _2778 = _2777 + 1u;
                if (_2778 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2771 = _2627;
                    _2772 = _2629;
                    _2773 = _2631;
                    _2774 = _2633;
                    _2775 = _2635;
                    _2776 = _2637;
                    _2777 = _2778;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2626 = _2627;
            _2628 = _2629;
            _2630 = _2631;
            _2632 = _2633;
            _2634 = _2635;
            _2636 = _2637;
        }
        uvec4 _2640 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2641 = _2640.z;
        uint _2643 = (_2641 >> 8u) & 15u;
        float _2739;
        float _2741;
        float _2743;
        float _2745;
        float _2747;
        float _2749;
        if (((4294967295u << _2643) & _2525) == 0u)
        {
            _2739 = _2626;
            _2741 = _2628;
            _2743 = _2630;
            _2745 = _2632;
            _2747 = _2634;
            _2749 = _2636;
        }
        else
        {
            float _2764 = inversesqrt(dot(vec3(_2479, _2480, _2481), vec3(_2479, _2480, _2481)));
            float _2765 = _2764 * _2479;
            float _2766 = _2764 * _2480;
            float _2767 = _2764 * _2481;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2643 < ((_2641 >> 12u) & 15u))
            {
                float _2740;
                float _2742;
                float _2744;
                float _2746;
                float _2748;
                float _2750;
                float _2878 = _2626;
                float _2879 = _2628;
                float _2880 = _2630;
                float _2881 = _2632;
                float _2882 = _2634;
                float _2883 = _2636;
                uint _2884 = _2643;
                uint _2893;
                bool _2894;
                for (;;)
                {
                    _2893 = texelFetch(g_lightClassification, int((((_2519 << 5u) + (_2505 << 9u)) + (_2884 << 2u)) >> 2u)).x;
                    _2894 = _2893 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2894)
                    {
                        frontier_phi_67_pred = _2881;
                        frontier_phi_67_pred_1 = _2882;
                        frontier_phi_67_pred_2 = _2883;
                        frontier_phi_67_pred_3 = _2880;
                        frontier_phi_67_pred_4 = _2879;
                        frontier_phi_67_pred_5 = _2878;
                    }
                    else
                    {
                        float _3078;
                        float _3079;
                        float _3080;
                        float _3081;
                        float _3082;
                        float _3083;
                        float _3371;
                        float _3372;
                        float _3373;
                        float _3374;
                        float _3375;
                        float _3376;
                        float _3091 = _2878;
                        float _3092 = _2879;
                        float _3093 = _2880;
                        float _3094 = _2881;
                        float _3095 = _2882;
                        float _3096 = _2883;
                        uint _3097 = _2893;
                        uint _3098;
                        vec4 _3123;
                        float _3124;
                        vec4 _3139;
                        vec3 _3151;
                        vec4 _3166;
                        vec4 _3181;
                        float _3227;
                        bool _3228;
                        for (;;)
                        {
                            uint _3108 = ((_2884 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3097));
                            _3098 = (_3097 + 4294967295u) & _3097;
                            uint _3110 = _3108 * 40u;
                            _3123 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3110)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3110 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3110 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3110 + 3u)).x));
                            _3124 = _3123.w;
                            uint _3126 = (_3108 * 40u) + 4u;
                            _3139 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3126)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3126 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3126 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3126 + 3u)).x));
                            uint _3141 = (_3108 * 40u) + 8u;
                            _3151 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3141)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 2u)).x));
                            uint _3153 = (_3108 * 40u) + 16u;
                            _3166 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3153)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 3u)).x));
                            uint _3168 = (_3108 * 40u) + 20u;
                            _3181 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3168)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3168 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3168 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3168 + 3u)).x));
                            uint _3183 = (_3108 * 40u) + 24u;
                            vec4 _3196 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3183)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 3u)).x));
                            uint _3202 = (_3108 * 40u) + 28u;
                            vec4 _3215 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3202)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 3u)).x));
                            _3227 = fma(_2481, _3215.z, fma(_2480, _3215.y, _3215.x * _2479)) + _3215.w;
                            _3228 = !((fma(_2481, _3196.z, fma(_2480, _3196.y, _3196.x * _2479)) + _3196.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3228)
                            {
                                float _3255 = _3123.x - _2479;
                                float _3256 = _3123.y - _2480;
                                float _3257 = _3123.z - _2481;
                                float _3258 = dot(vec3(_3255, _3256, _3257), vec3(_3255, _3256, _3257));
                                float _3261 = inversesqrt(_3258);
                                float _3262 = _3261 * _3255;
                                float _3263 = _3261 * _3256;
                                float _3264 = _3261 * _3257;
                                float _3268 = 1.0 - (_3258 / (_3124 * _3124));
                                float _4337 = isnan(0.0) ? _3268 : (isnan(_3268) ? 0.0 : max(_3268, 0.0));
                                float _3269 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
                                float _3273 = sqrt(_3258) * _3139.w;
                                float _3275 = 1.39999997615814208984375 / (_3273 + 1.39999997615814208984375);
                                float _3276 = _3275 * _3275;
                                float _3279 = ((1.0 - _3276) * dot(vec3(_3262, _3263, _3264), vec3(_745, _748, _751))) + _3276;
                                float _3282 = _3273 * _3273;
                                float _3286 = (fma(_2481, _3166.z, fma(_2480, _3166.y, _3166.x * _2479)) + _3166.w) / _3227;
                                float _3287 = (fma(_2481, _3181.z, fma(_2480, _3181.y, _3181.x * _2479)) + _3181.w) / _3227;
                                float _3291 = 1.0 - dot(vec2(_3286, _3287), vec2(_3286, _3287));
                                float _4353 = isnan(0.0) ? _3291 : (isnan(_3291) ? 0.0 : max(_3291, 0.0));
                                float _3292 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
                                float _3293 = _3292 * (((isnan(0.0) ? _3279 : (isnan(_3279) ? 0.0 : max(_3279, 0.0))) * _3269) / ((_3282 * 0.699999988079071044921875) + 1.0));
                                float _3305 = exp2(log2(1.0 / ((_3282 * 3.5) + 5.0)) * 0.25);
                                float _3306 = 1.0 - _820;
                                float _3313 = sqrt(1.0 - ((1.0 - (_3306 * _3306)) * (1.0 - (_3305 * _3305))));
                                float _3314 = _3313 * _3313;
                                float _3315 = _3314 * _3314;
                                float _3316 = _3262 - _2765;
                                float _3317 = _3263 - _2766;
                                float _3318 = _3264 - _2767;
                                float _3322 = inversesqrt(dot(vec3(_3316, _3317, _3318), vec3(_3316, _3317, _3318)));
                                float _3326 = dot(vec3(_745, _748, _751), vec3((-0.0) - _2765, (-0.0) - _2766, (-0.0) - _2767));
                                float _4364 = isnan(0.0) ? _3326 : (isnan(_3326) ? 0.0 : max(_3326, 0.0));
                                float _3329 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
                                float _3330 = dot(vec3(_745, _748, _751), vec3(_3322 * _3316, _3322 * _3317, _3322 * _3318));
                                float _4375 = isnan(0.0) ? _3330 : (isnan(_3330) ? 0.0 : max(_3330, 0.0));
                                float _3333 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
                                float _3337 = ((_3333 * _3333) * (_3315 + (-1.0))) + 1.0;
                                float _3338 = _3275 * _3314;
                                float _3339 = _3338 * _3338;
                                float _3345 = ((1.0 - _3339) * dot(vec3(_745, _748, _751), vec3(_3262, _3263, _3264))) + _3339;
                                float _4386 = isnan(0.0) ? _3345 : (isnan(_3345) ? 0.0 : max(_3345, 0.0));
                                float _3346 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
                                float _3347 = 1.0 - _3314;
                                float _3357 = (0.5 / (((_3346 * ((_3329 * _3347) + _3314)) + 9.9999999392252902907785028219223e-09) + (((_3346 * _3347) + _3314) * _3329))) * _3346;
                                float _4397 = isnan(0.0) ? _3357 : (isnan(_3357) ? 0.0 : max(_3357, 0.0));
                                float _3367 = (_3292 * _3269) * (((_3315 * 3.1415927410125732421875) * (isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0)))) / ((_3337 * _3337) * ((_3282 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3367 * _3151.x;
                                frontier_phi_73_pred_1 = _3367 * _3151.y;
                                frontier_phi_73_pred_2 = _3293 * _3139.z;
                                frontier_phi_73_pred_3 = _3293 * _3139.y;
                                frontier_phi_73_pred_4 = _3293 * _3139.x;
                                frontier_phi_73_pred_5 = _3367 * _3151.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3371 = frontier_phi_73_pred;
                            _3372 = frontier_phi_73_pred_1;
                            _3376 = frontier_phi_73_pred_2;
                            _3375 = frontier_phi_73_pred_3;
                            _3374 = frontier_phi_73_pred_4;
                            _3373 = frontier_phi_73_pred_5;
                            _3081 = _3374 + _3094;
                            _3082 = _3375 + _3095;
                            _3083 = _3376 + _3096;
                            _3078 = _3371 + _3091;
                            _3079 = _3372 + _3092;
                            _3080 = _3373 + _3093;
                            if (_3098 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3091 = _3078;
                                _3092 = _3079;
                                _3093 = _3080;
                                _3094 = _3081;
                                _3095 = _3082;
                                _3096 = _3083;
                                _3097 = _3098;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3081;
                        frontier_phi_67_pred_1 = _3082;
                        frontier_phi_67_pred_2 = _3083;
                        frontier_phi_67_pred_3 = _3080;
                        frontier_phi_67_pred_4 = _3079;
                        frontier_phi_67_pred_5 = _3078;
                    }
                    _2746 = frontier_phi_67_pred;
                    _2748 = frontier_phi_67_pred_1;
                    _2750 = frontier_phi_67_pred_2;
                    _2744 = frontier_phi_67_pred_3;
                    _2742 = frontier_phi_67_pred_4;
                    _2740 = frontier_phi_67_pred_5;
                    uint _2885 = _2884 + 1u;
                    if (_2885 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2878 = _2740;
                        _2879 = _2742;
                        _2880 = _2744;
                        _2881 = _2746;
                        _2882 = _2748;
                        _2883 = _2750;
                        _2884 = _2885;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2748;
                frontier_phi_55_56_ladder_1 = _2750;
                frontier_phi_55_56_ladder_2 = _2746;
                frontier_phi_55_56_ladder_3 = _2744;
                frontier_phi_55_56_ladder_4 = _2742;
                frontier_phi_55_56_ladder_5 = _2740;
            }
            else
            {
                frontier_phi_55_56_ladder = _2634;
                frontier_phi_55_56_ladder_1 = _2636;
                frontier_phi_55_56_ladder_2 = _2632;
                frontier_phi_55_56_ladder_3 = _2630;
                frontier_phi_55_56_ladder_4 = _2628;
                frontier_phi_55_56_ladder_5 = _2626;
            }
            _2739 = frontier_phi_55_56_ladder_5;
            _2741 = frontier_phi_55_56_ladder_4;
            _2743 = frontier_phi_55_56_ladder_3;
            _2745 = frontier_phi_55_56_ladder_2;
            _2747 = frontier_phi_55_56_ladder;
            _2749 = frontier_phi_55_56_ladder_1;
        }
        float _2754 = isnan(1.0) ? _804 : (isnan(_804) ? 1.0 : min(_804, 1.0));
        _2538 = (_2754 * _2745) + _1974;
        _2540 = (_2754 * _2747) + _1976;
        _2542 = (_2754 * _2749) + _1978;
        _2544 = ((_2739 * _788) * _2754) + _2319;
        _2546 = ((_2741 * _790) * _2754) + _2321;
        _2548 = ((_2743 * _791) * _2754) + _2323;
    }
    else
    {
        _2538 = _1974;
        _2540 = _1976;
        _2542 = _1978;
        _2544 = _2319;
        _2546 = _2321;
        _2548 = _2323;
    }
    float _4413 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _4424 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
    float _4435 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    uint _2568 = _236 + 6u;
    float _2576 = _726 / cbSceneParam._m0[86u].x;
    float _2577 = _727 / cbSceneParam._m0[86u].y;
    vec4 _2591 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2576, _2577, (log2((isnan(cbSceneParam._m0[77u].w) ? _660 : (isnan(_660) ? cbSceneParam._m0[77u].w : min(_660, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2593 = _2591.x;
    float _2594 = _2591.y;
    float _2595 = _2591.z;
    float _2596 = _2591.w;
    float _2689;
    float _2691;
    float _2693;
    float _2695;
    if (_660 > cbSceneParam._m0[78u].w)
    {
        float _2651 = isnan(_660) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _660 : min(cbSceneParam._m0[80u].w, _660));
        float _2652 = _2651 / _660;
        float _2663 = _2652 * _711;
        float _2664 = _712 * _2652;
        float _2665 = (-0.0) - _2664;
        float _2667 = _2652 * _713;
        float _2669 = (cbSceneParam._m0[77u].w * _2665) / _2651;
        float _2670 = _2669 + cbSceneParam._m0[79u].w;
        float _2671 = cbSceneParam._m0[79u].w - _2664;
        float _2677 = sqrt(((_2663 * _2663) + (_2664 * _2664)) + (_2667 * _2667));
        float _2680 = (1.0 - (cbSceneParam._m0[77u].w / _2651)) * _2677;
        float _2685 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2687 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2840;
        if (abs((_2665 - _2669) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2840 = ((((_2670 > 0.0) ? exp2(_2685 * _2670) : (2.0 - exp2(_2687 * _2670))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2680;
        }
        else
        {
            float _2800 = 1.0 / cbSceneParam._m0[80u].x;
            float _2801 = isnan(_2671) ? _2670 : (isnan(_2670) ? _2671 : max(_2670, _2671));
            float _2802 = isnan(_2671) ? _2670 : (isnan(_2670) ? _2671 : min(_2670, _2671));
            float _2811 = isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : min(_2801, 0.0));
            float _2812 = isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : min(_2802, 0.0));
            _2840 = ((abs(_2677 / _2665) * cbSceneParam._m0[80u].y) * ((((_2811 - _2812) * 2.0) - ((exp2(_2685 * (isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0)))) - exp2(_2685 * (isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : max(_2802, 0.0))))) * _2800)) - ((exp2(_2687 * _2811) - exp2(_2687 * _2812)) * _2800))) + (_2680 * cbSceneParam._m0[80u].z);
        }
        vec4 _2842 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2576, _2577, 1.0), 0.0);
        float _2851 = exp2((_2840 * (-1.44269502162933349609375)) * (1.0 - _2842.w));
        float _2852 = log2(_2851);
        float _2868 = log2(_2596);
        _2689 = (exp2(_2868 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2852 * cbSceneParam._m0[78u].x)) * _2842.x) / cbSceneParam._m0[78u].x)) + _2593;
        _2691 = (exp2(_2868 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2852 * cbSceneParam._m0[78u].y)) * _2842.y) / cbSceneParam._m0[78u].y)) + _2594;
        _2693 = (exp2(_2868 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2852 * cbSceneParam._m0[78u].z)) * _2842.z) / cbSceneParam._m0[78u].z)) + _2595;
        _2695 = _2851 * _2596;
    }
    else
    {
        _2689 = _2593;
        _2691 = _2594;
        _2693 = _2595;
        _2695 = _2596;
    }
    float _2707 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2708 = _2707 == 3.0;
    float _2709 = log2(_2695);
    float _2716 = exp2(_2709 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0))) * (_2538 + ((isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0))) * _804))) + ((_2544 + ((isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0))) * _1611)) * cbPerFrame._m0[3u].x));
    float _2717 = exp2(_2709 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0))) * (_2540 + ((isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0))) * _804))) + ((_2546 + ((isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0))) * _1611)) * cbPerFrame._m0[3u].x));
    float _2718 = exp2(_2709 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0))) * (_2542 + ((isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0))) * _804))) + ((_2548 + ((isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0))) * _1611)) * cbPerFrame._m0[3u].x));
    float _2727 = (_2707 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2727 * (_2708 ? _2716 : (_2716 + (cbSceneParam._m0[72u].w * _2689)));
    SV_Target.y = _2727 * (_2708 ? _2717 : (_2717 + (cbSceneParam._m0[72u].w * _2691)));
    SV_Target.z = _2727 * (_2708 ? _2718 : (_2718 + (cbSceneParam._m0[72u].w * _2693)));
    SV_Target.w = cbInstanceData._m0[_2568].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2568].w;
}


