#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1234;
float _3899;
float _3900;
float _3901;
float _3902;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _212 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _213 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _214 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _220 = inversesqrt(dot(vec3(_212, _213, _214), vec3(_212, _213, _214)));
    float _221 = _220 * _212;
    float _222 = _220 * _213;
    float _223 = _220 * _214;
    float _227 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _228 = _227 * NORMAL.x;
    float _229 = _227 * NORMAL.y;
    float _230 = _227 * NORMAL.z;
    float _234 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _235 = _234 * TANGENT.x;
    float _236 = _234 * TANGENT.y;
    float _237 = _234 * TANGENT.z;
    uint _240 = uint(roundEven(NORMAL.w)) * 13u;
    uint _246 = _240 + 1u;
    uint _250 = _240 + 2u;
    float _259 = sqrt(((cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x) + (cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x)) + (cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x));
    float _260 = _259 * TEXCOORD.z;
    float _261 = _259 * TEXCOORD.w;
    vec4 _281 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _287 = _281.x * cbMtdParam._m0[11u].x;
    float _288 = _281.y * cbMtdParam._m0[11u].y;
    float _289 = _281.z * cbMtdParam._m0[11u].z;
    vec4 _308 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _260) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _261) + cbTextureTilingScale._m0[5u].w));
    vec4 _346 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _348 = _346.x;
    float _360 = dot(vec4(_348, _346.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _377 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_348 - _360) * cbMtdParam._m0[24u].y) + _360) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3911 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _378 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
    float _385 = (_378 * ((_308.x * cbMtdParam._m0[12u].x) - _287)) + _287;
    float _386 = (_378 * ((_308.y * cbMtdParam._m0[12u].y) - _288)) + _288;
    float _387 = (_378 * ((_308.z * cbMtdParam._m0[12u].z) - _289)) + _289;
    vec4 _405 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _260) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _261) + cbTextureTilingScale._m0[4u].w));
    vec4 _422 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _424 = _422.x;
    float _425 = _422.y;
    float _426 = _422.z;
    float _435 = ((_405.z - _426) * _378) + _426;
    float _438 = ((((_405.x - _424) * _378) + _424) * 2.0) + (-1.0);
    float _440 = ((((_405.y - _425) * _378) + _425) * 2.0) + (-1.0);
    float _441 = dot(vec2(_438, _440), vec2(_438, _440));
    float _3922 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _446 = sqrt(1.0 - (isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0))));
    vec4 _462 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _474 = (((_462.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _438;
    float _475 = (((_462.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _440;
    float _478 = fma(_446, _228, fma(_475, _235, _474 * _221));
    float _481 = fma(_446, _229, fma(_475, _236, _474 * _222));
    float _484 = fma(_446, _230, fma(_475, _237, _474 * _223));
    float _488 = inversesqrt(dot(vec3(_478, _481, _484), vec3(_478, _481, _484)));
    vec4 _515 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _260) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _261) + cbTextureTilingScale._m0[11u].w));
    float _517 = _515.x;
    float _518 = 1.0 - _517;
    float _524 = (cbMtdParam._m0[19u].x + dot(vec4(_488 * _478, _488 * _481, _488 * _484, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_517 - _518) * cbMtdParam._m0[24u].z) + _518) * cbMtdParam._m0[21u].z);
    float _3933 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _525 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
    float _532 = (_525 * (cbMtdParam._m0[17u].x - _385)) + _385;
    float _533 = (_525 * (cbMtdParam._m0[17u].y - _386)) + _386;
    float _534 = (_525 * (cbMtdParam._m0[17u].z - _387)) + _387;
    vec4 _546 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _560 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _562 = _560.x;
    float _580 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _260) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _261) + cbTextureTilingScale._m0[9u].w)).x - _562) * _378) + _562;
    float _584 = ((_546.x - _580) * cbMtdParam._m0[19u].z) + _580;
    float _586 = _584 - (_584 * _525);
    float _590 = (cbMtdParam._m0[19u].w * (_462.z - _435)) + _435;
    vec4 _603 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _260) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _261) + cbTextureTilingScale._m0[15u].w));
    float _610 = (_603.x * 2.0) + (-1.0);
    float _611 = (_603.y * 2.0) + (-1.0);
    float _612 = dot(vec2(_610, _611), vec2(_610, _611));
    float _3944 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _620 = ((_603.z - _590) * _525) + _590;
    float _630 = ((sqrt(1.0 - (isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0)))) - _446) * _525) + _446;
    float _633 = (((_610 - _474) * _525) + _474) + (cbMtdParam._m0[21u].x * _474);
    float _634 = (((_611 - _475) * _525) + _475) + (cbMtdParam._m0[21u].x * _475);
    float _639 = cbMtdParam._m0[22u].x + _462.w;
    float _642 = fma(_630, _228, fma(_634, _235, _633 * _221));
    float _645 = fma(_630, _229, fma(_634, _236, _633 * _222));
    float _648 = fma(_630, _230, fma(_634, _237, _633 * _223));
    float _652 = inversesqrt(dot(vec3(_642, _645, _648), vec3(_642, _645, _648)));
    float _653 = _652 * _642;
    float _654 = _652 * _645;
    float _655 = _652 * _648;
    float _3955 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _656 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
    float _3966 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _3977 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    float _3988 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _3999 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _4010 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
    float _661 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
    float _675 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _716 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _726 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _716);
    float _727 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _716);
    float _728 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _716);
    float _732 = inversesqrt(dot(vec3(_726, _727, _728), vec3(_726, _727, _728)));
    float _733 = _726 * _732;
    float _734 = _727 * _732;
    float _735 = _728 * _732;
    vec4 _740 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _742 = _740.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _914 = sqrt(((_726 * _726) + (_727 * _727)) + (_728 * _728));
        float _920 = (cbMatDynParam._m0[5u].x * _914) + cbMatDynParam._m0[5u].y;
        float _4021 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
        float _921 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
        float _925 = (cbMatDynParam._m0[5u].z * _914) + cbMatDynParam._m0[5u].w;
        float _4032 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0))) - _921)) + _921) < ((_742 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _753 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _754 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _772 = fma(_655, cbSceneParam._m0[5u].z, fma(_654, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _653));
    float _775 = fma(_655, cbSceneParam._m0[6u].z, fma(_654, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _653));
    float _778 = fma(_655, cbSceneParam._m0[7u].z, fma(_654, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _653));
    uint _791 = _240 + 9u;
    uint _792 = _791 + uint(cbMatDynParam._m0[0u].w);
    float _798 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0)))) * cbInstanceData._m0[_792].x;
    float _799 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0)))) * cbInstanceData._m0[_792].y;
    float _800 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0)))) * cbInstanceData._m0[_792].z;
    float _4043 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
    float _801 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
    float _4054 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
    float _802 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
    float _4065 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
    float _803 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
    float _804 = 1.0 - _661;
    float _805 = _801 * _804;
    float _806 = _802 * _804;
    float _807 = _803 * _804;
    float _812 = (_801 + (-0.039999999105930328369140625)) * _661;
    float _813 = (_802 + (-0.039999999105930328369140625)) * _661;
    float _814 = (_803 + (-0.039999999105930328369140625)) * _661;
    float _815 = _812 + 0.039999999105930328369140625;
    float _817 = _813 + 0.039999999105930328369140625;
    float _818 = _814 + 0.039999999105930328369140625;
    vec4 _827 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _753, cbSceneParam._m0[86u].y * _754));
    float _831 = ((isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0))) * TEXCOORD_5.w) * _827.x;
    float _832 = dot(vec3(_653, _654, _655), vec3(_733, _734, _735));
    float _835 = _832 * 2.0;
    float _839 = (_835 * _653) - _733;
    float _840 = (_835 * _654) - _734;
    float _841 = (_835 * _655) - _735;
    float _845 = abs(dot(vec3(_733, _734, _735), vec3(_653, _654, _655)));
    float _4076 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
    float _847 = sqrt(_656);
    float _860 = exp2((_847 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_847 * 3.0));
    float _866 = (1.0 - _860) * ((_847 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _867 = _860 * _847;
    float _895 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _899 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _903 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1233;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _958 = fma(_903, cbModelParam._m0[26u].z, fma(_899, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _895));
        float _962 = fma(_903, cbModelParam._m0[27u].z, fma(_899, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _895));
        float _966 = fma(_903, cbModelParam._m0[28u].z, fma(_899, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _895));
        float _991 = _895 + _653;
        float _992 = _899 + _654;
        float _993 = _903 + _655;
        float _1003 = fma(_993, cbModelParam._m0[26u].z, fma(_992, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _991)) - _958;
        float _1004 = fma(_993, cbModelParam._m0[27u].z, fma(_992, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _991)) - _962;
        float _1005 = fma(_993, cbModelParam._m0[28u].z, fma(_992, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _991)) - _966;
        float _1009 = inversesqrt(dot(vec3(_1003, _1004, _1005), vec3(_1003, _1004, _1005)));
        float _1022 = ((_1009 * _1003) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_958 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1023 = ((_1009 * _1004) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_962 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1024 = ((_1009 * _1005) / cbModelParam._m0[34u].z) + ((((((_966 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1027 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1022, _1023, _1024), 0.0);
        vec4 _1034 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1022, _1023, _1024), 0.0);
        vec4 _1041 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1022, _1023, _1024), 0.0);
        vec4 _1048 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1022, _1023, _1024), 0.0);
        float _1061 = exp2((_1027.w + (-0.5)) * 20.0) * 2.0;
        float _1062 = _1061 * (_1027.x + (-0.5));
        float _1063 = _1061 * (_1027.y + (-0.5));
        float _1064 = _1061 * (_1027.z + (-0.5));
        float _1071 = exp2((_1034.w + (-0.5)) * 20.0) * 2.0;
        float _1072 = _1071 * (_1034.x + (-0.5));
        float _1073 = _1071 * (_1034.y + (-0.5));
        float _1074 = _1071 * (_1034.z + (-0.5));
        float _1081 = exp2((_1041.w + (-0.5)) * 20.0) * 2.0;
        float _1082 = _1081 * (_1041.x + (-0.5));
        float _1083 = _1081 * (_1041.y + (-0.5));
        float _1084 = _1081 * (_1041.z + (-0.5));
        float _1091 = exp2((_1048.w + (-0.5)) * 20.0) * 2.0;
        float _1092 = _1091 * (_1048.x + (-0.5));
        float _1093 = _1091 * (_1048.y + (-0.5));
        float _1094 = _1091 * (_1048.z + (-0.5));
        float _1095 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1096 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1097 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1098 = _1062 * 0.5;
        float _1099 = _1072 * 0.5;
        float _1100 = _1082 * 0.5;
        float _1101 = dot(vec3(_1098, _1099, _1100), vec3(_1098, _1099, _1100));
        float _1106 = (_1101 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1101);
        float _1115 = (dot(vec3(_653, _654, _655), vec3(_1106 * _1098, _1106 * _1099, _1106 * _1100)) + 1.0) * 0.5;
        float _4102 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1125 = sqrt(((_1099 * _1099) + (_1098 * _1098)) + (_1100 * _1100)) / (_1095 + 9.9999997473787516355514526367188e-06);
        float _4113 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1126 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
        float _1127 = _1126 * 2.0;
        float _1131 = (1.0 - _1126) / (_1126 + 1.0);
        float _4124 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1132 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
        float _1141 = ((((1.0 - _1132) * (_1127 + 2.0)) * exp2(log2(isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0))) * (_1127 + 1.0))) + _1132) * _1095;
        float _1142 = _1063 * 0.5;
        float _1143 = _1073 * 0.5;
        float _1144 = _1083 * 0.5;
        float _1145 = dot(vec3(_1142, _1143, _1144), vec3(_1142, _1143, _1144));
        float _1150 = (_1145 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1145);
        float _1158 = (dot(vec3(_653, _654, _655), vec3(_1150 * _1142, _1150 * _1143, _1150 * _1144)) + 1.0) * 0.5;
        float _4135 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1167 = sqrt(((_1143 * _1143) + (_1142 * _1142)) + (_1144 * _1144)) / (_1096 + 9.9999997473787516355514526367188e-06);
        float _4146 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1168 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
        float _1169 = _1168 * 2.0;
        float _1173 = (1.0 - _1168) / (_1168 + 1.0);
        float _4157 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1174 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
        float _1183 = ((((1.0 - _1174) * (_1169 + 2.0)) * exp2(log2(isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0))) * (_1169 + 1.0))) + _1174) * _1096;
        float _1184 = _1064 * 0.5;
        float _1185 = _1074 * 0.5;
        float _1186 = _1084 * 0.5;
        float _1187 = dot(vec3(_1184, _1185, _1186), vec3(_1184, _1185, _1186));
        float _1192 = (_1187 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1187);
        float _1200 = (dot(vec3(_653, _654, _655), vec3(_1192 * _1184, _1192 * _1185, _1192 * _1186)) + 1.0) * 0.5;
        float _4168 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1209 = sqrt(((_1185 * _1185) + (_1184 * _1184)) + (_1186 * _1186)) / (_1097 + 9.9999997473787516355514526367188e-06);
        float _4179 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1210 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
        float _1211 = _1210 * 2.0;
        float _1215 = (1.0 - _1210) / (_1210 + 1.0);
        float _4190 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1216 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
        float _1225 = ((((1.0 - _1216) * (_1211 + 2.0)) * exp2(log2(isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0))) * (_1211 + 1.0))) + _1216) * _1097;
        _1233 = _1064;
        _1235 = _1063;
        _1236 = _1062;
        _1237 = _1074;
        _1238 = _1073;
        _1239 = _1072;
        _1240 = _1084;
        _1241 = _1083;
        _1242 = _1082;
        _1243 = _1097;
        _1244 = _1096;
        _1245 = _1095;
        _1246 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0)));
        _1247 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0)));
        _1248 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0)));
    }
    else
    {
        _1233 = _1234;
        _1235 = _1234;
        _1236 = _1234;
        _1237 = _1234;
        _1238 = _1234;
        _1239 = _1234;
        _1240 = _1234;
        _1241 = _1234;
        _1242 = _1234;
        _1243 = _1234;
        _1244 = _1234;
        _1245 = _1234;
        _1246 = 0.0;
        _1247 = 0.0;
        _1248 = 0.0;
    }
    float _1545;
    float _1546;
    float _1547;
    float _1548;
    float _1549;
    float _1550;
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1276 = fma(_903, cbModelParam._m0[30u].z, fma(_899, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _895));
        float _1280 = fma(_903, cbModelParam._m0[31u].z, fma(_899, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _895));
        float _1284 = fma(_903, cbModelParam._m0[32u].z, fma(_899, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _895));
        float _1307 = _895 + _653;
        float _1308 = _899 + _654;
        float _1309 = _903 + _655;
        float _1319 = fma(_1309, cbModelParam._m0[30u].z, fma(_1308, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1307)) - _1276;
        float _1320 = fma(_1309, cbModelParam._m0[31u].z, fma(_1308, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1307)) - _1280;
        float _1321 = fma(_1309, cbModelParam._m0[32u].z, fma(_1308, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1307)) - _1284;
        float _1325 = inversesqrt(dot(vec3(_1319, _1320, _1321), vec3(_1319, _1320, _1321)));
        float _1338 = ((_1325 * _1319) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1276 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1339 = ((_1325 * _1320) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1280 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1340 = ((_1325 * _1321) / cbModelParam._m0[35u].z) + ((((((_1284 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1342 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1338, _1339, _1340), 0.0);
        vec4 _1349 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1338, _1339, _1340), 0.0);
        vec4 _1356 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1338, _1339, _1340), 0.0);
        vec4 _1363 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1338, _1339, _1340), 0.0);
        float _1375 = exp2((_1342.w + (-0.5)) * 20.0) * 2.0;
        float _1376 = _1375 * (_1342.x + (-0.5));
        float _1377 = _1375 * (_1342.y + (-0.5));
        float _1378 = _1375 * (_1342.z + (-0.5));
        float _1385 = exp2((_1349.w + (-0.5)) * 20.0) * 2.0;
        float _1386 = _1385 * (_1349.x + (-0.5));
        float _1387 = _1385 * (_1349.y + (-0.5));
        float _1388 = _1385 * (_1349.z + (-0.5));
        float _1395 = exp2((_1356.w + (-0.5)) * 20.0) * 2.0;
        float _1396 = _1395 * (_1356.x + (-0.5));
        float _1397 = _1395 * (_1356.y + (-0.5));
        float _1398 = _1395 * (_1356.z + (-0.5));
        float _1405 = exp2((_1363.w + (-0.5)) * 20.0) * 2.0;
        float _1406 = _1405 * (_1363.x + (-0.5));
        float _1407 = _1405 * (_1363.y + (-0.5));
        float _1408 = _1405 * (_1363.z + (-0.5));
        float _1409 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1410 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1411 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1412 = _1376 * 0.5;
        float _1413 = _1386 * 0.5;
        float _1414 = _1396 * 0.5;
        float _1415 = dot(vec3(_1412, _1413, _1414), vec3(_1412, _1413, _1414));
        float _1420 = (_1415 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1415);
        float _1428 = (dot(vec3(_653, _654, _655), vec3(_1420 * _1412, _1420 * _1413, _1420 * _1414)) + 1.0) * 0.5;
        float _4231 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1437 = sqrt(((_1413 * _1413) + (_1412 * _1412)) + (_1414 * _1414)) / (_1409 + 9.9999997473787516355514526367188e-06);
        float _4242 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1438 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
        float _1439 = _1438 * 2.0;
        float _1443 = (1.0 - _1438) / (_1438 + 1.0);
        float _4253 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1444 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
        float _1453 = ((((1.0 - _1444) * (_1439 + 2.0)) * exp2(log2(isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0))) * (_1439 + 1.0))) + _1444) * _1409;
        float _1454 = _1377 * 0.5;
        float _1455 = _1387 * 0.5;
        float _1456 = _1397 * 0.5;
        float _1457 = dot(vec3(_1454, _1455, _1456), vec3(_1454, _1455, _1456));
        float _1462 = (_1457 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1457);
        float _1470 = (dot(vec3(_653, _654, _655), vec3(_1462 * _1454, _1462 * _1455, _1462 * _1456)) + 1.0) * 0.5;
        float _4264 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1479 = sqrt(((_1455 * _1455) + (_1454 * _1454)) + (_1456 * _1456)) / (_1410 + 9.9999997473787516355514526367188e-06);
        float _4275 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1480 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
        float _1481 = _1480 * 2.0;
        float _1485 = (1.0 - _1480) / (_1480 + 1.0);
        float _4286 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1486 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
        float _1495 = ((((1.0 - _1486) * (_1481 + 2.0)) * exp2(log2(isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0))) * (_1481 + 1.0))) + _1486) * _1410;
        float _1496 = _1378 * 0.5;
        float _1497 = _1388 * 0.5;
        float _1498 = _1398 * 0.5;
        float _1499 = dot(vec3(_1496, _1497, _1498), vec3(_1496, _1497, _1498));
        float _1504 = (_1499 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1499);
        float _1512 = (dot(vec3(_653, _654, _655), vec3(_1504 * _1496, _1504 * _1497, _1504 * _1498)) + 1.0) * 0.5;
        float _4297 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
        float _1521 = sqrt(((_1497 * _1497) + (_1496 * _1496)) + (_1498 * _1498)) / (_1411 + 9.9999997473787516355514526367188e-06);
        float _4308 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
        float _1522 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
        float _1523 = _1522 * 2.0;
        float _1527 = (1.0 - _1522) / (_1522 + 1.0);
        float _4319 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1528 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
        float _1537 = ((((1.0 - _1528) * (_1523 + 2.0)) * exp2(log2(isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0))) * (_1523 + 1.0))) + _1528) * _1411;
        _1545 = _1378;
        _1546 = _1377;
        _1547 = _1376;
        _1548 = _1388;
        _1549 = _1387;
        _1550 = _1386;
        _1551 = _1398;
        _1552 = _1397;
        _1553 = _1396;
        _1554 = _1411;
        _1555 = _1410;
        _1556 = _1409;
        _1557 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0)));
        _1558 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0)));
        _1559 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0)));
    }
    else
    {
        _1545 = _1234;
        _1546 = _1234;
        _1547 = _1234;
        _1548 = _1234;
        _1549 = _1234;
        _1550 = _1234;
        _1551 = _1234;
        _1552 = _1234;
        _1553 = _1234;
        _1554 = _1234;
        _1555 = _1234;
        _1556 = _1234;
        _1557 = 0.0;
        _1558 = 0.0;
        _1559 = 0.0;
    }
    float _1569 = (cbModelParam._m0[1u].x * (_1557 - _1246)) + _1246;
    float _1570 = (cbModelParam._m0[1u].x * (_1558 - _1247)) + _1247;
    float _1571 = (cbModelParam._m0[1u].x * (_1559 - _1248)) + _1248;
    float _1592 = fma(_1571, cbSceneParam._m0[89u].z, fma(_1570, cbSceneParam._m0[89u].y, _1569 * cbSceneParam._m0[89u].x));
    float _1595 = fma(_1571, cbSceneParam._m0[90u].z, fma(_1570, cbSceneParam._m0[90u].y, _1569 * cbSceneParam._m0[90u].x));
    float _1598 = fma(_1571, cbSceneParam._m0[91u].z, fma(_1570, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1569));
    float _1613 = _839 * 0.5;
    float _1614 = _840 * 0.5;
    float _1615 = _841 * 0.5;
    float _1616 = dot(vec4(_1613, _1614, _1615, 1.0), vec4(_1547, _1550, _1553, _1556));
    float _1619 = dot(vec4(_1613, _1614, _1615, 1.0), vec4(_1546, _1549, _1552, _1555));
    float _1622 = dot(vec4(_1613, _1614, _1615, 1.0), vec4(_1545, _1548, _1551, _1554));
    float _1656;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1629 = dot(vec4(_1613, _1614, _1615, 1.0), vec4(_1233, _1237, _1240, _1243));
        float _1633 = dot(vec4(_1613, _1614, _1615, 1.0), vec4(_1235, _1238, _1241, _1244));
        float _1637 = dot(vec4(_1613, _1614, _1615, 1.0), vec4(_1236, _1239, _1242, _1245));
        float _1644 = dot(vec4(cbModelParam._m0[39u]), vec4(_1613, _1614, _1615, 1.0));
        _1656 = dot(vec3(isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0)), isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0)), isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1644) ? 0.0 : (isnan(0.0) ? _1644 : max(0.0, _1644))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1656 = 1.0;
    }
    float _1667;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1658 = dot(vec4(cbModelParam._m0[40u]), vec4(_1613, _1614, _1615, 1.0));
        _1667 = dot(vec3(isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0)), isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0)), isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1658) ? 0.0 : (isnan(0.0) ? _1658 : max(0.0, _1658))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1667 = 1.0;
    }
    float _1671 = (_1667 * cbModelParam._m0[1u].x) + (_1656 * (1.0 - cbModelParam._m0[1u].x));
    float _1681 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _656);
    float _1682 = isnan(_1681) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1681 : min(cbModelParam._m0[25u].z, _1681));
    float _1763;
    float _1765;
    float _1767;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1730 = fma(_903, cbModelParam._m0[13u].z, fma(_899, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _895)) + cbModelParam._m0[13u].w;
        float _1734 = fma(_903, cbModelParam._m0[14u].z, fma(_899, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _895)) + cbModelParam._m0[14u].w;
        float _1738 = fma(_903, cbModelParam._m0[15u].z, fma(_899, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _895)) + cbModelParam._m0[15u].w;
        float _1741 = fma(_841, cbModelParam._m0[13u].z, fma(_840, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _839));
        float _1744 = fma(_841, cbModelParam._m0[14u].z, fma(_840, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _839));
        float _1747 = fma(_841, cbModelParam._m0[15u].z, fma(_840, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _839));
        float _1775;
        if (_1741 > 0.0)
        {
            _1775 = abs((1.0 - _1730) / _1741);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1741 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1730 + 1.0) / _1741);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1775 = frontier_phi_17_15_ladder;
        }
        float _1947;
        if (_1744 > 0.0)
        {
            _1947 = abs((1.0 - _1734) / _1744);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1744 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1734 + 1.0) / _1744);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1947 = frontier_phi_26_22_ladder;
        }
        float _2242;
        if (_1747 > 0.0)
        {
            _2242 = abs((1.0 - _1738) / _1747);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1747 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1738 + 1.0) / _1747);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2242 = frontier_phi_38_33_ladder;
        }
        float _2244 = isnan(_1947) ? _1775 : (isnan(_1775) ? _1947 : min(_1775, _1947));
        float _2245 = isnan(_2242) ? _2244 : (isnan(_2244) ? _2242 : min(_2244, _2242));
        float _2249 = (_2245 * _1741) + _1730;
        float _2250 = (_2245 * _1744) + _1734;
        float _2251 = (_2245 * _1747) + _1738;
        float _2252 = _2245 * 9.9999997473787516355514526367188e-05;
        float _2254 = (-1.0) - _2252;
        float _2256 = _2252 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2251 > _2256) || ((_2251 < _2254) || ((_2250 > _2256) || ((_2250 < _2254) || ((_2249 < _2254) || (_2249 > _2256))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2396 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2251, cbModelParam._m0[9u].z, fma(_2250, cbModelParam._m0[9u].y, _2249 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2251, cbModelParam._m0[10u].z, fma(_2250, cbModelParam._m0[10u].y, _2249 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2251, cbModelParam._m0[11u].z, fma(_2250, cbModelParam._m0[11u].y, _2249 * cbModelParam._m0[11u].x))), _1682);
            frontier_phi_16_38_ladder = _2396.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2396.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2396.x * cbModelParam._m0[1u].y;
        }
        _1763 = frontier_phi_16_38_ladder_2;
        _1765 = frontier_phi_16_38_ladder_1;
        _1767 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1751 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_839, _840, _841), _1682);
        _1763 = _1751.x * cbModelParam._m0[1u].y;
        _1765 = _1751.y * cbModelParam._m0[1u].y;
        _1767 = _1751.z * cbModelParam._m0[1u].y;
    }
    float _1771 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _656);
    float _1772 = isnan(_1771) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1771 : min(cbModelParam._m0[25u].w, _1771));
    float _1862;
    float _1864;
    float _1866;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1826 = fma(_903, cbModelParam._m0[21u].z, fma(_899, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _895)) + cbModelParam._m0[21u].w;
        float _1830 = fma(_903, cbModelParam._m0[22u].z, fma(_899, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _895)) + cbModelParam._m0[22u].w;
        float _1834 = fma(_903, cbModelParam._m0[23u].z, fma(_899, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _895)) + cbModelParam._m0[23u].w;
        float _1837 = fma(_841, cbModelParam._m0[21u].z, fma(_840, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _839));
        float _1840 = fma(_841, cbModelParam._m0[22u].z, fma(_840, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _839));
        float _1843 = fma(_841, cbModelParam._m0[23u].z, fma(_840, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _839));
        float _1952;
        if (_1837 > 0.0)
        {
            _1952 = abs((1.0 - _1826) / _1837);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1837 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1826 + 1.0) / _1837);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1952 = frontier_phi_28_24_ladder;
        }
        float _2269;
        if (_1840 > 0.0)
        {
            _2269 = abs((1.0 - _1830) / _1840);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1840 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1830 + 1.0) / _1840);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2269 = frontier_phi_40_35_ladder;
        }
        float _2607;
        if (_1843 > 0.0)
        {
            _2607 = abs((1.0 - _1834) / _1843);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1843 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1834 + 1.0) / _1843);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2607 = frontier_phi_50_47_ladder;
        }
        float _2609 = isnan(_2269) ? _1952 : (isnan(_1952) ? _2269 : min(_1952, _2269));
        float _2610 = isnan(_2607) ? _2609 : (isnan(_2609) ? _2607 : min(_2609, _2607));
        float _2614 = (_2610 * _1837) + _1826;
        float _2615 = (_2610 * _1840) + _1830;
        float _2616 = (_2610 * _1843) + _1834;
        float _2617 = _2610 * 9.9999997473787516355514526367188e-05;
        float _2618 = (-1.0) - _2617;
        float _2620 = _2617 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2616 > _2620) || ((_2616 < _2618) || ((_2615 > _2620) || ((_2615 < _2618) || ((_2614 < _2618) || (_2614 > _2620))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2738 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2616, cbModelParam._m0[17u].z, fma(_2615, cbModelParam._m0[17u].y, _2614 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2616, cbModelParam._m0[18u].z, fma(_2615, cbModelParam._m0[18u].y, _2614 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2616, cbModelParam._m0[19u].z, fma(_2615, cbModelParam._m0[19u].y, _2614 * cbModelParam._m0[19u].x))), _1772);
            frontier_phi_25_50_ladder = _2738.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2738.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2738.x * cbModelParam._m0[1u].z;
        }
        _1862 = frontier_phi_25_50_ladder_2;
        _1864 = frontier_phi_25_50_ladder_1;
        _1866 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1846 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_839, _840, _841), _1772);
        _1862 = _1846.x * cbModelParam._m0[1u].z;
        _1864 = _1846.y * cbModelParam._m0[1u].z;
        _1866 = _1846.z * cbModelParam._m0[1u].z;
    }
    float _1879 = (((_866 * _815) + _867) * _831) * ((cbModelParam._m0[1u].w * (_1862 - _1763)) + _1763);
    float _1881 = (((_866 * _817) + _867) * _831) * ((cbModelParam._m0[1u].w * (_1864 - _1765)) + _1765);
    float _1883 = (((_866 * _818) + _867) * _831) * ((cbModelParam._m0[1u].w * (_1866 - _1767)) + _1767);
    float _1886 = fma(_1883, cbSceneParam._m0[89u].z, fma(_1881, cbSceneParam._m0[89u].y, _1879 * cbSceneParam._m0[89u].x));
    float _1889 = fma(_1883, cbSceneParam._m0[90u].z, fma(_1881, cbSceneParam._m0[90u].y, _1879 * cbSceneParam._m0[90u].x));
    float _1892 = fma(_1883, cbSceneParam._m0[91u].z, fma(_1881, cbSceneParam._m0[91u].y, _1879 * cbSceneParam._m0[91u].x));
    float _1926 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1930 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1934 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1938 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1939 = _1926 / _1938;
    float _1940 = _1930 / _1938;
    float _1941 = _1934 / _1938;
    float _2088;
    float _2089;
    float _2090;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1968 = ((uint(_1941 > cbSceneParam._m0[59u].y) + uint(_1941 > cbSceneParam._m0[59u].x)) + uint(_1941 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1969 = _1968 + 43u;
        uint _1977 = _1968 + 44u;
        uint _1985 = _1968 + 45u;
        uint _1993 = _1968 + 46u;
        float _2004 = fma(_1938, cbSceneParam._m0[_1969].w, fma(_1934, cbSceneParam._m0[_1969].z, fma(_1930, cbSceneParam._m0[_1969].y, _1926 * cbSceneParam._m0[_1969].x)));
        float _2008 = fma(_1938, cbSceneParam._m0[_1977].w, fma(_1934, cbSceneParam._m0[_1977].z, fma(_1930, cbSceneParam._m0[_1977].y, _1926 * cbSceneParam._m0[_1977].x)));
        float _2016 = fma(_1938, cbSceneParam._m0[_1993].w, fma(_1934, cbSceneParam._m0[_1993].z, fma(_1930, cbSceneParam._m0[_1993].y, _1926 * cbSceneParam._m0[_1993].x)));
        float _2021 = cbSceneParam._m0[33u].z * _2016;
        float _2023 = cbSceneParam._m0[33u].w * _2016;
        float _2026 = fma(_1938, cbSceneParam._m0[_1985].w, fma(_1934, cbSceneParam._m0[_1985].z, fma(_1930, cbSceneParam._m0[_1985].y, _1926 * cbSceneParam._m0[_1985].x))) / _2016;
        float _2074 = (cbSceneParam._m0[33u].x - sqrt(((_1940 * _1940) + (_1939 * _1939)) + (_1941 * _1941))) * cbSceneParam._m0[33u].y;
        float _4445 = isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0));
        float _2081 = (isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2021 + _2004) / _2016, (_2023 + _2008) / _2016), _2026), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2023 + _2004) / _2016, (_2008 - _2021) / _2016), _2026), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2004 - _2021) / _2016, (_2008 - _2023) / _2016), _2026), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2004 - _2023) / _2016, (_2021 + _2008) / _2016), _2026), 0.0)).x), vec4(0.25)));
        _2088 = 1.0 - (_2081 * cbSceneParam._m0[34u].x);
        _2089 = 1.0 - (_2081 * cbSceneParam._m0[34u].y);
        _2090 = 1.0 - (_2081 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2088 = 1.0;
        _2089 = 1.0;
        _2090 = 1.0;
    }
    float _2154;
    float _2156;
    float _2158;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2142 = fma(_1938, cbSceneParam._m0[63u].w, fma(_1934, cbSceneParam._m0[63u].z, fma(_1930, cbSceneParam._m0[63u].y, _1926 * cbSceneParam._m0[63u].x)));
        float _2143 = fma(_1938, cbSceneParam._m0[60u].w, fma(_1934, cbSceneParam._m0[60u].z, fma(_1930, cbSceneParam._m0[60u].y, _1926 * cbSceneParam._m0[60u].x))) / _2142;
        float _2144 = fma(_1938, cbSceneParam._m0[61u].w, fma(_1934, cbSceneParam._m0[61u].z, fma(_1930, cbSceneParam._m0[61u].y, _1926 * cbSceneParam._m0[61u].x))) / _2142;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2143 >= cbSceneParam._m0[64u].x) && (_2144 >= cbSceneParam._m0[64u].y)) && (_2143 <= cbSceneParam._m0[64u].z)) && (_2144 <= cbSceneParam._m0[64u].w))
        {
            float _2282 = fma(_1938, cbSceneParam._m0[62u].w, fma(_1934, cbSceneParam._m0[62u].z, fma(_1930, cbSceneParam._m0[62u].y, _1926 * cbSceneParam._m0[62u].x))) / _2142;
            float _2286 = isnan(cbSceneParam._m0[41u].w) ? _2282 : (isnan(_2282) ? cbSceneParam._m0[41u].w : max(_2282, cbSceneParam._m0[41u].w));
            float _2329 = (cbSceneParam._m0[33u].x - sqrt(((_1940 * _1940) + (_1939 * _1939)) + (_1941 * _1941))) * cbSceneParam._m0[33u].y;
            float _4461 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
            float _2336 = (isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2143, cbSceneParam._m0[33u].w + _2144), _2286), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2143, _2144 - cbSceneParam._m0[33u].z), _2286), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2143 - cbSceneParam._m0[33u].z, _2144 - cbSceneParam._m0[33u].w), _2286), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2143 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2144), _2286), 0.0)).x), vec4(0.25)));
            float _2340 = 1.0 - (_2336 * cbSceneParam._m0[34u].x);
            float _2341 = 1.0 - (_2336 * cbSceneParam._m0[34u].y);
            float _2342 = 1.0 - (_2336 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2342) ? _2090 : (isnan(_2090) ? _2342 : min(_2090, _2342));
            frontier_phi_37_36_ladder_1 = isnan(_2341) ? _2089 : (isnan(_2089) ? _2341 : min(_2089, _2341));
            frontier_phi_37_36_ladder_2 = isnan(_2340) ? _2088 : (isnan(_2088) ? _2340 : min(_2088, _2340));
        }
        else
        {
            frontier_phi_37_36_ladder = _2090;
            frontier_phi_37_36_ladder_1 = _2089;
            frontier_phi_37_36_ladder_2 = _2088;
        }
        _2154 = frontier_phi_37_36_ladder_2;
        _2156 = frontier_phi_37_36_ladder_1;
        _2158 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2154 = _2088;
        _2156 = _2089;
        _2158 = _2090;
    }
    uvec4 _2163 = floatBitsToUint(cbInstanceData._m0[_240 + 5u]);
    uint _2165 = _2163.x * 14u;
    uint _2166 = _2165 + 13u;
    float _2173 = _831 + (-1.0);
    float _2178 = (cbLight._m0[_2166].x * _2173) + 1.0;
    float _2179 = (cbLight._m0[_2166].y * _2173) + 1.0;
    float _2180 = (cbLight._m0[_2166].z * _2173) + 1.0;
    float _2181 = (cbLight._m0[_2166].w * _2173) + 1.0;
    uint _2182 = _2165 + 5u;
    float _2188 = isnan(1.0) ? _2179 : (isnan(_2179) ? 1.0 : min(_2179, 1.0));
    uint _2192 = _2165 + 4u;
    float _2201 = isnan(1.0) ? _2178 : (isnan(_2178) ? 1.0 : min(_2178, 1.0));
    uint _2205 = _2165 | 1u;
    float _2216 = dot(vec3(cbLight._m0[_2165].xyz), vec3(_653, _654, _655));
    float _2219 = dot(vec3(cbLight._m0[_2205].xyz), vec3(_653, _654, _655));
    float _4497 = isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0));
    float _4508 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
    float _2224 = (isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0))) * 0.3183098733425140380859375;
    float _2226 = (isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0))) * 0.3183098733425140380859375;
    float _2233 = ((cbLight._m0[_2182].x * _2188) * _2226) + (((cbLight._m0[_2192].x * _2154) * _2201) * _2224);
    float _2234 = ((_2188 * cbLight._m0[_2182].y) * _2226) + (((cbLight._m0[_2192].y * _2156) * _2201) * _2224);
    float _2235 = ((_2188 * cbLight._m0[_2182].z) * _2226) + (((cbLight._m0[_2192].z * _2158) * _2201) * _2224);
    uvec4 _2239 = floatBitsToUint(cbLight._m0[_2165 + 12u]);
    bool _2241 = _2239.x == 0u;
    float _2343;
    float _2345;
    float _2347;
    if (_2241)
    {
        _2343 = _2233;
        _2345 = _2234;
        _2347 = _2235;
    }
    else
    {
        uint _2351 = _2165 + 6u;
        float _2367 = (dot(vec3(cbLight._m0[_2165 + 2u].xyz), vec3(_653, _654, _655)) * 0.5) + 0.5;
        float _2368 = _2367 * _2367;
        float _4519 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
        float _2369 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
        float _2370 = isnan(1.0) ? _2180 : (isnan(_2180) ? 1.0 : min(_2180, 1.0));
        _2343 = (((cbLight._m0[_2351].x * 0.3183098733425140380859375) * _2369) * _2370) + _2233;
        _2345 = (((cbLight._m0[_2351].y * 0.3183098733425140380859375) * _2369) * _2370) + _2234;
        _2347 = (((cbLight._m0[_2351].z * 0.3183098733425140380859375) * _2369) * _2370) + _2235;
    }
    bool _2350 = _2239.y == 0u;
    float _2405;
    float _2407;
    float _2409;
    if (_2350)
    {
        _2405 = _2343;
        _2407 = _2345;
        _2409 = _2347;
    }
    else
    {
        uint _2578 = _2165 + 7u;
        float _2594 = (dot(vec3(cbLight._m0[_2165 + 3u].xyz), vec3(_653, _654, _655)) * 0.5) + 0.5;
        float _2595 = _2594 * _2594;
        float _4535 = isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : max(_2595, 0.0));
        float _2596 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
        float _2597 = isnan(1.0) ? _2181 : (isnan(_2181) ? 1.0 : min(_2181, 1.0));
        _2405 = (((cbLight._m0[_2578].x * 0.3183098733425140380859375) * _2596) * _2597) + _2343;
        _2407 = (((cbLight._m0[_2578].y * 0.3183098733425140380859375) * _2596) * _2597) + _2345;
        _2409 = (((cbLight._m0[_2578].z * 0.3183098733425140380859375) * _2596) * _2597) + _2347;
    }
    uint _2412 = _2165 + 8u;
    float _2425 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2165].w)) * _656) * 0.949999988079071044921875);
    float _2426 = _2425 * _2425;
    float _2427 = cbLight._m0[_2165].x + _733;
    float _2428 = cbLight._m0[_2165].y + _734;
    float _2429 = cbLight._m0[_2165].z + _735;
    float _2433 = inversesqrt(dot(vec3(_2427, _2428, _2429), vec3(_2427, _2428, _2429)));
    float _2434 = _2433 * _2427;
    float _2435 = _2433 * _2428;
    float _2436 = _2433 * _2429;
    float _2437 = dot(vec3(_653, _654, _655), vec3(cbLight._m0[_2165].xyz));
    float _4551 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
    float _2440 = isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0));
    float _4562 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
    float _2441 = isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0));
    float _2442 = dot(vec3(_653, _654, _655), vec3(_2434, _2435, _2436));
    float _4573 = isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0));
    float _2445 = isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0));
    float _2446 = dot(vec3(cbLight._m0[_2165].xyz), vec3(_2434, _2435, _2436));
    float _4584 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
    float _2450 = _2426 * _2426;
    float _2454 = ((_2445 * _2445) * (_2450 + (-1.0))) + 1.0;
    float _2462 = exp2(log2(1.0 - (isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0)))) * 5.0);
    float _2463 = 0.959999978542327880859375 - _812;
    float _2465 = 0.959999978542327880859375 - _813;
    float _2466 = 0.959999978542327880859375 - _814;
    float _2473 = 1.0 - _2426;
    float _2484 = (0.5 / (((_2441 * ((_2440 * _2473) + _2426)) + 9.9999999392252902907785028219223e-09) + (((_2441 * _2473) + _2426) * _2440))) * _2440;
    float _4595 = isnan(0.0) ? _2484 : (isnan(_2484) ? 0.0 : max(_2484, 0.0));
    float _2486 = (isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0))) * (_2450 / ((_2454 * _2454) * 3.141590118408203125));
    uint _2500 = _2165 + 9u;
    float _2511 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2205].w)) * _656) * 0.949999988079071044921875);
    float _2512 = _2511 * _2511;
    float _2513 = cbLight._m0[_2205].x + _733;
    float _2514 = cbLight._m0[_2205].y + _734;
    float _2515 = cbLight._m0[_2205].z + _735;
    float _2519 = inversesqrt(dot(vec3(_2513, _2514, _2515), vec3(_2513, _2514, _2515)));
    float _2520 = _2519 * _2513;
    float _2521 = _2519 * _2514;
    float _2522 = _2519 * _2515;
    float _2523 = dot(vec3(_653, _654, _655), vec3(cbLight._m0[_2205].xyz));
    float _4606 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
    float _2526 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
    float _2527 = dot(vec3(_653, _654, _655), vec3(_2520, _2521, _2522));
    float _4617 = isnan(0.0) ? _2527 : (isnan(_2527) ? 0.0 : max(_2527, 0.0));
    float _2530 = isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0));
    float _2531 = dot(vec3(cbLight._m0[_2205].xyz), vec3(_2520, _2521, _2522));
    float _4628 = isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0));
    float _2535 = _2512 * _2512;
    float _2539 = ((_2530 * _2530) * (_2535 + (-1.0))) + 1.0;
    float _2546 = exp2(log2(1.0 - (isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0)))) * 5.0);
    float _2553 = 1.0 - _2512;
    float _2563 = (0.5 / (((_2441 * ((_2526 * _2553) + _2512)) + 9.9999999392252902907785028219223e-09) + (((_2441 * _2553) + _2512) * _2526))) * _2526;
    float _4639 = isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0));
    float _2565 = (isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0))) * (_2535 / ((_2539 * _2539) * 3.141590118408203125));
    float _2575 = (((((_2546 * _2463) + _815) * cbLight._m0[_2500].x) * _2565) * _2188) + ((((cbLight._m0[_2412].x * _2154) * ((_2462 * _2463) + _815)) * _2486) * _2201);
    float _2576 = (((((_2546 * _2465) + _817) * cbLight._m0[_2500].y) * _2565) * _2188) + ((((cbLight._m0[_2412].y * _2156) * ((_2462 * _2465) + _817)) * _2486) * _2201);
    float _2577 = (((((_2546 * _2466) + _818) * cbLight._m0[_2500].z) * _2565) * _2188) + ((((cbLight._m0[_2412].z * _2158) * ((_2462 * _2466) + _818)) * _2486) * _2201);
    float _2633;
    float _2635;
    float _2637;
    if (_2241)
    {
        _2633 = _2575;
        _2635 = _2576;
        _2637 = _2577;
    }
    else
    {
        uint _2639 = _2165 + 2u;
        uint _2643 = _2165 + 10u;
        float _2657 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2639].w)) * _656) * 0.949999988079071044921875);
        float _2658 = _2657 * _2657;
        float _2659 = cbLight._m0[_2639].x + _733;
        float _2660 = cbLight._m0[_2639].y + _734;
        float _2661 = cbLight._m0[_2639].z + _735;
        float _2665 = inversesqrt(dot(vec3(_2659, _2660, _2661), vec3(_2659, _2660, _2661)));
        float _2666 = _2665 * _2659;
        float _2667 = _2665 * _2660;
        float _2668 = _2665 * _2661;
        float _2669 = dot(vec3(_653, _654, _655), vec3(cbLight._m0[_2639].xyz));
        float _4650 = isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : max(_2669, 0.0));
        float _2672 = isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0));
        float _2673 = dot(vec3(_653, _654, _655), vec3(_2666, _2667, _2668));
        float _4661 = isnan(0.0) ? _2673 : (isnan(_2673) ? 0.0 : max(_2673, 0.0));
        float _2676 = isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0));
        float _2677 = dot(vec3(cbLight._m0[_2639].xyz), vec3(_2666, _2667, _2668));
        float _4672 = isnan(0.0) ? _2677 : (isnan(_2677) ? 0.0 : max(_2677, 0.0));
        float _2681 = _2658 * _2658;
        float _2685 = ((_2676 * _2676) * (_2681 + (-1.0))) + 1.0;
        float _2692 = exp2(log2(1.0 - (isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0)))) * 5.0);
        float _2699 = 1.0 - _2658;
        float _2709 = (0.5 / (((_2441 * ((_2672 * _2699) + _2658)) + 9.9999999392252902907785028219223e-09) + (((_2441 * _2699) + _2658) * _2672))) * _2672;
        float _4683 = isnan(0.0) ? _2709 : (isnan(_2709) ? 0.0 : max(_2709, 0.0));
        float _2711 = (isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0))) * (_2681 / ((_2685 * _2685) * 3.141590118408203125));
        float _2712 = isnan(1.0) ? _2180 : (isnan(_2180) ? 1.0 : min(_2180, 1.0));
        _2633 = (((((_2692 * _2463) + _815) * cbLight._m0[_2643].x) * _2711) * _2712) + _2575;
        _2635 = (((((_2692 * _2465) + _817) * cbLight._m0[_2643].y) * _2711) * _2712) + _2576;
        _2637 = (((((_2692 * _2466) + _818) * cbLight._m0[_2643].z) * _2711) * _2712) + _2577;
    }
    float _2743;
    float _2745;
    float _2747;
    if (_2350)
    {
        _2743 = _2633;
        _2745 = _2635;
        _2747 = _2637;
    }
    else
    {
        uint _2754 = _2165 + 3u;
        uint _2758 = _2165 + 11u;
        float _2772 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2754].w)) * _656) * 0.949999988079071044921875);
        float _2773 = _2772 * _2772;
        float _2774 = cbLight._m0[_2754].x + _733;
        float _2775 = cbLight._m0[_2754].y + _734;
        float _2776 = cbLight._m0[_2754].z + _735;
        float _2780 = inversesqrt(dot(vec3(_2774, _2775, _2776), vec3(_2774, _2775, _2776)));
        float _2781 = _2780 * _2774;
        float _2782 = _2780 * _2775;
        float _2783 = _2780 * _2776;
        float _2784 = dot(vec3(_653, _654, _655), vec3(cbLight._m0[_2754].xyz));
        float _4699 = isnan(0.0) ? _2784 : (isnan(_2784) ? 0.0 : max(_2784, 0.0));
        float _2787 = isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0));
        float _2788 = dot(vec3(_653, _654, _655), vec3(_2781, _2782, _2783));
        float _4710 = isnan(0.0) ? _2788 : (isnan(_2788) ? 0.0 : max(_2788, 0.0));
        float _2791 = isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0));
        float _2792 = dot(vec3(cbLight._m0[_2754].xyz), vec3(_2781, _2782, _2783));
        float _4721 = isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : max(_2792, 0.0));
        float _2796 = _2773 * _2773;
        float _2800 = ((_2791 * _2791) * (_2796 + (-1.0))) + 1.0;
        float _2807 = exp2(log2(1.0 - (isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0)))) * 5.0);
        float _2814 = 1.0 - _2773;
        float _2824 = (0.5 / (((_2441 * ((_2787 * _2814) + _2773)) + 9.9999999392252902907785028219223e-09) + (((_2441 * _2814) + _2773) * _2787))) * _2787;
        float _4732 = isnan(0.0) ? _2824 : (isnan(_2824) ? 0.0 : max(_2824, 0.0));
        float _2826 = (isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0))) * (_2796 / ((_2800 * _2800) * 3.141590118408203125));
        float _2827 = isnan(1.0) ? _2181 : (isnan(_2181) ? 1.0 : min(_2181, 1.0));
        _2743 = (((((_2807 * _2463) + _815) * cbLight._m0[_2758].x) * _2826) * _2827) + _2633;
        _2745 = (((((_2807 * _2465) + _817) * cbLight._m0[_2758].y) * _2826) * _2827) + _2635;
        _2747 = (((((_2807 * _2466) + _818) * cbLight._m0[_2758].z) * _2826) * _2827) + _2637;
    }
    float _2893;
    float _2895;
    float _2897;
    float _2899;
    float _2901;
    float _2903;
    if (_2163.y == 0u)
    {
        uvec4 _2848 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2849 = _2848.x;
        uint _2860 = uint((float(_2848.y) * floor(float(uint(cbSceneParam._m0[85u].y * _754) / _2849))) + floor(float(uint(cbSceneParam._m0[85u].x * _753) / _2849)));
        float _2870 = (log2(_1941 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2871 = isnan(0.0) ? _2870 : (isnan(_2870) ? 0.0 : max(_2870, 0.0));
        uint _2874 = uint(isnan(14.0) ? _2871 : (isnan(_2871) ? 14.0 : min(_2871, 14.0)));
        uvec4 _2879 = texelFetch(g_lightClusterGridBuffer, int(((_2874 << 2u) + (_2860 << 6u)) >> 2u));
        uint _2880 = _2879.x;
        uint _2881 = _2848.z;
        float _2960;
        float _2962;
        float _2964;
        float _2966;
        float _2968;
        float _2970;
        if (((((1u << ((_2881 >> 4u) & 15u)) + 4294967295u) & _2880) == 0u) || ((_2881 & 240u) == 0u))
        {
            _2960 = 0.0;
            _2962 = 0.0;
            _2964 = 0.0;
            _2966 = 0.0;
            _2968 = 0.0;
            _2970 = 0.0;
        }
        else
        {
            float _2961;
            float _2963;
            float _2965;
            float _2967;
            float _2969;
            float _2971;
            float _3113 = 0.0;
            float _3114 = 0.0;
            float _3115 = 0.0;
            float _3116 = 0.0;
            float _3117 = 0.0;
            float _3118 = 0.0;
            uint _3119 = 0u;
            uint _3128;
            bool _3129;
            for (;;)
            {
                _3128 = texelFetch(g_lightClassification, int((((_2874 << 5u) + (_2860 << 9u)) + (_3119 << 2u)) >> 2u)).x;
                _3129 = _3128 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3129)
                {
                    frontier_phi_71_pred = _3118;
                    frontier_phi_71_pred_1 = _3117;
                    frontier_phi_71_pred_2 = _3116;
                    frontier_phi_71_pred_3 = _3115;
                    frontier_phi_71_pred_4 = _3114;
                    frontier_phi_71_pred_5 = _3113;
                }
                else
                {
                    float _3258;
                    float _3259;
                    float _3260;
                    float _3261;
                    float _3262;
                    float _3263;
                    uint _3264;
                    _3258 = _3113;
                    _3259 = _3114;
                    _3260 = _3115;
                    _3261 = _3116;
                    _3262 = _3117;
                    _3263 = _3118;
                    _3264 = _3128;
                    float _3185;
                    float _3186;
                    float _3187;
                    float _3188;
                    float _3189;
                    float _3190;
                    for (;;)
                    {
                        uint _3268 = uint(findLSB(_3264)) + (_3119 << 5u);
                        uint _3265 = (_3264 + 4294967295u) & _3264;
                        uint _3270 = _3268 * 48u;
                        vec4 _3284 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3270)).x, texelFetch(g_PointLightRenderingBuffer, int(_3270 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3270 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3270 + 3u)).x));
                        uint _3290 = (_3268 * 48u) + 4u;
                        vec4 _3303 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3290)).x, texelFetch(g_PointLightRenderingBuffer, int(_3290 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3290 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3290 + 3u)).x));
                        uint _3309 = (_3268 * 48u) + 8u;
                        vec3 _3320 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3309)).x, texelFetch(g_PointLightRenderingBuffer, int(_3309 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3309 + 2u)).x));
                        float _3324 = _3284.x - _1939;
                        float _3325 = _3284.y - _1940;
                        float _3326 = _3284.z - _1941;
                        float _3327 = dot(vec3(_3324, _3325, _3326), vec3(_3324, _3325, _3326));
                        float _3330 = inversesqrt(_3327);
                        float _3331 = _3330 * _3324;
                        float _3332 = _3330 * _3325;
                        float _3333 = _3330 * _3326;
                        float _3334 = dot(vec3(_772, _775, _778), vec3(_3331, _3332, _3333));
                        float _3339 = 1.0 - (_3327 * _3284.w);
                        float _4758 = isnan(0.0) ? _3339 : (isnan(_3339) ? 0.0 : max(_3339, 0.0));
                        float _3340 = isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0));
                        float _3341 = sqrt(_3327) * _3303.w;
                        float _3344 = 1.39999997615814208984375 / (_3341 + 1.39999997615814208984375);
                        float _3345 = _3344 * _3344;
                        float _3348 = ((1.0 - _3345) * _3334) + _3345;
                        float _3351 = _3341 * _3341;
                        float _3355 = ((isnan(0.0) ? _3348 : (isnan(_3348) ? 0.0 : max(_3348, 0.0))) * _3340) / ((_3351 * 0.699999988079071044921875) + 1.0);
                        float _3359 = (-0.0) - _1939;
                        float _3360 = (-0.0) - _1940;
                        float _3361 = (-0.0) - _1941;
                        float _3365 = inversesqrt(dot(vec3(_3359, _3360, _3361), vec3(_3359, _3360, _3361)));
                        float _3366 = _3365 * _3359;
                        float _3367 = _3365 * _3360;
                        float _3368 = _3365 * _3361;
                        float _3375 = exp2(log2(1.0 / ((_3351 * 3.5) + 5.0)) * 0.25);
                        float _3376 = 1.0 - _847;
                        float _3383 = sqrt(1.0 - ((1.0 - (_3376 * _3376)) * (1.0 - (_3375 * _3375))));
                        float _3384 = _3383 * _3383;
                        float _3385 = _3384 * _3384;
                        float _3386 = _3366 + _3331;
                        float _3387 = _3367 + _3332;
                        float _3388 = _3368 + _3333;
                        float _3392 = inversesqrt(dot(vec3(_3386, _3387, _3388), vec3(_3386, _3387, _3388)));
                        float _3396 = dot(vec3(_772, _775, _778), vec3(_3366, _3367, _3368));
                        float _4774 = isnan(0.0) ? _3396 : (isnan(_3396) ? 0.0 : max(_3396, 0.0));
                        float _3399 = isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0));
                        float _3400 = dot(vec3(_772, _775, _778), vec3(_3392 * _3386, _3392 * _3387, _3392 * _3388));
                        float _4785 = isnan(0.0) ? _3400 : (isnan(_3400) ? 0.0 : max(_3400, 0.0));
                        float _3403 = isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0));
                        float _3407 = ((_3403 * _3403) * (_3385 + (-1.0))) + 1.0;
                        float _3408 = _3344 * _3384;
                        float _3409 = _3408 * _3408;
                        float _3412 = ((1.0 - _3409) * _3334) + _3409;
                        float _4796 = isnan(0.0) ? _3412 : (isnan(_3412) ? 0.0 : max(_3412, 0.0));
                        float _3413 = isnan(1.0) ? _4796 : (isnan(_4796) ? 1.0 : min(_4796, 1.0));
                        float _3414 = 1.0 - _3384;
                        float _3424 = (0.5 / (((_3413 * ((_3399 * _3414) + _3384)) + 9.9999999392252902907785028219223e-09) + (((_3413 * _3414) + _3384) * _3399))) * _3413;
                        float _4807 = isnan(0.0) ? _3424 : (isnan(_3424) ? 0.0 : max(_3424, 0.0));
                        float _3435 = (((_3385 * 3.1415927410125732421875) * (isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0)))) / ((_3407 * _3407) * ((_3351 * 2.1991131305694580078125) + 3.141590118408203125))) * _3340;
                        _3188 = (_3355 * _3303.x) + _3261;
                        _3189 = (_3355 * _3303.y) + _3262;
                        _3190 = (_3355 * _3303.z) + _3263;
                        _3185 = (_3435 * _3320.x) + _3258;
                        _3186 = (_3435 * _3320.y) + _3259;
                        _3187 = (_3435 * _3320.z) + _3260;
                        if (_3265 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3258 = _3185;
                            _3259 = _3186;
                            _3260 = _3187;
                            _3261 = _3188;
                            _3262 = _3189;
                            _3263 = _3190;
                            _3264 = _3265;
                        }
                    }
                    frontier_phi_71_pred = _3190;
                    frontier_phi_71_pred_1 = _3189;
                    frontier_phi_71_pred_2 = _3188;
                    frontier_phi_71_pred_3 = _3187;
                    frontier_phi_71_pred_4 = _3186;
                    frontier_phi_71_pred_5 = _3185;
                }
                _2971 = frontier_phi_71_pred;
                _2969 = frontier_phi_71_pred_1;
                _2967 = frontier_phi_71_pred_2;
                _2965 = frontier_phi_71_pred_3;
                _2963 = frontier_phi_71_pred_4;
                _2961 = frontier_phi_71_pred_5;
                uint _3120 = _3119 + 1u;
                if (_3120 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3113 = _2961;
                    _3114 = _2963;
                    _3115 = _2965;
                    _3116 = _2967;
                    _3117 = _2969;
                    _3118 = _2971;
                    _3119 = _3120;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2960 = _2961;
            _2962 = _2963;
            _2964 = _2965;
            _2966 = _2967;
            _2968 = _2969;
            _2970 = _2971;
        }
        uvec4 _2974 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2975 = _2974.z;
        uint _2977 = (_2975 >> 8u) & 15u;
        float _3081;
        float _3083;
        float _3085;
        float _3087;
        float _3089;
        float _3091;
        if (((4294967295u << _2977) & _2880) == 0u)
        {
            _3081 = _2960;
            _3083 = _2962;
            _3085 = _2964;
            _3087 = _2966;
            _3089 = _2968;
            _3091 = _2970;
        }
        else
        {
            float _3106 = inversesqrt(dot(vec3(_1939, _1940, _1941), vec3(_1939, _1940, _1941)));
            float _3107 = _3106 * _1939;
            float _3108 = _3106 * _1940;
            float _3109 = _3106 * _1941;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2977 < ((_2975 >> 12u) & 15u))
            {
                float _3082;
                float _3084;
                float _3086;
                float _3088;
                float _3090;
                float _3092;
                float _3241 = _2960;
                float _3242 = _2962;
                float _3243 = _2964;
                float _3244 = _2966;
                float _3245 = _2968;
                float _3246 = _2970;
                uint _3247 = _2977;
                uint _3256;
                bool _3257;
                for (;;)
                {
                    _3256 = texelFetch(g_lightClassification, int((((_2874 << 5u) + (_2860 << 9u)) + (_3247 << 2u)) >> 2u)).x;
                    _3257 = _3256 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3257)
                    {
                        frontier_phi_82_pred = _3246;
                        frontier_phi_82_pred_1 = _3245;
                        frontier_phi_82_pred_2 = _3244;
                        frontier_phi_82_pred_3 = _3243;
                        frontier_phi_82_pred_4 = _3242;
                        frontier_phi_82_pred_5 = _3241;
                    }
                    else
                    {
                        float _3449;
                        float _3450;
                        float _3451;
                        float _3452;
                        float _3453;
                        float _3454;
                        float _3743;
                        float _3744;
                        float _3745;
                        float _3746;
                        float _3747;
                        float _3748;
                        float _3462 = _3241;
                        float _3463 = _3242;
                        float _3464 = _3243;
                        float _3465 = _3244;
                        float _3466 = _3245;
                        float _3467 = _3246;
                        uint _3468 = _3256;
                        uint _3469;
                        vec4 _3494;
                        float _3495;
                        vec4 _3510;
                        vec3 _3522;
                        vec4 _3537;
                        vec4 _3553;
                        float _3599;
                        bool _3600;
                        for (;;)
                        {
                            uint _3479 = ((_3247 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3468));
                            _3469 = (_3468 + 4294967295u) & _3468;
                            uint _3481 = _3479 * 40u;
                            _3494 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3481)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 3u)).x));
                            _3495 = _3494.w;
                            uint _3497 = (_3479 * 40u) + 4u;
                            _3510 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3497)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3497 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3497 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3497 + 3u)).x));
                            uint _3512 = (_3479 * 40u) + 8u;
                            _3522 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3512)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3512 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3512 + 2u)).x));
                            uint _3524 = (_3479 * 40u) + 16u;
                            _3537 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3524)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3524 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3524 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3524 + 3u)).x));
                            uint _3540 = (_3479 * 40u) + 20u;
                            _3553 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3540)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3540 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3540 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3540 + 3u)).x));
                            uint _3555 = (_3479 * 40u) + 24u;
                            vec4 _3568 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3555)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3555 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3555 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3555 + 3u)).x));
                            uint _3574 = (_3479 * 40u) + 28u;
                            vec4 _3587 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3574)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3574 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3574 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3574 + 3u)).x));
                            _3599 = fma(_1941, _3587.z, fma(_1940, _3587.y, _3587.x * _1939)) + _3587.w;
                            _3600 = !((fma(_1941, _3568.z, fma(_1940, _3568.y, _3568.x * _1939)) + _3568.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3600)
                            {
                                float _3627 = _3494.x - _1939;
                                float _3628 = _3494.y - _1940;
                                float _3629 = _3494.z - _1941;
                                float _3630 = dot(vec3(_3627, _3628, _3629), vec3(_3627, _3628, _3629));
                                float _3633 = inversesqrt(_3630);
                                float _3634 = _3633 * _3627;
                                float _3635 = _3633 * _3628;
                                float _3636 = _3633 * _3629;
                                float _3640 = 1.0 - (_3630 / (_3495 * _3495));
                                float _4818 = isnan(0.0) ? _3640 : (isnan(_3640) ? 0.0 : max(_3640, 0.0));
                                float _3641 = isnan(1.0) ? _4818 : (isnan(_4818) ? 1.0 : min(_4818, 1.0));
                                float _3645 = sqrt(_3630) * _3510.w;
                                float _3647 = 1.39999997615814208984375 / (_3645 + 1.39999997615814208984375);
                                float _3648 = _3647 * _3647;
                                float _3651 = ((1.0 - _3648) * dot(vec3(_3634, _3635, _3636), vec3(_772, _775, _778))) + _3648;
                                float _3654 = _3645 * _3645;
                                float _3658 = (fma(_1941, _3537.z, fma(_1940, _3537.y, _3537.x * _1939)) + _3537.w) / _3599;
                                float _3659 = (fma(_1941, _3553.z, fma(_1940, _3553.y, _3553.x * _1939)) + _3553.w) / _3599;
                                float _3663 = 1.0 - dot(vec2(_3658, _3659), vec2(_3658, _3659));
                                float _4834 = isnan(0.0) ? _3663 : (isnan(_3663) ? 0.0 : max(_3663, 0.0));
                                float _3664 = isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0));
                                float _3665 = _3664 * (((isnan(0.0) ? _3651 : (isnan(_3651) ? 0.0 : max(_3651, 0.0))) * _3641) / ((_3654 * 0.699999988079071044921875) + 1.0));
                                float _3677 = exp2(log2(1.0 / ((_3654 * 3.5) + 5.0)) * 0.25);
                                float _3678 = 1.0 - _847;
                                float _3685 = sqrt(1.0 - ((1.0 - (_3678 * _3678)) * (1.0 - (_3677 * _3677))));
                                float _3686 = _3685 * _3685;
                                float _3687 = _3686 * _3686;
                                float _3688 = _3634 - _3107;
                                float _3689 = _3635 - _3108;
                                float _3690 = _3636 - _3109;
                                float _3694 = inversesqrt(dot(vec3(_3688, _3689, _3690), vec3(_3688, _3689, _3690)));
                                float _3698 = dot(vec3(_772, _775, _778), vec3((-0.0) - _3107, (-0.0) - _3108, (-0.0) - _3109));
                                float _4845 = isnan(0.0) ? _3698 : (isnan(_3698) ? 0.0 : max(_3698, 0.0));
                                float _3701 = isnan(1.0) ? _4845 : (isnan(_4845) ? 1.0 : min(_4845, 1.0));
                                float _3702 = dot(vec3(_772, _775, _778), vec3(_3694 * _3688, _3694 * _3689, _3694 * _3690));
                                float _4856 = isnan(0.0) ? _3702 : (isnan(_3702) ? 0.0 : max(_3702, 0.0));
                                float _3705 = isnan(1.0) ? _4856 : (isnan(_4856) ? 1.0 : min(_4856, 1.0));
                                float _3709 = ((_3705 * _3705) * (_3687 + (-1.0))) + 1.0;
                                float _3710 = _3647 * _3686;
                                float _3711 = _3710 * _3710;
                                float _3717 = ((1.0 - _3711) * dot(vec3(_772, _775, _778), vec3(_3634, _3635, _3636))) + _3711;
                                float _4867 = isnan(0.0) ? _3717 : (isnan(_3717) ? 0.0 : max(_3717, 0.0));
                                float _3718 = isnan(1.0) ? _4867 : (isnan(_4867) ? 1.0 : min(_4867, 1.0));
                                float _3719 = 1.0 - _3686;
                                float _3729 = (0.5 / (((_3718 * ((_3701 * _3719) + _3686)) + 9.9999999392252902907785028219223e-09) + (((_3718 * _3719) + _3686) * _3701))) * _3718;
                                float _4878 = isnan(0.0) ? _3729 : (isnan(_3729) ? 0.0 : max(_3729, 0.0));
                                float _3739 = (_3664 * _3641) * (((_3687 * 3.1415927410125732421875) * (isnan(1.0) ? _4878 : (isnan(_4878) ? 1.0 : min(_4878, 1.0)))) / ((_3709 * _3709) * ((_3654 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3665 * _3510.z;
                                frontier_phi_88_pred_1 = _3665 * _3510.y;
                                frontier_phi_88_pred_2 = _3665 * _3510.x;
                                frontier_phi_88_pred_3 = _3739 * _3522.z;
                                frontier_phi_88_pred_4 = _3739 * _3522.y;
                                frontier_phi_88_pred_5 = _3739 * _3522.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3748 = frontier_phi_88_pred;
                            _3747 = frontier_phi_88_pred_1;
                            _3746 = frontier_phi_88_pred_2;
                            _3745 = frontier_phi_88_pred_3;
                            _3744 = frontier_phi_88_pred_4;
                            _3743 = frontier_phi_88_pred_5;
                            _3452 = _3746 + _3465;
                            _3453 = _3747 + _3466;
                            _3454 = _3748 + _3467;
                            _3449 = _3743 + _3462;
                            _3450 = _3744 + _3463;
                            _3451 = _3745 + _3464;
                            if (_3469 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3462 = _3449;
                                _3463 = _3450;
                                _3464 = _3451;
                                _3465 = _3452;
                                _3466 = _3453;
                                _3467 = _3454;
                                _3468 = _3469;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3454;
                        frontier_phi_82_pred_1 = _3453;
                        frontier_phi_82_pred_2 = _3452;
                        frontier_phi_82_pred_3 = _3451;
                        frontier_phi_82_pred_4 = _3450;
                        frontier_phi_82_pred_5 = _3449;
                    }
                    _3092 = frontier_phi_82_pred;
                    _3090 = frontier_phi_82_pred_1;
                    _3088 = frontier_phi_82_pred_2;
                    _3086 = frontier_phi_82_pred_3;
                    _3084 = frontier_phi_82_pred_4;
                    _3082 = frontier_phi_82_pred_5;
                    uint _3248 = _3247 + 1u;
                    if (_3248 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3241 = _3082;
                        _3242 = _3084;
                        _3243 = _3086;
                        _3244 = _3088;
                        _3245 = _3090;
                        _3246 = _3092;
                        _3247 = _3248;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3088;
                frontier_phi_63_64_ladder_1 = _3092;
                frontier_phi_63_64_ladder_2 = _3090;
                frontier_phi_63_64_ladder_3 = _3086;
                frontier_phi_63_64_ladder_4 = _3084;
                frontier_phi_63_64_ladder_5 = _3082;
            }
            else
            {
                frontier_phi_63_64_ladder = _2966;
                frontier_phi_63_64_ladder_1 = _2970;
                frontier_phi_63_64_ladder_2 = _2968;
                frontier_phi_63_64_ladder_3 = _2964;
                frontier_phi_63_64_ladder_4 = _2962;
                frontier_phi_63_64_ladder_5 = _2960;
            }
            _3081 = frontier_phi_63_64_ladder_5;
            _3083 = frontier_phi_63_64_ladder_4;
            _3085 = frontier_phi_63_64_ladder_3;
            _3087 = frontier_phi_63_64_ladder;
            _3089 = frontier_phi_63_64_ladder_2;
            _3091 = frontier_phi_63_64_ladder_1;
        }
        float _3096 = isnan(1.0) ? _831 : (isnan(_831) ? 1.0 : min(_831, 1.0));
        _2893 = (_3096 * _3087) + _2405;
        _2895 = (_3096 * _3089) + _2407;
        _2897 = (_3096 * _3091) + _2409;
        _2899 = ((_3081 * _815) * _3096) + _2743;
        _2901 = ((_3083 * _817) * _3096) + _2745;
        _2903 = ((_3085 * _818) * _3096) + _2747;
    }
    else
    {
        _2893 = _2405;
        _2895 = _2407;
        _2897 = _2409;
        _2899 = _2743;
        _2901 = _2745;
        _2903 = _2747;
    }
    float _4894 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
    float _4905 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
    float _4916 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
    float _2920 = ((isnan(1.0) ? _4894 : (isnan(_4894) ? 1.0 : min(_4894, 1.0))) * (_2893 + ((isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0))) * _831))) + ((_2899 + ((isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0))) * _1671)) * cbPerFrame._m0[3u].x);
    float _2921 = ((isnan(1.0) ? _4905 : (isnan(_4905) ? 1.0 : min(_4905, 1.0))) * (_2895 + ((isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0))) * _831))) + ((_2901 + ((isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0))) * _1671)) * cbPerFrame._m0[3u].x);
    float _2922 = ((isnan(1.0) ? _4916 : (isnan(_4916) ? 1.0 : min(_4916, 1.0))) * (_2897 + ((isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0))) * _831))) + ((_2903 + ((isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0))) * _1671)) * cbPerFrame._m0[3u].x);
    uint _2923 = _240 + 6u;
    float _2931 = _753 / cbSceneParam._m0[86u].x;
    float _2932 = _754 / cbSceneParam._m0[86u].y;
    vec4 _2946 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2931, _2932, (log2((isnan(cbSceneParam._m0[77u].w) ? _675 : (isnan(_675) ? cbSceneParam._m0[77u].w : min(_675, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2948 = _2946.x;
    float _2949 = _2946.y;
    float _2950 = _2946.z;
    float _2951 = _2946.w;
    float _3023;
    float _3025;
    float _3027;
    float _3029;
    if (_675 > cbSceneParam._m0[78u].w)
    {
        float _2985 = isnan(_675) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _675 : min(cbSceneParam._m0[80u].w, _675));
        float _2986 = _2985 / _675;
        float _2997 = _2986 * _726;
        float _2998 = _727 * _2986;
        float _2999 = (-0.0) - _2998;
        float _3001 = _2986 * _728;
        float _3003 = (cbSceneParam._m0[77u].w * _2999) / _2985;
        float _3004 = _3003 + cbSceneParam._m0[79u].w;
        float _3005 = cbSceneParam._m0[79u].w - _2998;
        float _3011 = sqrt(((_2997 * _2997) + (_2998 * _2998)) + (_3001 * _3001));
        float _3014 = (1.0 - (cbSceneParam._m0[77u].w / _2985)) * _3011;
        float _3019 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3021 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3198;
        if (abs((_2999 - _3003) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3198 = ((((_3004 > 0.0) ? exp2(_3019 * _3004) : (2.0 - exp2(_3021 * _3004))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3014;
        }
        else
        {
            float _3142 = 1.0 / cbSceneParam._m0[80u].x;
            float _3143 = isnan(_3005) ? _3004 : (isnan(_3004) ? _3005 : max(_3004, _3005));
            float _3144 = isnan(_3005) ? _3004 : (isnan(_3004) ? _3005 : min(_3004, _3005));
            float _3153 = isnan(0.0) ? _3143 : (isnan(_3143) ? 0.0 : min(_3143, 0.0));
            float _3154 = isnan(0.0) ? _3144 : (isnan(_3144) ? 0.0 : min(_3144, 0.0));
            _3198 = ((abs(_3011 / _2999) * cbSceneParam._m0[80u].y) * ((((_3153 - _3154) * 2.0) - ((exp2(_3019 * (isnan(0.0) ? _3143 : (isnan(_3143) ? 0.0 : max(_3143, 0.0)))) - exp2(_3019 * (isnan(0.0) ? _3144 : (isnan(_3144) ? 0.0 : max(_3144, 0.0))))) * _3142)) - ((exp2(_3021 * _3153) - exp2(_3021 * _3154)) * _3142))) + (_3014 * cbSceneParam._m0[80u].z);
        }
        vec4 _3200 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2931, _2932, 1.0), 0.0);
        float _3209 = exp2((_3198 * (-1.44269502162933349609375)) * (1.0 - _3200.w));
        float _3210 = log2(_3209);
        float _3226 = log2(_2951);
        _3023 = (exp2(_3226 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3210 * cbSceneParam._m0[78u].x)) * _3200.x) / cbSceneParam._m0[78u].x)) + _2948;
        _3025 = (exp2(_3226 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3210 * cbSceneParam._m0[78u].y)) * _3200.y) / cbSceneParam._m0[78u].y)) + _2949;
        _3027 = (exp2(_3226 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3210 * cbSceneParam._m0[78u].z)) * _3200.z) / cbSceneParam._m0[78u].z)) + _2950;
        _3029 = _3209 * _2951;
    }
    else
    {
        _3023 = _2948;
        _3025 = _2949;
        _3027 = _2950;
        _3029 = _2951;
    }
    bool _3236;
    vec4 _3039;
    vec4 _3061;
    float _3063;
    float _3067;
    float _3068;
    float _3069;
    float _3070;
    bool _3080;
    for (;;)
    {
        _3039 = cbMatDynParam._m0[0u];
        float _3041 = roundEven(_3039.y);
        bool _3042 = _3041 == 3.0;
        float _3043 = log2(_3029);
        float _3050 = exp2(_3043 * cbSceneParam._m0[78u].x) * _2920;
        float _3051 = exp2(_3043 * cbSceneParam._m0[78u].y) * _2921;
        float _3052 = exp2(_3043 * cbSceneParam._m0[78u].z) * _2922;
        float _3059 = _742 + (-0.5);
        _3061 = cbMtdParam._m0[1u];
        _3063 = _3061.y * _3059;
        float _3066 = (_3041 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3067 = _3066 * (_3042 ? _3050 : (_3050 + (cbSceneParam._m0[72u].w * _3023)));
        _3068 = _3066 * (_3042 ? _3051 : (_3051 + (cbSceneParam._m0[72u].w * _3025)));
        _3069 = _3066 * (_3042 ? _3052 : (_3052 + (cbSceneParam._m0[72u].w * _3027)));
        _3070 = _3059 * 0.999000012874603271484375;
        _3080 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3080)
        {
            if ((cbInstanceData._m0[_240 + 7u].x + _3070) < 0.5)
            {
                _3236 = true;
                break;
            }
        }
        uint _3177 = _791 + uint(_3039.w);
        if ((cbInstanceData._m0[_3177].w < 1.0) && ((cbInstanceData._m0[_3177].w + _3070) < 0.5))
        {
            _3236 = true;
            break;
        }
        if ((_3063 + 1.0) < _3061.x)
        {
            _3236 = true;
            break;
        }
        _3236 = false;
        break;
    }
    float _3440;
    if (_3236)
    {
        discard_state = true;
        _3440 = 0.0;
    }
    else
    {
        _3440 = cbInstanceData._m0[_2923].w;
    }
    SV_Target.x = _3067;
    SV_Target.y = _3068;
    SV_Target.z = _3069;
    SV_Target.w = _3440;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2923].w;
    discard_exit();
}


