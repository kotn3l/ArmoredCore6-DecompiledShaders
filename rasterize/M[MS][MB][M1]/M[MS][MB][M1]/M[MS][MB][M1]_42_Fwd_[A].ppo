#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1206;
float _3587;
float _3588;
float _3589;
float _3590;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _219 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _220 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _221 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _227 = inversesqrt(dot(vec3(_219, _220, _221), vec3(_219, _220, _221)));
    float _234 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _241 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _247 = uint(roundEven(NORMAL.w)) * 13u;
    uint _252 = _247 + 1u;
    uint _256 = _247 + 2u;
    float _265 = sqrt(((cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x) + (cbInstanceData._m0[_247].x * cbInstanceData._m0[_247].x)) + (cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x));
    float _266 = _265 * TEXCOORD.z;
    float _267 = _265 * TEXCOORD.w;
    vec4 _286 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _292 = _286.x * cbMtdParam._m0[9u].x;
    float _293 = _286.y * cbMtdParam._m0[9u].y;
    float _294 = _286.z * cbMtdParam._m0[9u].z;
    vec4 _313 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _266) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _267) + cbTextureTilingScale._m0[14u].w));
    vec4 _333 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _266) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _267) + cbTextureTilingScale._m0[20u].w));
    vec4 _359 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _363 = _359.z;
    float _367 = (_359.x * 2.0) + (-1.0);
    float _368 = (_359.y * 2.0) + (-1.0);
    float _369 = dot(vec2(_367, _368), vec2(_367, _368));
    float _3599 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _375 = sqrt(1.0 - (isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0))));
    float _380 = _367 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_333.x * 2.0) + (-1.0)));
    float _381 = _368 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_333.y * 2.0) + (-1.0)));
    vec4 _398 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _266) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _267) + cbTextureTilingScale._m0[11u].w));
    float _400 = _398.x;
    float _401 = 1.0 - _400;
    float _410 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _413 = ((isnan(0.0) ? _410 : (isnan(_410) ? 0.0 : min(_410, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _422 = (_413 - ((((((_400 - _401) * cbMtdParam._m0[24u].z) + _401) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _413))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3620 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _423 = isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0));
    float _430 = (_423 * ((_313.x * cbMtdParam._m0[18u].x) - _292)) + _292;
    float _431 = (_423 * ((_313.y * cbMtdParam._m0[18u].y) - _293)) + _293;
    float _432 = (_423 * ((_313.z * cbMtdParam._m0[18u].z) - _294)) + _294;
    vec4 _445 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _266) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _267) + cbTextureTilingScale._m0[19u].w));
    float _447 = _445.x;
    float _448 = 1.0 - _447;
    float _477 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_447 - _448) * cbMtdParam._m0[24u].w) + _448) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3631 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _478 = isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0));
    float _486 = ((((cbMtdParam._m0[10u].x - _430) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _478) + _430;
    float _487 = ((((cbMtdParam._m0[10u].y - _431) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _478) + _431;
    float _488 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _432)) * _478) + _432;
    vec4 _501 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _503 = _501.x;
    float _505 = _503 - (_503 * _423);
    float _507 = _505 - (_505 * _478);
    float _512 = (((_333.z - _363) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _363;
    vec4 _526 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _266) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _267) + cbTextureTilingScale._m0[15u].w));
    float _533 = (_526.x * 2.0) + (-1.0);
    float _534 = (_526.y * 2.0) + (-1.0);
    float _535 = dot(vec2(_533, _534), vec2(_533, _534));
    float _3642 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _543 = (_423 * (_526.z - _512)) + _512;
    float _546 = ((cbMtdParam._m0[23u].y - _543) * _478) + _543;
    vec4 _568 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _266) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _267) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _574 = (_568.x * 2.0) + (-1.0);
    float _575 = (_568.y * 2.0) + (-1.0);
    float _576 = dot(vec2(_574, _575), vec2(_574, _575));
    float _3653 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
    float _593 = (((_533 - _380) + (cbMtdParam._m0[21u].x * _380)) * _423) + _380;
    float _594 = (((_534 - _381) + (cbMtdParam._m0[21u].x * _381)) * _423) + _381;
    float _595 = (_423 * (sqrt(1.0 - (isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0)))) - _375)) + _375;
    float _606 = (((_574 - _593) + (_593 * cbMtdParam._m0[22u].z)) * _478) + _593;
    float _607 = (((_575 - _594) + (_594 * cbMtdParam._m0[22u].z)) * _478) + _594;
    float _608 = ((sqrt(1.0 - (isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0)))) - _595) * _478) + _595;
    float _610 = cbMtdParam._m0[22u].x + _359.w;
    float _613 = fma(_608, _234 * NORMAL.x, fma(_607, _241 * TANGENT.x, (_227 * _219) * _606));
    float _616 = fma(_608, _234 * NORMAL.y, fma(_607, _241 * TANGENT.y, (_227 * _220) * _606));
    float _619 = fma(_608, _234 * NORMAL.z, fma(_607, _241 * TANGENT.z, (_227 * _221) * _606));
    float _623 = inversesqrt(dot(vec3(_613, _616, _619), vec3(_613, _616, _619)));
    float _624 = _623 * _613;
    float _625 = _623 * _616;
    float _626 = _623 * _619;
    float _3664 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _627 = isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0));
    float _3675 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _3686 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _3697 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _3708 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _3719 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _632 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
    float _646 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _686 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _696 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _686);
    float _697 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _686);
    float _698 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _686);
    float _702 = inversesqrt(dot(vec3(_696, _697, _698), vec3(_696, _697, _698)));
    float _703 = _696 * _702;
    float _704 = _697 * _702;
    float _705 = _698 * _702;
    vec4 _710 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _712 = _710.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _887 = sqrt(((_696 * _696) + (_697 * _697)) + (_698 * _698));
        float _893 = (cbMatDynParam._m0[5u].x * _887) + cbMatDynParam._m0[5u].y;
        float _3730 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
        float _894 = isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0));
        float _898 = (cbMatDynParam._m0[5u].z * _887) + cbMatDynParam._m0[5u].w;
        float _3741 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0))) - _894)) + _894) < ((_712 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _724 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _725 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _745 = fma(_626, cbSceneParam._m0[5u].z, fma(_625, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _624));
    float _748 = fma(_626, cbSceneParam._m0[6u].z, fma(_625, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _624));
    float _751 = fma(_626, cbSceneParam._m0[7u].z, fma(_625, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _624));
    uint _764 = _247 + 9u;
    uint _765 = _764 + uint(cbMatDynParam._m0[0u].w);
    float _771 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0)))) * cbInstanceData._m0[_765].x;
    float _772 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0)))) * cbInstanceData._m0[_765].y;
    float _773 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0)))) * cbInstanceData._m0[_765].z;
    float _3752 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _774 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
    float _3763 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _775 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
    float _3774 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
    float _776 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
    float _777 = 1.0 - _632;
    float _778 = _774 * _777;
    float _779 = _775 * _777;
    float _780 = _776 * _777;
    float _785 = (_774 + (-0.039999999105930328369140625)) * _632;
    float _786 = (_775 + (-0.039999999105930328369140625)) * _632;
    float _787 = (_776 + (-0.039999999105930328369140625)) * _632;
    float _788 = _785 + 0.039999999105930328369140625;
    float _790 = _786 + 0.039999999105930328369140625;
    float _791 = _787 + 0.039999999105930328369140625;
    vec4 _800 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _724, cbSceneParam._m0[86u].y * _725));
    float _804 = ((isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0))) * TEXCOORD_5.w) * _800.x;
    float _805 = dot(vec3(_624, _625, _626), vec3(_703, _704, _705));
    float _808 = _805 * 2.0;
    float _812 = (_808 * _624) - _703;
    float _813 = (_808 * _625) - _704;
    float _814 = (_808 * _626) - _705;
    float _818 = abs(dot(vec3(_703, _704, _705), vec3(_624, _625, _626)));
    float _3785 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
    float _820 = sqrt(_627);
    float _833 = exp2((_820 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_820 * 3.0));
    float _839 = (1.0 - _833) * ((_820 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _840 = _833 * _820;
    float _868 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _872 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _876 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1205;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _930 = fma(_876, cbModelParam._m0[26u].z, fma(_872, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _868));
        float _934 = fma(_876, cbModelParam._m0[27u].z, fma(_872, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _868));
        float _938 = fma(_876, cbModelParam._m0[28u].z, fma(_872, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _868));
        float _963 = _868 + _624;
        float _964 = _872 + _625;
        float _965 = _876 + _626;
        float _975 = fma(_965, cbModelParam._m0[26u].z, fma(_964, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _963)) - _930;
        float _976 = fma(_965, cbModelParam._m0[27u].z, fma(_964, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _963)) - _934;
        float _977 = fma(_965, cbModelParam._m0[28u].z, fma(_964, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _963)) - _938;
        float _981 = inversesqrt(dot(vec3(_975, _976, _977), vec3(_975, _976, _977)));
        float _994 = ((_981 * _975) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_930 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _995 = ((_981 * _976) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_934 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _996 = ((_981 * _977) / cbModelParam._m0[34u].z) + ((((((_938 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _999 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_994, _995, _996), 0.0);
        vec4 _1006 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_994, _995, _996), 0.0);
        vec4 _1013 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_994, _995, _996), 0.0);
        vec4 _1020 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_994, _995, _996), 0.0);
        float _1033 = exp2((_999.w + (-0.5)) * 20.0) * 2.0;
        float _1034 = _1033 * (_999.x + (-0.5));
        float _1035 = _1033 * (_999.y + (-0.5));
        float _1036 = _1033 * (_999.z + (-0.5));
        float _1043 = exp2((_1006.w + (-0.5)) * 20.0) * 2.0;
        float _1044 = _1043 * (_1006.x + (-0.5));
        float _1045 = _1043 * (_1006.y + (-0.5));
        float _1046 = _1043 * (_1006.z + (-0.5));
        float _1053 = exp2((_1013.w + (-0.5)) * 20.0) * 2.0;
        float _1054 = _1053 * (_1013.x + (-0.5));
        float _1055 = _1053 * (_1013.y + (-0.5));
        float _1056 = _1053 * (_1013.z + (-0.5));
        float _1063 = exp2((_1020.w + (-0.5)) * 20.0) * 2.0;
        float _1064 = _1063 * (_1020.x + (-0.5));
        float _1065 = _1063 * (_1020.y + (-0.5));
        float _1066 = _1063 * (_1020.z + (-0.5));
        float _1067 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1068 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1069 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1070 = _1034 * 0.5;
        float _1071 = _1044 * 0.5;
        float _1072 = _1054 * 0.5;
        float _1073 = dot(vec3(_1070, _1071, _1072), vec3(_1070, _1071, _1072));
        float _1078 = (_1073 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1073);
        float _1087 = (dot(vec3(_624, _625, _626), vec3(_1078 * _1070, _1078 * _1071, _1078 * _1072)) + 1.0) * 0.5;
        float _3811 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1097 = sqrt(((_1071 * _1071) + (_1070 * _1070)) + (_1072 * _1072)) / (_1067 + 9.9999997473787516355514526367188e-06);
        float _3822 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1098 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
        float _1099 = _1098 * 2.0;
        float _1103 = (1.0 - _1098) / (_1098 + 1.0);
        float _3833 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1104 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
        float _1113 = ((((1.0 - _1104) * (_1099 + 2.0)) * exp2(log2(isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0))) * (_1099 + 1.0))) + _1104) * _1067;
        float _1114 = _1035 * 0.5;
        float _1115 = _1045 * 0.5;
        float _1116 = _1055 * 0.5;
        float _1117 = dot(vec3(_1114, _1115, _1116), vec3(_1114, _1115, _1116));
        float _1122 = (_1117 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1117);
        float _1130 = (dot(vec3(_624, _625, _626), vec3(_1122 * _1114, _1122 * _1115, _1122 * _1116)) + 1.0) * 0.5;
        float _3844 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1139 = sqrt(((_1115 * _1115) + (_1114 * _1114)) + (_1116 * _1116)) / (_1068 + 9.9999997473787516355514526367188e-06);
        float _3855 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1140 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
        float _1141 = _1140 * 2.0;
        float _1145 = (1.0 - _1140) / (_1140 + 1.0);
        float _3866 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1146 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
        float _1155 = ((((1.0 - _1146) * (_1141 + 2.0)) * exp2(log2(isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0))) * (_1141 + 1.0))) + _1146) * _1068;
        float _1156 = _1036 * 0.5;
        float _1157 = _1046 * 0.5;
        float _1158 = _1056 * 0.5;
        float _1159 = dot(vec3(_1156, _1157, _1158), vec3(_1156, _1157, _1158));
        float _1164 = (_1159 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1159);
        float _1172 = (dot(vec3(_624, _625, _626), vec3(_1164 * _1156, _1164 * _1157, _1164 * _1158)) + 1.0) * 0.5;
        float _3877 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1181 = sqrt(((_1157 * _1157) + (_1156 * _1156)) + (_1158 * _1158)) / (_1069 + 9.9999997473787516355514526367188e-06);
        float _3888 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1182 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
        float _1183 = _1182 * 2.0;
        float _1187 = (1.0 - _1182) / (_1182 + 1.0);
        float _3899 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1188 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
        float _1197 = ((((1.0 - _1188) * (_1183 + 2.0)) * exp2(log2(isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0))) * (_1183 + 1.0))) + _1188) * _1069;
        _1205 = _1036;
        _1207 = _1035;
        _1208 = _1034;
        _1209 = _1046;
        _1210 = _1045;
        _1211 = _1044;
        _1212 = _1056;
        _1213 = _1055;
        _1214 = _1054;
        _1215 = _1069;
        _1216 = _1068;
        _1217 = _1067;
        _1218 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0)));
        _1219 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0)));
        _1220 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0)));
    }
    else
    {
        _1205 = _1206;
        _1207 = _1206;
        _1208 = _1206;
        _1209 = _1206;
        _1210 = _1206;
        _1211 = _1206;
        _1212 = _1206;
        _1213 = _1206;
        _1214 = _1206;
        _1215 = _1206;
        _1216 = _1206;
        _1217 = _1206;
        _1218 = 0.0;
        _1219 = 0.0;
        _1220 = 0.0;
    }
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    float _1524;
    float _1525;
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1248 = fma(_876, cbModelParam._m0[30u].z, fma(_872, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _868));
        float _1252 = fma(_876, cbModelParam._m0[31u].z, fma(_872, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _868));
        float _1256 = fma(_876, cbModelParam._m0[32u].z, fma(_872, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _868));
        float _1279 = _868 + _624;
        float _1280 = _872 + _625;
        float _1281 = _876 + _626;
        float _1291 = fma(_1281, cbModelParam._m0[30u].z, fma(_1280, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1279)) - _1248;
        float _1292 = fma(_1281, cbModelParam._m0[31u].z, fma(_1280, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1279)) - _1252;
        float _1293 = fma(_1281, cbModelParam._m0[32u].z, fma(_1280, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1279)) - _1256;
        float _1297 = inversesqrt(dot(vec3(_1291, _1292, _1293), vec3(_1291, _1292, _1293)));
        float _1310 = ((_1297 * _1291) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1248 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1311 = ((_1297 * _1292) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1252 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1312 = ((_1297 * _1293) / cbModelParam._m0[35u].z) + ((((((_1256 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1314 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1310, _1311, _1312), 0.0);
        vec4 _1321 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1310, _1311, _1312), 0.0);
        vec4 _1328 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1310, _1311, _1312), 0.0);
        vec4 _1335 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1310, _1311, _1312), 0.0);
        float _1347 = exp2((_1314.w + (-0.5)) * 20.0) * 2.0;
        float _1348 = _1347 * (_1314.x + (-0.5));
        float _1349 = _1347 * (_1314.y + (-0.5));
        float _1350 = _1347 * (_1314.z + (-0.5));
        float _1357 = exp2((_1321.w + (-0.5)) * 20.0) * 2.0;
        float _1358 = _1357 * (_1321.x + (-0.5));
        float _1359 = _1357 * (_1321.y + (-0.5));
        float _1360 = _1357 * (_1321.z + (-0.5));
        float _1367 = exp2((_1328.w + (-0.5)) * 20.0) * 2.0;
        float _1368 = _1367 * (_1328.x + (-0.5));
        float _1369 = _1367 * (_1328.y + (-0.5));
        float _1370 = _1367 * (_1328.z + (-0.5));
        float _1377 = exp2((_1335.w + (-0.5)) * 20.0) * 2.0;
        float _1378 = _1377 * (_1335.x + (-0.5));
        float _1379 = _1377 * (_1335.y + (-0.5));
        float _1380 = _1377 * (_1335.z + (-0.5));
        float _1381 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1382 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1383 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1384 = _1348 * 0.5;
        float _1385 = _1358 * 0.5;
        float _1386 = _1368 * 0.5;
        float _1387 = dot(vec3(_1384, _1385, _1386), vec3(_1384, _1385, _1386));
        float _1392 = (_1387 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1387);
        float _1400 = (dot(vec3(_624, _625, _626), vec3(_1392 * _1384, _1392 * _1385, _1392 * _1386)) + 1.0) * 0.5;
        float _3940 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1409 = sqrt(((_1385 * _1385) + (_1384 * _1384)) + (_1386 * _1386)) / (_1381 + 9.9999997473787516355514526367188e-06);
        float _3951 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1410 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
        float _1411 = _1410 * 2.0;
        float _1415 = (1.0 - _1410) / (_1410 + 1.0);
        float _3962 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1416 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
        float _1425 = ((((1.0 - _1416) * (_1411 + 2.0)) * exp2(log2(isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0))) * (_1411 + 1.0))) + _1416) * _1381;
        float _1426 = _1349 * 0.5;
        float _1427 = _1359 * 0.5;
        float _1428 = _1369 * 0.5;
        float _1429 = dot(vec3(_1426, _1427, _1428), vec3(_1426, _1427, _1428));
        float _1434 = (_1429 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1429);
        float _1442 = (dot(vec3(_624, _625, _626), vec3(_1434 * _1426, _1434 * _1427, _1434 * _1428)) + 1.0) * 0.5;
        float _3973 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1451 = sqrt(((_1427 * _1427) + (_1426 * _1426)) + (_1428 * _1428)) / (_1382 + 9.9999997473787516355514526367188e-06);
        float _3984 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1452 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
        float _1453 = _1452 * 2.0;
        float _1457 = (1.0 - _1452) / (_1452 + 1.0);
        float _3995 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1458 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
        float _1467 = ((((1.0 - _1458) * (_1453 + 2.0)) * exp2(log2(isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0))) * (_1453 + 1.0))) + _1458) * _1382;
        float _1468 = _1350 * 0.5;
        float _1469 = _1360 * 0.5;
        float _1470 = _1370 * 0.5;
        float _1471 = dot(vec3(_1468, _1469, _1470), vec3(_1468, _1469, _1470));
        float _1476 = (_1471 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1471);
        float _1484 = (dot(vec3(_624, _625, _626), vec3(_1476 * _1468, _1476 * _1469, _1476 * _1470)) + 1.0) * 0.5;
        float _4006 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
        float _1493 = sqrt(((_1469 * _1469) + (_1468 * _1468)) + (_1470 * _1470)) / (_1383 + 9.9999997473787516355514526367188e-06);
        float _4017 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1494 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
        float _1495 = _1494 * 2.0;
        float _1499 = (1.0 - _1494) / (_1494 + 1.0);
        float _4028 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1500 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
        float _1509 = ((((1.0 - _1500) * (_1495 + 2.0)) * exp2(log2(isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0))) * (_1495 + 1.0))) + _1500) * _1383;
        _1517 = _1350;
        _1518 = _1349;
        _1519 = _1348;
        _1520 = _1360;
        _1521 = _1359;
        _1522 = _1358;
        _1523 = _1370;
        _1524 = _1369;
        _1525 = _1368;
        _1526 = _1383;
        _1527 = _1382;
        _1528 = _1381;
        _1529 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0)));
        _1530 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0)));
        _1531 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0)));
    }
    else
    {
        _1517 = _1206;
        _1518 = _1206;
        _1519 = _1206;
        _1520 = _1206;
        _1521 = _1206;
        _1522 = _1206;
        _1523 = _1206;
        _1524 = _1206;
        _1525 = _1206;
        _1526 = _1206;
        _1527 = _1206;
        _1528 = _1206;
        _1529 = 0.0;
        _1530 = 0.0;
        _1531 = 0.0;
    }
    float _1541 = (cbModelParam._m0[1u].x * (_1529 - _1218)) + _1218;
    float _1542 = (cbModelParam._m0[1u].x * (_1530 - _1219)) + _1219;
    float _1543 = (cbModelParam._m0[1u].x * (_1531 - _1220)) + _1220;
    float _1564 = fma(_1543, cbSceneParam._m0[89u].z, fma(_1542, cbSceneParam._m0[89u].y, _1541 * cbSceneParam._m0[89u].x));
    float _1567 = fma(_1543, cbSceneParam._m0[90u].z, fma(_1542, cbSceneParam._m0[90u].y, _1541 * cbSceneParam._m0[90u].x));
    float _1570 = fma(_1543, cbSceneParam._m0[91u].z, fma(_1542, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1541));
    float _1585 = _812 * 0.5;
    float _1586 = _813 * 0.5;
    float _1587 = _814 * 0.5;
    float _1588 = dot(vec4(_1585, _1586, _1587, 1.0), vec4(_1519, _1522, _1525, _1528));
    float _1591 = dot(vec4(_1585, _1586, _1587, 1.0), vec4(_1518, _1521, _1524, _1527));
    float _1594 = dot(vec4(_1585, _1586, _1587, 1.0), vec4(_1517, _1520, _1523, _1526));
    float _1628;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1601 = dot(vec4(_1585, _1586, _1587, 1.0), vec4(_1205, _1209, _1212, _1215));
        float _1605 = dot(vec4(_1585, _1586, _1587, 1.0), vec4(_1207, _1210, _1213, _1216));
        float _1609 = dot(vec4(_1585, _1586, _1587, 1.0), vec4(_1208, _1211, _1214, _1217));
        float _1616 = dot(vec4(cbModelParam._m0[39u]), vec4(_1585, _1586, _1587, 1.0));
        _1628 = dot(vec3(isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0)), isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0)), isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1616) ? 0.0 : (isnan(0.0) ? _1616 : max(0.0, _1616))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1628 = 1.0;
    }
    float _1639;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1630 = dot(vec4(cbModelParam._m0[40u]), vec4(_1585, _1586, _1587, 1.0));
        _1639 = dot(vec3(isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0)), isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0)), isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1630) ? 0.0 : (isnan(0.0) ? _1630 : max(0.0, _1630))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1639 = 1.0;
    }
    float _1643 = (_1639 * cbModelParam._m0[1u].x) + (_1628 * (1.0 - cbModelParam._m0[1u].x));
    float _1653 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _627);
    float _1654 = isnan(_1653) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1653 : min(cbModelParam._m0[25u].z, _1653));
    float _1734;
    float _1736;
    float _1738;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1701 = fma(_876, cbModelParam._m0[13u].z, fma(_872, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _868)) + cbModelParam._m0[13u].w;
        float _1705 = fma(_876, cbModelParam._m0[14u].z, fma(_872, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _868)) + cbModelParam._m0[14u].w;
        float _1709 = fma(_876, cbModelParam._m0[15u].z, fma(_872, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _868)) + cbModelParam._m0[15u].w;
        float _1712 = fma(_814, cbModelParam._m0[13u].z, fma(_813, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _812));
        float _1715 = fma(_814, cbModelParam._m0[14u].z, fma(_813, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _812));
        float _1718 = fma(_814, cbModelParam._m0[15u].z, fma(_813, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _812));
        float _1746;
        if (_1712 > 0.0)
        {
            _1746 = abs((1.0 - _1701) / _1712);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1712 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1701 + 1.0) / _1712);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1746 = frontier_phi_17_15_ladder;
        }
        float _1949;
        if (_1715 > 0.0)
        {
            _1949 = abs((1.0 - _1705) / _1715);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1715 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1705 + 1.0) / _1715);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1949 = frontier_phi_26_22_ladder;
        }
        float _2203;
        if (_1718 > 0.0)
        {
            _2203 = abs((1.0 - _1709) / _1718);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1718 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1709 + 1.0) / _1718);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2203 = frontier_phi_38_33_ladder;
        }
        float _2205 = isnan(_1949) ? _1746 : (isnan(_1746) ? _1949 : min(_1746, _1949));
        float _2206 = isnan(_2203) ? _2205 : (isnan(_2205) ? _2203 : min(_2205, _2203));
        float _2210 = (_2206 * _1712) + _1701;
        float _2211 = (_2206 * _1715) + _1705;
        float _2212 = (_2206 * _1718) + _1709;
        float _2213 = _2206 * 9.9999997473787516355514526367188e-05;
        float _2215 = (-1.0) - _2213;
        float _2217 = _2213 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2212 > _2217) || ((_2212 < _2215) || ((_2211 > _2217) || ((_2211 < _2215) || ((_2210 < _2215) || (_2210 > _2217))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2340 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2212, cbModelParam._m0[9u].z, fma(_2211, cbModelParam._m0[9u].y, _2210 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2212, cbModelParam._m0[10u].z, fma(_2211, cbModelParam._m0[10u].y, _2210 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2212, cbModelParam._m0[11u].z, fma(_2211, cbModelParam._m0[11u].y, _2210 * cbModelParam._m0[11u].x))), _1654);
            frontier_phi_16_38_ladder = _2340.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2340.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2340.x * cbModelParam._m0[1u].y;
        }
        _1734 = frontier_phi_16_38_ladder_2;
        _1736 = frontier_phi_16_38_ladder_1;
        _1738 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1722 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_812, _813, _814), _1654);
        _1734 = _1722.x * cbModelParam._m0[1u].y;
        _1736 = _1722.y * cbModelParam._m0[1u].y;
        _1738 = _1722.z * cbModelParam._m0[1u].y;
    }
    float _1742 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _627);
    float _1743 = isnan(_1742) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1742 : min(cbModelParam._m0[25u].w, _1742));
    float _1832;
    float _1834;
    float _1836;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1796 = fma(_876, cbModelParam._m0[21u].z, fma(_872, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _868)) + cbModelParam._m0[21u].w;
        float _1800 = fma(_876, cbModelParam._m0[22u].z, fma(_872, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _868)) + cbModelParam._m0[22u].w;
        float _1804 = fma(_876, cbModelParam._m0[23u].z, fma(_872, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _868)) + cbModelParam._m0[23u].w;
        float _1807 = fma(_814, cbModelParam._m0[21u].z, fma(_813, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _812));
        float _1810 = fma(_814, cbModelParam._m0[22u].z, fma(_813, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _812));
        float _1813 = fma(_814, cbModelParam._m0[23u].z, fma(_813, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _812));
        float _1954;
        if (_1807 > 0.0)
        {
            _1954 = abs((1.0 - _1796) / _1807);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1807 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1796 + 1.0) / _1807);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1954 = frontier_phi_28_24_ladder;
        }
        float _2230;
        if (_1810 > 0.0)
        {
            _2230 = abs((1.0 - _1800) / _1810);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1810 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1800 + 1.0) / _1810);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2230 = frontier_phi_40_35_ladder;
        }
        float _2443;
        if (_1813 > 0.0)
        {
            _2443 = abs((1.0 - _1804) / _1813);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1813 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1804 + 1.0) / _1813);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2443 = frontier_phi_49_46_ladder;
        }
        float _2445 = isnan(_2230) ? _1954 : (isnan(_1954) ? _2230 : min(_1954, _2230));
        float _2446 = isnan(_2443) ? _2445 : (isnan(_2445) ? _2443 : min(_2445, _2443));
        float _2450 = (_2446 * _1807) + _1796;
        float _2451 = (_2446 * _1810) + _1800;
        float _2452 = (_2446 * _1813) + _1804;
        float _2453 = _2446 * 9.9999997473787516355514526367188e-05;
        float _2454 = (-1.0) - _2453;
        float _2456 = _2453 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2452 > _2456) || ((_2452 < _2454) || ((_2451 > _2456) || ((_2451 < _2454) || ((_2450 < _2454) || (_2450 > _2456))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2651 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2452, cbModelParam._m0[17u].z, fma(_2451, cbModelParam._m0[17u].y, _2450 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2452, cbModelParam._m0[18u].z, fma(_2451, cbModelParam._m0[18u].y, _2450 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2452, cbModelParam._m0[19u].z, fma(_2451, cbModelParam._m0[19u].y, _2450 * cbModelParam._m0[19u].x))), _1743);
            frontier_phi_25_49_ladder = _2651.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2651.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2651.x * cbModelParam._m0[1u].z;
        }
        _1832 = frontier_phi_25_49_ladder_2;
        _1834 = frontier_phi_25_49_ladder_1;
        _1836 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1816 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_812, _813, _814), _1743);
        _1832 = _1816.x * cbModelParam._m0[1u].z;
        _1834 = _1816.y * cbModelParam._m0[1u].z;
        _1836 = _1816.z * cbModelParam._m0[1u].z;
    }
    float _1849 = (((_839 * _788) + _840) * _804) * ((cbModelParam._m0[1u].w * (_1832 - _1734)) + _1734);
    float _1851 = (((_839 * _790) + _840) * _804) * ((cbModelParam._m0[1u].w * (_1834 - _1736)) + _1736);
    float _1853 = (((_839 * _791) + _840) * _804) * ((cbModelParam._m0[1u].w * (_1836 - _1738)) + _1738);
    float _1856 = fma(_1853, cbSceneParam._m0[89u].z, fma(_1851, cbSceneParam._m0[89u].y, _1849 * cbSceneParam._m0[89u].x));
    float _1859 = fma(_1853, cbSceneParam._m0[90u].z, fma(_1851, cbSceneParam._m0[90u].y, _1849 * cbSceneParam._m0[90u].x));
    float _1862 = fma(_1853, cbSceneParam._m0[91u].z, fma(_1851, cbSceneParam._m0[91u].y, _1849 * cbSceneParam._m0[91u].x));
    uvec4 _1872 = floatBitsToUint(cbInstanceData._m0[_247 + 5u]);
    uint _1874 = _1872.x * 14u;
    uint _1875 = _1874 + 13u;
    float _1882 = _804 + (-1.0);
    float _1887 = (cbLight._m0[_1875].x * _1882) + 1.0;
    float _1888 = (cbLight._m0[_1875].y * _1882) + 1.0;
    float _1889 = (cbLight._m0[_1875].z * _1882) + 1.0;
    float _1890 = (cbLight._m0[_1875].w * _1882) + 1.0;
    uint _1891 = _1874 + 5u;
    float _1897 = isnan(1.0) ? _1888 : (isnan(_1888) ? 1.0 : min(_1888, 1.0));
    uint _1901 = _1874 + 4u;
    float _1908 = isnan(1.0) ? _1887 : (isnan(_1887) ? 1.0 : min(_1887, 1.0));
    uint _1912 = _1874 | 1u;
    float _1923 = dot(vec3(cbLight._m0[_1874].xyz), vec3(_624, _625, _626));
    float _1926 = dot(vec3(cbLight._m0[_1912].xyz), vec3(_624, _625, _626));
    float _4164 = isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0));
    float _4175 = isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0));
    float _1931 = (isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0))) * 0.3183098733425140380859375;
    float _1933 = (isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0))) * 0.3183098733425140380859375;
    float _1940 = ((cbLight._m0[_1891].x * _1897) * _1933) + ((cbLight._m0[_1901].x * _1908) * _1931);
    float _1941 = ((_1897 * cbLight._m0[_1891].y) * _1933) + ((_1908 * cbLight._m0[_1901].y) * _1931);
    float _1942 = ((_1897 * cbLight._m0[_1891].z) * _1933) + ((_1908 * cbLight._m0[_1901].z) * _1931);
    uvec4 _1946 = floatBitsToUint(cbLight._m0[_1874 + 12u]);
    bool _1948 = _1946.x == 0u;
    float _1959;
    float _1961;
    float _1963;
    if (_1948)
    {
        _1959 = _1940;
        _1961 = _1941;
        _1963 = _1942;
    }
    else
    {
        uint _1967 = _1874 + 6u;
        float _1983 = (dot(vec3(cbLight._m0[_1874 + 2u].xyz), vec3(_624, _625, _626)) * 0.5) + 0.5;
        float _1984 = _1983 * _1983;
        float _4186 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0));
        float _1985 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
        float _1986 = isnan(1.0) ? _1889 : (isnan(_1889) ? 1.0 : min(_1889, 1.0));
        _1959 = (((cbLight._m0[_1967].x * 0.3183098733425140380859375) * _1985) * _1986) + _1940;
        _1961 = (((cbLight._m0[_1967].y * 0.3183098733425140380859375) * _1985) * _1986) + _1941;
        _1963 = (((cbLight._m0[_1967].z * 0.3183098733425140380859375) * _1985) * _1986) + _1942;
    }
    bool _1966 = _1946.y == 0u;
    float _2004;
    float _2006;
    float _2008;
    if (_1966)
    {
        _2004 = _1959;
        _2006 = _1961;
        _2008 = _1963;
    }
    else
    {
        uint _2174 = _1874 + 7u;
        float _2190 = (dot(vec3(cbLight._m0[_1874 + 3u].xyz), vec3(_624, _625, _626)) * 0.5) + 0.5;
        float _2191 = _2190 * _2190;
        float _4202 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
        float _2192 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
        float _2193 = isnan(1.0) ? _1890 : (isnan(_1890) ? 1.0 : min(_1890, 1.0));
        _2004 = (((cbLight._m0[_2174].x * 0.3183098733425140380859375) * _2192) * _2193) + _1959;
        _2006 = (((cbLight._m0[_2174].y * 0.3183098733425140380859375) * _2192) * _2193) + _1961;
        _2008 = (((cbLight._m0[_2174].z * 0.3183098733425140380859375) * _2192) * _2193) + _1963;
    }
    uint _2011 = _1874 + 8u;
    float _2024 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1874].w)) * _627) * 0.949999988079071044921875);
    float _2025 = _2024 * _2024;
    float _2026 = cbLight._m0[_1874].x + _703;
    float _2027 = cbLight._m0[_1874].y + _704;
    float _2028 = cbLight._m0[_1874].z + _705;
    float _2032 = inversesqrt(dot(vec3(_2026, _2027, _2028), vec3(_2026, _2027, _2028)));
    float _2033 = _2032 * _2026;
    float _2034 = _2032 * _2027;
    float _2035 = _2032 * _2028;
    float _2036 = dot(vec3(_624, _625, _626), vec3(cbLight._m0[_1874].xyz));
    float _4218 = isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0));
    float _2039 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
    float _4229 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
    float _2040 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
    float _2041 = dot(vec3(_624, _625, _626), vec3(_2033, _2034, _2035));
    float _4240 = isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0));
    float _2044 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
    float _2045 = dot(vec3(cbLight._m0[_1874].xyz), vec3(_2033, _2034, _2035));
    float _4251 = isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0));
    float _2049 = _2025 * _2025;
    float _2053 = ((_2044 * _2044) * (_2049 + (-1.0))) + 1.0;
    float _2061 = exp2(log2(1.0 - (isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0)))) * 5.0);
    float _2062 = 0.959999978542327880859375 - _785;
    float _2064 = 0.959999978542327880859375 - _786;
    float _2065 = 0.959999978542327880859375 - _787;
    float _2072 = 1.0 - _2025;
    float _2083 = (0.5 / (((_2040 * ((_2039 * _2072) + _2025)) + 9.9999999392252902907785028219223e-09) + (((_2040 * _2072) + _2025) * _2039))) * _2039;
    float _4262 = isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0));
    float _2085 = (isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0))) * (_2049 / ((_2053 * _2053) * 3.141590118408203125));
    uint _2096 = _1874 + 9u;
    float _2107 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1912].w)) * _627) * 0.949999988079071044921875);
    float _2108 = _2107 * _2107;
    float _2109 = cbLight._m0[_1912].x + _703;
    float _2110 = cbLight._m0[_1912].y + _704;
    float _2111 = cbLight._m0[_1912].z + _705;
    float _2115 = inversesqrt(dot(vec3(_2109, _2110, _2111), vec3(_2109, _2110, _2111)));
    float _2116 = _2115 * _2109;
    float _2117 = _2115 * _2110;
    float _2118 = _2115 * _2111;
    float _2119 = dot(vec3(_624, _625, _626), vec3(cbLight._m0[_1912].xyz));
    float _4273 = isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0));
    float _2122 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
    float _2123 = dot(vec3(_624, _625, _626), vec3(_2116, _2117, _2118));
    float _4284 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
    float _2126 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
    float _2127 = dot(vec3(cbLight._m0[_1912].xyz), vec3(_2116, _2117, _2118));
    float _4295 = isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0));
    float _2131 = _2108 * _2108;
    float _2135 = ((_2126 * _2126) * (_2131 + (-1.0))) + 1.0;
    float _2142 = exp2(log2(1.0 - (isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0)))) * 5.0);
    float _2149 = 1.0 - _2108;
    float _2159 = (0.5 / (((_2040 * ((_2122 * _2149) + _2108)) + 9.9999999392252902907785028219223e-09) + (((_2040 * _2149) + _2108) * _2122))) * _2122;
    float _4306 = isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0));
    float _2161 = (isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0))) * (_2131 / ((_2135 * _2135) * 3.141590118408203125));
    float _2171 = (((((_2142 * _2062) + _788) * cbLight._m0[_2096].x) * _2161) * _1897) + (((((_2061 * _2062) + _788) * cbLight._m0[_2011].x) * _2085) * _1908);
    float _2172 = (((((_2142 * _2064) + _790) * cbLight._m0[_2096].y) * _2161) * _1897) + (((((_2061 * _2064) + _790) * cbLight._m0[_2011].y) * _2085) * _1908);
    float _2173 = (((((_2142 * _2065) + _791) * cbLight._m0[_2096].z) * _2161) * _1897) + (((((_2061 * _2065) + _791) * cbLight._m0[_2011].z) * _2085) * _1908);
    float _2235;
    float _2237;
    float _2239;
    if (_1948)
    {
        _2235 = _2171;
        _2237 = _2172;
        _2239 = _2173;
    }
    else
    {
        uint _2241 = _1874 + 2u;
        uint _2245 = _1874 + 10u;
        float _2259 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2241].w)) * _627) * 0.949999988079071044921875);
        float _2260 = _2259 * _2259;
        float _2261 = cbLight._m0[_2241].x + _703;
        float _2262 = cbLight._m0[_2241].y + _704;
        float _2263 = cbLight._m0[_2241].z + _705;
        float _2267 = inversesqrt(dot(vec3(_2261, _2262, _2263), vec3(_2261, _2262, _2263)));
        float _2268 = _2267 * _2261;
        float _2269 = _2267 * _2262;
        float _2270 = _2267 * _2263;
        float _2271 = dot(vec3(_624, _625, _626), vec3(cbLight._m0[_2241].xyz));
        float _4317 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0));
        float _2274 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
        float _2275 = dot(vec3(_624, _625, _626), vec3(_2268, _2269, _2270));
        float _4328 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
        float _2278 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
        float _2279 = dot(vec3(cbLight._m0[_2241].xyz), vec3(_2268, _2269, _2270));
        float _4339 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
        float _2283 = _2260 * _2260;
        float _2287 = ((_2278 * _2278) * (_2283 + (-1.0))) + 1.0;
        float _2294 = exp2(log2(1.0 - (isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0)))) * 5.0);
        float _2301 = 1.0 - _2260;
        float _2311 = (0.5 / (((_2040 * ((_2274 * _2301) + _2260)) + 9.9999999392252902907785028219223e-09) + (((_2040 * _2301) + _2260) * _2274))) * _2274;
        float _4350 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
        float _2313 = (isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0))) * (_2283 / ((_2287 * _2287) * 3.141590118408203125));
        float _2314 = isnan(1.0) ? _1889 : (isnan(_1889) ? 1.0 : min(_1889, 1.0));
        _2235 = (((((_2294 * _2062) + _788) * cbLight._m0[_2245].x) * _2313) * _2314) + _2171;
        _2237 = (((((_2294 * _2064) + _790) * cbLight._m0[_2245].y) * _2313) * _2314) + _2172;
        _2239 = (((((_2294 * _2065) + _791) * cbLight._m0[_2245].z) * _2313) * _2314) + _2173;
    }
    float _2349;
    float _2351;
    float _2353;
    if (_1966)
    {
        _2349 = _2235;
        _2351 = _2237;
        _2353 = _2239;
    }
    else
    {
        uint _2360 = _1874 + 3u;
        uint _2364 = _1874 + 11u;
        float _2378 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2360].w)) * _627) * 0.949999988079071044921875);
        float _2379 = _2378 * _2378;
        float _2380 = cbLight._m0[_2360].x + _703;
        float _2381 = cbLight._m0[_2360].y + _704;
        float _2382 = cbLight._m0[_2360].z + _705;
        float _2386 = inversesqrt(dot(vec3(_2380, _2381, _2382), vec3(_2380, _2381, _2382)));
        float _2387 = _2386 * _2380;
        float _2388 = _2386 * _2381;
        float _2389 = _2386 * _2382;
        float _2390 = dot(vec3(_624, _625, _626), vec3(cbLight._m0[_2360].xyz));
        float _4366 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0));
        float _2393 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
        float _2394 = dot(vec3(_624, _625, _626), vec3(_2387, _2388, _2389));
        float _4377 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
        float _2397 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
        float _2398 = dot(vec3(cbLight._m0[_2360].xyz), vec3(_2387, _2388, _2389));
        float _4388 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
        float _2402 = _2379 * _2379;
        float _2406 = ((_2397 * _2397) * (_2402 + (-1.0))) + 1.0;
        float _2413 = exp2(log2(1.0 - (isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0)))) * 5.0);
        float _2420 = 1.0 - _2379;
        float _2430 = (0.5 / (((_2040 * ((_2393 * _2420) + _2379)) + 9.9999999392252902907785028219223e-09) + (((_2040 * _2420) + _2379) * _2393))) * _2393;
        float _4399 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
        float _2432 = (isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0))) * (_2402 / ((_2406 * _2406) * 3.141590118408203125));
        float _2433 = isnan(1.0) ? _1890 : (isnan(_1890) ? 1.0 : min(_1890, 1.0));
        _2349 = (((((_2413 * _2062) + _788) * cbLight._m0[_2364].x) * _2432) * _2433) + _2235;
        _2351 = (((((_2413 * _2064) + _790) * cbLight._m0[_2364].y) * _2432) * _2433) + _2237;
        _2353 = (((((_2413 * _2065) + _791) * cbLight._m0[_2364].z) * _2432) * _2433) + _2239;
    }
    float _2568;
    float _2570;
    float _2572;
    float _2574;
    float _2576;
    float _2578;
    if (_1872.y == 0u)
    {
        float _2508 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2509 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2508;
        float _2510 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2508;
        float _2511 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2508;
        uvec4 _2523 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2524 = _2523.x;
        uint _2535 = uint((float(_2523.y) * floor(float(uint(cbSceneParam._m0[85u].y * _725) / _2524))) + floor(float(uint(cbSceneParam._m0[85u].x * _724) / _2524)));
        float _2545 = (log2(_2511 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2546 = isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0));
        uint _2549 = uint(isnan(14.0) ? _2546 : (isnan(_2546) ? 14.0 : min(_2546, 14.0)));
        uvec4 _2554 = texelFetch(g_lightClusterGridBuffer, int(((_2549 << 2u) + (_2535 << 6u)) >> 2u));
        uint _2555 = _2554.x;
        uint _2556 = _2523.z;
        float _2656;
        float _2658;
        float _2660;
        float _2662;
        float _2664;
        float _2666;
        if (((((1u << ((_2556 >> 4u) & 15u)) + 4294967295u) & _2555) == 0u) || ((_2556 & 240u) == 0u))
        {
            _2656 = 0.0;
            _2658 = 0.0;
            _2660 = 0.0;
            _2662 = 0.0;
            _2664 = 0.0;
            _2666 = 0.0;
        }
        else
        {
            float _2657;
            float _2659;
            float _2661;
            float _2663;
            float _2665;
            float _2667;
            float _2809 = 0.0;
            float _2810 = 0.0;
            float _2811 = 0.0;
            float _2812 = 0.0;
            float _2813 = 0.0;
            float _2814 = 0.0;
            uint _2815 = 0u;
            uint _2824;
            bool _2825;
            for (;;)
            {
                _2824 = texelFetch(g_lightClassification, int((((_2549 << 5u) + (_2535 << 9u)) + (_2815 << 2u)) >> 2u)).x;
                _2825 = _2824 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2825)
                {
                    frontier_phi_66_pred = _2809;
                    frontier_phi_66_pred_1 = _2814;
                    frontier_phi_66_pred_2 = _2813;
                    frontier_phi_66_pred_3 = _2812;
                    frontier_phi_66_pred_4 = _2811;
                    frontier_phi_66_pred_5 = _2810;
                }
                else
                {
                    float _2954;
                    float _2955;
                    float _2956;
                    float _2957;
                    float _2958;
                    float _2959;
                    uint _2960;
                    _2954 = _2809;
                    _2955 = _2810;
                    _2956 = _2811;
                    _2957 = _2812;
                    _2958 = _2813;
                    _2959 = _2814;
                    _2960 = _2824;
                    float _2881;
                    float _2882;
                    float _2883;
                    float _2884;
                    float _2885;
                    float _2886;
                    for (;;)
                    {
                        uint _2964 = uint(findLSB(_2960)) + (_2815 << 5u);
                        uint _2961 = (_2960 + 4294967295u) & _2960;
                        uint _2966 = _2964 * 48u;
                        vec4 _2980 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2966)).x, texelFetch(g_PointLightRenderingBuffer, int(_2966 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2966 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2966 + 3u)).x));
                        uint _2986 = (_2964 * 48u) + 4u;
                        vec4 _2999 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2986)).x, texelFetch(g_PointLightRenderingBuffer, int(_2986 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2986 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2986 + 3u)).x));
                        uint _3005 = (_2964 * 48u) + 8u;
                        vec3 _3016 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3005)).x, texelFetch(g_PointLightRenderingBuffer, int(_3005 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3005 + 2u)).x));
                        float _3020 = _2980.x - _2509;
                        float _3021 = _2980.y - _2510;
                        float _3022 = _2980.z - _2511;
                        float _3023 = dot(vec3(_3020, _3021, _3022), vec3(_3020, _3021, _3022));
                        float _3026 = inversesqrt(_3023);
                        float _3027 = _3026 * _3020;
                        float _3028 = _3026 * _3021;
                        float _3029 = _3026 * _3022;
                        float _3030 = dot(vec3(_745, _748, _751), vec3(_3027, _3028, _3029));
                        float _3035 = 1.0 - (_3023 * _2980.w);
                        float _4425 = isnan(0.0) ? _3035 : (isnan(_3035) ? 0.0 : max(_3035, 0.0));
                        float _3036 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
                        float _3037 = sqrt(_3023) * _2999.w;
                        float _3040 = 1.39999997615814208984375 / (_3037 + 1.39999997615814208984375);
                        float _3041 = _3040 * _3040;
                        float _3044 = ((1.0 - _3041) * _3030) + _3041;
                        float _3047 = _3037 * _3037;
                        float _3051 = ((isnan(0.0) ? _3044 : (isnan(_3044) ? 0.0 : max(_3044, 0.0))) * _3036) / ((_3047 * 0.699999988079071044921875) + 1.0);
                        float _3055 = (-0.0) - _2509;
                        float _3056 = (-0.0) - _2510;
                        float _3057 = (-0.0) - _2511;
                        float _3061 = inversesqrt(dot(vec3(_3055, _3056, _3057), vec3(_3055, _3056, _3057)));
                        float _3062 = _3061 * _3055;
                        float _3063 = _3061 * _3056;
                        float _3064 = _3061 * _3057;
                        float _3072 = exp2(log2(1.0 / ((_3047 * 3.5) + 5.0)) * 0.25);
                        float _3073 = 1.0 - _820;
                        float _3080 = sqrt(1.0 - ((1.0 - (_3073 * _3073)) * (1.0 - (_3072 * _3072))));
                        float _3081 = _3080 * _3080;
                        float _3082 = _3081 * _3081;
                        float _3083 = _3062 + _3027;
                        float _3084 = _3063 + _3028;
                        float _3085 = _3064 + _3029;
                        float _3089 = inversesqrt(dot(vec3(_3083, _3084, _3085), vec3(_3083, _3084, _3085)));
                        float _3093 = dot(vec3(_745, _748, _751), vec3(_3062, _3063, _3064));
                        float _4441 = isnan(0.0) ? _3093 : (isnan(_3093) ? 0.0 : max(_3093, 0.0));
                        float _3096 = isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0));
                        float _3097 = dot(vec3(_745, _748, _751), vec3(_3089 * _3083, _3089 * _3084, _3089 * _3085));
                        float _4452 = isnan(0.0) ? _3097 : (isnan(_3097) ? 0.0 : max(_3097, 0.0));
                        float _3100 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
                        float _3104 = ((_3100 * _3100) * (_3082 + (-1.0))) + 1.0;
                        float _3105 = _3040 * _3081;
                        float _3106 = _3105 * _3105;
                        float _3109 = ((1.0 - _3106) * _3030) + _3106;
                        float _4463 = isnan(0.0) ? _3109 : (isnan(_3109) ? 0.0 : max(_3109, 0.0));
                        float _3110 = isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0));
                        float _3111 = 1.0 - _3081;
                        float _3121 = (0.5 / (((_3110 * ((_3096 * _3111) + _3081)) + 9.9999999392252902907785028219223e-09) + (((_3110 * _3111) + _3081) * _3096))) * _3110;
                        float _4474 = isnan(0.0) ? _3121 : (isnan(_3121) ? 0.0 : max(_3121, 0.0));
                        float _3132 = (((_3082 * 3.1415927410125732421875) * (isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0)))) / ((_3104 * _3104) * ((_3047 * 2.1991131305694580078125) + 3.141590118408203125))) * _3036;
                        _2884 = (_3051 * _2999.x) + _2957;
                        _2885 = (_3051 * _2999.y) + _2958;
                        _2886 = (_3051 * _2999.z) + _2959;
                        _2881 = (_3132 * _3016.x) + _2954;
                        _2882 = (_3132 * _3016.y) + _2955;
                        _2883 = (_3132 * _3016.z) + _2956;
                        if (_2961 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2954 = _2881;
                            _2955 = _2882;
                            _2956 = _2883;
                            _2957 = _2884;
                            _2958 = _2885;
                            _2959 = _2886;
                            _2960 = _2961;
                        }
                    }
                    frontier_phi_66_pred = _2881;
                    frontier_phi_66_pred_1 = _2886;
                    frontier_phi_66_pred_2 = _2885;
                    frontier_phi_66_pred_3 = _2884;
                    frontier_phi_66_pred_4 = _2883;
                    frontier_phi_66_pred_5 = _2882;
                }
                _2657 = frontier_phi_66_pred;
                _2667 = frontier_phi_66_pred_1;
                _2665 = frontier_phi_66_pred_2;
                _2663 = frontier_phi_66_pred_3;
                _2661 = frontier_phi_66_pred_4;
                _2659 = frontier_phi_66_pred_5;
                uint _2816 = _2815 + 1u;
                if (_2816 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2809 = _2657;
                    _2810 = _2659;
                    _2811 = _2661;
                    _2812 = _2663;
                    _2813 = _2665;
                    _2814 = _2667;
                    _2815 = _2816;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2656 = _2657;
            _2658 = _2659;
            _2660 = _2661;
            _2662 = _2663;
            _2664 = _2665;
            _2666 = _2667;
        }
        uvec4 _2670 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2671 = _2670.z;
        uint _2673 = (_2671 >> 8u) & 15u;
        float _2777;
        float _2779;
        float _2781;
        float _2783;
        float _2785;
        float _2787;
        if (((4294967295u << _2673) & _2555) == 0u)
        {
            _2777 = _2656;
            _2779 = _2658;
            _2781 = _2660;
            _2783 = _2662;
            _2785 = _2664;
            _2787 = _2666;
        }
        else
        {
            float _2802 = inversesqrt(dot(vec3(_2509, _2510, _2511), vec3(_2509, _2510, _2511)));
            float _2803 = _2802 * _2509;
            float _2804 = _2802 * _2510;
            float _2805 = _2802 * _2511;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2673 < ((_2671 >> 12u) & 15u))
            {
                float _2778;
                float _2780;
                float _2782;
                float _2784;
                float _2786;
                float _2788;
                float _2937 = _2656;
                float _2938 = _2658;
                float _2939 = _2660;
                float _2940 = _2662;
                float _2941 = _2664;
                float _2942 = _2666;
                uint _2943 = _2673;
                uint _2952;
                bool _2953;
                for (;;)
                {
                    _2952 = texelFetch(g_lightClassification, int((((_2549 << 5u) + (_2535 << 9u)) + (_2943 << 2u)) >> 2u)).x;
                    _2953 = _2952 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2953)
                    {
                        frontier_phi_77_pred = _2942;
                        frontier_phi_77_pred_1 = _2941;
                        frontier_phi_77_pred_2 = _2940;
                        frontier_phi_77_pred_3 = _2939;
                        frontier_phi_77_pred_4 = _2938;
                        frontier_phi_77_pred_5 = _2937;
                    }
                    else
                    {
                        float _3146;
                        float _3147;
                        float _3148;
                        float _3149;
                        float _3150;
                        float _3151;
                        float _3440;
                        float _3441;
                        float _3442;
                        float _3443;
                        float _3444;
                        float _3445;
                        float _3159 = _2937;
                        float _3160 = _2938;
                        float _3161 = _2939;
                        float _3162 = _2940;
                        float _3163 = _2941;
                        float _3164 = _2942;
                        uint _3165 = _2952;
                        uint _3166;
                        vec4 _3191;
                        float _3192;
                        vec4 _3207;
                        vec3 _3219;
                        vec4 _3235;
                        vec4 _3250;
                        float _3296;
                        bool _3297;
                        for (;;)
                        {
                            uint _3176 = ((_2943 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3165));
                            _3166 = (_3165 + 4294967295u) & _3165;
                            uint _3178 = _3176 * 40u;
                            _3191 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3178)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 3u)).x));
                            _3192 = _3191.w;
                            uint _3194 = (_3176 * 40u) + 4u;
                            _3207 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3194)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 3u)).x));
                            uint _3209 = (_3176 * 40u) + 8u;
                            _3219 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3209)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 2u)).x));
                            uint _3222 = (_3176 * 40u) + 16u;
                            _3235 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3222)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3222 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3222 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3222 + 3u)).x));
                            uint _3237 = (_3176 * 40u) + 20u;
                            _3250 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3237)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 3u)).x));
                            uint _3252 = (_3176 * 40u) + 24u;
                            vec4 _3265 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3252)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3252 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3252 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3252 + 3u)).x));
                            uint _3271 = (_3176 * 40u) + 28u;
                            vec4 _3284 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3271)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 3u)).x));
                            _3296 = fma(_2511, _3284.z, fma(_2510, _3284.y, _3284.x * _2509)) + _3284.w;
                            _3297 = !((fma(_2511, _3265.z, fma(_2510, _3265.y, _3265.x * _2509)) + _3265.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3297)
                            {
                                float _3324 = _3191.x - _2509;
                                float _3325 = _3191.y - _2510;
                                float _3326 = _3191.z - _2511;
                                float _3327 = dot(vec3(_3324, _3325, _3326), vec3(_3324, _3325, _3326));
                                float _3330 = inversesqrt(_3327);
                                float _3331 = _3330 * _3324;
                                float _3332 = _3330 * _3325;
                                float _3333 = _3330 * _3326;
                                float _3337 = 1.0 - (_3327 / (_3192 * _3192));
                                float _4485 = isnan(0.0) ? _3337 : (isnan(_3337) ? 0.0 : max(_3337, 0.0));
                                float _3338 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
                                float _3342 = sqrt(_3327) * _3207.w;
                                float _3344 = 1.39999997615814208984375 / (_3342 + 1.39999997615814208984375);
                                float _3345 = _3344 * _3344;
                                float _3348 = ((1.0 - _3345) * dot(vec3(_3331, _3332, _3333), vec3(_745, _748, _751))) + _3345;
                                float _3351 = _3342 * _3342;
                                float _3355 = (fma(_2511, _3235.z, fma(_2510, _3235.y, _3235.x * _2509)) + _3235.w) / _3296;
                                float _3356 = (fma(_2511, _3250.z, fma(_2510, _3250.y, _3250.x * _2509)) + _3250.w) / _3296;
                                float _3360 = 1.0 - dot(vec2(_3355, _3356), vec2(_3355, _3356));
                                float _4501 = isnan(0.0) ? _3360 : (isnan(_3360) ? 0.0 : max(_3360, 0.0));
                                float _3361 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
                                float _3362 = _3361 * (((isnan(0.0) ? _3348 : (isnan(_3348) ? 0.0 : max(_3348, 0.0))) * _3338) / ((_3351 * 0.699999988079071044921875) + 1.0));
                                float _3374 = exp2(log2(1.0 / ((_3351 * 3.5) + 5.0)) * 0.25);
                                float _3375 = 1.0 - _820;
                                float _3382 = sqrt(1.0 - ((1.0 - (_3375 * _3375)) * (1.0 - (_3374 * _3374))));
                                float _3383 = _3382 * _3382;
                                float _3384 = _3383 * _3383;
                                float _3385 = _3331 - _2803;
                                float _3386 = _3332 - _2804;
                                float _3387 = _3333 - _2805;
                                float _3391 = inversesqrt(dot(vec3(_3385, _3386, _3387), vec3(_3385, _3386, _3387)));
                                float _3395 = dot(vec3(_745, _748, _751), vec3((-0.0) - _2803, (-0.0) - _2804, (-0.0) - _2805));
                                float _4512 = isnan(0.0) ? _3395 : (isnan(_3395) ? 0.0 : max(_3395, 0.0));
                                float _3398 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
                                float _3399 = dot(vec3(_745, _748, _751), vec3(_3391 * _3385, _3391 * _3386, _3391 * _3387));
                                float _4523 = isnan(0.0) ? _3399 : (isnan(_3399) ? 0.0 : max(_3399, 0.0));
                                float _3402 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
                                float _3406 = ((_3402 * _3402) * (_3384 + (-1.0))) + 1.0;
                                float _3407 = _3344 * _3383;
                                float _3408 = _3407 * _3407;
                                float _3414 = ((1.0 - _3408) * dot(vec3(_745, _748, _751), vec3(_3331, _3332, _3333))) + _3408;
                                float _4534 = isnan(0.0) ? _3414 : (isnan(_3414) ? 0.0 : max(_3414, 0.0));
                                float _3415 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
                                float _3416 = 1.0 - _3383;
                                float _3426 = (0.5 / (((_3415 * ((_3398 * _3416) + _3383)) + 9.9999999392252902907785028219223e-09) + (((_3415 * _3416) + _3383) * _3398))) * _3415;
                                float _4545 = isnan(0.0) ? _3426 : (isnan(_3426) ? 0.0 : max(_3426, 0.0));
                                float _3436 = (_3361 * _3338) * (((_3384 * 3.1415927410125732421875) * (isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0)))) / ((_3406 * _3406) * ((_3351 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3362 * _3207.y;
                                frontier_phi_83_pred_1 = _3362 * _3207.x;
                                frontier_phi_83_pred_2 = _3436 * _3219.z;
                                frontier_phi_83_pred_3 = _3436 * _3219.y;
                                frontier_phi_83_pred_4 = _3436 * _3219.x;
                                frontier_phi_83_pred_5 = _3362 * _3207.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3444 = frontier_phi_83_pred;
                            _3443 = frontier_phi_83_pred_1;
                            _3442 = frontier_phi_83_pred_2;
                            _3441 = frontier_phi_83_pred_3;
                            _3440 = frontier_phi_83_pred_4;
                            _3445 = frontier_phi_83_pred_5;
                            _3149 = _3443 + _3162;
                            _3150 = _3444 + _3163;
                            _3151 = _3445 + _3164;
                            _3146 = _3440 + _3159;
                            _3147 = _3441 + _3160;
                            _3148 = _3442 + _3161;
                            if (_3166 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3159 = _3146;
                                _3160 = _3147;
                                _3161 = _3148;
                                _3162 = _3149;
                                _3163 = _3150;
                                _3164 = _3151;
                                _3165 = _3166;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3151;
                        frontier_phi_77_pred_1 = _3150;
                        frontier_phi_77_pred_2 = _3149;
                        frontier_phi_77_pred_3 = _3148;
                        frontier_phi_77_pred_4 = _3147;
                        frontier_phi_77_pred_5 = _3146;
                    }
                    _2788 = frontier_phi_77_pred;
                    _2786 = frontier_phi_77_pred_1;
                    _2784 = frontier_phi_77_pred_2;
                    _2782 = frontier_phi_77_pred_3;
                    _2780 = frontier_phi_77_pred_4;
                    _2778 = frontier_phi_77_pred_5;
                    uint _2944 = _2943 + 1u;
                    if (_2944 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2937 = _2778;
                        _2938 = _2780;
                        _2939 = _2782;
                        _2940 = _2784;
                        _2941 = _2786;
                        _2942 = _2788;
                        _2943 = _2944;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2782;
                frontier_phi_58_59_ladder_1 = _2788;
                frontier_phi_58_59_ladder_2 = _2786;
                frontier_phi_58_59_ladder_3 = _2784;
                frontier_phi_58_59_ladder_4 = _2780;
                frontier_phi_58_59_ladder_5 = _2778;
            }
            else
            {
                frontier_phi_58_59_ladder = _2660;
                frontier_phi_58_59_ladder_1 = _2666;
                frontier_phi_58_59_ladder_2 = _2664;
                frontier_phi_58_59_ladder_3 = _2662;
                frontier_phi_58_59_ladder_4 = _2658;
                frontier_phi_58_59_ladder_5 = _2656;
            }
            _2777 = frontier_phi_58_59_ladder_5;
            _2779 = frontier_phi_58_59_ladder_4;
            _2781 = frontier_phi_58_59_ladder;
            _2783 = frontier_phi_58_59_ladder_3;
            _2785 = frontier_phi_58_59_ladder_2;
            _2787 = frontier_phi_58_59_ladder_1;
        }
        float _2792 = isnan(1.0) ? _804 : (isnan(_804) ? 1.0 : min(_804, 1.0));
        _2568 = (_2792 * _2783) + _2004;
        _2570 = (_2792 * _2785) + _2006;
        _2572 = (_2792 * _2787) + _2008;
        _2574 = ((_2777 * _788) * _2792) + _2349;
        _2576 = ((_2779 * _790) * _2792) + _2351;
        _2578 = ((_2781 * _791) * _2792) + _2353;
    }
    else
    {
        _2568 = _2004;
        _2570 = _2006;
        _2572 = _2008;
        _2574 = _2349;
        _2576 = _2351;
        _2578 = _2353;
    }
    float _4561 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _4572 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
    float _4583 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _2595 = ((isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0))) * (_2568 + ((isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0))) * _804))) + ((_2574 + ((isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0))) * _1643)) * cbPerFrame._m0[3u].x);
    float _2596 = ((isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0))) * (_2570 + ((isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0))) * _804))) + ((_2576 + ((isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0))) * _1643)) * cbPerFrame._m0[3u].x);
    float _2597 = ((isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0))) * (_2572 + ((isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0))) * _804))) + ((_2578 + ((isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0))) * _1643)) * cbPerFrame._m0[3u].x);
    uint _2598 = _247 + 6u;
    float _2606 = _724 / cbSceneParam._m0[86u].x;
    float _2607 = _725 / cbSceneParam._m0[86u].y;
    vec4 _2621 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2606, _2607, (log2((isnan(cbSceneParam._m0[77u].w) ? _646 : (isnan(_646) ? cbSceneParam._m0[77u].w : min(_646, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2623 = _2621.x;
    float _2624 = _2621.y;
    float _2625 = _2621.z;
    float _2626 = _2621.w;
    float _2719;
    float _2721;
    float _2723;
    float _2725;
    if (_646 > cbSceneParam._m0[78u].w)
    {
        float _2681 = isnan(_646) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _646 : min(cbSceneParam._m0[80u].w, _646));
        float _2682 = _2681 / _646;
        float _2693 = _2682 * _696;
        float _2694 = _697 * _2682;
        float _2695 = (-0.0) - _2694;
        float _2697 = _2682 * _698;
        float _2699 = (cbSceneParam._m0[77u].w * _2695) / _2681;
        float _2700 = _2699 + cbSceneParam._m0[79u].w;
        float _2701 = cbSceneParam._m0[79u].w - _2694;
        float _2707 = sqrt(((_2693 * _2693) + (_2694 * _2694)) + (_2697 * _2697));
        float _2710 = (1.0 - (cbSceneParam._m0[77u].w / _2681)) * _2707;
        float _2715 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2717 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2894;
        if (abs((_2695 - _2699) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2894 = ((((_2700 > 0.0) ? exp2(_2715 * _2700) : (2.0 - exp2(_2717 * _2700))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2710;
        }
        else
        {
            float _2838 = 1.0 / cbSceneParam._m0[80u].x;
            float _2839 = isnan(_2701) ? _2700 : (isnan(_2700) ? _2701 : max(_2700, _2701));
            float _2840 = isnan(_2701) ? _2700 : (isnan(_2700) ? _2701 : min(_2700, _2701));
            float _2849 = isnan(0.0) ? _2839 : (isnan(_2839) ? 0.0 : min(_2839, 0.0));
            float _2850 = isnan(0.0) ? _2840 : (isnan(_2840) ? 0.0 : min(_2840, 0.0));
            _2894 = ((abs(_2707 / _2695) * cbSceneParam._m0[80u].y) * ((((_2849 - _2850) * 2.0) - ((exp2(_2715 * (isnan(0.0) ? _2839 : (isnan(_2839) ? 0.0 : max(_2839, 0.0)))) - exp2(_2715 * (isnan(0.0) ? _2840 : (isnan(_2840) ? 0.0 : max(_2840, 0.0))))) * _2838)) - ((exp2(_2717 * _2849) - exp2(_2717 * _2850)) * _2838))) + (_2710 * cbSceneParam._m0[80u].z);
        }
        vec4 _2896 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2606, _2607, 1.0), 0.0);
        float _2905 = exp2((_2894 * (-1.44269502162933349609375)) * (1.0 - _2896.w));
        float _2906 = log2(_2905);
        float _2922 = log2(_2626);
        _2719 = (exp2(_2922 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2906 * cbSceneParam._m0[78u].x)) * _2896.x) / cbSceneParam._m0[78u].x)) + _2623;
        _2721 = (exp2(_2922 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2906 * cbSceneParam._m0[78u].y)) * _2896.y) / cbSceneParam._m0[78u].y)) + _2624;
        _2723 = (exp2(_2922 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2906 * cbSceneParam._m0[78u].z)) * _2896.z) / cbSceneParam._m0[78u].z)) + _2625;
        _2725 = _2905 * _2626;
    }
    else
    {
        _2719 = _2623;
        _2721 = _2624;
        _2723 = _2625;
        _2725 = _2626;
    }
    bool _2932;
    vec4 _2735;
    vec4 _2757;
    float _2759;
    float _2763;
    float _2764;
    float _2765;
    float _2766;
    bool _2776;
    for (;;)
    {
        _2735 = cbMatDynParam._m0[0u];
        float _2737 = roundEven(_2735.y);
        bool _2738 = _2737 == 3.0;
        float _2739 = log2(_2725);
        float _2746 = exp2(_2739 * cbSceneParam._m0[78u].x) * _2595;
        float _2747 = exp2(_2739 * cbSceneParam._m0[78u].y) * _2596;
        float _2748 = exp2(_2739 * cbSceneParam._m0[78u].z) * _2597;
        float _2755 = _712 + (-0.5);
        _2757 = cbMtdParam._m0[1u];
        _2759 = _2757.y * _2755;
        float _2762 = (_2737 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2763 = _2762 * (_2738 ? _2746 : (_2746 + (cbSceneParam._m0[72u].w * _2719)));
        _2764 = _2762 * (_2738 ? _2747 : (_2747 + (cbSceneParam._m0[72u].w * _2721)));
        _2765 = _2762 * (_2738 ? _2748 : (_2748 + (cbSceneParam._m0[72u].w * _2723)));
        _2766 = _2755 * 0.999000012874603271484375;
        _2776 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2776)
        {
            if ((cbInstanceData._m0[_247 + 7u].x + _2766) < 0.5)
            {
                _2932 = true;
                break;
            }
        }
        uint _2873 = _764 + uint(_2735.w);
        if ((cbInstanceData._m0[_2873].w < 1.0) && ((cbInstanceData._m0[_2873].w + _2766) < 0.5))
        {
            _2932 = true;
            break;
        }
        if ((_2759 + 1.0) < _2757.x)
        {
            _2932 = true;
            break;
        }
        _2932 = false;
        break;
    }
    float _3137;
    if (_2932)
    {
        discard_state = true;
        _3137 = 0.0;
    }
    else
    {
        _3137 = cbInstanceData._m0[_2598].w;
    }
    SV_Target.x = _2763;
    SV_Target.y = _2764;
    SV_Target.z = _2765;
    SV_Target.w = _3137;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2598].w;
    discard_exit();
}


