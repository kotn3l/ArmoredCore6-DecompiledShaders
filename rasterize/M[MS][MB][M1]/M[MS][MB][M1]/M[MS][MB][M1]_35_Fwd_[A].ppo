#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1291;
float _3672;
float _3673;
float _3674;
float _3675;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _222 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _223 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _224 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _230 = inversesqrt(dot(vec3(_222, _223, _224), vec3(_222, _223, _224)));
    float _231 = _230 * _222;
    float _232 = _230 * _223;
    float _233 = _230 * _224;
    float _237 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _238 = _237 * NORMAL.x;
    float _239 = _237 * NORMAL.y;
    float _240 = _237 * NORMAL.z;
    float _244 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _245 = _244 * TANGENT.x;
    float _246 = _244 * TANGENT.y;
    float _247 = _244 * TANGENT.z;
    float _256 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _258 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _259 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3684 = isnan(0.0) ? _256 : (isnan(_256) ? 0.0 : max(_256, 0.0));
    float _3695 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    float _3706 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    uint _269 = uint(roundEven(NORMAL.w)) * 13u;
    uint _274 = _269 + 1u;
    uint _278 = _269 + 2u;
    float _287 = sqrt(((cbInstanceData._m0[_274].x * cbInstanceData._m0[_274].x) + (cbInstanceData._m0[_269].x * cbInstanceData._m0[_269].x)) + (cbInstanceData._m0[_278].x * cbInstanceData._m0[_278].x));
    float _288 = _287 * TEXCOORD.z;
    float _289 = _287 * TEXCOORD.w;
    vec4 _302 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _288) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _289) + cbTextureTilingScale._m0[13u].w));
    vec4 _325 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _330 = _325.x * cbMtdParam._m0[9u].x;
    float _331 = _325.y * cbMtdParam._m0[9u].y;
    float _332 = _325.z * cbMtdParam._m0[9u].z;
    float _336 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _302.x) * _330;
    float _339 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _302.y) * _331;
    float _342 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _302.z) * _332;
    float _349 = ((_330 - _336) * (isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0)))) + _336;
    float _350 = ((_331 - _339) * (isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0)))) + _339;
    float _351 = ((_332 - _342) * (isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0)))) + _342;
    vec4 _369 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _288) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _289) + cbTextureTilingScale._m0[20u].w));
    vec4 _395 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _399 = _395.z;
    float _403 = (_395.x * 2.0) + (-1.0);
    float _404 = (_395.y * 2.0) + (-1.0);
    float _405 = dot(vec2(_403, _404), vec2(_403, _404));
    float _3717 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _410 = sqrt(1.0 - (isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0))));
    float _415 = _403 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_369.x * 2.0) + (-1.0)));
    float _416 = _404 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_369.y * 2.0) + (-1.0)));
    float _419 = fma(_410, _238, fma(_416, _245, _415 * _231));
    float _422 = fma(_410, _239, fma(_416, _246, _415 * _232));
    float _425 = fma(_410, _240, fma(_416, _247, _415 * _233));
    float _429 = inversesqrt(dot(vec3(_419, _422, _425), vec3(_419, _422, _425)));
    vec4 _465 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _288) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _289) + cbTextureTilingScale._m0[11u].w));
    float _467 = _465.x;
    float _468 = 1.0 - _467;
    float _475 = ((_467 - _468) * cbMtdParam._m0[24u].z) + _468;
    float _477 = (cbMtdParam._m0[19u].x + dot(vec4(_429 * _419, _429 * _422, _429 * _425, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_475 * cbMtdParam._m0[21u].z);
    float _3728 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _478 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
    float _480 = (-0.0) - cbMtdParam._m0[24u].x;
    float _482 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _483 = isnan(1.0) ? _482 : (isnan(_482) ? 1.0 : min(_482, 1.0));
    float _490 = _478 - ((_478 * TEXCOORD_8.x) * _483);
    float _491 = _478 - ((_478 * TEXCOORD_8.y) * _483);
    float _492 = _478 - ((_478 * TEXCOORD_8.z) * _483);
    float _499 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _503 = ((isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : min(_499, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _511 = (_503 - (((_475 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _503))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3759 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _512 = isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0));
    float _516 = ((_490 * (cbMtdParam._m0[17u].x - _349)) * _512) + _349;
    float _517 = ((_491 * (cbMtdParam._m0[17u].y - _350)) * _512) + _350;
    float _518 = ((_492 * (cbMtdParam._m0[17u].z - _351)) * _512) + _351;
    vec4 _530 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _288) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _289) + cbTextureTilingScale._m0[19u].w));
    float _532 = _530.x;
    float _533 = 1.0 - _532;
    float _560 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_532 - _533) * cbMtdParam._m0[24u].w) + _533) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3770 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _561 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
    float _569 = ((((cbMtdParam._m0[10u].x - _516) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _561) + _516;
    float _570 = ((((cbMtdParam._m0[10u].y - _517) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _561) + _517;
    float _571 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _518)) * _561) + _518;
    vec4 _584 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _586 = _584.x;
    float _589 = _586 - ((_586 * _490) * _512);
    float _591 = _589 - (_589 * _561);
    float _596 = (((_369.z - _399) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _399;
    vec4 _610 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _288) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _289) + cbTextureTilingScale._m0[15u].w));
    float _617 = (_610.x * 2.0) + (-1.0);
    float _618 = (_610.y * 2.0) + (-1.0);
    float _619 = dot(vec2(_617, _618), vec2(_617, _618));
    float _3781 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _628 = (((_610.z - _596) * _490) * _512) + _596;
    float _631 = ((cbMtdParam._m0[23u].y - _628) * _561) + _628;
    vec4 _650 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _288) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _289) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _656 = (_650.x * 2.0) + (-1.0);
    float _657 = (_650.y * 2.0) + (-1.0);
    float _658 = dot(vec2(_656, _657), vec2(_656, _657));
    float _3792 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _678 = (((cbMtdParam._m0[21u].x * _415) + ((_617 - _415) * _490)) * _512) + _415;
    float _679 = (((cbMtdParam._m0[21u].x * _416) + ((_618 - _416) * _491)) * _512) + _416;
    float _680 = (((sqrt(1.0 - (isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0)))) - _410) * _492) * _512) + _410;
    float _691 = (((_656 - _678) + (_678 * cbMtdParam._m0[22u].z)) * _561) + _678;
    float _692 = (((_657 - _679) + (_679 * cbMtdParam._m0[22u].z)) * _561) + _679;
    float _693 = ((sqrt(1.0 - (isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0)))) - _680) * _561) + _680;
    float _695 = cbMtdParam._m0[22u].x + _395.w;
    float _698 = fma(_693, _238, fma(_692, _245, _691 * _231));
    float _701 = fma(_693, _239, fma(_692, _246, _691 * _232));
    float _704 = fma(_693, _240, fma(_692, _247, _691 * _233));
    float _708 = inversesqrt(dot(vec3(_698, _701, _704), vec3(_698, _701, _704)));
    float _709 = _708 * _698;
    float _710 = _708 * _701;
    float _711 = _708 * _704;
    float _3803 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _712 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
    float _3814 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
    float _3825 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _3836 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
    float _3847 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _3858 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _717 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
    float _731 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _771 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _781 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _771);
    float _782 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _771);
    float _783 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _771);
    float _787 = inversesqrt(dot(vec3(_781, _782, _783), vec3(_781, _782, _783)));
    float _788 = _781 * _787;
    float _789 = _782 * _787;
    float _790 = _783 * _787;
    vec4 _795 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _797 = _795.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _972 = sqrt(((_781 * _781) + (_782 * _782)) + (_783 * _783));
        float _978 = (cbMatDynParam._m0[5u].x * _972) + cbMatDynParam._m0[5u].y;
        float _3869 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _979 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
        float _983 = (cbMatDynParam._m0[5u].z * _972) + cbMatDynParam._m0[5u].w;
        float _3880 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0))) - _979)) + _979) < ((_797 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _809 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _810 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _830 = fma(_711, cbSceneParam._m0[5u].z, fma(_710, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _709));
    float _833 = fma(_711, cbSceneParam._m0[6u].z, fma(_710, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _709));
    float _836 = fma(_711, cbSceneParam._m0[7u].z, fma(_710, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _709));
    uint _849 = _269 + 9u;
    uint _850 = _849 + uint(cbMatDynParam._m0[0u].w);
    float _856 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0)))) * cbInstanceData._m0[_850].x;
    float _857 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0)))) * cbInstanceData._m0[_850].y;
    float _858 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0)))) * cbInstanceData._m0[_850].z;
    float _3891 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
    float _859 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
    float _3902 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
    float _860 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
    float _3913 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
    float _861 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
    float _862 = 1.0 - _717;
    float _863 = _859 * _862;
    float _864 = _860 * _862;
    float _865 = _861 * _862;
    float _870 = (_859 + (-0.039999999105930328369140625)) * _717;
    float _871 = (_860 + (-0.039999999105930328369140625)) * _717;
    float _872 = (_861 + (-0.039999999105930328369140625)) * _717;
    float _873 = _870 + 0.039999999105930328369140625;
    float _875 = _871 + 0.039999999105930328369140625;
    float _876 = _872 + 0.039999999105930328369140625;
    vec4 _885 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _809, cbSceneParam._m0[86u].y * _810));
    float _889 = ((isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0))) * TEXCOORD_5.w) * _885.x;
    float _890 = dot(vec3(_709, _710, _711), vec3(_788, _789, _790));
    float _893 = _890 * 2.0;
    float _897 = (_893 * _709) - _788;
    float _898 = (_893 * _710) - _789;
    float _899 = (_893 * _711) - _790;
    float _903 = abs(dot(vec3(_788, _789, _790), vec3(_709, _710, _711)));
    float _3924 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
    float _905 = sqrt(_712);
    float _918 = exp2((_905 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_905 * 3.0));
    float _924 = (1.0 - _918) * ((_905 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _925 = _918 * _905;
    float _953 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _957 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _961 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1290;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1015 = fma(_961, cbModelParam._m0[26u].z, fma(_957, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _953));
        float _1019 = fma(_961, cbModelParam._m0[27u].z, fma(_957, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _953));
        float _1023 = fma(_961, cbModelParam._m0[28u].z, fma(_957, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _953));
        float _1048 = _953 + _709;
        float _1049 = _957 + _710;
        float _1050 = _961 + _711;
        float _1060 = fma(_1050, cbModelParam._m0[26u].z, fma(_1049, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1048)) - _1015;
        float _1061 = fma(_1050, cbModelParam._m0[27u].z, fma(_1049, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1048)) - _1019;
        float _1062 = fma(_1050, cbModelParam._m0[28u].z, fma(_1049, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1048)) - _1023;
        float _1066 = inversesqrt(dot(vec3(_1060, _1061, _1062), vec3(_1060, _1061, _1062)));
        float _1079 = ((_1066 * _1060) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1015 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1080 = ((_1066 * _1061) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1019 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1081 = ((_1066 * _1062) / cbModelParam._m0[34u].z) + ((((((_1023 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1084 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1079, _1080, _1081), 0.0);
        vec4 _1091 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1079, _1080, _1081), 0.0);
        vec4 _1098 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1079, _1080, _1081), 0.0);
        vec4 _1105 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1079, _1080, _1081), 0.0);
        float _1118 = exp2((_1084.w + (-0.5)) * 20.0) * 2.0;
        float _1119 = _1118 * (_1084.x + (-0.5));
        float _1120 = _1118 * (_1084.y + (-0.5));
        float _1121 = _1118 * (_1084.z + (-0.5));
        float _1128 = exp2((_1091.w + (-0.5)) * 20.0) * 2.0;
        float _1129 = _1128 * (_1091.x + (-0.5));
        float _1130 = _1128 * (_1091.y + (-0.5));
        float _1131 = _1128 * (_1091.z + (-0.5));
        float _1138 = exp2((_1098.w + (-0.5)) * 20.0) * 2.0;
        float _1139 = _1138 * (_1098.x + (-0.5));
        float _1140 = _1138 * (_1098.y + (-0.5));
        float _1141 = _1138 * (_1098.z + (-0.5));
        float _1148 = exp2((_1105.w + (-0.5)) * 20.0) * 2.0;
        float _1149 = _1148 * (_1105.x + (-0.5));
        float _1150 = _1148 * (_1105.y + (-0.5));
        float _1151 = _1148 * (_1105.z + (-0.5));
        float _1152 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1153 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1154 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1155 = _1119 * 0.5;
        float _1156 = _1129 * 0.5;
        float _1157 = _1139 * 0.5;
        float _1158 = dot(vec3(_1155, _1156, _1157), vec3(_1155, _1156, _1157));
        float _1163 = (_1158 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1158);
        float _1172 = (dot(vec3(_709, _710, _711), vec3(_1163 * _1155, _1163 * _1156, _1163 * _1157)) + 1.0) * 0.5;
        float _3950 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1182 = sqrt(((_1156 * _1156) + (_1155 * _1155)) + (_1157 * _1157)) / (_1152 + 9.9999997473787516355514526367188e-06);
        float _3961 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1183 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
        float _1184 = _1183 * 2.0;
        float _1188 = (1.0 - _1183) / (_1183 + 1.0);
        float _3972 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1189 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
        float _1198 = ((((1.0 - _1189) * (_1184 + 2.0)) * exp2(log2(isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0))) * (_1184 + 1.0))) + _1189) * _1152;
        float _1199 = _1120 * 0.5;
        float _1200 = _1130 * 0.5;
        float _1201 = _1140 * 0.5;
        float _1202 = dot(vec3(_1199, _1200, _1201), vec3(_1199, _1200, _1201));
        float _1207 = (_1202 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1202);
        float _1215 = (dot(vec3(_709, _710, _711), vec3(_1207 * _1199, _1207 * _1200, _1207 * _1201)) + 1.0) * 0.5;
        float _3983 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1224 = sqrt(((_1200 * _1200) + (_1199 * _1199)) + (_1201 * _1201)) / (_1153 + 9.9999997473787516355514526367188e-06);
        float _3994 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1225 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
        float _1226 = _1225 * 2.0;
        float _1230 = (1.0 - _1225) / (_1225 + 1.0);
        float _4005 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1231 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
        float _1240 = ((((1.0 - _1231) * (_1226 + 2.0)) * exp2(log2(isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0))) * (_1226 + 1.0))) + _1231) * _1153;
        float _1241 = _1121 * 0.5;
        float _1242 = _1131 * 0.5;
        float _1243 = _1141 * 0.5;
        float _1244 = dot(vec3(_1241, _1242, _1243), vec3(_1241, _1242, _1243));
        float _1249 = (_1244 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1244);
        float _1257 = (dot(vec3(_709, _710, _711), vec3(_1249 * _1241, _1249 * _1242, _1249 * _1243)) + 1.0) * 0.5;
        float _4016 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1266 = sqrt(((_1242 * _1242) + (_1241 * _1241)) + (_1243 * _1243)) / (_1154 + 9.9999997473787516355514526367188e-06);
        float _4027 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1267 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
        float _1268 = _1267 * 2.0;
        float _1272 = (1.0 - _1267) / (_1267 + 1.0);
        float _4038 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1273 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
        float _1282 = ((((1.0 - _1273) * (_1268 + 2.0)) * exp2(log2(isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0))) * (_1268 + 1.0))) + _1273) * _1154;
        _1290 = _1121;
        _1292 = _1120;
        _1293 = _1119;
        _1294 = _1131;
        _1295 = _1130;
        _1296 = _1129;
        _1297 = _1141;
        _1298 = _1140;
        _1299 = _1139;
        _1300 = _1154;
        _1301 = _1153;
        _1302 = _1152;
        _1303 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0)));
        _1304 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0)));
        _1305 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0)));
    }
    else
    {
        _1290 = _1291;
        _1292 = _1291;
        _1293 = _1291;
        _1294 = _1291;
        _1295 = _1291;
        _1296 = _1291;
        _1297 = _1291;
        _1298 = _1291;
        _1299 = _1291;
        _1300 = _1291;
        _1301 = _1291;
        _1302 = _1291;
        _1303 = 0.0;
        _1304 = 0.0;
        _1305 = 0.0;
    }
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1333 = fma(_961, cbModelParam._m0[30u].z, fma(_957, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _953));
        float _1337 = fma(_961, cbModelParam._m0[31u].z, fma(_957, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _953));
        float _1341 = fma(_961, cbModelParam._m0[32u].z, fma(_957, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _953));
        float _1364 = _953 + _709;
        float _1365 = _957 + _710;
        float _1366 = _961 + _711;
        float _1376 = fma(_1366, cbModelParam._m0[30u].z, fma(_1365, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1364)) - _1333;
        float _1377 = fma(_1366, cbModelParam._m0[31u].z, fma(_1365, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1364)) - _1337;
        float _1378 = fma(_1366, cbModelParam._m0[32u].z, fma(_1365, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1364)) - _1341;
        float _1382 = inversesqrt(dot(vec3(_1376, _1377, _1378), vec3(_1376, _1377, _1378)));
        float _1395 = ((_1382 * _1376) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1333 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1396 = ((_1382 * _1377) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1337 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1397 = ((_1382 * _1378) / cbModelParam._m0[35u].z) + ((((((_1341 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1399 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1395, _1396, _1397), 0.0);
        vec4 _1406 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1395, _1396, _1397), 0.0);
        vec4 _1413 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1395, _1396, _1397), 0.0);
        vec4 _1420 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1395, _1396, _1397), 0.0);
        float _1432 = exp2((_1399.w + (-0.5)) * 20.0) * 2.0;
        float _1433 = _1432 * (_1399.x + (-0.5));
        float _1434 = _1432 * (_1399.y + (-0.5));
        float _1435 = _1432 * (_1399.z + (-0.5));
        float _1442 = exp2((_1406.w + (-0.5)) * 20.0) * 2.0;
        float _1443 = _1442 * (_1406.x + (-0.5));
        float _1444 = _1442 * (_1406.y + (-0.5));
        float _1445 = _1442 * (_1406.z + (-0.5));
        float _1452 = exp2((_1413.w + (-0.5)) * 20.0) * 2.0;
        float _1453 = _1452 * (_1413.x + (-0.5));
        float _1454 = _1452 * (_1413.y + (-0.5));
        float _1455 = _1452 * (_1413.z + (-0.5));
        float _1462 = exp2((_1420.w + (-0.5)) * 20.0) * 2.0;
        float _1463 = _1462 * (_1420.x + (-0.5));
        float _1464 = _1462 * (_1420.y + (-0.5));
        float _1465 = _1462 * (_1420.z + (-0.5));
        float _1466 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1467 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1468 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1469 = _1433 * 0.5;
        float _1470 = _1443 * 0.5;
        float _1471 = _1453 * 0.5;
        float _1472 = dot(vec3(_1469, _1470, _1471), vec3(_1469, _1470, _1471));
        float _1477 = (_1472 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1472);
        float _1485 = (dot(vec3(_709, _710, _711), vec3(_1477 * _1469, _1477 * _1470, _1477 * _1471)) + 1.0) * 0.5;
        float _4079 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1494 = sqrt(((_1470 * _1470) + (_1469 * _1469)) + (_1471 * _1471)) / (_1466 + 9.9999997473787516355514526367188e-06);
        float _4090 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
        float _1495 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
        float _1496 = _1495 * 2.0;
        float _1500 = (1.0 - _1495) / (_1495 + 1.0);
        float _4101 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1501 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
        float _1510 = ((((1.0 - _1501) * (_1496 + 2.0)) * exp2(log2(isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0))) * (_1496 + 1.0))) + _1501) * _1466;
        float _1511 = _1434 * 0.5;
        float _1512 = _1444 * 0.5;
        float _1513 = _1454 * 0.5;
        float _1514 = dot(vec3(_1511, _1512, _1513), vec3(_1511, _1512, _1513));
        float _1519 = (_1514 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1514);
        float _1527 = (dot(vec3(_709, _710, _711), vec3(_1519 * _1511, _1519 * _1512, _1519 * _1513)) + 1.0) * 0.5;
        float _4112 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1536 = sqrt(((_1512 * _1512) + (_1511 * _1511)) + (_1513 * _1513)) / (_1467 + 9.9999997473787516355514526367188e-06);
        float _4123 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1537 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
        float _1538 = _1537 * 2.0;
        float _1542 = (1.0 - _1537) / (_1537 + 1.0);
        float _4134 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1543 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
        float _1552 = ((((1.0 - _1543) * (_1538 + 2.0)) * exp2(log2(isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0))) * (_1538 + 1.0))) + _1543) * _1467;
        float _1553 = _1435 * 0.5;
        float _1554 = _1445 * 0.5;
        float _1555 = _1455 * 0.5;
        float _1556 = dot(vec3(_1553, _1554, _1555), vec3(_1553, _1554, _1555));
        float _1561 = (_1556 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1556);
        float _1569 = (dot(vec3(_709, _710, _711), vec3(_1561 * _1553, _1561 * _1554, _1561 * _1555)) + 1.0) * 0.5;
        float _4145 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
        float _1578 = sqrt(((_1554 * _1554) + (_1553 * _1553)) + (_1555 * _1555)) / (_1468 + 9.9999997473787516355514526367188e-06);
        float _4156 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
        float _1579 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
        float _1580 = _1579 * 2.0;
        float _1584 = (1.0 - _1579) / (_1579 + 1.0);
        float _4167 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
        float _1585 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
        float _1594 = ((((1.0 - _1585) * (_1580 + 2.0)) * exp2(log2(isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0))) * (_1580 + 1.0))) + _1585) * _1468;
        _1602 = _1435;
        _1603 = _1434;
        _1604 = _1433;
        _1605 = _1445;
        _1606 = _1444;
        _1607 = _1443;
        _1608 = _1455;
        _1609 = _1454;
        _1610 = _1453;
        _1611 = _1468;
        _1612 = _1467;
        _1613 = _1466;
        _1614 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0)));
        _1615 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0)));
        _1616 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0)));
    }
    else
    {
        _1602 = _1291;
        _1603 = _1291;
        _1604 = _1291;
        _1605 = _1291;
        _1606 = _1291;
        _1607 = _1291;
        _1608 = _1291;
        _1609 = _1291;
        _1610 = _1291;
        _1611 = _1291;
        _1612 = _1291;
        _1613 = _1291;
        _1614 = 0.0;
        _1615 = 0.0;
        _1616 = 0.0;
    }
    float _1626 = (cbModelParam._m0[1u].x * (_1614 - _1303)) + _1303;
    float _1627 = (cbModelParam._m0[1u].x * (_1615 - _1304)) + _1304;
    float _1628 = (cbModelParam._m0[1u].x * (_1616 - _1305)) + _1305;
    float _1649 = fma(_1628, cbSceneParam._m0[89u].z, fma(_1627, cbSceneParam._m0[89u].y, _1626 * cbSceneParam._m0[89u].x));
    float _1652 = fma(_1628, cbSceneParam._m0[90u].z, fma(_1627, cbSceneParam._m0[90u].y, _1626 * cbSceneParam._m0[90u].x));
    float _1655 = fma(_1628, cbSceneParam._m0[91u].z, fma(_1627, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1626));
    float _1670 = _897 * 0.5;
    float _1671 = _898 * 0.5;
    float _1672 = _899 * 0.5;
    float _1673 = dot(vec4(_1670, _1671, _1672, 1.0), vec4(_1604, _1607, _1610, _1613));
    float _1676 = dot(vec4(_1670, _1671, _1672, 1.0), vec4(_1603, _1606, _1609, _1612));
    float _1679 = dot(vec4(_1670, _1671, _1672, 1.0), vec4(_1602, _1605, _1608, _1611));
    float _1713;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1686 = dot(vec4(_1670, _1671, _1672, 1.0), vec4(_1290, _1294, _1297, _1300));
        float _1690 = dot(vec4(_1670, _1671, _1672, 1.0), vec4(_1292, _1295, _1298, _1301));
        float _1694 = dot(vec4(_1670, _1671, _1672, 1.0), vec4(_1293, _1296, _1299, _1302));
        float _1701 = dot(vec4(cbModelParam._m0[39u]), vec4(_1670, _1671, _1672, 1.0));
        _1713 = dot(vec3(isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0)), isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0)), isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1701) ? 0.0 : (isnan(0.0) ? _1701 : max(0.0, _1701))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1713 = 1.0;
    }
    float _1724;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1715 = dot(vec4(cbModelParam._m0[40u]), vec4(_1670, _1671, _1672, 1.0));
        _1724 = dot(vec3(isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0)), isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0)), isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1715) ? 0.0 : (isnan(0.0) ? _1715 : max(0.0, _1715))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1724 = 1.0;
    }
    float _1728 = (_1724 * cbModelParam._m0[1u].x) + (_1713 * (1.0 - cbModelParam._m0[1u].x));
    float _1738 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _712);
    float _1739 = isnan(_1738) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1738 : min(cbModelParam._m0[25u].z, _1738));
    float _1820;
    float _1822;
    float _1824;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1787 = fma(_961, cbModelParam._m0[13u].z, fma(_957, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _953)) + cbModelParam._m0[13u].w;
        float _1791 = fma(_961, cbModelParam._m0[14u].z, fma(_957, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _953)) + cbModelParam._m0[14u].w;
        float _1795 = fma(_961, cbModelParam._m0[15u].z, fma(_957, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _953)) + cbModelParam._m0[15u].w;
        float _1798 = fma(_899, cbModelParam._m0[13u].z, fma(_898, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _897));
        float _1801 = fma(_899, cbModelParam._m0[14u].z, fma(_898, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _897));
        float _1804 = fma(_899, cbModelParam._m0[15u].z, fma(_898, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _897));
        float _1832;
        if (_1798 > 0.0)
        {
            _1832 = abs((1.0 - _1787) / _1798);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1798 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1787 + 1.0) / _1798);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1832 = frontier_phi_17_15_ladder;
        }
        float _2036;
        if (_1801 > 0.0)
        {
            _2036 = abs((1.0 - _1791) / _1801);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1801 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1791 + 1.0) / _1801);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2036 = frontier_phi_26_22_ladder;
        }
        float _2290;
        if (_1804 > 0.0)
        {
            _2290 = abs((1.0 - _1795) / _1804);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1804 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1795 + 1.0) / _1804);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2290 = frontier_phi_38_33_ladder;
        }
        float _2292 = isnan(_2036) ? _1832 : (isnan(_1832) ? _2036 : min(_1832, _2036));
        float _2293 = isnan(_2290) ? _2292 : (isnan(_2292) ? _2290 : min(_2292, _2290));
        float _2297 = (_2293 * _1798) + _1787;
        float _2298 = (_2293 * _1801) + _1791;
        float _2299 = (_2293 * _1804) + _1795;
        float _2300 = _2293 * 9.9999997473787516355514526367188e-05;
        float _2302 = (-1.0) - _2300;
        float _2304 = _2300 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2299 > _2304) || ((_2299 < _2302) || ((_2298 > _2304) || ((_2298 < _2302) || ((_2297 < _2302) || (_2297 > _2304))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2427 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2299, cbModelParam._m0[9u].z, fma(_2298, cbModelParam._m0[9u].y, _2297 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2299, cbModelParam._m0[10u].z, fma(_2298, cbModelParam._m0[10u].y, _2297 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2299, cbModelParam._m0[11u].z, fma(_2298, cbModelParam._m0[11u].y, _2297 * cbModelParam._m0[11u].x))), _1739);
            frontier_phi_16_38_ladder = _2427.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2427.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2427.x * cbModelParam._m0[1u].y;
        }
        _1820 = frontier_phi_16_38_ladder_2;
        _1822 = frontier_phi_16_38_ladder_1;
        _1824 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1808 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_897, _898, _899), _1739);
        _1820 = _1808.x * cbModelParam._m0[1u].y;
        _1822 = _1808.y * cbModelParam._m0[1u].y;
        _1824 = _1808.z * cbModelParam._m0[1u].y;
    }
    float _1828 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _712);
    float _1829 = isnan(_1828) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1828 : min(cbModelParam._m0[25u].w, _1828));
    float _1919;
    float _1921;
    float _1923;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1883 = fma(_961, cbModelParam._m0[21u].z, fma(_957, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _953)) + cbModelParam._m0[21u].w;
        float _1887 = fma(_961, cbModelParam._m0[22u].z, fma(_957, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _953)) + cbModelParam._m0[22u].w;
        float _1891 = fma(_961, cbModelParam._m0[23u].z, fma(_957, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _953)) + cbModelParam._m0[23u].w;
        float _1894 = fma(_899, cbModelParam._m0[21u].z, fma(_898, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _897));
        float _1897 = fma(_899, cbModelParam._m0[22u].z, fma(_898, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _897));
        float _1900 = fma(_899, cbModelParam._m0[23u].z, fma(_898, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _897));
        float _2041;
        if (_1894 > 0.0)
        {
            _2041 = abs((1.0 - _1883) / _1894);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1894 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1883 + 1.0) / _1894);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2041 = frontier_phi_28_24_ladder;
        }
        float _2317;
        if (_1897 > 0.0)
        {
            _2317 = abs((1.0 - _1887) / _1897);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1897 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1887 + 1.0) / _1897);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2317 = frontier_phi_40_35_ladder;
        }
        float _2530;
        if (_1900 > 0.0)
        {
            _2530 = abs((1.0 - _1891) / _1900);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1900 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1891 + 1.0) / _1900);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2530 = frontier_phi_49_46_ladder;
        }
        float _2532 = isnan(_2317) ? _2041 : (isnan(_2041) ? _2317 : min(_2041, _2317));
        float _2533 = isnan(_2530) ? _2532 : (isnan(_2532) ? _2530 : min(_2532, _2530));
        float _2537 = (_2533 * _1894) + _1883;
        float _2538 = (_2533 * _1897) + _1887;
        float _2539 = (_2533 * _1900) + _1891;
        float _2540 = _2533 * 9.9999997473787516355514526367188e-05;
        float _2541 = (-1.0) - _2540;
        float _2543 = _2540 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2539 > _2543) || ((_2539 < _2541) || ((_2538 > _2543) || ((_2538 < _2541) || ((_2537 < _2541) || (_2537 > _2543))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2738 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2539, cbModelParam._m0[17u].z, fma(_2538, cbModelParam._m0[17u].y, _2537 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2539, cbModelParam._m0[18u].z, fma(_2538, cbModelParam._m0[18u].y, _2537 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2539, cbModelParam._m0[19u].z, fma(_2538, cbModelParam._m0[19u].y, _2537 * cbModelParam._m0[19u].x))), _1829);
            frontier_phi_25_49_ladder = _2738.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2738.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2738.x * cbModelParam._m0[1u].z;
        }
        _1919 = frontier_phi_25_49_ladder_2;
        _1921 = frontier_phi_25_49_ladder_1;
        _1923 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1903 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_897, _898, _899), _1829);
        _1919 = _1903.x * cbModelParam._m0[1u].z;
        _1921 = _1903.y * cbModelParam._m0[1u].z;
        _1923 = _1903.z * cbModelParam._m0[1u].z;
    }
    float _1936 = (((_924 * _873) + _925) * _889) * ((cbModelParam._m0[1u].w * (_1919 - _1820)) + _1820);
    float _1938 = (((_924 * _875) + _925) * _889) * ((cbModelParam._m0[1u].w * (_1921 - _1822)) + _1822);
    float _1940 = (((_924 * _876) + _925) * _889) * ((cbModelParam._m0[1u].w * (_1923 - _1824)) + _1824);
    float _1943 = fma(_1940, cbSceneParam._m0[89u].z, fma(_1938, cbSceneParam._m0[89u].y, _1936 * cbSceneParam._m0[89u].x));
    float _1946 = fma(_1940, cbSceneParam._m0[90u].z, fma(_1938, cbSceneParam._m0[90u].y, _1936 * cbSceneParam._m0[90u].x));
    float _1949 = fma(_1940, cbSceneParam._m0[91u].z, fma(_1938, cbSceneParam._m0[91u].y, _1936 * cbSceneParam._m0[91u].x));
    uvec4 _1959 = floatBitsToUint(cbInstanceData._m0[_269 + 5u]);
    uint _1961 = _1959.x * 14u;
    uint _1962 = _1961 + 13u;
    float _1969 = _889 + (-1.0);
    float _1974 = (cbLight._m0[_1962].x * _1969) + 1.0;
    float _1975 = (cbLight._m0[_1962].y * _1969) + 1.0;
    float _1976 = (cbLight._m0[_1962].z * _1969) + 1.0;
    float _1977 = (cbLight._m0[_1962].w * _1969) + 1.0;
    uint _1978 = _1961 + 5u;
    float _1984 = isnan(1.0) ? _1975 : (isnan(_1975) ? 1.0 : min(_1975, 1.0));
    uint _1988 = _1961 + 4u;
    float _1995 = isnan(1.0) ? _1974 : (isnan(_1974) ? 1.0 : min(_1974, 1.0));
    uint _1999 = _1961 | 1u;
    float _2010 = dot(vec3(cbLight._m0[_1961].xyz), vec3(_709, _710, _711));
    float _2013 = dot(vec3(cbLight._m0[_1999].xyz), vec3(_709, _710, _711));
    float _4303 = isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0));
    float _4314 = isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0));
    float _2018 = (isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0))) * 0.3183098733425140380859375;
    float _2020 = (isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0))) * 0.3183098733425140380859375;
    float _2027 = ((cbLight._m0[_1978].x * _1984) * _2020) + ((cbLight._m0[_1988].x * _1995) * _2018);
    float _2028 = ((_1984 * cbLight._m0[_1978].y) * _2020) + ((_1995 * cbLight._m0[_1988].y) * _2018);
    float _2029 = ((_1984 * cbLight._m0[_1978].z) * _2020) + ((_1995 * cbLight._m0[_1988].z) * _2018);
    uvec4 _2033 = floatBitsToUint(cbLight._m0[_1961 + 12u]);
    bool _2035 = _2033.x == 0u;
    float _2046;
    float _2048;
    float _2050;
    if (_2035)
    {
        _2046 = _2027;
        _2048 = _2028;
        _2050 = _2029;
    }
    else
    {
        uint _2054 = _1961 + 6u;
        float _2070 = (dot(vec3(cbLight._m0[_1961 + 2u].xyz), vec3(_709, _710, _711)) * 0.5) + 0.5;
        float _2071 = _2070 * _2070;
        float _4325 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
        float _2072 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
        float _2073 = isnan(1.0) ? _1976 : (isnan(_1976) ? 1.0 : min(_1976, 1.0));
        _2046 = (((cbLight._m0[_2054].x * 0.3183098733425140380859375) * _2072) * _2073) + _2027;
        _2048 = (((cbLight._m0[_2054].y * 0.3183098733425140380859375) * _2072) * _2073) + _2028;
        _2050 = (((cbLight._m0[_2054].z * 0.3183098733425140380859375) * _2072) * _2073) + _2029;
    }
    bool _2053 = _2033.y == 0u;
    float _2091;
    float _2093;
    float _2095;
    if (_2053)
    {
        _2091 = _2046;
        _2093 = _2048;
        _2095 = _2050;
    }
    else
    {
        uint _2261 = _1961 + 7u;
        float _2277 = (dot(vec3(cbLight._m0[_1961 + 3u].xyz), vec3(_709, _710, _711)) * 0.5) + 0.5;
        float _2278 = _2277 * _2277;
        float _4341 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
        float _2279 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
        float _2280 = isnan(1.0) ? _1977 : (isnan(_1977) ? 1.0 : min(_1977, 1.0));
        _2091 = (((cbLight._m0[_2261].x * 0.3183098733425140380859375) * _2279) * _2280) + _2046;
        _2093 = (((cbLight._m0[_2261].y * 0.3183098733425140380859375) * _2279) * _2280) + _2048;
        _2095 = (((cbLight._m0[_2261].z * 0.3183098733425140380859375) * _2279) * _2280) + _2050;
    }
    uint _2098 = _1961 + 8u;
    float _2111 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1961].w)) * _712) * 0.949999988079071044921875);
    float _2112 = _2111 * _2111;
    float _2113 = cbLight._m0[_1961].x + _788;
    float _2114 = cbLight._m0[_1961].y + _789;
    float _2115 = cbLight._m0[_1961].z + _790;
    float _2119 = inversesqrt(dot(vec3(_2113, _2114, _2115), vec3(_2113, _2114, _2115)));
    float _2120 = _2119 * _2113;
    float _2121 = _2119 * _2114;
    float _2122 = _2119 * _2115;
    float _2123 = dot(vec3(_709, _710, _711), vec3(cbLight._m0[_1961].xyz));
    float _4357 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
    float _2126 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
    float _4368 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
    float _2127 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
    float _2128 = dot(vec3(_709, _710, _711), vec3(_2120, _2121, _2122));
    float _4379 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0));
    float _2131 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
    float _2132 = dot(vec3(cbLight._m0[_1961].xyz), vec3(_2120, _2121, _2122));
    float _4390 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
    float _2136 = _2112 * _2112;
    float _2140 = ((_2131 * _2131) * (_2136 + (-1.0))) + 1.0;
    float _2148 = exp2(log2(1.0 - (isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0)))) * 5.0);
    float _2149 = 0.959999978542327880859375 - _870;
    float _2151 = 0.959999978542327880859375 - _871;
    float _2152 = 0.959999978542327880859375 - _872;
    float _2159 = 1.0 - _2112;
    float _2170 = (0.5 / (((_2127 * ((_2126 * _2159) + _2112)) + 9.9999999392252902907785028219223e-09) + (((_2127 * _2159) + _2112) * _2126))) * _2126;
    float _4401 = isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0));
    float _2172 = (isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0))) * (_2136 / ((_2140 * _2140) * 3.141590118408203125));
    uint _2183 = _1961 + 9u;
    float _2194 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1999].w)) * _712) * 0.949999988079071044921875);
    float _2195 = _2194 * _2194;
    float _2196 = cbLight._m0[_1999].x + _788;
    float _2197 = cbLight._m0[_1999].y + _789;
    float _2198 = cbLight._m0[_1999].z + _790;
    float _2202 = inversesqrt(dot(vec3(_2196, _2197, _2198), vec3(_2196, _2197, _2198)));
    float _2203 = _2202 * _2196;
    float _2204 = _2202 * _2197;
    float _2205 = _2202 * _2198;
    float _2206 = dot(vec3(_709, _710, _711), vec3(cbLight._m0[_1999].xyz));
    float _4412 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
    float _2209 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
    float _2210 = dot(vec3(_709, _710, _711), vec3(_2203, _2204, _2205));
    float _4423 = isnan(0.0) ? _2210 : (isnan(_2210) ? 0.0 : max(_2210, 0.0));
    float _2213 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
    float _2214 = dot(vec3(cbLight._m0[_1999].xyz), vec3(_2203, _2204, _2205));
    float _4434 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
    float _2218 = _2195 * _2195;
    float _2222 = ((_2213 * _2213) * (_2218 + (-1.0))) + 1.0;
    float _2229 = exp2(log2(1.0 - (isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0)))) * 5.0);
    float _2236 = 1.0 - _2195;
    float _2246 = (0.5 / (((_2127 * ((_2209 * _2236) + _2195)) + 9.9999999392252902907785028219223e-09) + (((_2127 * _2236) + _2195) * _2209))) * _2209;
    float _4445 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
    float _2248 = (isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0))) * (_2218 / ((_2222 * _2222) * 3.141590118408203125));
    float _2258 = (((((_2229 * _2149) + _873) * cbLight._m0[_2183].x) * _2248) * _1984) + (((((_2148 * _2149) + _873) * cbLight._m0[_2098].x) * _2172) * _1995);
    float _2259 = (((((_2229 * _2151) + _875) * cbLight._m0[_2183].y) * _2248) * _1984) + (((((_2148 * _2151) + _875) * cbLight._m0[_2098].y) * _2172) * _1995);
    float _2260 = (((((_2229 * _2152) + _876) * cbLight._m0[_2183].z) * _2248) * _1984) + (((((_2148 * _2152) + _876) * cbLight._m0[_2098].z) * _2172) * _1995);
    float _2322;
    float _2324;
    float _2326;
    if (_2035)
    {
        _2322 = _2258;
        _2324 = _2259;
        _2326 = _2260;
    }
    else
    {
        uint _2328 = _1961 + 2u;
        uint _2332 = _1961 + 10u;
        float _2346 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2328].w)) * _712) * 0.949999988079071044921875);
        float _2347 = _2346 * _2346;
        float _2348 = cbLight._m0[_2328].x + _788;
        float _2349 = cbLight._m0[_2328].y + _789;
        float _2350 = cbLight._m0[_2328].z + _790;
        float _2354 = inversesqrt(dot(vec3(_2348, _2349, _2350), vec3(_2348, _2349, _2350)));
        float _2355 = _2354 * _2348;
        float _2356 = _2354 * _2349;
        float _2357 = _2354 * _2350;
        float _2358 = dot(vec3(_709, _710, _711), vec3(cbLight._m0[_2328].xyz));
        float _4456 = isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : max(_2358, 0.0));
        float _2361 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
        float _2362 = dot(vec3(_709, _710, _711), vec3(_2355, _2356, _2357));
        float _4467 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
        float _2365 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
        float _2366 = dot(vec3(cbLight._m0[_2328].xyz), vec3(_2355, _2356, _2357));
        float _4478 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
        float _2370 = _2347 * _2347;
        float _2374 = ((_2365 * _2365) * (_2370 + (-1.0))) + 1.0;
        float _2381 = exp2(log2(1.0 - (isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0)))) * 5.0);
        float _2388 = 1.0 - _2347;
        float _2398 = (0.5 / (((_2127 * ((_2361 * _2388) + _2347)) + 9.9999999392252902907785028219223e-09) + (((_2127 * _2388) + _2347) * _2361))) * _2361;
        float _4489 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
        float _2400 = (isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0))) * (_2370 / ((_2374 * _2374) * 3.141590118408203125));
        float _2401 = isnan(1.0) ? _1976 : (isnan(_1976) ? 1.0 : min(_1976, 1.0));
        _2322 = (((((_2381 * _2149) + _873) * cbLight._m0[_2332].x) * _2400) * _2401) + _2258;
        _2324 = (((((_2381 * _2151) + _875) * cbLight._m0[_2332].y) * _2400) * _2401) + _2259;
        _2326 = (((((_2381 * _2152) + _876) * cbLight._m0[_2332].z) * _2400) * _2401) + _2260;
    }
    float _2436;
    float _2438;
    float _2440;
    if (_2053)
    {
        _2436 = _2322;
        _2438 = _2324;
        _2440 = _2326;
    }
    else
    {
        uint _2447 = _1961 + 3u;
        uint _2451 = _1961 + 11u;
        float _2465 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2447].w)) * _712) * 0.949999988079071044921875);
        float _2466 = _2465 * _2465;
        float _2467 = cbLight._m0[_2447].x + _788;
        float _2468 = cbLight._m0[_2447].y + _789;
        float _2469 = cbLight._m0[_2447].z + _790;
        float _2473 = inversesqrt(dot(vec3(_2467, _2468, _2469), vec3(_2467, _2468, _2469)));
        float _2474 = _2473 * _2467;
        float _2475 = _2473 * _2468;
        float _2476 = _2473 * _2469;
        float _2477 = dot(vec3(_709, _710, _711), vec3(cbLight._m0[_2447].xyz));
        float _4505 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
        float _2480 = isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0));
        float _2481 = dot(vec3(_709, _710, _711), vec3(_2474, _2475, _2476));
        float _4516 = isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0));
        float _2484 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
        float _2485 = dot(vec3(cbLight._m0[_2447].xyz), vec3(_2474, _2475, _2476));
        float _4527 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
        float _2489 = _2466 * _2466;
        float _2493 = ((_2484 * _2484) * (_2489 + (-1.0))) + 1.0;
        float _2500 = exp2(log2(1.0 - (isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0)))) * 5.0);
        float _2507 = 1.0 - _2466;
        float _2517 = (0.5 / (((_2127 * ((_2480 * _2507) + _2466)) + 9.9999999392252902907785028219223e-09) + (((_2127 * _2507) + _2466) * _2480))) * _2480;
        float _4538 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0));
        float _2519 = (isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0))) * (_2489 / ((_2493 * _2493) * 3.141590118408203125));
        float _2520 = isnan(1.0) ? _1977 : (isnan(_1977) ? 1.0 : min(_1977, 1.0));
        _2436 = (((((_2500 * _2149) + _873) * cbLight._m0[_2451].x) * _2519) * _2520) + _2322;
        _2438 = (((((_2500 * _2151) + _875) * cbLight._m0[_2451].y) * _2519) * _2520) + _2324;
        _2440 = (((((_2500 * _2152) + _876) * cbLight._m0[_2451].z) * _2519) * _2520) + _2326;
    }
    float _2655;
    float _2657;
    float _2659;
    float _2661;
    float _2663;
    float _2665;
    if (_1959.y == 0u)
    {
        float _2595 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2596 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2595;
        float _2597 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2595;
        float _2598 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2595;
        uvec4 _2610 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2611 = _2610.x;
        uint _2622 = uint((float(_2610.y) * floor(float(uint(cbSceneParam._m0[85u].y * _810) / _2611))) + floor(float(uint(cbSceneParam._m0[85u].x * _809) / _2611)));
        float _2632 = (log2(_2598 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2633 = isnan(0.0) ? _2632 : (isnan(_2632) ? 0.0 : max(_2632, 0.0));
        uint _2636 = uint(isnan(14.0) ? _2633 : (isnan(_2633) ? 14.0 : min(_2633, 14.0)));
        uvec4 _2641 = texelFetch(g_lightClusterGridBuffer, int(((_2636 << 2u) + (_2622 << 6u)) >> 2u));
        uint _2642 = _2641.x;
        uint _2643 = _2610.z;
        float _2743;
        float _2745;
        float _2747;
        float _2749;
        float _2751;
        float _2753;
        if (((((1u << ((_2643 >> 4u) & 15u)) + 4294967295u) & _2642) == 0u) || ((_2643 & 240u) == 0u))
        {
            _2743 = 0.0;
            _2745 = 0.0;
            _2747 = 0.0;
            _2749 = 0.0;
            _2751 = 0.0;
            _2753 = 0.0;
        }
        else
        {
            float _2744;
            float _2746;
            float _2748;
            float _2750;
            float _2752;
            float _2754;
            float _2895 = 0.0;
            float _2896 = 0.0;
            float _2897 = 0.0;
            float _2898 = 0.0;
            float _2899 = 0.0;
            float _2900 = 0.0;
            uint _2901 = 0u;
            uint _2910;
            bool _2911;
            for (;;)
            {
                _2910 = texelFetch(g_lightClassification, int((((_2636 << 5u) + (_2622 << 9u)) + (_2901 << 2u)) >> 2u)).x;
                _2911 = _2910 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2911)
                {
                    frontier_phi_66_pred = _2895;
                    frontier_phi_66_pred_1 = _2900;
                    frontier_phi_66_pred_2 = _2899;
                    frontier_phi_66_pred_3 = _2898;
                    frontier_phi_66_pred_4 = _2897;
                    frontier_phi_66_pred_5 = _2896;
                }
                else
                {
                    float _3040;
                    float _3041;
                    float _3042;
                    float _3043;
                    float _3044;
                    float _3045;
                    uint _3046;
                    _3040 = _2895;
                    _3041 = _2896;
                    _3042 = _2897;
                    _3043 = _2898;
                    _3044 = _2899;
                    _3045 = _2900;
                    _3046 = _2910;
                    float _2967;
                    float _2968;
                    float _2969;
                    float _2970;
                    float _2971;
                    float _2972;
                    for (;;)
                    {
                        uint _3050 = uint(findLSB(_3046)) + (_2901 << 5u);
                        uint _3047 = (_3046 + 4294967295u) & _3046;
                        uint _3052 = _3050 * 48u;
                        vec4 _3066 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3052)).x, texelFetch(g_PointLightRenderingBuffer, int(_3052 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3052 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3052 + 3u)).x));
                        uint _3072 = (_3050 * 48u) + 4u;
                        vec4 _3085 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3072)).x, texelFetch(g_PointLightRenderingBuffer, int(_3072 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3072 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3072 + 3u)).x));
                        uint _3091 = (_3050 * 48u) + 8u;
                        vec3 _3102 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3091)).x, texelFetch(g_PointLightRenderingBuffer, int(_3091 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3091 + 2u)).x));
                        float _3106 = _3066.x - _2596;
                        float _3107 = _3066.y - _2597;
                        float _3108 = _3066.z - _2598;
                        float _3109 = dot(vec3(_3106, _3107, _3108), vec3(_3106, _3107, _3108));
                        float _3112 = inversesqrt(_3109);
                        float _3113 = _3112 * _3106;
                        float _3114 = _3112 * _3107;
                        float _3115 = _3112 * _3108;
                        float _3116 = dot(vec3(_830, _833, _836), vec3(_3113, _3114, _3115));
                        float _3121 = 1.0 - (_3109 * _3066.w);
                        float _4564 = isnan(0.0) ? _3121 : (isnan(_3121) ? 0.0 : max(_3121, 0.0));
                        float _3122 = isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0));
                        float _3123 = sqrt(_3109) * _3085.w;
                        float _3126 = 1.39999997615814208984375 / (_3123 + 1.39999997615814208984375);
                        float _3127 = _3126 * _3126;
                        float _3130 = ((1.0 - _3127) * _3116) + _3127;
                        float _3133 = _3123 * _3123;
                        float _3137 = ((isnan(0.0) ? _3130 : (isnan(_3130) ? 0.0 : max(_3130, 0.0))) * _3122) / ((_3133 * 0.699999988079071044921875) + 1.0);
                        float _3141 = (-0.0) - _2596;
                        float _3142 = (-0.0) - _2597;
                        float _3143 = (-0.0) - _2598;
                        float _3147 = inversesqrt(dot(vec3(_3141, _3142, _3143), vec3(_3141, _3142, _3143)));
                        float _3148 = _3147 * _3141;
                        float _3149 = _3147 * _3142;
                        float _3150 = _3147 * _3143;
                        float _3158 = exp2(log2(1.0 / ((_3133 * 3.5) + 5.0)) * 0.25);
                        float _3159 = 1.0 - _905;
                        float _3166 = sqrt(1.0 - ((1.0 - (_3159 * _3159)) * (1.0 - (_3158 * _3158))));
                        float _3167 = _3166 * _3166;
                        float _3168 = _3167 * _3167;
                        float _3169 = _3148 + _3113;
                        float _3170 = _3149 + _3114;
                        float _3171 = _3150 + _3115;
                        float _3175 = inversesqrt(dot(vec3(_3169, _3170, _3171), vec3(_3169, _3170, _3171)));
                        float _3179 = dot(vec3(_830, _833, _836), vec3(_3148, _3149, _3150));
                        float _4580 = isnan(0.0) ? _3179 : (isnan(_3179) ? 0.0 : max(_3179, 0.0));
                        float _3182 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
                        float _3183 = dot(vec3(_830, _833, _836), vec3(_3175 * _3169, _3175 * _3170, _3175 * _3171));
                        float _4591 = isnan(0.0) ? _3183 : (isnan(_3183) ? 0.0 : max(_3183, 0.0));
                        float _3186 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
                        float _3190 = ((_3186 * _3186) * (_3168 + (-1.0))) + 1.0;
                        float _3191 = _3126 * _3167;
                        float _3192 = _3191 * _3191;
                        float _3195 = ((1.0 - _3192) * _3116) + _3192;
                        float _4602 = isnan(0.0) ? _3195 : (isnan(_3195) ? 0.0 : max(_3195, 0.0));
                        float _3196 = isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0));
                        float _3197 = 1.0 - _3167;
                        float _3207 = (0.5 / (((_3196 * ((_3182 * _3197) + _3167)) + 9.9999999392252902907785028219223e-09) + (((_3196 * _3197) + _3167) * _3182))) * _3196;
                        float _4613 = isnan(0.0) ? _3207 : (isnan(_3207) ? 0.0 : max(_3207, 0.0));
                        float _3218 = (((_3168 * 3.1415927410125732421875) * (isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0)))) / ((_3190 * _3190) * ((_3133 * 2.1991131305694580078125) + 3.141590118408203125))) * _3122;
                        _2970 = (_3137 * _3085.x) + _3043;
                        _2971 = (_3137 * _3085.y) + _3044;
                        _2972 = (_3137 * _3085.z) + _3045;
                        _2967 = (_3218 * _3102.x) + _3040;
                        _2968 = (_3218 * _3102.y) + _3041;
                        _2969 = (_3218 * _3102.z) + _3042;
                        if (_3047 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3040 = _2967;
                            _3041 = _2968;
                            _3042 = _2969;
                            _3043 = _2970;
                            _3044 = _2971;
                            _3045 = _2972;
                            _3046 = _3047;
                        }
                    }
                    frontier_phi_66_pred = _2967;
                    frontier_phi_66_pred_1 = _2972;
                    frontier_phi_66_pred_2 = _2971;
                    frontier_phi_66_pred_3 = _2970;
                    frontier_phi_66_pred_4 = _2969;
                    frontier_phi_66_pred_5 = _2968;
                }
                _2744 = frontier_phi_66_pred;
                _2754 = frontier_phi_66_pred_1;
                _2752 = frontier_phi_66_pred_2;
                _2750 = frontier_phi_66_pred_3;
                _2748 = frontier_phi_66_pred_4;
                _2746 = frontier_phi_66_pred_5;
                uint _2902 = _2901 + 1u;
                if (_2902 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2895 = _2744;
                    _2896 = _2746;
                    _2897 = _2748;
                    _2898 = _2750;
                    _2899 = _2752;
                    _2900 = _2754;
                    _2901 = _2902;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2743 = _2744;
            _2745 = _2746;
            _2747 = _2748;
            _2749 = _2750;
            _2751 = _2752;
            _2753 = _2754;
        }
        uvec4 _2757 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2758 = _2757.z;
        uint _2760 = (_2758 >> 8u) & 15u;
        float _2863;
        float _2865;
        float _2867;
        float _2869;
        float _2871;
        float _2873;
        if (((4294967295u << _2760) & _2642) == 0u)
        {
            _2863 = _2743;
            _2865 = _2745;
            _2867 = _2747;
            _2869 = _2749;
            _2871 = _2751;
            _2873 = _2753;
        }
        else
        {
            float _2888 = inversesqrt(dot(vec3(_2596, _2597, _2598), vec3(_2596, _2597, _2598)));
            float _2889 = _2888 * _2596;
            float _2890 = _2888 * _2597;
            float _2891 = _2888 * _2598;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2760 < ((_2758 >> 12u) & 15u))
            {
                float _2864;
                float _2866;
                float _2868;
                float _2870;
                float _2872;
                float _2874;
                float _3023 = _2743;
                float _3024 = _2745;
                float _3025 = _2747;
                float _3026 = _2749;
                float _3027 = _2751;
                float _3028 = _2753;
                uint _3029 = _2760;
                uint _3038;
                bool _3039;
                for (;;)
                {
                    _3038 = texelFetch(g_lightClassification, int((((_2636 << 5u) + (_2622 << 9u)) + (_3029 << 2u)) >> 2u)).x;
                    _3039 = _3038 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3039)
                    {
                        frontier_phi_77_pred = _3028;
                        frontier_phi_77_pred_1 = _3027;
                        frontier_phi_77_pred_2 = _3026;
                        frontier_phi_77_pred_3 = _3025;
                        frontier_phi_77_pred_4 = _3024;
                        frontier_phi_77_pred_5 = _3023;
                    }
                    else
                    {
                        float _3232;
                        float _3233;
                        float _3234;
                        float _3235;
                        float _3236;
                        float _3237;
                        float _3525;
                        float _3526;
                        float _3527;
                        float _3528;
                        float _3529;
                        float _3530;
                        float _3245 = _3023;
                        float _3246 = _3024;
                        float _3247 = _3025;
                        float _3248 = _3026;
                        float _3249 = _3027;
                        float _3250 = _3028;
                        uint _3251 = _3038;
                        uint _3252;
                        vec4 _3277;
                        float _3278;
                        vec4 _3293;
                        vec3 _3305;
                        vec4 _3320;
                        vec4 _3335;
                        float _3381;
                        bool _3382;
                        for (;;)
                        {
                            uint _3262 = ((_3029 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3251));
                            _3252 = (_3251 + 4294967295u) & _3251;
                            uint _3264 = _3262 * 40u;
                            _3277 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3264)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 3u)).x));
                            _3278 = _3277.w;
                            uint _3280 = (_3262 * 40u) + 4u;
                            _3293 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3280)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 3u)).x));
                            uint _3295 = (_3262 * 40u) + 8u;
                            _3305 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3295)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 2u)).x));
                            uint _3307 = (_3262 * 40u) + 16u;
                            _3320 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3307)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 3u)).x));
                            uint _3322 = (_3262 * 40u) + 20u;
                            _3335 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3322)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 3u)).x));
                            uint _3337 = (_3262 * 40u) + 24u;
                            vec4 _3350 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3337)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3337 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3337 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3337 + 3u)).x));
                            uint _3356 = (_3262 * 40u) + 28u;
                            vec4 _3369 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3356)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 3u)).x));
                            _3381 = fma(_2598, _3369.z, fma(_2597, _3369.y, _3369.x * _2596)) + _3369.w;
                            _3382 = !((fma(_2598, _3350.z, fma(_2597, _3350.y, _3350.x * _2596)) + _3350.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3382)
                            {
                                float _3409 = _3277.x - _2596;
                                float _3410 = _3277.y - _2597;
                                float _3411 = _3277.z - _2598;
                                float _3412 = dot(vec3(_3409, _3410, _3411), vec3(_3409, _3410, _3411));
                                float _3415 = inversesqrt(_3412);
                                float _3416 = _3415 * _3409;
                                float _3417 = _3415 * _3410;
                                float _3418 = _3415 * _3411;
                                float _3422 = 1.0 - (_3412 / (_3278 * _3278));
                                float _4624 = isnan(0.0) ? _3422 : (isnan(_3422) ? 0.0 : max(_3422, 0.0));
                                float _3423 = isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0));
                                float _3427 = sqrt(_3412) * _3293.w;
                                float _3429 = 1.39999997615814208984375 / (_3427 + 1.39999997615814208984375);
                                float _3430 = _3429 * _3429;
                                float _3433 = ((1.0 - _3430) * dot(vec3(_3416, _3417, _3418), vec3(_830, _833, _836))) + _3430;
                                float _3436 = _3427 * _3427;
                                float _3440 = (fma(_2598, _3320.z, fma(_2597, _3320.y, _3320.x * _2596)) + _3320.w) / _3381;
                                float _3441 = (fma(_2598, _3335.z, fma(_2597, _3335.y, _3335.x * _2596)) + _3335.w) / _3381;
                                float _3445 = 1.0 - dot(vec2(_3440, _3441), vec2(_3440, _3441));
                                float _4640 = isnan(0.0) ? _3445 : (isnan(_3445) ? 0.0 : max(_3445, 0.0));
                                float _3446 = isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0));
                                float _3447 = _3446 * (((isnan(0.0) ? _3433 : (isnan(_3433) ? 0.0 : max(_3433, 0.0))) * _3423) / ((_3436 * 0.699999988079071044921875) + 1.0));
                                float _3459 = exp2(log2(1.0 / ((_3436 * 3.5) + 5.0)) * 0.25);
                                float _3460 = 1.0 - _905;
                                float _3467 = sqrt(1.0 - ((1.0 - (_3460 * _3460)) * (1.0 - (_3459 * _3459))));
                                float _3468 = _3467 * _3467;
                                float _3469 = _3468 * _3468;
                                float _3470 = _3416 - _2889;
                                float _3471 = _3417 - _2890;
                                float _3472 = _3418 - _2891;
                                float _3476 = inversesqrt(dot(vec3(_3470, _3471, _3472), vec3(_3470, _3471, _3472)));
                                float _3480 = dot(vec3(_830, _833, _836), vec3((-0.0) - _2889, (-0.0) - _2890, (-0.0) - _2891));
                                float _4651 = isnan(0.0) ? _3480 : (isnan(_3480) ? 0.0 : max(_3480, 0.0));
                                float _3483 = isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0));
                                float _3484 = dot(vec3(_830, _833, _836), vec3(_3476 * _3470, _3476 * _3471, _3476 * _3472));
                                float _4662 = isnan(0.0) ? _3484 : (isnan(_3484) ? 0.0 : max(_3484, 0.0));
                                float _3487 = isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0));
                                float _3491 = ((_3487 * _3487) * (_3469 + (-1.0))) + 1.0;
                                float _3492 = _3429 * _3468;
                                float _3493 = _3492 * _3492;
                                float _3499 = ((1.0 - _3493) * dot(vec3(_830, _833, _836), vec3(_3416, _3417, _3418))) + _3493;
                                float _4673 = isnan(0.0) ? _3499 : (isnan(_3499) ? 0.0 : max(_3499, 0.0));
                                float _3500 = isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0));
                                float _3501 = 1.0 - _3468;
                                float _3511 = (0.5 / (((_3500 * ((_3483 * _3501) + _3468)) + 9.9999999392252902907785028219223e-09) + (((_3500 * _3501) + _3468) * _3483))) * _3500;
                                float _4684 = isnan(0.0) ? _3511 : (isnan(_3511) ? 0.0 : max(_3511, 0.0));
                                float _3521 = (_3446 * _3423) * (((_3469 * 3.1415927410125732421875) * (isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0)))) / ((_3491 * _3491) * ((_3436 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3447 * _3293.y;
                                frontier_phi_83_pred_1 = _3447 * _3293.x;
                                frontier_phi_83_pred_2 = _3521 * _3305.z;
                                frontier_phi_83_pred_3 = _3521 * _3305.y;
                                frontier_phi_83_pred_4 = _3521 * _3305.x;
                                frontier_phi_83_pred_5 = _3447 * _3293.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3529 = frontier_phi_83_pred;
                            _3528 = frontier_phi_83_pred_1;
                            _3527 = frontier_phi_83_pred_2;
                            _3526 = frontier_phi_83_pred_3;
                            _3525 = frontier_phi_83_pred_4;
                            _3530 = frontier_phi_83_pred_5;
                            _3235 = _3528 + _3248;
                            _3236 = _3529 + _3249;
                            _3237 = _3530 + _3250;
                            _3232 = _3525 + _3245;
                            _3233 = _3526 + _3246;
                            _3234 = _3527 + _3247;
                            if (_3252 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3245 = _3232;
                                _3246 = _3233;
                                _3247 = _3234;
                                _3248 = _3235;
                                _3249 = _3236;
                                _3250 = _3237;
                                _3251 = _3252;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3237;
                        frontier_phi_77_pred_1 = _3236;
                        frontier_phi_77_pred_2 = _3235;
                        frontier_phi_77_pred_3 = _3234;
                        frontier_phi_77_pred_4 = _3233;
                        frontier_phi_77_pred_5 = _3232;
                    }
                    _2874 = frontier_phi_77_pred;
                    _2872 = frontier_phi_77_pred_1;
                    _2870 = frontier_phi_77_pred_2;
                    _2868 = frontier_phi_77_pred_3;
                    _2866 = frontier_phi_77_pred_4;
                    _2864 = frontier_phi_77_pred_5;
                    uint _3030 = _3029 + 1u;
                    if (_3030 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3023 = _2864;
                        _3024 = _2866;
                        _3025 = _2868;
                        _3026 = _2870;
                        _3027 = _2872;
                        _3028 = _2874;
                        _3029 = _3030;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2868;
                frontier_phi_58_59_ladder_1 = _2874;
                frontier_phi_58_59_ladder_2 = _2872;
                frontier_phi_58_59_ladder_3 = _2870;
                frontier_phi_58_59_ladder_4 = _2866;
                frontier_phi_58_59_ladder_5 = _2864;
            }
            else
            {
                frontier_phi_58_59_ladder = _2747;
                frontier_phi_58_59_ladder_1 = _2753;
                frontier_phi_58_59_ladder_2 = _2751;
                frontier_phi_58_59_ladder_3 = _2749;
                frontier_phi_58_59_ladder_4 = _2745;
                frontier_phi_58_59_ladder_5 = _2743;
            }
            _2863 = frontier_phi_58_59_ladder_5;
            _2865 = frontier_phi_58_59_ladder_4;
            _2867 = frontier_phi_58_59_ladder;
            _2869 = frontier_phi_58_59_ladder_3;
            _2871 = frontier_phi_58_59_ladder_2;
            _2873 = frontier_phi_58_59_ladder_1;
        }
        float _2878 = isnan(1.0) ? _889 : (isnan(_889) ? 1.0 : min(_889, 1.0));
        _2655 = (_2878 * _2869) + _2091;
        _2657 = (_2878 * _2871) + _2093;
        _2659 = (_2878 * _2873) + _2095;
        _2661 = ((_2863 * _873) * _2878) + _2436;
        _2663 = ((_2865 * _875) * _2878) + _2438;
        _2665 = ((_2867 * _876) * _2878) + _2440;
    }
    else
    {
        _2655 = _2091;
        _2657 = _2093;
        _2659 = _2095;
        _2661 = _2436;
        _2663 = _2438;
        _2665 = _2440;
    }
    float _4700 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
    float _4711 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
    float _4722 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
    float _2682 = ((isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0))) * (_2655 + ((isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0))) * _889))) + ((_2661 + ((isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0))) * _1728)) * cbPerFrame._m0[3u].x);
    float _2683 = ((isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0))) * (_2657 + ((isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0))) * _889))) + ((_2663 + ((isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0))) * _1728)) * cbPerFrame._m0[3u].x);
    float _2684 = ((isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0))) * (_2659 + ((isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0))) * _889))) + ((_2665 + ((isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0))) * _1728)) * cbPerFrame._m0[3u].x);
    uint _2685 = _269 + 6u;
    float _2693 = _809 / cbSceneParam._m0[86u].x;
    float _2694 = _810 / cbSceneParam._m0[86u].y;
    vec4 _2708 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2693, _2694, (log2((isnan(cbSceneParam._m0[77u].w) ? _731 : (isnan(_731) ? cbSceneParam._m0[77u].w : min(_731, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2710 = _2708.x;
    float _2711 = _2708.y;
    float _2712 = _2708.z;
    float _2713 = _2708.w;
    float _2805;
    float _2807;
    float _2809;
    float _2811;
    if (_731 > cbSceneParam._m0[78u].w)
    {
        float _2768 = isnan(_731) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _731 : min(cbSceneParam._m0[80u].w, _731));
        float _2769 = _2768 / _731;
        float _2780 = _2769 * _781;
        float _2781 = _782 * _2769;
        float _2782 = (-0.0) - _2781;
        float _2783 = _2769 * _783;
        float _2785 = (cbSceneParam._m0[77u].w * _2782) / _2768;
        float _2786 = _2785 + cbSceneParam._m0[79u].w;
        float _2787 = cbSceneParam._m0[79u].w - _2781;
        float _2793 = sqrt(((_2780 * _2780) + (_2781 * _2781)) + (_2783 * _2783));
        float _2796 = (1.0 - (cbSceneParam._m0[77u].w / _2768)) * _2793;
        float _2801 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2803 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2980;
        if (abs((_2782 - _2785) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2980 = ((((_2786 > 0.0) ? exp2(_2801 * _2786) : (2.0 - exp2(_2803 * _2786))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2796;
        }
        else
        {
            float _2924 = 1.0 / cbSceneParam._m0[80u].x;
            float _2925 = isnan(_2787) ? _2786 : (isnan(_2786) ? _2787 : max(_2786, _2787));
            float _2926 = isnan(_2787) ? _2786 : (isnan(_2786) ? _2787 : min(_2786, _2787));
            float _2935 = isnan(0.0) ? _2925 : (isnan(_2925) ? 0.0 : min(_2925, 0.0));
            float _2936 = isnan(0.0) ? _2926 : (isnan(_2926) ? 0.0 : min(_2926, 0.0));
            _2980 = ((abs(_2793 / _2782) * cbSceneParam._m0[80u].y) * ((((_2935 - _2936) * 2.0) - ((exp2(_2801 * (isnan(0.0) ? _2925 : (isnan(_2925) ? 0.0 : max(_2925, 0.0)))) - exp2(_2801 * (isnan(0.0) ? _2926 : (isnan(_2926) ? 0.0 : max(_2926, 0.0))))) * _2924)) - ((exp2(_2803 * _2935) - exp2(_2803 * _2936)) * _2924))) + (_2796 * cbSceneParam._m0[80u].z);
        }
        vec4 _2982 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2693, _2694, 1.0), 0.0);
        float _2991 = exp2((_2980 * (-1.44269502162933349609375)) * (1.0 - _2982.w));
        float _2992 = log2(_2991);
        float _3008 = log2(_2713);
        _2805 = (exp2(_3008 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2992 * cbSceneParam._m0[78u].x)) * _2982.x) / cbSceneParam._m0[78u].x)) + _2710;
        _2807 = (exp2(_3008 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2992 * cbSceneParam._m0[78u].y)) * _2982.y) / cbSceneParam._m0[78u].y)) + _2711;
        _2809 = (exp2(_3008 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2992 * cbSceneParam._m0[78u].z)) * _2982.z) / cbSceneParam._m0[78u].z)) + _2712;
        _2811 = _2991 * _2713;
    }
    else
    {
        _2805 = _2710;
        _2807 = _2711;
        _2809 = _2712;
        _2811 = _2713;
    }
    bool _3018;
    vec4 _2821;
    vec4 _2843;
    float _2845;
    float _2849;
    float _2850;
    float _2851;
    float _2852;
    bool _2862;
    for (;;)
    {
        _2821 = cbMatDynParam._m0[0u];
        float _2823 = roundEven(_2821.y);
        bool _2824 = _2823 == 3.0;
        float _2825 = log2(_2811);
        float _2832 = exp2(_2825 * cbSceneParam._m0[78u].x) * _2682;
        float _2833 = exp2(_2825 * cbSceneParam._m0[78u].y) * _2683;
        float _2834 = exp2(_2825 * cbSceneParam._m0[78u].z) * _2684;
        float _2841 = _797 + (-0.5);
        _2843 = cbMtdParam._m0[1u];
        _2845 = _2843.y * _2841;
        float _2848 = (_2823 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2849 = _2848 * (_2824 ? _2832 : (_2832 + (cbSceneParam._m0[72u].w * _2805)));
        _2850 = _2848 * (_2824 ? _2833 : (_2833 + (cbSceneParam._m0[72u].w * _2807)));
        _2851 = _2848 * (_2824 ? _2834 : (_2834 + (cbSceneParam._m0[72u].w * _2809)));
        _2852 = _2841 * 0.999000012874603271484375;
        _2862 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2862)
        {
            if ((cbInstanceData._m0[_269 + 7u].x + _2852) < 0.5)
            {
                _3018 = true;
                break;
            }
        }
        uint _2959 = _849 + uint(_2821.w);
        if ((cbInstanceData._m0[_2959].w < 1.0) && ((cbInstanceData._m0[_2959].w + _2852) < 0.5))
        {
            _3018 = true;
            break;
        }
        if ((_2845 + 1.0) < _2843.x)
        {
            _3018 = true;
            break;
        }
        _3018 = false;
        break;
    }
    float _3223;
    if (_3018)
    {
        discard_state = true;
        _3223 = 0.0;
    }
    else
    {
        _3223 = cbInstanceData._m0[_2685].w;
    }
    SV_Target.x = _2849;
    SV_Target.y = _2850;
    SV_Target.z = _2851;
    SV_Target.w = _3223;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2685].w;
    discard_exit();
}


