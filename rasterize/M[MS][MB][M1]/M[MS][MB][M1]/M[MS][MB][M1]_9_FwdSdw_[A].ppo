#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 18) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_28;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1116;
float _3783;
float _3784;
float _3785;
float _3786;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _211 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _212 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _213 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _219 = inversesqrt(dot(vec3(_211, _212, _213), vec3(_211, _212, _213)));
    float _226 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _227 = _226 * NORMAL.x;
    float _228 = _226 * NORMAL.y;
    float _229 = _226 * NORMAL.z;
    float _233 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _257 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _263 = _257.x * cbMtdParam._m0[9u].x;
    float _264 = _257.y * cbMtdParam._m0[9u].y;
    float _265 = _257.z * cbMtdParam._m0[9u].z;
    vec4 _278 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _282 = _278.z;
    float _287 = (_278.x * 2.0) + (-1.0);
    float _289 = (_278.y * 2.0) + (-1.0);
    float _290 = dot(vec2(_287, _289), vec2(_287, _289));
    float _3795 = isnan(0.0) ? _290 : (isnan(_290) ? 0.0 : max(_290, 0.0));
    float _296 = sqrt(1.0 - (isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0))));
    uint _297 = uint(roundEven(NORMAL.w)) * 13u;
    uint _302 = _297 + 1u;
    uint _306 = _297 + 2u;
    float _315 = sqrt(((cbInstanceData._m0[_302].x * cbInstanceData._m0[_302].x) + (cbInstanceData._m0[_297].x * cbInstanceData._m0[_297].x)) + (cbInstanceData._m0[_306].x * cbInstanceData._m0[_306].x));
    float _316 = _315 * TEXCOORD.z;
    float _317 = _315 * TEXCOORD.w;
    vec4 _330 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _316) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _317) + cbTextureTilingScale._m0[19u].w));
    float _332 = _330.x;
    float _333 = 1.0 - _332;
    float _366 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_332 - _333) * cbMtdParam._m0[24u].w) + _333) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3806 = isnan(0.0) ? _366 : (isnan(_366) ? 0.0 : max(_366, 0.0));
    float _367 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
    float _375 = ((((cbMtdParam._m0[10u].x - _263) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _367) + _263;
    float _376 = ((((cbMtdParam._m0[10u].y - _264) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _367) + _264;
    float _377 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _265)) * _367) + _265;
    vec4 _390 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _392 = _390.x;
    float _394 = _392 - (_392 * _367);
    float _398 = ((cbMtdParam._m0[23u].y - _282) * _367) + _282;
    vec4 _420 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _316) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _317) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _422 = _420.x;
    float _423 = _420.y;
    float _430 = dot(vec4(cbMtdParam._m0[29u].yzw, 0.0), vec4(_227, _228, _229, 0.0));
    vec4 _445 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_28, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * _316) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * _317) + cbTextureTilingScale._m0[18u].w));
    float _447 = _445.x;
    float _452 = fract(_445.w + cbPerFrame._m0[22u].x);
    float _454 = (1.0 - _452) * _447;
    float _459 = ((_452 + (-1.0)) + _447) * 9.0;
    float _461 = ((_447 + (-1.0)) + _452) * 9.0;
    float _462 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _463 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _477 = (_454 * ((_445.y * 2.0) + (-1.0))) * sin((isnan(3.0) ? _462 : (isnan(_462) ? 3.0 : min(_462, 3.0))) * 3.1415927410125732421875);
    float _479 = (_454 * ((_445.z * 2.0) + (-1.0))) * sin((isnan(3.0) ? _463 : (isnan(_463) ? 3.0 : min(_463, 3.0))) * 3.1415927410125732421875);
    float _483 = inversesqrt(dot(vec3(_477, _479, 1.0), vec3(_477, _479, 1.0)));
    float _499 = (((((0.5 - _422) + ((_477 * 0.5) * _483)) * _430) + _422) * 2.0) + (-1.0);
    float _500 = (((((0.5 - _423) + ((_483 * 0.5) * _479)) * _430) + _423) * 2.0) + (-1.0);
    float _501 = dot(vec2(_499, _500), vec2(_499, _500));
    float _3837 = isnan(0.0) ? _501 : (isnan(_501) ? 0.0 : max(_501, 0.0));
    float _517 = ((((cbMtdParam._m0[22u].z * _287) - _287) + _499) * _367) + _287;
    float _518 = ((((cbMtdParam._m0[22u].z * _289) - _289) + _500) * _367) + _289;
    float _519 = (_367 * (sqrt(1.0 - (isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0)))) - _296)) + _296;
    float _521 = cbMtdParam._m0[22u].x + _278.w;
    float _524 = fma(_519, _227, fma(_518, _233 * TANGENT.x, (_219 * _211) * _517));
    float _527 = fma(_519, _228, fma(_518, _233 * TANGENT.y, (_219 * _212) * _517));
    float _530 = fma(_519, _229, fma(_518, _233 * TANGENT.z, (_219 * _213) * _517));
    float _534 = inversesqrt(dot(vec3(_524, _527, _530), vec3(_524, _527, _530)));
    float _535 = _534 * _524;
    float _536 = _534 * _527;
    float _537 = _534 * _530;
    float _3848 = isnan(0.0) ? _398 : (isnan(_398) ? 0.0 : max(_398, 0.0));
    float _538 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
    float _3859 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _3870 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _3881 = isnan(0.0) ? _376 : (isnan(_376) ? 0.0 : max(_376, 0.0));
    float _3892 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _3903 = isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0));
    float _543 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
    float _557 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _598 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _608 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _598);
    float _609 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _598);
    float _610 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _598);
    float _614 = inversesqrt(dot(vec3(_608, _609, _610), vec3(_608, _609, _610)));
    float _615 = _608 * _614;
    float _616 = _609 * _614;
    float _617 = _610 * _614;
    vec4 _622 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _624 = _622.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _798 = sqrt(((_608 * _608) + (_609 * _609)) + (_610 * _610));
        float _804 = (cbMatDynParam._m0[5u].x * _798) + cbMatDynParam._m0[5u].y;
        float _3914 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
        float _805 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
        float _809 = (cbMatDynParam._m0[5u].z * _798) + cbMatDynParam._m0[5u].w;
        float _3925 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0))) - _805)) + _805) < ((_624 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _636 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _637 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _657 = fma(_537, cbSceneParam._m0[5u].z, fma(_536, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _535));
    float _660 = fma(_537, cbSceneParam._m0[6u].z, fma(_536, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _535));
    float _663 = fma(_537, cbSceneParam._m0[7u].z, fma(_536, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _535));
    uint _676 = _297 + 9u;
    uint _677 = _676 + uint(cbMatDynParam._m0[0u].w);
    float _683 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0)))) * cbInstanceData._m0[_677].x;
    float _684 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0)))) * cbInstanceData._m0[_677].y;
    float _685 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0)))) * cbInstanceData._m0[_677].z;
    float _3936 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
    float _686 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
    float _3947 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _687 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
    float _3958 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    float _688 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
    float _689 = 1.0 - _543;
    float _690 = _686 * _689;
    float _691 = _687 * _689;
    float _692 = _688 * _689;
    float _697 = (_686 + (-0.039999999105930328369140625)) * _543;
    float _698 = (_687 + (-0.039999999105930328369140625)) * _543;
    float _699 = (_688 + (-0.039999999105930328369140625)) * _543;
    float _700 = _697 + 0.039999999105930328369140625;
    float _702 = _698 + 0.039999999105930328369140625;
    float _703 = _699 + 0.039999999105930328369140625;
    vec4 _712 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _636, cbSceneParam._m0[86u].y * _637));
    float _716 = ((isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0))) * TEXCOORD_5.w) * _712.x;
    float _717 = dot(vec3(_535, _536, _537), vec3(_615, _616, _617));
    float _720 = _717 * 2.0;
    float _724 = (_720 * _535) - _615;
    float _725 = (_720 * _536) - _616;
    float _726 = (_720 * _537) - _617;
    float _730 = abs(dot(vec3(_615, _616, _617), vec3(_535, _536, _537)));
    float _3969 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    float _732 = sqrt(_538);
    float _744 = exp2((_732 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_732 * 3.0));
    float _750 = (1.0 - _744) * ((_732 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _751 = _744 * _732;
    float _779 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _783 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _787 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1115;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _841 = fma(_787, cbModelParam._m0[26u].z, fma(_783, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _779));
        float _845 = fma(_787, cbModelParam._m0[27u].z, fma(_783, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _779));
        float _849 = fma(_787, cbModelParam._m0[28u].z, fma(_783, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _779));
        float _873 = _779 + _535;
        float _874 = _783 + _536;
        float _875 = _787 + _537;
        float _885 = fma(_875, cbModelParam._m0[26u].z, fma(_874, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _873)) - _841;
        float _886 = fma(_875, cbModelParam._m0[27u].z, fma(_874, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _873)) - _845;
        float _887 = fma(_875, cbModelParam._m0[28u].z, fma(_874, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _873)) - _849;
        float _891 = inversesqrt(dot(vec3(_885, _886, _887), vec3(_885, _886, _887)));
        float _904 = ((_891 * _885) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_841 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _905 = ((_891 * _886) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_845 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _906 = ((_891 * _887) / cbModelParam._m0[34u].z) + ((((((_849 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _909 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_904, _905, _906), 0.0);
        vec4 _916 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_904, _905, _906), 0.0);
        vec4 _923 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_904, _905, _906), 0.0);
        vec4 _930 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_904, _905, _906), 0.0);
        float _943 = exp2((_909.w + (-0.5)) * 20.0) * 2.0;
        float _944 = _943 * (_909.x + (-0.5));
        float _945 = _943 * (_909.y + (-0.5));
        float _946 = _943 * (_909.z + (-0.5));
        float _953 = exp2((_916.w + (-0.5)) * 20.0) * 2.0;
        float _954 = _953 * (_916.x + (-0.5));
        float _955 = _953 * (_916.y + (-0.5));
        float _956 = _953 * (_916.z + (-0.5));
        float _963 = exp2((_923.w + (-0.5)) * 20.0) * 2.0;
        float _964 = _963 * (_923.x + (-0.5));
        float _965 = _963 * (_923.y + (-0.5));
        float _966 = _963 * (_923.z + (-0.5));
        float _973 = exp2((_930.w + (-0.5)) * 20.0) * 2.0;
        float _974 = _973 * (_930.x + (-0.5));
        float _975 = _973 * (_930.y + (-0.5));
        float _976 = _973 * (_930.z + (-0.5));
        float _977 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
        float _978 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _979 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        float _980 = _944 * 0.5;
        float _981 = _954 * 0.5;
        float _982 = _964 * 0.5;
        float _983 = dot(vec3(_980, _981, _982), vec3(_980, _981, _982));
        float _988 = (_983 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_983);
        float _997 = (dot(vec3(_535, _536, _537), vec3(_988 * _980, _988 * _981, _988 * _982)) + 1.0) * 0.5;
        float _3995 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _1007 = sqrt(((_981 * _981) + (_980 * _980)) + (_982 * _982)) / (_977 + 9.9999997473787516355514526367188e-06);
        float _4006 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        float _1008 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
        float _1009 = _1008 * 2.0;
        float _1013 = (1.0 - _1008) / (_1008 + 1.0);
        float _4017 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1014 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
        float _1023 = ((((1.0 - _1014) * (_1009 + 2.0)) * exp2(log2(isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0))) * (_1009 + 1.0))) + _1014) * _977;
        float _1024 = _945 * 0.5;
        float _1025 = _955 * 0.5;
        float _1026 = _965 * 0.5;
        float _1027 = dot(vec3(_1024, _1025, _1026), vec3(_1024, _1025, _1026));
        float _1032 = (_1027 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1027);
        float _1040 = (dot(vec3(_535, _536, _537), vec3(_1032 * _1024, _1032 * _1025, _1032 * _1026)) + 1.0) * 0.5;
        float _4028 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1049 = sqrt(((_1025 * _1025) + (_1024 * _1024)) + (_1026 * _1026)) / (_978 + 9.9999997473787516355514526367188e-06);
        float _4039 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1050 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
        float _1051 = _1050 * 2.0;
        float _1055 = (1.0 - _1050) / (_1050 + 1.0);
        float _4050 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1056 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
        float _1065 = ((((1.0 - _1056) * (_1051 + 2.0)) * exp2(log2(isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0))) * (_1051 + 1.0))) + _1056) * _978;
        float _1066 = _946 * 0.5;
        float _1067 = _956 * 0.5;
        float _1068 = _966 * 0.5;
        float _1069 = dot(vec3(_1066, _1067, _1068), vec3(_1066, _1067, _1068));
        float _1074 = (_1069 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1069);
        float _1082 = (dot(vec3(_535, _536, _537), vec3(_1074 * _1066, _1074 * _1067, _1074 * _1068)) + 1.0) * 0.5;
        float _4061 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1091 = sqrt(((_1067 * _1067) + (_1066 * _1066)) + (_1068 * _1068)) / (_979 + 9.9999997473787516355514526367188e-06);
        float _4072 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1092 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
        float _1093 = _1092 * 2.0;
        float _1097 = (1.0 - _1092) / (_1092 + 1.0);
        float _4083 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1098 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
        float _1107 = ((((1.0 - _1098) * (_1093 + 2.0)) * exp2(log2(isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0))) * (_1093 + 1.0))) + _1098) * _979;
        _1115 = _946;
        _1117 = _945;
        _1118 = _944;
        _1119 = _956;
        _1120 = _955;
        _1121 = _954;
        _1122 = _966;
        _1123 = _965;
        _1124 = _964;
        _1125 = _979;
        _1126 = _978;
        _1127 = _977;
        _1128 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0)));
        _1129 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0)));
        _1130 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0)));
    }
    else
    {
        _1115 = _1116;
        _1117 = _1116;
        _1118 = _1116;
        _1119 = _1116;
        _1120 = _1116;
        _1121 = _1116;
        _1122 = _1116;
        _1123 = _1116;
        _1124 = _1116;
        _1125 = _1116;
        _1126 = _1116;
        _1127 = _1116;
        _1128 = 0.0;
        _1129 = 0.0;
        _1130 = 0.0;
    }
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1158 = fma(_787, cbModelParam._m0[30u].z, fma(_783, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _779));
        float _1162 = fma(_787, cbModelParam._m0[31u].z, fma(_783, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _779));
        float _1166 = fma(_787, cbModelParam._m0[32u].z, fma(_783, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _779));
        float _1189 = _779 + _535;
        float _1190 = _783 + _536;
        float _1191 = _787 + _537;
        float _1201 = fma(_1191, cbModelParam._m0[30u].z, fma(_1190, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1189)) - _1158;
        float _1202 = fma(_1191, cbModelParam._m0[31u].z, fma(_1190, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1189)) - _1162;
        float _1203 = fma(_1191, cbModelParam._m0[32u].z, fma(_1190, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1189)) - _1166;
        float _1207 = inversesqrt(dot(vec3(_1201, _1202, _1203), vec3(_1201, _1202, _1203)));
        float _1220 = ((_1207 * _1201) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1158 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1221 = ((_1207 * _1202) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1162 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1222 = ((_1207 * _1203) / cbModelParam._m0[35u].z) + ((((((_1166 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1224 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1220, _1221, _1222), 0.0);
        vec4 _1231 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1220, _1221, _1222), 0.0);
        vec4 _1238 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1220, _1221, _1222), 0.0);
        vec4 _1245 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1220, _1221, _1222), 0.0);
        float _1257 = exp2((_1224.w + (-0.5)) * 20.0) * 2.0;
        float _1258 = _1257 * (_1224.x + (-0.5));
        float _1259 = _1257 * (_1224.y + (-0.5));
        float _1260 = _1257 * (_1224.z + (-0.5));
        float _1267 = exp2((_1231.w + (-0.5)) * 20.0) * 2.0;
        float _1268 = _1267 * (_1231.x + (-0.5));
        float _1269 = _1267 * (_1231.y + (-0.5));
        float _1270 = _1267 * (_1231.z + (-0.5));
        float _1277 = exp2((_1238.w + (-0.5)) * 20.0) * 2.0;
        float _1278 = _1277 * (_1238.x + (-0.5));
        float _1279 = _1277 * (_1238.y + (-0.5));
        float _1280 = _1277 * (_1238.z + (-0.5));
        float _1287 = exp2((_1245.w + (-0.5)) * 20.0) * 2.0;
        float _1288 = _1287 * (_1245.x + (-0.5));
        float _1289 = _1287 * (_1245.y + (-0.5));
        float _1290 = _1287 * (_1245.z + (-0.5));
        float _1291 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1292 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1293 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1294 = _1258 * 0.5;
        float _1295 = _1268 * 0.5;
        float _1296 = _1278 * 0.5;
        float _1297 = dot(vec3(_1294, _1295, _1296), vec3(_1294, _1295, _1296));
        float _1302 = (_1297 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1297);
        float _1310 = (dot(vec3(_535, _536, _537), vec3(_1302 * _1294, _1302 * _1295, _1302 * _1296)) + 1.0) * 0.5;
        float _4124 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1319 = sqrt(((_1295 * _1295) + (_1294 * _1294)) + (_1296 * _1296)) / (_1291 + 9.9999997473787516355514526367188e-06);
        float _4135 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1320 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
        float _1321 = _1320 * 2.0;
        float _1325 = (1.0 - _1320) / (_1320 + 1.0);
        float _4146 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1326 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
        float _1335 = ((((1.0 - _1326) * (_1321 + 2.0)) * exp2(log2(isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0))) * (_1321 + 1.0))) + _1326) * _1291;
        float _1336 = _1259 * 0.5;
        float _1337 = _1269 * 0.5;
        float _1338 = _1279 * 0.5;
        float _1339 = dot(vec3(_1336, _1337, _1338), vec3(_1336, _1337, _1338));
        float _1344 = (_1339 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1339);
        float _1352 = (dot(vec3(_535, _536, _537), vec3(_1344 * _1336, _1344 * _1337, _1344 * _1338)) + 1.0) * 0.5;
        float _4157 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1361 = sqrt(((_1337 * _1337) + (_1336 * _1336)) + (_1338 * _1338)) / (_1292 + 9.9999997473787516355514526367188e-06);
        float _4168 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1362 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
        float _1363 = _1362 * 2.0;
        float _1367 = (1.0 - _1362) / (_1362 + 1.0);
        float _4179 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1368 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
        float _1377 = ((((1.0 - _1368) * (_1363 + 2.0)) * exp2(log2(isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0))) * (_1363 + 1.0))) + _1368) * _1292;
        float _1378 = _1260 * 0.5;
        float _1379 = _1270 * 0.5;
        float _1380 = _1280 * 0.5;
        float _1381 = dot(vec3(_1378, _1379, _1380), vec3(_1378, _1379, _1380));
        float _1386 = (_1381 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1381);
        float _1394 = (dot(vec3(_535, _536, _537), vec3(_1386 * _1378, _1386 * _1379, _1386 * _1380)) + 1.0) * 0.5;
        float _4190 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1403 = sqrt(((_1379 * _1379) + (_1378 * _1378)) + (_1380 * _1380)) / (_1293 + 9.9999997473787516355514526367188e-06);
        float _4201 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1404 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
        float _1405 = _1404 * 2.0;
        float _1409 = (1.0 - _1404) / (_1404 + 1.0);
        float _4212 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1410 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
        float _1419 = ((((1.0 - _1410) * (_1405 + 2.0)) * exp2(log2(isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0))) * (_1405 + 1.0))) + _1410) * _1293;
        _1427 = _1260;
        _1428 = _1259;
        _1429 = _1258;
        _1430 = _1270;
        _1431 = _1269;
        _1432 = _1268;
        _1433 = _1280;
        _1434 = _1279;
        _1435 = _1278;
        _1436 = _1293;
        _1437 = _1292;
        _1438 = _1291;
        _1439 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0)));
        _1440 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0)));
        _1441 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0)));
    }
    else
    {
        _1427 = _1116;
        _1428 = _1116;
        _1429 = _1116;
        _1430 = _1116;
        _1431 = _1116;
        _1432 = _1116;
        _1433 = _1116;
        _1434 = _1116;
        _1435 = _1116;
        _1436 = _1116;
        _1437 = _1116;
        _1438 = _1116;
        _1439 = 0.0;
        _1440 = 0.0;
        _1441 = 0.0;
    }
    float _1451 = (cbModelParam._m0[1u].x * (_1439 - _1128)) + _1128;
    float _1452 = (cbModelParam._m0[1u].x * (_1440 - _1129)) + _1129;
    float _1453 = (cbModelParam._m0[1u].x * (_1441 - _1130)) + _1130;
    float _1474 = fma(_1453, cbSceneParam._m0[89u].z, fma(_1452, cbSceneParam._m0[89u].y, _1451 * cbSceneParam._m0[89u].x));
    float _1477 = fma(_1453, cbSceneParam._m0[90u].z, fma(_1452, cbSceneParam._m0[90u].y, _1451 * cbSceneParam._m0[90u].x));
    float _1480 = fma(_1453, cbSceneParam._m0[91u].z, fma(_1452, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1451));
    float _1495 = _724 * 0.5;
    float _1496 = _725 * 0.5;
    float _1497 = _726 * 0.5;
    float _1498 = dot(vec4(_1495, _1496, _1497, 1.0), vec4(_1429, _1432, _1435, _1438));
    float _1501 = dot(vec4(_1495, _1496, _1497, 1.0), vec4(_1428, _1431, _1434, _1437));
    float _1504 = dot(vec4(_1495, _1496, _1497, 1.0), vec4(_1427, _1430, _1433, _1436));
    float _1538;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1511 = dot(vec4(_1495, _1496, _1497, 1.0), vec4(_1115, _1119, _1122, _1125));
        float _1515 = dot(vec4(_1495, _1496, _1497, 1.0), vec4(_1117, _1120, _1123, _1126));
        float _1519 = dot(vec4(_1495, _1496, _1497, 1.0), vec4(_1118, _1121, _1124, _1127));
        float _1526 = dot(vec4(cbModelParam._m0[39u]), vec4(_1495, _1496, _1497, 1.0));
        _1538 = dot(vec3(isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0)), isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0)), isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1526) ? 0.0 : (isnan(0.0) ? _1526 : max(0.0, _1526))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1538 = 1.0;
    }
    float _1549;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1540 = dot(vec4(cbModelParam._m0[40u]), vec4(_1495, _1496, _1497, 1.0));
        _1549 = dot(vec3(isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0)), isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0)), isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1540) ? 0.0 : (isnan(0.0) ? _1540 : max(0.0, _1540))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1549 = 1.0;
    }
    float _1553 = (_1549 * cbModelParam._m0[1u].x) + (_1538 * (1.0 - cbModelParam._m0[1u].x));
    float _1563 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _538);
    float _1564 = isnan(_1563) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1563 : min(cbModelParam._m0[25u].z, _1563));
    float _1646;
    float _1648;
    float _1650;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1613 = fma(_787, cbModelParam._m0[13u].z, fma(_783, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _779)) + cbModelParam._m0[13u].w;
        float _1617 = fma(_787, cbModelParam._m0[14u].z, fma(_783, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _779)) + cbModelParam._m0[14u].w;
        float _1621 = fma(_787, cbModelParam._m0[15u].z, fma(_783, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _779)) + cbModelParam._m0[15u].w;
        float _1624 = fma(_726, cbModelParam._m0[13u].z, fma(_725, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _724));
        float _1627 = fma(_726, cbModelParam._m0[14u].z, fma(_725, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _724));
        float _1630 = fma(_726, cbModelParam._m0[15u].z, fma(_725, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _724));
        float _1658;
        if (_1624 > 0.0)
        {
            _1658 = abs((1.0 - _1613) / _1624);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1624 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1613 + 1.0) / _1624);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1658 = frontier_phi_17_15_ladder;
        }
        float _1830;
        if (_1627 > 0.0)
        {
            _1830 = abs((1.0 - _1617) / _1627);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1627 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1617 + 1.0) / _1627);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1830 = frontier_phi_26_22_ladder;
        }
        float _2126;
        if (_1630 > 0.0)
        {
            _2126 = abs((1.0 - _1621) / _1630);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1630 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1621 + 1.0) / _1630);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2126 = frontier_phi_38_33_ladder;
        }
        float _2128 = isnan(_1830) ? _1658 : (isnan(_1658) ? _1830 : min(_1658, _1830));
        float _2129 = isnan(_2126) ? _2128 : (isnan(_2128) ? _2126 : min(_2128, _2126));
        float _2133 = (_2129 * _1624) + _1613;
        float _2134 = (_2129 * _1627) + _1617;
        float _2135 = (_2129 * _1630) + _1621;
        float _2136 = _2129 * 9.9999997473787516355514526367188e-05;
        float _2138 = (-1.0) - _2136;
        float _2140 = _2136 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2135 > _2140) || ((_2135 < _2138) || ((_2134 > _2140) || ((_2134 < _2138) || ((_2133 < _2138) || (_2133 > _2140))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2280 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2135, cbModelParam._m0[9u].z, fma(_2134, cbModelParam._m0[9u].y, _2133 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2135, cbModelParam._m0[10u].z, fma(_2134, cbModelParam._m0[10u].y, _2133 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2135, cbModelParam._m0[11u].z, fma(_2134, cbModelParam._m0[11u].y, _2133 * cbModelParam._m0[11u].x))), _1564);
            frontier_phi_16_38_ladder = _2280.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2280.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2280.x * cbModelParam._m0[1u].y;
        }
        _1646 = frontier_phi_16_38_ladder_2;
        _1648 = frontier_phi_16_38_ladder_1;
        _1650 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1634 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_724, _725, _726), _1564);
        _1646 = _1634.x * cbModelParam._m0[1u].y;
        _1648 = _1634.y * cbModelParam._m0[1u].y;
        _1650 = _1634.z * cbModelParam._m0[1u].y;
    }
    float _1654 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _538);
    float _1655 = isnan(_1654) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1654 : min(cbModelParam._m0[25u].w, _1654));
    float _1745;
    float _1747;
    float _1749;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1709 = fma(_787, cbModelParam._m0[21u].z, fma(_783, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _779)) + cbModelParam._m0[21u].w;
        float _1713 = fma(_787, cbModelParam._m0[22u].z, fma(_783, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _779)) + cbModelParam._m0[22u].w;
        float _1717 = fma(_787, cbModelParam._m0[23u].z, fma(_783, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _779)) + cbModelParam._m0[23u].w;
        float _1720 = fma(_726, cbModelParam._m0[21u].z, fma(_725, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _724));
        float _1723 = fma(_726, cbModelParam._m0[22u].z, fma(_725, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _724));
        float _1726 = fma(_726, cbModelParam._m0[23u].z, fma(_725, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _724));
        float _1835;
        if (_1720 > 0.0)
        {
            _1835 = abs((1.0 - _1709) / _1720);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1720 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1709 + 1.0) / _1720);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1835 = frontier_phi_28_24_ladder;
        }
        float _2153;
        if (_1723 > 0.0)
        {
            _2153 = abs((1.0 - _1713) / _1723);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1723 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1713 + 1.0) / _1723);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2153 = frontier_phi_40_35_ladder;
        }
        float _2491;
        if (_1726 > 0.0)
        {
            _2491 = abs((1.0 - _1717) / _1726);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1726 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1717 + 1.0) / _1726);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2491 = frontier_phi_50_47_ladder;
        }
        float _2493 = isnan(_2153) ? _1835 : (isnan(_1835) ? _2153 : min(_1835, _2153));
        float _2494 = isnan(_2491) ? _2493 : (isnan(_2493) ? _2491 : min(_2493, _2491));
        float _2498 = (_2494 * _1720) + _1709;
        float _2499 = (_2494 * _1723) + _1713;
        float _2500 = (_2494 * _1726) + _1717;
        float _2501 = _2494 * 9.9999997473787516355514526367188e-05;
        float _2502 = (-1.0) - _2501;
        float _2504 = _2501 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2500 > _2504) || ((_2500 < _2502) || ((_2499 > _2504) || ((_2499 < _2502) || ((_2498 < _2502) || (_2498 > _2504))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2622 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2500, cbModelParam._m0[17u].z, fma(_2499, cbModelParam._m0[17u].y, _2498 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2500, cbModelParam._m0[18u].z, fma(_2499, cbModelParam._m0[18u].y, _2498 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2500, cbModelParam._m0[19u].z, fma(_2499, cbModelParam._m0[19u].y, _2498 * cbModelParam._m0[19u].x))), _1655);
            frontier_phi_25_50_ladder = _2622.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2622.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2622.x * cbModelParam._m0[1u].z;
        }
        _1745 = frontier_phi_25_50_ladder_2;
        _1747 = frontier_phi_25_50_ladder_1;
        _1749 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1729 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_724, _725, _726), _1655);
        _1745 = _1729.x * cbModelParam._m0[1u].z;
        _1747 = _1729.y * cbModelParam._m0[1u].z;
        _1749 = _1729.z * cbModelParam._m0[1u].z;
    }
    float _1762 = (((_750 * _700) + _751) * _716) * ((cbModelParam._m0[1u].w * (_1745 - _1646)) + _1646);
    float _1764 = (((_750 * _702) + _751) * _716) * ((cbModelParam._m0[1u].w * (_1747 - _1648)) + _1648);
    float _1766 = (((_750 * _703) + _751) * _716) * ((cbModelParam._m0[1u].w * (_1749 - _1650)) + _1650);
    float _1769 = fma(_1766, cbSceneParam._m0[89u].z, fma(_1764, cbSceneParam._m0[89u].y, _1762 * cbSceneParam._m0[89u].x));
    float _1772 = fma(_1766, cbSceneParam._m0[90u].z, fma(_1764, cbSceneParam._m0[90u].y, _1762 * cbSceneParam._m0[90u].x));
    float _1775 = fma(_1766, cbSceneParam._m0[91u].z, fma(_1764, cbSceneParam._m0[91u].y, _1762 * cbSceneParam._m0[91u].x));
    float _1809 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1813 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1817 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1821 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1822 = _1809 / _1821;
    float _1823 = _1813 / _1821;
    float _1824 = _1817 / _1821;
    float _1971;
    float _1972;
    float _1973;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1851 = ((uint(_1824 > cbSceneParam._m0[59u].y) + uint(_1824 > cbSceneParam._m0[59u].x)) + uint(_1824 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1852 = _1851 + 43u;
        uint _1860 = _1851 + 44u;
        uint _1868 = _1851 + 45u;
        uint _1876 = _1851 + 46u;
        float _1887 = fma(_1821, cbSceneParam._m0[_1852].w, fma(_1817, cbSceneParam._m0[_1852].z, fma(_1813, cbSceneParam._m0[_1852].y, _1809 * cbSceneParam._m0[_1852].x)));
        float _1891 = fma(_1821, cbSceneParam._m0[_1860].w, fma(_1817, cbSceneParam._m0[_1860].z, fma(_1813, cbSceneParam._m0[_1860].y, _1809 * cbSceneParam._m0[_1860].x)));
        float _1899 = fma(_1821, cbSceneParam._m0[_1876].w, fma(_1817, cbSceneParam._m0[_1876].z, fma(_1813, cbSceneParam._m0[_1876].y, _1809 * cbSceneParam._m0[_1876].x)));
        float _1904 = cbSceneParam._m0[33u].z * _1899;
        float _1906 = cbSceneParam._m0[33u].w * _1899;
        float _1909 = fma(_1821, cbSceneParam._m0[_1868].w, fma(_1817, cbSceneParam._m0[_1868].z, fma(_1813, cbSceneParam._m0[_1868].y, _1809 * cbSceneParam._m0[_1868].x))) / _1899;
        float _1957 = (cbSceneParam._m0[33u].x - sqrt(((_1823 * _1823) + (_1822 * _1822)) + (_1824 * _1824))) * cbSceneParam._m0[33u].y;
        float _4338 = isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0));
        float _1964 = (isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1904 + _1887) / _1899, (_1906 + _1891) / _1899), _1909), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1906 + _1887) / _1899, (_1891 - _1904) / _1899), _1909), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1887 - _1904) / _1899, (_1891 - _1906) / _1899), _1909), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1887 - _1906) / _1899, (_1904 + _1891) / _1899), _1909), 0.0)).x), vec4(0.25)));
        _1971 = 1.0 - (_1964 * cbSceneParam._m0[34u].x);
        _1972 = 1.0 - (_1964 * cbSceneParam._m0[34u].y);
        _1973 = 1.0 - (_1964 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1971 = 1.0;
        _1972 = 1.0;
        _1973 = 1.0;
    }
    float _2037;
    float _2039;
    float _2041;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2025 = fma(_1821, cbSceneParam._m0[63u].w, fma(_1817, cbSceneParam._m0[63u].z, fma(_1813, cbSceneParam._m0[63u].y, _1809 * cbSceneParam._m0[63u].x)));
        float _2026 = fma(_1821, cbSceneParam._m0[60u].w, fma(_1817, cbSceneParam._m0[60u].z, fma(_1813, cbSceneParam._m0[60u].y, _1809 * cbSceneParam._m0[60u].x))) / _2025;
        float _2027 = fma(_1821, cbSceneParam._m0[61u].w, fma(_1817, cbSceneParam._m0[61u].z, fma(_1813, cbSceneParam._m0[61u].y, _1809 * cbSceneParam._m0[61u].x))) / _2025;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2026 >= cbSceneParam._m0[64u].x) && (_2027 >= cbSceneParam._m0[64u].y)) && (_2026 <= cbSceneParam._m0[64u].z)) && (_2027 <= cbSceneParam._m0[64u].w))
        {
            float _2166 = fma(_1821, cbSceneParam._m0[62u].w, fma(_1817, cbSceneParam._m0[62u].z, fma(_1813, cbSceneParam._m0[62u].y, _1809 * cbSceneParam._m0[62u].x))) / _2025;
            float _2170 = isnan(cbSceneParam._m0[41u].w) ? _2166 : (isnan(_2166) ? cbSceneParam._m0[41u].w : max(_2166, cbSceneParam._m0[41u].w));
            float _2213 = (cbSceneParam._m0[33u].x - sqrt(((_1823 * _1823) + (_1822 * _1822)) + (_1824 * _1824))) * cbSceneParam._m0[33u].y;
            float _4354 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
            float _2220 = (isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2026, cbSceneParam._m0[33u].w + _2027), _2170), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2026, _2027 - cbSceneParam._m0[33u].z), _2170), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2026 - cbSceneParam._m0[33u].z, _2027 - cbSceneParam._m0[33u].w), _2170), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2026 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2027), _2170), 0.0)).x), vec4(0.25)));
            float _2224 = 1.0 - (_2220 * cbSceneParam._m0[34u].x);
            float _2225 = 1.0 - (_2220 * cbSceneParam._m0[34u].y);
            float _2226 = 1.0 - (_2220 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2226) ? _1973 : (isnan(_1973) ? _2226 : min(_1973, _2226));
            frontier_phi_37_36_ladder_1 = isnan(_2225) ? _1972 : (isnan(_1972) ? _2225 : min(_1972, _2225));
            frontier_phi_37_36_ladder_2 = isnan(_2224) ? _1971 : (isnan(_1971) ? _2224 : min(_1971, _2224));
        }
        else
        {
            frontier_phi_37_36_ladder = _1973;
            frontier_phi_37_36_ladder_1 = _1972;
            frontier_phi_37_36_ladder_2 = _1971;
        }
        _2037 = frontier_phi_37_36_ladder_2;
        _2039 = frontier_phi_37_36_ladder_1;
        _2041 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2037 = _1971;
        _2039 = _1972;
        _2041 = _1973;
    }
    uvec4 _2046 = floatBitsToUint(cbInstanceData._m0[_297 + 5u]);
    uint _2048 = _2046.x * 14u;
    uint _2049 = _2048 + 13u;
    float _2056 = _716 + (-1.0);
    float _2061 = (cbLight._m0[_2049].x * _2056) + 1.0;
    float _2062 = (cbLight._m0[_2049].y * _2056) + 1.0;
    float _2063 = (cbLight._m0[_2049].z * _2056) + 1.0;
    float _2064 = (cbLight._m0[_2049].w * _2056) + 1.0;
    uint _2065 = _2048 + 5u;
    float _2071 = isnan(1.0) ? _2062 : (isnan(_2062) ? 1.0 : min(_2062, 1.0));
    uint _2075 = _2048 + 4u;
    float _2085 = isnan(1.0) ? _2061 : (isnan(_2061) ? 1.0 : min(_2061, 1.0));
    uint _2089 = _2048 | 1u;
    float _2100 = dot(vec3(cbLight._m0[_2048].xyz), vec3(_535, _536, _537));
    float _2103 = dot(vec3(cbLight._m0[_2089].xyz), vec3(_535, _536, _537));
    float _4390 = isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0));
    float _4401 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
    float _2108 = (isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0))) * 0.3183098733425140380859375;
    float _2110 = (isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0))) * 0.3183098733425140380859375;
    float _2117 = ((cbLight._m0[_2065].x * _2071) * _2110) + (((cbLight._m0[_2075].x * _2037) * _2085) * _2108);
    float _2118 = ((_2071 * cbLight._m0[_2065].y) * _2110) + (((cbLight._m0[_2075].y * _2039) * _2085) * _2108);
    float _2119 = ((_2071 * cbLight._m0[_2065].z) * _2110) + (((cbLight._m0[_2075].z * _2041) * _2085) * _2108);
    uvec4 _2123 = floatBitsToUint(cbLight._m0[_2048 + 12u]);
    bool _2125 = _2123.x == 0u;
    float _2227;
    float _2229;
    float _2231;
    if (_2125)
    {
        _2227 = _2117;
        _2229 = _2118;
        _2231 = _2119;
    }
    else
    {
        uint _2235 = _2048 + 6u;
        float _2251 = (dot(vec3(cbLight._m0[_2048 + 2u].xyz), vec3(_535, _536, _537)) * 0.5) + 0.5;
        float _2252 = _2251 * _2251;
        float _4412 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
        float _2253 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
        float _2254 = isnan(1.0) ? _2063 : (isnan(_2063) ? 1.0 : min(_2063, 1.0));
        _2227 = (((cbLight._m0[_2235].x * 0.3183098733425140380859375) * _2253) * _2254) + _2117;
        _2229 = (((cbLight._m0[_2235].y * 0.3183098733425140380859375) * _2253) * _2254) + _2118;
        _2231 = (((cbLight._m0[_2235].z * 0.3183098733425140380859375) * _2253) * _2254) + _2119;
    }
    bool _2234 = _2123.y == 0u;
    float _2289;
    float _2291;
    float _2293;
    if (_2234)
    {
        _2289 = _2227;
        _2291 = _2229;
        _2293 = _2231;
    }
    else
    {
        uint _2462 = _2048 + 7u;
        float _2478 = (dot(vec3(cbLight._m0[_2048 + 3u].xyz), vec3(_535, _536, _537)) * 0.5) + 0.5;
        float _2479 = _2478 * _2478;
        float _4428 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0));
        float _2480 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
        float _2481 = isnan(1.0) ? _2064 : (isnan(_2064) ? 1.0 : min(_2064, 1.0));
        _2289 = (((cbLight._m0[_2462].x * 0.3183098733425140380859375) * _2480) * _2481) + _2227;
        _2291 = (((cbLight._m0[_2462].y * 0.3183098733425140380859375) * _2480) * _2481) + _2229;
        _2293 = (((cbLight._m0[_2462].z * 0.3183098733425140380859375) * _2480) * _2481) + _2231;
    }
    uint _2296 = _2048 + 8u;
    float _2309 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2048].w)) * _538) * 0.949999988079071044921875);
    float _2310 = _2309 * _2309;
    float _2311 = cbLight._m0[_2048].x + _615;
    float _2312 = cbLight._m0[_2048].y + _616;
    float _2313 = cbLight._m0[_2048].z + _617;
    float _2317 = inversesqrt(dot(vec3(_2311, _2312, _2313), vec3(_2311, _2312, _2313)));
    float _2318 = _2317 * _2311;
    float _2319 = _2317 * _2312;
    float _2320 = _2317 * _2313;
    float _2321 = dot(vec3(_535, _536, _537), vec3(cbLight._m0[_2048].xyz));
    float _4444 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
    float _2324 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
    float _4455 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
    float _2325 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
    float _2326 = dot(vec3(_535, _536, _537), vec3(_2318, _2319, _2320));
    float _4466 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
    float _2329 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
    float _2330 = dot(vec3(cbLight._m0[_2048].xyz), vec3(_2318, _2319, _2320));
    float _4477 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
    float _2334 = _2310 * _2310;
    float _2338 = ((_2329 * _2329) * (_2334 + (-1.0))) + 1.0;
    float _2346 = exp2(log2(1.0 - (isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0)))) * 5.0);
    float _2347 = 0.959999978542327880859375 - _697;
    float _2349 = 0.959999978542327880859375 - _698;
    float _2350 = 0.959999978542327880859375 - _699;
    float _2357 = 1.0 - _2310;
    float _2368 = (0.5 / (((_2325 * ((_2324 * _2357) + _2310)) + 9.9999999392252902907785028219223e-09) + (((_2325 * _2357) + _2310) * _2324))) * _2324;
    float _4488 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
    float _2370 = (isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0))) * (_2334 / ((_2338 * _2338) * 3.141590118408203125));
    uint _2384 = _2048 + 9u;
    float _2395 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2089].w)) * _538) * 0.949999988079071044921875);
    float _2396 = _2395 * _2395;
    float _2397 = cbLight._m0[_2089].x + _615;
    float _2398 = cbLight._m0[_2089].y + _616;
    float _2399 = cbLight._m0[_2089].z + _617;
    float _2403 = inversesqrt(dot(vec3(_2397, _2398, _2399), vec3(_2397, _2398, _2399)));
    float _2404 = _2403 * _2397;
    float _2405 = _2403 * _2398;
    float _2406 = _2403 * _2399;
    float _2407 = dot(vec3(_535, _536, _537), vec3(cbLight._m0[_2089].xyz));
    float _4499 = isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0));
    float _2410 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
    float _2411 = dot(vec3(_535, _536, _537), vec3(_2404, _2405, _2406));
    float _4510 = isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0));
    float _2414 = isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0));
    float _2415 = dot(vec3(cbLight._m0[_2089].xyz), vec3(_2404, _2405, _2406));
    float _4521 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0));
    float _2419 = _2396 * _2396;
    float _2423 = ((_2414 * _2414) * (_2419 + (-1.0))) + 1.0;
    float _2430 = exp2(log2(1.0 - (isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0)))) * 5.0);
    float _2437 = 1.0 - _2396;
    float _2447 = (0.5 / (((_2325 * ((_2410 * _2437) + _2396)) + 9.9999999392252902907785028219223e-09) + (((_2325 * _2437) + _2396) * _2410))) * _2410;
    float _4532 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
    float _2449 = (isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0))) * (_2419 / ((_2423 * _2423) * 3.141590118408203125));
    float _2459 = (((((_2430 * _2347) + _700) * cbLight._m0[_2384].x) * _2449) * _2071) + ((((cbLight._m0[_2296].x * _2037) * ((_2346 * _2347) + _700)) * _2370) * _2085);
    float _2460 = (((((_2430 * _2349) + _702) * cbLight._m0[_2384].y) * _2449) * _2071) + ((((cbLight._m0[_2296].y * _2039) * ((_2346 * _2349) + _702)) * _2370) * _2085);
    float _2461 = (((((_2430 * _2350) + _703) * cbLight._m0[_2384].z) * _2449) * _2071) + ((((cbLight._m0[_2296].z * _2041) * ((_2346 * _2350) + _703)) * _2370) * _2085);
    float _2517;
    float _2519;
    float _2521;
    if (_2125)
    {
        _2517 = _2459;
        _2519 = _2460;
        _2521 = _2461;
    }
    else
    {
        uint _2523 = _2048 + 2u;
        uint _2527 = _2048 + 10u;
        float _2541 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2523].w)) * _538) * 0.949999988079071044921875);
        float _2542 = _2541 * _2541;
        float _2543 = cbLight._m0[_2523].x + _615;
        float _2544 = cbLight._m0[_2523].y + _616;
        float _2545 = cbLight._m0[_2523].z + _617;
        float _2549 = inversesqrt(dot(vec3(_2543, _2544, _2545), vec3(_2543, _2544, _2545)));
        float _2550 = _2549 * _2543;
        float _2551 = _2549 * _2544;
        float _2552 = _2549 * _2545;
        float _2553 = dot(vec3(_535, _536, _537), vec3(cbLight._m0[_2523].xyz));
        float _4543 = isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : max(_2553, 0.0));
        float _2556 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
        float _2557 = dot(vec3(_535, _536, _537), vec3(_2550, _2551, _2552));
        float _4554 = isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : max(_2557, 0.0));
        float _2560 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
        float _2561 = dot(vec3(cbLight._m0[_2523].xyz), vec3(_2550, _2551, _2552));
        float _4565 = isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0));
        float _2565 = _2542 * _2542;
        float _2569 = ((_2560 * _2560) * (_2565 + (-1.0))) + 1.0;
        float _2576 = exp2(log2(1.0 - (isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0)))) * 5.0);
        float _2583 = 1.0 - _2542;
        float _2593 = (0.5 / (((_2325 * ((_2556 * _2583) + _2542)) + 9.9999999392252902907785028219223e-09) + (((_2325 * _2583) + _2542) * _2556))) * _2556;
        float _4576 = isnan(0.0) ? _2593 : (isnan(_2593) ? 0.0 : max(_2593, 0.0));
        float _2595 = (isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0))) * (_2565 / ((_2569 * _2569) * 3.141590118408203125));
        float _2596 = isnan(1.0) ? _2063 : (isnan(_2063) ? 1.0 : min(_2063, 1.0));
        _2517 = (((((_2576 * _2347) + _700) * cbLight._m0[_2527].x) * _2595) * _2596) + _2459;
        _2519 = (((((_2576 * _2349) + _702) * cbLight._m0[_2527].y) * _2595) * _2596) + _2460;
        _2521 = (((((_2576 * _2350) + _703) * cbLight._m0[_2527].z) * _2595) * _2596) + _2461;
    }
    float _2627;
    float _2629;
    float _2631;
    if (_2234)
    {
        _2627 = _2517;
        _2629 = _2519;
        _2631 = _2521;
    }
    else
    {
        uint _2638 = _2048 + 3u;
        uint _2642 = _2048 + 11u;
        float _2656 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2638].w)) * _538) * 0.949999988079071044921875);
        float _2657 = _2656 * _2656;
        float _2658 = cbLight._m0[_2638].x + _615;
        float _2659 = cbLight._m0[_2638].y + _616;
        float _2660 = cbLight._m0[_2638].z + _617;
        float _2664 = inversesqrt(dot(vec3(_2658, _2659, _2660), vec3(_2658, _2659, _2660)));
        float _2665 = _2664 * _2658;
        float _2666 = _2664 * _2659;
        float _2667 = _2664 * _2660;
        float _2668 = dot(vec3(_535, _536, _537), vec3(cbLight._m0[_2638].xyz));
        float _4592 = isnan(0.0) ? _2668 : (isnan(_2668) ? 0.0 : max(_2668, 0.0));
        float _2671 = isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0));
        float _2672 = dot(vec3(_535, _536, _537), vec3(_2665, _2666, _2667));
        float _4603 = isnan(0.0) ? _2672 : (isnan(_2672) ? 0.0 : max(_2672, 0.0));
        float _2675 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
        float _2676 = dot(vec3(cbLight._m0[_2638].xyz), vec3(_2665, _2666, _2667));
        float _4614 = isnan(0.0) ? _2676 : (isnan(_2676) ? 0.0 : max(_2676, 0.0));
        float _2680 = _2657 * _2657;
        float _2684 = ((_2675 * _2675) * (_2680 + (-1.0))) + 1.0;
        float _2691 = exp2(log2(1.0 - (isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0)))) * 5.0);
        float _2698 = 1.0 - _2657;
        float _2708 = (0.5 / (((_2325 * ((_2671 * _2698) + _2657)) + 9.9999999392252902907785028219223e-09) + (((_2325 * _2698) + _2657) * _2671))) * _2671;
        float _4625 = isnan(0.0) ? _2708 : (isnan(_2708) ? 0.0 : max(_2708, 0.0));
        float _2710 = (isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0))) * (_2680 / ((_2684 * _2684) * 3.141590118408203125));
        float _2711 = isnan(1.0) ? _2064 : (isnan(_2064) ? 1.0 : min(_2064, 1.0));
        _2627 = (((((_2691 * _2347) + _700) * cbLight._m0[_2642].x) * _2710) * _2711) + _2517;
        _2629 = (((((_2691 * _2349) + _702) * cbLight._m0[_2642].y) * _2710) * _2711) + _2519;
        _2631 = (((((_2691 * _2350) + _703) * cbLight._m0[_2642].z) * _2710) * _2711) + _2521;
    }
    float _2777;
    float _2779;
    float _2781;
    float _2783;
    float _2785;
    float _2787;
    if (_2046.y == 0u)
    {
        uvec4 _2732 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2733 = _2732.x;
        uint _2744 = uint((float(_2732.y) * floor(float(uint(cbSceneParam._m0[85u].y * _637) / _2733))) + floor(float(uint(cbSceneParam._m0[85u].x * _636) / _2733)));
        float _2754 = (log2(_1824 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2755 = isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : max(_2754, 0.0));
        uint _2758 = uint(isnan(14.0) ? _2755 : (isnan(_2755) ? 14.0 : min(_2755, 14.0)));
        uvec4 _2763 = texelFetch(g_lightClusterGridBuffer, int(((_2758 << 2u) + (_2744 << 6u)) >> 2u));
        uint _2764 = _2763.x;
        uint _2765 = _2732.z;
        float _2844;
        float _2846;
        float _2848;
        float _2850;
        float _2852;
        float _2854;
        if (((((1u << ((_2765 >> 4u) & 15u)) + 4294967295u) & _2764) == 0u) || ((_2765 & 240u) == 0u))
        {
            _2844 = 0.0;
            _2846 = 0.0;
            _2848 = 0.0;
            _2850 = 0.0;
            _2852 = 0.0;
            _2854 = 0.0;
        }
        else
        {
            float _2845;
            float _2847;
            float _2849;
            float _2851;
            float _2853;
            float _2855;
            float _2997 = 0.0;
            float _2998 = 0.0;
            float _2999 = 0.0;
            float _3000 = 0.0;
            float _3001 = 0.0;
            float _3002 = 0.0;
            uint _3003 = 0u;
            uint _3012;
            bool _3013;
            for (;;)
            {
                _3012 = texelFetch(g_lightClassification, int((((_2758 << 5u) + (_2744 << 9u)) + (_3003 << 2u)) >> 2u)).x;
                _3013 = _3012 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3013)
                {
                    frontier_phi_71_pred = _3002;
                    frontier_phi_71_pred_1 = _3001;
                    frontier_phi_71_pred_2 = _3000;
                    frontier_phi_71_pred_3 = _2999;
                    frontier_phi_71_pred_4 = _2998;
                    frontier_phi_71_pred_5 = _2997;
                }
                else
                {
                    float _3142;
                    float _3143;
                    float _3144;
                    float _3145;
                    float _3146;
                    float _3147;
                    uint _3148;
                    _3142 = _2997;
                    _3143 = _2998;
                    _3144 = _2999;
                    _3145 = _3000;
                    _3146 = _3001;
                    _3147 = _3002;
                    _3148 = _3012;
                    float _3069;
                    float _3070;
                    float _3071;
                    float _3072;
                    float _3073;
                    float _3074;
                    for (;;)
                    {
                        uint _3152 = uint(findLSB(_3148)) + (_3003 << 5u);
                        uint _3149 = (_3148 + 4294967295u) & _3148;
                        uint _3154 = _3152 * 48u;
                        vec4 _3168 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3154)).x, texelFetch(g_PointLightRenderingBuffer, int(_3154 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3154 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3154 + 3u)).x));
                        uint _3174 = (_3152 * 48u) + 4u;
                        vec4 _3187 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3174)).x, texelFetch(g_PointLightRenderingBuffer, int(_3174 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3174 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3174 + 3u)).x));
                        uint _3193 = (_3152 * 48u) + 8u;
                        vec3 _3204 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3193)).x, texelFetch(g_PointLightRenderingBuffer, int(_3193 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3193 + 2u)).x));
                        float _3208 = _3168.x - _1822;
                        float _3209 = _3168.y - _1823;
                        float _3210 = _3168.z - _1824;
                        float _3211 = dot(vec3(_3208, _3209, _3210), vec3(_3208, _3209, _3210));
                        float _3214 = inversesqrt(_3211);
                        float _3215 = _3214 * _3208;
                        float _3216 = _3214 * _3209;
                        float _3217 = _3214 * _3210;
                        float _3218 = dot(vec3(_657, _660, _663), vec3(_3215, _3216, _3217));
                        float _3223 = 1.0 - (_3211 * _3168.w);
                        float _4651 = isnan(0.0) ? _3223 : (isnan(_3223) ? 0.0 : max(_3223, 0.0));
                        float _3224 = isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0));
                        float _3225 = sqrt(_3211) * _3187.w;
                        float _3228 = 1.39999997615814208984375 / (_3225 + 1.39999997615814208984375);
                        float _3229 = _3228 * _3228;
                        float _3232 = ((1.0 - _3229) * _3218) + _3229;
                        float _3235 = _3225 * _3225;
                        float _3239 = ((isnan(0.0) ? _3232 : (isnan(_3232) ? 0.0 : max(_3232, 0.0))) * _3224) / ((_3235 * 0.699999988079071044921875) + 1.0);
                        float _3243 = (-0.0) - _1822;
                        float _3244 = (-0.0) - _1823;
                        float _3245 = (-0.0) - _1824;
                        float _3249 = inversesqrt(dot(vec3(_3243, _3244, _3245), vec3(_3243, _3244, _3245)));
                        float _3250 = _3249 * _3243;
                        float _3251 = _3249 * _3244;
                        float _3252 = _3249 * _3245;
                        float _3259 = exp2(log2(1.0 / ((_3235 * 3.5) + 5.0)) * 0.25);
                        float _3260 = 1.0 - _732;
                        float _3267 = sqrt(1.0 - ((1.0 - (_3260 * _3260)) * (1.0 - (_3259 * _3259))));
                        float _3268 = _3267 * _3267;
                        float _3269 = _3268 * _3268;
                        float _3270 = _3250 + _3215;
                        float _3271 = _3251 + _3216;
                        float _3272 = _3252 + _3217;
                        float _3276 = inversesqrt(dot(vec3(_3270, _3271, _3272), vec3(_3270, _3271, _3272)));
                        float _3280 = dot(vec3(_657, _660, _663), vec3(_3250, _3251, _3252));
                        float _4667 = isnan(0.0) ? _3280 : (isnan(_3280) ? 0.0 : max(_3280, 0.0));
                        float _3283 = isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0));
                        float _3284 = dot(vec3(_657, _660, _663), vec3(_3276 * _3270, _3276 * _3271, _3276 * _3272));
                        float _4678 = isnan(0.0) ? _3284 : (isnan(_3284) ? 0.0 : max(_3284, 0.0));
                        float _3287 = isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0));
                        float _3291 = ((_3287 * _3287) * (_3269 + (-1.0))) + 1.0;
                        float _3292 = _3228 * _3268;
                        float _3293 = _3292 * _3292;
                        float _3296 = ((1.0 - _3293) * _3218) + _3293;
                        float _4689 = isnan(0.0) ? _3296 : (isnan(_3296) ? 0.0 : max(_3296, 0.0));
                        float _3297 = isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0));
                        float _3298 = 1.0 - _3268;
                        float _3308 = (0.5 / (((_3297 * ((_3283 * _3298) + _3268)) + 9.9999999392252902907785028219223e-09) + (((_3297 * _3298) + _3268) * _3283))) * _3297;
                        float _4700 = isnan(0.0) ? _3308 : (isnan(_3308) ? 0.0 : max(_3308, 0.0));
                        float _3318 = (((_3269 * 3.1415927410125732421875) * (isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0)))) / ((_3291 * _3291) * ((_3235 * 2.1991131305694580078125) + 3.141590118408203125))) * _3224;
                        _3072 = (_3239 * _3187.x) + _3145;
                        _3073 = (_3239 * _3187.y) + _3146;
                        _3074 = (_3239 * _3187.z) + _3147;
                        _3069 = (_3318 * _3204.x) + _3142;
                        _3070 = (_3318 * _3204.y) + _3143;
                        _3071 = (_3318 * _3204.z) + _3144;
                        if (_3149 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3142 = _3069;
                            _3143 = _3070;
                            _3144 = _3071;
                            _3145 = _3072;
                            _3146 = _3073;
                            _3147 = _3074;
                            _3148 = _3149;
                        }
                    }
                    frontier_phi_71_pred = _3074;
                    frontier_phi_71_pred_1 = _3073;
                    frontier_phi_71_pred_2 = _3072;
                    frontier_phi_71_pred_3 = _3071;
                    frontier_phi_71_pred_4 = _3070;
                    frontier_phi_71_pred_5 = _3069;
                }
                _2855 = frontier_phi_71_pred;
                _2853 = frontier_phi_71_pred_1;
                _2851 = frontier_phi_71_pred_2;
                _2849 = frontier_phi_71_pred_3;
                _2847 = frontier_phi_71_pred_4;
                _2845 = frontier_phi_71_pred_5;
                uint _3004 = _3003 + 1u;
                if (_3004 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2997 = _2845;
                    _2998 = _2847;
                    _2999 = _2849;
                    _3000 = _2851;
                    _3001 = _2853;
                    _3002 = _2855;
                    _3003 = _3004;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2844 = _2845;
            _2846 = _2847;
            _2848 = _2849;
            _2850 = _2851;
            _2852 = _2853;
            _2854 = _2855;
        }
        uvec4 _2858 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2859 = _2858.z;
        uint _2861 = (_2859 >> 8u) & 15u;
        float _2965;
        float _2967;
        float _2969;
        float _2971;
        float _2973;
        float _2975;
        if (((4294967295u << _2861) & _2764) == 0u)
        {
            _2965 = _2844;
            _2967 = _2846;
            _2969 = _2848;
            _2971 = _2850;
            _2973 = _2852;
            _2975 = _2854;
        }
        else
        {
            float _2990 = inversesqrt(dot(vec3(_1822, _1823, _1824), vec3(_1822, _1823, _1824)));
            float _2991 = _2990 * _1822;
            float _2992 = _2990 * _1823;
            float _2993 = _2990 * _1824;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2861 < ((_2859 >> 12u) & 15u))
            {
                float _2966;
                float _2968;
                float _2970;
                float _2972;
                float _2974;
                float _2976;
                float _3125 = _2844;
                float _3126 = _2846;
                float _3127 = _2848;
                float _3128 = _2850;
                float _3129 = _2852;
                float _3130 = _2854;
                uint _3131 = _2861;
                uint _3140;
                bool _3141;
                for (;;)
                {
                    _3140 = texelFetch(g_lightClassification, int((((_2758 << 5u) + (_2744 << 9u)) + (_3131 << 2u)) >> 2u)).x;
                    _3141 = _3140 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3141)
                    {
                        frontier_phi_82_pred = _3130;
                        frontier_phi_82_pred_1 = _3129;
                        frontier_phi_82_pred_2 = _3128;
                        frontier_phi_82_pred_3 = _3127;
                        frontier_phi_82_pred_4 = _3126;
                        frontier_phi_82_pred_5 = _3125;
                    }
                    else
                    {
                        float _3332;
                        float _3333;
                        float _3334;
                        float _3335;
                        float _3336;
                        float _3337;
                        float _3627;
                        float _3628;
                        float _3629;
                        float _3630;
                        float _3631;
                        float _3632;
                        float _3345 = _3125;
                        float _3346 = _3126;
                        float _3347 = _3127;
                        float _3348 = _3128;
                        float _3349 = _3129;
                        float _3350 = _3130;
                        uint _3351 = _3140;
                        uint _3352;
                        vec4 _3377;
                        float _3378;
                        vec4 _3393;
                        vec3 _3405;
                        vec4 _3421;
                        vec4 _3437;
                        float _3483;
                        bool _3484;
                        for (;;)
                        {
                            uint _3362 = ((_3131 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3351));
                            _3352 = (_3351 + 4294967295u) & _3351;
                            uint _3364 = _3362 * 40u;
                            _3377 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3364)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 3u)).x));
                            _3378 = _3377.w;
                            uint _3380 = (_3362 * 40u) + 4u;
                            _3393 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3380)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 3u)).x));
                            uint _3395 = (_3362 * 40u) + 8u;
                            _3405 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3395)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 2u)).x));
                            uint _3408 = (_3362 * 40u) + 16u;
                            _3421 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3408)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3408 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3408 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3408 + 3u)).x));
                            uint _3424 = (_3362 * 40u) + 20u;
                            _3437 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3424)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 3u)).x));
                            uint _3439 = (_3362 * 40u) + 24u;
                            vec4 _3452 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3439)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3439 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3439 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3439 + 3u)).x));
                            uint _3458 = (_3362 * 40u) + 28u;
                            vec4 _3471 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3458)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 3u)).x));
                            _3483 = fma(_1824, _3471.z, fma(_1823, _3471.y, _3471.x * _1822)) + _3471.w;
                            _3484 = !((fma(_1824, _3452.z, fma(_1823, _3452.y, _3452.x * _1822)) + _3452.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3484)
                            {
                                float _3511 = _3377.x - _1822;
                                float _3512 = _3377.y - _1823;
                                float _3513 = _3377.z - _1824;
                                float _3514 = dot(vec3(_3511, _3512, _3513), vec3(_3511, _3512, _3513));
                                float _3517 = inversesqrt(_3514);
                                float _3518 = _3517 * _3511;
                                float _3519 = _3517 * _3512;
                                float _3520 = _3517 * _3513;
                                float _3524 = 1.0 - (_3514 / (_3378 * _3378));
                                float _4711 = isnan(0.0) ? _3524 : (isnan(_3524) ? 0.0 : max(_3524, 0.0));
                                float _3525 = isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0));
                                float _3529 = sqrt(_3514) * _3393.w;
                                float _3531 = 1.39999997615814208984375 / (_3529 + 1.39999997615814208984375);
                                float _3532 = _3531 * _3531;
                                float _3535 = ((1.0 - _3532) * dot(vec3(_3518, _3519, _3520), vec3(_657, _660, _663))) + _3532;
                                float _3538 = _3529 * _3529;
                                float _3542 = (fma(_1824, _3421.z, fma(_1823, _3421.y, _3421.x * _1822)) + _3421.w) / _3483;
                                float _3543 = (fma(_1824, _3437.z, fma(_1823, _3437.y, _3437.x * _1822)) + _3437.w) / _3483;
                                float _3547 = 1.0 - dot(vec2(_3542, _3543), vec2(_3542, _3543));
                                float _4727 = isnan(0.0) ? _3547 : (isnan(_3547) ? 0.0 : max(_3547, 0.0));
                                float _3548 = isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0));
                                float _3549 = _3548 * (((isnan(0.0) ? _3535 : (isnan(_3535) ? 0.0 : max(_3535, 0.0))) * _3525) / ((_3538 * 0.699999988079071044921875) + 1.0));
                                float _3561 = exp2(log2(1.0 / ((_3538 * 3.5) + 5.0)) * 0.25);
                                float _3562 = 1.0 - _732;
                                float _3569 = sqrt(1.0 - ((1.0 - (_3562 * _3562)) * (1.0 - (_3561 * _3561))));
                                float _3570 = _3569 * _3569;
                                float _3571 = _3570 * _3570;
                                float _3572 = _3518 - _2991;
                                float _3573 = _3519 - _2992;
                                float _3574 = _3520 - _2993;
                                float _3578 = inversesqrt(dot(vec3(_3572, _3573, _3574), vec3(_3572, _3573, _3574)));
                                float _3582 = dot(vec3(_657, _660, _663), vec3((-0.0) - _2991, (-0.0) - _2992, (-0.0) - _2993));
                                float _4738 = isnan(0.0) ? _3582 : (isnan(_3582) ? 0.0 : max(_3582, 0.0));
                                float _3585 = isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0));
                                float _3586 = dot(vec3(_657, _660, _663), vec3(_3578 * _3572, _3578 * _3573, _3578 * _3574));
                                float _4749 = isnan(0.0) ? _3586 : (isnan(_3586) ? 0.0 : max(_3586, 0.0));
                                float _3589 = isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0));
                                float _3593 = ((_3589 * _3589) * (_3571 + (-1.0))) + 1.0;
                                float _3594 = _3531 * _3570;
                                float _3595 = _3594 * _3594;
                                float _3601 = ((1.0 - _3595) * dot(vec3(_657, _660, _663), vec3(_3518, _3519, _3520))) + _3595;
                                float _4760 = isnan(0.0) ? _3601 : (isnan(_3601) ? 0.0 : max(_3601, 0.0));
                                float _3602 = isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0));
                                float _3603 = 1.0 - _3570;
                                float _3613 = (0.5 / (((_3602 * ((_3585 * _3603) + _3570)) + 9.9999999392252902907785028219223e-09) + (((_3602 * _3603) + _3570) * _3585))) * _3602;
                                float _4771 = isnan(0.0) ? _3613 : (isnan(_3613) ? 0.0 : max(_3613, 0.0));
                                float _3623 = (_3548 * _3525) * (((_3571 * 3.1415927410125732421875) * (isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0)))) / ((_3593 * _3593) * ((_3538 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3549 * _3393.z;
                                frontier_phi_88_pred_1 = _3549 * _3393.y;
                                frontier_phi_88_pred_2 = _3549 * _3393.x;
                                frontier_phi_88_pred_3 = _3623 * _3405.z;
                                frontier_phi_88_pred_4 = _3623 * _3405.y;
                                frontier_phi_88_pred_5 = _3623 * _3405.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3632 = frontier_phi_88_pred;
                            _3631 = frontier_phi_88_pred_1;
                            _3630 = frontier_phi_88_pred_2;
                            _3629 = frontier_phi_88_pred_3;
                            _3628 = frontier_phi_88_pred_4;
                            _3627 = frontier_phi_88_pred_5;
                            _3335 = _3630 + _3348;
                            _3336 = _3631 + _3349;
                            _3337 = _3632 + _3350;
                            _3332 = _3627 + _3345;
                            _3333 = _3628 + _3346;
                            _3334 = _3629 + _3347;
                            if (_3352 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3345 = _3332;
                                _3346 = _3333;
                                _3347 = _3334;
                                _3348 = _3335;
                                _3349 = _3336;
                                _3350 = _3337;
                                _3351 = _3352;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3337;
                        frontier_phi_82_pred_1 = _3336;
                        frontier_phi_82_pred_2 = _3335;
                        frontier_phi_82_pred_3 = _3334;
                        frontier_phi_82_pred_4 = _3333;
                        frontier_phi_82_pred_5 = _3332;
                    }
                    _2976 = frontier_phi_82_pred;
                    _2974 = frontier_phi_82_pred_1;
                    _2972 = frontier_phi_82_pred_2;
                    _2970 = frontier_phi_82_pred_3;
                    _2968 = frontier_phi_82_pred_4;
                    _2966 = frontier_phi_82_pred_5;
                    uint _3132 = _3131 + 1u;
                    if (_3132 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3125 = _2966;
                        _3126 = _2968;
                        _3127 = _2970;
                        _3128 = _2972;
                        _3129 = _2974;
                        _3130 = _2976;
                        _3131 = _3132;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2972;
                frontier_phi_63_64_ladder_1 = _2976;
                frontier_phi_63_64_ladder_2 = _2974;
                frontier_phi_63_64_ladder_3 = _2970;
                frontier_phi_63_64_ladder_4 = _2968;
                frontier_phi_63_64_ladder_5 = _2966;
            }
            else
            {
                frontier_phi_63_64_ladder = _2850;
                frontier_phi_63_64_ladder_1 = _2854;
                frontier_phi_63_64_ladder_2 = _2852;
                frontier_phi_63_64_ladder_3 = _2848;
                frontier_phi_63_64_ladder_4 = _2846;
                frontier_phi_63_64_ladder_5 = _2844;
            }
            _2965 = frontier_phi_63_64_ladder_5;
            _2967 = frontier_phi_63_64_ladder_4;
            _2969 = frontier_phi_63_64_ladder_3;
            _2971 = frontier_phi_63_64_ladder;
            _2973 = frontier_phi_63_64_ladder_2;
            _2975 = frontier_phi_63_64_ladder_1;
        }
        float _2980 = isnan(1.0) ? _716 : (isnan(_716) ? 1.0 : min(_716, 1.0));
        _2777 = (_2980 * _2971) + _2289;
        _2779 = (_2980 * _2973) + _2291;
        _2781 = (_2980 * _2975) + _2293;
        _2783 = ((_2965 * _700) * _2980) + _2627;
        _2785 = ((_2967 * _702) * _2980) + _2629;
        _2787 = ((_2969 * _703) * _2980) + _2631;
    }
    else
    {
        _2777 = _2289;
        _2779 = _2291;
        _2781 = _2293;
        _2783 = _2627;
        _2785 = _2629;
        _2787 = _2631;
    }
    float _4787 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _4798 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _4809 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
    float _2804 = ((isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0))) * (_2777 + ((isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0))) * _716))) + ((_2783 + ((isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0))) * _1553)) * cbPerFrame._m0[3u].x);
    float _2805 = ((isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0))) * (_2779 + ((isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0))) * _716))) + ((_2785 + ((isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0))) * _1553)) * cbPerFrame._m0[3u].x);
    float _2806 = ((isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0))) * (_2781 + ((isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0))) * _716))) + ((_2787 + ((isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0))) * _1553)) * cbPerFrame._m0[3u].x);
    uint _2807 = _297 + 6u;
    float _2815 = _636 / cbSceneParam._m0[86u].x;
    float _2816 = _637 / cbSceneParam._m0[86u].y;
    vec4 _2830 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2815, _2816, (log2((isnan(cbSceneParam._m0[77u].w) ? _557 : (isnan(_557) ? cbSceneParam._m0[77u].w : min(_557, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2832 = _2830.x;
    float _2833 = _2830.y;
    float _2834 = _2830.z;
    float _2835 = _2830.w;
    float _2907;
    float _2909;
    float _2911;
    float _2913;
    if (_557 > cbSceneParam._m0[78u].w)
    {
        float _2869 = isnan(_557) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _557 : min(cbSceneParam._m0[80u].w, _557));
        float _2870 = _2869 / _557;
        float _2881 = _2870 * _608;
        float _2882 = _609 * _2870;
        float _2883 = (-0.0) - _2882;
        float _2885 = _2870 * _610;
        float _2887 = (cbSceneParam._m0[77u].w * _2883) / _2869;
        float _2888 = _2887 + cbSceneParam._m0[79u].w;
        float _2889 = cbSceneParam._m0[79u].w - _2882;
        float _2895 = sqrt(((_2881 * _2881) + (_2882 * _2882)) + (_2885 * _2885));
        float _2898 = (1.0 - (cbSceneParam._m0[77u].w / _2869)) * _2895;
        float _2903 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2905 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3082;
        if (abs((_2883 - _2887) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3082 = ((((_2888 > 0.0) ? exp2(_2903 * _2888) : (2.0 - exp2(_2905 * _2888))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2898;
        }
        else
        {
            float _3026 = 1.0 / cbSceneParam._m0[80u].x;
            float _3027 = isnan(_2889) ? _2888 : (isnan(_2888) ? _2889 : max(_2888, _2889));
            float _3028 = isnan(_2889) ? _2888 : (isnan(_2888) ? _2889 : min(_2888, _2889));
            float _3037 = isnan(0.0) ? _3027 : (isnan(_3027) ? 0.0 : min(_3027, 0.0));
            float _3038 = isnan(0.0) ? _3028 : (isnan(_3028) ? 0.0 : min(_3028, 0.0));
            _3082 = ((abs(_2895 / _2883) * cbSceneParam._m0[80u].y) * ((((_3037 - _3038) * 2.0) - ((exp2(_2903 * (isnan(0.0) ? _3027 : (isnan(_3027) ? 0.0 : max(_3027, 0.0)))) - exp2(_2903 * (isnan(0.0) ? _3028 : (isnan(_3028) ? 0.0 : max(_3028, 0.0))))) * _3026)) - ((exp2(_2905 * _3037) - exp2(_2905 * _3038)) * _3026))) + (_2898 * cbSceneParam._m0[80u].z);
        }
        vec4 _3084 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2815, _2816, 1.0), 0.0);
        float _3093 = exp2((_3082 * (-1.44269502162933349609375)) * (1.0 - _3084.w));
        float _3094 = log2(_3093);
        float _3110 = log2(_2835);
        _2907 = (exp2(_3110 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3094 * cbSceneParam._m0[78u].x)) * _3084.x) / cbSceneParam._m0[78u].x)) + _2832;
        _2909 = (exp2(_3110 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3094 * cbSceneParam._m0[78u].y)) * _3084.y) / cbSceneParam._m0[78u].y)) + _2833;
        _2911 = (exp2(_3110 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3094 * cbSceneParam._m0[78u].z)) * _3084.z) / cbSceneParam._m0[78u].z)) + _2834;
        _2913 = _3093 * _2835;
    }
    else
    {
        _2907 = _2832;
        _2909 = _2833;
        _2911 = _2834;
        _2913 = _2835;
    }
    bool _3120;
    vec4 _2923;
    vec4 _2945;
    float _2947;
    float _2951;
    float _2952;
    float _2953;
    float _2954;
    bool _2964;
    for (;;)
    {
        _2923 = cbMatDynParam._m0[0u];
        float _2925 = roundEven(_2923.y);
        bool _2926 = _2925 == 3.0;
        float _2927 = log2(_2913);
        float _2934 = exp2(_2927 * cbSceneParam._m0[78u].x) * _2804;
        float _2935 = exp2(_2927 * cbSceneParam._m0[78u].y) * _2805;
        float _2936 = exp2(_2927 * cbSceneParam._m0[78u].z) * _2806;
        float _2943 = _624 + (-0.5);
        _2945 = cbMtdParam._m0[1u];
        _2947 = _2945.y * _2943;
        float _2950 = (_2925 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2951 = _2950 * (_2926 ? _2934 : (_2934 + (cbSceneParam._m0[72u].w * _2907)));
        _2952 = _2950 * (_2926 ? _2935 : (_2935 + (cbSceneParam._m0[72u].w * _2909)));
        _2953 = _2950 * (_2926 ? _2936 : (_2936 + (cbSceneParam._m0[72u].w * _2911)));
        _2954 = _2943 * 0.999000012874603271484375;
        _2964 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2964)
        {
            if ((cbInstanceData._m0[_297 + 7u].x + _2954) < 0.5)
            {
                _3120 = true;
                break;
            }
        }
        uint _3061 = _676 + uint(_2923.w);
        if ((cbInstanceData._m0[_3061].w < 1.0) && ((cbInstanceData._m0[_3061].w + _2954) < 0.5))
        {
            _3120 = true;
            break;
        }
        if ((_2947 + 1.0) < _2945.x)
        {
            _3120 = true;
            break;
        }
        _3120 = false;
        break;
    }
    float _3323;
    if (_3120)
    {
        discard_state = true;
        _3323 = 0.0;
    }
    else
    {
        _3323 = cbInstanceData._m0[_2807].w;
    }
    SV_Target.x = _2951;
    SV_Target.y = _2952;
    SV_Target.z = _2953;
    SV_Target.w = _3323;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2807].w;
    discard_exit();
}


