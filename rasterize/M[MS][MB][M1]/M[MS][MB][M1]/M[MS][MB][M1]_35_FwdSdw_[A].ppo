#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1295;
float _3959;
float _3960;
float _3961;
float _3962;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _226 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _227 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _228 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _234 = inversesqrt(dot(vec3(_226, _227, _228), vec3(_226, _227, _228)));
    float _235 = _234 * _226;
    float _236 = _234 * _227;
    float _237 = _234 * _228;
    float _241 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _242 = _241 * NORMAL.x;
    float _243 = _241 * NORMAL.y;
    float _244 = _241 * NORMAL.z;
    float _248 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _249 = _248 * TANGENT.x;
    float _250 = _248 * TANGENT.y;
    float _251 = _248 * TANGENT.z;
    float _260 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _262 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _263 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3971 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    float _3982 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    float _3993 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    uint _273 = uint(roundEven(NORMAL.w)) * 13u;
    uint _278 = _273 + 1u;
    uint _282 = _273 + 2u;
    float _291 = sqrt(((cbInstanceData._m0[_278].x * cbInstanceData._m0[_278].x) + (cbInstanceData._m0[_273].x * cbInstanceData._m0[_273].x)) + (cbInstanceData._m0[_282].x * cbInstanceData._m0[_282].x));
    float _292 = _291 * TEXCOORD.z;
    float _293 = _291 * TEXCOORD.w;
    vec4 _306 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _292) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _293) + cbTextureTilingScale._m0[13u].w));
    vec4 _329 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _334 = _329.x * cbMtdParam._m0[9u].x;
    float _335 = _329.y * cbMtdParam._m0[9u].y;
    float _336 = _329.z * cbMtdParam._m0[9u].z;
    float _340 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _306.x) * _334;
    float _343 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _306.y) * _335;
    float _346 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _306.z) * _336;
    float _353 = ((_334 - _340) * (isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0)))) + _340;
    float _354 = ((_335 - _343) * (isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0)))) + _343;
    float _355 = ((_336 - _346) * (isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0)))) + _346;
    vec4 _373 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _292) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _293) + cbTextureTilingScale._m0[20u].w));
    vec4 _399 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _403 = _399.z;
    float _407 = (_399.x * 2.0) + (-1.0);
    float _408 = (_399.y * 2.0) + (-1.0);
    float _409 = dot(vec2(_407, _408), vec2(_407, _408));
    float _4004 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _414 = sqrt(1.0 - (isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0))));
    float _419 = _407 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_373.x * 2.0) + (-1.0)));
    float _420 = _408 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_373.y * 2.0) + (-1.0)));
    float _423 = fma(_414, _242, fma(_420, _249, _419 * _235));
    float _426 = fma(_414, _243, fma(_420, _250, _419 * _236));
    float _429 = fma(_414, _244, fma(_420, _251, _419 * _237));
    float _433 = inversesqrt(dot(vec3(_423, _426, _429), vec3(_423, _426, _429)));
    vec4 _469 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _292) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _293) + cbTextureTilingScale._m0[11u].w));
    float _471 = _469.x;
    float _472 = 1.0 - _471;
    float _479 = ((_471 - _472) * cbMtdParam._m0[24u].z) + _472;
    float _481 = (cbMtdParam._m0[19u].x + dot(vec4(_433 * _423, _433 * _426, _433 * _429, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_479 * cbMtdParam._m0[21u].z);
    float _4015 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _482 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
    float _484 = (-0.0) - cbMtdParam._m0[24u].x;
    float _486 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _487 = isnan(1.0) ? _486 : (isnan(_486) ? 1.0 : min(_486, 1.0));
    float _494 = _482 - ((_482 * TEXCOORD_8.x) * _487);
    float _495 = _482 - ((_482 * TEXCOORD_8.y) * _487);
    float _496 = _482 - ((_482 * TEXCOORD_8.z) * _487);
    float _503 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _507 = ((isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : min(_503, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _515 = (_507 - (((_479 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _507))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4046 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _516 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
    float _520 = ((_494 * (cbMtdParam._m0[17u].x - _353)) * _516) + _353;
    float _521 = ((_495 * (cbMtdParam._m0[17u].y - _354)) * _516) + _354;
    float _522 = ((_496 * (cbMtdParam._m0[17u].z - _355)) * _516) + _355;
    vec4 _534 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _292) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _293) + cbTextureTilingScale._m0[19u].w));
    float _536 = _534.x;
    float _537 = 1.0 - _536;
    float _564 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_536 - _537) * cbMtdParam._m0[24u].w) + _537) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4057 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _565 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
    float _573 = ((((cbMtdParam._m0[10u].x - _520) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _565) + _520;
    float _574 = ((((cbMtdParam._m0[10u].y - _521) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _565) + _521;
    float _575 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _522)) * _565) + _522;
    vec4 _588 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _590 = _588.x;
    float _593 = _590 - ((_590 * _494) * _516);
    float _595 = _593 - (_593 * _565);
    float _600 = (((_373.z - _403) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _403;
    vec4 _614 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _292) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _293) + cbTextureTilingScale._m0[15u].w));
    float _621 = (_614.x * 2.0) + (-1.0);
    float _622 = (_614.y * 2.0) + (-1.0);
    float _623 = dot(vec2(_621, _622), vec2(_621, _622));
    float _4068 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _632 = (((_614.z - _600) * _494) * _516) + _600;
    float _635 = ((cbMtdParam._m0[23u].y - _632) * _565) + _632;
    vec4 _654 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _292) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _293) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _660 = (_654.x * 2.0) + (-1.0);
    float _661 = (_654.y * 2.0) + (-1.0);
    float _662 = dot(vec2(_660, _661), vec2(_660, _661));
    float _4079 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _682 = (((cbMtdParam._m0[21u].x * _419) + ((_621 - _419) * _494)) * _516) + _419;
    float _683 = (((cbMtdParam._m0[21u].x * _420) + ((_622 - _420) * _495)) * _516) + _420;
    float _684 = (((sqrt(1.0 - (isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0)))) - _414) * _496) * _516) + _414;
    float _695 = (((_660 - _682) + (_682 * cbMtdParam._m0[22u].z)) * _565) + _682;
    float _696 = (((_661 - _683) + (_683 * cbMtdParam._m0[22u].z)) * _565) + _683;
    float _697 = ((sqrt(1.0 - (isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0)))) - _684) * _565) + _684;
    float _699 = cbMtdParam._m0[22u].x + _399.w;
    float _702 = fma(_697, _242, fma(_696, _249, _695 * _235));
    float _705 = fma(_697, _243, fma(_696, _250, _695 * _236));
    float _708 = fma(_697, _244, fma(_696, _251, _695 * _237));
    float _712 = inversesqrt(dot(vec3(_702, _705, _708), vec3(_702, _705, _708)));
    float _713 = _712 * _702;
    float _714 = _712 * _705;
    float _715 = _712 * _708;
    float _4090 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _716 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
    float _4101 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
    float _4112 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _4123 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _4134 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _4145 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _721 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
    float _735 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _775 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _785 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _775);
    float _786 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _775);
    float _787 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _775);
    float _791 = inversesqrt(dot(vec3(_785, _786, _787), vec3(_785, _786, _787)));
    float _792 = _785 * _791;
    float _793 = _786 * _791;
    float _794 = _787 * _791;
    vec4 _799 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _801 = _799.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _976 = sqrt(((_785 * _785) + (_786 * _786)) + (_787 * _787));
        float _982 = (cbMatDynParam._m0[5u].x * _976) + cbMatDynParam._m0[5u].y;
        float _4156 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _983 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
        float _987 = (cbMatDynParam._m0[5u].z * _976) + cbMatDynParam._m0[5u].w;
        float _4167 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0))) - _983)) + _983) < ((_801 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _813 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _814 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _834 = fma(_715, cbSceneParam._m0[5u].z, fma(_714, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _713));
    float _837 = fma(_715, cbSceneParam._m0[6u].z, fma(_714, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _713));
    float _840 = fma(_715, cbSceneParam._m0[7u].z, fma(_714, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _713));
    uint _853 = _273 + 9u;
    uint _854 = _853 + uint(cbMatDynParam._m0[0u].w);
    float _860 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0)))) * cbInstanceData._m0[_854].x;
    float _861 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0)))) * cbInstanceData._m0[_854].y;
    float _862 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0)))) * cbInstanceData._m0[_854].z;
    float _4178 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
    float _863 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
    float _4189 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
    float _864 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
    float _4200 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
    float _865 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
    float _866 = 1.0 - _721;
    float _867 = _863 * _866;
    float _868 = _864 * _866;
    float _869 = _865 * _866;
    float _874 = (_863 + (-0.039999999105930328369140625)) * _721;
    float _875 = (_864 + (-0.039999999105930328369140625)) * _721;
    float _876 = (_865 + (-0.039999999105930328369140625)) * _721;
    float _877 = _874 + 0.039999999105930328369140625;
    float _879 = _875 + 0.039999999105930328369140625;
    float _880 = _876 + 0.039999999105930328369140625;
    vec4 _889 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _813, cbSceneParam._m0[86u].y * _814));
    float _893 = ((isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0))) * TEXCOORD_5.w) * _889.x;
    float _894 = dot(vec3(_713, _714, _715), vec3(_792, _793, _794));
    float _897 = _894 * 2.0;
    float _901 = (_897 * _713) - _792;
    float _902 = (_897 * _714) - _793;
    float _903 = (_897 * _715) - _794;
    float _907 = abs(dot(vec3(_792, _793, _794), vec3(_713, _714, _715)));
    float _4211 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
    float _909 = sqrt(_716);
    float _922 = exp2((_909 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_909 * 3.0));
    float _928 = (1.0 - _922) * ((_909 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _929 = _922 * _909;
    float _957 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _961 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _965 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1294;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1019 = fma(_965, cbModelParam._m0[26u].z, fma(_961, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _957));
        float _1023 = fma(_965, cbModelParam._m0[27u].z, fma(_961, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _957));
        float _1027 = fma(_965, cbModelParam._m0[28u].z, fma(_961, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _957));
        float _1052 = _957 + _713;
        float _1053 = _961 + _714;
        float _1054 = _965 + _715;
        float _1064 = fma(_1054, cbModelParam._m0[26u].z, fma(_1053, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1052)) - _1019;
        float _1065 = fma(_1054, cbModelParam._m0[27u].z, fma(_1053, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1052)) - _1023;
        float _1066 = fma(_1054, cbModelParam._m0[28u].z, fma(_1053, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1052)) - _1027;
        float _1070 = inversesqrt(dot(vec3(_1064, _1065, _1066), vec3(_1064, _1065, _1066)));
        float _1083 = ((_1070 * _1064) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1019 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1084 = ((_1070 * _1065) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1023 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1085 = ((_1070 * _1066) / cbModelParam._m0[34u].z) + ((((((_1027 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1088 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1083, _1084, _1085), 0.0);
        vec4 _1095 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1083, _1084, _1085), 0.0);
        vec4 _1102 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1083, _1084, _1085), 0.0);
        vec4 _1109 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1083, _1084, _1085), 0.0);
        float _1122 = exp2((_1088.w + (-0.5)) * 20.0) * 2.0;
        float _1123 = _1122 * (_1088.x + (-0.5));
        float _1124 = _1122 * (_1088.y + (-0.5));
        float _1125 = _1122 * (_1088.z + (-0.5));
        float _1132 = exp2((_1095.w + (-0.5)) * 20.0) * 2.0;
        float _1133 = _1132 * (_1095.x + (-0.5));
        float _1134 = _1132 * (_1095.y + (-0.5));
        float _1135 = _1132 * (_1095.z + (-0.5));
        float _1142 = exp2((_1102.w + (-0.5)) * 20.0) * 2.0;
        float _1143 = _1142 * (_1102.x + (-0.5));
        float _1144 = _1142 * (_1102.y + (-0.5));
        float _1145 = _1142 * (_1102.z + (-0.5));
        float _1152 = exp2((_1109.w + (-0.5)) * 20.0) * 2.0;
        float _1153 = _1152 * (_1109.x + (-0.5));
        float _1154 = _1152 * (_1109.y + (-0.5));
        float _1155 = _1152 * (_1109.z + (-0.5));
        float _1156 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1157 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1158 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1159 = _1123 * 0.5;
        float _1160 = _1133 * 0.5;
        float _1161 = _1143 * 0.5;
        float _1162 = dot(vec3(_1159, _1160, _1161), vec3(_1159, _1160, _1161));
        float _1167 = (_1162 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1162);
        float _1176 = (dot(vec3(_713, _714, _715), vec3(_1167 * _1159, _1167 * _1160, _1167 * _1161)) + 1.0) * 0.5;
        float _4237 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1186 = sqrt(((_1160 * _1160) + (_1159 * _1159)) + (_1161 * _1161)) / (_1156 + 9.9999997473787516355514526367188e-06);
        float _4248 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1187 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
        float _1188 = _1187 * 2.0;
        float _1192 = (1.0 - _1187) / (_1187 + 1.0);
        float _4259 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1193 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
        float _1202 = ((((1.0 - _1193) * (_1188 + 2.0)) * exp2(log2(isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0))) * (_1188 + 1.0))) + _1193) * _1156;
        float _1203 = _1124 * 0.5;
        float _1204 = _1134 * 0.5;
        float _1205 = _1144 * 0.5;
        float _1206 = dot(vec3(_1203, _1204, _1205), vec3(_1203, _1204, _1205));
        float _1211 = (_1206 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1206);
        float _1219 = (dot(vec3(_713, _714, _715), vec3(_1211 * _1203, _1211 * _1204, _1211 * _1205)) + 1.0) * 0.5;
        float _4270 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1228 = sqrt(((_1204 * _1204) + (_1203 * _1203)) + (_1205 * _1205)) / (_1157 + 9.9999997473787516355514526367188e-06);
        float _4281 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1229 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
        float _1230 = _1229 * 2.0;
        float _1234 = (1.0 - _1229) / (_1229 + 1.0);
        float _4292 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1235 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
        float _1244 = ((((1.0 - _1235) * (_1230 + 2.0)) * exp2(log2(isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0))) * (_1230 + 1.0))) + _1235) * _1157;
        float _1245 = _1125 * 0.5;
        float _1246 = _1135 * 0.5;
        float _1247 = _1145 * 0.5;
        float _1248 = dot(vec3(_1245, _1246, _1247), vec3(_1245, _1246, _1247));
        float _1253 = (_1248 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1248);
        float _1261 = (dot(vec3(_713, _714, _715), vec3(_1253 * _1245, _1253 * _1246, _1253 * _1247)) + 1.0) * 0.5;
        float _4303 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1270 = sqrt(((_1246 * _1246) + (_1245 * _1245)) + (_1247 * _1247)) / (_1158 + 9.9999997473787516355514526367188e-06);
        float _4314 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1271 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
        float _1272 = _1271 * 2.0;
        float _1276 = (1.0 - _1271) / (_1271 + 1.0);
        float _4325 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1277 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
        float _1286 = ((((1.0 - _1277) * (_1272 + 2.0)) * exp2(log2(isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0))) * (_1272 + 1.0))) + _1277) * _1158;
        _1294 = _1125;
        _1296 = _1124;
        _1297 = _1123;
        _1298 = _1135;
        _1299 = _1134;
        _1300 = _1133;
        _1301 = _1145;
        _1302 = _1144;
        _1303 = _1143;
        _1304 = _1158;
        _1305 = _1157;
        _1306 = _1156;
        _1307 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0)));
        _1308 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0)));
        _1309 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0)));
    }
    else
    {
        _1294 = _1295;
        _1296 = _1295;
        _1297 = _1295;
        _1298 = _1295;
        _1299 = _1295;
        _1300 = _1295;
        _1301 = _1295;
        _1302 = _1295;
        _1303 = _1295;
        _1304 = _1295;
        _1305 = _1295;
        _1306 = _1295;
        _1307 = 0.0;
        _1308 = 0.0;
        _1309 = 0.0;
    }
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1337 = fma(_965, cbModelParam._m0[30u].z, fma(_961, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _957));
        float _1341 = fma(_965, cbModelParam._m0[31u].z, fma(_961, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _957));
        float _1345 = fma(_965, cbModelParam._m0[32u].z, fma(_961, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _957));
        float _1368 = _957 + _713;
        float _1369 = _961 + _714;
        float _1370 = _965 + _715;
        float _1380 = fma(_1370, cbModelParam._m0[30u].z, fma(_1369, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1368)) - _1337;
        float _1381 = fma(_1370, cbModelParam._m0[31u].z, fma(_1369, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1368)) - _1341;
        float _1382 = fma(_1370, cbModelParam._m0[32u].z, fma(_1369, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1368)) - _1345;
        float _1386 = inversesqrt(dot(vec3(_1380, _1381, _1382), vec3(_1380, _1381, _1382)));
        float _1399 = ((_1386 * _1380) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1337 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1400 = ((_1386 * _1381) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1341 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1401 = ((_1386 * _1382) / cbModelParam._m0[35u].z) + ((((((_1345 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1403 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1399, _1400, _1401), 0.0);
        vec4 _1410 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1399, _1400, _1401), 0.0);
        vec4 _1417 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1399, _1400, _1401), 0.0);
        vec4 _1424 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1399, _1400, _1401), 0.0);
        float _1436 = exp2((_1403.w + (-0.5)) * 20.0) * 2.0;
        float _1437 = _1436 * (_1403.x + (-0.5));
        float _1438 = _1436 * (_1403.y + (-0.5));
        float _1439 = _1436 * (_1403.z + (-0.5));
        float _1446 = exp2((_1410.w + (-0.5)) * 20.0) * 2.0;
        float _1447 = _1446 * (_1410.x + (-0.5));
        float _1448 = _1446 * (_1410.y + (-0.5));
        float _1449 = _1446 * (_1410.z + (-0.5));
        float _1456 = exp2((_1417.w + (-0.5)) * 20.0) * 2.0;
        float _1457 = _1456 * (_1417.x + (-0.5));
        float _1458 = _1456 * (_1417.y + (-0.5));
        float _1459 = _1456 * (_1417.z + (-0.5));
        float _1466 = exp2((_1424.w + (-0.5)) * 20.0) * 2.0;
        float _1467 = _1466 * (_1424.x + (-0.5));
        float _1468 = _1466 * (_1424.y + (-0.5));
        float _1469 = _1466 * (_1424.z + (-0.5));
        float _1470 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1471 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1472 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1473 = _1437 * 0.5;
        float _1474 = _1447 * 0.5;
        float _1475 = _1457 * 0.5;
        float _1476 = dot(vec3(_1473, _1474, _1475), vec3(_1473, _1474, _1475));
        float _1481 = (_1476 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1476);
        float _1489 = (dot(vec3(_713, _714, _715), vec3(_1481 * _1473, _1481 * _1474, _1481 * _1475)) + 1.0) * 0.5;
        float _4366 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1498 = sqrt(((_1474 * _1474) + (_1473 * _1473)) + (_1475 * _1475)) / (_1470 + 9.9999997473787516355514526367188e-06);
        float _4377 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1499 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
        float _1500 = _1499 * 2.0;
        float _1504 = (1.0 - _1499) / (_1499 + 1.0);
        float _4388 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1505 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
        float _1514 = ((((1.0 - _1505) * (_1500 + 2.0)) * exp2(log2(isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0))) * (_1500 + 1.0))) + _1505) * _1470;
        float _1515 = _1438 * 0.5;
        float _1516 = _1448 * 0.5;
        float _1517 = _1458 * 0.5;
        float _1518 = dot(vec3(_1515, _1516, _1517), vec3(_1515, _1516, _1517));
        float _1523 = (_1518 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1518);
        float _1531 = (dot(vec3(_713, _714, _715), vec3(_1523 * _1515, _1523 * _1516, _1523 * _1517)) + 1.0) * 0.5;
        float _4399 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1540 = sqrt(((_1516 * _1516) + (_1515 * _1515)) + (_1517 * _1517)) / (_1471 + 9.9999997473787516355514526367188e-06);
        float _4410 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1541 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
        float _1542 = _1541 * 2.0;
        float _1546 = (1.0 - _1541) / (_1541 + 1.0);
        float _4421 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1547 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
        float _1556 = ((((1.0 - _1547) * (_1542 + 2.0)) * exp2(log2(isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0))) * (_1542 + 1.0))) + _1547) * _1471;
        float _1557 = _1439 * 0.5;
        float _1558 = _1449 * 0.5;
        float _1559 = _1459 * 0.5;
        float _1560 = dot(vec3(_1557, _1558, _1559), vec3(_1557, _1558, _1559));
        float _1565 = (_1560 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1560);
        float _1573 = (dot(vec3(_713, _714, _715), vec3(_1565 * _1557, _1565 * _1558, _1565 * _1559)) + 1.0) * 0.5;
        float _4432 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1582 = sqrt(((_1558 * _1558) + (_1557 * _1557)) + (_1559 * _1559)) / (_1472 + 9.9999997473787516355514526367188e-06);
        float _4443 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
        float _1583 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
        float _1584 = _1583 * 2.0;
        float _1588 = (1.0 - _1583) / (_1583 + 1.0);
        float _4454 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
        float _1589 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
        float _1598 = ((((1.0 - _1589) * (_1584 + 2.0)) * exp2(log2(isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0))) * (_1584 + 1.0))) + _1589) * _1472;
        _1606 = _1439;
        _1607 = _1438;
        _1608 = _1437;
        _1609 = _1449;
        _1610 = _1448;
        _1611 = _1447;
        _1612 = _1459;
        _1613 = _1458;
        _1614 = _1457;
        _1615 = _1472;
        _1616 = _1471;
        _1617 = _1470;
        _1618 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0)));
        _1619 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0)));
        _1620 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0)));
    }
    else
    {
        _1606 = _1295;
        _1607 = _1295;
        _1608 = _1295;
        _1609 = _1295;
        _1610 = _1295;
        _1611 = _1295;
        _1612 = _1295;
        _1613 = _1295;
        _1614 = _1295;
        _1615 = _1295;
        _1616 = _1295;
        _1617 = _1295;
        _1618 = 0.0;
        _1619 = 0.0;
        _1620 = 0.0;
    }
    float _1630 = (cbModelParam._m0[1u].x * (_1618 - _1307)) + _1307;
    float _1631 = (cbModelParam._m0[1u].x * (_1619 - _1308)) + _1308;
    float _1632 = (cbModelParam._m0[1u].x * (_1620 - _1309)) + _1309;
    float _1653 = fma(_1632, cbSceneParam._m0[89u].z, fma(_1631, cbSceneParam._m0[89u].y, _1630 * cbSceneParam._m0[89u].x));
    float _1656 = fma(_1632, cbSceneParam._m0[90u].z, fma(_1631, cbSceneParam._m0[90u].y, _1630 * cbSceneParam._m0[90u].x));
    float _1659 = fma(_1632, cbSceneParam._m0[91u].z, fma(_1631, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1630));
    float _1674 = _901 * 0.5;
    float _1675 = _902 * 0.5;
    float _1676 = _903 * 0.5;
    float _1677 = dot(vec4(_1674, _1675, _1676, 1.0), vec4(_1608, _1611, _1614, _1617));
    float _1680 = dot(vec4(_1674, _1675, _1676, 1.0), vec4(_1607, _1610, _1613, _1616));
    float _1683 = dot(vec4(_1674, _1675, _1676, 1.0), vec4(_1606, _1609, _1612, _1615));
    float _1717;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1690 = dot(vec4(_1674, _1675, _1676, 1.0), vec4(_1294, _1298, _1301, _1304));
        float _1694 = dot(vec4(_1674, _1675, _1676, 1.0), vec4(_1296, _1299, _1302, _1305));
        float _1698 = dot(vec4(_1674, _1675, _1676, 1.0), vec4(_1297, _1300, _1303, _1306));
        float _1705 = dot(vec4(cbModelParam._m0[39u]), vec4(_1674, _1675, _1676, 1.0));
        _1717 = dot(vec3(isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0)), isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0)), isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1705) ? 0.0 : (isnan(0.0) ? _1705 : max(0.0, _1705))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1717 = 1.0;
    }
    float _1728;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1719 = dot(vec4(cbModelParam._m0[40u]), vec4(_1674, _1675, _1676, 1.0));
        _1728 = dot(vec3(isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0)), isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0)), isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1719) ? 0.0 : (isnan(0.0) ? _1719 : max(0.0, _1719))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1728 = 1.0;
    }
    float _1732 = (_1728 * cbModelParam._m0[1u].x) + (_1717 * (1.0 - cbModelParam._m0[1u].x));
    float _1742 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _716);
    float _1743 = isnan(_1742) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1742 : min(cbModelParam._m0[25u].z, _1742));
    float _1824;
    float _1826;
    float _1828;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1791 = fma(_965, cbModelParam._m0[13u].z, fma(_961, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _957)) + cbModelParam._m0[13u].w;
        float _1795 = fma(_965, cbModelParam._m0[14u].z, fma(_961, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _957)) + cbModelParam._m0[14u].w;
        float _1799 = fma(_965, cbModelParam._m0[15u].z, fma(_961, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _957)) + cbModelParam._m0[15u].w;
        float _1802 = fma(_903, cbModelParam._m0[13u].z, fma(_902, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _901));
        float _1805 = fma(_903, cbModelParam._m0[14u].z, fma(_902, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _901));
        float _1808 = fma(_903, cbModelParam._m0[15u].z, fma(_902, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _901));
        float _1836;
        if (_1802 > 0.0)
        {
            _1836 = abs((1.0 - _1791) / _1802);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1802 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1791 + 1.0) / _1802);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1836 = frontier_phi_17_15_ladder;
        }
        float _2008;
        if (_1805 > 0.0)
        {
            _2008 = abs((1.0 - _1795) / _1805);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1805 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1795 + 1.0) / _1805);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2008 = frontier_phi_26_22_ladder;
        }
        float _2304;
        if (_1808 > 0.0)
        {
            _2304 = abs((1.0 - _1799) / _1808);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1808 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1799 + 1.0) / _1808);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2304 = frontier_phi_38_33_ladder;
        }
        float _2306 = isnan(_2008) ? _1836 : (isnan(_1836) ? _2008 : min(_1836, _2008));
        float _2307 = isnan(_2304) ? _2306 : (isnan(_2306) ? _2304 : min(_2306, _2304));
        float _2311 = (_2307 * _1802) + _1791;
        float _2312 = (_2307 * _1805) + _1795;
        float _2313 = (_2307 * _1808) + _1799;
        float _2314 = _2307 * 9.9999997473787516355514526367188e-05;
        float _2316 = (-1.0) - _2314;
        float _2318 = _2314 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2313 > _2318) || ((_2313 < _2316) || ((_2312 > _2318) || ((_2312 < _2316) || ((_2311 < _2316) || (_2311 > _2318))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2458 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2313, cbModelParam._m0[9u].z, fma(_2312, cbModelParam._m0[9u].y, _2311 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2313, cbModelParam._m0[10u].z, fma(_2312, cbModelParam._m0[10u].y, _2311 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2313, cbModelParam._m0[11u].z, fma(_2312, cbModelParam._m0[11u].y, _2311 * cbModelParam._m0[11u].x))), _1743);
            frontier_phi_16_38_ladder = _2458.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2458.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2458.x * cbModelParam._m0[1u].y;
        }
        _1824 = frontier_phi_16_38_ladder_2;
        _1826 = frontier_phi_16_38_ladder_1;
        _1828 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1812 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_901, _902, _903), _1743);
        _1824 = _1812.x * cbModelParam._m0[1u].y;
        _1826 = _1812.y * cbModelParam._m0[1u].y;
        _1828 = _1812.z * cbModelParam._m0[1u].y;
    }
    float _1832 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _716);
    float _1833 = isnan(_1832) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1832 : min(cbModelParam._m0[25u].w, _1832));
    float _1923;
    float _1925;
    float _1927;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1887 = fma(_965, cbModelParam._m0[21u].z, fma(_961, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _957)) + cbModelParam._m0[21u].w;
        float _1891 = fma(_965, cbModelParam._m0[22u].z, fma(_961, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _957)) + cbModelParam._m0[22u].w;
        float _1895 = fma(_965, cbModelParam._m0[23u].z, fma(_961, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _957)) + cbModelParam._m0[23u].w;
        float _1898 = fma(_903, cbModelParam._m0[21u].z, fma(_902, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _901));
        float _1901 = fma(_903, cbModelParam._m0[22u].z, fma(_902, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _901));
        float _1904 = fma(_903, cbModelParam._m0[23u].z, fma(_902, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _901));
        float _2013;
        if (_1898 > 0.0)
        {
            _2013 = abs((1.0 - _1887) / _1898);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1898 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1887 + 1.0) / _1898);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2013 = frontier_phi_28_24_ladder;
        }
        float _2331;
        if (_1901 > 0.0)
        {
            _2331 = abs((1.0 - _1891) / _1901);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1901 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1891 + 1.0) / _1901);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2331 = frontier_phi_40_35_ladder;
        }
        float _2669;
        if (_1904 > 0.0)
        {
            _2669 = abs((1.0 - _1895) / _1904);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1904 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1895 + 1.0) / _1904);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2669 = frontier_phi_50_47_ladder;
        }
        float _2671 = isnan(_2331) ? _2013 : (isnan(_2013) ? _2331 : min(_2013, _2331));
        float _2672 = isnan(_2669) ? _2671 : (isnan(_2671) ? _2669 : min(_2671, _2669));
        float _2676 = (_2672 * _1898) + _1887;
        float _2677 = (_2672 * _1901) + _1891;
        float _2678 = (_2672 * _1904) + _1895;
        float _2679 = _2672 * 9.9999997473787516355514526367188e-05;
        float _2680 = (-1.0) - _2679;
        float _2682 = _2679 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2678 > _2682) || ((_2678 < _2680) || ((_2677 > _2682) || ((_2677 < _2680) || ((_2676 < _2680) || (_2676 > _2682))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2800 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2678, cbModelParam._m0[17u].z, fma(_2677, cbModelParam._m0[17u].y, _2676 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2678, cbModelParam._m0[18u].z, fma(_2677, cbModelParam._m0[18u].y, _2676 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2678, cbModelParam._m0[19u].z, fma(_2677, cbModelParam._m0[19u].y, _2676 * cbModelParam._m0[19u].x))), _1833);
            frontier_phi_25_50_ladder = _2800.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2800.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2800.x * cbModelParam._m0[1u].z;
        }
        _1923 = frontier_phi_25_50_ladder_2;
        _1925 = frontier_phi_25_50_ladder_1;
        _1927 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1907 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_901, _902, _903), _1833);
        _1923 = _1907.x * cbModelParam._m0[1u].z;
        _1925 = _1907.y * cbModelParam._m0[1u].z;
        _1927 = _1907.z * cbModelParam._m0[1u].z;
    }
    float _1940 = (((_928 * _877) + _929) * _893) * ((cbModelParam._m0[1u].w * (_1923 - _1824)) + _1824);
    float _1942 = (((_928 * _879) + _929) * _893) * ((cbModelParam._m0[1u].w * (_1925 - _1826)) + _1826);
    float _1944 = (((_928 * _880) + _929) * _893) * ((cbModelParam._m0[1u].w * (_1927 - _1828)) + _1828);
    float _1947 = fma(_1944, cbSceneParam._m0[89u].z, fma(_1942, cbSceneParam._m0[89u].y, _1940 * cbSceneParam._m0[89u].x));
    float _1950 = fma(_1944, cbSceneParam._m0[90u].z, fma(_1942, cbSceneParam._m0[90u].y, _1940 * cbSceneParam._m0[90u].x));
    float _1953 = fma(_1944, cbSceneParam._m0[91u].z, fma(_1942, cbSceneParam._m0[91u].y, _1940 * cbSceneParam._m0[91u].x));
    float _1987 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1991 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1995 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1999 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2000 = _1987 / _1999;
    float _2001 = _1991 / _1999;
    float _2002 = _1995 / _1999;
    float _2149;
    float _2150;
    float _2151;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2029 = ((uint(_2002 > cbSceneParam._m0[59u].y) + uint(_2002 > cbSceneParam._m0[59u].x)) + uint(_2002 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2030 = _2029 + 43u;
        uint _2038 = _2029 + 44u;
        uint _2046 = _2029 + 45u;
        uint _2054 = _2029 + 46u;
        float _2065 = fma(_1999, cbSceneParam._m0[_2030].w, fma(_1995, cbSceneParam._m0[_2030].z, fma(_1991, cbSceneParam._m0[_2030].y, _1987 * cbSceneParam._m0[_2030].x)));
        float _2069 = fma(_1999, cbSceneParam._m0[_2038].w, fma(_1995, cbSceneParam._m0[_2038].z, fma(_1991, cbSceneParam._m0[_2038].y, _1987 * cbSceneParam._m0[_2038].x)));
        float _2077 = fma(_1999, cbSceneParam._m0[_2054].w, fma(_1995, cbSceneParam._m0[_2054].z, fma(_1991, cbSceneParam._m0[_2054].y, _1987 * cbSceneParam._m0[_2054].x)));
        float _2082 = cbSceneParam._m0[33u].z * _2077;
        float _2084 = cbSceneParam._m0[33u].w * _2077;
        float _2087 = fma(_1999, cbSceneParam._m0[_2046].w, fma(_1995, cbSceneParam._m0[_2046].z, fma(_1991, cbSceneParam._m0[_2046].y, _1987 * cbSceneParam._m0[_2046].x))) / _2077;
        float _2135 = (cbSceneParam._m0[33u].x - sqrt(((_2001 * _2001) + (_2000 * _2000)) + (_2002 * _2002))) * cbSceneParam._m0[33u].y;
        float _4580 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
        float _2142 = (isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2082 + _2065) / _2077, (_2084 + _2069) / _2077), _2087), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2084 + _2065) / _2077, (_2069 - _2082) / _2077), _2087), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2065 - _2082) / _2077, (_2069 - _2084) / _2077), _2087), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2065 - _2084) / _2077, (_2082 + _2069) / _2077), _2087), 0.0)).x), vec4(0.25)));
        _2149 = 1.0 - (_2142 * cbSceneParam._m0[34u].x);
        _2150 = 1.0 - (_2142 * cbSceneParam._m0[34u].y);
        _2151 = 1.0 - (_2142 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2149 = 1.0;
        _2150 = 1.0;
        _2151 = 1.0;
    }
    float _2215;
    float _2217;
    float _2219;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2203 = fma(_1999, cbSceneParam._m0[63u].w, fma(_1995, cbSceneParam._m0[63u].z, fma(_1991, cbSceneParam._m0[63u].y, _1987 * cbSceneParam._m0[63u].x)));
        float _2204 = fma(_1999, cbSceneParam._m0[60u].w, fma(_1995, cbSceneParam._m0[60u].z, fma(_1991, cbSceneParam._m0[60u].y, _1987 * cbSceneParam._m0[60u].x))) / _2203;
        float _2205 = fma(_1999, cbSceneParam._m0[61u].w, fma(_1995, cbSceneParam._m0[61u].z, fma(_1991, cbSceneParam._m0[61u].y, _1987 * cbSceneParam._m0[61u].x))) / _2203;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2204 >= cbSceneParam._m0[64u].x) && (_2205 >= cbSceneParam._m0[64u].y)) && (_2204 <= cbSceneParam._m0[64u].z)) && (_2205 <= cbSceneParam._m0[64u].w))
        {
            float _2344 = fma(_1999, cbSceneParam._m0[62u].w, fma(_1995, cbSceneParam._m0[62u].z, fma(_1991, cbSceneParam._m0[62u].y, _1987 * cbSceneParam._m0[62u].x))) / _2203;
            float _2348 = isnan(cbSceneParam._m0[41u].w) ? _2344 : (isnan(_2344) ? cbSceneParam._m0[41u].w : max(_2344, cbSceneParam._m0[41u].w));
            float _2391 = (cbSceneParam._m0[33u].x - sqrt(((_2001 * _2001) + (_2000 * _2000)) + (_2002 * _2002))) * cbSceneParam._m0[33u].y;
            float _4596 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
            float _2398 = (isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2204, cbSceneParam._m0[33u].w + _2205), _2348), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2204, _2205 - cbSceneParam._m0[33u].z), _2348), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2204 - cbSceneParam._m0[33u].z, _2205 - cbSceneParam._m0[33u].w), _2348), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2204 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2205), _2348), 0.0)).x), vec4(0.25)));
            float _2402 = 1.0 - (_2398 * cbSceneParam._m0[34u].x);
            float _2403 = 1.0 - (_2398 * cbSceneParam._m0[34u].y);
            float _2404 = 1.0 - (_2398 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2404) ? _2151 : (isnan(_2151) ? _2404 : min(_2151, _2404));
            frontier_phi_37_36_ladder_1 = isnan(_2403) ? _2150 : (isnan(_2150) ? _2403 : min(_2150, _2403));
            frontier_phi_37_36_ladder_2 = isnan(_2402) ? _2149 : (isnan(_2149) ? _2402 : min(_2149, _2402));
        }
        else
        {
            frontier_phi_37_36_ladder = _2151;
            frontier_phi_37_36_ladder_1 = _2150;
            frontier_phi_37_36_ladder_2 = _2149;
        }
        _2215 = frontier_phi_37_36_ladder_2;
        _2217 = frontier_phi_37_36_ladder_1;
        _2219 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2215 = _2149;
        _2217 = _2150;
        _2219 = _2151;
    }
    uvec4 _2224 = floatBitsToUint(cbInstanceData._m0[_273 + 5u]);
    uint _2226 = _2224.x * 14u;
    uint _2227 = _2226 + 13u;
    float _2234 = _893 + (-1.0);
    float _2239 = (cbLight._m0[_2227].x * _2234) + 1.0;
    float _2240 = (cbLight._m0[_2227].y * _2234) + 1.0;
    float _2241 = (cbLight._m0[_2227].z * _2234) + 1.0;
    float _2242 = (cbLight._m0[_2227].w * _2234) + 1.0;
    uint _2243 = _2226 + 5u;
    float _2249 = isnan(1.0) ? _2240 : (isnan(_2240) ? 1.0 : min(_2240, 1.0));
    uint _2253 = _2226 + 4u;
    float _2263 = isnan(1.0) ? _2239 : (isnan(_2239) ? 1.0 : min(_2239, 1.0));
    uint _2267 = _2226 | 1u;
    float _2278 = dot(vec3(cbLight._m0[_2226].xyz), vec3(_713, _714, _715));
    float _2281 = dot(vec3(cbLight._m0[_2267].xyz), vec3(_713, _714, _715));
    float _4632 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
    float _4643 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
    float _2286 = (isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0))) * 0.3183098733425140380859375;
    float _2288 = (isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0))) * 0.3183098733425140380859375;
    float _2295 = ((cbLight._m0[_2243].x * _2249) * _2288) + (((cbLight._m0[_2253].x * _2215) * _2263) * _2286);
    float _2296 = ((_2249 * cbLight._m0[_2243].y) * _2288) + (((cbLight._m0[_2253].y * _2217) * _2263) * _2286);
    float _2297 = ((_2249 * cbLight._m0[_2243].z) * _2288) + (((cbLight._m0[_2253].z * _2219) * _2263) * _2286);
    uvec4 _2301 = floatBitsToUint(cbLight._m0[_2226 + 12u]);
    bool _2303 = _2301.x == 0u;
    float _2405;
    float _2407;
    float _2409;
    if (_2303)
    {
        _2405 = _2295;
        _2407 = _2296;
        _2409 = _2297;
    }
    else
    {
        uint _2413 = _2226 + 6u;
        float _2429 = (dot(vec3(cbLight._m0[_2226 + 2u].xyz), vec3(_713, _714, _715)) * 0.5) + 0.5;
        float _2430 = _2429 * _2429;
        float _4654 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
        float _2431 = isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0));
        float _2432 = isnan(1.0) ? _2241 : (isnan(_2241) ? 1.0 : min(_2241, 1.0));
        _2405 = (((cbLight._m0[_2413].x * 0.3183098733425140380859375) * _2431) * _2432) + _2295;
        _2407 = (((cbLight._m0[_2413].y * 0.3183098733425140380859375) * _2431) * _2432) + _2296;
        _2409 = (((cbLight._m0[_2413].z * 0.3183098733425140380859375) * _2431) * _2432) + _2297;
    }
    bool _2412 = _2301.y == 0u;
    float _2467;
    float _2469;
    float _2471;
    if (_2412)
    {
        _2467 = _2405;
        _2469 = _2407;
        _2471 = _2409;
    }
    else
    {
        uint _2640 = _2226 + 7u;
        float _2656 = (dot(vec3(cbLight._m0[_2226 + 3u].xyz), vec3(_713, _714, _715)) * 0.5) + 0.5;
        float _2657 = _2656 * _2656;
        float _4670 = isnan(0.0) ? _2657 : (isnan(_2657) ? 0.0 : max(_2657, 0.0));
        float _2658 = isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0));
        float _2659 = isnan(1.0) ? _2242 : (isnan(_2242) ? 1.0 : min(_2242, 1.0));
        _2467 = (((cbLight._m0[_2640].x * 0.3183098733425140380859375) * _2658) * _2659) + _2405;
        _2469 = (((cbLight._m0[_2640].y * 0.3183098733425140380859375) * _2658) * _2659) + _2407;
        _2471 = (((cbLight._m0[_2640].z * 0.3183098733425140380859375) * _2658) * _2659) + _2409;
    }
    uint _2474 = _2226 + 8u;
    float _2487 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2226].w)) * _716) * 0.949999988079071044921875);
    float _2488 = _2487 * _2487;
    float _2489 = cbLight._m0[_2226].x + _792;
    float _2490 = cbLight._m0[_2226].y + _793;
    float _2491 = cbLight._m0[_2226].z + _794;
    float _2495 = inversesqrt(dot(vec3(_2489, _2490, _2491), vec3(_2489, _2490, _2491)));
    float _2496 = _2495 * _2489;
    float _2497 = _2495 * _2490;
    float _2498 = _2495 * _2491;
    float _2499 = dot(vec3(_713, _714, _715), vec3(cbLight._m0[_2226].xyz));
    float _4686 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0));
    float _2502 = isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0));
    float _4697 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
    float _2503 = isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0));
    float _2504 = dot(vec3(_713, _714, _715), vec3(_2496, _2497, _2498));
    float _4708 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
    float _2507 = isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0));
    float _2508 = dot(vec3(cbLight._m0[_2226].xyz), vec3(_2496, _2497, _2498));
    float _4719 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
    float _2512 = _2488 * _2488;
    float _2516 = ((_2507 * _2507) * (_2512 + (-1.0))) + 1.0;
    float _2524 = exp2(log2(1.0 - (isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0)))) * 5.0);
    float _2525 = 0.959999978542327880859375 - _874;
    float _2527 = 0.959999978542327880859375 - _875;
    float _2528 = 0.959999978542327880859375 - _876;
    float _2535 = 1.0 - _2488;
    float _2546 = (0.5 / (((_2503 * ((_2502 * _2535) + _2488)) + 9.9999999392252902907785028219223e-09) + (((_2503 * _2535) + _2488) * _2502))) * _2502;
    float _4730 = isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : max(_2546, 0.0));
    float _2548 = (isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0))) * (_2512 / ((_2516 * _2516) * 3.141590118408203125));
    uint _2562 = _2226 + 9u;
    float _2573 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2267].w)) * _716) * 0.949999988079071044921875);
    float _2574 = _2573 * _2573;
    float _2575 = cbLight._m0[_2267].x + _792;
    float _2576 = cbLight._m0[_2267].y + _793;
    float _2577 = cbLight._m0[_2267].z + _794;
    float _2581 = inversesqrt(dot(vec3(_2575, _2576, _2577), vec3(_2575, _2576, _2577)));
    float _2582 = _2581 * _2575;
    float _2583 = _2581 * _2576;
    float _2584 = _2581 * _2577;
    float _2585 = dot(vec3(_713, _714, _715), vec3(cbLight._m0[_2267].xyz));
    float _4741 = isnan(0.0) ? _2585 : (isnan(_2585) ? 0.0 : max(_2585, 0.0));
    float _2588 = isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0));
    float _2589 = dot(vec3(_713, _714, _715), vec3(_2582, _2583, _2584));
    float _4752 = isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0));
    float _2592 = isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0));
    float _2593 = dot(vec3(cbLight._m0[_2267].xyz), vec3(_2582, _2583, _2584));
    float _4763 = isnan(0.0) ? _2593 : (isnan(_2593) ? 0.0 : max(_2593, 0.0));
    float _2597 = _2574 * _2574;
    float _2601 = ((_2592 * _2592) * (_2597 + (-1.0))) + 1.0;
    float _2608 = exp2(log2(1.0 - (isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0)))) * 5.0);
    float _2615 = 1.0 - _2574;
    float _2625 = (0.5 / (((_2503 * ((_2588 * _2615) + _2574)) + 9.9999999392252902907785028219223e-09) + (((_2503 * _2615) + _2574) * _2588))) * _2588;
    float _4774 = isnan(0.0) ? _2625 : (isnan(_2625) ? 0.0 : max(_2625, 0.0));
    float _2627 = (isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0))) * (_2597 / ((_2601 * _2601) * 3.141590118408203125));
    float _2637 = (((((_2608 * _2525) + _877) * cbLight._m0[_2562].x) * _2627) * _2249) + ((((cbLight._m0[_2474].x * _2215) * ((_2524 * _2525) + _877)) * _2548) * _2263);
    float _2638 = (((((_2608 * _2527) + _879) * cbLight._m0[_2562].y) * _2627) * _2249) + ((((cbLight._m0[_2474].y * _2217) * ((_2524 * _2527) + _879)) * _2548) * _2263);
    float _2639 = (((((_2608 * _2528) + _880) * cbLight._m0[_2562].z) * _2627) * _2249) + ((((cbLight._m0[_2474].z * _2219) * ((_2524 * _2528) + _880)) * _2548) * _2263);
    float _2695;
    float _2697;
    float _2699;
    if (_2303)
    {
        _2695 = _2637;
        _2697 = _2638;
        _2699 = _2639;
    }
    else
    {
        uint _2701 = _2226 + 2u;
        uint _2705 = _2226 + 10u;
        float _2719 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2701].w)) * _716) * 0.949999988079071044921875);
        float _2720 = _2719 * _2719;
        float _2721 = cbLight._m0[_2701].x + _792;
        float _2722 = cbLight._m0[_2701].y + _793;
        float _2723 = cbLight._m0[_2701].z + _794;
        float _2727 = inversesqrt(dot(vec3(_2721, _2722, _2723), vec3(_2721, _2722, _2723)));
        float _2728 = _2727 * _2721;
        float _2729 = _2727 * _2722;
        float _2730 = _2727 * _2723;
        float _2731 = dot(vec3(_713, _714, _715), vec3(cbLight._m0[_2701].xyz));
        float _4785 = isnan(0.0) ? _2731 : (isnan(_2731) ? 0.0 : max(_2731, 0.0));
        float _2734 = isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0));
        float _2735 = dot(vec3(_713, _714, _715), vec3(_2728, _2729, _2730));
        float _4796 = isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : max(_2735, 0.0));
        float _2738 = isnan(1.0) ? _4796 : (isnan(_4796) ? 1.0 : min(_4796, 1.0));
        float _2739 = dot(vec3(cbLight._m0[_2701].xyz), vec3(_2728, _2729, _2730));
        float _4807 = isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0));
        float _2743 = _2720 * _2720;
        float _2747 = ((_2738 * _2738) * (_2743 + (-1.0))) + 1.0;
        float _2754 = exp2(log2(1.0 - (isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0)))) * 5.0);
        float _2761 = 1.0 - _2720;
        float _2771 = (0.5 / (((_2503 * ((_2734 * _2761) + _2720)) + 9.9999999392252902907785028219223e-09) + (((_2503 * _2761) + _2720) * _2734))) * _2734;
        float _4818 = isnan(0.0) ? _2771 : (isnan(_2771) ? 0.0 : max(_2771, 0.0));
        float _2773 = (isnan(1.0) ? _4818 : (isnan(_4818) ? 1.0 : min(_4818, 1.0))) * (_2743 / ((_2747 * _2747) * 3.141590118408203125));
        float _2774 = isnan(1.0) ? _2241 : (isnan(_2241) ? 1.0 : min(_2241, 1.0));
        _2695 = (((((_2754 * _2525) + _877) * cbLight._m0[_2705].x) * _2773) * _2774) + _2637;
        _2697 = (((((_2754 * _2527) + _879) * cbLight._m0[_2705].y) * _2773) * _2774) + _2638;
        _2699 = (((((_2754 * _2528) + _880) * cbLight._m0[_2705].z) * _2773) * _2774) + _2639;
    }
    float _2805;
    float _2807;
    float _2809;
    if (_2412)
    {
        _2805 = _2695;
        _2807 = _2697;
        _2809 = _2699;
    }
    else
    {
        uint _2816 = _2226 + 3u;
        uint _2820 = _2226 + 11u;
        float _2834 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2816].w)) * _716) * 0.949999988079071044921875);
        float _2835 = _2834 * _2834;
        float _2836 = cbLight._m0[_2816].x + _792;
        float _2837 = cbLight._m0[_2816].y + _793;
        float _2838 = cbLight._m0[_2816].z + _794;
        float _2842 = inversesqrt(dot(vec3(_2836, _2837, _2838), vec3(_2836, _2837, _2838)));
        float _2843 = _2842 * _2836;
        float _2844 = _2842 * _2837;
        float _2845 = _2842 * _2838;
        float _2846 = dot(vec3(_713, _714, _715), vec3(cbLight._m0[_2816].xyz));
        float _4834 = isnan(0.0) ? _2846 : (isnan(_2846) ? 0.0 : max(_2846, 0.0));
        float _2849 = isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0));
        float _2850 = dot(vec3(_713, _714, _715), vec3(_2843, _2844, _2845));
        float _4845 = isnan(0.0) ? _2850 : (isnan(_2850) ? 0.0 : max(_2850, 0.0));
        float _2853 = isnan(1.0) ? _4845 : (isnan(_4845) ? 1.0 : min(_4845, 1.0));
        float _2854 = dot(vec3(cbLight._m0[_2816].xyz), vec3(_2843, _2844, _2845));
        float _4856 = isnan(0.0) ? _2854 : (isnan(_2854) ? 0.0 : max(_2854, 0.0));
        float _2858 = _2835 * _2835;
        float _2862 = ((_2853 * _2853) * (_2858 + (-1.0))) + 1.0;
        float _2869 = exp2(log2(1.0 - (isnan(1.0) ? _4856 : (isnan(_4856) ? 1.0 : min(_4856, 1.0)))) * 5.0);
        float _2876 = 1.0 - _2835;
        float _2886 = (0.5 / (((_2503 * ((_2849 * _2876) + _2835)) + 9.9999999392252902907785028219223e-09) + (((_2503 * _2876) + _2835) * _2849))) * _2849;
        float _4867 = isnan(0.0) ? _2886 : (isnan(_2886) ? 0.0 : max(_2886, 0.0));
        float _2888 = (isnan(1.0) ? _4867 : (isnan(_4867) ? 1.0 : min(_4867, 1.0))) * (_2858 / ((_2862 * _2862) * 3.141590118408203125));
        float _2889 = isnan(1.0) ? _2242 : (isnan(_2242) ? 1.0 : min(_2242, 1.0));
        _2805 = (((((_2869 * _2525) + _877) * cbLight._m0[_2820].x) * _2888) * _2889) + _2695;
        _2807 = (((((_2869 * _2527) + _879) * cbLight._m0[_2820].y) * _2888) * _2889) + _2697;
        _2809 = (((((_2869 * _2528) + _880) * cbLight._m0[_2820].z) * _2888) * _2889) + _2699;
    }
    float _2955;
    float _2957;
    float _2959;
    float _2961;
    float _2963;
    float _2965;
    if (_2224.y == 0u)
    {
        uvec4 _2910 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2911 = _2910.x;
        uint _2922 = uint((float(_2910.y) * floor(float(uint(cbSceneParam._m0[85u].y * _814) / _2911))) + floor(float(uint(cbSceneParam._m0[85u].x * _813) / _2911)));
        float _2932 = (log2(_2002 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2933 = isnan(0.0) ? _2932 : (isnan(_2932) ? 0.0 : max(_2932, 0.0));
        uint _2936 = uint(isnan(14.0) ? _2933 : (isnan(_2933) ? 14.0 : min(_2933, 14.0)));
        uvec4 _2941 = texelFetch(g_lightClusterGridBuffer, int(((_2936 << 2u) + (_2922 << 6u)) >> 2u));
        uint _2942 = _2941.x;
        uint _2943 = _2910.z;
        float _3022;
        float _3024;
        float _3026;
        float _3028;
        float _3030;
        float _3032;
        if (((((1u << ((_2943 >> 4u) & 15u)) + 4294967295u) & _2942) == 0u) || ((_2943 & 240u) == 0u))
        {
            _3022 = 0.0;
            _3024 = 0.0;
            _3026 = 0.0;
            _3028 = 0.0;
            _3030 = 0.0;
            _3032 = 0.0;
        }
        else
        {
            float _3023;
            float _3025;
            float _3027;
            float _3029;
            float _3031;
            float _3033;
            float _3174 = 0.0;
            float _3175 = 0.0;
            float _3176 = 0.0;
            float _3177 = 0.0;
            float _3178 = 0.0;
            float _3179 = 0.0;
            uint _3180 = 0u;
            uint _3189;
            bool _3190;
            for (;;)
            {
                _3189 = texelFetch(g_lightClassification, int((((_2936 << 5u) + (_2922 << 9u)) + (_3180 << 2u)) >> 2u)).x;
                _3190 = _3189 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3190)
                {
                    frontier_phi_71_pred = _3179;
                    frontier_phi_71_pred_1 = _3178;
                    frontier_phi_71_pred_2 = _3177;
                    frontier_phi_71_pred_3 = _3176;
                    frontier_phi_71_pred_4 = _3175;
                    frontier_phi_71_pred_5 = _3174;
                }
                else
                {
                    float _3319;
                    float _3320;
                    float _3321;
                    float _3322;
                    float _3323;
                    float _3324;
                    uint _3325;
                    _3319 = _3174;
                    _3320 = _3175;
                    _3321 = _3176;
                    _3322 = _3177;
                    _3323 = _3178;
                    _3324 = _3179;
                    _3325 = _3189;
                    float _3246;
                    float _3247;
                    float _3248;
                    float _3249;
                    float _3250;
                    float _3251;
                    for (;;)
                    {
                        uint _3329 = uint(findLSB(_3325)) + (_3180 << 5u);
                        uint _3326 = (_3325 + 4294967295u) & _3325;
                        uint _3331 = _3329 * 48u;
                        vec4 _3345 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3331)).x, texelFetch(g_PointLightRenderingBuffer, int(_3331 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3331 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3331 + 3u)).x));
                        uint _3351 = (_3329 * 48u) + 4u;
                        vec4 _3364 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3351)).x, texelFetch(g_PointLightRenderingBuffer, int(_3351 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3351 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3351 + 3u)).x));
                        uint _3370 = (_3329 * 48u) + 8u;
                        vec3 _3381 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3370)).x, texelFetch(g_PointLightRenderingBuffer, int(_3370 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3370 + 2u)).x));
                        float _3385 = _3345.x - _2000;
                        float _3386 = _3345.y - _2001;
                        float _3387 = _3345.z - _2002;
                        float _3388 = dot(vec3(_3385, _3386, _3387), vec3(_3385, _3386, _3387));
                        float _3391 = inversesqrt(_3388);
                        float _3392 = _3391 * _3385;
                        float _3393 = _3391 * _3386;
                        float _3394 = _3391 * _3387;
                        float _3395 = dot(vec3(_834, _837, _840), vec3(_3392, _3393, _3394));
                        float _3400 = 1.0 - (_3388 * _3345.w);
                        float _4893 = isnan(0.0) ? _3400 : (isnan(_3400) ? 0.0 : max(_3400, 0.0));
                        float _3401 = isnan(1.0) ? _4893 : (isnan(_4893) ? 1.0 : min(_4893, 1.0));
                        float _3402 = sqrt(_3388) * _3364.w;
                        float _3405 = 1.39999997615814208984375 / (_3402 + 1.39999997615814208984375);
                        float _3406 = _3405 * _3405;
                        float _3409 = ((1.0 - _3406) * _3395) + _3406;
                        float _3412 = _3402 * _3402;
                        float _3416 = ((isnan(0.0) ? _3409 : (isnan(_3409) ? 0.0 : max(_3409, 0.0))) * _3401) / ((_3412 * 0.699999988079071044921875) + 1.0);
                        float _3420 = (-0.0) - _2000;
                        float _3421 = (-0.0) - _2001;
                        float _3422 = (-0.0) - _2002;
                        float _3426 = inversesqrt(dot(vec3(_3420, _3421, _3422), vec3(_3420, _3421, _3422)));
                        float _3427 = _3426 * _3420;
                        float _3428 = _3426 * _3421;
                        float _3429 = _3426 * _3422;
                        float _3436 = exp2(log2(1.0 / ((_3412 * 3.5) + 5.0)) * 0.25);
                        float _3437 = 1.0 - _909;
                        float _3444 = sqrt(1.0 - ((1.0 - (_3437 * _3437)) * (1.0 - (_3436 * _3436))));
                        float _3445 = _3444 * _3444;
                        float _3446 = _3445 * _3445;
                        float _3447 = _3427 + _3392;
                        float _3448 = _3428 + _3393;
                        float _3449 = _3429 + _3394;
                        float _3453 = inversesqrt(dot(vec3(_3447, _3448, _3449), vec3(_3447, _3448, _3449)));
                        float _3457 = dot(vec3(_834, _837, _840), vec3(_3427, _3428, _3429));
                        float _4909 = isnan(0.0) ? _3457 : (isnan(_3457) ? 0.0 : max(_3457, 0.0));
                        float _3460 = isnan(1.0) ? _4909 : (isnan(_4909) ? 1.0 : min(_4909, 1.0));
                        float _3461 = dot(vec3(_834, _837, _840), vec3(_3453 * _3447, _3453 * _3448, _3453 * _3449));
                        float _4920 = isnan(0.0) ? _3461 : (isnan(_3461) ? 0.0 : max(_3461, 0.0));
                        float _3464 = isnan(1.0) ? _4920 : (isnan(_4920) ? 1.0 : min(_4920, 1.0));
                        float _3468 = ((_3464 * _3464) * (_3446 + (-1.0))) + 1.0;
                        float _3469 = _3405 * _3445;
                        float _3470 = _3469 * _3469;
                        float _3473 = ((1.0 - _3470) * _3395) + _3470;
                        float _4931 = isnan(0.0) ? _3473 : (isnan(_3473) ? 0.0 : max(_3473, 0.0));
                        float _3474 = isnan(1.0) ? _4931 : (isnan(_4931) ? 1.0 : min(_4931, 1.0));
                        float _3475 = 1.0 - _3445;
                        float _3485 = (0.5 / (((_3474 * ((_3460 * _3475) + _3445)) + 9.9999999392252902907785028219223e-09) + (((_3474 * _3475) + _3445) * _3460))) * _3474;
                        float _4942 = isnan(0.0) ? _3485 : (isnan(_3485) ? 0.0 : max(_3485, 0.0));
                        float _3496 = (((_3446 * 3.1415927410125732421875) * (isnan(1.0) ? _4942 : (isnan(_4942) ? 1.0 : min(_4942, 1.0)))) / ((_3468 * _3468) * ((_3412 * 2.1991131305694580078125) + 3.141590118408203125))) * _3401;
                        _3249 = (_3416 * _3364.x) + _3322;
                        _3250 = (_3416 * _3364.y) + _3323;
                        _3251 = (_3416 * _3364.z) + _3324;
                        _3246 = (_3496 * _3381.x) + _3319;
                        _3247 = (_3496 * _3381.y) + _3320;
                        _3248 = (_3496 * _3381.z) + _3321;
                        if (_3326 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3319 = _3246;
                            _3320 = _3247;
                            _3321 = _3248;
                            _3322 = _3249;
                            _3323 = _3250;
                            _3324 = _3251;
                            _3325 = _3326;
                        }
                    }
                    frontier_phi_71_pred = _3251;
                    frontier_phi_71_pred_1 = _3250;
                    frontier_phi_71_pred_2 = _3249;
                    frontier_phi_71_pred_3 = _3248;
                    frontier_phi_71_pred_4 = _3247;
                    frontier_phi_71_pred_5 = _3246;
                }
                _3033 = frontier_phi_71_pred;
                _3031 = frontier_phi_71_pred_1;
                _3029 = frontier_phi_71_pred_2;
                _3027 = frontier_phi_71_pred_3;
                _3025 = frontier_phi_71_pred_4;
                _3023 = frontier_phi_71_pred_5;
                uint _3181 = _3180 + 1u;
                if (_3181 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3174 = _3023;
                    _3175 = _3025;
                    _3176 = _3027;
                    _3177 = _3029;
                    _3178 = _3031;
                    _3179 = _3033;
                    _3180 = _3181;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3022 = _3023;
            _3024 = _3025;
            _3026 = _3027;
            _3028 = _3029;
            _3030 = _3031;
            _3032 = _3033;
        }
        uvec4 _3036 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3037 = _3036.z;
        uint _3039 = (_3037 >> 8u) & 15u;
        float _3142;
        float _3144;
        float _3146;
        float _3148;
        float _3150;
        float _3152;
        if (((4294967295u << _3039) & _2942) == 0u)
        {
            _3142 = _3022;
            _3144 = _3024;
            _3146 = _3026;
            _3148 = _3028;
            _3150 = _3030;
            _3152 = _3032;
        }
        else
        {
            float _3167 = inversesqrt(dot(vec3(_2000, _2001, _2002), vec3(_2000, _2001, _2002)));
            float _3168 = _3167 * _2000;
            float _3169 = _3167 * _2001;
            float _3170 = _3167 * _2002;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3039 < ((_3037 >> 12u) & 15u))
            {
                float _3143;
                float _3145;
                float _3147;
                float _3149;
                float _3151;
                float _3153;
                float _3302 = _3022;
                float _3303 = _3024;
                float _3304 = _3026;
                float _3305 = _3028;
                float _3306 = _3030;
                float _3307 = _3032;
                uint _3308 = _3039;
                uint _3317;
                bool _3318;
                for (;;)
                {
                    _3317 = texelFetch(g_lightClassification, int((((_2936 << 5u) + (_2922 << 9u)) + (_3308 << 2u)) >> 2u)).x;
                    _3318 = _3317 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3318)
                    {
                        frontier_phi_82_pred = _3307;
                        frontier_phi_82_pred_1 = _3306;
                        frontier_phi_82_pred_2 = _3305;
                        frontier_phi_82_pred_3 = _3304;
                        frontier_phi_82_pred_4 = _3303;
                        frontier_phi_82_pred_5 = _3302;
                    }
                    else
                    {
                        float _3510;
                        float _3511;
                        float _3512;
                        float _3513;
                        float _3514;
                        float _3515;
                        float _3803;
                        float _3804;
                        float _3805;
                        float _3806;
                        float _3807;
                        float _3808;
                        float _3523 = _3302;
                        float _3524 = _3303;
                        float _3525 = _3304;
                        float _3526 = _3305;
                        float _3527 = _3306;
                        float _3528 = _3307;
                        uint _3529 = _3317;
                        uint _3530;
                        vec4 _3555;
                        float _3556;
                        vec4 _3571;
                        vec3 _3583;
                        vec4 _3598;
                        vec4 _3613;
                        float _3659;
                        bool _3660;
                        for (;;)
                        {
                            uint _3540 = ((_3308 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3529));
                            _3530 = (_3529 + 4294967295u) & _3529;
                            uint _3542 = _3540 * 40u;
                            _3555 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3542)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3542 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3542 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3542 + 3u)).x));
                            _3556 = _3555.w;
                            uint _3558 = (_3540 * 40u) + 4u;
                            _3571 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3558)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3558 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3558 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3558 + 3u)).x));
                            uint _3573 = (_3540 * 40u) + 8u;
                            _3583 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3573)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3573 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3573 + 2u)).x));
                            uint _3585 = (_3540 * 40u) + 16u;
                            _3598 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3585)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3585 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3585 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3585 + 3u)).x));
                            uint _3600 = (_3540 * 40u) + 20u;
                            _3613 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3600)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3600 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3600 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3600 + 3u)).x));
                            uint _3615 = (_3540 * 40u) + 24u;
                            vec4 _3628 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3615)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3615 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3615 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3615 + 3u)).x));
                            uint _3634 = (_3540 * 40u) + 28u;
                            vec4 _3647 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3634)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3634 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3634 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3634 + 3u)).x));
                            _3659 = fma(_2002, _3647.z, fma(_2001, _3647.y, _3647.x * _2000)) + _3647.w;
                            _3660 = !((fma(_2002, _3628.z, fma(_2001, _3628.y, _3628.x * _2000)) + _3628.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3660)
                            {
                                float _3687 = _3555.x - _2000;
                                float _3688 = _3555.y - _2001;
                                float _3689 = _3555.z - _2002;
                                float _3690 = dot(vec3(_3687, _3688, _3689), vec3(_3687, _3688, _3689));
                                float _3693 = inversesqrt(_3690);
                                float _3694 = _3693 * _3687;
                                float _3695 = _3693 * _3688;
                                float _3696 = _3693 * _3689;
                                float _3700 = 1.0 - (_3690 / (_3556 * _3556));
                                float _4953 = isnan(0.0) ? _3700 : (isnan(_3700) ? 0.0 : max(_3700, 0.0));
                                float _3701 = isnan(1.0) ? _4953 : (isnan(_4953) ? 1.0 : min(_4953, 1.0));
                                float _3705 = sqrt(_3690) * _3571.w;
                                float _3707 = 1.39999997615814208984375 / (_3705 + 1.39999997615814208984375);
                                float _3708 = _3707 * _3707;
                                float _3711 = ((1.0 - _3708) * dot(vec3(_3694, _3695, _3696), vec3(_834, _837, _840))) + _3708;
                                float _3714 = _3705 * _3705;
                                float _3718 = (fma(_2002, _3598.z, fma(_2001, _3598.y, _3598.x * _2000)) + _3598.w) / _3659;
                                float _3719 = (fma(_2002, _3613.z, fma(_2001, _3613.y, _3613.x * _2000)) + _3613.w) / _3659;
                                float _3723 = 1.0 - dot(vec2(_3718, _3719), vec2(_3718, _3719));
                                float _4969 = isnan(0.0) ? _3723 : (isnan(_3723) ? 0.0 : max(_3723, 0.0));
                                float _3724 = isnan(1.0) ? _4969 : (isnan(_4969) ? 1.0 : min(_4969, 1.0));
                                float _3725 = _3724 * (((isnan(0.0) ? _3711 : (isnan(_3711) ? 0.0 : max(_3711, 0.0))) * _3701) / ((_3714 * 0.699999988079071044921875) + 1.0));
                                float _3737 = exp2(log2(1.0 / ((_3714 * 3.5) + 5.0)) * 0.25);
                                float _3738 = 1.0 - _909;
                                float _3745 = sqrt(1.0 - ((1.0 - (_3738 * _3738)) * (1.0 - (_3737 * _3737))));
                                float _3746 = _3745 * _3745;
                                float _3747 = _3746 * _3746;
                                float _3748 = _3694 - _3168;
                                float _3749 = _3695 - _3169;
                                float _3750 = _3696 - _3170;
                                float _3754 = inversesqrt(dot(vec3(_3748, _3749, _3750), vec3(_3748, _3749, _3750)));
                                float _3758 = dot(vec3(_834, _837, _840), vec3((-0.0) - _3168, (-0.0) - _3169, (-0.0) - _3170));
                                float _4980 = isnan(0.0) ? _3758 : (isnan(_3758) ? 0.0 : max(_3758, 0.0));
                                float _3761 = isnan(1.0) ? _4980 : (isnan(_4980) ? 1.0 : min(_4980, 1.0));
                                float _3762 = dot(vec3(_834, _837, _840), vec3(_3754 * _3748, _3754 * _3749, _3754 * _3750));
                                float _4991 = isnan(0.0) ? _3762 : (isnan(_3762) ? 0.0 : max(_3762, 0.0));
                                float _3765 = isnan(1.0) ? _4991 : (isnan(_4991) ? 1.0 : min(_4991, 1.0));
                                float _3769 = ((_3765 * _3765) * (_3747 + (-1.0))) + 1.0;
                                float _3770 = _3707 * _3746;
                                float _3771 = _3770 * _3770;
                                float _3777 = ((1.0 - _3771) * dot(vec3(_834, _837, _840), vec3(_3694, _3695, _3696))) + _3771;
                                float _5002 = isnan(0.0) ? _3777 : (isnan(_3777) ? 0.0 : max(_3777, 0.0));
                                float _3778 = isnan(1.0) ? _5002 : (isnan(_5002) ? 1.0 : min(_5002, 1.0));
                                float _3779 = 1.0 - _3746;
                                float _3789 = (0.5 / (((_3778 * ((_3761 * _3779) + _3746)) + 9.9999999392252902907785028219223e-09) + (((_3778 * _3779) + _3746) * _3761))) * _3778;
                                float _5013 = isnan(0.0) ? _3789 : (isnan(_3789) ? 0.0 : max(_3789, 0.0));
                                float _3799 = (_3724 * _3701) * (((_3747 * 3.1415927410125732421875) * (isnan(1.0) ? _5013 : (isnan(_5013) ? 1.0 : min(_5013, 1.0)))) / ((_3769 * _3769) * ((_3714 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3725 * _3571.z;
                                frontier_phi_88_pred_1 = _3725 * _3571.y;
                                frontier_phi_88_pred_2 = _3725 * _3571.x;
                                frontier_phi_88_pred_3 = _3799 * _3583.z;
                                frontier_phi_88_pred_4 = _3799 * _3583.y;
                                frontier_phi_88_pred_5 = _3799 * _3583.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3808 = frontier_phi_88_pred;
                            _3807 = frontier_phi_88_pred_1;
                            _3806 = frontier_phi_88_pred_2;
                            _3805 = frontier_phi_88_pred_3;
                            _3804 = frontier_phi_88_pred_4;
                            _3803 = frontier_phi_88_pred_5;
                            _3513 = _3806 + _3526;
                            _3514 = _3807 + _3527;
                            _3515 = _3808 + _3528;
                            _3510 = _3803 + _3523;
                            _3511 = _3804 + _3524;
                            _3512 = _3805 + _3525;
                            if (_3530 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3523 = _3510;
                                _3524 = _3511;
                                _3525 = _3512;
                                _3526 = _3513;
                                _3527 = _3514;
                                _3528 = _3515;
                                _3529 = _3530;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3515;
                        frontier_phi_82_pred_1 = _3514;
                        frontier_phi_82_pred_2 = _3513;
                        frontier_phi_82_pred_3 = _3512;
                        frontier_phi_82_pred_4 = _3511;
                        frontier_phi_82_pred_5 = _3510;
                    }
                    _3153 = frontier_phi_82_pred;
                    _3151 = frontier_phi_82_pred_1;
                    _3149 = frontier_phi_82_pred_2;
                    _3147 = frontier_phi_82_pred_3;
                    _3145 = frontier_phi_82_pred_4;
                    _3143 = frontier_phi_82_pred_5;
                    uint _3309 = _3308 + 1u;
                    if (_3309 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3302 = _3143;
                        _3303 = _3145;
                        _3304 = _3147;
                        _3305 = _3149;
                        _3306 = _3151;
                        _3307 = _3153;
                        _3308 = _3309;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3149;
                frontier_phi_63_64_ladder_1 = _3153;
                frontier_phi_63_64_ladder_2 = _3151;
                frontier_phi_63_64_ladder_3 = _3147;
                frontier_phi_63_64_ladder_4 = _3145;
                frontier_phi_63_64_ladder_5 = _3143;
            }
            else
            {
                frontier_phi_63_64_ladder = _3028;
                frontier_phi_63_64_ladder_1 = _3032;
                frontier_phi_63_64_ladder_2 = _3030;
                frontier_phi_63_64_ladder_3 = _3026;
                frontier_phi_63_64_ladder_4 = _3024;
                frontier_phi_63_64_ladder_5 = _3022;
            }
            _3142 = frontier_phi_63_64_ladder_5;
            _3144 = frontier_phi_63_64_ladder_4;
            _3146 = frontier_phi_63_64_ladder_3;
            _3148 = frontier_phi_63_64_ladder;
            _3150 = frontier_phi_63_64_ladder_2;
            _3152 = frontier_phi_63_64_ladder_1;
        }
        float _3157 = isnan(1.0) ? _893 : (isnan(_893) ? 1.0 : min(_893, 1.0));
        _2955 = (_3157 * _3148) + _2467;
        _2957 = (_3157 * _3150) + _2469;
        _2959 = (_3157 * _3152) + _2471;
        _2961 = ((_3142 * _877) * _3157) + _2805;
        _2963 = ((_3144 * _879) * _3157) + _2807;
        _2965 = ((_3146 * _880) * _3157) + _2809;
    }
    else
    {
        _2955 = _2467;
        _2957 = _2469;
        _2959 = _2471;
        _2961 = _2805;
        _2963 = _2807;
        _2965 = _2809;
    }
    float _5029 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
    float _5040 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
    float _5051 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
    float _2982 = ((isnan(1.0) ? _5029 : (isnan(_5029) ? 1.0 : min(_5029, 1.0))) * (_2955 + ((isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0))) * _893))) + ((_2961 + ((isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0))) * _1732)) * cbPerFrame._m0[3u].x);
    float _2983 = ((isnan(1.0) ? _5040 : (isnan(_5040) ? 1.0 : min(_5040, 1.0))) * (_2957 + ((isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0))) * _893))) + ((_2963 + ((isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0))) * _1732)) * cbPerFrame._m0[3u].x);
    float _2984 = ((isnan(1.0) ? _5051 : (isnan(_5051) ? 1.0 : min(_5051, 1.0))) * (_2959 + ((isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0))) * _893))) + ((_2965 + ((isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0))) * _1732)) * cbPerFrame._m0[3u].x);
    uint _2985 = _273 + 6u;
    float _2993 = _813 / cbSceneParam._m0[86u].x;
    float _2994 = _814 / cbSceneParam._m0[86u].y;
    vec4 _3008 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2993, _2994, (log2((isnan(cbSceneParam._m0[77u].w) ? _735 : (isnan(_735) ? cbSceneParam._m0[77u].w : min(_735, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3010 = _3008.x;
    float _3011 = _3008.y;
    float _3012 = _3008.z;
    float _3013 = _3008.w;
    float _3084;
    float _3086;
    float _3088;
    float _3090;
    if (_735 > cbSceneParam._m0[78u].w)
    {
        float _3047 = isnan(_735) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _735 : min(cbSceneParam._m0[80u].w, _735));
        float _3048 = _3047 / _735;
        float _3059 = _3048 * _785;
        float _3060 = _786 * _3048;
        float _3061 = (-0.0) - _3060;
        float _3062 = _3048 * _787;
        float _3064 = (cbSceneParam._m0[77u].w * _3061) / _3047;
        float _3065 = _3064 + cbSceneParam._m0[79u].w;
        float _3066 = cbSceneParam._m0[79u].w - _3060;
        float _3072 = sqrt(((_3059 * _3059) + (_3060 * _3060)) + (_3062 * _3062));
        float _3075 = (1.0 - (cbSceneParam._m0[77u].w / _3047)) * _3072;
        float _3080 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3082 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3259;
        if (abs((_3061 - _3064) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3259 = ((((_3065 > 0.0) ? exp2(_3080 * _3065) : (2.0 - exp2(_3082 * _3065))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3075;
        }
        else
        {
            float _3203 = 1.0 / cbSceneParam._m0[80u].x;
            float _3204 = isnan(_3066) ? _3065 : (isnan(_3065) ? _3066 : max(_3065, _3066));
            float _3205 = isnan(_3066) ? _3065 : (isnan(_3065) ? _3066 : min(_3065, _3066));
            float _3214 = isnan(0.0) ? _3204 : (isnan(_3204) ? 0.0 : min(_3204, 0.0));
            float _3215 = isnan(0.0) ? _3205 : (isnan(_3205) ? 0.0 : min(_3205, 0.0));
            _3259 = ((abs(_3072 / _3061) * cbSceneParam._m0[80u].y) * ((((_3214 - _3215) * 2.0) - ((exp2(_3080 * (isnan(0.0) ? _3204 : (isnan(_3204) ? 0.0 : max(_3204, 0.0)))) - exp2(_3080 * (isnan(0.0) ? _3205 : (isnan(_3205) ? 0.0 : max(_3205, 0.0))))) * _3203)) - ((exp2(_3082 * _3214) - exp2(_3082 * _3215)) * _3203))) + (_3075 * cbSceneParam._m0[80u].z);
        }
        vec4 _3261 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2993, _2994, 1.0), 0.0);
        float _3270 = exp2((_3259 * (-1.44269502162933349609375)) * (1.0 - _3261.w));
        float _3271 = log2(_3270);
        float _3287 = log2(_3013);
        _3084 = (exp2(_3287 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3271 * cbSceneParam._m0[78u].x)) * _3261.x) / cbSceneParam._m0[78u].x)) + _3010;
        _3086 = (exp2(_3287 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3271 * cbSceneParam._m0[78u].y)) * _3261.y) / cbSceneParam._m0[78u].y)) + _3011;
        _3088 = (exp2(_3287 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3271 * cbSceneParam._m0[78u].z)) * _3261.z) / cbSceneParam._m0[78u].z)) + _3012;
        _3090 = _3270 * _3013;
    }
    else
    {
        _3084 = _3010;
        _3086 = _3011;
        _3088 = _3012;
        _3090 = _3013;
    }
    bool _3297;
    vec4 _3100;
    vec4 _3122;
    float _3124;
    float _3128;
    float _3129;
    float _3130;
    float _3131;
    bool _3141;
    for (;;)
    {
        _3100 = cbMatDynParam._m0[0u];
        float _3102 = roundEven(_3100.y);
        bool _3103 = _3102 == 3.0;
        float _3104 = log2(_3090);
        float _3111 = exp2(_3104 * cbSceneParam._m0[78u].x) * _2982;
        float _3112 = exp2(_3104 * cbSceneParam._m0[78u].y) * _2983;
        float _3113 = exp2(_3104 * cbSceneParam._m0[78u].z) * _2984;
        float _3120 = _801 + (-0.5);
        _3122 = cbMtdParam._m0[1u];
        _3124 = _3122.y * _3120;
        float _3127 = (_3102 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3128 = _3127 * (_3103 ? _3111 : (_3111 + (cbSceneParam._m0[72u].w * _3084)));
        _3129 = _3127 * (_3103 ? _3112 : (_3112 + (cbSceneParam._m0[72u].w * _3086)));
        _3130 = _3127 * (_3103 ? _3113 : (_3113 + (cbSceneParam._m0[72u].w * _3088)));
        _3131 = _3120 * 0.999000012874603271484375;
        _3141 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3141)
        {
            if ((cbInstanceData._m0[_273 + 7u].x + _3131) < 0.5)
            {
                _3297 = true;
                break;
            }
        }
        uint _3238 = _853 + uint(_3100.w);
        if ((cbInstanceData._m0[_3238].w < 1.0) && ((cbInstanceData._m0[_3238].w + _3131) < 0.5))
        {
            _3297 = true;
            break;
        }
        if ((_3124 + 1.0) < _3122.x)
        {
            _3297 = true;
            break;
        }
        _3297 = false;
        break;
    }
    float _3501;
    if (_3297)
    {
        discard_state = true;
        _3501 = 0.0;
    }
    else
    {
        _3501 = cbInstanceData._m0[_2985].w;
    }
    SV_Target.x = _3128;
    SV_Target.y = _3129;
    SV_Target.z = _3130;
    SV_Target.w = _3501;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2985].w;
    discard_exit();
}


