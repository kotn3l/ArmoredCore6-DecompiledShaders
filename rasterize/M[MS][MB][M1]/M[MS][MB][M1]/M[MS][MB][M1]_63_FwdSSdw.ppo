#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1073;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _202 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _203 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _204 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _210 = inversesqrt(dot(vec3(_202, _203, _204), vec3(_202, _203, _204)));
    float _217 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _224 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _230 = uint(roundEven(NORMAL.w)) * 13u;
    uint _236 = _230 + 1u;
    uint _240 = _230 + 2u;
    float _249 = sqrt(((cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x) + (cbInstanceData._m0[_230].x * cbInstanceData._m0[_230].x)) + (cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x));
    float _250 = _249 * TEXCOORD.z;
    float _251 = _249 * TEXCOORD.w;
    vec4 _271 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _277 = _271.x * cbMtdParam._m0[11u].x;
    float _278 = _271.y * cbMtdParam._m0[11u].y;
    float _279 = _271.z * cbMtdParam._m0[11u].z;
    vec4 _298 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _250) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _251) + cbTextureTilingScale._m0[5u].w));
    vec4 _336 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _338 = _336.x;
    float _350 = dot(vec4(_338, _336.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _367 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_338 - _350) * cbMtdParam._m0[24u].y) + _350) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3427 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    float _368 = isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0));
    float _375 = (_368 * ((_298.x * cbMtdParam._m0[12u].x) - _277)) + _277;
    float _376 = (_368 * ((_298.y * cbMtdParam._m0[12u].y) - _278)) + _278;
    float _377 = (_368 * ((_298.z * cbMtdParam._m0[12u].z) - _279)) + _279;
    vec4 _390 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _250) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _251) + cbTextureTilingScale._m0[4u].w));
    vec4 _407 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _409 = _407.x;
    float _410 = _407.y;
    float _411 = _407.z;
    float _420 = ((_390.z - _411) * _368) + _411;
    float _423 = ((((_390.x - _409) * _368) + _409) * 2.0) + (-1.0);
    float _425 = ((((_390.y - _410) * _368) + _410) * 2.0) + (-1.0);
    float _426 = dot(vec2(_423, _425), vec2(_423, _425));
    float _3438 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _431 = sqrt(1.0 - (isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0))));
    vec4 _447 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _459 = (((_447.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _423;
    float _460 = (((_447.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _425;
    vec4 _472 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _486 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _488 = _486.x;
    float _506 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _250) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _251) + cbTextureTilingScale._m0[9u].w)).x - _488) * _368) + _488;
    float _510 = ((_472.x - _506) * cbMtdParam._m0[19u].z) + _506;
    float _514 = (cbMtdParam._m0[19u].w * (_447.z - _420)) + _420;
    float _519 = cbMtdParam._m0[22u].x + _447.w;
    float _522 = fma(_431, _217 * NORMAL.x, fma(_460, _224 * TANGENT.x, (_210 * _202) * _459));
    float _525 = fma(_431, _217 * NORMAL.y, fma(_460, _224 * TANGENT.y, (_210 * _203) * _459));
    float _528 = fma(_431, _217 * NORMAL.z, fma(_460, _224 * TANGENT.z, (_210 * _204) * _459));
    float _532 = inversesqrt(dot(vec3(_522, _525, _528), vec3(_522, _525, _528)));
    float _533 = _532 * _522;
    float _534 = _532 * _525;
    float _535 = _532 * _528;
    float _3449 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _536 = isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0));
    float _3460 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _3471 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _3482 = isnan(0.0) ? _376 : (isnan(_376) ? 0.0 : max(_376, 0.0));
    float _3493 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _3504 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _541 = isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0));
    float _555 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _596 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _606 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _596);
    float _607 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _596);
    float _608 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _596);
    float _612 = inversesqrt(dot(vec3(_606, _607, _608), vec3(_606, _607, _608)));
    float _613 = _606 * _612;
    float _614 = _607 * _612;
    float _615 = _608 * _612;
    float _621 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _622 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _640 = fma(_535, cbSceneParam._m0[5u].z, fma(_534, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _533));
    float _643 = fma(_535, cbSceneParam._m0[6u].z, fma(_534, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _533));
    float _646 = fma(_535, cbSceneParam._m0[7u].z, fma(_534, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _533));
    uint _660 = (_230 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _666 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0)))) * cbInstanceData._m0[_660].x;
    float _667 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0)))) * cbInstanceData._m0[_660].y;
    float _668 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0)))) * cbInstanceData._m0[_660].z;
    float _3515 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _669 = isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0));
    float _3526 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _670 = isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0));
    float _3537 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _671 = isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0));
    float _672 = 1.0 - _541;
    float _673 = _669 * _672;
    float _674 = _670 * _672;
    float _675 = _671 * _672;
    float _680 = (_669 + (-0.039999999105930328369140625)) * _541;
    float _681 = (_670 + (-0.039999999105930328369140625)) * _541;
    float _682 = (_671 + (-0.039999999105930328369140625)) * _541;
    float _683 = _680 + 0.039999999105930328369140625;
    float _685 = _681 + 0.039999999105930328369140625;
    float _686 = _682 + 0.039999999105930328369140625;
    vec4 _695 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _621, cbSceneParam._m0[86u].y * _622));
    float _699 = ((isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0))) * TEXCOORD_5.w) * _695.x;
    float _700 = dot(vec3(_533, _534, _535), vec3(_613, _614, _615));
    float _703 = _700 * 2.0;
    float _707 = (_703 * _533) - _613;
    float _708 = (_703 * _534) - _614;
    float _709 = (_703 * _535) - _615;
    float _713 = abs(dot(vec3(_613, _614, _615), vec3(_533, _534, _535)));
    float _3548 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _715 = sqrt(_536);
    float _728 = exp2((_715 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_715 * 3.0));
    float _734 = (1.0 - _728) * ((_715 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _735 = _728 * _715;
    float _763 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _767 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _771 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1072;
    float _1074;
    float _1075;
    float _1076;
    float _1077;
    float _1078;
    float _1079;
    float _1080;
    float _1081;
    float _1082;
    float _1083;
    float _1084;
    float _1085;
    float _1086;
    float _1087;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _797 = fma(_771, cbModelParam._m0[26u].z, fma(_767, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _763));
        float _801 = fma(_771, cbModelParam._m0[27u].z, fma(_767, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _763));
        float _805 = fma(_771, cbModelParam._m0[28u].z, fma(_767, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _763));
        float _830 = _763 + _533;
        float _831 = _767 + _534;
        float _832 = _771 + _535;
        float _842 = fma(_832, cbModelParam._m0[26u].z, fma(_831, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _830)) - _797;
        float _843 = fma(_832, cbModelParam._m0[27u].z, fma(_831, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _830)) - _801;
        float _844 = fma(_832, cbModelParam._m0[28u].z, fma(_831, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _830)) - _805;
        float _848 = inversesqrt(dot(vec3(_842, _843, _844), vec3(_842, _843, _844)));
        float _861 = ((_848 * _842) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_797 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _862 = ((_848 * _843) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_801 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _863 = ((_848 * _844) / cbModelParam._m0[34u].z) + ((((((_805 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _866 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_861, _862, _863), 0.0);
        vec4 _873 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_861, _862, _863), 0.0);
        vec4 _880 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_861, _862, _863), 0.0);
        vec4 _887 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_861, _862, _863), 0.0);
        float _900 = exp2((_866.w + (-0.5)) * 20.0) * 2.0;
        float _901 = _900 * (_866.x + (-0.5));
        float _902 = _900 * (_866.y + (-0.5));
        float _903 = _900 * (_866.z + (-0.5));
        float _910 = exp2((_873.w + (-0.5)) * 20.0) * 2.0;
        float _911 = _910 * (_873.x + (-0.5));
        float _912 = _910 * (_873.y + (-0.5));
        float _913 = _910 * (_873.z + (-0.5));
        float _920 = exp2((_880.w + (-0.5)) * 20.0) * 2.0;
        float _921 = _920 * (_880.x + (-0.5));
        float _922 = _920 * (_880.y + (-0.5));
        float _923 = _920 * (_880.z + (-0.5));
        float _930 = exp2((_887.w + (-0.5)) * 20.0) * 2.0;
        float _931 = _930 * (_887.x + (-0.5));
        float _932 = _930 * (_887.y + (-0.5));
        float _933 = _930 * (_887.z + (-0.5));
        float _934 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
        float _935 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
        float _936 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
        float _937 = _901 * 0.5;
        float _938 = _911 * 0.5;
        float _939 = _921 * 0.5;
        float _940 = dot(vec3(_937, _938, _939), vec3(_937, _938, _939));
        float _945 = (_940 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_940);
        float _954 = (dot(vec3(_533, _534, _535), vec3(_945 * _937, _945 * _938, _945 * _939)) + 1.0) * 0.5;
        float _3574 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        float _964 = sqrt(((_938 * _938) + (_937 * _937)) + (_939 * _939)) / (_934 + 9.9999997473787516355514526367188e-06);
        float _3585 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
        float _965 = isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0));
        float _966 = _965 * 2.0;
        float _970 = (1.0 - _965) / (_965 + 1.0);
        float _3596 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _971 = isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0));
        float _980 = ((((1.0 - _971) * (_966 + 2.0)) * exp2(log2(isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0))) * (_966 + 1.0))) + _971) * _934;
        float _981 = _902 * 0.5;
        float _982 = _912 * 0.5;
        float _983 = _922 * 0.5;
        float _984 = dot(vec3(_981, _982, _983), vec3(_981, _982, _983));
        float _989 = (_984 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_984);
        float _997 = (dot(vec3(_533, _534, _535), vec3(_989 * _981, _989 * _982, _989 * _983)) + 1.0) * 0.5;
        float _3607 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _1006 = sqrt(((_982 * _982) + (_981 * _981)) + (_983 * _983)) / (_935 + 9.9999997473787516355514526367188e-06);
        float _3618 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1007 = isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0));
        float _1008 = _1007 * 2.0;
        float _1012 = (1.0 - _1007) / (_1007 + 1.0);
        float _3629 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1013 = isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0));
        float _1022 = ((((1.0 - _1013) * (_1008 + 2.0)) * exp2(log2(isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0))) * (_1008 + 1.0))) + _1013) * _935;
        float _1023 = _903 * 0.5;
        float _1024 = _913 * 0.5;
        float _1025 = _923 * 0.5;
        float _1026 = dot(vec3(_1023, _1024, _1025), vec3(_1023, _1024, _1025));
        float _1031 = (_1026 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1026);
        float _1039 = (dot(vec3(_533, _534, _535), vec3(_1031 * _1023, _1031 * _1024, _1031 * _1025)) + 1.0) * 0.5;
        float _3640 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1048 = sqrt(((_1024 * _1024) + (_1023 * _1023)) + (_1025 * _1025)) / (_936 + 9.9999997473787516355514526367188e-06);
        float _3651 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1049 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
        float _1050 = _1049 * 2.0;
        float _1054 = (1.0 - _1049) / (_1049 + 1.0);
        float _3662 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1055 = isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0));
        float _1064 = ((((1.0 - _1055) * (_1050 + 2.0)) * exp2(log2(isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0))) * (_1050 + 1.0))) + _1055) * _936;
        _1072 = _903;
        _1074 = _902;
        _1075 = _901;
        _1076 = _913;
        _1077 = _912;
        _1078 = _911;
        _1079 = _923;
        _1080 = _922;
        _1081 = _921;
        _1082 = _936;
        _1083 = _935;
        _1084 = _934;
        _1085 = cbModelParam._m0[36u].z * (isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0)));
        _1086 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0)));
        _1087 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0)));
    }
    else
    {
        _1072 = _1073;
        _1074 = _1073;
        _1075 = _1073;
        _1076 = _1073;
        _1077 = _1073;
        _1078 = _1073;
        _1079 = _1073;
        _1080 = _1073;
        _1081 = _1073;
        _1082 = _1073;
        _1083 = _1073;
        _1084 = _1073;
        _1085 = 0.0;
        _1086 = 0.0;
        _1087 = 0.0;
    }
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1112 = fma(_771, cbModelParam._m0[30u].z, fma(_767, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _763));
        float _1116 = fma(_771, cbModelParam._m0[31u].z, fma(_767, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _763));
        float _1120 = fma(_771, cbModelParam._m0[32u].z, fma(_767, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _763));
        float _1143 = _763 + _533;
        float _1144 = _767 + _534;
        float _1145 = _771 + _535;
        float _1155 = fma(_1145, cbModelParam._m0[30u].z, fma(_1144, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1143)) - _1112;
        float _1156 = fma(_1145, cbModelParam._m0[31u].z, fma(_1144, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1143)) - _1116;
        float _1157 = fma(_1145, cbModelParam._m0[32u].z, fma(_1144, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1143)) - _1120;
        float _1161 = inversesqrt(dot(vec3(_1155, _1156, _1157), vec3(_1155, _1156, _1157)));
        float _1174 = ((_1161 * _1155) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1112 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1175 = ((_1161 * _1156) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1116 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1176 = ((_1161 * _1157) / cbModelParam._m0[35u].z) + ((((((_1120 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1178 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1174, _1175, _1176), 0.0);
        vec4 _1185 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1174, _1175, _1176), 0.0);
        vec4 _1192 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1174, _1175, _1176), 0.0);
        vec4 _1199 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1174, _1175, _1176), 0.0);
        float _1211 = exp2((_1178.w + (-0.5)) * 20.0) * 2.0;
        float _1212 = _1211 * (_1178.x + (-0.5));
        float _1213 = _1211 * (_1178.y + (-0.5));
        float _1214 = _1211 * (_1178.z + (-0.5));
        float _1221 = exp2((_1185.w + (-0.5)) * 20.0) * 2.0;
        float _1222 = _1221 * (_1185.x + (-0.5));
        float _1223 = _1221 * (_1185.y + (-0.5));
        float _1224 = _1221 * (_1185.z + (-0.5));
        float _1231 = exp2((_1192.w + (-0.5)) * 20.0) * 2.0;
        float _1232 = _1231 * (_1192.x + (-0.5));
        float _1233 = _1231 * (_1192.y + (-0.5));
        float _1234 = _1231 * (_1192.z + (-0.5));
        float _1241 = exp2((_1199.w + (-0.5)) * 20.0) * 2.0;
        float _1242 = _1241 * (_1199.x + (-0.5));
        float _1243 = _1241 * (_1199.y + (-0.5));
        float _1244 = _1241 * (_1199.z + (-0.5));
        float _1245 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1246 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1247 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1248 = _1212 * 0.5;
        float _1249 = _1222 * 0.5;
        float _1250 = _1232 * 0.5;
        float _1251 = dot(vec3(_1248, _1249, _1250), vec3(_1248, _1249, _1250));
        float _1256 = (_1251 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1251);
        float _1264 = (dot(vec3(_533, _534, _535), vec3(_1256 * _1248, _1256 * _1249, _1256 * _1250)) + 1.0) * 0.5;
        float _3703 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1273 = sqrt(((_1249 * _1249) + (_1248 * _1248)) + (_1250 * _1250)) / (_1245 + 9.9999997473787516355514526367188e-06);
        float _3714 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1274 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
        float _1275 = _1274 * 2.0;
        float _1279 = (1.0 - _1274) / (_1274 + 1.0);
        float _3725 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1280 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
        float _1289 = ((((1.0 - _1280) * (_1275 + 2.0)) * exp2(log2(isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0))) * (_1275 + 1.0))) + _1280) * _1245;
        float _1290 = _1213 * 0.5;
        float _1291 = _1223 * 0.5;
        float _1292 = _1233 * 0.5;
        float _1293 = dot(vec3(_1290, _1291, _1292), vec3(_1290, _1291, _1292));
        float _1298 = (_1293 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1293);
        float _1306 = (dot(vec3(_533, _534, _535), vec3(_1298 * _1290, _1298 * _1291, _1298 * _1292)) + 1.0) * 0.5;
        float _3736 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1315 = sqrt(((_1291 * _1291) + (_1290 * _1290)) + (_1292 * _1292)) / (_1246 + 9.9999997473787516355514526367188e-06);
        float _3747 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1316 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
        float _1317 = _1316 * 2.0;
        float _1321 = (1.0 - _1316) / (_1316 + 1.0);
        float _3758 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1322 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
        float _1331 = ((((1.0 - _1322) * (_1317 + 2.0)) * exp2(log2(isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0))) * (_1317 + 1.0))) + _1322) * _1246;
        float _1332 = _1214 * 0.5;
        float _1333 = _1224 * 0.5;
        float _1334 = _1234 * 0.5;
        float _1335 = dot(vec3(_1332, _1333, _1334), vec3(_1332, _1333, _1334));
        float _1340 = (_1335 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1335);
        float _1348 = (dot(vec3(_533, _534, _535), vec3(_1340 * _1332, _1340 * _1333, _1340 * _1334)) + 1.0) * 0.5;
        float _3769 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1357 = sqrt(((_1333 * _1333) + (_1332 * _1332)) + (_1334 * _1334)) / (_1247 + 9.9999997473787516355514526367188e-06);
        float _3780 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1358 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
        float _1359 = _1358 * 2.0;
        float _1363 = (1.0 - _1358) / (_1358 + 1.0);
        float _3791 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1364 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
        float _1373 = ((((1.0 - _1364) * (_1359 + 2.0)) * exp2(log2(isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0))) * (_1359 + 1.0))) + _1364) * _1247;
        _1381 = _1214;
        _1382 = _1213;
        _1383 = _1212;
        _1384 = _1224;
        _1385 = _1223;
        _1386 = _1222;
        _1387 = _1234;
        _1388 = _1233;
        _1389 = _1232;
        _1390 = _1247;
        _1391 = _1246;
        _1392 = _1245;
        _1393 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0)));
        _1394 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0)));
        _1395 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0)));
    }
    else
    {
        _1381 = _1073;
        _1382 = _1073;
        _1383 = _1073;
        _1384 = _1073;
        _1385 = _1073;
        _1386 = _1073;
        _1387 = _1073;
        _1388 = _1073;
        _1389 = _1073;
        _1390 = _1073;
        _1391 = _1073;
        _1392 = _1073;
        _1393 = 0.0;
        _1394 = 0.0;
        _1395 = 0.0;
    }
    float _1405 = (cbModelParam._m0[1u].x * (_1393 - _1085)) + _1085;
    float _1406 = (cbModelParam._m0[1u].x * (_1394 - _1086)) + _1086;
    float _1407 = (cbModelParam._m0[1u].x * (_1395 - _1087)) + _1087;
    float _1428 = fma(_1407, cbSceneParam._m0[89u].z, fma(_1406, cbSceneParam._m0[89u].y, _1405 * cbSceneParam._m0[89u].x));
    float _1431 = fma(_1407, cbSceneParam._m0[90u].z, fma(_1406, cbSceneParam._m0[90u].y, _1405 * cbSceneParam._m0[90u].x));
    float _1434 = fma(_1407, cbSceneParam._m0[91u].z, fma(_1406, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1405));
    float _1449 = _707 * 0.5;
    float _1450 = _708 * 0.5;
    float _1451 = _709 * 0.5;
    float _1452 = dot(vec4(_1449, _1450, _1451, 1.0), vec4(_1383, _1386, _1389, _1392));
    float _1455 = dot(vec4(_1449, _1450, _1451, 1.0), vec4(_1382, _1385, _1388, _1391));
    float _1458 = dot(vec4(_1449, _1450, _1451, 1.0), vec4(_1381, _1384, _1387, _1390));
    float _1492;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1465 = dot(vec4(_1449, _1450, _1451, 1.0), vec4(_1072, _1076, _1079, _1082));
        float _1469 = dot(vec4(_1449, _1450, _1451, 1.0), vec4(_1074, _1077, _1080, _1083));
        float _1473 = dot(vec4(_1449, _1450, _1451, 1.0), vec4(_1075, _1078, _1081, _1084));
        float _1480 = dot(vec4(cbModelParam._m0[39u]), vec4(_1449, _1450, _1451, 1.0));
        _1492 = dot(vec3(isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0)), isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0)), isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1480) ? 0.0 : (isnan(0.0) ? _1480 : max(0.0, _1480))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1492 = 1.0;
    }
    float _1503;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1494 = dot(vec4(cbModelParam._m0[40u]), vec4(_1449, _1450, _1451, 1.0));
        _1503 = dot(vec3(isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0)), isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0)), isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1494) ? 0.0 : (isnan(0.0) ? _1494 : max(0.0, _1494))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1503 = 1.0;
    }
    float _1507 = (_1503 * cbModelParam._m0[1u].x) + (_1492 * (1.0 - cbModelParam._m0[1u].x));
    float _1517 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _536);
    float _1518 = isnan(_1517) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1517 : min(cbModelParam._m0[25u].z, _1517));
    float _1600;
    float _1602;
    float _1604;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1567 = fma(_771, cbModelParam._m0[13u].z, fma(_767, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _763)) + cbModelParam._m0[13u].w;
        float _1571 = fma(_771, cbModelParam._m0[14u].z, fma(_767, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _763)) + cbModelParam._m0[14u].w;
        float _1575 = fma(_771, cbModelParam._m0[15u].z, fma(_767, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _763)) + cbModelParam._m0[15u].w;
        float _1578 = fma(_709, cbModelParam._m0[13u].z, fma(_708, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _707));
        float _1581 = fma(_709, cbModelParam._m0[14u].z, fma(_708, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _707));
        float _1584 = fma(_709, cbModelParam._m0[15u].z, fma(_708, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _707));
        float _1612;
        if (_1578 > 0.0)
        {
            _1612 = abs((1.0 - _1567) / _1578);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1578 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1567 + 1.0) / _1578);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1612 = frontier_phi_14_12_ladder;
        }
        float _1837;
        if (_1581 > 0.0)
        {
            _1837 = abs((1.0 - _1571) / _1581);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1581 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1571 + 1.0) / _1581);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1837 = frontier_phi_23_19_ladder;
        }
        float _2094;
        if (_1584 > 0.0)
        {
            _2094 = abs((1.0 - _1575) / _1584);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1584 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1575 + 1.0) / _1584);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2094 = frontier_phi_35_30_ladder;
        }
        float _2096 = isnan(_1837) ? _1612 : (isnan(_1612) ? _1837 : min(_1612, _1837));
        float _2097 = isnan(_2094) ? _2096 : (isnan(_2096) ? _2094 : min(_2096, _2094));
        float _2101 = (_2097 * _1578) + _1567;
        float _2102 = (_2097 * _1581) + _1571;
        float _2103 = (_2097 * _1584) + _1575;
        float _2104 = _2097 * 9.9999997473787516355514526367188e-05;
        float _2106 = (-1.0) - _2104;
        float _2108 = _2104 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2103 > _2108) || ((_2103 < _2106) || ((_2102 > _2108) || ((_2102 < _2106) || ((_2101 < _2106) || (_2101 > _2108))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2231 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2103, cbModelParam._m0[9u].z, fma(_2102, cbModelParam._m0[9u].y, _2101 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2103, cbModelParam._m0[10u].z, fma(_2102, cbModelParam._m0[10u].y, _2101 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2103, cbModelParam._m0[11u].z, fma(_2102, cbModelParam._m0[11u].y, _2101 * cbModelParam._m0[11u].x))), _1518);
            frontier_phi_13_35_ladder = _2231.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2231.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2231.x * cbModelParam._m0[1u].y;
        }
        _1600 = frontier_phi_13_35_ladder_2;
        _1602 = frontier_phi_13_35_ladder_1;
        _1604 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1588 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_707, _708, _709), _1518);
        _1600 = _1588.x * cbModelParam._m0[1u].y;
        _1602 = _1588.y * cbModelParam._m0[1u].y;
        _1604 = _1588.z * cbModelParam._m0[1u].y;
    }
    float _1608 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _536);
    float _1609 = isnan(_1608) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1608 : min(cbModelParam._m0[25u].w, _1608));
    float _1700;
    float _1702;
    float _1704;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1664 = fma(_771, cbModelParam._m0[21u].z, fma(_767, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _763)) + cbModelParam._m0[21u].w;
        float _1668 = fma(_771, cbModelParam._m0[22u].z, fma(_767, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _763)) + cbModelParam._m0[22u].w;
        float _1672 = fma(_771, cbModelParam._m0[23u].z, fma(_767, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _763)) + cbModelParam._m0[23u].w;
        float _1675 = fma(_709, cbModelParam._m0[21u].z, fma(_708, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _707));
        float _1678 = fma(_709, cbModelParam._m0[22u].z, fma(_708, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _707));
        float _1681 = fma(_709, cbModelParam._m0[23u].z, fma(_708, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _707));
        float _1842;
        if (_1675 > 0.0)
        {
            _1842 = abs((1.0 - _1664) / _1675);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1675 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1664 + 1.0) / _1675);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1842 = frontier_phi_25_21_ladder;
        }
        float _2121;
        if (_1678 > 0.0)
        {
            _2121 = abs((1.0 - _1668) / _1678);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1678 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1668 + 1.0) / _1678);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2121 = frontier_phi_37_32_ladder;
        }
        float _2334;
        if (_1681 > 0.0)
        {
            _2334 = abs((1.0 - _1672) / _1681);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1681 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1672 + 1.0) / _1681);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2334 = frontier_phi_46_43_ladder;
        }
        float _2336 = isnan(_2121) ? _1842 : (isnan(_1842) ? _2121 : min(_1842, _2121));
        float _2337 = isnan(_2334) ? _2336 : (isnan(_2336) ? _2334 : min(_2336, _2334));
        float _2341 = (_2337 * _1675) + _1664;
        float _2342 = (_2337 * _1678) + _1668;
        float _2343 = (_2337 * _1681) + _1672;
        float _2344 = _2337 * 9.9999997473787516355514526367188e-05;
        float _2345 = (-1.0) - _2344;
        float _2347 = _2344 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2343 > _2347) || ((_2343 < _2345) || ((_2342 > _2347) || ((_2342 < _2345) || ((_2341 < _2345) || (_2341 > _2347))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2542 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2343, cbModelParam._m0[17u].z, fma(_2342, cbModelParam._m0[17u].y, _2341 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2343, cbModelParam._m0[18u].z, fma(_2342, cbModelParam._m0[18u].y, _2341 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2343, cbModelParam._m0[19u].z, fma(_2342, cbModelParam._m0[19u].y, _2341 * cbModelParam._m0[19u].x))), _1609);
            frontier_phi_22_46_ladder = _2542.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2542.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2542.x * cbModelParam._m0[1u].z;
        }
        _1700 = frontier_phi_22_46_ladder_2;
        _1702 = frontier_phi_22_46_ladder_1;
        _1704 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1684 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_707, _708, _709), _1609);
        _1700 = _1684.x * cbModelParam._m0[1u].z;
        _1702 = _1684.y * cbModelParam._m0[1u].z;
        _1704 = _1684.z * cbModelParam._m0[1u].z;
    }
    float _1717 = (((_734 * _683) + _735) * _699) * ((cbModelParam._m0[1u].w * (_1700 - _1600)) + _1600);
    float _1719 = (((_734 * _685) + _735) * _699) * ((cbModelParam._m0[1u].w * (_1702 - _1602)) + _1602);
    float _1721 = (((_734 * _686) + _735) * _699) * ((cbModelParam._m0[1u].w * (_1704 - _1604)) + _1604);
    float _1724 = fma(_1721, cbSceneParam._m0[89u].z, fma(_1719, cbSceneParam._m0[89u].y, _1717 * cbSceneParam._m0[89u].x));
    float _1727 = fma(_1721, cbSceneParam._m0[90u].z, fma(_1719, cbSceneParam._m0[90u].y, _1717 * cbSceneParam._m0[90u].x));
    float _1730 = fma(_1721, cbSceneParam._m0[91u].z, fma(_1719, cbSceneParam._m0[91u].y, _1717 * cbSceneParam._m0[91u].x));
    vec4 _1738 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_621, _622));
    float _1740 = _1738.w;
    float _1752 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1740);
    float _1753 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1740);
    float _1754 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1740);
    uvec4 _1758 = floatBitsToUint(cbInstanceData._m0[_230 + 5u]);
    uint _1760 = _1758.x * 14u;
    uint _1761 = _1760 + 13u;
    float _1768 = _699 + (-1.0);
    float _1773 = (cbLight._m0[_1761].x * _1768) + 1.0;
    float _1774 = (cbLight._m0[_1761].y * _1768) + 1.0;
    float _1775 = (cbLight._m0[_1761].z * _1768) + 1.0;
    float _1776 = (cbLight._m0[_1761].w * _1768) + 1.0;
    uint _1777 = _1760 + 5u;
    float _1783 = isnan(1.0) ? _1774 : (isnan(_1774) ? 1.0 : min(_1774, 1.0));
    uint _1787 = _1760 + 4u;
    float _1796 = isnan(1.0) ? _1773 : (isnan(_1773) ? 1.0 : min(_1773, 1.0));
    uint _1800 = _1760 | 1u;
    float _1811 = dot(vec3(cbLight._m0[_1760].xyz), vec3(_533, _534, _535));
    float _1814 = dot(vec3(cbLight._m0[_1800].xyz), vec3(_533, _534, _535));
    float _3927 = isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0));
    float _3938 = isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0));
    float _1819 = (isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0))) * 0.3183098733425140380859375;
    float _1821 = (isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0))) * 0.3183098733425140380859375;
    float _1828 = ((cbLight._m0[_1777].x * _1783) * _1821) + (((cbLight._m0[_1787].x * _1752) * _1796) * _1819);
    float _1829 = ((_1783 * cbLight._m0[_1777].y) * _1821) + (((cbLight._m0[_1787].y * _1753) * _1796) * _1819);
    float _1830 = ((_1783 * cbLight._m0[_1777].z) * _1821) + (((cbLight._m0[_1787].z * _1754) * _1796) * _1819);
    uvec4 _1834 = floatBitsToUint(cbLight._m0[_1760 + 12u]);
    bool _1836 = _1834.x == 0u;
    float _1847;
    float _1849;
    float _1851;
    if (_1836)
    {
        _1847 = _1828;
        _1849 = _1829;
        _1851 = _1830;
    }
    else
    {
        uint _1855 = _1760 + 6u;
        float _1871 = (dot(vec3(cbLight._m0[_1760 + 2u].xyz), vec3(_533, _534, _535)) * 0.5) + 0.5;
        float _1872 = _1871 * _1871;
        float _3949 = isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0));
        float _1873 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
        float _1874 = isnan(1.0) ? _1775 : (isnan(_1775) ? 1.0 : min(_1775, 1.0));
        _1847 = (((cbLight._m0[_1855].x * 0.3183098733425140380859375) * _1873) * _1874) + _1828;
        _1849 = (((cbLight._m0[_1855].y * 0.3183098733425140380859375) * _1873) * _1874) + _1829;
        _1851 = (((cbLight._m0[_1855].z * 0.3183098733425140380859375) * _1873) * _1874) + _1830;
    }
    bool _1854 = _1834.y == 0u;
    float _1892;
    float _1894;
    float _1896;
    if (_1854)
    {
        _1892 = _1847;
        _1894 = _1849;
        _1896 = _1851;
    }
    else
    {
        uint _2065 = _1760 + 7u;
        float _2081 = (dot(vec3(cbLight._m0[_1760 + 3u].xyz), vec3(_533, _534, _535)) * 0.5) + 0.5;
        float _2082 = _2081 * _2081;
        float _3965 = isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0));
        float _2083 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
        float _2084 = isnan(1.0) ? _1776 : (isnan(_1776) ? 1.0 : min(_1776, 1.0));
        _1892 = (((cbLight._m0[_2065].x * 0.3183098733425140380859375) * _2083) * _2084) + _1847;
        _1894 = (((cbLight._m0[_2065].y * 0.3183098733425140380859375) * _2083) * _2084) + _1849;
        _1896 = (((cbLight._m0[_2065].z * 0.3183098733425140380859375) * _2083) * _2084) + _1851;
    }
    uint _1899 = _1760 + 8u;
    float _1912 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1760].w)) * _536) * 0.949999988079071044921875);
    float _1913 = _1912 * _1912;
    float _1914 = cbLight._m0[_1760].x + _613;
    float _1915 = cbLight._m0[_1760].y + _614;
    float _1916 = cbLight._m0[_1760].z + _615;
    float _1920 = inversesqrt(dot(vec3(_1914, _1915, _1916), vec3(_1914, _1915, _1916)));
    float _1921 = _1920 * _1914;
    float _1922 = _1920 * _1915;
    float _1923 = _1920 * _1916;
    float _1924 = dot(vec3(_533, _534, _535), vec3(cbLight._m0[_1760].xyz));
    float _3981 = isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0));
    float _1927 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
    float _3992 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
    float _1928 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
    float _1929 = dot(vec3(_533, _534, _535), vec3(_1921, _1922, _1923));
    float _4003 = isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0));
    float _1932 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
    float _1933 = dot(vec3(cbLight._m0[_1760].xyz), vec3(_1921, _1922, _1923));
    float _4014 = isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0));
    float _1937 = _1913 * _1913;
    float _1941 = ((_1932 * _1932) * (_1937 + (-1.0))) + 1.0;
    float _1949 = exp2(log2(1.0 - (isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0)))) * 5.0);
    float _1950 = 0.959999978542327880859375 - _680;
    float _1952 = 0.959999978542327880859375 - _681;
    float _1953 = 0.959999978542327880859375 - _682;
    float _1960 = 1.0 - _1913;
    float _1971 = (0.5 / (((_1928 * ((_1927 * _1960) + _1913)) + 9.9999999392252902907785028219223e-09) + (((_1928 * _1960) + _1913) * _1927))) * _1927;
    float _4025 = isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0));
    float _1973 = (isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0))) * (_1937 / ((_1941 * _1941) * 3.141590118408203125));
    uint _1987 = _1760 + 9u;
    float _1998 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1800].w)) * _536) * 0.949999988079071044921875);
    float _1999 = _1998 * _1998;
    float _2000 = cbLight._m0[_1800].x + _613;
    float _2001 = cbLight._m0[_1800].y + _614;
    float _2002 = cbLight._m0[_1800].z + _615;
    float _2006 = inversesqrt(dot(vec3(_2000, _2001, _2002), vec3(_2000, _2001, _2002)));
    float _2007 = _2006 * _2000;
    float _2008 = _2006 * _2001;
    float _2009 = _2006 * _2002;
    float _2010 = dot(vec3(_533, _534, _535), vec3(cbLight._m0[_1800].xyz));
    float _4036 = isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0));
    float _2013 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
    float _2014 = dot(vec3(_533, _534, _535), vec3(_2007, _2008, _2009));
    float _4047 = isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0));
    float _2017 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
    float _2018 = dot(vec3(cbLight._m0[_1800].xyz), vec3(_2007, _2008, _2009));
    float _4058 = isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0));
    float _2022 = _1999 * _1999;
    float _2026 = ((_2017 * _2017) * (_2022 + (-1.0))) + 1.0;
    float _2033 = exp2(log2(1.0 - (isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0)))) * 5.0);
    float _2040 = 1.0 - _1999;
    float _2050 = (0.5 / (((_1928 * ((_2013 * _2040) + _1999)) + 9.9999999392252902907785028219223e-09) + (((_1928 * _2040) + _1999) * _2013))) * _2013;
    float _4069 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
    float _2052 = (isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0))) * (_2022 / ((_2026 * _2026) * 3.141590118408203125));
    float _2062 = (((((_2033 * _1950) + _683) * cbLight._m0[_1987].x) * _2052) * _1783) + ((((cbLight._m0[_1899].x * _1752) * ((_1949 * _1950) + _683)) * _1973) * _1796);
    float _2063 = (((((_2033 * _1952) + _685) * cbLight._m0[_1987].y) * _2052) * _1783) + ((((cbLight._m0[_1899].y * _1753) * ((_1949 * _1952) + _685)) * _1973) * _1796);
    float _2064 = (((((_2033 * _1953) + _686) * cbLight._m0[_1987].z) * _2052) * _1783) + ((((cbLight._m0[_1899].z * _1754) * ((_1949 * _1953) + _686)) * _1973) * _1796);
    float _2126;
    float _2128;
    float _2130;
    if (_1836)
    {
        _2126 = _2062;
        _2128 = _2063;
        _2130 = _2064;
    }
    else
    {
        uint _2132 = _1760 + 2u;
        uint _2136 = _1760 + 10u;
        float _2150 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2132].w)) * _536) * 0.949999988079071044921875);
        float _2151 = _2150 * _2150;
        float _2152 = cbLight._m0[_2132].x + _613;
        float _2153 = cbLight._m0[_2132].y + _614;
        float _2154 = cbLight._m0[_2132].z + _615;
        float _2158 = inversesqrt(dot(vec3(_2152, _2153, _2154), vec3(_2152, _2153, _2154)));
        float _2159 = _2158 * _2152;
        float _2160 = _2158 * _2153;
        float _2161 = _2158 * _2154;
        float _2162 = dot(vec3(_533, _534, _535), vec3(cbLight._m0[_2132].xyz));
        float _4080 = isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0));
        float _2165 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
        float _2166 = dot(vec3(_533, _534, _535), vec3(_2159, _2160, _2161));
        float _4091 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
        float _2169 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
        float _2170 = dot(vec3(cbLight._m0[_2132].xyz), vec3(_2159, _2160, _2161));
        float _4102 = isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0));
        float _2174 = _2151 * _2151;
        float _2178 = ((_2169 * _2169) * (_2174 + (-1.0))) + 1.0;
        float _2185 = exp2(log2(1.0 - (isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0)))) * 5.0);
        float _2192 = 1.0 - _2151;
        float _2202 = (0.5 / (((_1928 * ((_2165 * _2192) + _2151)) + 9.9999999392252902907785028219223e-09) + (((_1928 * _2192) + _2151) * _2165))) * _2165;
        float _4113 = isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0));
        float _2204 = (isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0))) * (_2174 / ((_2178 * _2178) * 3.141590118408203125));
        float _2205 = isnan(1.0) ? _1775 : (isnan(_1775) ? 1.0 : min(_1775, 1.0));
        _2126 = (((((_2185 * _1950) + _683) * cbLight._m0[_2136].x) * _2204) * _2205) + _2062;
        _2128 = (((((_2185 * _1952) + _685) * cbLight._m0[_2136].y) * _2204) * _2205) + _2063;
        _2130 = (((((_2185 * _1953) + _686) * cbLight._m0[_2136].z) * _2204) * _2205) + _2064;
    }
    float _2240;
    float _2242;
    float _2244;
    if (_1854)
    {
        _2240 = _2126;
        _2242 = _2128;
        _2244 = _2130;
    }
    else
    {
        uint _2251 = _1760 + 3u;
        uint _2255 = _1760 + 11u;
        float _2269 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2251].w)) * _536) * 0.949999988079071044921875);
        float _2270 = _2269 * _2269;
        float _2271 = cbLight._m0[_2251].x + _613;
        float _2272 = cbLight._m0[_2251].y + _614;
        float _2273 = cbLight._m0[_2251].z + _615;
        float _2277 = inversesqrt(dot(vec3(_2271, _2272, _2273), vec3(_2271, _2272, _2273)));
        float _2278 = _2277 * _2271;
        float _2279 = _2277 * _2272;
        float _2280 = _2277 * _2273;
        float _2281 = dot(vec3(_533, _534, _535), vec3(cbLight._m0[_2251].xyz));
        float _4129 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
        float _2284 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
        float _2285 = dot(vec3(_533, _534, _535), vec3(_2278, _2279, _2280));
        float _4140 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0));
        float _2288 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
        float _2289 = dot(vec3(cbLight._m0[_2251].xyz), vec3(_2278, _2279, _2280));
        float _4151 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
        float _2293 = _2270 * _2270;
        float _2297 = ((_2288 * _2288) * (_2293 + (-1.0))) + 1.0;
        float _2304 = exp2(log2(1.0 - (isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0)))) * 5.0);
        float _2311 = 1.0 - _2270;
        float _2321 = (0.5 / (((_1928 * ((_2284 * _2311) + _2270)) + 9.9999999392252902907785028219223e-09) + (((_1928 * _2311) + _2270) * _2284))) * _2284;
        float _4162 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
        float _2323 = (isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0))) * (_2293 / ((_2297 * _2297) * 3.141590118408203125));
        float _2324 = isnan(1.0) ? _1776 : (isnan(_1776) ? 1.0 : min(_1776, 1.0));
        _2240 = (((((_2304 * _1950) + _683) * cbLight._m0[_2255].x) * _2323) * _2324) + _2126;
        _2242 = (((((_2304 * _1952) + _685) * cbLight._m0[_2255].y) * _2323) * _2324) + _2128;
        _2244 = (((((_2304 * _1953) + _686) * cbLight._m0[_2255].z) * _2323) * _2324) + _2130;
    }
    float _2459;
    float _2461;
    float _2463;
    float _2465;
    float _2467;
    float _2469;
    if (_1758.y == 0u)
    {
        float _2399 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2400 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2399;
        float _2401 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2399;
        float _2402 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2399;
        uvec4 _2414 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2415 = _2414.x;
        uint _2426 = uint((float(_2414.y) * floor(float(uint(cbSceneParam._m0[85u].y * _622) / _2415))) + floor(float(uint(cbSceneParam._m0[85u].x * _621) / _2415)));
        float _2436 = (log2(_2402 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2437 = isnan(0.0) ? _2436 : (isnan(_2436) ? 0.0 : max(_2436, 0.0));
        uint _2440 = uint(isnan(14.0) ? _2437 : (isnan(_2437) ? 14.0 : min(_2437, 14.0)));
        uvec4 _2445 = texelFetch(g_lightClusterGridBuffer, int(((_2440 << 2u) + (_2426 << 6u)) >> 2u));
        uint _2446 = _2445.x;
        uint _2447 = _2414.z;
        float _2547;
        float _2549;
        float _2551;
        float _2553;
        float _2555;
        float _2557;
        if (((((1u << ((_2447 >> 4u) & 15u)) + 4294967295u) & _2446) == 0u) || ((_2447 & 240u) == 0u))
        {
            _2547 = 0.0;
            _2549 = 0.0;
            _2551 = 0.0;
            _2553 = 0.0;
            _2555 = 0.0;
            _2557 = 0.0;
        }
        else
        {
            float _2548;
            float _2550;
            float _2552;
            float _2554;
            float _2556;
            float _2558;
            float _2692 = 0.0;
            float _2693 = 0.0;
            float _2694 = 0.0;
            float _2695 = 0.0;
            float _2696 = 0.0;
            float _2697 = 0.0;
            uint _2698 = 0u;
            uint _2707;
            bool _2708;
            for (;;)
            {
                _2707 = texelFetch(g_lightClassification, int((((_2440 << 5u) + (_2426 << 9u)) + (_2698 << 2u)) >> 2u)).x;
                _2708 = _2707 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2708)
                {
                    frontier_phi_61_pred = _2692;
                    frontier_phi_61_pred_1 = _2697;
                    frontier_phi_61_pred_2 = _2696;
                    frontier_phi_61_pred_3 = _2695;
                    frontier_phi_61_pred_4 = _2694;
                    frontier_phi_61_pred_5 = _2693;
                }
                else
                {
                    float _2816;
                    float _2817;
                    float _2818;
                    float _2819;
                    float _2820;
                    float _2821;
                    uint _2822;
                    _2816 = _2692;
                    _2817 = _2693;
                    _2818 = _2694;
                    _2819 = _2695;
                    _2820 = _2696;
                    _2821 = _2697;
                    _2822 = _2707;
                    float _2748;
                    float _2749;
                    float _2750;
                    float _2751;
                    float _2752;
                    float _2753;
                    for (;;)
                    {
                        uint _2826 = uint(findLSB(_2822)) + (_2698 << 5u);
                        uint _2823 = (_2822 + 4294967295u) & _2822;
                        uint _2828 = _2826 * 48u;
                        vec4 _2842 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2828)).x, texelFetch(g_PointLightRenderingBuffer, int(_2828 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2828 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2828 + 3u)).x));
                        uint _2848 = (_2826 * 48u) + 4u;
                        vec4 _2861 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2848)).x, texelFetch(g_PointLightRenderingBuffer, int(_2848 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2848 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2848 + 3u)).x));
                        uint _2867 = (_2826 * 48u) + 8u;
                        vec3 _2878 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2867)).x, texelFetch(g_PointLightRenderingBuffer, int(_2867 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2867 + 2u)).x));
                        float _2882 = _2842.x - _2400;
                        float _2883 = _2842.y - _2401;
                        float _2884 = _2842.z - _2402;
                        float _2885 = dot(vec3(_2882, _2883, _2884), vec3(_2882, _2883, _2884));
                        float _2888 = inversesqrt(_2885);
                        float _2889 = _2888 * _2882;
                        float _2890 = _2888 * _2883;
                        float _2891 = _2888 * _2884;
                        float _2892 = dot(vec3(_640, _643, _646), vec3(_2889, _2890, _2891));
                        float _2897 = 1.0 - (_2885 * _2842.w);
                        float _4188 = isnan(0.0) ? _2897 : (isnan(_2897) ? 0.0 : max(_2897, 0.0));
                        float _2898 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
                        float _2899 = sqrt(_2885) * _2861.w;
                        float _2902 = 1.39999997615814208984375 / (_2899 + 1.39999997615814208984375);
                        float _2903 = _2902 * _2902;
                        float _2906 = ((1.0 - _2903) * _2892) + _2903;
                        float _2909 = _2899 * _2899;
                        float _2913 = ((isnan(0.0) ? _2906 : (isnan(_2906) ? 0.0 : max(_2906, 0.0))) * _2898) / ((_2909 * 0.699999988079071044921875) + 1.0);
                        float _2917 = (-0.0) - _2400;
                        float _2918 = (-0.0) - _2401;
                        float _2919 = (-0.0) - _2402;
                        float _2923 = inversesqrt(dot(vec3(_2917, _2918, _2919), vec3(_2917, _2918, _2919)));
                        float _2924 = _2923 * _2917;
                        float _2925 = _2923 * _2918;
                        float _2926 = _2923 * _2919;
                        float _2934 = exp2(log2(1.0 / ((_2909 * 3.5) + 5.0)) * 0.25);
                        float _2935 = 1.0 - _715;
                        float _2942 = sqrt(1.0 - ((1.0 - (_2935 * _2935)) * (1.0 - (_2934 * _2934))));
                        float _2943 = _2942 * _2942;
                        float _2944 = _2943 * _2943;
                        float _2945 = _2924 + _2889;
                        float _2946 = _2925 + _2890;
                        float _2947 = _2926 + _2891;
                        float _2951 = inversesqrt(dot(vec3(_2945, _2946, _2947), vec3(_2945, _2946, _2947)));
                        float _2955 = dot(vec3(_640, _643, _646), vec3(_2924, _2925, _2926));
                        float _4204 = isnan(0.0) ? _2955 : (isnan(_2955) ? 0.0 : max(_2955, 0.0));
                        float _2958 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
                        float _2959 = dot(vec3(_640, _643, _646), vec3(_2951 * _2945, _2951 * _2946, _2951 * _2947));
                        float _4215 = isnan(0.0) ? _2959 : (isnan(_2959) ? 0.0 : max(_2959, 0.0));
                        float _2962 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
                        float _2966 = ((_2962 * _2962) * (_2944 + (-1.0))) + 1.0;
                        float _2967 = _2902 * _2943;
                        float _2968 = _2967 * _2967;
                        float _2971 = ((1.0 - _2968) * _2892) + _2968;
                        float _4226 = isnan(0.0) ? _2971 : (isnan(_2971) ? 0.0 : max(_2971, 0.0));
                        float _2972 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
                        float _2973 = 1.0 - _2943;
                        float _2983 = (0.5 / (((_2972 * ((_2958 * _2973) + _2943)) + 9.9999999392252902907785028219223e-09) + (((_2972 * _2973) + _2943) * _2958))) * _2972;
                        float _4237 = isnan(0.0) ? _2983 : (isnan(_2983) ? 0.0 : max(_2983, 0.0));
                        float _2994 = (((_2944 * 3.1415927410125732421875) * (isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0)))) / ((_2966 * _2966) * ((_2909 * 2.1991131305694580078125) + 3.141590118408203125))) * _2898;
                        _2751 = (_2913 * _2861.x) + _2819;
                        _2752 = (_2913 * _2861.y) + _2820;
                        _2753 = (_2913 * _2861.z) + _2821;
                        _2748 = (_2994 * _2878.x) + _2816;
                        _2749 = (_2994 * _2878.y) + _2817;
                        _2750 = (_2994 * _2878.z) + _2818;
                        if (_2823 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2816 = _2748;
                            _2817 = _2749;
                            _2818 = _2750;
                            _2819 = _2751;
                            _2820 = _2752;
                            _2821 = _2753;
                            _2822 = _2823;
                        }
                    }
                    frontier_phi_61_pred = _2748;
                    frontier_phi_61_pred_1 = _2753;
                    frontier_phi_61_pred_2 = _2752;
                    frontier_phi_61_pred_3 = _2751;
                    frontier_phi_61_pred_4 = _2750;
                    frontier_phi_61_pred_5 = _2749;
                }
                _2548 = frontier_phi_61_pred;
                _2558 = frontier_phi_61_pred_1;
                _2556 = frontier_phi_61_pred_2;
                _2554 = frontier_phi_61_pred_3;
                _2552 = frontier_phi_61_pred_4;
                _2550 = frontier_phi_61_pred_5;
                uint _2699 = _2698 + 1u;
                if (_2699 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2692 = _2548;
                    _2693 = _2550;
                    _2694 = _2552;
                    _2695 = _2554;
                    _2696 = _2556;
                    _2697 = _2558;
                    _2698 = _2699;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2547 = _2548;
            _2549 = _2550;
            _2551 = _2552;
            _2553 = _2554;
            _2555 = _2556;
            _2557 = _2558;
        }
        uvec4 _2561 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2562 = _2561.z;
        uint _2564 = (_2562 >> 8u) & 15u;
        float _2660;
        float _2662;
        float _2664;
        float _2666;
        float _2668;
        float _2670;
        if (((4294967295u << _2564) & _2446) == 0u)
        {
            _2660 = _2547;
            _2662 = _2549;
            _2664 = _2551;
            _2666 = _2553;
            _2668 = _2555;
            _2670 = _2557;
        }
        else
        {
            float _2685 = inversesqrt(dot(vec3(_2400, _2401, _2402), vec3(_2400, _2401, _2402)));
            float _2686 = _2685 * _2400;
            float _2687 = _2685 * _2401;
            float _2688 = _2685 * _2402;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2564 < ((_2562 >> 12u) & 15u))
            {
                float _2661;
                float _2663;
                float _2665;
                float _2667;
                float _2669;
                float _2671;
                float _2799 = _2547;
                float _2800 = _2549;
                float _2801 = _2551;
                float _2802 = _2553;
                float _2803 = _2555;
                float _2804 = _2557;
                uint _2805 = _2564;
                uint _2814;
                bool _2815;
                for (;;)
                {
                    _2814 = texelFetch(g_lightClassification, int((((_2440 << 5u) + (_2426 << 9u)) + (_2805 << 2u)) >> 2u)).x;
                    _2815 = _2814 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2815)
                    {
                        frontier_phi_67_pred = _2802;
                        frontier_phi_67_pred_1 = _2803;
                        frontier_phi_67_pred_2 = _2804;
                        frontier_phi_67_pred_3 = _2801;
                        frontier_phi_67_pred_4 = _2800;
                        frontier_phi_67_pred_5 = _2799;
                    }
                    else
                    {
                        float _2999;
                        float _3000;
                        float _3001;
                        float _3002;
                        float _3003;
                        float _3004;
                        float _3293;
                        float _3294;
                        float _3295;
                        float _3296;
                        float _3297;
                        float _3298;
                        float _3012 = _2799;
                        float _3013 = _2800;
                        float _3014 = _2801;
                        float _3015 = _2802;
                        float _3016 = _2803;
                        float _3017 = _2804;
                        uint _3018 = _2814;
                        uint _3019;
                        vec4 _3044;
                        float _3045;
                        vec4 _3060;
                        vec3 _3072;
                        vec4 _3087;
                        vec4 _3103;
                        float _3149;
                        bool _3150;
                        for (;;)
                        {
                            uint _3029 = ((_2805 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3018));
                            _3019 = (_3018 + 4294967295u) & _3018;
                            uint _3031 = _3029 * 40u;
                            _3044 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3031)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3031 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3031 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3031 + 3u)).x));
                            _3045 = _3044.w;
                            uint _3047 = (_3029 * 40u) + 4u;
                            _3060 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3047)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3047 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3047 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3047 + 3u)).x));
                            uint _3062 = (_3029 * 40u) + 8u;
                            _3072 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3062)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3062 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3062 + 2u)).x));
                            uint _3074 = (_3029 * 40u) + 16u;
                            _3087 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3074)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3074 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3074 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3074 + 3u)).x));
                            uint _3090 = (_3029 * 40u) + 20u;
                            _3103 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3090)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 3u)).x));
                            uint _3105 = (_3029 * 40u) + 24u;
                            vec4 _3118 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3105)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 3u)).x));
                            uint _3124 = (_3029 * 40u) + 28u;
                            vec4 _3137 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3124)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 3u)).x));
                            _3149 = fma(_2402, _3137.z, fma(_2401, _3137.y, _3137.x * _2400)) + _3137.w;
                            _3150 = !((fma(_2402, _3118.z, fma(_2401, _3118.y, _3118.x * _2400)) + _3118.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3150)
                            {
                                float _3177 = _3044.x - _2400;
                                float _3178 = _3044.y - _2401;
                                float _3179 = _3044.z - _2402;
                                float _3180 = dot(vec3(_3177, _3178, _3179), vec3(_3177, _3178, _3179));
                                float _3183 = inversesqrt(_3180);
                                float _3184 = _3183 * _3177;
                                float _3185 = _3183 * _3178;
                                float _3186 = _3183 * _3179;
                                float _3190 = 1.0 - (_3180 / (_3045 * _3045));
                                float _4248 = isnan(0.0) ? _3190 : (isnan(_3190) ? 0.0 : max(_3190, 0.0));
                                float _3191 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
                                float _3195 = sqrt(_3180) * _3060.w;
                                float _3197 = 1.39999997615814208984375 / (_3195 + 1.39999997615814208984375);
                                float _3198 = _3197 * _3197;
                                float _3201 = ((1.0 - _3198) * dot(vec3(_3184, _3185, _3186), vec3(_640, _643, _646))) + _3198;
                                float _3204 = _3195 * _3195;
                                float _3208 = (fma(_2402, _3087.z, fma(_2401, _3087.y, _3087.x * _2400)) + _3087.w) / _3149;
                                float _3209 = (fma(_2402, _3103.z, fma(_2401, _3103.y, _3103.x * _2400)) + _3103.w) / _3149;
                                float _3213 = 1.0 - dot(vec2(_3208, _3209), vec2(_3208, _3209));
                                float _4264 = isnan(0.0) ? _3213 : (isnan(_3213) ? 0.0 : max(_3213, 0.0));
                                float _3214 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
                                float _3215 = _3214 * (((isnan(0.0) ? _3201 : (isnan(_3201) ? 0.0 : max(_3201, 0.0))) * _3191) / ((_3204 * 0.699999988079071044921875) + 1.0));
                                float _3227 = exp2(log2(1.0 / ((_3204 * 3.5) + 5.0)) * 0.25);
                                float _3228 = 1.0 - _715;
                                float _3235 = sqrt(1.0 - ((1.0 - (_3228 * _3228)) * (1.0 - (_3227 * _3227))));
                                float _3236 = _3235 * _3235;
                                float _3237 = _3236 * _3236;
                                float _3238 = _3184 - _2686;
                                float _3239 = _3185 - _2687;
                                float _3240 = _3186 - _2688;
                                float _3244 = inversesqrt(dot(vec3(_3238, _3239, _3240), vec3(_3238, _3239, _3240)));
                                float _3248 = dot(vec3(_640, _643, _646), vec3((-0.0) - _2686, (-0.0) - _2687, (-0.0) - _2688));
                                float _4275 = isnan(0.0) ? _3248 : (isnan(_3248) ? 0.0 : max(_3248, 0.0));
                                float _3251 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
                                float _3252 = dot(vec3(_640, _643, _646), vec3(_3244 * _3238, _3244 * _3239, _3244 * _3240));
                                float _4286 = isnan(0.0) ? _3252 : (isnan(_3252) ? 0.0 : max(_3252, 0.0));
                                float _3255 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
                                float _3259 = ((_3255 * _3255) * (_3237 + (-1.0))) + 1.0;
                                float _3260 = _3197 * _3236;
                                float _3261 = _3260 * _3260;
                                float _3267 = ((1.0 - _3261) * dot(vec3(_640, _643, _646), vec3(_3184, _3185, _3186))) + _3261;
                                float _4297 = isnan(0.0) ? _3267 : (isnan(_3267) ? 0.0 : max(_3267, 0.0));
                                float _3268 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
                                float _3269 = 1.0 - _3236;
                                float _3279 = (0.5 / (((_3268 * ((_3251 * _3269) + _3236)) + 9.9999999392252902907785028219223e-09) + (((_3268 * _3269) + _3236) * _3251))) * _3268;
                                float _4308 = isnan(0.0) ? _3279 : (isnan(_3279) ? 0.0 : max(_3279, 0.0));
                                float _3289 = (_3214 * _3191) * (((_3237 * 3.1415927410125732421875) * (isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0)))) / ((_3259 * _3259) * ((_3204 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3289 * _3072.x;
                                frontier_phi_73_pred_1 = _3289 * _3072.y;
                                frontier_phi_73_pred_2 = _3215 * _3060.z;
                                frontier_phi_73_pred_3 = _3215 * _3060.y;
                                frontier_phi_73_pred_4 = _3215 * _3060.x;
                                frontier_phi_73_pred_5 = _3289 * _3072.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3293 = frontier_phi_73_pred;
                            _3294 = frontier_phi_73_pred_1;
                            _3298 = frontier_phi_73_pred_2;
                            _3297 = frontier_phi_73_pred_3;
                            _3296 = frontier_phi_73_pred_4;
                            _3295 = frontier_phi_73_pred_5;
                            _3002 = _3296 + _3015;
                            _3003 = _3297 + _3016;
                            _3004 = _3298 + _3017;
                            _2999 = _3293 + _3012;
                            _3000 = _3294 + _3013;
                            _3001 = _3295 + _3014;
                            if (_3019 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3012 = _2999;
                                _3013 = _3000;
                                _3014 = _3001;
                                _3015 = _3002;
                                _3016 = _3003;
                                _3017 = _3004;
                                _3018 = _3019;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3002;
                        frontier_phi_67_pred_1 = _3003;
                        frontier_phi_67_pred_2 = _3004;
                        frontier_phi_67_pred_3 = _3001;
                        frontier_phi_67_pred_4 = _3000;
                        frontier_phi_67_pred_5 = _2999;
                    }
                    _2667 = frontier_phi_67_pred;
                    _2669 = frontier_phi_67_pred_1;
                    _2671 = frontier_phi_67_pred_2;
                    _2665 = frontier_phi_67_pred_3;
                    _2663 = frontier_phi_67_pred_4;
                    _2661 = frontier_phi_67_pred_5;
                    uint _2806 = _2805 + 1u;
                    if (_2806 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2799 = _2661;
                        _2800 = _2663;
                        _2801 = _2665;
                        _2802 = _2667;
                        _2803 = _2669;
                        _2804 = _2671;
                        _2805 = _2806;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2669;
                frontier_phi_55_56_ladder_1 = _2671;
                frontier_phi_55_56_ladder_2 = _2667;
                frontier_phi_55_56_ladder_3 = _2665;
                frontier_phi_55_56_ladder_4 = _2663;
                frontier_phi_55_56_ladder_5 = _2661;
            }
            else
            {
                frontier_phi_55_56_ladder = _2555;
                frontier_phi_55_56_ladder_1 = _2557;
                frontier_phi_55_56_ladder_2 = _2553;
                frontier_phi_55_56_ladder_3 = _2551;
                frontier_phi_55_56_ladder_4 = _2549;
                frontier_phi_55_56_ladder_5 = _2547;
            }
            _2660 = frontier_phi_55_56_ladder_5;
            _2662 = frontier_phi_55_56_ladder_4;
            _2664 = frontier_phi_55_56_ladder_3;
            _2666 = frontier_phi_55_56_ladder_2;
            _2668 = frontier_phi_55_56_ladder;
            _2670 = frontier_phi_55_56_ladder_1;
        }
        float _2675 = isnan(1.0) ? _699 : (isnan(_699) ? 1.0 : min(_699, 1.0));
        _2459 = (_2675 * _2666) + _1892;
        _2461 = (_2675 * _2668) + _1894;
        _2463 = (_2675 * _2670) + _1896;
        _2465 = ((_2660 * _683) * _2675) + _2240;
        _2467 = ((_2662 * _685) * _2675) + _2242;
        _2469 = ((_2664 * _686) * _2675) + _2244;
    }
    else
    {
        _2459 = _1892;
        _2461 = _1894;
        _2463 = _1896;
        _2465 = _2240;
        _2467 = _2242;
        _2469 = _2244;
    }
    float _4324 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _4335 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _4346 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    uint _2489 = _230 + 6u;
    float _2497 = _621 / cbSceneParam._m0[86u].x;
    float _2498 = _622 / cbSceneParam._m0[86u].y;
    vec4 _2512 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2497, _2498, (log2((isnan(cbSceneParam._m0[77u].w) ? _555 : (isnan(_555) ? cbSceneParam._m0[77u].w : min(_555, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2514 = _2512.x;
    float _2515 = _2512.y;
    float _2516 = _2512.z;
    float _2517 = _2512.w;
    float _2610;
    float _2612;
    float _2614;
    float _2616;
    if (_555 > cbSceneParam._m0[78u].w)
    {
        float _2572 = isnan(_555) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _555 : min(cbSceneParam._m0[80u].w, _555));
        float _2573 = _2572 / _555;
        float _2584 = _2573 * _606;
        float _2585 = _607 * _2573;
        float _2586 = (-0.0) - _2585;
        float _2588 = _2573 * _608;
        float _2590 = (cbSceneParam._m0[77u].w * _2586) / _2572;
        float _2591 = _2590 + cbSceneParam._m0[79u].w;
        float _2592 = cbSceneParam._m0[79u].w - _2585;
        float _2598 = sqrt(((_2584 * _2584) + (_2585 * _2585)) + (_2588 * _2588));
        float _2601 = (1.0 - (cbSceneParam._m0[77u].w / _2572)) * _2598;
        float _2606 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2608 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2761;
        if (abs((_2586 - _2590) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2761 = ((((_2591 > 0.0) ? exp2(_2606 * _2591) : (2.0 - exp2(_2608 * _2591))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2601;
        }
        else
        {
            float _2721 = 1.0 / cbSceneParam._m0[80u].x;
            float _2722 = isnan(_2592) ? _2591 : (isnan(_2591) ? _2592 : max(_2591, _2592));
            float _2723 = isnan(_2592) ? _2591 : (isnan(_2591) ? _2592 : min(_2591, _2592));
            float _2732 = isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : min(_2722, 0.0));
            float _2733 = isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : min(_2723, 0.0));
            _2761 = ((abs(_2598 / _2586) * cbSceneParam._m0[80u].y) * ((((_2732 - _2733) * 2.0) - ((exp2(_2606 * (isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0)))) - exp2(_2606 * (isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : max(_2723, 0.0))))) * _2721)) - ((exp2(_2608 * _2732) - exp2(_2608 * _2733)) * _2721))) + (_2601 * cbSceneParam._m0[80u].z);
        }
        vec4 _2763 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2497, _2498, 1.0), 0.0);
        float _2772 = exp2((_2761 * (-1.44269502162933349609375)) * (1.0 - _2763.w));
        float _2773 = log2(_2772);
        float _2789 = log2(_2517);
        _2610 = (exp2(_2789 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2773 * cbSceneParam._m0[78u].x)) * _2763.x) / cbSceneParam._m0[78u].x)) + _2514;
        _2612 = (exp2(_2789 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2773 * cbSceneParam._m0[78u].y)) * _2763.y) / cbSceneParam._m0[78u].y)) + _2515;
        _2614 = (exp2(_2789 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2773 * cbSceneParam._m0[78u].z)) * _2763.z) / cbSceneParam._m0[78u].z)) + _2516;
        _2616 = _2772 * _2517;
    }
    else
    {
        _2610 = _2514;
        _2612 = _2515;
        _2614 = _2516;
        _2616 = _2517;
    }
    float _2628 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2629 = _2628 == 3.0;
    float _2630 = log2(_2616);
    float _2637 = exp2(_2630 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0))) * (_2459 + ((isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0))) * _699))) + ((_2465 + ((isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0))) * _1507)) * cbPerFrame._m0[3u].x));
    float _2638 = exp2(_2630 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0))) * (_2461 + ((isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0))) * _699))) + ((_2467 + ((isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0))) * _1507)) * cbPerFrame._m0[3u].x));
    float _2639 = exp2(_2630 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0))) * (_2463 + ((isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0))) * _699))) + ((_2469 + ((isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0))) * _1507)) * cbPerFrame._m0[3u].x));
    float _2648 = (_2628 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2648 * (_2629 ? _2637 : (_2637 + (cbSceneParam._m0[72u].w * _2610)));
    SV_Target.y = _2648 * (_2629 ? _2638 : (_2638 + (cbSceneParam._m0[72u].w * _2612)));
    SV_Target.z = _2648 * (_2629 ? _2639 : (_2639 + (cbSceneParam._m0[72u].w * _2614)));
    SV_Target.w = cbInstanceData._m0[_2489].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2489].w;
}


