#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1103;
float _3510;
float _3511;
float _3512;
float _3513;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _204 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _205 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _206 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _212 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _213 = _212 * _204;
    float _214 = _212 * _205;
    float _215 = _212 * _206;
    float _219 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _220 = _219 * NORMAL.x;
    float _221 = _219 * NORMAL.y;
    float _222 = _219 * NORMAL.z;
    float _226 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _227 = _226 * TANGENT.x;
    float _228 = _226 * TANGENT.y;
    float _229 = _226 * TANGENT.z;
    uint _232 = uint(roundEven(NORMAL.w)) * 13u;
    uint _238 = _232 + 1u;
    uint _242 = _232 + 2u;
    float _251 = sqrt(((cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x) + (cbInstanceData._m0[_232].x * cbInstanceData._m0[_232].x)) + (cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x));
    float _252 = _251 * TEXCOORD.z;
    float _253 = _251 * TEXCOORD.w;
    vec4 _272 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _278 = _272.x * cbMtdParam._m0[9u].x;
    float _279 = _272.y * cbMtdParam._m0[9u].y;
    float _280 = _272.z * cbMtdParam._m0[9u].z;
    vec4 _298 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _252) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _253) + cbTextureTilingScale._m0[20u].w));
    vec4 _324 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _328 = _324.z;
    float _332 = (_324.x * 2.0) + (-1.0);
    float _333 = (_324.y * 2.0) + (-1.0);
    float _334 = dot(vec2(_332, _333), vec2(_332, _333));
    float _3522 = isnan(0.0) ? _334 : (isnan(_334) ? 0.0 : max(_334, 0.0));
    float _340 = sqrt(1.0 - (isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0))));
    float _345 = _332 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_298.x * 2.0) + (-1.0)));
    float _346 = _333 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_298.y * 2.0) + (-1.0)));
    float _349 = fma(_340, _220, fma(_346, _227, _345 * _213));
    float _352 = fma(_340, _221, fma(_346, _228, _345 * _214));
    float _355 = fma(_340, _222, fma(_346, _229, _345 * _215));
    float _359 = inversesqrt(dot(vec3(_349, _352, _355), vec3(_349, _352, _355)));
    vec4 _395 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _252) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _253) + cbTextureTilingScale._m0[11u].w));
    float _397 = _395.x;
    float _398 = 1.0 - _397;
    float _405 = ((_397 - _398) * cbMtdParam._m0[24u].z) + _398;
    float _407 = (cbMtdParam._m0[19u].x + dot(vec4(_359 * _349, _359 * _352, _359 * _355, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_405 * cbMtdParam._m0[21u].z);
    float _3533 = isnan(0.0) ? _407 : (isnan(_407) ? 0.0 : max(_407, 0.0));
    float _408 = isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0));
    float _423 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_405 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3544 = isnan(0.0) ? _423 : (isnan(_423) ? 0.0 : max(_423, 0.0));
    float _424 = isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0));
    float _428 = ((_408 * (cbMtdParam._m0[17u].x - _278)) * _424) + _278;
    float _429 = ((_408 * (cbMtdParam._m0[17u].y - _279)) * _424) + _279;
    float _430 = ((_408 * (cbMtdParam._m0[17u].z - _280)) * _424) + _280;
    vec4 _443 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _445 = _443.x;
    float _448 = _445 - ((_445 * _408) * _424);
    float _453 = (((_298.z - _328) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _328;
    vec4 _466 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _252) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _253) + cbTextureTilingScale._m0[15u].w));
    float _473 = (_466.x * 2.0) + (-1.0);
    float _474 = (_466.y * 2.0) + (-1.0);
    float _475 = dot(vec2(_473, _474), vec2(_473, _474));
    float _3555 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _484 = (((_466.z - _453) * _408) * _424) + _453;
    float _499 = (((cbMtdParam._m0[21u].x * _345) + ((_473 - _345) * _408)) * _424) + _345;
    float _500 = (((cbMtdParam._m0[21u].x * _346) + ((_474 - _346) * _408)) * _424) + _346;
    float _501 = (((sqrt(1.0 - (isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0)))) - _340) * _408) * _424) + _340;
    float _506 = cbMtdParam._m0[22u].x + _324.w;
    float _509 = fma(_501, _220, fma(_500, _227, _499 * _213));
    float _512 = fma(_501, _221, fma(_500, _228, _499 * _214));
    float _515 = fma(_501, _222, fma(_500, _229, _499 * _215));
    float _519 = inversesqrt(dot(vec3(_509, _512, _515), vec3(_509, _512, _515)));
    float _520 = _519 * _509;
    float _521 = _519 * _512;
    float _522 = _519 * _515;
    float _3566 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _523 = isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0));
    float _3577 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _3588 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _3599 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _3610 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _3621 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _528 = isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0));
    float _542 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _583 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _593 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _583);
    float _594 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _583);
    float _595 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _583);
    float _599 = inversesqrt(dot(vec3(_593, _594, _595), vec3(_593, _594, _595)));
    float _600 = _593 * _599;
    float _601 = _594 * _599;
    float _602 = _595 * _599;
    vec4 _607 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _609 = _607.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _784 = sqrt(((_593 * _593) + (_594 * _594)) + (_595 * _595));
        float _790 = (cbMatDynParam._m0[5u].x * _784) + cbMatDynParam._m0[5u].y;
        float _3632 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
        float _791 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
        float _795 = (cbMatDynParam._m0[5u].z * _784) + cbMatDynParam._m0[5u].w;
        float _3643 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0))) - _791)) + _791) < ((_609 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _621 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _622 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _642 = fma(_522, cbSceneParam._m0[5u].z, fma(_521, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _520));
    float _645 = fma(_522, cbSceneParam._m0[6u].z, fma(_521, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _520));
    float _648 = fma(_522, cbSceneParam._m0[7u].z, fma(_521, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _520));
    uint _661 = _232 + 9u;
    uint _662 = _661 + uint(cbMatDynParam._m0[0u].w);
    float _668 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0)))) * cbInstanceData._m0[_662].x;
    float _669 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0)))) * cbInstanceData._m0[_662].y;
    float _670 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0)))) * cbInstanceData._m0[_662].z;
    float _3654 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _671 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
    float _3665 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _672 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
    float _3676 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _673 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
    float _674 = 1.0 - _528;
    float _675 = _671 * _674;
    float _676 = _672 * _674;
    float _677 = _673 * _674;
    float _682 = (_671 + (-0.039999999105930328369140625)) * _528;
    float _683 = (_672 + (-0.039999999105930328369140625)) * _528;
    float _684 = (_673 + (-0.039999999105930328369140625)) * _528;
    float _685 = _682 + 0.039999999105930328369140625;
    float _687 = _683 + 0.039999999105930328369140625;
    float _688 = _684 + 0.039999999105930328369140625;
    vec4 _697 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _621, cbSceneParam._m0[86u].y * _622));
    float _701 = ((isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0))) * TEXCOORD_5.w) * _697.x;
    float _702 = dot(vec3(_520, _521, _522), vec3(_600, _601, _602));
    float _705 = _702 * 2.0;
    float _709 = (_705 * _520) - _600;
    float _710 = (_705 * _521) - _601;
    float _711 = (_705 * _522) - _602;
    float _715 = abs(dot(vec3(_600, _601, _602), vec3(_520, _521, _522)));
    float _3687 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _717 = sqrt(_523);
    float _730 = exp2((_717 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_717 * 3.0));
    float _736 = (1.0 - _730) * ((_717 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _737 = _730 * _717;
    float _765 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _769 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _773 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1102;
    float _1104;
    float _1105;
    float _1106;
    float _1107;
    float _1108;
    float _1109;
    float _1110;
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    float _1117;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _827 = fma(_773, cbModelParam._m0[26u].z, fma(_769, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _765));
        float _831 = fma(_773, cbModelParam._m0[27u].z, fma(_769, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _765));
        float _835 = fma(_773, cbModelParam._m0[28u].z, fma(_769, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _765));
        float _860 = _765 + _520;
        float _861 = _769 + _521;
        float _862 = _773 + _522;
        float _872 = fma(_862, cbModelParam._m0[26u].z, fma(_861, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _860)) - _827;
        float _873 = fma(_862, cbModelParam._m0[27u].z, fma(_861, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _860)) - _831;
        float _874 = fma(_862, cbModelParam._m0[28u].z, fma(_861, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _860)) - _835;
        float _878 = inversesqrt(dot(vec3(_872, _873, _874), vec3(_872, _873, _874)));
        float _891 = ((_878 * _872) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_827 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _892 = ((_878 * _873) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_831 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _893 = ((_878 * _874) / cbModelParam._m0[34u].z) + ((((((_835 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _896 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_891, _892, _893), 0.0);
        vec4 _903 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_891, _892, _893), 0.0);
        vec4 _910 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_891, _892, _893), 0.0);
        vec4 _917 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_891, _892, _893), 0.0);
        float _930 = exp2((_896.w + (-0.5)) * 20.0) * 2.0;
        float _931 = _930 * (_896.x + (-0.5));
        float _932 = _930 * (_896.y + (-0.5));
        float _933 = _930 * (_896.z + (-0.5));
        float _940 = exp2((_903.w + (-0.5)) * 20.0) * 2.0;
        float _941 = _940 * (_903.x + (-0.5));
        float _942 = _940 * (_903.y + (-0.5));
        float _943 = _940 * (_903.z + (-0.5));
        float _950 = exp2((_910.w + (-0.5)) * 20.0) * 2.0;
        float _951 = _950 * (_910.x + (-0.5));
        float _952 = _950 * (_910.y + (-0.5));
        float _953 = _950 * (_910.z + (-0.5));
        float _960 = exp2((_917.w + (-0.5)) * 20.0) * 2.0;
        float _961 = _960 * (_917.x + (-0.5));
        float _962 = _960 * (_917.y + (-0.5));
        float _963 = _960 * (_917.z + (-0.5));
        float _964 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
        float _965 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
        float _966 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
        float _967 = _931 * 0.5;
        float _968 = _941 * 0.5;
        float _969 = _951 * 0.5;
        float _970 = dot(vec3(_967, _968, _969), vec3(_967, _968, _969));
        float _975 = (_970 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_970);
        float _984 = (dot(vec3(_520, _521, _522), vec3(_975 * _967, _975 * _968, _975 * _969)) + 1.0) * 0.5;
        float _3713 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _994 = sqrt(((_968 * _968) + (_967 * _967)) + (_969 * _969)) / (_964 + 9.9999997473787516355514526367188e-06);
        float _3724 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
        float _995 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
        float _996 = _995 * 2.0;
        float _1000 = (1.0 - _995) / (_995 + 1.0);
        float _3735 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
        float _1001 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
        float _1010 = ((((1.0 - _1001) * (_996 + 2.0)) * exp2(log2(isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0))) * (_996 + 1.0))) + _1001) * _964;
        float _1011 = _932 * 0.5;
        float _1012 = _942 * 0.5;
        float _1013 = _952 * 0.5;
        float _1014 = dot(vec3(_1011, _1012, _1013), vec3(_1011, _1012, _1013));
        float _1019 = (_1014 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1014);
        float _1027 = (dot(vec3(_520, _521, _522), vec3(_1019 * _1011, _1019 * _1012, _1019 * _1013)) + 1.0) * 0.5;
        float _3746 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1036 = sqrt(((_1012 * _1012) + (_1011 * _1011)) + (_1013 * _1013)) / (_965 + 9.9999997473787516355514526367188e-06);
        float _3757 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1037 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
        float _1038 = _1037 * 2.0;
        float _1042 = (1.0 - _1037) / (_1037 + 1.0);
        float _3768 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1043 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
        float _1052 = ((((1.0 - _1043) * (_1038 + 2.0)) * exp2(log2(isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0))) * (_1038 + 1.0))) + _1043) * _965;
        float _1053 = _933 * 0.5;
        float _1054 = _943 * 0.5;
        float _1055 = _953 * 0.5;
        float _1056 = dot(vec3(_1053, _1054, _1055), vec3(_1053, _1054, _1055));
        float _1061 = (_1056 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1056);
        float _1069 = (dot(vec3(_520, _521, _522), vec3(_1061 * _1053, _1061 * _1054, _1061 * _1055)) + 1.0) * 0.5;
        float _3779 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1078 = sqrt(((_1054 * _1054) + (_1053 * _1053)) + (_1055 * _1055)) / (_966 + 9.9999997473787516355514526367188e-06);
        float _3790 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1079 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
        float _1080 = _1079 * 2.0;
        float _1084 = (1.0 - _1079) / (_1079 + 1.0);
        float _3801 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1085 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
        float _1094 = ((((1.0 - _1085) * (_1080 + 2.0)) * exp2(log2(isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0))) * (_1080 + 1.0))) + _1085) * _966;
        _1102 = _933;
        _1104 = _932;
        _1105 = _931;
        _1106 = _943;
        _1107 = _942;
        _1108 = _941;
        _1109 = _953;
        _1110 = _952;
        _1111 = _951;
        _1112 = _966;
        _1113 = _965;
        _1114 = _964;
        _1115 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0)));
        _1116 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0)));
        _1117 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0)));
    }
    else
    {
        _1102 = _1103;
        _1104 = _1103;
        _1105 = _1103;
        _1106 = _1103;
        _1107 = _1103;
        _1108 = _1103;
        _1109 = _1103;
        _1110 = _1103;
        _1111 = _1103;
        _1112 = _1103;
        _1113 = _1103;
        _1114 = _1103;
        _1115 = 0.0;
        _1116 = 0.0;
        _1117 = 0.0;
    }
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1145 = fma(_773, cbModelParam._m0[30u].z, fma(_769, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _765));
        float _1149 = fma(_773, cbModelParam._m0[31u].z, fma(_769, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _765));
        float _1153 = fma(_773, cbModelParam._m0[32u].z, fma(_769, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _765));
        float _1176 = _765 + _520;
        float _1177 = _769 + _521;
        float _1178 = _773 + _522;
        float _1188 = fma(_1178, cbModelParam._m0[30u].z, fma(_1177, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1176)) - _1145;
        float _1189 = fma(_1178, cbModelParam._m0[31u].z, fma(_1177, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1176)) - _1149;
        float _1190 = fma(_1178, cbModelParam._m0[32u].z, fma(_1177, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1176)) - _1153;
        float _1194 = inversesqrt(dot(vec3(_1188, _1189, _1190), vec3(_1188, _1189, _1190)));
        float _1207 = ((_1194 * _1188) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1145 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1208 = ((_1194 * _1189) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1149 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1209 = ((_1194 * _1190) / cbModelParam._m0[35u].z) + ((((((_1153 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1211 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1207, _1208, _1209), 0.0);
        vec4 _1218 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1207, _1208, _1209), 0.0);
        vec4 _1225 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1207, _1208, _1209), 0.0);
        vec4 _1232 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1207, _1208, _1209), 0.0);
        float _1244 = exp2((_1211.w + (-0.5)) * 20.0) * 2.0;
        float _1245 = _1244 * (_1211.x + (-0.5));
        float _1246 = _1244 * (_1211.y + (-0.5));
        float _1247 = _1244 * (_1211.z + (-0.5));
        float _1254 = exp2((_1218.w + (-0.5)) * 20.0) * 2.0;
        float _1255 = _1254 * (_1218.x + (-0.5));
        float _1256 = _1254 * (_1218.y + (-0.5));
        float _1257 = _1254 * (_1218.z + (-0.5));
        float _1264 = exp2((_1225.w + (-0.5)) * 20.0) * 2.0;
        float _1265 = _1264 * (_1225.x + (-0.5));
        float _1266 = _1264 * (_1225.y + (-0.5));
        float _1267 = _1264 * (_1225.z + (-0.5));
        float _1274 = exp2((_1232.w + (-0.5)) * 20.0) * 2.0;
        float _1275 = _1274 * (_1232.x + (-0.5));
        float _1276 = _1274 * (_1232.y + (-0.5));
        float _1277 = _1274 * (_1232.z + (-0.5));
        float _1278 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1279 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1280 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1281 = _1245 * 0.5;
        float _1282 = _1255 * 0.5;
        float _1283 = _1265 * 0.5;
        float _1284 = dot(vec3(_1281, _1282, _1283), vec3(_1281, _1282, _1283));
        float _1289 = (_1284 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1284);
        float _1297 = (dot(vec3(_520, _521, _522), vec3(_1289 * _1281, _1289 * _1282, _1289 * _1283)) + 1.0) * 0.5;
        float _3842 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1306 = sqrt(((_1282 * _1282) + (_1281 * _1281)) + (_1283 * _1283)) / (_1278 + 9.9999997473787516355514526367188e-06);
        float _3853 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1307 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
        float _1308 = _1307 * 2.0;
        float _1312 = (1.0 - _1307) / (_1307 + 1.0);
        float _3864 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1313 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
        float _1322 = ((((1.0 - _1313) * (_1308 + 2.0)) * exp2(log2(isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0))) * (_1308 + 1.0))) + _1313) * _1278;
        float _1323 = _1246 * 0.5;
        float _1324 = _1256 * 0.5;
        float _1325 = _1266 * 0.5;
        float _1326 = dot(vec3(_1323, _1324, _1325), vec3(_1323, _1324, _1325));
        float _1331 = (_1326 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1326);
        float _1339 = (dot(vec3(_520, _521, _522), vec3(_1331 * _1323, _1331 * _1324, _1331 * _1325)) + 1.0) * 0.5;
        float _3875 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1348 = sqrt(((_1324 * _1324) + (_1323 * _1323)) + (_1325 * _1325)) / (_1279 + 9.9999997473787516355514526367188e-06);
        float _3886 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1349 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
        float _1350 = _1349 * 2.0;
        float _1354 = (1.0 - _1349) / (_1349 + 1.0);
        float _3897 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1355 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
        float _1364 = ((((1.0 - _1355) * (_1350 + 2.0)) * exp2(log2(isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0))) * (_1350 + 1.0))) + _1355) * _1279;
        float _1365 = _1247 * 0.5;
        float _1366 = _1257 * 0.5;
        float _1367 = _1267 * 0.5;
        float _1368 = dot(vec3(_1365, _1366, _1367), vec3(_1365, _1366, _1367));
        float _1373 = (_1368 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1368);
        float _1381 = (dot(vec3(_520, _521, _522), vec3(_1373 * _1365, _1373 * _1366, _1373 * _1367)) + 1.0) * 0.5;
        float _3908 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1390 = sqrt(((_1366 * _1366) + (_1365 * _1365)) + (_1367 * _1367)) / (_1280 + 9.9999997473787516355514526367188e-06);
        float _3919 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1391 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
        float _1392 = _1391 * 2.0;
        float _1396 = (1.0 - _1391) / (_1391 + 1.0);
        float _3930 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1397 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
        float _1406 = ((((1.0 - _1397) * (_1392 + 2.0)) * exp2(log2(isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0))) * (_1392 + 1.0))) + _1397) * _1280;
        _1414 = _1247;
        _1415 = _1246;
        _1416 = _1245;
        _1417 = _1257;
        _1418 = _1256;
        _1419 = _1255;
        _1420 = _1267;
        _1421 = _1266;
        _1422 = _1265;
        _1423 = _1280;
        _1424 = _1279;
        _1425 = _1278;
        _1426 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0)));
        _1427 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0)));
        _1428 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0)));
    }
    else
    {
        _1414 = _1103;
        _1415 = _1103;
        _1416 = _1103;
        _1417 = _1103;
        _1418 = _1103;
        _1419 = _1103;
        _1420 = _1103;
        _1421 = _1103;
        _1422 = _1103;
        _1423 = _1103;
        _1424 = _1103;
        _1425 = _1103;
        _1426 = 0.0;
        _1427 = 0.0;
        _1428 = 0.0;
    }
    float _1438 = (cbModelParam._m0[1u].x * (_1426 - _1115)) + _1115;
    float _1439 = (cbModelParam._m0[1u].x * (_1427 - _1116)) + _1116;
    float _1440 = (cbModelParam._m0[1u].x * (_1428 - _1117)) + _1117;
    float _1461 = fma(_1440, cbSceneParam._m0[89u].z, fma(_1439, cbSceneParam._m0[89u].y, _1438 * cbSceneParam._m0[89u].x));
    float _1464 = fma(_1440, cbSceneParam._m0[90u].z, fma(_1439, cbSceneParam._m0[90u].y, _1438 * cbSceneParam._m0[90u].x));
    float _1467 = fma(_1440, cbSceneParam._m0[91u].z, fma(_1439, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1438));
    float _1482 = _709 * 0.5;
    float _1483 = _710 * 0.5;
    float _1484 = _711 * 0.5;
    float _1485 = dot(vec4(_1482, _1483, _1484, 1.0), vec4(_1416, _1419, _1422, _1425));
    float _1488 = dot(vec4(_1482, _1483, _1484, 1.0), vec4(_1415, _1418, _1421, _1424));
    float _1491 = dot(vec4(_1482, _1483, _1484, 1.0), vec4(_1414, _1417, _1420, _1423));
    float _1525;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1498 = dot(vec4(_1482, _1483, _1484, 1.0), vec4(_1102, _1106, _1109, _1112));
        float _1502 = dot(vec4(_1482, _1483, _1484, 1.0), vec4(_1104, _1107, _1110, _1113));
        float _1506 = dot(vec4(_1482, _1483, _1484, 1.0), vec4(_1105, _1108, _1111, _1114));
        float _1513 = dot(vec4(cbModelParam._m0[39u]), vec4(_1482, _1483, _1484, 1.0));
        _1525 = dot(vec3(isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0)), isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0)), isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1513) ? 0.0 : (isnan(0.0) ? _1513 : max(0.0, _1513))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1525 = 1.0;
    }
    float _1536;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1527 = dot(vec4(cbModelParam._m0[40u]), vec4(_1482, _1483, _1484, 1.0));
        _1536 = dot(vec3(isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0)), isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0)), isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1527) ? 0.0 : (isnan(0.0) ? _1527 : max(0.0, _1527))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1536 = 1.0;
    }
    float _1540 = (_1536 * cbModelParam._m0[1u].x) + (_1525 * (1.0 - cbModelParam._m0[1u].x));
    float _1550 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _523);
    float _1551 = isnan(_1550) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1550 : min(cbModelParam._m0[25u].z, _1550));
    float _1632;
    float _1634;
    float _1636;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1599 = fma(_773, cbModelParam._m0[13u].z, fma(_769, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _765)) + cbModelParam._m0[13u].w;
        float _1603 = fma(_773, cbModelParam._m0[14u].z, fma(_769, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _765)) + cbModelParam._m0[14u].w;
        float _1607 = fma(_773, cbModelParam._m0[15u].z, fma(_769, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _765)) + cbModelParam._m0[15u].w;
        float _1610 = fma(_711, cbModelParam._m0[13u].z, fma(_710, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _709));
        float _1613 = fma(_711, cbModelParam._m0[14u].z, fma(_710, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _709));
        float _1616 = fma(_711, cbModelParam._m0[15u].z, fma(_710, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _709));
        float _1644;
        if (_1610 > 0.0)
        {
            _1644 = abs((1.0 - _1599) / _1610);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1610 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1599 + 1.0) / _1610);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1644 = frontier_phi_17_15_ladder;
        }
        float _1869;
        if (_1613 > 0.0)
        {
            _1869 = abs((1.0 - _1603) / _1613);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1613 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1603 + 1.0) / _1613);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1869 = frontier_phi_26_22_ladder;
        }
        float _2126;
        if (_1616 > 0.0)
        {
            _2126 = abs((1.0 - _1607) / _1616);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1616 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1607 + 1.0) / _1616);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2126 = frontier_phi_38_33_ladder;
        }
        float _2128 = isnan(_1869) ? _1644 : (isnan(_1644) ? _1869 : min(_1644, _1869));
        float _2129 = isnan(_2126) ? _2128 : (isnan(_2128) ? _2126 : min(_2128, _2126));
        float _2133 = (_2129 * _1610) + _1599;
        float _2134 = (_2129 * _1613) + _1603;
        float _2135 = (_2129 * _1616) + _1607;
        float _2136 = _2129 * 9.9999997473787516355514526367188e-05;
        float _2138 = (-1.0) - _2136;
        float _2140 = _2136 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2135 > _2140) || ((_2135 < _2138) || ((_2134 > _2140) || ((_2134 < _2138) || ((_2133 < _2138) || (_2133 > _2140))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2263 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2135, cbModelParam._m0[9u].z, fma(_2134, cbModelParam._m0[9u].y, _2133 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2135, cbModelParam._m0[10u].z, fma(_2134, cbModelParam._m0[10u].y, _2133 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2135, cbModelParam._m0[11u].z, fma(_2134, cbModelParam._m0[11u].y, _2133 * cbModelParam._m0[11u].x))), _1551);
            frontier_phi_16_38_ladder = _2263.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2263.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2263.x * cbModelParam._m0[1u].y;
        }
        _1632 = frontier_phi_16_38_ladder_2;
        _1634 = frontier_phi_16_38_ladder_1;
        _1636 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1620 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_709, _710, _711), _1551);
        _1632 = _1620.x * cbModelParam._m0[1u].y;
        _1634 = _1620.y * cbModelParam._m0[1u].y;
        _1636 = _1620.z * cbModelParam._m0[1u].y;
    }
    float _1640 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _523);
    float _1641 = isnan(_1640) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1640 : min(cbModelParam._m0[25u].w, _1640));
    float _1731;
    float _1733;
    float _1735;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1695 = fma(_773, cbModelParam._m0[21u].z, fma(_769, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _765)) + cbModelParam._m0[21u].w;
        float _1699 = fma(_773, cbModelParam._m0[22u].z, fma(_769, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _765)) + cbModelParam._m0[22u].w;
        float _1703 = fma(_773, cbModelParam._m0[23u].z, fma(_769, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _765)) + cbModelParam._m0[23u].w;
        float _1706 = fma(_711, cbModelParam._m0[21u].z, fma(_710, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _709));
        float _1709 = fma(_711, cbModelParam._m0[22u].z, fma(_710, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _709));
        float _1712 = fma(_711, cbModelParam._m0[23u].z, fma(_710, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _709));
        float _1874;
        if (_1706 > 0.0)
        {
            _1874 = abs((1.0 - _1695) / _1706);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1706 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1695 + 1.0) / _1706);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1874 = frontier_phi_28_24_ladder;
        }
        float _2153;
        if (_1709 > 0.0)
        {
            _2153 = abs((1.0 - _1699) / _1709);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1709 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1699 + 1.0) / _1709);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2153 = frontier_phi_40_35_ladder;
        }
        float _2366;
        if (_1712 > 0.0)
        {
            _2366 = abs((1.0 - _1703) / _1712);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1712 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1703 + 1.0) / _1712);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2366 = frontier_phi_49_46_ladder;
        }
        float _2368 = isnan(_2153) ? _1874 : (isnan(_1874) ? _2153 : min(_1874, _2153));
        float _2369 = isnan(_2366) ? _2368 : (isnan(_2368) ? _2366 : min(_2368, _2366));
        float _2373 = (_2369 * _1706) + _1695;
        float _2374 = (_2369 * _1709) + _1699;
        float _2375 = (_2369 * _1712) + _1703;
        float _2376 = _2369 * 9.9999997473787516355514526367188e-05;
        float _2377 = (-1.0) - _2376;
        float _2379 = _2376 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2375 > _2379) || ((_2375 < _2377) || ((_2374 > _2379) || ((_2374 < _2377) || ((_2373 < _2377) || (_2373 > _2379))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2574 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2375, cbModelParam._m0[17u].z, fma(_2374, cbModelParam._m0[17u].y, _2373 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2375, cbModelParam._m0[18u].z, fma(_2374, cbModelParam._m0[18u].y, _2373 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2375, cbModelParam._m0[19u].z, fma(_2374, cbModelParam._m0[19u].y, _2373 * cbModelParam._m0[19u].x))), _1641);
            frontier_phi_25_49_ladder = _2574.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2574.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2574.x * cbModelParam._m0[1u].z;
        }
        _1731 = frontier_phi_25_49_ladder_2;
        _1733 = frontier_phi_25_49_ladder_1;
        _1735 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1715 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_709, _710, _711), _1641);
        _1731 = _1715.x * cbModelParam._m0[1u].z;
        _1733 = _1715.y * cbModelParam._m0[1u].z;
        _1735 = _1715.z * cbModelParam._m0[1u].z;
    }
    float _1748 = (((_736 * _685) + _737) * _701) * ((cbModelParam._m0[1u].w * (_1731 - _1632)) + _1632);
    float _1750 = (((_736 * _687) + _737) * _701) * ((cbModelParam._m0[1u].w * (_1733 - _1634)) + _1634);
    float _1752 = (((_736 * _688) + _737) * _701) * ((cbModelParam._m0[1u].w * (_1735 - _1636)) + _1636);
    float _1755 = fma(_1752, cbSceneParam._m0[89u].z, fma(_1750, cbSceneParam._m0[89u].y, _1748 * cbSceneParam._m0[89u].x));
    float _1758 = fma(_1752, cbSceneParam._m0[90u].z, fma(_1750, cbSceneParam._m0[90u].y, _1748 * cbSceneParam._m0[90u].x));
    float _1761 = fma(_1752, cbSceneParam._m0[91u].z, fma(_1750, cbSceneParam._m0[91u].y, _1748 * cbSceneParam._m0[91u].x));
    vec4 _1769 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_621, _622));
    float _1771 = _1769.w;
    float _1783 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1771);
    float _1784 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1771);
    float _1785 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1771);
    uvec4 _1789 = floatBitsToUint(cbInstanceData._m0[_232 + 5u]);
    uint _1791 = _1789.x * 14u;
    uint _1792 = _1791 + 13u;
    float _1799 = _701 + (-1.0);
    float _1804 = (cbLight._m0[_1792].x * _1799) + 1.0;
    float _1805 = (cbLight._m0[_1792].y * _1799) + 1.0;
    float _1806 = (cbLight._m0[_1792].z * _1799) + 1.0;
    float _1807 = (cbLight._m0[_1792].w * _1799) + 1.0;
    uint _1808 = _1791 + 5u;
    float _1814 = isnan(1.0) ? _1805 : (isnan(_1805) ? 1.0 : min(_1805, 1.0));
    uint _1818 = _1791 + 4u;
    float _1828 = isnan(1.0) ? _1804 : (isnan(_1804) ? 1.0 : min(_1804, 1.0));
    uint _1832 = _1791 | 1u;
    float _1843 = dot(vec3(cbLight._m0[_1791].xyz), vec3(_520, _521, _522));
    float _1846 = dot(vec3(cbLight._m0[_1832].xyz), vec3(_520, _521, _522));
    float _4066 = isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0));
    float _4077 = isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0));
    float _1851 = (isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0))) * 0.3183098733425140380859375;
    float _1853 = (isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0))) * 0.3183098733425140380859375;
    float _1860 = ((cbLight._m0[_1808].x * _1814) * _1853) + (((cbLight._m0[_1818].x * _1783) * _1828) * _1851);
    float _1861 = ((_1814 * cbLight._m0[_1808].y) * _1853) + (((cbLight._m0[_1818].y * _1784) * _1828) * _1851);
    float _1862 = ((_1814 * cbLight._m0[_1808].z) * _1853) + (((cbLight._m0[_1818].z * _1785) * _1828) * _1851);
    uvec4 _1866 = floatBitsToUint(cbLight._m0[_1791 + 12u]);
    bool _1868 = _1866.x == 0u;
    float _1879;
    float _1881;
    float _1883;
    if (_1868)
    {
        _1879 = _1860;
        _1881 = _1861;
        _1883 = _1862;
    }
    else
    {
        uint _1887 = _1791 + 6u;
        float _1903 = (dot(vec3(cbLight._m0[_1791 + 2u].xyz), vec3(_520, _521, _522)) * 0.5) + 0.5;
        float _1904 = _1903 * _1903;
        float _4088 = isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0));
        float _1905 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
        float _1906 = isnan(1.0) ? _1806 : (isnan(_1806) ? 1.0 : min(_1806, 1.0));
        _1879 = (((cbLight._m0[_1887].x * 0.3183098733425140380859375) * _1905) * _1906) + _1860;
        _1881 = (((cbLight._m0[_1887].y * 0.3183098733425140380859375) * _1905) * _1906) + _1861;
        _1883 = (((cbLight._m0[_1887].z * 0.3183098733425140380859375) * _1905) * _1906) + _1862;
    }
    bool _1886 = _1866.y == 0u;
    float _1924;
    float _1926;
    float _1928;
    if (_1886)
    {
        _1924 = _1879;
        _1926 = _1881;
        _1928 = _1883;
    }
    else
    {
        uint _2097 = _1791 + 7u;
        float _2113 = (dot(vec3(cbLight._m0[_1791 + 3u].xyz), vec3(_520, _521, _522)) * 0.5) + 0.5;
        float _2114 = _2113 * _2113;
        float _4104 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
        float _2115 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
        float _2116 = isnan(1.0) ? _1807 : (isnan(_1807) ? 1.0 : min(_1807, 1.0));
        _1924 = (((cbLight._m0[_2097].x * 0.3183098733425140380859375) * _2115) * _2116) + _1879;
        _1926 = (((cbLight._m0[_2097].y * 0.3183098733425140380859375) * _2115) * _2116) + _1881;
        _1928 = (((cbLight._m0[_2097].z * 0.3183098733425140380859375) * _2115) * _2116) + _1883;
    }
    uint _1931 = _1791 + 8u;
    float _1944 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1791].w)) * _523) * 0.949999988079071044921875);
    float _1945 = _1944 * _1944;
    float _1946 = cbLight._m0[_1791].x + _600;
    float _1947 = cbLight._m0[_1791].y + _601;
    float _1948 = cbLight._m0[_1791].z + _602;
    float _1952 = inversesqrt(dot(vec3(_1946, _1947, _1948), vec3(_1946, _1947, _1948)));
    float _1953 = _1952 * _1946;
    float _1954 = _1952 * _1947;
    float _1955 = _1952 * _1948;
    float _1956 = dot(vec3(_520, _521, _522), vec3(cbLight._m0[_1791].xyz));
    float _4120 = isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0));
    float _1959 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
    float _4131 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
    float _1960 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
    float _1961 = dot(vec3(_520, _521, _522), vec3(_1953, _1954, _1955));
    float _4142 = isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0));
    float _1964 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
    float _1965 = dot(vec3(cbLight._m0[_1791].xyz), vec3(_1953, _1954, _1955));
    float _4153 = isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0));
    float _1969 = _1945 * _1945;
    float _1973 = ((_1964 * _1964) * (_1969 + (-1.0))) + 1.0;
    float _1981 = exp2(log2(1.0 - (isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0)))) * 5.0);
    float _1982 = 0.959999978542327880859375 - _682;
    float _1984 = 0.959999978542327880859375 - _683;
    float _1985 = 0.959999978542327880859375 - _684;
    float _1992 = 1.0 - _1945;
    float _2003 = (0.5 / (((_1960 * ((_1959 * _1992) + _1945)) + 9.9999999392252902907785028219223e-09) + (((_1960 * _1992) + _1945) * _1959))) * _1959;
    float _4164 = isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0));
    float _2005 = (isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0))) * (_1969 / ((_1973 * _1973) * 3.141590118408203125));
    uint _2019 = _1791 + 9u;
    float _2030 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1832].w)) * _523) * 0.949999988079071044921875);
    float _2031 = _2030 * _2030;
    float _2032 = cbLight._m0[_1832].x + _600;
    float _2033 = cbLight._m0[_1832].y + _601;
    float _2034 = cbLight._m0[_1832].z + _602;
    float _2038 = inversesqrt(dot(vec3(_2032, _2033, _2034), vec3(_2032, _2033, _2034)));
    float _2039 = _2038 * _2032;
    float _2040 = _2038 * _2033;
    float _2041 = _2038 * _2034;
    float _2042 = dot(vec3(_520, _521, _522), vec3(cbLight._m0[_1832].xyz));
    float _4175 = isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0));
    float _2045 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
    float _2046 = dot(vec3(_520, _521, _522), vec3(_2039, _2040, _2041));
    float _4186 = isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0));
    float _2049 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
    float _2050 = dot(vec3(cbLight._m0[_1832].xyz), vec3(_2039, _2040, _2041));
    float _4197 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
    float _2054 = _2031 * _2031;
    float _2058 = ((_2049 * _2049) * (_2054 + (-1.0))) + 1.0;
    float _2065 = exp2(log2(1.0 - (isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0)))) * 5.0);
    float _2072 = 1.0 - _2031;
    float _2082 = (0.5 / (((_1960 * ((_2045 * _2072) + _2031)) + 9.9999999392252902907785028219223e-09) + (((_1960 * _2072) + _2031) * _2045))) * _2045;
    float _4208 = isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0));
    float _2084 = (isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0))) * (_2054 / ((_2058 * _2058) * 3.141590118408203125));
    float _2094 = (((((_2065 * _1982) + _685) * cbLight._m0[_2019].x) * _2084) * _1814) + ((((cbLight._m0[_1931].x * _1783) * ((_1981 * _1982) + _685)) * _2005) * _1828);
    float _2095 = (((((_2065 * _1984) + _687) * cbLight._m0[_2019].y) * _2084) * _1814) + ((((cbLight._m0[_1931].y * _1784) * ((_1981 * _1984) + _687)) * _2005) * _1828);
    float _2096 = (((((_2065 * _1985) + _688) * cbLight._m0[_2019].z) * _2084) * _1814) + ((((cbLight._m0[_1931].z * _1785) * ((_1981 * _1985) + _688)) * _2005) * _1828);
    float _2158;
    float _2160;
    float _2162;
    if (_1868)
    {
        _2158 = _2094;
        _2160 = _2095;
        _2162 = _2096;
    }
    else
    {
        uint _2164 = _1791 + 2u;
        uint _2168 = _1791 + 10u;
        float _2182 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2164].w)) * _523) * 0.949999988079071044921875);
        float _2183 = _2182 * _2182;
        float _2184 = cbLight._m0[_2164].x + _600;
        float _2185 = cbLight._m0[_2164].y + _601;
        float _2186 = cbLight._m0[_2164].z + _602;
        float _2190 = inversesqrt(dot(vec3(_2184, _2185, _2186), vec3(_2184, _2185, _2186)));
        float _2191 = _2190 * _2184;
        float _2192 = _2190 * _2185;
        float _2193 = _2190 * _2186;
        float _2194 = dot(vec3(_520, _521, _522), vec3(cbLight._m0[_2164].xyz));
        float _4219 = isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : max(_2194, 0.0));
        float _2197 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
        float _2198 = dot(vec3(_520, _521, _522), vec3(_2191, _2192, _2193));
        float _4230 = isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0));
        float _2201 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
        float _2202 = dot(vec3(cbLight._m0[_2164].xyz), vec3(_2191, _2192, _2193));
        float _4241 = isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0));
        float _2206 = _2183 * _2183;
        float _2210 = ((_2201 * _2201) * (_2206 + (-1.0))) + 1.0;
        float _2217 = exp2(log2(1.0 - (isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0)))) * 5.0);
        float _2224 = 1.0 - _2183;
        float _2234 = (0.5 / (((_1960 * ((_2197 * _2224) + _2183)) + 9.9999999392252902907785028219223e-09) + (((_1960 * _2224) + _2183) * _2197))) * _2197;
        float _4252 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
        float _2236 = (isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0))) * (_2206 / ((_2210 * _2210) * 3.141590118408203125));
        float _2237 = isnan(1.0) ? _1806 : (isnan(_1806) ? 1.0 : min(_1806, 1.0));
        _2158 = (((((_2217 * _1982) + _685) * cbLight._m0[_2168].x) * _2236) * _2237) + _2094;
        _2160 = (((((_2217 * _1984) + _687) * cbLight._m0[_2168].y) * _2236) * _2237) + _2095;
        _2162 = (((((_2217 * _1985) + _688) * cbLight._m0[_2168].z) * _2236) * _2237) + _2096;
    }
    float _2272;
    float _2274;
    float _2276;
    if (_1886)
    {
        _2272 = _2158;
        _2274 = _2160;
        _2276 = _2162;
    }
    else
    {
        uint _2283 = _1791 + 3u;
        uint _2287 = _1791 + 11u;
        float _2301 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2283].w)) * _523) * 0.949999988079071044921875);
        float _2302 = _2301 * _2301;
        float _2303 = cbLight._m0[_2283].x + _600;
        float _2304 = cbLight._m0[_2283].y + _601;
        float _2305 = cbLight._m0[_2283].z + _602;
        float _2309 = inversesqrt(dot(vec3(_2303, _2304, _2305), vec3(_2303, _2304, _2305)));
        float _2310 = _2309 * _2303;
        float _2311 = _2309 * _2304;
        float _2312 = _2309 * _2305;
        float _2313 = dot(vec3(_520, _521, _522), vec3(cbLight._m0[_2283].xyz));
        float _4268 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
        float _2316 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
        float _2317 = dot(vec3(_520, _521, _522), vec3(_2310, _2311, _2312));
        float _4279 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
        float _2320 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
        float _2321 = dot(vec3(cbLight._m0[_2283].xyz), vec3(_2310, _2311, _2312));
        float _4290 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
        float _2325 = _2302 * _2302;
        float _2329 = ((_2320 * _2320) * (_2325 + (-1.0))) + 1.0;
        float _2336 = exp2(log2(1.0 - (isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0)))) * 5.0);
        float _2343 = 1.0 - _2302;
        float _2353 = (0.5 / (((_1960 * ((_2316 * _2343) + _2302)) + 9.9999999392252902907785028219223e-09) + (((_1960 * _2343) + _2302) * _2316))) * _2316;
        float _4301 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
        float _2355 = (isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0))) * (_2325 / ((_2329 * _2329) * 3.141590118408203125));
        float _2356 = isnan(1.0) ? _1807 : (isnan(_1807) ? 1.0 : min(_1807, 1.0));
        _2272 = (((((_2336 * _1982) + _685) * cbLight._m0[_2287].x) * _2355) * _2356) + _2158;
        _2274 = (((((_2336 * _1984) + _687) * cbLight._m0[_2287].y) * _2355) * _2356) + _2160;
        _2276 = (((((_2336 * _1985) + _688) * cbLight._m0[_2287].z) * _2355) * _2356) + _2162;
    }
    float _2491;
    float _2493;
    float _2495;
    float _2497;
    float _2499;
    float _2501;
    if (_1789.y == 0u)
    {
        float _2431 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2432 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2431;
        float _2433 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2431;
        float _2434 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2431;
        uvec4 _2446 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2447 = _2446.x;
        uint _2458 = uint((float(_2446.y) * floor(float(uint(cbSceneParam._m0[85u].y * _622) / _2447))) + floor(float(uint(cbSceneParam._m0[85u].x * _621) / _2447)));
        float _2468 = (log2(_2434 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2469 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
        uint _2472 = uint(isnan(14.0) ? _2469 : (isnan(_2469) ? 14.0 : min(_2469, 14.0)));
        uvec4 _2477 = texelFetch(g_lightClusterGridBuffer, int(((_2472 << 2u) + (_2458 << 6u)) >> 2u));
        uint _2478 = _2477.x;
        uint _2479 = _2446.z;
        float _2579;
        float _2581;
        float _2583;
        float _2585;
        float _2587;
        float _2589;
        if (((((1u << ((_2479 >> 4u) & 15u)) + 4294967295u) & _2478) == 0u) || ((_2479 & 240u) == 0u))
        {
            _2579 = 0.0;
            _2581 = 0.0;
            _2583 = 0.0;
            _2585 = 0.0;
            _2587 = 0.0;
            _2589 = 0.0;
        }
        else
        {
            float _2580;
            float _2582;
            float _2584;
            float _2586;
            float _2588;
            float _2590;
            float _2732 = 0.0;
            float _2733 = 0.0;
            float _2734 = 0.0;
            float _2735 = 0.0;
            float _2736 = 0.0;
            float _2737 = 0.0;
            uint _2738 = 0u;
            uint _2747;
            bool _2748;
            for (;;)
            {
                _2747 = texelFetch(g_lightClassification, int((((_2472 << 5u) + (_2458 << 9u)) + (_2738 << 2u)) >> 2u)).x;
                _2748 = _2747 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2748)
                {
                    frontier_phi_66_pred = _2732;
                    frontier_phi_66_pred_1 = _2737;
                    frontier_phi_66_pred_2 = _2736;
                    frontier_phi_66_pred_3 = _2735;
                    frontier_phi_66_pred_4 = _2734;
                    frontier_phi_66_pred_5 = _2733;
                }
                else
                {
                    float _2877;
                    float _2878;
                    float _2879;
                    float _2880;
                    float _2881;
                    float _2882;
                    uint _2883;
                    _2877 = _2732;
                    _2878 = _2733;
                    _2879 = _2734;
                    _2880 = _2735;
                    _2881 = _2736;
                    _2882 = _2737;
                    _2883 = _2747;
                    float _2804;
                    float _2805;
                    float _2806;
                    float _2807;
                    float _2808;
                    float _2809;
                    for (;;)
                    {
                        uint _2887 = uint(findLSB(_2883)) + (_2738 << 5u);
                        uint _2884 = (_2883 + 4294967295u) & _2883;
                        uint _2889 = _2887 * 48u;
                        vec4 _2903 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2889)).x, texelFetch(g_PointLightRenderingBuffer, int(_2889 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2889 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2889 + 3u)).x));
                        uint _2909 = (_2887 * 48u) + 4u;
                        vec4 _2922 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2909)).x, texelFetch(g_PointLightRenderingBuffer, int(_2909 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2909 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2909 + 3u)).x));
                        uint _2928 = (_2887 * 48u) + 8u;
                        vec3 _2939 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2928)).x, texelFetch(g_PointLightRenderingBuffer, int(_2928 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2928 + 2u)).x));
                        float _2943 = _2903.x - _2432;
                        float _2944 = _2903.y - _2433;
                        float _2945 = _2903.z - _2434;
                        float _2946 = dot(vec3(_2943, _2944, _2945), vec3(_2943, _2944, _2945));
                        float _2949 = inversesqrt(_2946);
                        float _2950 = _2949 * _2943;
                        float _2951 = _2949 * _2944;
                        float _2952 = _2949 * _2945;
                        float _2953 = dot(vec3(_642, _645, _648), vec3(_2950, _2951, _2952));
                        float _2958 = 1.0 - (_2946 * _2903.w);
                        float _4327 = isnan(0.0) ? _2958 : (isnan(_2958) ? 0.0 : max(_2958, 0.0));
                        float _2959 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
                        float _2960 = sqrt(_2946) * _2922.w;
                        float _2963 = 1.39999997615814208984375 / (_2960 + 1.39999997615814208984375);
                        float _2964 = _2963 * _2963;
                        float _2967 = ((1.0 - _2964) * _2953) + _2964;
                        float _2970 = _2960 * _2960;
                        float _2974 = ((isnan(0.0) ? _2967 : (isnan(_2967) ? 0.0 : max(_2967, 0.0))) * _2959) / ((_2970 * 0.699999988079071044921875) + 1.0);
                        float _2978 = (-0.0) - _2432;
                        float _2979 = (-0.0) - _2433;
                        float _2980 = (-0.0) - _2434;
                        float _2984 = inversesqrt(dot(vec3(_2978, _2979, _2980), vec3(_2978, _2979, _2980)));
                        float _2985 = _2984 * _2978;
                        float _2986 = _2984 * _2979;
                        float _2987 = _2984 * _2980;
                        float _2995 = exp2(log2(1.0 / ((_2970 * 3.5) + 5.0)) * 0.25);
                        float _2996 = 1.0 - _717;
                        float _3003 = sqrt(1.0 - ((1.0 - (_2996 * _2996)) * (1.0 - (_2995 * _2995))));
                        float _3004 = _3003 * _3003;
                        float _3005 = _3004 * _3004;
                        float _3006 = _2985 + _2950;
                        float _3007 = _2986 + _2951;
                        float _3008 = _2987 + _2952;
                        float _3012 = inversesqrt(dot(vec3(_3006, _3007, _3008), vec3(_3006, _3007, _3008)));
                        float _3016 = dot(vec3(_642, _645, _648), vec3(_2985, _2986, _2987));
                        float _4343 = isnan(0.0) ? _3016 : (isnan(_3016) ? 0.0 : max(_3016, 0.0));
                        float _3019 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
                        float _3020 = dot(vec3(_642, _645, _648), vec3(_3012 * _3006, _3012 * _3007, _3012 * _3008));
                        float _4354 = isnan(0.0) ? _3020 : (isnan(_3020) ? 0.0 : max(_3020, 0.0));
                        float _3023 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
                        float _3027 = ((_3023 * _3023) * (_3005 + (-1.0))) + 1.0;
                        float _3028 = _2963 * _3004;
                        float _3029 = _3028 * _3028;
                        float _3032 = ((1.0 - _3029) * _2953) + _3029;
                        float _4365 = isnan(0.0) ? _3032 : (isnan(_3032) ? 0.0 : max(_3032, 0.0));
                        float _3033 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
                        float _3034 = 1.0 - _3004;
                        float _3044 = (0.5 / (((_3033 * ((_3019 * _3034) + _3004)) + 9.9999999392252902907785028219223e-09) + (((_3033 * _3034) + _3004) * _3019))) * _3033;
                        float _4376 = isnan(0.0) ? _3044 : (isnan(_3044) ? 0.0 : max(_3044, 0.0));
                        float _3055 = (((_3005 * 3.1415927410125732421875) * (isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0)))) / ((_3027 * _3027) * ((_2970 * 2.1991131305694580078125) + 3.141590118408203125))) * _2959;
                        _2807 = (_2974 * _2922.x) + _2880;
                        _2808 = (_2974 * _2922.y) + _2881;
                        _2809 = (_2974 * _2922.z) + _2882;
                        _2804 = (_3055 * _2939.x) + _2877;
                        _2805 = (_3055 * _2939.y) + _2878;
                        _2806 = (_3055 * _2939.z) + _2879;
                        if (_2884 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2877 = _2804;
                            _2878 = _2805;
                            _2879 = _2806;
                            _2880 = _2807;
                            _2881 = _2808;
                            _2882 = _2809;
                            _2883 = _2884;
                        }
                    }
                    frontier_phi_66_pred = _2804;
                    frontier_phi_66_pred_1 = _2809;
                    frontier_phi_66_pred_2 = _2808;
                    frontier_phi_66_pred_3 = _2807;
                    frontier_phi_66_pred_4 = _2806;
                    frontier_phi_66_pred_5 = _2805;
                }
                _2580 = frontier_phi_66_pred;
                _2590 = frontier_phi_66_pred_1;
                _2588 = frontier_phi_66_pred_2;
                _2586 = frontier_phi_66_pred_3;
                _2584 = frontier_phi_66_pred_4;
                _2582 = frontier_phi_66_pred_5;
                uint _2739 = _2738 + 1u;
                if (_2739 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2732 = _2580;
                    _2733 = _2582;
                    _2734 = _2584;
                    _2735 = _2586;
                    _2736 = _2588;
                    _2737 = _2590;
                    _2738 = _2739;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2579 = _2580;
            _2581 = _2582;
            _2583 = _2584;
            _2585 = _2586;
            _2587 = _2588;
            _2589 = _2590;
        }
        uvec4 _2593 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2594 = _2593.z;
        uint _2596 = (_2594 >> 8u) & 15u;
        float _2700;
        float _2702;
        float _2704;
        float _2706;
        float _2708;
        float _2710;
        if (((4294967295u << _2596) & _2478) == 0u)
        {
            _2700 = _2579;
            _2702 = _2581;
            _2704 = _2583;
            _2706 = _2585;
            _2708 = _2587;
            _2710 = _2589;
        }
        else
        {
            float _2725 = inversesqrt(dot(vec3(_2432, _2433, _2434), vec3(_2432, _2433, _2434)));
            float _2726 = _2725 * _2432;
            float _2727 = _2725 * _2433;
            float _2728 = _2725 * _2434;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2596 < ((_2594 >> 12u) & 15u))
            {
                float _2701;
                float _2703;
                float _2705;
                float _2707;
                float _2709;
                float _2711;
                float _2860 = _2579;
                float _2861 = _2581;
                float _2862 = _2583;
                float _2863 = _2585;
                float _2864 = _2587;
                float _2865 = _2589;
                uint _2866 = _2596;
                uint _2875;
                bool _2876;
                for (;;)
                {
                    _2875 = texelFetch(g_lightClassification, int((((_2472 << 5u) + (_2458 << 9u)) + (_2866 << 2u)) >> 2u)).x;
                    _2876 = _2875 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2876)
                    {
                        frontier_phi_77_pred = _2865;
                        frontier_phi_77_pred_1 = _2864;
                        frontier_phi_77_pred_2 = _2863;
                        frontier_phi_77_pred_3 = _2862;
                        frontier_phi_77_pred_4 = _2861;
                        frontier_phi_77_pred_5 = _2860;
                    }
                    else
                    {
                        float _3069;
                        float _3070;
                        float _3071;
                        float _3072;
                        float _3073;
                        float _3074;
                        float _3363;
                        float _3364;
                        float _3365;
                        float _3366;
                        float _3367;
                        float _3368;
                        float _3082 = _2860;
                        float _3083 = _2861;
                        float _3084 = _2862;
                        float _3085 = _2863;
                        float _3086 = _2864;
                        float _3087 = _2865;
                        uint _3088 = _2875;
                        uint _3089;
                        vec4 _3114;
                        float _3115;
                        vec4 _3130;
                        vec3 _3142;
                        vec4 _3158;
                        vec4 _3173;
                        float _3219;
                        bool _3220;
                        for (;;)
                        {
                            uint _3099 = ((_2866 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3088));
                            _3089 = (_3088 + 4294967295u) & _3088;
                            uint _3101 = _3099 * 40u;
                            _3114 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3101)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3101 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3101 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3101 + 3u)).x));
                            _3115 = _3114.w;
                            uint _3117 = (_3099 * 40u) + 4u;
                            _3130 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3117)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3117 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3117 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3117 + 3u)).x));
                            uint _3132 = (_3099 * 40u) + 8u;
                            _3142 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3132)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 2u)).x));
                            uint _3145 = (_3099 * 40u) + 16u;
                            _3158 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3145)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 3u)).x));
                            uint _3160 = (_3099 * 40u) + 20u;
                            _3173 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3160)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 3u)).x));
                            uint _3175 = (_3099 * 40u) + 24u;
                            vec4 _3188 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3175)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3175 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3175 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3175 + 3u)).x));
                            uint _3194 = (_3099 * 40u) + 28u;
                            vec4 _3207 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3194)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 3u)).x));
                            _3219 = fma(_2434, _3207.z, fma(_2433, _3207.y, _3207.x * _2432)) + _3207.w;
                            _3220 = !((fma(_2434, _3188.z, fma(_2433, _3188.y, _3188.x * _2432)) + _3188.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3220)
                            {
                                float _3247 = _3114.x - _2432;
                                float _3248 = _3114.y - _2433;
                                float _3249 = _3114.z - _2434;
                                float _3250 = dot(vec3(_3247, _3248, _3249), vec3(_3247, _3248, _3249));
                                float _3253 = inversesqrt(_3250);
                                float _3254 = _3253 * _3247;
                                float _3255 = _3253 * _3248;
                                float _3256 = _3253 * _3249;
                                float _3260 = 1.0 - (_3250 / (_3115 * _3115));
                                float _4387 = isnan(0.0) ? _3260 : (isnan(_3260) ? 0.0 : max(_3260, 0.0));
                                float _3261 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
                                float _3265 = sqrt(_3250) * _3130.w;
                                float _3267 = 1.39999997615814208984375 / (_3265 + 1.39999997615814208984375);
                                float _3268 = _3267 * _3267;
                                float _3271 = ((1.0 - _3268) * dot(vec3(_3254, _3255, _3256), vec3(_642, _645, _648))) + _3268;
                                float _3274 = _3265 * _3265;
                                float _3278 = (fma(_2434, _3158.z, fma(_2433, _3158.y, _3158.x * _2432)) + _3158.w) / _3219;
                                float _3279 = (fma(_2434, _3173.z, fma(_2433, _3173.y, _3173.x * _2432)) + _3173.w) / _3219;
                                float _3283 = 1.0 - dot(vec2(_3278, _3279), vec2(_3278, _3279));
                                float _4403 = isnan(0.0) ? _3283 : (isnan(_3283) ? 0.0 : max(_3283, 0.0));
                                float _3284 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
                                float _3285 = _3284 * (((isnan(0.0) ? _3271 : (isnan(_3271) ? 0.0 : max(_3271, 0.0))) * _3261) / ((_3274 * 0.699999988079071044921875) + 1.0));
                                float _3297 = exp2(log2(1.0 / ((_3274 * 3.5) + 5.0)) * 0.25);
                                float _3298 = 1.0 - _717;
                                float _3305 = sqrt(1.0 - ((1.0 - (_3298 * _3298)) * (1.0 - (_3297 * _3297))));
                                float _3306 = _3305 * _3305;
                                float _3307 = _3306 * _3306;
                                float _3308 = _3254 - _2726;
                                float _3309 = _3255 - _2727;
                                float _3310 = _3256 - _2728;
                                float _3314 = inversesqrt(dot(vec3(_3308, _3309, _3310), vec3(_3308, _3309, _3310)));
                                float _3318 = dot(vec3(_642, _645, _648), vec3((-0.0) - _2726, (-0.0) - _2727, (-0.0) - _2728));
                                float _4414 = isnan(0.0) ? _3318 : (isnan(_3318) ? 0.0 : max(_3318, 0.0));
                                float _3321 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
                                float _3322 = dot(vec3(_642, _645, _648), vec3(_3314 * _3308, _3314 * _3309, _3314 * _3310));
                                float _4425 = isnan(0.0) ? _3322 : (isnan(_3322) ? 0.0 : max(_3322, 0.0));
                                float _3325 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
                                float _3329 = ((_3325 * _3325) * (_3307 + (-1.0))) + 1.0;
                                float _3330 = _3267 * _3306;
                                float _3331 = _3330 * _3330;
                                float _3337 = ((1.0 - _3331) * dot(vec3(_642, _645, _648), vec3(_3254, _3255, _3256))) + _3331;
                                float _4436 = isnan(0.0) ? _3337 : (isnan(_3337) ? 0.0 : max(_3337, 0.0));
                                float _3338 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
                                float _3339 = 1.0 - _3306;
                                float _3349 = (0.5 / (((_3338 * ((_3321 * _3339) + _3306)) + 9.9999999392252902907785028219223e-09) + (((_3338 * _3339) + _3306) * _3321))) * _3338;
                                float _4447 = isnan(0.0) ? _3349 : (isnan(_3349) ? 0.0 : max(_3349, 0.0));
                                float _3359 = (_3284 * _3261) * (((_3307 * 3.1415927410125732421875) * (isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0)))) / ((_3329 * _3329) * ((_3274 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3285 * _3130.y;
                                frontier_phi_83_pred_1 = _3285 * _3130.x;
                                frontier_phi_83_pred_2 = _3359 * _3142.z;
                                frontier_phi_83_pred_3 = _3359 * _3142.y;
                                frontier_phi_83_pred_4 = _3359 * _3142.x;
                                frontier_phi_83_pred_5 = _3285 * _3130.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3367 = frontier_phi_83_pred;
                            _3366 = frontier_phi_83_pred_1;
                            _3365 = frontier_phi_83_pred_2;
                            _3364 = frontier_phi_83_pred_3;
                            _3363 = frontier_phi_83_pred_4;
                            _3368 = frontier_phi_83_pred_5;
                            _3072 = _3366 + _3085;
                            _3073 = _3367 + _3086;
                            _3074 = _3368 + _3087;
                            _3069 = _3363 + _3082;
                            _3070 = _3364 + _3083;
                            _3071 = _3365 + _3084;
                            if (_3089 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3082 = _3069;
                                _3083 = _3070;
                                _3084 = _3071;
                                _3085 = _3072;
                                _3086 = _3073;
                                _3087 = _3074;
                                _3088 = _3089;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3074;
                        frontier_phi_77_pred_1 = _3073;
                        frontier_phi_77_pred_2 = _3072;
                        frontier_phi_77_pred_3 = _3071;
                        frontier_phi_77_pred_4 = _3070;
                        frontier_phi_77_pred_5 = _3069;
                    }
                    _2711 = frontier_phi_77_pred;
                    _2709 = frontier_phi_77_pred_1;
                    _2707 = frontier_phi_77_pred_2;
                    _2705 = frontier_phi_77_pred_3;
                    _2703 = frontier_phi_77_pred_4;
                    _2701 = frontier_phi_77_pred_5;
                    uint _2867 = _2866 + 1u;
                    if (_2867 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2860 = _2701;
                        _2861 = _2703;
                        _2862 = _2705;
                        _2863 = _2707;
                        _2864 = _2709;
                        _2865 = _2711;
                        _2866 = _2867;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2705;
                frontier_phi_58_59_ladder_1 = _2711;
                frontier_phi_58_59_ladder_2 = _2709;
                frontier_phi_58_59_ladder_3 = _2707;
                frontier_phi_58_59_ladder_4 = _2703;
                frontier_phi_58_59_ladder_5 = _2701;
            }
            else
            {
                frontier_phi_58_59_ladder = _2583;
                frontier_phi_58_59_ladder_1 = _2589;
                frontier_phi_58_59_ladder_2 = _2587;
                frontier_phi_58_59_ladder_3 = _2585;
                frontier_phi_58_59_ladder_4 = _2581;
                frontier_phi_58_59_ladder_5 = _2579;
            }
            _2700 = frontier_phi_58_59_ladder_5;
            _2702 = frontier_phi_58_59_ladder_4;
            _2704 = frontier_phi_58_59_ladder;
            _2706 = frontier_phi_58_59_ladder_3;
            _2708 = frontier_phi_58_59_ladder_2;
            _2710 = frontier_phi_58_59_ladder_1;
        }
        float _2715 = isnan(1.0) ? _701 : (isnan(_701) ? 1.0 : min(_701, 1.0));
        _2491 = (_2715 * _2706) + _1924;
        _2493 = (_2715 * _2708) + _1926;
        _2495 = (_2715 * _2710) + _1928;
        _2497 = ((_2700 * _685) * _2715) + _2272;
        _2499 = ((_2702 * _687) * _2715) + _2274;
        _2501 = ((_2704 * _688) * _2715) + _2276;
    }
    else
    {
        _2491 = _1924;
        _2493 = _1926;
        _2495 = _1928;
        _2497 = _2272;
        _2499 = _2274;
        _2501 = _2276;
    }
    float _4463 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _4474 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
    float _4485 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    float _2518 = ((isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0))) * (_2491 + ((isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0))) * _701))) + ((_2497 + ((isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0))) * _1540)) * cbPerFrame._m0[3u].x);
    float _2519 = ((isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0))) * (_2493 + ((isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0))) * _701))) + ((_2499 + ((isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0))) * _1540)) * cbPerFrame._m0[3u].x);
    float _2520 = ((isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0))) * (_2495 + ((isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0))) * _701))) + ((_2501 + ((isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0))) * _1540)) * cbPerFrame._m0[3u].x);
    uint _2521 = _232 + 6u;
    float _2529 = _621 / cbSceneParam._m0[86u].x;
    float _2530 = _622 / cbSceneParam._m0[86u].y;
    vec4 _2544 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2529, _2530, (log2((isnan(cbSceneParam._m0[77u].w) ? _542 : (isnan(_542) ? cbSceneParam._m0[77u].w : min(_542, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2546 = _2544.x;
    float _2547 = _2544.y;
    float _2548 = _2544.z;
    float _2549 = _2544.w;
    float _2642;
    float _2644;
    float _2646;
    float _2648;
    if (_542 > cbSceneParam._m0[78u].w)
    {
        float _2604 = isnan(_542) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _542 : min(cbSceneParam._m0[80u].w, _542));
        float _2605 = _2604 / _542;
        float _2616 = _2605 * _593;
        float _2617 = _594 * _2605;
        float _2618 = (-0.0) - _2617;
        float _2620 = _2605 * _595;
        float _2622 = (cbSceneParam._m0[77u].w * _2618) / _2604;
        float _2623 = _2622 + cbSceneParam._m0[79u].w;
        float _2624 = cbSceneParam._m0[79u].w - _2617;
        float _2630 = sqrt(((_2616 * _2616) + (_2617 * _2617)) + (_2620 * _2620));
        float _2633 = (1.0 - (cbSceneParam._m0[77u].w / _2604)) * _2630;
        float _2638 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2640 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2817;
        if (abs((_2618 - _2622) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2817 = ((((_2623 > 0.0) ? exp2(_2638 * _2623) : (2.0 - exp2(_2640 * _2623))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2633;
        }
        else
        {
            float _2761 = 1.0 / cbSceneParam._m0[80u].x;
            float _2762 = isnan(_2624) ? _2623 : (isnan(_2623) ? _2624 : max(_2623, _2624));
            float _2763 = isnan(_2624) ? _2623 : (isnan(_2623) ? _2624 : min(_2623, _2624));
            float _2772 = isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : min(_2762, 0.0));
            float _2773 = isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : min(_2763, 0.0));
            _2817 = ((abs(_2630 / _2618) * cbSceneParam._m0[80u].y) * ((((_2772 - _2773) * 2.0) - ((exp2(_2638 * (isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0)))) - exp2(_2638 * (isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0))))) * _2761)) - ((exp2(_2640 * _2772) - exp2(_2640 * _2773)) * _2761))) + (_2633 * cbSceneParam._m0[80u].z);
        }
        vec4 _2819 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2529, _2530, 1.0), 0.0);
        float _2828 = exp2((_2817 * (-1.44269502162933349609375)) * (1.0 - _2819.w));
        float _2829 = log2(_2828);
        float _2845 = log2(_2549);
        _2642 = (exp2(_2845 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2829 * cbSceneParam._m0[78u].x)) * _2819.x) / cbSceneParam._m0[78u].x)) + _2546;
        _2644 = (exp2(_2845 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2829 * cbSceneParam._m0[78u].y)) * _2819.y) / cbSceneParam._m0[78u].y)) + _2547;
        _2646 = (exp2(_2845 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2829 * cbSceneParam._m0[78u].z)) * _2819.z) / cbSceneParam._m0[78u].z)) + _2548;
        _2648 = _2828 * _2549;
    }
    else
    {
        _2642 = _2546;
        _2644 = _2547;
        _2646 = _2548;
        _2648 = _2549;
    }
    bool _2855;
    vec4 _2658;
    vec4 _2680;
    float _2682;
    float _2686;
    float _2687;
    float _2688;
    float _2689;
    bool _2699;
    for (;;)
    {
        _2658 = cbMatDynParam._m0[0u];
        float _2660 = roundEven(_2658.y);
        bool _2661 = _2660 == 3.0;
        float _2662 = log2(_2648);
        float _2669 = exp2(_2662 * cbSceneParam._m0[78u].x) * _2518;
        float _2670 = exp2(_2662 * cbSceneParam._m0[78u].y) * _2519;
        float _2671 = exp2(_2662 * cbSceneParam._m0[78u].z) * _2520;
        float _2678 = _609 + (-0.5);
        _2680 = cbMtdParam._m0[1u];
        _2682 = _2680.y * _2678;
        float _2685 = (_2660 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2686 = _2685 * (_2661 ? _2669 : (_2669 + (cbSceneParam._m0[72u].w * _2642)));
        _2687 = _2685 * (_2661 ? _2670 : (_2670 + (cbSceneParam._m0[72u].w * _2644)));
        _2688 = _2685 * (_2661 ? _2671 : (_2671 + (cbSceneParam._m0[72u].w * _2646)));
        _2689 = _2678 * 0.999000012874603271484375;
        _2699 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2699)
        {
            if ((cbInstanceData._m0[_232 + 7u].x + _2689) < 0.5)
            {
                _2855 = true;
                break;
            }
        }
        uint _2796 = _661 + uint(_2658.w);
        if ((cbInstanceData._m0[_2796].w < 1.0) && ((cbInstanceData._m0[_2796].w + _2689) < 0.5))
        {
            _2855 = true;
            break;
        }
        if ((_2682 + 1.0) < _2680.x)
        {
            _2855 = true;
            break;
        }
        _2855 = false;
        break;
    }
    float _3060;
    if (_2855)
    {
        discard_state = true;
        _3060 = 0.0;
    }
    else
    {
        _3060 = cbInstanceData._m0[_2521].w;
    }
    SV_Target.x = _2686;
    SV_Target.y = _2687;
    SV_Target.z = _2688;
    SV_Target.w = _3060;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2521].w;
    discard_exit();
}


