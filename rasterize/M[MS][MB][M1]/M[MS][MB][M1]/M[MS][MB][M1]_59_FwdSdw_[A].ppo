#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1318;
float _3980;
float _3981;
float _3982;
float _3983;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _228 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _229 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _230 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _236 = inversesqrt(dot(vec3(_228, _229, _230), vec3(_228, _229, _230)));
    float _237 = _236 * _228;
    float _238 = _236 * _229;
    float _239 = _236 * _230;
    float _243 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _244 = _243 * NORMAL.x;
    float _245 = _243 * NORMAL.y;
    float _246 = _243 * NORMAL.z;
    float _250 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _251 = _250 * TANGENT.x;
    float _252 = _250 * TANGENT.y;
    float _253 = _250 * TANGENT.z;
    float _262 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _264 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _265 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3992 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    float _4003 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _4014 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    uint _275 = uint(roundEven(NORMAL.w)) * 13u;
    uint _280 = _275 + 1u;
    uint _284 = _275 + 2u;
    float _293 = sqrt(((cbInstanceData._m0[_280].x * cbInstanceData._m0[_280].x) + (cbInstanceData._m0[_275].x * cbInstanceData._m0[_275].x)) + (cbInstanceData._m0[_284].x * cbInstanceData._m0[_284].x));
    float _294 = _293 * TEXCOORD.z;
    float _295 = _293 * TEXCOORD.w;
    vec4 _308 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _294) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _295) + cbTextureTilingScale._m0[13u].w));
    vec4 _331 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _336 = _331.x * cbMtdParam._m0[9u].x;
    float _337 = _331.y * cbMtdParam._m0[9u].y;
    float _338 = _331.z * cbMtdParam._m0[9u].z;
    float _342 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _308.x) * _336;
    float _345 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _308.y) * _337;
    float _348 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _308.z) * _338;
    float _355 = ((_336 - _342) * (isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0)))) + _342;
    float _356 = ((_337 - _345) * (isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0)))) + _345;
    float _357 = ((_338 - _348) * (isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0)))) + _348;
    vec4 _376 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _294) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _295) + cbTextureTilingScale._m0[14u].w));
    vec4 _396 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _294) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _295) + cbTextureTilingScale._m0[20u].w));
    vec4 _422 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _426 = _422.z;
    float _430 = (_422.x * 2.0) + (-1.0);
    float _431 = (_422.y * 2.0) + (-1.0);
    float _432 = dot(vec2(_430, _431), vec2(_430, _431));
    float _4025 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _437 = sqrt(1.0 - (isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0))));
    float _442 = _430 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_396.x * 2.0) + (-1.0)));
    float _443 = _431 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_396.y * 2.0) + (-1.0)));
    float _446 = fma(_437, _244, fma(_443, _251, _442 * _237));
    float _449 = fma(_437, _245, fma(_443, _252, _442 * _238));
    float _452 = fma(_437, _246, fma(_443, _253, _442 * _239));
    float _456 = inversesqrt(dot(vec3(_446, _449, _452), vec3(_446, _449, _452)));
    vec4 _492 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _294) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _295) + cbTextureTilingScale._m0[11u].w));
    float _494 = _492.x;
    float _495 = 1.0 - _494;
    float _502 = ((_494 - _495) * cbMtdParam._m0[24u].z) + _495;
    float _504 = (cbMtdParam._m0[19u].x + dot(vec4(_456 * _446, _456 * _449, _456 * _452, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_502 * cbMtdParam._m0[21u].z);
    float _4036 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _505 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
    float _507 = (-0.0) - cbMtdParam._m0[24u].x;
    float _509 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _510 = isnan(1.0) ? _509 : (isnan(_509) ? 1.0 : min(_509, 1.0));
    float _517 = _505 - ((_505 * TEXCOORD_8.x) * _510);
    float _518 = _505 - ((_505 * TEXCOORD_8.y) * _510);
    float _519 = _505 - ((_505 * TEXCOORD_8.z) * _510);
    float _526 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _530 = ((isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : min(_526, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _538 = (_530 - (((_502 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _530))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4067 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _539 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
    float _543 = ((_517 * ((_376.x * cbMtdParam._m0[18u].x) - _355)) * _539) + _355;
    float _544 = ((_518 * ((_376.y * cbMtdParam._m0[18u].y) - _356)) * _539) + _356;
    float _545 = ((_519 * ((_376.z * cbMtdParam._m0[18u].z) - _357)) * _539) + _357;
    vec4 _557 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _294) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _295) + cbTextureTilingScale._m0[19u].w));
    float _559 = _557.x;
    float _560 = 1.0 - _559;
    float _587 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_559 - _560) * cbMtdParam._m0[24u].w) + _560) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4078 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
    float _588 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
    float _596 = ((((cbMtdParam._m0[10u].x - _543) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _588) + _543;
    float _597 = ((((cbMtdParam._m0[10u].y - _544) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _588) + _544;
    float _598 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _545)) * _588) + _545;
    vec4 _611 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _613 = _611.x;
    float _616 = _613 - ((_613 * _517) * _539);
    float _618 = _616 - (_616 * _588);
    float _623 = (((_396.z - _426) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _426;
    vec4 _637 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _294) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _295) + cbTextureTilingScale._m0[15u].w));
    float _644 = (_637.x * 2.0) + (-1.0);
    float _645 = (_637.y * 2.0) + (-1.0);
    float _646 = dot(vec2(_644, _645), vec2(_644, _645));
    float _4089 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _655 = (((_637.z - _623) * _517) * _539) + _623;
    float _658 = ((cbMtdParam._m0[23u].y - _655) * _588) + _655;
    vec4 _677 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _294) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _295) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _683 = (_677.x * 2.0) + (-1.0);
    float _684 = (_677.y * 2.0) + (-1.0);
    float _685 = dot(vec2(_683, _684), vec2(_683, _684));
    float _4100 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    float _705 = (((cbMtdParam._m0[21u].x * _442) + ((_644 - _442) * _517)) * _539) + _442;
    float _706 = (((cbMtdParam._m0[21u].x * _443) + ((_645 - _443) * _518)) * _539) + _443;
    float _707 = (((sqrt(1.0 - (isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0)))) - _437) * _519) * _539) + _437;
    float _718 = (((_683 - _705) + (_705 * cbMtdParam._m0[22u].z)) * _588) + _705;
    float _719 = (((_684 - _706) + (_706 * cbMtdParam._m0[22u].z)) * _588) + _706;
    float _720 = ((sqrt(1.0 - (isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0)))) - _707) * _588) + _707;
    float _722 = cbMtdParam._m0[22u].x + _422.w;
    float _725 = fma(_720, _244, fma(_719, _251, _718 * _237));
    float _728 = fma(_720, _245, fma(_719, _252, _718 * _238));
    float _731 = fma(_720, _246, fma(_719, _253, _718 * _239));
    float _735 = inversesqrt(dot(vec3(_725, _728, _731), vec3(_725, _728, _731)));
    float _736 = _735 * _725;
    float _737 = _735 * _728;
    float _738 = _735 * _731;
    float _4111 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _739 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
    float _4122 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
    float _4133 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _4144 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _4155 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _4166 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _744 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
    float _758 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _798 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _808 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _798);
    float _809 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _798);
    float _810 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _798);
    float _814 = inversesqrt(dot(vec3(_808, _809, _810), vec3(_808, _809, _810)));
    float _815 = _808 * _814;
    float _816 = _809 * _814;
    float _817 = _810 * _814;
    vec4 _822 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _824 = _822.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _999 = sqrt(((_808 * _808) + (_809 * _809)) + (_810 * _810));
        float _1005 = (cbMatDynParam._m0[5u].x * _999) + cbMatDynParam._m0[5u].y;
        float _4177 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
        float _1006 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
        float _1010 = (cbMatDynParam._m0[5u].z * _999) + cbMatDynParam._m0[5u].w;
        float _4188 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0))) - _1006)) + _1006) < ((_824 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _836 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _837 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _857 = fma(_738, cbSceneParam._m0[5u].z, fma(_737, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _736));
    float _860 = fma(_738, cbSceneParam._m0[6u].z, fma(_737, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _736));
    float _863 = fma(_738, cbSceneParam._m0[7u].z, fma(_737, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _736));
    uint _876 = _275 + 9u;
    uint _877 = _876 + uint(cbMatDynParam._m0[0u].w);
    float _883 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0)))) * cbInstanceData._m0[_877].x;
    float _884 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0)))) * cbInstanceData._m0[_877].y;
    float _885 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0)))) * cbInstanceData._m0[_877].z;
    float _4199 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
    float _886 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
    float _4210 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
    float _887 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
    float _4221 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
    float _888 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
    float _889 = 1.0 - _744;
    float _890 = _886 * _889;
    float _891 = _887 * _889;
    float _892 = _888 * _889;
    float _897 = (_886 + (-0.039999999105930328369140625)) * _744;
    float _898 = (_887 + (-0.039999999105930328369140625)) * _744;
    float _899 = (_888 + (-0.039999999105930328369140625)) * _744;
    float _900 = _897 + 0.039999999105930328369140625;
    float _902 = _898 + 0.039999999105930328369140625;
    float _903 = _899 + 0.039999999105930328369140625;
    vec4 _912 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _836, cbSceneParam._m0[86u].y * _837));
    float _916 = ((isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0))) * TEXCOORD_5.w) * _912.x;
    float _917 = dot(vec3(_736, _737, _738), vec3(_815, _816, _817));
    float _920 = _917 * 2.0;
    float _924 = (_920 * _736) - _815;
    float _925 = (_920 * _737) - _816;
    float _926 = (_920 * _738) - _817;
    float _930 = abs(dot(vec3(_815, _816, _817), vec3(_736, _737, _738)));
    float _4232 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
    float _932 = sqrt(_739);
    float _945 = exp2((_932 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_932 * 3.0));
    float _951 = (1.0 - _945) * ((_932 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _952 = _945 * _932;
    float _980 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _984 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _988 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1317;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1042 = fma(_988, cbModelParam._m0[26u].z, fma(_984, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _980));
        float _1046 = fma(_988, cbModelParam._m0[27u].z, fma(_984, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _980));
        float _1050 = fma(_988, cbModelParam._m0[28u].z, fma(_984, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _980));
        float _1075 = _980 + _736;
        float _1076 = _984 + _737;
        float _1077 = _988 + _738;
        float _1087 = fma(_1077, cbModelParam._m0[26u].z, fma(_1076, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1075)) - _1042;
        float _1088 = fma(_1077, cbModelParam._m0[27u].z, fma(_1076, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1075)) - _1046;
        float _1089 = fma(_1077, cbModelParam._m0[28u].z, fma(_1076, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1075)) - _1050;
        float _1093 = inversesqrt(dot(vec3(_1087, _1088, _1089), vec3(_1087, _1088, _1089)));
        float _1106 = ((_1093 * _1087) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1042 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1107 = ((_1093 * _1088) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1046 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1108 = ((_1093 * _1089) / cbModelParam._m0[34u].z) + ((((((_1050 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1111 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1106, _1107, _1108), 0.0);
        vec4 _1118 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1106, _1107, _1108), 0.0);
        vec4 _1125 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1106, _1107, _1108), 0.0);
        vec4 _1132 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1106, _1107, _1108), 0.0);
        float _1145 = exp2((_1111.w + (-0.5)) * 20.0) * 2.0;
        float _1146 = _1145 * (_1111.x + (-0.5));
        float _1147 = _1145 * (_1111.y + (-0.5));
        float _1148 = _1145 * (_1111.z + (-0.5));
        float _1155 = exp2((_1118.w + (-0.5)) * 20.0) * 2.0;
        float _1156 = _1155 * (_1118.x + (-0.5));
        float _1157 = _1155 * (_1118.y + (-0.5));
        float _1158 = _1155 * (_1118.z + (-0.5));
        float _1165 = exp2((_1125.w + (-0.5)) * 20.0) * 2.0;
        float _1166 = _1165 * (_1125.x + (-0.5));
        float _1167 = _1165 * (_1125.y + (-0.5));
        float _1168 = _1165 * (_1125.z + (-0.5));
        float _1175 = exp2((_1132.w + (-0.5)) * 20.0) * 2.0;
        float _1176 = _1175 * (_1132.x + (-0.5));
        float _1177 = _1175 * (_1132.y + (-0.5));
        float _1178 = _1175 * (_1132.z + (-0.5));
        float _1179 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1180 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1181 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1182 = _1146 * 0.5;
        float _1183 = _1156 * 0.5;
        float _1184 = _1166 * 0.5;
        float _1185 = dot(vec3(_1182, _1183, _1184), vec3(_1182, _1183, _1184));
        float _1190 = (_1185 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1185);
        float _1199 = (dot(vec3(_736, _737, _738), vec3(_1190 * _1182, _1190 * _1183, _1190 * _1184)) + 1.0) * 0.5;
        float _4258 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1209 = sqrt(((_1183 * _1183) + (_1182 * _1182)) + (_1184 * _1184)) / (_1179 + 9.9999997473787516355514526367188e-06);
        float _4269 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1210 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
        float _1211 = _1210 * 2.0;
        float _1215 = (1.0 - _1210) / (_1210 + 1.0);
        float _4280 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1216 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
        float _1225 = ((((1.0 - _1216) * (_1211 + 2.0)) * exp2(log2(isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0))) * (_1211 + 1.0))) + _1216) * _1179;
        float _1226 = _1147 * 0.5;
        float _1227 = _1157 * 0.5;
        float _1228 = _1167 * 0.5;
        float _1229 = dot(vec3(_1226, _1227, _1228), vec3(_1226, _1227, _1228));
        float _1234 = (_1229 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1229);
        float _1242 = (dot(vec3(_736, _737, _738), vec3(_1234 * _1226, _1234 * _1227, _1234 * _1228)) + 1.0) * 0.5;
        float _4291 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1251 = sqrt(((_1227 * _1227) + (_1226 * _1226)) + (_1228 * _1228)) / (_1180 + 9.9999997473787516355514526367188e-06);
        float _4302 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1252 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
        float _1253 = _1252 * 2.0;
        float _1257 = (1.0 - _1252) / (_1252 + 1.0);
        float _4313 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1258 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
        float _1267 = ((((1.0 - _1258) * (_1253 + 2.0)) * exp2(log2(isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0))) * (_1253 + 1.0))) + _1258) * _1180;
        float _1268 = _1148 * 0.5;
        float _1269 = _1158 * 0.5;
        float _1270 = _1168 * 0.5;
        float _1271 = dot(vec3(_1268, _1269, _1270), vec3(_1268, _1269, _1270));
        float _1276 = (_1271 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1271);
        float _1284 = (dot(vec3(_736, _737, _738), vec3(_1276 * _1268, _1276 * _1269, _1276 * _1270)) + 1.0) * 0.5;
        float _4324 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1293 = sqrt(((_1269 * _1269) + (_1268 * _1268)) + (_1270 * _1270)) / (_1181 + 9.9999997473787516355514526367188e-06);
        float _4335 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1294 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
        float _1295 = _1294 * 2.0;
        float _1299 = (1.0 - _1294) / (_1294 + 1.0);
        float _4346 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1300 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
        float _1309 = ((((1.0 - _1300) * (_1295 + 2.0)) * exp2(log2(isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0))) * (_1295 + 1.0))) + _1300) * _1181;
        _1317 = _1148;
        _1319 = _1147;
        _1320 = _1146;
        _1321 = _1158;
        _1322 = _1157;
        _1323 = _1156;
        _1324 = _1168;
        _1325 = _1167;
        _1326 = _1166;
        _1327 = _1181;
        _1328 = _1180;
        _1329 = _1179;
        _1330 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0)));
        _1331 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0)));
        _1332 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0)));
    }
    else
    {
        _1317 = _1318;
        _1319 = _1318;
        _1320 = _1318;
        _1321 = _1318;
        _1322 = _1318;
        _1323 = _1318;
        _1324 = _1318;
        _1325 = _1318;
        _1326 = _1318;
        _1327 = _1318;
        _1328 = _1318;
        _1329 = _1318;
        _1330 = 0.0;
        _1331 = 0.0;
        _1332 = 0.0;
    }
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    float _1641;
    float _1642;
    float _1643;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1360 = fma(_988, cbModelParam._m0[30u].z, fma(_984, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _980));
        float _1364 = fma(_988, cbModelParam._m0[31u].z, fma(_984, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _980));
        float _1368 = fma(_988, cbModelParam._m0[32u].z, fma(_984, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _980));
        float _1391 = _980 + _736;
        float _1392 = _984 + _737;
        float _1393 = _988 + _738;
        float _1403 = fma(_1393, cbModelParam._m0[30u].z, fma(_1392, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1391)) - _1360;
        float _1404 = fma(_1393, cbModelParam._m0[31u].z, fma(_1392, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1391)) - _1364;
        float _1405 = fma(_1393, cbModelParam._m0[32u].z, fma(_1392, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1391)) - _1368;
        float _1409 = inversesqrt(dot(vec3(_1403, _1404, _1405), vec3(_1403, _1404, _1405)));
        float _1422 = ((_1409 * _1403) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1360 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1423 = ((_1409 * _1404) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1364 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1424 = ((_1409 * _1405) / cbModelParam._m0[35u].z) + ((((((_1368 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1426 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1422, _1423, _1424), 0.0);
        vec4 _1433 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1422, _1423, _1424), 0.0);
        vec4 _1440 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1422, _1423, _1424), 0.0);
        vec4 _1447 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1422, _1423, _1424), 0.0);
        float _1459 = exp2((_1426.w + (-0.5)) * 20.0) * 2.0;
        float _1460 = _1459 * (_1426.x + (-0.5));
        float _1461 = _1459 * (_1426.y + (-0.5));
        float _1462 = _1459 * (_1426.z + (-0.5));
        float _1469 = exp2((_1433.w + (-0.5)) * 20.0) * 2.0;
        float _1470 = _1469 * (_1433.x + (-0.5));
        float _1471 = _1469 * (_1433.y + (-0.5));
        float _1472 = _1469 * (_1433.z + (-0.5));
        float _1479 = exp2((_1440.w + (-0.5)) * 20.0) * 2.0;
        float _1480 = _1479 * (_1440.x + (-0.5));
        float _1481 = _1479 * (_1440.y + (-0.5));
        float _1482 = _1479 * (_1440.z + (-0.5));
        float _1489 = exp2((_1447.w + (-0.5)) * 20.0) * 2.0;
        float _1490 = _1489 * (_1447.x + (-0.5));
        float _1491 = _1489 * (_1447.y + (-0.5));
        float _1492 = _1489 * (_1447.z + (-0.5));
        float _1493 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1494 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1495 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
        float _1496 = _1460 * 0.5;
        float _1497 = _1470 * 0.5;
        float _1498 = _1480 * 0.5;
        float _1499 = dot(vec3(_1496, _1497, _1498), vec3(_1496, _1497, _1498));
        float _1504 = (_1499 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1499);
        float _1512 = (dot(vec3(_736, _737, _738), vec3(_1504 * _1496, _1504 * _1497, _1504 * _1498)) + 1.0) * 0.5;
        float _4387 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
        float _1521 = sqrt(((_1497 * _1497) + (_1496 * _1496)) + (_1498 * _1498)) / (_1493 + 9.9999997473787516355514526367188e-06);
        float _4398 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
        float _1522 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
        float _1523 = _1522 * 2.0;
        float _1527 = (1.0 - _1522) / (_1522 + 1.0);
        float _4409 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1528 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
        float _1537 = ((((1.0 - _1528) * (_1523 + 2.0)) * exp2(log2(isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0))) * (_1523 + 1.0))) + _1528) * _1493;
        float _1538 = _1461 * 0.5;
        float _1539 = _1471 * 0.5;
        float _1540 = _1481 * 0.5;
        float _1541 = dot(vec3(_1538, _1539, _1540), vec3(_1538, _1539, _1540));
        float _1546 = (_1541 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1541);
        float _1554 = (dot(vec3(_736, _737, _738), vec3(_1546 * _1538, _1546 * _1539, _1546 * _1540)) + 1.0) * 0.5;
        float _4420 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1563 = sqrt(((_1539 * _1539) + (_1538 * _1538)) + (_1540 * _1540)) / (_1494 + 9.9999997473787516355514526367188e-06);
        float _4431 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0));
        float _1564 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
        float _1565 = _1564 * 2.0;
        float _1569 = (1.0 - _1564) / (_1564 + 1.0);
        float _4442 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
        float _1570 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
        float _1579 = ((((1.0 - _1570) * (_1565 + 2.0)) * exp2(log2(isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0))) * (_1565 + 1.0))) + _1570) * _1494;
        float _1580 = _1462 * 0.5;
        float _1581 = _1472 * 0.5;
        float _1582 = _1482 * 0.5;
        float _1583 = dot(vec3(_1580, _1581, _1582), vec3(_1580, _1581, _1582));
        float _1588 = (_1583 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1583);
        float _1596 = (dot(vec3(_736, _737, _738), vec3(_1588 * _1580, _1588 * _1581, _1588 * _1582)) + 1.0) * 0.5;
        float _4453 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
        float _1605 = sqrt(((_1581 * _1581) + (_1580 * _1580)) + (_1582 * _1582)) / (_1495 + 9.9999997473787516355514526367188e-06);
        float _4464 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
        float _1606 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
        float _1607 = _1606 * 2.0;
        float _1611 = (1.0 - _1606) / (_1606 + 1.0);
        float _4475 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
        float _1612 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
        float _1621 = ((((1.0 - _1612) * (_1607 + 2.0)) * exp2(log2(isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0))) * (_1607 + 1.0))) + _1612) * _1495;
        _1629 = _1462;
        _1630 = _1461;
        _1631 = _1460;
        _1632 = _1472;
        _1633 = _1471;
        _1634 = _1470;
        _1635 = _1482;
        _1636 = _1481;
        _1637 = _1480;
        _1638 = _1495;
        _1639 = _1494;
        _1640 = _1493;
        _1641 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0)));
        _1642 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0)));
        _1643 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0)));
    }
    else
    {
        _1629 = _1318;
        _1630 = _1318;
        _1631 = _1318;
        _1632 = _1318;
        _1633 = _1318;
        _1634 = _1318;
        _1635 = _1318;
        _1636 = _1318;
        _1637 = _1318;
        _1638 = _1318;
        _1639 = _1318;
        _1640 = _1318;
        _1641 = 0.0;
        _1642 = 0.0;
        _1643 = 0.0;
    }
    float _1653 = (cbModelParam._m0[1u].x * (_1641 - _1330)) + _1330;
    float _1654 = (cbModelParam._m0[1u].x * (_1642 - _1331)) + _1331;
    float _1655 = (cbModelParam._m0[1u].x * (_1643 - _1332)) + _1332;
    float _1676 = fma(_1655, cbSceneParam._m0[89u].z, fma(_1654, cbSceneParam._m0[89u].y, _1653 * cbSceneParam._m0[89u].x));
    float _1679 = fma(_1655, cbSceneParam._m0[90u].z, fma(_1654, cbSceneParam._m0[90u].y, _1653 * cbSceneParam._m0[90u].x));
    float _1682 = fma(_1655, cbSceneParam._m0[91u].z, fma(_1654, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1653));
    float _1697 = _924 * 0.5;
    float _1698 = _925 * 0.5;
    float _1699 = _926 * 0.5;
    float _1700 = dot(vec4(_1697, _1698, _1699, 1.0), vec4(_1631, _1634, _1637, _1640));
    float _1703 = dot(vec4(_1697, _1698, _1699, 1.0), vec4(_1630, _1633, _1636, _1639));
    float _1706 = dot(vec4(_1697, _1698, _1699, 1.0), vec4(_1629, _1632, _1635, _1638));
    float _1740;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1713 = dot(vec4(_1697, _1698, _1699, 1.0), vec4(_1317, _1321, _1324, _1327));
        float _1717 = dot(vec4(_1697, _1698, _1699, 1.0), vec4(_1319, _1322, _1325, _1328));
        float _1721 = dot(vec4(_1697, _1698, _1699, 1.0), vec4(_1320, _1323, _1326, _1329));
        float _1728 = dot(vec4(cbModelParam._m0[39u]), vec4(_1697, _1698, _1699, 1.0));
        _1740 = dot(vec3(isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0)), isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0)), isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1728) ? 0.0 : (isnan(0.0) ? _1728 : max(0.0, _1728))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1740 = 1.0;
    }
    float _1751;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1742 = dot(vec4(cbModelParam._m0[40u]), vec4(_1697, _1698, _1699, 1.0));
        _1751 = dot(vec3(isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0)), isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0)), isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1742) ? 0.0 : (isnan(0.0) ? _1742 : max(0.0, _1742))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1751 = 1.0;
    }
    float _1755 = (_1751 * cbModelParam._m0[1u].x) + (_1740 * (1.0 - cbModelParam._m0[1u].x));
    float _1765 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _739);
    float _1766 = isnan(_1765) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1765 : min(cbModelParam._m0[25u].z, _1765));
    float _1846;
    float _1848;
    float _1850;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1813 = fma(_988, cbModelParam._m0[13u].z, fma(_984, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _980)) + cbModelParam._m0[13u].w;
        float _1817 = fma(_988, cbModelParam._m0[14u].z, fma(_984, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _980)) + cbModelParam._m0[14u].w;
        float _1821 = fma(_988, cbModelParam._m0[15u].z, fma(_984, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _980)) + cbModelParam._m0[15u].w;
        float _1824 = fma(_926, cbModelParam._m0[13u].z, fma(_925, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _924));
        float _1827 = fma(_926, cbModelParam._m0[14u].z, fma(_925, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _924));
        float _1830 = fma(_926, cbModelParam._m0[15u].z, fma(_925, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _924));
        float _1858;
        if (_1824 > 0.0)
        {
            _1858 = abs((1.0 - _1813) / _1824);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1824 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1813 + 1.0) / _1824);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1858 = frontier_phi_17_15_ladder;
        }
        float _2029;
        if (_1827 > 0.0)
        {
            _2029 = abs((1.0 - _1817) / _1827);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1827 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1817 + 1.0) / _1827);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2029 = frontier_phi_26_22_ladder;
        }
        float _2325;
        if (_1830 > 0.0)
        {
            _2325 = abs((1.0 - _1821) / _1830);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1830 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1821 + 1.0) / _1830);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2325 = frontier_phi_38_33_ladder;
        }
        float _2327 = isnan(_2029) ? _1858 : (isnan(_1858) ? _2029 : min(_1858, _2029));
        float _2328 = isnan(_2325) ? _2327 : (isnan(_2327) ? _2325 : min(_2327, _2325));
        float _2332 = (_2328 * _1824) + _1813;
        float _2333 = (_2328 * _1827) + _1817;
        float _2334 = (_2328 * _1830) + _1821;
        float _2335 = _2328 * 9.9999997473787516355514526367188e-05;
        float _2337 = (-1.0) - _2335;
        float _2339 = _2335 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2334 > _2339) || ((_2334 < _2337) || ((_2333 > _2339) || ((_2333 < _2337) || ((_2332 < _2337) || (_2332 > _2339))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2479 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2334, cbModelParam._m0[9u].z, fma(_2333, cbModelParam._m0[9u].y, _2332 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2334, cbModelParam._m0[10u].z, fma(_2333, cbModelParam._m0[10u].y, _2332 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2334, cbModelParam._m0[11u].z, fma(_2333, cbModelParam._m0[11u].y, _2332 * cbModelParam._m0[11u].x))), _1766);
            frontier_phi_16_38_ladder = _2479.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2479.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2479.x * cbModelParam._m0[1u].y;
        }
        _1846 = frontier_phi_16_38_ladder_2;
        _1848 = frontier_phi_16_38_ladder_1;
        _1850 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1834 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_924, _925, _926), _1766);
        _1846 = _1834.x * cbModelParam._m0[1u].y;
        _1848 = _1834.y * cbModelParam._m0[1u].y;
        _1850 = _1834.z * cbModelParam._m0[1u].y;
    }
    float _1854 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _739);
    float _1855 = isnan(_1854) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1854 : min(cbModelParam._m0[25u].w, _1854));
    float _1944;
    float _1946;
    float _1948;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1908 = fma(_988, cbModelParam._m0[21u].z, fma(_984, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _980)) + cbModelParam._m0[21u].w;
        float _1912 = fma(_988, cbModelParam._m0[22u].z, fma(_984, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _980)) + cbModelParam._m0[22u].w;
        float _1916 = fma(_988, cbModelParam._m0[23u].z, fma(_984, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _980)) + cbModelParam._m0[23u].w;
        float _1919 = fma(_926, cbModelParam._m0[21u].z, fma(_925, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _924));
        float _1922 = fma(_926, cbModelParam._m0[22u].z, fma(_925, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _924));
        float _1925 = fma(_926, cbModelParam._m0[23u].z, fma(_925, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _924));
        float _2034;
        if (_1919 > 0.0)
        {
            _2034 = abs((1.0 - _1908) / _1919);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1919 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1908 + 1.0) / _1919);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2034 = frontier_phi_28_24_ladder;
        }
        float _2352;
        if (_1922 > 0.0)
        {
            _2352 = abs((1.0 - _1912) / _1922);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1922 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1912 + 1.0) / _1922);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2352 = frontier_phi_40_35_ladder;
        }
        float _2690;
        if (_1925 > 0.0)
        {
            _2690 = abs((1.0 - _1916) / _1925);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1925 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1916 + 1.0) / _1925);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2690 = frontier_phi_50_47_ladder;
        }
        float _2692 = isnan(_2352) ? _2034 : (isnan(_2034) ? _2352 : min(_2034, _2352));
        float _2693 = isnan(_2690) ? _2692 : (isnan(_2692) ? _2690 : min(_2692, _2690));
        float _2697 = (_2693 * _1919) + _1908;
        float _2698 = (_2693 * _1922) + _1912;
        float _2699 = (_2693 * _1925) + _1916;
        float _2700 = _2693 * 9.9999997473787516355514526367188e-05;
        float _2701 = (-1.0) - _2700;
        float _2703 = _2700 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2699 > _2703) || ((_2699 < _2701) || ((_2698 > _2703) || ((_2698 < _2701) || ((_2697 < _2701) || (_2697 > _2703))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2821 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2699, cbModelParam._m0[17u].z, fma(_2698, cbModelParam._m0[17u].y, _2697 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2699, cbModelParam._m0[18u].z, fma(_2698, cbModelParam._m0[18u].y, _2697 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2699, cbModelParam._m0[19u].z, fma(_2698, cbModelParam._m0[19u].y, _2697 * cbModelParam._m0[19u].x))), _1855);
            frontier_phi_25_50_ladder = _2821.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2821.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2821.x * cbModelParam._m0[1u].z;
        }
        _1944 = frontier_phi_25_50_ladder_2;
        _1946 = frontier_phi_25_50_ladder_1;
        _1948 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1928 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_924, _925, _926), _1855);
        _1944 = _1928.x * cbModelParam._m0[1u].z;
        _1946 = _1928.y * cbModelParam._m0[1u].z;
        _1948 = _1928.z * cbModelParam._m0[1u].z;
    }
    float _1961 = (((_951 * _900) + _952) * _916) * ((cbModelParam._m0[1u].w * (_1944 - _1846)) + _1846);
    float _1963 = (((_951 * _902) + _952) * _916) * ((cbModelParam._m0[1u].w * (_1946 - _1848)) + _1848);
    float _1965 = (((_951 * _903) + _952) * _916) * ((cbModelParam._m0[1u].w * (_1948 - _1850)) + _1850);
    float _1968 = fma(_1965, cbSceneParam._m0[89u].z, fma(_1963, cbSceneParam._m0[89u].y, _1961 * cbSceneParam._m0[89u].x));
    float _1971 = fma(_1965, cbSceneParam._m0[90u].z, fma(_1963, cbSceneParam._m0[90u].y, _1961 * cbSceneParam._m0[90u].x));
    float _1974 = fma(_1965, cbSceneParam._m0[91u].z, fma(_1963, cbSceneParam._m0[91u].y, _1961 * cbSceneParam._m0[91u].x));
    float _2008 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2012 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2016 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2020 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2021 = _2008 / _2020;
    float _2022 = _2012 / _2020;
    float _2023 = _2016 / _2020;
    float _2170;
    float _2171;
    float _2172;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2050 = ((uint(_2023 > cbSceneParam._m0[59u].y) + uint(_2023 > cbSceneParam._m0[59u].x)) + uint(_2023 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2051 = _2050 + 43u;
        uint _2059 = _2050 + 44u;
        uint _2067 = _2050 + 45u;
        uint _2075 = _2050 + 46u;
        float _2086 = fma(_2020, cbSceneParam._m0[_2051].w, fma(_2016, cbSceneParam._m0[_2051].z, fma(_2012, cbSceneParam._m0[_2051].y, _2008 * cbSceneParam._m0[_2051].x)));
        float _2090 = fma(_2020, cbSceneParam._m0[_2059].w, fma(_2016, cbSceneParam._m0[_2059].z, fma(_2012, cbSceneParam._m0[_2059].y, _2008 * cbSceneParam._m0[_2059].x)));
        float _2098 = fma(_2020, cbSceneParam._m0[_2075].w, fma(_2016, cbSceneParam._m0[_2075].z, fma(_2012, cbSceneParam._m0[_2075].y, _2008 * cbSceneParam._m0[_2075].x)));
        float _2103 = cbSceneParam._m0[33u].z * _2098;
        float _2105 = cbSceneParam._m0[33u].w * _2098;
        float _2108 = fma(_2020, cbSceneParam._m0[_2067].w, fma(_2016, cbSceneParam._m0[_2067].z, fma(_2012, cbSceneParam._m0[_2067].y, _2008 * cbSceneParam._m0[_2067].x))) / _2098;
        float _2156 = (cbSceneParam._m0[33u].x - sqrt(((_2022 * _2022) + (_2021 * _2021)) + (_2023 * _2023))) * cbSceneParam._m0[33u].y;
        float _4601 = isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0));
        float _2163 = (isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2103 + _2086) / _2098, (_2105 + _2090) / _2098), _2108), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2105 + _2086) / _2098, (_2090 - _2103) / _2098), _2108), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2086 - _2103) / _2098, (_2090 - _2105) / _2098), _2108), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2086 - _2105) / _2098, (_2103 + _2090) / _2098), _2108), 0.0)).x), vec4(0.25)));
        _2170 = 1.0 - (_2163 * cbSceneParam._m0[34u].x);
        _2171 = 1.0 - (_2163 * cbSceneParam._m0[34u].y);
        _2172 = 1.0 - (_2163 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2170 = 1.0;
        _2171 = 1.0;
        _2172 = 1.0;
    }
    float _2236;
    float _2238;
    float _2240;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2224 = fma(_2020, cbSceneParam._m0[63u].w, fma(_2016, cbSceneParam._m0[63u].z, fma(_2012, cbSceneParam._m0[63u].y, _2008 * cbSceneParam._m0[63u].x)));
        float _2225 = fma(_2020, cbSceneParam._m0[60u].w, fma(_2016, cbSceneParam._m0[60u].z, fma(_2012, cbSceneParam._m0[60u].y, _2008 * cbSceneParam._m0[60u].x))) / _2224;
        float _2226 = fma(_2020, cbSceneParam._m0[61u].w, fma(_2016, cbSceneParam._m0[61u].z, fma(_2012, cbSceneParam._m0[61u].y, _2008 * cbSceneParam._m0[61u].x))) / _2224;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2225 >= cbSceneParam._m0[64u].x) && (_2226 >= cbSceneParam._m0[64u].y)) && (_2225 <= cbSceneParam._m0[64u].z)) && (_2226 <= cbSceneParam._m0[64u].w))
        {
            float _2365 = fma(_2020, cbSceneParam._m0[62u].w, fma(_2016, cbSceneParam._m0[62u].z, fma(_2012, cbSceneParam._m0[62u].y, _2008 * cbSceneParam._m0[62u].x))) / _2224;
            float _2369 = isnan(cbSceneParam._m0[41u].w) ? _2365 : (isnan(_2365) ? cbSceneParam._m0[41u].w : max(_2365, cbSceneParam._m0[41u].w));
            float _2412 = (cbSceneParam._m0[33u].x - sqrt(((_2022 * _2022) + (_2021 * _2021)) + (_2023 * _2023))) * cbSceneParam._m0[33u].y;
            float _4617 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
            float _2419 = (isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2225, cbSceneParam._m0[33u].w + _2226), _2369), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2225, _2226 - cbSceneParam._m0[33u].z), _2369), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2225 - cbSceneParam._m0[33u].z, _2226 - cbSceneParam._m0[33u].w), _2369), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2225 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2226), _2369), 0.0)).x), vec4(0.25)));
            float _2423 = 1.0 - (_2419 * cbSceneParam._m0[34u].x);
            float _2424 = 1.0 - (_2419 * cbSceneParam._m0[34u].y);
            float _2425 = 1.0 - (_2419 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2425) ? _2172 : (isnan(_2172) ? _2425 : min(_2172, _2425));
            frontier_phi_37_36_ladder_1 = isnan(_2424) ? _2171 : (isnan(_2171) ? _2424 : min(_2171, _2424));
            frontier_phi_37_36_ladder_2 = isnan(_2423) ? _2170 : (isnan(_2170) ? _2423 : min(_2170, _2423));
        }
        else
        {
            frontier_phi_37_36_ladder = _2172;
            frontier_phi_37_36_ladder_1 = _2171;
            frontier_phi_37_36_ladder_2 = _2170;
        }
        _2236 = frontier_phi_37_36_ladder_2;
        _2238 = frontier_phi_37_36_ladder_1;
        _2240 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2236 = _2170;
        _2238 = _2171;
        _2240 = _2172;
    }
    uvec4 _2245 = floatBitsToUint(cbInstanceData._m0[_275 + 5u]);
    uint _2247 = _2245.x * 14u;
    uint _2248 = _2247 + 13u;
    float _2255 = _916 + (-1.0);
    float _2260 = (cbLight._m0[_2248].x * _2255) + 1.0;
    float _2261 = (cbLight._m0[_2248].y * _2255) + 1.0;
    float _2262 = (cbLight._m0[_2248].z * _2255) + 1.0;
    float _2263 = (cbLight._m0[_2248].w * _2255) + 1.0;
    uint _2264 = _2247 + 5u;
    float _2270 = isnan(1.0) ? _2261 : (isnan(_2261) ? 1.0 : min(_2261, 1.0));
    uint _2274 = _2247 + 4u;
    float _2284 = isnan(1.0) ? _2260 : (isnan(_2260) ? 1.0 : min(_2260, 1.0));
    uint _2288 = _2247 | 1u;
    float _2299 = dot(vec3(cbLight._m0[_2247].xyz), vec3(_736, _737, _738));
    float _2302 = dot(vec3(cbLight._m0[_2288].xyz), vec3(_736, _737, _738));
    float _4653 = isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0));
    float _4664 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
    float _2307 = (isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0))) * 0.3183098733425140380859375;
    float _2309 = (isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0))) * 0.3183098733425140380859375;
    float _2316 = ((cbLight._m0[_2264].x * _2270) * _2309) + (((cbLight._m0[_2274].x * _2236) * _2284) * _2307);
    float _2317 = ((_2270 * cbLight._m0[_2264].y) * _2309) + (((cbLight._m0[_2274].y * _2238) * _2284) * _2307);
    float _2318 = ((_2270 * cbLight._m0[_2264].z) * _2309) + (((cbLight._m0[_2274].z * _2240) * _2284) * _2307);
    uvec4 _2322 = floatBitsToUint(cbLight._m0[_2247 + 12u]);
    bool _2324 = _2322.x == 0u;
    float _2426;
    float _2428;
    float _2430;
    if (_2324)
    {
        _2426 = _2316;
        _2428 = _2317;
        _2430 = _2318;
    }
    else
    {
        uint _2434 = _2247 + 6u;
        float _2450 = (dot(vec3(cbLight._m0[_2247 + 2u].xyz), vec3(_736, _737, _738)) * 0.5) + 0.5;
        float _2451 = _2450 * _2450;
        float _4675 = isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : max(_2451, 0.0));
        float _2452 = isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0));
        float _2453 = isnan(1.0) ? _2262 : (isnan(_2262) ? 1.0 : min(_2262, 1.0));
        _2426 = (((cbLight._m0[_2434].x * 0.3183098733425140380859375) * _2452) * _2453) + _2316;
        _2428 = (((cbLight._m0[_2434].y * 0.3183098733425140380859375) * _2452) * _2453) + _2317;
        _2430 = (((cbLight._m0[_2434].z * 0.3183098733425140380859375) * _2452) * _2453) + _2318;
    }
    bool _2433 = _2322.y == 0u;
    float _2488;
    float _2490;
    float _2492;
    if (_2433)
    {
        _2488 = _2426;
        _2490 = _2428;
        _2492 = _2430;
    }
    else
    {
        uint _2661 = _2247 + 7u;
        float _2677 = (dot(vec3(cbLight._m0[_2247 + 3u].xyz), vec3(_736, _737, _738)) * 0.5) + 0.5;
        float _2678 = _2677 * _2677;
        float _4691 = isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0));
        float _2679 = isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0));
        float _2680 = isnan(1.0) ? _2263 : (isnan(_2263) ? 1.0 : min(_2263, 1.0));
        _2488 = (((cbLight._m0[_2661].x * 0.3183098733425140380859375) * _2679) * _2680) + _2426;
        _2490 = (((cbLight._m0[_2661].y * 0.3183098733425140380859375) * _2679) * _2680) + _2428;
        _2492 = (((cbLight._m0[_2661].z * 0.3183098733425140380859375) * _2679) * _2680) + _2430;
    }
    uint _2495 = _2247 + 8u;
    float _2508 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2247].w)) * _739) * 0.949999988079071044921875);
    float _2509 = _2508 * _2508;
    float _2510 = cbLight._m0[_2247].x + _815;
    float _2511 = cbLight._m0[_2247].y + _816;
    float _2512 = cbLight._m0[_2247].z + _817;
    float _2516 = inversesqrt(dot(vec3(_2510, _2511, _2512), vec3(_2510, _2511, _2512)));
    float _2517 = _2516 * _2510;
    float _2518 = _2516 * _2511;
    float _2519 = _2516 * _2512;
    float _2520 = dot(vec3(_736, _737, _738), vec3(cbLight._m0[_2247].xyz));
    float _4707 = isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0));
    float _2523 = isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0));
    float _4718 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
    float _2524 = isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0));
    float _2525 = dot(vec3(_736, _737, _738), vec3(_2517, _2518, _2519));
    float _4729 = isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : max(_2525, 0.0));
    float _2528 = isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0));
    float _2529 = dot(vec3(cbLight._m0[_2247].xyz), vec3(_2517, _2518, _2519));
    float _4740 = isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : max(_2529, 0.0));
    float _2533 = _2509 * _2509;
    float _2537 = ((_2528 * _2528) * (_2533 + (-1.0))) + 1.0;
    float _2545 = exp2(log2(1.0 - (isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0)))) * 5.0);
    float _2546 = 0.959999978542327880859375 - _897;
    float _2548 = 0.959999978542327880859375 - _898;
    float _2549 = 0.959999978542327880859375 - _899;
    float _2556 = 1.0 - _2509;
    float _2567 = (0.5 / (((_2524 * ((_2523 * _2556) + _2509)) + 9.9999999392252902907785028219223e-09) + (((_2524 * _2556) + _2509) * _2523))) * _2523;
    float _4751 = isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0));
    float _2569 = (isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0))) * (_2533 / ((_2537 * _2537) * 3.141590118408203125));
    uint _2583 = _2247 + 9u;
    float _2594 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2288].w)) * _739) * 0.949999988079071044921875);
    float _2595 = _2594 * _2594;
    float _2596 = cbLight._m0[_2288].x + _815;
    float _2597 = cbLight._m0[_2288].y + _816;
    float _2598 = cbLight._m0[_2288].z + _817;
    float _2602 = inversesqrt(dot(vec3(_2596, _2597, _2598), vec3(_2596, _2597, _2598)));
    float _2603 = _2602 * _2596;
    float _2604 = _2602 * _2597;
    float _2605 = _2602 * _2598;
    float _2606 = dot(vec3(_736, _737, _738), vec3(cbLight._m0[_2288].xyz));
    float _4762 = isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : max(_2606, 0.0));
    float _2609 = isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0));
    float _2610 = dot(vec3(_736, _737, _738), vec3(_2603, _2604, _2605));
    float _4773 = isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : max(_2610, 0.0));
    float _2613 = isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0));
    float _2614 = dot(vec3(cbLight._m0[_2288].xyz), vec3(_2603, _2604, _2605));
    float _4784 = isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : max(_2614, 0.0));
    float _2618 = _2595 * _2595;
    float _2622 = ((_2613 * _2613) * (_2618 + (-1.0))) + 1.0;
    float _2629 = exp2(log2(1.0 - (isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0)))) * 5.0);
    float _2636 = 1.0 - _2595;
    float _2646 = (0.5 / (((_2524 * ((_2609 * _2636) + _2595)) + 9.9999999392252902907785028219223e-09) + (((_2524 * _2636) + _2595) * _2609))) * _2609;
    float _4795 = isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : max(_2646, 0.0));
    float _2648 = (isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0))) * (_2618 / ((_2622 * _2622) * 3.141590118408203125));
    float _2658 = (((((_2629 * _2546) + _900) * cbLight._m0[_2583].x) * _2648) * _2270) + ((((cbLight._m0[_2495].x * _2236) * ((_2545 * _2546) + _900)) * _2569) * _2284);
    float _2659 = (((((_2629 * _2548) + _902) * cbLight._m0[_2583].y) * _2648) * _2270) + ((((cbLight._m0[_2495].y * _2238) * ((_2545 * _2548) + _902)) * _2569) * _2284);
    float _2660 = (((((_2629 * _2549) + _903) * cbLight._m0[_2583].z) * _2648) * _2270) + ((((cbLight._m0[_2495].z * _2240) * ((_2545 * _2549) + _903)) * _2569) * _2284);
    float _2716;
    float _2718;
    float _2720;
    if (_2324)
    {
        _2716 = _2658;
        _2718 = _2659;
        _2720 = _2660;
    }
    else
    {
        uint _2722 = _2247 + 2u;
        uint _2726 = _2247 + 10u;
        float _2740 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2722].w)) * _739) * 0.949999988079071044921875);
        float _2741 = _2740 * _2740;
        float _2742 = cbLight._m0[_2722].x + _815;
        float _2743 = cbLight._m0[_2722].y + _816;
        float _2744 = cbLight._m0[_2722].z + _817;
        float _2748 = inversesqrt(dot(vec3(_2742, _2743, _2744), vec3(_2742, _2743, _2744)));
        float _2749 = _2748 * _2742;
        float _2750 = _2748 * _2743;
        float _2751 = _2748 * _2744;
        float _2752 = dot(vec3(_736, _737, _738), vec3(cbLight._m0[_2722].xyz));
        float _4806 = isnan(0.0) ? _2752 : (isnan(_2752) ? 0.0 : max(_2752, 0.0));
        float _2755 = isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0));
        float _2756 = dot(vec3(_736, _737, _738), vec3(_2749, _2750, _2751));
        float _4817 = isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : max(_2756, 0.0));
        float _2759 = isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0));
        float _2760 = dot(vec3(cbLight._m0[_2722].xyz), vec3(_2749, _2750, _2751));
        float _4828 = isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0));
        float _2764 = _2741 * _2741;
        float _2768 = ((_2759 * _2759) * (_2764 + (-1.0))) + 1.0;
        float _2775 = exp2(log2(1.0 - (isnan(1.0) ? _4828 : (isnan(_4828) ? 1.0 : min(_4828, 1.0)))) * 5.0);
        float _2782 = 1.0 - _2741;
        float _2792 = (0.5 / (((_2524 * ((_2755 * _2782) + _2741)) + 9.9999999392252902907785028219223e-09) + (((_2524 * _2782) + _2741) * _2755))) * _2755;
        float _4839 = isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : max(_2792, 0.0));
        float _2794 = (isnan(1.0) ? _4839 : (isnan(_4839) ? 1.0 : min(_4839, 1.0))) * (_2764 / ((_2768 * _2768) * 3.141590118408203125));
        float _2795 = isnan(1.0) ? _2262 : (isnan(_2262) ? 1.0 : min(_2262, 1.0));
        _2716 = (((((_2775 * _2546) + _900) * cbLight._m0[_2726].x) * _2794) * _2795) + _2658;
        _2718 = (((((_2775 * _2548) + _902) * cbLight._m0[_2726].y) * _2794) * _2795) + _2659;
        _2720 = (((((_2775 * _2549) + _903) * cbLight._m0[_2726].z) * _2794) * _2795) + _2660;
    }
    float _2826;
    float _2828;
    float _2830;
    if (_2433)
    {
        _2826 = _2716;
        _2828 = _2718;
        _2830 = _2720;
    }
    else
    {
        uint _2837 = _2247 + 3u;
        uint _2841 = _2247 + 11u;
        float _2855 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2837].w)) * _739) * 0.949999988079071044921875);
        float _2856 = _2855 * _2855;
        float _2857 = cbLight._m0[_2837].x + _815;
        float _2858 = cbLight._m0[_2837].y + _816;
        float _2859 = cbLight._m0[_2837].z + _817;
        float _2863 = inversesqrt(dot(vec3(_2857, _2858, _2859), vec3(_2857, _2858, _2859)));
        float _2864 = _2863 * _2857;
        float _2865 = _2863 * _2858;
        float _2866 = _2863 * _2859;
        float _2867 = dot(vec3(_736, _737, _738), vec3(cbLight._m0[_2837].xyz));
        float _4855 = isnan(0.0) ? _2867 : (isnan(_2867) ? 0.0 : max(_2867, 0.0));
        float _2870 = isnan(1.0) ? _4855 : (isnan(_4855) ? 1.0 : min(_4855, 1.0));
        float _2871 = dot(vec3(_736, _737, _738), vec3(_2864, _2865, _2866));
        float _4866 = isnan(0.0) ? _2871 : (isnan(_2871) ? 0.0 : max(_2871, 0.0));
        float _2874 = isnan(1.0) ? _4866 : (isnan(_4866) ? 1.0 : min(_4866, 1.0));
        float _2875 = dot(vec3(cbLight._m0[_2837].xyz), vec3(_2864, _2865, _2866));
        float _4877 = isnan(0.0) ? _2875 : (isnan(_2875) ? 0.0 : max(_2875, 0.0));
        float _2879 = _2856 * _2856;
        float _2883 = ((_2874 * _2874) * (_2879 + (-1.0))) + 1.0;
        float _2890 = exp2(log2(1.0 - (isnan(1.0) ? _4877 : (isnan(_4877) ? 1.0 : min(_4877, 1.0)))) * 5.0);
        float _2897 = 1.0 - _2856;
        float _2907 = (0.5 / (((_2524 * ((_2870 * _2897) + _2856)) + 9.9999999392252902907785028219223e-09) + (((_2524 * _2897) + _2856) * _2870))) * _2870;
        float _4888 = isnan(0.0) ? _2907 : (isnan(_2907) ? 0.0 : max(_2907, 0.0));
        float _2909 = (isnan(1.0) ? _4888 : (isnan(_4888) ? 1.0 : min(_4888, 1.0))) * (_2879 / ((_2883 * _2883) * 3.141590118408203125));
        float _2910 = isnan(1.0) ? _2263 : (isnan(_2263) ? 1.0 : min(_2263, 1.0));
        _2826 = (((((_2890 * _2546) + _900) * cbLight._m0[_2841].x) * _2909) * _2910) + _2716;
        _2828 = (((((_2890 * _2548) + _902) * cbLight._m0[_2841].y) * _2909) * _2910) + _2718;
        _2830 = (((((_2890 * _2549) + _903) * cbLight._m0[_2841].z) * _2909) * _2910) + _2720;
    }
    float _2976;
    float _2978;
    float _2980;
    float _2982;
    float _2984;
    float _2986;
    if (_2245.y == 0u)
    {
        uvec4 _2931 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2932 = _2931.x;
        uint _2943 = uint((float(_2931.y) * floor(float(uint(cbSceneParam._m0[85u].y * _837) / _2932))) + floor(float(uint(cbSceneParam._m0[85u].x * _836) / _2932)));
        float _2953 = (log2(_2023 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2954 = isnan(0.0) ? _2953 : (isnan(_2953) ? 0.0 : max(_2953, 0.0));
        uint _2957 = uint(isnan(14.0) ? _2954 : (isnan(_2954) ? 14.0 : min(_2954, 14.0)));
        uvec4 _2962 = texelFetch(g_lightClusterGridBuffer, int(((_2957 << 2u) + (_2943 << 6u)) >> 2u));
        uint _2963 = _2962.x;
        uint _2964 = _2931.z;
        float _3043;
        float _3045;
        float _3047;
        float _3049;
        float _3051;
        float _3053;
        if (((((1u << ((_2964 >> 4u) & 15u)) + 4294967295u) & _2963) == 0u) || ((_2964 & 240u) == 0u))
        {
            _3043 = 0.0;
            _3045 = 0.0;
            _3047 = 0.0;
            _3049 = 0.0;
            _3051 = 0.0;
            _3053 = 0.0;
        }
        else
        {
            float _3044;
            float _3046;
            float _3048;
            float _3050;
            float _3052;
            float _3054;
            float _3195 = 0.0;
            float _3196 = 0.0;
            float _3197 = 0.0;
            float _3198 = 0.0;
            float _3199 = 0.0;
            float _3200 = 0.0;
            uint _3201 = 0u;
            uint _3210;
            bool _3211;
            for (;;)
            {
                _3210 = texelFetch(g_lightClassification, int((((_2957 << 5u) + (_2943 << 9u)) + (_3201 << 2u)) >> 2u)).x;
                _3211 = _3210 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3211)
                {
                    frontier_phi_71_pred = _3200;
                    frontier_phi_71_pred_1 = _3199;
                    frontier_phi_71_pred_2 = _3198;
                    frontier_phi_71_pred_3 = _3197;
                    frontier_phi_71_pred_4 = _3196;
                    frontier_phi_71_pred_5 = _3195;
                }
                else
                {
                    float _3340;
                    float _3341;
                    float _3342;
                    float _3343;
                    float _3344;
                    float _3345;
                    uint _3346;
                    _3340 = _3195;
                    _3341 = _3196;
                    _3342 = _3197;
                    _3343 = _3198;
                    _3344 = _3199;
                    _3345 = _3200;
                    _3346 = _3210;
                    float _3267;
                    float _3268;
                    float _3269;
                    float _3270;
                    float _3271;
                    float _3272;
                    for (;;)
                    {
                        uint _3350 = uint(findLSB(_3346)) + (_3201 << 5u);
                        uint _3347 = (_3346 + 4294967295u) & _3346;
                        uint _3352 = _3350 * 48u;
                        vec4 _3366 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3352)).x, texelFetch(g_PointLightRenderingBuffer, int(_3352 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3352 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3352 + 3u)).x));
                        uint _3372 = (_3350 * 48u) + 4u;
                        vec4 _3385 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3372)).x, texelFetch(g_PointLightRenderingBuffer, int(_3372 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3372 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3372 + 3u)).x));
                        uint _3391 = (_3350 * 48u) + 8u;
                        vec3 _3402 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3391)).x, texelFetch(g_PointLightRenderingBuffer, int(_3391 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3391 + 2u)).x));
                        float _3406 = _3366.x - _2021;
                        float _3407 = _3366.y - _2022;
                        float _3408 = _3366.z - _2023;
                        float _3409 = dot(vec3(_3406, _3407, _3408), vec3(_3406, _3407, _3408));
                        float _3412 = inversesqrt(_3409);
                        float _3413 = _3412 * _3406;
                        float _3414 = _3412 * _3407;
                        float _3415 = _3412 * _3408;
                        float _3416 = dot(vec3(_857, _860, _863), vec3(_3413, _3414, _3415));
                        float _3421 = 1.0 - (_3409 * _3366.w);
                        float _4914 = isnan(0.0) ? _3421 : (isnan(_3421) ? 0.0 : max(_3421, 0.0));
                        float _3422 = isnan(1.0) ? _4914 : (isnan(_4914) ? 1.0 : min(_4914, 1.0));
                        float _3423 = sqrt(_3409) * _3385.w;
                        float _3426 = 1.39999997615814208984375 / (_3423 + 1.39999997615814208984375);
                        float _3427 = _3426 * _3426;
                        float _3430 = ((1.0 - _3427) * _3416) + _3427;
                        float _3433 = _3423 * _3423;
                        float _3437 = ((isnan(0.0) ? _3430 : (isnan(_3430) ? 0.0 : max(_3430, 0.0))) * _3422) / ((_3433 * 0.699999988079071044921875) + 1.0);
                        float _3441 = (-0.0) - _2021;
                        float _3442 = (-0.0) - _2022;
                        float _3443 = (-0.0) - _2023;
                        float _3447 = inversesqrt(dot(vec3(_3441, _3442, _3443), vec3(_3441, _3442, _3443)));
                        float _3448 = _3447 * _3441;
                        float _3449 = _3447 * _3442;
                        float _3450 = _3447 * _3443;
                        float _3457 = exp2(log2(1.0 / ((_3433 * 3.5) + 5.0)) * 0.25);
                        float _3458 = 1.0 - _932;
                        float _3465 = sqrt(1.0 - ((1.0 - (_3458 * _3458)) * (1.0 - (_3457 * _3457))));
                        float _3466 = _3465 * _3465;
                        float _3467 = _3466 * _3466;
                        float _3468 = _3448 + _3413;
                        float _3469 = _3449 + _3414;
                        float _3470 = _3450 + _3415;
                        float _3474 = inversesqrt(dot(vec3(_3468, _3469, _3470), vec3(_3468, _3469, _3470)));
                        float _3478 = dot(vec3(_857, _860, _863), vec3(_3448, _3449, _3450));
                        float _4930 = isnan(0.0) ? _3478 : (isnan(_3478) ? 0.0 : max(_3478, 0.0));
                        float _3481 = isnan(1.0) ? _4930 : (isnan(_4930) ? 1.0 : min(_4930, 1.0));
                        float _3482 = dot(vec3(_857, _860, _863), vec3(_3474 * _3468, _3474 * _3469, _3474 * _3470));
                        float _4941 = isnan(0.0) ? _3482 : (isnan(_3482) ? 0.0 : max(_3482, 0.0));
                        float _3485 = isnan(1.0) ? _4941 : (isnan(_4941) ? 1.0 : min(_4941, 1.0));
                        float _3489 = ((_3485 * _3485) * (_3467 + (-1.0))) + 1.0;
                        float _3490 = _3426 * _3466;
                        float _3491 = _3490 * _3490;
                        float _3494 = ((1.0 - _3491) * _3416) + _3491;
                        float _4952 = isnan(0.0) ? _3494 : (isnan(_3494) ? 0.0 : max(_3494, 0.0));
                        float _3495 = isnan(1.0) ? _4952 : (isnan(_4952) ? 1.0 : min(_4952, 1.0));
                        float _3496 = 1.0 - _3466;
                        float _3506 = (0.5 / (((_3495 * ((_3481 * _3496) + _3466)) + 9.9999999392252902907785028219223e-09) + (((_3495 * _3496) + _3466) * _3481))) * _3495;
                        float _4963 = isnan(0.0) ? _3506 : (isnan(_3506) ? 0.0 : max(_3506, 0.0));
                        float _3517 = (((_3467 * 3.1415927410125732421875) * (isnan(1.0) ? _4963 : (isnan(_4963) ? 1.0 : min(_4963, 1.0)))) / ((_3489 * _3489) * ((_3433 * 2.1991131305694580078125) + 3.141590118408203125))) * _3422;
                        _3270 = (_3437 * _3385.x) + _3343;
                        _3271 = (_3437 * _3385.y) + _3344;
                        _3272 = (_3437 * _3385.z) + _3345;
                        _3267 = (_3517 * _3402.x) + _3340;
                        _3268 = (_3517 * _3402.y) + _3341;
                        _3269 = (_3517 * _3402.z) + _3342;
                        if (_3347 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3340 = _3267;
                            _3341 = _3268;
                            _3342 = _3269;
                            _3343 = _3270;
                            _3344 = _3271;
                            _3345 = _3272;
                            _3346 = _3347;
                        }
                    }
                    frontier_phi_71_pred = _3272;
                    frontier_phi_71_pred_1 = _3271;
                    frontier_phi_71_pred_2 = _3270;
                    frontier_phi_71_pred_3 = _3269;
                    frontier_phi_71_pred_4 = _3268;
                    frontier_phi_71_pred_5 = _3267;
                }
                _3054 = frontier_phi_71_pred;
                _3052 = frontier_phi_71_pred_1;
                _3050 = frontier_phi_71_pred_2;
                _3048 = frontier_phi_71_pred_3;
                _3046 = frontier_phi_71_pred_4;
                _3044 = frontier_phi_71_pred_5;
                uint _3202 = _3201 + 1u;
                if (_3202 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3195 = _3044;
                    _3196 = _3046;
                    _3197 = _3048;
                    _3198 = _3050;
                    _3199 = _3052;
                    _3200 = _3054;
                    _3201 = _3202;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3043 = _3044;
            _3045 = _3046;
            _3047 = _3048;
            _3049 = _3050;
            _3051 = _3052;
            _3053 = _3054;
        }
        uvec4 _3057 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3058 = _3057.z;
        uint _3060 = (_3058 >> 8u) & 15u;
        float _3163;
        float _3165;
        float _3167;
        float _3169;
        float _3171;
        float _3173;
        if (((4294967295u << _3060) & _2963) == 0u)
        {
            _3163 = _3043;
            _3165 = _3045;
            _3167 = _3047;
            _3169 = _3049;
            _3171 = _3051;
            _3173 = _3053;
        }
        else
        {
            float _3188 = inversesqrt(dot(vec3(_2021, _2022, _2023), vec3(_2021, _2022, _2023)));
            float _3189 = _3188 * _2021;
            float _3190 = _3188 * _2022;
            float _3191 = _3188 * _2023;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3060 < ((_3058 >> 12u) & 15u))
            {
                float _3164;
                float _3166;
                float _3168;
                float _3170;
                float _3172;
                float _3174;
                float _3323 = _3043;
                float _3324 = _3045;
                float _3325 = _3047;
                float _3326 = _3049;
                float _3327 = _3051;
                float _3328 = _3053;
                uint _3329 = _3060;
                uint _3338;
                bool _3339;
                for (;;)
                {
                    _3338 = texelFetch(g_lightClassification, int((((_2957 << 5u) + (_2943 << 9u)) + (_3329 << 2u)) >> 2u)).x;
                    _3339 = _3338 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3339)
                    {
                        frontier_phi_82_pred = _3328;
                        frontier_phi_82_pred_1 = _3327;
                        frontier_phi_82_pred_2 = _3326;
                        frontier_phi_82_pred_3 = _3325;
                        frontier_phi_82_pred_4 = _3324;
                        frontier_phi_82_pred_5 = _3323;
                    }
                    else
                    {
                        float _3531;
                        float _3532;
                        float _3533;
                        float _3534;
                        float _3535;
                        float _3536;
                        float _3824;
                        float _3825;
                        float _3826;
                        float _3827;
                        float _3828;
                        float _3829;
                        float _3544 = _3323;
                        float _3545 = _3324;
                        float _3546 = _3325;
                        float _3547 = _3326;
                        float _3548 = _3327;
                        float _3549 = _3328;
                        uint _3550 = _3338;
                        uint _3551;
                        vec4 _3576;
                        float _3577;
                        vec4 _3592;
                        vec3 _3604;
                        vec4 _3619;
                        vec4 _3634;
                        float _3680;
                        bool _3681;
                        for (;;)
                        {
                            uint _3561 = ((_3329 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3550));
                            _3551 = (_3550 + 4294967295u) & _3550;
                            uint _3563 = _3561 * 40u;
                            _3576 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3563)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3563 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3563 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3563 + 3u)).x));
                            _3577 = _3576.w;
                            uint _3579 = (_3561 * 40u) + 4u;
                            _3592 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3579)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3579 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3579 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3579 + 3u)).x));
                            uint _3594 = (_3561 * 40u) + 8u;
                            _3604 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3594)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3594 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3594 + 2u)).x));
                            uint _3606 = (_3561 * 40u) + 16u;
                            _3619 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3606)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3606 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3606 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3606 + 3u)).x));
                            uint _3621 = (_3561 * 40u) + 20u;
                            _3634 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3621)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3621 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3621 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3621 + 3u)).x));
                            uint _3636 = (_3561 * 40u) + 24u;
                            vec4 _3649 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3636)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3636 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3636 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3636 + 3u)).x));
                            uint _3655 = (_3561 * 40u) + 28u;
                            vec4 _3668 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3655)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3655 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3655 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3655 + 3u)).x));
                            _3680 = fma(_2023, _3668.z, fma(_2022, _3668.y, _3668.x * _2021)) + _3668.w;
                            _3681 = !((fma(_2023, _3649.z, fma(_2022, _3649.y, _3649.x * _2021)) + _3649.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3681)
                            {
                                float _3708 = _3576.x - _2021;
                                float _3709 = _3576.y - _2022;
                                float _3710 = _3576.z - _2023;
                                float _3711 = dot(vec3(_3708, _3709, _3710), vec3(_3708, _3709, _3710));
                                float _3714 = inversesqrt(_3711);
                                float _3715 = _3714 * _3708;
                                float _3716 = _3714 * _3709;
                                float _3717 = _3714 * _3710;
                                float _3721 = 1.0 - (_3711 / (_3577 * _3577));
                                float _4974 = isnan(0.0) ? _3721 : (isnan(_3721) ? 0.0 : max(_3721, 0.0));
                                float _3722 = isnan(1.0) ? _4974 : (isnan(_4974) ? 1.0 : min(_4974, 1.0));
                                float _3726 = sqrt(_3711) * _3592.w;
                                float _3728 = 1.39999997615814208984375 / (_3726 + 1.39999997615814208984375);
                                float _3729 = _3728 * _3728;
                                float _3732 = ((1.0 - _3729) * dot(vec3(_3715, _3716, _3717), vec3(_857, _860, _863))) + _3729;
                                float _3735 = _3726 * _3726;
                                float _3739 = (fma(_2023, _3619.z, fma(_2022, _3619.y, _3619.x * _2021)) + _3619.w) / _3680;
                                float _3740 = (fma(_2023, _3634.z, fma(_2022, _3634.y, _3634.x * _2021)) + _3634.w) / _3680;
                                float _3744 = 1.0 - dot(vec2(_3739, _3740), vec2(_3739, _3740));
                                float _4990 = isnan(0.0) ? _3744 : (isnan(_3744) ? 0.0 : max(_3744, 0.0));
                                float _3745 = isnan(1.0) ? _4990 : (isnan(_4990) ? 1.0 : min(_4990, 1.0));
                                float _3746 = _3745 * (((isnan(0.0) ? _3732 : (isnan(_3732) ? 0.0 : max(_3732, 0.0))) * _3722) / ((_3735 * 0.699999988079071044921875) + 1.0));
                                float _3758 = exp2(log2(1.0 / ((_3735 * 3.5) + 5.0)) * 0.25);
                                float _3759 = 1.0 - _932;
                                float _3766 = sqrt(1.0 - ((1.0 - (_3759 * _3759)) * (1.0 - (_3758 * _3758))));
                                float _3767 = _3766 * _3766;
                                float _3768 = _3767 * _3767;
                                float _3769 = _3715 - _3189;
                                float _3770 = _3716 - _3190;
                                float _3771 = _3717 - _3191;
                                float _3775 = inversesqrt(dot(vec3(_3769, _3770, _3771), vec3(_3769, _3770, _3771)));
                                float _3779 = dot(vec3(_857, _860, _863), vec3((-0.0) - _3189, (-0.0) - _3190, (-0.0) - _3191));
                                float _5001 = isnan(0.0) ? _3779 : (isnan(_3779) ? 0.0 : max(_3779, 0.0));
                                float _3782 = isnan(1.0) ? _5001 : (isnan(_5001) ? 1.0 : min(_5001, 1.0));
                                float _3783 = dot(vec3(_857, _860, _863), vec3(_3775 * _3769, _3775 * _3770, _3775 * _3771));
                                float _5012 = isnan(0.0) ? _3783 : (isnan(_3783) ? 0.0 : max(_3783, 0.0));
                                float _3786 = isnan(1.0) ? _5012 : (isnan(_5012) ? 1.0 : min(_5012, 1.0));
                                float _3790 = ((_3786 * _3786) * (_3768 + (-1.0))) + 1.0;
                                float _3791 = _3728 * _3767;
                                float _3792 = _3791 * _3791;
                                float _3798 = ((1.0 - _3792) * dot(vec3(_857, _860, _863), vec3(_3715, _3716, _3717))) + _3792;
                                float _5023 = isnan(0.0) ? _3798 : (isnan(_3798) ? 0.0 : max(_3798, 0.0));
                                float _3799 = isnan(1.0) ? _5023 : (isnan(_5023) ? 1.0 : min(_5023, 1.0));
                                float _3800 = 1.0 - _3767;
                                float _3810 = (0.5 / (((_3799 * ((_3782 * _3800) + _3767)) + 9.9999999392252902907785028219223e-09) + (((_3799 * _3800) + _3767) * _3782))) * _3799;
                                float _5034 = isnan(0.0) ? _3810 : (isnan(_3810) ? 0.0 : max(_3810, 0.0));
                                float _3820 = (_3745 * _3722) * (((_3768 * 3.1415927410125732421875) * (isnan(1.0) ? _5034 : (isnan(_5034) ? 1.0 : min(_5034, 1.0)))) / ((_3790 * _3790) * ((_3735 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3746 * _3592.z;
                                frontier_phi_88_pred_1 = _3746 * _3592.y;
                                frontier_phi_88_pred_2 = _3746 * _3592.x;
                                frontier_phi_88_pred_3 = _3820 * _3604.z;
                                frontier_phi_88_pred_4 = _3820 * _3604.y;
                                frontier_phi_88_pred_5 = _3820 * _3604.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3829 = frontier_phi_88_pred;
                            _3828 = frontier_phi_88_pred_1;
                            _3827 = frontier_phi_88_pred_2;
                            _3826 = frontier_phi_88_pred_3;
                            _3825 = frontier_phi_88_pred_4;
                            _3824 = frontier_phi_88_pred_5;
                            _3534 = _3827 + _3547;
                            _3535 = _3828 + _3548;
                            _3536 = _3829 + _3549;
                            _3531 = _3824 + _3544;
                            _3532 = _3825 + _3545;
                            _3533 = _3826 + _3546;
                            if (_3551 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3544 = _3531;
                                _3545 = _3532;
                                _3546 = _3533;
                                _3547 = _3534;
                                _3548 = _3535;
                                _3549 = _3536;
                                _3550 = _3551;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3536;
                        frontier_phi_82_pred_1 = _3535;
                        frontier_phi_82_pred_2 = _3534;
                        frontier_phi_82_pred_3 = _3533;
                        frontier_phi_82_pred_4 = _3532;
                        frontier_phi_82_pred_5 = _3531;
                    }
                    _3174 = frontier_phi_82_pred;
                    _3172 = frontier_phi_82_pred_1;
                    _3170 = frontier_phi_82_pred_2;
                    _3168 = frontier_phi_82_pred_3;
                    _3166 = frontier_phi_82_pred_4;
                    _3164 = frontier_phi_82_pred_5;
                    uint _3330 = _3329 + 1u;
                    if (_3330 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3323 = _3164;
                        _3324 = _3166;
                        _3325 = _3168;
                        _3326 = _3170;
                        _3327 = _3172;
                        _3328 = _3174;
                        _3329 = _3330;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3170;
                frontier_phi_63_64_ladder_1 = _3174;
                frontier_phi_63_64_ladder_2 = _3172;
                frontier_phi_63_64_ladder_3 = _3168;
                frontier_phi_63_64_ladder_4 = _3166;
                frontier_phi_63_64_ladder_5 = _3164;
            }
            else
            {
                frontier_phi_63_64_ladder = _3049;
                frontier_phi_63_64_ladder_1 = _3053;
                frontier_phi_63_64_ladder_2 = _3051;
                frontier_phi_63_64_ladder_3 = _3047;
                frontier_phi_63_64_ladder_4 = _3045;
                frontier_phi_63_64_ladder_5 = _3043;
            }
            _3163 = frontier_phi_63_64_ladder_5;
            _3165 = frontier_phi_63_64_ladder_4;
            _3167 = frontier_phi_63_64_ladder_3;
            _3169 = frontier_phi_63_64_ladder;
            _3171 = frontier_phi_63_64_ladder_2;
            _3173 = frontier_phi_63_64_ladder_1;
        }
        float _3178 = isnan(1.0) ? _916 : (isnan(_916) ? 1.0 : min(_916, 1.0));
        _2976 = (_3178 * _3169) + _2488;
        _2978 = (_3178 * _3171) + _2490;
        _2980 = (_3178 * _3173) + _2492;
        _2982 = ((_3163 * _900) * _3178) + _2826;
        _2984 = ((_3165 * _902) * _3178) + _2828;
        _2986 = ((_3167 * _903) * _3178) + _2830;
    }
    else
    {
        _2976 = _2488;
        _2978 = _2490;
        _2980 = _2492;
        _2982 = _2826;
        _2984 = _2828;
        _2986 = _2830;
    }
    float _5050 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
    float _5061 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
    float _5072 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
    float _3003 = ((isnan(1.0) ? _5050 : (isnan(_5050) ? 1.0 : min(_5050, 1.0))) * (_2976 + ((isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0))) * _916))) + ((_2982 + ((isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0))) * _1755)) * cbPerFrame._m0[3u].x);
    float _3004 = ((isnan(1.0) ? _5061 : (isnan(_5061) ? 1.0 : min(_5061, 1.0))) * (_2978 + ((isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0))) * _916))) + ((_2984 + ((isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0))) * _1755)) * cbPerFrame._m0[3u].x);
    float _3005 = ((isnan(1.0) ? _5072 : (isnan(_5072) ? 1.0 : min(_5072, 1.0))) * (_2980 + ((isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0))) * _916))) + ((_2986 + ((isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0))) * _1755)) * cbPerFrame._m0[3u].x);
    uint _3006 = _275 + 6u;
    float _3014 = _836 / cbSceneParam._m0[86u].x;
    float _3015 = _837 / cbSceneParam._m0[86u].y;
    vec4 _3029 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3014, _3015, (log2((isnan(cbSceneParam._m0[77u].w) ? _758 : (isnan(_758) ? cbSceneParam._m0[77u].w : min(_758, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3031 = _3029.x;
    float _3032 = _3029.y;
    float _3033 = _3029.z;
    float _3034 = _3029.w;
    float _3105;
    float _3107;
    float _3109;
    float _3111;
    if (_758 > cbSceneParam._m0[78u].w)
    {
        float _3068 = isnan(_758) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _758 : min(cbSceneParam._m0[80u].w, _758));
        float _3069 = _3068 / _758;
        float _3080 = _3069 * _808;
        float _3081 = _809 * _3069;
        float _3082 = (-0.0) - _3081;
        float _3083 = _3069 * _810;
        float _3085 = (cbSceneParam._m0[77u].w * _3082) / _3068;
        float _3086 = _3085 + cbSceneParam._m0[79u].w;
        float _3087 = cbSceneParam._m0[79u].w - _3081;
        float _3093 = sqrt(((_3080 * _3080) + (_3081 * _3081)) + (_3083 * _3083));
        float _3096 = (1.0 - (cbSceneParam._m0[77u].w / _3068)) * _3093;
        float _3101 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3103 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3280;
        if (abs((_3082 - _3085) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3280 = ((((_3086 > 0.0) ? exp2(_3101 * _3086) : (2.0 - exp2(_3103 * _3086))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3096;
        }
        else
        {
            float _3224 = 1.0 / cbSceneParam._m0[80u].x;
            float _3225 = isnan(_3087) ? _3086 : (isnan(_3086) ? _3087 : max(_3086, _3087));
            float _3226 = isnan(_3087) ? _3086 : (isnan(_3086) ? _3087 : min(_3086, _3087));
            float _3235 = isnan(0.0) ? _3225 : (isnan(_3225) ? 0.0 : min(_3225, 0.0));
            float _3236 = isnan(0.0) ? _3226 : (isnan(_3226) ? 0.0 : min(_3226, 0.0));
            _3280 = ((abs(_3093 / _3082) * cbSceneParam._m0[80u].y) * ((((_3235 - _3236) * 2.0) - ((exp2(_3101 * (isnan(0.0) ? _3225 : (isnan(_3225) ? 0.0 : max(_3225, 0.0)))) - exp2(_3101 * (isnan(0.0) ? _3226 : (isnan(_3226) ? 0.0 : max(_3226, 0.0))))) * _3224)) - ((exp2(_3103 * _3235) - exp2(_3103 * _3236)) * _3224))) + (_3096 * cbSceneParam._m0[80u].z);
        }
        vec4 _3282 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3014, _3015, 1.0), 0.0);
        float _3291 = exp2((_3280 * (-1.44269502162933349609375)) * (1.0 - _3282.w));
        float _3292 = log2(_3291);
        float _3308 = log2(_3034);
        _3105 = (exp2(_3308 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3292 * cbSceneParam._m0[78u].x)) * _3282.x) / cbSceneParam._m0[78u].x)) + _3031;
        _3107 = (exp2(_3308 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3292 * cbSceneParam._m0[78u].y)) * _3282.y) / cbSceneParam._m0[78u].y)) + _3032;
        _3109 = (exp2(_3308 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3292 * cbSceneParam._m0[78u].z)) * _3282.z) / cbSceneParam._m0[78u].z)) + _3033;
        _3111 = _3291 * _3034;
    }
    else
    {
        _3105 = _3031;
        _3107 = _3032;
        _3109 = _3033;
        _3111 = _3034;
    }
    bool _3318;
    vec4 _3121;
    vec4 _3143;
    float _3145;
    float _3149;
    float _3150;
    float _3151;
    float _3152;
    bool _3162;
    for (;;)
    {
        _3121 = cbMatDynParam._m0[0u];
        float _3123 = roundEven(_3121.y);
        bool _3124 = _3123 == 3.0;
        float _3125 = log2(_3111);
        float _3132 = exp2(_3125 * cbSceneParam._m0[78u].x) * _3003;
        float _3133 = exp2(_3125 * cbSceneParam._m0[78u].y) * _3004;
        float _3134 = exp2(_3125 * cbSceneParam._m0[78u].z) * _3005;
        float _3141 = _824 + (-0.5);
        _3143 = cbMtdParam._m0[1u];
        _3145 = _3143.y * _3141;
        float _3148 = (_3123 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3149 = _3148 * (_3124 ? _3132 : (_3132 + (cbSceneParam._m0[72u].w * _3105)));
        _3150 = _3148 * (_3124 ? _3133 : (_3133 + (cbSceneParam._m0[72u].w * _3107)));
        _3151 = _3148 * (_3124 ? _3134 : (_3134 + (cbSceneParam._m0[72u].w * _3109)));
        _3152 = _3141 * 0.999000012874603271484375;
        _3162 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3162)
        {
            if ((cbInstanceData._m0[_275 + 7u].x + _3152) < 0.5)
            {
                _3318 = true;
                break;
            }
        }
        uint _3259 = _876 + uint(_3121.w);
        if ((cbInstanceData._m0[_3259].w < 1.0) && ((cbInstanceData._m0[_3259].w + _3152) < 0.5))
        {
            _3318 = true;
            break;
        }
        if ((_3145 + 1.0) < _3143.x)
        {
            _3318 = true;
            break;
        }
        _3318 = false;
        break;
    }
    float _3522;
    if (_3318)
    {
        discard_state = true;
        _3522 = 0.0;
    }
    else
    {
        _3522 = cbInstanceData._m0[_3006].w;
    }
    SV_Target.x = _3149;
    SV_Target.y = _3150;
    SV_Target.z = _3151;
    SV_Target.w = _3522;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3006].w;
    discard_exit();
}


