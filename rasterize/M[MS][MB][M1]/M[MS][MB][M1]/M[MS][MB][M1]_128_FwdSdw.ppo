#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1238;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _218 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _219 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _220 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _226 = inversesqrt(dot(vec3(_218, _219, _220), vec3(_218, _219, _220)));
    float _233 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _240 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _246 = uint(roundEven(NORMAL.w)) * 13u;
    uint _252 = _246 + 1u;
    uint _256 = _246 + 2u;
    float _265 = sqrt(((cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x) + (cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x)) + (cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x));
    float _266 = _265 * TEXCOORD.z;
    float _267 = _265 * TEXCOORD.w;
    vec4 _287 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _293 = _287.x * cbMtdParam._m0[11u].x;
    float _294 = _287.y * cbMtdParam._m0[11u].y;
    float _295 = _287.z * cbMtdParam._m0[11u].z;
    vec4 _314 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _266) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _267) + cbTextureTilingScale._m0[5u].w));
    vec4 _352 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _354 = _352.x;
    float _366 = dot(vec4(_354, _352.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _383 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_354 - _366) * cbMtdParam._m0[24u].y) + _366) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3846 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _384 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
    float _391 = (_384 * ((_314.x * cbMtdParam._m0[12u].x) - _293)) + _293;
    float _392 = (_384 * ((_314.y * cbMtdParam._m0[12u].y) - _294)) + _294;
    float _393 = (_384 * ((_314.z * cbMtdParam._m0[12u].z) - _295)) + _295;
    vec4 _412 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _266) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _267) + cbTextureTilingScale._m0[14u].w));
    vec4 _432 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _266) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _267) + cbTextureTilingScale._m0[20u].w));
    vec4 _457 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _266) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _267) + cbTextureTilingScale._m0[4u].w));
    vec4 _474 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _476 = _474.x;
    float _477 = _474.y;
    float _478 = _474.z;
    float _487 = ((_457.z - _478) * _384) + _478;
    float _490 = ((((_457.x - _476) * _384) + _476) * 2.0) + (-1.0);
    float _491 = ((((_457.y - _477) * _384) + _477) * 2.0) + (-1.0);
    float _492 = dot(vec2(_490, _491), vec2(_490, _491));
    float _3857 = isnan(0.0) ? _492 : (isnan(_492) ? 0.0 : max(_492, 0.0));
    float _497 = sqrt(1.0 - (isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0))));
    vec4 _513 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _538 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _266) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _267) + cbTextureTilingScale._m0[11u].w));
    float _540 = _538.x;
    float _541 = 1.0 - _540;
    float _554 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_540 - _541) * cbMtdParam._m0[24u].z) + _541) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3868 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _555 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
    float _562 = (_555 * ((_412.x * cbMtdParam._m0[18u].x) - _391)) + _391;
    float _563 = (_555 * ((_412.y * cbMtdParam._m0[18u].y) - _392)) + _392;
    float _564 = (_555 * ((_412.z * cbMtdParam._m0[18u].z) - _393)) + _393;
    vec4 _576 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _590 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _592 = _590.x;
    float _610 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _266) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _267) + cbTextureTilingScale._m0[9u].w)).x - _592) * _384) + _592;
    float _614 = ((_576.x - _610) * cbMtdParam._m0[19u].z) + _610;
    float _616 = _614 - (_614 * _555);
    float _621 = (((_432.z - _487) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _487;
    float _625 = ((_513.z - _621) * cbMtdParam._m0[19u].w) + _621;
    vec4 _638 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _266) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _267) + cbTextureTilingScale._m0[15u].w));
    float _645 = (_638.x * 2.0) + (-1.0);
    float _646 = (_638.y * 2.0) + (-1.0);
    float _647 = dot(vec2(_645, _646), vec2(_645, _646));
    float _3879 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _655 = (_555 * (_638.z - _625)) + _625;
    float _664 = (_490 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_432.x * 2.0) + (-1.0)))) + (((_513.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _665 = (_491 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_432.y * 2.0) + (-1.0)))) + (((_513.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _677 = (((_645 - _664) + (cbMtdParam._m0[21u].x * _664)) * _555) + _664;
    float _678 = (((_646 - _665) + (cbMtdParam._m0[21u].x * _665)) * _555) + _665;
    float _679 = (_555 * (sqrt(1.0 - (isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0)))) - _497)) + _497;
    float _684 = cbMtdParam._m0[22u].x + _513.w;
    float _687 = fma(_679, _233 * NORMAL.x, fma(_678, _240 * TANGENT.x, (_226 * _218) * _677));
    float _690 = fma(_679, _233 * NORMAL.y, fma(_678, _240 * TANGENT.y, (_226 * _219) * _677));
    float _693 = fma(_679, _233 * NORMAL.z, fma(_678, _240 * TANGENT.z, (_226 * _220) * _677));
    float _697 = inversesqrt(dot(vec3(_687, _690, _693), vec3(_687, _690, _693)));
    float _698 = _697 * _687;
    float _699 = _697 * _690;
    float _700 = _697 * _693;
    float _3890 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    float _701 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
    float _3901 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _3912 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _3923 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _3934 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _3945 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _706 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
    float _720 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _761 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _771 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _761);
    float _772 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _761);
    float _773 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _761);
    float _777 = inversesqrt(dot(vec3(_771, _772, _773), vec3(_771, _772, _773)));
    float _778 = _771 * _777;
    float _779 = _772 * _777;
    float _780 = _773 * _777;
    float _786 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _787 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _805 = fma(_700, cbSceneParam._m0[5u].z, fma(_699, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _698));
    float _808 = fma(_700, cbSceneParam._m0[6u].z, fma(_699, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _698));
    float _811 = fma(_700, cbSceneParam._m0[7u].z, fma(_699, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _698));
    uint _825 = (_246 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _831 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0)))) * cbInstanceData._m0[_825].x;
    float _832 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0)))) * cbInstanceData._m0[_825].y;
    float _833 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0)))) * cbInstanceData._m0[_825].z;
    float _3956 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
    float _834 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
    float _3967 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
    float _835 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
    float _3978 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
    float _836 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
    float _837 = 1.0 - _706;
    float _838 = _834 * _837;
    float _839 = _835 * _837;
    float _840 = _836 * _837;
    float _845 = (_834 + (-0.039999999105930328369140625)) * _706;
    float _846 = (_835 + (-0.039999999105930328369140625)) * _706;
    float _847 = (_836 + (-0.039999999105930328369140625)) * _706;
    float _848 = _845 + 0.039999999105930328369140625;
    float _850 = _846 + 0.039999999105930328369140625;
    float _851 = _847 + 0.039999999105930328369140625;
    vec4 _860 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _786, cbSceneParam._m0[86u].y * _787));
    float _864 = ((isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0))) * TEXCOORD_5.w) * _860.x;
    float _865 = dot(vec3(_698, _699, _700), vec3(_778, _779, _780));
    float _868 = _865 * 2.0;
    float _872 = (_868 * _698) - _778;
    float _873 = (_868 * _699) - _779;
    float _874 = (_868 * _700) - _780;
    float _878 = abs(dot(vec3(_778, _779, _780), vec3(_698, _699, _700)));
    float _3989 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
    float _880 = sqrt(_701);
    float _893 = exp2((_880 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_880 * 3.0));
    float _899 = (1.0 - _893) * ((_880 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _900 = _893 * _880;
    float _928 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _932 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _936 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1237;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _962 = fma(_936, cbModelParam._m0[26u].z, fma(_932, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _928));
        float _966 = fma(_936, cbModelParam._m0[27u].z, fma(_932, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _928));
        float _970 = fma(_936, cbModelParam._m0[28u].z, fma(_932, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _928));
        float _995 = _928 + _698;
        float _996 = _932 + _699;
        float _997 = _936 + _700;
        float _1007 = fma(_997, cbModelParam._m0[26u].z, fma(_996, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _995)) - _962;
        float _1008 = fma(_997, cbModelParam._m0[27u].z, fma(_996, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _995)) - _966;
        float _1009 = fma(_997, cbModelParam._m0[28u].z, fma(_996, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _995)) - _970;
        float _1013 = inversesqrt(dot(vec3(_1007, _1008, _1009), vec3(_1007, _1008, _1009)));
        float _1026 = ((_1013 * _1007) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_962 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1027 = ((_1013 * _1008) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_966 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1028 = ((_1013 * _1009) / cbModelParam._m0[34u].z) + ((((((_970 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1031 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1026, _1027, _1028), 0.0);
        vec4 _1038 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1026, _1027, _1028), 0.0);
        vec4 _1045 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1026, _1027, _1028), 0.0);
        vec4 _1052 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1026, _1027, _1028), 0.0);
        float _1065 = exp2((_1031.w + (-0.5)) * 20.0) * 2.0;
        float _1066 = _1065 * (_1031.x + (-0.5));
        float _1067 = _1065 * (_1031.y + (-0.5));
        float _1068 = _1065 * (_1031.z + (-0.5));
        float _1075 = exp2((_1038.w + (-0.5)) * 20.0) * 2.0;
        float _1076 = _1075 * (_1038.x + (-0.5));
        float _1077 = _1075 * (_1038.y + (-0.5));
        float _1078 = _1075 * (_1038.z + (-0.5));
        float _1085 = exp2((_1045.w + (-0.5)) * 20.0) * 2.0;
        float _1086 = _1085 * (_1045.x + (-0.5));
        float _1087 = _1085 * (_1045.y + (-0.5));
        float _1088 = _1085 * (_1045.z + (-0.5));
        float _1095 = exp2((_1052.w + (-0.5)) * 20.0) * 2.0;
        float _1096 = _1095 * (_1052.x + (-0.5));
        float _1097 = _1095 * (_1052.y + (-0.5));
        float _1098 = _1095 * (_1052.z + (-0.5));
        float _1099 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1100 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1101 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1102 = _1066 * 0.5;
        float _1103 = _1076 * 0.5;
        float _1104 = _1086 * 0.5;
        float _1105 = dot(vec3(_1102, _1103, _1104), vec3(_1102, _1103, _1104));
        float _1110 = (_1105 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1105);
        float _1119 = (dot(vec3(_698, _699, _700), vec3(_1110 * _1102, _1110 * _1103, _1110 * _1104)) + 1.0) * 0.5;
        float _4015 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1129 = sqrt(((_1103 * _1103) + (_1102 * _1102)) + (_1104 * _1104)) / (_1099 + 9.9999997473787516355514526367188e-06);
        float _4026 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1130 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
        float _1131 = _1130 * 2.0;
        float _1135 = (1.0 - _1130) / (_1130 + 1.0);
        float _4037 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1136 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
        float _1145 = ((((1.0 - _1136) * (_1131 + 2.0)) * exp2(log2(isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0))) * (_1131 + 1.0))) + _1136) * _1099;
        float _1146 = _1067 * 0.5;
        float _1147 = _1077 * 0.5;
        float _1148 = _1087 * 0.5;
        float _1149 = dot(vec3(_1146, _1147, _1148), vec3(_1146, _1147, _1148));
        float _1154 = (_1149 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1149);
        float _1162 = (dot(vec3(_698, _699, _700), vec3(_1154 * _1146, _1154 * _1147, _1154 * _1148)) + 1.0) * 0.5;
        float _4048 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1171 = sqrt(((_1147 * _1147) + (_1146 * _1146)) + (_1148 * _1148)) / (_1100 + 9.9999997473787516355514526367188e-06);
        float _4059 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1172 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
        float _1173 = _1172 * 2.0;
        float _1177 = (1.0 - _1172) / (_1172 + 1.0);
        float _4070 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1178 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
        float _1187 = ((((1.0 - _1178) * (_1173 + 2.0)) * exp2(log2(isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0))) * (_1173 + 1.0))) + _1178) * _1100;
        float _1188 = _1068 * 0.5;
        float _1189 = _1078 * 0.5;
        float _1190 = _1088 * 0.5;
        float _1191 = dot(vec3(_1188, _1189, _1190), vec3(_1188, _1189, _1190));
        float _1196 = (_1191 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1191);
        float _1204 = (dot(vec3(_698, _699, _700), vec3(_1196 * _1188, _1196 * _1189, _1196 * _1190)) + 1.0) * 0.5;
        float _4081 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1213 = sqrt(((_1189 * _1189) + (_1188 * _1188)) + (_1190 * _1190)) / (_1101 + 9.9999997473787516355514526367188e-06);
        float _4092 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1214 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
        float _1215 = _1214 * 2.0;
        float _1219 = (1.0 - _1214) / (_1214 + 1.0);
        float _4103 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1220 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
        float _1229 = ((((1.0 - _1220) * (_1215 + 2.0)) * exp2(log2(isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0))) * (_1215 + 1.0))) + _1220) * _1101;
        _1237 = _1068;
        _1239 = _1067;
        _1240 = _1066;
        _1241 = _1078;
        _1242 = _1077;
        _1243 = _1076;
        _1244 = _1088;
        _1245 = _1087;
        _1246 = _1086;
        _1247 = _1101;
        _1248 = _1100;
        _1249 = _1099;
        _1250 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0)));
        _1251 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0)));
        _1252 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0)));
    }
    else
    {
        _1237 = _1238;
        _1239 = _1238;
        _1240 = _1238;
        _1241 = _1238;
        _1242 = _1238;
        _1243 = _1238;
        _1244 = _1238;
        _1245 = _1238;
        _1246 = _1238;
        _1247 = _1238;
        _1248 = _1238;
        _1249 = _1238;
        _1250 = 0.0;
        _1251 = 0.0;
        _1252 = 0.0;
    }
    float _1546;
    float _1547;
    float _1548;
    float _1549;
    float _1550;
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1277 = fma(_936, cbModelParam._m0[30u].z, fma(_932, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _928));
        float _1281 = fma(_936, cbModelParam._m0[31u].z, fma(_932, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _928));
        float _1285 = fma(_936, cbModelParam._m0[32u].z, fma(_932, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _928));
        float _1308 = _928 + _698;
        float _1309 = _932 + _699;
        float _1310 = _936 + _700;
        float _1320 = fma(_1310, cbModelParam._m0[30u].z, fma(_1309, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1308)) - _1277;
        float _1321 = fma(_1310, cbModelParam._m0[31u].z, fma(_1309, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1308)) - _1281;
        float _1322 = fma(_1310, cbModelParam._m0[32u].z, fma(_1309, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1308)) - _1285;
        float _1326 = inversesqrt(dot(vec3(_1320, _1321, _1322), vec3(_1320, _1321, _1322)));
        float _1339 = ((_1326 * _1320) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1277 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1340 = ((_1326 * _1321) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1281 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1341 = ((_1326 * _1322) / cbModelParam._m0[35u].z) + ((((((_1285 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1343 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1339, _1340, _1341), 0.0);
        vec4 _1350 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1339, _1340, _1341), 0.0);
        vec4 _1357 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1339, _1340, _1341), 0.0);
        vec4 _1364 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1339, _1340, _1341), 0.0);
        float _1376 = exp2((_1343.w + (-0.5)) * 20.0) * 2.0;
        float _1377 = _1376 * (_1343.x + (-0.5));
        float _1378 = _1376 * (_1343.y + (-0.5));
        float _1379 = _1376 * (_1343.z + (-0.5));
        float _1386 = exp2((_1350.w + (-0.5)) * 20.0) * 2.0;
        float _1387 = _1386 * (_1350.x + (-0.5));
        float _1388 = _1386 * (_1350.y + (-0.5));
        float _1389 = _1386 * (_1350.z + (-0.5));
        float _1396 = exp2((_1357.w + (-0.5)) * 20.0) * 2.0;
        float _1397 = _1396 * (_1357.x + (-0.5));
        float _1398 = _1396 * (_1357.y + (-0.5));
        float _1399 = _1396 * (_1357.z + (-0.5));
        float _1406 = exp2((_1364.w + (-0.5)) * 20.0) * 2.0;
        float _1407 = _1406 * (_1364.x + (-0.5));
        float _1408 = _1406 * (_1364.y + (-0.5));
        float _1409 = _1406 * (_1364.z + (-0.5));
        float _1410 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1411 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1412 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1413 = _1377 * 0.5;
        float _1414 = _1387 * 0.5;
        float _1415 = _1397 * 0.5;
        float _1416 = dot(vec3(_1413, _1414, _1415), vec3(_1413, _1414, _1415));
        float _1421 = (_1416 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1416);
        float _1429 = (dot(vec3(_698, _699, _700), vec3(_1421 * _1413, _1421 * _1414, _1421 * _1415)) + 1.0) * 0.5;
        float _4144 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1438 = sqrt(((_1414 * _1414) + (_1413 * _1413)) + (_1415 * _1415)) / (_1410 + 9.9999997473787516355514526367188e-06);
        float _4155 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1439 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
        float _1440 = _1439 * 2.0;
        float _1444 = (1.0 - _1439) / (_1439 + 1.0);
        float _4166 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1445 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
        float _1454 = ((((1.0 - _1445) * (_1440 + 2.0)) * exp2(log2(isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0))) * (_1440 + 1.0))) + _1445) * _1410;
        float _1455 = _1378 * 0.5;
        float _1456 = _1388 * 0.5;
        float _1457 = _1398 * 0.5;
        float _1458 = dot(vec3(_1455, _1456, _1457), vec3(_1455, _1456, _1457));
        float _1463 = (_1458 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1458);
        float _1471 = (dot(vec3(_698, _699, _700), vec3(_1463 * _1455, _1463 * _1456, _1463 * _1457)) + 1.0) * 0.5;
        float _4177 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1480 = sqrt(((_1456 * _1456) + (_1455 * _1455)) + (_1457 * _1457)) / (_1411 + 9.9999997473787516355514526367188e-06);
        float _4188 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1481 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _1482 = _1481 * 2.0;
        float _1486 = (1.0 - _1481) / (_1481 + 1.0);
        float _4199 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1487 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _1496 = ((((1.0 - _1487) * (_1482 + 2.0)) * exp2(log2(isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0))) * (_1482 + 1.0))) + _1487) * _1411;
        float _1497 = _1379 * 0.5;
        float _1498 = _1389 * 0.5;
        float _1499 = _1399 * 0.5;
        float _1500 = dot(vec3(_1497, _1498, _1499), vec3(_1497, _1498, _1499));
        float _1505 = (_1500 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1500);
        float _1513 = (dot(vec3(_698, _699, _700), vec3(_1505 * _1497, _1505 * _1498, _1505 * _1499)) + 1.0) * 0.5;
        float _4210 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1522 = sqrt(((_1498 * _1498) + (_1497 * _1497)) + (_1499 * _1499)) / (_1412 + 9.9999997473787516355514526367188e-06);
        float _4221 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1523 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
        float _1524 = _1523 * 2.0;
        float _1528 = (1.0 - _1523) / (_1523 + 1.0);
        float _4232 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1529 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
        float _1538 = ((((1.0 - _1529) * (_1524 + 2.0)) * exp2(log2(isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0))) * (_1524 + 1.0))) + _1529) * _1412;
        _1546 = _1379;
        _1547 = _1378;
        _1548 = _1377;
        _1549 = _1389;
        _1550 = _1388;
        _1551 = _1387;
        _1552 = _1399;
        _1553 = _1398;
        _1554 = _1397;
        _1555 = _1412;
        _1556 = _1411;
        _1557 = _1410;
        _1558 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0)));
        _1559 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0)));
        _1560 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0)));
    }
    else
    {
        _1546 = _1238;
        _1547 = _1238;
        _1548 = _1238;
        _1549 = _1238;
        _1550 = _1238;
        _1551 = _1238;
        _1552 = _1238;
        _1553 = _1238;
        _1554 = _1238;
        _1555 = _1238;
        _1556 = _1238;
        _1557 = _1238;
        _1558 = 0.0;
        _1559 = 0.0;
        _1560 = 0.0;
    }
    float _1570 = (cbModelParam._m0[1u].x * (_1558 - _1250)) + _1250;
    float _1571 = (cbModelParam._m0[1u].x * (_1559 - _1251)) + _1251;
    float _1572 = (cbModelParam._m0[1u].x * (_1560 - _1252)) + _1252;
    float _1593 = fma(_1572, cbSceneParam._m0[89u].z, fma(_1571, cbSceneParam._m0[89u].y, _1570 * cbSceneParam._m0[89u].x));
    float _1596 = fma(_1572, cbSceneParam._m0[90u].z, fma(_1571, cbSceneParam._m0[90u].y, _1570 * cbSceneParam._m0[90u].x));
    float _1599 = fma(_1572, cbSceneParam._m0[91u].z, fma(_1571, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1570));
    float _1614 = _872 * 0.5;
    float _1615 = _873 * 0.5;
    float _1616 = _874 * 0.5;
    float _1617 = dot(vec4(_1614, _1615, _1616, 1.0), vec4(_1548, _1551, _1554, _1557));
    float _1620 = dot(vec4(_1614, _1615, _1616, 1.0), vec4(_1547, _1550, _1553, _1556));
    float _1623 = dot(vec4(_1614, _1615, _1616, 1.0), vec4(_1546, _1549, _1552, _1555));
    float _1657;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1630 = dot(vec4(_1614, _1615, _1616, 1.0), vec4(_1237, _1241, _1244, _1247));
        float _1634 = dot(vec4(_1614, _1615, _1616, 1.0), vec4(_1239, _1242, _1245, _1248));
        float _1638 = dot(vec4(_1614, _1615, _1616, 1.0), vec4(_1240, _1243, _1246, _1249));
        float _1645 = dot(vec4(cbModelParam._m0[39u]), vec4(_1614, _1615, _1616, 1.0));
        _1657 = dot(vec3(isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0)), isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0)), isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1645) ? 0.0 : (isnan(0.0) ? _1645 : max(0.0, _1645))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1657 = 1.0;
    }
    float _1668;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1659 = dot(vec4(cbModelParam._m0[40u]), vec4(_1614, _1615, _1616, 1.0));
        _1668 = dot(vec3(isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0)), isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0)), isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1659) ? 0.0 : (isnan(0.0) ? _1659 : max(0.0, _1659))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1668 = 1.0;
    }
    float _1672 = (_1668 * cbModelParam._m0[1u].x) + (_1657 * (1.0 - cbModelParam._m0[1u].x));
    float _1682 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _701);
    float _1683 = isnan(_1682) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1682 : min(cbModelParam._m0[25u].z, _1682));
    float _1763;
    float _1765;
    float _1767;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1730 = fma(_936, cbModelParam._m0[13u].z, fma(_932, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _928)) + cbModelParam._m0[13u].w;
        float _1734 = fma(_936, cbModelParam._m0[14u].z, fma(_932, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _928)) + cbModelParam._m0[14u].w;
        float _1738 = fma(_936, cbModelParam._m0[15u].z, fma(_932, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _928)) + cbModelParam._m0[15u].w;
        float _1741 = fma(_874, cbModelParam._m0[13u].z, fma(_873, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _872));
        float _1744 = fma(_874, cbModelParam._m0[14u].z, fma(_873, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _872));
        float _1747 = fma(_874, cbModelParam._m0[15u].z, fma(_873, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _872));
        float _1775;
        if (_1741 > 0.0)
        {
            _1775 = abs((1.0 - _1730) / _1741);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1741 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1730 + 1.0) / _1741);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1775 = frontier_phi_14_12_ladder;
        }
        float _1946;
        if (_1744 > 0.0)
        {
            _1946 = abs((1.0 - _1734) / _1744);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1744 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1734 + 1.0) / _1744);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1946 = frontier_phi_23_19_ladder;
        }
        float _2241;
        if (_1747 > 0.0)
        {
            _2241 = abs((1.0 - _1738) / _1747);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1747 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1738 + 1.0) / _1747);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2241 = frontier_phi_35_30_ladder;
        }
        float _2243 = isnan(_1946) ? _1775 : (isnan(_1775) ? _1946 : min(_1775, _1946));
        float _2244 = isnan(_2241) ? _2243 : (isnan(_2243) ? _2241 : min(_2243, _2241));
        float _2248 = (_2244 * _1741) + _1730;
        float _2249 = (_2244 * _1744) + _1734;
        float _2250 = (_2244 * _1747) + _1738;
        float _2251 = _2244 * 9.9999997473787516355514526367188e-05;
        float _2253 = (-1.0) - _2251;
        float _2255 = _2251 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2250 > _2255) || ((_2250 < _2253) || ((_2249 > _2255) || ((_2249 < _2253) || ((_2248 < _2253) || (_2248 > _2255))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2395 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2250, cbModelParam._m0[9u].z, fma(_2249, cbModelParam._m0[9u].y, _2248 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2250, cbModelParam._m0[10u].z, fma(_2249, cbModelParam._m0[10u].y, _2248 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2250, cbModelParam._m0[11u].z, fma(_2249, cbModelParam._m0[11u].y, _2248 * cbModelParam._m0[11u].x))), _1683);
            frontier_phi_13_35_ladder = _2395.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2395.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2395.x * cbModelParam._m0[1u].y;
        }
        _1763 = frontier_phi_13_35_ladder_2;
        _1765 = frontier_phi_13_35_ladder_1;
        _1767 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1751 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_872, _873, _874), _1683);
        _1763 = _1751.x * cbModelParam._m0[1u].y;
        _1765 = _1751.y * cbModelParam._m0[1u].y;
        _1767 = _1751.z * cbModelParam._m0[1u].y;
    }
    float _1771 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _701);
    float _1772 = isnan(_1771) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1771 : min(cbModelParam._m0[25u].w, _1771));
    float _1861;
    float _1863;
    float _1865;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1825 = fma(_936, cbModelParam._m0[21u].z, fma(_932, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _928)) + cbModelParam._m0[21u].w;
        float _1829 = fma(_936, cbModelParam._m0[22u].z, fma(_932, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _928)) + cbModelParam._m0[22u].w;
        float _1833 = fma(_936, cbModelParam._m0[23u].z, fma(_932, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _928)) + cbModelParam._m0[23u].w;
        float _1836 = fma(_874, cbModelParam._m0[21u].z, fma(_873, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _872));
        float _1839 = fma(_874, cbModelParam._m0[22u].z, fma(_873, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _872));
        float _1842 = fma(_874, cbModelParam._m0[23u].z, fma(_873, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _872));
        float _1951;
        if (_1836 > 0.0)
        {
            _1951 = abs((1.0 - _1825) / _1836);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1836 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1825 + 1.0) / _1836);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1951 = frontier_phi_25_21_ladder;
        }
        float _2268;
        if (_1839 > 0.0)
        {
            _2268 = abs((1.0 - _1829) / _1839);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1839 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1829 + 1.0) / _1839);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2268 = frontier_phi_37_32_ladder;
        }
        float _2606;
        if (_1842 > 0.0)
        {
            _2606 = abs((1.0 - _1833) / _1842);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1842 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1833 + 1.0) / _1842);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2606 = frontier_phi_47_44_ladder;
        }
        float _2608 = isnan(_2268) ? _1951 : (isnan(_1951) ? _2268 : min(_1951, _2268));
        float _2609 = isnan(_2606) ? _2608 : (isnan(_2608) ? _2606 : min(_2608, _2606));
        float _2613 = (_2609 * _1836) + _1825;
        float _2614 = (_2609 * _1839) + _1829;
        float _2615 = (_2609 * _1842) + _1833;
        float _2616 = _2609 * 9.9999997473787516355514526367188e-05;
        float _2617 = (-1.0) - _2616;
        float _2619 = _2616 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2615 > _2619) || ((_2615 < _2617) || ((_2614 > _2619) || ((_2614 < _2617) || ((_2613 < _2617) || (_2613 > _2619))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2737 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2615, cbModelParam._m0[17u].z, fma(_2614, cbModelParam._m0[17u].y, _2613 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2615, cbModelParam._m0[18u].z, fma(_2614, cbModelParam._m0[18u].y, _2613 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2615, cbModelParam._m0[19u].z, fma(_2614, cbModelParam._m0[19u].y, _2613 * cbModelParam._m0[19u].x))), _1772);
            frontier_phi_22_47_ladder = _2737.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2737.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2737.x * cbModelParam._m0[1u].z;
        }
        _1861 = frontier_phi_22_47_ladder_2;
        _1863 = frontier_phi_22_47_ladder_1;
        _1865 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1845 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_872, _873, _874), _1772);
        _1861 = _1845.x * cbModelParam._m0[1u].z;
        _1863 = _1845.y * cbModelParam._m0[1u].z;
        _1865 = _1845.z * cbModelParam._m0[1u].z;
    }
    float _1878 = (((_899 * _848) + _900) * _864) * ((cbModelParam._m0[1u].w * (_1861 - _1763)) + _1763);
    float _1880 = (((_899 * _850) + _900) * _864) * ((cbModelParam._m0[1u].w * (_1863 - _1765)) + _1765);
    float _1882 = (((_899 * _851) + _900) * _864) * ((cbModelParam._m0[1u].w * (_1865 - _1767)) + _1767);
    float _1885 = fma(_1882, cbSceneParam._m0[89u].z, fma(_1880, cbSceneParam._m0[89u].y, _1878 * cbSceneParam._m0[89u].x));
    float _1888 = fma(_1882, cbSceneParam._m0[90u].z, fma(_1880, cbSceneParam._m0[90u].y, _1878 * cbSceneParam._m0[90u].x));
    float _1891 = fma(_1882, cbSceneParam._m0[91u].z, fma(_1880, cbSceneParam._m0[91u].y, _1878 * cbSceneParam._m0[91u].x));
    float _1925 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1929 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1933 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1937 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1938 = _1925 / _1937;
    float _1939 = _1929 / _1937;
    float _1940 = _1933 / _1937;
    float _2087;
    float _2088;
    float _2089;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1967 = ((uint(_1940 > cbSceneParam._m0[59u].y) + uint(_1940 > cbSceneParam._m0[59u].x)) + uint(_1940 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1968 = _1967 + 43u;
        uint _1976 = _1967 + 44u;
        uint _1984 = _1967 + 45u;
        uint _1992 = _1967 + 46u;
        float _2003 = fma(_1937, cbSceneParam._m0[_1968].w, fma(_1933, cbSceneParam._m0[_1968].z, fma(_1929, cbSceneParam._m0[_1968].y, _1925 * cbSceneParam._m0[_1968].x)));
        float _2007 = fma(_1937, cbSceneParam._m0[_1976].w, fma(_1933, cbSceneParam._m0[_1976].z, fma(_1929, cbSceneParam._m0[_1976].y, _1925 * cbSceneParam._m0[_1976].x)));
        float _2015 = fma(_1937, cbSceneParam._m0[_1992].w, fma(_1933, cbSceneParam._m0[_1992].z, fma(_1929, cbSceneParam._m0[_1992].y, _1925 * cbSceneParam._m0[_1992].x)));
        float _2020 = cbSceneParam._m0[33u].z * _2015;
        float _2022 = cbSceneParam._m0[33u].w * _2015;
        float _2025 = fma(_1937, cbSceneParam._m0[_1984].w, fma(_1933, cbSceneParam._m0[_1984].z, fma(_1929, cbSceneParam._m0[_1984].y, _1925 * cbSceneParam._m0[_1984].x))) / _2015;
        float _2073 = (cbSceneParam._m0[33u].x - sqrt(((_1939 * _1939) + (_1938 * _1938)) + (_1940 * _1940))) * cbSceneParam._m0[33u].y;
        float _4358 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
        float _2080 = (isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2020 + _2003) / _2015, (_2022 + _2007) / _2015), _2025), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2022 + _2003) / _2015, (_2007 - _2020) / _2015), _2025), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2003 - _2020) / _2015, (_2007 - _2022) / _2015), _2025), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2003 - _2022) / _2015, (_2020 + _2007) / _2015), _2025), 0.0)).x), vec4(0.25)));
        _2087 = 1.0 - (_2080 * cbSceneParam._m0[34u].x);
        _2088 = 1.0 - (_2080 * cbSceneParam._m0[34u].y);
        _2089 = 1.0 - (_2080 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2087 = 1.0;
        _2088 = 1.0;
        _2089 = 1.0;
    }
    float _2153;
    float _2155;
    float _2157;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2141 = fma(_1937, cbSceneParam._m0[63u].w, fma(_1933, cbSceneParam._m0[63u].z, fma(_1929, cbSceneParam._m0[63u].y, _1925 * cbSceneParam._m0[63u].x)));
        float _2142 = fma(_1937, cbSceneParam._m0[60u].w, fma(_1933, cbSceneParam._m0[60u].z, fma(_1929, cbSceneParam._m0[60u].y, _1925 * cbSceneParam._m0[60u].x))) / _2141;
        float _2143 = fma(_1937, cbSceneParam._m0[61u].w, fma(_1933, cbSceneParam._m0[61u].z, fma(_1929, cbSceneParam._m0[61u].y, _1925 * cbSceneParam._m0[61u].x))) / _2141;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2142 >= cbSceneParam._m0[64u].x) && (_2143 >= cbSceneParam._m0[64u].y)) && (_2142 <= cbSceneParam._m0[64u].z)) && (_2143 <= cbSceneParam._m0[64u].w))
        {
            float _2281 = fma(_1937, cbSceneParam._m0[62u].w, fma(_1933, cbSceneParam._m0[62u].z, fma(_1929, cbSceneParam._m0[62u].y, _1925 * cbSceneParam._m0[62u].x))) / _2141;
            float _2285 = isnan(cbSceneParam._m0[41u].w) ? _2281 : (isnan(_2281) ? cbSceneParam._m0[41u].w : max(_2281, cbSceneParam._m0[41u].w));
            float _2328 = (cbSceneParam._m0[33u].x - sqrt(((_1939 * _1939) + (_1938 * _1938)) + (_1940 * _1940))) * cbSceneParam._m0[33u].y;
            float _4374 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
            float _2335 = (isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2142, cbSceneParam._m0[33u].w + _2143), _2285), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2142, _2143 - cbSceneParam._m0[33u].z), _2285), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2142 - cbSceneParam._m0[33u].z, _2143 - cbSceneParam._m0[33u].w), _2285), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2142 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2143), _2285), 0.0)).x), vec4(0.25)));
            float _2339 = 1.0 - (_2335 * cbSceneParam._m0[34u].x);
            float _2340 = 1.0 - (_2335 * cbSceneParam._m0[34u].y);
            float _2341 = 1.0 - (_2335 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2341) ? _2089 : (isnan(_2089) ? _2341 : min(_2089, _2341));
            frontier_phi_34_33_ladder_1 = isnan(_2340) ? _2088 : (isnan(_2088) ? _2340 : min(_2088, _2340));
            frontier_phi_34_33_ladder_2 = isnan(_2339) ? _2087 : (isnan(_2087) ? _2339 : min(_2087, _2339));
        }
        else
        {
            frontier_phi_34_33_ladder = _2089;
            frontier_phi_34_33_ladder_1 = _2088;
            frontier_phi_34_33_ladder_2 = _2087;
        }
        _2153 = frontier_phi_34_33_ladder_2;
        _2155 = frontier_phi_34_33_ladder_1;
        _2157 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2153 = _2087;
        _2155 = _2088;
        _2157 = _2089;
    }
    uvec4 _2162 = floatBitsToUint(cbInstanceData._m0[_246 + 5u]);
    uint _2164 = _2162.x * 14u;
    uint _2165 = _2164 + 13u;
    float _2172 = _864 + (-1.0);
    float _2177 = (cbLight._m0[_2165].x * _2172) + 1.0;
    float _2178 = (cbLight._m0[_2165].y * _2172) + 1.0;
    float _2179 = (cbLight._m0[_2165].z * _2172) + 1.0;
    float _2180 = (cbLight._m0[_2165].w * _2172) + 1.0;
    uint _2181 = _2164 + 5u;
    float _2187 = isnan(1.0) ? _2178 : (isnan(_2178) ? 1.0 : min(_2178, 1.0));
    uint _2191 = _2164 + 4u;
    float _2200 = isnan(1.0) ? _2177 : (isnan(_2177) ? 1.0 : min(_2177, 1.0));
    uint _2204 = _2164 | 1u;
    float _2215 = dot(vec3(cbLight._m0[_2164].xyz), vec3(_698, _699, _700));
    float _2218 = dot(vec3(cbLight._m0[_2204].xyz), vec3(_698, _699, _700));
    float _4410 = isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0));
    float _4421 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
    float _2223 = (isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0))) * 0.3183098733425140380859375;
    float _2225 = (isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0))) * 0.3183098733425140380859375;
    float _2232 = ((cbLight._m0[_2181].x * _2187) * _2225) + (((cbLight._m0[_2191].x * _2153) * _2200) * _2223);
    float _2233 = ((_2187 * cbLight._m0[_2181].y) * _2225) + (((cbLight._m0[_2191].y * _2155) * _2200) * _2223);
    float _2234 = ((_2187 * cbLight._m0[_2181].z) * _2225) + (((cbLight._m0[_2191].z * _2157) * _2200) * _2223);
    uvec4 _2238 = floatBitsToUint(cbLight._m0[_2164 + 12u]);
    bool _2240 = _2238.x == 0u;
    float _2342;
    float _2344;
    float _2346;
    if (_2240)
    {
        _2342 = _2232;
        _2344 = _2233;
        _2346 = _2234;
    }
    else
    {
        uint _2350 = _2164 + 6u;
        float _2366 = (dot(vec3(cbLight._m0[_2164 + 2u].xyz), vec3(_698, _699, _700)) * 0.5) + 0.5;
        float _2367 = _2366 * _2366;
        float _4432 = isnan(0.0) ? _2367 : (isnan(_2367) ? 0.0 : max(_2367, 0.0));
        float _2368 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
        float _2369 = isnan(1.0) ? _2179 : (isnan(_2179) ? 1.0 : min(_2179, 1.0));
        _2342 = (((cbLight._m0[_2350].x * 0.3183098733425140380859375) * _2368) * _2369) + _2232;
        _2344 = (((cbLight._m0[_2350].y * 0.3183098733425140380859375) * _2368) * _2369) + _2233;
        _2346 = (((cbLight._m0[_2350].z * 0.3183098733425140380859375) * _2368) * _2369) + _2234;
    }
    bool _2349 = _2238.y == 0u;
    float _2404;
    float _2406;
    float _2408;
    if (_2349)
    {
        _2404 = _2342;
        _2406 = _2344;
        _2408 = _2346;
    }
    else
    {
        uint _2577 = _2164 + 7u;
        float _2593 = (dot(vec3(cbLight._m0[_2164 + 3u].xyz), vec3(_698, _699, _700)) * 0.5) + 0.5;
        float _2594 = _2593 * _2593;
        float _4448 = isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0));
        float _2595 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
        float _2596 = isnan(1.0) ? _2180 : (isnan(_2180) ? 1.0 : min(_2180, 1.0));
        _2404 = (((cbLight._m0[_2577].x * 0.3183098733425140380859375) * _2595) * _2596) + _2342;
        _2406 = (((cbLight._m0[_2577].y * 0.3183098733425140380859375) * _2595) * _2596) + _2344;
        _2408 = (((cbLight._m0[_2577].z * 0.3183098733425140380859375) * _2595) * _2596) + _2346;
    }
    uint _2411 = _2164 + 8u;
    float _2424 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2164].w)) * _701) * 0.949999988079071044921875);
    float _2425 = _2424 * _2424;
    float _2426 = cbLight._m0[_2164].x + _778;
    float _2427 = cbLight._m0[_2164].y + _779;
    float _2428 = cbLight._m0[_2164].z + _780;
    float _2432 = inversesqrt(dot(vec3(_2426, _2427, _2428), vec3(_2426, _2427, _2428)));
    float _2433 = _2432 * _2426;
    float _2434 = _2432 * _2427;
    float _2435 = _2432 * _2428;
    float _2436 = dot(vec3(_698, _699, _700), vec3(cbLight._m0[_2164].xyz));
    float _4464 = isnan(0.0) ? _2436 : (isnan(_2436) ? 0.0 : max(_2436, 0.0));
    float _2439 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
    float _4475 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
    float _2440 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
    float _2441 = dot(vec3(_698, _699, _700), vec3(_2433, _2434, _2435));
    float _4486 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
    float _2444 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
    float _2445 = dot(vec3(cbLight._m0[_2164].xyz), vec3(_2433, _2434, _2435));
    float _4497 = isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0));
    float _2449 = _2425 * _2425;
    float _2453 = ((_2444 * _2444) * (_2449 + (-1.0))) + 1.0;
    float _2461 = exp2(log2(1.0 - (isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0)))) * 5.0);
    float _2462 = 0.959999978542327880859375 - _845;
    float _2464 = 0.959999978542327880859375 - _846;
    float _2465 = 0.959999978542327880859375 - _847;
    float _2472 = 1.0 - _2425;
    float _2483 = (0.5 / (((_2440 * ((_2439 * _2472) + _2425)) + 9.9999999392252902907785028219223e-09) + (((_2440 * _2472) + _2425) * _2439))) * _2439;
    float _4508 = isnan(0.0) ? _2483 : (isnan(_2483) ? 0.0 : max(_2483, 0.0));
    float _2485 = (isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0))) * (_2449 / ((_2453 * _2453) * 3.141590118408203125));
    uint _2499 = _2164 + 9u;
    float _2510 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2204].w)) * _701) * 0.949999988079071044921875);
    float _2511 = _2510 * _2510;
    float _2512 = cbLight._m0[_2204].x + _778;
    float _2513 = cbLight._m0[_2204].y + _779;
    float _2514 = cbLight._m0[_2204].z + _780;
    float _2518 = inversesqrt(dot(vec3(_2512, _2513, _2514), vec3(_2512, _2513, _2514)));
    float _2519 = _2518 * _2512;
    float _2520 = _2518 * _2513;
    float _2521 = _2518 * _2514;
    float _2522 = dot(vec3(_698, _699, _700), vec3(cbLight._m0[_2204].xyz));
    float _4519 = isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : max(_2522, 0.0));
    float _2525 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
    float _2526 = dot(vec3(_698, _699, _700), vec3(_2519, _2520, _2521));
    float _4530 = isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0));
    float _2529 = isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0));
    float _2530 = dot(vec3(cbLight._m0[_2204].xyz), vec3(_2519, _2520, _2521));
    float _4541 = isnan(0.0) ? _2530 : (isnan(_2530) ? 0.0 : max(_2530, 0.0));
    float _2534 = _2511 * _2511;
    float _2538 = ((_2529 * _2529) * (_2534 + (-1.0))) + 1.0;
    float _2545 = exp2(log2(1.0 - (isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0)))) * 5.0);
    float _2552 = 1.0 - _2511;
    float _2562 = (0.5 / (((_2440 * ((_2525 * _2552) + _2511)) + 9.9999999392252902907785028219223e-09) + (((_2440 * _2552) + _2511) * _2525))) * _2525;
    float _4552 = isnan(0.0) ? _2562 : (isnan(_2562) ? 0.0 : max(_2562, 0.0));
    float _2564 = (isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0))) * (_2534 / ((_2538 * _2538) * 3.141590118408203125));
    float _2574 = (((((_2545 * _2462) + _848) * cbLight._m0[_2499].x) * _2564) * _2187) + ((((cbLight._m0[_2411].x * _2153) * ((_2461 * _2462) + _848)) * _2485) * _2200);
    float _2575 = (((((_2545 * _2464) + _850) * cbLight._m0[_2499].y) * _2564) * _2187) + ((((cbLight._m0[_2411].y * _2155) * ((_2461 * _2464) + _850)) * _2485) * _2200);
    float _2576 = (((((_2545 * _2465) + _851) * cbLight._m0[_2499].z) * _2564) * _2187) + ((((cbLight._m0[_2411].z * _2157) * ((_2461 * _2465) + _851)) * _2485) * _2200);
    float _2632;
    float _2634;
    float _2636;
    if (_2240)
    {
        _2632 = _2574;
        _2634 = _2575;
        _2636 = _2576;
    }
    else
    {
        uint _2638 = _2164 + 2u;
        uint _2642 = _2164 + 10u;
        float _2656 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2638].w)) * _701) * 0.949999988079071044921875);
        float _2657 = _2656 * _2656;
        float _2658 = cbLight._m0[_2638].x + _778;
        float _2659 = cbLight._m0[_2638].y + _779;
        float _2660 = cbLight._m0[_2638].z + _780;
        float _2664 = inversesqrt(dot(vec3(_2658, _2659, _2660), vec3(_2658, _2659, _2660)));
        float _2665 = _2664 * _2658;
        float _2666 = _2664 * _2659;
        float _2667 = _2664 * _2660;
        float _2668 = dot(vec3(_698, _699, _700), vec3(cbLight._m0[_2638].xyz));
        float _4563 = isnan(0.0) ? _2668 : (isnan(_2668) ? 0.0 : max(_2668, 0.0));
        float _2671 = isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0));
        float _2672 = dot(vec3(_698, _699, _700), vec3(_2665, _2666, _2667));
        float _4574 = isnan(0.0) ? _2672 : (isnan(_2672) ? 0.0 : max(_2672, 0.0));
        float _2675 = isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0));
        float _2676 = dot(vec3(cbLight._m0[_2638].xyz), vec3(_2665, _2666, _2667));
        float _4585 = isnan(0.0) ? _2676 : (isnan(_2676) ? 0.0 : max(_2676, 0.0));
        float _2680 = _2657 * _2657;
        float _2684 = ((_2675 * _2675) * (_2680 + (-1.0))) + 1.0;
        float _2691 = exp2(log2(1.0 - (isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0)))) * 5.0);
        float _2698 = 1.0 - _2657;
        float _2708 = (0.5 / (((_2440 * ((_2671 * _2698) + _2657)) + 9.9999999392252902907785028219223e-09) + (((_2440 * _2698) + _2657) * _2671))) * _2671;
        float _4596 = isnan(0.0) ? _2708 : (isnan(_2708) ? 0.0 : max(_2708, 0.0));
        float _2710 = (isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0))) * (_2680 / ((_2684 * _2684) * 3.141590118408203125));
        float _2711 = isnan(1.0) ? _2179 : (isnan(_2179) ? 1.0 : min(_2179, 1.0));
        _2632 = (((((_2691 * _2462) + _848) * cbLight._m0[_2642].x) * _2710) * _2711) + _2574;
        _2634 = (((((_2691 * _2464) + _850) * cbLight._m0[_2642].y) * _2710) * _2711) + _2575;
        _2636 = (((((_2691 * _2465) + _851) * cbLight._m0[_2642].z) * _2710) * _2711) + _2576;
    }
    float _2742;
    float _2744;
    float _2746;
    if (_2349)
    {
        _2742 = _2632;
        _2744 = _2634;
        _2746 = _2636;
    }
    else
    {
        uint _2753 = _2164 + 3u;
        uint _2757 = _2164 + 11u;
        float _2771 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2753].w)) * _701) * 0.949999988079071044921875);
        float _2772 = _2771 * _2771;
        float _2773 = cbLight._m0[_2753].x + _778;
        float _2774 = cbLight._m0[_2753].y + _779;
        float _2775 = cbLight._m0[_2753].z + _780;
        float _2779 = inversesqrt(dot(vec3(_2773, _2774, _2775), vec3(_2773, _2774, _2775)));
        float _2780 = _2779 * _2773;
        float _2781 = _2779 * _2774;
        float _2782 = _2779 * _2775;
        float _2783 = dot(vec3(_698, _699, _700), vec3(cbLight._m0[_2753].xyz));
        float _4612 = isnan(0.0) ? _2783 : (isnan(_2783) ? 0.0 : max(_2783, 0.0));
        float _2786 = isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0));
        float _2787 = dot(vec3(_698, _699, _700), vec3(_2780, _2781, _2782));
        float _4623 = isnan(0.0) ? _2787 : (isnan(_2787) ? 0.0 : max(_2787, 0.0));
        float _2790 = isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0));
        float _2791 = dot(vec3(cbLight._m0[_2753].xyz), vec3(_2780, _2781, _2782));
        float _4634 = isnan(0.0) ? _2791 : (isnan(_2791) ? 0.0 : max(_2791, 0.0));
        float _2795 = _2772 * _2772;
        float _2799 = ((_2790 * _2790) * (_2795 + (-1.0))) + 1.0;
        float _2806 = exp2(log2(1.0 - (isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0)))) * 5.0);
        float _2813 = 1.0 - _2772;
        float _2823 = (0.5 / (((_2440 * ((_2786 * _2813) + _2772)) + 9.9999999392252902907785028219223e-09) + (((_2440 * _2813) + _2772) * _2786))) * _2786;
        float _4645 = isnan(0.0) ? _2823 : (isnan(_2823) ? 0.0 : max(_2823, 0.0));
        float _2825 = (isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0))) * (_2795 / ((_2799 * _2799) * 3.141590118408203125));
        float _2826 = isnan(1.0) ? _2180 : (isnan(_2180) ? 1.0 : min(_2180, 1.0));
        _2742 = (((((_2806 * _2462) + _848) * cbLight._m0[_2757].x) * _2825) * _2826) + _2632;
        _2744 = (((((_2806 * _2464) + _850) * cbLight._m0[_2757].y) * _2825) * _2826) + _2634;
        _2746 = (((((_2806 * _2465) + _851) * cbLight._m0[_2757].z) * _2825) * _2826) + _2636;
    }
    float _2892;
    float _2894;
    float _2896;
    float _2898;
    float _2900;
    float _2902;
    if (_2162.y == 0u)
    {
        uvec4 _2847 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2848 = _2847.x;
        uint _2859 = uint((float(_2847.y) * floor(float(uint(cbSceneParam._m0[85u].y * _787) / _2848))) + floor(float(uint(cbSceneParam._m0[85u].x * _786) / _2848)));
        float _2869 = (log2(_1940 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2870 = isnan(0.0) ? _2869 : (isnan(_2869) ? 0.0 : max(_2869, 0.0));
        uint _2873 = uint(isnan(14.0) ? _2870 : (isnan(_2870) ? 14.0 : min(_2870, 14.0)));
        uvec4 _2878 = texelFetch(g_lightClusterGridBuffer, int(((_2873 << 2u) + (_2859 << 6u)) >> 2u));
        uint _2879 = _2878.x;
        uint _2880 = _2847.z;
        float _2959;
        float _2961;
        float _2963;
        float _2965;
        float _2967;
        float _2969;
        if (((((1u << ((_2880 >> 4u) & 15u)) + 4294967295u) & _2879) == 0u) || ((_2880 & 240u) == 0u))
        {
            _2959 = 0.0;
            _2961 = 0.0;
            _2963 = 0.0;
            _2965 = 0.0;
            _2967 = 0.0;
            _2969 = 0.0;
        }
        else
        {
            float _2960;
            float _2962;
            float _2964;
            float _2966;
            float _2968;
            float _2970;
            float _3104 = 0.0;
            float _3105 = 0.0;
            float _3106 = 0.0;
            float _3107 = 0.0;
            float _3108 = 0.0;
            float _3109 = 0.0;
            uint _3110 = 0u;
            uint _3119;
            bool _3120;
            for (;;)
            {
                _3119 = texelFetch(g_lightClassification, int((((_2873 << 5u) + (_2859 << 9u)) + (_3110 << 2u)) >> 2u)).x;
                _3120 = _3119 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3120)
                {
                    frontier_phi_66_pred = _3109;
                    frontier_phi_66_pred_1 = _3108;
                    frontier_phi_66_pred_2 = _3107;
                    frontier_phi_66_pred_3 = _3106;
                    frontier_phi_66_pred_4 = _3105;
                    frontier_phi_66_pred_5 = _3104;
                }
                else
                {
                    float _3228;
                    float _3229;
                    float _3230;
                    float _3231;
                    float _3232;
                    float _3233;
                    uint _3234;
                    _3228 = _3104;
                    _3229 = _3105;
                    _3230 = _3106;
                    _3231 = _3107;
                    _3232 = _3108;
                    _3233 = _3109;
                    _3234 = _3119;
                    float _3160;
                    float _3161;
                    float _3162;
                    float _3163;
                    float _3164;
                    float _3165;
                    for (;;)
                    {
                        uint _3238 = uint(findLSB(_3234)) + (_3110 << 5u);
                        uint _3235 = (_3234 + 4294967295u) & _3234;
                        uint _3240 = _3238 * 48u;
                        vec4 _3254 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3240)).x, texelFetch(g_PointLightRenderingBuffer, int(_3240 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3240 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3240 + 3u)).x));
                        uint _3260 = (_3238 * 48u) + 4u;
                        vec4 _3273 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3260)).x, texelFetch(g_PointLightRenderingBuffer, int(_3260 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3260 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3260 + 3u)).x));
                        uint _3279 = (_3238 * 48u) + 8u;
                        vec3 _3290 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3279)).x, texelFetch(g_PointLightRenderingBuffer, int(_3279 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3279 + 2u)).x));
                        float _3294 = _3254.x - _1938;
                        float _3295 = _3254.y - _1939;
                        float _3296 = _3254.z - _1940;
                        float _3297 = dot(vec3(_3294, _3295, _3296), vec3(_3294, _3295, _3296));
                        float _3300 = inversesqrt(_3297);
                        float _3301 = _3300 * _3294;
                        float _3302 = _3300 * _3295;
                        float _3303 = _3300 * _3296;
                        float _3304 = dot(vec3(_805, _808, _811), vec3(_3301, _3302, _3303));
                        float _3309 = 1.0 - (_3297 * _3254.w);
                        float _4671 = isnan(0.0) ? _3309 : (isnan(_3309) ? 0.0 : max(_3309, 0.0));
                        float _3310 = isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0));
                        float _3311 = sqrt(_3297) * _3273.w;
                        float _3314 = 1.39999997615814208984375 / (_3311 + 1.39999997615814208984375);
                        float _3315 = _3314 * _3314;
                        float _3318 = ((1.0 - _3315) * _3304) + _3315;
                        float _3321 = _3311 * _3311;
                        float _3325 = ((isnan(0.0) ? _3318 : (isnan(_3318) ? 0.0 : max(_3318, 0.0))) * _3310) / ((_3321 * 0.699999988079071044921875) + 1.0);
                        float _3329 = (-0.0) - _1938;
                        float _3330 = (-0.0) - _1939;
                        float _3331 = (-0.0) - _1940;
                        float _3335 = inversesqrt(dot(vec3(_3329, _3330, _3331), vec3(_3329, _3330, _3331)));
                        float _3336 = _3335 * _3329;
                        float _3337 = _3335 * _3330;
                        float _3338 = _3335 * _3331;
                        float _3345 = exp2(log2(1.0 / ((_3321 * 3.5) + 5.0)) * 0.25);
                        float _3346 = 1.0 - _880;
                        float _3353 = sqrt(1.0 - ((1.0 - (_3346 * _3346)) * (1.0 - (_3345 * _3345))));
                        float _3354 = _3353 * _3353;
                        float _3355 = _3354 * _3354;
                        float _3356 = _3336 + _3301;
                        float _3357 = _3337 + _3302;
                        float _3358 = _3338 + _3303;
                        float _3362 = inversesqrt(dot(vec3(_3356, _3357, _3358), vec3(_3356, _3357, _3358)));
                        float _3366 = dot(vec3(_805, _808, _811), vec3(_3336, _3337, _3338));
                        float _4687 = isnan(0.0) ? _3366 : (isnan(_3366) ? 0.0 : max(_3366, 0.0));
                        float _3369 = isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0));
                        float _3370 = dot(vec3(_805, _808, _811), vec3(_3362 * _3356, _3362 * _3357, _3362 * _3358));
                        float _4698 = isnan(0.0) ? _3370 : (isnan(_3370) ? 0.0 : max(_3370, 0.0));
                        float _3373 = isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0));
                        float _3377 = ((_3373 * _3373) * (_3355 + (-1.0))) + 1.0;
                        float _3378 = _3314 * _3354;
                        float _3379 = _3378 * _3378;
                        float _3382 = ((1.0 - _3379) * _3304) + _3379;
                        float _4709 = isnan(0.0) ? _3382 : (isnan(_3382) ? 0.0 : max(_3382, 0.0));
                        float _3383 = isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0));
                        float _3384 = 1.0 - _3354;
                        float _3394 = (0.5 / (((_3383 * ((_3369 * _3384) + _3354)) + 9.9999999392252902907785028219223e-09) + (((_3383 * _3384) + _3354) * _3369))) * _3383;
                        float _4720 = isnan(0.0) ? _3394 : (isnan(_3394) ? 0.0 : max(_3394, 0.0));
                        float _3405 = (((_3355 * 3.1415927410125732421875) * (isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0)))) / ((_3377 * _3377) * ((_3321 * 2.1991131305694580078125) + 3.141590118408203125))) * _3310;
                        _3163 = (_3325 * _3273.x) + _3231;
                        _3164 = (_3325 * _3273.y) + _3232;
                        _3165 = (_3325 * _3273.z) + _3233;
                        _3160 = (_3405 * _3290.x) + _3228;
                        _3161 = (_3405 * _3290.y) + _3229;
                        _3162 = (_3405 * _3290.z) + _3230;
                        if (_3235 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3228 = _3160;
                            _3229 = _3161;
                            _3230 = _3162;
                            _3231 = _3163;
                            _3232 = _3164;
                            _3233 = _3165;
                            _3234 = _3235;
                        }
                    }
                    frontier_phi_66_pred = _3165;
                    frontier_phi_66_pred_1 = _3164;
                    frontier_phi_66_pred_2 = _3163;
                    frontier_phi_66_pred_3 = _3162;
                    frontier_phi_66_pred_4 = _3161;
                    frontier_phi_66_pred_5 = _3160;
                }
                _2970 = frontier_phi_66_pred;
                _2968 = frontier_phi_66_pred_1;
                _2966 = frontier_phi_66_pred_2;
                _2964 = frontier_phi_66_pred_3;
                _2962 = frontier_phi_66_pred_4;
                _2960 = frontier_phi_66_pred_5;
                uint _3111 = _3110 + 1u;
                if (_3111 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3104 = _2960;
                    _3105 = _2962;
                    _3106 = _2964;
                    _3107 = _2966;
                    _3108 = _2968;
                    _3109 = _2970;
                    _3110 = _3111;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2959 = _2960;
            _2961 = _2962;
            _2963 = _2964;
            _2965 = _2966;
            _2967 = _2968;
            _2969 = _2970;
        }
        uvec4 _2973 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2974 = _2973.z;
        uint _2976 = (_2974 >> 8u) & 15u;
        float _3072;
        float _3074;
        float _3076;
        float _3078;
        float _3080;
        float _3082;
        if (((4294967295u << _2976) & _2879) == 0u)
        {
            _3072 = _2959;
            _3074 = _2961;
            _3076 = _2963;
            _3078 = _2965;
            _3080 = _2967;
            _3082 = _2969;
        }
        else
        {
            float _3097 = inversesqrt(dot(vec3(_1938, _1939, _1940), vec3(_1938, _1939, _1940)));
            float _3098 = _3097 * _1938;
            float _3099 = _3097 * _1939;
            float _3100 = _3097 * _1940;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2976 < ((_2974 >> 12u) & 15u))
            {
                float _3073;
                float _3075;
                float _3077;
                float _3079;
                float _3081;
                float _3083;
                float _3211 = _2959;
                float _3212 = _2961;
                float _3213 = _2963;
                float _3214 = _2965;
                float _3215 = _2967;
                float _3216 = _2969;
                uint _3217 = _2976;
                uint _3226;
                bool _3227;
                for (;;)
                {
                    _3226 = texelFetch(g_lightClassification, int((((_2873 << 5u) + (_2859 << 9u)) + (_3217 << 2u)) >> 2u)).x;
                    _3227 = _3226 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3227)
                    {
                        frontier_phi_72_pred = _3216;
                        frontier_phi_72_pred_1 = _3215;
                        frontier_phi_72_pred_2 = _3214;
                        frontier_phi_72_pred_3 = _3213;
                        frontier_phi_72_pred_4 = _3212;
                        frontier_phi_72_pred_5 = _3211;
                    }
                    else
                    {
                        float _3410;
                        float _3411;
                        float _3412;
                        float _3413;
                        float _3414;
                        float _3415;
                        float _3703;
                        float _3704;
                        float _3705;
                        float _3706;
                        float _3707;
                        float _3708;
                        float _3423 = _3211;
                        float _3424 = _3212;
                        float _3425 = _3213;
                        float _3426 = _3214;
                        float _3427 = _3215;
                        float _3428 = _3216;
                        uint _3429 = _3226;
                        uint _3430;
                        vec4 _3455;
                        float _3456;
                        vec4 _3471;
                        vec3 _3483;
                        vec4 _3498;
                        vec4 _3513;
                        float _3559;
                        bool _3560;
                        for (;;)
                        {
                            uint _3440 = ((_3217 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3429));
                            _3430 = (_3429 + 4294967295u) & _3429;
                            uint _3442 = _3440 * 40u;
                            _3455 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3442)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 3u)).x));
                            _3456 = _3455.w;
                            uint _3458 = (_3440 * 40u) + 4u;
                            _3471 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3458)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 3u)).x));
                            uint _3473 = (_3440 * 40u) + 8u;
                            _3483 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3473)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 2u)).x));
                            uint _3485 = (_3440 * 40u) + 16u;
                            _3498 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3485)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3485 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3485 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3485 + 3u)).x));
                            uint _3500 = (_3440 * 40u) + 20u;
                            _3513 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3500)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3500 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3500 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3500 + 3u)).x));
                            uint _3515 = (_3440 * 40u) + 24u;
                            vec4 _3528 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3515)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 3u)).x));
                            uint _3534 = (_3440 * 40u) + 28u;
                            vec4 _3547 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3534)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3534 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3534 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3534 + 3u)).x));
                            _3559 = fma(_1940, _3547.z, fma(_1939, _3547.y, _3547.x * _1938)) + _3547.w;
                            _3560 = !((fma(_1940, _3528.z, fma(_1939, _3528.y, _3528.x * _1938)) + _3528.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3560)
                            {
                                float _3587 = _3455.x - _1938;
                                float _3588 = _3455.y - _1939;
                                float _3589 = _3455.z - _1940;
                                float _3590 = dot(vec3(_3587, _3588, _3589), vec3(_3587, _3588, _3589));
                                float _3593 = inversesqrt(_3590);
                                float _3594 = _3593 * _3587;
                                float _3595 = _3593 * _3588;
                                float _3596 = _3593 * _3589;
                                float _3600 = 1.0 - (_3590 / (_3456 * _3456));
                                float _4731 = isnan(0.0) ? _3600 : (isnan(_3600) ? 0.0 : max(_3600, 0.0));
                                float _3601 = isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0));
                                float _3605 = sqrt(_3590) * _3471.w;
                                float _3607 = 1.39999997615814208984375 / (_3605 + 1.39999997615814208984375);
                                float _3608 = _3607 * _3607;
                                float _3611 = ((1.0 - _3608) * dot(vec3(_3594, _3595, _3596), vec3(_805, _808, _811))) + _3608;
                                float _3614 = _3605 * _3605;
                                float _3618 = (fma(_1940, _3498.z, fma(_1939, _3498.y, _3498.x * _1938)) + _3498.w) / _3559;
                                float _3619 = (fma(_1940, _3513.z, fma(_1939, _3513.y, _3513.x * _1938)) + _3513.w) / _3559;
                                float _3623 = 1.0 - dot(vec2(_3618, _3619), vec2(_3618, _3619));
                                float _4747 = isnan(0.0) ? _3623 : (isnan(_3623) ? 0.0 : max(_3623, 0.0));
                                float _3624 = isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0));
                                float _3625 = _3624 * (((isnan(0.0) ? _3611 : (isnan(_3611) ? 0.0 : max(_3611, 0.0))) * _3601) / ((_3614 * 0.699999988079071044921875) + 1.0));
                                float _3637 = exp2(log2(1.0 / ((_3614 * 3.5) + 5.0)) * 0.25);
                                float _3638 = 1.0 - _880;
                                float _3645 = sqrt(1.0 - ((1.0 - (_3638 * _3638)) * (1.0 - (_3637 * _3637))));
                                float _3646 = _3645 * _3645;
                                float _3647 = _3646 * _3646;
                                float _3648 = _3594 - _3098;
                                float _3649 = _3595 - _3099;
                                float _3650 = _3596 - _3100;
                                float _3654 = inversesqrt(dot(vec3(_3648, _3649, _3650), vec3(_3648, _3649, _3650)));
                                float _3658 = dot(vec3(_805, _808, _811), vec3((-0.0) - _3098, (-0.0) - _3099, (-0.0) - _3100));
                                float _4758 = isnan(0.0) ? _3658 : (isnan(_3658) ? 0.0 : max(_3658, 0.0));
                                float _3661 = isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0));
                                float _3662 = dot(vec3(_805, _808, _811), vec3(_3654 * _3648, _3654 * _3649, _3654 * _3650));
                                float _4769 = isnan(0.0) ? _3662 : (isnan(_3662) ? 0.0 : max(_3662, 0.0));
                                float _3665 = isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0));
                                float _3669 = ((_3665 * _3665) * (_3647 + (-1.0))) + 1.0;
                                float _3670 = _3607 * _3646;
                                float _3671 = _3670 * _3670;
                                float _3677 = ((1.0 - _3671) * dot(vec3(_805, _808, _811), vec3(_3594, _3595, _3596))) + _3671;
                                float _4780 = isnan(0.0) ? _3677 : (isnan(_3677) ? 0.0 : max(_3677, 0.0));
                                float _3678 = isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0));
                                float _3679 = 1.0 - _3646;
                                float _3689 = (0.5 / (((_3678 * ((_3661 * _3679) + _3646)) + 9.9999999392252902907785028219223e-09) + (((_3678 * _3679) + _3646) * _3661))) * _3678;
                                float _4791 = isnan(0.0) ? _3689 : (isnan(_3689) ? 0.0 : max(_3689, 0.0));
                                float _3699 = (_3624 * _3601) * (((_3647 * 3.1415927410125732421875) * (isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0)))) / ((_3669 * _3669) * ((_3614 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3625 * _3471.y;
                                frontier_phi_78_pred_1 = _3625 * _3471.x;
                                frontier_phi_78_pred_2 = _3699 * _3483.z;
                                frontier_phi_78_pred_3 = _3699 * _3483.y;
                                frontier_phi_78_pred_4 = _3699 * _3483.x;
                                frontier_phi_78_pred_5 = _3625 * _3471.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3707 = frontier_phi_78_pred;
                            _3706 = frontier_phi_78_pred_1;
                            _3705 = frontier_phi_78_pred_2;
                            _3704 = frontier_phi_78_pred_3;
                            _3703 = frontier_phi_78_pred_4;
                            _3708 = frontier_phi_78_pred_5;
                            _3413 = _3706 + _3426;
                            _3414 = _3707 + _3427;
                            _3415 = _3708 + _3428;
                            _3410 = _3703 + _3423;
                            _3411 = _3704 + _3424;
                            _3412 = _3705 + _3425;
                            if (_3430 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3423 = _3410;
                                _3424 = _3411;
                                _3425 = _3412;
                                _3426 = _3413;
                                _3427 = _3414;
                                _3428 = _3415;
                                _3429 = _3430;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3415;
                        frontier_phi_72_pred_1 = _3414;
                        frontier_phi_72_pred_2 = _3413;
                        frontier_phi_72_pred_3 = _3412;
                        frontier_phi_72_pred_4 = _3411;
                        frontier_phi_72_pred_5 = _3410;
                    }
                    _3083 = frontier_phi_72_pred;
                    _3081 = frontier_phi_72_pred_1;
                    _3079 = frontier_phi_72_pred_2;
                    _3077 = frontier_phi_72_pred_3;
                    _3075 = frontier_phi_72_pred_4;
                    _3073 = frontier_phi_72_pred_5;
                    uint _3218 = _3217 + 1u;
                    if (_3218 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3211 = _3073;
                        _3212 = _3075;
                        _3213 = _3077;
                        _3214 = _3079;
                        _3215 = _3081;
                        _3216 = _3083;
                        _3217 = _3218;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3083;
                frontier_phi_60_61_ladder_1 = _3081;
                frontier_phi_60_61_ladder_2 = _3077;
                frontier_phi_60_61_ladder_3 = _3075;
                frontier_phi_60_61_ladder_4 = _3073;
                frontier_phi_60_61_ladder_5 = _3079;
            }
            else
            {
                frontier_phi_60_61_ladder = _2969;
                frontier_phi_60_61_ladder_1 = _2967;
                frontier_phi_60_61_ladder_2 = _2963;
                frontier_phi_60_61_ladder_3 = _2961;
                frontier_phi_60_61_ladder_4 = _2959;
                frontier_phi_60_61_ladder_5 = _2965;
            }
            _3072 = frontier_phi_60_61_ladder_4;
            _3074 = frontier_phi_60_61_ladder_3;
            _3076 = frontier_phi_60_61_ladder_2;
            _3078 = frontier_phi_60_61_ladder_5;
            _3080 = frontier_phi_60_61_ladder_1;
            _3082 = frontier_phi_60_61_ladder;
        }
        float _3087 = isnan(1.0) ? _864 : (isnan(_864) ? 1.0 : min(_864, 1.0));
        _2892 = (_3087 * _3078) + _2404;
        _2894 = (_3087 * _3080) + _2406;
        _2896 = (_3087 * _3082) + _2408;
        _2898 = ((_3072 * _848) * _3087) + _2742;
        _2900 = ((_3074 * _850) * _3087) + _2744;
        _2902 = ((_3076 * _851) * _3087) + _2746;
    }
    else
    {
        _2892 = _2404;
        _2894 = _2406;
        _2896 = _2408;
        _2898 = _2742;
        _2900 = _2744;
        _2902 = _2746;
    }
    float _4807 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
    float _4818 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
    float _4829 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
    uint _2922 = _246 + 6u;
    float _2930 = _786 / cbSceneParam._m0[86u].x;
    float _2931 = _787 / cbSceneParam._m0[86u].y;
    vec4 _2945 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2930, _2931, (log2((isnan(cbSceneParam._m0[77u].w) ? _720 : (isnan(_720) ? cbSceneParam._m0[77u].w : min(_720, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2947 = _2945.x;
    float _2948 = _2945.y;
    float _2949 = _2945.z;
    float _2950 = _2945.w;
    float _3022;
    float _3024;
    float _3026;
    float _3028;
    if (_720 > cbSceneParam._m0[78u].w)
    {
        float _2984 = isnan(_720) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _720 : min(cbSceneParam._m0[80u].w, _720));
        float _2985 = _2984 / _720;
        float _2996 = _2985 * _771;
        float _2997 = _772 * _2985;
        float _2998 = (-0.0) - _2997;
        float _3000 = _2985 * _773;
        float _3002 = (cbSceneParam._m0[77u].w * _2998) / _2984;
        float _3003 = _3002 + cbSceneParam._m0[79u].w;
        float _3004 = cbSceneParam._m0[79u].w - _2997;
        float _3010 = sqrt(((_2996 * _2996) + (_2997 * _2997)) + (_3000 * _3000));
        float _3013 = (1.0 - (cbSceneParam._m0[77u].w / _2984)) * _3010;
        float _3018 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3020 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3173;
        if (abs((_2998 - _3002) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3173 = ((((_3003 > 0.0) ? exp2(_3018 * _3003) : (2.0 - exp2(_3020 * _3003))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3013;
        }
        else
        {
            float _3133 = 1.0 / cbSceneParam._m0[80u].x;
            float _3134 = isnan(_3004) ? _3003 : (isnan(_3003) ? _3004 : max(_3003, _3004));
            float _3135 = isnan(_3004) ? _3003 : (isnan(_3003) ? _3004 : min(_3003, _3004));
            float _3144 = isnan(0.0) ? _3134 : (isnan(_3134) ? 0.0 : min(_3134, 0.0));
            float _3145 = isnan(0.0) ? _3135 : (isnan(_3135) ? 0.0 : min(_3135, 0.0));
            _3173 = ((abs(_3010 / _2998) * cbSceneParam._m0[80u].y) * ((((_3144 - _3145) * 2.0) - ((exp2(_3018 * (isnan(0.0) ? _3134 : (isnan(_3134) ? 0.0 : max(_3134, 0.0)))) - exp2(_3018 * (isnan(0.0) ? _3135 : (isnan(_3135) ? 0.0 : max(_3135, 0.0))))) * _3133)) - ((exp2(_3020 * _3144) - exp2(_3020 * _3145)) * _3133))) + (_3013 * cbSceneParam._m0[80u].z);
        }
        vec4 _3175 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2930, _2931, 1.0), 0.0);
        float _3184 = exp2((_3173 * (-1.44269502162933349609375)) * (1.0 - _3175.w));
        float _3185 = log2(_3184);
        float _3201 = log2(_2950);
        _3022 = (exp2(_3201 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3185 * cbSceneParam._m0[78u].x)) * _3175.x) / cbSceneParam._m0[78u].x)) + _2947;
        _3024 = (exp2(_3201 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3185 * cbSceneParam._m0[78u].y)) * _3175.y) / cbSceneParam._m0[78u].y)) + _2948;
        _3026 = (exp2(_3201 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3185 * cbSceneParam._m0[78u].z)) * _3175.z) / cbSceneParam._m0[78u].z)) + _2949;
        _3028 = _3184 * _2950;
    }
    else
    {
        _3022 = _2947;
        _3024 = _2948;
        _3026 = _2949;
        _3028 = _2950;
    }
    float _3040 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3041 = _3040 == 3.0;
    float _3042 = log2(_3028);
    float _3049 = exp2(_3042 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0))) * (_2892 + ((isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0))) * _864))) + ((_2898 + ((isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0))) * _1672)) * cbPerFrame._m0[3u].x));
    float _3050 = exp2(_3042 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4818 : (isnan(_4818) ? 1.0 : min(_4818, 1.0))) * (_2894 + ((isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0))) * _864))) + ((_2900 + ((isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0))) * _1672)) * cbPerFrame._m0[3u].x));
    float _3051 = exp2(_3042 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4829 : (isnan(_4829) ? 1.0 : min(_4829, 1.0))) * (_2896 + ((isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0))) * _864))) + ((_2902 + ((isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0))) * _1672)) * cbPerFrame._m0[3u].x));
    float _3060 = (_3040 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3060 * (_3041 ? _3049 : (_3049 + (cbSceneParam._m0[72u].w * _3022)));
    SV_Target.y = _3060 * (_3041 ? _3050 : (_3050 + (cbSceneParam._m0[72u].w * _3024)));
    SV_Target.z = _3060 * (_3041 ? _3051 : (_3051 + (cbSceneParam._m0[72u].w * _3026)));
    SV_Target.w = cbInstanceData._m0[_2922].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2922].w;
}


