#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1296;
float _3699;
float _3700;
float _3701;
float _3702;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _218 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _219 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _220 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _226 = inversesqrt(dot(vec3(_218, _219, _220), vec3(_218, _219, _220)));
    float _227 = _226 * _218;
    float _228 = _226 * _219;
    float _229 = _226 * _220;
    float _233 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _234 = _233 * NORMAL.x;
    float _235 = _233 * NORMAL.y;
    float _236 = _233 * NORMAL.z;
    float _240 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _241 = _240 * TANGENT.x;
    float _242 = _240 * TANGENT.y;
    float _243 = _240 * TANGENT.z;
    uint _246 = uint(roundEven(NORMAL.w)) * 13u;
    uint _252 = _246 + 1u;
    uint _256 = _246 + 2u;
    float _265 = sqrt(((cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x) + (cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x)) + (cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x));
    float _266 = _265 * TEXCOORD.z;
    float _267 = _265 * TEXCOORD.w;
    vec4 _287 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _293 = _287.x * cbMtdParam._m0[11u].x;
    float _294 = _287.y * cbMtdParam._m0[11u].y;
    float _295 = _287.z * cbMtdParam._m0[11u].z;
    vec4 _314 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _266) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _267) + cbTextureTilingScale._m0[5u].w));
    vec4 _352 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _354 = _352.x;
    float _366 = dot(vec4(_354, _352.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _383 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_354 - _366) * cbMtdParam._m0[24u].y) + _366) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3711 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _384 = isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0));
    float _391 = (_384 * ((_314.x * cbMtdParam._m0[12u].x) - _293)) + _293;
    float _392 = (_384 * ((_314.y * cbMtdParam._m0[12u].y) - _294)) + _294;
    float _393 = (_384 * ((_314.z * cbMtdParam._m0[12u].z) - _295)) + _295;
    vec4 _412 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _266) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _267) + cbTextureTilingScale._m0[14u].w));
    vec4 _432 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _266) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _267) + cbTextureTilingScale._m0[20u].w));
    vec4 _459 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _266) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _267) + cbTextureTilingScale._m0[4u].w));
    vec4 _476 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _478 = _476.x;
    float _479 = _476.y;
    float _480 = _476.z;
    float _489 = ((_459.z - _480) * _384) + _480;
    float _492 = ((((_459.x - _478) * _384) + _478) * 2.0) + (-1.0);
    float _493 = ((((_459.y - _479) * _384) + _479) * 2.0) + (-1.0);
    float _494 = dot(vec2(_492, _493), vec2(_492, _493));
    float _3722 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
    float _499 = sqrt(1.0 - (isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0))));
    vec4 _519 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _531 = (_492 + ((((_432.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_519.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _532 = (_493 + ((((_432.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_519.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _535 = fma(_499, _234, fma(_532, _241, _531 * _227));
    float _538 = fma(_499, _235, fma(_532, _242, _531 * _228));
    float _541 = fma(_499, _236, fma(_532, _243, _531 * _229));
    float _545 = inversesqrt(dot(vec3(_535, _538, _541), vec3(_535, _538, _541)));
    vec4 _572 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _266) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _267) + cbTextureTilingScale._m0[11u].w));
    float _574 = _572.x;
    float _575 = 1.0 - _574;
    float _581 = (cbMtdParam._m0[19u].x + dot(vec4(_545 * _535, _545 * _538, _545 * _541, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_574 - _575) * cbMtdParam._m0[24u].z) + _575) * cbMtdParam._m0[21u].z);
    float _3733 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _582 = isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0));
    float _589 = (_582 * ((_412.x * cbMtdParam._m0[18u].x) - _391)) + _391;
    float _590 = (_582 * ((_412.y * cbMtdParam._m0[18u].y) - _392)) + _392;
    float _591 = (_582 * ((_412.z * cbMtdParam._m0[18u].z) - _393)) + _393;
    vec4 _603 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _617 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _619 = _617.x;
    float _637 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _266) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _267) + cbTextureTilingScale._m0[9u].w)).x - _619) * _384) + _619;
    float _641 = ((_603.x - _637) * cbMtdParam._m0[19u].z) + _637;
    float _643 = _641 - (_641 * _582);
    float _648 = (((_432.z - _489) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _489;
    float _652 = ((_519.z - _648) * cbMtdParam._m0[19u].w) + _648;
    vec4 _665 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _266) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _267) + cbTextureTilingScale._m0[15u].w));
    float _672 = (_665.x * 2.0) + (-1.0);
    float _673 = (_665.y * 2.0) + (-1.0);
    float _674 = dot(vec2(_672, _673), vec2(_672, _673));
    float _3744 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _682 = ((_665.z - _652) * _582) + _652;
    float _692 = ((sqrt(1.0 - (isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0)))) - _499) * _582) + _499;
    float _695 = (((_672 - _531) * _582) + _531) + (cbMtdParam._m0[21u].x * _531);
    float _696 = (((_673 - _532) * _582) + _532) + (cbMtdParam._m0[21u].x * _532);
    float _701 = cbMtdParam._m0[22u].x + _519.w;
    float _704 = fma(_692, _234, fma(_696, _241, _695 * _227));
    float _707 = fma(_692, _235, fma(_696, _242, _695 * _228));
    float _710 = fma(_692, _236, fma(_696, _243, _695 * _229));
    float _714 = inversesqrt(dot(vec3(_704, _707, _710), vec3(_704, _707, _710)));
    float _715 = _714 * _704;
    float _716 = _714 * _707;
    float _717 = _714 * _710;
    float _3755 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _718 = isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0));
    float _3766 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
    float _3777 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
    float _3788 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _3799 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _3810 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _723 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
    float _737 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _778 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _788 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _778);
    float _789 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _778);
    float _790 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _778);
    float _794 = inversesqrt(dot(vec3(_788, _789, _790), vec3(_788, _789, _790)));
    float _795 = _788 * _794;
    float _796 = _789 * _794;
    float _797 = _790 * _794;
    vec4 _802 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _804 = _802.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _976 = sqrt(((_788 * _788) + (_789 * _789)) + (_790 * _790));
        float _982 = (cbMatDynParam._m0[5u].x * _976) + cbMatDynParam._m0[5u].y;
        float _3821 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _983 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
        float _987 = (cbMatDynParam._m0[5u].z * _976) + cbMatDynParam._m0[5u].w;
        float _3832 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0))) - _983)) + _983) < ((_804 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _815 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _816 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _834 = fma(_717, cbSceneParam._m0[5u].z, fma(_716, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _715));
    float _837 = fma(_717, cbSceneParam._m0[6u].z, fma(_716, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _715));
    float _840 = fma(_717, cbSceneParam._m0[7u].z, fma(_716, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _715));
    uint _853 = _246 + 9u;
    uint _854 = _853 + uint(cbMatDynParam._m0[0u].w);
    float _860 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0)))) * cbInstanceData._m0[_854].x;
    float _861 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0)))) * cbInstanceData._m0[_854].y;
    float _862 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0)))) * cbInstanceData._m0[_854].z;
    float _3843 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
    float _863 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
    float _3854 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
    float _864 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
    float _3865 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
    float _865 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
    float _866 = 1.0 - _723;
    float _867 = _863 * _866;
    float _868 = _864 * _866;
    float _869 = _865 * _866;
    float _874 = (_863 + (-0.039999999105930328369140625)) * _723;
    float _875 = (_864 + (-0.039999999105930328369140625)) * _723;
    float _876 = (_865 + (-0.039999999105930328369140625)) * _723;
    float _877 = _874 + 0.039999999105930328369140625;
    float _879 = _875 + 0.039999999105930328369140625;
    float _880 = _876 + 0.039999999105930328369140625;
    vec4 _889 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _815, cbSceneParam._m0[86u].y * _816));
    float _893 = ((isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0))) * TEXCOORD_5.w) * _889.x;
    float _894 = dot(vec3(_715, _716, _717), vec3(_795, _796, _797));
    float _897 = _894 * 2.0;
    float _901 = (_897 * _715) - _795;
    float _902 = (_897 * _716) - _796;
    float _903 = (_897 * _717) - _797;
    float _907 = abs(dot(vec3(_795, _796, _797), vec3(_715, _716, _717)));
    float _3876 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
    float _909 = sqrt(_718);
    float _922 = exp2((_909 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_909 * 3.0));
    float _928 = (1.0 - _922) * ((_909 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _929 = _922 * _909;
    float _957 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _961 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _965 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1295;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1020 = fma(_965, cbModelParam._m0[26u].z, fma(_961, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _957));
        float _1024 = fma(_965, cbModelParam._m0[27u].z, fma(_961, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _957));
        float _1028 = fma(_965, cbModelParam._m0[28u].z, fma(_961, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _957));
        float _1053 = _957 + _715;
        float _1054 = _961 + _716;
        float _1055 = _965 + _717;
        float _1065 = fma(_1055, cbModelParam._m0[26u].z, fma(_1054, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1053)) - _1020;
        float _1066 = fma(_1055, cbModelParam._m0[27u].z, fma(_1054, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1053)) - _1024;
        float _1067 = fma(_1055, cbModelParam._m0[28u].z, fma(_1054, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1053)) - _1028;
        float _1071 = inversesqrt(dot(vec3(_1065, _1066, _1067), vec3(_1065, _1066, _1067)));
        float _1084 = ((_1071 * _1065) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1020 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1085 = ((_1071 * _1066) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1024 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1086 = ((_1071 * _1067) / cbModelParam._m0[34u].z) + ((((((_1028 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1089 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1084, _1085, _1086), 0.0);
        vec4 _1096 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1084, _1085, _1086), 0.0);
        vec4 _1103 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1084, _1085, _1086), 0.0);
        vec4 _1110 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1084, _1085, _1086), 0.0);
        float _1123 = exp2((_1089.w + (-0.5)) * 20.0) * 2.0;
        float _1124 = _1123 * (_1089.x + (-0.5));
        float _1125 = _1123 * (_1089.y + (-0.5));
        float _1126 = _1123 * (_1089.z + (-0.5));
        float _1133 = exp2((_1096.w + (-0.5)) * 20.0) * 2.0;
        float _1134 = _1133 * (_1096.x + (-0.5));
        float _1135 = _1133 * (_1096.y + (-0.5));
        float _1136 = _1133 * (_1096.z + (-0.5));
        float _1143 = exp2((_1103.w + (-0.5)) * 20.0) * 2.0;
        float _1144 = _1143 * (_1103.x + (-0.5));
        float _1145 = _1143 * (_1103.y + (-0.5));
        float _1146 = _1143 * (_1103.z + (-0.5));
        float _1153 = exp2((_1110.w + (-0.5)) * 20.0) * 2.0;
        float _1154 = _1153 * (_1110.x + (-0.5));
        float _1155 = _1153 * (_1110.y + (-0.5));
        float _1156 = _1153 * (_1110.z + (-0.5));
        float _1157 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1158 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1159 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1160 = _1124 * 0.5;
        float _1161 = _1134 * 0.5;
        float _1162 = _1144 * 0.5;
        float _1163 = dot(vec3(_1160, _1161, _1162), vec3(_1160, _1161, _1162));
        float _1168 = (_1163 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1163);
        float _1177 = (dot(vec3(_715, _716, _717), vec3(_1168 * _1160, _1168 * _1161, _1168 * _1162)) + 1.0) * 0.5;
        float _3902 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1187 = sqrt(((_1161 * _1161) + (_1160 * _1160)) + (_1162 * _1162)) / (_1157 + 9.9999997473787516355514526367188e-06);
        float _3913 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1188 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
        float _1189 = _1188 * 2.0;
        float _1193 = (1.0 - _1188) / (_1188 + 1.0);
        float _3924 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1194 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
        float _1203 = ((((1.0 - _1194) * (_1189 + 2.0)) * exp2(log2(isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0))) * (_1189 + 1.0))) + _1194) * _1157;
        float _1204 = _1125 * 0.5;
        float _1205 = _1135 * 0.5;
        float _1206 = _1145 * 0.5;
        float _1207 = dot(vec3(_1204, _1205, _1206), vec3(_1204, _1205, _1206));
        float _1212 = (_1207 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1207);
        float _1220 = (dot(vec3(_715, _716, _717), vec3(_1212 * _1204, _1212 * _1205, _1212 * _1206)) + 1.0) * 0.5;
        float _3935 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1229 = sqrt(((_1205 * _1205) + (_1204 * _1204)) + (_1206 * _1206)) / (_1158 + 9.9999997473787516355514526367188e-06);
        float _3946 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1230 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
        float _1231 = _1230 * 2.0;
        float _1235 = (1.0 - _1230) / (_1230 + 1.0);
        float _3957 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1236 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
        float _1245 = ((((1.0 - _1236) * (_1231 + 2.0)) * exp2(log2(isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0))) * (_1231 + 1.0))) + _1236) * _1158;
        float _1246 = _1126 * 0.5;
        float _1247 = _1136 * 0.5;
        float _1248 = _1146 * 0.5;
        float _1249 = dot(vec3(_1246, _1247, _1248), vec3(_1246, _1247, _1248));
        float _1254 = (_1249 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1249);
        float _1262 = (dot(vec3(_715, _716, _717), vec3(_1254 * _1246, _1254 * _1247, _1254 * _1248)) + 1.0) * 0.5;
        float _3968 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1271 = sqrt(((_1247 * _1247) + (_1246 * _1246)) + (_1248 * _1248)) / (_1159 + 9.9999997473787516355514526367188e-06);
        float _3979 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1272 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
        float _1273 = _1272 * 2.0;
        float _1277 = (1.0 - _1272) / (_1272 + 1.0);
        float _3990 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1278 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
        float _1287 = ((((1.0 - _1278) * (_1273 + 2.0)) * exp2(log2(isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0))) * (_1273 + 1.0))) + _1278) * _1159;
        _1295 = _1126;
        _1297 = _1125;
        _1298 = _1124;
        _1299 = _1136;
        _1300 = _1135;
        _1301 = _1134;
        _1302 = _1146;
        _1303 = _1145;
        _1304 = _1144;
        _1305 = _1159;
        _1306 = _1158;
        _1307 = _1157;
        _1308 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0)));
        _1309 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0)));
        _1310 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0)));
    }
    else
    {
        _1295 = _1296;
        _1297 = _1296;
        _1298 = _1296;
        _1299 = _1296;
        _1300 = _1296;
        _1301 = _1296;
        _1302 = _1296;
        _1303 = _1296;
        _1304 = _1296;
        _1305 = _1296;
        _1306 = _1296;
        _1307 = _1296;
        _1308 = 0.0;
        _1309 = 0.0;
        _1310 = 0.0;
    }
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1338 = fma(_965, cbModelParam._m0[30u].z, fma(_961, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _957));
        float _1342 = fma(_965, cbModelParam._m0[31u].z, fma(_961, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _957));
        float _1346 = fma(_965, cbModelParam._m0[32u].z, fma(_961, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _957));
        float _1369 = _957 + _715;
        float _1370 = _961 + _716;
        float _1371 = _965 + _717;
        float _1381 = fma(_1371, cbModelParam._m0[30u].z, fma(_1370, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1369)) - _1338;
        float _1382 = fma(_1371, cbModelParam._m0[31u].z, fma(_1370, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1369)) - _1342;
        float _1383 = fma(_1371, cbModelParam._m0[32u].z, fma(_1370, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1369)) - _1346;
        float _1387 = inversesqrt(dot(vec3(_1381, _1382, _1383), vec3(_1381, _1382, _1383)));
        float _1400 = ((_1387 * _1381) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1338 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1401 = ((_1387 * _1382) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1342 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1402 = ((_1387 * _1383) / cbModelParam._m0[35u].z) + ((((((_1346 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1404 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1400, _1401, _1402), 0.0);
        vec4 _1411 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1400, _1401, _1402), 0.0);
        vec4 _1418 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1400, _1401, _1402), 0.0);
        vec4 _1425 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1400, _1401, _1402), 0.0);
        float _1437 = exp2((_1404.w + (-0.5)) * 20.0) * 2.0;
        float _1438 = _1437 * (_1404.x + (-0.5));
        float _1439 = _1437 * (_1404.y + (-0.5));
        float _1440 = _1437 * (_1404.z + (-0.5));
        float _1447 = exp2((_1411.w + (-0.5)) * 20.0) * 2.0;
        float _1448 = _1447 * (_1411.x + (-0.5));
        float _1449 = _1447 * (_1411.y + (-0.5));
        float _1450 = _1447 * (_1411.z + (-0.5));
        float _1457 = exp2((_1418.w + (-0.5)) * 20.0) * 2.0;
        float _1458 = _1457 * (_1418.x + (-0.5));
        float _1459 = _1457 * (_1418.y + (-0.5));
        float _1460 = _1457 * (_1418.z + (-0.5));
        float _1467 = exp2((_1425.w + (-0.5)) * 20.0) * 2.0;
        float _1468 = _1467 * (_1425.x + (-0.5));
        float _1469 = _1467 * (_1425.y + (-0.5));
        float _1470 = _1467 * (_1425.z + (-0.5));
        float _1471 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1472 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1473 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1474 = _1438 * 0.5;
        float _1475 = _1448 * 0.5;
        float _1476 = _1458 * 0.5;
        float _1477 = dot(vec3(_1474, _1475, _1476), vec3(_1474, _1475, _1476));
        float _1482 = (_1477 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1477);
        float _1490 = (dot(vec3(_715, _716, _717), vec3(_1482 * _1474, _1482 * _1475, _1482 * _1476)) + 1.0) * 0.5;
        float _4031 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1499 = sqrt(((_1475 * _1475) + (_1474 * _1474)) + (_1476 * _1476)) / (_1471 + 9.9999997473787516355514526367188e-06);
        float _4042 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1500 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
        float _1501 = _1500 * 2.0;
        float _1505 = (1.0 - _1500) / (_1500 + 1.0);
        float _4053 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1506 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
        float _1515 = ((((1.0 - _1506) * (_1501 + 2.0)) * exp2(log2(isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0))) * (_1501 + 1.0))) + _1506) * _1471;
        float _1516 = _1439 * 0.5;
        float _1517 = _1449 * 0.5;
        float _1518 = _1459 * 0.5;
        float _1519 = dot(vec3(_1516, _1517, _1518), vec3(_1516, _1517, _1518));
        float _1524 = (_1519 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1519);
        float _1532 = (dot(vec3(_715, _716, _717), vec3(_1524 * _1516, _1524 * _1517, _1524 * _1518)) + 1.0) * 0.5;
        float _4064 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1541 = sqrt(((_1517 * _1517) + (_1516 * _1516)) + (_1518 * _1518)) / (_1472 + 9.9999997473787516355514526367188e-06);
        float _4075 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
        float _1542 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
        float _1543 = _1542 * 2.0;
        float _1547 = (1.0 - _1542) / (_1542 + 1.0);
        float _4086 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
        float _1548 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
        float _1557 = ((((1.0 - _1548) * (_1543 + 2.0)) * exp2(log2(isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0))) * (_1543 + 1.0))) + _1548) * _1472;
        float _1558 = _1440 * 0.5;
        float _1559 = _1450 * 0.5;
        float _1560 = _1460 * 0.5;
        float _1561 = dot(vec3(_1558, _1559, _1560), vec3(_1558, _1559, _1560));
        float _1566 = (_1561 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1561);
        float _1574 = (dot(vec3(_715, _716, _717), vec3(_1566 * _1558, _1566 * _1559, _1566 * _1560)) + 1.0) * 0.5;
        float _4097 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
        float _1583 = sqrt(((_1559 * _1559) + (_1558 * _1558)) + (_1560 * _1560)) / (_1473 + 9.9999997473787516355514526367188e-06);
        float _4108 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1584 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
        float _1585 = _1584 * 2.0;
        float _1589 = (1.0 - _1584) / (_1584 + 1.0);
        float _4119 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
        float _1590 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
        float _1599 = ((((1.0 - _1590) * (_1585 + 2.0)) * exp2(log2(isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0))) * (_1585 + 1.0))) + _1590) * _1473;
        _1607 = _1440;
        _1608 = _1439;
        _1609 = _1438;
        _1610 = _1450;
        _1611 = _1449;
        _1612 = _1448;
        _1613 = _1460;
        _1614 = _1459;
        _1615 = _1458;
        _1616 = _1473;
        _1617 = _1472;
        _1618 = _1471;
        _1619 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0)));
        _1620 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0)));
        _1621 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0)));
    }
    else
    {
        _1607 = _1296;
        _1608 = _1296;
        _1609 = _1296;
        _1610 = _1296;
        _1611 = _1296;
        _1612 = _1296;
        _1613 = _1296;
        _1614 = _1296;
        _1615 = _1296;
        _1616 = _1296;
        _1617 = _1296;
        _1618 = _1296;
        _1619 = 0.0;
        _1620 = 0.0;
        _1621 = 0.0;
    }
    float _1631 = (cbModelParam._m0[1u].x * (_1619 - _1308)) + _1308;
    float _1632 = (cbModelParam._m0[1u].x * (_1620 - _1309)) + _1309;
    float _1633 = (cbModelParam._m0[1u].x * (_1621 - _1310)) + _1310;
    float _1654 = fma(_1633, cbSceneParam._m0[89u].z, fma(_1632, cbSceneParam._m0[89u].y, _1631 * cbSceneParam._m0[89u].x));
    float _1657 = fma(_1633, cbSceneParam._m0[90u].z, fma(_1632, cbSceneParam._m0[90u].y, _1631 * cbSceneParam._m0[90u].x));
    float _1660 = fma(_1633, cbSceneParam._m0[91u].z, fma(_1632, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1631));
    float _1675 = _901 * 0.5;
    float _1676 = _902 * 0.5;
    float _1677 = _903 * 0.5;
    float _1678 = dot(vec4(_1675, _1676, _1677, 1.0), vec4(_1609, _1612, _1615, _1618));
    float _1681 = dot(vec4(_1675, _1676, _1677, 1.0), vec4(_1608, _1611, _1614, _1617));
    float _1684 = dot(vec4(_1675, _1676, _1677, 1.0), vec4(_1607, _1610, _1613, _1616));
    float _1718;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1691 = dot(vec4(_1675, _1676, _1677, 1.0), vec4(_1295, _1299, _1302, _1305));
        float _1695 = dot(vec4(_1675, _1676, _1677, 1.0), vec4(_1297, _1300, _1303, _1306));
        float _1699 = dot(vec4(_1675, _1676, _1677, 1.0), vec4(_1298, _1301, _1304, _1307));
        float _1706 = dot(vec4(cbModelParam._m0[39u]), vec4(_1675, _1676, _1677, 1.0));
        _1718 = dot(vec3(isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0)), isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0)), isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1706) ? 0.0 : (isnan(0.0) ? _1706 : max(0.0, _1706))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1718 = 1.0;
    }
    float _1729;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1720 = dot(vec4(cbModelParam._m0[40u]), vec4(_1675, _1676, _1677, 1.0));
        _1729 = dot(vec3(isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0)), isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0)), isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1720) ? 0.0 : (isnan(0.0) ? _1720 : max(0.0, _1720))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1729 = 1.0;
    }
    float _1733 = (_1729 * cbModelParam._m0[1u].x) + (_1718 * (1.0 - cbModelParam._m0[1u].x));
    float _1743 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _718);
    float _1744 = isnan(_1743) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1743 : min(cbModelParam._m0[25u].z, _1743));
    float _1824;
    float _1826;
    float _1828;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1791 = fma(_965, cbModelParam._m0[13u].z, fma(_961, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _957)) + cbModelParam._m0[13u].w;
        float _1795 = fma(_965, cbModelParam._m0[14u].z, fma(_961, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _957)) + cbModelParam._m0[14u].w;
        float _1799 = fma(_965, cbModelParam._m0[15u].z, fma(_961, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _957)) + cbModelParam._m0[15u].w;
        float _1802 = fma(_903, cbModelParam._m0[13u].z, fma(_902, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _901));
        float _1805 = fma(_903, cbModelParam._m0[14u].z, fma(_902, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _901));
        float _1808 = fma(_903, cbModelParam._m0[15u].z, fma(_902, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _901));
        float _1836;
        if (_1802 > 0.0)
        {
            _1836 = abs((1.0 - _1791) / _1802);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1802 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1791 + 1.0) / _1802);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1836 = frontier_phi_17_15_ladder;
        }
        float _2059;
        if (_1805 > 0.0)
        {
            _2059 = abs((1.0 - _1795) / _1805);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1805 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1795 + 1.0) / _1805);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2059 = frontier_phi_26_22_ladder;
        }
        float _2316;
        if (_1808 > 0.0)
        {
            _2316 = abs((1.0 - _1799) / _1808);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1808 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1799 + 1.0) / _1808);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2316 = frontier_phi_38_33_ladder;
        }
        float _2318 = isnan(_2059) ? _1836 : (isnan(_1836) ? _2059 : min(_1836, _2059));
        float _2319 = isnan(_2316) ? _2318 : (isnan(_2318) ? _2316 : min(_2318, _2316));
        float _2323 = (_2319 * _1802) + _1791;
        float _2324 = (_2319 * _1805) + _1795;
        float _2325 = (_2319 * _1808) + _1799;
        float _2326 = _2319 * 9.9999997473787516355514526367188e-05;
        float _2328 = (-1.0) - _2326;
        float _2330 = _2326 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2325 > _2330) || ((_2325 < _2328) || ((_2324 > _2330) || ((_2324 < _2328) || ((_2323 < _2328) || (_2323 > _2330))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2453 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2325, cbModelParam._m0[9u].z, fma(_2324, cbModelParam._m0[9u].y, _2323 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2325, cbModelParam._m0[10u].z, fma(_2324, cbModelParam._m0[10u].y, _2323 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2325, cbModelParam._m0[11u].z, fma(_2324, cbModelParam._m0[11u].y, _2323 * cbModelParam._m0[11u].x))), _1744);
            frontier_phi_16_38_ladder = _2453.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2453.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2453.x * cbModelParam._m0[1u].y;
        }
        _1824 = frontier_phi_16_38_ladder_2;
        _1826 = frontier_phi_16_38_ladder_1;
        _1828 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1812 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_901, _902, _903), _1744);
        _1824 = _1812.x * cbModelParam._m0[1u].y;
        _1826 = _1812.y * cbModelParam._m0[1u].y;
        _1828 = _1812.z * cbModelParam._m0[1u].y;
    }
    float _1832 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _718);
    float _1833 = isnan(_1832) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1832 : min(cbModelParam._m0[25u].w, _1832));
    float _1922;
    float _1924;
    float _1926;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1886 = fma(_965, cbModelParam._m0[21u].z, fma(_961, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _957)) + cbModelParam._m0[21u].w;
        float _1890 = fma(_965, cbModelParam._m0[22u].z, fma(_961, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _957)) + cbModelParam._m0[22u].w;
        float _1894 = fma(_965, cbModelParam._m0[23u].z, fma(_961, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _957)) + cbModelParam._m0[23u].w;
        float _1897 = fma(_903, cbModelParam._m0[21u].z, fma(_902, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _901));
        float _1900 = fma(_903, cbModelParam._m0[22u].z, fma(_902, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _901));
        float _1903 = fma(_903, cbModelParam._m0[23u].z, fma(_902, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _901));
        float _2064;
        if (_1897 > 0.0)
        {
            _2064 = abs((1.0 - _1886) / _1897);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1897 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1886 + 1.0) / _1897);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2064 = frontier_phi_28_24_ladder;
        }
        float _2343;
        if (_1900 > 0.0)
        {
            _2343 = abs((1.0 - _1890) / _1900);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1900 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1890 + 1.0) / _1900);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2343 = frontier_phi_40_35_ladder;
        }
        float _2556;
        if (_1903 > 0.0)
        {
            _2556 = abs((1.0 - _1894) / _1903);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1903 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1894 + 1.0) / _1903);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2556 = frontier_phi_49_46_ladder;
        }
        float _2558 = isnan(_2343) ? _2064 : (isnan(_2064) ? _2343 : min(_2064, _2343));
        float _2559 = isnan(_2556) ? _2558 : (isnan(_2558) ? _2556 : min(_2558, _2556));
        float _2563 = (_2559 * _1897) + _1886;
        float _2564 = (_2559 * _1900) + _1890;
        float _2565 = (_2559 * _1903) + _1894;
        float _2566 = _2559 * 9.9999997473787516355514526367188e-05;
        float _2567 = (-1.0) - _2566;
        float _2569 = _2566 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2565 > _2569) || ((_2565 < _2567) || ((_2564 > _2569) || ((_2564 < _2567) || ((_2563 < _2567) || (_2563 > _2569))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2764 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2565, cbModelParam._m0[17u].z, fma(_2564, cbModelParam._m0[17u].y, _2563 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2565, cbModelParam._m0[18u].z, fma(_2564, cbModelParam._m0[18u].y, _2563 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2565, cbModelParam._m0[19u].z, fma(_2564, cbModelParam._m0[19u].y, _2563 * cbModelParam._m0[19u].x))), _1833);
            frontier_phi_25_49_ladder = _2764.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2764.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2764.x * cbModelParam._m0[1u].z;
        }
        _1922 = frontier_phi_25_49_ladder_2;
        _1924 = frontier_phi_25_49_ladder_1;
        _1926 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1906 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_901, _902, _903), _1833);
        _1922 = _1906.x * cbModelParam._m0[1u].z;
        _1924 = _1906.y * cbModelParam._m0[1u].z;
        _1926 = _1906.z * cbModelParam._m0[1u].z;
    }
    float _1939 = (((_928 * _877) + _929) * _893) * ((cbModelParam._m0[1u].w * (_1922 - _1824)) + _1824);
    float _1941 = (((_928 * _879) + _929) * _893) * ((cbModelParam._m0[1u].w * (_1924 - _1826)) + _1826);
    float _1943 = (((_928 * _880) + _929) * _893) * ((cbModelParam._m0[1u].w * (_1926 - _1828)) + _1828);
    float _1946 = fma(_1943, cbSceneParam._m0[89u].z, fma(_1941, cbSceneParam._m0[89u].y, _1939 * cbSceneParam._m0[89u].x));
    float _1949 = fma(_1943, cbSceneParam._m0[90u].z, fma(_1941, cbSceneParam._m0[90u].y, _1939 * cbSceneParam._m0[90u].x));
    float _1952 = fma(_1943, cbSceneParam._m0[91u].z, fma(_1941, cbSceneParam._m0[91u].y, _1939 * cbSceneParam._m0[91u].x));
    vec4 _1960 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_815, _816));
    float _1962 = _1960.w;
    float _1974 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1962);
    float _1975 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1962);
    float _1976 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1962);
    uvec4 _1980 = floatBitsToUint(cbInstanceData._m0[_246 + 5u]);
    uint _1982 = _1980.x * 14u;
    uint _1983 = _1982 + 13u;
    float _1990 = _893 + (-1.0);
    float _1995 = (cbLight._m0[_1983].x * _1990) + 1.0;
    float _1996 = (cbLight._m0[_1983].y * _1990) + 1.0;
    float _1997 = (cbLight._m0[_1983].z * _1990) + 1.0;
    float _1998 = (cbLight._m0[_1983].w * _1990) + 1.0;
    uint _1999 = _1982 + 5u;
    float _2005 = isnan(1.0) ? _1996 : (isnan(_1996) ? 1.0 : min(_1996, 1.0));
    uint _2009 = _1982 + 4u;
    float _2018 = isnan(1.0) ? _1995 : (isnan(_1995) ? 1.0 : min(_1995, 1.0));
    uint _2022 = _1982 | 1u;
    float _2033 = dot(vec3(cbLight._m0[_1982].xyz), vec3(_715, _716, _717));
    float _2036 = dot(vec3(cbLight._m0[_2022].xyz), vec3(_715, _716, _717));
    float _4255 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
    float _4266 = isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0));
    float _2041 = (isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0))) * 0.3183098733425140380859375;
    float _2043 = (isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0))) * 0.3183098733425140380859375;
    float _2050 = ((cbLight._m0[_1999].x * _2005) * _2043) + (((cbLight._m0[_2009].x * _1974) * _2018) * _2041);
    float _2051 = ((_2005 * cbLight._m0[_1999].y) * _2043) + (((cbLight._m0[_2009].y * _1975) * _2018) * _2041);
    float _2052 = ((_2005 * cbLight._m0[_1999].z) * _2043) + (((cbLight._m0[_2009].z * _1976) * _2018) * _2041);
    uvec4 _2056 = floatBitsToUint(cbLight._m0[_1982 + 12u]);
    bool _2058 = _2056.x == 0u;
    float _2069;
    float _2071;
    float _2073;
    if (_2058)
    {
        _2069 = _2050;
        _2071 = _2051;
        _2073 = _2052;
    }
    else
    {
        uint _2077 = _1982 + 6u;
        float _2093 = (dot(vec3(cbLight._m0[_1982 + 2u].xyz), vec3(_715, _716, _717)) * 0.5) + 0.5;
        float _2094 = _2093 * _2093;
        float _4277 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
        float _2095 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
        float _2096 = isnan(1.0) ? _1997 : (isnan(_1997) ? 1.0 : min(_1997, 1.0));
        _2069 = (((cbLight._m0[_2077].x * 0.3183098733425140380859375) * _2095) * _2096) + _2050;
        _2071 = (((cbLight._m0[_2077].y * 0.3183098733425140380859375) * _2095) * _2096) + _2051;
        _2073 = (((cbLight._m0[_2077].z * 0.3183098733425140380859375) * _2095) * _2096) + _2052;
    }
    bool _2076 = _2056.y == 0u;
    float _2114;
    float _2116;
    float _2118;
    if (_2076)
    {
        _2114 = _2069;
        _2116 = _2071;
        _2118 = _2073;
    }
    else
    {
        uint _2287 = _1982 + 7u;
        float _2303 = (dot(vec3(cbLight._m0[_1982 + 3u].xyz), vec3(_715, _716, _717)) * 0.5) + 0.5;
        float _2304 = _2303 * _2303;
        float _4293 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
        float _2305 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
        float _2306 = isnan(1.0) ? _1998 : (isnan(_1998) ? 1.0 : min(_1998, 1.0));
        _2114 = (((cbLight._m0[_2287].x * 0.3183098733425140380859375) * _2305) * _2306) + _2069;
        _2116 = (((cbLight._m0[_2287].y * 0.3183098733425140380859375) * _2305) * _2306) + _2071;
        _2118 = (((cbLight._m0[_2287].z * 0.3183098733425140380859375) * _2305) * _2306) + _2073;
    }
    uint _2121 = _1982 + 8u;
    float _2134 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1982].w)) * _718) * 0.949999988079071044921875);
    float _2135 = _2134 * _2134;
    float _2136 = cbLight._m0[_1982].x + _795;
    float _2137 = cbLight._m0[_1982].y + _796;
    float _2138 = cbLight._m0[_1982].z + _797;
    float _2142 = inversesqrt(dot(vec3(_2136, _2137, _2138), vec3(_2136, _2137, _2138)));
    float _2143 = _2142 * _2136;
    float _2144 = _2142 * _2137;
    float _2145 = _2142 * _2138;
    float _2146 = dot(vec3(_715, _716, _717), vec3(cbLight._m0[_1982].xyz));
    float _4309 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
    float _2149 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
    float _4320 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
    float _2150 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
    float _2151 = dot(vec3(_715, _716, _717), vec3(_2143, _2144, _2145));
    float _4331 = isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0));
    float _2154 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
    float _2155 = dot(vec3(cbLight._m0[_1982].xyz), vec3(_2143, _2144, _2145));
    float _4342 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
    float _2159 = _2135 * _2135;
    float _2163 = ((_2154 * _2154) * (_2159 + (-1.0))) + 1.0;
    float _2171 = exp2(log2(1.0 - (isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0)))) * 5.0);
    float _2172 = 0.959999978542327880859375 - _874;
    float _2174 = 0.959999978542327880859375 - _875;
    float _2175 = 0.959999978542327880859375 - _876;
    float _2182 = 1.0 - _2135;
    float _2193 = (0.5 / (((_2150 * ((_2149 * _2182) + _2135)) + 9.9999999392252902907785028219223e-09) + (((_2150 * _2182) + _2135) * _2149))) * _2149;
    float _4353 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
    float _2195 = (isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0))) * (_2159 / ((_2163 * _2163) * 3.141590118408203125));
    uint _2209 = _1982 + 9u;
    float _2220 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2022].w)) * _718) * 0.949999988079071044921875);
    float _2221 = _2220 * _2220;
    float _2222 = cbLight._m0[_2022].x + _795;
    float _2223 = cbLight._m0[_2022].y + _796;
    float _2224 = cbLight._m0[_2022].z + _797;
    float _2228 = inversesqrt(dot(vec3(_2222, _2223, _2224), vec3(_2222, _2223, _2224)));
    float _2229 = _2228 * _2222;
    float _2230 = _2228 * _2223;
    float _2231 = _2228 * _2224;
    float _2232 = dot(vec3(_715, _716, _717), vec3(cbLight._m0[_2022].xyz));
    float _4364 = isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0));
    float _2235 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
    float _2236 = dot(vec3(_715, _716, _717), vec3(_2229, _2230, _2231));
    float _4375 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0));
    float _2239 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
    float _2240 = dot(vec3(cbLight._m0[_2022].xyz), vec3(_2229, _2230, _2231));
    float _4386 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
    float _2244 = _2221 * _2221;
    float _2248 = ((_2239 * _2239) * (_2244 + (-1.0))) + 1.0;
    float _2255 = exp2(log2(1.0 - (isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0)))) * 5.0);
    float _2262 = 1.0 - _2221;
    float _2272 = (0.5 / (((_2150 * ((_2235 * _2262) + _2221)) + 9.9999999392252902907785028219223e-09) + (((_2150 * _2262) + _2221) * _2235))) * _2235;
    float _4397 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
    float _2274 = (isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0))) * (_2244 / ((_2248 * _2248) * 3.141590118408203125));
    float _2284 = (((((_2255 * _2172) + _877) * cbLight._m0[_2209].x) * _2274) * _2005) + ((((cbLight._m0[_2121].x * _1974) * ((_2171 * _2172) + _877)) * _2195) * _2018);
    float _2285 = (((((_2255 * _2174) + _879) * cbLight._m0[_2209].y) * _2274) * _2005) + ((((cbLight._m0[_2121].y * _1975) * ((_2171 * _2174) + _879)) * _2195) * _2018);
    float _2286 = (((((_2255 * _2175) + _880) * cbLight._m0[_2209].z) * _2274) * _2005) + ((((cbLight._m0[_2121].z * _1976) * ((_2171 * _2175) + _880)) * _2195) * _2018);
    float _2348;
    float _2350;
    float _2352;
    if (_2058)
    {
        _2348 = _2284;
        _2350 = _2285;
        _2352 = _2286;
    }
    else
    {
        uint _2354 = _1982 + 2u;
        uint _2358 = _1982 + 10u;
        float _2372 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2354].w)) * _718) * 0.949999988079071044921875);
        float _2373 = _2372 * _2372;
        float _2374 = cbLight._m0[_2354].x + _795;
        float _2375 = cbLight._m0[_2354].y + _796;
        float _2376 = cbLight._m0[_2354].z + _797;
        float _2380 = inversesqrt(dot(vec3(_2374, _2375, _2376), vec3(_2374, _2375, _2376)));
        float _2381 = _2380 * _2374;
        float _2382 = _2380 * _2375;
        float _2383 = _2380 * _2376;
        float _2384 = dot(vec3(_715, _716, _717), vec3(cbLight._m0[_2354].xyz));
        float _4408 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0));
        float _2387 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
        float _2388 = dot(vec3(_715, _716, _717), vec3(_2381, _2382, _2383));
        float _4419 = isnan(0.0) ? _2388 : (isnan(_2388) ? 0.0 : max(_2388, 0.0));
        float _2391 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
        float _2392 = dot(vec3(cbLight._m0[_2354].xyz), vec3(_2381, _2382, _2383));
        float _4430 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
        float _2396 = _2373 * _2373;
        float _2400 = ((_2391 * _2391) * (_2396 + (-1.0))) + 1.0;
        float _2407 = exp2(log2(1.0 - (isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0)))) * 5.0);
        float _2414 = 1.0 - _2373;
        float _2424 = (0.5 / (((_2150 * ((_2387 * _2414) + _2373)) + 9.9999999392252902907785028219223e-09) + (((_2150 * _2414) + _2373) * _2387))) * _2387;
        float _4441 = isnan(0.0) ? _2424 : (isnan(_2424) ? 0.0 : max(_2424, 0.0));
        float _2426 = (isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0))) * (_2396 / ((_2400 * _2400) * 3.141590118408203125));
        float _2427 = isnan(1.0) ? _1997 : (isnan(_1997) ? 1.0 : min(_1997, 1.0));
        _2348 = (((((_2407 * _2172) + _877) * cbLight._m0[_2358].x) * _2426) * _2427) + _2284;
        _2350 = (((((_2407 * _2174) + _879) * cbLight._m0[_2358].y) * _2426) * _2427) + _2285;
        _2352 = (((((_2407 * _2175) + _880) * cbLight._m0[_2358].z) * _2426) * _2427) + _2286;
    }
    float _2462;
    float _2464;
    float _2466;
    if (_2076)
    {
        _2462 = _2348;
        _2464 = _2350;
        _2466 = _2352;
    }
    else
    {
        uint _2473 = _1982 + 3u;
        uint _2477 = _1982 + 11u;
        float _2491 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2473].w)) * _718) * 0.949999988079071044921875);
        float _2492 = _2491 * _2491;
        float _2493 = cbLight._m0[_2473].x + _795;
        float _2494 = cbLight._m0[_2473].y + _796;
        float _2495 = cbLight._m0[_2473].z + _797;
        float _2499 = inversesqrt(dot(vec3(_2493, _2494, _2495), vec3(_2493, _2494, _2495)));
        float _2500 = _2499 * _2493;
        float _2501 = _2499 * _2494;
        float _2502 = _2499 * _2495;
        float _2503 = dot(vec3(_715, _716, _717), vec3(cbLight._m0[_2473].xyz));
        float _4457 = isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : max(_2503, 0.0));
        float _2506 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
        float _2507 = dot(vec3(_715, _716, _717), vec3(_2500, _2501, _2502));
        float _4468 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0));
        float _2510 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
        float _2511 = dot(vec3(cbLight._m0[_2473].xyz), vec3(_2500, _2501, _2502));
        float _4479 = isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : max(_2511, 0.0));
        float _2515 = _2492 * _2492;
        float _2519 = ((_2510 * _2510) * (_2515 + (-1.0))) + 1.0;
        float _2526 = exp2(log2(1.0 - (isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0)))) * 5.0);
        float _2533 = 1.0 - _2492;
        float _2543 = (0.5 / (((_2150 * ((_2506 * _2533) + _2492)) + 9.9999999392252902907785028219223e-09) + (((_2150 * _2533) + _2492) * _2506))) * _2506;
        float _4490 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0));
        float _2545 = (isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0))) * (_2515 / ((_2519 * _2519) * 3.141590118408203125));
        float _2546 = isnan(1.0) ? _1998 : (isnan(_1998) ? 1.0 : min(_1998, 1.0));
        _2462 = (((((_2526 * _2172) + _877) * cbLight._m0[_2477].x) * _2545) * _2546) + _2348;
        _2464 = (((((_2526 * _2174) + _879) * cbLight._m0[_2477].y) * _2545) * _2546) + _2350;
        _2466 = (((((_2526 * _2175) + _880) * cbLight._m0[_2477].z) * _2545) * _2546) + _2352;
    }
    float _2681;
    float _2683;
    float _2685;
    float _2687;
    float _2689;
    float _2691;
    if (_1980.y == 0u)
    {
        float _2621 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2622 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2621;
        float _2623 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2621;
        float _2624 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2621;
        uvec4 _2636 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2637 = _2636.x;
        uint _2648 = uint((float(_2636.y) * floor(float(uint(cbSceneParam._m0[85u].y * _816) / _2637))) + floor(float(uint(cbSceneParam._m0[85u].x * _815) / _2637)));
        float _2658 = (log2(_2624 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2659 = isnan(0.0) ? _2658 : (isnan(_2658) ? 0.0 : max(_2658, 0.0));
        uint _2662 = uint(isnan(14.0) ? _2659 : (isnan(_2659) ? 14.0 : min(_2659, 14.0)));
        uvec4 _2667 = texelFetch(g_lightClusterGridBuffer, int(((_2662 << 2u) + (_2648 << 6u)) >> 2u));
        uint _2668 = _2667.x;
        uint _2669 = _2636.z;
        float _2769;
        float _2771;
        float _2773;
        float _2775;
        float _2777;
        float _2779;
        if (((((1u << ((_2669 >> 4u) & 15u)) + 4294967295u) & _2668) == 0u) || ((_2669 & 240u) == 0u))
        {
            _2769 = 0.0;
            _2771 = 0.0;
            _2773 = 0.0;
            _2775 = 0.0;
            _2777 = 0.0;
            _2779 = 0.0;
        }
        else
        {
            float _2770;
            float _2772;
            float _2774;
            float _2776;
            float _2778;
            float _2780;
            float _2922 = 0.0;
            float _2923 = 0.0;
            float _2924 = 0.0;
            float _2925 = 0.0;
            float _2926 = 0.0;
            float _2927 = 0.0;
            uint _2928 = 0u;
            uint _2937;
            bool _2938;
            for (;;)
            {
                _2937 = texelFetch(g_lightClassification, int((((_2662 << 5u) + (_2648 << 9u)) + (_2928 << 2u)) >> 2u)).x;
                _2938 = _2937 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2938)
                {
                    frontier_phi_66_pred = _2922;
                    frontier_phi_66_pred_1 = _2927;
                    frontier_phi_66_pred_2 = _2926;
                    frontier_phi_66_pred_3 = _2925;
                    frontier_phi_66_pred_4 = _2924;
                    frontier_phi_66_pred_5 = _2923;
                }
                else
                {
                    float _3067;
                    float _3068;
                    float _3069;
                    float _3070;
                    float _3071;
                    float _3072;
                    uint _3073;
                    _3067 = _2922;
                    _3068 = _2923;
                    _3069 = _2924;
                    _3070 = _2925;
                    _3071 = _2926;
                    _3072 = _2927;
                    _3073 = _2937;
                    float _2994;
                    float _2995;
                    float _2996;
                    float _2997;
                    float _2998;
                    float _2999;
                    for (;;)
                    {
                        uint _3077 = uint(findLSB(_3073)) + (_2928 << 5u);
                        uint _3074 = (_3073 + 4294967295u) & _3073;
                        uint _3079 = _3077 * 48u;
                        vec4 _3093 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3079)).x, texelFetch(g_PointLightRenderingBuffer, int(_3079 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3079 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3079 + 3u)).x));
                        uint _3099 = (_3077 * 48u) + 4u;
                        vec4 _3112 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3099)).x, texelFetch(g_PointLightRenderingBuffer, int(_3099 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3099 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3099 + 3u)).x));
                        uint _3118 = (_3077 * 48u) + 8u;
                        vec3 _3129 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3118)).x, texelFetch(g_PointLightRenderingBuffer, int(_3118 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3118 + 2u)).x));
                        float _3133 = _3093.x - _2622;
                        float _3134 = _3093.y - _2623;
                        float _3135 = _3093.z - _2624;
                        float _3136 = dot(vec3(_3133, _3134, _3135), vec3(_3133, _3134, _3135));
                        float _3139 = inversesqrt(_3136);
                        float _3140 = _3139 * _3133;
                        float _3141 = _3139 * _3134;
                        float _3142 = _3139 * _3135;
                        float _3143 = dot(vec3(_834, _837, _840), vec3(_3140, _3141, _3142));
                        float _3148 = 1.0 - (_3136 * _3093.w);
                        float _4516 = isnan(0.0) ? _3148 : (isnan(_3148) ? 0.0 : max(_3148, 0.0));
                        float _3149 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
                        float _3150 = sqrt(_3136) * _3112.w;
                        float _3153 = 1.39999997615814208984375 / (_3150 + 1.39999997615814208984375);
                        float _3154 = _3153 * _3153;
                        float _3157 = ((1.0 - _3154) * _3143) + _3154;
                        float _3160 = _3150 * _3150;
                        float _3164 = ((isnan(0.0) ? _3157 : (isnan(_3157) ? 0.0 : max(_3157, 0.0))) * _3149) / ((_3160 * 0.699999988079071044921875) + 1.0);
                        float _3168 = (-0.0) - _2622;
                        float _3169 = (-0.0) - _2623;
                        float _3170 = (-0.0) - _2624;
                        float _3174 = inversesqrt(dot(vec3(_3168, _3169, _3170), vec3(_3168, _3169, _3170)));
                        float _3175 = _3174 * _3168;
                        float _3176 = _3174 * _3169;
                        float _3177 = _3174 * _3170;
                        float _3185 = exp2(log2(1.0 / ((_3160 * 3.5) + 5.0)) * 0.25);
                        float _3186 = 1.0 - _909;
                        float _3193 = sqrt(1.0 - ((1.0 - (_3186 * _3186)) * (1.0 - (_3185 * _3185))));
                        float _3194 = _3193 * _3193;
                        float _3195 = _3194 * _3194;
                        float _3196 = _3175 + _3140;
                        float _3197 = _3176 + _3141;
                        float _3198 = _3177 + _3142;
                        float _3202 = inversesqrt(dot(vec3(_3196, _3197, _3198), vec3(_3196, _3197, _3198)));
                        float _3206 = dot(vec3(_834, _837, _840), vec3(_3175, _3176, _3177));
                        float _4532 = isnan(0.0) ? _3206 : (isnan(_3206) ? 0.0 : max(_3206, 0.0));
                        float _3209 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
                        float _3210 = dot(vec3(_834, _837, _840), vec3(_3202 * _3196, _3202 * _3197, _3202 * _3198));
                        float _4543 = isnan(0.0) ? _3210 : (isnan(_3210) ? 0.0 : max(_3210, 0.0));
                        float _3213 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
                        float _3217 = ((_3213 * _3213) * (_3195 + (-1.0))) + 1.0;
                        float _3218 = _3153 * _3194;
                        float _3219 = _3218 * _3218;
                        float _3222 = ((1.0 - _3219) * _3143) + _3219;
                        float _4554 = isnan(0.0) ? _3222 : (isnan(_3222) ? 0.0 : max(_3222, 0.0));
                        float _3223 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
                        float _3224 = 1.0 - _3194;
                        float _3234 = (0.5 / (((_3223 * ((_3209 * _3224) + _3194)) + 9.9999999392252902907785028219223e-09) + (((_3223 * _3224) + _3194) * _3209))) * _3223;
                        float _4565 = isnan(0.0) ? _3234 : (isnan(_3234) ? 0.0 : max(_3234, 0.0));
                        float _3245 = (((_3195 * 3.1415927410125732421875) * (isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0)))) / ((_3217 * _3217) * ((_3160 * 2.1991131305694580078125) + 3.141590118408203125))) * _3149;
                        _2997 = (_3164 * _3112.x) + _3070;
                        _2998 = (_3164 * _3112.y) + _3071;
                        _2999 = (_3164 * _3112.z) + _3072;
                        _2994 = (_3245 * _3129.x) + _3067;
                        _2995 = (_3245 * _3129.y) + _3068;
                        _2996 = (_3245 * _3129.z) + _3069;
                        if (_3074 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3067 = _2994;
                            _3068 = _2995;
                            _3069 = _2996;
                            _3070 = _2997;
                            _3071 = _2998;
                            _3072 = _2999;
                            _3073 = _3074;
                        }
                    }
                    frontier_phi_66_pred = _2994;
                    frontier_phi_66_pred_1 = _2999;
                    frontier_phi_66_pred_2 = _2998;
                    frontier_phi_66_pred_3 = _2997;
                    frontier_phi_66_pred_4 = _2996;
                    frontier_phi_66_pred_5 = _2995;
                }
                _2770 = frontier_phi_66_pred;
                _2780 = frontier_phi_66_pred_1;
                _2778 = frontier_phi_66_pred_2;
                _2776 = frontier_phi_66_pred_3;
                _2774 = frontier_phi_66_pred_4;
                _2772 = frontier_phi_66_pred_5;
                uint _2929 = _2928 + 1u;
                if (_2929 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2922 = _2770;
                    _2923 = _2772;
                    _2924 = _2774;
                    _2925 = _2776;
                    _2926 = _2778;
                    _2927 = _2780;
                    _2928 = _2929;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2769 = _2770;
            _2771 = _2772;
            _2773 = _2774;
            _2775 = _2776;
            _2777 = _2778;
            _2779 = _2780;
        }
        uvec4 _2783 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2784 = _2783.z;
        uint _2786 = (_2784 >> 8u) & 15u;
        float _2890;
        float _2892;
        float _2894;
        float _2896;
        float _2898;
        float _2900;
        if (((4294967295u << _2786) & _2668) == 0u)
        {
            _2890 = _2769;
            _2892 = _2771;
            _2894 = _2773;
            _2896 = _2775;
            _2898 = _2777;
            _2900 = _2779;
        }
        else
        {
            float _2915 = inversesqrt(dot(vec3(_2622, _2623, _2624), vec3(_2622, _2623, _2624)));
            float _2916 = _2915 * _2622;
            float _2917 = _2915 * _2623;
            float _2918 = _2915 * _2624;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2786 < ((_2784 >> 12u) & 15u))
            {
                float _2891;
                float _2893;
                float _2895;
                float _2897;
                float _2899;
                float _2901;
                float _3050 = _2769;
                float _3051 = _2771;
                float _3052 = _2773;
                float _3053 = _2775;
                float _3054 = _2777;
                float _3055 = _2779;
                uint _3056 = _2786;
                uint _3065;
                bool _3066;
                for (;;)
                {
                    _3065 = texelFetch(g_lightClassification, int((((_2662 << 5u) + (_2648 << 9u)) + (_3056 << 2u)) >> 2u)).x;
                    _3066 = _3065 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3066)
                    {
                        frontier_phi_77_pred = _3055;
                        frontier_phi_77_pred_1 = _3054;
                        frontier_phi_77_pred_2 = _3053;
                        frontier_phi_77_pred_3 = _3052;
                        frontier_phi_77_pred_4 = _3051;
                        frontier_phi_77_pred_5 = _3050;
                    }
                    else
                    {
                        float _3259;
                        float _3260;
                        float _3261;
                        float _3262;
                        float _3263;
                        float _3264;
                        float _3552;
                        float _3553;
                        float _3554;
                        float _3555;
                        float _3556;
                        float _3557;
                        float _3272 = _3050;
                        float _3273 = _3051;
                        float _3274 = _3052;
                        float _3275 = _3053;
                        float _3276 = _3054;
                        float _3277 = _3055;
                        uint _3278 = _3065;
                        uint _3279;
                        vec4 _3304;
                        float _3305;
                        vec4 _3320;
                        vec3 _3332;
                        vec4 _3347;
                        vec4 _3362;
                        float _3408;
                        bool _3409;
                        for (;;)
                        {
                            uint _3289 = ((_3056 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3278));
                            _3279 = (_3278 + 4294967295u) & _3278;
                            uint _3291 = _3289 * 40u;
                            _3304 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3291)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 3u)).x));
                            _3305 = _3304.w;
                            uint _3307 = (_3289 * 40u) + 4u;
                            _3320 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3307)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 3u)).x));
                            uint _3322 = (_3289 * 40u) + 8u;
                            _3332 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3322)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 2u)).x));
                            uint _3334 = (_3289 * 40u) + 16u;
                            _3347 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3334)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3334 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3334 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3334 + 3u)).x));
                            uint _3349 = (_3289 * 40u) + 20u;
                            _3362 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3349)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3349 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3349 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3349 + 3u)).x));
                            uint _3364 = (_3289 * 40u) + 24u;
                            vec4 _3377 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3364)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 3u)).x));
                            uint _3383 = (_3289 * 40u) + 28u;
                            vec4 _3396 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3383)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 3u)).x));
                            _3408 = fma(_2624, _3396.z, fma(_2623, _3396.y, _3396.x * _2622)) + _3396.w;
                            _3409 = !((fma(_2624, _3377.z, fma(_2623, _3377.y, _3377.x * _2622)) + _3377.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3409)
                            {
                                float _3436 = _3304.x - _2622;
                                float _3437 = _3304.y - _2623;
                                float _3438 = _3304.z - _2624;
                                float _3439 = dot(vec3(_3436, _3437, _3438), vec3(_3436, _3437, _3438));
                                float _3442 = inversesqrt(_3439);
                                float _3443 = _3442 * _3436;
                                float _3444 = _3442 * _3437;
                                float _3445 = _3442 * _3438;
                                float _3449 = 1.0 - (_3439 / (_3305 * _3305));
                                float _4576 = isnan(0.0) ? _3449 : (isnan(_3449) ? 0.0 : max(_3449, 0.0));
                                float _3450 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
                                float _3454 = sqrt(_3439) * _3320.w;
                                float _3456 = 1.39999997615814208984375 / (_3454 + 1.39999997615814208984375);
                                float _3457 = _3456 * _3456;
                                float _3460 = ((1.0 - _3457) * dot(vec3(_3443, _3444, _3445), vec3(_834, _837, _840))) + _3457;
                                float _3463 = _3454 * _3454;
                                float _3467 = (fma(_2624, _3347.z, fma(_2623, _3347.y, _3347.x * _2622)) + _3347.w) / _3408;
                                float _3468 = (fma(_2624, _3362.z, fma(_2623, _3362.y, _3362.x * _2622)) + _3362.w) / _3408;
                                float _3472 = 1.0 - dot(vec2(_3467, _3468), vec2(_3467, _3468));
                                float _4592 = isnan(0.0) ? _3472 : (isnan(_3472) ? 0.0 : max(_3472, 0.0));
                                float _3473 = isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0));
                                float _3474 = _3473 * (((isnan(0.0) ? _3460 : (isnan(_3460) ? 0.0 : max(_3460, 0.0))) * _3450) / ((_3463 * 0.699999988079071044921875) + 1.0));
                                float _3486 = exp2(log2(1.0 / ((_3463 * 3.5) + 5.0)) * 0.25);
                                float _3487 = 1.0 - _909;
                                float _3494 = sqrt(1.0 - ((1.0 - (_3487 * _3487)) * (1.0 - (_3486 * _3486))));
                                float _3495 = _3494 * _3494;
                                float _3496 = _3495 * _3495;
                                float _3497 = _3443 - _2916;
                                float _3498 = _3444 - _2917;
                                float _3499 = _3445 - _2918;
                                float _3503 = inversesqrt(dot(vec3(_3497, _3498, _3499), vec3(_3497, _3498, _3499)));
                                float _3507 = dot(vec3(_834, _837, _840), vec3((-0.0) - _2916, (-0.0) - _2917, (-0.0) - _2918));
                                float _4603 = isnan(0.0) ? _3507 : (isnan(_3507) ? 0.0 : max(_3507, 0.0));
                                float _3510 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
                                float _3511 = dot(vec3(_834, _837, _840), vec3(_3503 * _3497, _3503 * _3498, _3503 * _3499));
                                float _4614 = isnan(0.0) ? _3511 : (isnan(_3511) ? 0.0 : max(_3511, 0.0));
                                float _3514 = isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0));
                                float _3518 = ((_3514 * _3514) * (_3496 + (-1.0))) + 1.0;
                                float _3519 = _3456 * _3495;
                                float _3520 = _3519 * _3519;
                                float _3526 = ((1.0 - _3520) * dot(vec3(_834, _837, _840), vec3(_3443, _3444, _3445))) + _3520;
                                float _4625 = isnan(0.0) ? _3526 : (isnan(_3526) ? 0.0 : max(_3526, 0.0));
                                float _3527 = isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0));
                                float _3528 = 1.0 - _3495;
                                float _3538 = (0.5 / (((_3527 * ((_3510 * _3528) + _3495)) + 9.9999999392252902907785028219223e-09) + (((_3527 * _3528) + _3495) * _3510))) * _3527;
                                float _4636 = isnan(0.0) ? _3538 : (isnan(_3538) ? 0.0 : max(_3538, 0.0));
                                float _3548 = (_3473 * _3450) * (((_3496 * 3.1415927410125732421875) * (isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0)))) / ((_3518 * _3518) * ((_3463 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3474 * _3320.y;
                                frontier_phi_83_pred_1 = _3474 * _3320.x;
                                frontier_phi_83_pred_2 = _3548 * _3332.z;
                                frontier_phi_83_pred_3 = _3548 * _3332.y;
                                frontier_phi_83_pred_4 = _3548 * _3332.x;
                                frontier_phi_83_pred_5 = _3474 * _3320.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3556 = frontier_phi_83_pred;
                            _3555 = frontier_phi_83_pred_1;
                            _3554 = frontier_phi_83_pred_2;
                            _3553 = frontier_phi_83_pred_3;
                            _3552 = frontier_phi_83_pred_4;
                            _3557 = frontier_phi_83_pred_5;
                            _3262 = _3555 + _3275;
                            _3263 = _3556 + _3276;
                            _3264 = _3557 + _3277;
                            _3259 = _3552 + _3272;
                            _3260 = _3553 + _3273;
                            _3261 = _3554 + _3274;
                            if (_3279 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3272 = _3259;
                                _3273 = _3260;
                                _3274 = _3261;
                                _3275 = _3262;
                                _3276 = _3263;
                                _3277 = _3264;
                                _3278 = _3279;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3264;
                        frontier_phi_77_pred_1 = _3263;
                        frontier_phi_77_pred_2 = _3262;
                        frontier_phi_77_pred_3 = _3261;
                        frontier_phi_77_pred_4 = _3260;
                        frontier_phi_77_pred_5 = _3259;
                    }
                    _2901 = frontier_phi_77_pred;
                    _2899 = frontier_phi_77_pred_1;
                    _2897 = frontier_phi_77_pred_2;
                    _2895 = frontier_phi_77_pred_3;
                    _2893 = frontier_phi_77_pred_4;
                    _2891 = frontier_phi_77_pred_5;
                    uint _3057 = _3056 + 1u;
                    if (_3057 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3050 = _2891;
                        _3051 = _2893;
                        _3052 = _2895;
                        _3053 = _2897;
                        _3054 = _2899;
                        _3055 = _2901;
                        _3056 = _3057;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2895;
                frontier_phi_58_59_ladder_1 = _2901;
                frontier_phi_58_59_ladder_2 = _2899;
                frontier_phi_58_59_ladder_3 = _2897;
                frontier_phi_58_59_ladder_4 = _2893;
                frontier_phi_58_59_ladder_5 = _2891;
            }
            else
            {
                frontier_phi_58_59_ladder = _2773;
                frontier_phi_58_59_ladder_1 = _2779;
                frontier_phi_58_59_ladder_2 = _2777;
                frontier_phi_58_59_ladder_3 = _2775;
                frontier_phi_58_59_ladder_4 = _2771;
                frontier_phi_58_59_ladder_5 = _2769;
            }
            _2890 = frontier_phi_58_59_ladder_5;
            _2892 = frontier_phi_58_59_ladder_4;
            _2894 = frontier_phi_58_59_ladder;
            _2896 = frontier_phi_58_59_ladder_3;
            _2898 = frontier_phi_58_59_ladder_2;
            _2900 = frontier_phi_58_59_ladder_1;
        }
        float _2905 = isnan(1.0) ? _893 : (isnan(_893) ? 1.0 : min(_893, 1.0));
        _2681 = (_2905 * _2896) + _2114;
        _2683 = (_2905 * _2898) + _2116;
        _2685 = (_2905 * _2900) + _2118;
        _2687 = ((_2890 * _877) * _2905) + _2462;
        _2689 = ((_2892 * _879) * _2905) + _2464;
        _2691 = ((_2894 * _880) * _2905) + _2466;
    }
    else
    {
        _2681 = _2114;
        _2683 = _2116;
        _2685 = _2118;
        _2687 = _2462;
        _2689 = _2464;
        _2691 = _2466;
    }
    float _4652 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
    float _4663 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
    float _4674 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
    float _2708 = ((isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0))) * (_2681 + ((isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0))) * _893))) + ((_2687 + ((isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0))) * _1733)) * cbPerFrame._m0[3u].x);
    float _2709 = ((isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0))) * (_2683 + ((isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0))) * _893))) + ((_2689 + ((isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0))) * _1733)) * cbPerFrame._m0[3u].x);
    float _2710 = ((isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0))) * (_2685 + ((isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0))) * _893))) + ((_2691 + ((isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0))) * _1733)) * cbPerFrame._m0[3u].x);
    uint _2711 = _246 + 6u;
    float _2719 = _815 / cbSceneParam._m0[86u].x;
    float _2720 = _816 / cbSceneParam._m0[86u].y;
    vec4 _2734 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2719, _2720, (log2((isnan(cbSceneParam._m0[77u].w) ? _737 : (isnan(_737) ? cbSceneParam._m0[77u].w : min(_737, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2736 = _2734.x;
    float _2737 = _2734.y;
    float _2738 = _2734.z;
    float _2739 = _2734.w;
    float _2832;
    float _2834;
    float _2836;
    float _2838;
    if (_737 > cbSceneParam._m0[78u].w)
    {
        float _2794 = isnan(_737) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _737 : min(cbSceneParam._m0[80u].w, _737));
        float _2795 = _2794 / _737;
        float _2806 = _2795 * _788;
        float _2807 = _789 * _2795;
        float _2808 = (-0.0) - _2807;
        float _2810 = _2795 * _790;
        float _2812 = (cbSceneParam._m0[77u].w * _2808) / _2794;
        float _2813 = _2812 + cbSceneParam._m0[79u].w;
        float _2814 = cbSceneParam._m0[79u].w - _2807;
        float _2820 = sqrt(((_2806 * _2806) + (_2807 * _2807)) + (_2810 * _2810));
        float _2823 = (1.0 - (cbSceneParam._m0[77u].w / _2794)) * _2820;
        float _2828 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2830 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3007;
        if (abs((_2808 - _2812) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3007 = ((((_2813 > 0.0) ? exp2(_2828 * _2813) : (2.0 - exp2(_2830 * _2813))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2823;
        }
        else
        {
            float _2951 = 1.0 / cbSceneParam._m0[80u].x;
            float _2952 = isnan(_2814) ? _2813 : (isnan(_2813) ? _2814 : max(_2813, _2814));
            float _2953 = isnan(_2814) ? _2813 : (isnan(_2813) ? _2814 : min(_2813, _2814));
            float _2962 = isnan(0.0) ? _2952 : (isnan(_2952) ? 0.0 : min(_2952, 0.0));
            float _2963 = isnan(0.0) ? _2953 : (isnan(_2953) ? 0.0 : min(_2953, 0.0));
            _3007 = ((abs(_2820 / _2808) * cbSceneParam._m0[80u].y) * ((((_2962 - _2963) * 2.0) - ((exp2(_2828 * (isnan(0.0) ? _2952 : (isnan(_2952) ? 0.0 : max(_2952, 0.0)))) - exp2(_2828 * (isnan(0.0) ? _2953 : (isnan(_2953) ? 0.0 : max(_2953, 0.0))))) * _2951)) - ((exp2(_2830 * _2962) - exp2(_2830 * _2963)) * _2951))) + (_2823 * cbSceneParam._m0[80u].z);
        }
        vec4 _3009 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2719, _2720, 1.0), 0.0);
        float _3018 = exp2((_3007 * (-1.44269502162933349609375)) * (1.0 - _3009.w));
        float _3019 = log2(_3018);
        float _3035 = log2(_2739);
        _2832 = (exp2(_3035 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3019 * cbSceneParam._m0[78u].x)) * _3009.x) / cbSceneParam._m0[78u].x)) + _2736;
        _2834 = (exp2(_3035 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3019 * cbSceneParam._m0[78u].y)) * _3009.y) / cbSceneParam._m0[78u].y)) + _2737;
        _2836 = (exp2(_3035 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3019 * cbSceneParam._m0[78u].z)) * _3009.z) / cbSceneParam._m0[78u].z)) + _2738;
        _2838 = _3018 * _2739;
    }
    else
    {
        _2832 = _2736;
        _2834 = _2737;
        _2836 = _2738;
        _2838 = _2739;
    }
    bool _3045;
    vec4 _2848;
    vec4 _2870;
    float _2872;
    float _2876;
    float _2877;
    float _2878;
    float _2879;
    bool _2889;
    for (;;)
    {
        _2848 = cbMatDynParam._m0[0u];
        float _2850 = roundEven(_2848.y);
        bool _2851 = _2850 == 3.0;
        float _2852 = log2(_2838);
        float _2859 = exp2(_2852 * cbSceneParam._m0[78u].x) * _2708;
        float _2860 = exp2(_2852 * cbSceneParam._m0[78u].y) * _2709;
        float _2861 = exp2(_2852 * cbSceneParam._m0[78u].z) * _2710;
        float _2868 = _804 + (-0.5);
        _2870 = cbMtdParam._m0[1u];
        _2872 = _2870.y * _2868;
        float _2875 = (_2850 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2876 = _2875 * (_2851 ? _2859 : (_2859 + (cbSceneParam._m0[72u].w * _2832)));
        _2877 = _2875 * (_2851 ? _2860 : (_2860 + (cbSceneParam._m0[72u].w * _2834)));
        _2878 = _2875 * (_2851 ? _2861 : (_2861 + (cbSceneParam._m0[72u].w * _2836)));
        _2879 = _2868 * 0.999000012874603271484375;
        _2889 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2889)
        {
            if ((cbInstanceData._m0[_246 + 7u].x + _2879) < 0.5)
            {
                _3045 = true;
                break;
            }
        }
        uint _2986 = _853 + uint(_2848.w);
        if ((cbInstanceData._m0[_2986].w < 1.0) && ((cbInstanceData._m0[_2986].w + _2879) < 0.5))
        {
            _3045 = true;
            break;
        }
        if ((_2872 + 1.0) < _2870.x)
        {
            _3045 = true;
            break;
        }
        _3045 = false;
        break;
    }
    float _3250;
    if (_3045)
    {
        discard_state = true;
        _3250 = 0.0;
    }
    else
    {
        _3250 = cbInstanceData._m0[_2711].w;
    }
    SV_Target.x = _2876;
    SV_Target.y = _2877;
    SV_Target.z = _2878;
    SV_Target.w = _3250;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2711].w;
    discard_exit();
}


