#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 18) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_28;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1114;
float _3522;
float _3523;
float _3524;
float _3525;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _209 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _210 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _211 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _217 = inversesqrt(dot(vec3(_209, _210, _211), vec3(_209, _210, _211)));
    float _224 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _225 = _224 * NORMAL.x;
    float _226 = _224 * NORMAL.y;
    float _227 = _224 * NORMAL.z;
    float _231 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _255 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _261 = _255.x * cbMtdParam._m0[9u].x;
    float _262 = _255.y * cbMtdParam._m0[9u].y;
    float _263 = _255.z * cbMtdParam._m0[9u].z;
    vec4 _276 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _280 = _276.z;
    float _285 = (_276.x * 2.0) + (-1.0);
    float _287 = (_276.y * 2.0) + (-1.0);
    float _288 = dot(vec2(_285, _287), vec2(_285, _287));
    float _3534 = isnan(0.0) ? _288 : (isnan(_288) ? 0.0 : max(_288, 0.0));
    float _294 = sqrt(1.0 - (isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0))));
    uint _295 = uint(roundEven(NORMAL.w)) * 13u;
    uint _300 = _295 + 1u;
    uint _304 = _295 + 2u;
    float _313 = sqrt(((cbInstanceData._m0[_300].x * cbInstanceData._m0[_300].x) + (cbInstanceData._m0[_295].x * cbInstanceData._m0[_295].x)) + (cbInstanceData._m0[_304].x * cbInstanceData._m0[_304].x));
    float _314 = _313 * TEXCOORD.z;
    float _315 = _313 * TEXCOORD.w;
    vec4 _328 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _314) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _315) + cbTextureTilingScale._m0[19u].w));
    float _330 = _328.x;
    float _331 = 1.0 - _330;
    float _364 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_330 - _331) * cbMtdParam._m0[24u].w) + _331) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3545 = isnan(0.0) ? _364 : (isnan(_364) ? 0.0 : max(_364, 0.0));
    float _365 = isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0));
    float _373 = ((((cbMtdParam._m0[10u].x - _261) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _365) + _261;
    float _374 = ((((cbMtdParam._m0[10u].y - _262) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _365) + _262;
    float _375 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _263)) * _365) + _263;
    vec4 _388 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _390 = _388.x;
    float _392 = _390 - (_390 * _365);
    float _396 = ((cbMtdParam._m0[23u].y - _280) * _365) + _280;
    vec4 _418 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _314) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _315) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _420 = _418.x;
    float _421 = _418.y;
    float _428 = dot(vec4(cbMtdParam._m0[29u].yzw, 0.0), vec4(_225, _226, _227, 0.0));
    vec4 _443 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_28, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * _314) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * _315) + cbTextureTilingScale._m0[18u].w));
    float _445 = _443.x;
    float _450 = fract(_443.w + cbPerFrame._m0[22u].x);
    float _452 = (1.0 - _450) * _445;
    float _457 = ((_450 + (-1.0)) + _445) * 9.0;
    float _459 = ((_445 + (-1.0)) + _450) * 9.0;
    float _460 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _461 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _475 = (_452 * ((_443.y * 2.0) + (-1.0))) * sin((isnan(3.0) ? _460 : (isnan(_460) ? 3.0 : min(_460, 3.0))) * 3.1415927410125732421875);
    float _477 = (_452 * ((_443.z * 2.0) + (-1.0))) * sin((isnan(3.0) ? _461 : (isnan(_461) ? 3.0 : min(_461, 3.0))) * 3.1415927410125732421875);
    float _481 = inversesqrt(dot(vec3(_475, _477, 1.0), vec3(_475, _477, 1.0)));
    float _497 = (((((0.5 - _420) + ((_475 * 0.5) * _481)) * _428) + _420) * 2.0) + (-1.0);
    float _498 = (((((0.5 - _421) + ((_481 * 0.5) * _477)) * _428) + _421) * 2.0) + (-1.0);
    float _499 = dot(vec2(_497, _498), vec2(_497, _498));
    float _3576 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    float _515 = ((((cbMtdParam._m0[22u].z * _285) - _285) + _497) * _365) + _285;
    float _516 = ((((cbMtdParam._m0[22u].z * _287) - _287) + _498) * _365) + _287;
    float _517 = (_365 * (sqrt(1.0 - (isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0)))) - _294)) + _294;
    float _519 = cbMtdParam._m0[22u].x + _276.w;
    float _522 = fma(_517, _225, fma(_516, _231 * TANGENT.x, (_217 * _209) * _515));
    float _525 = fma(_517, _226, fma(_516, _231 * TANGENT.y, (_217 * _210) * _515));
    float _528 = fma(_517, _227, fma(_516, _231 * TANGENT.z, (_217 * _211) * _515));
    float _532 = inversesqrt(dot(vec3(_522, _525, _528), vec3(_522, _525, _528)));
    float _533 = _532 * _522;
    float _534 = _532 * _525;
    float _535 = _532 * _528;
    float _3587 = isnan(0.0) ? _396 : (isnan(_396) ? 0.0 : max(_396, 0.0));
    float _536 = isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0));
    float _3598 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _3609 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _3620 = isnan(0.0) ? _374 : (isnan(_374) ? 0.0 : max(_374, 0.0));
    float _3631 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _3642 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _541 = isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0));
    float _555 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _596 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _606 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _596);
    float _607 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _596);
    float _608 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _596);
    float _612 = inversesqrt(dot(vec3(_606, _607, _608), vec3(_606, _607, _608)));
    float _613 = _606 * _612;
    float _614 = _607 * _612;
    float _615 = _608 * _612;
    vec4 _620 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _622 = _620.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _796 = sqrt(((_606 * _606) + (_607 * _607)) + (_608 * _608));
        float _802 = (cbMatDynParam._m0[5u].x * _796) + cbMatDynParam._m0[5u].y;
        float _3653 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
        float _803 = isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0));
        float _807 = (cbMatDynParam._m0[5u].z * _796) + cbMatDynParam._m0[5u].w;
        float _3664 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0))) - _803)) + _803) < ((_622 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _634 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _635 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _655 = fma(_535, cbSceneParam._m0[5u].z, fma(_534, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _533));
    float _658 = fma(_535, cbSceneParam._m0[6u].z, fma(_534, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _533));
    float _661 = fma(_535, cbSceneParam._m0[7u].z, fma(_534, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _533));
    uint _674 = _295 + 9u;
    uint _675 = _674 + uint(cbMatDynParam._m0[0u].w);
    float _681 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0)))) * cbInstanceData._m0[_675].x;
    float _682 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0)))) * cbInstanceData._m0[_675].y;
    float _683 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0)))) * cbInstanceData._m0[_675].z;
    float _3675 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
    float _684 = isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0));
    float _3686 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _685 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
    float _3697 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
    float _686 = isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0));
    float _687 = 1.0 - _541;
    float _688 = _684 * _687;
    float _689 = _685 * _687;
    float _690 = _686 * _687;
    float _695 = (_684 + (-0.039999999105930328369140625)) * _541;
    float _696 = (_685 + (-0.039999999105930328369140625)) * _541;
    float _697 = (_686 + (-0.039999999105930328369140625)) * _541;
    float _698 = _695 + 0.039999999105930328369140625;
    float _700 = _696 + 0.039999999105930328369140625;
    float _701 = _697 + 0.039999999105930328369140625;
    vec4 _710 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _634, cbSceneParam._m0[86u].y * _635));
    float _714 = ((isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0))) * TEXCOORD_5.w) * _710.x;
    float _715 = dot(vec3(_533, _534, _535), vec3(_613, _614, _615));
    float _718 = _715 * 2.0;
    float _722 = (_718 * _533) - _613;
    float _723 = (_718 * _534) - _614;
    float _724 = (_718 * _535) - _615;
    float _728 = abs(dot(vec3(_613, _614, _615), vec3(_533, _534, _535)));
    float _3708 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
    float _730 = sqrt(_536);
    float _742 = exp2((_730 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_730 * 3.0));
    float _748 = (1.0 - _742) * ((_730 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _749 = _742 * _730;
    float _777 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _781 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _785 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1113;
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _839 = fma(_785, cbModelParam._m0[26u].z, fma(_781, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _777));
        float _843 = fma(_785, cbModelParam._m0[27u].z, fma(_781, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _777));
        float _847 = fma(_785, cbModelParam._m0[28u].z, fma(_781, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _777));
        float _871 = _777 + _533;
        float _872 = _781 + _534;
        float _873 = _785 + _535;
        float _883 = fma(_873, cbModelParam._m0[26u].z, fma(_872, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _871)) - _839;
        float _884 = fma(_873, cbModelParam._m0[27u].z, fma(_872, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _871)) - _843;
        float _885 = fma(_873, cbModelParam._m0[28u].z, fma(_872, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _871)) - _847;
        float _889 = inversesqrt(dot(vec3(_883, _884, _885), vec3(_883, _884, _885)));
        float _902 = ((_889 * _883) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_839 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _903 = ((_889 * _884) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_843 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _904 = ((_889 * _885) / cbModelParam._m0[34u].z) + ((((((_847 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _907 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_902, _903, _904), 0.0);
        vec4 _914 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_902, _903, _904), 0.0);
        vec4 _921 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_902, _903, _904), 0.0);
        vec4 _928 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_902, _903, _904), 0.0);
        float _941 = exp2((_907.w + (-0.5)) * 20.0) * 2.0;
        float _942 = _941 * (_907.x + (-0.5));
        float _943 = _941 * (_907.y + (-0.5));
        float _944 = _941 * (_907.z + (-0.5));
        float _951 = exp2((_914.w + (-0.5)) * 20.0) * 2.0;
        float _952 = _951 * (_914.x + (-0.5));
        float _953 = _951 * (_914.y + (-0.5));
        float _954 = _951 * (_914.z + (-0.5));
        float _961 = exp2((_921.w + (-0.5)) * 20.0) * 2.0;
        float _962 = _961 * (_921.x + (-0.5));
        float _963 = _961 * (_921.y + (-0.5));
        float _964 = _961 * (_921.z + (-0.5));
        float _971 = exp2((_928.w + (-0.5)) * 20.0) * 2.0;
        float _972 = _971 * (_928.x + (-0.5));
        float _973 = _971 * (_928.y + (-0.5));
        float _974 = _971 * (_928.z + (-0.5));
        float _975 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        float _976 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _977 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
        float _978 = _942 * 0.5;
        float _979 = _952 * 0.5;
        float _980 = _962 * 0.5;
        float _981 = dot(vec3(_978, _979, _980), vec3(_978, _979, _980));
        float _986 = (_981 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_981);
        float _995 = (dot(vec3(_533, _534, _535), vec3(_986 * _978, _986 * _979, _986 * _980)) + 1.0) * 0.5;
        float _3734 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _1005 = sqrt(((_979 * _979) + (_978 * _978)) + (_980 * _980)) / (_975 + 9.9999997473787516355514526367188e-06);
        float _3745 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
        float _1006 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
        float _1007 = _1006 * 2.0;
        float _1011 = (1.0 - _1006) / (_1006 + 1.0);
        float _3756 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1012 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
        float _1021 = ((((1.0 - _1012) * (_1007 + 2.0)) * exp2(log2(isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0))) * (_1007 + 1.0))) + _1012) * _975;
        float _1022 = _943 * 0.5;
        float _1023 = _953 * 0.5;
        float _1024 = _963 * 0.5;
        float _1025 = dot(vec3(_1022, _1023, _1024), vec3(_1022, _1023, _1024));
        float _1030 = (_1025 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1025);
        float _1038 = (dot(vec3(_533, _534, _535), vec3(_1030 * _1022, _1030 * _1023, _1030 * _1024)) + 1.0) * 0.5;
        float _3767 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        float _1047 = sqrt(((_1023 * _1023) + (_1022 * _1022)) + (_1024 * _1024)) / (_976 + 9.9999997473787516355514526367188e-06);
        float _3778 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1048 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
        float _1049 = _1048 * 2.0;
        float _1053 = (1.0 - _1048) / (_1048 + 1.0);
        float _3789 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1054 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
        float _1063 = ((((1.0 - _1054) * (_1049 + 2.0)) * exp2(log2(isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0))) * (_1049 + 1.0))) + _1054) * _976;
        float _1064 = _944 * 0.5;
        float _1065 = _954 * 0.5;
        float _1066 = _964 * 0.5;
        float _1067 = dot(vec3(_1064, _1065, _1066), vec3(_1064, _1065, _1066));
        float _1072 = (_1067 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1067);
        float _1080 = (dot(vec3(_533, _534, _535), vec3(_1072 * _1064, _1072 * _1065, _1072 * _1066)) + 1.0) * 0.5;
        float _3800 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1089 = sqrt(((_1065 * _1065) + (_1064 * _1064)) + (_1066 * _1066)) / (_977 + 9.9999997473787516355514526367188e-06);
        float _3811 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1090 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
        float _1091 = _1090 * 2.0;
        float _1095 = (1.0 - _1090) / (_1090 + 1.0);
        float _3822 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1096 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
        float _1105 = ((((1.0 - _1096) * (_1091 + 2.0)) * exp2(log2(isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0))) * (_1091 + 1.0))) + _1096) * _977;
        _1113 = _944;
        _1115 = _943;
        _1116 = _942;
        _1117 = _954;
        _1118 = _953;
        _1119 = _952;
        _1120 = _964;
        _1121 = _963;
        _1122 = _962;
        _1123 = _977;
        _1124 = _976;
        _1125 = _975;
        _1126 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0)));
        _1127 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0)));
        _1128 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0)));
    }
    else
    {
        _1113 = _1114;
        _1115 = _1114;
        _1116 = _1114;
        _1117 = _1114;
        _1118 = _1114;
        _1119 = _1114;
        _1120 = _1114;
        _1121 = _1114;
        _1122 = _1114;
        _1123 = _1114;
        _1124 = _1114;
        _1125 = _1114;
        _1126 = 0.0;
        _1127 = 0.0;
        _1128 = 0.0;
    }
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1156 = fma(_785, cbModelParam._m0[30u].z, fma(_781, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _777));
        float _1160 = fma(_785, cbModelParam._m0[31u].z, fma(_781, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _777));
        float _1164 = fma(_785, cbModelParam._m0[32u].z, fma(_781, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _777));
        float _1187 = _777 + _533;
        float _1188 = _781 + _534;
        float _1189 = _785 + _535;
        float _1199 = fma(_1189, cbModelParam._m0[30u].z, fma(_1188, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1187)) - _1156;
        float _1200 = fma(_1189, cbModelParam._m0[31u].z, fma(_1188, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1187)) - _1160;
        float _1201 = fma(_1189, cbModelParam._m0[32u].z, fma(_1188, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1187)) - _1164;
        float _1205 = inversesqrt(dot(vec3(_1199, _1200, _1201), vec3(_1199, _1200, _1201)));
        float _1218 = ((_1205 * _1199) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1156 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1219 = ((_1205 * _1200) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1160 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1220 = ((_1205 * _1201) / cbModelParam._m0[35u].z) + ((((((_1164 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1222 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1218, _1219, _1220), 0.0);
        vec4 _1229 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1218, _1219, _1220), 0.0);
        vec4 _1236 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1218, _1219, _1220), 0.0);
        vec4 _1243 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1218, _1219, _1220), 0.0);
        float _1255 = exp2((_1222.w + (-0.5)) * 20.0) * 2.0;
        float _1256 = _1255 * (_1222.x + (-0.5));
        float _1257 = _1255 * (_1222.y + (-0.5));
        float _1258 = _1255 * (_1222.z + (-0.5));
        float _1265 = exp2((_1229.w + (-0.5)) * 20.0) * 2.0;
        float _1266 = _1265 * (_1229.x + (-0.5));
        float _1267 = _1265 * (_1229.y + (-0.5));
        float _1268 = _1265 * (_1229.z + (-0.5));
        float _1275 = exp2((_1236.w + (-0.5)) * 20.0) * 2.0;
        float _1276 = _1275 * (_1236.x + (-0.5));
        float _1277 = _1275 * (_1236.y + (-0.5));
        float _1278 = _1275 * (_1236.z + (-0.5));
        float _1285 = exp2((_1243.w + (-0.5)) * 20.0) * 2.0;
        float _1286 = _1285 * (_1243.x + (-0.5));
        float _1287 = _1285 * (_1243.y + (-0.5));
        float _1288 = _1285 * (_1243.z + (-0.5));
        float _1289 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1290 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1291 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1292 = _1256 * 0.5;
        float _1293 = _1266 * 0.5;
        float _1294 = _1276 * 0.5;
        float _1295 = dot(vec3(_1292, _1293, _1294), vec3(_1292, _1293, _1294));
        float _1300 = (_1295 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1295);
        float _1308 = (dot(vec3(_533, _534, _535), vec3(_1300 * _1292, _1300 * _1293, _1300 * _1294)) + 1.0) * 0.5;
        float _3863 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1317 = sqrt(((_1293 * _1293) + (_1292 * _1292)) + (_1294 * _1294)) / (_1289 + 9.9999997473787516355514526367188e-06);
        float _3874 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1318 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
        float _1319 = _1318 * 2.0;
        float _1323 = (1.0 - _1318) / (_1318 + 1.0);
        float _3885 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1324 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
        float _1333 = ((((1.0 - _1324) * (_1319 + 2.0)) * exp2(log2(isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0))) * (_1319 + 1.0))) + _1324) * _1289;
        float _1334 = _1257 * 0.5;
        float _1335 = _1267 * 0.5;
        float _1336 = _1277 * 0.5;
        float _1337 = dot(vec3(_1334, _1335, _1336), vec3(_1334, _1335, _1336));
        float _1342 = (_1337 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1337);
        float _1350 = (dot(vec3(_533, _534, _535), vec3(_1342 * _1334, _1342 * _1335, _1342 * _1336)) + 1.0) * 0.5;
        float _3896 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1359 = sqrt(((_1335 * _1335) + (_1334 * _1334)) + (_1336 * _1336)) / (_1290 + 9.9999997473787516355514526367188e-06);
        float _3907 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1360 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
        float _1361 = _1360 * 2.0;
        float _1365 = (1.0 - _1360) / (_1360 + 1.0);
        float _3918 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1366 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
        float _1375 = ((((1.0 - _1366) * (_1361 + 2.0)) * exp2(log2(isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0))) * (_1361 + 1.0))) + _1366) * _1290;
        float _1376 = _1258 * 0.5;
        float _1377 = _1268 * 0.5;
        float _1378 = _1278 * 0.5;
        float _1379 = dot(vec3(_1376, _1377, _1378), vec3(_1376, _1377, _1378));
        float _1384 = (_1379 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1379);
        float _1392 = (dot(vec3(_533, _534, _535), vec3(_1384 * _1376, _1384 * _1377, _1384 * _1378)) + 1.0) * 0.5;
        float _3929 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1401 = sqrt(((_1377 * _1377) + (_1376 * _1376)) + (_1378 * _1378)) / (_1291 + 9.9999997473787516355514526367188e-06);
        float _3940 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1402 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
        float _1403 = _1402 * 2.0;
        float _1407 = (1.0 - _1402) / (_1402 + 1.0);
        float _3951 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1408 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
        float _1417 = ((((1.0 - _1408) * (_1403 + 2.0)) * exp2(log2(isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0))) * (_1403 + 1.0))) + _1408) * _1291;
        _1425 = _1258;
        _1426 = _1257;
        _1427 = _1256;
        _1428 = _1268;
        _1429 = _1267;
        _1430 = _1266;
        _1431 = _1278;
        _1432 = _1277;
        _1433 = _1276;
        _1434 = _1291;
        _1435 = _1290;
        _1436 = _1289;
        _1437 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0)));
        _1438 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0)));
        _1439 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0)));
    }
    else
    {
        _1425 = _1114;
        _1426 = _1114;
        _1427 = _1114;
        _1428 = _1114;
        _1429 = _1114;
        _1430 = _1114;
        _1431 = _1114;
        _1432 = _1114;
        _1433 = _1114;
        _1434 = _1114;
        _1435 = _1114;
        _1436 = _1114;
        _1437 = 0.0;
        _1438 = 0.0;
        _1439 = 0.0;
    }
    float _1449 = (cbModelParam._m0[1u].x * (_1437 - _1126)) + _1126;
    float _1450 = (cbModelParam._m0[1u].x * (_1438 - _1127)) + _1127;
    float _1451 = (cbModelParam._m0[1u].x * (_1439 - _1128)) + _1128;
    float _1472 = fma(_1451, cbSceneParam._m0[89u].z, fma(_1450, cbSceneParam._m0[89u].y, _1449 * cbSceneParam._m0[89u].x));
    float _1475 = fma(_1451, cbSceneParam._m0[90u].z, fma(_1450, cbSceneParam._m0[90u].y, _1449 * cbSceneParam._m0[90u].x));
    float _1478 = fma(_1451, cbSceneParam._m0[91u].z, fma(_1450, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1449));
    float _1493 = _722 * 0.5;
    float _1494 = _723 * 0.5;
    float _1495 = _724 * 0.5;
    float _1496 = dot(vec4(_1493, _1494, _1495, 1.0), vec4(_1427, _1430, _1433, _1436));
    float _1499 = dot(vec4(_1493, _1494, _1495, 1.0), vec4(_1426, _1429, _1432, _1435));
    float _1502 = dot(vec4(_1493, _1494, _1495, 1.0), vec4(_1425, _1428, _1431, _1434));
    float _1536;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1509 = dot(vec4(_1493, _1494, _1495, 1.0), vec4(_1113, _1117, _1120, _1123));
        float _1513 = dot(vec4(_1493, _1494, _1495, 1.0), vec4(_1115, _1118, _1121, _1124));
        float _1517 = dot(vec4(_1493, _1494, _1495, 1.0), vec4(_1116, _1119, _1122, _1125));
        float _1524 = dot(vec4(cbModelParam._m0[39u]), vec4(_1493, _1494, _1495, 1.0));
        _1536 = dot(vec3(isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0)), isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0)), isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1524) ? 0.0 : (isnan(0.0) ? _1524 : max(0.0, _1524))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1536 = 1.0;
    }
    float _1547;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1538 = dot(vec4(cbModelParam._m0[40u]), vec4(_1493, _1494, _1495, 1.0));
        _1547 = dot(vec3(isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0)), isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0)), isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1538) ? 0.0 : (isnan(0.0) ? _1538 : max(0.0, _1538))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1547 = 1.0;
    }
    float _1551 = (_1547 * cbModelParam._m0[1u].x) + (_1536 * (1.0 - cbModelParam._m0[1u].x));
    float _1561 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _536);
    float _1562 = isnan(_1561) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1561 : min(cbModelParam._m0[25u].z, _1561));
    float _1644;
    float _1646;
    float _1648;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1611 = fma(_785, cbModelParam._m0[13u].z, fma(_781, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _777)) + cbModelParam._m0[13u].w;
        float _1615 = fma(_785, cbModelParam._m0[14u].z, fma(_781, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _777)) + cbModelParam._m0[14u].w;
        float _1619 = fma(_785, cbModelParam._m0[15u].z, fma(_781, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _777)) + cbModelParam._m0[15u].w;
        float _1622 = fma(_724, cbModelParam._m0[13u].z, fma(_723, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _722));
        float _1625 = fma(_724, cbModelParam._m0[14u].z, fma(_723, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _722));
        float _1628 = fma(_724, cbModelParam._m0[15u].z, fma(_723, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _722));
        float _1656;
        if (_1622 > 0.0)
        {
            _1656 = abs((1.0 - _1611) / _1622);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1622 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1611 + 1.0) / _1622);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1656 = frontier_phi_17_15_ladder;
        }
        float _1881;
        if (_1625 > 0.0)
        {
            _1881 = abs((1.0 - _1615) / _1625);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1625 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1615 + 1.0) / _1625);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1881 = frontier_phi_26_22_ladder;
        }
        float _2138;
        if (_1628 > 0.0)
        {
            _2138 = abs((1.0 - _1619) / _1628);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1628 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1619 + 1.0) / _1628);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2138 = frontier_phi_38_33_ladder;
        }
        float _2140 = isnan(_1881) ? _1656 : (isnan(_1656) ? _1881 : min(_1656, _1881));
        float _2141 = isnan(_2138) ? _2140 : (isnan(_2140) ? _2138 : min(_2140, _2138));
        float _2145 = (_2141 * _1622) + _1611;
        float _2146 = (_2141 * _1625) + _1615;
        float _2147 = (_2141 * _1628) + _1619;
        float _2148 = _2141 * 9.9999997473787516355514526367188e-05;
        float _2150 = (-1.0) - _2148;
        float _2152 = _2148 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2147 > _2152) || ((_2147 < _2150) || ((_2146 > _2152) || ((_2146 < _2150) || ((_2145 < _2150) || (_2145 > _2152))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2275 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2147, cbModelParam._m0[9u].z, fma(_2146, cbModelParam._m0[9u].y, _2145 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2147, cbModelParam._m0[10u].z, fma(_2146, cbModelParam._m0[10u].y, _2145 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2147, cbModelParam._m0[11u].z, fma(_2146, cbModelParam._m0[11u].y, _2145 * cbModelParam._m0[11u].x))), _1562);
            frontier_phi_16_38_ladder = _2275.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2275.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2275.x * cbModelParam._m0[1u].y;
        }
        _1644 = frontier_phi_16_38_ladder_2;
        _1646 = frontier_phi_16_38_ladder_1;
        _1648 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1632 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_722, _723, _724), _1562);
        _1644 = _1632.x * cbModelParam._m0[1u].y;
        _1646 = _1632.y * cbModelParam._m0[1u].y;
        _1648 = _1632.z * cbModelParam._m0[1u].y;
    }
    float _1652 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _536);
    float _1653 = isnan(_1652) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1652 : min(cbModelParam._m0[25u].w, _1652));
    float _1743;
    float _1745;
    float _1747;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1707 = fma(_785, cbModelParam._m0[21u].z, fma(_781, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _777)) + cbModelParam._m0[21u].w;
        float _1711 = fma(_785, cbModelParam._m0[22u].z, fma(_781, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _777)) + cbModelParam._m0[22u].w;
        float _1715 = fma(_785, cbModelParam._m0[23u].z, fma(_781, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _777)) + cbModelParam._m0[23u].w;
        float _1718 = fma(_724, cbModelParam._m0[21u].z, fma(_723, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _722));
        float _1721 = fma(_724, cbModelParam._m0[22u].z, fma(_723, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _722));
        float _1724 = fma(_724, cbModelParam._m0[23u].z, fma(_723, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _722));
        float _1886;
        if (_1718 > 0.0)
        {
            _1886 = abs((1.0 - _1707) / _1718);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1718 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1707 + 1.0) / _1718);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1886 = frontier_phi_28_24_ladder;
        }
        float _2165;
        if (_1721 > 0.0)
        {
            _2165 = abs((1.0 - _1711) / _1721);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1721 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1711 + 1.0) / _1721);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2165 = frontier_phi_40_35_ladder;
        }
        float _2378;
        if (_1724 > 0.0)
        {
            _2378 = abs((1.0 - _1715) / _1724);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1724 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1715 + 1.0) / _1724);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2378 = frontier_phi_49_46_ladder;
        }
        float _2380 = isnan(_2165) ? _1886 : (isnan(_1886) ? _2165 : min(_1886, _2165));
        float _2381 = isnan(_2378) ? _2380 : (isnan(_2380) ? _2378 : min(_2380, _2378));
        float _2385 = (_2381 * _1718) + _1707;
        float _2386 = (_2381 * _1721) + _1711;
        float _2387 = (_2381 * _1724) + _1715;
        float _2388 = _2381 * 9.9999997473787516355514526367188e-05;
        float _2389 = (-1.0) - _2388;
        float _2391 = _2388 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2387 > _2391) || ((_2387 < _2389) || ((_2386 > _2391) || ((_2386 < _2389) || ((_2385 < _2389) || (_2385 > _2391))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2586 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2387, cbModelParam._m0[17u].z, fma(_2386, cbModelParam._m0[17u].y, _2385 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2387, cbModelParam._m0[18u].z, fma(_2386, cbModelParam._m0[18u].y, _2385 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2387, cbModelParam._m0[19u].z, fma(_2386, cbModelParam._m0[19u].y, _2385 * cbModelParam._m0[19u].x))), _1653);
            frontier_phi_25_49_ladder = _2586.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2586.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2586.x * cbModelParam._m0[1u].z;
        }
        _1743 = frontier_phi_25_49_ladder_2;
        _1745 = frontier_phi_25_49_ladder_1;
        _1747 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1727 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_722, _723, _724), _1653);
        _1743 = _1727.x * cbModelParam._m0[1u].z;
        _1745 = _1727.y * cbModelParam._m0[1u].z;
        _1747 = _1727.z * cbModelParam._m0[1u].z;
    }
    float _1760 = (((_748 * _698) + _749) * _714) * ((cbModelParam._m0[1u].w * (_1743 - _1644)) + _1644);
    float _1762 = (((_748 * _700) + _749) * _714) * ((cbModelParam._m0[1u].w * (_1745 - _1646)) + _1646);
    float _1764 = (((_748 * _701) + _749) * _714) * ((cbModelParam._m0[1u].w * (_1747 - _1648)) + _1648);
    float _1767 = fma(_1764, cbSceneParam._m0[89u].z, fma(_1762, cbSceneParam._m0[89u].y, _1760 * cbSceneParam._m0[89u].x));
    float _1770 = fma(_1764, cbSceneParam._m0[90u].z, fma(_1762, cbSceneParam._m0[90u].y, _1760 * cbSceneParam._m0[90u].x));
    float _1773 = fma(_1764, cbSceneParam._m0[91u].z, fma(_1762, cbSceneParam._m0[91u].y, _1760 * cbSceneParam._m0[91u].x));
    vec4 _1781 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_634, _635));
    float _1783 = _1781.w;
    float _1795 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1783);
    float _1796 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1783);
    float _1797 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1783);
    uvec4 _1801 = floatBitsToUint(cbInstanceData._m0[_295 + 5u]);
    uint _1803 = _1801.x * 14u;
    uint _1804 = _1803 + 13u;
    float _1811 = _714 + (-1.0);
    float _1816 = (cbLight._m0[_1804].x * _1811) + 1.0;
    float _1817 = (cbLight._m0[_1804].y * _1811) + 1.0;
    float _1818 = (cbLight._m0[_1804].z * _1811) + 1.0;
    float _1819 = (cbLight._m0[_1804].w * _1811) + 1.0;
    uint _1820 = _1803 + 5u;
    float _1826 = isnan(1.0) ? _1817 : (isnan(_1817) ? 1.0 : min(_1817, 1.0));
    uint _1830 = _1803 + 4u;
    float _1840 = isnan(1.0) ? _1816 : (isnan(_1816) ? 1.0 : min(_1816, 1.0));
    uint _1844 = _1803 | 1u;
    float _1855 = dot(vec3(cbLight._m0[_1803].xyz), vec3(_533, _534, _535));
    float _1858 = dot(vec3(cbLight._m0[_1844].xyz), vec3(_533, _534, _535));
    float _4087 = isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0));
    float _4098 = isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0));
    float _1863 = (isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0))) * 0.3183098733425140380859375;
    float _1865 = (isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0))) * 0.3183098733425140380859375;
    float _1872 = ((cbLight._m0[_1820].x * _1826) * _1865) + (((cbLight._m0[_1830].x * _1795) * _1840) * _1863);
    float _1873 = ((_1826 * cbLight._m0[_1820].y) * _1865) + (((cbLight._m0[_1830].y * _1796) * _1840) * _1863);
    float _1874 = ((_1826 * cbLight._m0[_1820].z) * _1865) + (((cbLight._m0[_1830].z * _1797) * _1840) * _1863);
    uvec4 _1878 = floatBitsToUint(cbLight._m0[_1803 + 12u]);
    bool _1880 = _1878.x == 0u;
    float _1891;
    float _1893;
    float _1895;
    if (_1880)
    {
        _1891 = _1872;
        _1893 = _1873;
        _1895 = _1874;
    }
    else
    {
        uint _1899 = _1803 + 6u;
        float _1915 = (dot(vec3(cbLight._m0[_1803 + 2u].xyz), vec3(_533, _534, _535)) * 0.5) + 0.5;
        float _1916 = _1915 * _1915;
        float _4109 = isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0));
        float _1917 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
        float _1918 = isnan(1.0) ? _1818 : (isnan(_1818) ? 1.0 : min(_1818, 1.0));
        _1891 = (((cbLight._m0[_1899].x * 0.3183098733425140380859375) * _1917) * _1918) + _1872;
        _1893 = (((cbLight._m0[_1899].y * 0.3183098733425140380859375) * _1917) * _1918) + _1873;
        _1895 = (((cbLight._m0[_1899].z * 0.3183098733425140380859375) * _1917) * _1918) + _1874;
    }
    bool _1898 = _1878.y == 0u;
    float _1936;
    float _1938;
    float _1940;
    if (_1898)
    {
        _1936 = _1891;
        _1938 = _1893;
        _1940 = _1895;
    }
    else
    {
        uint _2109 = _1803 + 7u;
        float _2125 = (dot(vec3(cbLight._m0[_1803 + 3u].xyz), vec3(_533, _534, _535)) * 0.5) + 0.5;
        float _2126 = _2125 * _2125;
        float _4125 = isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0));
        float _2127 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
        float _2128 = isnan(1.0) ? _1819 : (isnan(_1819) ? 1.0 : min(_1819, 1.0));
        _1936 = (((cbLight._m0[_2109].x * 0.3183098733425140380859375) * _2127) * _2128) + _1891;
        _1938 = (((cbLight._m0[_2109].y * 0.3183098733425140380859375) * _2127) * _2128) + _1893;
        _1940 = (((cbLight._m0[_2109].z * 0.3183098733425140380859375) * _2127) * _2128) + _1895;
    }
    uint _1943 = _1803 + 8u;
    float _1956 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1803].w)) * _536) * 0.949999988079071044921875);
    float _1957 = _1956 * _1956;
    float _1958 = cbLight._m0[_1803].x + _613;
    float _1959 = cbLight._m0[_1803].y + _614;
    float _1960 = cbLight._m0[_1803].z + _615;
    float _1964 = inversesqrt(dot(vec3(_1958, _1959, _1960), vec3(_1958, _1959, _1960)));
    float _1965 = _1964 * _1958;
    float _1966 = _1964 * _1959;
    float _1967 = _1964 * _1960;
    float _1968 = dot(vec3(_533, _534, _535), vec3(cbLight._m0[_1803].xyz));
    float _4141 = isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0));
    float _1971 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
    float _4152 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _1972 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
    float _1973 = dot(vec3(_533, _534, _535), vec3(_1965, _1966, _1967));
    float _4163 = isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0));
    float _1976 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
    float _1977 = dot(vec3(cbLight._m0[_1803].xyz), vec3(_1965, _1966, _1967));
    float _4174 = isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0));
    float _1981 = _1957 * _1957;
    float _1985 = ((_1976 * _1976) * (_1981 + (-1.0))) + 1.0;
    float _1993 = exp2(log2(1.0 - (isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0)))) * 5.0);
    float _1994 = 0.959999978542327880859375 - _695;
    float _1996 = 0.959999978542327880859375 - _696;
    float _1997 = 0.959999978542327880859375 - _697;
    float _2004 = 1.0 - _1957;
    float _2015 = (0.5 / (((_1972 * ((_1971 * _2004) + _1957)) + 9.9999999392252902907785028219223e-09) + (((_1972 * _2004) + _1957) * _1971))) * _1971;
    float _4185 = isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0));
    float _2017 = (isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0))) * (_1981 / ((_1985 * _1985) * 3.141590118408203125));
    uint _2031 = _1803 + 9u;
    float _2042 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1844].w)) * _536) * 0.949999988079071044921875);
    float _2043 = _2042 * _2042;
    float _2044 = cbLight._m0[_1844].x + _613;
    float _2045 = cbLight._m0[_1844].y + _614;
    float _2046 = cbLight._m0[_1844].z + _615;
    float _2050 = inversesqrt(dot(vec3(_2044, _2045, _2046), vec3(_2044, _2045, _2046)));
    float _2051 = _2050 * _2044;
    float _2052 = _2050 * _2045;
    float _2053 = _2050 * _2046;
    float _2054 = dot(vec3(_533, _534, _535), vec3(cbLight._m0[_1844].xyz));
    float _4196 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
    float _2057 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
    float _2058 = dot(vec3(_533, _534, _535), vec3(_2051, _2052, _2053));
    float _4207 = isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0));
    float _2061 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
    float _2062 = dot(vec3(cbLight._m0[_1844].xyz), vec3(_2051, _2052, _2053));
    float _4218 = isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0));
    float _2066 = _2043 * _2043;
    float _2070 = ((_2061 * _2061) * (_2066 + (-1.0))) + 1.0;
    float _2077 = exp2(log2(1.0 - (isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0)))) * 5.0);
    float _2084 = 1.0 - _2043;
    float _2094 = (0.5 / (((_1972 * ((_2057 * _2084) + _2043)) + 9.9999999392252902907785028219223e-09) + (((_1972 * _2084) + _2043) * _2057))) * _2057;
    float _4229 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
    float _2096 = (isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0))) * (_2066 / ((_2070 * _2070) * 3.141590118408203125));
    float _2106 = (((((_2077 * _1994) + _698) * cbLight._m0[_2031].x) * _2096) * _1826) + ((((cbLight._m0[_1943].x * _1795) * ((_1993 * _1994) + _698)) * _2017) * _1840);
    float _2107 = (((((_2077 * _1996) + _700) * cbLight._m0[_2031].y) * _2096) * _1826) + ((((cbLight._m0[_1943].y * _1796) * ((_1993 * _1996) + _700)) * _2017) * _1840);
    float _2108 = (((((_2077 * _1997) + _701) * cbLight._m0[_2031].z) * _2096) * _1826) + ((((cbLight._m0[_1943].z * _1797) * ((_1993 * _1997) + _701)) * _2017) * _1840);
    float _2170;
    float _2172;
    float _2174;
    if (_1880)
    {
        _2170 = _2106;
        _2172 = _2107;
        _2174 = _2108;
    }
    else
    {
        uint _2176 = _1803 + 2u;
        uint _2180 = _1803 + 10u;
        float _2194 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2176].w)) * _536) * 0.949999988079071044921875);
        float _2195 = _2194 * _2194;
        float _2196 = cbLight._m0[_2176].x + _613;
        float _2197 = cbLight._m0[_2176].y + _614;
        float _2198 = cbLight._m0[_2176].z + _615;
        float _2202 = inversesqrt(dot(vec3(_2196, _2197, _2198), vec3(_2196, _2197, _2198)));
        float _2203 = _2202 * _2196;
        float _2204 = _2202 * _2197;
        float _2205 = _2202 * _2198;
        float _2206 = dot(vec3(_533, _534, _535), vec3(cbLight._m0[_2176].xyz));
        float _4240 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
        float _2209 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
        float _2210 = dot(vec3(_533, _534, _535), vec3(_2203, _2204, _2205));
        float _4251 = isnan(0.0) ? _2210 : (isnan(_2210) ? 0.0 : max(_2210, 0.0));
        float _2213 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
        float _2214 = dot(vec3(cbLight._m0[_2176].xyz), vec3(_2203, _2204, _2205));
        float _4262 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
        float _2218 = _2195 * _2195;
        float _2222 = ((_2213 * _2213) * (_2218 + (-1.0))) + 1.0;
        float _2229 = exp2(log2(1.0 - (isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0)))) * 5.0);
        float _2236 = 1.0 - _2195;
        float _2246 = (0.5 / (((_1972 * ((_2209 * _2236) + _2195)) + 9.9999999392252902907785028219223e-09) + (((_1972 * _2236) + _2195) * _2209))) * _2209;
        float _4273 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
        float _2248 = (isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0))) * (_2218 / ((_2222 * _2222) * 3.141590118408203125));
        float _2249 = isnan(1.0) ? _1818 : (isnan(_1818) ? 1.0 : min(_1818, 1.0));
        _2170 = (((((_2229 * _1994) + _698) * cbLight._m0[_2180].x) * _2248) * _2249) + _2106;
        _2172 = (((((_2229 * _1996) + _700) * cbLight._m0[_2180].y) * _2248) * _2249) + _2107;
        _2174 = (((((_2229 * _1997) + _701) * cbLight._m0[_2180].z) * _2248) * _2249) + _2108;
    }
    float _2284;
    float _2286;
    float _2288;
    if (_1898)
    {
        _2284 = _2170;
        _2286 = _2172;
        _2288 = _2174;
    }
    else
    {
        uint _2295 = _1803 + 3u;
        uint _2299 = _1803 + 11u;
        float _2313 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2295].w)) * _536) * 0.949999988079071044921875);
        float _2314 = _2313 * _2313;
        float _2315 = cbLight._m0[_2295].x + _613;
        float _2316 = cbLight._m0[_2295].y + _614;
        float _2317 = cbLight._m0[_2295].z + _615;
        float _2321 = inversesqrt(dot(vec3(_2315, _2316, _2317), vec3(_2315, _2316, _2317)));
        float _2322 = _2321 * _2315;
        float _2323 = _2321 * _2316;
        float _2324 = _2321 * _2317;
        float _2325 = dot(vec3(_533, _534, _535), vec3(cbLight._m0[_2295].xyz));
        float _4289 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
        float _2328 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
        float _2329 = dot(vec3(_533, _534, _535), vec3(_2322, _2323, _2324));
        float _4300 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
        float _2332 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
        float _2333 = dot(vec3(cbLight._m0[_2295].xyz), vec3(_2322, _2323, _2324));
        float _4311 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
        float _2337 = _2314 * _2314;
        float _2341 = ((_2332 * _2332) * (_2337 + (-1.0))) + 1.0;
        float _2348 = exp2(log2(1.0 - (isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0)))) * 5.0);
        float _2355 = 1.0 - _2314;
        float _2365 = (0.5 / (((_1972 * ((_2328 * _2355) + _2314)) + 9.9999999392252902907785028219223e-09) + (((_1972 * _2355) + _2314) * _2328))) * _2328;
        float _4322 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
        float _2367 = (isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0))) * (_2337 / ((_2341 * _2341) * 3.141590118408203125));
        float _2368 = isnan(1.0) ? _1819 : (isnan(_1819) ? 1.0 : min(_1819, 1.0));
        _2284 = (((((_2348 * _1994) + _698) * cbLight._m0[_2299].x) * _2367) * _2368) + _2170;
        _2286 = (((((_2348 * _1996) + _700) * cbLight._m0[_2299].y) * _2367) * _2368) + _2172;
        _2288 = (((((_2348 * _1997) + _701) * cbLight._m0[_2299].z) * _2367) * _2368) + _2174;
    }
    float _2503;
    float _2505;
    float _2507;
    float _2509;
    float _2511;
    float _2513;
    if (_1801.y == 0u)
    {
        float _2443 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2444 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2443;
        float _2445 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2443;
        float _2446 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2443;
        uvec4 _2458 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2459 = _2458.x;
        uint _2470 = uint((float(_2458.y) * floor(float(uint(cbSceneParam._m0[85u].y * _635) / _2459))) + floor(float(uint(cbSceneParam._m0[85u].x * _634) / _2459)));
        float _2480 = (log2(_2446 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2481 = isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0));
        uint _2484 = uint(isnan(14.0) ? _2481 : (isnan(_2481) ? 14.0 : min(_2481, 14.0)));
        uvec4 _2489 = texelFetch(g_lightClusterGridBuffer, int(((_2484 << 2u) + (_2470 << 6u)) >> 2u));
        uint _2490 = _2489.x;
        uint _2491 = _2458.z;
        float _2591;
        float _2593;
        float _2595;
        float _2597;
        float _2599;
        float _2601;
        if (((((1u << ((_2491 >> 4u) & 15u)) + 4294967295u) & _2490) == 0u) || ((_2491 & 240u) == 0u))
        {
            _2591 = 0.0;
            _2593 = 0.0;
            _2595 = 0.0;
            _2597 = 0.0;
            _2599 = 0.0;
            _2601 = 0.0;
        }
        else
        {
            float _2592;
            float _2594;
            float _2596;
            float _2598;
            float _2600;
            float _2602;
            float _2744 = 0.0;
            float _2745 = 0.0;
            float _2746 = 0.0;
            float _2747 = 0.0;
            float _2748 = 0.0;
            float _2749 = 0.0;
            uint _2750 = 0u;
            uint _2759;
            bool _2760;
            for (;;)
            {
                _2759 = texelFetch(g_lightClassification, int((((_2484 << 5u) + (_2470 << 9u)) + (_2750 << 2u)) >> 2u)).x;
                _2760 = _2759 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2760)
                {
                    frontier_phi_66_pred = _2744;
                    frontier_phi_66_pred_1 = _2749;
                    frontier_phi_66_pred_2 = _2748;
                    frontier_phi_66_pred_3 = _2747;
                    frontier_phi_66_pred_4 = _2746;
                    frontier_phi_66_pred_5 = _2745;
                }
                else
                {
                    float _2889;
                    float _2890;
                    float _2891;
                    float _2892;
                    float _2893;
                    float _2894;
                    uint _2895;
                    _2889 = _2744;
                    _2890 = _2745;
                    _2891 = _2746;
                    _2892 = _2747;
                    _2893 = _2748;
                    _2894 = _2749;
                    _2895 = _2759;
                    float _2816;
                    float _2817;
                    float _2818;
                    float _2819;
                    float _2820;
                    float _2821;
                    for (;;)
                    {
                        uint _2899 = uint(findLSB(_2895)) + (_2750 << 5u);
                        uint _2896 = (_2895 + 4294967295u) & _2895;
                        uint _2901 = _2899 * 48u;
                        vec4 _2915 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2901)).x, texelFetch(g_PointLightRenderingBuffer, int(_2901 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2901 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2901 + 3u)).x));
                        uint _2921 = (_2899 * 48u) + 4u;
                        vec4 _2934 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2921)).x, texelFetch(g_PointLightRenderingBuffer, int(_2921 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2921 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2921 + 3u)).x));
                        uint _2940 = (_2899 * 48u) + 8u;
                        vec3 _2951 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2940)).x, texelFetch(g_PointLightRenderingBuffer, int(_2940 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2940 + 2u)).x));
                        float _2955 = _2915.x - _2444;
                        float _2956 = _2915.y - _2445;
                        float _2957 = _2915.z - _2446;
                        float _2958 = dot(vec3(_2955, _2956, _2957), vec3(_2955, _2956, _2957));
                        float _2961 = inversesqrt(_2958);
                        float _2962 = _2961 * _2955;
                        float _2963 = _2961 * _2956;
                        float _2964 = _2961 * _2957;
                        float _2965 = dot(vec3(_655, _658, _661), vec3(_2962, _2963, _2964));
                        float _2970 = 1.0 - (_2958 * _2915.w);
                        float _4348 = isnan(0.0) ? _2970 : (isnan(_2970) ? 0.0 : max(_2970, 0.0));
                        float _2971 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
                        float _2972 = sqrt(_2958) * _2934.w;
                        float _2975 = 1.39999997615814208984375 / (_2972 + 1.39999997615814208984375);
                        float _2976 = _2975 * _2975;
                        float _2979 = ((1.0 - _2976) * _2965) + _2976;
                        float _2982 = _2972 * _2972;
                        float _2986 = ((isnan(0.0) ? _2979 : (isnan(_2979) ? 0.0 : max(_2979, 0.0))) * _2971) / ((_2982 * 0.699999988079071044921875) + 1.0);
                        float _2990 = (-0.0) - _2444;
                        float _2991 = (-0.0) - _2445;
                        float _2992 = (-0.0) - _2446;
                        float _2996 = inversesqrt(dot(vec3(_2990, _2991, _2992), vec3(_2990, _2991, _2992)));
                        float _2997 = _2996 * _2990;
                        float _2998 = _2996 * _2991;
                        float _2999 = _2996 * _2992;
                        float _3007 = exp2(log2(1.0 / ((_2982 * 3.5) + 5.0)) * 0.25);
                        float _3008 = 1.0 - _730;
                        float _3015 = sqrt(1.0 - ((1.0 - (_3008 * _3008)) * (1.0 - (_3007 * _3007))));
                        float _3016 = _3015 * _3015;
                        float _3017 = _3016 * _3016;
                        float _3018 = _2997 + _2962;
                        float _3019 = _2998 + _2963;
                        float _3020 = _2999 + _2964;
                        float _3024 = inversesqrt(dot(vec3(_3018, _3019, _3020), vec3(_3018, _3019, _3020)));
                        float _3028 = dot(vec3(_655, _658, _661), vec3(_2997, _2998, _2999));
                        float _4364 = isnan(0.0) ? _3028 : (isnan(_3028) ? 0.0 : max(_3028, 0.0));
                        float _3031 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
                        float _3032 = dot(vec3(_655, _658, _661), vec3(_3024 * _3018, _3024 * _3019, _3024 * _3020));
                        float _4375 = isnan(0.0) ? _3032 : (isnan(_3032) ? 0.0 : max(_3032, 0.0));
                        float _3035 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
                        float _3039 = ((_3035 * _3035) * (_3017 + (-1.0))) + 1.0;
                        float _3040 = _2975 * _3016;
                        float _3041 = _3040 * _3040;
                        float _3044 = ((1.0 - _3041) * _2965) + _3041;
                        float _4386 = isnan(0.0) ? _3044 : (isnan(_3044) ? 0.0 : max(_3044, 0.0));
                        float _3045 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
                        float _3046 = 1.0 - _3016;
                        float _3056 = (0.5 / (((_3045 * ((_3031 * _3046) + _3016)) + 9.9999999392252902907785028219223e-09) + (((_3045 * _3046) + _3016) * _3031))) * _3045;
                        float _4397 = isnan(0.0) ? _3056 : (isnan(_3056) ? 0.0 : max(_3056, 0.0));
                        float _3066 = (((_3017 * 3.1415927410125732421875) * (isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0)))) / ((_3039 * _3039) * ((_2982 * 2.1991131305694580078125) + 3.141590118408203125))) * _2971;
                        _2819 = (_2986 * _2934.x) + _2892;
                        _2820 = (_2986 * _2934.y) + _2893;
                        _2821 = (_2986 * _2934.z) + _2894;
                        _2816 = (_3066 * _2951.x) + _2889;
                        _2817 = (_3066 * _2951.y) + _2890;
                        _2818 = (_3066 * _2951.z) + _2891;
                        if (_2896 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2889 = _2816;
                            _2890 = _2817;
                            _2891 = _2818;
                            _2892 = _2819;
                            _2893 = _2820;
                            _2894 = _2821;
                            _2895 = _2896;
                        }
                    }
                    frontier_phi_66_pred = _2816;
                    frontier_phi_66_pred_1 = _2821;
                    frontier_phi_66_pred_2 = _2820;
                    frontier_phi_66_pred_3 = _2819;
                    frontier_phi_66_pred_4 = _2818;
                    frontier_phi_66_pred_5 = _2817;
                }
                _2592 = frontier_phi_66_pred;
                _2602 = frontier_phi_66_pred_1;
                _2600 = frontier_phi_66_pred_2;
                _2598 = frontier_phi_66_pred_3;
                _2596 = frontier_phi_66_pred_4;
                _2594 = frontier_phi_66_pred_5;
                uint _2751 = _2750 + 1u;
                if (_2751 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2744 = _2592;
                    _2745 = _2594;
                    _2746 = _2596;
                    _2747 = _2598;
                    _2748 = _2600;
                    _2749 = _2602;
                    _2750 = _2751;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2591 = _2592;
            _2593 = _2594;
            _2595 = _2596;
            _2597 = _2598;
            _2599 = _2600;
            _2601 = _2602;
        }
        uvec4 _2605 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2606 = _2605.z;
        uint _2608 = (_2606 >> 8u) & 15u;
        float _2712;
        float _2714;
        float _2716;
        float _2718;
        float _2720;
        float _2722;
        if (((4294967295u << _2608) & _2490) == 0u)
        {
            _2712 = _2591;
            _2714 = _2593;
            _2716 = _2595;
            _2718 = _2597;
            _2720 = _2599;
            _2722 = _2601;
        }
        else
        {
            float _2737 = inversesqrt(dot(vec3(_2444, _2445, _2446), vec3(_2444, _2445, _2446)));
            float _2738 = _2737 * _2444;
            float _2739 = _2737 * _2445;
            float _2740 = _2737 * _2446;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2608 < ((_2606 >> 12u) & 15u))
            {
                float _2713;
                float _2715;
                float _2717;
                float _2719;
                float _2721;
                float _2723;
                float _2872 = _2591;
                float _2873 = _2593;
                float _2874 = _2595;
                float _2875 = _2597;
                float _2876 = _2599;
                float _2877 = _2601;
                uint _2878 = _2608;
                uint _2887;
                bool _2888;
                for (;;)
                {
                    _2887 = texelFetch(g_lightClassification, int((((_2484 << 5u) + (_2470 << 9u)) + (_2878 << 2u)) >> 2u)).x;
                    _2888 = _2887 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2888)
                    {
                        frontier_phi_77_pred = _2877;
                        frontier_phi_77_pred_1 = _2876;
                        frontier_phi_77_pred_2 = _2875;
                        frontier_phi_77_pred_3 = _2874;
                        frontier_phi_77_pred_4 = _2873;
                        frontier_phi_77_pred_5 = _2872;
                    }
                    else
                    {
                        float _3080;
                        float _3081;
                        float _3082;
                        float _3083;
                        float _3084;
                        float _3085;
                        float _3375;
                        float _3376;
                        float _3377;
                        float _3378;
                        float _3379;
                        float _3380;
                        float _3093 = _2872;
                        float _3094 = _2873;
                        float _3095 = _2874;
                        float _3096 = _2875;
                        float _3097 = _2876;
                        float _3098 = _2877;
                        uint _3099 = _2887;
                        uint _3100;
                        vec4 _3125;
                        float _3126;
                        vec4 _3141;
                        vec3 _3153;
                        vec4 _3169;
                        vec4 _3185;
                        float _3231;
                        bool _3232;
                        for (;;)
                        {
                            uint _3110 = ((_2878 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3099));
                            _3100 = (_3099 + 4294967295u) & _3099;
                            uint _3112 = _3110 * 40u;
                            _3125 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3112)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 3u)).x));
                            _3126 = _3125.w;
                            uint _3128 = (_3110 * 40u) + 4u;
                            _3141 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3128)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3128 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3128 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3128 + 3u)).x));
                            uint _3143 = (_3110 * 40u) + 8u;
                            _3153 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3143)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 2u)).x));
                            uint _3156 = (_3110 * 40u) + 16u;
                            _3169 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3156)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 3u)).x));
                            uint _3172 = (_3110 * 40u) + 20u;
                            _3185 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3172)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3172 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3172 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3172 + 3u)).x));
                            uint _3187 = (_3110 * 40u) + 24u;
                            vec4 _3200 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3187)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3187 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3187 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3187 + 3u)).x));
                            uint _3206 = (_3110 * 40u) + 28u;
                            vec4 _3219 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3206)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 3u)).x));
                            _3231 = fma(_2446, _3219.z, fma(_2445, _3219.y, _3219.x * _2444)) + _3219.w;
                            _3232 = !((fma(_2446, _3200.z, fma(_2445, _3200.y, _3200.x * _2444)) + _3200.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3232)
                            {
                                float _3259 = _3125.x - _2444;
                                float _3260 = _3125.y - _2445;
                                float _3261 = _3125.z - _2446;
                                float _3262 = dot(vec3(_3259, _3260, _3261), vec3(_3259, _3260, _3261));
                                float _3265 = inversesqrt(_3262);
                                float _3266 = _3265 * _3259;
                                float _3267 = _3265 * _3260;
                                float _3268 = _3265 * _3261;
                                float _3272 = 1.0 - (_3262 / (_3126 * _3126));
                                float _4408 = isnan(0.0) ? _3272 : (isnan(_3272) ? 0.0 : max(_3272, 0.0));
                                float _3273 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
                                float _3277 = sqrt(_3262) * _3141.w;
                                float _3279 = 1.39999997615814208984375 / (_3277 + 1.39999997615814208984375);
                                float _3280 = _3279 * _3279;
                                float _3283 = ((1.0 - _3280) * dot(vec3(_3266, _3267, _3268), vec3(_655, _658, _661))) + _3280;
                                float _3286 = _3277 * _3277;
                                float _3290 = (fma(_2446, _3169.z, fma(_2445, _3169.y, _3169.x * _2444)) + _3169.w) / _3231;
                                float _3291 = (fma(_2446, _3185.z, fma(_2445, _3185.y, _3185.x * _2444)) + _3185.w) / _3231;
                                float _3295 = 1.0 - dot(vec2(_3290, _3291), vec2(_3290, _3291));
                                float _4424 = isnan(0.0) ? _3295 : (isnan(_3295) ? 0.0 : max(_3295, 0.0));
                                float _3296 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
                                float _3297 = _3296 * (((isnan(0.0) ? _3283 : (isnan(_3283) ? 0.0 : max(_3283, 0.0))) * _3273) / ((_3286 * 0.699999988079071044921875) + 1.0));
                                float _3309 = exp2(log2(1.0 / ((_3286 * 3.5) + 5.0)) * 0.25);
                                float _3310 = 1.0 - _730;
                                float _3317 = sqrt(1.0 - ((1.0 - (_3310 * _3310)) * (1.0 - (_3309 * _3309))));
                                float _3318 = _3317 * _3317;
                                float _3319 = _3318 * _3318;
                                float _3320 = _3266 - _2738;
                                float _3321 = _3267 - _2739;
                                float _3322 = _3268 - _2740;
                                float _3326 = inversesqrt(dot(vec3(_3320, _3321, _3322), vec3(_3320, _3321, _3322)));
                                float _3330 = dot(vec3(_655, _658, _661), vec3((-0.0) - _2738, (-0.0) - _2739, (-0.0) - _2740));
                                float _4435 = isnan(0.0) ? _3330 : (isnan(_3330) ? 0.0 : max(_3330, 0.0));
                                float _3333 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
                                float _3334 = dot(vec3(_655, _658, _661), vec3(_3326 * _3320, _3326 * _3321, _3326 * _3322));
                                float _4446 = isnan(0.0) ? _3334 : (isnan(_3334) ? 0.0 : max(_3334, 0.0));
                                float _3337 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
                                float _3341 = ((_3337 * _3337) * (_3319 + (-1.0))) + 1.0;
                                float _3342 = _3279 * _3318;
                                float _3343 = _3342 * _3342;
                                float _3349 = ((1.0 - _3343) * dot(vec3(_655, _658, _661), vec3(_3266, _3267, _3268))) + _3343;
                                float _4457 = isnan(0.0) ? _3349 : (isnan(_3349) ? 0.0 : max(_3349, 0.0));
                                float _3350 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
                                float _3351 = 1.0 - _3318;
                                float _3361 = (0.5 / (((_3350 * ((_3333 * _3351) + _3318)) + 9.9999999392252902907785028219223e-09) + (((_3350 * _3351) + _3318) * _3333))) * _3350;
                                float _4468 = isnan(0.0) ? _3361 : (isnan(_3361) ? 0.0 : max(_3361, 0.0));
                                float _3371 = (_3296 * _3273) * (((_3319 * 3.1415927410125732421875) * (isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0)))) / ((_3341 * _3341) * ((_3286 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3297 * _3141.y;
                                frontier_phi_83_pred_1 = _3297 * _3141.x;
                                frontier_phi_83_pred_2 = _3371 * _3153.z;
                                frontier_phi_83_pred_3 = _3371 * _3153.y;
                                frontier_phi_83_pred_4 = _3371 * _3153.x;
                                frontier_phi_83_pred_5 = _3297 * _3141.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3379 = frontier_phi_83_pred;
                            _3378 = frontier_phi_83_pred_1;
                            _3377 = frontier_phi_83_pred_2;
                            _3376 = frontier_phi_83_pred_3;
                            _3375 = frontier_phi_83_pred_4;
                            _3380 = frontier_phi_83_pred_5;
                            _3083 = _3378 + _3096;
                            _3084 = _3379 + _3097;
                            _3085 = _3380 + _3098;
                            _3080 = _3375 + _3093;
                            _3081 = _3376 + _3094;
                            _3082 = _3377 + _3095;
                            if (_3100 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3093 = _3080;
                                _3094 = _3081;
                                _3095 = _3082;
                                _3096 = _3083;
                                _3097 = _3084;
                                _3098 = _3085;
                                _3099 = _3100;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3085;
                        frontier_phi_77_pred_1 = _3084;
                        frontier_phi_77_pred_2 = _3083;
                        frontier_phi_77_pred_3 = _3082;
                        frontier_phi_77_pred_4 = _3081;
                        frontier_phi_77_pred_5 = _3080;
                    }
                    _2723 = frontier_phi_77_pred;
                    _2721 = frontier_phi_77_pred_1;
                    _2719 = frontier_phi_77_pred_2;
                    _2717 = frontier_phi_77_pred_3;
                    _2715 = frontier_phi_77_pred_4;
                    _2713 = frontier_phi_77_pred_5;
                    uint _2879 = _2878 + 1u;
                    if (_2879 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2872 = _2713;
                        _2873 = _2715;
                        _2874 = _2717;
                        _2875 = _2719;
                        _2876 = _2721;
                        _2877 = _2723;
                        _2878 = _2879;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2717;
                frontier_phi_58_59_ladder_1 = _2723;
                frontier_phi_58_59_ladder_2 = _2721;
                frontier_phi_58_59_ladder_3 = _2719;
                frontier_phi_58_59_ladder_4 = _2715;
                frontier_phi_58_59_ladder_5 = _2713;
            }
            else
            {
                frontier_phi_58_59_ladder = _2595;
                frontier_phi_58_59_ladder_1 = _2601;
                frontier_phi_58_59_ladder_2 = _2599;
                frontier_phi_58_59_ladder_3 = _2597;
                frontier_phi_58_59_ladder_4 = _2593;
                frontier_phi_58_59_ladder_5 = _2591;
            }
            _2712 = frontier_phi_58_59_ladder_5;
            _2714 = frontier_phi_58_59_ladder_4;
            _2716 = frontier_phi_58_59_ladder;
            _2718 = frontier_phi_58_59_ladder_3;
            _2720 = frontier_phi_58_59_ladder_2;
            _2722 = frontier_phi_58_59_ladder_1;
        }
        float _2727 = isnan(1.0) ? _714 : (isnan(_714) ? 1.0 : min(_714, 1.0));
        _2503 = (_2727 * _2718) + _1936;
        _2505 = (_2727 * _2720) + _1938;
        _2507 = (_2727 * _2722) + _1940;
        _2509 = ((_2712 * _698) * _2727) + _2284;
        _2511 = ((_2714 * _700) * _2727) + _2286;
        _2513 = ((_2716 * _701) * _2727) + _2288;
    }
    else
    {
        _2503 = _1936;
        _2505 = _1938;
        _2507 = _1940;
        _2509 = _2284;
        _2511 = _2286;
        _2513 = _2288;
    }
    float _4484 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _4495 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _4506 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _2530 = ((isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0))) * (_2503 + ((isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0))) * _714))) + ((_2509 + ((isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0))) * _1551)) * cbPerFrame._m0[3u].x);
    float _2531 = ((isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0))) * (_2505 + ((isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0))) * _714))) + ((_2511 + ((isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0))) * _1551)) * cbPerFrame._m0[3u].x);
    float _2532 = ((isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0))) * (_2507 + ((isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0))) * _714))) + ((_2513 + ((isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0))) * _1551)) * cbPerFrame._m0[3u].x);
    uint _2533 = _295 + 6u;
    float _2541 = _634 / cbSceneParam._m0[86u].x;
    float _2542 = _635 / cbSceneParam._m0[86u].y;
    vec4 _2556 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2541, _2542, (log2((isnan(cbSceneParam._m0[77u].w) ? _555 : (isnan(_555) ? cbSceneParam._m0[77u].w : min(_555, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2558 = _2556.x;
    float _2559 = _2556.y;
    float _2560 = _2556.z;
    float _2561 = _2556.w;
    float _2654;
    float _2656;
    float _2658;
    float _2660;
    if (_555 > cbSceneParam._m0[78u].w)
    {
        float _2616 = isnan(_555) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _555 : min(cbSceneParam._m0[80u].w, _555));
        float _2617 = _2616 / _555;
        float _2628 = _2617 * _606;
        float _2629 = _607 * _2617;
        float _2630 = (-0.0) - _2629;
        float _2632 = _2617 * _608;
        float _2634 = (cbSceneParam._m0[77u].w * _2630) / _2616;
        float _2635 = _2634 + cbSceneParam._m0[79u].w;
        float _2636 = cbSceneParam._m0[79u].w - _2629;
        float _2642 = sqrt(((_2628 * _2628) + (_2629 * _2629)) + (_2632 * _2632));
        float _2645 = (1.0 - (cbSceneParam._m0[77u].w / _2616)) * _2642;
        float _2650 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2652 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2829;
        if (abs((_2630 - _2634) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2829 = ((((_2635 > 0.0) ? exp2(_2650 * _2635) : (2.0 - exp2(_2652 * _2635))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2645;
        }
        else
        {
            float _2773 = 1.0 / cbSceneParam._m0[80u].x;
            float _2774 = isnan(_2636) ? _2635 : (isnan(_2635) ? _2636 : max(_2635, _2636));
            float _2775 = isnan(_2636) ? _2635 : (isnan(_2635) ? _2636 : min(_2635, _2636));
            float _2784 = isnan(0.0) ? _2774 : (isnan(_2774) ? 0.0 : min(_2774, 0.0));
            float _2785 = isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : min(_2775, 0.0));
            _2829 = ((abs(_2642 / _2630) * cbSceneParam._m0[80u].y) * ((((_2784 - _2785) * 2.0) - ((exp2(_2650 * (isnan(0.0) ? _2774 : (isnan(_2774) ? 0.0 : max(_2774, 0.0)))) - exp2(_2650 * (isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : max(_2775, 0.0))))) * _2773)) - ((exp2(_2652 * _2784) - exp2(_2652 * _2785)) * _2773))) + (_2645 * cbSceneParam._m0[80u].z);
        }
        vec4 _2831 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2541, _2542, 1.0), 0.0);
        float _2840 = exp2((_2829 * (-1.44269502162933349609375)) * (1.0 - _2831.w));
        float _2841 = log2(_2840);
        float _2857 = log2(_2561);
        _2654 = (exp2(_2857 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2841 * cbSceneParam._m0[78u].x)) * _2831.x) / cbSceneParam._m0[78u].x)) + _2558;
        _2656 = (exp2(_2857 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2841 * cbSceneParam._m0[78u].y)) * _2831.y) / cbSceneParam._m0[78u].y)) + _2559;
        _2658 = (exp2(_2857 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2841 * cbSceneParam._m0[78u].z)) * _2831.z) / cbSceneParam._m0[78u].z)) + _2560;
        _2660 = _2840 * _2561;
    }
    else
    {
        _2654 = _2558;
        _2656 = _2559;
        _2658 = _2560;
        _2660 = _2561;
    }
    bool _2867;
    vec4 _2670;
    vec4 _2692;
    float _2694;
    float _2698;
    float _2699;
    float _2700;
    float _2701;
    bool _2711;
    for (;;)
    {
        _2670 = cbMatDynParam._m0[0u];
        float _2672 = roundEven(_2670.y);
        bool _2673 = _2672 == 3.0;
        float _2674 = log2(_2660);
        float _2681 = exp2(_2674 * cbSceneParam._m0[78u].x) * _2530;
        float _2682 = exp2(_2674 * cbSceneParam._m0[78u].y) * _2531;
        float _2683 = exp2(_2674 * cbSceneParam._m0[78u].z) * _2532;
        float _2690 = _622 + (-0.5);
        _2692 = cbMtdParam._m0[1u];
        _2694 = _2692.y * _2690;
        float _2697 = (_2672 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2698 = _2697 * (_2673 ? _2681 : (_2681 + (cbSceneParam._m0[72u].w * _2654)));
        _2699 = _2697 * (_2673 ? _2682 : (_2682 + (cbSceneParam._m0[72u].w * _2656)));
        _2700 = _2697 * (_2673 ? _2683 : (_2683 + (cbSceneParam._m0[72u].w * _2658)));
        _2701 = _2690 * 0.999000012874603271484375;
        _2711 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2711)
        {
            if ((cbInstanceData._m0[_295 + 7u].x + _2701) < 0.5)
            {
                _2867 = true;
                break;
            }
        }
        uint _2808 = _674 + uint(_2670.w);
        if ((cbInstanceData._m0[_2808].w < 1.0) && ((cbInstanceData._m0[_2808].w + _2701) < 0.5))
        {
            _2867 = true;
            break;
        }
        if ((_2694 + 1.0) < _2692.x)
        {
            _2867 = true;
            break;
        }
        _2867 = false;
        break;
    }
    float _3071;
    if (_2867)
    {
        discard_state = true;
        _3071 = 0.0;
    }
    else
    {
        _3071 = cbInstanceData._m0[_2533].w;
    }
    SV_Target.x = _2698;
    SV_Target.y = _2699;
    SV_Target.z = _2700;
    SV_Target.w = _3071;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2533].w;
    discard_exit();
}


