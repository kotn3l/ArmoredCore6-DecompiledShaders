#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 18) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_28;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1169;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _218 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _219 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _220 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _226 = inversesqrt(dot(vec3(_218, _219, _220), vec3(_218, _219, _220)));
    float _233 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _234 = _233 * NORMAL.x;
    float _235 = _233 * NORMAL.y;
    float _236 = _233 * NORMAL.z;
    float _240 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _252 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _254 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _255 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3780 = isnan(0.0) ? _252 : (isnan(_252) ? 0.0 : max(_252, 0.0));
    float _3791 = isnan(0.0) ? _254 : (isnan(_254) ? 0.0 : max(_254, 0.0));
    float _3802 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    uint _265 = uint(roundEven(NORMAL.w)) * 13u;
    uint _270 = _265 + 1u;
    uint _274 = _265 + 2u;
    float _283 = sqrt(((cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x) + (cbInstanceData._m0[_265].x * cbInstanceData._m0[_265].x)) + (cbInstanceData._m0[_274].x * cbInstanceData._m0[_274].x));
    float _284 = _283 * TEXCOORD.z;
    float _285 = _283 * TEXCOORD.w;
    vec4 _298 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _284) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _285) + cbTextureTilingScale._m0[13u].w));
    vec4 _321 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _326 = _321.x * cbMtdParam._m0[9u].x;
    float _327 = _321.y * cbMtdParam._m0[9u].y;
    float _328 = _321.z * cbMtdParam._m0[9u].z;
    float _332 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _298.x) * _326;
    float _335 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _298.y) * _327;
    float _338 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _298.z) * _328;
    float _345 = ((_326 - _332) * (isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0)))) + _332;
    float _346 = ((_327 - _335) * (isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0)))) + _335;
    float _347 = ((_328 - _338) * (isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0)))) + _338;
    vec4 _360 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _284) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _285) + cbTextureTilingScale._m0[20u].w));
    vec4 _386 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _390 = _386.z;
    float _394 = (_386.x * 2.0) + (-1.0);
    float _395 = (_386.y * 2.0) + (-1.0);
    float _396 = dot(vec2(_394, _395), vec2(_394, _395));
    float _3813 = isnan(0.0) ? _396 : (isnan(_396) ? 0.0 : max(_396, 0.0));
    float _401 = sqrt(1.0 - (isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0))));
    float _406 = _394 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_360.x * 2.0) + (-1.0)));
    float _407 = _395 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_360.y * 2.0) + (-1.0)));
    vec4 _420 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _284) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _285) + cbTextureTilingScale._m0[19u].w));
    float _422 = _420.x;
    float _423 = 1.0 - _422;
    float _454 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_422 - _423) * cbMtdParam._m0[24u].w) + _423) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3824 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _455 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
    float _463 = ((((cbMtdParam._m0[10u].x - _345) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _455) + _345;
    float _464 = ((((cbMtdParam._m0[10u].y - _346) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _455) + _346;
    float _465 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _347)) * _455) + _347;
    vec4 _478 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _480 = _478.x;
    float _482 = _480 - (_480 * _455);
    float _487 = (((_360.z - _390) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _390;
    float _491 = ((cbMtdParam._m0[23u].y - _487) * _455) + _487;
    vec4 _513 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _284) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _285) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _515 = _513.x;
    float _516 = _513.y;
    float _523 = dot(vec4(cbMtdParam._m0[29u].yzw, 0.0), vec4(_234, _235, _236, 0.0));
    vec4 _538 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_28, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * _284) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * _285) + cbTextureTilingScale._m0[18u].w));
    float _540 = _538.x;
    float _545 = fract(_538.w + cbPerFrame._m0[22u].x);
    float _547 = (1.0 - _545) * _540;
    float _552 = ((_545 + (-1.0)) + _540) * 9.0;
    float _554 = ((_540 + (-1.0)) + _545) * 9.0;
    float _555 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
    float _556 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _570 = (_547 * ((_538.y * 2.0) + (-1.0))) * sin((isnan(3.0) ? _555 : (isnan(_555) ? 3.0 : min(_555, 3.0))) * 3.1415927410125732421875);
    float _572 = (_547 * ((_538.z * 2.0) + (-1.0))) * sin((isnan(3.0) ? _556 : (isnan(_556) ? 3.0 : min(_556, 3.0))) * 3.1415927410125732421875);
    float _576 = inversesqrt(dot(vec3(_570, _572, 1.0), vec3(_570, _572, 1.0)));
    float _592 = (((((0.5 - _515) + ((_570 * 0.5) * _576)) * _523) + _515) * 2.0) + (-1.0);
    float _593 = (((((0.5 - _516) + ((_576 * 0.5) * _572)) * _523) + _516) * 2.0) + (-1.0);
    float _594 = dot(vec2(_592, _593), vec2(_592, _593));
    float _3855 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _610 = ((((cbMtdParam._m0[22u].z * _406) - _406) + _592) * _455) + _406;
    float _611 = ((((cbMtdParam._m0[22u].z * _407) - _407) + _593) * _455) + _407;
    float _612 = (_455 * (sqrt(1.0 - (isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0)))) - _401)) + _401;
    float _614 = cbMtdParam._m0[22u].x + _386.w;
    float _617 = fma(_612, _234, fma(_611, _240 * TANGENT.x, (_226 * _218) * _610));
    float _620 = fma(_612, _235, fma(_611, _240 * TANGENT.y, (_226 * _219) * _610));
    float _623 = fma(_612, _236, fma(_611, _240 * TANGENT.z, (_226 * _220) * _610));
    float _627 = inversesqrt(dot(vec3(_617, _620, _623), vec3(_617, _620, _623)));
    float _628 = _627 * _617;
    float _629 = _627 * _620;
    float _630 = _627 * _623;
    float _3866 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _631 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
    float _3877 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _3888 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _3899 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _3910 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _3921 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _636 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
    float _650 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _691 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _701 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _691);
    float _702 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _691);
    float _703 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _691);
    float _707 = inversesqrt(dot(vec3(_701, _702, _703), vec3(_701, _702, _703)));
    float _708 = _701 * _707;
    float _709 = _702 * _707;
    float _710 = _703 * _707;
    float _716 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _717 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _738 = fma(_630, cbSceneParam._m0[5u].z, fma(_629, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _628));
    float _741 = fma(_630, cbSceneParam._m0[6u].z, fma(_629, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _628));
    float _744 = fma(_630, cbSceneParam._m0[7u].z, fma(_629, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _628));
    uint _758 = (_265 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _764 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0)))) * cbInstanceData._m0[_758].x;
    float _765 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0)))) * cbInstanceData._m0[_758].y;
    float _766 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0)))) * cbInstanceData._m0[_758].z;
    float _3932 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    float _767 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
    float _3943 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    float _768 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
    float _3954 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _769 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
    float _770 = 1.0 - _636;
    float _771 = _767 * _770;
    float _772 = _768 * _770;
    float _773 = _769 * _770;
    float _778 = (_767 + (-0.039999999105930328369140625)) * _636;
    float _779 = (_768 + (-0.039999999105930328369140625)) * _636;
    float _780 = (_769 + (-0.039999999105930328369140625)) * _636;
    float _781 = _778 + 0.039999999105930328369140625;
    float _783 = _779 + 0.039999999105930328369140625;
    float _784 = _780 + 0.039999999105930328369140625;
    vec4 _793 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _716, cbSceneParam._m0[86u].y * _717));
    float _797 = ((isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0))) * TEXCOORD_5.w) * _793.x;
    float _798 = dot(vec3(_628, _629, _630), vec3(_708, _709, _710));
    float _801 = _798 * 2.0;
    float _805 = (_801 * _628) - _708;
    float _806 = (_801 * _629) - _709;
    float _807 = (_801 * _630) - _710;
    float _811 = abs(dot(vec3(_708, _709, _710), vec3(_628, _629, _630)));
    float _3965 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
    float _813 = sqrt(_631);
    float _825 = exp2((_813 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_813 * 3.0));
    float _831 = (1.0 - _825) * ((_813 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _832 = _825 * _813;
    float _860 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _864 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _868 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1168;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _894 = fma(_868, cbModelParam._m0[26u].z, fma(_864, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _860));
        float _898 = fma(_868, cbModelParam._m0[27u].z, fma(_864, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _860));
        float _902 = fma(_868, cbModelParam._m0[28u].z, fma(_864, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _860));
        float _926 = _860 + _628;
        float _927 = _864 + _629;
        float _928 = _868 + _630;
        float _938 = fma(_928, cbModelParam._m0[26u].z, fma(_927, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _926)) - _894;
        float _939 = fma(_928, cbModelParam._m0[27u].z, fma(_927, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _926)) - _898;
        float _940 = fma(_928, cbModelParam._m0[28u].z, fma(_927, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _926)) - _902;
        float _944 = inversesqrt(dot(vec3(_938, _939, _940), vec3(_938, _939, _940)));
        float _957 = ((_944 * _938) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_894 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _958 = ((_944 * _939) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_898 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _959 = ((_944 * _940) / cbModelParam._m0[34u].z) + ((((((_902 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _962 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_957, _958, _959), 0.0);
        vec4 _969 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_957, _958, _959), 0.0);
        vec4 _976 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_957, _958, _959), 0.0);
        vec4 _983 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_957, _958, _959), 0.0);
        float _996 = exp2((_962.w + (-0.5)) * 20.0) * 2.0;
        float _997 = _996 * (_962.x + (-0.5));
        float _998 = _996 * (_962.y + (-0.5));
        float _999 = _996 * (_962.z + (-0.5));
        float _1006 = exp2((_969.w + (-0.5)) * 20.0) * 2.0;
        float _1007 = _1006 * (_969.x + (-0.5));
        float _1008 = _1006 * (_969.y + (-0.5));
        float _1009 = _1006 * (_969.z + (-0.5));
        float _1016 = exp2((_976.w + (-0.5)) * 20.0) * 2.0;
        float _1017 = _1016 * (_976.x + (-0.5));
        float _1018 = _1016 * (_976.y + (-0.5));
        float _1019 = _1016 * (_976.z + (-0.5));
        float _1026 = exp2((_983.w + (-0.5)) * 20.0) * 2.0;
        float _1027 = _1026 * (_983.x + (-0.5));
        float _1028 = _1026 * (_983.y + (-0.5));
        float _1029 = _1026 * (_983.z + (-0.5));
        float _1030 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1031 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1032 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1033 = _997 * 0.5;
        float _1034 = _1007 * 0.5;
        float _1035 = _1017 * 0.5;
        float _1036 = dot(vec3(_1033, _1034, _1035), vec3(_1033, _1034, _1035));
        float _1041 = (_1036 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1036);
        float _1050 = (dot(vec3(_628, _629, _630), vec3(_1041 * _1033, _1041 * _1034, _1041 * _1035)) + 1.0) * 0.5;
        float _3991 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1060 = sqrt(((_1034 * _1034) + (_1033 * _1033)) + (_1035 * _1035)) / (_1030 + 9.9999997473787516355514526367188e-06);
        float _4002 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1061 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
        float _1062 = _1061 * 2.0;
        float _1066 = (1.0 - _1061) / (_1061 + 1.0);
        float _4013 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1067 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
        float _1076 = ((((1.0 - _1067) * (_1062 + 2.0)) * exp2(log2(isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0))) * (_1062 + 1.0))) + _1067) * _1030;
        float _1077 = _998 * 0.5;
        float _1078 = _1008 * 0.5;
        float _1079 = _1018 * 0.5;
        float _1080 = dot(vec3(_1077, _1078, _1079), vec3(_1077, _1078, _1079));
        float _1085 = (_1080 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1080);
        float _1093 = (dot(vec3(_628, _629, _630), vec3(_1085 * _1077, _1085 * _1078, _1085 * _1079)) + 1.0) * 0.5;
        float _4024 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1102 = sqrt(((_1078 * _1078) + (_1077 * _1077)) + (_1079 * _1079)) / (_1031 + 9.9999997473787516355514526367188e-06);
        float _4035 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1103 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
        float _1104 = _1103 * 2.0;
        float _1108 = (1.0 - _1103) / (_1103 + 1.0);
        float _4046 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1109 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
        float _1118 = ((((1.0 - _1109) * (_1104 + 2.0)) * exp2(log2(isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0))) * (_1104 + 1.0))) + _1109) * _1031;
        float _1119 = _999 * 0.5;
        float _1120 = _1009 * 0.5;
        float _1121 = _1019 * 0.5;
        float _1122 = dot(vec3(_1119, _1120, _1121), vec3(_1119, _1120, _1121));
        float _1127 = (_1122 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1122);
        float _1135 = (dot(vec3(_628, _629, _630), vec3(_1127 * _1119, _1127 * _1120, _1127 * _1121)) + 1.0) * 0.5;
        float _4057 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1144 = sqrt(((_1120 * _1120) + (_1119 * _1119)) + (_1121 * _1121)) / (_1032 + 9.9999997473787516355514526367188e-06);
        float _4068 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1145 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
        float _1146 = _1145 * 2.0;
        float _1150 = (1.0 - _1145) / (_1145 + 1.0);
        float _4079 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1151 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
        float _1160 = ((((1.0 - _1151) * (_1146 + 2.0)) * exp2(log2(isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0))) * (_1146 + 1.0))) + _1151) * _1032;
        _1168 = _999;
        _1170 = _998;
        _1171 = _997;
        _1172 = _1009;
        _1173 = _1008;
        _1174 = _1007;
        _1175 = _1019;
        _1176 = _1018;
        _1177 = _1017;
        _1178 = _1032;
        _1179 = _1031;
        _1180 = _1030;
        _1181 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0)));
        _1182 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0)));
        _1183 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0)));
    }
    else
    {
        _1168 = _1169;
        _1170 = _1169;
        _1171 = _1169;
        _1172 = _1169;
        _1173 = _1169;
        _1174 = _1169;
        _1175 = _1169;
        _1176 = _1169;
        _1177 = _1169;
        _1178 = _1169;
        _1179 = _1169;
        _1180 = _1169;
        _1181 = 0.0;
        _1182 = 0.0;
        _1183 = 0.0;
    }
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1208 = fma(_868, cbModelParam._m0[30u].z, fma(_864, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _860));
        float _1212 = fma(_868, cbModelParam._m0[31u].z, fma(_864, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _860));
        float _1216 = fma(_868, cbModelParam._m0[32u].z, fma(_864, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _860));
        float _1239 = _860 + _628;
        float _1240 = _864 + _629;
        float _1241 = _868 + _630;
        float _1251 = fma(_1241, cbModelParam._m0[30u].z, fma(_1240, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1239)) - _1208;
        float _1252 = fma(_1241, cbModelParam._m0[31u].z, fma(_1240, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1239)) - _1212;
        float _1253 = fma(_1241, cbModelParam._m0[32u].z, fma(_1240, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1239)) - _1216;
        float _1257 = inversesqrt(dot(vec3(_1251, _1252, _1253), vec3(_1251, _1252, _1253)));
        float _1270 = ((_1257 * _1251) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1208 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1271 = ((_1257 * _1252) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1212 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1272 = ((_1257 * _1253) / cbModelParam._m0[35u].z) + ((((((_1216 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1274 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1270, _1271, _1272), 0.0);
        vec4 _1281 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1270, _1271, _1272), 0.0);
        vec4 _1288 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1270, _1271, _1272), 0.0);
        vec4 _1295 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1270, _1271, _1272), 0.0);
        float _1307 = exp2((_1274.w + (-0.5)) * 20.0) * 2.0;
        float _1308 = _1307 * (_1274.x + (-0.5));
        float _1309 = _1307 * (_1274.y + (-0.5));
        float _1310 = _1307 * (_1274.z + (-0.5));
        float _1317 = exp2((_1281.w + (-0.5)) * 20.0) * 2.0;
        float _1318 = _1317 * (_1281.x + (-0.5));
        float _1319 = _1317 * (_1281.y + (-0.5));
        float _1320 = _1317 * (_1281.z + (-0.5));
        float _1327 = exp2((_1288.w + (-0.5)) * 20.0) * 2.0;
        float _1328 = _1327 * (_1288.x + (-0.5));
        float _1329 = _1327 * (_1288.y + (-0.5));
        float _1330 = _1327 * (_1288.z + (-0.5));
        float _1337 = exp2((_1295.w + (-0.5)) * 20.0) * 2.0;
        float _1338 = _1337 * (_1295.x + (-0.5));
        float _1339 = _1337 * (_1295.y + (-0.5));
        float _1340 = _1337 * (_1295.z + (-0.5));
        float _1341 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1342 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1343 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1344 = _1308 * 0.5;
        float _1345 = _1318 * 0.5;
        float _1346 = _1328 * 0.5;
        float _1347 = dot(vec3(_1344, _1345, _1346), vec3(_1344, _1345, _1346));
        float _1352 = (_1347 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1347);
        float _1360 = (dot(vec3(_628, _629, _630), vec3(_1352 * _1344, _1352 * _1345, _1352 * _1346)) + 1.0) * 0.5;
        float _4120 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1369 = sqrt(((_1345 * _1345) + (_1344 * _1344)) + (_1346 * _1346)) / (_1341 + 9.9999997473787516355514526367188e-06);
        float _4131 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1370 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
        float _1371 = _1370 * 2.0;
        float _1375 = (1.0 - _1370) / (_1370 + 1.0);
        float _4142 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1376 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
        float _1385 = ((((1.0 - _1376) * (_1371 + 2.0)) * exp2(log2(isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0))) * (_1371 + 1.0))) + _1376) * _1341;
        float _1386 = _1309 * 0.5;
        float _1387 = _1319 * 0.5;
        float _1388 = _1329 * 0.5;
        float _1389 = dot(vec3(_1386, _1387, _1388), vec3(_1386, _1387, _1388));
        float _1394 = (_1389 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1389);
        float _1402 = (dot(vec3(_628, _629, _630), vec3(_1394 * _1386, _1394 * _1387, _1394 * _1388)) + 1.0) * 0.5;
        float _4153 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1411 = sqrt(((_1387 * _1387) + (_1386 * _1386)) + (_1388 * _1388)) / (_1342 + 9.9999997473787516355514526367188e-06);
        float _4164 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1412 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
        float _1413 = _1412 * 2.0;
        float _1417 = (1.0 - _1412) / (_1412 + 1.0);
        float _4175 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1418 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
        float _1427 = ((((1.0 - _1418) * (_1413 + 2.0)) * exp2(log2(isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0))) * (_1413 + 1.0))) + _1418) * _1342;
        float _1428 = _1310 * 0.5;
        float _1429 = _1320 * 0.5;
        float _1430 = _1330 * 0.5;
        float _1431 = dot(vec3(_1428, _1429, _1430), vec3(_1428, _1429, _1430));
        float _1436 = (_1431 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1431);
        float _1444 = (dot(vec3(_628, _629, _630), vec3(_1436 * _1428, _1436 * _1429, _1436 * _1430)) + 1.0) * 0.5;
        float _4186 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1453 = sqrt(((_1429 * _1429) + (_1428 * _1428)) + (_1430 * _1430)) / (_1343 + 9.9999997473787516355514526367188e-06);
        float _4197 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1454 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
        float _1455 = _1454 * 2.0;
        float _1459 = (1.0 - _1454) / (_1454 + 1.0);
        float _4208 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1460 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
        float _1469 = ((((1.0 - _1460) * (_1455 + 2.0)) * exp2(log2(isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0))) * (_1455 + 1.0))) + _1460) * _1343;
        _1477 = _1310;
        _1478 = _1309;
        _1479 = _1308;
        _1480 = _1320;
        _1481 = _1319;
        _1482 = _1318;
        _1483 = _1330;
        _1484 = _1329;
        _1485 = _1328;
        _1486 = _1343;
        _1487 = _1342;
        _1488 = _1341;
        _1489 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0)));
        _1490 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0)));
        _1491 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0)));
    }
    else
    {
        _1477 = _1169;
        _1478 = _1169;
        _1479 = _1169;
        _1480 = _1169;
        _1481 = _1169;
        _1482 = _1169;
        _1483 = _1169;
        _1484 = _1169;
        _1485 = _1169;
        _1486 = _1169;
        _1487 = _1169;
        _1488 = _1169;
        _1489 = 0.0;
        _1490 = 0.0;
        _1491 = 0.0;
    }
    float _1501 = (cbModelParam._m0[1u].x * (_1489 - _1181)) + _1181;
    float _1502 = (cbModelParam._m0[1u].x * (_1490 - _1182)) + _1182;
    float _1503 = (cbModelParam._m0[1u].x * (_1491 - _1183)) + _1183;
    float _1524 = fma(_1503, cbSceneParam._m0[89u].z, fma(_1502, cbSceneParam._m0[89u].y, _1501 * cbSceneParam._m0[89u].x));
    float _1527 = fma(_1503, cbSceneParam._m0[90u].z, fma(_1502, cbSceneParam._m0[90u].y, _1501 * cbSceneParam._m0[90u].x));
    float _1530 = fma(_1503, cbSceneParam._m0[91u].z, fma(_1502, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1501));
    float _1545 = _805 * 0.5;
    float _1546 = _806 * 0.5;
    float _1547 = _807 * 0.5;
    float _1548 = dot(vec4(_1545, _1546, _1547, 1.0), vec4(_1479, _1482, _1485, _1488));
    float _1551 = dot(vec4(_1545, _1546, _1547, 1.0), vec4(_1478, _1481, _1484, _1487));
    float _1554 = dot(vec4(_1545, _1546, _1547, 1.0), vec4(_1477, _1480, _1483, _1486));
    float _1588;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1561 = dot(vec4(_1545, _1546, _1547, 1.0), vec4(_1168, _1172, _1175, _1178));
        float _1565 = dot(vec4(_1545, _1546, _1547, 1.0), vec4(_1170, _1173, _1176, _1179));
        float _1569 = dot(vec4(_1545, _1546, _1547, 1.0), vec4(_1171, _1174, _1177, _1180));
        float _1576 = dot(vec4(cbModelParam._m0[39u]), vec4(_1545, _1546, _1547, 1.0));
        _1588 = dot(vec3(isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0)), isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0)), isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1576) ? 0.0 : (isnan(0.0) ? _1576 : max(0.0, _1576))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1588 = 1.0;
    }
    float _1599;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1590 = dot(vec4(cbModelParam._m0[40u]), vec4(_1545, _1546, _1547, 1.0));
        _1599 = dot(vec3(isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0)), isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0)), isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1590) ? 0.0 : (isnan(0.0) ? _1590 : max(0.0, _1590))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1599 = 1.0;
    }
    float _1603 = (_1599 * cbModelParam._m0[1u].x) + (_1588 * (1.0 - cbModelParam._m0[1u].x));
    float _1613 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _631);
    float _1614 = isnan(_1613) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1613 : min(cbModelParam._m0[25u].z, _1613));
    float _1696;
    float _1698;
    float _1700;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1663 = fma(_868, cbModelParam._m0[13u].z, fma(_864, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _860)) + cbModelParam._m0[13u].w;
        float _1667 = fma(_868, cbModelParam._m0[14u].z, fma(_864, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _860)) + cbModelParam._m0[14u].w;
        float _1671 = fma(_868, cbModelParam._m0[15u].z, fma(_864, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _860)) + cbModelParam._m0[15u].w;
        float _1674 = fma(_807, cbModelParam._m0[13u].z, fma(_806, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _805));
        float _1677 = fma(_807, cbModelParam._m0[14u].z, fma(_806, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _805));
        float _1680 = fma(_807, cbModelParam._m0[15u].z, fma(_806, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _805));
        float _1708;
        if (_1674 > 0.0)
        {
            _1708 = abs((1.0 - _1663) / _1674);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1674 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1663 + 1.0) / _1674);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1708 = frontier_phi_14_12_ladder;
        }
        float _1880;
        if (_1677 > 0.0)
        {
            _1880 = abs((1.0 - _1667) / _1677);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1677 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1667 + 1.0) / _1677);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1880 = frontier_phi_23_19_ladder;
        }
        float _2176;
        if (_1680 > 0.0)
        {
            _2176 = abs((1.0 - _1671) / _1680);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1680 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1671 + 1.0) / _1680);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2176 = frontier_phi_35_30_ladder;
        }
        float _2178 = isnan(_1880) ? _1708 : (isnan(_1708) ? _1880 : min(_1708, _1880));
        float _2179 = isnan(_2176) ? _2178 : (isnan(_2178) ? _2176 : min(_2178, _2176));
        float _2183 = (_2179 * _1674) + _1663;
        float _2184 = (_2179 * _1677) + _1667;
        float _2185 = (_2179 * _1680) + _1671;
        float _2186 = _2179 * 9.9999997473787516355514526367188e-05;
        float _2188 = (-1.0) - _2186;
        float _2190 = _2186 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2185 > _2190) || ((_2185 < _2188) || ((_2184 > _2190) || ((_2184 < _2188) || ((_2183 < _2188) || (_2183 > _2190))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2330 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2185, cbModelParam._m0[9u].z, fma(_2184, cbModelParam._m0[9u].y, _2183 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2185, cbModelParam._m0[10u].z, fma(_2184, cbModelParam._m0[10u].y, _2183 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2185, cbModelParam._m0[11u].z, fma(_2184, cbModelParam._m0[11u].y, _2183 * cbModelParam._m0[11u].x))), _1614);
            frontier_phi_13_35_ladder = _2330.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2330.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2330.x * cbModelParam._m0[1u].y;
        }
        _1696 = frontier_phi_13_35_ladder_2;
        _1698 = frontier_phi_13_35_ladder_1;
        _1700 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1684 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_805, _806, _807), _1614);
        _1696 = _1684.x * cbModelParam._m0[1u].y;
        _1698 = _1684.y * cbModelParam._m0[1u].y;
        _1700 = _1684.z * cbModelParam._m0[1u].y;
    }
    float _1704 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _631);
    float _1705 = isnan(_1704) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1704 : min(cbModelParam._m0[25u].w, _1704));
    float _1795;
    float _1797;
    float _1799;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1759 = fma(_868, cbModelParam._m0[21u].z, fma(_864, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _860)) + cbModelParam._m0[21u].w;
        float _1763 = fma(_868, cbModelParam._m0[22u].z, fma(_864, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _860)) + cbModelParam._m0[22u].w;
        float _1767 = fma(_868, cbModelParam._m0[23u].z, fma(_864, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _860)) + cbModelParam._m0[23u].w;
        float _1770 = fma(_807, cbModelParam._m0[21u].z, fma(_806, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _805));
        float _1773 = fma(_807, cbModelParam._m0[22u].z, fma(_806, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _805));
        float _1776 = fma(_807, cbModelParam._m0[23u].z, fma(_806, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _805));
        float _1885;
        if (_1770 > 0.0)
        {
            _1885 = abs((1.0 - _1759) / _1770);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1770 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1759 + 1.0) / _1770);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1885 = frontier_phi_25_21_ladder;
        }
        float _2203;
        if (_1773 > 0.0)
        {
            _2203 = abs((1.0 - _1763) / _1773);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1773 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1763 + 1.0) / _1773);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2203 = frontier_phi_37_32_ladder;
        }
        float _2541;
        if (_1776 > 0.0)
        {
            _2541 = abs((1.0 - _1767) / _1776);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1776 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1767 + 1.0) / _1776);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2541 = frontier_phi_47_44_ladder;
        }
        float _2543 = isnan(_2203) ? _1885 : (isnan(_1885) ? _2203 : min(_1885, _2203));
        float _2544 = isnan(_2541) ? _2543 : (isnan(_2543) ? _2541 : min(_2543, _2541));
        float _2548 = (_2544 * _1770) + _1759;
        float _2549 = (_2544 * _1773) + _1763;
        float _2550 = (_2544 * _1776) + _1767;
        float _2551 = _2544 * 9.9999997473787516355514526367188e-05;
        float _2552 = (-1.0) - _2551;
        float _2554 = _2551 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2550 > _2554) || ((_2550 < _2552) || ((_2549 > _2554) || ((_2549 < _2552) || ((_2548 < _2552) || (_2548 > _2554))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2672 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2550, cbModelParam._m0[17u].z, fma(_2549, cbModelParam._m0[17u].y, _2548 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2550, cbModelParam._m0[18u].z, fma(_2549, cbModelParam._m0[18u].y, _2548 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2550, cbModelParam._m0[19u].z, fma(_2549, cbModelParam._m0[19u].y, _2548 * cbModelParam._m0[19u].x))), _1705);
            frontier_phi_22_47_ladder = _2672.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2672.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2672.x * cbModelParam._m0[1u].z;
        }
        _1795 = frontier_phi_22_47_ladder_2;
        _1797 = frontier_phi_22_47_ladder_1;
        _1799 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1779 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_805, _806, _807), _1705);
        _1795 = _1779.x * cbModelParam._m0[1u].z;
        _1797 = _1779.y * cbModelParam._m0[1u].z;
        _1799 = _1779.z * cbModelParam._m0[1u].z;
    }
    float _1812 = (((_831 * _781) + _832) * _797) * ((cbModelParam._m0[1u].w * (_1795 - _1696)) + _1696);
    float _1814 = (((_831 * _783) + _832) * _797) * ((cbModelParam._m0[1u].w * (_1797 - _1698)) + _1698);
    float _1816 = (((_831 * _784) + _832) * _797) * ((cbModelParam._m0[1u].w * (_1799 - _1700)) + _1700);
    float _1819 = fma(_1816, cbSceneParam._m0[89u].z, fma(_1814, cbSceneParam._m0[89u].y, _1812 * cbSceneParam._m0[89u].x));
    float _1822 = fma(_1816, cbSceneParam._m0[90u].z, fma(_1814, cbSceneParam._m0[90u].y, _1812 * cbSceneParam._m0[90u].x));
    float _1825 = fma(_1816, cbSceneParam._m0[91u].z, fma(_1814, cbSceneParam._m0[91u].y, _1812 * cbSceneParam._m0[91u].x));
    float _1859 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1863 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1867 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1871 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1872 = _1859 / _1871;
    float _1873 = _1863 / _1871;
    float _1874 = _1867 / _1871;
    float _2021;
    float _2022;
    float _2023;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1901 = ((uint(_1874 > cbSceneParam._m0[59u].y) + uint(_1874 > cbSceneParam._m0[59u].x)) + uint(_1874 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1902 = _1901 + 43u;
        uint _1910 = _1901 + 44u;
        uint _1918 = _1901 + 45u;
        uint _1926 = _1901 + 46u;
        float _1937 = fma(_1871, cbSceneParam._m0[_1902].w, fma(_1867, cbSceneParam._m0[_1902].z, fma(_1863, cbSceneParam._m0[_1902].y, _1859 * cbSceneParam._m0[_1902].x)));
        float _1941 = fma(_1871, cbSceneParam._m0[_1910].w, fma(_1867, cbSceneParam._m0[_1910].z, fma(_1863, cbSceneParam._m0[_1910].y, _1859 * cbSceneParam._m0[_1910].x)));
        float _1949 = fma(_1871, cbSceneParam._m0[_1926].w, fma(_1867, cbSceneParam._m0[_1926].z, fma(_1863, cbSceneParam._m0[_1926].y, _1859 * cbSceneParam._m0[_1926].x)));
        float _1954 = cbSceneParam._m0[33u].z * _1949;
        float _1956 = cbSceneParam._m0[33u].w * _1949;
        float _1959 = fma(_1871, cbSceneParam._m0[_1918].w, fma(_1867, cbSceneParam._m0[_1918].z, fma(_1863, cbSceneParam._m0[_1918].y, _1859 * cbSceneParam._m0[_1918].x))) / _1949;
        float _2007 = (cbSceneParam._m0[33u].x - sqrt(((_1873 * _1873) + (_1872 * _1872)) + (_1874 * _1874))) * cbSceneParam._m0[33u].y;
        float _4334 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
        float _2014 = (isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1954 + _1937) / _1949, (_1956 + _1941) / _1949), _1959), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1956 + _1937) / _1949, (_1941 - _1954) / _1949), _1959), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1937 - _1954) / _1949, (_1941 - _1956) / _1949), _1959), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1937 - _1956) / _1949, (_1954 + _1941) / _1949), _1959), 0.0)).x), vec4(0.25)));
        _2021 = 1.0 - (_2014 * cbSceneParam._m0[34u].x);
        _2022 = 1.0 - (_2014 * cbSceneParam._m0[34u].y);
        _2023 = 1.0 - (_2014 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2021 = 1.0;
        _2022 = 1.0;
        _2023 = 1.0;
    }
    float _2087;
    float _2089;
    float _2091;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2075 = fma(_1871, cbSceneParam._m0[63u].w, fma(_1867, cbSceneParam._m0[63u].z, fma(_1863, cbSceneParam._m0[63u].y, _1859 * cbSceneParam._m0[63u].x)));
        float _2076 = fma(_1871, cbSceneParam._m0[60u].w, fma(_1867, cbSceneParam._m0[60u].z, fma(_1863, cbSceneParam._m0[60u].y, _1859 * cbSceneParam._m0[60u].x))) / _2075;
        float _2077 = fma(_1871, cbSceneParam._m0[61u].w, fma(_1867, cbSceneParam._m0[61u].z, fma(_1863, cbSceneParam._m0[61u].y, _1859 * cbSceneParam._m0[61u].x))) / _2075;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2076 >= cbSceneParam._m0[64u].x) && (_2077 >= cbSceneParam._m0[64u].y)) && (_2076 <= cbSceneParam._m0[64u].z)) && (_2077 <= cbSceneParam._m0[64u].w))
        {
            float _2216 = fma(_1871, cbSceneParam._m0[62u].w, fma(_1867, cbSceneParam._m0[62u].z, fma(_1863, cbSceneParam._m0[62u].y, _1859 * cbSceneParam._m0[62u].x))) / _2075;
            float _2220 = isnan(cbSceneParam._m0[41u].w) ? _2216 : (isnan(_2216) ? cbSceneParam._m0[41u].w : max(_2216, cbSceneParam._m0[41u].w));
            float _2263 = (cbSceneParam._m0[33u].x - sqrt(((_1873 * _1873) + (_1872 * _1872)) + (_1874 * _1874))) * cbSceneParam._m0[33u].y;
            float _4350 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0));
            float _2270 = (isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2076, cbSceneParam._m0[33u].w + _2077), _2220), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2076, _2077 - cbSceneParam._m0[33u].z), _2220), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2076 - cbSceneParam._m0[33u].z, _2077 - cbSceneParam._m0[33u].w), _2220), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2076 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2077), _2220), 0.0)).x), vec4(0.25)));
            float _2274 = 1.0 - (_2270 * cbSceneParam._m0[34u].x);
            float _2275 = 1.0 - (_2270 * cbSceneParam._m0[34u].y);
            float _2276 = 1.0 - (_2270 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2276) ? _2023 : (isnan(_2023) ? _2276 : min(_2023, _2276));
            frontier_phi_34_33_ladder_1 = isnan(_2275) ? _2022 : (isnan(_2022) ? _2275 : min(_2022, _2275));
            frontier_phi_34_33_ladder_2 = isnan(_2274) ? _2021 : (isnan(_2021) ? _2274 : min(_2021, _2274));
        }
        else
        {
            frontier_phi_34_33_ladder = _2023;
            frontier_phi_34_33_ladder_1 = _2022;
            frontier_phi_34_33_ladder_2 = _2021;
        }
        _2087 = frontier_phi_34_33_ladder_2;
        _2089 = frontier_phi_34_33_ladder_1;
        _2091 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2087 = _2021;
        _2089 = _2022;
        _2091 = _2023;
    }
    uvec4 _2096 = floatBitsToUint(cbInstanceData._m0[_265 + 5u]);
    uint _2098 = _2096.x * 14u;
    uint _2099 = _2098 + 13u;
    float _2106 = _797 + (-1.0);
    float _2111 = (cbLight._m0[_2099].x * _2106) + 1.0;
    float _2112 = (cbLight._m0[_2099].y * _2106) + 1.0;
    float _2113 = (cbLight._m0[_2099].z * _2106) + 1.0;
    float _2114 = (cbLight._m0[_2099].w * _2106) + 1.0;
    uint _2115 = _2098 + 5u;
    float _2121 = isnan(1.0) ? _2112 : (isnan(_2112) ? 1.0 : min(_2112, 1.0));
    uint _2125 = _2098 + 4u;
    float _2135 = isnan(1.0) ? _2111 : (isnan(_2111) ? 1.0 : min(_2111, 1.0));
    uint _2139 = _2098 | 1u;
    float _2150 = dot(vec3(cbLight._m0[_2098].xyz), vec3(_628, _629, _630));
    float _2153 = dot(vec3(cbLight._m0[_2139].xyz), vec3(_628, _629, _630));
    float _4386 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
    float _4397 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
    float _2158 = (isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0))) * 0.3183098733425140380859375;
    float _2160 = (isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0))) * 0.3183098733425140380859375;
    float _2167 = ((cbLight._m0[_2115].x * _2121) * _2160) + (((cbLight._m0[_2125].x * _2087) * _2135) * _2158);
    float _2168 = ((_2121 * cbLight._m0[_2115].y) * _2160) + (((cbLight._m0[_2125].y * _2089) * _2135) * _2158);
    float _2169 = ((_2121 * cbLight._m0[_2115].z) * _2160) + (((cbLight._m0[_2125].z * _2091) * _2135) * _2158);
    uvec4 _2173 = floatBitsToUint(cbLight._m0[_2098 + 12u]);
    bool _2175 = _2173.x == 0u;
    float _2277;
    float _2279;
    float _2281;
    if (_2175)
    {
        _2277 = _2167;
        _2279 = _2168;
        _2281 = _2169;
    }
    else
    {
        uint _2285 = _2098 + 6u;
        float _2301 = (dot(vec3(cbLight._m0[_2098 + 2u].xyz), vec3(_628, _629, _630)) * 0.5) + 0.5;
        float _2302 = _2301 * _2301;
        float _4408 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
        float _2303 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
        float _2304 = isnan(1.0) ? _2113 : (isnan(_2113) ? 1.0 : min(_2113, 1.0));
        _2277 = (((cbLight._m0[_2285].x * 0.3183098733425140380859375) * _2303) * _2304) + _2167;
        _2279 = (((cbLight._m0[_2285].y * 0.3183098733425140380859375) * _2303) * _2304) + _2168;
        _2281 = (((cbLight._m0[_2285].z * 0.3183098733425140380859375) * _2303) * _2304) + _2169;
    }
    bool _2284 = _2173.y == 0u;
    float _2339;
    float _2341;
    float _2343;
    if (_2284)
    {
        _2339 = _2277;
        _2341 = _2279;
        _2343 = _2281;
    }
    else
    {
        uint _2512 = _2098 + 7u;
        float _2528 = (dot(vec3(cbLight._m0[_2098 + 3u].xyz), vec3(_628, _629, _630)) * 0.5) + 0.5;
        float _2529 = _2528 * _2528;
        float _4424 = isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : max(_2529, 0.0));
        float _2530 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
        float _2531 = isnan(1.0) ? _2114 : (isnan(_2114) ? 1.0 : min(_2114, 1.0));
        _2339 = (((cbLight._m0[_2512].x * 0.3183098733425140380859375) * _2530) * _2531) + _2277;
        _2341 = (((cbLight._m0[_2512].y * 0.3183098733425140380859375) * _2530) * _2531) + _2279;
        _2343 = (((cbLight._m0[_2512].z * 0.3183098733425140380859375) * _2530) * _2531) + _2281;
    }
    uint _2346 = _2098 + 8u;
    float _2359 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2098].w)) * _631) * 0.949999988079071044921875);
    float _2360 = _2359 * _2359;
    float _2361 = cbLight._m0[_2098].x + _708;
    float _2362 = cbLight._m0[_2098].y + _709;
    float _2363 = cbLight._m0[_2098].z + _710;
    float _2367 = inversesqrt(dot(vec3(_2361, _2362, _2363), vec3(_2361, _2362, _2363)));
    float _2368 = _2367 * _2361;
    float _2369 = _2367 * _2362;
    float _2370 = _2367 * _2363;
    float _2371 = dot(vec3(_628, _629, _630), vec3(cbLight._m0[_2098].xyz));
    float _4440 = isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0));
    float _2374 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
    float _4451 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
    float _2375 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
    float _2376 = dot(vec3(_628, _629, _630), vec3(_2368, _2369, _2370));
    float _4462 = isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : max(_2376, 0.0));
    float _2379 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
    float _2380 = dot(vec3(cbLight._m0[_2098].xyz), vec3(_2368, _2369, _2370));
    float _4473 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
    float _2384 = _2360 * _2360;
    float _2388 = ((_2379 * _2379) * (_2384 + (-1.0))) + 1.0;
    float _2396 = exp2(log2(1.0 - (isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0)))) * 5.0);
    float _2397 = 0.959999978542327880859375 - _778;
    float _2399 = 0.959999978542327880859375 - _779;
    float _2400 = 0.959999978542327880859375 - _780;
    float _2407 = 1.0 - _2360;
    float _2418 = (0.5 / (((_2375 * ((_2374 * _2407) + _2360)) + 9.9999999392252902907785028219223e-09) + (((_2375 * _2407) + _2360) * _2374))) * _2374;
    float _4484 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
    float _2420 = (isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0))) * (_2384 / ((_2388 * _2388) * 3.141590118408203125));
    uint _2434 = _2098 + 9u;
    float _2445 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2139].w)) * _631) * 0.949999988079071044921875);
    float _2446 = _2445 * _2445;
    float _2447 = cbLight._m0[_2139].x + _708;
    float _2448 = cbLight._m0[_2139].y + _709;
    float _2449 = cbLight._m0[_2139].z + _710;
    float _2453 = inversesqrt(dot(vec3(_2447, _2448, _2449), vec3(_2447, _2448, _2449)));
    float _2454 = _2453 * _2447;
    float _2455 = _2453 * _2448;
    float _2456 = _2453 * _2449;
    float _2457 = dot(vec3(_628, _629, _630), vec3(cbLight._m0[_2139].xyz));
    float _4495 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
    float _2460 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
    float _2461 = dot(vec3(_628, _629, _630), vec3(_2454, _2455, _2456));
    float _4506 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
    float _2464 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
    float _2465 = dot(vec3(cbLight._m0[_2139].xyz), vec3(_2454, _2455, _2456));
    float _4517 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
    float _2469 = _2446 * _2446;
    float _2473 = ((_2464 * _2464) * (_2469 + (-1.0))) + 1.0;
    float _2480 = exp2(log2(1.0 - (isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0)))) * 5.0);
    float _2487 = 1.0 - _2446;
    float _2497 = (0.5 / (((_2375 * ((_2460 * _2487) + _2446)) + 9.9999999392252902907785028219223e-09) + (((_2375 * _2487) + _2446) * _2460))) * _2460;
    float _4528 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
    float _2499 = (isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0))) * (_2469 / ((_2473 * _2473) * 3.141590118408203125));
    float _2509 = (((((_2480 * _2397) + _781) * cbLight._m0[_2434].x) * _2499) * _2121) + ((((cbLight._m0[_2346].x * _2087) * ((_2396 * _2397) + _781)) * _2420) * _2135);
    float _2510 = (((((_2480 * _2399) + _783) * cbLight._m0[_2434].y) * _2499) * _2121) + ((((cbLight._m0[_2346].y * _2089) * ((_2396 * _2399) + _783)) * _2420) * _2135);
    float _2511 = (((((_2480 * _2400) + _784) * cbLight._m0[_2434].z) * _2499) * _2121) + ((((cbLight._m0[_2346].z * _2091) * ((_2396 * _2400) + _784)) * _2420) * _2135);
    float _2567;
    float _2569;
    float _2571;
    if (_2175)
    {
        _2567 = _2509;
        _2569 = _2510;
        _2571 = _2511;
    }
    else
    {
        uint _2573 = _2098 + 2u;
        uint _2577 = _2098 + 10u;
        float _2591 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2573].w)) * _631) * 0.949999988079071044921875);
        float _2592 = _2591 * _2591;
        float _2593 = cbLight._m0[_2573].x + _708;
        float _2594 = cbLight._m0[_2573].y + _709;
        float _2595 = cbLight._m0[_2573].z + _710;
        float _2599 = inversesqrt(dot(vec3(_2593, _2594, _2595), vec3(_2593, _2594, _2595)));
        float _2600 = _2599 * _2593;
        float _2601 = _2599 * _2594;
        float _2602 = _2599 * _2595;
        float _2603 = dot(vec3(_628, _629, _630), vec3(cbLight._m0[_2573].xyz));
        float _4539 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0));
        float _2606 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
        float _2607 = dot(vec3(_628, _629, _630), vec3(_2600, _2601, _2602));
        float _4550 = isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : max(_2607, 0.0));
        float _2610 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
        float _2611 = dot(vec3(cbLight._m0[_2573].xyz), vec3(_2600, _2601, _2602));
        float _4561 = isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0));
        float _2615 = _2592 * _2592;
        float _2619 = ((_2610 * _2610) * (_2615 + (-1.0))) + 1.0;
        float _2626 = exp2(log2(1.0 - (isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0)))) * 5.0);
        float _2633 = 1.0 - _2592;
        float _2643 = (0.5 / (((_2375 * ((_2606 * _2633) + _2592)) + 9.9999999392252902907785028219223e-09) + (((_2375 * _2633) + _2592) * _2606))) * _2606;
        float _4572 = isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : max(_2643, 0.0));
        float _2645 = (isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0))) * (_2615 / ((_2619 * _2619) * 3.141590118408203125));
        float _2646 = isnan(1.0) ? _2113 : (isnan(_2113) ? 1.0 : min(_2113, 1.0));
        _2567 = (((((_2626 * _2397) + _781) * cbLight._m0[_2577].x) * _2645) * _2646) + _2509;
        _2569 = (((((_2626 * _2399) + _783) * cbLight._m0[_2577].y) * _2645) * _2646) + _2510;
        _2571 = (((((_2626 * _2400) + _784) * cbLight._m0[_2577].z) * _2645) * _2646) + _2511;
    }
    float _2677;
    float _2679;
    float _2681;
    if (_2284)
    {
        _2677 = _2567;
        _2679 = _2569;
        _2681 = _2571;
    }
    else
    {
        uint _2688 = _2098 + 3u;
        uint _2692 = _2098 + 11u;
        float _2706 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2688].w)) * _631) * 0.949999988079071044921875);
        float _2707 = _2706 * _2706;
        float _2708 = cbLight._m0[_2688].x + _708;
        float _2709 = cbLight._m0[_2688].y + _709;
        float _2710 = cbLight._m0[_2688].z + _710;
        float _2714 = inversesqrt(dot(vec3(_2708, _2709, _2710), vec3(_2708, _2709, _2710)));
        float _2715 = _2714 * _2708;
        float _2716 = _2714 * _2709;
        float _2717 = _2714 * _2710;
        float _2718 = dot(vec3(_628, _629, _630), vec3(cbLight._m0[_2688].xyz));
        float _4588 = isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0));
        float _2721 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
        float _2722 = dot(vec3(_628, _629, _630), vec3(_2715, _2716, _2717));
        float _4599 = isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0));
        float _2725 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
        float _2726 = dot(vec3(cbLight._m0[_2688].xyz), vec3(_2715, _2716, _2717));
        float _4610 = isnan(0.0) ? _2726 : (isnan(_2726) ? 0.0 : max(_2726, 0.0));
        float _2730 = _2707 * _2707;
        float _2734 = ((_2725 * _2725) * (_2730 + (-1.0))) + 1.0;
        float _2741 = exp2(log2(1.0 - (isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0)))) * 5.0);
        float _2748 = 1.0 - _2707;
        float _2758 = (0.5 / (((_2375 * ((_2721 * _2748) + _2707)) + 9.9999999392252902907785028219223e-09) + (((_2375 * _2748) + _2707) * _2721))) * _2721;
        float _4621 = isnan(0.0) ? _2758 : (isnan(_2758) ? 0.0 : max(_2758, 0.0));
        float _2760 = (isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0))) * (_2730 / ((_2734 * _2734) * 3.141590118408203125));
        float _2761 = isnan(1.0) ? _2114 : (isnan(_2114) ? 1.0 : min(_2114, 1.0));
        _2677 = (((((_2741 * _2397) + _781) * cbLight._m0[_2692].x) * _2760) * _2761) + _2567;
        _2679 = (((((_2741 * _2399) + _783) * cbLight._m0[_2692].y) * _2760) * _2761) + _2569;
        _2681 = (((((_2741 * _2400) + _784) * cbLight._m0[_2692].z) * _2760) * _2761) + _2571;
    }
    float _2827;
    float _2829;
    float _2831;
    float _2833;
    float _2835;
    float _2837;
    if (_2096.y == 0u)
    {
        uvec4 _2782 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2783 = _2782.x;
        uint _2794 = uint((float(_2782.y) * floor(float(uint(cbSceneParam._m0[85u].y * _717) / _2783))) + floor(float(uint(cbSceneParam._m0[85u].x * _716) / _2783)));
        float _2804 = (log2(_1874 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2805 = isnan(0.0) ? _2804 : (isnan(_2804) ? 0.0 : max(_2804, 0.0));
        uint _2808 = uint(isnan(14.0) ? _2805 : (isnan(_2805) ? 14.0 : min(_2805, 14.0)));
        uvec4 _2813 = texelFetch(g_lightClusterGridBuffer, int(((_2808 << 2u) + (_2794 << 6u)) >> 2u));
        uint _2814 = _2813.x;
        uint _2815 = _2782.z;
        float _2894;
        float _2896;
        float _2898;
        float _2900;
        float _2902;
        float _2904;
        if (((((1u << ((_2815 >> 4u) & 15u)) + 4294967295u) & _2814) == 0u) || ((_2815 & 240u) == 0u))
        {
            _2894 = 0.0;
            _2896 = 0.0;
            _2898 = 0.0;
            _2900 = 0.0;
            _2902 = 0.0;
            _2904 = 0.0;
        }
        else
        {
            float _2895;
            float _2897;
            float _2899;
            float _2901;
            float _2903;
            float _2905;
            float _3039 = 0.0;
            float _3040 = 0.0;
            float _3041 = 0.0;
            float _3042 = 0.0;
            float _3043 = 0.0;
            float _3044 = 0.0;
            uint _3045 = 0u;
            uint _3054;
            bool _3055;
            for (;;)
            {
                _3054 = texelFetch(g_lightClassification, int((((_2808 << 5u) + (_2794 << 9u)) + (_3045 << 2u)) >> 2u)).x;
                _3055 = _3054 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3055)
                {
                    frontier_phi_66_pred = _3044;
                    frontier_phi_66_pred_1 = _3043;
                    frontier_phi_66_pred_2 = _3042;
                    frontier_phi_66_pred_3 = _3041;
                    frontier_phi_66_pred_4 = _3040;
                    frontier_phi_66_pred_5 = _3039;
                }
                else
                {
                    float _3163;
                    float _3164;
                    float _3165;
                    float _3166;
                    float _3167;
                    float _3168;
                    uint _3169;
                    _3163 = _3039;
                    _3164 = _3040;
                    _3165 = _3041;
                    _3166 = _3042;
                    _3167 = _3043;
                    _3168 = _3044;
                    _3169 = _3054;
                    float _3095;
                    float _3096;
                    float _3097;
                    float _3098;
                    float _3099;
                    float _3100;
                    for (;;)
                    {
                        uint _3173 = uint(findLSB(_3169)) + (_3045 << 5u);
                        uint _3170 = (_3169 + 4294967295u) & _3169;
                        uint _3175 = _3173 * 48u;
                        vec4 _3189 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3175)).x, texelFetch(g_PointLightRenderingBuffer, int(_3175 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3175 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3175 + 3u)).x));
                        uint _3195 = (_3173 * 48u) + 4u;
                        vec4 _3208 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3195)).x, texelFetch(g_PointLightRenderingBuffer, int(_3195 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3195 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3195 + 3u)).x));
                        uint _3214 = (_3173 * 48u) + 8u;
                        vec3 _3225 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3214)).x, texelFetch(g_PointLightRenderingBuffer, int(_3214 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3214 + 2u)).x));
                        float _3229 = _3189.x - _1872;
                        float _3230 = _3189.y - _1873;
                        float _3231 = _3189.z - _1874;
                        float _3232 = dot(vec3(_3229, _3230, _3231), vec3(_3229, _3230, _3231));
                        float _3235 = inversesqrt(_3232);
                        float _3236 = _3235 * _3229;
                        float _3237 = _3235 * _3230;
                        float _3238 = _3235 * _3231;
                        float _3239 = dot(vec3(_738, _741, _744), vec3(_3236, _3237, _3238));
                        float _3244 = 1.0 - (_3232 * _3189.w);
                        float _4647 = isnan(0.0) ? _3244 : (isnan(_3244) ? 0.0 : max(_3244, 0.0));
                        float _3245 = isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0));
                        float _3246 = sqrt(_3232) * _3208.w;
                        float _3249 = 1.39999997615814208984375 / (_3246 + 1.39999997615814208984375);
                        float _3250 = _3249 * _3249;
                        float _3253 = ((1.0 - _3250) * _3239) + _3250;
                        float _3256 = _3246 * _3246;
                        float _3260 = ((isnan(0.0) ? _3253 : (isnan(_3253) ? 0.0 : max(_3253, 0.0))) * _3245) / ((_3256 * 0.699999988079071044921875) + 1.0);
                        float _3264 = (-0.0) - _1872;
                        float _3265 = (-0.0) - _1873;
                        float _3266 = (-0.0) - _1874;
                        float _3270 = inversesqrt(dot(vec3(_3264, _3265, _3266), vec3(_3264, _3265, _3266)));
                        float _3271 = _3270 * _3264;
                        float _3272 = _3270 * _3265;
                        float _3273 = _3270 * _3266;
                        float _3280 = exp2(log2(1.0 / ((_3256 * 3.5) + 5.0)) * 0.25);
                        float _3281 = 1.0 - _813;
                        float _3288 = sqrt(1.0 - ((1.0 - (_3281 * _3281)) * (1.0 - (_3280 * _3280))));
                        float _3289 = _3288 * _3288;
                        float _3290 = _3289 * _3289;
                        float _3291 = _3271 + _3236;
                        float _3292 = _3272 + _3237;
                        float _3293 = _3273 + _3238;
                        float _3297 = inversesqrt(dot(vec3(_3291, _3292, _3293), vec3(_3291, _3292, _3293)));
                        float _3301 = dot(vec3(_738, _741, _744), vec3(_3271, _3272, _3273));
                        float _4663 = isnan(0.0) ? _3301 : (isnan(_3301) ? 0.0 : max(_3301, 0.0));
                        float _3304 = isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0));
                        float _3305 = dot(vec3(_738, _741, _744), vec3(_3297 * _3291, _3297 * _3292, _3297 * _3293));
                        float _4674 = isnan(0.0) ? _3305 : (isnan(_3305) ? 0.0 : max(_3305, 0.0));
                        float _3308 = isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0));
                        float _3312 = ((_3308 * _3308) * (_3290 + (-1.0))) + 1.0;
                        float _3313 = _3249 * _3289;
                        float _3314 = _3313 * _3313;
                        float _3317 = ((1.0 - _3314) * _3239) + _3314;
                        float _4685 = isnan(0.0) ? _3317 : (isnan(_3317) ? 0.0 : max(_3317, 0.0));
                        float _3318 = isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0));
                        float _3319 = 1.0 - _3289;
                        float _3329 = (0.5 / (((_3318 * ((_3304 * _3319) + _3289)) + 9.9999999392252902907785028219223e-09) + (((_3318 * _3319) + _3289) * _3304))) * _3318;
                        float _4696 = isnan(0.0) ? _3329 : (isnan(_3329) ? 0.0 : max(_3329, 0.0));
                        float _3339 = (((_3290 * 3.1415927410125732421875) * (isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0)))) / ((_3312 * _3312) * ((_3256 * 2.1991131305694580078125) + 3.141590118408203125))) * _3245;
                        _3098 = (_3260 * _3208.x) + _3166;
                        _3099 = (_3260 * _3208.y) + _3167;
                        _3100 = (_3260 * _3208.z) + _3168;
                        _3095 = (_3339 * _3225.x) + _3163;
                        _3096 = (_3339 * _3225.y) + _3164;
                        _3097 = (_3339 * _3225.z) + _3165;
                        if (_3170 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3163 = _3095;
                            _3164 = _3096;
                            _3165 = _3097;
                            _3166 = _3098;
                            _3167 = _3099;
                            _3168 = _3100;
                            _3169 = _3170;
                        }
                    }
                    frontier_phi_66_pred = _3100;
                    frontier_phi_66_pred_1 = _3099;
                    frontier_phi_66_pred_2 = _3098;
                    frontier_phi_66_pred_3 = _3097;
                    frontier_phi_66_pred_4 = _3096;
                    frontier_phi_66_pred_5 = _3095;
                }
                _2905 = frontier_phi_66_pred;
                _2903 = frontier_phi_66_pred_1;
                _2901 = frontier_phi_66_pred_2;
                _2899 = frontier_phi_66_pred_3;
                _2897 = frontier_phi_66_pred_4;
                _2895 = frontier_phi_66_pred_5;
                uint _3046 = _3045 + 1u;
                if (_3046 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3039 = _2895;
                    _3040 = _2897;
                    _3041 = _2899;
                    _3042 = _2901;
                    _3043 = _2903;
                    _3044 = _2905;
                    _3045 = _3046;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2894 = _2895;
            _2896 = _2897;
            _2898 = _2899;
            _2900 = _2901;
            _2902 = _2903;
            _2904 = _2905;
        }
        uvec4 _2908 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2909 = _2908.z;
        uint _2911 = (_2909 >> 8u) & 15u;
        float _3007;
        float _3009;
        float _3011;
        float _3013;
        float _3015;
        float _3017;
        if (((4294967295u << _2911) & _2814) == 0u)
        {
            _3007 = _2894;
            _3009 = _2896;
            _3011 = _2898;
            _3013 = _2900;
            _3015 = _2902;
            _3017 = _2904;
        }
        else
        {
            float _3032 = inversesqrt(dot(vec3(_1872, _1873, _1874), vec3(_1872, _1873, _1874)));
            float _3033 = _3032 * _1872;
            float _3034 = _3032 * _1873;
            float _3035 = _3032 * _1874;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2911 < ((_2909 >> 12u) & 15u))
            {
                float _3008;
                float _3010;
                float _3012;
                float _3014;
                float _3016;
                float _3018;
                float _3146 = _2894;
                float _3147 = _2896;
                float _3148 = _2898;
                float _3149 = _2900;
                float _3150 = _2902;
                float _3151 = _2904;
                uint _3152 = _2911;
                uint _3161;
                bool _3162;
                for (;;)
                {
                    _3161 = texelFetch(g_lightClassification, int((((_2808 << 5u) + (_2794 << 9u)) + (_3152 << 2u)) >> 2u)).x;
                    _3162 = _3161 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3162)
                    {
                        frontier_phi_72_pred = _3151;
                        frontier_phi_72_pred_1 = _3150;
                        frontier_phi_72_pred_2 = _3149;
                        frontier_phi_72_pred_3 = _3148;
                        frontier_phi_72_pred_4 = _3147;
                        frontier_phi_72_pred_5 = _3146;
                    }
                    else
                    {
                        float _3344;
                        float _3345;
                        float _3346;
                        float _3347;
                        float _3348;
                        float _3349;
                        float _3637;
                        float _3638;
                        float _3639;
                        float _3640;
                        float _3641;
                        float _3642;
                        float _3357 = _3146;
                        float _3358 = _3147;
                        float _3359 = _3148;
                        float _3360 = _3149;
                        float _3361 = _3150;
                        float _3362 = _3151;
                        uint _3363 = _3161;
                        uint _3364;
                        vec4 _3389;
                        float _3390;
                        vec4 _3405;
                        vec3 _3417;
                        vec4 _3432;
                        vec4 _3447;
                        float _3493;
                        bool _3494;
                        for (;;)
                        {
                            uint _3374 = ((_3152 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3363));
                            _3364 = (_3363 + 4294967295u) & _3363;
                            uint _3376 = _3374 * 40u;
                            _3389 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3376)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3376 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3376 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3376 + 3u)).x));
                            _3390 = _3389.w;
                            uint _3392 = (_3374 * 40u) + 4u;
                            _3405 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3392)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 3u)).x));
                            uint _3407 = (_3374 * 40u) + 8u;
                            _3417 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3407)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3407 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3407 + 2u)).x));
                            uint _3419 = (_3374 * 40u) + 16u;
                            _3432 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3419)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 3u)).x));
                            uint _3434 = (_3374 * 40u) + 20u;
                            _3447 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3434)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 3u)).x));
                            uint _3449 = (_3374 * 40u) + 24u;
                            vec4 _3462 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3449)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3449 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3449 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3449 + 3u)).x));
                            uint _3468 = (_3374 * 40u) + 28u;
                            vec4 _3481 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3468)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 3u)).x));
                            _3493 = fma(_1874, _3481.z, fma(_1873, _3481.y, _3481.x * _1872)) + _3481.w;
                            _3494 = !((fma(_1874, _3462.z, fma(_1873, _3462.y, _3462.x * _1872)) + _3462.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3494)
                            {
                                float _3521 = _3389.x - _1872;
                                float _3522 = _3389.y - _1873;
                                float _3523 = _3389.z - _1874;
                                float _3524 = dot(vec3(_3521, _3522, _3523), vec3(_3521, _3522, _3523));
                                float _3527 = inversesqrt(_3524);
                                float _3528 = _3527 * _3521;
                                float _3529 = _3527 * _3522;
                                float _3530 = _3527 * _3523;
                                float _3534 = 1.0 - (_3524 / (_3390 * _3390));
                                float _4707 = isnan(0.0) ? _3534 : (isnan(_3534) ? 0.0 : max(_3534, 0.0));
                                float _3535 = isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0));
                                float _3539 = sqrt(_3524) * _3405.w;
                                float _3541 = 1.39999997615814208984375 / (_3539 + 1.39999997615814208984375);
                                float _3542 = _3541 * _3541;
                                float _3545 = ((1.0 - _3542) * dot(vec3(_3528, _3529, _3530), vec3(_738, _741, _744))) + _3542;
                                float _3548 = _3539 * _3539;
                                float _3552 = (fma(_1874, _3432.z, fma(_1873, _3432.y, _3432.x * _1872)) + _3432.w) / _3493;
                                float _3553 = (fma(_1874, _3447.z, fma(_1873, _3447.y, _3447.x * _1872)) + _3447.w) / _3493;
                                float _3557 = 1.0 - dot(vec2(_3552, _3553), vec2(_3552, _3553));
                                float _4723 = isnan(0.0) ? _3557 : (isnan(_3557) ? 0.0 : max(_3557, 0.0));
                                float _3558 = isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0));
                                float _3559 = _3558 * (((isnan(0.0) ? _3545 : (isnan(_3545) ? 0.0 : max(_3545, 0.0))) * _3535) / ((_3548 * 0.699999988079071044921875) + 1.0));
                                float _3571 = exp2(log2(1.0 / ((_3548 * 3.5) + 5.0)) * 0.25);
                                float _3572 = 1.0 - _813;
                                float _3579 = sqrt(1.0 - ((1.0 - (_3572 * _3572)) * (1.0 - (_3571 * _3571))));
                                float _3580 = _3579 * _3579;
                                float _3581 = _3580 * _3580;
                                float _3582 = _3528 - _3033;
                                float _3583 = _3529 - _3034;
                                float _3584 = _3530 - _3035;
                                float _3588 = inversesqrt(dot(vec3(_3582, _3583, _3584), vec3(_3582, _3583, _3584)));
                                float _3592 = dot(vec3(_738, _741, _744), vec3((-0.0) - _3033, (-0.0) - _3034, (-0.0) - _3035));
                                float _4734 = isnan(0.0) ? _3592 : (isnan(_3592) ? 0.0 : max(_3592, 0.0));
                                float _3595 = isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0));
                                float _3596 = dot(vec3(_738, _741, _744), vec3(_3588 * _3582, _3588 * _3583, _3588 * _3584));
                                float _4745 = isnan(0.0) ? _3596 : (isnan(_3596) ? 0.0 : max(_3596, 0.0));
                                float _3599 = isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0));
                                float _3603 = ((_3599 * _3599) * (_3581 + (-1.0))) + 1.0;
                                float _3604 = _3541 * _3580;
                                float _3605 = _3604 * _3604;
                                float _3611 = ((1.0 - _3605) * dot(vec3(_738, _741, _744), vec3(_3528, _3529, _3530))) + _3605;
                                float _4756 = isnan(0.0) ? _3611 : (isnan(_3611) ? 0.0 : max(_3611, 0.0));
                                float _3612 = isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0));
                                float _3613 = 1.0 - _3580;
                                float _3623 = (0.5 / (((_3612 * ((_3595 * _3613) + _3580)) + 9.9999999392252902907785028219223e-09) + (((_3612 * _3613) + _3580) * _3595))) * _3612;
                                float _4767 = isnan(0.0) ? _3623 : (isnan(_3623) ? 0.0 : max(_3623, 0.0));
                                float _3633 = (_3558 * _3535) * (((_3581 * 3.1415927410125732421875) * (isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0)))) / ((_3603 * _3603) * ((_3548 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3559 * _3405.y;
                                frontier_phi_78_pred_1 = _3559 * _3405.x;
                                frontier_phi_78_pred_2 = _3633 * _3417.z;
                                frontier_phi_78_pred_3 = _3633 * _3417.y;
                                frontier_phi_78_pred_4 = _3633 * _3417.x;
                                frontier_phi_78_pred_5 = _3559 * _3405.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3641 = frontier_phi_78_pred;
                            _3640 = frontier_phi_78_pred_1;
                            _3639 = frontier_phi_78_pred_2;
                            _3638 = frontier_phi_78_pred_3;
                            _3637 = frontier_phi_78_pred_4;
                            _3642 = frontier_phi_78_pred_5;
                            _3347 = _3640 + _3360;
                            _3348 = _3641 + _3361;
                            _3349 = _3642 + _3362;
                            _3344 = _3637 + _3357;
                            _3345 = _3638 + _3358;
                            _3346 = _3639 + _3359;
                            if (_3364 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3357 = _3344;
                                _3358 = _3345;
                                _3359 = _3346;
                                _3360 = _3347;
                                _3361 = _3348;
                                _3362 = _3349;
                                _3363 = _3364;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3349;
                        frontier_phi_72_pred_1 = _3348;
                        frontier_phi_72_pred_2 = _3347;
                        frontier_phi_72_pred_3 = _3346;
                        frontier_phi_72_pred_4 = _3345;
                        frontier_phi_72_pred_5 = _3344;
                    }
                    _3018 = frontier_phi_72_pred;
                    _3016 = frontier_phi_72_pred_1;
                    _3014 = frontier_phi_72_pred_2;
                    _3012 = frontier_phi_72_pred_3;
                    _3010 = frontier_phi_72_pred_4;
                    _3008 = frontier_phi_72_pred_5;
                    uint _3153 = _3152 + 1u;
                    if (_3153 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3146 = _3008;
                        _3147 = _3010;
                        _3148 = _3012;
                        _3149 = _3014;
                        _3150 = _3016;
                        _3151 = _3018;
                        _3152 = _3153;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3018;
                frontier_phi_60_61_ladder_1 = _3016;
                frontier_phi_60_61_ladder_2 = _3012;
                frontier_phi_60_61_ladder_3 = _3010;
                frontier_phi_60_61_ladder_4 = _3008;
                frontier_phi_60_61_ladder_5 = _3014;
            }
            else
            {
                frontier_phi_60_61_ladder = _2904;
                frontier_phi_60_61_ladder_1 = _2902;
                frontier_phi_60_61_ladder_2 = _2898;
                frontier_phi_60_61_ladder_3 = _2896;
                frontier_phi_60_61_ladder_4 = _2894;
                frontier_phi_60_61_ladder_5 = _2900;
            }
            _3007 = frontier_phi_60_61_ladder_4;
            _3009 = frontier_phi_60_61_ladder_3;
            _3011 = frontier_phi_60_61_ladder_2;
            _3013 = frontier_phi_60_61_ladder_5;
            _3015 = frontier_phi_60_61_ladder_1;
            _3017 = frontier_phi_60_61_ladder;
        }
        float _3022 = isnan(1.0) ? _797 : (isnan(_797) ? 1.0 : min(_797, 1.0));
        _2827 = (_3022 * _3013) + _2339;
        _2829 = (_3022 * _3015) + _2341;
        _2831 = (_3022 * _3017) + _2343;
        _2833 = ((_3007 * _781) * _3022) + _2677;
        _2835 = ((_3009 * _783) * _3022) + _2679;
        _2837 = ((_3011 * _784) * _3022) + _2681;
    }
    else
    {
        _2827 = _2339;
        _2829 = _2341;
        _2831 = _2343;
        _2833 = _2677;
        _2835 = _2679;
        _2837 = _2681;
    }
    float _4783 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _4794 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _4805 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
    uint _2857 = _265 + 6u;
    float _2865 = _716 / cbSceneParam._m0[86u].x;
    float _2866 = _717 / cbSceneParam._m0[86u].y;
    vec4 _2880 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2865, _2866, (log2((isnan(cbSceneParam._m0[77u].w) ? _650 : (isnan(_650) ? cbSceneParam._m0[77u].w : min(_650, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2882 = _2880.x;
    float _2883 = _2880.y;
    float _2884 = _2880.z;
    float _2885 = _2880.w;
    float _2957;
    float _2959;
    float _2961;
    float _2963;
    if (_650 > cbSceneParam._m0[78u].w)
    {
        float _2919 = isnan(_650) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _650 : min(cbSceneParam._m0[80u].w, _650));
        float _2920 = _2919 / _650;
        float _2931 = _2920 * _701;
        float _2932 = _702 * _2920;
        float _2933 = (-0.0) - _2932;
        float _2935 = _2920 * _703;
        float _2937 = (cbSceneParam._m0[77u].w * _2933) / _2919;
        float _2938 = _2937 + cbSceneParam._m0[79u].w;
        float _2939 = cbSceneParam._m0[79u].w - _2932;
        float _2945 = sqrt(((_2931 * _2931) + (_2932 * _2932)) + (_2935 * _2935));
        float _2948 = (1.0 - (cbSceneParam._m0[77u].w / _2919)) * _2945;
        float _2953 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2955 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3108;
        if (abs((_2933 - _2937) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3108 = ((((_2938 > 0.0) ? exp2(_2953 * _2938) : (2.0 - exp2(_2955 * _2938))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2948;
        }
        else
        {
            float _3068 = 1.0 / cbSceneParam._m0[80u].x;
            float _3069 = isnan(_2939) ? _2938 : (isnan(_2938) ? _2939 : max(_2938, _2939));
            float _3070 = isnan(_2939) ? _2938 : (isnan(_2938) ? _2939 : min(_2938, _2939));
            float _3079 = isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : min(_3069, 0.0));
            float _3080 = isnan(0.0) ? _3070 : (isnan(_3070) ? 0.0 : min(_3070, 0.0));
            _3108 = ((abs(_2945 / _2933) * cbSceneParam._m0[80u].y) * ((((_3079 - _3080) * 2.0) - ((exp2(_2953 * (isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : max(_3069, 0.0)))) - exp2(_2953 * (isnan(0.0) ? _3070 : (isnan(_3070) ? 0.0 : max(_3070, 0.0))))) * _3068)) - ((exp2(_2955 * _3079) - exp2(_2955 * _3080)) * _3068))) + (_2948 * cbSceneParam._m0[80u].z);
        }
        vec4 _3110 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2865, _2866, 1.0), 0.0);
        float _3119 = exp2((_3108 * (-1.44269502162933349609375)) * (1.0 - _3110.w));
        float _3120 = log2(_3119);
        float _3136 = log2(_2885);
        _2957 = (exp2(_3136 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3120 * cbSceneParam._m0[78u].x)) * _3110.x) / cbSceneParam._m0[78u].x)) + _2882;
        _2959 = (exp2(_3136 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3120 * cbSceneParam._m0[78u].y)) * _3110.y) / cbSceneParam._m0[78u].y)) + _2883;
        _2961 = (exp2(_3136 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3120 * cbSceneParam._m0[78u].z)) * _3110.z) / cbSceneParam._m0[78u].z)) + _2884;
        _2963 = _3119 * _2885;
    }
    else
    {
        _2957 = _2882;
        _2959 = _2883;
        _2961 = _2884;
        _2963 = _2885;
    }
    float _2975 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2976 = _2975 == 3.0;
    float _2977 = log2(_2963);
    float _2984 = exp2(_2977 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0))) * (_2827 + ((isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0))) * _797))) + ((_2833 + ((isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0))) * _1603)) * cbPerFrame._m0[3u].x));
    float _2985 = exp2(_2977 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0))) * (_2829 + ((isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0))) * _797))) + ((_2835 + ((isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0))) * _1603)) * cbPerFrame._m0[3u].x));
    float _2986 = exp2(_2977 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0))) * (_2831 + ((isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0))) * _797))) + ((_2837 + ((isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0))) * _1603)) * cbPerFrame._m0[3u].x));
    float _2995 = (_2975 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2995 * (_2976 ? _2984 : (_2984 + (cbSceneParam._m0[72u].w * _2957)));
    SV_Target.y = _2995 * (_2976 ? _2985 : (_2985 + (cbSceneParam._m0[72u].w * _2959)));
    SV_Target.z = _2995 * (_2976 ? _2986 : (_2986 + (cbSceneParam._m0[72u].w * _2961)));
    SV_Target.w = cbInstanceData._m0[_2857].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2857].w;
}


