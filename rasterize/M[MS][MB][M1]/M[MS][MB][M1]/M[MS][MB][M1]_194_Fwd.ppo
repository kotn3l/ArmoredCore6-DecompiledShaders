#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1299;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _216 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _217 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _218 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _224 = inversesqrt(dot(vec3(_216, _217, _218), vec3(_216, _217, _218)));
    float _231 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _238 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _244 = uint(roundEven(NORMAL.w)) * 13u;
    uint _250 = _244 + 1u;
    uint _254 = _244 + 2u;
    float _263 = sqrt(((cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x) + (cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x)) + (cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x));
    float _264 = _263 * TEXCOORD.z;
    float _265 = _263 * TEXCOORD.w;
    vec4 _285 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _291 = _285.x * cbMtdParam._m0[11u].x;
    float _292 = _285.y * cbMtdParam._m0[11u].y;
    float _293 = _285.z * cbMtdParam._m0[11u].z;
    vec4 _312 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _264) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _265) + cbTextureTilingScale._m0[5u].w));
    vec4 _351 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _353 = _351.x;
    float _365 = dot(vec4(_353, _351.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _382 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_353 - _365) * cbMtdParam._m0[24u].y) + _365) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3623 = isnan(0.0) ? _382 : (isnan(_382) ? 0.0 : max(_382, 0.0));
    float _383 = isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0));
    float _390 = (_383 * ((_312.x * cbMtdParam._m0[12u].x) - _291)) + _291;
    float _391 = (_383 * ((_312.y * cbMtdParam._m0[12u].y) - _292)) + _292;
    float _392 = (_383 * ((_312.z * cbMtdParam._m0[12u].z) - _293)) + _293;
    vec4 _409 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _264) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _265) + cbTextureTilingScale._m0[3u].w));
    vec4 _429 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _431 = _429.x;
    float _441 = dot(vec4(_431, _429.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _455 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_431 - _441) * cbMtdParam._m0[24u].y) + _441) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3634 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _456 = isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0));
    float _463 = (_456 * ((_409.x * cbMtdParam._m0[13u].x) - _390)) + _390;
    float _464 = (_456 * ((_409.y * cbMtdParam._m0[13u].y) - _391)) + _391;
    float _465 = (_456 * ((_409.z * cbMtdParam._m0[13u].z) - _392)) + _392;
    vec4 _484 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _264) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _265) + cbTextureTilingScale._m0[14u].w));
    vec4 _504 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _264) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _265) + cbTextureTilingScale._m0[4u].w));
    vec4 _521 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _523 = _521.x;
    float _524 = _521.y;
    float _525 = _521.z;
    float _532 = ((_504.x - _523) * _383) + _523;
    float _533 = ((_504.y - _524) * _383) + _524;
    float _534 = ((_504.z - _525) * _383) + _525;
    vec4 _546 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _264) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _265) + cbTextureTilingScale._m0[2u].w));
    float _559 = ((_546.z - _534) * _456) + _534;
    float _562 = ((((_546.x - _532) * _456) + _532) * 2.0) + (-1.0);
    float _564 = ((((_546.y - _533) * _456) + _533) * 2.0) + (-1.0);
    float _565 = dot(vec2(_562, _564), vec2(_562, _564));
    float _3645 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _570 = sqrt(1.0 - (isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0))));
    vec4 _583 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _601 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _264) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _265) + cbTextureTilingScale._m0[11u].w));
    float _603 = _601.x;
    float _604 = 1.0 - _603;
    float _617 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_603 - _604) * cbMtdParam._m0[24u].z) + _604) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3656 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _618 = isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0));
    float _625 = (_618 * ((_484.x * cbMtdParam._m0[18u].x) - _463)) + _463;
    float _626 = (_618 * ((_484.y * cbMtdParam._m0[18u].y) - _464)) + _464;
    float _627 = (_618 * ((_484.z * cbMtdParam._m0[18u].z) - _465)) + _465;
    vec4 _639 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _653 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _655 = _653.x;
    float _673 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _264) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _265) + cbTextureTilingScale._m0[9u].w)).x - _655) * _383) + _655;
    float _690 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _264) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _265) + cbTextureTilingScale._m0[21u].w)).x - _673) * _456) + _673;
    float _694 = ((_639.x - _690) * cbMtdParam._m0[19u].z) + _690;
    float _696 = _694 - (_694 * _618);
    vec4 _709 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _264) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _265) + cbTextureTilingScale._m0[15u].w));
    float _716 = (_709.x * 2.0) + (-1.0);
    float _717 = (_709.y * 2.0) + (-1.0);
    float _718 = dot(vec2(_716, _717), vec2(_716, _717));
    float _3667 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
    float _726 = (_618 * (_709.z - _559)) + _559;
    float _738 = (((_716 - _562) + (cbMtdParam._m0[21u].x * _562)) * _618) + _562;
    float _739 = (((_717 - _564) + (cbMtdParam._m0[21u].x * _564)) * _618) + _564;
    float _740 = (_618 * (sqrt(1.0 - (isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0)))) - _570)) + _570;
    float _745 = cbMtdParam._m0[22u].x + _583.w;
    float _748 = fma(_740, _231 * NORMAL.x, fma(_739, _238 * TANGENT.x, (_224 * _216) * _738));
    float _751 = fma(_740, _231 * NORMAL.y, fma(_739, _238 * TANGENT.y, (_224 * _217) * _738));
    float _754 = fma(_740, _231 * NORMAL.z, fma(_739, _238 * TANGENT.z, (_224 * _218) * _738));
    float _758 = inversesqrt(dot(vec3(_748, _751, _754), vec3(_748, _751, _754)));
    float _759 = _758 * _748;
    float _760 = _758 * _751;
    float _761 = _758 * _754;
    float _3678 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _762 = isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0));
    float _3689 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _3700 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _3711 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _3722 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _3733 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
    float _767 = isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0));
    float _781 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _822 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _832 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _822);
    float _833 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _822);
    float _834 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _822);
    float _838 = inversesqrt(dot(vec3(_832, _833, _834), vec3(_832, _833, _834)));
    float _839 = _832 * _838;
    float _840 = _833 * _838;
    float _841 = _834 * _838;
    float _847 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _848 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _866 = fma(_761, cbSceneParam._m0[5u].z, fma(_760, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _759));
    float _869 = fma(_761, cbSceneParam._m0[6u].z, fma(_760, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _759));
    float _872 = fma(_761, cbSceneParam._m0[7u].z, fma(_760, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _759));
    uint _886 = (_244 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _892 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0)))) * cbInstanceData._m0[_886].x;
    float _893 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0)))) * cbInstanceData._m0[_886].y;
    float _894 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0)))) * cbInstanceData._m0[_886].z;
    float _3744 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
    float _895 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
    float _3755 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
    float _896 = isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0));
    float _3766 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
    float _897 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
    float _898 = 1.0 - _767;
    float _899 = _895 * _898;
    float _900 = _896 * _898;
    float _901 = _897 * _898;
    float _906 = (_895 + (-0.039999999105930328369140625)) * _767;
    float _907 = (_896 + (-0.039999999105930328369140625)) * _767;
    float _908 = (_897 + (-0.039999999105930328369140625)) * _767;
    float _909 = _906 + 0.039999999105930328369140625;
    float _911 = _907 + 0.039999999105930328369140625;
    float _912 = _908 + 0.039999999105930328369140625;
    vec4 _921 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _847, cbSceneParam._m0[86u].y * _848));
    float _925 = ((isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0))) * TEXCOORD_5.w) * _921.x;
    float _926 = dot(vec3(_759, _760, _761), vec3(_839, _840, _841));
    float _929 = _926 * 2.0;
    float _933 = (_929 * _759) - _839;
    float _934 = (_929 * _760) - _840;
    float _935 = (_929 * _761) - _841;
    float _939 = abs(dot(vec3(_839, _840, _841), vec3(_759, _760, _761)));
    float _3777 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
    float _941 = sqrt(_762);
    float _954 = exp2((_941 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_941 * 3.0));
    float _960 = (1.0 - _954) * ((_941 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _961 = _954 * _941;
    float _989 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _993 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _997 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1298;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1023 = fma(_997, cbModelParam._m0[26u].z, fma(_993, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _989));
        float _1027 = fma(_997, cbModelParam._m0[27u].z, fma(_993, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _989));
        float _1031 = fma(_997, cbModelParam._m0[28u].z, fma(_993, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _989));
        float _1056 = _989 + _759;
        float _1057 = _993 + _760;
        float _1058 = _997 + _761;
        float _1068 = fma(_1058, cbModelParam._m0[26u].z, fma(_1057, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1056)) - _1023;
        float _1069 = fma(_1058, cbModelParam._m0[27u].z, fma(_1057, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1056)) - _1027;
        float _1070 = fma(_1058, cbModelParam._m0[28u].z, fma(_1057, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1056)) - _1031;
        float _1074 = inversesqrt(dot(vec3(_1068, _1069, _1070), vec3(_1068, _1069, _1070)));
        float _1087 = ((_1074 * _1068) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1023 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1088 = ((_1074 * _1069) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1027 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1089 = ((_1074 * _1070) / cbModelParam._m0[34u].z) + ((((((_1031 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1092 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1087, _1088, _1089), 0.0);
        vec4 _1099 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1087, _1088, _1089), 0.0);
        vec4 _1106 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1087, _1088, _1089), 0.0);
        vec4 _1113 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1087, _1088, _1089), 0.0);
        float _1126 = exp2((_1092.w + (-0.5)) * 20.0) * 2.0;
        float _1127 = _1126 * (_1092.x + (-0.5));
        float _1128 = _1126 * (_1092.y + (-0.5));
        float _1129 = _1126 * (_1092.z + (-0.5));
        float _1136 = exp2((_1099.w + (-0.5)) * 20.0) * 2.0;
        float _1137 = _1136 * (_1099.x + (-0.5));
        float _1138 = _1136 * (_1099.y + (-0.5));
        float _1139 = _1136 * (_1099.z + (-0.5));
        float _1146 = exp2((_1106.w + (-0.5)) * 20.0) * 2.0;
        float _1147 = _1146 * (_1106.x + (-0.5));
        float _1148 = _1146 * (_1106.y + (-0.5));
        float _1149 = _1146 * (_1106.z + (-0.5));
        float _1156 = exp2((_1113.w + (-0.5)) * 20.0) * 2.0;
        float _1157 = _1156 * (_1113.x + (-0.5));
        float _1158 = _1156 * (_1113.y + (-0.5));
        float _1159 = _1156 * (_1113.z + (-0.5));
        float _1160 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1161 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1162 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1163 = _1127 * 0.5;
        float _1164 = _1137 * 0.5;
        float _1165 = _1147 * 0.5;
        float _1166 = dot(vec3(_1163, _1164, _1165), vec3(_1163, _1164, _1165));
        float _1171 = (_1166 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1166);
        float _1180 = (dot(vec3(_759, _760, _761), vec3(_1171 * _1163, _1171 * _1164, _1171 * _1165)) + 1.0) * 0.5;
        float _3803 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1190 = sqrt(((_1164 * _1164) + (_1163 * _1163)) + (_1165 * _1165)) / (_1160 + 9.9999997473787516355514526367188e-06);
        float _3814 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1191 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
        float _1192 = _1191 * 2.0;
        float _1196 = (1.0 - _1191) / (_1191 + 1.0);
        float _3825 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1197 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
        float _1206 = ((((1.0 - _1197) * (_1192 + 2.0)) * exp2(log2(isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0))) * (_1192 + 1.0))) + _1197) * _1160;
        float _1207 = _1128 * 0.5;
        float _1208 = _1138 * 0.5;
        float _1209 = _1148 * 0.5;
        float _1210 = dot(vec3(_1207, _1208, _1209), vec3(_1207, _1208, _1209));
        float _1215 = (_1210 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1210);
        float _1223 = (dot(vec3(_759, _760, _761), vec3(_1215 * _1207, _1215 * _1208, _1215 * _1209)) + 1.0) * 0.5;
        float _3836 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1232 = sqrt(((_1208 * _1208) + (_1207 * _1207)) + (_1209 * _1209)) / (_1161 + 9.9999997473787516355514526367188e-06);
        float _3847 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1233 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
        float _1234 = _1233 * 2.0;
        float _1238 = (1.0 - _1233) / (_1233 + 1.0);
        float _3858 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1239 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
        float _1248 = ((((1.0 - _1239) * (_1234 + 2.0)) * exp2(log2(isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0))) * (_1234 + 1.0))) + _1239) * _1161;
        float _1249 = _1129 * 0.5;
        float _1250 = _1139 * 0.5;
        float _1251 = _1149 * 0.5;
        float _1252 = dot(vec3(_1249, _1250, _1251), vec3(_1249, _1250, _1251));
        float _1257 = (_1252 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1252);
        float _1265 = (dot(vec3(_759, _760, _761), vec3(_1257 * _1249, _1257 * _1250, _1257 * _1251)) + 1.0) * 0.5;
        float _3869 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1274 = sqrt(((_1250 * _1250) + (_1249 * _1249)) + (_1251 * _1251)) / (_1162 + 9.9999997473787516355514526367188e-06);
        float _3880 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1275 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
        float _1276 = _1275 * 2.0;
        float _1280 = (1.0 - _1275) / (_1275 + 1.0);
        float _3891 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1281 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
        float _1290 = ((((1.0 - _1281) * (_1276 + 2.0)) * exp2(log2(isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0))) * (_1276 + 1.0))) + _1281) * _1162;
        _1298 = _1129;
        _1300 = _1128;
        _1301 = _1127;
        _1302 = _1139;
        _1303 = _1138;
        _1304 = _1137;
        _1305 = _1149;
        _1306 = _1148;
        _1307 = _1147;
        _1308 = _1162;
        _1309 = _1161;
        _1310 = _1160;
        _1311 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0)));
        _1312 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0)));
        _1313 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0)));
    }
    else
    {
        _1298 = _1299;
        _1300 = _1299;
        _1301 = _1299;
        _1302 = _1299;
        _1303 = _1299;
        _1304 = _1299;
        _1305 = _1299;
        _1306 = _1299;
        _1307 = _1299;
        _1308 = _1299;
        _1309 = _1299;
        _1310 = _1299;
        _1311 = 0.0;
        _1312 = 0.0;
        _1313 = 0.0;
    }
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1337 = fma(_997, cbModelParam._m0[30u].z, fma(_993, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _989));
        float _1341 = fma(_997, cbModelParam._m0[31u].z, fma(_993, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _989));
        float _1345 = fma(_997, cbModelParam._m0[32u].z, fma(_993, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _989));
        float _1368 = _989 + _759;
        float _1369 = _993 + _760;
        float _1370 = _997 + _761;
        float _1380 = fma(_1370, cbModelParam._m0[30u].z, fma(_1369, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1368)) - _1337;
        float _1381 = fma(_1370, cbModelParam._m0[31u].z, fma(_1369, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1368)) - _1341;
        float _1382 = fma(_1370, cbModelParam._m0[32u].z, fma(_1369, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1368)) - _1345;
        float _1386 = inversesqrt(dot(vec3(_1380, _1381, _1382), vec3(_1380, _1381, _1382)));
        float _1399 = ((_1386 * _1380) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1337 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1400 = ((_1386 * _1381) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1341 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1401 = ((_1386 * _1382) / cbModelParam._m0[35u].z) + ((((((_1345 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1403 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1399, _1400, _1401), 0.0);
        vec4 _1410 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1399, _1400, _1401), 0.0);
        vec4 _1417 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1399, _1400, _1401), 0.0);
        vec4 _1424 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1399, _1400, _1401), 0.0);
        float _1436 = exp2((_1403.w + (-0.5)) * 20.0) * 2.0;
        float _1437 = _1436 * (_1403.x + (-0.5));
        float _1438 = _1436 * (_1403.y + (-0.5));
        float _1439 = _1436 * (_1403.z + (-0.5));
        float _1446 = exp2((_1410.w + (-0.5)) * 20.0) * 2.0;
        float _1447 = _1446 * (_1410.x + (-0.5));
        float _1448 = _1446 * (_1410.y + (-0.5));
        float _1449 = _1446 * (_1410.z + (-0.5));
        float _1456 = exp2((_1417.w + (-0.5)) * 20.0) * 2.0;
        float _1457 = _1456 * (_1417.x + (-0.5));
        float _1458 = _1456 * (_1417.y + (-0.5));
        float _1459 = _1456 * (_1417.z + (-0.5));
        float _1466 = exp2((_1424.w + (-0.5)) * 20.0) * 2.0;
        float _1467 = _1466 * (_1424.x + (-0.5));
        float _1468 = _1466 * (_1424.y + (-0.5));
        float _1469 = _1466 * (_1424.z + (-0.5));
        float _1470 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1471 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1472 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1473 = _1437 * 0.5;
        float _1474 = _1447 * 0.5;
        float _1475 = _1457 * 0.5;
        float _1476 = dot(vec3(_1473, _1474, _1475), vec3(_1473, _1474, _1475));
        float _1481 = (_1476 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1476);
        float _1489 = (dot(vec3(_759, _760, _761), vec3(_1481 * _1473, _1481 * _1474, _1481 * _1475)) + 1.0) * 0.5;
        float _3932 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1498 = sqrt(((_1474 * _1474) + (_1473 * _1473)) + (_1475 * _1475)) / (_1470 + 9.9999997473787516355514526367188e-06);
        float _3943 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1499 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
        float _1500 = _1499 * 2.0;
        float _1504 = (1.0 - _1499) / (_1499 + 1.0);
        float _3954 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1505 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
        float _1514 = ((((1.0 - _1505) * (_1500 + 2.0)) * exp2(log2(isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0))) * (_1500 + 1.0))) + _1505) * _1470;
        float _1515 = _1438 * 0.5;
        float _1516 = _1448 * 0.5;
        float _1517 = _1458 * 0.5;
        float _1518 = dot(vec3(_1515, _1516, _1517), vec3(_1515, _1516, _1517));
        float _1523 = (_1518 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1518);
        float _1531 = (dot(vec3(_759, _760, _761), vec3(_1523 * _1515, _1523 * _1516, _1523 * _1517)) + 1.0) * 0.5;
        float _3965 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1540 = sqrt(((_1516 * _1516) + (_1515 * _1515)) + (_1517 * _1517)) / (_1471 + 9.9999997473787516355514526367188e-06);
        float _3976 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1541 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
        float _1542 = _1541 * 2.0;
        float _1546 = (1.0 - _1541) / (_1541 + 1.0);
        float _3987 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1547 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
        float _1556 = ((((1.0 - _1547) * (_1542 + 2.0)) * exp2(log2(isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0))) * (_1542 + 1.0))) + _1547) * _1471;
        float _1557 = _1439 * 0.5;
        float _1558 = _1449 * 0.5;
        float _1559 = _1459 * 0.5;
        float _1560 = dot(vec3(_1557, _1558, _1559), vec3(_1557, _1558, _1559));
        float _1565 = (_1560 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1560);
        float _1573 = (dot(vec3(_759, _760, _761), vec3(_1565 * _1557, _1565 * _1558, _1565 * _1559)) + 1.0) * 0.5;
        float _3998 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1582 = sqrt(((_1558 * _1558) + (_1557 * _1557)) + (_1559 * _1559)) / (_1472 + 9.9999997473787516355514526367188e-06);
        float _4009 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
        float _1583 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
        float _1584 = _1583 * 2.0;
        float _1588 = (1.0 - _1583) / (_1583 + 1.0);
        float _4020 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
        float _1589 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
        float _1598 = ((((1.0 - _1589) * (_1584 + 2.0)) * exp2(log2(isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0))) * (_1584 + 1.0))) + _1589) * _1472;
        _1606 = _1439;
        _1607 = _1438;
        _1608 = _1437;
        _1609 = _1449;
        _1610 = _1448;
        _1611 = _1447;
        _1612 = _1459;
        _1613 = _1458;
        _1614 = _1457;
        _1615 = _1472;
        _1616 = _1471;
        _1617 = _1470;
        _1618 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0)));
        _1619 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0)));
        _1620 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0)));
    }
    else
    {
        _1606 = _1299;
        _1607 = _1299;
        _1608 = _1299;
        _1609 = _1299;
        _1610 = _1299;
        _1611 = _1299;
        _1612 = _1299;
        _1613 = _1299;
        _1614 = _1299;
        _1615 = _1299;
        _1616 = _1299;
        _1617 = _1299;
        _1618 = 0.0;
        _1619 = 0.0;
        _1620 = 0.0;
    }
    float _1630 = (cbModelParam._m0[1u].x * (_1618 - _1311)) + _1311;
    float _1631 = (cbModelParam._m0[1u].x * (_1619 - _1312)) + _1312;
    float _1632 = (cbModelParam._m0[1u].x * (_1620 - _1313)) + _1313;
    float _1653 = fma(_1632, cbSceneParam._m0[89u].z, fma(_1631, cbSceneParam._m0[89u].y, _1630 * cbSceneParam._m0[89u].x));
    float _1656 = fma(_1632, cbSceneParam._m0[90u].z, fma(_1631, cbSceneParam._m0[90u].y, _1630 * cbSceneParam._m0[90u].x));
    float _1659 = fma(_1632, cbSceneParam._m0[91u].z, fma(_1631, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1630));
    float _1674 = _933 * 0.5;
    float _1675 = _934 * 0.5;
    float _1676 = _935 * 0.5;
    float _1677 = dot(vec4(_1674, _1675, _1676, 1.0), vec4(_1608, _1611, _1614, _1617));
    float _1680 = dot(vec4(_1674, _1675, _1676, 1.0), vec4(_1607, _1610, _1613, _1616));
    float _1683 = dot(vec4(_1674, _1675, _1676, 1.0), vec4(_1606, _1609, _1612, _1615));
    float _1717;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1690 = dot(vec4(_1674, _1675, _1676, 1.0), vec4(_1298, _1302, _1305, _1308));
        float _1694 = dot(vec4(_1674, _1675, _1676, 1.0), vec4(_1300, _1303, _1306, _1309));
        float _1698 = dot(vec4(_1674, _1675, _1676, 1.0), vec4(_1301, _1304, _1307, _1310));
        float _1705 = dot(vec4(cbModelParam._m0[39u]), vec4(_1674, _1675, _1676, 1.0));
        _1717 = dot(vec3(isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0)), isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0)), isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1705) ? 0.0 : (isnan(0.0) ? _1705 : max(0.0, _1705))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1717 = 1.0;
    }
    float _1728;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1719 = dot(vec4(cbModelParam._m0[40u]), vec4(_1674, _1675, _1676, 1.0));
        _1728 = dot(vec3(isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0)), isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0)), isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1719) ? 0.0 : (isnan(0.0) ? _1719 : max(0.0, _1719))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1728 = 1.0;
    }
    float _1732 = (_1728 * cbModelParam._m0[1u].x) + (_1717 * (1.0 - cbModelParam._m0[1u].x));
    float _1742 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _762);
    float _1743 = isnan(_1742) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1742 : min(cbModelParam._m0[25u].z, _1742));
    float _1823;
    float _1825;
    float _1827;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1790 = fma(_997, cbModelParam._m0[13u].z, fma(_993, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _989)) + cbModelParam._m0[13u].w;
        float _1794 = fma(_997, cbModelParam._m0[14u].z, fma(_993, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _989)) + cbModelParam._m0[14u].w;
        float _1798 = fma(_997, cbModelParam._m0[15u].z, fma(_993, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _989)) + cbModelParam._m0[15u].w;
        float _1801 = fma(_935, cbModelParam._m0[13u].z, fma(_934, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _933));
        float _1804 = fma(_935, cbModelParam._m0[14u].z, fma(_934, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _933));
        float _1807 = fma(_935, cbModelParam._m0[15u].z, fma(_934, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _933));
        float _1835;
        if (_1801 > 0.0)
        {
            _1835 = abs((1.0 - _1790) / _1801);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1801 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1790 + 1.0) / _1801);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1835 = frontier_phi_14_12_ladder;
        }
        float _2037;
        if (_1804 > 0.0)
        {
            _2037 = abs((1.0 - _1794) / _1804);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1804 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1794 + 1.0) / _1804);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2037 = frontier_phi_23_19_ladder;
        }
        float _2291;
        if (_1807 > 0.0)
        {
            _2291 = abs((1.0 - _1798) / _1807);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1807 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1798 + 1.0) / _1807);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2291 = frontier_phi_35_30_ladder;
        }
        float _2293 = isnan(_2037) ? _1835 : (isnan(_1835) ? _2037 : min(_1835, _2037));
        float _2294 = isnan(_2291) ? _2293 : (isnan(_2293) ? _2291 : min(_2293, _2291));
        float _2298 = (_2294 * _1801) + _1790;
        float _2299 = (_2294 * _1804) + _1794;
        float _2300 = (_2294 * _1807) + _1798;
        float _2301 = _2294 * 9.9999997473787516355514526367188e-05;
        float _2303 = (-1.0) - _2301;
        float _2305 = _2301 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2300 > _2305) || ((_2300 < _2303) || ((_2299 > _2305) || ((_2299 < _2303) || ((_2298 < _2303) || (_2298 > _2305))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2428 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2300, cbModelParam._m0[9u].z, fma(_2299, cbModelParam._m0[9u].y, _2298 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2300, cbModelParam._m0[10u].z, fma(_2299, cbModelParam._m0[10u].y, _2298 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2300, cbModelParam._m0[11u].z, fma(_2299, cbModelParam._m0[11u].y, _2298 * cbModelParam._m0[11u].x))), _1743);
            frontier_phi_13_35_ladder = _2428.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2428.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2428.x * cbModelParam._m0[1u].y;
        }
        _1823 = frontier_phi_13_35_ladder_2;
        _1825 = frontier_phi_13_35_ladder_1;
        _1827 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1811 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_933, _934, _935), _1743);
        _1823 = _1811.x * cbModelParam._m0[1u].y;
        _1825 = _1811.y * cbModelParam._m0[1u].y;
        _1827 = _1811.z * cbModelParam._m0[1u].y;
    }
    float _1831 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _762);
    float _1832 = isnan(_1831) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1831 : min(cbModelParam._m0[25u].w, _1831));
    float _1921;
    float _1923;
    float _1925;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1885 = fma(_997, cbModelParam._m0[21u].z, fma(_993, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _989)) + cbModelParam._m0[21u].w;
        float _1889 = fma(_997, cbModelParam._m0[22u].z, fma(_993, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _989)) + cbModelParam._m0[22u].w;
        float _1893 = fma(_997, cbModelParam._m0[23u].z, fma(_993, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _989)) + cbModelParam._m0[23u].w;
        float _1896 = fma(_935, cbModelParam._m0[21u].z, fma(_934, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _933));
        float _1899 = fma(_935, cbModelParam._m0[22u].z, fma(_934, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _933));
        float _1902 = fma(_935, cbModelParam._m0[23u].z, fma(_934, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _933));
        float _2042;
        if (_1896 > 0.0)
        {
            _2042 = abs((1.0 - _1885) / _1896);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1896 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1885 + 1.0) / _1896);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2042 = frontier_phi_25_21_ladder;
        }
        float _2318;
        if (_1899 > 0.0)
        {
            _2318 = abs((1.0 - _1889) / _1899);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1899 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1889 + 1.0) / _1899);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2318 = frontier_phi_37_32_ladder;
        }
        float _2531;
        if (_1902 > 0.0)
        {
            _2531 = abs((1.0 - _1893) / _1902);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1902 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1893 + 1.0) / _1902);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2531 = frontier_phi_46_43_ladder;
        }
        float _2533 = isnan(_2318) ? _2042 : (isnan(_2042) ? _2318 : min(_2042, _2318));
        float _2534 = isnan(_2531) ? _2533 : (isnan(_2533) ? _2531 : min(_2533, _2531));
        float _2538 = (_2534 * _1896) + _1885;
        float _2539 = (_2534 * _1899) + _1889;
        float _2540 = (_2534 * _1902) + _1893;
        float _2541 = _2534 * 9.9999997473787516355514526367188e-05;
        float _2542 = (-1.0) - _2541;
        float _2544 = _2541 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2540 > _2544) || ((_2540 < _2542) || ((_2539 > _2544) || ((_2539 < _2542) || ((_2538 < _2542) || (_2538 > _2544))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2739 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2540, cbModelParam._m0[17u].z, fma(_2539, cbModelParam._m0[17u].y, _2538 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2540, cbModelParam._m0[18u].z, fma(_2539, cbModelParam._m0[18u].y, _2538 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2540, cbModelParam._m0[19u].z, fma(_2539, cbModelParam._m0[19u].y, _2538 * cbModelParam._m0[19u].x))), _1832);
            frontier_phi_22_46_ladder = _2739.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2739.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2739.x * cbModelParam._m0[1u].z;
        }
        _1921 = frontier_phi_22_46_ladder_2;
        _1923 = frontier_phi_22_46_ladder_1;
        _1925 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1905 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_933, _934, _935), _1832);
        _1921 = _1905.x * cbModelParam._m0[1u].z;
        _1923 = _1905.y * cbModelParam._m0[1u].z;
        _1925 = _1905.z * cbModelParam._m0[1u].z;
    }
    float _1938 = (((_960 * _909) + _961) * _925) * ((cbModelParam._m0[1u].w * (_1921 - _1823)) + _1823);
    float _1940 = (((_960 * _911) + _961) * _925) * ((cbModelParam._m0[1u].w * (_1923 - _1825)) + _1825);
    float _1942 = (((_960 * _912) + _961) * _925) * ((cbModelParam._m0[1u].w * (_1925 - _1827)) + _1827);
    float _1945 = fma(_1942, cbSceneParam._m0[89u].z, fma(_1940, cbSceneParam._m0[89u].y, _1938 * cbSceneParam._m0[89u].x));
    float _1948 = fma(_1942, cbSceneParam._m0[90u].z, fma(_1940, cbSceneParam._m0[90u].y, _1938 * cbSceneParam._m0[90u].x));
    float _1951 = fma(_1942, cbSceneParam._m0[91u].z, fma(_1940, cbSceneParam._m0[91u].y, _1938 * cbSceneParam._m0[91u].x));
    uvec4 _1961 = floatBitsToUint(cbInstanceData._m0[_244 + 5u]);
    uint _1963 = _1961.x * 14u;
    uint _1964 = _1963 + 13u;
    float _1971 = _925 + (-1.0);
    float _1976 = (cbLight._m0[_1964].x * _1971) + 1.0;
    float _1977 = (cbLight._m0[_1964].y * _1971) + 1.0;
    float _1978 = (cbLight._m0[_1964].z * _1971) + 1.0;
    float _1979 = (cbLight._m0[_1964].w * _1971) + 1.0;
    uint _1980 = _1963 + 5u;
    float _1986 = isnan(1.0) ? _1977 : (isnan(_1977) ? 1.0 : min(_1977, 1.0));
    uint _1990 = _1963 + 4u;
    float _1996 = isnan(1.0) ? _1976 : (isnan(_1976) ? 1.0 : min(_1976, 1.0));
    uint _2000 = _1963 | 1u;
    float _2011 = dot(vec3(cbLight._m0[_1963].xyz), vec3(_759, _760, _761));
    float _2014 = dot(vec3(cbLight._m0[_2000].xyz), vec3(_759, _760, _761));
    float _4156 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
    float _4167 = isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0));
    float _2019 = (isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0))) * 0.3183098733425140380859375;
    float _2021 = (isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0))) * 0.3183098733425140380859375;
    float _2028 = ((cbLight._m0[_1980].x * _1986) * _2021) + ((cbLight._m0[_1990].x * _1996) * _2019);
    float _2029 = ((_1986 * cbLight._m0[_1980].y) * _2021) + ((_1996 * cbLight._m0[_1990].y) * _2019);
    float _2030 = ((_1986 * cbLight._m0[_1980].z) * _2021) + ((_1996 * cbLight._m0[_1990].z) * _2019);
    uvec4 _2034 = floatBitsToUint(cbLight._m0[_1963 + 12u]);
    bool _2036 = _2034.x == 0u;
    float _2047;
    float _2049;
    float _2051;
    if (_2036)
    {
        _2047 = _2028;
        _2049 = _2029;
        _2051 = _2030;
    }
    else
    {
        uint _2055 = _1963 + 6u;
        float _2071 = (dot(vec3(cbLight._m0[_1963 + 2u].xyz), vec3(_759, _760, _761)) * 0.5) + 0.5;
        float _2072 = _2071 * _2071;
        float _4178 = isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0));
        float _2073 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
        float _2074 = isnan(1.0) ? _1978 : (isnan(_1978) ? 1.0 : min(_1978, 1.0));
        _2047 = (((cbLight._m0[_2055].x * 0.3183098733425140380859375) * _2073) * _2074) + _2028;
        _2049 = (((cbLight._m0[_2055].y * 0.3183098733425140380859375) * _2073) * _2074) + _2029;
        _2051 = (((cbLight._m0[_2055].z * 0.3183098733425140380859375) * _2073) * _2074) + _2030;
    }
    bool _2054 = _2034.y == 0u;
    float _2092;
    float _2094;
    float _2096;
    if (_2054)
    {
        _2092 = _2047;
        _2094 = _2049;
        _2096 = _2051;
    }
    else
    {
        uint _2262 = _1963 + 7u;
        float _2278 = (dot(vec3(cbLight._m0[_1963 + 3u].xyz), vec3(_759, _760, _761)) * 0.5) + 0.5;
        float _2279 = _2278 * _2278;
        float _4194 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
        float _2280 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
        float _2281 = isnan(1.0) ? _1979 : (isnan(_1979) ? 1.0 : min(_1979, 1.0));
        _2092 = (((cbLight._m0[_2262].x * 0.3183098733425140380859375) * _2280) * _2281) + _2047;
        _2094 = (((cbLight._m0[_2262].y * 0.3183098733425140380859375) * _2280) * _2281) + _2049;
        _2096 = (((cbLight._m0[_2262].z * 0.3183098733425140380859375) * _2280) * _2281) + _2051;
    }
    uint _2099 = _1963 + 8u;
    float _2112 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1963].w)) * _762) * 0.949999988079071044921875);
    float _2113 = _2112 * _2112;
    float _2114 = cbLight._m0[_1963].x + _839;
    float _2115 = cbLight._m0[_1963].y + _840;
    float _2116 = cbLight._m0[_1963].z + _841;
    float _2120 = inversesqrt(dot(vec3(_2114, _2115, _2116), vec3(_2114, _2115, _2116)));
    float _2121 = _2120 * _2114;
    float _2122 = _2120 * _2115;
    float _2123 = _2120 * _2116;
    float _2124 = dot(vec3(_759, _760, _761), vec3(cbLight._m0[_1963].xyz));
    float _4210 = isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0));
    float _2127 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
    float _4221 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
    float _2128 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
    float _2129 = dot(vec3(_759, _760, _761), vec3(_2121, _2122, _2123));
    float _4232 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
    float _2132 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
    float _2133 = dot(vec3(cbLight._m0[_1963].xyz), vec3(_2121, _2122, _2123));
    float _4243 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
    float _2137 = _2113 * _2113;
    float _2141 = ((_2132 * _2132) * (_2137 + (-1.0))) + 1.0;
    float _2149 = exp2(log2(1.0 - (isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0)))) * 5.0);
    float _2150 = 0.959999978542327880859375 - _906;
    float _2152 = 0.959999978542327880859375 - _907;
    float _2153 = 0.959999978542327880859375 - _908;
    float _2160 = 1.0 - _2113;
    float _2171 = (0.5 / (((_2128 * ((_2127 * _2160) + _2113)) + 9.9999999392252902907785028219223e-09) + (((_2128 * _2160) + _2113) * _2127))) * _2127;
    float _4254 = isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0));
    float _2173 = (isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0))) * (_2137 / ((_2141 * _2141) * 3.141590118408203125));
    uint _2184 = _1963 + 9u;
    float _2195 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2000].w)) * _762) * 0.949999988079071044921875);
    float _2196 = _2195 * _2195;
    float _2197 = cbLight._m0[_2000].x + _839;
    float _2198 = cbLight._m0[_2000].y + _840;
    float _2199 = cbLight._m0[_2000].z + _841;
    float _2203 = inversesqrt(dot(vec3(_2197, _2198, _2199), vec3(_2197, _2198, _2199)));
    float _2204 = _2203 * _2197;
    float _2205 = _2203 * _2198;
    float _2206 = _2203 * _2199;
    float _2207 = dot(vec3(_759, _760, _761), vec3(cbLight._m0[_2000].xyz));
    float _4265 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
    float _2210 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
    float _2211 = dot(vec3(_759, _760, _761), vec3(_2204, _2205, _2206));
    float _4276 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
    float _2214 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
    float _2215 = dot(vec3(cbLight._m0[_2000].xyz), vec3(_2204, _2205, _2206));
    float _4287 = isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0));
    float _2219 = _2196 * _2196;
    float _2223 = ((_2214 * _2214) * (_2219 + (-1.0))) + 1.0;
    float _2230 = exp2(log2(1.0 - (isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0)))) * 5.0);
    float _2237 = 1.0 - _2196;
    float _2247 = (0.5 / (((_2128 * ((_2210 * _2237) + _2196)) + 9.9999999392252902907785028219223e-09) + (((_2128 * _2237) + _2196) * _2210))) * _2210;
    float _4298 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
    float _2249 = (isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0))) * (_2219 / ((_2223 * _2223) * 3.141590118408203125));
    float _2259 = (((((_2230 * _2150) + _909) * cbLight._m0[_2184].x) * _2249) * _1986) + (((((_2149 * _2150) + _909) * cbLight._m0[_2099].x) * _2173) * _1996);
    float _2260 = (((((_2230 * _2152) + _911) * cbLight._m0[_2184].y) * _2249) * _1986) + (((((_2149 * _2152) + _911) * cbLight._m0[_2099].y) * _2173) * _1996);
    float _2261 = (((((_2230 * _2153) + _912) * cbLight._m0[_2184].z) * _2249) * _1986) + (((((_2149 * _2153) + _912) * cbLight._m0[_2099].z) * _2173) * _1996);
    float _2323;
    float _2325;
    float _2327;
    if (_2036)
    {
        _2323 = _2259;
        _2325 = _2260;
        _2327 = _2261;
    }
    else
    {
        uint _2329 = _1963 + 2u;
        uint _2333 = _1963 + 10u;
        float _2347 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2329].w)) * _762) * 0.949999988079071044921875);
        float _2348 = _2347 * _2347;
        float _2349 = cbLight._m0[_2329].x + _839;
        float _2350 = cbLight._m0[_2329].y + _840;
        float _2351 = cbLight._m0[_2329].z + _841;
        float _2355 = inversesqrt(dot(vec3(_2349, _2350, _2351), vec3(_2349, _2350, _2351)));
        float _2356 = _2355 * _2349;
        float _2357 = _2355 * _2350;
        float _2358 = _2355 * _2351;
        float _2359 = dot(vec3(_759, _760, _761), vec3(cbLight._m0[_2329].xyz));
        float _4309 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0));
        float _2362 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
        float _2363 = dot(vec3(_759, _760, _761), vec3(_2356, _2357, _2358));
        float _4320 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
        float _2366 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
        float _2367 = dot(vec3(cbLight._m0[_2329].xyz), vec3(_2356, _2357, _2358));
        float _4331 = isnan(0.0) ? _2367 : (isnan(_2367) ? 0.0 : max(_2367, 0.0));
        float _2371 = _2348 * _2348;
        float _2375 = ((_2366 * _2366) * (_2371 + (-1.0))) + 1.0;
        float _2382 = exp2(log2(1.0 - (isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0)))) * 5.0);
        float _2389 = 1.0 - _2348;
        float _2399 = (0.5 / (((_2128 * ((_2362 * _2389) + _2348)) + 9.9999999392252902907785028219223e-09) + (((_2128 * _2389) + _2348) * _2362))) * _2362;
        float _4342 = isnan(0.0) ? _2399 : (isnan(_2399) ? 0.0 : max(_2399, 0.0));
        float _2401 = (isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0))) * (_2371 / ((_2375 * _2375) * 3.141590118408203125));
        float _2402 = isnan(1.0) ? _1978 : (isnan(_1978) ? 1.0 : min(_1978, 1.0));
        _2323 = (((((_2382 * _2150) + _909) * cbLight._m0[_2333].x) * _2401) * _2402) + _2259;
        _2325 = (((((_2382 * _2152) + _911) * cbLight._m0[_2333].y) * _2401) * _2402) + _2260;
        _2327 = (((((_2382 * _2153) + _912) * cbLight._m0[_2333].z) * _2401) * _2402) + _2261;
    }
    float _2437;
    float _2439;
    float _2441;
    if (_2054)
    {
        _2437 = _2323;
        _2439 = _2325;
        _2441 = _2327;
    }
    else
    {
        uint _2448 = _1963 + 3u;
        uint _2452 = _1963 + 11u;
        float _2466 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2448].w)) * _762) * 0.949999988079071044921875);
        float _2467 = _2466 * _2466;
        float _2468 = cbLight._m0[_2448].x + _839;
        float _2469 = cbLight._m0[_2448].y + _840;
        float _2470 = cbLight._m0[_2448].z + _841;
        float _2474 = inversesqrt(dot(vec3(_2468, _2469, _2470), vec3(_2468, _2469, _2470)));
        float _2475 = _2474 * _2468;
        float _2476 = _2474 * _2469;
        float _2477 = _2474 * _2470;
        float _2478 = dot(vec3(_759, _760, _761), vec3(cbLight._m0[_2448].xyz));
        float _4358 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0));
        float _2481 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
        float _2482 = dot(vec3(_759, _760, _761), vec3(_2475, _2476, _2477));
        float _4369 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0));
        float _2485 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
        float _2486 = dot(vec3(cbLight._m0[_2448].xyz), vec3(_2475, _2476, _2477));
        float _4380 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
        float _2490 = _2467 * _2467;
        float _2494 = ((_2485 * _2485) * (_2490 + (-1.0))) + 1.0;
        float _2501 = exp2(log2(1.0 - (isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0)))) * 5.0);
        float _2508 = 1.0 - _2467;
        float _2518 = (0.5 / (((_2128 * ((_2481 * _2508) + _2467)) + 9.9999999392252902907785028219223e-09) + (((_2128 * _2508) + _2467) * _2481))) * _2481;
        float _4391 = isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0));
        float _2520 = (isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0))) * (_2490 / ((_2494 * _2494) * 3.141590118408203125));
        float _2521 = isnan(1.0) ? _1979 : (isnan(_1979) ? 1.0 : min(_1979, 1.0));
        _2437 = (((((_2501 * _2150) + _909) * cbLight._m0[_2452].x) * _2520) * _2521) + _2323;
        _2439 = (((((_2501 * _2152) + _911) * cbLight._m0[_2452].y) * _2520) * _2521) + _2325;
        _2441 = (((((_2501 * _2153) + _912) * cbLight._m0[_2452].z) * _2520) * _2521) + _2327;
    }
    float _2656;
    float _2658;
    float _2660;
    float _2662;
    float _2664;
    float _2666;
    if (_1961.y == 0u)
    {
        float _2596 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2597 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2596;
        float _2598 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2596;
        float _2599 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2596;
        uvec4 _2611 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2612 = _2611.x;
        uint _2623 = uint((float(_2611.y) * floor(float(uint(cbSceneParam._m0[85u].y * _848) / _2612))) + floor(float(uint(cbSceneParam._m0[85u].x * _847) / _2612)));
        float _2633 = (log2(_2599 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2634 = isnan(0.0) ? _2633 : (isnan(_2633) ? 0.0 : max(_2633, 0.0));
        uint _2637 = uint(isnan(14.0) ? _2634 : (isnan(_2634) ? 14.0 : min(_2634, 14.0)));
        uvec4 _2642 = texelFetch(g_lightClusterGridBuffer, int(((_2637 << 2u) + (_2623 << 6u)) >> 2u));
        uint _2643 = _2642.x;
        uint _2644 = _2611.z;
        float _2744;
        float _2746;
        float _2748;
        float _2750;
        float _2752;
        float _2754;
        if (((((1u << ((_2644 >> 4u) & 15u)) + 4294967295u) & _2643) == 0u) || ((_2644 & 240u) == 0u))
        {
            _2744 = 0.0;
            _2746 = 0.0;
            _2748 = 0.0;
            _2750 = 0.0;
            _2752 = 0.0;
            _2754 = 0.0;
        }
        else
        {
            float _2745;
            float _2747;
            float _2749;
            float _2751;
            float _2753;
            float _2755;
            float _2889 = 0.0;
            float _2890 = 0.0;
            float _2891 = 0.0;
            float _2892 = 0.0;
            float _2893 = 0.0;
            float _2894 = 0.0;
            uint _2895 = 0u;
            uint _2904;
            bool _2905;
            for (;;)
            {
                _2904 = texelFetch(g_lightClassification, int((((_2637 << 5u) + (_2623 << 9u)) + (_2895 << 2u)) >> 2u)).x;
                _2905 = _2904 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2905)
                {
                    frontier_phi_61_pred = _2889;
                    frontier_phi_61_pred_1 = _2894;
                    frontier_phi_61_pred_2 = _2893;
                    frontier_phi_61_pred_3 = _2892;
                    frontier_phi_61_pred_4 = _2891;
                    frontier_phi_61_pred_5 = _2890;
                }
                else
                {
                    float _3013;
                    float _3014;
                    float _3015;
                    float _3016;
                    float _3017;
                    float _3018;
                    uint _3019;
                    _3013 = _2889;
                    _3014 = _2890;
                    _3015 = _2891;
                    _3016 = _2892;
                    _3017 = _2893;
                    _3018 = _2894;
                    _3019 = _2904;
                    float _2945;
                    float _2946;
                    float _2947;
                    float _2948;
                    float _2949;
                    float _2950;
                    for (;;)
                    {
                        uint _3023 = uint(findLSB(_3019)) + (_2895 << 5u);
                        uint _3020 = (_3019 + 4294967295u) & _3019;
                        uint _3025 = _3023 * 48u;
                        vec4 _3039 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3025)).x, texelFetch(g_PointLightRenderingBuffer, int(_3025 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3025 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3025 + 3u)).x));
                        uint _3045 = (_3023 * 48u) + 4u;
                        vec4 _3058 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3045)).x, texelFetch(g_PointLightRenderingBuffer, int(_3045 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3045 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3045 + 3u)).x));
                        uint _3064 = (_3023 * 48u) + 8u;
                        vec3 _3075 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3064)).x, texelFetch(g_PointLightRenderingBuffer, int(_3064 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3064 + 2u)).x));
                        float _3079 = _3039.x - _2597;
                        float _3080 = _3039.y - _2598;
                        float _3081 = _3039.z - _2599;
                        float _3082 = dot(vec3(_3079, _3080, _3081), vec3(_3079, _3080, _3081));
                        float _3085 = inversesqrt(_3082);
                        float _3086 = _3085 * _3079;
                        float _3087 = _3085 * _3080;
                        float _3088 = _3085 * _3081;
                        float _3089 = dot(vec3(_866, _869, _872), vec3(_3086, _3087, _3088));
                        float _3094 = 1.0 - (_3082 * _3039.w);
                        float _4417 = isnan(0.0) ? _3094 : (isnan(_3094) ? 0.0 : max(_3094, 0.0));
                        float _3095 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
                        float _3096 = sqrt(_3082) * _3058.w;
                        float _3099 = 1.39999997615814208984375 / (_3096 + 1.39999997615814208984375);
                        float _3100 = _3099 * _3099;
                        float _3103 = ((1.0 - _3100) * _3089) + _3100;
                        float _3106 = _3096 * _3096;
                        float _3110 = ((isnan(0.0) ? _3103 : (isnan(_3103) ? 0.0 : max(_3103, 0.0))) * _3095) / ((_3106 * 0.699999988079071044921875) + 1.0);
                        float _3114 = (-0.0) - _2597;
                        float _3115 = (-0.0) - _2598;
                        float _3116 = (-0.0) - _2599;
                        float _3120 = inversesqrt(dot(vec3(_3114, _3115, _3116), vec3(_3114, _3115, _3116)));
                        float _3121 = _3120 * _3114;
                        float _3122 = _3120 * _3115;
                        float _3123 = _3120 * _3116;
                        float _3131 = exp2(log2(1.0 / ((_3106 * 3.5) + 5.0)) * 0.25);
                        float _3132 = 1.0 - _941;
                        float _3139 = sqrt(1.0 - ((1.0 - (_3132 * _3132)) * (1.0 - (_3131 * _3131))));
                        float _3140 = _3139 * _3139;
                        float _3141 = _3140 * _3140;
                        float _3142 = _3121 + _3086;
                        float _3143 = _3122 + _3087;
                        float _3144 = _3123 + _3088;
                        float _3148 = inversesqrt(dot(vec3(_3142, _3143, _3144), vec3(_3142, _3143, _3144)));
                        float _3152 = dot(vec3(_866, _869, _872), vec3(_3121, _3122, _3123));
                        float _4433 = isnan(0.0) ? _3152 : (isnan(_3152) ? 0.0 : max(_3152, 0.0));
                        float _3155 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
                        float _3156 = dot(vec3(_866, _869, _872), vec3(_3148 * _3142, _3148 * _3143, _3148 * _3144));
                        float _4444 = isnan(0.0) ? _3156 : (isnan(_3156) ? 0.0 : max(_3156, 0.0));
                        float _3159 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
                        float _3163 = ((_3159 * _3159) * (_3141 + (-1.0))) + 1.0;
                        float _3164 = _3099 * _3140;
                        float _3165 = _3164 * _3164;
                        float _3168 = ((1.0 - _3165) * _3089) + _3165;
                        float _4455 = isnan(0.0) ? _3168 : (isnan(_3168) ? 0.0 : max(_3168, 0.0));
                        float _3169 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
                        float _3170 = 1.0 - _3140;
                        float _3180 = (0.5 / (((_3169 * ((_3155 * _3170) + _3140)) + 9.9999999392252902907785028219223e-09) + (((_3169 * _3170) + _3140) * _3155))) * _3169;
                        float _4466 = isnan(0.0) ? _3180 : (isnan(_3180) ? 0.0 : max(_3180, 0.0));
                        float _3191 = (((_3141 * 3.1415927410125732421875) * (isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0)))) / ((_3163 * _3163) * ((_3106 * 2.1991131305694580078125) + 3.141590118408203125))) * _3095;
                        _2948 = (_3110 * _3058.x) + _3016;
                        _2949 = (_3110 * _3058.y) + _3017;
                        _2950 = (_3110 * _3058.z) + _3018;
                        _2945 = (_3191 * _3075.x) + _3013;
                        _2946 = (_3191 * _3075.y) + _3014;
                        _2947 = (_3191 * _3075.z) + _3015;
                        if (_3020 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3013 = _2945;
                            _3014 = _2946;
                            _3015 = _2947;
                            _3016 = _2948;
                            _3017 = _2949;
                            _3018 = _2950;
                            _3019 = _3020;
                        }
                    }
                    frontier_phi_61_pred = _2945;
                    frontier_phi_61_pred_1 = _2950;
                    frontier_phi_61_pred_2 = _2949;
                    frontier_phi_61_pred_3 = _2948;
                    frontier_phi_61_pred_4 = _2947;
                    frontier_phi_61_pred_5 = _2946;
                }
                _2745 = frontier_phi_61_pred;
                _2755 = frontier_phi_61_pred_1;
                _2753 = frontier_phi_61_pred_2;
                _2751 = frontier_phi_61_pred_3;
                _2749 = frontier_phi_61_pred_4;
                _2747 = frontier_phi_61_pred_5;
                uint _2896 = _2895 + 1u;
                if (_2896 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2889 = _2745;
                    _2890 = _2747;
                    _2891 = _2749;
                    _2892 = _2751;
                    _2893 = _2753;
                    _2894 = _2755;
                    _2895 = _2896;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2744 = _2745;
            _2746 = _2747;
            _2748 = _2749;
            _2750 = _2751;
            _2752 = _2753;
            _2754 = _2755;
        }
        uvec4 _2758 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2759 = _2758.z;
        uint _2761 = (_2759 >> 8u) & 15u;
        float _2857;
        float _2859;
        float _2861;
        float _2863;
        float _2865;
        float _2867;
        if (((4294967295u << _2761) & _2643) == 0u)
        {
            _2857 = _2744;
            _2859 = _2746;
            _2861 = _2748;
            _2863 = _2750;
            _2865 = _2752;
            _2867 = _2754;
        }
        else
        {
            float _2882 = inversesqrt(dot(vec3(_2597, _2598, _2599), vec3(_2597, _2598, _2599)));
            float _2883 = _2882 * _2597;
            float _2884 = _2882 * _2598;
            float _2885 = _2882 * _2599;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2761 < ((_2759 >> 12u) & 15u))
            {
                float _2858;
                float _2860;
                float _2862;
                float _2864;
                float _2866;
                float _2868;
                float _2996 = _2744;
                float _2997 = _2746;
                float _2998 = _2748;
                float _2999 = _2750;
                float _3000 = _2752;
                float _3001 = _2754;
                uint _3002 = _2761;
                uint _3011;
                bool _3012;
                for (;;)
                {
                    _3011 = texelFetch(g_lightClassification, int((((_2637 << 5u) + (_2623 << 9u)) + (_3002 << 2u)) >> 2u)).x;
                    _3012 = _3011 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3012)
                    {
                        frontier_phi_67_pred = _2999;
                        frontier_phi_67_pred_1 = _3000;
                        frontier_phi_67_pred_2 = _3001;
                        frontier_phi_67_pred_3 = _2998;
                        frontier_phi_67_pred_4 = _2997;
                        frontier_phi_67_pred_5 = _2996;
                    }
                    else
                    {
                        float _3196;
                        float _3197;
                        float _3198;
                        float _3199;
                        float _3200;
                        float _3201;
                        float _3489;
                        float _3490;
                        float _3491;
                        float _3492;
                        float _3493;
                        float _3494;
                        float _3209 = _2996;
                        float _3210 = _2997;
                        float _3211 = _2998;
                        float _3212 = _2999;
                        float _3213 = _3000;
                        float _3214 = _3001;
                        uint _3215 = _3011;
                        uint _3216;
                        vec4 _3241;
                        float _3242;
                        vec4 _3257;
                        vec3 _3269;
                        vec4 _3284;
                        vec4 _3299;
                        float _3345;
                        bool _3346;
                        for (;;)
                        {
                            uint _3226 = ((_3002 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3215));
                            _3216 = (_3215 + 4294967295u) & _3215;
                            uint _3228 = _3226 * 40u;
                            _3241 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3228)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 3u)).x));
                            _3242 = _3241.w;
                            uint _3244 = (_3226 * 40u) + 4u;
                            _3257 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3244)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3244 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3244 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3244 + 3u)).x));
                            uint _3259 = (_3226 * 40u) + 8u;
                            _3269 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3259)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3259 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3259 + 2u)).x));
                            uint _3271 = (_3226 * 40u) + 16u;
                            _3284 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3271)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 3u)).x));
                            uint _3286 = (_3226 * 40u) + 20u;
                            _3299 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3286)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3286 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3286 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3286 + 3u)).x));
                            uint _3301 = (_3226 * 40u) + 24u;
                            vec4 _3314 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3301)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3301 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3301 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3301 + 3u)).x));
                            uint _3320 = (_3226 * 40u) + 28u;
                            vec4 _3333 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3320)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 3u)).x));
                            _3345 = fma(_2599, _3333.z, fma(_2598, _3333.y, _3333.x * _2597)) + _3333.w;
                            _3346 = !((fma(_2599, _3314.z, fma(_2598, _3314.y, _3314.x * _2597)) + _3314.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3346)
                            {
                                float _3373 = _3241.x - _2597;
                                float _3374 = _3241.y - _2598;
                                float _3375 = _3241.z - _2599;
                                float _3376 = dot(vec3(_3373, _3374, _3375), vec3(_3373, _3374, _3375));
                                float _3379 = inversesqrt(_3376);
                                float _3380 = _3379 * _3373;
                                float _3381 = _3379 * _3374;
                                float _3382 = _3379 * _3375;
                                float _3386 = 1.0 - (_3376 / (_3242 * _3242));
                                float _4477 = isnan(0.0) ? _3386 : (isnan(_3386) ? 0.0 : max(_3386, 0.0));
                                float _3387 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
                                float _3391 = sqrt(_3376) * _3257.w;
                                float _3393 = 1.39999997615814208984375 / (_3391 + 1.39999997615814208984375);
                                float _3394 = _3393 * _3393;
                                float _3397 = ((1.0 - _3394) * dot(vec3(_3380, _3381, _3382), vec3(_866, _869, _872))) + _3394;
                                float _3400 = _3391 * _3391;
                                float _3404 = (fma(_2599, _3284.z, fma(_2598, _3284.y, _3284.x * _2597)) + _3284.w) / _3345;
                                float _3405 = (fma(_2599, _3299.z, fma(_2598, _3299.y, _3299.x * _2597)) + _3299.w) / _3345;
                                float _3409 = 1.0 - dot(vec2(_3404, _3405), vec2(_3404, _3405));
                                float _4493 = isnan(0.0) ? _3409 : (isnan(_3409) ? 0.0 : max(_3409, 0.0));
                                float _3410 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
                                float _3411 = _3410 * (((isnan(0.0) ? _3397 : (isnan(_3397) ? 0.0 : max(_3397, 0.0))) * _3387) / ((_3400 * 0.699999988079071044921875) + 1.0));
                                float _3423 = exp2(log2(1.0 / ((_3400 * 3.5) + 5.0)) * 0.25);
                                float _3424 = 1.0 - _941;
                                float _3431 = sqrt(1.0 - ((1.0 - (_3424 * _3424)) * (1.0 - (_3423 * _3423))));
                                float _3432 = _3431 * _3431;
                                float _3433 = _3432 * _3432;
                                float _3434 = _3380 - _2883;
                                float _3435 = _3381 - _2884;
                                float _3436 = _3382 - _2885;
                                float _3440 = inversesqrt(dot(vec3(_3434, _3435, _3436), vec3(_3434, _3435, _3436)));
                                float _3444 = dot(vec3(_866, _869, _872), vec3((-0.0) - _2883, (-0.0) - _2884, (-0.0) - _2885));
                                float _4504 = isnan(0.0) ? _3444 : (isnan(_3444) ? 0.0 : max(_3444, 0.0));
                                float _3447 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
                                float _3448 = dot(vec3(_866, _869, _872), vec3(_3440 * _3434, _3440 * _3435, _3440 * _3436));
                                float _4515 = isnan(0.0) ? _3448 : (isnan(_3448) ? 0.0 : max(_3448, 0.0));
                                float _3451 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
                                float _3455 = ((_3451 * _3451) * (_3433 + (-1.0))) + 1.0;
                                float _3456 = _3393 * _3432;
                                float _3457 = _3456 * _3456;
                                float _3463 = ((1.0 - _3457) * dot(vec3(_866, _869, _872), vec3(_3380, _3381, _3382))) + _3457;
                                float _4526 = isnan(0.0) ? _3463 : (isnan(_3463) ? 0.0 : max(_3463, 0.0));
                                float _3464 = isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0));
                                float _3465 = 1.0 - _3432;
                                float _3475 = (0.5 / (((_3464 * ((_3447 * _3465) + _3432)) + 9.9999999392252902907785028219223e-09) + (((_3464 * _3465) + _3432) * _3447))) * _3464;
                                float _4537 = isnan(0.0) ? _3475 : (isnan(_3475) ? 0.0 : max(_3475, 0.0));
                                float _3485 = (_3410 * _3387) * (((_3433 * 3.1415927410125732421875) * (isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0)))) / ((_3455 * _3455) * ((_3400 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3485 * _3269.x;
                                frontier_phi_73_pred_1 = _3485 * _3269.y;
                                frontier_phi_73_pred_2 = _3411 * _3257.z;
                                frontier_phi_73_pred_3 = _3411 * _3257.y;
                                frontier_phi_73_pred_4 = _3411 * _3257.x;
                                frontier_phi_73_pred_5 = _3485 * _3269.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3489 = frontier_phi_73_pred;
                            _3490 = frontier_phi_73_pred_1;
                            _3494 = frontier_phi_73_pred_2;
                            _3493 = frontier_phi_73_pred_3;
                            _3492 = frontier_phi_73_pred_4;
                            _3491 = frontier_phi_73_pred_5;
                            _3199 = _3492 + _3212;
                            _3200 = _3493 + _3213;
                            _3201 = _3494 + _3214;
                            _3196 = _3489 + _3209;
                            _3197 = _3490 + _3210;
                            _3198 = _3491 + _3211;
                            if (_3216 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3209 = _3196;
                                _3210 = _3197;
                                _3211 = _3198;
                                _3212 = _3199;
                                _3213 = _3200;
                                _3214 = _3201;
                                _3215 = _3216;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3199;
                        frontier_phi_67_pred_1 = _3200;
                        frontier_phi_67_pred_2 = _3201;
                        frontier_phi_67_pred_3 = _3198;
                        frontier_phi_67_pred_4 = _3197;
                        frontier_phi_67_pred_5 = _3196;
                    }
                    _2864 = frontier_phi_67_pred;
                    _2866 = frontier_phi_67_pred_1;
                    _2868 = frontier_phi_67_pred_2;
                    _2862 = frontier_phi_67_pred_3;
                    _2860 = frontier_phi_67_pred_4;
                    _2858 = frontier_phi_67_pred_5;
                    uint _3003 = _3002 + 1u;
                    if (_3003 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2996 = _2858;
                        _2997 = _2860;
                        _2998 = _2862;
                        _2999 = _2864;
                        _3000 = _2866;
                        _3001 = _2868;
                        _3002 = _3003;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2866;
                frontier_phi_55_56_ladder_1 = _2868;
                frontier_phi_55_56_ladder_2 = _2864;
                frontier_phi_55_56_ladder_3 = _2862;
                frontier_phi_55_56_ladder_4 = _2860;
                frontier_phi_55_56_ladder_5 = _2858;
            }
            else
            {
                frontier_phi_55_56_ladder = _2752;
                frontier_phi_55_56_ladder_1 = _2754;
                frontier_phi_55_56_ladder_2 = _2750;
                frontier_phi_55_56_ladder_3 = _2748;
                frontier_phi_55_56_ladder_4 = _2746;
                frontier_phi_55_56_ladder_5 = _2744;
            }
            _2857 = frontier_phi_55_56_ladder_5;
            _2859 = frontier_phi_55_56_ladder_4;
            _2861 = frontier_phi_55_56_ladder_3;
            _2863 = frontier_phi_55_56_ladder_2;
            _2865 = frontier_phi_55_56_ladder;
            _2867 = frontier_phi_55_56_ladder_1;
        }
        float _2872 = isnan(1.0) ? _925 : (isnan(_925) ? 1.0 : min(_925, 1.0));
        _2656 = (_2872 * _2863) + _2092;
        _2658 = (_2872 * _2865) + _2094;
        _2660 = (_2872 * _2867) + _2096;
        _2662 = ((_2857 * _909) * _2872) + _2437;
        _2664 = ((_2859 * _911) * _2872) + _2439;
        _2666 = ((_2861 * _912) * _2872) + _2441;
    }
    else
    {
        _2656 = _2092;
        _2658 = _2094;
        _2660 = _2096;
        _2662 = _2437;
        _2664 = _2439;
        _2666 = _2441;
    }
    float _4553 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
    float _4564 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
    float _4575 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
    uint _2686 = _244 + 6u;
    float _2694 = _847 / cbSceneParam._m0[86u].x;
    float _2695 = _848 / cbSceneParam._m0[86u].y;
    vec4 _2709 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2694, _2695, (log2((isnan(cbSceneParam._m0[77u].w) ? _781 : (isnan(_781) ? cbSceneParam._m0[77u].w : min(_781, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2711 = _2709.x;
    float _2712 = _2709.y;
    float _2713 = _2709.z;
    float _2714 = _2709.w;
    float _2807;
    float _2809;
    float _2811;
    float _2813;
    if (_781 > cbSceneParam._m0[78u].w)
    {
        float _2769 = isnan(_781) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _781 : min(cbSceneParam._m0[80u].w, _781));
        float _2770 = _2769 / _781;
        float _2781 = _2770 * _832;
        float _2782 = _833 * _2770;
        float _2783 = (-0.0) - _2782;
        float _2785 = _2770 * _834;
        float _2787 = (cbSceneParam._m0[77u].w * _2783) / _2769;
        float _2788 = _2787 + cbSceneParam._m0[79u].w;
        float _2789 = cbSceneParam._m0[79u].w - _2782;
        float _2795 = sqrt(((_2781 * _2781) + (_2782 * _2782)) + (_2785 * _2785));
        float _2798 = (1.0 - (cbSceneParam._m0[77u].w / _2769)) * _2795;
        float _2803 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2805 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2958;
        if (abs((_2783 - _2787) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2958 = ((((_2788 > 0.0) ? exp2(_2803 * _2788) : (2.0 - exp2(_2805 * _2788))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2798;
        }
        else
        {
            float _2918 = 1.0 / cbSceneParam._m0[80u].x;
            float _2919 = isnan(_2789) ? _2788 : (isnan(_2788) ? _2789 : max(_2788, _2789));
            float _2920 = isnan(_2789) ? _2788 : (isnan(_2788) ? _2789 : min(_2788, _2789));
            float _2929 = isnan(0.0) ? _2919 : (isnan(_2919) ? 0.0 : min(_2919, 0.0));
            float _2930 = isnan(0.0) ? _2920 : (isnan(_2920) ? 0.0 : min(_2920, 0.0));
            _2958 = ((abs(_2795 / _2783) * cbSceneParam._m0[80u].y) * ((((_2929 - _2930) * 2.0) - ((exp2(_2803 * (isnan(0.0) ? _2919 : (isnan(_2919) ? 0.0 : max(_2919, 0.0)))) - exp2(_2803 * (isnan(0.0) ? _2920 : (isnan(_2920) ? 0.0 : max(_2920, 0.0))))) * _2918)) - ((exp2(_2805 * _2929) - exp2(_2805 * _2930)) * _2918))) + (_2798 * cbSceneParam._m0[80u].z);
        }
        vec4 _2960 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2694, _2695, 1.0), 0.0);
        float _2969 = exp2((_2958 * (-1.44269502162933349609375)) * (1.0 - _2960.w));
        float _2970 = log2(_2969);
        float _2986 = log2(_2714);
        _2807 = (exp2(_2986 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2970 * cbSceneParam._m0[78u].x)) * _2960.x) / cbSceneParam._m0[78u].x)) + _2711;
        _2809 = (exp2(_2986 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2970 * cbSceneParam._m0[78u].y)) * _2960.y) / cbSceneParam._m0[78u].y)) + _2712;
        _2811 = (exp2(_2986 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2970 * cbSceneParam._m0[78u].z)) * _2960.z) / cbSceneParam._m0[78u].z)) + _2713;
        _2813 = _2969 * _2714;
    }
    else
    {
        _2807 = _2711;
        _2809 = _2712;
        _2811 = _2713;
        _2813 = _2714;
    }
    float _2825 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2826 = _2825 == 3.0;
    float _2827 = log2(_2813);
    float _2834 = exp2(_2827 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0))) * (_2656 + ((isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0))) * _925))) + ((_2662 + ((isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0))) * _1732)) * cbPerFrame._m0[3u].x));
    float _2835 = exp2(_2827 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0))) * (_2658 + ((isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0))) * _925))) + ((_2664 + ((isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0))) * _1732)) * cbPerFrame._m0[3u].x));
    float _2836 = exp2(_2827 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0))) * (_2660 + ((isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0))) * _925))) + ((_2666 + ((isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0))) * _1732)) * cbPerFrame._m0[3u].x));
    float _2845 = (_2825 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2845 * (_2826 ? _2834 : (_2834 + (cbSceneParam._m0[72u].w * _2807)));
    SV_Target.y = _2845 * (_2826 ? _2835 : (_2835 + (cbSceneParam._m0[72u].w * _2809)));
    SV_Target.z = _2845 * (_2826 ? _2836 : (_2836 + (cbSceneParam._m0[72u].w * _2811)));
    SV_Target.w = cbInstanceData._m0[_2686].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2686].w;
}


