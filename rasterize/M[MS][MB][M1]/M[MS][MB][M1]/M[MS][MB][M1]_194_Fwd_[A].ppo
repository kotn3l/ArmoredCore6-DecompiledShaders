#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1343;
float _3721;
float _3722;
float _3723;
float _3724;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _220 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _221 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _222 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _228 = inversesqrt(dot(vec3(_220, _221, _222), vec3(_220, _221, _222)));
    float _235 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _242 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _248 = uint(roundEven(NORMAL.w)) * 13u;
    uint _254 = _248 + 1u;
    uint _258 = _248 + 2u;
    float _267 = sqrt(((cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x) + (cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x)) + (cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x));
    float _268 = _267 * TEXCOORD.z;
    float _269 = _267 * TEXCOORD.w;
    vec4 _289 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _295 = _289.x * cbMtdParam._m0[11u].x;
    float _296 = _289.y * cbMtdParam._m0[11u].y;
    float _297 = _289.z * cbMtdParam._m0[11u].z;
    vec4 _316 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _268) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _269) + cbTextureTilingScale._m0[5u].w));
    vec4 _355 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _357 = _355.x;
    float _369 = dot(vec4(_357, _355.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _386 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_357 - _369) * cbMtdParam._m0[24u].y) + _369) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3733 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _387 = isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0));
    float _394 = (_387 * ((_316.x * cbMtdParam._m0[12u].x) - _295)) + _295;
    float _395 = (_387 * ((_316.y * cbMtdParam._m0[12u].y) - _296)) + _296;
    float _396 = (_387 * ((_316.z * cbMtdParam._m0[12u].z) - _297)) + _297;
    vec4 _413 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _268) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _269) + cbTextureTilingScale._m0[3u].w));
    vec4 _433 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _435 = _433.x;
    float _445 = dot(vec4(_435, _433.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _459 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_435 - _445) * cbMtdParam._m0[24u].y) + _445) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3744 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _460 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
    float _467 = (_460 * ((_413.x * cbMtdParam._m0[13u].x) - _394)) + _394;
    float _468 = (_460 * ((_413.y * cbMtdParam._m0[13u].y) - _395)) + _395;
    float _469 = (_460 * ((_413.z * cbMtdParam._m0[13u].z) - _396)) + _396;
    vec4 _488 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _268) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _269) + cbTextureTilingScale._m0[14u].w));
    vec4 _508 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _268) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _269) + cbTextureTilingScale._m0[4u].w));
    vec4 _525 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _527 = _525.x;
    float _528 = _525.y;
    float _529 = _525.z;
    float _536 = ((_508.x - _527) * _387) + _527;
    float _537 = ((_508.y - _528) * _387) + _528;
    float _538 = ((_508.z - _529) * _387) + _529;
    vec4 _550 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _268) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _269) + cbTextureTilingScale._m0[2u].w));
    float _563 = ((_550.z - _538) * _460) + _538;
    float _566 = ((((_550.x - _536) * _460) + _536) * 2.0) + (-1.0);
    float _568 = ((((_550.y - _537) * _460) + _537) * 2.0) + (-1.0);
    float _569 = dot(vec2(_566, _568), vec2(_566, _568));
    float _3755 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _574 = sqrt(1.0 - (isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0))));
    vec4 _587 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _605 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _268) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _269) + cbTextureTilingScale._m0[11u].w));
    float _607 = _605.x;
    float _608 = 1.0 - _607;
    float _621 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_607 - _608) * cbMtdParam._m0[24u].z) + _608) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3766 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _622 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
    float _629 = (_622 * ((_488.x * cbMtdParam._m0[18u].x) - _467)) + _467;
    float _630 = (_622 * ((_488.y * cbMtdParam._m0[18u].y) - _468)) + _468;
    float _631 = (_622 * ((_488.z * cbMtdParam._m0[18u].z) - _469)) + _469;
    vec4 _643 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _657 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _659 = _657.x;
    float _677 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _268) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _269) + cbTextureTilingScale._m0[9u].w)).x - _659) * _387) + _659;
    float _694 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _268) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _269) + cbTextureTilingScale._m0[21u].w)).x - _677) * _460) + _677;
    float _698 = ((_643.x - _694) * cbMtdParam._m0[19u].z) + _694;
    float _700 = _698 - (_698 * _622);
    vec4 _713 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _268) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _269) + cbTextureTilingScale._m0[15u].w));
    float _720 = (_713.x * 2.0) + (-1.0);
    float _721 = (_713.y * 2.0) + (-1.0);
    float _722 = dot(vec2(_720, _721), vec2(_720, _721));
    float _3777 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
    float _730 = (_622 * (_713.z - _563)) + _563;
    float _742 = (((_720 - _566) + (cbMtdParam._m0[21u].x * _566)) * _622) + _566;
    float _743 = (((_721 - _568) + (cbMtdParam._m0[21u].x * _568)) * _622) + _568;
    float _744 = (_622 * (sqrt(1.0 - (isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0)))) - _574)) + _574;
    float _749 = cbMtdParam._m0[22u].x + _587.w;
    float _752 = fma(_744, _235 * NORMAL.x, fma(_743, _242 * TANGENT.x, (_228 * _220) * _742));
    float _755 = fma(_744, _235 * NORMAL.y, fma(_743, _242 * TANGENT.y, (_228 * _221) * _742));
    float _758 = fma(_744, _235 * NORMAL.z, fma(_743, _242 * TANGENT.z, (_228 * _222) * _742));
    float _762 = inversesqrt(dot(vec3(_752, _755, _758), vec3(_752, _755, _758)));
    float _763 = _762 * _752;
    float _764 = _762 * _755;
    float _765 = _762 * _758;
    float _3788 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    float _766 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
    float _3799 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _3810 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _3821 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _3832 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _3843 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
    float _771 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
    float _785 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _826 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _836 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _826);
    float _837 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _826);
    float _838 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _826);
    float _842 = inversesqrt(dot(vec3(_836, _837, _838), vec3(_836, _837, _838)));
    float _843 = _836 * _842;
    float _844 = _837 * _842;
    float _845 = _838 * _842;
    vec4 _850 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _852 = _850.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1024 = sqrt(((_836 * _836) + (_837 * _837)) + (_838 * _838));
        float _1030 = (cbMatDynParam._m0[5u].x * _1024) + cbMatDynParam._m0[5u].y;
        float _3854 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1031 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
        float _1035 = (cbMatDynParam._m0[5u].z * _1024) + cbMatDynParam._m0[5u].w;
        float _3865 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0))) - _1031)) + _1031) < ((_852 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _863 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _864 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _882 = fma(_765, cbSceneParam._m0[5u].z, fma(_764, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _763));
    float _885 = fma(_765, cbSceneParam._m0[6u].z, fma(_764, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _763));
    float _888 = fma(_765, cbSceneParam._m0[7u].z, fma(_764, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _763));
    uint _901 = _248 + 9u;
    uint _902 = _901 + uint(cbMatDynParam._m0[0u].w);
    float _908 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0)))) * cbInstanceData._m0[_902].x;
    float _909 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0)))) * cbInstanceData._m0[_902].y;
    float _910 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0)))) * cbInstanceData._m0[_902].z;
    float _3876 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
    float _911 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
    float _3887 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
    float _912 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
    float _3898 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
    float _913 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
    float _914 = 1.0 - _771;
    float _915 = _911 * _914;
    float _916 = _912 * _914;
    float _917 = _913 * _914;
    float _922 = (_911 + (-0.039999999105930328369140625)) * _771;
    float _923 = (_912 + (-0.039999999105930328369140625)) * _771;
    float _924 = (_913 + (-0.039999999105930328369140625)) * _771;
    float _925 = _922 + 0.039999999105930328369140625;
    float _927 = _923 + 0.039999999105930328369140625;
    float _928 = _924 + 0.039999999105930328369140625;
    vec4 _937 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _863, cbSceneParam._m0[86u].y * _864));
    float _941 = ((isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0))) * TEXCOORD_5.w) * _937.x;
    float _942 = dot(vec3(_763, _764, _765), vec3(_843, _844, _845));
    float _945 = _942 * 2.0;
    float _949 = (_945 * _763) - _843;
    float _950 = (_945 * _764) - _844;
    float _951 = (_945 * _765) - _845;
    float _955 = abs(dot(vec3(_843, _844, _845), vec3(_763, _764, _765)));
    float _3909 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
    float _957 = sqrt(_766);
    float _970 = exp2((_957 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_957 * 3.0));
    float _976 = (1.0 - _970) * ((_957 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _977 = _970 * _957;
    float _1005 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1009 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1013 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1342;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1067 = fma(_1013, cbModelParam._m0[26u].z, fma(_1009, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1005));
        float _1071 = fma(_1013, cbModelParam._m0[27u].z, fma(_1009, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1005));
        float _1075 = fma(_1013, cbModelParam._m0[28u].z, fma(_1009, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1005));
        float _1100 = _1005 + _763;
        float _1101 = _1009 + _764;
        float _1102 = _1013 + _765;
        float _1112 = fma(_1102, cbModelParam._m0[26u].z, fma(_1101, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1100)) - _1067;
        float _1113 = fma(_1102, cbModelParam._m0[27u].z, fma(_1101, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1100)) - _1071;
        float _1114 = fma(_1102, cbModelParam._m0[28u].z, fma(_1101, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1100)) - _1075;
        float _1118 = inversesqrt(dot(vec3(_1112, _1113, _1114), vec3(_1112, _1113, _1114)));
        float _1131 = ((_1118 * _1112) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1067 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1132 = ((_1118 * _1113) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1071 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1133 = ((_1118 * _1114) / cbModelParam._m0[34u].z) + ((((((_1075 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1136 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1131, _1132, _1133), 0.0);
        vec4 _1143 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1131, _1132, _1133), 0.0);
        vec4 _1150 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1131, _1132, _1133), 0.0);
        vec4 _1157 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1131, _1132, _1133), 0.0);
        float _1170 = exp2((_1136.w + (-0.5)) * 20.0) * 2.0;
        float _1171 = _1170 * (_1136.x + (-0.5));
        float _1172 = _1170 * (_1136.y + (-0.5));
        float _1173 = _1170 * (_1136.z + (-0.5));
        float _1180 = exp2((_1143.w + (-0.5)) * 20.0) * 2.0;
        float _1181 = _1180 * (_1143.x + (-0.5));
        float _1182 = _1180 * (_1143.y + (-0.5));
        float _1183 = _1180 * (_1143.z + (-0.5));
        float _1190 = exp2((_1150.w + (-0.5)) * 20.0) * 2.0;
        float _1191 = _1190 * (_1150.x + (-0.5));
        float _1192 = _1190 * (_1150.y + (-0.5));
        float _1193 = _1190 * (_1150.z + (-0.5));
        float _1200 = exp2((_1157.w + (-0.5)) * 20.0) * 2.0;
        float _1201 = _1200 * (_1157.x + (-0.5));
        float _1202 = _1200 * (_1157.y + (-0.5));
        float _1203 = _1200 * (_1157.z + (-0.5));
        float _1204 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1205 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1206 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1207 = _1171 * 0.5;
        float _1208 = _1181 * 0.5;
        float _1209 = _1191 * 0.5;
        float _1210 = dot(vec3(_1207, _1208, _1209), vec3(_1207, _1208, _1209));
        float _1215 = (_1210 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1210);
        float _1224 = (dot(vec3(_763, _764, _765), vec3(_1215 * _1207, _1215 * _1208, _1215 * _1209)) + 1.0) * 0.5;
        float _3935 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1234 = sqrt(((_1208 * _1208) + (_1207 * _1207)) + (_1209 * _1209)) / (_1204 + 9.9999997473787516355514526367188e-06);
        float _3946 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1235 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
        float _1236 = _1235 * 2.0;
        float _1240 = (1.0 - _1235) / (_1235 + 1.0);
        float _3957 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1241 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
        float _1250 = ((((1.0 - _1241) * (_1236 + 2.0)) * exp2(log2(isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0))) * (_1236 + 1.0))) + _1241) * _1204;
        float _1251 = _1172 * 0.5;
        float _1252 = _1182 * 0.5;
        float _1253 = _1192 * 0.5;
        float _1254 = dot(vec3(_1251, _1252, _1253), vec3(_1251, _1252, _1253));
        float _1259 = (_1254 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1254);
        float _1267 = (dot(vec3(_763, _764, _765), vec3(_1259 * _1251, _1259 * _1252, _1259 * _1253)) + 1.0) * 0.5;
        float _3968 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1276 = sqrt(((_1252 * _1252) + (_1251 * _1251)) + (_1253 * _1253)) / (_1205 + 9.9999997473787516355514526367188e-06);
        float _3979 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1277 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
        float _1278 = _1277 * 2.0;
        float _1282 = (1.0 - _1277) / (_1277 + 1.0);
        float _3990 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1283 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
        float _1292 = ((((1.0 - _1283) * (_1278 + 2.0)) * exp2(log2(isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0))) * (_1278 + 1.0))) + _1283) * _1205;
        float _1293 = _1173 * 0.5;
        float _1294 = _1183 * 0.5;
        float _1295 = _1193 * 0.5;
        float _1296 = dot(vec3(_1293, _1294, _1295), vec3(_1293, _1294, _1295));
        float _1301 = (_1296 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1296);
        float _1309 = (dot(vec3(_763, _764, _765), vec3(_1301 * _1293, _1301 * _1294, _1301 * _1295)) + 1.0) * 0.5;
        float _4001 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1318 = sqrt(((_1294 * _1294) + (_1293 * _1293)) + (_1295 * _1295)) / (_1206 + 9.9999997473787516355514526367188e-06);
        float _4012 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1319 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
        float _1320 = _1319 * 2.0;
        float _1324 = (1.0 - _1319) / (_1319 + 1.0);
        float _4023 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1325 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
        float _1334 = ((((1.0 - _1325) * (_1320 + 2.0)) * exp2(log2(isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0))) * (_1320 + 1.0))) + _1325) * _1206;
        _1342 = _1173;
        _1344 = _1172;
        _1345 = _1171;
        _1346 = _1183;
        _1347 = _1182;
        _1348 = _1181;
        _1349 = _1193;
        _1350 = _1192;
        _1351 = _1191;
        _1352 = _1206;
        _1353 = _1205;
        _1354 = _1204;
        _1355 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0)));
        _1356 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0)));
        _1357 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0)));
    }
    else
    {
        _1342 = _1343;
        _1344 = _1343;
        _1345 = _1343;
        _1346 = _1343;
        _1347 = _1343;
        _1348 = _1343;
        _1349 = _1343;
        _1350 = _1343;
        _1351 = _1343;
        _1352 = _1343;
        _1353 = _1343;
        _1354 = _1343;
        _1355 = 0.0;
        _1356 = 0.0;
        _1357 = 0.0;
    }
    float _1653;
    float _1654;
    float _1655;
    float _1656;
    float _1657;
    float _1658;
    float _1659;
    float _1660;
    float _1661;
    float _1662;
    float _1663;
    float _1664;
    float _1665;
    float _1666;
    float _1667;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1384 = fma(_1013, cbModelParam._m0[30u].z, fma(_1009, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1005));
        float _1388 = fma(_1013, cbModelParam._m0[31u].z, fma(_1009, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1005));
        float _1392 = fma(_1013, cbModelParam._m0[32u].z, fma(_1009, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1005));
        float _1415 = _1005 + _763;
        float _1416 = _1009 + _764;
        float _1417 = _1013 + _765;
        float _1427 = fma(_1417, cbModelParam._m0[30u].z, fma(_1416, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1415)) - _1384;
        float _1428 = fma(_1417, cbModelParam._m0[31u].z, fma(_1416, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1415)) - _1388;
        float _1429 = fma(_1417, cbModelParam._m0[32u].z, fma(_1416, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1415)) - _1392;
        float _1433 = inversesqrt(dot(vec3(_1427, _1428, _1429), vec3(_1427, _1428, _1429)));
        float _1446 = ((_1433 * _1427) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1384 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1447 = ((_1433 * _1428) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1388 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1448 = ((_1433 * _1429) / cbModelParam._m0[35u].z) + ((((((_1392 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1450 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1446, _1447, _1448), 0.0);
        vec4 _1457 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1446, _1447, _1448), 0.0);
        vec4 _1464 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1446, _1447, _1448), 0.0);
        vec4 _1471 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1446, _1447, _1448), 0.0);
        float _1483 = exp2((_1450.w + (-0.5)) * 20.0) * 2.0;
        float _1484 = _1483 * (_1450.x + (-0.5));
        float _1485 = _1483 * (_1450.y + (-0.5));
        float _1486 = _1483 * (_1450.z + (-0.5));
        float _1493 = exp2((_1457.w + (-0.5)) * 20.0) * 2.0;
        float _1494 = _1493 * (_1457.x + (-0.5));
        float _1495 = _1493 * (_1457.y + (-0.5));
        float _1496 = _1493 * (_1457.z + (-0.5));
        float _1503 = exp2((_1464.w + (-0.5)) * 20.0) * 2.0;
        float _1504 = _1503 * (_1464.x + (-0.5));
        float _1505 = _1503 * (_1464.y + (-0.5));
        float _1506 = _1503 * (_1464.z + (-0.5));
        float _1513 = exp2((_1471.w + (-0.5)) * 20.0) * 2.0;
        float _1514 = _1513 * (_1471.x + (-0.5));
        float _1515 = _1513 * (_1471.y + (-0.5));
        float _1516 = _1513 * (_1471.z + (-0.5));
        float _1517 = isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0));
        float _1518 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1519 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
        float _1520 = _1484 * 0.5;
        float _1521 = _1494 * 0.5;
        float _1522 = _1504 * 0.5;
        float _1523 = dot(vec3(_1520, _1521, _1522), vec3(_1520, _1521, _1522));
        float _1528 = (_1523 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1523);
        float _1536 = (dot(vec3(_763, _764, _765), vec3(_1528 * _1520, _1528 * _1521, _1528 * _1522)) + 1.0) * 0.5;
        float _4064 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1545 = sqrt(((_1521 * _1521) + (_1520 * _1520)) + (_1522 * _1522)) / (_1517 + 9.9999997473787516355514526367188e-06);
        float _4075 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
        float _1546 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
        float _1547 = _1546 * 2.0;
        float _1551 = (1.0 - _1546) / (_1546 + 1.0);
        float _4086 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1552 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
        float _1561 = ((((1.0 - _1552) * (_1547 + 2.0)) * exp2(log2(isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0))) * (_1547 + 1.0))) + _1552) * _1517;
        float _1562 = _1485 * 0.5;
        float _1563 = _1495 * 0.5;
        float _1564 = _1505 * 0.5;
        float _1565 = dot(vec3(_1562, _1563, _1564), vec3(_1562, _1563, _1564));
        float _1570 = (_1565 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1565);
        float _1578 = (dot(vec3(_763, _764, _765), vec3(_1570 * _1562, _1570 * _1563, _1570 * _1564)) + 1.0) * 0.5;
        float _4097 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
        float _1587 = sqrt(((_1563 * _1563) + (_1562 * _1562)) + (_1564 * _1564)) / (_1518 + 9.9999997473787516355514526367188e-06);
        float _4108 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
        float _1588 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
        float _1589 = _1588 * 2.0;
        float _1593 = (1.0 - _1588) / (_1588 + 1.0);
        float _4119 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
        float _1594 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
        float _1603 = ((((1.0 - _1594) * (_1589 + 2.0)) * exp2(log2(isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0))) * (_1589 + 1.0))) + _1594) * _1518;
        float _1604 = _1486 * 0.5;
        float _1605 = _1496 * 0.5;
        float _1606 = _1506 * 0.5;
        float _1607 = dot(vec3(_1604, _1605, _1606), vec3(_1604, _1605, _1606));
        float _1612 = (_1607 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1607);
        float _1620 = (dot(vec3(_763, _764, _765), vec3(_1612 * _1604, _1612 * _1605, _1612 * _1606)) + 1.0) * 0.5;
        float _4130 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
        float _1629 = sqrt(((_1605 * _1605) + (_1604 * _1604)) + (_1606 * _1606)) / (_1519 + 9.9999997473787516355514526367188e-06);
        float _4141 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
        float _1630 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
        float _1631 = _1630 * 2.0;
        float _1635 = (1.0 - _1630) / (_1630 + 1.0);
        float _4152 = isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0));
        float _1636 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
        float _1645 = ((((1.0 - _1636) * (_1631 + 2.0)) * exp2(log2(isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0))) * (_1631 + 1.0))) + _1636) * _1519;
        _1653 = _1486;
        _1654 = _1485;
        _1655 = _1484;
        _1656 = _1496;
        _1657 = _1495;
        _1658 = _1494;
        _1659 = _1506;
        _1660 = _1505;
        _1661 = _1504;
        _1662 = _1519;
        _1663 = _1518;
        _1664 = _1517;
        _1665 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0)));
        _1666 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0)));
        _1667 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0)));
    }
    else
    {
        _1653 = _1343;
        _1654 = _1343;
        _1655 = _1343;
        _1656 = _1343;
        _1657 = _1343;
        _1658 = _1343;
        _1659 = _1343;
        _1660 = _1343;
        _1661 = _1343;
        _1662 = _1343;
        _1663 = _1343;
        _1664 = _1343;
        _1665 = 0.0;
        _1666 = 0.0;
        _1667 = 0.0;
    }
    float _1677 = (cbModelParam._m0[1u].x * (_1665 - _1355)) + _1355;
    float _1678 = (cbModelParam._m0[1u].x * (_1666 - _1356)) + _1356;
    float _1679 = (cbModelParam._m0[1u].x * (_1667 - _1357)) + _1357;
    float _1700 = fma(_1679, cbSceneParam._m0[89u].z, fma(_1678, cbSceneParam._m0[89u].y, _1677 * cbSceneParam._m0[89u].x));
    float _1703 = fma(_1679, cbSceneParam._m0[90u].z, fma(_1678, cbSceneParam._m0[90u].y, _1677 * cbSceneParam._m0[90u].x));
    float _1706 = fma(_1679, cbSceneParam._m0[91u].z, fma(_1678, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1677));
    float _1721 = _949 * 0.5;
    float _1722 = _950 * 0.5;
    float _1723 = _951 * 0.5;
    float _1724 = dot(vec4(_1721, _1722, _1723, 1.0), vec4(_1655, _1658, _1661, _1664));
    float _1727 = dot(vec4(_1721, _1722, _1723, 1.0), vec4(_1654, _1657, _1660, _1663));
    float _1730 = dot(vec4(_1721, _1722, _1723, 1.0), vec4(_1653, _1656, _1659, _1662));
    float _1764;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1737 = dot(vec4(_1721, _1722, _1723, 1.0), vec4(_1342, _1346, _1349, _1352));
        float _1741 = dot(vec4(_1721, _1722, _1723, 1.0), vec4(_1344, _1347, _1350, _1353));
        float _1745 = dot(vec4(_1721, _1722, _1723, 1.0), vec4(_1345, _1348, _1351, _1354));
        float _1752 = dot(vec4(cbModelParam._m0[39u]), vec4(_1721, _1722, _1723, 1.0));
        _1764 = dot(vec3(isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0)), isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0)), isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1752) ? 0.0 : (isnan(0.0) ? _1752 : max(0.0, _1752))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1764 = 1.0;
    }
    float _1775;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1766 = dot(vec4(cbModelParam._m0[40u]), vec4(_1721, _1722, _1723, 1.0));
        _1775 = dot(vec3(isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0)), isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0)), isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1766) ? 0.0 : (isnan(0.0) ? _1766 : max(0.0, _1766))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1775 = 1.0;
    }
    float _1779 = (_1775 * cbModelParam._m0[1u].x) + (_1764 * (1.0 - cbModelParam._m0[1u].x));
    float _1789 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _766);
    float _1790 = isnan(_1789) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1789 : min(cbModelParam._m0[25u].z, _1789));
    float _1870;
    float _1872;
    float _1874;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1837 = fma(_1013, cbModelParam._m0[13u].z, fma(_1009, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1005)) + cbModelParam._m0[13u].w;
        float _1841 = fma(_1013, cbModelParam._m0[14u].z, fma(_1009, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1005)) + cbModelParam._m0[14u].w;
        float _1845 = fma(_1013, cbModelParam._m0[15u].z, fma(_1009, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1005)) + cbModelParam._m0[15u].w;
        float _1848 = fma(_951, cbModelParam._m0[13u].z, fma(_950, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _949));
        float _1851 = fma(_951, cbModelParam._m0[14u].z, fma(_950, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _949));
        float _1854 = fma(_951, cbModelParam._m0[15u].z, fma(_950, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _949));
        float _1882;
        if (_1848 > 0.0)
        {
            _1882 = abs((1.0 - _1837) / _1848);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1848 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1837 + 1.0) / _1848);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1882 = frontier_phi_17_15_ladder;
        }
        float _2084;
        if (_1851 > 0.0)
        {
            _2084 = abs((1.0 - _1841) / _1851);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1851 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1841 + 1.0) / _1851);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2084 = frontier_phi_26_22_ladder;
        }
        float _2338;
        if (_1854 > 0.0)
        {
            _2338 = abs((1.0 - _1845) / _1854);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1854 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1845 + 1.0) / _1854);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2338 = frontier_phi_38_33_ladder;
        }
        float _2340 = isnan(_2084) ? _1882 : (isnan(_1882) ? _2084 : min(_1882, _2084));
        float _2341 = isnan(_2338) ? _2340 : (isnan(_2340) ? _2338 : min(_2340, _2338));
        float _2345 = (_2341 * _1848) + _1837;
        float _2346 = (_2341 * _1851) + _1841;
        float _2347 = (_2341 * _1854) + _1845;
        float _2348 = _2341 * 9.9999997473787516355514526367188e-05;
        float _2350 = (-1.0) - _2348;
        float _2352 = _2348 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2347 > _2352) || ((_2347 < _2350) || ((_2346 > _2352) || ((_2346 < _2350) || ((_2345 < _2350) || (_2345 > _2352))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2475 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2347, cbModelParam._m0[9u].z, fma(_2346, cbModelParam._m0[9u].y, _2345 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2347, cbModelParam._m0[10u].z, fma(_2346, cbModelParam._m0[10u].y, _2345 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2347, cbModelParam._m0[11u].z, fma(_2346, cbModelParam._m0[11u].y, _2345 * cbModelParam._m0[11u].x))), _1790);
            frontier_phi_16_38_ladder = _2475.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2475.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2475.x * cbModelParam._m0[1u].y;
        }
        _1870 = frontier_phi_16_38_ladder_2;
        _1872 = frontier_phi_16_38_ladder_1;
        _1874 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1858 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_949, _950, _951), _1790);
        _1870 = _1858.x * cbModelParam._m0[1u].y;
        _1872 = _1858.y * cbModelParam._m0[1u].y;
        _1874 = _1858.z * cbModelParam._m0[1u].y;
    }
    float _1878 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _766);
    float _1879 = isnan(_1878) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1878 : min(cbModelParam._m0[25u].w, _1878));
    float _1968;
    float _1970;
    float _1972;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1932 = fma(_1013, cbModelParam._m0[21u].z, fma(_1009, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1005)) + cbModelParam._m0[21u].w;
        float _1936 = fma(_1013, cbModelParam._m0[22u].z, fma(_1009, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1005)) + cbModelParam._m0[22u].w;
        float _1940 = fma(_1013, cbModelParam._m0[23u].z, fma(_1009, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1005)) + cbModelParam._m0[23u].w;
        float _1943 = fma(_951, cbModelParam._m0[21u].z, fma(_950, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _949));
        float _1946 = fma(_951, cbModelParam._m0[22u].z, fma(_950, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _949));
        float _1949 = fma(_951, cbModelParam._m0[23u].z, fma(_950, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _949));
        float _2089;
        if (_1943 > 0.0)
        {
            _2089 = abs((1.0 - _1932) / _1943);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1943 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1932 + 1.0) / _1943);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2089 = frontier_phi_28_24_ladder;
        }
        float _2365;
        if (_1946 > 0.0)
        {
            _2365 = abs((1.0 - _1936) / _1946);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1946 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1936 + 1.0) / _1946);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2365 = frontier_phi_40_35_ladder;
        }
        float _2578;
        if (_1949 > 0.0)
        {
            _2578 = abs((1.0 - _1940) / _1949);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1949 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1940 + 1.0) / _1949);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2578 = frontier_phi_49_46_ladder;
        }
        float _2580 = isnan(_2365) ? _2089 : (isnan(_2089) ? _2365 : min(_2089, _2365));
        float _2581 = isnan(_2578) ? _2580 : (isnan(_2580) ? _2578 : min(_2580, _2578));
        float _2585 = (_2581 * _1943) + _1932;
        float _2586 = (_2581 * _1946) + _1936;
        float _2587 = (_2581 * _1949) + _1940;
        float _2588 = _2581 * 9.9999997473787516355514526367188e-05;
        float _2589 = (-1.0) - _2588;
        float _2591 = _2588 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2587 > _2591) || ((_2587 < _2589) || ((_2586 > _2591) || ((_2586 < _2589) || ((_2585 < _2589) || (_2585 > _2591))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2786 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2587, cbModelParam._m0[17u].z, fma(_2586, cbModelParam._m0[17u].y, _2585 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2587, cbModelParam._m0[18u].z, fma(_2586, cbModelParam._m0[18u].y, _2585 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2587, cbModelParam._m0[19u].z, fma(_2586, cbModelParam._m0[19u].y, _2585 * cbModelParam._m0[19u].x))), _1879);
            frontier_phi_25_49_ladder = _2786.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2786.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2786.x * cbModelParam._m0[1u].z;
        }
        _1968 = frontier_phi_25_49_ladder_2;
        _1970 = frontier_phi_25_49_ladder_1;
        _1972 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1952 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_949, _950, _951), _1879);
        _1968 = _1952.x * cbModelParam._m0[1u].z;
        _1970 = _1952.y * cbModelParam._m0[1u].z;
        _1972 = _1952.z * cbModelParam._m0[1u].z;
    }
    float _1985 = (((_976 * _925) + _977) * _941) * ((cbModelParam._m0[1u].w * (_1968 - _1870)) + _1870);
    float _1987 = (((_976 * _927) + _977) * _941) * ((cbModelParam._m0[1u].w * (_1970 - _1872)) + _1872);
    float _1989 = (((_976 * _928) + _977) * _941) * ((cbModelParam._m0[1u].w * (_1972 - _1874)) + _1874);
    float _1992 = fma(_1989, cbSceneParam._m0[89u].z, fma(_1987, cbSceneParam._m0[89u].y, _1985 * cbSceneParam._m0[89u].x));
    float _1995 = fma(_1989, cbSceneParam._m0[90u].z, fma(_1987, cbSceneParam._m0[90u].y, _1985 * cbSceneParam._m0[90u].x));
    float _1998 = fma(_1989, cbSceneParam._m0[91u].z, fma(_1987, cbSceneParam._m0[91u].y, _1985 * cbSceneParam._m0[91u].x));
    uvec4 _2008 = floatBitsToUint(cbInstanceData._m0[_248 + 5u]);
    uint _2010 = _2008.x * 14u;
    uint _2011 = _2010 + 13u;
    float _2018 = _941 + (-1.0);
    float _2023 = (cbLight._m0[_2011].x * _2018) + 1.0;
    float _2024 = (cbLight._m0[_2011].y * _2018) + 1.0;
    float _2025 = (cbLight._m0[_2011].z * _2018) + 1.0;
    float _2026 = (cbLight._m0[_2011].w * _2018) + 1.0;
    uint _2027 = _2010 + 5u;
    float _2033 = isnan(1.0) ? _2024 : (isnan(_2024) ? 1.0 : min(_2024, 1.0));
    uint _2037 = _2010 + 4u;
    float _2043 = isnan(1.0) ? _2023 : (isnan(_2023) ? 1.0 : min(_2023, 1.0));
    uint _2047 = _2010 | 1u;
    float _2058 = dot(vec3(cbLight._m0[_2010].xyz), vec3(_763, _764, _765));
    float _2061 = dot(vec3(cbLight._m0[_2047].xyz), vec3(_763, _764, _765));
    float _4288 = isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0));
    float _4299 = isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0));
    float _2066 = (isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0))) * 0.3183098733425140380859375;
    float _2068 = (isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0))) * 0.3183098733425140380859375;
    float _2075 = ((cbLight._m0[_2027].x * _2033) * _2068) + ((cbLight._m0[_2037].x * _2043) * _2066);
    float _2076 = ((_2033 * cbLight._m0[_2027].y) * _2068) + ((_2043 * cbLight._m0[_2037].y) * _2066);
    float _2077 = ((_2033 * cbLight._m0[_2027].z) * _2068) + ((_2043 * cbLight._m0[_2037].z) * _2066);
    uvec4 _2081 = floatBitsToUint(cbLight._m0[_2010 + 12u]);
    bool _2083 = _2081.x == 0u;
    float _2094;
    float _2096;
    float _2098;
    if (_2083)
    {
        _2094 = _2075;
        _2096 = _2076;
        _2098 = _2077;
    }
    else
    {
        uint _2102 = _2010 + 6u;
        float _2118 = (dot(vec3(cbLight._m0[_2010 + 2u].xyz), vec3(_763, _764, _765)) * 0.5) + 0.5;
        float _2119 = _2118 * _2118;
        float _4310 = isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0));
        float _2120 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
        float _2121 = isnan(1.0) ? _2025 : (isnan(_2025) ? 1.0 : min(_2025, 1.0));
        _2094 = (((cbLight._m0[_2102].x * 0.3183098733425140380859375) * _2120) * _2121) + _2075;
        _2096 = (((cbLight._m0[_2102].y * 0.3183098733425140380859375) * _2120) * _2121) + _2076;
        _2098 = (((cbLight._m0[_2102].z * 0.3183098733425140380859375) * _2120) * _2121) + _2077;
    }
    bool _2101 = _2081.y == 0u;
    float _2139;
    float _2141;
    float _2143;
    if (_2101)
    {
        _2139 = _2094;
        _2141 = _2096;
        _2143 = _2098;
    }
    else
    {
        uint _2309 = _2010 + 7u;
        float _2325 = (dot(vec3(cbLight._m0[_2010 + 3u].xyz), vec3(_763, _764, _765)) * 0.5) + 0.5;
        float _2326 = _2325 * _2325;
        float _4326 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
        float _2327 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
        float _2328 = isnan(1.0) ? _2026 : (isnan(_2026) ? 1.0 : min(_2026, 1.0));
        _2139 = (((cbLight._m0[_2309].x * 0.3183098733425140380859375) * _2327) * _2328) + _2094;
        _2141 = (((cbLight._m0[_2309].y * 0.3183098733425140380859375) * _2327) * _2328) + _2096;
        _2143 = (((cbLight._m0[_2309].z * 0.3183098733425140380859375) * _2327) * _2328) + _2098;
    }
    uint _2146 = _2010 + 8u;
    float _2159 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2010].w)) * _766) * 0.949999988079071044921875);
    float _2160 = _2159 * _2159;
    float _2161 = cbLight._m0[_2010].x + _843;
    float _2162 = cbLight._m0[_2010].y + _844;
    float _2163 = cbLight._m0[_2010].z + _845;
    float _2167 = inversesqrt(dot(vec3(_2161, _2162, _2163), vec3(_2161, _2162, _2163)));
    float _2168 = _2167 * _2161;
    float _2169 = _2167 * _2162;
    float _2170 = _2167 * _2163;
    float _2171 = dot(vec3(_763, _764, _765), vec3(cbLight._m0[_2010].xyz));
    float _4342 = isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0));
    float _2174 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
    float _4353 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
    float _2175 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
    float _2176 = dot(vec3(_763, _764, _765), vec3(_2168, _2169, _2170));
    float _4364 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
    float _2179 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
    float _2180 = dot(vec3(cbLight._m0[_2010].xyz), vec3(_2168, _2169, _2170));
    float _4375 = isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0));
    float _2184 = _2160 * _2160;
    float _2188 = ((_2179 * _2179) * (_2184 + (-1.0))) + 1.0;
    float _2196 = exp2(log2(1.0 - (isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0)))) * 5.0);
    float _2197 = 0.959999978542327880859375 - _922;
    float _2199 = 0.959999978542327880859375 - _923;
    float _2200 = 0.959999978542327880859375 - _924;
    float _2207 = 1.0 - _2160;
    float _2218 = (0.5 / (((_2175 * ((_2174 * _2207) + _2160)) + 9.9999999392252902907785028219223e-09) + (((_2175 * _2207) + _2160) * _2174))) * _2174;
    float _4386 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
    float _2220 = (isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0))) * (_2184 / ((_2188 * _2188) * 3.141590118408203125));
    uint _2231 = _2010 + 9u;
    float _2242 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2047].w)) * _766) * 0.949999988079071044921875);
    float _2243 = _2242 * _2242;
    float _2244 = cbLight._m0[_2047].x + _843;
    float _2245 = cbLight._m0[_2047].y + _844;
    float _2246 = cbLight._m0[_2047].z + _845;
    float _2250 = inversesqrt(dot(vec3(_2244, _2245, _2246), vec3(_2244, _2245, _2246)));
    float _2251 = _2250 * _2244;
    float _2252 = _2250 * _2245;
    float _2253 = _2250 * _2246;
    float _2254 = dot(vec3(_763, _764, _765), vec3(cbLight._m0[_2047].xyz));
    float _4397 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
    float _2257 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
    float _2258 = dot(vec3(_763, _764, _765), vec3(_2251, _2252, _2253));
    float _4408 = isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0));
    float _2261 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
    float _2262 = dot(vec3(cbLight._m0[_2047].xyz), vec3(_2251, _2252, _2253));
    float _4419 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
    float _2266 = _2243 * _2243;
    float _2270 = ((_2261 * _2261) * (_2266 + (-1.0))) + 1.0;
    float _2277 = exp2(log2(1.0 - (isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0)))) * 5.0);
    float _2284 = 1.0 - _2243;
    float _2294 = (0.5 / (((_2175 * ((_2257 * _2284) + _2243)) + 9.9999999392252902907785028219223e-09) + (((_2175 * _2284) + _2243) * _2257))) * _2257;
    float _4430 = isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0));
    float _2296 = (isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0))) * (_2266 / ((_2270 * _2270) * 3.141590118408203125));
    float _2306 = (((((_2277 * _2197) + _925) * cbLight._m0[_2231].x) * _2296) * _2033) + (((((_2196 * _2197) + _925) * cbLight._m0[_2146].x) * _2220) * _2043);
    float _2307 = (((((_2277 * _2199) + _927) * cbLight._m0[_2231].y) * _2296) * _2033) + (((((_2196 * _2199) + _927) * cbLight._m0[_2146].y) * _2220) * _2043);
    float _2308 = (((((_2277 * _2200) + _928) * cbLight._m0[_2231].z) * _2296) * _2033) + (((((_2196 * _2200) + _928) * cbLight._m0[_2146].z) * _2220) * _2043);
    float _2370;
    float _2372;
    float _2374;
    if (_2083)
    {
        _2370 = _2306;
        _2372 = _2307;
        _2374 = _2308;
    }
    else
    {
        uint _2376 = _2010 + 2u;
        uint _2380 = _2010 + 10u;
        float _2394 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2376].w)) * _766) * 0.949999988079071044921875);
        float _2395 = _2394 * _2394;
        float _2396 = cbLight._m0[_2376].x + _843;
        float _2397 = cbLight._m0[_2376].y + _844;
        float _2398 = cbLight._m0[_2376].z + _845;
        float _2402 = inversesqrt(dot(vec3(_2396, _2397, _2398), vec3(_2396, _2397, _2398)));
        float _2403 = _2402 * _2396;
        float _2404 = _2402 * _2397;
        float _2405 = _2402 * _2398;
        float _2406 = dot(vec3(_763, _764, _765), vec3(cbLight._m0[_2376].xyz));
        float _4441 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0));
        float _2409 = isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0));
        float _2410 = dot(vec3(_763, _764, _765), vec3(_2403, _2404, _2405));
        float _4452 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0));
        float _2413 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
        float _2414 = dot(vec3(cbLight._m0[_2376].xyz), vec3(_2403, _2404, _2405));
        float _4463 = isnan(0.0) ? _2414 : (isnan(_2414) ? 0.0 : max(_2414, 0.0));
        float _2418 = _2395 * _2395;
        float _2422 = ((_2413 * _2413) * (_2418 + (-1.0))) + 1.0;
        float _2429 = exp2(log2(1.0 - (isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0)))) * 5.0);
        float _2436 = 1.0 - _2395;
        float _2446 = (0.5 / (((_2175 * ((_2409 * _2436) + _2395)) + 9.9999999392252902907785028219223e-09) + (((_2175 * _2436) + _2395) * _2409))) * _2409;
        float _4474 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
        float _2448 = (isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0))) * (_2418 / ((_2422 * _2422) * 3.141590118408203125));
        float _2449 = isnan(1.0) ? _2025 : (isnan(_2025) ? 1.0 : min(_2025, 1.0));
        _2370 = (((((_2429 * _2197) + _925) * cbLight._m0[_2380].x) * _2448) * _2449) + _2306;
        _2372 = (((((_2429 * _2199) + _927) * cbLight._m0[_2380].y) * _2448) * _2449) + _2307;
        _2374 = (((((_2429 * _2200) + _928) * cbLight._m0[_2380].z) * _2448) * _2449) + _2308;
    }
    float _2484;
    float _2486;
    float _2488;
    if (_2101)
    {
        _2484 = _2370;
        _2486 = _2372;
        _2488 = _2374;
    }
    else
    {
        uint _2495 = _2010 + 3u;
        uint _2499 = _2010 + 11u;
        float _2513 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2495].w)) * _766) * 0.949999988079071044921875);
        float _2514 = _2513 * _2513;
        float _2515 = cbLight._m0[_2495].x + _843;
        float _2516 = cbLight._m0[_2495].y + _844;
        float _2517 = cbLight._m0[_2495].z + _845;
        float _2521 = inversesqrt(dot(vec3(_2515, _2516, _2517), vec3(_2515, _2516, _2517)));
        float _2522 = _2521 * _2515;
        float _2523 = _2521 * _2516;
        float _2524 = _2521 * _2517;
        float _2525 = dot(vec3(_763, _764, _765), vec3(cbLight._m0[_2495].xyz));
        float _4490 = isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : max(_2525, 0.0));
        float _2528 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
        float _2529 = dot(vec3(_763, _764, _765), vec3(_2522, _2523, _2524));
        float _4501 = isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : max(_2529, 0.0));
        float _2532 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
        float _2533 = dot(vec3(cbLight._m0[_2495].xyz), vec3(_2522, _2523, _2524));
        float _4512 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
        float _2537 = _2514 * _2514;
        float _2541 = ((_2532 * _2532) * (_2537 + (-1.0))) + 1.0;
        float _2548 = exp2(log2(1.0 - (isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0)))) * 5.0);
        float _2555 = 1.0 - _2514;
        float _2565 = (0.5 / (((_2175 * ((_2528 * _2555) + _2514)) + 9.9999999392252902907785028219223e-09) + (((_2175 * _2555) + _2514) * _2528))) * _2528;
        float _4523 = isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0));
        float _2567 = (isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0))) * (_2537 / ((_2541 * _2541) * 3.141590118408203125));
        float _2568 = isnan(1.0) ? _2026 : (isnan(_2026) ? 1.0 : min(_2026, 1.0));
        _2484 = (((((_2548 * _2197) + _925) * cbLight._m0[_2499].x) * _2567) * _2568) + _2370;
        _2486 = (((((_2548 * _2199) + _927) * cbLight._m0[_2499].y) * _2567) * _2568) + _2372;
        _2488 = (((((_2548 * _2200) + _928) * cbLight._m0[_2499].z) * _2567) * _2568) + _2374;
    }
    float _2703;
    float _2705;
    float _2707;
    float _2709;
    float _2711;
    float _2713;
    if (_2008.y == 0u)
    {
        float _2643 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2644 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2643;
        float _2645 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2643;
        float _2646 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2643;
        uvec4 _2658 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2659 = _2658.x;
        uint _2670 = uint((float(_2658.y) * floor(float(uint(cbSceneParam._m0[85u].y * _864) / _2659))) + floor(float(uint(cbSceneParam._m0[85u].x * _863) / _2659)));
        float _2680 = (log2(_2646 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2681 = isnan(0.0) ? _2680 : (isnan(_2680) ? 0.0 : max(_2680, 0.0));
        uint _2684 = uint(isnan(14.0) ? _2681 : (isnan(_2681) ? 14.0 : min(_2681, 14.0)));
        uvec4 _2689 = texelFetch(g_lightClusterGridBuffer, int(((_2684 << 2u) + (_2670 << 6u)) >> 2u));
        uint _2690 = _2689.x;
        uint _2691 = _2658.z;
        float _2791;
        float _2793;
        float _2795;
        float _2797;
        float _2799;
        float _2801;
        if (((((1u << ((_2691 >> 4u) & 15u)) + 4294967295u) & _2690) == 0u) || ((_2691 & 240u) == 0u))
        {
            _2791 = 0.0;
            _2793 = 0.0;
            _2795 = 0.0;
            _2797 = 0.0;
            _2799 = 0.0;
            _2801 = 0.0;
        }
        else
        {
            float _2792;
            float _2794;
            float _2796;
            float _2798;
            float _2800;
            float _2802;
            float _2944 = 0.0;
            float _2945 = 0.0;
            float _2946 = 0.0;
            float _2947 = 0.0;
            float _2948 = 0.0;
            float _2949 = 0.0;
            uint _2950 = 0u;
            uint _2959;
            bool _2960;
            for (;;)
            {
                _2959 = texelFetch(g_lightClassification, int((((_2684 << 5u) + (_2670 << 9u)) + (_2950 << 2u)) >> 2u)).x;
                _2960 = _2959 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2960)
                {
                    frontier_phi_66_pred = _2944;
                    frontier_phi_66_pred_1 = _2949;
                    frontier_phi_66_pred_2 = _2948;
                    frontier_phi_66_pred_3 = _2947;
                    frontier_phi_66_pred_4 = _2946;
                    frontier_phi_66_pred_5 = _2945;
                }
                else
                {
                    float _3089;
                    float _3090;
                    float _3091;
                    float _3092;
                    float _3093;
                    float _3094;
                    uint _3095;
                    _3089 = _2944;
                    _3090 = _2945;
                    _3091 = _2946;
                    _3092 = _2947;
                    _3093 = _2948;
                    _3094 = _2949;
                    _3095 = _2959;
                    float _3016;
                    float _3017;
                    float _3018;
                    float _3019;
                    float _3020;
                    float _3021;
                    for (;;)
                    {
                        uint _3099 = uint(findLSB(_3095)) + (_2950 << 5u);
                        uint _3096 = (_3095 + 4294967295u) & _3095;
                        uint _3101 = _3099 * 48u;
                        vec4 _3115 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3101)).x, texelFetch(g_PointLightRenderingBuffer, int(_3101 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3101 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3101 + 3u)).x));
                        uint _3121 = (_3099 * 48u) + 4u;
                        vec4 _3134 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3121)).x, texelFetch(g_PointLightRenderingBuffer, int(_3121 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3121 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3121 + 3u)).x));
                        uint _3140 = (_3099 * 48u) + 8u;
                        vec3 _3151 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3140)).x, texelFetch(g_PointLightRenderingBuffer, int(_3140 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3140 + 2u)).x));
                        float _3155 = _3115.x - _2644;
                        float _3156 = _3115.y - _2645;
                        float _3157 = _3115.z - _2646;
                        float _3158 = dot(vec3(_3155, _3156, _3157), vec3(_3155, _3156, _3157));
                        float _3161 = inversesqrt(_3158);
                        float _3162 = _3161 * _3155;
                        float _3163 = _3161 * _3156;
                        float _3164 = _3161 * _3157;
                        float _3165 = dot(vec3(_882, _885, _888), vec3(_3162, _3163, _3164));
                        float _3170 = 1.0 - (_3158 * _3115.w);
                        float _4549 = isnan(0.0) ? _3170 : (isnan(_3170) ? 0.0 : max(_3170, 0.0));
                        float _3171 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
                        float _3172 = sqrt(_3158) * _3134.w;
                        float _3175 = 1.39999997615814208984375 / (_3172 + 1.39999997615814208984375);
                        float _3176 = _3175 * _3175;
                        float _3179 = ((1.0 - _3176) * _3165) + _3176;
                        float _3182 = _3172 * _3172;
                        float _3186 = ((isnan(0.0) ? _3179 : (isnan(_3179) ? 0.0 : max(_3179, 0.0))) * _3171) / ((_3182 * 0.699999988079071044921875) + 1.0);
                        float _3190 = (-0.0) - _2644;
                        float _3191 = (-0.0) - _2645;
                        float _3192 = (-0.0) - _2646;
                        float _3196 = inversesqrt(dot(vec3(_3190, _3191, _3192), vec3(_3190, _3191, _3192)));
                        float _3197 = _3196 * _3190;
                        float _3198 = _3196 * _3191;
                        float _3199 = _3196 * _3192;
                        float _3207 = exp2(log2(1.0 / ((_3182 * 3.5) + 5.0)) * 0.25);
                        float _3208 = 1.0 - _957;
                        float _3215 = sqrt(1.0 - ((1.0 - (_3208 * _3208)) * (1.0 - (_3207 * _3207))));
                        float _3216 = _3215 * _3215;
                        float _3217 = _3216 * _3216;
                        float _3218 = _3197 + _3162;
                        float _3219 = _3198 + _3163;
                        float _3220 = _3199 + _3164;
                        float _3224 = inversesqrt(dot(vec3(_3218, _3219, _3220), vec3(_3218, _3219, _3220)));
                        float _3228 = dot(vec3(_882, _885, _888), vec3(_3197, _3198, _3199));
                        float _4565 = isnan(0.0) ? _3228 : (isnan(_3228) ? 0.0 : max(_3228, 0.0));
                        float _3231 = isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0));
                        float _3232 = dot(vec3(_882, _885, _888), vec3(_3224 * _3218, _3224 * _3219, _3224 * _3220));
                        float _4576 = isnan(0.0) ? _3232 : (isnan(_3232) ? 0.0 : max(_3232, 0.0));
                        float _3235 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
                        float _3239 = ((_3235 * _3235) * (_3217 + (-1.0))) + 1.0;
                        float _3240 = _3175 * _3216;
                        float _3241 = _3240 * _3240;
                        float _3244 = ((1.0 - _3241) * _3165) + _3241;
                        float _4587 = isnan(0.0) ? _3244 : (isnan(_3244) ? 0.0 : max(_3244, 0.0));
                        float _3245 = isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0));
                        float _3246 = 1.0 - _3216;
                        float _3256 = (0.5 / (((_3245 * ((_3231 * _3246) + _3216)) + 9.9999999392252902907785028219223e-09) + (((_3245 * _3246) + _3216) * _3231))) * _3245;
                        float _4598 = isnan(0.0) ? _3256 : (isnan(_3256) ? 0.0 : max(_3256, 0.0));
                        float _3267 = (((_3217 * 3.1415927410125732421875) * (isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0)))) / ((_3239 * _3239) * ((_3182 * 2.1991131305694580078125) + 3.141590118408203125))) * _3171;
                        _3019 = (_3186 * _3134.x) + _3092;
                        _3020 = (_3186 * _3134.y) + _3093;
                        _3021 = (_3186 * _3134.z) + _3094;
                        _3016 = (_3267 * _3151.x) + _3089;
                        _3017 = (_3267 * _3151.y) + _3090;
                        _3018 = (_3267 * _3151.z) + _3091;
                        if (_3096 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3089 = _3016;
                            _3090 = _3017;
                            _3091 = _3018;
                            _3092 = _3019;
                            _3093 = _3020;
                            _3094 = _3021;
                            _3095 = _3096;
                        }
                    }
                    frontier_phi_66_pred = _3016;
                    frontier_phi_66_pred_1 = _3021;
                    frontier_phi_66_pred_2 = _3020;
                    frontier_phi_66_pred_3 = _3019;
                    frontier_phi_66_pred_4 = _3018;
                    frontier_phi_66_pred_5 = _3017;
                }
                _2792 = frontier_phi_66_pred;
                _2802 = frontier_phi_66_pred_1;
                _2800 = frontier_phi_66_pred_2;
                _2798 = frontier_phi_66_pred_3;
                _2796 = frontier_phi_66_pred_4;
                _2794 = frontier_phi_66_pred_5;
                uint _2951 = _2950 + 1u;
                if (_2951 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2944 = _2792;
                    _2945 = _2794;
                    _2946 = _2796;
                    _2947 = _2798;
                    _2948 = _2800;
                    _2949 = _2802;
                    _2950 = _2951;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2791 = _2792;
            _2793 = _2794;
            _2795 = _2796;
            _2797 = _2798;
            _2799 = _2800;
            _2801 = _2802;
        }
        uvec4 _2805 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2806 = _2805.z;
        uint _2808 = (_2806 >> 8u) & 15u;
        float _2912;
        float _2914;
        float _2916;
        float _2918;
        float _2920;
        float _2922;
        if (((4294967295u << _2808) & _2690) == 0u)
        {
            _2912 = _2791;
            _2914 = _2793;
            _2916 = _2795;
            _2918 = _2797;
            _2920 = _2799;
            _2922 = _2801;
        }
        else
        {
            float _2937 = inversesqrt(dot(vec3(_2644, _2645, _2646), vec3(_2644, _2645, _2646)));
            float _2938 = _2937 * _2644;
            float _2939 = _2937 * _2645;
            float _2940 = _2937 * _2646;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2808 < ((_2806 >> 12u) & 15u))
            {
                float _2913;
                float _2915;
                float _2917;
                float _2919;
                float _2921;
                float _2923;
                float _3072 = _2791;
                float _3073 = _2793;
                float _3074 = _2795;
                float _3075 = _2797;
                float _3076 = _2799;
                float _3077 = _2801;
                uint _3078 = _2808;
                uint _3087;
                bool _3088;
                for (;;)
                {
                    _3087 = texelFetch(g_lightClassification, int((((_2684 << 5u) + (_2670 << 9u)) + (_3078 << 2u)) >> 2u)).x;
                    _3088 = _3087 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3088)
                    {
                        frontier_phi_77_pred = _3077;
                        frontier_phi_77_pred_1 = _3076;
                        frontier_phi_77_pred_2 = _3075;
                        frontier_phi_77_pred_3 = _3074;
                        frontier_phi_77_pred_4 = _3073;
                        frontier_phi_77_pred_5 = _3072;
                    }
                    else
                    {
                        float _3281;
                        float _3282;
                        float _3283;
                        float _3284;
                        float _3285;
                        float _3286;
                        float _3574;
                        float _3575;
                        float _3576;
                        float _3577;
                        float _3578;
                        float _3579;
                        float _3294 = _3072;
                        float _3295 = _3073;
                        float _3296 = _3074;
                        float _3297 = _3075;
                        float _3298 = _3076;
                        float _3299 = _3077;
                        uint _3300 = _3087;
                        uint _3301;
                        vec4 _3326;
                        float _3327;
                        vec4 _3342;
                        vec3 _3354;
                        vec4 _3369;
                        vec4 _3384;
                        float _3430;
                        bool _3431;
                        for (;;)
                        {
                            uint _3311 = ((_3078 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3300));
                            _3301 = (_3300 + 4294967295u) & _3300;
                            uint _3313 = _3311 * 40u;
                            _3326 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3313)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 3u)).x));
                            _3327 = _3326.w;
                            uint _3329 = (_3311 * 40u) + 4u;
                            _3342 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3329)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3329 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3329 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3329 + 3u)).x));
                            uint _3344 = (_3311 * 40u) + 8u;
                            _3354 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3344)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3344 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3344 + 2u)).x));
                            uint _3356 = (_3311 * 40u) + 16u;
                            _3369 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3356)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 3u)).x));
                            uint _3371 = (_3311 * 40u) + 20u;
                            _3384 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3371)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3371 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3371 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3371 + 3u)).x));
                            uint _3386 = (_3311 * 40u) + 24u;
                            vec4 _3399 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3386)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3386 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3386 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3386 + 3u)).x));
                            uint _3405 = (_3311 * 40u) + 28u;
                            vec4 _3418 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3405)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3405 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3405 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3405 + 3u)).x));
                            _3430 = fma(_2646, _3418.z, fma(_2645, _3418.y, _3418.x * _2644)) + _3418.w;
                            _3431 = !((fma(_2646, _3399.z, fma(_2645, _3399.y, _3399.x * _2644)) + _3399.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3431)
                            {
                                float _3458 = _3326.x - _2644;
                                float _3459 = _3326.y - _2645;
                                float _3460 = _3326.z - _2646;
                                float _3461 = dot(vec3(_3458, _3459, _3460), vec3(_3458, _3459, _3460));
                                float _3464 = inversesqrt(_3461);
                                float _3465 = _3464 * _3458;
                                float _3466 = _3464 * _3459;
                                float _3467 = _3464 * _3460;
                                float _3471 = 1.0 - (_3461 / (_3327 * _3327));
                                float _4609 = isnan(0.0) ? _3471 : (isnan(_3471) ? 0.0 : max(_3471, 0.0));
                                float _3472 = isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0));
                                float _3476 = sqrt(_3461) * _3342.w;
                                float _3478 = 1.39999997615814208984375 / (_3476 + 1.39999997615814208984375);
                                float _3479 = _3478 * _3478;
                                float _3482 = ((1.0 - _3479) * dot(vec3(_3465, _3466, _3467), vec3(_882, _885, _888))) + _3479;
                                float _3485 = _3476 * _3476;
                                float _3489 = (fma(_2646, _3369.z, fma(_2645, _3369.y, _3369.x * _2644)) + _3369.w) / _3430;
                                float _3490 = (fma(_2646, _3384.z, fma(_2645, _3384.y, _3384.x * _2644)) + _3384.w) / _3430;
                                float _3494 = 1.0 - dot(vec2(_3489, _3490), vec2(_3489, _3490));
                                float _4625 = isnan(0.0) ? _3494 : (isnan(_3494) ? 0.0 : max(_3494, 0.0));
                                float _3495 = isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0));
                                float _3496 = _3495 * (((isnan(0.0) ? _3482 : (isnan(_3482) ? 0.0 : max(_3482, 0.0))) * _3472) / ((_3485 * 0.699999988079071044921875) + 1.0));
                                float _3508 = exp2(log2(1.0 / ((_3485 * 3.5) + 5.0)) * 0.25);
                                float _3509 = 1.0 - _957;
                                float _3516 = sqrt(1.0 - ((1.0 - (_3509 * _3509)) * (1.0 - (_3508 * _3508))));
                                float _3517 = _3516 * _3516;
                                float _3518 = _3517 * _3517;
                                float _3519 = _3465 - _2938;
                                float _3520 = _3466 - _2939;
                                float _3521 = _3467 - _2940;
                                float _3525 = inversesqrt(dot(vec3(_3519, _3520, _3521), vec3(_3519, _3520, _3521)));
                                float _3529 = dot(vec3(_882, _885, _888), vec3((-0.0) - _2938, (-0.0) - _2939, (-0.0) - _2940));
                                float _4636 = isnan(0.0) ? _3529 : (isnan(_3529) ? 0.0 : max(_3529, 0.0));
                                float _3532 = isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0));
                                float _3533 = dot(vec3(_882, _885, _888), vec3(_3525 * _3519, _3525 * _3520, _3525 * _3521));
                                float _4647 = isnan(0.0) ? _3533 : (isnan(_3533) ? 0.0 : max(_3533, 0.0));
                                float _3536 = isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0));
                                float _3540 = ((_3536 * _3536) * (_3518 + (-1.0))) + 1.0;
                                float _3541 = _3478 * _3517;
                                float _3542 = _3541 * _3541;
                                float _3548 = ((1.0 - _3542) * dot(vec3(_882, _885, _888), vec3(_3465, _3466, _3467))) + _3542;
                                float _4658 = isnan(0.0) ? _3548 : (isnan(_3548) ? 0.0 : max(_3548, 0.0));
                                float _3549 = isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0));
                                float _3550 = 1.0 - _3517;
                                float _3560 = (0.5 / (((_3549 * ((_3532 * _3550) + _3517)) + 9.9999999392252902907785028219223e-09) + (((_3549 * _3550) + _3517) * _3532))) * _3549;
                                float _4669 = isnan(0.0) ? _3560 : (isnan(_3560) ? 0.0 : max(_3560, 0.0));
                                float _3570 = (_3495 * _3472) * (((_3518 * 3.1415927410125732421875) * (isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0)))) / ((_3540 * _3540) * ((_3485 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3496 * _3342.y;
                                frontier_phi_83_pred_1 = _3496 * _3342.x;
                                frontier_phi_83_pred_2 = _3570 * _3354.z;
                                frontier_phi_83_pred_3 = _3570 * _3354.y;
                                frontier_phi_83_pred_4 = _3570 * _3354.x;
                                frontier_phi_83_pred_5 = _3496 * _3342.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3578 = frontier_phi_83_pred;
                            _3577 = frontier_phi_83_pred_1;
                            _3576 = frontier_phi_83_pred_2;
                            _3575 = frontier_phi_83_pred_3;
                            _3574 = frontier_phi_83_pred_4;
                            _3579 = frontier_phi_83_pred_5;
                            _3284 = _3577 + _3297;
                            _3285 = _3578 + _3298;
                            _3286 = _3579 + _3299;
                            _3281 = _3574 + _3294;
                            _3282 = _3575 + _3295;
                            _3283 = _3576 + _3296;
                            if (_3301 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3294 = _3281;
                                _3295 = _3282;
                                _3296 = _3283;
                                _3297 = _3284;
                                _3298 = _3285;
                                _3299 = _3286;
                                _3300 = _3301;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3286;
                        frontier_phi_77_pred_1 = _3285;
                        frontier_phi_77_pred_2 = _3284;
                        frontier_phi_77_pred_3 = _3283;
                        frontier_phi_77_pred_4 = _3282;
                        frontier_phi_77_pred_5 = _3281;
                    }
                    _2923 = frontier_phi_77_pred;
                    _2921 = frontier_phi_77_pred_1;
                    _2919 = frontier_phi_77_pred_2;
                    _2917 = frontier_phi_77_pred_3;
                    _2915 = frontier_phi_77_pred_4;
                    _2913 = frontier_phi_77_pred_5;
                    uint _3079 = _3078 + 1u;
                    if (_3079 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3072 = _2913;
                        _3073 = _2915;
                        _3074 = _2917;
                        _3075 = _2919;
                        _3076 = _2921;
                        _3077 = _2923;
                        _3078 = _3079;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2917;
                frontier_phi_58_59_ladder_1 = _2923;
                frontier_phi_58_59_ladder_2 = _2921;
                frontier_phi_58_59_ladder_3 = _2919;
                frontier_phi_58_59_ladder_4 = _2915;
                frontier_phi_58_59_ladder_5 = _2913;
            }
            else
            {
                frontier_phi_58_59_ladder = _2795;
                frontier_phi_58_59_ladder_1 = _2801;
                frontier_phi_58_59_ladder_2 = _2799;
                frontier_phi_58_59_ladder_3 = _2797;
                frontier_phi_58_59_ladder_4 = _2793;
                frontier_phi_58_59_ladder_5 = _2791;
            }
            _2912 = frontier_phi_58_59_ladder_5;
            _2914 = frontier_phi_58_59_ladder_4;
            _2916 = frontier_phi_58_59_ladder;
            _2918 = frontier_phi_58_59_ladder_3;
            _2920 = frontier_phi_58_59_ladder_2;
            _2922 = frontier_phi_58_59_ladder_1;
        }
        float _2927 = isnan(1.0) ? _941 : (isnan(_941) ? 1.0 : min(_941, 1.0));
        _2703 = (_2927 * _2918) + _2139;
        _2705 = (_2927 * _2920) + _2141;
        _2707 = (_2927 * _2922) + _2143;
        _2709 = ((_2912 * _925) * _2927) + _2484;
        _2711 = ((_2914 * _927) * _2927) + _2486;
        _2713 = ((_2916 * _928) * _2927) + _2488;
    }
    else
    {
        _2703 = _2139;
        _2705 = _2141;
        _2707 = _2143;
        _2709 = _2484;
        _2711 = _2486;
        _2713 = _2488;
    }
    float _4685 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
    float _4696 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
    float _4707 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
    float _2730 = ((isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0))) * (_2703 + ((isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0))) * _941))) + ((_2709 + ((isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0))) * _1779)) * cbPerFrame._m0[3u].x);
    float _2731 = ((isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0))) * (_2705 + ((isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0))) * _941))) + ((_2711 + ((isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0))) * _1779)) * cbPerFrame._m0[3u].x);
    float _2732 = ((isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0))) * (_2707 + ((isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0))) * _941))) + ((_2713 + ((isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0))) * _1779)) * cbPerFrame._m0[3u].x);
    uint _2733 = _248 + 6u;
    float _2741 = _863 / cbSceneParam._m0[86u].x;
    float _2742 = _864 / cbSceneParam._m0[86u].y;
    vec4 _2756 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2741, _2742, (log2((isnan(cbSceneParam._m0[77u].w) ? _785 : (isnan(_785) ? cbSceneParam._m0[77u].w : min(_785, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2758 = _2756.x;
    float _2759 = _2756.y;
    float _2760 = _2756.z;
    float _2761 = _2756.w;
    float _2854;
    float _2856;
    float _2858;
    float _2860;
    if (_785 > cbSceneParam._m0[78u].w)
    {
        float _2816 = isnan(_785) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _785 : min(cbSceneParam._m0[80u].w, _785));
        float _2817 = _2816 / _785;
        float _2828 = _2817 * _836;
        float _2829 = _837 * _2817;
        float _2830 = (-0.0) - _2829;
        float _2832 = _2817 * _838;
        float _2834 = (cbSceneParam._m0[77u].w * _2830) / _2816;
        float _2835 = _2834 + cbSceneParam._m0[79u].w;
        float _2836 = cbSceneParam._m0[79u].w - _2829;
        float _2842 = sqrt(((_2828 * _2828) + (_2829 * _2829)) + (_2832 * _2832));
        float _2845 = (1.0 - (cbSceneParam._m0[77u].w / _2816)) * _2842;
        float _2850 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2852 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3029;
        if (abs((_2830 - _2834) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3029 = ((((_2835 > 0.0) ? exp2(_2850 * _2835) : (2.0 - exp2(_2852 * _2835))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2845;
        }
        else
        {
            float _2973 = 1.0 / cbSceneParam._m0[80u].x;
            float _2974 = isnan(_2836) ? _2835 : (isnan(_2835) ? _2836 : max(_2835, _2836));
            float _2975 = isnan(_2836) ? _2835 : (isnan(_2835) ? _2836 : min(_2835, _2836));
            float _2984 = isnan(0.0) ? _2974 : (isnan(_2974) ? 0.0 : min(_2974, 0.0));
            float _2985 = isnan(0.0) ? _2975 : (isnan(_2975) ? 0.0 : min(_2975, 0.0));
            _3029 = ((abs(_2842 / _2830) * cbSceneParam._m0[80u].y) * ((((_2984 - _2985) * 2.0) - ((exp2(_2850 * (isnan(0.0) ? _2974 : (isnan(_2974) ? 0.0 : max(_2974, 0.0)))) - exp2(_2850 * (isnan(0.0) ? _2975 : (isnan(_2975) ? 0.0 : max(_2975, 0.0))))) * _2973)) - ((exp2(_2852 * _2984) - exp2(_2852 * _2985)) * _2973))) + (_2845 * cbSceneParam._m0[80u].z);
        }
        vec4 _3031 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2741, _2742, 1.0), 0.0);
        float _3040 = exp2((_3029 * (-1.44269502162933349609375)) * (1.0 - _3031.w));
        float _3041 = log2(_3040);
        float _3057 = log2(_2761);
        _2854 = (exp2(_3057 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3041 * cbSceneParam._m0[78u].x)) * _3031.x) / cbSceneParam._m0[78u].x)) + _2758;
        _2856 = (exp2(_3057 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3041 * cbSceneParam._m0[78u].y)) * _3031.y) / cbSceneParam._m0[78u].y)) + _2759;
        _2858 = (exp2(_3057 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3041 * cbSceneParam._m0[78u].z)) * _3031.z) / cbSceneParam._m0[78u].z)) + _2760;
        _2860 = _3040 * _2761;
    }
    else
    {
        _2854 = _2758;
        _2856 = _2759;
        _2858 = _2760;
        _2860 = _2761;
    }
    bool _3067;
    vec4 _2870;
    vec4 _2892;
    float _2894;
    float _2898;
    float _2899;
    float _2900;
    float _2901;
    bool _2911;
    for (;;)
    {
        _2870 = cbMatDynParam._m0[0u];
        float _2872 = roundEven(_2870.y);
        bool _2873 = _2872 == 3.0;
        float _2874 = log2(_2860);
        float _2881 = exp2(_2874 * cbSceneParam._m0[78u].x) * _2730;
        float _2882 = exp2(_2874 * cbSceneParam._m0[78u].y) * _2731;
        float _2883 = exp2(_2874 * cbSceneParam._m0[78u].z) * _2732;
        float _2890 = _852 + (-0.5);
        _2892 = cbMtdParam._m0[1u];
        _2894 = _2892.y * _2890;
        float _2897 = (_2872 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2898 = _2897 * (_2873 ? _2881 : (_2881 + (cbSceneParam._m0[72u].w * _2854)));
        _2899 = _2897 * (_2873 ? _2882 : (_2882 + (cbSceneParam._m0[72u].w * _2856)));
        _2900 = _2897 * (_2873 ? _2883 : (_2883 + (cbSceneParam._m0[72u].w * _2858)));
        _2901 = _2890 * 0.999000012874603271484375;
        _2911 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2911)
        {
            if ((cbInstanceData._m0[_248 + 7u].x + _2901) < 0.5)
            {
                _3067 = true;
                break;
            }
        }
        uint _3008 = _901 + uint(_2870.w);
        if ((cbInstanceData._m0[_3008].w < 1.0) && ((cbInstanceData._m0[_3008].w + _2901) < 0.5))
        {
            _3067 = true;
            break;
        }
        if ((_2894 + 1.0) < _2892.x)
        {
            _3067 = true;
            break;
        }
        _3067 = false;
        break;
    }
    float _3272;
    if (_3067)
    {
        discard_state = true;
        _3272 = 0.0;
    }
    else
    {
        _3272 = cbInstanceData._m0[_2733].w;
    }
    SV_Target.x = _2898;
    SV_Target.y = _2899;
    SV_Target.z = _2900;
    SV_Target.w = _3272;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2733].w;
    discard_exit();
}


