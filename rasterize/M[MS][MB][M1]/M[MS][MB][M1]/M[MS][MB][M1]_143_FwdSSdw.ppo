#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1306;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _219 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _220 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _221 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _227 = inversesqrt(dot(vec3(_219, _220, _221), vec3(_219, _220, _221)));
    float _228 = _227 * _219;
    float _229 = _227 * _220;
    float _230 = _227 * _221;
    float _234 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _235 = _234 * NORMAL.x;
    float _236 = _234 * NORMAL.y;
    float _237 = _234 * NORMAL.z;
    float _241 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _242 = _241 * TANGENT.x;
    float _243 = _241 * TANGENT.y;
    float _244 = _241 * TANGENT.z;
    float _255 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _257 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _258 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3655 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    float _3666 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _3677 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    uint _268 = uint(roundEven(NORMAL.w)) * 13u;
    uint _273 = _268 + 1u;
    uint _277 = _268 + 2u;
    float _286 = sqrt(((cbInstanceData._m0[_273].x * cbInstanceData._m0[_273].x) + (cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x)) + (cbInstanceData._m0[_277].x * cbInstanceData._m0[_277].x));
    float _287 = _286 * TEXCOORD.z;
    float _288 = _286 * TEXCOORD.w;
    vec4 _301 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _287) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _288) + cbTextureTilingScale._m0[13u].w));
    vec4 _325 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _330 = _325.x * cbMtdParam._m0[11u].x;
    float _331 = _325.y * cbMtdParam._m0[11u].y;
    float _332 = _325.z * cbMtdParam._m0[11u].z;
    vec4 _351 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _287) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _288) + cbTextureTilingScale._m0[5u].w));
    vec4 _387 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _389 = _387.x;
    float _401 = dot(vec4(_389, _387.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _418 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_389 - _401) * cbMtdParam._m0[24u].y) + _401) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3688 = isnan(0.0) ? _418 : (isnan(_418) ? 0.0 : max(_418, 0.0));
    float _419 = isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0));
    float _426 = (_419 * ((_351.x * cbMtdParam._m0[12u].x) - _330)) + _330;
    float _427 = (_419 * ((_351.y * cbMtdParam._m0[12u].y) - _331)) + _331;
    float _428 = (_419 * ((_351.z * cbMtdParam._m0[12u].z) - _332)) + _332;
    float _432 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _301.x) * _426;
    float _435 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _301.y) * _427;
    float _438 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _301.z) * _428;
    float _445 = ((_426 - _432) * (isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0)))) + _432;
    float _446 = ((_427 - _435) * (isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0)))) + _435;
    float _447 = ((_428 - _438) * (isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0)))) + _438;
    vec4 _466 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _287) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _288) + cbTextureTilingScale._m0[14u].w));
    vec4 _486 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _287) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _288) + cbTextureTilingScale._m0[20u].w));
    vec4 _513 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _287) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _288) + cbTextureTilingScale._m0[4u].w));
    vec4 _530 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _532 = _530.x;
    float _533 = _530.y;
    float _534 = _530.z;
    float _543 = ((_513.z - _534) * _419) + _534;
    float _546 = ((((_513.x - _532) * _419) + _532) * 2.0) + (-1.0);
    float _547 = ((((_513.y - _533) * _419) + _533) * 2.0) + (-1.0);
    float _548 = dot(vec2(_546, _547), vec2(_546, _547));
    float _3699 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _553 = sqrt(1.0 - (isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0))));
    vec4 _573 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _585 = (_546 + ((((_486.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_573.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _586 = (_547 + ((((_486.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_573.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _589 = fma(_553, _235, fma(_586, _242, _585 * _228));
    float _592 = fma(_553, _236, fma(_586, _243, _585 * _229));
    float _595 = fma(_553, _237, fma(_586, _244, _585 * _230));
    float _599 = inversesqrt(dot(vec3(_589, _592, _595), vec3(_589, _592, _595)));
    vec4 _626 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _287) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _288) + cbTextureTilingScale._m0[11u].w));
    float _628 = _626.x;
    float _629 = 1.0 - _628;
    float _635 = (cbMtdParam._m0[19u].x + dot(vec4(_599 * _589, _599 * _592, _599 * _595, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_628 - _629) * cbMtdParam._m0[24u].z) + _629) * cbMtdParam._m0[21u].z);
    float _3710 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _636 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
    float _643 = (_636 * ((_466.x * cbMtdParam._m0[18u].x) - _445)) + _445;
    float _644 = (_636 * ((_466.y * cbMtdParam._m0[18u].y) - _446)) + _446;
    float _645 = (_636 * ((_466.z * cbMtdParam._m0[18u].z) - _447)) + _447;
    vec4 _657 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _671 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _673 = _671.x;
    float _691 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _287) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _288) + cbTextureTilingScale._m0[9u].w)).x - _673) * _419) + _673;
    float _695 = ((_657.x - _691) * cbMtdParam._m0[19u].z) + _691;
    float _697 = _695 - (_695 * _636);
    float _702 = (((_486.z - _543) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _543;
    float _706 = ((_573.z - _702) * cbMtdParam._m0[19u].w) + _702;
    vec4 _719 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _287) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _288) + cbTextureTilingScale._m0[15u].w));
    float _726 = (_719.x * 2.0) + (-1.0);
    float _727 = (_719.y * 2.0) + (-1.0);
    float _728 = dot(vec2(_726, _727), vec2(_726, _727));
    float _3721 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
    float _736 = ((_719.z - _706) * _636) + _706;
    float _746 = ((sqrt(1.0 - (isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0)))) - _553) * _636) + _553;
    float _749 = (((_726 - _585) * _636) + _585) + (cbMtdParam._m0[21u].x * _585);
    float _750 = (((_727 - _586) * _636) + _586) + (cbMtdParam._m0[21u].x * _586);
    float _752 = cbMtdParam._m0[22u].x + _573.w;
    float _755 = fma(_746, _235, fma(_750, _242, _749 * _228));
    float _758 = fma(_746, _236, fma(_750, _243, _749 * _229));
    float _761 = fma(_746, _237, fma(_750, _244, _749 * _230));
    float _765 = inversesqrt(dot(vec3(_755, _758, _761), vec3(_755, _758, _761)));
    float _766 = _765 * _755;
    float _767 = _765 * _758;
    float _768 = _765 * _761;
    float _3732 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
    float _769 = isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0));
    float _3743 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
    float _3754 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _3765 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _3776 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _3787 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _774 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
    float _788 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _829 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _839 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _829);
    float _840 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _829);
    float _841 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _829);
    float _845 = inversesqrt(dot(vec3(_839, _840, _841), vec3(_839, _840, _841)));
    float _846 = _839 * _845;
    float _847 = _840 * _845;
    float _848 = _841 * _845;
    float _854 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _855 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _873 = fma(_768, cbSceneParam._m0[5u].z, fma(_767, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _766));
    float _876 = fma(_768, cbSceneParam._m0[6u].z, fma(_767, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _766));
    float _879 = fma(_768, cbSceneParam._m0[7u].z, fma(_767, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _766));
    uint _893 = (_268 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _899 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0)))) * cbInstanceData._m0[_893].x;
    float _900 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0)))) * cbInstanceData._m0[_893].y;
    float _901 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0)))) * cbInstanceData._m0[_893].z;
    float _3798 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
    float _902 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
    float _3809 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
    float _903 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
    float _3820 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
    float _904 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
    float _905 = 1.0 - _774;
    float _906 = _902 * _905;
    float _907 = _903 * _905;
    float _908 = _904 * _905;
    float _913 = (_902 + (-0.039999999105930328369140625)) * _774;
    float _914 = (_903 + (-0.039999999105930328369140625)) * _774;
    float _915 = (_904 + (-0.039999999105930328369140625)) * _774;
    float _916 = _913 + 0.039999999105930328369140625;
    float _918 = _914 + 0.039999999105930328369140625;
    float _919 = _915 + 0.039999999105930328369140625;
    vec4 _928 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _854, cbSceneParam._m0[86u].y * _855));
    float _932 = ((isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0))) * TEXCOORD_5.w) * _928.x;
    float _933 = dot(vec3(_766, _767, _768), vec3(_846, _847, _848));
    float _936 = _933 * 2.0;
    float _940 = (_936 * _766) - _846;
    float _941 = (_936 * _767) - _847;
    float _942 = (_936 * _768) - _848;
    float _946 = abs(dot(vec3(_846, _847, _848), vec3(_766, _767, _768)));
    float _3831 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
    float _948 = sqrt(_769);
    float _961 = exp2((_948 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_948 * 3.0));
    float _967 = (1.0 - _961) * ((_948 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _968 = _961 * _948;
    float _996 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1000 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1004 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1305;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1030 = fma(_1004, cbModelParam._m0[26u].z, fma(_1000, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _996));
        float _1034 = fma(_1004, cbModelParam._m0[27u].z, fma(_1000, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _996));
        float _1038 = fma(_1004, cbModelParam._m0[28u].z, fma(_1000, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _996));
        float _1063 = _996 + _766;
        float _1064 = _1000 + _767;
        float _1065 = _1004 + _768;
        float _1075 = fma(_1065, cbModelParam._m0[26u].z, fma(_1064, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1063)) - _1030;
        float _1076 = fma(_1065, cbModelParam._m0[27u].z, fma(_1064, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1063)) - _1034;
        float _1077 = fma(_1065, cbModelParam._m0[28u].z, fma(_1064, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1063)) - _1038;
        float _1081 = inversesqrt(dot(vec3(_1075, _1076, _1077), vec3(_1075, _1076, _1077)));
        float _1094 = ((_1081 * _1075) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1030 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1095 = ((_1081 * _1076) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1034 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1096 = ((_1081 * _1077) / cbModelParam._m0[34u].z) + ((((((_1038 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1099 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1094, _1095, _1096), 0.0);
        vec4 _1106 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1094, _1095, _1096), 0.0);
        vec4 _1113 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1094, _1095, _1096), 0.0);
        vec4 _1120 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1094, _1095, _1096), 0.0);
        float _1133 = exp2((_1099.w + (-0.5)) * 20.0) * 2.0;
        float _1134 = _1133 * (_1099.x + (-0.5));
        float _1135 = _1133 * (_1099.y + (-0.5));
        float _1136 = _1133 * (_1099.z + (-0.5));
        float _1143 = exp2((_1106.w + (-0.5)) * 20.0) * 2.0;
        float _1144 = _1143 * (_1106.x + (-0.5));
        float _1145 = _1143 * (_1106.y + (-0.5));
        float _1146 = _1143 * (_1106.z + (-0.5));
        float _1153 = exp2((_1113.w + (-0.5)) * 20.0) * 2.0;
        float _1154 = _1153 * (_1113.x + (-0.5));
        float _1155 = _1153 * (_1113.y + (-0.5));
        float _1156 = _1153 * (_1113.z + (-0.5));
        float _1163 = exp2((_1120.w + (-0.5)) * 20.0) * 2.0;
        float _1164 = _1163 * (_1120.x + (-0.5));
        float _1165 = _1163 * (_1120.y + (-0.5));
        float _1166 = _1163 * (_1120.z + (-0.5));
        float _1167 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1168 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1169 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1170 = _1134 * 0.5;
        float _1171 = _1144 * 0.5;
        float _1172 = _1154 * 0.5;
        float _1173 = dot(vec3(_1170, _1171, _1172), vec3(_1170, _1171, _1172));
        float _1178 = (_1173 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1173);
        float _1187 = (dot(vec3(_766, _767, _768), vec3(_1178 * _1170, _1178 * _1171, _1178 * _1172)) + 1.0) * 0.5;
        float _3857 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1197 = sqrt(((_1171 * _1171) + (_1170 * _1170)) + (_1172 * _1172)) / (_1167 + 9.9999997473787516355514526367188e-06);
        float _3868 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1198 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
        float _1199 = _1198 * 2.0;
        float _1203 = (1.0 - _1198) / (_1198 + 1.0);
        float _3879 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1204 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
        float _1213 = ((((1.0 - _1204) * (_1199 + 2.0)) * exp2(log2(isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0))) * (_1199 + 1.0))) + _1204) * _1167;
        float _1214 = _1135 * 0.5;
        float _1215 = _1145 * 0.5;
        float _1216 = _1155 * 0.5;
        float _1217 = dot(vec3(_1214, _1215, _1216), vec3(_1214, _1215, _1216));
        float _1222 = (_1217 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1217);
        float _1230 = (dot(vec3(_766, _767, _768), vec3(_1222 * _1214, _1222 * _1215, _1222 * _1216)) + 1.0) * 0.5;
        float _3890 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1239 = sqrt(((_1215 * _1215) + (_1214 * _1214)) + (_1216 * _1216)) / (_1168 + 9.9999997473787516355514526367188e-06);
        float _3901 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1240 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
        float _1241 = _1240 * 2.0;
        float _1245 = (1.0 - _1240) / (_1240 + 1.0);
        float _3912 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1246 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
        float _1255 = ((((1.0 - _1246) * (_1241 + 2.0)) * exp2(log2(isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0))) * (_1241 + 1.0))) + _1246) * _1168;
        float _1256 = _1136 * 0.5;
        float _1257 = _1146 * 0.5;
        float _1258 = _1156 * 0.5;
        float _1259 = dot(vec3(_1256, _1257, _1258), vec3(_1256, _1257, _1258));
        float _1264 = (_1259 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1259);
        float _1272 = (dot(vec3(_766, _767, _768), vec3(_1264 * _1256, _1264 * _1257, _1264 * _1258)) + 1.0) * 0.5;
        float _3923 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1281 = sqrt(((_1257 * _1257) + (_1256 * _1256)) + (_1258 * _1258)) / (_1169 + 9.9999997473787516355514526367188e-06);
        float _3934 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1282 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
        float _1283 = _1282 * 2.0;
        float _1287 = (1.0 - _1282) / (_1282 + 1.0);
        float _3945 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1288 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
        float _1297 = ((((1.0 - _1288) * (_1283 + 2.0)) * exp2(log2(isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0))) * (_1283 + 1.0))) + _1288) * _1169;
        _1305 = _1136;
        _1307 = _1135;
        _1308 = _1134;
        _1309 = _1146;
        _1310 = _1145;
        _1311 = _1144;
        _1312 = _1156;
        _1313 = _1155;
        _1314 = _1154;
        _1315 = _1169;
        _1316 = _1168;
        _1317 = _1167;
        _1318 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0)));
        _1319 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0)));
        _1320 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0)));
    }
    else
    {
        _1305 = _1306;
        _1307 = _1306;
        _1308 = _1306;
        _1309 = _1306;
        _1310 = _1306;
        _1311 = _1306;
        _1312 = _1306;
        _1313 = _1306;
        _1314 = _1306;
        _1315 = _1306;
        _1316 = _1306;
        _1317 = _1306;
        _1318 = 0.0;
        _1319 = 0.0;
        _1320 = 0.0;
    }
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    float _1625;
    float _1626;
    float _1627;
    float _1628;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1345 = fma(_1004, cbModelParam._m0[30u].z, fma(_1000, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _996));
        float _1349 = fma(_1004, cbModelParam._m0[31u].z, fma(_1000, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _996));
        float _1353 = fma(_1004, cbModelParam._m0[32u].z, fma(_1000, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _996));
        float _1376 = _996 + _766;
        float _1377 = _1000 + _767;
        float _1378 = _1004 + _768;
        float _1388 = fma(_1378, cbModelParam._m0[30u].z, fma(_1377, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1376)) - _1345;
        float _1389 = fma(_1378, cbModelParam._m0[31u].z, fma(_1377, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1376)) - _1349;
        float _1390 = fma(_1378, cbModelParam._m0[32u].z, fma(_1377, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1376)) - _1353;
        float _1394 = inversesqrt(dot(vec3(_1388, _1389, _1390), vec3(_1388, _1389, _1390)));
        float _1407 = ((_1394 * _1388) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1345 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1408 = ((_1394 * _1389) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1349 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1409 = ((_1394 * _1390) / cbModelParam._m0[35u].z) + ((((((_1353 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1411 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1407, _1408, _1409), 0.0);
        vec4 _1418 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1407, _1408, _1409), 0.0);
        vec4 _1425 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1407, _1408, _1409), 0.0);
        vec4 _1432 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1407, _1408, _1409), 0.0);
        float _1444 = exp2((_1411.w + (-0.5)) * 20.0) * 2.0;
        float _1445 = _1444 * (_1411.x + (-0.5));
        float _1446 = _1444 * (_1411.y + (-0.5));
        float _1447 = _1444 * (_1411.z + (-0.5));
        float _1454 = exp2((_1418.w + (-0.5)) * 20.0) * 2.0;
        float _1455 = _1454 * (_1418.x + (-0.5));
        float _1456 = _1454 * (_1418.y + (-0.5));
        float _1457 = _1454 * (_1418.z + (-0.5));
        float _1464 = exp2((_1425.w + (-0.5)) * 20.0) * 2.0;
        float _1465 = _1464 * (_1425.x + (-0.5));
        float _1466 = _1464 * (_1425.y + (-0.5));
        float _1467 = _1464 * (_1425.z + (-0.5));
        float _1474 = exp2((_1432.w + (-0.5)) * 20.0) * 2.0;
        float _1475 = _1474 * (_1432.x + (-0.5));
        float _1476 = _1474 * (_1432.y + (-0.5));
        float _1477 = _1474 * (_1432.z + (-0.5));
        float _1478 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1479 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1480 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1481 = _1445 * 0.5;
        float _1482 = _1455 * 0.5;
        float _1483 = _1465 * 0.5;
        float _1484 = dot(vec3(_1481, _1482, _1483), vec3(_1481, _1482, _1483));
        float _1489 = (_1484 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1484);
        float _1497 = (dot(vec3(_766, _767, _768), vec3(_1489 * _1481, _1489 * _1482, _1489 * _1483)) + 1.0) * 0.5;
        float _3986 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
        float _1506 = sqrt(((_1482 * _1482) + (_1481 * _1481)) + (_1483 * _1483)) / (_1478 + 9.9999997473787516355514526367188e-06);
        float _3997 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1507 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
        float _1508 = _1507 * 2.0;
        float _1512 = (1.0 - _1507) / (_1507 + 1.0);
        float _4008 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
        float _1513 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
        float _1522 = ((((1.0 - _1513) * (_1508 + 2.0)) * exp2(log2(isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0))) * (_1508 + 1.0))) + _1513) * _1478;
        float _1523 = _1446 * 0.5;
        float _1524 = _1456 * 0.5;
        float _1525 = _1466 * 0.5;
        float _1526 = dot(vec3(_1523, _1524, _1525), vec3(_1523, _1524, _1525));
        float _1531 = (_1526 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1526);
        float _1539 = (dot(vec3(_766, _767, _768), vec3(_1531 * _1523, _1531 * _1524, _1531 * _1525)) + 1.0) * 0.5;
        float _4019 = isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0));
        float _1548 = sqrt(((_1524 * _1524) + (_1523 * _1523)) + (_1525 * _1525)) / (_1479 + 9.9999997473787516355514526367188e-06);
        float _4030 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1549 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
        float _1550 = _1549 * 2.0;
        float _1554 = (1.0 - _1549) / (_1549 + 1.0);
        float _4041 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1555 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
        float _1564 = ((((1.0 - _1555) * (_1550 + 2.0)) * exp2(log2(isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0))) * (_1550 + 1.0))) + _1555) * _1479;
        float _1565 = _1447 * 0.5;
        float _1566 = _1457 * 0.5;
        float _1567 = _1467 * 0.5;
        float _1568 = dot(vec3(_1565, _1566, _1567), vec3(_1565, _1566, _1567));
        float _1573 = (_1568 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1568);
        float _1581 = (dot(vec3(_766, _767, _768), vec3(_1573 * _1565, _1573 * _1566, _1573 * _1567)) + 1.0) * 0.5;
        float _4052 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1590 = sqrt(((_1566 * _1566) + (_1565 * _1565)) + (_1567 * _1567)) / (_1480 + 9.9999997473787516355514526367188e-06);
        float _4063 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
        float _1591 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
        float _1592 = _1591 * 2.0;
        float _1596 = (1.0 - _1591) / (_1591 + 1.0);
        float _4074 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
        float _1597 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
        float _1606 = ((((1.0 - _1597) * (_1592 + 2.0)) * exp2(log2(isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0))) * (_1592 + 1.0))) + _1597) * _1480;
        _1614 = _1447;
        _1615 = _1446;
        _1616 = _1445;
        _1617 = _1457;
        _1618 = _1456;
        _1619 = _1455;
        _1620 = _1467;
        _1621 = _1466;
        _1622 = _1465;
        _1623 = _1480;
        _1624 = _1479;
        _1625 = _1478;
        _1626 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0)));
        _1627 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0)));
        _1628 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0)));
    }
    else
    {
        _1614 = _1306;
        _1615 = _1306;
        _1616 = _1306;
        _1617 = _1306;
        _1618 = _1306;
        _1619 = _1306;
        _1620 = _1306;
        _1621 = _1306;
        _1622 = _1306;
        _1623 = _1306;
        _1624 = _1306;
        _1625 = _1306;
        _1626 = 0.0;
        _1627 = 0.0;
        _1628 = 0.0;
    }
    float _1638 = (cbModelParam._m0[1u].x * (_1626 - _1318)) + _1318;
    float _1639 = (cbModelParam._m0[1u].x * (_1627 - _1319)) + _1319;
    float _1640 = (cbModelParam._m0[1u].x * (_1628 - _1320)) + _1320;
    float _1661 = fma(_1640, cbSceneParam._m0[89u].z, fma(_1639, cbSceneParam._m0[89u].y, _1638 * cbSceneParam._m0[89u].x));
    float _1664 = fma(_1640, cbSceneParam._m0[90u].z, fma(_1639, cbSceneParam._m0[90u].y, _1638 * cbSceneParam._m0[90u].x));
    float _1667 = fma(_1640, cbSceneParam._m0[91u].z, fma(_1639, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1638));
    float _1682 = _940 * 0.5;
    float _1683 = _941 * 0.5;
    float _1684 = _942 * 0.5;
    float _1685 = dot(vec4(_1682, _1683, _1684, 1.0), vec4(_1616, _1619, _1622, _1625));
    float _1688 = dot(vec4(_1682, _1683, _1684, 1.0), vec4(_1615, _1618, _1621, _1624));
    float _1691 = dot(vec4(_1682, _1683, _1684, 1.0), vec4(_1614, _1617, _1620, _1623));
    float _1725;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1698 = dot(vec4(_1682, _1683, _1684, 1.0), vec4(_1305, _1309, _1312, _1315));
        float _1702 = dot(vec4(_1682, _1683, _1684, 1.0), vec4(_1307, _1310, _1313, _1316));
        float _1706 = dot(vec4(_1682, _1683, _1684, 1.0), vec4(_1308, _1311, _1314, _1317));
        float _1713 = dot(vec4(cbModelParam._m0[39u]), vec4(_1682, _1683, _1684, 1.0));
        _1725 = dot(vec3(isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0)), isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0)), isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1713) ? 0.0 : (isnan(0.0) ? _1713 : max(0.0, _1713))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1725 = 1.0;
    }
    float _1736;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1727 = dot(vec4(cbModelParam._m0[40u]), vec4(_1682, _1683, _1684, 1.0));
        _1736 = dot(vec3(isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0)), isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0)), isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1727) ? 0.0 : (isnan(0.0) ? _1727 : max(0.0, _1727))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1736 = 1.0;
    }
    float _1740 = (_1736 * cbModelParam._m0[1u].x) + (_1725 * (1.0 - cbModelParam._m0[1u].x));
    float _1750 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _769);
    float _1751 = isnan(_1750) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1750 : min(cbModelParam._m0[25u].z, _1750));
    float _1831;
    float _1833;
    float _1835;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1798 = fma(_1004, cbModelParam._m0[13u].z, fma(_1000, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _996)) + cbModelParam._m0[13u].w;
        float _1802 = fma(_1004, cbModelParam._m0[14u].z, fma(_1000, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _996)) + cbModelParam._m0[14u].w;
        float _1806 = fma(_1004, cbModelParam._m0[15u].z, fma(_1000, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _996)) + cbModelParam._m0[15u].w;
        float _1809 = fma(_942, cbModelParam._m0[13u].z, fma(_941, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _940));
        float _1812 = fma(_942, cbModelParam._m0[14u].z, fma(_941, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _940));
        float _1815 = fma(_942, cbModelParam._m0[15u].z, fma(_941, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _940));
        float _1843;
        if (_1809 > 0.0)
        {
            _1843 = abs((1.0 - _1798) / _1809);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1809 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1798 + 1.0) / _1809);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1843 = frontier_phi_14_12_ladder;
        }
        float _2066;
        if (_1812 > 0.0)
        {
            _2066 = abs((1.0 - _1802) / _1812);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1812 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1802 + 1.0) / _1812);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2066 = frontier_phi_23_19_ladder;
        }
        float _2323;
        if (_1815 > 0.0)
        {
            _2323 = abs((1.0 - _1806) / _1815);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1815 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1806 + 1.0) / _1815);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2323 = frontier_phi_35_30_ladder;
        }
        float _2325 = isnan(_2066) ? _1843 : (isnan(_1843) ? _2066 : min(_1843, _2066));
        float _2326 = isnan(_2323) ? _2325 : (isnan(_2325) ? _2323 : min(_2325, _2323));
        float _2330 = (_2326 * _1809) + _1798;
        float _2331 = (_2326 * _1812) + _1802;
        float _2332 = (_2326 * _1815) + _1806;
        float _2333 = _2326 * 9.9999997473787516355514526367188e-05;
        float _2335 = (-1.0) - _2333;
        float _2337 = _2333 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2332 > _2337) || ((_2332 < _2335) || ((_2331 > _2337) || ((_2331 < _2335) || ((_2330 < _2335) || (_2330 > _2337))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2460 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2332, cbModelParam._m0[9u].z, fma(_2331, cbModelParam._m0[9u].y, _2330 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2332, cbModelParam._m0[10u].z, fma(_2331, cbModelParam._m0[10u].y, _2330 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2332, cbModelParam._m0[11u].z, fma(_2331, cbModelParam._m0[11u].y, _2330 * cbModelParam._m0[11u].x))), _1751);
            frontier_phi_13_35_ladder = _2460.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2460.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2460.x * cbModelParam._m0[1u].y;
        }
        _1831 = frontier_phi_13_35_ladder_2;
        _1833 = frontier_phi_13_35_ladder_1;
        _1835 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1819 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_940, _941, _942), _1751);
        _1831 = _1819.x * cbModelParam._m0[1u].y;
        _1833 = _1819.y * cbModelParam._m0[1u].y;
        _1835 = _1819.z * cbModelParam._m0[1u].y;
    }
    float _1839 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _769);
    float _1840 = isnan(_1839) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1839 : min(cbModelParam._m0[25u].w, _1839));
    float _1929;
    float _1931;
    float _1933;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1893 = fma(_1004, cbModelParam._m0[21u].z, fma(_1000, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _996)) + cbModelParam._m0[21u].w;
        float _1897 = fma(_1004, cbModelParam._m0[22u].z, fma(_1000, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _996)) + cbModelParam._m0[22u].w;
        float _1901 = fma(_1004, cbModelParam._m0[23u].z, fma(_1000, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _996)) + cbModelParam._m0[23u].w;
        float _1904 = fma(_942, cbModelParam._m0[21u].z, fma(_941, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _940));
        float _1907 = fma(_942, cbModelParam._m0[22u].z, fma(_941, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _940));
        float _1910 = fma(_942, cbModelParam._m0[23u].z, fma(_941, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _940));
        float _2071;
        if (_1904 > 0.0)
        {
            _2071 = abs((1.0 - _1893) / _1904);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1904 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1893 + 1.0) / _1904);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2071 = frontier_phi_25_21_ladder;
        }
        float _2350;
        if (_1907 > 0.0)
        {
            _2350 = abs((1.0 - _1897) / _1907);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1907 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1897 + 1.0) / _1907);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2350 = frontier_phi_37_32_ladder;
        }
        float _2563;
        if (_1910 > 0.0)
        {
            _2563 = abs((1.0 - _1901) / _1910);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1910 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1901 + 1.0) / _1910);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2563 = frontier_phi_46_43_ladder;
        }
        float _2565 = isnan(_2350) ? _2071 : (isnan(_2071) ? _2350 : min(_2071, _2350));
        float _2566 = isnan(_2563) ? _2565 : (isnan(_2565) ? _2563 : min(_2565, _2563));
        float _2570 = (_2566 * _1904) + _1893;
        float _2571 = (_2566 * _1907) + _1897;
        float _2572 = (_2566 * _1910) + _1901;
        float _2573 = _2566 * 9.9999997473787516355514526367188e-05;
        float _2574 = (-1.0) - _2573;
        float _2576 = _2573 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2572 > _2576) || ((_2572 < _2574) || ((_2571 > _2576) || ((_2571 < _2574) || ((_2570 < _2574) || (_2570 > _2576))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2771 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2572, cbModelParam._m0[17u].z, fma(_2571, cbModelParam._m0[17u].y, _2570 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2572, cbModelParam._m0[18u].z, fma(_2571, cbModelParam._m0[18u].y, _2570 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2572, cbModelParam._m0[19u].z, fma(_2571, cbModelParam._m0[19u].y, _2570 * cbModelParam._m0[19u].x))), _1840);
            frontier_phi_22_46_ladder = _2771.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2771.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2771.x * cbModelParam._m0[1u].z;
        }
        _1929 = frontier_phi_22_46_ladder_2;
        _1931 = frontier_phi_22_46_ladder_1;
        _1933 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1913 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_940, _941, _942), _1840);
        _1929 = _1913.x * cbModelParam._m0[1u].z;
        _1931 = _1913.y * cbModelParam._m0[1u].z;
        _1933 = _1913.z * cbModelParam._m0[1u].z;
    }
    float _1946 = (((_967 * _916) + _968) * _932) * ((cbModelParam._m0[1u].w * (_1929 - _1831)) + _1831);
    float _1948 = (((_967 * _918) + _968) * _932) * ((cbModelParam._m0[1u].w * (_1931 - _1833)) + _1833);
    float _1950 = (((_967 * _919) + _968) * _932) * ((cbModelParam._m0[1u].w * (_1933 - _1835)) + _1835);
    float _1953 = fma(_1950, cbSceneParam._m0[89u].z, fma(_1948, cbSceneParam._m0[89u].y, _1946 * cbSceneParam._m0[89u].x));
    float _1956 = fma(_1950, cbSceneParam._m0[90u].z, fma(_1948, cbSceneParam._m0[90u].y, _1946 * cbSceneParam._m0[90u].x));
    float _1959 = fma(_1950, cbSceneParam._m0[91u].z, fma(_1948, cbSceneParam._m0[91u].y, _1946 * cbSceneParam._m0[91u].x));
    vec4 _1967 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_854, _855));
    float _1969 = _1967.w;
    float _1981 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1969);
    float _1982 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1969);
    float _1983 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1969);
    uvec4 _1987 = floatBitsToUint(cbInstanceData._m0[_268 + 5u]);
    uint _1989 = _1987.x * 14u;
    uint _1990 = _1989 + 13u;
    float _1997 = _932 + (-1.0);
    float _2002 = (cbLight._m0[_1990].x * _1997) + 1.0;
    float _2003 = (cbLight._m0[_1990].y * _1997) + 1.0;
    float _2004 = (cbLight._m0[_1990].z * _1997) + 1.0;
    float _2005 = (cbLight._m0[_1990].w * _1997) + 1.0;
    uint _2006 = _1989 + 5u;
    float _2012 = isnan(1.0) ? _2003 : (isnan(_2003) ? 1.0 : min(_2003, 1.0));
    uint _2016 = _1989 + 4u;
    float _2025 = isnan(1.0) ? _2002 : (isnan(_2002) ? 1.0 : min(_2002, 1.0));
    uint _2029 = _1989 | 1u;
    float _2040 = dot(vec3(cbLight._m0[_1989].xyz), vec3(_766, _767, _768));
    float _2043 = dot(vec3(cbLight._m0[_2029].xyz), vec3(_766, _767, _768));
    float _4210 = isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0));
    float _4221 = isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0));
    float _2048 = (isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0))) * 0.3183098733425140380859375;
    float _2050 = (isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0))) * 0.3183098733425140380859375;
    float _2057 = ((cbLight._m0[_2006].x * _2012) * _2050) + (((cbLight._m0[_2016].x * _1981) * _2025) * _2048);
    float _2058 = ((_2012 * cbLight._m0[_2006].y) * _2050) + (((cbLight._m0[_2016].y * _1982) * _2025) * _2048);
    float _2059 = ((_2012 * cbLight._m0[_2006].z) * _2050) + (((cbLight._m0[_2016].z * _1983) * _2025) * _2048);
    uvec4 _2063 = floatBitsToUint(cbLight._m0[_1989 + 12u]);
    bool _2065 = _2063.x == 0u;
    float _2076;
    float _2078;
    float _2080;
    if (_2065)
    {
        _2076 = _2057;
        _2078 = _2058;
        _2080 = _2059;
    }
    else
    {
        uint _2084 = _1989 + 6u;
        float _2100 = (dot(vec3(cbLight._m0[_1989 + 2u].xyz), vec3(_766, _767, _768)) * 0.5) + 0.5;
        float _2101 = _2100 * _2100;
        float _4232 = isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0));
        float _2102 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
        float _2103 = isnan(1.0) ? _2004 : (isnan(_2004) ? 1.0 : min(_2004, 1.0));
        _2076 = (((cbLight._m0[_2084].x * 0.3183098733425140380859375) * _2102) * _2103) + _2057;
        _2078 = (((cbLight._m0[_2084].y * 0.3183098733425140380859375) * _2102) * _2103) + _2058;
        _2080 = (((cbLight._m0[_2084].z * 0.3183098733425140380859375) * _2102) * _2103) + _2059;
    }
    bool _2083 = _2063.y == 0u;
    float _2121;
    float _2123;
    float _2125;
    if (_2083)
    {
        _2121 = _2076;
        _2123 = _2078;
        _2125 = _2080;
    }
    else
    {
        uint _2294 = _1989 + 7u;
        float _2310 = (dot(vec3(cbLight._m0[_1989 + 3u].xyz), vec3(_766, _767, _768)) * 0.5) + 0.5;
        float _2311 = _2310 * _2310;
        float _4248 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
        float _2312 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
        float _2313 = isnan(1.0) ? _2005 : (isnan(_2005) ? 1.0 : min(_2005, 1.0));
        _2121 = (((cbLight._m0[_2294].x * 0.3183098733425140380859375) * _2312) * _2313) + _2076;
        _2123 = (((cbLight._m0[_2294].y * 0.3183098733425140380859375) * _2312) * _2313) + _2078;
        _2125 = (((cbLight._m0[_2294].z * 0.3183098733425140380859375) * _2312) * _2313) + _2080;
    }
    uint _2128 = _1989 + 8u;
    float _2141 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1989].w)) * _769) * 0.949999988079071044921875);
    float _2142 = _2141 * _2141;
    float _2143 = cbLight._m0[_1989].x + _846;
    float _2144 = cbLight._m0[_1989].y + _847;
    float _2145 = cbLight._m0[_1989].z + _848;
    float _2149 = inversesqrt(dot(vec3(_2143, _2144, _2145), vec3(_2143, _2144, _2145)));
    float _2150 = _2149 * _2143;
    float _2151 = _2149 * _2144;
    float _2152 = _2149 * _2145;
    float _2153 = dot(vec3(_766, _767, _768), vec3(cbLight._m0[_1989].xyz));
    float _4264 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
    float _2156 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
    float _4275 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
    float _2157 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
    float _2158 = dot(vec3(_766, _767, _768), vec3(_2150, _2151, _2152));
    float _4286 = isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0));
    float _2161 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
    float _2162 = dot(vec3(cbLight._m0[_1989].xyz), vec3(_2150, _2151, _2152));
    float _4297 = isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0));
    float _2166 = _2142 * _2142;
    float _2170 = ((_2161 * _2161) * (_2166 + (-1.0))) + 1.0;
    float _2178 = exp2(log2(1.0 - (isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0)))) * 5.0);
    float _2179 = 0.959999978542327880859375 - _913;
    float _2181 = 0.959999978542327880859375 - _914;
    float _2182 = 0.959999978542327880859375 - _915;
    float _2189 = 1.0 - _2142;
    float _2200 = (0.5 / (((_2157 * ((_2156 * _2189) + _2142)) + 9.9999999392252902907785028219223e-09) + (((_2157 * _2189) + _2142) * _2156))) * _2156;
    float _4308 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
    float _2202 = (isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0))) * (_2166 / ((_2170 * _2170) * 3.141590118408203125));
    uint _2216 = _1989 + 9u;
    float _2227 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2029].w)) * _769) * 0.949999988079071044921875);
    float _2228 = _2227 * _2227;
    float _2229 = cbLight._m0[_2029].x + _846;
    float _2230 = cbLight._m0[_2029].y + _847;
    float _2231 = cbLight._m0[_2029].z + _848;
    float _2235 = inversesqrt(dot(vec3(_2229, _2230, _2231), vec3(_2229, _2230, _2231)));
    float _2236 = _2235 * _2229;
    float _2237 = _2235 * _2230;
    float _2238 = _2235 * _2231;
    float _2239 = dot(vec3(_766, _767, _768), vec3(cbLight._m0[_2029].xyz));
    float _4319 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
    float _2242 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
    float _2243 = dot(vec3(_766, _767, _768), vec3(_2236, _2237, _2238));
    float _4330 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
    float _2246 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
    float _2247 = dot(vec3(cbLight._m0[_2029].xyz), vec3(_2236, _2237, _2238));
    float _4341 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
    float _2251 = _2228 * _2228;
    float _2255 = ((_2246 * _2246) * (_2251 + (-1.0))) + 1.0;
    float _2262 = exp2(log2(1.0 - (isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0)))) * 5.0);
    float _2269 = 1.0 - _2228;
    float _2279 = (0.5 / (((_2157 * ((_2242 * _2269) + _2228)) + 9.9999999392252902907785028219223e-09) + (((_2157 * _2269) + _2228) * _2242))) * _2242;
    float _4352 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
    float _2281 = (isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0))) * (_2251 / ((_2255 * _2255) * 3.141590118408203125));
    float _2291 = (((((_2262 * _2179) + _916) * cbLight._m0[_2216].x) * _2281) * _2012) + ((((cbLight._m0[_2128].x * _1981) * ((_2178 * _2179) + _916)) * _2202) * _2025);
    float _2292 = (((((_2262 * _2181) + _918) * cbLight._m0[_2216].y) * _2281) * _2012) + ((((cbLight._m0[_2128].y * _1982) * ((_2178 * _2181) + _918)) * _2202) * _2025);
    float _2293 = (((((_2262 * _2182) + _919) * cbLight._m0[_2216].z) * _2281) * _2012) + ((((cbLight._m0[_2128].z * _1983) * ((_2178 * _2182) + _919)) * _2202) * _2025);
    float _2355;
    float _2357;
    float _2359;
    if (_2065)
    {
        _2355 = _2291;
        _2357 = _2292;
        _2359 = _2293;
    }
    else
    {
        uint _2361 = _1989 + 2u;
        uint _2365 = _1989 + 10u;
        float _2379 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2361].w)) * _769) * 0.949999988079071044921875);
        float _2380 = _2379 * _2379;
        float _2381 = cbLight._m0[_2361].x + _846;
        float _2382 = cbLight._m0[_2361].y + _847;
        float _2383 = cbLight._m0[_2361].z + _848;
        float _2387 = inversesqrt(dot(vec3(_2381, _2382, _2383), vec3(_2381, _2382, _2383)));
        float _2388 = _2387 * _2381;
        float _2389 = _2387 * _2382;
        float _2390 = _2387 * _2383;
        float _2391 = dot(vec3(_766, _767, _768), vec3(cbLight._m0[_2361].xyz));
        float _4363 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
        float _2394 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
        float _2395 = dot(vec3(_766, _767, _768), vec3(_2388, _2389, _2390));
        float _4374 = isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : max(_2395, 0.0));
        float _2398 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
        float _2399 = dot(vec3(cbLight._m0[_2361].xyz), vec3(_2388, _2389, _2390));
        float _4385 = isnan(0.0) ? _2399 : (isnan(_2399) ? 0.0 : max(_2399, 0.0));
        float _2403 = _2380 * _2380;
        float _2407 = ((_2398 * _2398) * (_2403 + (-1.0))) + 1.0;
        float _2414 = exp2(log2(1.0 - (isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0)))) * 5.0);
        float _2421 = 1.0 - _2380;
        float _2431 = (0.5 / (((_2157 * ((_2394 * _2421) + _2380)) + 9.9999999392252902907785028219223e-09) + (((_2157 * _2421) + _2380) * _2394))) * _2394;
        float _4396 = isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0));
        float _2433 = (isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0))) * (_2403 / ((_2407 * _2407) * 3.141590118408203125));
        float _2434 = isnan(1.0) ? _2004 : (isnan(_2004) ? 1.0 : min(_2004, 1.0));
        _2355 = (((((_2414 * _2179) + _916) * cbLight._m0[_2365].x) * _2433) * _2434) + _2291;
        _2357 = (((((_2414 * _2181) + _918) * cbLight._m0[_2365].y) * _2433) * _2434) + _2292;
        _2359 = (((((_2414 * _2182) + _919) * cbLight._m0[_2365].z) * _2433) * _2434) + _2293;
    }
    float _2469;
    float _2471;
    float _2473;
    if (_2083)
    {
        _2469 = _2355;
        _2471 = _2357;
        _2473 = _2359;
    }
    else
    {
        uint _2480 = _1989 + 3u;
        uint _2484 = _1989 + 11u;
        float _2498 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2480].w)) * _769) * 0.949999988079071044921875);
        float _2499 = _2498 * _2498;
        float _2500 = cbLight._m0[_2480].x + _846;
        float _2501 = cbLight._m0[_2480].y + _847;
        float _2502 = cbLight._m0[_2480].z + _848;
        float _2506 = inversesqrt(dot(vec3(_2500, _2501, _2502), vec3(_2500, _2501, _2502)));
        float _2507 = _2506 * _2500;
        float _2508 = _2506 * _2501;
        float _2509 = _2506 * _2502;
        float _2510 = dot(vec3(_766, _767, _768), vec3(cbLight._m0[_2480].xyz));
        float _4412 = isnan(0.0) ? _2510 : (isnan(_2510) ? 0.0 : max(_2510, 0.0));
        float _2513 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
        float _2514 = dot(vec3(_766, _767, _768), vec3(_2507, _2508, _2509));
        float _4423 = isnan(0.0) ? _2514 : (isnan(_2514) ? 0.0 : max(_2514, 0.0));
        float _2517 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
        float _2518 = dot(vec3(cbLight._m0[_2480].xyz), vec3(_2507, _2508, _2509));
        float _4434 = isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0));
        float _2522 = _2499 * _2499;
        float _2526 = ((_2517 * _2517) * (_2522 + (-1.0))) + 1.0;
        float _2533 = exp2(log2(1.0 - (isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0)))) * 5.0);
        float _2540 = 1.0 - _2499;
        float _2550 = (0.5 / (((_2157 * ((_2513 * _2540) + _2499)) + 9.9999999392252902907785028219223e-09) + (((_2157 * _2540) + _2499) * _2513))) * _2513;
        float _4445 = isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : max(_2550, 0.0));
        float _2552 = (isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0))) * (_2522 / ((_2526 * _2526) * 3.141590118408203125));
        float _2553 = isnan(1.0) ? _2005 : (isnan(_2005) ? 1.0 : min(_2005, 1.0));
        _2469 = (((((_2533 * _2179) + _916) * cbLight._m0[_2484].x) * _2552) * _2553) + _2355;
        _2471 = (((((_2533 * _2181) + _918) * cbLight._m0[_2484].y) * _2552) * _2553) + _2357;
        _2473 = (((((_2533 * _2182) + _919) * cbLight._m0[_2484].z) * _2552) * _2553) + _2359;
    }
    float _2688;
    float _2690;
    float _2692;
    float _2694;
    float _2696;
    float _2698;
    if (_1987.y == 0u)
    {
        float _2628 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2629 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2628;
        float _2630 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2628;
        float _2631 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2628;
        uvec4 _2643 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2644 = _2643.x;
        uint _2655 = uint((float(_2643.y) * floor(float(uint(cbSceneParam._m0[85u].y * _855) / _2644))) + floor(float(uint(cbSceneParam._m0[85u].x * _854) / _2644)));
        float _2665 = (log2(_2631 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2666 = isnan(0.0) ? _2665 : (isnan(_2665) ? 0.0 : max(_2665, 0.0));
        uint _2669 = uint(isnan(14.0) ? _2666 : (isnan(_2666) ? 14.0 : min(_2666, 14.0)));
        uvec4 _2674 = texelFetch(g_lightClusterGridBuffer, int(((_2669 << 2u) + (_2655 << 6u)) >> 2u));
        uint _2675 = _2674.x;
        uint _2676 = _2643.z;
        float _2776;
        float _2778;
        float _2780;
        float _2782;
        float _2784;
        float _2786;
        if (((((1u << ((_2676 >> 4u) & 15u)) + 4294967295u) & _2675) == 0u) || ((_2676 & 240u) == 0u))
        {
            _2776 = 0.0;
            _2778 = 0.0;
            _2780 = 0.0;
            _2782 = 0.0;
            _2784 = 0.0;
            _2786 = 0.0;
        }
        else
        {
            float _2777;
            float _2779;
            float _2781;
            float _2783;
            float _2785;
            float _2787;
            float _2921 = 0.0;
            float _2922 = 0.0;
            float _2923 = 0.0;
            float _2924 = 0.0;
            float _2925 = 0.0;
            float _2926 = 0.0;
            uint _2927 = 0u;
            uint _2936;
            bool _2937;
            for (;;)
            {
                _2936 = texelFetch(g_lightClassification, int((((_2669 << 5u) + (_2655 << 9u)) + (_2927 << 2u)) >> 2u)).x;
                _2937 = _2936 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2937)
                {
                    frontier_phi_61_pred = _2921;
                    frontier_phi_61_pred_1 = _2926;
                    frontier_phi_61_pred_2 = _2925;
                    frontier_phi_61_pred_3 = _2924;
                    frontier_phi_61_pred_4 = _2923;
                    frontier_phi_61_pred_5 = _2922;
                }
                else
                {
                    float _3045;
                    float _3046;
                    float _3047;
                    float _3048;
                    float _3049;
                    float _3050;
                    uint _3051;
                    _3045 = _2921;
                    _3046 = _2922;
                    _3047 = _2923;
                    _3048 = _2924;
                    _3049 = _2925;
                    _3050 = _2926;
                    _3051 = _2936;
                    float _2977;
                    float _2978;
                    float _2979;
                    float _2980;
                    float _2981;
                    float _2982;
                    for (;;)
                    {
                        uint _3055 = uint(findLSB(_3051)) + (_2927 << 5u);
                        uint _3052 = (_3051 + 4294967295u) & _3051;
                        uint _3057 = _3055 * 48u;
                        vec4 _3071 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3057)).x, texelFetch(g_PointLightRenderingBuffer, int(_3057 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3057 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3057 + 3u)).x));
                        uint _3077 = (_3055 * 48u) + 4u;
                        vec4 _3090 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3077)).x, texelFetch(g_PointLightRenderingBuffer, int(_3077 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3077 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3077 + 3u)).x));
                        uint _3096 = (_3055 * 48u) + 8u;
                        vec3 _3107 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3096)).x, texelFetch(g_PointLightRenderingBuffer, int(_3096 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3096 + 2u)).x));
                        float _3111 = _3071.x - _2629;
                        float _3112 = _3071.y - _2630;
                        float _3113 = _3071.z - _2631;
                        float _3114 = dot(vec3(_3111, _3112, _3113), vec3(_3111, _3112, _3113));
                        float _3117 = inversesqrt(_3114);
                        float _3118 = _3117 * _3111;
                        float _3119 = _3117 * _3112;
                        float _3120 = _3117 * _3113;
                        float _3121 = dot(vec3(_873, _876, _879), vec3(_3118, _3119, _3120));
                        float _3126 = 1.0 - (_3114 * _3071.w);
                        float _4471 = isnan(0.0) ? _3126 : (isnan(_3126) ? 0.0 : max(_3126, 0.0));
                        float _3127 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
                        float _3128 = sqrt(_3114) * _3090.w;
                        float _3131 = 1.39999997615814208984375 / (_3128 + 1.39999997615814208984375);
                        float _3132 = _3131 * _3131;
                        float _3135 = ((1.0 - _3132) * _3121) + _3132;
                        float _3138 = _3128 * _3128;
                        float _3142 = ((isnan(0.0) ? _3135 : (isnan(_3135) ? 0.0 : max(_3135, 0.0))) * _3127) / ((_3138 * 0.699999988079071044921875) + 1.0);
                        float _3146 = (-0.0) - _2629;
                        float _3147 = (-0.0) - _2630;
                        float _3148 = (-0.0) - _2631;
                        float _3152 = inversesqrt(dot(vec3(_3146, _3147, _3148), vec3(_3146, _3147, _3148)));
                        float _3153 = _3152 * _3146;
                        float _3154 = _3152 * _3147;
                        float _3155 = _3152 * _3148;
                        float _3163 = exp2(log2(1.0 / ((_3138 * 3.5) + 5.0)) * 0.25);
                        float _3164 = 1.0 - _948;
                        float _3171 = sqrt(1.0 - ((1.0 - (_3164 * _3164)) * (1.0 - (_3163 * _3163))));
                        float _3172 = _3171 * _3171;
                        float _3173 = _3172 * _3172;
                        float _3174 = _3153 + _3118;
                        float _3175 = _3154 + _3119;
                        float _3176 = _3155 + _3120;
                        float _3180 = inversesqrt(dot(vec3(_3174, _3175, _3176), vec3(_3174, _3175, _3176)));
                        float _3184 = dot(vec3(_873, _876, _879), vec3(_3153, _3154, _3155));
                        float _4487 = isnan(0.0) ? _3184 : (isnan(_3184) ? 0.0 : max(_3184, 0.0));
                        float _3187 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
                        float _3188 = dot(vec3(_873, _876, _879), vec3(_3180 * _3174, _3180 * _3175, _3180 * _3176));
                        float _4498 = isnan(0.0) ? _3188 : (isnan(_3188) ? 0.0 : max(_3188, 0.0));
                        float _3191 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
                        float _3195 = ((_3191 * _3191) * (_3173 + (-1.0))) + 1.0;
                        float _3196 = _3131 * _3172;
                        float _3197 = _3196 * _3196;
                        float _3200 = ((1.0 - _3197) * _3121) + _3197;
                        float _4509 = isnan(0.0) ? _3200 : (isnan(_3200) ? 0.0 : max(_3200, 0.0));
                        float _3201 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
                        float _3202 = 1.0 - _3172;
                        float _3212 = (0.5 / (((_3201 * ((_3187 * _3202) + _3172)) + 9.9999999392252902907785028219223e-09) + (((_3201 * _3202) + _3172) * _3187))) * _3201;
                        float _4520 = isnan(0.0) ? _3212 : (isnan(_3212) ? 0.0 : max(_3212, 0.0));
                        float _3223 = (((_3173 * 3.1415927410125732421875) * (isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0)))) / ((_3195 * _3195) * ((_3138 * 2.1991131305694580078125) + 3.141590118408203125))) * _3127;
                        _2980 = (_3142 * _3090.x) + _3048;
                        _2981 = (_3142 * _3090.y) + _3049;
                        _2982 = (_3142 * _3090.z) + _3050;
                        _2977 = (_3223 * _3107.x) + _3045;
                        _2978 = (_3223 * _3107.y) + _3046;
                        _2979 = (_3223 * _3107.z) + _3047;
                        if (_3052 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3045 = _2977;
                            _3046 = _2978;
                            _3047 = _2979;
                            _3048 = _2980;
                            _3049 = _2981;
                            _3050 = _2982;
                            _3051 = _3052;
                        }
                    }
                    frontier_phi_61_pred = _2977;
                    frontier_phi_61_pred_1 = _2982;
                    frontier_phi_61_pred_2 = _2981;
                    frontier_phi_61_pred_3 = _2980;
                    frontier_phi_61_pred_4 = _2979;
                    frontier_phi_61_pred_5 = _2978;
                }
                _2777 = frontier_phi_61_pred;
                _2787 = frontier_phi_61_pred_1;
                _2785 = frontier_phi_61_pred_2;
                _2783 = frontier_phi_61_pred_3;
                _2781 = frontier_phi_61_pred_4;
                _2779 = frontier_phi_61_pred_5;
                uint _2928 = _2927 + 1u;
                if (_2928 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2921 = _2777;
                    _2922 = _2779;
                    _2923 = _2781;
                    _2924 = _2783;
                    _2925 = _2785;
                    _2926 = _2787;
                    _2927 = _2928;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2776 = _2777;
            _2778 = _2779;
            _2780 = _2781;
            _2782 = _2783;
            _2784 = _2785;
            _2786 = _2787;
        }
        uvec4 _2790 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2791 = _2790.z;
        uint _2793 = (_2791 >> 8u) & 15u;
        float _2889;
        float _2891;
        float _2893;
        float _2895;
        float _2897;
        float _2899;
        if (((4294967295u << _2793) & _2675) == 0u)
        {
            _2889 = _2776;
            _2891 = _2778;
            _2893 = _2780;
            _2895 = _2782;
            _2897 = _2784;
            _2899 = _2786;
        }
        else
        {
            float _2914 = inversesqrt(dot(vec3(_2629, _2630, _2631), vec3(_2629, _2630, _2631)));
            float _2915 = _2914 * _2629;
            float _2916 = _2914 * _2630;
            float _2917 = _2914 * _2631;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2793 < ((_2791 >> 12u) & 15u))
            {
                float _2890;
                float _2892;
                float _2894;
                float _2896;
                float _2898;
                float _2900;
                float _3028 = _2776;
                float _3029 = _2778;
                float _3030 = _2780;
                float _3031 = _2782;
                float _3032 = _2784;
                float _3033 = _2786;
                uint _3034 = _2793;
                uint _3043;
                bool _3044;
                for (;;)
                {
                    _3043 = texelFetch(g_lightClassification, int((((_2669 << 5u) + (_2655 << 9u)) + (_3034 << 2u)) >> 2u)).x;
                    _3044 = _3043 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3044)
                    {
                        frontier_phi_67_pred = _3031;
                        frontier_phi_67_pred_1 = _3032;
                        frontier_phi_67_pred_2 = _3033;
                        frontier_phi_67_pred_3 = _3030;
                        frontier_phi_67_pred_4 = _3029;
                        frontier_phi_67_pred_5 = _3028;
                    }
                    else
                    {
                        float _3228;
                        float _3229;
                        float _3230;
                        float _3231;
                        float _3232;
                        float _3233;
                        float _3521;
                        float _3522;
                        float _3523;
                        float _3524;
                        float _3525;
                        float _3526;
                        float _3241 = _3028;
                        float _3242 = _3029;
                        float _3243 = _3030;
                        float _3244 = _3031;
                        float _3245 = _3032;
                        float _3246 = _3033;
                        uint _3247 = _3043;
                        uint _3248;
                        vec4 _3273;
                        float _3274;
                        vec4 _3289;
                        vec3 _3301;
                        vec4 _3316;
                        vec4 _3331;
                        float _3377;
                        bool _3378;
                        for (;;)
                        {
                            uint _3258 = ((_3034 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3247));
                            _3248 = (_3247 + 4294967295u) & _3247;
                            uint _3260 = _3258 * 40u;
                            _3273 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3260)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3260 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3260 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3260 + 3u)).x));
                            _3274 = _3273.w;
                            uint _3276 = (_3258 * 40u) + 4u;
                            _3289 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3276)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 3u)).x));
                            uint _3291 = (_3258 * 40u) + 8u;
                            _3301 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3291)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 2u)).x));
                            uint _3303 = (_3258 * 40u) + 16u;
                            _3316 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3303)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3303 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3303 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3303 + 3u)).x));
                            uint _3318 = (_3258 * 40u) + 20u;
                            _3331 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3318)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3318 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3318 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3318 + 3u)).x));
                            uint _3333 = (_3258 * 40u) + 24u;
                            vec4 _3346 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3333)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 3u)).x));
                            uint _3352 = (_3258 * 40u) + 28u;
                            vec4 _3365 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3352)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3352 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3352 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3352 + 3u)).x));
                            _3377 = fma(_2631, _3365.z, fma(_2630, _3365.y, _3365.x * _2629)) + _3365.w;
                            _3378 = !((fma(_2631, _3346.z, fma(_2630, _3346.y, _3346.x * _2629)) + _3346.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3378)
                            {
                                float _3405 = _3273.x - _2629;
                                float _3406 = _3273.y - _2630;
                                float _3407 = _3273.z - _2631;
                                float _3408 = dot(vec3(_3405, _3406, _3407), vec3(_3405, _3406, _3407));
                                float _3411 = inversesqrt(_3408);
                                float _3412 = _3411 * _3405;
                                float _3413 = _3411 * _3406;
                                float _3414 = _3411 * _3407;
                                float _3418 = 1.0 - (_3408 / (_3274 * _3274));
                                float _4531 = isnan(0.0) ? _3418 : (isnan(_3418) ? 0.0 : max(_3418, 0.0));
                                float _3419 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
                                float _3423 = sqrt(_3408) * _3289.w;
                                float _3425 = 1.39999997615814208984375 / (_3423 + 1.39999997615814208984375);
                                float _3426 = _3425 * _3425;
                                float _3429 = ((1.0 - _3426) * dot(vec3(_3412, _3413, _3414), vec3(_873, _876, _879))) + _3426;
                                float _3432 = _3423 * _3423;
                                float _3436 = (fma(_2631, _3316.z, fma(_2630, _3316.y, _3316.x * _2629)) + _3316.w) / _3377;
                                float _3437 = (fma(_2631, _3331.z, fma(_2630, _3331.y, _3331.x * _2629)) + _3331.w) / _3377;
                                float _3441 = 1.0 - dot(vec2(_3436, _3437), vec2(_3436, _3437));
                                float _4547 = isnan(0.0) ? _3441 : (isnan(_3441) ? 0.0 : max(_3441, 0.0));
                                float _3442 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
                                float _3443 = _3442 * (((isnan(0.0) ? _3429 : (isnan(_3429) ? 0.0 : max(_3429, 0.0))) * _3419) / ((_3432 * 0.699999988079071044921875) + 1.0));
                                float _3455 = exp2(log2(1.0 / ((_3432 * 3.5) + 5.0)) * 0.25);
                                float _3456 = 1.0 - _948;
                                float _3463 = sqrt(1.0 - ((1.0 - (_3456 * _3456)) * (1.0 - (_3455 * _3455))));
                                float _3464 = _3463 * _3463;
                                float _3465 = _3464 * _3464;
                                float _3466 = _3412 - _2915;
                                float _3467 = _3413 - _2916;
                                float _3468 = _3414 - _2917;
                                float _3472 = inversesqrt(dot(vec3(_3466, _3467, _3468), vec3(_3466, _3467, _3468)));
                                float _3476 = dot(vec3(_873, _876, _879), vec3((-0.0) - _2915, (-0.0) - _2916, (-0.0) - _2917));
                                float _4558 = isnan(0.0) ? _3476 : (isnan(_3476) ? 0.0 : max(_3476, 0.0));
                                float _3479 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
                                float _3480 = dot(vec3(_873, _876, _879), vec3(_3472 * _3466, _3472 * _3467, _3472 * _3468));
                                float _4569 = isnan(0.0) ? _3480 : (isnan(_3480) ? 0.0 : max(_3480, 0.0));
                                float _3483 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
                                float _3487 = ((_3483 * _3483) * (_3465 + (-1.0))) + 1.0;
                                float _3488 = _3425 * _3464;
                                float _3489 = _3488 * _3488;
                                float _3495 = ((1.0 - _3489) * dot(vec3(_873, _876, _879), vec3(_3412, _3413, _3414))) + _3489;
                                float _4580 = isnan(0.0) ? _3495 : (isnan(_3495) ? 0.0 : max(_3495, 0.0));
                                float _3496 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
                                float _3497 = 1.0 - _3464;
                                float _3507 = (0.5 / (((_3496 * ((_3479 * _3497) + _3464)) + 9.9999999392252902907785028219223e-09) + (((_3496 * _3497) + _3464) * _3479))) * _3496;
                                float _4591 = isnan(0.0) ? _3507 : (isnan(_3507) ? 0.0 : max(_3507, 0.0));
                                float _3517 = (_3442 * _3419) * (((_3465 * 3.1415927410125732421875) * (isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0)))) / ((_3487 * _3487) * ((_3432 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3517 * _3301.x;
                                frontier_phi_73_pred_1 = _3517 * _3301.y;
                                frontier_phi_73_pred_2 = _3443 * _3289.z;
                                frontier_phi_73_pred_3 = _3443 * _3289.y;
                                frontier_phi_73_pred_4 = _3443 * _3289.x;
                                frontier_phi_73_pred_5 = _3517 * _3301.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3521 = frontier_phi_73_pred;
                            _3522 = frontier_phi_73_pred_1;
                            _3526 = frontier_phi_73_pred_2;
                            _3525 = frontier_phi_73_pred_3;
                            _3524 = frontier_phi_73_pred_4;
                            _3523 = frontier_phi_73_pred_5;
                            _3231 = _3524 + _3244;
                            _3232 = _3525 + _3245;
                            _3233 = _3526 + _3246;
                            _3228 = _3521 + _3241;
                            _3229 = _3522 + _3242;
                            _3230 = _3523 + _3243;
                            if (_3248 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3241 = _3228;
                                _3242 = _3229;
                                _3243 = _3230;
                                _3244 = _3231;
                                _3245 = _3232;
                                _3246 = _3233;
                                _3247 = _3248;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3231;
                        frontier_phi_67_pred_1 = _3232;
                        frontier_phi_67_pred_2 = _3233;
                        frontier_phi_67_pred_3 = _3230;
                        frontier_phi_67_pred_4 = _3229;
                        frontier_phi_67_pred_5 = _3228;
                    }
                    _2896 = frontier_phi_67_pred;
                    _2898 = frontier_phi_67_pred_1;
                    _2900 = frontier_phi_67_pred_2;
                    _2894 = frontier_phi_67_pred_3;
                    _2892 = frontier_phi_67_pred_4;
                    _2890 = frontier_phi_67_pred_5;
                    uint _3035 = _3034 + 1u;
                    if (_3035 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3028 = _2890;
                        _3029 = _2892;
                        _3030 = _2894;
                        _3031 = _2896;
                        _3032 = _2898;
                        _3033 = _2900;
                        _3034 = _3035;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2898;
                frontier_phi_55_56_ladder_1 = _2900;
                frontier_phi_55_56_ladder_2 = _2896;
                frontier_phi_55_56_ladder_3 = _2894;
                frontier_phi_55_56_ladder_4 = _2892;
                frontier_phi_55_56_ladder_5 = _2890;
            }
            else
            {
                frontier_phi_55_56_ladder = _2784;
                frontier_phi_55_56_ladder_1 = _2786;
                frontier_phi_55_56_ladder_2 = _2782;
                frontier_phi_55_56_ladder_3 = _2780;
                frontier_phi_55_56_ladder_4 = _2778;
                frontier_phi_55_56_ladder_5 = _2776;
            }
            _2889 = frontier_phi_55_56_ladder_5;
            _2891 = frontier_phi_55_56_ladder_4;
            _2893 = frontier_phi_55_56_ladder_3;
            _2895 = frontier_phi_55_56_ladder_2;
            _2897 = frontier_phi_55_56_ladder;
            _2899 = frontier_phi_55_56_ladder_1;
        }
        float _2904 = isnan(1.0) ? _932 : (isnan(_932) ? 1.0 : min(_932, 1.0));
        _2688 = (_2904 * _2895) + _2121;
        _2690 = (_2904 * _2897) + _2123;
        _2692 = (_2904 * _2899) + _2125;
        _2694 = ((_2889 * _916) * _2904) + _2469;
        _2696 = ((_2891 * _918) * _2904) + _2471;
        _2698 = ((_2893 * _919) * _2904) + _2473;
    }
    else
    {
        _2688 = _2121;
        _2690 = _2123;
        _2692 = _2125;
        _2694 = _2469;
        _2696 = _2471;
        _2698 = _2473;
    }
    float _4607 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
    float _4618 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
    float _4629 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
    uint _2718 = _268 + 6u;
    float _2726 = _854 / cbSceneParam._m0[86u].x;
    float _2727 = _855 / cbSceneParam._m0[86u].y;
    vec4 _2741 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2726, _2727, (log2((isnan(cbSceneParam._m0[77u].w) ? _788 : (isnan(_788) ? cbSceneParam._m0[77u].w : min(_788, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2743 = _2741.x;
    float _2744 = _2741.y;
    float _2745 = _2741.z;
    float _2746 = _2741.w;
    float _2839;
    float _2841;
    float _2843;
    float _2845;
    if (_788 > cbSceneParam._m0[78u].w)
    {
        float _2801 = isnan(_788) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _788 : min(cbSceneParam._m0[80u].w, _788));
        float _2802 = _2801 / _788;
        float _2813 = _2802 * _839;
        float _2814 = _840 * _2802;
        float _2815 = (-0.0) - _2814;
        float _2817 = _2802 * _841;
        float _2819 = (cbSceneParam._m0[77u].w * _2815) / _2801;
        float _2820 = _2819 + cbSceneParam._m0[79u].w;
        float _2821 = cbSceneParam._m0[79u].w - _2814;
        float _2827 = sqrt(((_2813 * _2813) + (_2814 * _2814)) + (_2817 * _2817));
        float _2830 = (1.0 - (cbSceneParam._m0[77u].w / _2801)) * _2827;
        float _2835 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2837 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2990;
        if (abs((_2815 - _2819) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2990 = ((((_2820 > 0.0) ? exp2(_2835 * _2820) : (2.0 - exp2(_2837 * _2820))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2830;
        }
        else
        {
            float _2950 = 1.0 / cbSceneParam._m0[80u].x;
            float _2951 = isnan(_2821) ? _2820 : (isnan(_2820) ? _2821 : max(_2820, _2821));
            float _2952 = isnan(_2821) ? _2820 : (isnan(_2820) ? _2821 : min(_2820, _2821));
            float _2961 = isnan(0.0) ? _2951 : (isnan(_2951) ? 0.0 : min(_2951, 0.0));
            float _2962 = isnan(0.0) ? _2952 : (isnan(_2952) ? 0.0 : min(_2952, 0.0));
            _2990 = ((abs(_2827 / _2815) * cbSceneParam._m0[80u].y) * ((((_2961 - _2962) * 2.0) - ((exp2(_2835 * (isnan(0.0) ? _2951 : (isnan(_2951) ? 0.0 : max(_2951, 0.0)))) - exp2(_2835 * (isnan(0.0) ? _2952 : (isnan(_2952) ? 0.0 : max(_2952, 0.0))))) * _2950)) - ((exp2(_2837 * _2961) - exp2(_2837 * _2962)) * _2950))) + (_2830 * cbSceneParam._m0[80u].z);
        }
        vec4 _2992 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2726, _2727, 1.0), 0.0);
        float _3001 = exp2((_2990 * (-1.44269502162933349609375)) * (1.0 - _2992.w));
        float _3002 = log2(_3001);
        float _3018 = log2(_2746);
        _2839 = (exp2(_3018 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3002 * cbSceneParam._m0[78u].x)) * _2992.x) / cbSceneParam._m0[78u].x)) + _2743;
        _2841 = (exp2(_3018 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3002 * cbSceneParam._m0[78u].y)) * _2992.y) / cbSceneParam._m0[78u].y)) + _2744;
        _2843 = (exp2(_3018 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3002 * cbSceneParam._m0[78u].z)) * _2992.z) / cbSceneParam._m0[78u].z)) + _2745;
        _2845 = _3001 * _2746;
    }
    else
    {
        _2839 = _2743;
        _2841 = _2744;
        _2843 = _2745;
        _2845 = _2746;
    }
    float _2857 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2858 = _2857 == 3.0;
    float _2859 = log2(_2845);
    float _2866 = exp2(_2859 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0))) * (_2688 + ((isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0))) * _932))) + ((_2694 + ((isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0))) * _1740)) * cbPerFrame._m0[3u].x));
    float _2867 = exp2(_2859 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0))) * (_2690 + ((isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0))) * _932))) + ((_2696 + ((isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0))) * _1740)) * cbPerFrame._m0[3u].x));
    float _2868 = exp2(_2859 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0))) * (_2692 + ((isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0))) * _932))) + ((_2698 + ((isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0))) * _1740)) * cbPerFrame._m0[3u].x));
    float _2877 = (_2857 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2877 * (_2858 ? _2866 : (_2866 + (cbSceneParam._m0[72u].w * _2839)));
    SV_Target.y = _2877 * (_2858 ? _2867 : (_2867 + (cbSceneParam._m0[72u].w * _2841)));
    SV_Target.z = _2877 * (_2858 ? _2868 : (_2868 + (cbSceneParam._m0[72u].w * _2843)));
    SV_Target.w = cbInstanceData._m0[_2718].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2718].w;
}


