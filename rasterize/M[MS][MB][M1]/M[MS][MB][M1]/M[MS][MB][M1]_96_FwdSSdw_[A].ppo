#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1214;
float _3620;
float _3621;
float _3622;
float _3623;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _210 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _211 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _212 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _218 = inversesqrt(dot(vec3(_210, _211, _212), vec3(_210, _211, _212)));
    float _219 = _218 * _210;
    float _220 = _218 * _211;
    float _221 = _218 * _212;
    float _225 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _226 = _225 * NORMAL.x;
    float _227 = _225 * NORMAL.y;
    float _228 = _225 * NORMAL.z;
    float _232 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _233 = _232 * TANGENT.x;
    float _234 = _232 * TANGENT.y;
    float _235 = _232 * TANGENT.z;
    uint _238 = uint(roundEven(NORMAL.w)) * 13u;
    uint _244 = _238 + 1u;
    uint _248 = _238 + 2u;
    float _257 = sqrt(((cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x) + (cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x)) + (cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x));
    float _258 = _257 * TEXCOORD.z;
    float _259 = _257 * TEXCOORD.w;
    vec4 _279 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _285 = _279.x * cbMtdParam._m0[11u].x;
    float _286 = _279.y * cbMtdParam._m0[11u].y;
    float _287 = _279.z * cbMtdParam._m0[11u].z;
    vec4 _306 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _258) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _259) + cbTextureTilingScale._m0[5u].w));
    vec4 _344 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _346 = _344.x;
    float _358 = dot(vec4(_346, _344.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _375 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_346 - _358) * cbMtdParam._m0[24u].y) + _358) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3632 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _376 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
    float _383 = (_376 * ((_306.x * cbMtdParam._m0[12u].x) - _285)) + _285;
    float _384 = (_376 * ((_306.y * cbMtdParam._m0[12u].y) - _286)) + _286;
    float _385 = (_376 * ((_306.z * cbMtdParam._m0[12u].z) - _287)) + _287;
    vec4 _403 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _258) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _259) + cbTextureTilingScale._m0[4u].w));
    vec4 _420 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _422 = _420.x;
    float _423 = _420.y;
    float _424 = _420.z;
    float _433 = ((_403.z - _424) * _376) + _424;
    float _436 = ((((_403.x - _422) * _376) + _422) * 2.0) + (-1.0);
    float _438 = ((((_403.y - _423) * _376) + _423) * 2.0) + (-1.0);
    float _439 = dot(vec2(_436, _438), vec2(_436, _438));
    float _3643 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _444 = sqrt(1.0 - (isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0))));
    float _447 = fma(_444, _226, fma(_438, _233, _436 * _219));
    float _450 = fma(_444, _227, fma(_438, _234, _436 * _220));
    float _453 = fma(_444, _228, fma(_438, _235, _436 * _221));
    float _457 = inversesqrt(dot(vec3(_447, _450, _453), vec3(_447, _450, _453)));
    vec4 _473 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _499 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _258) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _259) + cbTextureTilingScale._m0[11u].w));
    float _501 = _499.x;
    float _502 = 1.0 - _501;
    float _508 = (cbMtdParam._m0[19u].x + dot(vec4(_457 * _447, _457 * _450, _457 * _453, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_501 - _502) * cbMtdParam._m0[24u].z) + _502) * cbMtdParam._m0[21u].z);
    float _3654 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _509 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
    float _516 = (_509 * (cbMtdParam._m0[17u].x - _383)) + _383;
    float _517 = (_509 * (cbMtdParam._m0[17u].y - _384)) + _384;
    float _518 = (_509 * (cbMtdParam._m0[17u].z - _385)) + _385;
    vec4 _530 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _544 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _546 = _544.x;
    float _564 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _258) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _259) + cbTextureTilingScale._m0[9u].w)).x - _546) * _376) + _546;
    float _568 = ((_530.x - _564) * cbMtdParam._m0[19u].z) + _564;
    float _570 = _568 - (_568 * _509);
    vec4 _583 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _258) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _259) + cbTextureTilingScale._m0[15u].w));
    float _590 = (_583.x * 2.0) + (-1.0);
    float _591 = (_583.y * 2.0) + (-1.0);
    float _592 = dot(vec2(_590, _591), vec2(_590, _591));
    float _3665 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _600 = ((_583.z - _433) * _509) + _433;
    float _610 = ((sqrt(1.0 - (isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0)))) - _444) * _509) + _444;
    float _613 = (((_590 - _436) * _509) + _436) + (cbMtdParam._m0[21u].x * _436);
    float _614 = (((_591 - _438) * _509) + _438) + (cbMtdParam._m0[21u].x * _438);
    float _619 = cbMtdParam._m0[22u].x + _473.w;
    float _622 = fma(_610, _226, fma(_614, _233, _613 * _219));
    float _625 = fma(_610, _227, fma(_614, _234, _613 * _220));
    float _628 = fma(_610, _228, fma(_614, _235, _613 * _221));
    float _632 = inversesqrt(dot(vec3(_622, _625, _628), vec3(_622, _625, _628)));
    float _633 = _632 * _622;
    float _634 = _632 * _625;
    float _635 = _632 * _628;
    float _3676 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _636 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
    float _3687 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _3698 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _3709 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _3720 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _3731 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
    float _641 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
    float _655 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _696 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _706 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _696);
    float _707 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _696);
    float _708 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _696);
    float _712 = inversesqrt(dot(vec3(_706, _707, _708), vec3(_706, _707, _708)));
    float _713 = _706 * _712;
    float _714 = _707 * _712;
    float _715 = _708 * _712;
    vec4 _720 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _722 = _720.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _894 = sqrt(((_706 * _706) + (_707 * _707)) + (_708 * _708));
        float _900 = (cbMatDynParam._m0[5u].x * _894) + cbMatDynParam._m0[5u].y;
        float _3742 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
        float _901 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
        float _905 = (cbMatDynParam._m0[5u].z * _894) + cbMatDynParam._m0[5u].w;
        float _3753 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0))) - _901)) + _901) < ((_722 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _733 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _734 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _752 = fma(_635, cbSceneParam._m0[5u].z, fma(_634, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _633));
    float _755 = fma(_635, cbSceneParam._m0[6u].z, fma(_634, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _633));
    float _758 = fma(_635, cbSceneParam._m0[7u].z, fma(_634, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _633));
    uint _771 = _238 + 9u;
    uint _772 = _771 + uint(cbMatDynParam._m0[0u].w);
    float _778 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0)))) * cbInstanceData._m0[_772].x;
    float _779 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0)))) * cbInstanceData._m0[_772].y;
    float _780 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0)))) * cbInstanceData._m0[_772].z;
    float _3764 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _781 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
    float _3775 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
    float _782 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
    float _3786 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _783 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
    float _784 = 1.0 - _641;
    float _785 = _781 * _784;
    float _786 = _782 * _784;
    float _787 = _783 * _784;
    float _792 = (_781 + (-0.039999999105930328369140625)) * _641;
    float _793 = (_782 + (-0.039999999105930328369140625)) * _641;
    float _794 = (_783 + (-0.039999999105930328369140625)) * _641;
    float _795 = _792 + 0.039999999105930328369140625;
    float _797 = _793 + 0.039999999105930328369140625;
    float _798 = _794 + 0.039999999105930328369140625;
    vec4 _807 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _733, cbSceneParam._m0[86u].y * _734));
    float _811 = ((isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0))) * TEXCOORD_5.w) * _807.x;
    float _812 = dot(vec3(_633, _634, _635), vec3(_713, _714, _715));
    float _815 = _812 * 2.0;
    float _819 = (_815 * _633) - _713;
    float _820 = (_815 * _634) - _714;
    float _821 = (_815 * _635) - _715;
    float _825 = abs(dot(vec3(_713, _714, _715), vec3(_633, _634, _635)));
    float _3797 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
    float _827 = sqrt(_636);
    float _840 = exp2((_827 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_827 * 3.0));
    float _846 = (1.0 - _840) * ((_827 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _847 = _840 * _827;
    float _875 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _879 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _883 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1213;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _938 = fma(_883, cbModelParam._m0[26u].z, fma(_879, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _875));
        float _942 = fma(_883, cbModelParam._m0[27u].z, fma(_879, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _875));
        float _946 = fma(_883, cbModelParam._m0[28u].z, fma(_879, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _875));
        float _971 = _875 + _633;
        float _972 = _879 + _634;
        float _973 = _883 + _635;
        float _983 = fma(_973, cbModelParam._m0[26u].z, fma(_972, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _971)) - _938;
        float _984 = fma(_973, cbModelParam._m0[27u].z, fma(_972, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _971)) - _942;
        float _985 = fma(_973, cbModelParam._m0[28u].z, fma(_972, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _971)) - _946;
        float _989 = inversesqrt(dot(vec3(_983, _984, _985), vec3(_983, _984, _985)));
        float _1002 = ((_989 * _983) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_938 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1003 = ((_989 * _984) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_942 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1004 = ((_989 * _985) / cbModelParam._m0[34u].z) + ((((((_946 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1007 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1002, _1003, _1004), 0.0);
        vec4 _1014 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1002, _1003, _1004), 0.0);
        vec4 _1021 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1002, _1003, _1004), 0.0);
        vec4 _1028 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1002, _1003, _1004), 0.0);
        float _1041 = exp2((_1007.w + (-0.5)) * 20.0) * 2.0;
        float _1042 = _1041 * (_1007.x + (-0.5));
        float _1043 = _1041 * (_1007.y + (-0.5));
        float _1044 = _1041 * (_1007.z + (-0.5));
        float _1051 = exp2((_1014.w + (-0.5)) * 20.0) * 2.0;
        float _1052 = _1051 * (_1014.x + (-0.5));
        float _1053 = _1051 * (_1014.y + (-0.5));
        float _1054 = _1051 * (_1014.z + (-0.5));
        float _1061 = exp2((_1021.w + (-0.5)) * 20.0) * 2.0;
        float _1062 = _1061 * (_1021.x + (-0.5));
        float _1063 = _1061 * (_1021.y + (-0.5));
        float _1064 = _1061 * (_1021.z + (-0.5));
        float _1071 = exp2((_1028.w + (-0.5)) * 20.0) * 2.0;
        float _1072 = _1071 * (_1028.x + (-0.5));
        float _1073 = _1071 * (_1028.y + (-0.5));
        float _1074 = _1071 * (_1028.z + (-0.5));
        float _1075 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1076 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1077 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1078 = _1042 * 0.5;
        float _1079 = _1052 * 0.5;
        float _1080 = _1062 * 0.5;
        float _1081 = dot(vec3(_1078, _1079, _1080), vec3(_1078, _1079, _1080));
        float _1086 = (_1081 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1081);
        float _1095 = (dot(vec3(_633, _634, _635), vec3(_1086 * _1078, _1086 * _1079, _1086 * _1080)) + 1.0) * 0.5;
        float _3823 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1105 = sqrt(((_1079 * _1079) + (_1078 * _1078)) + (_1080 * _1080)) / (_1075 + 9.9999997473787516355514526367188e-06);
        float _3834 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1106 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
        float _1107 = _1106 * 2.0;
        float _1111 = (1.0 - _1106) / (_1106 + 1.0);
        float _3845 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1112 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
        float _1121 = ((((1.0 - _1112) * (_1107 + 2.0)) * exp2(log2(isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0))) * (_1107 + 1.0))) + _1112) * _1075;
        float _1122 = _1043 * 0.5;
        float _1123 = _1053 * 0.5;
        float _1124 = _1063 * 0.5;
        float _1125 = dot(vec3(_1122, _1123, _1124), vec3(_1122, _1123, _1124));
        float _1130 = (_1125 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1125);
        float _1138 = (dot(vec3(_633, _634, _635), vec3(_1130 * _1122, _1130 * _1123, _1130 * _1124)) + 1.0) * 0.5;
        float _3856 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1147 = sqrt(((_1123 * _1123) + (_1122 * _1122)) + (_1124 * _1124)) / (_1076 + 9.9999997473787516355514526367188e-06);
        float _3867 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1148 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
        float _1149 = _1148 * 2.0;
        float _1153 = (1.0 - _1148) / (_1148 + 1.0);
        float _3878 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1154 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
        float _1163 = ((((1.0 - _1154) * (_1149 + 2.0)) * exp2(log2(isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0))) * (_1149 + 1.0))) + _1154) * _1076;
        float _1164 = _1044 * 0.5;
        float _1165 = _1054 * 0.5;
        float _1166 = _1064 * 0.5;
        float _1167 = dot(vec3(_1164, _1165, _1166), vec3(_1164, _1165, _1166));
        float _1172 = (_1167 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1167);
        float _1180 = (dot(vec3(_633, _634, _635), vec3(_1172 * _1164, _1172 * _1165, _1172 * _1166)) + 1.0) * 0.5;
        float _3889 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1189 = sqrt(((_1165 * _1165) + (_1164 * _1164)) + (_1166 * _1166)) / (_1077 + 9.9999997473787516355514526367188e-06);
        float _3900 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1190 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
        float _1191 = _1190 * 2.0;
        float _1195 = (1.0 - _1190) / (_1190 + 1.0);
        float _3911 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1196 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
        float _1205 = ((((1.0 - _1196) * (_1191 + 2.0)) * exp2(log2(isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0))) * (_1191 + 1.0))) + _1196) * _1077;
        _1213 = _1044;
        _1215 = _1043;
        _1216 = _1042;
        _1217 = _1054;
        _1218 = _1053;
        _1219 = _1052;
        _1220 = _1064;
        _1221 = _1063;
        _1222 = _1062;
        _1223 = _1077;
        _1224 = _1076;
        _1225 = _1075;
        _1226 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0)));
        _1227 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0)));
        _1228 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0)));
    }
    else
    {
        _1213 = _1214;
        _1215 = _1214;
        _1216 = _1214;
        _1217 = _1214;
        _1218 = _1214;
        _1219 = _1214;
        _1220 = _1214;
        _1221 = _1214;
        _1222 = _1214;
        _1223 = _1214;
        _1224 = _1214;
        _1225 = _1214;
        _1226 = 0.0;
        _1227 = 0.0;
        _1228 = 0.0;
    }
    float _1525;
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1256 = fma(_883, cbModelParam._m0[30u].z, fma(_879, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _875));
        float _1260 = fma(_883, cbModelParam._m0[31u].z, fma(_879, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _875));
        float _1264 = fma(_883, cbModelParam._m0[32u].z, fma(_879, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _875));
        float _1287 = _875 + _633;
        float _1288 = _879 + _634;
        float _1289 = _883 + _635;
        float _1299 = fma(_1289, cbModelParam._m0[30u].z, fma(_1288, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1287)) - _1256;
        float _1300 = fma(_1289, cbModelParam._m0[31u].z, fma(_1288, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1287)) - _1260;
        float _1301 = fma(_1289, cbModelParam._m0[32u].z, fma(_1288, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1287)) - _1264;
        float _1305 = inversesqrt(dot(vec3(_1299, _1300, _1301), vec3(_1299, _1300, _1301)));
        float _1318 = ((_1305 * _1299) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1256 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1319 = ((_1305 * _1300) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1260 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1320 = ((_1305 * _1301) / cbModelParam._m0[35u].z) + ((((((_1264 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1322 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1318, _1319, _1320), 0.0);
        vec4 _1329 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1318, _1319, _1320), 0.0);
        vec4 _1336 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1318, _1319, _1320), 0.0);
        vec4 _1343 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1318, _1319, _1320), 0.0);
        float _1355 = exp2((_1322.w + (-0.5)) * 20.0) * 2.0;
        float _1356 = _1355 * (_1322.x + (-0.5));
        float _1357 = _1355 * (_1322.y + (-0.5));
        float _1358 = _1355 * (_1322.z + (-0.5));
        float _1365 = exp2((_1329.w + (-0.5)) * 20.0) * 2.0;
        float _1366 = _1365 * (_1329.x + (-0.5));
        float _1367 = _1365 * (_1329.y + (-0.5));
        float _1368 = _1365 * (_1329.z + (-0.5));
        float _1375 = exp2((_1336.w + (-0.5)) * 20.0) * 2.0;
        float _1376 = _1375 * (_1336.x + (-0.5));
        float _1377 = _1375 * (_1336.y + (-0.5));
        float _1378 = _1375 * (_1336.z + (-0.5));
        float _1385 = exp2((_1343.w + (-0.5)) * 20.0) * 2.0;
        float _1386 = _1385 * (_1343.x + (-0.5));
        float _1387 = _1385 * (_1343.y + (-0.5));
        float _1388 = _1385 * (_1343.z + (-0.5));
        float _1389 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1390 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1391 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1392 = _1356 * 0.5;
        float _1393 = _1366 * 0.5;
        float _1394 = _1376 * 0.5;
        float _1395 = dot(vec3(_1392, _1393, _1394), vec3(_1392, _1393, _1394));
        float _1400 = (_1395 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1395);
        float _1408 = (dot(vec3(_633, _634, _635), vec3(_1400 * _1392, _1400 * _1393, _1400 * _1394)) + 1.0) * 0.5;
        float _3952 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1417 = sqrt(((_1393 * _1393) + (_1392 * _1392)) + (_1394 * _1394)) / (_1389 + 9.9999997473787516355514526367188e-06);
        float _3963 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1418 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
        float _1419 = _1418 * 2.0;
        float _1423 = (1.0 - _1418) / (_1418 + 1.0);
        float _3974 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1424 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
        float _1433 = ((((1.0 - _1424) * (_1419 + 2.0)) * exp2(log2(isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0))) * (_1419 + 1.0))) + _1424) * _1389;
        float _1434 = _1357 * 0.5;
        float _1435 = _1367 * 0.5;
        float _1436 = _1377 * 0.5;
        float _1437 = dot(vec3(_1434, _1435, _1436), vec3(_1434, _1435, _1436));
        float _1442 = (_1437 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1437);
        float _1450 = (dot(vec3(_633, _634, _635), vec3(_1442 * _1434, _1442 * _1435, _1442 * _1436)) + 1.0) * 0.5;
        float _3985 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1459 = sqrt(((_1435 * _1435) + (_1434 * _1434)) + (_1436 * _1436)) / (_1390 + 9.9999997473787516355514526367188e-06);
        float _3996 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1460 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
        float _1461 = _1460 * 2.0;
        float _1465 = (1.0 - _1460) / (_1460 + 1.0);
        float _4007 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1466 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
        float _1475 = ((((1.0 - _1466) * (_1461 + 2.0)) * exp2(log2(isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0))) * (_1461 + 1.0))) + _1466) * _1390;
        float _1476 = _1358 * 0.5;
        float _1477 = _1368 * 0.5;
        float _1478 = _1378 * 0.5;
        float _1479 = dot(vec3(_1476, _1477, _1478), vec3(_1476, _1477, _1478));
        float _1484 = (_1479 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1479);
        float _1492 = (dot(vec3(_633, _634, _635), vec3(_1484 * _1476, _1484 * _1477, _1484 * _1478)) + 1.0) * 0.5;
        float _4018 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
        float _1501 = sqrt(((_1477 * _1477) + (_1476 * _1476)) + (_1478 * _1478)) / (_1391 + 9.9999997473787516355514526367188e-06);
        float _4029 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
        float _1502 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
        float _1503 = _1502 * 2.0;
        float _1507 = (1.0 - _1502) / (_1502 + 1.0);
        float _4040 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1508 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
        float _1517 = ((((1.0 - _1508) * (_1503 + 2.0)) * exp2(log2(isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0))) * (_1503 + 1.0))) + _1508) * _1391;
        _1525 = _1358;
        _1526 = _1357;
        _1527 = _1356;
        _1528 = _1368;
        _1529 = _1367;
        _1530 = _1366;
        _1531 = _1378;
        _1532 = _1377;
        _1533 = _1376;
        _1534 = _1391;
        _1535 = _1390;
        _1536 = _1389;
        _1537 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0)));
        _1538 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0)));
        _1539 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0)));
    }
    else
    {
        _1525 = _1214;
        _1526 = _1214;
        _1527 = _1214;
        _1528 = _1214;
        _1529 = _1214;
        _1530 = _1214;
        _1531 = _1214;
        _1532 = _1214;
        _1533 = _1214;
        _1534 = _1214;
        _1535 = _1214;
        _1536 = _1214;
        _1537 = 0.0;
        _1538 = 0.0;
        _1539 = 0.0;
    }
    float _1549 = (cbModelParam._m0[1u].x * (_1537 - _1226)) + _1226;
    float _1550 = (cbModelParam._m0[1u].x * (_1538 - _1227)) + _1227;
    float _1551 = (cbModelParam._m0[1u].x * (_1539 - _1228)) + _1228;
    float _1572 = fma(_1551, cbSceneParam._m0[89u].z, fma(_1550, cbSceneParam._m0[89u].y, _1549 * cbSceneParam._m0[89u].x));
    float _1575 = fma(_1551, cbSceneParam._m0[90u].z, fma(_1550, cbSceneParam._m0[90u].y, _1549 * cbSceneParam._m0[90u].x));
    float _1578 = fma(_1551, cbSceneParam._m0[91u].z, fma(_1550, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1549));
    float _1593 = _819 * 0.5;
    float _1594 = _820 * 0.5;
    float _1595 = _821 * 0.5;
    float _1596 = dot(vec4(_1593, _1594, _1595, 1.0), vec4(_1527, _1530, _1533, _1536));
    float _1599 = dot(vec4(_1593, _1594, _1595, 1.0), vec4(_1526, _1529, _1532, _1535));
    float _1602 = dot(vec4(_1593, _1594, _1595, 1.0), vec4(_1525, _1528, _1531, _1534));
    float _1636;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1609 = dot(vec4(_1593, _1594, _1595, 1.0), vec4(_1213, _1217, _1220, _1223));
        float _1613 = dot(vec4(_1593, _1594, _1595, 1.0), vec4(_1215, _1218, _1221, _1224));
        float _1617 = dot(vec4(_1593, _1594, _1595, 1.0), vec4(_1216, _1219, _1222, _1225));
        float _1624 = dot(vec4(cbModelParam._m0[39u]), vec4(_1593, _1594, _1595, 1.0));
        _1636 = dot(vec3(isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0)), isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0)), isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1624) ? 0.0 : (isnan(0.0) ? _1624 : max(0.0, _1624))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1636 = 1.0;
    }
    float _1647;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1638 = dot(vec4(cbModelParam._m0[40u]), vec4(_1593, _1594, _1595, 1.0));
        _1647 = dot(vec3(isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0)), isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0)), isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1638) ? 0.0 : (isnan(0.0) ? _1638 : max(0.0, _1638))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1647 = 1.0;
    }
    float _1651 = (_1647 * cbModelParam._m0[1u].x) + (_1636 * (1.0 - cbModelParam._m0[1u].x));
    float _1661 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _636);
    float _1662 = isnan(_1661) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1661 : min(cbModelParam._m0[25u].z, _1661));
    float _1743;
    float _1745;
    float _1747;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1710 = fma(_883, cbModelParam._m0[13u].z, fma(_879, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _875)) + cbModelParam._m0[13u].w;
        float _1714 = fma(_883, cbModelParam._m0[14u].z, fma(_879, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _875)) + cbModelParam._m0[14u].w;
        float _1718 = fma(_883, cbModelParam._m0[15u].z, fma(_879, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _875)) + cbModelParam._m0[15u].w;
        float _1721 = fma(_821, cbModelParam._m0[13u].z, fma(_820, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _819));
        float _1724 = fma(_821, cbModelParam._m0[14u].z, fma(_820, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _819));
        float _1727 = fma(_821, cbModelParam._m0[15u].z, fma(_820, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _819));
        float _1755;
        if (_1721 > 0.0)
        {
            _1755 = abs((1.0 - _1710) / _1721);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1721 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1710 + 1.0) / _1721);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1755 = frontier_phi_17_15_ladder;
        }
        float _1979;
        if (_1724 > 0.0)
        {
            _1979 = abs((1.0 - _1714) / _1724);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1724 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1714 + 1.0) / _1724);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1979 = frontier_phi_26_22_ladder;
        }
        float _2236;
        if (_1727 > 0.0)
        {
            _2236 = abs((1.0 - _1718) / _1727);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1727 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1718 + 1.0) / _1727);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2236 = frontier_phi_38_33_ladder;
        }
        float _2238 = isnan(_1979) ? _1755 : (isnan(_1755) ? _1979 : min(_1755, _1979));
        float _2239 = isnan(_2236) ? _2238 : (isnan(_2238) ? _2236 : min(_2238, _2236));
        float _2243 = (_2239 * _1721) + _1710;
        float _2244 = (_2239 * _1724) + _1714;
        float _2245 = (_2239 * _1727) + _1718;
        float _2246 = _2239 * 9.9999997473787516355514526367188e-05;
        float _2248 = (-1.0) - _2246;
        float _2250 = _2246 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2245 > _2250) || ((_2245 < _2248) || ((_2244 > _2250) || ((_2244 < _2248) || ((_2243 < _2248) || (_2243 > _2250))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2373 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2245, cbModelParam._m0[9u].z, fma(_2244, cbModelParam._m0[9u].y, _2243 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2245, cbModelParam._m0[10u].z, fma(_2244, cbModelParam._m0[10u].y, _2243 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2245, cbModelParam._m0[11u].z, fma(_2244, cbModelParam._m0[11u].y, _2243 * cbModelParam._m0[11u].x))), _1662);
            frontier_phi_16_38_ladder = _2373.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2373.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2373.x * cbModelParam._m0[1u].y;
        }
        _1743 = frontier_phi_16_38_ladder_2;
        _1745 = frontier_phi_16_38_ladder_1;
        _1747 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1731 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_819, _820, _821), _1662);
        _1743 = _1731.x * cbModelParam._m0[1u].y;
        _1745 = _1731.y * cbModelParam._m0[1u].y;
        _1747 = _1731.z * cbModelParam._m0[1u].y;
    }
    float _1751 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _636);
    float _1752 = isnan(_1751) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1751 : min(cbModelParam._m0[25u].w, _1751));
    float _1842;
    float _1844;
    float _1846;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1806 = fma(_883, cbModelParam._m0[21u].z, fma(_879, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _875)) + cbModelParam._m0[21u].w;
        float _1810 = fma(_883, cbModelParam._m0[22u].z, fma(_879, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _875)) + cbModelParam._m0[22u].w;
        float _1814 = fma(_883, cbModelParam._m0[23u].z, fma(_879, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _875)) + cbModelParam._m0[23u].w;
        float _1817 = fma(_821, cbModelParam._m0[21u].z, fma(_820, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _819));
        float _1820 = fma(_821, cbModelParam._m0[22u].z, fma(_820, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _819));
        float _1823 = fma(_821, cbModelParam._m0[23u].z, fma(_820, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _819));
        float _1984;
        if (_1817 > 0.0)
        {
            _1984 = abs((1.0 - _1806) / _1817);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1817 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1806 + 1.0) / _1817);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1984 = frontier_phi_28_24_ladder;
        }
        float _2263;
        if (_1820 > 0.0)
        {
            _2263 = abs((1.0 - _1810) / _1820);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1820 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1810 + 1.0) / _1820);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2263 = frontier_phi_40_35_ladder;
        }
        float _2476;
        if (_1823 > 0.0)
        {
            _2476 = abs((1.0 - _1814) / _1823);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1823 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1814 + 1.0) / _1823);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2476 = frontier_phi_49_46_ladder;
        }
        float _2478 = isnan(_2263) ? _1984 : (isnan(_1984) ? _2263 : min(_1984, _2263));
        float _2479 = isnan(_2476) ? _2478 : (isnan(_2478) ? _2476 : min(_2478, _2476));
        float _2483 = (_2479 * _1817) + _1806;
        float _2484 = (_2479 * _1820) + _1810;
        float _2485 = (_2479 * _1823) + _1814;
        float _2486 = _2479 * 9.9999997473787516355514526367188e-05;
        float _2487 = (-1.0) - _2486;
        float _2489 = _2486 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2485 > _2489) || ((_2485 < _2487) || ((_2484 > _2489) || ((_2484 < _2487) || ((_2483 < _2487) || (_2483 > _2489))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2684 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2485, cbModelParam._m0[17u].z, fma(_2484, cbModelParam._m0[17u].y, _2483 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2485, cbModelParam._m0[18u].z, fma(_2484, cbModelParam._m0[18u].y, _2483 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2485, cbModelParam._m0[19u].z, fma(_2484, cbModelParam._m0[19u].y, _2483 * cbModelParam._m0[19u].x))), _1752);
            frontier_phi_25_49_ladder = _2684.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2684.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2684.x * cbModelParam._m0[1u].z;
        }
        _1842 = frontier_phi_25_49_ladder_2;
        _1844 = frontier_phi_25_49_ladder_1;
        _1846 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1826 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_819, _820, _821), _1752);
        _1842 = _1826.x * cbModelParam._m0[1u].z;
        _1844 = _1826.y * cbModelParam._m0[1u].z;
        _1846 = _1826.z * cbModelParam._m0[1u].z;
    }
    float _1859 = (((_846 * _795) + _847) * _811) * ((cbModelParam._m0[1u].w * (_1842 - _1743)) + _1743);
    float _1861 = (((_846 * _797) + _847) * _811) * ((cbModelParam._m0[1u].w * (_1844 - _1745)) + _1745);
    float _1863 = (((_846 * _798) + _847) * _811) * ((cbModelParam._m0[1u].w * (_1846 - _1747)) + _1747);
    float _1866 = fma(_1863, cbSceneParam._m0[89u].z, fma(_1861, cbSceneParam._m0[89u].y, _1859 * cbSceneParam._m0[89u].x));
    float _1869 = fma(_1863, cbSceneParam._m0[90u].z, fma(_1861, cbSceneParam._m0[90u].y, _1859 * cbSceneParam._m0[90u].x));
    float _1872 = fma(_1863, cbSceneParam._m0[91u].z, fma(_1861, cbSceneParam._m0[91u].y, _1859 * cbSceneParam._m0[91u].x));
    vec4 _1880 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_733, _734));
    float _1882 = _1880.w;
    float _1894 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1882);
    float _1895 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1882);
    float _1896 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1882);
    uvec4 _1900 = floatBitsToUint(cbInstanceData._m0[_238 + 5u]);
    uint _1902 = _1900.x * 14u;
    uint _1903 = _1902 + 13u;
    float _1910 = _811 + (-1.0);
    float _1915 = (cbLight._m0[_1903].x * _1910) + 1.0;
    float _1916 = (cbLight._m0[_1903].y * _1910) + 1.0;
    float _1917 = (cbLight._m0[_1903].z * _1910) + 1.0;
    float _1918 = (cbLight._m0[_1903].w * _1910) + 1.0;
    uint _1919 = _1902 + 5u;
    float _1925 = isnan(1.0) ? _1916 : (isnan(_1916) ? 1.0 : min(_1916, 1.0));
    uint _1929 = _1902 + 4u;
    float _1938 = isnan(1.0) ? _1915 : (isnan(_1915) ? 1.0 : min(_1915, 1.0));
    uint _1942 = _1902 | 1u;
    float _1953 = dot(vec3(cbLight._m0[_1902].xyz), vec3(_633, _634, _635));
    float _1956 = dot(vec3(cbLight._m0[_1942].xyz), vec3(_633, _634, _635));
    float _4176 = isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0));
    float _4187 = isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0));
    float _1961 = (isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0))) * 0.3183098733425140380859375;
    float _1963 = (isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0))) * 0.3183098733425140380859375;
    float _1970 = ((cbLight._m0[_1919].x * _1925) * _1963) + (((cbLight._m0[_1929].x * _1894) * _1938) * _1961);
    float _1971 = ((_1925 * cbLight._m0[_1919].y) * _1963) + (((cbLight._m0[_1929].y * _1895) * _1938) * _1961);
    float _1972 = ((_1925 * cbLight._m0[_1919].z) * _1963) + (((cbLight._m0[_1929].z * _1896) * _1938) * _1961);
    uvec4 _1976 = floatBitsToUint(cbLight._m0[_1902 + 12u]);
    bool _1978 = _1976.x == 0u;
    float _1989;
    float _1991;
    float _1993;
    if (_1978)
    {
        _1989 = _1970;
        _1991 = _1971;
        _1993 = _1972;
    }
    else
    {
        uint _1997 = _1902 + 6u;
        float _2013 = (dot(vec3(cbLight._m0[_1902 + 2u].xyz), vec3(_633, _634, _635)) * 0.5) + 0.5;
        float _2014 = _2013 * _2013;
        float _4198 = isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0));
        float _2015 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
        float _2016 = isnan(1.0) ? _1917 : (isnan(_1917) ? 1.0 : min(_1917, 1.0));
        _1989 = (((cbLight._m0[_1997].x * 0.3183098733425140380859375) * _2015) * _2016) + _1970;
        _1991 = (((cbLight._m0[_1997].y * 0.3183098733425140380859375) * _2015) * _2016) + _1971;
        _1993 = (((cbLight._m0[_1997].z * 0.3183098733425140380859375) * _2015) * _2016) + _1972;
    }
    bool _1996 = _1976.y == 0u;
    float _2034;
    float _2036;
    float _2038;
    if (_1996)
    {
        _2034 = _1989;
        _2036 = _1991;
        _2038 = _1993;
    }
    else
    {
        uint _2207 = _1902 + 7u;
        float _2223 = (dot(vec3(cbLight._m0[_1902 + 3u].xyz), vec3(_633, _634, _635)) * 0.5) + 0.5;
        float _2224 = _2223 * _2223;
        float _4214 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
        float _2225 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
        float _2226 = isnan(1.0) ? _1918 : (isnan(_1918) ? 1.0 : min(_1918, 1.0));
        _2034 = (((cbLight._m0[_2207].x * 0.3183098733425140380859375) * _2225) * _2226) + _1989;
        _2036 = (((cbLight._m0[_2207].y * 0.3183098733425140380859375) * _2225) * _2226) + _1991;
        _2038 = (((cbLight._m0[_2207].z * 0.3183098733425140380859375) * _2225) * _2226) + _1993;
    }
    uint _2041 = _1902 + 8u;
    float _2054 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1902].w)) * _636) * 0.949999988079071044921875);
    float _2055 = _2054 * _2054;
    float _2056 = cbLight._m0[_1902].x + _713;
    float _2057 = cbLight._m0[_1902].y + _714;
    float _2058 = cbLight._m0[_1902].z + _715;
    float _2062 = inversesqrt(dot(vec3(_2056, _2057, _2058), vec3(_2056, _2057, _2058)));
    float _2063 = _2062 * _2056;
    float _2064 = _2062 * _2057;
    float _2065 = _2062 * _2058;
    float _2066 = dot(vec3(_633, _634, _635), vec3(cbLight._m0[_1902].xyz));
    float _4230 = isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0));
    float _2069 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
    float _4241 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
    float _2070 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
    float _2071 = dot(vec3(_633, _634, _635), vec3(_2063, _2064, _2065));
    float _4252 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
    float _2074 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
    float _2075 = dot(vec3(cbLight._m0[_1902].xyz), vec3(_2063, _2064, _2065));
    float _4263 = isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0));
    float _2079 = _2055 * _2055;
    float _2083 = ((_2074 * _2074) * (_2079 + (-1.0))) + 1.0;
    float _2091 = exp2(log2(1.0 - (isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0)))) * 5.0);
    float _2092 = 0.959999978542327880859375 - _792;
    float _2094 = 0.959999978542327880859375 - _793;
    float _2095 = 0.959999978542327880859375 - _794;
    float _2102 = 1.0 - _2055;
    float _2113 = (0.5 / (((_2070 * ((_2069 * _2102) + _2055)) + 9.9999999392252902907785028219223e-09) + (((_2070 * _2102) + _2055) * _2069))) * _2069;
    float _4274 = isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0));
    float _2115 = (isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0))) * (_2079 / ((_2083 * _2083) * 3.141590118408203125));
    uint _2129 = _1902 + 9u;
    float _2140 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1942].w)) * _636) * 0.949999988079071044921875);
    float _2141 = _2140 * _2140;
    float _2142 = cbLight._m0[_1942].x + _713;
    float _2143 = cbLight._m0[_1942].y + _714;
    float _2144 = cbLight._m0[_1942].z + _715;
    float _2148 = inversesqrt(dot(vec3(_2142, _2143, _2144), vec3(_2142, _2143, _2144)));
    float _2149 = _2148 * _2142;
    float _2150 = _2148 * _2143;
    float _2151 = _2148 * _2144;
    float _2152 = dot(vec3(_633, _634, _635), vec3(cbLight._m0[_1942].xyz));
    float _4285 = isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0));
    float _2155 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
    float _2156 = dot(vec3(_633, _634, _635), vec3(_2149, _2150, _2151));
    float _4296 = isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0));
    float _2159 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
    float _2160 = dot(vec3(cbLight._m0[_1942].xyz), vec3(_2149, _2150, _2151));
    float _4307 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
    float _2164 = _2141 * _2141;
    float _2168 = ((_2159 * _2159) * (_2164 + (-1.0))) + 1.0;
    float _2175 = exp2(log2(1.0 - (isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0)))) * 5.0);
    float _2182 = 1.0 - _2141;
    float _2192 = (0.5 / (((_2070 * ((_2155 * _2182) + _2141)) + 9.9999999392252902907785028219223e-09) + (((_2070 * _2182) + _2141) * _2155))) * _2155;
    float _4318 = isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0));
    float _2194 = (isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0))) * (_2164 / ((_2168 * _2168) * 3.141590118408203125));
    float _2204 = (((((_2175 * _2092) + _795) * cbLight._m0[_2129].x) * _2194) * _1925) + ((((cbLight._m0[_2041].x * _1894) * ((_2091 * _2092) + _795)) * _2115) * _1938);
    float _2205 = (((((_2175 * _2094) + _797) * cbLight._m0[_2129].y) * _2194) * _1925) + ((((cbLight._m0[_2041].y * _1895) * ((_2091 * _2094) + _797)) * _2115) * _1938);
    float _2206 = (((((_2175 * _2095) + _798) * cbLight._m0[_2129].z) * _2194) * _1925) + ((((cbLight._m0[_2041].z * _1896) * ((_2091 * _2095) + _798)) * _2115) * _1938);
    float _2268;
    float _2270;
    float _2272;
    if (_1978)
    {
        _2268 = _2204;
        _2270 = _2205;
        _2272 = _2206;
    }
    else
    {
        uint _2274 = _1902 + 2u;
        uint _2278 = _1902 + 10u;
        float _2292 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2274].w)) * _636) * 0.949999988079071044921875);
        float _2293 = _2292 * _2292;
        float _2294 = cbLight._m0[_2274].x + _713;
        float _2295 = cbLight._m0[_2274].y + _714;
        float _2296 = cbLight._m0[_2274].z + _715;
        float _2300 = inversesqrt(dot(vec3(_2294, _2295, _2296), vec3(_2294, _2295, _2296)));
        float _2301 = _2300 * _2294;
        float _2302 = _2300 * _2295;
        float _2303 = _2300 * _2296;
        float _2304 = dot(vec3(_633, _634, _635), vec3(cbLight._m0[_2274].xyz));
        float _4329 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
        float _2307 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
        float _2308 = dot(vec3(_633, _634, _635), vec3(_2301, _2302, _2303));
        float _4340 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
        float _2311 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
        float _2312 = dot(vec3(cbLight._m0[_2274].xyz), vec3(_2301, _2302, _2303));
        float _4351 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
        float _2316 = _2293 * _2293;
        float _2320 = ((_2311 * _2311) * (_2316 + (-1.0))) + 1.0;
        float _2327 = exp2(log2(1.0 - (isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0)))) * 5.0);
        float _2334 = 1.0 - _2293;
        float _2344 = (0.5 / (((_2070 * ((_2307 * _2334) + _2293)) + 9.9999999392252902907785028219223e-09) + (((_2070 * _2334) + _2293) * _2307))) * _2307;
        float _4362 = isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0));
        float _2346 = (isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0))) * (_2316 / ((_2320 * _2320) * 3.141590118408203125));
        float _2347 = isnan(1.0) ? _1917 : (isnan(_1917) ? 1.0 : min(_1917, 1.0));
        _2268 = (((((_2327 * _2092) + _795) * cbLight._m0[_2278].x) * _2346) * _2347) + _2204;
        _2270 = (((((_2327 * _2094) + _797) * cbLight._m0[_2278].y) * _2346) * _2347) + _2205;
        _2272 = (((((_2327 * _2095) + _798) * cbLight._m0[_2278].z) * _2346) * _2347) + _2206;
    }
    float _2382;
    float _2384;
    float _2386;
    if (_1996)
    {
        _2382 = _2268;
        _2384 = _2270;
        _2386 = _2272;
    }
    else
    {
        uint _2393 = _1902 + 3u;
        uint _2397 = _1902 + 11u;
        float _2411 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2393].w)) * _636) * 0.949999988079071044921875);
        float _2412 = _2411 * _2411;
        float _2413 = cbLight._m0[_2393].x + _713;
        float _2414 = cbLight._m0[_2393].y + _714;
        float _2415 = cbLight._m0[_2393].z + _715;
        float _2419 = inversesqrt(dot(vec3(_2413, _2414, _2415), vec3(_2413, _2414, _2415)));
        float _2420 = _2419 * _2413;
        float _2421 = _2419 * _2414;
        float _2422 = _2419 * _2415;
        float _2423 = dot(vec3(_633, _634, _635), vec3(cbLight._m0[_2393].xyz));
        float _4378 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
        float _2426 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
        float _2427 = dot(vec3(_633, _634, _635), vec3(_2420, _2421, _2422));
        float _4389 = isnan(0.0) ? _2427 : (isnan(_2427) ? 0.0 : max(_2427, 0.0));
        float _2430 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
        float _2431 = dot(vec3(cbLight._m0[_2393].xyz), vec3(_2420, _2421, _2422));
        float _4400 = isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0));
        float _2435 = _2412 * _2412;
        float _2439 = ((_2430 * _2430) * (_2435 + (-1.0))) + 1.0;
        float _2446 = exp2(log2(1.0 - (isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0)))) * 5.0);
        float _2453 = 1.0 - _2412;
        float _2463 = (0.5 / (((_2070 * ((_2426 * _2453) + _2412)) + 9.9999999392252902907785028219223e-09) + (((_2070 * _2453) + _2412) * _2426))) * _2426;
        float _4411 = isnan(0.0) ? _2463 : (isnan(_2463) ? 0.0 : max(_2463, 0.0));
        float _2465 = (isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0))) * (_2435 / ((_2439 * _2439) * 3.141590118408203125));
        float _2466 = isnan(1.0) ? _1918 : (isnan(_1918) ? 1.0 : min(_1918, 1.0));
        _2382 = (((((_2446 * _2092) + _795) * cbLight._m0[_2397].x) * _2465) * _2466) + _2268;
        _2384 = (((((_2446 * _2094) + _797) * cbLight._m0[_2397].y) * _2465) * _2466) + _2270;
        _2386 = (((((_2446 * _2095) + _798) * cbLight._m0[_2397].z) * _2465) * _2466) + _2272;
    }
    float _2601;
    float _2603;
    float _2605;
    float _2607;
    float _2609;
    float _2611;
    if (_1900.y == 0u)
    {
        float _2541 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2542 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2541;
        float _2543 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2541;
        float _2544 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2541;
        uvec4 _2556 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2557 = _2556.x;
        uint _2568 = uint((float(_2556.y) * floor(float(uint(cbSceneParam._m0[85u].y * _734) / _2557))) + floor(float(uint(cbSceneParam._m0[85u].x * _733) / _2557)));
        float _2578 = (log2(_2544 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2579 = isnan(0.0) ? _2578 : (isnan(_2578) ? 0.0 : max(_2578, 0.0));
        uint _2582 = uint(isnan(14.0) ? _2579 : (isnan(_2579) ? 14.0 : min(_2579, 14.0)));
        uvec4 _2587 = texelFetch(g_lightClusterGridBuffer, int(((_2582 << 2u) + (_2568 << 6u)) >> 2u));
        uint _2588 = _2587.x;
        uint _2589 = _2556.z;
        float _2689;
        float _2691;
        float _2693;
        float _2695;
        float _2697;
        float _2699;
        if (((((1u << ((_2589 >> 4u) & 15u)) + 4294967295u) & _2588) == 0u) || ((_2589 & 240u) == 0u))
        {
            _2689 = 0.0;
            _2691 = 0.0;
            _2693 = 0.0;
            _2695 = 0.0;
            _2697 = 0.0;
            _2699 = 0.0;
        }
        else
        {
            float _2690;
            float _2692;
            float _2694;
            float _2696;
            float _2698;
            float _2700;
            float _2842 = 0.0;
            float _2843 = 0.0;
            float _2844 = 0.0;
            float _2845 = 0.0;
            float _2846 = 0.0;
            float _2847 = 0.0;
            uint _2848 = 0u;
            uint _2857;
            bool _2858;
            for (;;)
            {
                _2857 = texelFetch(g_lightClassification, int((((_2582 << 5u) + (_2568 << 9u)) + (_2848 << 2u)) >> 2u)).x;
                _2858 = _2857 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2858)
                {
                    frontier_phi_66_pred = _2842;
                    frontier_phi_66_pred_1 = _2847;
                    frontier_phi_66_pred_2 = _2846;
                    frontier_phi_66_pred_3 = _2845;
                    frontier_phi_66_pred_4 = _2844;
                    frontier_phi_66_pred_5 = _2843;
                }
                else
                {
                    float _2987;
                    float _2988;
                    float _2989;
                    float _2990;
                    float _2991;
                    float _2992;
                    uint _2993;
                    _2987 = _2842;
                    _2988 = _2843;
                    _2989 = _2844;
                    _2990 = _2845;
                    _2991 = _2846;
                    _2992 = _2847;
                    _2993 = _2857;
                    float _2914;
                    float _2915;
                    float _2916;
                    float _2917;
                    float _2918;
                    float _2919;
                    for (;;)
                    {
                        uint _2997 = uint(findLSB(_2993)) + (_2848 << 5u);
                        uint _2994 = (_2993 + 4294967295u) & _2993;
                        uint _2999 = _2997 * 48u;
                        vec4 _3013 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2999)).x, texelFetch(g_PointLightRenderingBuffer, int(_2999 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2999 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2999 + 3u)).x));
                        uint _3019 = (_2997 * 48u) + 4u;
                        vec4 _3032 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3019)).x, texelFetch(g_PointLightRenderingBuffer, int(_3019 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3019 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3019 + 3u)).x));
                        uint _3038 = (_2997 * 48u) + 8u;
                        vec3 _3049 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3038)).x, texelFetch(g_PointLightRenderingBuffer, int(_3038 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3038 + 2u)).x));
                        float _3053 = _3013.x - _2542;
                        float _3054 = _3013.y - _2543;
                        float _3055 = _3013.z - _2544;
                        float _3056 = dot(vec3(_3053, _3054, _3055), vec3(_3053, _3054, _3055));
                        float _3059 = inversesqrt(_3056);
                        float _3060 = _3059 * _3053;
                        float _3061 = _3059 * _3054;
                        float _3062 = _3059 * _3055;
                        float _3063 = dot(vec3(_752, _755, _758), vec3(_3060, _3061, _3062));
                        float _3068 = 1.0 - (_3056 * _3013.w);
                        float _4437 = isnan(0.0) ? _3068 : (isnan(_3068) ? 0.0 : max(_3068, 0.0));
                        float _3069 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
                        float _3070 = sqrt(_3056) * _3032.w;
                        float _3073 = 1.39999997615814208984375 / (_3070 + 1.39999997615814208984375);
                        float _3074 = _3073 * _3073;
                        float _3077 = ((1.0 - _3074) * _3063) + _3074;
                        float _3080 = _3070 * _3070;
                        float _3084 = ((isnan(0.0) ? _3077 : (isnan(_3077) ? 0.0 : max(_3077, 0.0))) * _3069) / ((_3080 * 0.699999988079071044921875) + 1.0);
                        float _3088 = (-0.0) - _2542;
                        float _3089 = (-0.0) - _2543;
                        float _3090 = (-0.0) - _2544;
                        float _3094 = inversesqrt(dot(vec3(_3088, _3089, _3090), vec3(_3088, _3089, _3090)));
                        float _3095 = _3094 * _3088;
                        float _3096 = _3094 * _3089;
                        float _3097 = _3094 * _3090;
                        float _3105 = exp2(log2(1.0 / ((_3080 * 3.5) + 5.0)) * 0.25);
                        float _3106 = 1.0 - _827;
                        float _3113 = sqrt(1.0 - ((1.0 - (_3106 * _3106)) * (1.0 - (_3105 * _3105))));
                        float _3114 = _3113 * _3113;
                        float _3115 = _3114 * _3114;
                        float _3116 = _3095 + _3060;
                        float _3117 = _3096 + _3061;
                        float _3118 = _3097 + _3062;
                        float _3122 = inversesqrt(dot(vec3(_3116, _3117, _3118), vec3(_3116, _3117, _3118)));
                        float _3126 = dot(vec3(_752, _755, _758), vec3(_3095, _3096, _3097));
                        float _4453 = isnan(0.0) ? _3126 : (isnan(_3126) ? 0.0 : max(_3126, 0.0));
                        float _3129 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
                        float _3130 = dot(vec3(_752, _755, _758), vec3(_3122 * _3116, _3122 * _3117, _3122 * _3118));
                        float _4464 = isnan(0.0) ? _3130 : (isnan(_3130) ? 0.0 : max(_3130, 0.0));
                        float _3133 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
                        float _3137 = ((_3133 * _3133) * (_3115 + (-1.0))) + 1.0;
                        float _3138 = _3073 * _3114;
                        float _3139 = _3138 * _3138;
                        float _3142 = ((1.0 - _3139) * _3063) + _3139;
                        float _4475 = isnan(0.0) ? _3142 : (isnan(_3142) ? 0.0 : max(_3142, 0.0));
                        float _3143 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
                        float _3144 = 1.0 - _3114;
                        float _3154 = (0.5 / (((_3143 * ((_3129 * _3144) + _3114)) + 9.9999999392252902907785028219223e-09) + (((_3143 * _3144) + _3114) * _3129))) * _3143;
                        float _4486 = isnan(0.0) ? _3154 : (isnan(_3154) ? 0.0 : max(_3154, 0.0));
                        float _3165 = (((_3115 * 3.1415927410125732421875) * (isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0)))) / ((_3137 * _3137) * ((_3080 * 2.1991131305694580078125) + 3.141590118408203125))) * _3069;
                        _2917 = (_3084 * _3032.x) + _2990;
                        _2918 = (_3084 * _3032.y) + _2991;
                        _2919 = (_3084 * _3032.z) + _2992;
                        _2914 = (_3165 * _3049.x) + _2987;
                        _2915 = (_3165 * _3049.y) + _2988;
                        _2916 = (_3165 * _3049.z) + _2989;
                        if (_2994 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2987 = _2914;
                            _2988 = _2915;
                            _2989 = _2916;
                            _2990 = _2917;
                            _2991 = _2918;
                            _2992 = _2919;
                            _2993 = _2994;
                        }
                    }
                    frontier_phi_66_pred = _2914;
                    frontier_phi_66_pred_1 = _2919;
                    frontier_phi_66_pred_2 = _2918;
                    frontier_phi_66_pred_3 = _2917;
                    frontier_phi_66_pred_4 = _2916;
                    frontier_phi_66_pred_5 = _2915;
                }
                _2690 = frontier_phi_66_pred;
                _2700 = frontier_phi_66_pred_1;
                _2698 = frontier_phi_66_pred_2;
                _2696 = frontier_phi_66_pred_3;
                _2694 = frontier_phi_66_pred_4;
                _2692 = frontier_phi_66_pred_5;
                uint _2849 = _2848 + 1u;
                if (_2849 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2842 = _2690;
                    _2843 = _2692;
                    _2844 = _2694;
                    _2845 = _2696;
                    _2846 = _2698;
                    _2847 = _2700;
                    _2848 = _2849;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2689 = _2690;
            _2691 = _2692;
            _2693 = _2694;
            _2695 = _2696;
            _2697 = _2698;
            _2699 = _2700;
        }
        uvec4 _2703 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2704 = _2703.z;
        uint _2706 = (_2704 >> 8u) & 15u;
        float _2810;
        float _2812;
        float _2814;
        float _2816;
        float _2818;
        float _2820;
        if (((4294967295u << _2706) & _2588) == 0u)
        {
            _2810 = _2689;
            _2812 = _2691;
            _2814 = _2693;
            _2816 = _2695;
            _2818 = _2697;
            _2820 = _2699;
        }
        else
        {
            float _2835 = inversesqrt(dot(vec3(_2542, _2543, _2544), vec3(_2542, _2543, _2544)));
            float _2836 = _2835 * _2542;
            float _2837 = _2835 * _2543;
            float _2838 = _2835 * _2544;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2706 < ((_2704 >> 12u) & 15u))
            {
                float _2811;
                float _2813;
                float _2815;
                float _2817;
                float _2819;
                float _2821;
                float _2970 = _2689;
                float _2971 = _2691;
                float _2972 = _2693;
                float _2973 = _2695;
                float _2974 = _2697;
                float _2975 = _2699;
                uint _2976 = _2706;
                uint _2985;
                bool _2986;
                for (;;)
                {
                    _2985 = texelFetch(g_lightClassification, int((((_2582 << 5u) + (_2568 << 9u)) + (_2976 << 2u)) >> 2u)).x;
                    _2986 = _2985 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2986)
                    {
                        frontier_phi_77_pred = _2975;
                        frontier_phi_77_pred_1 = _2974;
                        frontier_phi_77_pred_2 = _2973;
                        frontier_phi_77_pred_3 = _2972;
                        frontier_phi_77_pred_4 = _2971;
                        frontier_phi_77_pred_5 = _2970;
                    }
                    else
                    {
                        float _3179;
                        float _3180;
                        float _3181;
                        float _3182;
                        float _3183;
                        float _3184;
                        float _3473;
                        float _3474;
                        float _3475;
                        float _3476;
                        float _3477;
                        float _3478;
                        float _3192 = _2970;
                        float _3193 = _2971;
                        float _3194 = _2972;
                        float _3195 = _2973;
                        float _3196 = _2974;
                        float _3197 = _2975;
                        uint _3198 = _2985;
                        uint _3199;
                        vec4 _3224;
                        float _3225;
                        vec4 _3240;
                        vec3 _3252;
                        vec4 _3267;
                        vec4 _3283;
                        float _3329;
                        bool _3330;
                        for (;;)
                        {
                            uint _3209 = ((_2976 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3198));
                            _3199 = (_3198 + 4294967295u) & _3198;
                            uint _3211 = _3209 * 40u;
                            _3224 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3211)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 3u)).x));
                            _3225 = _3224.w;
                            uint _3227 = (_3209 * 40u) + 4u;
                            _3240 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3227)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 3u)).x));
                            uint _3242 = (_3209 * 40u) + 8u;
                            _3252 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3242)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 2u)).x));
                            uint _3254 = (_3209 * 40u) + 16u;
                            _3267 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3254)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3254 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3254 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3254 + 3u)).x));
                            uint _3270 = (_3209 * 40u) + 20u;
                            _3283 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3270)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3270 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3270 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3270 + 3u)).x));
                            uint _3285 = (_3209 * 40u) + 24u;
                            vec4 _3298 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3285)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 3u)).x));
                            uint _3304 = (_3209 * 40u) + 28u;
                            vec4 _3317 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3304)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 3u)).x));
                            _3329 = fma(_2544, _3317.z, fma(_2543, _3317.y, _3317.x * _2542)) + _3317.w;
                            _3330 = !((fma(_2544, _3298.z, fma(_2543, _3298.y, _3298.x * _2542)) + _3298.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3330)
                            {
                                float _3357 = _3224.x - _2542;
                                float _3358 = _3224.y - _2543;
                                float _3359 = _3224.z - _2544;
                                float _3360 = dot(vec3(_3357, _3358, _3359), vec3(_3357, _3358, _3359));
                                float _3363 = inversesqrt(_3360);
                                float _3364 = _3363 * _3357;
                                float _3365 = _3363 * _3358;
                                float _3366 = _3363 * _3359;
                                float _3370 = 1.0 - (_3360 / (_3225 * _3225));
                                float _4497 = isnan(0.0) ? _3370 : (isnan(_3370) ? 0.0 : max(_3370, 0.0));
                                float _3371 = isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0));
                                float _3375 = sqrt(_3360) * _3240.w;
                                float _3377 = 1.39999997615814208984375 / (_3375 + 1.39999997615814208984375);
                                float _3378 = _3377 * _3377;
                                float _3381 = ((1.0 - _3378) * dot(vec3(_3364, _3365, _3366), vec3(_752, _755, _758))) + _3378;
                                float _3384 = _3375 * _3375;
                                float _3388 = (fma(_2544, _3267.z, fma(_2543, _3267.y, _3267.x * _2542)) + _3267.w) / _3329;
                                float _3389 = (fma(_2544, _3283.z, fma(_2543, _3283.y, _3283.x * _2542)) + _3283.w) / _3329;
                                float _3393 = 1.0 - dot(vec2(_3388, _3389), vec2(_3388, _3389));
                                float _4513 = isnan(0.0) ? _3393 : (isnan(_3393) ? 0.0 : max(_3393, 0.0));
                                float _3394 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
                                float _3395 = _3394 * (((isnan(0.0) ? _3381 : (isnan(_3381) ? 0.0 : max(_3381, 0.0))) * _3371) / ((_3384 * 0.699999988079071044921875) + 1.0));
                                float _3407 = exp2(log2(1.0 / ((_3384 * 3.5) + 5.0)) * 0.25);
                                float _3408 = 1.0 - _827;
                                float _3415 = sqrt(1.0 - ((1.0 - (_3408 * _3408)) * (1.0 - (_3407 * _3407))));
                                float _3416 = _3415 * _3415;
                                float _3417 = _3416 * _3416;
                                float _3418 = _3364 - _2836;
                                float _3419 = _3365 - _2837;
                                float _3420 = _3366 - _2838;
                                float _3424 = inversesqrt(dot(vec3(_3418, _3419, _3420), vec3(_3418, _3419, _3420)));
                                float _3428 = dot(vec3(_752, _755, _758), vec3((-0.0) - _2836, (-0.0) - _2837, (-0.0) - _2838));
                                float _4524 = isnan(0.0) ? _3428 : (isnan(_3428) ? 0.0 : max(_3428, 0.0));
                                float _3431 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
                                float _3432 = dot(vec3(_752, _755, _758), vec3(_3424 * _3418, _3424 * _3419, _3424 * _3420));
                                float _4535 = isnan(0.0) ? _3432 : (isnan(_3432) ? 0.0 : max(_3432, 0.0));
                                float _3435 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
                                float _3439 = ((_3435 * _3435) * (_3417 + (-1.0))) + 1.0;
                                float _3440 = _3377 * _3416;
                                float _3441 = _3440 * _3440;
                                float _3447 = ((1.0 - _3441) * dot(vec3(_752, _755, _758), vec3(_3364, _3365, _3366))) + _3441;
                                float _4546 = isnan(0.0) ? _3447 : (isnan(_3447) ? 0.0 : max(_3447, 0.0));
                                float _3448 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
                                float _3449 = 1.0 - _3416;
                                float _3459 = (0.5 / (((_3448 * ((_3431 * _3449) + _3416)) + 9.9999999392252902907785028219223e-09) + (((_3448 * _3449) + _3416) * _3431))) * _3448;
                                float _4557 = isnan(0.0) ? _3459 : (isnan(_3459) ? 0.0 : max(_3459, 0.0));
                                float _3469 = (_3394 * _3371) * (((_3417 * 3.1415927410125732421875) * (isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0)))) / ((_3439 * _3439) * ((_3384 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3395 * _3240.y;
                                frontier_phi_83_pred_1 = _3395 * _3240.x;
                                frontier_phi_83_pred_2 = _3469 * _3252.z;
                                frontier_phi_83_pred_3 = _3469 * _3252.y;
                                frontier_phi_83_pred_4 = _3469 * _3252.x;
                                frontier_phi_83_pred_5 = _3395 * _3240.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3477 = frontier_phi_83_pred;
                            _3476 = frontier_phi_83_pred_1;
                            _3475 = frontier_phi_83_pred_2;
                            _3474 = frontier_phi_83_pred_3;
                            _3473 = frontier_phi_83_pred_4;
                            _3478 = frontier_phi_83_pred_5;
                            _3182 = _3476 + _3195;
                            _3183 = _3477 + _3196;
                            _3184 = _3478 + _3197;
                            _3179 = _3473 + _3192;
                            _3180 = _3474 + _3193;
                            _3181 = _3475 + _3194;
                            if (_3199 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3192 = _3179;
                                _3193 = _3180;
                                _3194 = _3181;
                                _3195 = _3182;
                                _3196 = _3183;
                                _3197 = _3184;
                                _3198 = _3199;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3184;
                        frontier_phi_77_pred_1 = _3183;
                        frontier_phi_77_pred_2 = _3182;
                        frontier_phi_77_pred_3 = _3181;
                        frontier_phi_77_pred_4 = _3180;
                        frontier_phi_77_pred_5 = _3179;
                    }
                    _2821 = frontier_phi_77_pred;
                    _2819 = frontier_phi_77_pred_1;
                    _2817 = frontier_phi_77_pred_2;
                    _2815 = frontier_phi_77_pred_3;
                    _2813 = frontier_phi_77_pred_4;
                    _2811 = frontier_phi_77_pred_5;
                    uint _2977 = _2976 + 1u;
                    if (_2977 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2970 = _2811;
                        _2971 = _2813;
                        _2972 = _2815;
                        _2973 = _2817;
                        _2974 = _2819;
                        _2975 = _2821;
                        _2976 = _2977;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2815;
                frontier_phi_58_59_ladder_1 = _2821;
                frontier_phi_58_59_ladder_2 = _2819;
                frontier_phi_58_59_ladder_3 = _2817;
                frontier_phi_58_59_ladder_4 = _2813;
                frontier_phi_58_59_ladder_5 = _2811;
            }
            else
            {
                frontier_phi_58_59_ladder = _2693;
                frontier_phi_58_59_ladder_1 = _2699;
                frontier_phi_58_59_ladder_2 = _2697;
                frontier_phi_58_59_ladder_3 = _2695;
                frontier_phi_58_59_ladder_4 = _2691;
                frontier_phi_58_59_ladder_5 = _2689;
            }
            _2810 = frontier_phi_58_59_ladder_5;
            _2812 = frontier_phi_58_59_ladder_4;
            _2814 = frontier_phi_58_59_ladder;
            _2816 = frontier_phi_58_59_ladder_3;
            _2818 = frontier_phi_58_59_ladder_2;
            _2820 = frontier_phi_58_59_ladder_1;
        }
        float _2825 = isnan(1.0) ? _811 : (isnan(_811) ? 1.0 : min(_811, 1.0));
        _2601 = (_2825 * _2816) + _2034;
        _2603 = (_2825 * _2818) + _2036;
        _2605 = (_2825 * _2820) + _2038;
        _2607 = ((_2810 * _795) * _2825) + _2382;
        _2609 = ((_2812 * _797) * _2825) + _2384;
        _2611 = ((_2814 * _798) * _2825) + _2386;
    }
    else
    {
        _2601 = _2034;
        _2603 = _2036;
        _2605 = _2038;
        _2607 = _2382;
        _2609 = _2384;
        _2611 = _2386;
    }
    float _4573 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
    float _4584 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _4595 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
    float _2628 = ((isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0))) * (_2601 + ((isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0))) * _811))) + ((_2607 + ((isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0))) * _1651)) * cbPerFrame._m0[3u].x);
    float _2629 = ((isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0))) * (_2603 + ((isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0))) * _811))) + ((_2609 + ((isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0))) * _1651)) * cbPerFrame._m0[3u].x);
    float _2630 = ((isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0))) * (_2605 + ((isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0))) * _811))) + ((_2611 + ((isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0))) * _1651)) * cbPerFrame._m0[3u].x);
    uint _2631 = _238 + 6u;
    float _2639 = _733 / cbSceneParam._m0[86u].x;
    float _2640 = _734 / cbSceneParam._m0[86u].y;
    vec4 _2654 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2639, _2640, (log2((isnan(cbSceneParam._m0[77u].w) ? _655 : (isnan(_655) ? cbSceneParam._m0[77u].w : min(_655, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2656 = _2654.x;
    float _2657 = _2654.y;
    float _2658 = _2654.z;
    float _2659 = _2654.w;
    float _2752;
    float _2754;
    float _2756;
    float _2758;
    if (_655 > cbSceneParam._m0[78u].w)
    {
        float _2714 = isnan(_655) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _655 : min(cbSceneParam._m0[80u].w, _655));
        float _2715 = _2714 / _655;
        float _2726 = _2715 * _706;
        float _2727 = _707 * _2715;
        float _2728 = (-0.0) - _2727;
        float _2730 = _2715 * _708;
        float _2732 = (cbSceneParam._m0[77u].w * _2728) / _2714;
        float _2733 = _2732 + cbSceneParam._m0[79u].w;
        float _2734 = cbSceneParam._m0[79u].w - _2727;
        float _2740 = sqrt(((_2726 * _2726) + (_2727 * _2727)) + (_2730 * _2730));
        float _2743 = (1.0 - (cbSceneParam._m0[77u].w / _2714)) * _2740;
        float _2748 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2750 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2927;
        if (abs((_2728 - _2732) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2927 = ((((_2733 > 0.0) ? exp2(_2748 * _2733) : (2.0 - exp2(_2750 * _2733))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2743;
        }
        else
        {
            float _2871 = 1.0 / cbSceneParam._m0[80u].x;
            float _2872 = isnan(_2734) ? _2733 : (isnan(_2733) ? _2734 : max(_2733, _2734));
            float _2873 = isnan(_2734) ? _2733 : (isnan(_2733) ? _2734 : min(_2733, _2734));
            float _2882 = isnan(0.0) ? _2872 : (isnan(_2872) ? 0.0 : min(_2872, 0.0));
            float _2883 = isnan(0.0) ? _2873 : (isnan(_2873) ? 0.0 : min(_2873, 0.0));
            _2927 = ((abs(_2740 / _2728) * cbSceneParam._m0[80u].y) * ((((_2882 - _2883) * 2.0) - ((exp2(_2748 * (isnan(0.0) ? _2872 : (isnan(_2872) ? 0.0 : max(_2872, 0.0)))) - exp2(_2748 * (isnan(0.0) ? _2873 : (isnan(_2873) ? 0.0 : max(_2873, 0.0))))) * _2871)) - ((exp2(_2750 * _2882) - exp2(_2750 * _2883)) * _2871))) + (_2743 * cbSceneParam._m0[80u].z);
        }
        vec4 _2929 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2639, _2640, 1.0), 0.0);
        float _2938 = exp2((_2927 * (-1.44269502162933349609375)) * (1.0 - _2929.w));
        float _2939 = log2(_2938);
        float _2955 = log2(_2659);
        _2752 = (exp2(_2955 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2939 * cbSceneParam._m0[78u].x)) * _2929.x) / cbSceneParam._m0[78u].x)) + _2656;
        _2754 = (exp2(_2955 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2939 * cbSceneParam._m0[78u].y)) * _2929.y) / cbSceneParam._m0[78u].y)) + _2657;
        _2756 = (exp2(_2955 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2939 * cbSceneParam._m0[78u].z)) * _2929.z) / cbSceneParam._m0[78u].z)) + _2658;
        _2758 = _2938 * _2659;
    }
    else
    {
        _2752 = _2656;
        _2754 = _2657;
        _2756 = _2658;
        _2758 = _2659;
    }
    bool _2965;
    vec4 _2768;
    vec4 _2790;
    float _2792;
    float _2796;
    float _2797;
    float _2798;
    float _2799;
    bool _2809;
    for (;;)
    {
        _2768 = cbMatDynParam._m0[0u];
        float _2770 = roundEven(_2768.y);
        bool _2771 = _2770 == 3.0;
        float _2772 = log2(_2758);
        float _2779 = exp2(_2772 * cbSceneParam._m0[78u].x) * _2628;
        float _2780 = exp2(_2772 * cbSceneParam._m0[78u].y) * _2629;
        float _2781 = exp2(_2772 * cbSceneParam._m0[78u].z) * _2630;
        float _2788 = _722 + (-0.5);
        _2790 = cbMtdParam._m0[1u];
        _2792 = _2790.y * _2788;
        float _2795 = (_2770 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2796 = _2795 * (_2771 ? _2779 : (_2779 + (cbSceneParam._m0[72u].w * _2752)));
        _2797 = _2795 * (_2771 ? _2780 : (_2780 + (cbSceneParam._m0[72u].w * _2754)));
        _2798 = _2795 * (_2771 ? _2781 : (_2781 + (cbSceneParam._m0[72u].w * _2756)));
        _2799 = _2788 * 0.999000012874603271484375;
        _2809 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2809)
        {
            if ((cbInstanceData._m0[_238 + 7u].x + _2799) < 0.5)
            {
                _2965 = true;
                break;
            }
        }
        uint _2906 = _771 + uint(_2768.w);
        if ((cbInstanceData._m0[_2906].w < 1.0) && ((cbInstanceData._m0[_2906].w + _2799) < 0.5))
        {
            _2965 = true;
            break;
        }
        if ((_2792 + 1.0) < _2790.x)
        {
            _2965 = true;
            break;
        }
        _2965 = false;
        break;
    }
    float _3170;
    if (_2965)
    {
        discard_state = true;
        _3170 = 0.0;
    }
    else
    {
        _3170 = cbInstanceData._m0[_2631].w;
    }
    SV_Target.x = _2796;
    SV_Target.y = _2797;
    SV_Target.z = _2798;
    SV_Target.w = _3170;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2631].w;
    discard_exit();
}


