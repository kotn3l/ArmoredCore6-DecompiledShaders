#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1344;
float _4008;
float _4009;
float _4010;
float _4011;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _227 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _228 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _229 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _235 = inversesqrt(dot(vec3(_227, _228, _229), vec3(_227, _228, _229)));
    float _236 = _235 * _227;
    float _237 = _235 * _228;
    float _238 = _235 * _229;
    float _242 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _243 = _242 * NORMAL.x;
    float _244 = _242 * NORMAL.y;
    float _245 = _242 * NORMAL.z;
    float _249 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _250 = _249 * TANGENT.x;
    float _251 = _249 * TANGENT.y;
    float _252 = _249 * TANGENT.z;
    uint _255 = uint(roundEven(NORMAL.w)) * 13u;
    uint _260 = _255 + 1u;
    uint _264 = _255 + 2u;
    float _273 = sqrt(((cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x) + (cbInstanceData._m0[_255].x * cbInstanceData._m0[_255].x)) + (cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x));
    float _274 = _273 * TEXCOORD.z;
    float _275 = _273 * TEXCOORD.w;
    vec4 _295 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _301 = _295.x * cbMtdParam._m0[11u].x;
    float _302 = _295.y * cbMtdParam._m0[11u].y;
    float _303 = _295.z * cbMtdParam._m0[11u].z;
    vec4 _322 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _274) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _275) + cbTextureTilingScale._m0[5u].w));
    vec4 _360 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _362 = _360.x;
    float _374 = dot(vec4(_362, _360.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _391 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_362 - _374) * cbMtdParam._m0[24u].y) + _374) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4020 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _392 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
    float _399 = (_392 * ((_322.x * cbMtdParam._m0[12u].x) - _301)) + _301;
    float _400 = (_392 * ((_322.y * cbMtdParam._m0[12u].y) - _302)) + _302;
    float _401 = (_392 * ((_322.z * cbMtdParam._m0[12u].z) - _303)) + _303;
    vec4 _419 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _274) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _275) + cbTextureTilingScale._m0[4u].w));
    vec4 _436 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _438 = _436.x;
    float _439 = _436.y;
    float _440 = _436.z;
    float _449 = ((_419.z - _440) * _392) + _440;
    float _452 = ((((_419.x - _438) * _392) + _438) * 2.0) + (-1.0);
    float _454 = ((((_419.y - _439) * _392) + _439) * 2.0) + (-1.0);
    float _455 = dot(vec2(_452, _454), vec2(_452, _454));
    float _4031 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _460 = sqrt(1.0 - (isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0))));
    float _463 = fma(_460, _243, fma(_454, _250, _452 * _236));
    float _466 = fma(_460, _244, fma(_454, _251, _452 * _237));
    float _469 = fma(_460, _245, fma(_454, _252, _452 * _238));
    float _473 = inversesqrt(dot(vec3(_463, _466, _469), vec3(_463, _466, _469)));
    vec4 _489 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _515 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _274) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _275) + cbTextureTilingScale._m0[11u].w));
    float _517 = _515.x;
    float _518 = 1.0 - _517;
    float _524 = (cbMtdParam._m0[19u].x + dot(vec4(_473 * _463, _473 * _466, _473 * _469, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_517 - _518) * cbMtdParam._m0[24u].z) + _518) * cbMtdParam._m0[21u].z);
    float _4042 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _525 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
    float _527 = (-0.0) - cbMtdParam._m0[24u].x;
    float _529 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _530 = isnan(1.0) ? _529 : (isnan(_529) ? 1.0 : min(_529, 1.0));
    float _537 = _525 - ((_525 * TEXCOORD_8.x) * _530);
    float _538 = _525 - ((_525 * TEXCOORD_8.y) * _530);
    float _539 = _525 - ((_525 * TEXCOORD_8.z) * _530);
    float _546 = (_537 * (cbMtdParam._m0[17u].x - _399)) + _399;
    float _547 = (_538 * (cbMtdParam._m0[17u].y - _400)) + _400;
    float _548 = (_539 * (cbMtdParam._m0[17u].z - _401)) + _401;
    vec4 _560 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _274) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _275) + cbTextureTilingScale._m0[19u].w));
    float _562 = _560.x;
    float _563 = 1.0 - _562;
    float _591 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_562 - _563) * cbMtdParam._m0[24u].w) + _563) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4063 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _592 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
    float _600 = ((((cbMtdParam._m0[10u].x - _546) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _592) + _546;
    float _601 = ((((cbMtdParam._m0[10u].y - _547) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _592) + _547;
    float _602 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _548)) * _592) + _548;
    vec4 _628 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _630 = _628.x;
    float _648 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _274) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _275) + cbTextureTilingScale._m0[9u].w)).x - _630) * _392) + _630;
    float _652 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _648) * cbMtdParam._m0[19u].z) + _648;
    float _654 = _652 - (_652 * _537);
    float _656 = _654 - (_654 * _592);
    vec4 _670 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _274) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _275) + cbTextureTilingScale._m0[15u].w));
    float _677 = (_670.x * 2.0) + (-1.0);
    float _678 = (_670.y * 2.0) + (-1.0);
    float _679 = dot(vec2(_677, _678), vec2(_677, _678));
    float _4074 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
    float _687 = ((_670.z - _449) * _537) + _449;
    float _690 = ((cbMtdParam._m0[23u].y - _687) * _592) + _687;
    vec4 _709 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _274) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _275) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _715 = (_709.x * 2.0) + (-1.0);
    float _716 = (_709.y * 2.0) + (-1.0);
    float _717 = dot(vec2(_715, _716), vec2(_715, _716));
    float _4085 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
    float _732 = ((sqrt(1.0 - (isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0)))) - _460) * _539) + _460;
    float _735 = (((_677 - _452) * _537) + _452) + (cbMtdParam._m0[21u].x * _452);
    float _736 = (((_678 - _454) * _538) + _454) + (cbMtdParam._m0[21u].x * _454);
    float _747 = (((_715 - _735) + (_735 * cbMtdParam._m0[22u].z)) * _592) + _735;
    float _748 = (((_716 - _736) + (_736 * cbMtdParam._m0[22u].z)) * _592) + _736;
    float _749 = (_592 * (sqrt(1.0 - (isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0)))) - _732)) + _732;
    float _751 = cbMtdParam._m0[22u].x + _489.w;
    float _754 = fma(_749, _243, fma(_748, _250, _747 * _236));
    float _757 = fma(_749, _244, fma(_748, _251, _747 * _237));
    float _760 = fma(_749, _245, fma(_748, _252, _747 * _238));
    float _764 = inversesqrt(dot(vec3(_754, _757, _760), vec3(_754, _757, _760)));
    float _765 = _764 * _754;
    float _766 = _764 * _757;
    float _767 = _764 * _760;
    float _4096 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _768 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
    float _4107 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
    float _4118 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _4129 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _4140 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _4151 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _773 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
    float _787 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _827 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _837 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _827);
    float _838 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _827);
    float _839 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _827);
    float _843 = inversesqrt(dot(vec3(_837, _838, _839), vec3(_837, _838, _839)));
    float _844 = _837 * _843;
    float _845 = _838 * _843;
    float _846 = _839 * _843;
    vec4 _851 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _853 = _851.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1025 = sqrt(((_837 * _837) + (_838 * _838)) + (_839 * _839));
        float _1031 = (cbMatDynParam._m0[5u].x * _1025) + cbMatDynParam._m0[5u].y;
        float _4162 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1032 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
        float _1036 = (cbMatDynParam._m0[5u].z * _1025) + cbMatDynParam._m0[5u].w;
        float _4173 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0))) - _1032)) + _1032) < ((_853 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _864 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _865 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _883 = fma(_767, cbSceneParam._m0[5u].z, fma(_766, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _765));
    float _886 = fma(_767, cbSceneParam._m0[6u].z, fma(_766, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _765));
    float _889 = fma(_767, cbSceneParam._m0[7u].z, fma(_766, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _765));
    uint _902 = _255 + 9u;
    uint _903 = _902 + uint(cbMatDynParam._m0[0u].w);
    float _909 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0)))) * cbInstanceData._m0[_903].x;
    float _910 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0)))) * cbInstanceData._m0[_903].y;
    float _911 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0)))) * cbInstanceData._m0[_903].z;
    float _4184 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
    float _912 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
    float _4195 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
    float _913 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
    float _4206 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
    float _914 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
    float _915 = 1.0 - _773;
    float _916 = _912 * _915;
    float _917 = _913 * _915;
    float _918 = _914 * _915;
    float _923 = (_912 + (-0.039999999105930328369140625)) * _773;
    float _924 = (_913 + (-0.039999999105930328369140625)) * _773;
    float _925 = (_914 + (-0.039999999105930328369140625)) * _773;
    float _926 = _923 + 0.039999999105930328369140625;
    float _928 = _924 + 0.039999999105930328369140625;
    float _929 = _925 + 0.039999999105930328369140625;
    vec4 _938 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _864, cbSceneParam._m0[86u].y * _865));
    float _942 = ((isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0))) * TEXCOORD_5.w) * _938.x;
    float _943 = dot(vec3(_765, _766, _767), vec3(_844, _845, _846));
    float _946 = _943 * 2.0;
    float _950 = (_946 * _765) - _844;
    float _951 = (_946 * _766) - _845;
    float _952 = (_946 * _767) - _846;
    float _956 = abs(dot(vec3(_844, _845, _846), vec3(_765, _766, _767)));
    float _4217 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
    float _958 = sqrt(_768);
    float _971 = exp2((_958 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_958 * 3.0));
    float _977 = (1.0 - _971) * ((_958 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _978 = _971 * _958;
    float _1006 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1010 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1014 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1343;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1068 = fma(_1014, cbModelParam._m0[26u].z, fma(_1010, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1006));
        float _1072 = fma(_1014, cbModelParam._m0[27u].z, fma(_1010, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1006));
        float _1076 = fma(_1014, cbModelParam._m0[28u].z, fma(_1010, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1006));
        float _1101 = _1006 + _765;
        float _1102 = _1010 + _766;
        float _1103 = _1014 + _767;
        float _1113 = fma(_1103, cbModelParam._m0[26u].z, fma(_1102, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1101)) - _1068;
        float _1114 = fma(_1103, cbModelParam._m0[27u].z, fma(_1102, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1101)) - _1072;
        float _1115 = fma(_1103, cbModelParam._m0[28u].z, fma(_1102, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1101)) - _1076;
        float _1119 = inversesqrt(dot(vec3(_1113, _1114, _1115), vec3(_1113, _1114, _1115)));
        float _1132 = ((_1119 * _1113) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1068 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1133 = ((_1119 * _1114) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1072 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1134 = ((_1119 * _1115) / cbModelParam._m0[34u].z) + ((((((_1076 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1137 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1132, _1133, _1134), 0.0);
        vec4 _1144 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1132, _1133, _1134), 0.0);
        vec4 _1151 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1132, _1133, _1134), 0.0);
        vec4 _1158 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1132, _1133, _1134), 0.0);
        float _1171 = exp2((_1137.w + (-0.5)) * 20.0) * 2.0;
        float _1172 = _1171 * (_1137.x + (-0.5));
        float _1173 = _1171 * (_1137.y + (-0.5));
        float _1174 = _1171 * (_1137.z + (-0.5));
        float _1181 = exp2((_1144.w + (-0.5)) * 20.0) * 2.0;
        float _1182 = _1181 * (_1144.x + (-0.5));
        float _1183 = _1181 * (_1144.y + (-0.5));
        float _1184 = _1181 * (_1144.z + (-0.5));
        float _1191 = exp2((_1151.w + (-0.5)) * 20.0) * 2.0;
        float _1192 = _1191 * (_1151.x + (-0.5));
        float _1193 = _1191 * (_1151.y + (-0.5));
        float _1194 = _1191 * (_1151.z + (-0.5));
        float _1201 = exp2((_1158.w + (-0.5)) * 20.0) * 2.0;
        float _1202 = _1201 * (_1158.x + (-0.5));
        float _1203 = _1201 * (_1158.y + (-0.5));
        float _1204 = _1201 * (_1158.z + (-0.5));
        float _1205 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1206 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1207 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1208 = _1172 * 0.5;
        float _1209 = _1182 * 0.5;
        float _1210 = _1192 * 0.5;
        float _1211 = dot(vec3(_1208, _1209, _1210), vec3(_1208, _1209, _1210));
        float _1216 = (_1211 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1211);
        float _1225 = (dot(vec3(_765, _766, _767), vec3(_1216 * _1208, _1216 * _1209, _1216 * _1210)) + 1.0) * 0.5;
        float _4243 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1235 = sqrt(((_1209 * _1209) + (_1208 * _1208)) + (_1210 * _1210)) / (_1205 + 9.9999997473787516355514526367188e-06);
        float _4254 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1236 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
        float _1237 = _1236 * 2.0;
        float _1241 = (1.0 - _1236) / (_1236 + 1.0);
        float _4265 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1242 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
        float _1251 = ((((1.0 - _1242) * (_1237 + 2.0)) * exp2(log2(isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0))) * (_1237 + 1.0))) + _1242) * _1205;
        float _1252 = _1173 * 0.5;
        float _1253 = _1183 * 0.5;
        float _1254 = _1193 * 0.5;
        float _1255 = dot(vec3(_1252, _1253, _1254), vec3(_1252, _1253, _1254));
        float _1260 = (_1255 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1255);
        float _1268 = (dot(vec3(_765, _766, _767), vec3(_1260 * _1252, _1260 * _1253, _1260 * _1254)) + 1.0) * 0.5;
        float _4276 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1277 = sqrt(((_1253 * _1253) + (_1252 * _1252)) + (_1254 * _1254)) / (_1206 + 9.9999997473787516355514526367188e-06);
        float _4287 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1278 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
        float _1279 = _1278 * 2.0;
        float _1283 = (1.0 - _1278) / (_1278 + 1.0);
        float _4298 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1284 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
        float _1293 = ((((1.0 - _1284) * (_1279 + 2.0)) * exp2(log2(isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0))) * (_1279 + 1.0))) + _1284) * _1206;
        float _1294 = _1174 * 0.5;
        float _1295 = _1184 * 0.5;
        float _1296 = _1194 * 0.5;
        float _1297 = dot(vec3(_1294, _1295, _1296), vec3(_1294, _1295, _1296));
        float _1302 = (_1297 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1297);
        float _1310 = (dot(vec3(_765, _766, _767), vec3(_1302 * _1294, _1302 * _1295, _1302 * _1296)) + 1.0) * 0.5;
        float _4309 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1319 = sqrt(((_1295 * _1295) + (_1294 * _1294)) + (_1296 * _1296)) / (_1207 + 9.9999997473787516355514526367188e-06);
        float _4320 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1320 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
        float _1321 = _1320 * 2.0;
        float _1325 = (1.0 - _1320) / (_1320 + 1.0);
        float _4331 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1326 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
        float _1335 = ((((1.0 - _1326) * (_1321 + 2.0)) * exp2(log2(isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0))) * (_1321 + 1.0))) + _1326) * _1207;
        _1343 = _1174;
        _1345 = _1173;
        _1346 = _1172;
        _1347 = _1184;
        _1348 = _1183;
        _1349 = _1182;
        _1350 = _1194;
        _1351 = _1193;
        _1352 = _1192;
        _1353 = _1207;
        _1354 = _1206;
        _1355 = _1205;
        _1356 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0)));
        _1357 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0)));
        _1358 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0)));
    }
    else
    {
        _1343 = _1344;
        _1345 = _1344;
        _1346 = _1344;
        _1347 = _1344;
        _1348 = _1344;
        _1349 = _1344;
        _1350 = _1344;
        _1351 = _1344;
        _1352 = _1344;
        _1353 = _1344;
        _1354 = _1344;
        _1355 = _1344;
        _1356 = 0.0;
        _1357 = 0.0;
        _1358 = 0.0;
    }
    float _1655;
    float _1656;
    float _1657;
    float _1658;
    float _1659;
    float _1660;
    float _1661;
    float _1662;
    float _1663;
    float _1664;
    float _1665;
    float _1666;
    float _1667;
    float _1668;
    float _1669;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1386 = fma(_1014, cbModelParam._m0[30u].z, fma(_1010, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1006));
        float _1390 = fma(_1014, cbModelParam._m0[31u].z, fma(_1010, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1006));
        float _1394 = fma(_1014, cbModelParam._m0[32u].z, fma(_1010, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1006));
        float _1417 = _1006 + _765;
        float _1418 = _1010 + _766;
        float _1419 = _1014 + _767;
        float _1429 = fma(_1419, cbModelParam._m0[30u].z, fma(_1418, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1417)) - _1386;
        float _1430 = fma(_1419, cbModelParam._m0[31u].z, fma(_1418, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1417)) - _1390;
        float _1431 = fma(_1419, cbModelParam._m0[32u].z, fma(_1418, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1417)) - _1394;
        float _1435 = inversesqrt(dot(vec3(_1429, _1430, _1431), vec3(_1429, _1430, _1431)));
        float _1448 = ((_1435 * _1429) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1386 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1449 = ((_1435 * _1430) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1390 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1450 = ((_1435 * _1431) / cbModelParam._m0[35u].z) + ((((((_1394 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1452 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1448, _1449, _1450), 0.0);
        vec4 _1459 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1448, _1449, _1450), 0.0);
        vec4 _1466 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1448, _1449, _1450), 0.0);
        vec4 _1473 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1448, _1449, _1450), 0.0);
        float _1485 = exp2((_1452.w + (-0.5)) * 20.0) * 2.0;
        float _1486 = _1485 * (_1452.x + (-0.5));
        float _1487 = _1485 * (_1452.y + (-0.5));
        float _1488 = _1485 * (_1452.z + (-0.5));
        float _1495 = exp2((_1459.w + (-0.5)) * 20.0) * 2.0;
        float _1496 = _1495 * (_1459.x + (-0.5));
        float _1497 = _1495 * (_1459.y + (-0.5));
        float _1498 = _1495 * (_1459.z + (-0.5));
        float _1505 = exp2((_1466.w + (-0.5)) * 20.0) * 2.0;
        float _1506 = _1505 * (_1466.x + (-0.5));
        float _1507 = _1505 * (_1466.y + (-0.5));
        float _1508 = _1505 * (_1466.z + (-0.5));
        float _1515 = exp2((_1473.w + (-0.5)) * 20.0) * 2.0;
        float _1516 = _1515 * (_1473.x + (-0.5));
        float _1517 = _1515 * (_1473.y + (-0.5));
        float _1518 = _1515 * (_1473.z + (-0.5));
        float _1519 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
        float _1520 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
        float _1521 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1522 = _1486 * 0.5;
        float _1523 = _1496 * 0.5;
        float _1524 = _1506 * 0.5;
        float _1525 = dot(vec3(_1522, _1523, _1524), vec3(_1522, _1523, _1524));
        float _1530 = (_1525 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1525);
        float _1538 = (dot(vec3(_765, _766, _767), vec3(_1530 * _1522, _1530 * _1523, _1530 * _1524)) + 1.0) * 0.5;
        float _4372 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
        float _1547 = sqrt(((_1523 * _1523) + (_1522 * _1522)) + (_1524 * _1524)) / (_1519 + 9.9999997473787516355514526367188e-06);
        float _4383 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
        float _1548 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
        float _1549 = _1548 * 2.0;
        float _1553 = (1.0 - _1548) / (_1548 + 1.0);
        float _4394 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1554 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
        float _1563 = ((((1.0 - _1554) * (_1549 + 2.0)) * exp2(log2(isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0))) * (_1549 + 1.0))) + _1554) * _1519;
        float _1564 = _1487 * 0.5;
        float _1565 = _1497 * 0.5;
        float _1566 = _1507 * 0.5;
        float _1567 = dot(vec3(_1564, _1565, _1566), vec3(_1564, _1565, _1566));
        float _1572 = (_1567 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1567);
        float _1580 = (dot(vec3(_765, _766, _767), vec3(_1572 * _1564, _1572 * _1565, _1572 * _1566)) + 1.0) * 0.5;
        float _4405 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1589 = sqrt(((_1565 * _1565) + (_1564 * _1564)) + (_1566 * _1566)) / (_1520 + 9.9999997473787516355514526367188e-06);
        float _4416 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
        float _1590 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
        float _1591 = _1590 * 2.0;
        float _1595 = (1.0 - _1590) / (_1590 + 1.0);
        float _4427 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
        float _1596 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
        float _1605 = ((((1.0 - _1596) * (_1591 + 2.0)) * exp2(log2(isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0))) * (_1591 + 1.0))) + _1596) * _1520;
        float _1606 = _1488 * 0.5;
        float _1607 = _1498 * 0.5;
        float _1608 = _1508 * 0.5;
        float _1609 = dot(vec3(_1606, _1607, _1608), vec3(_1606, _1607, _1608));
        float _1614 = (_1609 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1609);
        float _1622 = (dot(vec3(_765, _766, _767), vec3(_1614 * _1606, _1614 * _1607, _1614 * _1608)) + 1.0) * 0.5;
        float _4438 = isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0));
        float _1631 = sqrt(((_1607 * _1607) + (_1606 * _1606)) + (_1608 * _1608)) / (_1521 + 9.9999997473787516355514526367188e-06);
        float _4449 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
        float _1632 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
        float _1633 = _1632 * 2.0;
        float _1637 = (1.0 - _1632) / (_1632 + 1.0);
        float _4460 = isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0));
        float _1638 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
        float _1647 = ((((1.0 - _1638) * (_1633 + 2.0)) * exp2(log2(isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0))) * (_1633 + 1.0))) + _1638) * _1521;
        _1655 = _1488;
        _1656 = _1487;
        _1657 = _1486;
        _1658 = _1498;
        _1659 = _1497;
        _1660 = _1496;
        _1661 = _1508;
        _1662 = _1507;
        _1663 = _1506;
        _1664 = _1521;
        _1665 = _1520;
        _1666 = _1519;
        _1667 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0)));
        _1668 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0)));
        _1669 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0)));
    }
    else
    {
        _1655 = _1344;
        _1656 = _1344;
        _1657 = _1344;
        _1658 = _1344;
        _1659 = _1344;
        _1660 = _1344;
        _1661 = _1344;
        _1662 = _1344;
        _1663 = _1344;
        _1664 = _1344;
        _1665 = _1344;
        _1666 = _1344;
        _1667 = 0.0;
        _1668 = 0.0;
        _1669 = 0.0;
    }
    float _1679 = (cbModelParam._m0[1u].x * (_1667 - _1356)) + _1356;
    float _1680 = (cbModelParam._m0[1u].x * (_1668 - _1357)) + _1357;
    float _1681 = (cbModelParam._m0[1u].x * (_1669 - _1358)) + _1358;
    float _1702 = fma(_1681, cbSceneParam._m0[89u].z, fma(_1680, cbSceneParam._m0[89u].y, _1679 * cbSceneParam._m0[89u].x));
    float _1705 = fma(_1681, cbSceneParam._m0[90u].z, fma(_1680, cbSceneParam._m0[90u].y, _1679 * cbSceneParam._m0[90u].x));
    float _1708 = fma(_1681, cbSceneParam._m0[91u].z, fma(_1680, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1679));
    float _1723 = _950 * 0.5;
    float _1724 = _951 * 0.5;
    float _1725 = _952 * 0.5;
    float _1726 = dot(vec4(_1723, _1724, _1725, 1.0), vec4(_1657, _1660, _1663, _1666));
    float _1729 = dot(vec4(_1723, _1724, _1725, 1.0), vec4(_1656, _1659, _1662, _1665));
    float _1732 = dot(vec4(_1723, _1724, _1725, 1.0), vec4(_1655, _1658, _1661, _1664));
    float _1766;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1739 = dot(vec4(_1723, _1724, _1725, 1.0), vec4(_1343, _1347, _1350, _1353));
        float _1743 = dot(vec4(_1723, _1724, _1725, 1.0), vec4(_1345, _1348, _1351, _1354));
        float _1747 = dot(vec4(_1723, _1724, _1725, 1.0), vec4(_1346, _1349, _1352, _1355));
        float _1754 = dot(vec4(cbModelParam._m0[39u]), vec4(_1723, _1724, _1725, 1.0));
        _1766 = dot(vec3(isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0)), isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0)), isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1754) ? 0.0 : (isnan(0.0) ? _1754 : max(0.0, _1754))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1766 = 1.0;
    }
    float _1777;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1768 = dot(vec4(cbModelParam._m0[40u]), vec4(_1723, _1724, _1725, 1.0));
        _1777 = dot(vec3(isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0)), isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0)), isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1768) ? 0.0 : (isnan(0.0) ? _1768 : max(0.0, _1768))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1777 = 1.0;
    }
    float _1781 = (_1777 * cbModelParam._m0[1u].x) + (_1766 * (1.0 - cbModelParam._m0[1u].x));
    float _1791 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _768);
    float _1792 = isnan(_1791) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1791 : min(cbModelParam._m0[25u].z, _1791));
    float _1873;
    float _1875;
    float _1877;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1840 = fma(_1014, cbModelParam._m0[13u].z, fma(_1010, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1006)) + cbModelParam._m0[13u].w;
        float _1844 = fma(_1014, cbModelParam._m0[14u].z, fma(_1010, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1006)) + cbModelParam._m0[14u].w;
        float _1848 = fma(_1014, cbModelParam._m0[15u].z, fma(_1010, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1006)) + cbModelParam._m0[15u].w;
        float _1851 = fma(_952, cbModelParam._m0[13u].z, fma(_951, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _950));
        float _1854 = fma(_952, cbModelParam._m0[14u].z, fma(_951, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _950));
        float _1857 = fma(_952, cbModelParam._m0[15u].z, fma(_951, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _950));
        float _1885;
        if (_1851 > 0.0)
        {
            _1885 = abs((1.0 - _1840) / _1851);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1851 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1840 + 1.0) / _1851);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1885 = frontier_phi_17_15_ladder;
        }
        float _2057;
        if (_1854 > 0.0)
        {
            _2057 = abs((1.0 - _1844) / _1854);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1854 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1844 + 1.0) / _1854);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2057 = frontier_phi_26_22_ladder;
        }
        float _2352;
        if (_1857 > 0.0)
        {
            _2352 = abs((1.0 - _1848) / _1857);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1857 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1848 + 1.0) / _1857);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2352 = frontier_phi_38_33_ladder;
        }
        float _2354 = isnan(_2057) ? _1885 : (isnan(_1885) ? _2057 : min(_1885, _2057));
        float _2355 = isnan(_2352) ? _2354 : (isnan(_2354) ? _2352 : min(_2354, _2352));
        float _2359 = (_2355 * _1851) + _1840;
        float _2360 = (_2355 * _1854) + _1844;
        float _2361 = (_2355 * _1857) + _1848;
        float _2362 = _2355 * 9.9999997473787516355514526367188e-05;
        float _2364 = (-1.0) - _2362;
        float _2366 = _2362 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2361 > _2366) || ((_2361 < _2364) || ((_2360 > _2366) || ((_2360 < _2364) || ((_2359 < _2364) || (_2359 > _2366))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2506 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2361, cbModelParam._m0[9u].z, fma(_2360, cbModelParam._m0[9u].y, _2359 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2361, cbModelParam._m0[10u].z, fma(_2360, cbModelParam._m0[10u].y, _2359 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2361, cbModelParam._m0[11u].z, fma(_2360, cbModelParam._m0[11u].y, _2359 * cbModelParam._m0[11u].x))), _1792);
            frontier_phi_16_38_ladder = _2506.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2506.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2506.x * cbModelParam._m0[1u].y;
        }
        _1873 = frontier_phi_16_38_ladder_2;
        _1875 = frontier_phi_16_38_ladder_1;
        _1877 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1861 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_950, _951, _952), _1792);
        _1873 = _1861.x * cbModelParam._m0[1u].y;
        _1875 = _1861.y * cbModelParam._m0[1u].y;
        _1877 = _1861.z * cbModelParam._m0[1u].y;
    }
    float _1881 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _768);
    float _1882 = isnan(_1881) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1881 : min(cbModelParam._m0[25u].w, _1881));
    float _1972;
    float _1974;
    float _1976;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1936 = fma(_1014, cbModelParam._m0[21u].z, fma(_1010, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1006)) + cbModelParam._m0[21u].w;
        float _1940 = fma(_1014, cbModelParam._m0[22u].z, fma(_1010, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1006)) + cbModelParam._m0[22u].w;
        float _1944 = fma(_1014, cbModelParam._m0[23u].z, fma(_1010, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1006)) + cbModelParam._m0[23u].w;
        float _1947 = fma(_952, cbModelParam._m0[21u].z, fma(_951, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _950));
        float _1950 = fma(_952, cbModelParam._m0[22u].z, fma(_951, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _950));
        float _1953 = fma(_952, cbModelParam._m0[23u].z, fma(_951, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _950));
        float _2062;
        if (_1947 > 0.0)
        {
            _2062 = abs((1.0 - _1936) / _1947);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1947 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1936 + 1.0) / _1947);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2062 = frontier_phi_28_24_ladder;
        }
        float _2379;
        if (_1950 > 0.0)
        {
            _2379 = abs((1.0 - _1940) / _1950);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1950 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1940 + 1.0) / _1950);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2379 = frontier_phi_40_35_ladder;
        }
        float _2717;
        if (_1953 > 0.0)
        {
            _2717 = abs((1.0 - _1944) / _1953);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1953 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1944 + 1.0) / _1953);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2717 = frontier_phi_50_47_ladder;
        }
        float _2719 = isnan(_2379) ? _2062 : (isnan(_2062) ? _2379 : min(_2062, _2379));
        float _2720 = isnan(_2717) ? _2719 : (isnan(_2719) ? _2717 : min(_2719, _2717));
        float _2724 = (_2720 * _1947) + _1936;
        float _2725 = (_2720 * _1950) + _1940;
        float _2726 = (_2720 * _1953) + _1944;
        float _2727 = _2720 * 9.9999997473787516355514526367188e-05;
        float _2728 = (-1.0) - _2727;
        float _2730 = _2727 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2726 > _2730) || ((_2726 < _2728) || ((_2725 > _2730) || ((_2725 < _2728) || ((_2724 < _2728) || (_2724 > _2730))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2848 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2726, cbModelParam._m0[17u].z, fma(_2725, cbModelParam._m0[17u].y, _2724 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2726, cbModelParam._m0[18u].z, fma(_2725, cbModelParam._m0[18u].y, _2724 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2726, cbModelParam._m0[19u].z, fma(_2725, cbModelParam._m0[19u].y, _2724 * cbModelParam._m0[19u].x))), _1882);
            frontier_phi_25_50_ladder = _2848.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2848.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2848.x * cbModelParam._m0[1u].z;
        }
        _1972 = frontier_phi_25_50_ladder_2;
        _1974 = frontier_phi_25_50_ladder_1;
        _1976 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1956 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_950, _951, _952), _1882);
        _1972 = _1956.x * cbModelParam._m0[1u].z;
        _1974 = _1956.y * cbModelParam._m0[1u].z;
        _1976 = _1956.z * cbModelParam._m0[1u].z;
    }
    float _1989 = (((_977 * _926) + _978) * _942) * ((cbModelParam._m0[1u].w * (_1972 - _1873)) + _1873);
    float _1991 = (((_977 * _928) + _978) * _942) * ((cbModelParam._m0[1u].w * (_1974 - _1875)) + _1875);
    float _1993 = (((_977 * _929) + _978) * _942) * ((cbModelParam._m0[1u].w * (_1976 - _1877)) + _1877);
    float _1996 = fma(_1993, cbSceneParam._m0[89u].z, fma(_1991, cbSceneParam._m0[89u].y, _1989 * cbSceneParam._m0[89u].x));
    float _1999 = fma(_1993, cbSceneParam._m0[90u].z, fma(_1991, cbSceneParam._m0[90u].y, _1989 * cbSceneParam._m0[90u].x));
    float _2002 = fma(_1993, cbSceneParam._m0[91u].z, fma(_1991, cbSceneParam._m0[91u].y, _1989 * cbSceneParam._m0[91u].x));
    float _2036 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2040 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2044 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2048 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2049 = _2036 / _2048;
    float _2050 = _2040 / _2048;
    float _2051 = _2044 / _2048;
    float _2198;
    float _2199;
    float _2200;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2078 = ((uint(_2051 > cbSceneParam._m0[59u].y) + uint(_2051 > cbSceneParam._m0[59u].x)) + uint(_2051 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2079 = _2078 + 43u;
        uint _2087 = _2078 + 44u;
        uint _2095 = _2078 + 45u;
        uint _2103 = _2078 + 46u;
        float _2114 = fma(_2048, cbSceneParam._m0[_2079].w, fma(_2044, cbSceneParam._m0[_2079].z, fma(_2040, cbSceneParam._m0[_2079].y, _2036 * cbSceneParam._m0[_2079].x)));
        float _2118 = fma(_2048, cbSceneParam._m0[_2087].w, fma(_2044, cbSceneParam._m0[_2087].z, fma(_2040, cbSceneParam._m0[_2087].y, _2036 * cbSceneParam._m0[_2087].x)));
        float _2126 = fma(_2048, cbSceneParam._m0[_2103].w, fma(_2044, cbSceneParam._m0[_2103].z, fma(_2040, cbSceneParam._m0[_2103].y, _2036 * cbSceneParam._m0[_2103].x)));
        float _2131 = cbSceneParam._m0[33u].z * _2126;
        float _2133 = cbSceneParam._m0[33u].w * _2126;
        float _2136 = fma(_2048, cbSceneParam._m0[_2095].w, fma(_2044, cbSceneParam._m0[_2095].z, fma(_2040, cbSceneParam._m0[_2095].y, _2036 * cbSceneParam._m0[_2095].x))) / _2126;
        float _2184 = (cbSceneParam._m0[33u].x - sqrt(((_2050 * _2050) + (_2049 * _2049)) + (_2051 * _2051))) * cbSceneParam._m0[33u].y;
        float _4586 = isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0));
        float _2191 = (isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2131 + _2114) / _2126, (_2133 + _2118) / _2126), _2136), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2133 + _2114) / _2126, (_2118 - _2131) / _2126), _2136), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2114 - _2131) / _2126, (_2118 - _2133) / _2126), _2136), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2114 - _2133) / _2126, (_2131 + _2118) / _2126), _2136), 0.0)).x), vec4(0.25)));
        _2198 = 1.0 - (_2191 * cbSceneParam._m0[34u].x);
        _2199 = 1.0 - (_2191 * cbSceneParam._m0[34u].y);
        _2200 = 1.0 - (_2191 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2198 = 1.0;
        _2199 = 1.0;
        _2200 = 1.0;
    }
    float _2264;
    float _2266;
    float _2268;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2252 = fma(_2048, cbSceneParam._m0[63u].w, fma(_2044, cbSceneParam._m0[63u].z, fma(_2040, cbSceneParam._m0[63u].y, _2036 * cbSceneParam._m0[63u].x)));
        float _2253 = fma(_2048, cbSceneParam._m0[60u].w, fma(_2044, cbSceneParam._m0[60u].z, fma(_2040, cbSceneParam._m0[60u].y, _2036 * cbSceneParam._m0[60u].x))) / _2252;
        float _2254 = fma(_2048, cbSceneParam._m0[61u].w, fma(_2044, cbSceneParam._m0[61u].z, fma(_2040, cbSceneParam._m0[61u].y, _2036 * cbSceneParam._m0[61u].x))) / _2252;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2253 >= cbSceneParam._m0[64u].x) && (_2254 >= cbSceneParam._m0[64u].y)) && (_2253 <= cbSceneParam._m0[64u].z)) && (_2254 <= cbSceneParam._m0[64u].w))
        {
            float _2392 = fma(_2048, cbSceneParam._m0[62u].w, fma(_2044, cbSceneParam._m0[62u].z, fma(_2040, cbSceneParam._m0[62u].y, _2036 * cbSceneParam._m0[62u].x))) / _2252;
            float _2396 = isnan(cbSceneParam._m0[41u].w) ? _2392 : (isnan(_2392) ? cbSceneParam._m0[41u].w : max(_2392, cbSceneParam._m0[41u].w));
            float _2439 = (cbSceneParam._m0[33u].x - sqrt(((_2050 * _2050) + (_2049 * _2049)) + (_2051 * _2051))) * cbSceneParam._m0[33u].y;
            float _4602 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0));
            float _2446 = (isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2253, cbSceneParam._m0[33u].w + _2254), _2396), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2253, _2254 - cbSceneParam._m0[33u].z), _2396), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2253 - cbSceneParam._m0[33u].z, _2254 - cbSceneParam._m0[33u].w), _2396), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2253 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2254), _2396), 0.0)).x), vec4(0.25)));
            float _2450 = 1.0 - (_2446 * cbSceneParam._m0[34u].x);
            float _2451 = 1.0 - (_2446 * cbSceneParam._m0[34u].y);
            float _2452 = 1.0 - (_2446 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2452) ? _2200 : (isnan(_2200) ? _2452 : min(_2200, _2452));
            frontier_phi_37_36_ladder_1 = isnan(_2451) ? _2199 : (isnan(_2199) ? _2451 : min(_2199, _2451));
            frontier_phi_37_36_ladder_2 = isnan(_2450) ? _2198 : (isnan(_2198) ? _2450 : min(_2198, _2450));
        }
        else
        {
            frontier_phi_37_36_ladder = _2200;
            frontier_phi_37_36_ladder_1 = _2199;
            frontier_phi_37_36_ladder_2 = _2198;
        }
        _2264 = frontier_phi_37_36_ladder_2;
        _2266 = frontier_phi_37_36_ladder_1;
        _2268 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2264 = _2198;
        _2266 = _2199;
        _2268 = _2200;
    }
    uvec4 _2273 = floatBitsToUint(cbInstanceData._m0[_255 + 5u]);
    uint _2275 = _2273.x * 14u;
    uint _2276 = _2275 + 13u;
    float _2283 = _942 + (-1.0);
    float _2288 = (cbLight._m0[_2276].x * _2283) + 1.0;
    float _2289 = (cbLight._m0[_2276].y * _2283) + 1.0;
    float _2290 = (cbLight._m0[_2276].z * _2283) + 1.0;
    float _2291 = (cbLight._m0[_2276].w * _2283) + 1.0;
    uint _2292 = _2275 + 5u;
    float _2298 = isnan(1.0) ? _2289 : (isnan(_2289) ? 1.0 : min(_2289, 1.0));
    uint _2302 = _2275 + 4u;
    float _2311 = isnan(1.0) ? _2288 : (isnan(_2288) ? 1.0 : min(_2288, 1.0));
    uint _2315 = _2275 | 1u;
    float _2326 = dot(vec3(cbLight._m0[_2275].xyz), vec3(_765, _766, _767));
    float _2329 = dot(vec3(cbLight._m0[_2315].xyz), vec3(_765, _766, _767));
    float _4638 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
    float _4649 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
    float _2334 = (isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0))) * 0.3183098733425140380859375;
    float _2336 = (isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0))) * 0.3183098733425140380859375;
    float _2343 = ((cbLight._m0[_2292].x * _2298) * _2336) + (((cbLight._m0[_2302].x * _2264) * _2311) * _2334);
    float _2344 = ((_2298 * cbLight._m0[_2292].y) * _2336) + (((cbLight._m0[_2302].y * _2266) * _2311) * _2334);
    float _2345 = ((_2298 * cbLight._m0[_2292].z) * _2336) + (((cbLight._m0[_2302].z * _2268) * _2311) * _2334);
    uvec4 _2349 = floatBitsToUint(cbLight._m0[_2275 + 12u]);
    bool _2351 = _2349.x == 0u;
    float _2453;
    float _2455;
    float _2457;
    if (_2351)
    {
        _2453 = _2343;
        _2455 = _2344;
        _2457 = _2345;
    }
    else
    {
        uint _2461 = _2275 + 6u;
        float _2477 = (dot(vec3(cbLight._m0[_2275 + 2u].xyz), vec3(_765, _766, _767)) * 0.5) + 0.5;
        float _2478 = _2477 * _2477;
        float _4660 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0));
        float _2479 = isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0));
        float _2480 = isnan(1.0) ? _2290 : (isnan(_2290) ? 1.0 : min(_2290, 1.0));
        _2453 = (((cbLight._m0[_2461].x * 0.3183098733425140380859375) * _2479) * _2480) + _2343;
        _2455 = (((cbLight._m0[_2461].y * 0.3183098733425140380859375) * _2479) * _2480) + _2344;
        _2457 = (((cbLight._m0[_2461].z * 0.3183098733425140380859375) * _2479) * _2480) + _2345;
    }
    bool _2460 = _2349.y == 0u;
    float _2515;
    float _2517;
    float _2519;
    if (_2460)
    {
        _2515 = _2453;
        _2517 = _2455;
        _2519 = _2457;
    }
    else
    {
        uint _2688 = _2275 + 7u;
        float _2704 = (dot(vec3(cbLight._m0[_2275 + 3u].xyz), vec3(_765, _766, _767)) * 0.5) + 0.5;
        float _2705 = _2704 * _2704;
        float _4676 = isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : max(_2705, 0.0));
        float _2706 = isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0));
        float _2707 = isnan(1.0) ? _2291 : (isnan(_2291) ? 1.0 : min(_2291, 1.0));
        _2515 = (((cbLight._m0[_2688].x * 0.3183098733425140380859375) * _2706) * _2707) + _2453;
        _2517 = (((cbLight._m0[_2688].y * 0.3183098733425140380859375) * _2706) * _2707) + _2455;
        _2519 = (((cbLight._m0[_2688].z * 0.3183098733425140380859375) * _2706) * _2707) + _2457;
    }
    uint _2522 = _2275 + 8u;
    float _2535 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2275].w)) * _768) * 0.949999988079071044921875);
    float _2536 = _2535 * _2535;
    float _2537 = cbLight._m0[_2275].x + _844;
    float _2538 = cbLight._m0[_2275].y + _845;
    float _2539 = cbLight._m0[_2275].z + _846;
    float _2543 = inversesqrt(dot(vec3(_2537, _2538, _2539), vec3(_2537, _2538, _2539)));
    float _2544 = _2543 * _2537;
    float _2545 = _2543 * _2538;
    float _2546 = _2543 * _2539;
    float _2547 = dot(vec3(_765, _766, _767), vec3(cbLight._m0[_2275].xyz));
    float _4692 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0));
    float _2550 = isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0));
    float _4703 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
    float _2551 = isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0));
    float _2552 = dot(vec3(_765, _766, _767), vec3(_2544, _2545, _2546));
    float _4714 = isnan(0.0) ? _2552 : (isnan(_2552) ? 0.0 : max(_2552, 0.0));
    float _2555 = isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0));
    float _2556 = dot(vec3(cbLight._m0[_2275].xyz), vec3(_2544, _2545, _2546));
    float _4725 = isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0));
    float _2560 = _2536 * _2536;
    float _2564 = ((_2555 * _2555) * (_2560 + (-1.0))) + 1.0;
    float _2572 = exp2(log2(1.0 - (isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0)))) * 5.0);
    float _2573 = 0.959999978542327880859375 - _923;
    float _2575 = 0.959999978542327880859375 - _924;
    float _2576 = 0.959999978542327880859375 - _925;
    float _2583 = 1.0 - _2536;
    float _2594 = (0.5 / (((_2551 * ((_2550 * _2583) + _2536)) + 9.9999999392252902907785028219223e-09) + (((_2551 * _2583) + _2536) * _2550))) * _2550;
    float _4736 = isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0));
    float _2596 = (isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0))) * (_2560 / ((_2564 * _2564) * 3.141590118408203125));
    uint _2610 = _2275 + 9u;
    float _2621 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2315].w)) * _768) * 0.949999988079071044921875);
    float _2622 = _2621 * _2621;
    float _2623 = cbLight._m0[_2315].x + _844;
    float _2624 = cbLight._m0[_2315].y + _845;
    float _2625 = cbLight._m0[_2315].z + _846;
    float _2629 = inversesqrt(dot(vec3(_2623, _2624, _2625), vec3(_2623, _2624, _2625)));
    float _2630 = _2629 * _2623;
    float _2631 = _2629 * _2624;
    float _2632 = _2629 * _2625;
    float _2633 = dot(vec3(_765, _766, _767), vec3(cbLight._m0[_2315].xyz));
    float _4747 = isnan(0.0) ? _2633 : (isnan(_2633) ? 0.0 : max(_2633, 0.0));
    float _2636 = isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0));
    float _2637 = dot(vec3(_765, _766, _767), vec3(_2630, _2631, _2632));
    float _4758 = isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : max(_2637, 0.0));
    float _2640 = isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0));
    float _2641 = dot(vec3(cbLight._m0[_2315].xyz), vec3(_2630, _2631, _2632));
    float _4769 = isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : max(_2641, 0.0));
    float _2645 = _2622 * _2622;
    float _2649 = ((_2640 * _2640) * (_2645 + (-1.0))) + 1.0;
    float _2656 = exp2(log2(1.0 - (isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0)))) * 5.0);
    float _2663 = 1.0 - _2622;
    float _2673 = (0.5 / (((_2551 * ((_2636 * _2663) + _2622)) + 9.9999999392252902907785028219223e-09) + (((_2551 * _2663) + _2622) * _2636))) * _2636;
    float _4780 = isnan(0.0) ? _2673 : (isnan(_2673) ? 0.0 : max(_2673, 0.0));
    float _2675 = (isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0))) * (_2645 / ((_2649 * _2649) * 3.141590118408203125));
    float _2685 = (((((_2656 * _2573) + _926) * cbLight._m0[_2610].x) * _2675) * _2298) + ((((cbLight._m0[_2522].x * _2264) * ((_2572 * _2573) + _926)) * _2596) * _2311);
    float _2686 = (((((_2656 * _2575) + _928) * cbLight._m0[_2610].y) * _2675) * _2298) + ((((cbLight._m0[_2522].y * _2266) * ((_2572 * _2575) + _928)) * _2596) * _2311);
    float _2687 = (((((_2656 * _2576) + _929) * cbLight._m0[_2610].z) * _2675) * _2298) + ((((cbLight._m0[_2522].z * _2268) * ((_2572 * _2576) + _929)) * _2596) * _2311);
    float _2743;
    float _2745;
    float _2747;
    if (_2351)
    {
        _2743 = _2685;
        _2745 = _2686;
        _2747 = _2687;
    }
    else
    {
        uint _2749 = _2275 + 2u;
        uint _2753 = _2275 + 10u;
        float _2767 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2749].w)) * _768) * 0.949999988079071044921875);
        float _2768 = _2767 * _2767;
        float _2769 = cbLight._m0[_2749].x + _844;
        float _2770 = cbLight._m0[_2749].y + _845;
        float _2771 = cbLight._m0[_2749].z + _846;
        float _2775 = inversesqrt(dot(vec3(_2769, _2770, _2771), vec3(_2769, _2770, _2771)));
        float _2776 = _2775 * _2769;
        float _2777 = _2775 * _2770;
        float _2778 = _2775 * _2771;
        float _2779 = dot(vec3(_765, _766, _767), vec3(cbLight._m0[_2749].xyz));
        float _4791 = isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : max(_2779, 0.0));
        float _2782 = isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0));
        float _2783 = dot(vec3(_765, _766, _767), vec3(_2776, _2777, _2778));
        float _4802 = isnan(0.0) ? _2783 : (isnan(_2783) ? 0.0 : max(_2783, 0.0));
        float _2786 = isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0));
        float _2787 = dot(vec3(cbLight._m0[_2749].xyz), vec3(_2776, _2777, _2778));
        float _4813 = isnan(0.0) ? _2787 : (isnan(_2787) ? 0.0 : max(_2787, 0.0));
        float _2791 = _2768 * _2768;
        float _2795 = ((_2786 * _2786) * (_2791 + (-1.0))) + 1.0;
        float _2802 = exp2(log2(1.0 - (isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0)))) * 5.0);
        float _2809 = 1.0 - _2768;
        float _2819 = (0.5 / (((_2551 * ((_2782 * _2809) + _2768)) + 9.9999999392252902907785028219223e-09) + (((_2551 * _2809) + _2768) * _2782))) * _2782;
        float _4824 = isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : max(_2819, 0.0));
        float _2821 = (isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0))) * (_2791 / ((_2795 * _2795) * 3.141590118408203125));
        float _2822 = isnan(1.0) ? _2290 : (isnan(_2290) ? 1.0 : min(_2290, 1.0));
        _2743 = (((((_2802 * _2573) + _926) * cbLight._m0[_2753].x) * _2821) * _2822) + _2685;
        _2745 = (((((_2802 * _2575) + _928) * cbLight._m0[_2753].y) * _2821) * _2822) + _2686;
        _2747 = (((((_2802 * _2576) + _929) * cbLight._m0[_2753].z) * _2821) * _2822) + _2687;
    }
    float _2853;
    float _2855;
    float _2857;
    if (_2460)
    {
        _2853 = _2743;
        _2855 = _2745;
        _2857 = _2747;
    }
    else
    {
        uint _2864 = _2275 + 3u;
        uint _2868 = _2275 + 11u;
        float _2882 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2864].w)) * _768) * 0.949999988079071044921875);
        float _2883 = _2882 * _2882;
        float _2884 = cbLight._m0[_2864].x + _844;
        float _2885 = cbLight._m0[_2864].y + _845;
        float _2886 = cbLight._m0[_2864].z + _846;
        float _2890 = inversesqrt(dot(vec3(_2884, _2885, _2886), vec3(_2884, _2885, _2886)));
        float _2891 = _2890 * _2884;
        float _2892 = _2890 * _2885;
        float _2893 = _2890 * _2886;
        float _2894 = dot(vec3(_765, _766, _767), vec3(cbLight._m0[_2864].xyz));
        float _4840 = isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : max(_2894, 0.0));
        float _2897 = isnan(1.0) ? _4840 : (isnan(_4840) ? 1.0 : min(_4840, 1.0));
        float _2898 = dot(vec3(_765, _766, _767), vec3(_2891, _2892, _2893));
        float _4851 = isnan(0.0) ? _2898 : (isnan(_2898) ? 0.0 : max(_2898, 0.0));
        float _2901 = isnan(1.0) ? _4851 : (isnan(_4851) ? 1.0 : min(_4851, 1.0));
        float _2902 = dot(vec3(cbLight._m0[_2864].xyz), vec3(_2891, _2892, _2893));
        float _4862 = isnan(0.0) ? _2902 : (isnan(_2902) ? 0.0 : max(_2902, 0.0));
        float _2906 = _2883 * _2883;
        float _2910 = ((_2901 * _2901) * (_2906 + (-1.0))) + 1.0;
        float _2917 = exp2(log2(1.0 - (isnan(1.0) ? _4862 : (isnan(_4862) ? 1.0 : min(_4862, 1.0)))) * 5.0);
        float _2924 = 1.0 - _2883;
        float _2934 = (0.5 / (((_2551 * ((_2897 * _2924) + _2883)) + 9.9999999392252902907785028219223e-09) + (((_2551 * _2924) + _2883) * _2897))) * _2897;
        float _4873 = isnan(0.0) ? _2934 : (isnan(_2934) ? 0.0 : max(_2934, 0.0));
        float _2936 = (isnan(1.0) ? _4873 : (isnan(_4873) ? 1.0 : min(_4873, 1.0))) * (_2906 / ((_2910 * _2910) * 3.141590118408203125));
        float _2937 = isnan(1.0) ? _2291 : (isnan(_2291) ? 1.0 : min(_2291, 1.0));
        _2853 = (((((_2917 * _2573) + _926) * cbLight._m0[_2868].x) * _2936) * _2937) + _2743;
        _2855 = (((((_2917 * _2575) + _928) * cbLight._m0[_2868].y) * _2936) * _2937) + _2745;
        _2857 = (((((_2917 * _2576) + _929) * cbLight._m0[_2868].z) * _2936) * _2937) + _2747;
    }
    float _3003;
    float _3005;
    float _3007;
    float _3009;
    float _3011;
    float _3013;
    if (_2273.y == 0u)
    {
        uvec4 _2958 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2959 = _2958.x;
        uint _2970 = uint((float(_2958.y) * floor(float(uint(cbSceneParam._m0[85u].y * _865) / _2959))) + floor(float(uint(cbSceneParam._m0[85u].x * _864) / _2959)));
        float _2980 = (log2(_2051 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2981 = isnan(0.0) ? _2980 : (isnan(_2980) ? 0.0 : max(_2980, 0.0));
        uint _2984 = uint(isnan(14.0) ? _2981 : (isnan(_2981) ? 14.0 : min(_2981, 14.0)));
        uvec4 _2989 = texelFetch(g_lightClusterGridBuffer, int(((_2984 << 2u) + (_2970 << 6u)) >> 2u));
        uint _2990 = _2989.x;
        uint _2991 = _2958.z;
        float _3070;
        float _3072;
        float _3074;
        float _3076;
        float _3078;
        float _3080;
        if (((((1u << ((_2991 >> 4u) & 15u)) + 4294967295u) & _2990) == 0u) || ((_2991 & 240u) == 0u))
        {
            _3070 = 0.0;
            _3072 = 0.0;
            _3074 = 0.0;
            _3076 = 0.0;
            _3078 = 0.0;
            _3080 = 0.0;
        }
        else
        {
            float _3071;
            float _3073;
            float _3075;
            float _3077;
            float _3079;
            float _3081;
            float _3222 = 0.0;
            float _3223 = 0.0;
            float _3224 = 0.0;
            float _3225 = 0.0;
            float _3226 = 0.0;
            float _3227 = 0.0;
            uint _3228 = 0u;
            uint _3237;
            bool _3238;
            for (;;)
            {
                _3237 = texelFetch(g_lightClassification, int((((_2984 << 5u) + (_2970 << 9u)) + (_3228 << 2u)) >> 2u)).x;
                _3238 = _3237 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3238)
                {
                    frontier_phi_71_pred = _3227;
                    frontier_phi_71_pred_1 = _3226;
                    frontier_phi_71_pred_2 = _3225;
                    frontier_phi_71_pred_3 = _3224;
                    frontier_phi_71_pred_4 = _3223;
                    frontier_phi_71_pred_5 = _3222;
                }
                else
                {
                    float _3367;
                    float _3368;
                    float _3369;
                    float _3370;
                    float _3371;
                    float _3372;
                    uint _3373;
                    _3367 = _3222;
                    _3368 = _3223;
                    _3369 = _3224;
                    _3370 = _3225;
                    _3371 = _3226;
                    _3372 = _3227;
                    _3373 = _3237;
                    float _3294;
                    float _3295;
                    float _3296;
                    float _3297;
                    float _3298;
                    float _3299;
                    for (;;)
                    {
                        uint _3377 = uint(findLSB(_3373)) + (_3228 << 5u);
                        uint _3374 = (_3373 + 4294967295u) & _3373;
                        uint _3379 = _3377 * 48u;
                        vec4 _3393 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3379)).x, texelFetch(g_PointLightRenderingBuffer, int(_3379 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3379 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3379 + 3u)).x));
                        uint _3399 = (_3377 * 48u) + 4u;
                        vec4 _3412 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3399)).x, texelFetch(g_PointLightRenderingBuffer, int(_3399 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3399 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3399 + 3u)).x));
                        uint _3418 = (_3377 * 48u) + 8u;
                        vec3 _3429 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3418)).x, texelFetch(g_PointLightRenderingBuffer, int(_3418 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3418 + 2u)).x));
                        float _3433 = _3393.x - _2049;
                        float _3434 = _3393.y - _2050;
                        float _3435 = _3393.z - _2051;
                        float _3436 = dot(vec3(_3433, _3434, _3435), vec3(_3433, _3434, _3435));
                        float _3439 = inversesqrt(_3436);
                        float _3440 = _3439 * _3433;
                        float _3441 = _3439 * _3434;
                        float _3442 = _3439 * _3435;
                        float _3443 = dot(vec3(_883, _886, _889), vec3(_3440, _3441, _3442));
                        float _3448 = 1.0 - (_3436 * _3393.w);
                        float _4899 = isnan(0.0) ? _3448 : (isnan(_3448) ? 0.0 : max(_3448, 0.0));
                        float _3449 = isnan(1.0) ? _4899 : (isnan(_4899) ? 1.0 : min(_4899, 1.0));
                        float _3450 = sqrt(_3436) * _3412.w;
                        float _3453 = 1.39999997615814208984375 / (_3450 + 1.39999997615814208984375);
                        float _3454 = _3453 * _3453;
                        float _3457 = ((1.0 - _3454) * _3443) + _3454;
                        float _3460 = _3450 * _3450;
                        float _3464 = ((isnan(0.0) ? _3457 : (isnan(_3457) ? 0.0 : max(_3457, 0.0))) * _3449) / ((_3460 * 0.699999988079071044921875) + 1.0);
                        float _3468 = (-0.0) - _2049;
                        float _3469 = (-0.0) - _2050;
                        float _3470 = (-0.0) - _2051;
                        float _3474 = inversesqrt(dot(vec3(_3468, _3469, _3470), vec3(_3468, _3469, _3470)));
                        float _3475 = _3474 * _3468;
                        float _3476 = _3474 * _3469;
                        float _3477 = _3474 * _3470;
                        float _3484 = exp2(log2(1.0 / ((_3460 * 3.5) + 5.0)) * 0.25);
                        float _3485 = 1.0 - _958;
                        float _3492 = sqrt(1.0 - ((1.0 - (_3485 * _3485)) * (1.0 - (_3484 * _3484))));
                        float _3493 = _3492 * _3492;
                        float _3494 = _3493 * _3493;
                        float _3495 = _3475 + _3440;
                        float _3496 = _3476 + _3441;
                        float _3497 = _3477 + _3442;
                        float _3501 = inversesqrt(dot(vec3(_3495, _3496, _3497), vec3(_3495, _3496, _3497)));
                        float _3505 = dot(vec3(_883, _886, _889), vec3(_3475, _3476, _3477));
                        float _4915 = isnan(0.0) ? _3505 : (isnan(_3505) ? 0.0 : max(_3505, 0.0));
                        float _3508 = isnan(1.0) ? _4915 : (isnan(_4915) ? 1.0 : min(_4915, 1.0));
                        float _3509 = dot(vec3(_883, _886, _889), vec3(_3501 * _3495, _3501 * _3496, _3501 * _3497));
                        float _4926 = isnan(0.0) ? _3509 : (isnan(_3509) ? 0.0 : max(_3509, 0.0));
                        float _3512 = isnan(1.0) ? _4926 : (isnan(_4926) ? 1.0 : min(_4926, 1.0));
                        float _3516 = ((_3512 * _3512) * (_3494 + (-1.0))) + 1.0;
                        float _3517 = _3453 * _3493;
                        float _3518 = _3517 * _3517;
                        float _3521 = ((1.0 - _3518) * _3443) + _3518;
                        float _4937 = isnan(0.0) ? _3521 : (isnan(_3521) ? 0.0 : max(_3521, 0.0));
                        float _3522 = isnan(1.0) ? _4937 : (isnan(_4937) ? 1.0 : min(_4937, 1.0));
                        float _3523 = 1.0 - _3493;
                        float _3533 = (0.5 / (((_3522 * ((_3508 * _3523) + _3493)) + 9.9999999392252902907785028219223e-09) + (((_3522 * _3523) + _3493) * _3508))) * _3522;
                        float _4948 = isnan(0.0) ? _3533 : (isnan(_3533) ? 0.0 : max(_3533, 0.0));
                        float _3544 = (((_3494 * 3.1415927410125732421875) * (isnan(1.0) ? _4948 : (isnan(_4948) ? 1.0 : min(_4948, 1.0)))) / ((_3516 * _3516) * ((_3460 * 2.1991131305694580078125) + 3.141590118408203125))) * _3449;
                        _3297 = (_3464 * _3412.x) + _3370;
                        _3298 = (_3464 * _3412.y) + _3371;
                        _3299 = (_3464 * _3412.z) + _3372;
                        _3294 = (_3544 * _3429.x) + _3367;
                        _3295 = (_3544 * _3429.y) + _3368;
                        _3296 = (_3544 * _3429.z) + _3369;
                        if (_3374 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3367 = _3294;
                            _3368 = _3295;
                            _3369 = _3296;
                            _3370 = _3297;
                            _3371 = _3298;
                            _3372 = _3299;
                            _3373 = _3374;
                        }
                    }
                    frontier_phi_71_pred = _3299;
                    frontier_phi_71_pred_1 = _3298;
                    frontier_phi_71_pred_2 = _3297;
                    frontier_phi_71_pred_3 = _3296;
                    frontier_phi_71_pred_4 = _3295;
                    frontier_phi_71_pred_5 = _3294;
                }
                _3081 = frontier_phi_71_pred;
                _3079 = frontier_phi_71_pred_1;
                _3077 = frontier_phi_71_pred_2;
                _3075 = frontier_phi_71_pred_3;
                _3073 = frontier_phi_71_pred_4;
                _3071 = frontier_phi_71_pred_5;
                uint _3229 = _3228 + 1u;
                if (_3229 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3222 = _3071;
                    _3223 = _3073;
                    _3224 = _3075;
                    _3225 = _3077;
                    _3226 = _3079;
                    _3227 = _3081;
                    _3228 = _3229;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3070 = _3071;
            _3072 = _3073;
            _3074 = _3075;
            _3076 = _3077;
            _3078 = _3079;
            _3080 = _3081;
        }
        uvec4 _3084 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3085 = _3084.z;
        uint _3087 = (_3085 >> 8u) & 15u;
        float _3190;
        float _3192;
        float _3194;
        float _3196;
        float _3198;
        float _3200;
        if (((4294967295u << _3087) & _2990) == 0u)
        {
            _3190 = _3070;
            _3192 = _3072;
            _3194 = _3074;
            _3196 = _3076;
            _3198 = _3078;
            _3200 = _3080;
        }
        else
        {
            float _3215 = inversesqrt(dot(vec3(_2049, _2050, _2051), vec3(_2049, _2050, _2051)));
            float _3216 = _3215 * _2049;
            float _3217 = _3215 * _2050;
            float _3218 = _3215 * _2051;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3087 < ((_3085 >> 12u) & 15u))
            {
                float _3191;
                float _3193;
                float _3195;
                float _3197;
                float _3199;
                float _3201;
                float _3350 = _3070;
                float _3351 = _3072;
                float _3352 = _3074;
                float _3353 = _3076;
                float _3354 = _3078;
                float _3355 = _3080;
                uint _3356 = _3087;
                uint _3365;
                bool _3366;
                for (;;)
                {
                    _3365 = texelFetch(g_lightClassification, int((((_2984 << 5u) + (_2970 << 9u)) + (_3356 << 2u)) >> 2u)).x;
                    _3366 = _3365 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3366)
                    {
                        frontier_phi_82_pred = _3355;
                        frontier_phi_82_pred_1 = _3354;
                        frontier_phi_82_pred_2 = _3353;
                        frontier_phi_82_pred_3 = _3352;
                        frontier_phi_82_pred_4 = _3351;
                        frontier_phi_82_pred_5 = _3350;
                    }
                    else
                    {
                        float _3558;
                        float _3559;
                        float _3560;
                        float _3561;
                        float _3562;
                        float _3563;
                        float _3852;
                        float _3853;
                        float _3854;
                        float _3855;
                        float _3856;
                        float _3857;
                        float _3571 = _3350;
                        float _3572 = _3351;
                        float _3573 = _3352;
                        float _3574 = _3353;
                        float _3575 = _3354;
                        float _3576 = _3355;
                        uint _3577 = _3365;
                        uint _3578;
                        vec4 _3603;
                        float _3604;
                        vec4 _3619;
                        vec3 _3631;
                        vec4 _3646;
                        vec4 _3662;
                        float _3708;
                        bool _3709;
                        for (;;)
                        {
                            uint _3588 = ((_3356 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3577));
                            _3578 = (_3577 + 4294967295u) & _3577;
                            uint _3590 = _3588 * 40u;
                            _3603 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3590)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 3u)).x));
                            _3604 = _3603.w;
                            uint _3606 = (_3588 * 40u) + 4u;
                            _3619 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3606)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3606 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3606 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3606 + 3u)).x));
                            uint _3621 = (_3588 * 40u) + 8u;
                            _3631 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3621)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3621 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3621 + 2u)).x));
                            uint _3633 = (_3588 * 40u) + 16u;
                            _3646 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3633)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3633 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3633 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3633 + 3u)).x));
                            uint _3649 = (_3588 * 40u) + 20u;
                            _3662 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3649)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3649 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3649 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3649 + 3u)).x));
                            uint _3664 = (_3588 * 40u) + 24u;
                            vec4 _3677 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3664)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3664 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3664 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3664 + 3u)).x));
                            uint _3683 = (_3588 * 40u) + 28u;
                            vec4 _3696 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3683)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3683 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3683 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3683 + 3u)).x));
                            _3708 = fma(_2051, _3696.z, fma(_2050, _3696.y, _3696.x * _2049)) + _3696.w;
                            _3709 = !((fma(_2051, _3677.z, fma(_2050, _3677.y, _3677.x * _2049)) + _3677.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3709)
                            {
                                float _3736 = _3603.x - _2049;
                                float _3737 = _3603.y - _2050;
                                float _3738 = _3603.z - _2051;
                                float _3739 = dot(vec3(_3736, _3737, _3738), vec3(_3736, _3737, _3738));
                                float _3742 = inversesqrt(_3739);
                                float _3743 = _3742 * _3736;
                                float _3744 = _3742 * _3737;
                                float _3745 = _3742 * _3738;
                                float _3749 = 1.0 - (_3739 / (_3604 * _3604));
                                float _4959 = isnan(0.0) ? _3749 : (isnan(_3749) ? 0.0 : max(_3749, 0.0));
                                float _3750 = isnan(1.0) ? _4959 : (isnan(_4959) ? 1.0 : min(_4959, 1.0));
                                float _3754 = sqrt(_3739) * _3619.w;
                                float _3756 = 1.39999997615814208984375 / (_3754 + 1.39999997615814208984375);
                                float _3757 = _3756 * _3756;
                                float _3760 = ((1.0 - _3757) * dot(vec3(_3743, _3744, _3745), vec3(_883, _886, _889))) + _3757;
                                float _3763 = _3754 * _3754;
                                float _3767 = (fma(_2051, _3646.z, fma(_2050, _3646.y, _3646.x * _2049)) + _3646.w) / _3708;
                                float _3768 = (fma(_2051, _3662.z, fma(_2050, _3662.y, _3662.x * _2049)) + _3662.w) / _3708;
                                float _3772 = 1.0 - dot(vec2(_3767, _3768), vec2(_3767, _3768));
                                float _4975 = isnan(0.0) ? _3772 : (isnan(_3772) ? 0.0 : max(_3772, 0.0));
                                float _3773 = isnan(1.0) ? _4975 : (isnan(_4975) ? 1.0 : min(_4975, 1.0));
                                float _3774 = _3773 * (((isnan(0.0) ? _3760 : (isnan(_3760) ? 0.0 : max(_3760, 0.0))) * _3750) / ((_3763 * 0.699999988079071044921875) + 1.0));
                                float _3786 = exp2(log2(1.0 / ((_3763 * 3.5) + 5.0)) * 0.25);
                                float _3787 = 1.0 - _958;
                                float _3794 = sqrt(1.0 - ((1.0 - (_3787 * _3787)) * (1.0 - (_3786 * _3786))));
                                float _3795 = _3794 * _3794;
                                float _3796 = _3795 * _3795;
                                float _3797 = _3743 - _3216;
                                float _3798 = _3744 - _3217;
                                float _3799 = _3745 - _3218;
                                float _3803 = inversesqrt(dot(vec3(_3797, _3798, _3799), vec3(_3797, _3798, _3799)));
                                float _3807 = dot(vec3(_883, _886, _889), vec3((-0.0) - _3216, (-0.0) - _3217, (-0.0) - _3218));
                                float _4986 = isnan(0.0) ? _3807 : (isnan(_3807) ? 0.0 : max(_3807, 0.0));
                                float _3810 = isnan(1.0) ? _4986 : (isnan(_4986) ? 1.0 : min(_4986, 1.0));
                                float _3811 = dot(vec3(_883, _886, _889), vec3(_3803 * _3797, _3803 * _3798, _3803 * _3799));
                                float _4997 = isnan(0.0) ? _3811 : (isnan(_3811) ? 0.0 : max(_3811, 0.0));
                                float _3814 = isnan(1.0) ? _4997 : (isnan(_4997) ? 1.0 : min(_4997, 1.0));
                                float _3818 = ((_3814 * _3814) * (_3796 + (-1.0))) + 1.0;
                                float _3819 = _3756 * _3795;
                                float _3820 = _3819 * _3819;
                                float _3826 = ((1.0 - _3820) * dot(vec3(_883, _886, _889), vec3(_3743, _3744, _3745))) + _3820;
                                float _5008 = isnan(0.0) ? _3826 : (isnan(_3826) ? 0.0 : max(_3826, 0.0));
                                float _3827 = isnan(1.0) ? _5008 : (isnan(_5008) ? 1.0 : min(_5008, 1.0));
                                float _3828 = 1.0 - _3795;
                                float _3838 = (0.5 / (((_3827 * ((_3810 * _3828) + _3795)) + 9.9999999392252902907785028219223e-09) + (((_3827 * _3828) + _3795) * _3810))) * _3827;
                                float _5019 = isnan(0.0) ? _3838 : (isnan(_3838) ? 0.0 : max(_3838, 0.0));
                                float _3848 = (_3773 * _3750) * (((_3796 * 3.1415927410125732421875) * (isnan(1.0) ? _5019 : (isnan(_5019) ? 1.0 : min(_5019, 1.0)))) / ((_3818 * _3818) * ((_3763 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3774 * _3619.z;
                                frontier_phi_88_pred_1 = _3774 * _3619.y;
                                frontier_phi_88_pred_2 = _3774 * _3619.x;
                                frontier_phi_88_pred_3 = _3848 * _3631.z;
                                frontier_phi_88_pred_4 = _3848 * _3631.y;
                                frontier_phi_88_pred_5 = _3848 * _3631.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3857 = frontier_phi_88_pred;
                            _3856 = frontier_phi_88_pred_1;
                            _3855 = frontier_phi_88_pred_2;
                            _3854 = frontier_phi_88_pred_3;
                            _3853 = frontier_phi_88_pred_4;
                            _3852 = frontier_phi_88_pred_5;
                            _3561 = _3855 + _3574;
                            _3562 = _3856 + _3575;
                            _3563 = _3857 + _3576;
                            _3558 = _3852 + _3571;
                            _3559 = _3853 + _3572;
                            _3560 = _3854 + _3573;
                            if (_3578 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3571 = _3558;
                                _3572 = _3559;
                                _3573 = _3560;
                                _3574 = _3561;
                                _3575 = _3562;
                                _3576 = _3563;
                                _3577 = _3578;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3563;
                        frontier_phi_82_pred_1 = _3562;
                        frontier_phi_82_pred_2 = _3561;
                        frontier_phi_82_pred_3 = _3560;
                        frontier_phi_82_pred_4 = _3559;
                        frontier_phi_82_pred_5 = _3558;
                    }
                    _3201 = frontier_phi_82_pred;
                    _3199 = frontier_phi_82_pred_1;
                    _3197 = frontier_phi_82_pred_2;
                    _3195 = frontier_phi_82_pred_3;
                    _3193 = frontier_phi_82_pred_4;
                    _3191 = frontier_phi_82_pred_5;
                    uint _3357 = _3356 + 1u;
                    if (_3357 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3350 = _3191;
                        _3351 = _3193;
                        _3352 = _3195;
                        _3353 = _3197;
                        _3354 = _3199;
                        _3355 = _3201;
                        _3356 = _3357;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3197;
                frontier_phi_63_64_ladder_1 = _3201;
                frontier_phi_63_64_ladder_2 = _3199;
                frontier_phi_63_64_ladder_3 = _3195;
                frontier_phi_63_64_ladder_4 = _3193;
                frontier_phi_63_64_ladder_5 = _3191;
            }
            else
            {
                frontier_phi_63_64_ladder = _3076;
                frontier_phi_63_64_ladder_1 = _3080;
                frontier_phi_63_64_ladder_2 = _3078;
                frontier_phi_63_64_ladder_3 = _3074;
                frontier_phi_63_64_ladder_4 = _3072;
                frontier_phi_63_64_ladder_5 = _3070;
            }
            _3190 = frontier_phi_63_64_ladder_5;
            _3192 = frontier_phi_63_64_ladder_4;
            _3194 = frontier_phi_63_64_ladder_3;
            _3196 = frontier_phi_63_64_ladder;
            _3198 = frontier_phi_63_64_ladder_2;
            _3200 = frontier_phi_63_64_ladder_1;
        }
        float _3205 = isnan(1.0) ? _942 : (isnan(_942) ? 1.0 : min(_942, 1.0));
        _3003 = (_3205 * _3196) + _2515;
        _3005 = (_3205 * _3198) + _2517;
        _3007 = (_3205 * _3200) + _2519;
        _3009 = ((_3190 * _926) * _3205) + _2853;
        _3011 = ((_3192 * _928) * _3205) + _2855;
        _3013 = ((_3194 * _929) * _3205) + _2857;
    }
    else
    {
        _3003 = _2515;
        _3005 = _2517;
        _3007 = _2519;
        _3009 = _2853;
        _3011 = _2855;
        _3013 = _2857;
    }
    float _5035 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
    float _5046 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
    float _5057 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
    float _3030 = ((isnan(1.0) ? _5035 : (isnan(_5035) ? 1.0 : min(_5035, 1.0))) * (_3003 + ((isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0))) * _942))) + ((_3009 + ((isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0))) * _1781)) * cbPerFrame._m0[3u].x);
    float _3031 = ((isnan(1.0) ? _5046 : (isnan(_5046) ? 1.0 : min(_5046, 1.0))) * (_3005 + ((isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0))) * _942))) + ((_3011 + ((isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0))) * _1781)) * cbPerFrame._m0[3u].x);
    float _3032 = ((isnan(1.0) ? _5057 : (isnan(_5057) ? 1.0 : min(_5057, 1.0))) * (_3007 + ((isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0))) * _942))) + ((_3013 + ((isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0))) * _1781)) * cbPerFrame._m0[3u].x);
    uint _3033 = _255 + 6u;
    float _3041 = _864 / cbSceneParam._m0[86u].x;
    float _3042 = _865 / cbSceneParam._m0[86u].y;
    vec4 _3056 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3041, _3042, (log2((isnan(cbSceneParam._m0[77u].w) ? _787 : (isnan(_787) ? cbSceneParam._m0[77u].w : min(_787, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3058 = _3056.x;
    float _3059 = _3056.y;
    float _3060 = _3056.z;
    float _3061 = _3056.w;
    float _3132;
    float _3134;
    float _3136;
    float _3138;
    if (_787 > cbSceneParam._m0[78u].w)
    {
        float _3095 = isnan(_787) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _787 : min(cbSceneParam._m0[80u].w, _787));
        float _3096 = _3095 / _787;
        float _3107 = _3096 * _837;
        float _3108 = _838 * _3096;
        float _3109 = (-0.0) - _3108;
        float _3110 = _3096 * _839;
        float _3112 = (cbSceneParam._m0[77u].w * _3109) / _3095;
        float _3113 = _3112 + cbSceneParam._m0[79u].w;
        float _3114 = cbSceneParam._m0[79u].w - _3108;
        float _3120 = sqrt(((_3107 * _3107) + (_3108 * _3108)) + (_3110 * _3110));
        float _3123 = (1.0 - (cbSceneParam._m0[77u].w / _3095)) * _3120;
        float _3128 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3130 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3307;
        if (abs((_3109 - _3112) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3307 = ((((_3113 > 0.0) ? exp2(_3128 * _3113) : (2.0 - exp2(_3130 * _3113))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3123;
        }
        else
        {
            float _3251 = 1.0 / cbSceneParam._m0[80u].x;
            float _3252 = isnan(_3114) ? _3113 : (isnan(_3113) ? _3114 : max(_3113, _3114));
            float _3253 = isnan(_3114) ? _3113 : (isnan(_3113) ? _3114 : min(_3113, _3114));
            float _3262 = isnan(0.0) ? _3252 : (isnan(_3252) ? 0.0 : min(_3252, 0.0));
            float _3263 = isnan(0.0) ? _3253 : (isnan(_3253) ? 0.0 : min(_3253, 0.0));
            _3307 = ((abs(_3120 / _3109) * cbSceneParam._m0[80u].y) * ((((_3262 - _3263) * 2.0) - ((exp2(_3128 * (isnan(0.0) ? _3252 : (isnan(_3252) ? 0.0 : max(_3252, 0.0)))) - exp2(_3128 * (isnan(0.0) ? _3253 : (isnan(_3253) ? 0.0 : max(_3253, 0.0))))) * _3251)) - ((exp2(_3130 * _3262) - exp2(_3130 * _3263)) * _3251))) + (_3123 * cbSceneParam._m0[80u].z);
        }
        vec4 _3309 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3041, _3042, 1.0), 0.0);
        float _3318 = exp2((_3307 * (-1.44269502162933349609375)) * (1.0 - _3309.w));
        float _3319 = log2(_3318);
        float _3335 = log2(_3061);
        _3132 = (exp2(_3335 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3319 * cbSceneParam._m0[78u].x)) * _3309.x) / cbSceneParam._m0[78u].x)) + _3058;
        _3134 = (exp2(_3335 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3319 * cbSceneParam._m0[78u].y)) * _3309.y) / cbSceneParam._m0[78u].y)) + _3059;
        _3136 = (exp2(_3335 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3319 * cbSceneParam._m0[78u].z)) * _3309.z) / cbSceneParam._m0[78u].z)) + _3060;
        _3138 = _3318 * _3061;
    }
    else
    {
        _3132 = _3058;
        _3134 = _3059;
        _3136 = _3060;
        _3138 = _3061;
    }
    bool _3345;
    vec4 _3148;
    vec4 _3170;
    float _3172;
    float _3176;
    float _3177;
    float _3178;
    float _3179;
    bool _3189;
    for (;;)
    {
        _3148 = cbMatDynParam._m0[0u];
        float _3150 = roundEven(_3148.y);
        bool _3151 = _3150 == 3.0;
        float _3152 = log2(_3138);
        float _3159 = exp2(_3152 * cbSceneParam._m0[78u].x) * _3030;
        float _3160 = exp2(_3152 * cbSceneParam._m0[78u].y) * _3031;
        float _3161 = exp2(_3152 * cbSceneParam._m0[78u].z) * _3032;
        float _3168 = _853 + (-0.5);
        _3170 = cbMtdParam._m0[1u];
        _3172 = _3170.y * _3168;
        float _3175 = (_3150 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3176 = _3175 * (_3151 ? _3159 : (_3159 + (cbSceneParam._m0[72u].w * _3132)));
        _3177 = _3175 * (_3151 ? _3160 : (_3160 + (cbSceneParam._m0[72u].w * _3134)));
        _3178 = _3175 * (_3151 ? _3161 : (_3161 + (cbSceneParam._m0[72u].w * _3136)));
        _3179 = _3168 * 0.999000012874603271484375;
        _3189 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3189)
        {
            if ((cbInstanceData._m0[_255 + 7u].x + _3179) < 0.5)
            {
                _3345 = true;
                break;
            }
        }
        uint _3286 = _902 + uint(_3148.w);
        if ((cbInstanceData._m0[_3286].w < 1.0) && ((cbInstanceData._m0[_3286].w + _3179) < 0.5))
        {
            _3345 = true;
            break;
        }
        if ((_3172 + 1.0) < _3170.x)
        {
            _3345 = true;
            break;
        }
        _3345 = false;
        break;
    }
    float _3549;
    if (_3345)
    {
        discard_state = true;
        _3549 = 0.0;
    }
    else
    {
        _3549 = cbInstanceData._m0[_3033].w;
    }
    SV_Target.x = _3176;
    SV_Target.y = _3177;
    SV_Target.z = _3178;
    SV_Target.w = _3549;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3033].w;
    discard_exit();
}


