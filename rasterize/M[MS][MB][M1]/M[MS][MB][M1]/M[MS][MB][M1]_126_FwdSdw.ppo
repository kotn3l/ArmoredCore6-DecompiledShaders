#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1197;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _212 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _213 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _214 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _220 = inversesqrt(dot(vec3(_212, _213, _214), vec3(_212, _213, _214)));
    float _227 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _234 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _240 = uint(roundEven(NORMAL.w)) * 13u;
    uint _246 = _240 + 1u;
    uint _250 = _240 + 2u;
    float _259 = sqrt(((cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x) + (cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x)) + (cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x));
    float _260 = _259 * TEXCOORD.z;
    float _261 = _259 * TEXCOORD.w;
    vec4 _281 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _287 = _281.x * cbMtdParam._m0[11u].x;
    float _288 = _281.y * cbMtdParam._m0[11u].y;
    float _289 = _281.z * cbMtdParam._m0[11u].z;
    vec4 _308 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _260) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _261) + cbTextureTilingScale._m0[5u].w));
    vec4 _346 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _348 = _346.x;
    float _360 = dot(vec4(_348, _346.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _377 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_348 - _360) * cbMtdParam._m0[24u].y) + _360) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3806 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _378 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
    float _385 = (_378 * ((_308.x * cbMtdParam._m0[12u].x) - _287)) + _287;
    float _386 = (_378 * ((_308.y * cbMtdParam._m0[12u].y) - _288)) + _288;
    float _387 = (_378 * ((_308.z * cbMtdParam._m0[12u].z) - _289)) + _289;
    vec4 _406 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _260) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _261) + cbTextureTilingScale._m0[14u].w));
    vec4 _426 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _260) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _261) + cbTextureTilingScale._m0[4u].w));
    vec4 _443 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _445 = _443.x;
    float _446 = _443.y;
    float _447 = _443.z;
    float _456 = ((_426.z - _447) * _378) + _447;
    float _459 = ((((_426.x - _445) * _378) + _445) * 2.0) + (-1.0);
    float _461 = ((((_426.y - _446) * _378) + _446) * 2.0) + (-1.0);
    float _462 = dot(vec2(_459, _461), vec2(_459, _461));
    float _3817 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _467 = sqrt(1.0 - (isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0))));
    vec4 _483 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _508 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _260) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _261) + cbTextureTilingScale._m0[11u].w));
    float _510 = _508.x;
    float _511 = 1.0 - _510;
    float _524 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_510 - _511) * cbMtdParam._m0[24u].z) + _511) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3828 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _525 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
    float _532 = (_525 * ((_406.x * cbMtdParam._m0[18u].x) - _385)) + _385;
    float _533 = (_525 * ((_406.y * cbMtdParam._m0[18u].y) - _386)) + _386;
    float _534 = (_525 * ((_406.z * cbMtdParam._m0[18u].z) - _387)) + _387;
    vec4 _546 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _560 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _562 = _560.x;
    float _580 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _260) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _261) + cbTextureTilingScale._m0[9u].w)).x - _562) * _378) + _562;
    float _584 = ((_546.x - _580) * cbMtdParam._m0[19u].z) + _580;
    float _586 = _584 - (_584 * _525);
    float _590 = (cbMtdParam._m0[19u].w * (_483.z - _456)) + _456;
    vec4 _603 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _260) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _261) + cbTextureTilingScale._m0[15u].w));
    float _610 = (_603.x * 2.0) + (-1.0);
    float _611 = (_603.y * 2.0) + (-1.0);
    float _612 = dot(vec2(_610, _611), vec2(_610, _611));
    float _3839 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _620 = (_525 * (_603.z - _590)) + _590;
    float _623 = (((_483.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _459;
    float _624 = (((_483.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _461;
    float _636 = (((_610 - _623) + (cbMtdParam._m0[21u].x * _623)) * _525) + _623;
    float _637 = (((_611 - _624) + (cbMtdParam._m0[21u].x * _624)) * _525) + _624;
    float _638 = (_525 * (sqrt(1.0 - (isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0)))) - _467)) + _467;
    float _643 = cbMtdParam._m0[22u].x + _483.w;
    float _646 = fma(_638, _227 * NORMAL.x, fma(_637, _234 * TANGENT.x, (_220 * _212) * _636));
    float _649 = fma(_638, _227 * NORMAL.y, fma(_637, _234 * TANGENT.y, (_220 * _213) * _636));
    float _652 = fma(_638, _227 * NORMAL.z, fma(_637, _234 * TANGENT.z, (_220 * _214) * _636));
    float _656 = inversesqrt(dot(vec3(_646, _649, _652), vec3(_646, _649, _652)));
    float _657 = _656 * _646;
    float _658 = _656 * _649;
    float _659 = _656 * _652;
    float _3850 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _660 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
    float _3861 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _3872 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    float _3883 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _3894 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _3905 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
    float _665 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
    float _679 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _720 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _730 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _720);
    float _731 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _720);
    float _732 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _720);
    float _736 = inversesqrt(dot(vec3(_730, _731, _732), vec3(_730, _731, _732)));
    float _737 = _730 * _736;
    float _738 = _731 * _736;
    float _739 = _732 * _736;
    float _745 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _746 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _764 = fma(_659, cbSceneParam._m0[5u].z, fma(_658, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _657));
    float _767 = fma(_659, cbSceneParam._m0[6u].z, fma(_658, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _657));
    float _770 = fma(_659, cbSceneParam._m0[7u].z, fma(_658, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _657));
    uint _784 = (_240 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _790 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0)))) * cbInstanceData._m0[_784].x;
    float _791 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0)))) * cbInstanceData._m0[_784].y;
    float _792 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0)))) * cbInstanceData._m0[_784].z;
    float _3916 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
    float _793 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
    float _3927 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
    float _794 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
    float _3938 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
    float _795 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
    float _796 = 1.0 - _665;
    float _797 = _793 * _796;
    float _798 = _794 * _796;
    float _799 = _795 * _796;
    float _804 = (_793 + (-0.039999999105930328369140625)) * _665;
    float _805 = (_794 + (-0.039999999105930328369140625)) * _665;
    float _806 = (_795 + (-0.039999999105930328369140625)) * _665;
    float _807 = _804 + 0.039999999105930328369140625;
    float _809 = _805 + 0.039999999105930328369140625;
    float _810 = _806 + 0.039999999105930328369140625;
    vec4 _819 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _745, cbSceneParam._m0[86u].y * _746));
    float _823 = ((isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0))) * TEXCOORD_5.w) * _819.x;
    float _824 = dot(vec3(_657, _658, _659), vec3(_737, _738, _739));
    float _827 = _824 * 2.0;
    float _831 = (_827 * _657) - _737;
    float _832 = (_827 * _658) - _738;
    float _833 = (_827 * _659) - _739;
    float _837 = abs(dot(vec3(_737, _738, _739), vec3(_657, _658, _659)));
    float _3949 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
    float _839 = sqrt(_660);
    float _852 = exp2((_839 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_839 * 3.0));
    float _858 = (1.0 - _852) * ((_839 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _859 = _852 * _839;
    float _887 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _891 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _895 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1196;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _921 = fma(_895, cbModelParam._m0[26u].z, fma(_891, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _887));
        float _925 = fma(_895, cbModelParam._m0[27u].z, fma(_891, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _887));
        float _929 = fma(_895, cbModelParam._m0[28u].z, fma(_891, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _887));
        float _954 = _887 + _657;
        float _955 = _891 + _658;
        float _956 = _895 + _659;
        float _966 = fma(_956, cbModelParam._m0[26u].z, fma(_955, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _954)) - _921;
        float _967 = fma(_956, cbModelParam._m0[27u].z, fma(_955, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _954)) - _925;
        float _968 = fma(_956, cbModelParam._m0[28u].z, fma(_955, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _954)) - _929;
        float _972 = inversesqrt(dot(vec3(_966, _967, _968), vec3(_966, _967, _968)));
        float _985 = ((_972 * _966) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_921 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _986 = ((_972 * _967) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_925 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _987 = ((_972 * _968) / cbModelParam._m0[34u].z) + ((((((_929 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _990 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_985, _986, _987), 0.0);
        vec4 _997 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_985, _986, _987), 0.0);
        vec4 _1004 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_985, _986, _987), 0.0);
        vec4 _1011 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_985, _986, _987), 0.0);
        float _1024 = exp2((_990.w + (-0.5)) * 20.0) * 2.0;
        float _1025 = _1024 * (_990.x + (-0.5));
        float _1026 = _1024 * (_990.y + (-0.5));
        float _1027 = _1024 * (_990.z + (-0.5));
        float _1034 = exp2((_997.w + (-0.5)) * 20.0) * 2.0;
        float _1035 = _1034 * (_997.x + (-0.5));
        float _1036 = _1034 * (_997.y + (-0.5));
        float _1037 = _1034 * (_997.z + (-0.5));
        float _1044 = exp2((_1004.w + (-0.5)) * 20.0) * 2.0;
        float _1045 = _1044 * (_1004.x + (-0.5));
        float _1046 = _1044 * (_1004.y + (-0.5));
        float _1047 = _1044 * (_1004.z + (-0.5));
        float _1054 = exp2((_1011.w + (-0.5)) * 20.0) * 2.0;
        float _1055 = _1054 * (_1011.x + (-0.5));
        float _1056 = _1054 * (_1011.y + (-0.5));
        float _1057 = _1054 * (_1011.z + (-0.5));
        float _1058 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1059 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1060 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1061 = _1025 * 0.5;
        float _1062 = _1035 * 0.5;
        float _1063 = _1045 * 0.5;
        float _1064 = dot(vec3(_1061, _1062, _1063), vec3(_1061, _1062, _1063));
        float _1069 = (_1064 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1064);
        float _1078 = (dot(vec3(_657, _658, _659), vec3(_1069 * _1061, _1069 * _1062, _1069 * _1063)) + 1.0) * 0.5;
        float _3975 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1088 = sqrt(((_1062 * _1062) + (_1061 * _1061)) + (_1063 * _1063)) / (_1058 + 9.9999997473787516355514526367188e-06);
        float _3986 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1089 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
        float _1090 = _1089 * 2.0;
        float _1094 = (1.0 - _1089) / (_1089 + 1.0);
        float _3997 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1095 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
        float _1104 = ((((1.0 - _1095) * (_1090 + 2.0)) * exp2(log2(isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0))) * (_1090 + 1.0))) + _1095) * _1058;
        float _1105 = _1026 * 0.5;
        float _1106 = _1036 * 0.5;
        float _1107 = _1046 * 0.5;
        float _1108 = dot(vec3(_1105, _1106, _1107), vec3(_1105, _1106, _1107));
        float _1113 = (_1108 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1108);
        float _1121 = (dot(vec3(_657, _658, _659), vec3(_1113 * _1105, _1113 * _1106, _1113 * _1107)) + 1.0) * 0.5;
        float _4008 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1130 = sqrt(((_1106 * _1106) + (_1105 * _1105)) + (_1107 * _1107)) / (_1059 + 9.9999997473787516355514526367188e-06);
        float _4019 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1131 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
        float _1132 = _1131 * 2.0;
        float _1136 = (1.0 - _1131) / (_1131 + 1.0);
        float _4030 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1137 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
        float _1146 = ((((1.0 - _1137) * (_1132 + 2.0)) * exp2(log2(isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0))) * (_1132 + 1.0))) + _1137) * _1059;
        float _1147 = _1027 * 0.5;
        float _1148 = _1037 * 0.5;
        float _1149 = _1047 * 0.5;
        float _1150 = dot(vec3(_1147, _1148, _1149), vec3(_1147, _1148, _1149));
        float _1155 = (_1150 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1150);
        float _1163 = (dot(vec3(_657, _658, _659), vec3(_1155 * _1147, _1155 * _1148, _1155 * _1149)) + 1.0) * 0.5;
        float _4041 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1172 = sqrt(((_1148 * _1148) + (_1147 * _1147)) + (_1149 * _1149)) / (_1060 + 9.9999997473787516355514526367188e-06);
        float _4052 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1173 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
        float _1174 = _1173 * 2.0;
        float _1178 = (1.0 - _1173) / (_1173 + 1.0);
        float _4063 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1179 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
        float _1188 = ((((1.0 - _1179) * (_1174 + 2.0)) * exp2(log2(isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0))) * (_1174 + 1.0))) + _1179) * _1060;
        _1196 = _1027;
        _1198 = _1026;
        _1199 = _1025;
        _1200 = _1037;
        _1201 = _1036;
        _1202 = _1035;
        _1203 = _1047;
        _1204 = _1046;
        _1205 = _1045;
        _1206 = _1060;
        _1207 = _1059;
        _1208 = _1058;
        _1209 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0)));
        _1210 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0)));
        _1211 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0)));
    }
    else
    {
        _1196 = _1197;
        _1198 = _1197;
        _1199 = _1197;
        _1200 = _1197;
        _1201 = _1197;
        _1202 = _1197;
        _1203 = _1197;
        _1204 = _1197;
        _1205 = _1197;
        _1206 = _1197;
        _1207 = _1197;
        _1208 = _1197;
        _1209 = 0.0;
        _1210 = 0.0;
        _1211 = 0.0;
    }
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1236 = fma(_895, cbModelParam._m0[30u].z, fma(_891, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _887));
        float _1240 = fma(_895, cbModelParam._m0[31u].z, fma(_891, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _887));
        float _1244 = fma(_895, cbModelParam._m0[32u].z, fma(_891, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _887));
        float _1267 = _887 + _657;
        float _1268 = _891 + _658;
        float _1269 = _895 + _659;
        float _1279 = fma(_1269, cbModelParam._m0[30u].z, fma(_1268, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1267)) - _1236;
        float _1280 = fma(_1269, cbModelParam._m0[31u].z, fma(_1268, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1267)) - _1240;
        float _1281 = fma(_1269, cbModelParam._m0[32u].z, fma(_1268, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1267)) - _1244;
        float _1285 = inversesqrt(dot(vec3(_1279, _1280, _1281), vec3(_1279, _1280, _1281)));
        float _1298 = ((_1285 * _1279) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1236 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1299 = ((_1285 * _1280) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1240 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1300 = ((_1285 * _1281) / cbModelParam._m0[35u].z) + ((((((_1244 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1302 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1298, _1299, _1300), 0.0);
        vec4 _1309 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1298, _1299, _1300), 0.0);
        vec4 _1316 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1298, _1299, _1300), 0.0);
        vec4 _1323 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1298, _1299, _1300), 0.0);
        float _1335 = exp2((_1302.w + (-0.5)) * 20.0) * 2.0;
        float _1336 = _1335 * (_1302.x + (-0.5));
        float _1337 = _1335 * (_1302.y + (-0.5));
        float _1338 = _1335 * (_1302.z + (-0.5));
        float _1345 = exp2((_1309.w + (-0.5)) * 20.0) * 2.0;
        float _1346 = _1345 * (_1309.x + (-0.5));
        float _1347 = _1345 * (_1309.y + (-0.5));
        float _1348 = _1345 * (_1309.z + (-0.5));
        float _1355 = exp2((_1316.w + (-0.5)) * 20.0) * 2.0;
        float _1356 = _1355 * (_1316.x + (-0.5));
        float _1357 = _1355 * (_1316.y + (-0.5));
        float _1358 = _1355 * (_1316.z + (-0.5));
        float _1365 = exp2((_1323.w + (-0.5)) * 20.0) * 2.0;
        float _1366 = _1365 * (_1323.x + (-0.5));
        float _1367 = _1365 * (_1323.y + (-0.5));
        float _1368 = _1365 * (_1323.z + (-0.5));
        float _1369 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1370 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1371 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1372 = _1336 * 0.5;
        float _1373 = _1346 * 0.5;
        float _1374 = _1356 * 0.5;
        float _1375 = dot(vec3(_1372, _1373, _1374), vec3(_1372, _1373, _1374));
        float _1380 = (_1375 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1375);
        float _1388 = (dot(vec3(_657, _658, _659), vec3(_1380 * _1372, _1380 * _1373, _1380 * _1374)) + 1.0) * 0.5;
        float _4104 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1397 = sqrt(((_1373 * _1373) + (_1372 * _1372)) + (_1374 * _1374)) / (_1369 + 9.9999997473787516355514526367188e-06);
        float _4115 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1398 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
        float _1399 = _1398 * 2.0;
        float _1403 = (1.0 - _1398) / (_1398 + 1.0);
        float _4126 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1404 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
        float _1413 = ((((1.0 - _1404) * (_1399 + 2.0)) * exp2(log2(isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0))) * (_1399 + 1.0))) + _1404) * _1369;
        float _1414 = _1337 * 0.5;
        float _1415 = _1347 * 0.5;
        float _1416 = _1357 * 0.5;
        float _1417 = dot(vec3(_1414, _1415, _1416), vec3(_1414, _1415, _1416));
        float _1422 = (_1417 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1417);
        float _1430 = (dot(vec3(_657, _658, _659), vec3(_1422 * _1414, _1422 * _1415, _1422 * _1416)) + 1.0) * 0.5;
        float _4137 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1439 = sqrt(((_1415 * _1415) + (_1414 * _1414)) + (_1416 * _1416)) / (_1370 + 9.9999997473787516355514526367188e-06);
        float _4148 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1440 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
        float _1441 = _1440 * 2.0;
        float _1445 = (1.0 - _1440) / (_1440 + 1.0);
        float _4159 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1446 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
        float _1455 = ((((1.0 - _1446) * (_1441 + 2.0)) * exp2(log2(isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0))) * (_1441 + 1.0))) + _1446) * _1370;
        float _1456 = _1338 * 0.5;
        float _1457 = _1348 * 0.5;
        float _1458 = _1358 * 0.5;
        float _1459 = dot(vec3(_1456, _1457, _1458), vec3(_1456, _1457, _1458));
        float _1464 = (_1459 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1459);
        float _1472 = (dot(vec3(_657, _658, _659), vec3(_1464 * _1456, _1464 * _1457, _1464 * _1458)) + 1.0) * 0.5;
        float _4170 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1481 = sqrt(((_1457 * _1457) + (_1456 * _1456)) + (_1458 * _1458)) / (_1371 + 9.9999997473787516355514526367188e-06);
        float _4181 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1482 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
        float _1483 = _1482 * 2.0;
        float _1487 = (1.0 - _1482) / (_1482 + 1.0);
        float _4192 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1488 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
        float _1497 = ((((1.0 - _1488) * (_1483 + 2.0)) * exp2(log2(isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0))) * (_1483 + 1.0))) + _1488) * _1371;
        _1505 = _1338;
        _1506 = _1337;
        _1507 = _1336;
        _1508 = _1348;
        _1509 = _1347;
        _1510 = _1346;
        _1511 = _1358;
        _1512 = _1357;
        _1513 = _1356;
        _1514 = _1371;
        _1515 = _1370;
        _1516 = _1369;
        _1517 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0)));
        _1518 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0)));
        _1519 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0)));
    }
    else
    {
        _1505 = _1197;
        _1506 = _1197;
        _1507 = _1197;
        _1508 = _1197;
        _1509 = _1197;
        _1510 = _1197;
        _1511 = _1197;
        _1512 = _1197;
        _1513 = _1197;
        _1514 = _1197;
        _1515 = _1197;
        _1516 = _1197;
        _1517 = 0.0;
        _1518 = 0.0;
        _1519 = 0.0;
    }
    float _1529 = (cbModelParam._m0[1u].x * (_1517 - _1209)) + _1209;
    float _1530 = (cbModelParam._m0[1u].x * (_1518 - _1210)) + _1210;
    float _1531 = (cbModelParam._m0[1u].x * (_1519 - _1211)) + _1211;
    float _1552 = fma(_1531, cbSceneParam._m0[89u].z, fma(_1530, cbSceneParam._m0[89u].y, _1529 * cbSceneParam._m0[89u].x));
    float _1555 = fma(_1531, cbSceneParam._m0[90u].z, fma(_1530, cbSceneParam._m0[90u].y, _1529 * cbSceneParam._m0[90u].x));
    float _1558 = fma(_1531, cbSceneParam._m0[91u].z, fma(_1530, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1529));
    float _1573 = _831 * 0.5;
    float _1574 = _832 * 0.5;
    float _1575 = _833 * 0.5;
    float _1576 = dot(vec4(_1573, _1574, _1575, 1.0), vec4(_1507, _1510, _1513, _1516));
    float _1579 = dot(vec4(_1573, _1574, _1575, 1.0), vec4(_1506, _1509, _1512, _1515));
    float _1582 = dot(vec4(_1573, _1574, _1575, 1.0), vec4(_1505, _1508, _1511, _1514));
    float _1616;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1589 = dot(vec4(_1573, _1574, _1575, 1.0), vec4(_1196, _1200, _1203, _1206));
        float _1593 = dot(vec4(_1573, _1574, _1575, 1.0), vec4(_1198, _1201, _1204, _1207));
        float _1597 = dot(vec4(_1573, _1574, _1575, 1.0), vec4(_1199, _1202, _1205, _1208));
        float _1604 = dot(vec4(cbModelParam._m0[39u]), vec4(_1573, _1574, _1575, 1.0));
        _1616 = dot(vec3(isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0)), isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0)), isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1604) ? 0.0 : (isnan(0.0) ? _1604 : max(0.0, _1604))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1616 = 1.0;
    }
    float _1627;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1618 = dot(vec4(cbModelParam._m0[40u]), vec4(_1573, _1574, _1575, 1.0));
        _1627 = dot(vec3(isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0)), isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0)), isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1618) ? 0.0 : (isnan(0.0) ? _1618 : max(0.0, _1618))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1627 = 1.0;
    }
    float _1631 = (_1627 * cbModelParam._m0[1u].x) + (_1616 * (1.0 - cbModelParam._m0[1u].x));
    float _1641 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _660);
    float _1642 = isnan(_1641) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1641 : min(cbModelParam._m0[25u].z, _1641));
    float _1722;
    float _1724;
    float _1726;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1689 = fma(_895, cbModelParam._m0[13u].z, fma(_891, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _887)) + cbModelParam._m0[13u].w;
        float _1693 = fma(_895, cbModelParam._m0[14u].z, fma(_891, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _887)) + cbModelParam._m0[14u].w;
        float _1697 = fma(_895, cbModelParam._m0[15u].z, fma(_891, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _887)) + cbModelParam._m0[15u].w;
        float _1700 = fma(_833, cbModelParam._m0[13u].z, fma(_832, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _831));
        float _1703 = fma(_833, cbModelParam._m0[14u].z, fma(_832, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _831));
        float _1706 = fma(_833, cbModelParam._m0[15u].z, fma(_832, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _831));
        float _1734;
        if (_1700 > 0.0)
        {
            _1734 = abs((1.0 - _1689) / _1700);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1700 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1689 + 1.0) / _1700);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1734 = frontier_phi_14_12_ladder;
        }
        float _1905;
        if (_1703 > 0.0)
        {
            _1905 = abs((1.0 - _1693) / _1703);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1703 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1693 + 1.0) / _1703);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1905 = frontier_phi_23_19_ladder;
        }
        float _2200;
        if (_1706 > 0.0)
        {
            _2200 = abs((1.0 - _1697) / _1706);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1706 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1697 + 1.0) / _1706);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2200 = frontier_phi_35_30_ladder;
        }
        float _2202 = isnan(_1905) ? _1734 : (isnan(_1734) ? _1905 : min(_1734, _1905));
        float _2203 = isnan(_2200) ? _2202 : (isnan(_2202) ? _2200 : min(_2202, _2200));
        float _2207 = (_2203 * _1700) + _1689;
        float _2208 = (_2203 * _1703) + _1693;
        float _2209 = (_2203 * _1706) + _1697;
        float _2210 = _2203 * 9.9999997473787516355514526367188e-05;
        float _2212 = (-1.0) - _2210;
        float _2214 = _2210 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2209 > _2214) || ((_2209 < _2212) || ((_2208 > _2214) || ((_2208 < _2212) || ((_2207 < _2212) || (_2207 > _2214))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2354 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2209, cbModelParam._m0[9u].z, fma(_2208, cbModelParam._m0[9u].y, _2207 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2209, cbModelParam._m0[10u].z, fma(_2208, cbModelParam._m0[10u].y, _2207 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2209, cbModelParam._m0[11u].z, fma(_2208, cbModelParam._m0[11u].y, _2207 * cbModelParam._m0[11u].x))), _1642);
            frontier_phi_13_35_ladder = _2354.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2354.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2354.x * cbModelParam._m0[1u].y;
        }
        _1722 = frontier_phi_13_35_ladder_2;
        _1724 = frontier_phi_13_35_ladder_1;
        _1726 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1710 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_831, _832, _833), _1642);
        _1722 = _1710.x * cbModelParam._m0[1u].y;
        _1724 = _1710.y * cbModelParam._m0[1u].y;
        _1726 = _1710.z * cbModelParam._m0[1u].y;
    }
    float _1730 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _660);
    float _1731 = isnan(_1730) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1730 : min(cbModelParam._m0[25u].w, _1730));
    float _1820;
    float _1822;
    float _1824;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1784 = fma(_895, cbModelParam._m0[21u].z, fma(_891, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _887)) + cbModelParam._m0[21u].w;
        float _1788 = fma(_895, cbModelParam._m0[22u].z, fma(_891, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _887)) + cbModelParam._m0[22u].w;
        float _1792 = fma(_895, cbModelParam._m0[23u].z, fma(_891, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _887)) + cbModelParam._m0[23u].w;
        float _1795 = fma(_833, cbModelParam._m0[21u].z, fma(_832, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _831));
        float _1798 = fma(_833, cbModelParam._m0[22u].z, fma(_832, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _831));
        float _1801 = fma(_833, cbModelParam._m0[23u].z, fma(_832, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _831));
        float _1910;
        if (_1795 > 0.0)
        {
            _1910 = abs((1.0 - _1784) / _1795);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1795 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1784 + 1.0) / _1795);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1910 = frontier_phi_25_21_ladder;
        }
        float _2227;
        if (_1798 > 0.0)
        {
            _2227 = abs((1.0 - _1788) / _1798);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1798 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1788 + 1.0) / _1798);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2227 = frontier_phi_37_32_ladder;
        }
        float _2565;
        if (_1801 > 0.0)
        {
            _2565 = abs((1.0 - _1792) / _1801);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1801 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1792 + 1.0) / _1801);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2565 = frontier_phi_47_44_ladder;
        }
        float _2567 = isnan(_2227) ? _1910 : (isnan(_1910) ? _2227 : min(_1910, _2227));
        float _2568 = isnan(_2565) ? _2567 : (isnan(_2567) ? _2565 : min(_2567, _2565));
        float _2572 = (_2568 * _1795) + _1784;
        float _2573 = (_2568 * _1798) + _1788;
        float _2574 = (_2568 * _1801) + _1792;
        float _2575 = _2568 * 9.9999997473787516355514526367188e-05;
        float _2576 = (-1.0) - _2575;
        float _2578 = _2575 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2574 > _2578) || ((_2574 < _2576) || ((_2573 > _2578) || ((_2573 < _2576) || ((_2572 < _2576) || (_2572 > _2578))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2696 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2574, cbModelParam._m0[17u].z, fma(_2573, cbModelParam._m0[17u].y, _2572 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2574, cbModelParam._m0[18u].z, fma(_2573, cbModelParam._m0[18u].y, _2572 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2574, cbModelParam._m0[19u].z, fma(_2573, cbModelParam._m0[19u].y, _2572 * cbModelParam._m0[19u].x))), _1731);
            frontier_phi_22_47_ladder = _2696.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2696.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2696.x * cbModelParam._m0[1u].z;
        }
        _1820 = frontier_phi_22_47_ladder_2;
        _1822 = frontier_phi_22_47_ladder_1;
        _1824 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1804 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_831, _832, _833), _1731);
        _1820 = _1804.x * cbModelParam._m0[1u].z;
        _1822 = _1804.y * cbModelParam._m0[1u].z;
        _1824 = _1804.z * cbModelParam._m0[1u].z;
    }
    float _1837 = (((_858 * _807) + _859) * _823) * ((cbModelParam._m0[1u].w * (_1820 - _1722)) + _1722);
    float _1839 = (((_858 * _809) + _859) * _823) * ((cbModelParam._m0[1u].w * (_1822 - _1724)) + _1724);
    float _1841 = (((_858 * _810) + _859) * _823) * ((cbModelParam._m0[1u].w * (_1824 - _1726)) + _1726);
    float _1844 = fma(_1841, cbSceneParam._m0[89u].z, fma(_1839, cbSceneParam._m0[89u].y, _1837 * cbSceneParam._m0[89u].x));
    float _1847 = fma(_1841, cbSceneParam._m0[90u].z, fma(_1839, cbSceneParam._m0[90u].y, _1837 * cbSceneParam._m0[90u].x));
    float _1850 = fma(_1841, cbSceneParam._m0[91u].z, fma(_1839, cbSceneParam._m0[91u].y, _1837 * cbSceneParam._m0[91u].x));
    float _1884 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1888 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1892 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1896 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1897 = _1884 / _1896;
    float _1898 = _1888 / _1896;
    float _1899 = _1892 / _1896;
    float _2046;
    float _2047;
    float _2048;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1926 = ((uint(_1899 > cbSceneParam._m0[59u].y) + uint(_1899 > cbSceneParam._m0[59u].x)) + uint(_1899 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1927 = _1926 + 43u;
        uint _1935 = _1926 + 44u;
        uint _1943 = _1926 + 45u;
        uint _1951 = _1926 + 46u;
        float _1962 = fma(_1896, cbSceneParam._m0[_1927].w, fma(_1892, cbSceneParam._m0[_1927].z, fma(_1888, cbSceneParam._m0[_1927].y, _1884 * cbSceneParam._m0[_1927].x)));
        float _1966 = fma(_1896, cbSceneParam._m0[_1935].w, fma(_1892, cbSceneParam._m0[_1935].z, fma(_1888, cbSceneParam._m0[_1935].y, _1884 * cbSceneParam._m0[_1935].x)));
        float _1974 = fma(_1896, cbSceneParam._m0[_1951].w, fma(_1892, cbSceneParam._m0[_1951].z, fma(_1888, cbSceneParam._m0[_1951].y, _1884 * cbSceneParam._m0[_1951].x)));
        float _1979 = cbSceneParam._m0[33u].z * _1974;
        float _1981 = cbSceneParam._m0[33u].w * _1974;
        float _1984 = fma(_1896, cbSceneParam._m0[_1943].w, fma(_1892, cbSceneParam._m0[_1943].z, fma(_1888, cbSceneParam._m0[_1943].y, _1884 * cbSceneParam._m0[_1943].x))) / _1974;
        float _2032 = (cbSceneParam._m0[33u].x - sqrt(((_1898 * _1898) + (_1897 * _1897)) + (_1899 * _1899))) * cbSceneParam._m0[33u].y;
        float _4318 = isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0));
        float _2039 = (isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1979 + _1962) / _1974, (_1981 + _1966) / _1974), _1984), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1981 + _1962) / _1974, (_1966 - _1979) / _1974), _1984), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1962 - _1979) / _1974, (_1966 - _1981) / _1974), _1984), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1962 - _1981) / _1974, (_1979 + _1966) / _1974), _1984), 0.0)).x), vec4(0.25)));
        _2046 = 1.0 - (_2039 * cbSceneParam._m0[34u].x);
        _2047 = 1.0 - (_2039 * cbSceneParam._m0[34u].y);
        _2048 = 1.0 - (_2039 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2046 = 1.0;
        _2047 = 1.0;
        _2048 = 1.0;
    }
    float _2112;
    float _2114;
    float _2116;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2100 = fma(_1896, cbSceneParam._m0[63u].w, fma(_1892, cbSceneParam._m0[63u].z, fma(_1888, cbSceneParam._m0[63u].y, _1884 * cbSceneParam._m0[63u].x)));
        float _2101 = fma(_1896, cbSceneParam._m0[60u].w, fma(_1892, cbSceneParam._m0[60u].z, fma(_1888, cbSceneParam._m0[60u].y, _1884 * cbSceneParam._m0[60u].x))) / _2100;
        float _2102 = fma(_1896, cbSceneParam._m0[61u].w, fma(_1892, cbSceneParam._m0[61u].z, fma(_1888, cbSceneParam._m0[61u].y, _1884 * cbSceneParam._m0[61u].x))) / _2100;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2101 >= cbSceneParam._m0[64u].x) && (_2102 >= cbSceneParam._m0[64u].y)) && (_2101 <= cbSceneParam._m0[64u].z)) && (_2102 <= cbSceneParam._m0[64u].w))
        {
            float _2240 = fma(_1896, cbSceneParam._m0[62u].w, fma(_1892, cbSceneParam._m0[62u].z, fma(_1888, cbSceneParam._m0[62u].y, _1884 * cbSceneParam._m0[62u].x))) / _2100;
            float _2244 = isnan(cbSceneParam._m0[41u].w) ? _2240 : (isnan(_2240) ? cbSceneParam._m0[41u].w : max(_2240, cbSceneParam._m0[41u].w));
            float _2287 = (cbSceneParam._m0[33u].x - sqrt(((_1898 * _1898) + (_1897 * _1897)) + (_1899 * _1899))) * cbSceneParam._m0[33u].y;
            float _4334 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
            float _2294 = (isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2101, cbSceneParam._m0[33u].w + _2102), _2244), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2101, _2102 - cbSceneParam._m0[33u].z), _2244), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2101 - cbSceneParam._m0[33u].z, _2102 - cbSceneParam._m0[33u].w), _2244), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2101 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2102), _2244), 0.0)).x), vec4(0.25)));
            float _2298 = 1.0 - (_2294 * cbSceneParam._m0[34u].x);
            float _2299 = 1.0 - (_2294 * cbSceneParam._m0[34u].y);
            float _2300 = 1.0 - (_2294 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2300) ? _2048 : (isnan(_2048) ? _2300 : min(_2048, _2300));
            frontier_phi_34_33_ladder_1 = isnan(_2299) ? _2047 : (isnan(_2047) ? _2299 : min(_2047, _2299));
            frontier_phi_34_33_ladder_2 = isnan(_2298) ? _2046 : (isnan(_2046) ? _2298 : min(_2046, _2298));
        }
        else
        {
            frontier_phi_34_33_ladder = _2048;
            frontier_phi_34_33_ladder_1 = _2047;
            frontier_phi_34_33_ladder_2 = _2046;
        }
        _2112 = frontier_phi_34_33_ladder_2;
        _2114 = frontier_phi_34_33_ladder_1;
        _2116 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2112 = _2046;
        _2114 = _2047;
        _2116 = _2048;
    }
    uvec4 _2121 = floatBitsToUint(cbInstanceData._m0[_240 + 5u]);
    uint _2123 = _2121.x * 14u;
    uint _2124 = _2123 + 13u;
    float _2131 = _823 + (-1.0);
    float _2136 = (cbLight._m0[_2124].x * _2131) + 1.0;
    float _2137 = (cbLight._m0[_2124].y * _2131) + 1.0;
    float _2138 = (cbLight._m0[_2124].z * _2131) + 1.0;
    float _2139 = (cbLight._m0[_2124].w * _2131) + 1.0;
    uint _2140 = _2123 + 5u;
    float _2146 = isnan(1.0) ? _2137 : (isnan(_2137) ? 1.0 : min(_2137, 1.0));
    uint _2150 = _2123 + 4u;
    float _2159 = isnan(1.0) ? _2136 : (isnan(_2136) ? 1.0 : min(_2136, 1.0));
    uint _2163 = _2123 | 1u;
    float _2174 = dot(vec3(cbLight._m0[_2123].xyz), vec3(_657, _658, _659));
    float _2177 = dot(vec3(cbLight._m0[_2163].xyz), vec3(_657, _658, _659));
    float _4370 = isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0));
    float _4381 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
    float _2182 = (isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0))) * 0.3183098733425140380859375;
    float _2184 = (isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0))) * 0.3183098733425140380859375;
    float _2191 = ((cbLight._m0[_2140].x * _2146) * _2184) + (((cbLight._m0[_2150].x * _2112) * _2159) * _2182);
    float _2192 = ((_2146 * cbLight._m0[_2140].y) * _2184) + (((cbLight._m0[_2150].y * _2114) * _2159) * _2182);
    float _2193 = ((_2146 * cbLight._m0[_2140].z) * _2184) + (((cbLight._m0[_2150].z * _2116) * _2159) * _2182);
    uvec4 _2197 = floatBitsToUint(cbLight._m0[_2123 + 12u]);
    bool _2199 = _2197.x == 0u;
    float _2301;
    float _2303;
    float _2305;
    if (_2199)
    {
        _2301 = _2191;
        _2303 = _2192;
        _2305 = _2193;
    }
    else
    {
        uint _2309 = _2123 + 6u;
        float _2325 = (dot(vec3(cbLight._m0[_2123 + 2u].xyz), vec3(_657, _658, _659)) * 0.5) + 0.5;
        float _2326 = _2325 * _2325;
        float _4392 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
        float _2327 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
        float _2328 = isnan(1.0) ? _2138 : (isnan(_2138) ? 1.0 : min(_2138, 1.0));
        _2301 = (((cbLight._m0[_2309].x * 0.3183098733425140380859375) * _2327) * _2328) + _2191;
        _2303 = (((cbLight._m0[_2309].y * 0.3183098733425140380859375) * _2327) * _2328) + _2192;
        _2305 = (((cbLight._m0[_2309].z * 0.3183098733425140380859375) * _2327) * _2328) + _2193;
    }
    bool _2308 = _2197.y == 0u;
    float _2363;
    float _2365;
    float _2367;
    if (_2308)
    {
        _2363 = _2301;
        _2365 = _2303;
        _2367 = _2305;
    }
    else
    {
        uint _2536 = _2123 + 7u;
        float _2552 = (dot(vec3(cbLight._m0[_2123 + 3u].xyz), vec3(_657, _658, _659)) * 0.5) + 0.5;
        float _2553 = _2552 * _2552;
        float _4408 = isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : max(_2553, 0.0));
        float _2554 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
        float _2555 = isnan(1.0) ? _2139 : (isnan(_2139) ? 1.0 : min(_2139, 1.0));
        _2363 = (((cbLight._m0[_2536].x * 0.3183098733425140380859375) * _2554) * _2555) + _2301;
        _2365 = (((cbLight._m0[_2536].y * 0.3183098733425140380859375) * _2554) * _2555) + _2303;
        _2367 = (((cbLight._m0[_2536].z * 0.3183098733425140380859375) * _2554) * _2555) + _2305;
    }
    uint _2370 = _2123 + 8u;
    float _2383 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2123].w)) * _660) * 0.949999988079071044921875);
    float _2384 = _2383 * _2383;
    float _2385 = cbLight._m0[_2123].x + _737;
    float _2386 = cbLight._m0[_2123].y + _738;
    float _2387 = cbLight._m0[_2123].z + _739;
    float _2391 = inversesqrt(dot(vec3(_2385, _2386, _2387), vec3(_2385, _2386, _2387)));
    float _2392 = _2391 * _2385;
    float _2393 = _2391 * _2386;
    float _2394 = _2391 * _2387;
    float _2395 = dot(vec3(_657, _658, _659), vec3(cbLight._m0[_2123].xyz));
    float _4424 = isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : max(_2395, 0.0));
    float _2398 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
    float _4435 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
    float _2399 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
    float _2400 = dot(vec3(_657, _658, _659), vec3(_2392, _2393, _2394));
    float _4446 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
    float _2403 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
    float _2404 = dot(vec3(cbLight._m0[_2123].xyz), vec3(_2392, _2393, _2394));
    float _4457 = isnan(0.0) ? _2404 : (isnan(_2404) ? 0.0 : max(_2404, 0.0));
    float _2408 = _2384 * _2384;
    float _2412 = ((_2403 * _2403) * (_2408 + (-1.0))) + 1.0;
    float _2420 = exp2(log2(1.0 - (isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0)))) * 5.0);
    float _2421 = 0.959999978542327880859375 - _804;
    float _2423 = 0.959999978542327880859375 - _805;
    float _2424 = 0.959999978542327880859375 - _806;
    float _2431 = 1.0 - _2384;
    float _2442 = (0.5 / (((_2399 * ((_2398 * _2431) + _2384)) + 9.9999999392252902907785028219223e-09) + (((_2399 * _2431) + _2384) * _2398))) * _2398;
    float _4468 = isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0));
    float _2444 = (isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0))) * (_2408 / ((_2412 * _2412) * 3.141590118408203125));
    uint _2458 = _2123 + 9u;
    float _2469 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2163].w)) * _660) * 0.949999988079071044921875);
    float _2470 = _2469 * _2469;
    float _2471 = cbLight._m0[_2163].x + _737;
    float _2472 = cbLight._m0[_2163].y + _738;
    float _2473 = cbLight._m0[_2163].z + _739;
    float _2477 = inversesqrt(dot(vec3(_2471, _2472, _2473), vec3(_2471, _2472, _2473)));
    float _2478 = _2477 * _2471;
    float _2479 = _2477 * _2472;
    float _2480 = _2477 * _2473;
    float _2481 = dot(vec3(_657, _658, _659), vec3(cbLight._m0[_2163].xyz));
    float _4479 = isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0));
    float _2484 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
    float _2485 = dot(vec3(_657, _658, _659), vec3(_2478, _2479, _2480));
    float _4490 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
    float _2488 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
    float _2489 = dot(vec3(cbLight._m0[_2163].xyz), vec3(_2478, _2479, _2480));
    float _4501 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
    float _2493 = _2470 * _2470;
    float _2497 = ((_2488 * _2488) * (_2493 + (-1.0))) + 1.0;
    float _2504 = exp2(log2(1.0 - (isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0)))) * 5.0);
    float _2511 = 1.0 - _2470;
    float _2521 = (0.5 / (((_2399 * ((_2484 * _2511) + _2470)) + 9.9999999392252902907785028219223e-09) + (((_2399 * _2511) + _2470) * _2484))) * _2484;
    float _4512 = isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : max(_2521, 0.0));
    float _2523 = (isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0))) * (_2493 / ((_2497 * _2497) * 3.141590118408203125));
    float _2533 = (((((_2504 * _2421) + _807) * cbLight._m0[_2458].x) * _2523) * _2146) + ((((cbLight._m0[_2370].x * _2112) * ((_2420 * _2421) + _807)) * _2444) * _2159);
    float _2534 = (((((_2504 * _2423) + _809) * cbLight._m0[_2458].y) * _2523) * _2146) + ((((cbLight._m0[_2370].y * _2114) * ((_2420 * _2423) + _809)) * _2444) * _2159);
    float _2535 = (((((_2504 * _2424) + _810) * cbLight._m0[_2458].z) * _2523) * _2146) + ((((cbLight._m0[_2370].z * _2116) * ((_2420 * _2424) + _810)) * _2444) * _2159);
    float _2591;
    float _2593;
    float _2595;
    if (_2199)
    {
        _2591 = _2533;
        _2593 = _2534;
        _2595 = _2535;
    }
    else
    {
        uint _2597 = _2123 + 2u;
        uint _2601 = _2123 + 10u;
        float _2615 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2597].w)) * _660) * 0.949999988079071044921875);
        float _2616 = _2615 * _2615;
        float _2617 = cbLight._m0[_2597].x + _737;
        float _2618 = cbLight._m0[_2597].y + _738;
        float _2619 = cbLight._m0[_2597].z + _739;
        float _2623 = inversesqrt(dot(vec3(_2617, _2618, _2619), vec3(_2617, _2618, _2619)));
        float _2624 = _2623 * _2617;
        float _2625 = _2623 * _2618;
        float _2626 = _2623 * _2619;
        float _2627 = dot(vec3(_657, _658, _659), vec3(cbLight._m0[_2597].xyz));
        float _4523 = isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : max(_2627, 0.0));
        float _2630 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
        float _2631 = dot(vec3(_657, _658, _659), vec3(_2624, _2625, _2626));
        float _4534 = isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : max(_2631, 0.0));
        float _2634 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
        float _2635 = dot(vec3(cbLight._m0[_2597].xyz), vec3(_2624, _2625, _2626));
        float _4545 = isnan(0.0) ? _2635 : (isnan(_2635) ? 0.0 : max(_2635, 0.0));
        float _2639 = _2616 * _2616;
        float _2643 = ((_2634 * _2634) * (_2639 + (-1.0))) + 1.0;
        float _2650 = exp2(log2(1.0 - (isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0)))) * 5.0);
        float _2657 = 1.0 - _2616;
        float _2667 = (0.5 / (((_2399 * ((_2630 * _2657) + _2616)) + 9.9999999392252902907785028219223e-09) + (((_2399 * _2657) + _2616) * _2630))) * _2630;
        float _4556 = isnan(0.0) ? _2667 : (isnan(_2667) ? 0.0 : max(_2667, 0.0));
        float _2669 = (isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0))) * (_2639 / ((_2643 * _2643) * 3.141590118408203125));
        float _2670 = isnan(1.0) ? _2138 : (isnan(_2138) ? 1.0 : min(_2138, 1.0));
        _2591 = (((((_2650 * _2421) + _807) * cbLight._m0[_2601].x) * _2669) * _2670) + _2533;
        _2593 = (((((_2650 * _2423) + _809) * cbLight._m0[_2601].y) * _2669) * _2670) + _2534;
        _2595 = (((((_2650 * _2424) + _810) * cbLight._m0[_2601].z) * _2669) * _2670) + _2535;
    }
    float _2701;
    float _2703;
    float _2705;
    if (_2308)
    {
        _2701 = _2591;
        _2703 = _2593;
        _2705 = _2595;
    }
    else
    {
        uint _2712 = _2123 + 3u;
        uint _2716 = _2123 + 11u;
        float _2730 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2712].w)) * _660) * 0.949999988079071044921875);
        float _2731 = _2730 * _2730;
        float _2732 = cbLight._m0[_2712].x + _737;
        float _2733 = cbLight._m0[_2712].y + _738;
        float _2734 = cbLight._m0[_2712].z + _739;
        float _2738 = inversesqrt(dot(vec3(_2732, _2733, _2734), vec3(_2732, _2733, _2734)));
        float _2739 = _2738 * _2732;
        float _2740 = _2738 * _2733;
        float _2741 = _2738 * _2734;
        float _2742 = dot(vec3(_657, _658, _659), vec3(cbLight._m0[_2712].xyz));
        float _4572 = isnan(0.0) ? _2742 : (isnan(_2742) ? 0.0 : max(_2742, 0.0));
        float _2745 = isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0));
        float _2746 = dot(vec3(_657, _658, _659), vec3(_2739, _2740, _2741));
        float _4583 = isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : max(_2746, 0.0));
        float _2749 = isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0));
        float _2750 = dot(vec3(cbLight._m0[_2712].xyz), vec3(_2739, _2740, _2741));
        float _4594 = isnan(0.0) ? _2750 : (isnan(_2750) ? 0.0 : max(_2750, 0.0));
        float _2754 = _2731 * _2731;
        float _2758 = ((_2749 * _2749) * (_2754 + (-1.0))) + 1.0;
        float _2765 = exp2(log2(1.0 - (isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0)))) * 5.0);
        float _2772 = 1.0 - _2731;
        float _2782 = (0.5 / (((_2399 * ((_2745 * _2772) + _2731)) + 9.9999999392252902907785028219223e-09) + (((_2399 * _2772) + _2731) * _2745))) * _2745;
        float _4605 = isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : max(_2782, 0.0));
        float _2784 = (isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0))) * (_2754 / ((_2758 * _2758) * 3.141590118408203125));
        float _2785 = isnan(1.0) ? _2139 : (isnan(_2139) ? 1.0 : min(_2139, 1.0));
        _2701 = (((((_2765 * _2421) + _807) * cbLight._m0[_2716].x) * _2784) * _2785) + _2591;
        _2703 = (((((_2765 * _2423) + _809) * cbLight._m0[_2716].y) * _2784) * _2785) + _2593;
        _2705 = (((((_2765 * _2424) + _810) * cbLight._m0[_2716].z) * _2784) * _2785) + _2595;
    }
    float _2851;
    float _2853;
    float _2855;
    float _2857;
    float _2859;
    float _2861;
    if (_2121.y == 0u)
    {
        uvec4 _2806 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2807 = _2806.x;
        uint _2818 = uint((float(_2806.y) * floor(float(uint(cbSceneParam._m0[85u].y * _746) / _2807))) + floor(float(uint(cbSceneParam._m0[85u].x * _745) / _2807)));
        float _2828 = (log2(_1899 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2829 = isnan(0.0) ? _2828 : (isnan(_2828) ? 0.0 : max(_2828, 0.0));
        uint _2832 = uint(isnan(14.0) ? _2829 : (isnan(_2829) ? 14.0 : min(_2829, 14.0)));
        uvec4 _2837 = texelFetch(g_lightClusterGridBuffer, int(((_2832 << 2u) + (_2818 << 6u)) >> 2u));
        uint _2838 = _2837.x;
        uint _2839 = _2806.z;
        float _2918;
        float _2920;
        float _2922;
        float _2924;
        float _2926;
        float _2928;
        if (((((1u << ((_2839 >> 4u) & 15u)) + 4294967295u) & _2838) == 0u) || ((_2839 & 240u) == 0u))
        {
            _2918 = 0.0;
            _2920 = 0.0;
            _2922 = 0.0;
            _2924 = 0.0;
            _2926 = 0.0;
            _2928 = 0.0;
        }
        else
        {
            float _2919;
            float _2921;
            float _2923;
            float _2925;
            float _2927;
            float _2929;
            float _3063 = 0.0;
            float _3064 = 0.0;
            float _3065 = 0.0;
            float _3066 = 0.0;
            float _3067 = 0.0;
            float _3068 = 0.0;
            uint _3069 = 0u;
            uint _3078;
            bool _3079;
            for (;;)
            {
                _3078 = texelFetch(g_lightClassification, int((((_2832 << 5u) + (_2818 << 9u)) + (_3069 << 2u)) >> 2u)).x;
                _3079 = _3078 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3079)
                {
                    frontier_phi_66_pred = _3068;
                    frontier_phi_66_pred_1 = _3067;
                    frontier_phi_66_pred_2 = _3066;
                    frontier_phi_66_pred_3 = _3065;
                    frontier_phi_66_pred_4 = _3064;
                    frontier_phi_66_pred_5 = _3063;
                }
                else
                {
                    float _3187;
                    float _3188;
                    float _3189;
                    float _3190;
                    float _3191;
                    float _3192;
                    uint _3193;
                    _3187 = _3063;
                    _3188 = _3064;
                    _3189 = _3065;
                    _3190 = _3066;
                    _3191 = _3067;
                    _3192 = _3068;
                    _3193 = _3078;
                    float _3119;
                    float _3120;
                    float _3121;
                    float _3122;
                    float _3123;
                    float _3124;
                    for (;;)
                    {
                        uint _3197 = uint(findLSB(_3193)) + (_3069 << 5u);
                        uint _3194 = (_3193 + 4294967295u) & _3193;
                        uint _3199 = _3197 * 48u;
                        vec4 _3213 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3199)).x, texelFetch(g_PointLightRenderingBuffer, int(_3199 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3199 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3199 + 3u)).x));
                        uint _3219 = (_3197 * 48u) + 4u;
                        vec4 _3232 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3219)).x, texelFetch(g_PointLightRenderingBuffer, int(_3219 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3219 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3219 + 3u)).x));
                        uint _3238 = (_3197 * 48u) + 8u;
                        vec3 _3249 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3238)).x, texelFetch(g_PointLightRenderingBuffer, int(_3238 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3238 + 2u)).x));
                        float _3253 = _3213.x - _1897;
                        float _3254 = _3213.y - _1898;
                        float _3255 = _3213.z - _1899;
                        float _3256 = dot(vec3(_3253, _3254, _3255), vec3(_3253, _3254, _3255));
                        float _3259 = inversesqrt(_3256);
                        float _3260 = _3259 * _3253;
                        float _3261 = _3259 * _3254;
                        float _3262 = _3259 * _3255;
                        float _3263 = dot(vec3(_764, _767, _770), vec3(_3260, _3261, _3262));
                        float _3268 = 1.0 - (_3256 * _3213.w);
                        float _4631 = isnan(0.0) ? _3268 : (isnan(_3268) ? 0.0 : max(_3268, 0.0));
                        float _3269 = isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0));
                        float _3270 = sqrt(_3256) * _3232.w;
                        float _3273 = 1.39999997615814208984375 / (_3270 + 1.39999997615814208984375);
                        float _3274 = _3273 * _3273;
                        float _3277 = ((1.0 - _3274) * _3263) + _3274;
                        float _3280 = _3270 * _3270;
                        float _3284 = ((isnan(0.0) ? _3277 : (isnan(_3277) ? 0.0 : max(_3277, 0.0))) * _3269) / ((_3280 * 0.699999988079071044921875) + 1.0);
                        float _3288 = (-0.0) - _1897;
                        float _3289 = (-0.0) - _1898;
                        float _3290 = (-0.0) - _1899;
                        float _3294 = inversesqrt(dot(vec3(_3288, _3289, _3290), vec3(_3288, _3289, _3290)));
                        float _3295 = _3294 * _3288;
                        float _3296 = _3294 * _3289;
                        float _3297 = _3294 * _3290;
                        float _3304 = exp2(log2(1.0 / ((_3280 * 3.5) + 5.0)) * 0.25);
                        float _3305 = 1.0 - _839;
                        float _3312 = sqrt(1.0 - ((1.0 - (_3305 * _3305)) * (1.0 - (_3304 * _3304))));
                        float _3313 = _3312 * _3312;
                        float _3314 = _3313 * _3313;
                        float _3315 = _3295 + _3260;
                        float _3316 = _3296 + _3261;
                        float _3317 = _3297 + _3262;
                        float _3321 = inversesqrt(dot(vec3(_3315, _3316, _3317), vec3(_3315, _3316, _3317)));
                        float _3325 = dot(vec3(_764, _767, _770), vec3(_3295, _3296, _3297));
                        float _4647 = isnan(0.0) ? _3325 : (isnan(_3325) ? 0.0 : max(_3325, 0.0));
                        float _3328 = isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0));
                        float _3329 = dot(vec3(_764, _767, _770), vec3(_3321 * _3315, _3321 * _3316, _3321 * _3317));
                        float _4658 = isnan(0.0) ? _3329 : (isnan(_3329) ? 0.0 : max(_3329, 0.0));
                        float _3332 = isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0));
                        float _3336 = ((_3332 * _3332) * (_3314 + (-1.0))) + 1.0;
                        float _3337 = _3273 * _3313;
                        float _3338 = _3337 * _3337;
                        float _3341 = ((1.0 - _3338) * _3263) + _3338;
                        float _4669 = isnan(0.0) ? _3341 : (isnan(_3341) ? 0.0 : max(_3341, 0.0));
                        float _3342 = isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0));
                        float _3343 = 1.0 - _3313;
                        float _3353 = (0.5 / (((_3342 * ((_3328 * _3343) + _3313)) + 9.9999999392252902907785028219223e-09) + (((_3342 * _3343) + _3313) * _3328))) * _3342;
                        float _4680 = isnan(0.0) ? _3353 : (isnan(_3353) ? 0.0 : max(_3353, 0.0));
                        float _3364 = (((_3314 * 3.1415927410125732421875) * (isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0)))) / ((_3336 * _3336) * ((_3280 * 2.1991131305694580078125) + 3.141590118408203125))) * _3269;
                        _3122 = (_3284 * _3232.x) + _3190;
                        _3123 = (_3284 * _3232.y) + _3191;
                        _3124 = (_3284 * _3232.z) + _3192;
                        _3119 = (_3364 * _3249.x) + _3187;
                        _3120 = (_3364 * _3249.y) + _3188;
                        _3121 = (_3364 * _3249.z) + _3189;
                        if (_3194 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3187 = _3119;
                            _3188 = _3120;
                            _3189 = _3121;
                            _3190 = _3122;
                            _3191 = _3123;
                            _3192 = _3124;
                            _3193 = _3194;
                        }
                    }
                    frontier_phi_66_pred = _3124;
                    frontier_phi_66_pred_1 = _3123;
                    frontier_phi_66_pred_2 = _3122;
                    frontier_phi_66_pred_3 = _3121;
                    frontier_phi_66_pred_4 = _3120;
                    frontier_phi_66_pred_5 = _3119;
                }
                _2929 = frontier_phi_66_pred;
                _2927 = frontier_phi_66_pred_1;
                _2925 = frontier_phi_66_pred_2;
                _2923 = frontier_phi_66_pred_3;
                _2921 = frontier_phi_66_pred_4;
                _2919 = frontier_phi_66_pred_5;
                uint _3070 = _3069 + 1u;
                if (_3070 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3063 = _2919;
                    _3064 = _2921;
                    _3065 = _2923;
                    _3066 = _2925;
                    _3067 = _2927;
                    _3068 = _2929;
                    _3069 = _3070;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2918 = _2919;
            _2920 = _2921;
            _2922 = _2923;
            _2924 = _2925;
            _2926 = _2927;
            _2928 = _2929;
        }
        uvec4 _2932 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2933 = _2932.z;
        uint _2935 = (_2933 >> 8u) & 15u;
        float _3031;
        float _3033;
        float _3035;
        float _3037;
        float _3039;
        float _3041;
        if (((4294967295u << _2935) & _2838) == 0u)
        {
            _3031 = _2918;
            _3033 = _2920;
            _3035 = _2922;
            _3037 = _2924;
            _3039 = _2926;
            _3041 = _2928;
        }
        else
        {
            float _3056 = inversesqrt(dot(vec3(_1897, _1898, _1899), vec3(_1897, _1898, _1899)));
            float _3057 = _3056 * _1897;
            float _3058 = _3056 * _1898;
            float _3059 = _3056 * _1899;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2935 < ((_2933 >> 12u) & 15u))
            {
                float _3032;
                float _3034;
                float _3036;
                float _3038;
                float _3040;
                float _3042;
                float _3170 = _2918;
                float _3171 = _2920;
                float _3172 = _2922;
                float _3173 = _2924;
                float _3174 = _2926;
                float _3175 = _2928;
                uint _3176 = _2935;
                uint _3185;
                bool _3186;
                for (;;)
                {
                    _3185 = texelFetch(g_lightClassification, int((((_2832 << 5u) + (_2818 << 9u)) + (_3176 << 2u)) >> 2u)).x;
                    _3186 = _3185 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3186)
                    {
                        frontier_phi_72_pred = _3175;
                        frontier_phi_72_pred_1 = _3174;
                        frontier_phi_72_pred_2 = _3173;
                        frontier_phi_72_pred_3 = _3172;
                        frontier_phi_72_pred_4 = _3171;
                        frontier_phi_72_pred_5 = _3170;
                    }
                    else
                    {
                        float _3369;
                        float _3370;
                        float _3371;
                        float _3372;
                        float _3373;
                        float _3374;
                        float _3663;
                        float _3664;
                        float _3665;
                        float _3666;
                        float _3667;
                        float _3668;
                        float _3382 = _3170;
                        float _3383 = _3171;
                        float _3384 = _3172;
                        float _3385 = _3173;
                        float _3386 = _3174;
                        float _3387 = _3175;
                        uint _3388 = _3185;
                        uint _3389;
                        vec4 _3414;
                        float _3415;
                        vec4 _3430;
                        vec3 _3442;
                        vec4 _3457;
                        vec4 _3473;
                        float _3519;
                        bool _3520;
                        for (;;)
                        {
                            uint _3399 = ((_3176 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3388));
                            _3389 = (_3388 + 4294967295u) & _3388;
                            uint _3401 = _3399 * 40u;
                            _3414 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3401)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 3u)).x));
                            _3415 = _3414.w;
                            uint _3417 = (_3399 * 40u) + 4u;
                            _3430 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3417)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 3u)).x));
                            uint _3432 = (_3399 * 40u) + 8u;
                            _3442 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3432)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3432 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3432 + 2u)).x));
                            uint _3444 = (_3399 * 40u) + 16u;
                            _3457 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3444)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3444 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3444 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3444 + 3u)).x));
                            uint _3460 = (_3399 * 40u) + 20u;
                            _3473 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3460)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 3u)).x));
                            uint _3475 = (_3399 * 40u) + 24u;
                            vec4 _3488 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3475)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 3u)).x));
                            uint _3494 = (_3399 * 40u) + 28u;
                            vec4 _3507 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3494)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 3u)).x));
                            _3519 = fma(_1899, _3507.z, fma(_1898, _3507.y, _3507.x * _1897)) + _3507.w;
                            _3520 = !((fma(_1899, _3488.z, fma(_1898, _3488.y, _3488.x * _1897)) + _3488.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3520)
                            {
                                float _3547 = _3414.x - _1897;
                                float _3548 = _3414.y - _1898;
                                float _3549 = _3414.z - _1899;
                                float _3550 = dot(vec3(_3547, _3548, _3549), vec3(_3547, _3548, _3549));
                                float _3553 = inversesqrt(_3550);
                                float _3554 = _3553 * _3547;
                                float _3555 = _3553 * _3548;
                                float _3556 = _3553 * _3549;
                                float _3560 = 1.0 - (_3550 / (_3415 * _3415));
                                float _4691 = isnan(0.0) ? _3560 : (isnan(_3560) ? 0.0 : max(_3560, 0.0));
                                float _3561 = isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0));
                                float _3565 = sqrt(_3550) * _3430.w;
                                float _3567 = 1.39999997615814208984375 / (_3565 + 1.39999997615814208984375);
                                float _3568 = _3567 * _3567;
                                float _3571 = ((1.0 - _3568) * dot(vec3(_3554, _3555, _3556), vec3(_764, _767, _770))) + _3568;
                                float _3574 = _3565 * _3565;
                                float _3578 = (fma(_1899, _3457.z, fma(_1898, _3457.y, _3457.x * _1897)) + _3457.w) / _3519;
                                float _3579 = (fma(_1899, _3473.z, fma(_1898, _3473.y, _3473.x * _1897)) + _3473.w) / _3519;
                                float _3583 = 1.0 - dot(vec2(_3578, _3579), vec2(_3578, _3579));
                                float _4707 = isnan(0.0) ? _3583 : (isnan(_3583) ? 0.0 : max(_3583, 0.0));
                                float _3584 = isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0));
                                float _3585 = _3584 * (((isnan(0.0) ? _3571 : (isnan(_3571) ? 0.0 : max(_3571, 0.0))) * _3561) / ((_3574 * 0.699999988079071044921875) + 1.0));
                                float _3597 = exp2(log2(1.0 / ((_3574 * 3.5) + 5.0)) * 0.25);
                                float _3598 = 1.0 - _839;
                                float _3605 = sqrt(1.0 - ((1.0 - (_3598 * _3598)) * (1.0 - (_3597 * _3597))));
                                float _3606 = _3605 * _3605;
                                float _3607 = _3606 * _3606;
                                float _3608 = _3554 - _3057;
                                float _3609 = _3555 - _3058;
                                float _3610 = _3556 - _3059;
                                float _3614 = inversesqrt(dot(vec3(_3608, _3609, _3610), vec3(_3608, _3609, _3610)));
                                float _3618 = dot(vec3(_764, _767, _770), vec3((-0.0) - _3057, (-0.0) - _3058, (-0.0) - _3059));
                                float _4718 = isnan(0.0) ? _3618 : (isnan(_3618) ? 0.0 : max(_3618, 0.0));
                                float _3621 = isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0));
                                float _3622 = dot(vec3(_764, _767, _770), vec3(_3614 * _3608, _3614 * _3609, _3614 * _3610));
                                float _4729 = isnan(0.0) ? _3622 : (isnan(_3622) ? 0.0 : max(_3622, 0.0));
                                float _3625 = isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0));
                                float _3629 = ((_3625 * _3625) * (_3607 + (-1.0))) + 1.0;
                                float _3630 = _3567 * _3606;
                                float _3631 = _3630 * _3630;
                                float _3637 = ((1.0 - _3631) * dot(vec3(_764, _767, _770), vec3(_3554, _3555, _3556))) + _3631;
                                float _4740 = isnan(0.0) ? _3637 : (isnan(_3637) ? 0.0 : max(_3637, 0.0));
                                float _3638 = isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0));
                                float _3639 = 1.0 - _3606;
                                float _3649 = (0.5 / (((_3638 * ((_3621 * _3639) + _3606)) + 9.9999999392252902907785028219223e-09) + (((_3638 * _3639) + _3606) * _3621))) * _3638;
                                float _4751 = isnan(0.0) ? _3649 : (isnan(_3649) ? 0.0 : max(_3649, 0.0));
                                float _3659 = (_3584 * _3561) * (((_3607 * 3.1415927410125732421875) * (isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0)))) / ((_3629 * _3629) * ((_3574 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3585 * _3430.y;
                                frontier_phi_78_pred_1 = _3585 * _3430.x;
                                frontier_phi_78_pred_2 = _3659 * _3442.z;
                                frontier_phi_78_pred_3 = _3659 * _3442.y;
                                frontier_phi_78_pred_4 = _3659 * _3442.x;
                                frontier_phi_78_pred_5 = _3585 * _3430.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3667 = frontier_phi_78_pred;
                            _3666 = frontier_phi_78_pred_1;
                            _3665 = frontier_phi_78_pred_2;
                            _3664 = frontier_phi_78_pred_3;
                            _3663 = frontier_phi_78_pred_4;
                            _3668 = frontier_phi_78_pred_5;
                            _3372 = _3666 + _3385;
                            _3373 = _3667 + _3386;
                            _3374 = _3668 + _3387;
                            _3369 = _3663 + _3382;
                            _3370 = _3664 + _3383;
                            _3371 = _3665 + _3384;
                            if (_3389 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3382 = _3369;
                                _3383 = _3370;
                                _3384 = _3371;
                                _3385 = _3372;
                                _3386 = _3373;
                                _3387 = _3374;
                                _3388 = _3389;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3374;
                        frontier_phi_72_pred_1 = _3373;
                        frontier_phi_72_pred_2 = _3372;
                        frontier_phi_72_pred_3 = _3371;
                        frontier_phi_72_pred_4 = _3370;
                        frontier_phi_72_pred_5 = _3369;
                    }
                    _3042 = frontier_phi_72_pred;
                    _3040 = frontier_phi_72_pred_1;
                    _3038 = frontier_phi_72_pred_2;
                    _3036 = frontier_phi_72_pred_3;
                    _3034 = frontier_phi_72_pred_4;
                    _3032 = frontier_phi_72_pred_5;
                    uint _3177 = _3176 + 1u;
                    if (_3177 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3170 = _3032;
                        _3171 = _3034;
                        _3172 = _3036;
                        _3173 = _3038;
                        _3174 = _3040;
                        _3175 = _3042;
                        _3176 = _3177;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3042;
                frontier_phi_60_61_ladder_1 = _3040;
                frontier_phi_60_61_ladder_2 = _3036;
                frontier_phi_60_61_ladder_3 = _3034;
                frontier_phi_60_61_ladder_4 = _3032;
                frontier_phi_60_61_ladder_5 = _3038;
            }
            else
            {
                frontier_phi_60_61_ladder = _2928;
                frontier_phi_60_61_ladder_1 = _2926;
                frontier_phi_60_61_ladder_2 = _2922;
                frontier_phi_60_61_ladder_3 = _2920;
                frontier_phi_60_61_ladder_4 = _2918;
                frontier_phi_60_61_ladder_5 = _2924;
            }
            _3031 = frontier_phi_60_61_ladder_4;
            _3033 = frontier_phi_60_61_ladder_3;
            _3035 = frontier_phi_60_61_ladder_2;
            _3037 = frontier_phi_60_61_ladder_5;
            _3039 = frontier_phi_60_61_ladder_1;
            _3041 = frontier_phi_60_61_ladder;
        }
        float _3046 = isnan(1.0) ? _823 : (isnan(_823) ? 1.0 : min(_823, 1.0));
        _2851 = (_3046 * _3037) + _2363;
        _2853 = (_3046 * _3039) + _2365;
        _2855 = (_3046 * _3041) + _2367;
        _2857 = ((_3031 * _807) * _3046) + _2701;
        _2859 = ((_3033 * _809) * _3046) + _2703;
        _2861 = ((_3035 * _810) * _3046) + _2705;
    }
    else
    {
        _2851 = _2363;
        _2853 = _2365;
        _2855 = _2367;
        _2857 = _2701;
        _2859 = _2703;
        _2861 = _2705;
    }
    float _4767 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
    float _4778 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
    float _4789 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
    uint _2881 = _240 + 6u;
    float _2889 = _745 / cbSceneParam._m0[86u].x;
    float _2890 = _746 / cbSceneParam._m0[86u].y;
    vec4 _2904 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2889, _2890, (log2((isnan(cbSceneParam._m0[77u].w) ? _679 : (isnan(_679) ? cbSceneParam._m0[77u].w : min(_679, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2906 = _2904.x;
    float _2907 = _2904.y;
    float _2908 = _2904.z;
    float _2909 = _2904.w;
    float _2981;
    float _2983;
    float _2985;
    float _2987;
    if (_679 > cbSceneParam._m0[78u].w)
    {
        float _2943 = isnan(_679) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _679 : min(cbSceneParam._m0[80u].w, _679));
        float _2944 = _2943 / _679;
        float _2955 = _2944 * _730;
        float _2956 = _731 * _2944;
        float _2957 = (-0.0) - _2956;
        float _2959 = _2944 * _732;
        float _2961 = (cbSceneParam._m0[77u].w * _2957) / _2943;
        float _2962 = _2961 + cbSceneParam._m0[79u].w;
        float _2963 = cbSceneParam._m0[79u].w - _2956;
        float _2969 = sqrt(((_2955 * _2955) + (_2956 * _2956)) + (_2959 * _2959));
        float _2972 = (1.0 - (cbSceneParam._m0[77u].w / _2943)) * _2969;
        float _2977 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2979 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3132;
        if (abs((_2957 - _2961) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3132 = ((((_2962 > 0.0) ? exp2(_2977 * _2962) : (2.0 - exp2(_2979 * _2962))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2972;
        }
        else
        {
            float _3092 = 1.0 / cbSceneParam._m0[80u].x;
            float _3093 = isnan(_2963) ? _2962 : (isnan(_2962) ? _2963 : max(_2962, _2963));
            float _3094 = isnan(_2963) ? _2962 : (isnan(_2962) ? _2963 : min(_2962, _2963));
            float _3103 = isnan(0.0) ? _3093 : (isnan(_3093) ? 0.0 : min(_3093, 0.0));
            float _3104 = isnan(0.0) ? _3094 : (isnan(_3094) ? 0.0 : min(_3094, 0.0));
            _3132 = ((abs(_2969 / _2957) * cbSceneParam._m0[80u].y) * ((((_3103 - _3104) * 2.0) - ((exp2(_2977 * (isnan(0.0) ? _3093 : (isnan(_3093) ? 0.0 : max(_3093, 0.0)))) - exp2(_2977 * (isnan(0.0) ? _3094 : (isnan(_3094) ? 0.0 : max(_3094, 0.0))))) * _3092)) - ((exp2(_2979 * _3103) - exp2(_2979 * _3104)) * _3092))) + (_2972 * cbSceneParam._m0[80u].z);
        }
        vec4 _3134 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2889, _2890, 1.0), 0.0);
        float _3143 = exp2((_3132 * (-1.44269502162933349609375)) * (1.0 - _3134.w));
        float _3144 = log2(_3143);
        float _3160 = log2(_2909);
        _2981 = (exp2(_3160 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3144 * cbSceneParam._m0[78u].x)) * _3134.x) / cbSceneParam._m0[78u].x)) + _2906;
        _2983 = (exp2(_3160 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3144 * cbSceneParam._m0[78u].y)) * _3134.y) / cbSceneParam._m0[78u].y)) + _2907;
        _2985 = (exp2(_3160 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3144 * cbSceneParam._m0[78u].z)) * _3134.z) / cbSceneParam._m0[78u].z)) + _2908;
        _2987 = _3143 * _2909;
    }
    else
    {
        _2981 = _2906;
        _2983 = _2907;
        _2985 = _2908;
        _2987 = _2909;
    }
    float _2999 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3000 = _2999 == 3.0;
    float _3001 = log2(_2987);
    float _3008 = exp2(_3001 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0))) * (_2851 + ((isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0))) * _823))) + ((_2857 + ((isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0))) * _1631)) * cbPerFrame._m0[3u].x));
    float _3009 = exp2(_3001 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0))) * (_2853 + ((isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0))) * _823))) + ((_2859 + ((isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0))) * _1631)) * cbPerFrame._m0[3u].x));
    float _3010 = exp2(_3001 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0))) * (_2855 + ((isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0))) * _823))) + ((_2861 + ((isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0))) * _1631)) * cbPerFrame._m0[3u].x));
    float _3019 = (_2999 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3019 * (_3000 ? _3008 : (_3008 + (cbSceneParam._m0[72u].w * _2981)));
    SV_Target.y = _3019 * (_3000 ? _3009 : (_3009 + (cbSceneParam._m0[72u].w * _2983)));
    SV_Target.z = _3019 * (_3000 ? _3010 : (_3010 + (cbSceneParam._m0[72u].w * _2985)));
    SV_Target.w = cbInstanceData._m0[_2881].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2881].w;
}


