#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1396;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _232 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _233 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _234 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _240 = inversesqrt(dot(vec3(_232, _233, _234), vec3(_232, _233, _234)));
    float _241 = _240 * _232;
    float _242 = _240 * _233;
    float _243 = _240 * _234;
    float _247 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _248 = _247 * NORMAL.x;
    float _249 = _247 * NORMAL.y;
    float _250 = _247 * NORMAL.z;
    float _254 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _255 = _254 * TANGENT.x;
    float _256 = _254 * TANGENT.y;
    float _257 = _254 * TANGENT.z;
    float _266 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _268 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _269 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3746 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _3757 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _3768 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    uint _279 = uint(roundEven(NORMAL.w)) * 13u;
    uint _284 = _279 + 1u;
    uint _288 = _279 + 2u;
    float _297 = sqrt(((cbInstanceData._m0[_284].x * cbInstanceData._m0[_284].x) + (cbInstanceData._m0[_279].x * cbInstanceData._m0[_279].x)) + (cbInstanceData._m0[_288].x * cbInstanceData._m0[_288].x));
    float _298 = _297 * TEXCOORD.z;
    float _299 = _297 * TEXCOORD.w;
    vec4 _312 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _298) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _299) + cbTextureTilingScale._m0[13u].w));
    vec4 _336 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _341 = _336.x * cbMtdParam._m0[11u].x;
    float _342 = _336.y * cbMtdParam._m0[11u].y;
    float _343 = _336.z * cbMtdParam._m0[11u].z;
    vec4 _362 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _298) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _299) + cbTextureTilingScale._m0[5u].w));
    vec4 _398 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _400 = _398.x;
    float _412 = dot(vec4(_400, _398.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _429 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_400 - _412) * cbMtdParam._m0[24u].y) + _412) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3779 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _430 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
    float _437 = (_430 * ((_362.x * cbMtdParam._m0[12u].x) - _341)) + _341;
    float _438 = (_430 * ((_362.y * cbMtdParam._m0[12u].y) - _342)) + _342;
    float _439 = (_430 * ((_362.z * cbMtdParam._m0[12u].z) - _343)) + _343;
    float _443 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _312.x) * _437;
    float _446 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _312.y) * _438;
    float _449 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _312.z) * _439;
    float _456 = ((_437 - _443) * (isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0)))) + _443;
    float _457 = ((_438 - _446) * (isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0)))) + _446;
    float _458 = ((_439 - _449) * (isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0)))) + _449;
    vec4 _476 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _298) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _299) + cbTextureTilingScale._m0[20u].w));
    vec4 _503 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _298) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _299) + cbTextureTilingScale._m0[4u].w));
    vec4 _520 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _522 = _520.x;
    float _523 = _520.y;
    float _524 = _520.z;
    float _533 = ((_503.z - _524) * _430) + _524;
    float _536 = ((((_503.x - _522) * _430) + _522) * 2.0) + (-1.0);
    float _537 = ((((_503.y - _523) * _430) + _523) * 2.0) + (-1.0);
    float _538 = dot(vec2(_536, _537), vec2(_536, _537));
    float _3790 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _543 = sqrt(1.0 - (isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0))));
    float _546 = _536 + ((((_476.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x);
    float _547 = _537 + ((((_476.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x);
    float _550 = fma(_543, _248, fma(_547, _255, _546 * _241));
    float _553 = fma(_543, _249, fma(_547, _256, _546 * _242));
    float _556 = fma(_543, _250, fma(_547, _257, _546 * _243));
    float _560 = inversesqrt(dot(vec3(_550, _553, _556), vec3(_550, _553, _556)));
    vec4 _576 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _602 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _298) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _299) + cbTextureTilingScale._m0[11u].w));
    float _604 = _602.x;
    float _605 = 1.0 - _604;
    float _611 = (cbMtdParam._m0[19u].x + dot(vec4(_560 * _550, _560 * _553, _560 * _556, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_604 - _605) * cbMtdParam._m0[24u].z) + _605) * cbMtdParam._m0[21u].z);
    float _3801 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _612 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
    float _614 = (-0.0) - cbMtdParam._m0[24u].x;
    float _616 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _617 = isnan(1.0) ? _616 : (isnan(_616) ? 1.0 : min(_616, 1.0));
    float _624 = _612 - ((_612 * TEXCOORD_8.x) * _617);
    float _625 = _612 - ((_612 * TEXCOORD_8.y) * _617);
    float _626 = _612 - ((_612 * TEXCOORD_8.z) * _617);
    float _633 = (_624 * (cbMtdParam._m0[17u].x - _456)) + _456;
    float _634 = (_625 * (cbMtdParam._m0[17u].y - _457)) + _457;
    float _635 = (_626 * (cbMtdParam._m0[17u].z - _458)) + _458;
    vec4 _647 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _298) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _299) + cbTextureTilingScale._m0[19u].w));
    float _649 = _647.x;
    float _650 = 1.0 - _649;
    float _676 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_649 - _650) * cbMtdParam._m0[24u].w) + _650) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3822 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
    float _677 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
    float _685 = ((((cbMtdParam._m0[10u].x - _633) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _677) + _633;
    float _686 = ((((cbMtdParam._m0[10u].y - _634) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _677) + _634;
    float _687 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _635)) * _677) + _635;
    vec4 _713 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _715 = _713.x;
    float _733 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _298) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _299) + cbTextureTilingScale._m0[9u].w)).x - _715) * _430) + _715;
    float _737 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _733) * cbMtdParam._m0[19u].z) + _733;
    float _739 = _737 - (_737 * _624);
    float _741 = _739 - (_739 * _677);
    float _746 = (((_476.z - _533) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _533;
    vec4 _760 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _298) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _299) + cbTextureTilingScale._m0[15u].w));
    float _767 = (_760.x * 2.0) + (-1.0);
    float _768 = (_760.y * 2.0) + (-1.0);
    float _769 = dot(vec2(_767, _768), vec2(_767, _768));
    float _3833 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    float _777 = ((_760.z - _746) * _624) + _746;
    float _780 = ((cbMtdParam._m0[23u].y - _777) * _677) + _777;
    vec4 _799 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _298) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _299) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _805 = (_799.x * 2.0) + (-1.0);
    float _806 = (_799.y * 2.0) + (-1.0);
    float _807 = dot(vec2(_805, _806), vec2(_805, _806));
    float _3844 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
    float _822 = ((sqrt(1.0 - (isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0)))) - _543) * _626) + _543;
    float _825 = (((_767 - _546) * _624) + _546) + (cbMtdParam._m0[21u].x * _546);
    float _826 = (((_768 - _547) * _625) + _547) + (cbMtdParam._m0[21u].x * _547);
    float _837 = (((_805 - _825) + (_825 * cbMtdParam._m0[22u].z)) * _677) + _825;
    float _838 = (((_806 - _826) + (_826 * cbMtdParam._m0[22u].z)) * _677) + _826;
    float _839 = (_677 * (sqrt(1.0 - (isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0)))) - _822)) + _822;
    float _843 = cbMtdParam._m0[22u].x + _576.w;
    float _846 = fma(_839, _248, fma(_838, _255, _837 * _241));
    float _849 = fma(_839, _249, fma(_838, _256, _837 * _242));
    float _852 = fma(_839, _250, fma(_838, _257, _837 * _243));
    float _856 = inversesqrt(dot(vec3(_846, _849, _852), vec3(_846, _849, _852)));
    float _857 = _856 * _846;
    float _858 = _856 * _849;
    float _859 = _856 * _852;
    float _3855 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _860 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
    float _3866 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
    float _3877 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    float _3888 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
    float _3899 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
    float _3910 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _865 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
    float _879 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _919 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _929 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _919);
    float _930 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _919);
    float _931 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _919);
    float _935 = inversesqrt(dot(vec3(_929, _930, _931), vec3(_929, _930, _931)));
    float _936 = _929 * _935;
    float _937 = _930 * _935;
    float _938 = _931 * _935;
    float _944 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _945 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _963 = fma(_859, cbSceneParam._m0[5u].z, fma(_858, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _857));
    float _966 = fma(_859, cbSceneParam._m0[6u].z, fma(_858, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _857));
    float _969 = fma(_859, cbSceneParam._m0[7u].z, fma(_858, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _857));
    uint _983 = (_279 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _989 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0)))) * cbInstanceData._m0[_983].x;
    float _990 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0)))) * cbInstanceData._m0[_983].y;
    float _991 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0)))) * cbInstanceData._m0[_983].z;
    float _3921 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
    float _992 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
    float _3932 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
    float _993 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
    float _3943 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
    float _994 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
    float _995 = 1.0 - _865;
    float _996 = _992 * _995;
    float _997 = _993 * _995;
    float _998 = _994 * _995;
    float _1003 = (_992 + (-0.039999999105930328369140625)) * _865;
    float _1004 = (_993 + (-0.039999999105930328369140625)) * _865;
    float _1005 = (_994 + (-0.039999999105930328369140625)) * _865;
    float _1006 = _1003 + 0.039999999105930328369140625;
    float _1008 = _1004 + 0.039999999105930328369140625;
    float _1009 = _1005 + 0.039999999105930328369140625;
    vec4 _1018 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _944, cbSceneParam._m0[86u].y * _945));
    float _1022 = ((isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0))) * TEXCOORD_5.w) * _1018.x;
    float _1023 = dot(vec3(_857, _858, _859), vec3(_936, _937, _938));
    float _1026 = _1023 * 2.0;
    float _1030 = (_1026 * _857) - _936;
    float _1031 = (_1026 * _858) - _937;
    float _1032 = (_1026 * _859) - _938;
    float _1036 = abs(dot(vec3(_936, _937, _938), vec3(_857, _858, _859)));
    float _3954 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
    float _1038 = sqrt(_860);
    float _1051 = exp2((_1038 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1038 * 3.0));
    float _1057 = (1.0 - _1051) * ((_1038 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1058 = _1051 * _1038;
    float _1086 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1090 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1094 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1395;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1120 = fma(_1094, cbModelParam._m0[26u].z, fma(_1090, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1086));
        float _1124 = fma(_1094, cbModelParam._m0[27u].z, fma(_1090, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1086));
        float _1128 = fma(_1094, cbModelParam._m0[28u].z, fma(_1090, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1086));
        float _1153 = _1086 + _857;
        float _1154 = _1090 + _858;
        float _1155 = _1094 + _859;
        float _1165 = fma(_1155, cbModelParam._m0[26u].z, fma(_1154, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1153)) - _1120;
        float _1166 = fma(_1155, cbModelParam._m0[27u].z, fma(_1154, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1153)) - _1124;
        float _1167 = fma(_1155, cbModelParam._m0[28u].z, fma(_1154, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1153)) - _1128;
        float _1171 = inversesqrt(dot(vec3(_1165, _1166, _1167), vec3(_1165, _1166, _1167)));
        float _1184 = ((_1171 * _1165) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1120 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1185 = ((_1171 * _1166) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1124 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1186 = ((_1171 * _1167) / cbModelParam._m0[34u].z) + ((((((_1128 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1189 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1184, _1185, _1186), 0.0);
        vec4 _1196 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1184, _1185, _1186), 0.0);
        vec4 _1203 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1184, _1185, _1186), 0.0);
        vec4 _1210 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1184, _1185, _1186), 0.0);
        float _1223 = exp2((_1189.w + (-0.5)) * 20.0) * 2.0;
        float _1224 = _1223 * (_1189.x + (-0.5));
        float _1225 = _1223 * (_1189.y + (-0.5));
        float _1226 = _1223 * (_1189.z + (-0.5));
        float _1233 = exp2((_1196.w + (-0.5)) * 20.0) * 2.0;
        float _1234 = _1233 * (_1196.x + (-0.5));
        float _1235 = _1233 * (_1196.y + (-0.5));
        float _1236 = _1233 * (_1196.z + (-0.5));
        float _1243 = exp2((_1203.w + (-0.5)) * 20.0) * 2.0;
        float _1244 = _1243 * (_1203.x + (-0.5));
        float _1245 = _1243 * (_1203.y + (-0.5));
        float _1246 = _1243 * (_1203.z + (-0.5));
        float _1253 = exp2((_1210.w + (-0.5)) * 20.0) * 2.0;
        float _1254 = _1253 * (_1210.x + (-0.5));
        float _1255 = _1253 * (_1210.y + (-0.5));
        float _1256 = _1253 * (_1210.z + (-0.5));
        float _1257 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1258 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1259 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1260 = _1224 * 0.5;
        float _1261 = _1234 * 0.5;
        float _1262 = _1244 * 0.5;
        float _1263 = dot(vec3(_1260, _1261, _1262), vec3(_1260, _1261, _1262));
        float _1268 = (_1263 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1263);
        float _1277 = (dot(vec3(_857, _858, _859), vec3(_1268 * _1260, _1268 * _1261, _1268 * _1262)) + 1.0) * 0.5;
        float _3980 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1287 = sqrt(((_1261 * _1261) + (_1260 * _1260)) + (_1262 * _1262)) / (_1257 + 9.9999997473787516355514526367188e-06);
        float _3991 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1288 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
        float _1289 = _1288 * 2.0;
        float _1293 = (1.0 - _1288) / (_1288 + 1.0);
        float _4002 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1294 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
        float _1303 = ((((1.0 - _1294) * (_1289 + 2.0)) * exp2(log2(isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0))) * (_1289 + 1.0))) + _1294) * _1257;
        float _1304 = _1225 * 0.5;
        float _1305 = _1235 * 0.5;
        float _1306 = _1245 * 0.5;
        float _1307 = dot(vec3(_1304, _1305, _1306), vec3(_1304, _1305, _1306));
        float _1312 = (_1307 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1307);
        float _1320 = (dot(vec3(_857, _858, _859), vec3(_1312 * _1304, _1312 * _1305, _1312 * _1306)) + 1.0) * 0.5;
        float _4013 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1329 = sqrt(((_1305 * _1305) + (_1304 * _1304)) + (_1306 * _1306)) / (_1258 + 9.9999997473787516355514526367188e-06);
        float _4024 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1330 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
        float _1331 = _1330 * 2.0;
        float _1335 = (1.0 - _1330) / (_1330 + 1.0);
        float _4035 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1336 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
        float _1345 = ((((1.0 - _1336) * (_1331 + 2.0)) * exp2(log2(isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0))) * (_1331 + 1.0))) + _1336) * _1258;
        float _1346 = _1226 * 0.5;
        float _1347 = _1236 * 0.5;
        float _1348 = _1246 * 0.5;
        float _1349 = dot(vec3(_1346, _1347, _1348), vec3(_1346, _1347, _1348));
        float _1354 = (_1349 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1349);
        float _1362 = (dot(vec3(_857, _858, _859), vec3(_1354 * _1346, _1354 * _1347, _1354 * _1348)) + 1.0) * 0.5;
        float _4046 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1371 = sqrt(((_1347 * _1347) + (_1346 * _1346)) + (_1348 * _1348)) / (_1259 + 9.9999997473787516355514526367188e-06);
        float _4057 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1372 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
        float _1373 = _1372 * 2.0;
        float _1377 = (1.0 - _1372) / (_1372 + 1.0);
        float _4068 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1378 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
        float _1387 = ((((1.0 - _1378) * (_1373 + 2.0)) * exp2(log2(isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0))) * (_1373 + 1.0))) + _1378) * _1259;
        _1395 = _1226;
        _1397 = _1225;
        _1398 = _1224;
        _1399 = _1236;
        _1400 = _1235;
        _1401 = _1234;
        _1402 = _1246;
        _1403 = _1245;
        _1404 = _1244;
        _1405 = _1259;
        _1406 = _1258;
        _1407 = _1257;
        _1408 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0)));
        _1409 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0)));
        _1410 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0)));
    }
    else
    {
        _1395 = _1396;
        _1397 = _1396;
        _1398 = _1396;
        _1399 = _1396;
        _1400 = _1396;
        _1401 = _1396;
        _1402 = _1396;
        _1403 = _1396;
        _1404 = _1396;
        _1405 = _1396;
        _1406 = _1396;
        _1407 = _1396;
        _1408 = 0.0;
        _1409 = 0.0;
        _1410 = 0.0;
    }
    float _1704;
    float _1705;
    float _1706;
    float _1707;
    float _1708;
    float _1709;
    float _1710;
    float _1711;
    float _1712;
    float _1713;
    float _1714;
    float _1715;
    float _1716;
    float _1717;
    float _1718;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1435 = fma(_1094, cbModelParam._m0[30u].z, fma(_1090, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1086));
        float _1439 = fma(_1094, cbModelParam._m0[31u].z, fma(_1090, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1086));
        float _1443 = fma(_1094, cbModelParam._m0[32u].z, fma(_1090, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1086));
        float _1466 = _1086 + _857;
        float _1467 = _1090 + _858;
        float _1468 = _1094 + _859;
        float _1478 = fma(_1468, cbModelParam._m0[30u].z, fma(_1467, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1466)) - _1435;
        float _1479 = fma(_1468, cbModelParam._m0[31u].z, fma(_1467, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1466)) - _1439;
        float _1480 = fma(_1468, cbModelParam._m0[32u].z, fma(_1467, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1466)) - _1443;
        float _1484 = inversesqrt(dot(vec3(_1478, _1479, _1480), vec3(_1478, _1479, _1480)));
        float _1497 = ((_1484 * _1478) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1435 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1498 = ((_1484 * _1479) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1439 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1499 = ((_1484 * _1480) / cbModelParam._m0[35u].z) + ((((((_1443 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1501 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1497, _1498, _1499), 0.0);
        vec4 _1508 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1497, _1498, _1499), 0.0);
        vec4 _1515 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1497, _1498, _1499), 0.0);
        vec4 _1522 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1497, _1498, _1499), 0.0);
        float _1534 = exp2((_1501.w + (-0.5)) * 20.0) * 2.0;
        float _1535 = _1534 * (_1501.x + (-0.5));
        float _1536 = _1534 * (_1501.y + (-0.5));
        float _1537 = _1534 * (_1501.z + (-0.5));
        float _1544 = exp2((_1508.w + (-0.5)) * 20.0) * 2.0;
        float _1545 = _1544 * (_1508.x + (-0.5));
        float _1546 = _1544 * (_1508.y + (-0.5));
        float _1547 = _1544 * (_1508.z + (-0.5));
        float _1554 = exp2((_1515.w + (-0.5)) * 20.0) * 2.0;
        float _1555 = _1554 * (_1515.x + (-0.5));
        float _1556 = _1554 * (_1515.y + (-0.5));
        float _1557 = _1554 * (_1515.z + (-0.5));
        float _1564 = exp2((_1522.w + (-0.5)) * 20.0) * 2.0;
        float _1565 = _1564 * (_1522.x + (-0.5));
        float _1566 = _1564 * (_1522.y + (-0.5));
        float _1567 = _1564 * (_1522.z + (-0.5));
        float _1568 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
        float _1569 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
        float _1570 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
        float _1571 = _1535 * 0.5;
        float _1572 = _1545 * 0.5;
        float _1573 = _1555 * 0.5;
        float _1574 = dot(vec3(_1571, _1572, _1573), vec3(_1571, _1572, _1573));
        float _1579 = (_1574 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1574);
        float _1587 = (dot(vec3(_857, _858, _859), vec3(_1579 * _1571, _1579 * _1572, _1579 * _1573)) + 1.0) * 0.5;
        float _4109 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
        float _1596 = sqrt(((_1572 * _1572) + (_1571 * _1571)) + (_1573 * _1573)) / (_1568 + 9.9999997473787516355514526367188e-06);
        float _4120 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
        float _1597 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
        float _1598 = _1597 * 2.0;
        float _1602 = (1.0 - _1597) / (_1597 + 1.0);
        float _4131 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
        float _1603 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
        float _1612 = ((((1.0 - _1603) * (_1598 + 2.0)) * exp2(log2(isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0))) * (_1598 + 1.0))) + _1603) * _1568;
        float _1613 = _1536 * 0.5;
        float _1614 = _1546 * 0.5;
        float _1615 = _1556 * 0.5;
        float _1616 = dot(vec3(_1613, _1614, _1615), vec3(_1613, _1614, _1615));
        float _1621 = (_1616 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1616);
        float _1629 = (dot(vec3(_857, _858, _859), vec3(_1621 * _1613, _1621 * _1614, _1621 * _1615)) + 1.0) * 0.5;
        float _4142 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
        float _1638 = sqrt(((_1614 * _1614) + (_1613 * _1613)) + (_1615 * _1615)) / (_1569 + 9.9999997473787516355514526367188e-06);
        float _4153 = isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0));
        float _1639 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
        float _1640 = _1639 * 2.0;
        float _1644 = (1.0 - _1639) / (_1639 + 1.0);
        float _4164 = isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0));
        float _1645 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
        float _1654 = ((((1.0 - _1645) * (_1640 + 2.0)) * exp2(log2(isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0))) * (_1640 + 1.0))) + _1645) * _1569;
        float _1655 = _1537 * 0.5;
        float _1656 = _1547 * 0.5;
        float _1657 = _1557 * 0.5;
        float _1658 = dot(vec3(_1655, _1656, _1657), vec3(_1655, _1656, _1657));
        float _1663 = (_1658 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1658);
        float _1671 = (dot(vec3(_857, _858, _859), vec3(_1663 * _1655, _1663 * _1656, _1663 * _1657)) + 1.0) * 0.5;
        float _4175 = isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0));
        float _1680 = sqrt(((_1656 * _1656) + (_1655 * _1655)) + (_1657 * _1657)) / (_1570 + 9.9999997473787516355514526367188e-06);
        float _4186 = isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0));
        float _1681 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
        float _1682 = _1681 * 2.0;
        float _1686 = (1.0 - _1681) / (_1681 + 1.0);
        float _4197 = isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0));
        float _1687 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
        float _1696 = ((((1.0 - _1687) * (_1682 + 2.0)) * exp2(log2(isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0))) * (_1682 + 1.0))) + _1687) * _1570;
        _1704 = _1537;
        _1705 = _1536;
        _1706 = _1535;
        _1707 = _1547;
        _1708 = _1546;
        _1709 = _1545;
        _1710 = _1557;
        _1711 = _1556;
        _1712 = _1555;
        _1713 = _1570;
        _1714 = _1569;
        _1715 = _1568;
        _1716 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0)));
        _1717 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0)));
        _1718 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0)));
    }
    else
    {
        _1704 = _1396;
        _1705 = _1396;
        _1706 = _1396;
        _1707 = _1396;
        _1708 = _1396;
        _1709 = _1396;
        _1710 = _1396;
        _1711 = _1396;
        _1712 = _1396;
        _1713 = _1396;
        _1714 = _1396;
        _1715 = _1396;
        _1716 = 0.0;
        _1717 = 0.0;
        _1718 = 0.0;
    }
    float _1728 = (cbModelParam._m0[1u].x * (_1716 - _1408)) + _1408;
    float _1729 = (cbModelParam._m0[1u].x * (_1717 - _1409)) + _1409;
    float _1730 = (cbModelParam._m0[1u].x * (_1718 - _1410)) + _1410;
    float _1751 = fma(_1730, cbSceneParam._m0[89u].z, fma(_1729, cbSceneParam._m0[89u].y, _1728 * cbSceneParam._m0[89u].x));
    float _1754 = fma(_1730, cbSceneParam._m0[90u].z, fma(_1729, cbSceneParam._m0[90u].y, _1728 * cbSceneParam._m0[90u].x));
    float _1757 = fma(_1730, cbSceneParam._m0[91u].z, fma(_1729, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1728));
    float _1772 = _1030 * 0.5;
    float _1773 = _1031 * 0.5;
    float _1774 = _1032 * 0.5;
    float _1775 = dot(vec4(_1772, _1773, _1774, 1.0), vec4(_1706, _1709, _1712, _1715));
    float _1778 = dot(vec4(_1772, _1773, _1774, 1.0), vec4(_1705, _1708, _1711, _1714));
    float _1781 = dot(vec4(_1772, _1773, _1774, 1.0), vec4(_1704, _1707, _1710, _1713));
    float _1815;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1788 = dot(vec4(_1772, _1773, _1774, 1.0), vec4(_1395, _1399, _1402, _1405));
        float _1792 = dot(vec4(_1772, _1773, _1774, 1.0), vec4(_1397, _1400, _1403, _1406));
        float _1796 = dot(vec4(_1772, _1773, _1774, 1.0), vec4(_1398, _1401, _1404, _1407));
        float _1803 = dot(vec4(cbModelParam._m0[39u]), vec4(_1772, _1773, _1774, 1.0));
        _1815 = dot(vec3(isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0)), isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0)), isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1803) ? 0.0 : (isnan(0.0) ? _1803 : max(0.0, _1803))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1815 = 1.0;
    }
    float _1826;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1817 = dot(vec4(cbModelParam._m0[40u]), vec4(_1772, _1773, _1774, 1.0));
        _1826 = dot(vec3(isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0)), isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0)), isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1817) ? 0.0 : (isnan(0.0) ? _1817 : max(0.0, _1817))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1826 = 1.0;
    }
    float _1830 = (_1826 * cbModelParam._m0[1u].x) + (_1815 * (1.0 - cbModelParam._m0[1u].x));
    float _1840 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _860);
    float _1841 = isnan(_1840) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1840 : min(cbModelParam._m0[25u].z, _1840));
    float _1922;
    float _1924;
    float _1926;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1889 = fma(_1094, cbModelParam._m0[13u].z, fma(_1090, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1086)) + cbModelParam._m0[13u].w;
        float _1893 = fma(_1094, cbModelParam._m0[14u].z, fma(_1090, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1086)) + cbModelParam._m0[14u].w;
        float _1897 = fma(_1094, cbModelParam._m0[15u].z, fma(_1090, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1086)) + cbModelParam._m0[15u].w;
        float _1900 = fma(_1032, cbModelParam._m0[13u].z, fma(_1031, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1030));
        float _1903 = fma(_1032, cbModelParam._m0[14u].z, fma(_1031, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1030));
        float _1906 = fma(_1032, cbModelParam._m0[15u].z, fma(_1031, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1030));
        float _1934;
        if (_1900 > 0.0)
        {
            _1934 = abs((1.0 - _1889) / _1900);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1900 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1889 + 1.0) / _1900);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1934 = frontier_phi_14_12_ladder;
        }
        float _2158;
        if (_1903 > 0.0)
        {
            _2158 = abs((1.0 - _1893) / _1903);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1903 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1893 + 1.0) / _1903);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2158 = frontier_phi_23_19_ladder;
        }
        float _2415;
        if (_1906 > 0.0)
        {
            _2415 = abs((1.0 - _1897) / _1906);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1906 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1897 + 1.0) / _1906);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2415 = frontier_phi_35_30_ladder;
        }
        float _2417 = isnan(_2158) ? _1934 : (isnan(_1934) ? _2158 : min(_1934, _2158));
        float _2418 = isnan(_2415) ? _2417 : (isnan(_2417) ? _2415 : min(_2417, _2415));
        float _2422 = (_2418 * _1900) + _1889;
        float _2423 = (_2418 * _1903) + _1893;
        float _2424 = (_2418 * _1906) + _1897;
        float _2425 = _2418 * 9.9999997473787516355514526367188e-05;
        float _2427 = (-1.0) - _2425;
        float _2429 = _2425 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2424 > _2429) || ((_2424 < _2427) || ((_2423 > _2429) || ((_2423 < _2427) || ((_2422 < _2427) || (_2422 > _2429))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2552 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2424, cbModelParam._m0[9u].z, fma(_2423, cbModelParam._m0[9u].y, _2422 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2424, cbModelParam._m0[10u].z, fma(_2423, cbModelParam._m0[10u].y, _2422 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2424, cbModelParam._m0[11u].z, fma(_2423, cbModelParam._m0[11u].y, _2422 * cbModelParam._m0[11u].x))), _1841);
            frontier_phi_13_35_ladder = _2552.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2552.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2552.x * cbModelParam._m0[1u].y;
        }
        _1922 = frontier_phi_13_35_ladder_2;
        _1924 = frontier_phi_13_35_ladder_1;
        _1926 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1910 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1030, _1031, _1032), _1841);
        _1922 = _1910.x * cbModelParam._m0[1u].y;
        _1924 = _1910.y * cbModelParam._m0[1u].y;
        _1926 = _1910.z * cbModelParam._m0[1u].y;
    }
    float _1930 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _860);
    float _1931 = isnan(_1930) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1930 : min(cbModelParam._m0[25u].w, _1930));
    float _2021;
    float _2023;
    float _2025;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1985 = fma(_1094, cbModelParam._m0[21u].z, fma(_1090, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1086)) + cbModelParam._m0[21u].w;
        float _1989 = fma(_1094, cbModelParam._m0[22u].z, fma(_1090, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1086)) + cbModelParam._m0[22u].w;
        float _1993 = fma(_1094, cbModelParam._m0[23u].z, fma(_1090, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1086)) + cbModelParam._m0[23u].w;
        float _1996 = fma(_1032, cbModelParam._m0[21u].z, fma(_1031, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1030));
        float _1999 = fma(_1032, cbModelParam._m0[22u].z, fma(_1031, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1030));
        float _2002 = fma(_1032, cbModelParam._m0[23u].z, fma(_1031, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1030));
        float _2163;
        if (_1996 > 0.0)
        {
            _2163 = abs((1.0 - _1985) / _1996);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1996 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1985 + 1.0) / _1996);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2163 = frontier_phi_25_21_ladder;
        }
        float _2442;
        if (_1999 > 0.0)
        {
            _2442 = abs((1.0 - _1989) / _1999);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1999 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1989 + 1.0) / _1999);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2442 = frontier_phi_37_32_ladder;
        }
        float _2655;
        if (_2002 > 0.0)
        {
            _2655 = abs((1.0 - _1993) / _2002);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2002 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1993 + 1.0) / _2002);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2655 = frontier_phi_46_43_ladder;
        }
        float _2657 = isnan(_2442) ? _2163 : (isnan(_2163) ? _2442 : min(_2163, _2442));
        float _2658 = isnan(_2655) ? _2657 : (isnan(_2657) ? _2655 : min(_2657, _2655));
        float _2662 = (_2658 * _1996) + _1985;
        float _2663 = (_2658 * _1999) + _1989;
        float _2664 = (_2658 * _2002) + _1993;
        float _2665 = _2658 * 9.9999997473787516355514526367188e-05;
        float _2666 = (-1.0) - _2665;
        float _2668 = _2665 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2664 > _2668) || ((_2664 < _2666) || ((_2663 > _2668) || ((_2663 < _2666) || ((_2662 < _2666) || (_2662 > _2668))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2863 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2664, cbModelParam._m0[17u].z, fma(_2663, cbModelParam._m0[17u].y, _2662 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2664, cbModelParam._m0[18u].z, fma(_2663, cbModelParam._m0[18u].y, _2662 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2664, cbModelParam._m0[19u].z, fma(_2663, cbModelParam._m0[19u].y, _2662 * cbModelParam._m0[19u].x))), _1931);
            frontier_phi_22_46_ladder = _2863.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2863.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2863.x * cbModelParam._m0[1u].z;
        }
        _2021 = frontier_phi_22_46_ladder_2;
        _2023 = frontier_phi_22_46_ladder_1;
        _2025 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2005 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1030, _1031, _1032), _1931);
        _2021 = _2005.x * cbModelParam._m0[1u].z;
        _2023 = _2005.y * cbModelParam._m0[1u].z;
        _2025 = _2005.z * cbModelParam._m0[1u].z;
    }
    float _2038 = (((_1057 * _1006) + _1058) * _1022) * ((cbModelParam._m0[1u].w * (_2021 - _1922)) + _1922);
    float _2040 = (((_1057 * _1008) + _1058) * _1022) * ((cbModelParam._m0[1u].w * (_2023 - _1924)) + _1924);
    float _2042 = (((_1057 * _1009) + _1058) * _1022) * ((cbModelParam._m0[1u].w * (_2025 - _1926)) + _1926);
    float _2045 = fma(_2042, cbSceneParam._m0[89u].z, fma(_2040, cbSceneParam._m0[89u].y, _2038 * cbSceneParam._m0[89u].x));
    float _2048 = fma(_2042, cbSceneParam._m0[90u].z, fma(_2040, cbSceneParam._m0[90u].y, _2038 * cbSceneParam._m0[90u].x));
    float _2051 = fma(_2042, cbSceneParam._m0[91u].z, fma(_2040, cbSceneParam._m0[91u].y, _2038 * cbSceneParam._m0[91u].x));
    vec4 _2059 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_944, _945));
    float _2061 = _2059.w;
    float _2073 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2061);
    float _2074 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2061);
    float _2075 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2061);
    uvec4 _2079 = floatBitsToUint(cbInstanceData._m0[_279 + 5u]);
    uint _2081 = _2079.x * 14u;
    uint _2082 = _2081 + 13u;
    float _2089 = _1022 + (-1.0);
    float _2094 = (cbLight._m0[_2082].x * _2089) + 1.0;
    float _2095 = (cbLight._m0[_2082].y * _2089) + 1.0;
    float _2096 = (cbLight._m0[_2082].z * _2089) + 1.0;
    float _2097 = (cbLight._m0[_2082].w * _2089) + 1.0;
    uint _2098 = _2081 + 5u;
    float _2104 = isnan(1.0) ? _2095 : (isnan(_2095) ? 1.0 : min(_2095, 1.0));
    uint _2108 = _2081 + 4u;
    float _2117 = isnan(1.0) ? _2094 : (isnan(_2094) ? 1.0 : min(_2094, 1.0));
    uint _2121 = _2081 | 1u;
    float _2132 = dot(vec3(cbLight._m0[_2081].xyz), vec3(_857, _858, _859));
    float _2135 = dot(vec3(cbLight._m0[_2121].xyz), vec3(_857, _858, _859));
    float _4333 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
    float _4344 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
    float _2140 = (isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0))) * 0.3183098733425140380859375;
    float _2142 = (isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0))) * 0.3183098733425140380859375;
    float _2149 = ((cbLight._m0[_2098].x * _2104) * _2142) + (((cbLight._m0[_2108].x * _2073) * _2117) * _2140);
    float _2150 = ((_2104 * cbLight._m0[_2098].y) * _2142) + (((cbLight._m0[_2108].y * _2074) * _2117) * _2140);
    float _2151 = ((_2104 * cbLight._m0[_2098].z) * _2142) + (((cbLight._m0[_2108].z * _2075) * _2117) * _2140);
    uvec4 _2155 = floatBitsToUint(cbLight._m0[_2081 + 12u]);
    bool _2157 = _2155.x == 0u;
    float _2168;
    float _2170;
    float _2172;
    if (_2157)
    {
        _2168 = _2149;
        _2170 = _2150;
        _2172 = _2151;
    }
    else
    {
        uint _2176 = _2081 + 6u;
        float _2192 = (dot(vec3(cbLight._m0[_2081 + 2u].xyz), vec3(_857, _858, _859)) * 0.5) + 0.5;
        float _2193 = _2192 * _2192;
        float _4355 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
        float _2194 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
        float _2195 = isnan(1.0) ? _2096 : (isnan(_2096) ? 1.0 : min(_2096, 1.0));
        _2168 = (((cbLight._m0[_2176].x * 0.3183098733425140380859375) * _2194) * _2195) + _2149;
        _2170 = (((cbLight._m0[_2176].y * 0.3183098733425140380859375) * _2194) * _2195) + _2150;
        _2172 = (((cbLight._m0[_2176].z * 0.3183098733425140380859375) * _2194) * _2195) + _2151;
    }
    bool _2175 = _2155.y == 0u;
    float _2213;
    float _2215;
    float _2217;
    if (_2175)
    {
        _2213 = _2168;
        _2215 = _2170;
        _2217 = _2172;
    }
    else
    {
        uint _2386 = _2081 + 7u;
        float _2402 = (dot(vec3(cbLight._m0[_2081 + 3u].xyz), vec3(_857, _858, _859)) * 0.5) + 0.5;
        float _2403 = _2402 * _2402;
        float _4371 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
        float _2404 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
        float _2405 = isnan(1.0) ? _2097 : (isnan(_2097) ? 1.0 : min(_2097, 1.0));
        _2213 = (((cbLight._m0[_2386].x * 0.3183098733425140380859375) * _2404) * _2405) + _2168;
        _2215 = (((cbLight._m0[_2386].y * 0.3183098733425140380859375) * _2404) * _2405) + _2170;
        _2217 = (((cbLight._m0[_2386].z * 0.3183098733425140380859375) * _2404) * _2405) + _2172;
    }
    uint _2220 = _2081 + 8u;
    float _2233 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2081].w)) * _860) * 0.949999988079071044921875);
    float _2234 = _2233 * _2233;
    float _2235 = cbLight._m0[_2081].x + _936;
    float _2236 = cbLight._m0[_2081].y + _937;
    float _2237 = cbLight._m0[_2081].z + _938;
    float _2241 = inversesqrt(dot(vec3(_2235, _2236, _2237), vec3(_2235, _2236, _2237)));
    float _2242 = _2241 * _2235;
    float _2243 = _2241 * _2236;
    float _2244 = _2241 * _2237;
    float _2245 = dot(vec3(_857, _858, _859), vec3(cbLight._m0[_2081].xyz));
    float _4387 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
    float _2248 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
    float _4398 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
    float _2249 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
    float _2250 = dot(vec3(_857, _858, _859), vec3(_2242, _2243, _2244));
    float _4409 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
    float _2253 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
    float _2254 = dot(vec3(cbLight._m0[_2081].xyz), vec3(_2242, _2243, _2244));
    float _4420 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
    float _2258 = _2234 * _2234;
    float _2262 = ((_2253 * _2253) * (_2258 + (-1.0))) + 1.0;
    float _2270 = exp2(log2(1.0 - (isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0)))) * 5.0);
    float _2271 = 0.959999978542327880859375 - _1003;
    float _2273 = 0.959999978542327880859375 - _1004;
    float _2274 = 0.959999978542327880859375 - _1005;
    float _2281 = 1.0 - _2234;
    float _2292 = (0.5 / (((_2249 * ((_2248 * _2281) + _2234)) + 9.9999999392252902907785028219223e-09) + (((_2249 * _2281) + _2234) * _2248))) * _2248;
    float _4431 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0));
    float _2294 = (isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0))) * (_2258 / ((_2262 * _2262) * 3.141590118408203125));
    uint _2308 = _2081 + 9u;
    float _2319 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2121].w)) * _860) * 0.949999988079071044921875);
    float _2320 = _2319 * _2319;
    float _2321 = cbLight._m0[_2121].x + _936;
    float _2322 = cbLight._m0[_2121].y + _937;
    float _2323 = cbLight._m0[_2121].z + _938;
    float _2327 = inversesqrt(dot(vec3(_2321, _2322, _2323), vec3(_2321, _2322, _2323)));
    float _2328 = _2327 * _2321;
    float _2329 = _2327 * _2322;
    float _2330 = _2327 * _2323;
    float _2331 = dot(vec3(_857, _858, _859), vec3(cbLight._m0[_2121].xyz));
    float _4442 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
    float _2334 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
    float _2335 = dot(vec3(_857, _858, _859), vec3(_2328, _2329, _2330));
    float _4453 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
    float _2338 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
    float _2339 = dot(vec3(cbLight._m0[_2121].xyz), vec3(_2328, _2329, _2330));
    float _4464 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
    float _2343 = _2320 * _2320;
    float _2347 = ((_2338 * _2338) * (_2343 + (-1.0))) + 1.0;
    float _2354 = exp2(log2(1.0 - (isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0)))) * 5.0);
    float _2361 = 1.0 - _2320;
    float _2371 = (0.5 / (((_2249 * ((_2334 * _2361) + _2320)) + 9.9999999392252902907785028219223e-09) + (((_2249 * _2361) + _2320) * _2334))) * _2334;
    float _4475 = isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0));
    float _2373 = (isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0))) * (_2343 / ((_2347 * _2347) * 3.141590118408203125));
    float _2383 = (((((_2354 * _2271) + _1006) * cbLight._m0[_2308].x) * _2373) * _2104) + ((((cbLight._m0[_2220].x * _2073) * ((_2270 * _2271) + _1006)) * _2294) * _2117);
    float _2384 = (((((_2354 * _2273) + _1008) * cbLight._m0[_2308].y) * _2373) * _2104) + ((((cbLight._m0[_2220].y * _2074) * ((_2270 * _2273) + _1008)) * _2294) * _2117);
    float _2385 = (((((_2354 * _2274) + _1009) * cbLight._m0[_2308].z) * _2373) * _2104) + ((((cbLight._m0[_2220].z * _2075) * ((_2270 * _2274) + _1009)) * _2294) * _2117);
    float _2447;
    float _2449;
    float _2451;
    if (_2157)
    {
        _2447 = _2383;
        _2449 = _2384;
        _2451 = _2385;
    }
    else
    {
        uint _2453 = _2081 + 2u;
        uint _2457 = _2081 + 10u;
        float _2471 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2453].w)) * _860) * 0.949999988079071044921875);
        float _2472 = _2471 * _2471;
        float _2473 = cbLight._m0[_2453].x + _936;
        float _2474 = cbLight._m0[_2453].y + _937;
        float _2475 = cbLight._m0[_2453].z + _938;
        float _2479 = inversesqrt(dot(vec3(_2473, _2474, _2475), vec3(_2473, _2474, _2475)));
        float _2480 = _2479 * _2473;
        float _2481 = _2479 * _2474;
        float _2482 = _2479 * _2475;
        float _2483 = dot(vec3(_857, _858, _859), vec3(cbLight._m0[_2453].xyz));
        float _4486 = isnan(0.0) ? _2483 : (isnan(_2483) ? 0.0 : max(_2483, 0.0));
        float _2486 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
        float _2487 = dot(vec3(_857, _858, _859), vec3(_2480, _2481, _2482));
        float _4497 = isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : max(_2487, 0.0));
        float _2490 = isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0));
        float _2491 = dot(vec3(cbLight._m0[_2453].xyz), vec3(_2480, _2481, _2482));
        float _4508 = isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0));
        float _2495 = _2472 * _2472;
        float _2499 = ((_2490 * _2490) * (_2495 + (-1.0))) + 1.0;
        float _2506 = exp2(log2(1.0 - (isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0)))) * 5.0);
        float _2513 = 1.0 - _2472;
        float _2523 = (0.5 / (((_2249 * ((_2486 * _2513) + _2472)) + 9.9999999392252902907785028219223e-09) + (((_2249 * _2513) + _2472) * _2486))) * _2486;
        float _4519 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
        float _2525 = (isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0))) * (_2495 / ((_2499 * _2499) * 3.141590118408203125));
        float _2526 = isnan(1.0) ? _2096 : (isnan(_2096) ? 1.0 : min(_2096, 1.0));
        _2447 = (((((_2506 * _2271) + _1006) * cbLight._m0[_2457].x) * _2525) * _2526) + _2383;
        _2449 = (((((_2506 * _2273) + _1008) * cbLight._m0[_2457].y) * _2525) * _2526) + _2384;
        _2451 = (((((_2506 * _2274) + _1009) * cbLight._m0[_2457].z) * _2525) * _2526) + _2385;
    }
    float _2561;
    float _2563;
    float _2565;
    if (_2175)
    {
        _2561 = _2447;
        _2563 = _2449;
        _2565 = _2451;
    }
    else
    {
        uint _2572 = _2081 + 3u;
        uint _2576 = _2081 + 11u;
        float _2590 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2572].w)) * _860) * 0.949999988079071044921875);
        float _2591 = _2590 * _2590;
        float _2592 = cbLight._m0[_2572].x + _936;
        float _2593 = cbLight._m0[_2572].y + _937;
        float _2594 = cbLight._m0[_2572].z + _938;
        float _2598 = inversesqrt(dot(vec3(_2592, _2593, _2594), vec3(_2592, _2593, _2594)));
        float _2599 = _2598 * _2592;
        float _2600 = _2598 * _2593;
        float _2601 = _2598 * _2594;
        float _2602 = dot(vec3(_857, _858, _859), vec3(cbLight._m0[_2572].xyz));
        float _4535 = isnan(0.0) ? _2602 : (isnan(_2602) ? 0.0 : max(_2602, 0.0));
        float _2605 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
        float _2606 = dot(vec3(_857, _858, _859), vec3(_2599, _2600, _2601));
        float _4546 = isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : max(_2606, 0.0));
        float _2609 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
        float _2610 = dot(vec3(cbLight._m0[_2572].xyz), vec3(_2599, _2600, _2601));
        float _4557 = isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : max(_2610, 0.0));
        float _2614 = _2591 * _2591;
        float _2618 = ((_2609 * _2609) * (_2614 + (-1.0))) + 1.0;
        float _2625 = exp2(log2(1.0 - (isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0)))) * 5.0);
        float _2632 = 1.0 - _2591;
        float _2642 = (0.5 / (((_2249 * ((_2605 * _2632) + _2591)) + 9.9999999392252902907785028219223e-09) + (((_2249 * _2632) + _2591) * _2605))) * _2605;
        float _4568 = isnan(0.0) ? _2642 : (isnan(_2642) ? 0.0 : max(_2642, 0.0));
        float _2644 = (isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0))) * (_2614 / ((_2618 * _2618) * 3.141590118408203125));
        float _2645 = isnan(1.0) ? _2097 : (isnan(_2097) ? 1.0 : min(_2097, 1.0));
        _2561 = (((((_2625 * _2271) + _1006) * cbLight._m0[_2576].x) * _2644) * _2645) + _2447;
        _2563 = (((((_2625 * _2273) + _1008) * cbLight._m0[_2576].y) * _2644) * _2645) + _2449;
        _2565 = (((((_2625 * _2274) + _1009) * cbLight._m0[_2576].z) * _2644) * _2645) + _2451;
    }
    float _2780;
    float _2782;
    float _2784;
    float _2786;
    float _2788;
    float _2790;
    if (_2079.y == 0u)
    {
        float _2720 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2721 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2720;
        float _2722 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2720;
        float _2723 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2720;
        uvec4 _2735 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2736 = _2735.x;
        uint _2747 = uint((float(_2735.y) * floor(float(uint(cbSceneParam._m0[85u].y * _945) / _2736))) + floor(float(uint(cbSceneParam._m0[85u].x * _944) / _2736)));
        float _2757 = (log2(_2723 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2758 = isnan(0.0) ? _2757 : (isnan(_2757) ? 0.0 : max(_2757, 0.0));
        uint _2761 = uint(isnan(14.0) ? _2758 : (isnan(_2758) ? 14.0 : min(_2758, 14.0)));
        uvec4 _2766 = texelFetch(g_lightClusterGridBuffer, int(((_2761 << 2u) + (_2747 << 6u)) >> 2u));
        uint _2767 = _2766.x;
        uint _2768 = _2735.z;
        float _2868;
        float _2870;
        float _2872;
        float _2874;
        float _2876;
        float _2878;
        if (((((1u << ((_2768 >> 4u) & 15u)) + 4294967295u) & _2767) == 0u) || ((_2768 & 240u) == 0u))
        {
            _2868 = 0.0;
            _2870 = 0.0;
            _2872 = 0.0;
            _2874 = 0.0;
            _2876 = 0.0;
            _2878 = 0.0;
        }
        else
        {
            float _2869;
            float _2871;
            float _2873;
            float _2875;
            float _2877;
            float _2879;
            float _3012 = 0.0;
            float _3013 = 0.0;
            float _3014 = 0.0;
            float _3015 = 0.0;
            float _3016 = 0.0;
            float _3017 = 0.0;
            uint _3018 = 0u;
            uint _3027;
            bool _3028;
            for (;;)
            {
                _3027 = texelFetch(g_lightClassification, int((((_2761 << 5u) + (_2747 << 9u)) + (_3018 << 2u)) >> 2u)).x;
                _3028 = _3027 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3028)
                {
                    frontier_phi_61_pred = _3012;
                    frontier_phi_61_pred_1 = _3017;
                    frontier_phi_61_pred_2 = _3016;
                    frontier_phi_61_pred_3 = _3015;
                    frontier_phi_61_pred_4 = _3014;
                    frontier_phi_61_pred_5 = _3013;
                }
                else
                {
                    float _3136;
                    float _3137;
                    float _3138;
                    float _3139;
                    float _3140;
                    float _3141;
                    uint _3142;
                    _3136 = _3012;
                    _3137 = _3013;
                    _3138 = _3014;
                    _3139 = _3015;
                    _3140 = _3016;
                    _3141 = _3017;
                    _3142 = _3027;
                    float _3068;
                    float _3069;
                    float _3070;
                    float _3071;
                    float _3072;
                    float _3073;
                    for (;;)
                    {
                        uint _3146 = uint(findLSB(_3142)) + (_3018 << 5u);
                        uint _3143 = (_3142 + 4294967295u) & _3142;
                        uint _3148 = _3146 * 48u;
                        vec4 _3162 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3148)).x, texelFetch(g_PointLightRenderingBuffer, int(_3148 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3148 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3148 + 3u)).x));
                        uint _3168 = (_3146 * 48u) + 4u;
                        vec4 _3181 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3168)).x, texelFetch(g_PointLightRenderingBuffer, int(_3168 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3168 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3168 + 3u)).x));
                        uint _3187 = (_3146 * 48u) + 8u;
                        vec3 _3198 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3187)).x, texelFetch(g_PointLightRenderingBuffer, int(_3187 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3187 + 2u)).x));
                        float _3202 = _3162.x - _2721;
                        float _3203 = _3162.y - _2722;
                        float _3204 = _3162.z - _2723;
                        float _3205 = dot(vec3(_3202, _3203, _3204), vec3(_3202, _3203, _3204));
                        float _3208 = inversesqrt(_3205);
                        float _3209 = _3208 * _3202;
                        float _3210 = _3208 * _3203;
                        float _3211 = _3208 * _3204;
                        float _3212 = dot(vec3(_963, _966, _969), vec3(_3209, _3210, _3211));
                        float _3217 = 1.0 - (_3205 * _3162.w);
                        float _4594 = isnan(0.0) ? _3217 : (isnan(_3217) ? 0.0 : max(_3217, 0.0));
                        float _3218 = isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0));
                        float _3219 = sqrt(_3205) * _3181.w;
                        float _3222 = 1.39999997615814208984375 / (_3219 + 1.39999997615814208984375);
                        float _3223 = _3222 * _3222;
                        float _3226 = ((1.0 - _3223) * _3212) + _3223;
                        float _3229 = _3219 * _3219;
                        float _3233 = ((isnan(0.0) ? _3226 : (isnan(_3226) ? 0.0 : max(_3226, 0.0))) * _3218) / ((_3229 * 0.699999988079071044921875) + 1.0);
                        float _3237 = (-0.0) - _2721;
                        float _3238 = (-0.0) - _2722;
                        float _3239 = (-0.0) - _2723;
                        float _3243 = inversesqrt(dot(vec3(_3237, _3238, _3239), vec3(_3237, _3238, _3239)));
                        float _3244 = _3243 * _3237;
                        float _3245 = _3243 * _3238;
                        float _3246 = _3243 * _3239;
                        float _3254 = exp2(log2(1.0 / ((_3229 * 3.5) + 5.0)) * 0.25);
                        float _3255 = 1.0 - _1038;
                        float _3262 = sqrt(1.0 - ((1.0 - (_3255 * _3255)) * (1.0 - (_3254 * _3254))));
                        float _3263 = _3262 * _3262;
                        float _3264 = _3263 * _3263;
                        float _3265 = _3244 + _3209;
                        float _3266 = _3245 + _3210;
                        float _3267 = _3246 + _3211;
                        float _3271 = inversesqrt(dot(vec3(_3265, _3266, _3267), vec3(_3265, _3266, _3267)));
                        float _3275 = dot(vec3(_963, _966, _969), vec3(_3244, _3245, _3246));
                        float _4610 = isnan(0.0) ? _3275 : (isnan(_3275) ? 0.0 : max(_3275, 0.0));
                        float _3278 = isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0));
                        float _3279 = dot(vec3(_963, _966, _969), vec3(_3271 * _3265, _3271 * _3266, _3271 * _3267));
                        float _4621 = isnan(0.0) ? _3279 : (isnan(_3279) ? 0.0 : max(_3279, 0.0));
                        float _3282 = isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0));
                        float _3286 = ((_3282 * _3282) * (_3264 + (-1.0))) + 1.0;
                        float _3287 = _3222 * _3263;
                        float _3288 = _3287 * _3287;
                        float _3291 = ((1.0 - _3288) * _3212) + _3288;
                        float _4632 = isnan(0.0) ? _3291 : (isnan(_3291) ? 0.0 : max(_3291, 0.0));
                        float _3292 = isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0));
                        float _3293 = 1.0 - _3263;
                        float _3303 = (0.5 / (((_3292 * ((_3278 * _3293) + _3263)) + 9.9999999392252902907785028219223e-09) + (((_3292 * _3293) + _3263) * _3278))) * _3292;
                        float _4643 = isnan(0.0) ? _3303 : (isnan(_3303) ? 0.0 : max(_3303, 0.0));
                        float _3314 = (((_3264 * 3.1415927410125732421875) * (isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0)))) / ((_3286 * _3286) * ((_3229 * 2.1991131305694580078125) + 3.141590118408203125))) * _3218;
                        _3071 = (_3233 * _3181.x) + _3139;
                        _3072 = (_3233 * _3181.y) + _3140;
                        _3073 = (_3233 * _3181.z) + _3141;
                        _3068 = (_3314 * _3198.x) + _3136;
                        _3069 = (_3314 * _3198.y) + _3137;
                        _3070 = (_3314 * _3198.z) + _3138;
                        if (_3143 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3136 = _3068;
                            _3137 = _3069;
                            _3138 = _3070;
                            _3139 = _3071;
                            _3140 = _3072;
                            _3141 = _3073;
                            _3142 = _3143;
                        }
                    }
                    frontier_phi_61_pred = _3068;
                    frontier_phi_61_pred_1 = _3073;
                    frontier_phi_61_pred_2 = _3072;
                    frontier_phi_61_pred_3 = _3071;
                    frontier_phi_61_pred_4 = _3070;
                    frontier_phi_61_pred_5 = _3069;
                }
                _2869 = frontier_phi_61_pred;
                _2879 = frontier_phi_61_pred_1;
                _2877 = frontier_phi_61_pred_2;
                _2875 = frontier_phi_61_pred_3;
                _2873 = frontier_phi_61_pred_4;
                _2871 = frontier_phi_61_pred_5;
                uint _3019 = _3018 + 1u;
                if (_3019 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3012 = _2869;
                    _3013 = _2871;
                    _3014 = _2873;
                    _3015 = _2875;
                    _3016 = _2877;
                    _3017 = _2879;
                    _3018 = _3019;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2868 = _2869;
            _2870 = _2871;
            _2872 = _2873;
            _2874 = _2875;
            _2876 = _2877;
            _2878 = _2879;
        }
        uvec4 _2882 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2883 = _2882.z;
        uint _2885 = (_2883 >> 8u) & 15u;
        float _2980;
        float _2982;
        float _2984;
        float _2986;
        float _2988;
        float _2990;
        if (((4294967295u << _2885) & _2767) == 0u)
        {
            _2980 = _2868;
            _2982 = _2870;
            _2984 = _2872;
            _2986 = _2874;
            _2988 = _2876;
            _2990 = _2878;
        }
        else
        {
            float _3005 = inversesqrt(dot(vec3(_2721, _2722, _2723), vec3(_2721, _2722, _2723)));
            float _3006 = _3005 * _2721;
            float _3007 = _3005 * _2722;
            float _3008 = _3005 * _2723;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2885 < ((_2883 >> 12u) & 15u))
            {
                float _2981;
                float _2983;
                float _2985;
                float _2987;
                float _2989;
                float _2991;
                float _3119 = _2868;
                float _3120 = _2870;
                float _3121 = _2872;
                float _3122 = _2874;
                float _3123 = _2876;
                float _3124 = _2878;
                uint _3125 = _2885;
                uint _3134;
                bool _3135;
                for (;;)
                {
                    _3134 = texelFetch(g_lightClassification, int((((_2761 << 5u) + (_2747 << 9u)) + (_3125 << 2u)) >> 2u)).x;
                    _3135 = _3134 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3135)
                    {
                        frontier_phi_67_pred = _3122;
                        frontier_phi_67_pred_1 = _3123;
                        frontier_phi_67_pred_2 = _3124;
                        frontier_phi_67_pred_3 = _3121;
                        frontier_phi_67_pred_4 = _3120;
                        frontier_phi_67_pred_5 = _3119;
                    }
                    else
                    {
                        float _3319;
                        float _3320;
                        float _3321;
                        float _3322;
                        float _3323;
                        float _3324;
                        float _3612;
                        float _3613;
                        float _3614;
                        float _3615;
                        float _3616;
                        float _3617;
                        float _3332 = _3119;
                        float _3333 = _3120;
                        float _3334 = _3121;
                        float _3335 = _3122;
                        float _3336 = _3123;
                        float _3337 = _3124;
                        uint _3338 = _3134;
                        uint _3339;
                        vec4 _3364;
                        float _3365;
                        vec4 _3380;
                        vec3 _3392;
                        vec4 _3407;
                        vec4 _3422;
                        float _3468;
                        bool _3469;
                        for (;;)
                        {
                            uint _3349 = ((_3125 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3338));
                            _3339 = (_3338 + 4294967295u) & _3338;
                            uint _3351 = _3349 * 40u;
                            _3364 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3351)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 3u)).x));
                            _3365 = _3364.w;
                            uint _3367 = (_3349 * 40u) + 4u;
                            _3380 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3367)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 3u)).x));
                            uint _3382 = (_3349 * 40u) + 8u;
                            _3392 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3382)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 2u)).x));
                            uint _3394 = (_3349 * 40u) + 16u;
                            _3407 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3394)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 3u)).x));
                            uint _3409 = (_3349 * 40u) + 20u;
                            _3422 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3409)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 3u)).x));
                            uint _3424 = (_3349 * 40u) + 24u;
                            vec4 _3437 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3424)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 3u)).x));
                            uint _3443 = (_3349 * 40u) + 28u;
                            vec4 _3456 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3443)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 3u)).x));
                            _3468 = fma(_2723, _3456.z, fma(_2722, _3456.y, _3456.x * _2721)) + _3456.w;
                            _3469 = !((fma(_2723, _3437.z, fma(_2722, _3437.y, _3437.x * _2721)) + _3437.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3469)
                            {
                                float _3496 = _3364.x - _2721;
                                float _3497 = _3364.y - _2722;
                                float _3498 = _3364.z - _2723;
                                float _3499 = dot(vec3(_3496, _3497, _3498), vec3(_3496, _3497, _3498));
                                float _3502 = inversesqrt(_3499);
                                float _3503 = _3502 * _3496;
                                float _3504 = _3502 * _3497;
                                float _3505 = _3502 * _3498;
                                float _3509 = 1.0 - (_3499 / (_3365 * _3365));
                                float _4654 = isnan(0.0) ? _3509 : (isnan(_3509) ? 0.0 : max(_3509, 0.0));
                                float _3510 = isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0));
                                float _3514 = sqrt(_3499) * _3380.w;
                                float _3516 = 1.39999997615814208984375 / (_3514 + 1.39999997615814208984375);
                                float _3517 = _3516 * _3516;
                                float _3520 = ((1.0 - _3517) * dot(vec3(_3503, _3504, _3505), vec3(_963, _966, _969))) + _3517;
                                float _3523 = _3514 * _3514;
                                float _3527 = (fma(_2723, _3407.z, fma(_2722, _3407.y, _3407.x * _2721)) + _3407.w) / _3468;
                                float _3528 = (fma(_2723, _3422.z, fma(_2722, _3422.y, _3422.x * _2721)) + _3422.w) / _3468;
                                float _3532 = 1.0 - dot(vec2(_3527, _3528), vec2(_3527, _3528));
                                float _4670 = isnan(0.0) ? _3532 : (isnan(_3532) ? 0.0 : max(_3532, 0.0));
                                float _3533 = isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0));
                                float _3534 = _3533 * (((isnan(0.0) ? _3520 : (isnan(_3520) ? 0.0 : max(_3520, 0.0))) * _3510) / ((_3523 * 0.699999988079071044921875) + 1.0));
                                float _3546 = exp2(log2(1.0 / ((_3523 * 3.5) + 5.0)) * 0.25);
                                float _3547 = 1.0 - _1038;
                                float _3554 = sqrt(1.0 - ((1.0 - (_3547 * _3547)) * (1.0 - (_3546 * _3546))));
                                float _3555 = _3554 * _3554;
                                float _3556 = _3555 * _3555;
                                float _3557 = _3503 - _3006;
                                float _3558 = _3504 - _3007;
                                float _3559 = _3505 - _3008;
                                float _3563 = inversesqrt(dot(vec3(_3557, _3558, _3559), vec3(_3557, _3558, _3559)));
                                float _3567 = dot(vec3(_963, _966, _969), vec3((-0.0) - _3006, (-0.0) - _3007, (-0.0) - _3008));
                                float _4681 = isnan(0.0) ? _3567 : (isnan(_3567) ? 0.0 : max(_3567, 0.0));
                                float _3570 = isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0));
                                float _3571 = dot(vec3(_963, _966, _969), vec3(_3563 * _3557, _3563 * _3558, _3563 * _3559));
                                float _4692 = isnan(0.0) ? _3571 : (isnan(_3571) ? 0.0 : max(_3571, 0.0));
                                float _3574 = isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0));
                                float _3578 = ((_3574 * _3574) * (_3556 + (-1.0))) + 1.0;
                                float _3579 = _3516 * _3555;
                                float _3580 = _3579 * _3579;
                                float _3586 = ((1.0 - _3580) * dot(vec3(_963, _966, _969), vec3(_3503, _3504, _3505))) + _3580;
                                float _4703 = isnan(0.0) ? _3586 : (isnan(_3586) ? 0.0 : max(_3586, 0.0));
                                float _3587 = isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0));
                                float _3588 = 1.0 - _3555;
                                float _3598 = (0.5 / (((_3587 * ((_3570 * _3588) + _3555)) + 9.9999999392252902907785028219223e-09) + (((_3587 * _3588) + _3555) * _3570))) * _3587;
                                float _4714 = isnan(0.0) ? _3598 : (isnan(_3598) ? 0.0 : max(_3598, 0.0));
                                float _3608 = (_3533 * _3510) * (((_3556 * 3.1415927410125732421875) * (isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0)))) / ((_3578 * _3578) * ((_3523 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3608 * _3392.x;
                                frontier_phi_73_pred_1 = _3608 * _3392.y;
                                frontier_phi_73_pred_2 = _3534 * _3380.z;
                                frontier_phi_73_pred_3 = _3534 * _3380.y;
                                frontier_phi_73_pred_4 = _3534 * _3380.x;
                                frontier_phi_73_pred_5 = _3608 * _3392.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3612 = frontier_phi_73_pred;
                            _3613 = frontier_phi_73_pred_1;
                            _3617 = frontier_phi_73_pred_2;
                            _3616 = frontier_phi_73_pred_3;
                            _3615 = frontier_phi_73_pred_4;
                            _3614 = frontier_phi_73_pred_5;
                            _3322 = _3615 + _3335;
                            _3323 = _3616 + _3336;
                            _3324 = _3617 + _3337;
                            _3319 = _3612 + _3332;
                            _3320 = _3613 + _3333;
                            _3321 = _3614 + _3334;
                            if (_3339 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3332 = _3319;
                                _3333 = _3320;
                                _3334 = _3321;
                                _3335 = _3322;
                                _3336 = _3323;
                                _3337 = _3324;
                                _3338 = _3339;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3322;
                        frontier_phi_67_pred_1 = _3323;
                        frontier_phi_67_pred_2 = _3324;
                        frontier_phi_67_pred_3 = _3321;
                        frontier_phi_67_pred_4 = _3320;
                        frontier_phi_67_pred_5 = _3319;
                    }
                    _2987 = frontier_phi_67_pred;
                    _2989 = frontier_phi_67_pred_1;
                    _2991 = frontier_phi_67_pred_2;
                    _2985 = frontier_phi_67_pred_3;
                    _2983 = frontier_phi_67_pred_4;
                    _2981 = frontier_phi_67_pred_5;
                    uint _3126 = _3125 + 1u;
                    if (_3126 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3119 = _2981;
                        _3120 = _2983;
                        _3121 = _2985;
                        _3122 = _2987;
                        _3123 = _2989;
                        _3124 = _2991;
                        _3125 = _3126;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2989;
                frontier_phi_55_56_ladder_1 = _2991;
                frontier_phi_55_56_ladder_2 = _2987;
                frontier_phi_55_56_ladder_3 = _2985;
                frontier_phi_55_56_ladder_4 = _2983;
                frontier_phi_55_56_ladder_5 = _2981;
            }
            else
            {
                frontier_phi_55_56_ladder = _2876;
                frontier_phi_55_56_ladder_1 = _2878;
                frontier_phi_55_56_ladder_2 = _2874;
                frontier_phi_55_56_ladder_3 = _2872;
                frontier_phi_55_56_ladder_4 = _2870;
                frontier_phi_55_56_ladder_5 = _2868;
            }
            _2980 = frontier_phi_55_56_ladder_5;
            _2982 = frontier_phi_55_56_ladder_4;
            _2984 = frontier_phi_55_56_ladder_3;
            _2986 = frontier_phi_55_56_ladder_2;
            _2988 = frontier_phi_55_56_ladder;
            _2990 = frontier_phi_55_56_ladder_1;
        }
        float _2995 = isnan(1.0) ? _1022 : (isnan(_1022) ? 1.0 : min(_1022, 1.0));
        _2780 = (_2995 * _2986) + _2213;
        _2782 = (_2995 * _2988) + _2215;
        _2784 = (_2995 * _2990) + _2217;
        _2786 = ((_2980 * _1006) * _2995) + _2561;
        _2788 = ((_2982 * _1008) * _2995) + _2563;
        _2790 = ((_2984 * _1009) * _2995) + _2565;
    }
    else
    {
        _2780 = _2213;
        _2782 = _2215;
        _2784 = _2217;
        _2786 = _2561;
        _2788 = _2563;
        _2790 = _2565;
    }
    float _4730 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
    float _4741 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
    float _4752 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
    uint _2810 = _279 + 6u;
    float _2818 = _944 / cbSceneParam._m0[86u].x;
    float _2819 = _945 / cbSceneParam._m0[86u].y;
    vec4 _2833 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2818, _2819, (log2((isnan(cbSceneParam._m0[77u].w) ? _879 : (isnan(_879) ? cbSceneParam._m0[77u].w : min(_879, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2835 = _2833.x;
    float _2836 = _2833.y;
    float _2837 = _2833.z;
    float _2838 = _2833.w;
    float _2930;
    float _2932;
    float _2934;
    float _2936;
    if (_879 > cbSceneParam._m0[78u].w)
    {
        float _2893 = isnan(_879) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _879 : min(cbSceneParam._m0[80u].w, _879));
        float _2894 = _2893 / _879;
        float _2905 = _2894 * _929;
        float _2906 = _930 * _2894;
        float _2907 = (-0.0) - _2906;
        float _2908 = _2894 * _931;
        float _2910 = (cbSceneParam._m0[77u].w * _2907) / _2893;
        float _2911 = _2910 + cbSceneParam._m0[79u].w;
        float _2912 = cbSceneParam._m0[79u].w - _2906;
        float _2918 = sqrt(((_2905 * _2905) + (_2906 * _2906)) + (_2908 * _2908));
        float _2921 = (1.0 - (cbSceneParam._m0[77u].w / _2893)) * _2918;
        float _2926 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2928 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3081;
        if (abs((_2907 - _2910) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3081 = ((((_2911 > 0.0) ? exp2(_2926 * _2911) : (2.0 - exp2(_2928 * _2911))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2921;
        }
        else
        {
            float _3041 = 1.0 / cbSceneParam._m0[80u].x;
            float _3042 = isnan(_2912) ? _2911 : (isnan(_2911) ? _2912 : max(_2911, _2912));
            float _3043 = isnan(_2912) ? _2911 : (isnan(_2911) ? _2912 : min(_2911, _2912));
            float _3052 = isnan(0.0) ? _3042 : (isnan(_3042) ? 0.0 : min(_3042, 0.0));
            float _3053 = isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : min(_3043, 0.0));
            _3081 = ((abs(_2918 / _2907) * cbSceneParam._m0[80u].y) * ((((_3052 - _3053) * 2.0) - ((exp2(_2926 * (isnan(0.0) ? _3042 : (isnan(_3042) ? 0.0 : max(_3042, 0.0)))) - exp2(_2926 * (isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : max(_3043, 0.0))))) * _3041)) - ((exp2(_2928 * _3052) - exp2(_2928 * _3053)) * _3041))) + (_2921 * cbSceneParam._m0[80u].z);
        }
        vec4 _3083 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2818, _2819, 1.0), 0.0);
        float _3092 = exp2((_3081 * (-1.44269502162933349609375)) * (1.0 - _3083.w));
        float _3093 = log2(_3092);
        float _3109 = log2(_2838);
        _2930 = (exp2(_3109 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3093 * cbSceneParam._m0[78u].x)) * _3083.x) / cbSceneParam._m0[78u].x)) + _2835;
        _2932 = (exp2(_3109 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3093 * cbSceneParam._m0[78u].y)) * _3083.y) / cbSceneParam._m0[78u].y)) + _2836;
        _2934 = (exp2(_3109 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3093 * cbSceneParam._m0[78u].z)) * _3083.z) / cbSceneParam._m0[78u].z)) + _2837;
        _2936 = _3092 * _2838;
    }
    else
    {
        _2930 = _2835;
        _2932 = _2836;
        _2934 = _2837;
        _2936 = _2838;
    }
    float _2948 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2949 = _2948 == 3.0;
    float _2950 = log2(_2936);
    float _2957 = exp2(_2950 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0))) * (_2780 + ((isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0))) * _1022))) + ((_2786 + ((isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0))) * _1830)) * cbPerFrame._m0[3u].x));
    float _2958 = exp2(_2950 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0))) * (_2782 + ((isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0))) * _1022))) + ((_2788 + ((isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0))) * _1830)) * cbPerFrame._m0[3u].x));
    float _2959 = exp2(_2950 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0))) * (_2784 + ((isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0))) * _1022))) + ((_2790 + ((isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0))) * _1830)) * cbPerFrame._m0[3u].x));
    float _2968 = (_2948 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2968 * (_2949 ? _2957 : (_2957 + (cbSceneParam._m0[72u].w * _2930)));
    SV_Target.y = _2968 * (_2949 ? _2958 : (_2958 + (cbSceneParam._m0[72u].w * _2932)));
    SV_Target.z = _2968 * (_2949 ? _2959 : (_2959 + (cbSceneParam._m0[72u].w * _2934)));
    SV_Target.w = cbInstanceData._m0[_2810].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2810].w;
}


