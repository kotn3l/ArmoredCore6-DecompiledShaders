#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1096;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _208 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _209 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _210 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _216 = inversesqrt(dot(vec3(_208, _209, _210), vec3(_208, _209, _210)));
    float _223 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _230 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _236 = uint(roundEven(NORMAL.w)) * 13u;
    uint _242 = _236 + 1u;
    uint _246 = _236 + 2u;
    float _255 = sqrt(((cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x) + (cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x)) + (cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x));
    float _256 = _255 * TEXCOORD.z;
    float _257 = _255 * TEXCOORD.w;
    vec4 _277 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _283 = _277.x * cbMtdParam._m0[11u].x;
    float _284 = _277.y * cbMtdParam._m0[11u].y;
    float _285 = _277.z * cbMtdParam._m0[11u].z;
    vec4 _304 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _256) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _257) + cbTextureTilingScale._m0[5u].w));
    vec4 _342 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _344 = _342.x;
    float _356 = dot(vec4(_344, _342.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _373 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_344 - _356) * cbMtdParam._m0[24u].y) + _356) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3449 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _374 = isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0));
    float _381 = (_374 * ((_304.x * cbMtdParam._m0[12u].x) - _283)) + _283;
    float _382 = (_374 * ((_304.y * cbMtdParam._m0[12u].y) - _284)) + _284;
    float _383 = (_374 * ((_304.z * cbMtdParam._m0[12u].z) - _285)) + _285;
    vec4 _396 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _256) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _257) + cbTextureTilingScale._m0[20u].w));
    vec4 _421 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _256) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _257) + cbTextureTilingScale._m0[4u].w));
    vec4 _438 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _440 = _438.x;
    float _441 = _438.y;
    float _442 = _438.z;
    float _451 = ((_421.z - _442) * _374) + _442;
    float _454 = ((((_421.x - _440) * _374) + _440) * 2.0) + (-1.0);
    float _455 = ((((_421.y - _441) * _374) + _441) * 2.0) + (-1.0);
    float _456 = dot(vec2(_454, _455), vec2(_454, _455));
    float _3460 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _461 = sqrt(1.0 - (isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0))));
    float _466 = _454 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_396.x * 2.0) + (-1.0)));
    float _467 = _455 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_396.y * 2.0) + (-1.0)));
    vec4 _480 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _494 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _508 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _510 = _508.x;
    float _528 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _256) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _257) + cbTextureTilingScale._m0[9u].w)).x - _510) * _374) + _510;
    float _532 = ((_494.x - _528) * cbMtdParam._m0[19u].z) + _528;
    float _537 = (((_396.z - _451) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _451;
    float _542 = cbMtdParam._m0[22u].x + _480.w;
    float _545 = fma(_461, _223 * NORMAL.x, fma(_467, _230 * TANGENT.x, (_216 * _208) * _466));
    float _548 = fma(_461, _223 * NORMAL.y, fma(_467, _230 * TANGENT.y, (_216 * _209) * _466));
    float _551 = fma(_461, _223 * NORMAL.z, fma(_467, _230 * TANGENT.z, (_216 * _210) * _466));
    float _555 = inversesqrt(dot(vec3(_545, _548, _551), vec3(_545, _548, _551)));
    float _556 = _555 * _545;
    float _557 = _555 * _548;
    float _558 = _555 * _551;
    float _3471 = isnan(0.0) ? _537 : (isnan(_537) ? 0.0 : max(_537, 0.0));
    float _559 = isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0));
    float _3482 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _3493 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _3504 = isnan(0.0) ? _382 : (isnan(_382) ? 0.0 : max(_382, 0.0));
    float _3515 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _3526 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    float _564 = isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0));
    float _578 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _619 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _629 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _619);
    float _630 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _619);
    float _631 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _619);
    float _635 = inversesqrt(dot(vec3(_629, _630, _631), vec3(_629, _630, _631)));
    float _636 = _629 * _635;
    float _637 = _630 * _635;
    float _638 = _631 * _635;
    float _644 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _645 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _663 = fma(_558, cbSceneParam._m0[5u].z, fma(_557, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _556));
    float _666 = fma(_558, cbSceneParam._m0[6u].z, fma(_557, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _556));
    float _669 = fma(_558, cbSceneParam._m0[7u].z, fma(_557, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _556));
    uint _683 = (_236 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _689 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0)))) * cbInstanceData._m0[_683].x;
    float _690 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0)))) * cbInstanceData._m0[_683].y;
    float _691 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0)))) * cbInstanceData._m0[_683].z;
    float _3537 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _692 = isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0));
    float _3548 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _693 = isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0));
    float _3559 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _694 = isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0));
    float _695 = 1.0 - _564;
    float _696 = _692 * _695;
    float _697 = _693 * _695;
    float _698 = _694 * _695;
    float _703 = (_692 + (-0.039999999105930328369140625)) * _564;
    float _704 = (_693 + (-0.039999999105930328369140625)) * _564;
    float _705 = (_694 + (-0.039999999105930328369140625)) * _564;
    float _706 = _703 + 0.039999999105930328369140625;
    float _708 = _704 + 0.039999999105930328369140625;
    float _709 = _705 + 0.039999999105930328369140625;
    vec4 _718 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _644, cbSceneParam._m0[86u].y * _645));
    float _722 = ((isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0))) * TEXCOORD_5.w) * _718.x;
    float _723 = dot(vec3(_556, _557, _558), vec3(_636, _637, _638));
    float _726 = _723 * 2.0;
    float _730 = (_726 * _556) - _636;
    float _731 = (_726 * _557) - _637;
    float _732 = (_726 * _558) - _638;
    float _736 = abs(dot(vec3(_636, _637, _638), vec3(_556, _557, _558)));
    float _3570 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
    float _738 = sqrt(_559);
    float _751 = exp2((_738 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_738 * 3.0));
    float _757 = (1.0 - _751) * ((_738 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _758 = _751 * _738;
    float _786 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _790 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _794 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1095;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    float _1107;
    float _1108;
    float _1109;
    float _1110;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _820 = fma(_794, cbModelParam._m0[26u].z, fma(_790, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _786));
        float _824 = fma(_794, cbModelParam._m0[27u].z, fma(_790, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _786));
        float _828 = fma(_794, cbModelParam._m0[28u].z, fma(_790, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _786));
        float _853 = _786 + _556;
        float _854 = _790 + _557;
        float _855 = _794 + _558;
        float _865 = fma(_855, cbModelParam._m0[26u].z, fma(_854, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _853)) - _820;
        float _866 = fma(_855, cbModelParam._m0[27u].z, fma(_854, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _853)) - _824;
        float _867 = fma(_855, cbModelParam._m0[28u].z, fma(_854, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _853)) - _828;
        float _871 = inversesqrt(dot(vec3(_865, _866, _867), vec3(_865, _866, _867)));
        float _884 = ((_871 * _865) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_820 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _885 = ((_871 * _866) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_824 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _886 = ((_871 * _867) / cbModelParam._m0[34u].z) + ((((((_828 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _889 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_884, _885, _886), 0.0);
        vec4 _896 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_884, _885, _886), 0.0);
        vec4 _903 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_884, _885, _886), 0.0);
        vec4 _910 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_884, _885, _886), 0.0);
        float _923 = exp2((_889.w + (-0.5)) * 20.0) * 2.0;
        float _924 = _923 * (_889.x + (-0.5));
        float _925 = _923 * (_889.y + (-0.5));
        float _926 = _923 * (_889.z + (-0.5));
        float _933 = exp2((_896.w + (-0.5)) * 20.0) * 2.0;
        float _934 = _933 * (_896.x + (-0.5));
        float _935 = _933 * (_896.y + (-0.5));
        float _936 = _933 * (_896.z + (-0.5));
        float _943 = exp2((_903.w + (-0.5)) * 20.0) * 2.0;
        float _944 = _943 * (_903.x + (-0.5));
        float _945 = _943 * (_903.y + (-0.5));
        float _946 = _943 * (_903.z + (-0.5));
        float _953 = exp2((_910.w + (-0.5)) * 20.0) * 2.0;
        float _954 = _953 * (_910.x + (-0.5));
        float _955 = _953 * (_910.y + (-0.5));
        float _956 = _953 * (_910.z + (-0.5));
        float _957 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        float _958 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
        float _959 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
        float _960 = _924 * 0.5;
        float _961 = _934 * 0.5;
        float _962 = _944 * 0.5;
        float _963 = dot(vec3(_960, _961, _962), vec3(_960, _961, _962));
        float _968 = (_963 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_963);
        float _977 = (dot(vec3(_556, _557, _558), vec3(_968 * _960, _968 * _961, _968 * _962)) + 1.0) * 0.5;
        float _3596 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _987 = sqrt(((_961 * _961) + (_960 * _960)) + (_962 * _962)) / (_957 + 9.9999997473787516355514526367188e-06);
        float _3607 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _988 = isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0));
        float _989 = _988 * 2.0;
        float _993 = (1.0 - _988) / (_988 + 1.0);
        float _3618 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _994 = isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0));
        float _1003 = ((((1.0 - _994) * (_989 + 2.0)) * exp2(log2(isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0))) * (_989 + 1.0))) + _994) * _957;
        float _1004 = _925 * 0.5;
        float _1005 = _935 * 0.5;
        float _1006 = _945 * 0.5;
        float _1007 = dot(vec3(_1004, _1005, _1006), vec3(_1004, _1005, _1006));
        float _1012 = (_1007 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1007);
        float _1020 = (dot(vec3(_556, _557, _558), vec3(_1012 * _1004, _1012 * _1005, _1012 * _1006)) + 1.0) * 0.5;
        float _3629 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1029 = sqrt(((_1005 * _1005) + (_1004 * _1004)) + (_1006 * _1006)) / (_958 + 9.9999997473787516355514526367188e-06);
        float _3640 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1030 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
        float _1031 = _1030 * 2.0;
        float _1035 = (1.0 - _1030) / (_1030 + 1.0);
        float _3651 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1036 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
        float _1045 = ((((1.0 - _1036) * (_1031 + 2.0)) * exp2(log2(isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0))) * (_1031 + 1.0))) + _1036) * _958;
        float _1046 = _926 * 0.5;
        float _1047 = _936 * 0.5;
        float _1048 = _946 * 0.5;
        float _1049 = dot(vec3(_1046, _1047, _1048), vec3(_1046, _1047, _1048));
        float _1054 = (_1049 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1049);
        float _1062 = (dot(vec3(_556, _557, _558), vec3(_1054 * _1046, _1054 * _1047, _1054 * _1048)) + 1.0) * 0.5;
        float _3662 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1071 = sqrt(((_1047 * _1047) + (_1046 * _1046)) + (_1048 * _1048)) / (_959 + 9.9999997473787516355514526367188e-06);
        float _3673 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1072 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
        float _1073 = _1072 * 2.0;
        float _1077 = (1.0 - _1072) / (_1072 + 1.0);
        float _3684 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1078 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
        float _1087 = ((((1.0 - _1078) * (_1073 + 2.0)) * exp2(log2(isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0))) * (_1073 + 1.0))) + _1078) * _959;
        _1095 = _926;
        _1097 = _925;
        _1098 = _924;
        _1099 = _936;
        _1100 = _935;
        _1101 = _934;
        _1102 = _946;
        _1103 = _945;
        _1104 = _944;
        _1105 = _959;
        _1106 = _958;
        _1107 = _957;
        _1108 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0)));
        _1109 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0)));
        _1110 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0)));
    }
    else
    {
        _1095 = _1096;
        _1097 = _1096;
        _1098 = _1096;
        _1099 = _1096;
        _1100 = _1096;
        _1101 = _1096;
        _1102 = _1096;
        _1103 = _1096;
        _1104 = _1096;
        _1105 = _1096;
        _1106 = _1096;
        _1107 = _1096;
        _1108 = 0.0;
        _1109 = 0.0;
        _1110 = 0.0;
    }
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1135 = fma(_794, cbModelParam._m0[30u].z, fma(_790, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _786));
        float _1139 = fma(_794, cbModelParam._m0[31u].z, fma(_790, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _786));
        float _1143 = fma(_794, cbModelParam._m0[32u].z, fma(_790, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _786));
        float _1166 = _786 + _556;
        float _1167 = _790 + _557;
        float _1168 = _794 + _558;
        float _1178 = fma(_1168, cbModelParam._m0[30u].z, fma(_1167, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1166)) - _1135;
        float _1179 = fma(_1168, cbModelParam._m0[31u].z, fma(_1167, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1166)) - _1139;
        float _1180 = fma(_1168, cbModelParam._m0[32u].z, fma(_1167, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1166)) - _1143;
        float _1184 = inversesqrt(dot(vec3(_1178, _1179, _1180), vec3(_1178, _1179, _1180)));
        float _1197 = ((_1184 * _1178) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1135 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1198 = ((_1184 * _1179) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1139 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1199 = ((_1184 * _1180) / cbModelParam._m0[35u].z) + ((((((_1143 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1201 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1197, _1198, _1199), 0.0);
        vec4 _1208 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1197, _1198, _1199), 0.0);
        vec4 _1215 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1197, _1198, _1199), 0.0);
        vec4 _1222 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1197, _1198, _1199), 0.0);
        float _1234 = exp2((_1201.w + (-0.5)) * 20.0) * 2.0;
        float _1235 = _1234 * (_1201.x + (-0.5));
        float _1236 = _1234 * (_1201.y + (-0.5));
        float _1237 = _1234 * (_1201.z + (-0.5));
        float _1244 = exp2((_1208.w + (-0.5)) * 20.0) * 2.0;
        float _1245 = _1244 * (_1208.x + (-0.5));
        float _1246 = _1244 * (_1208.y + (-0.5));
        float _1247 = _1244 * (_1208.z + (-0.5));
        float _1254 = exp2((_1215.w + (-0.5)) * 20.0) * 2.0;
        float _1255 = _1254 * (_1215.x + (-0.5));
        float _1256 = _1254 * (_1215.y + (-0.5));
        float _1257 = _1254 * (_1215.z + (-0.5));
        float _1264 = exp2((_1222.w + (-0.5)) * 20.0) * 2.0;
        float _1265 = _1264 * (_1222.x + (-0.5));
        float _1266 = _1264 * (_1222.y + (-0.5));
        float _1267 = _1264 * (_1222.z + (-0.5));
        float _1268 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1269 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1270 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1271 = _1235 * 0.5;
        float _1272 = _1245 * 0.5;
        float _1273 = _1255 * 0.5;
        float _1274 = dot(vec3(_1271, _1272, _1273), vec3(_1271, _1272, _1273));
        float _1279 = (_1274 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1274);
        float _1287 = (dot(vec3(_556, _557, _558), vec3(_1279 * _1271, _1279 * _1272, _1279 * _1273)) + 1.0) * 0.5;
        float _3725 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1296 = sqrt(((_1272 * _1272) + (_1271 * _1271)) + (_1273 * _1273)) / (_1268 + 9.9999997473787516355514526367188e-06);
        float _3736 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1297 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
        float _1298 = _1297 * 2.0;
        float _1302 = (1.0 - _1297) / (_1297 + 1.0);
        float _3747 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1303 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
        float _1312 = ((((1.0 - _1303) * (_1298 + 2.0)) * exp2(log2(isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0))) * (_1298 + 1.0))) + _1303) * _1268;
        float _1313 = _1236 * 0.5;
        float _1314 = _1246 * 0.5;
        float _1315 = _1256 * 0.5;
        float _1316 = dot(vec3(_1313, _1314, _1315), vec3(_1313, _1314, _1315));
        float _1321 = (_1316 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1316);
        float _1329 = (dot(vec3(_556, _557, _558), vec3(_1321 * _1313, _1321 * _1314, _1321 * _1315)) + 1.0) * 0.5;
        float _3758 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1338 = sqrt(((_1314 * _1314) + (_1313 * _1313)) + (_1315 * _1315)) / (_1269 + 9.9999997473787516355514526367188e-06);
        float _3769 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1339 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
        float _1340 = _1339 * 2.0;
        float _1344 = (1.0 - _1339) / (_1339 + 1.0);
        float _3780 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1345 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
        float _1354 = ((((1.0 - _1345) * (_1340 + 2.0)) * exp2(log2(isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0))) * (_1340 + 1.0))) + _1345) * _1269;
        float _1355 = _1237 * 0.5;
        float _1356 = _1247 * 0.5;
        float _1357 = _1257 * 0.5;
        float _1358 = dot(vec3(_1355, _1356, _1357), vec3(_1355, _1356, _1357));
        float _1363 = (_1358 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1358);
        float _1371 = (dot(vec3(_556, _557, _558), vec3(_1363 * _1355, _1363 * _1356, _1363 * _1357)) + 1.0) * 0.5;
        float _3791 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1380 = sqrt(((_1356 * _1356) + (_1355 * _1355)) + (_1357 * _1357)) / (_1270 + 9.9999997473787516355514526367188e-06);
        float _3802 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1381 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
        float _1382 = _1381 * 2.0;
        float _1386 = (1.0 - _1381) / (_1381 + 1.0);
        float _3813 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1387 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
        float _1396 = ((((1.0 - _1387) * (_1382 + 2.0)) * exp2(log2(isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0))) * (_1382 + 1.0))) + _1387) * _1270;
        _1404 = _1237;
        _1405 = _1236;
        _1406 = _1235;
        _1407 = _1247;
        _1408 = _1246;
        _1409 = _1245;
        _1410 = _1257;
        _1411 = _1256;
        _1412 = _1255;
        _1413 = _1270;
        _1414 = _1269;
        _1415 = _1268;
        _1416 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0)));
        _1417 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0)));
        _1418 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0)));
    }
    else
    {
        _1404 = _1096;
        _1405 = _1096;
        _1406 = _1096;
        _1407 = _1096;
        _1408 = _1096;
        _1409 = _1096;
        _1410 = _1096;
        _1411 = _1096;
        _1412 = _1096;
        _1413 = _1096;
        _1414 = _1096;
        _1415 = _1096;
        _1416 = 0.0;
        _1417 = 0.0;
        _1418 = 0.0;
    }
    float _1428 = (cbModelParam._m0[1u].x * (_1416 - _1108)) + _1108;
    float _1429 = (cbModelParam._m0[1u].x * (_1417 - _1109)) + _1109;
    float _1430 = (cbModelParam._m0[1u].x * (_1418 - _1110)) + _1110;
    float _1451 = fma(_1430, cbSceneParam._m0[89u].z, fma(_1429, cbSceneParam._m0[89u].y, _1428 * cbSceneParam._m0[89u].x));
    float _1454 = fma(_1430, cbSceneParam._m0[90u].z, fma(_1429, cbSceneParam._m0[90u].y, _1428 * cbSceneParam._m0[90u].x));
    float _1457 = fma(_1430, cbSceneParam._m0[91u].z, fma(_1429, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1428));
    float _1472 = _730 * 0.5;
    float _1473 = _731 * 0.5;
    float _1474 = _732 * 0.5;
    float _1475 = dot(vec4(_1472, _1473, _1474, 1.0), vec4(_1406, _1409, _1412, _1415));
    float _1478 = dot(vec4(_1472, _1473, _1474, 1.0), vec4(_1405, _1408, _1411, _1414));
    float _1481 = dot(vec4(_1472, _1473, _1474, 1.0), vec4(_1404, _1407, _1410, _1413));
    float _1515;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1488 = dot(vec4(_1472, _1473, _1474, 1.0), vec4(_1095, _1099, _1102, _1105));
        float _1492 = dot(vec4(_1472, _1473, _1474, 1.0), vec4(_1097, _1100, _1103, _1106));
        float _1496 = dot(vec4(_1472, _1473, _1474, 1.0), vec4(_1098, _1101, _1104, _1107));
        float _1503 = dot(vec4(cbModelParam._m0[39u]), vec4(_1472, _1473, _1474, 1.0));
        _1515 = dot(vec3(isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0)), isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0)), isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1503) ? 0.0 : (isnan(0.0) ? _1503 : max(0.0, _1503))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1515 = 1.0;
    }
    float _1526;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1517 = dot(vec4(cbModelParam._m0[40u]), vec4(_1472, _1473, _1474, 1.0));
        _1526 = dot(vec3(isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0)), isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0)), isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1517) ? 0.0 : (isnan(0.0) ? _1517 : max(0.0, _1517))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1526 = 1.0;
    }
    float _1530 = (_1526 * cbModelParam._m0[1u].x) + (_1515 * (1.0 - cbModelParam._m0[1u].x));
    float _1540 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _559);
    float _1541 = isnan(_1540) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1540 : min(cbModelParam._m0[25u].z, _1540));
    float _1623;
    float _1625;
    float _1627;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1590 = fma(_794, cbModelParam._m0[13u].z, fma(_790, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _786)) + cbModelParam._m0[13u].w;
        float _1594 = fma(_794, cbModelParam._m0[14u].z, fma(_790, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _786)) + cbModelParam._m0[14u].w;
        float _1598 = fma(_794, cbModelParam._m0[15u].z, fma(_790, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _786)) + cbModelParam._m0[15u].w;
        float _1601 = fma(_732, cbModelParam._m0[13u].z, fma(_731, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _730));
        float _1604 = fma(_732, cbModelParam._m0[14u].z, fma(_731, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _730));
        float _1607 = fma(_732, cbModelParam._m0[15u].z, fma(_731, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _730));
        float _1635;
        if (_1601 > 0.0)
        {
            _1635 = abs((1.0 - _1590) / _1601);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1601 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1590 + 1.0) / _1601);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1635 = frontier_phi_14_12_ladder;
        }
        float _1860;
        if (_1604 > 0.0)
        {
            _1860 = abs((1.0 - _1594) / _1604);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1604 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1594 + 1.0) / _1604);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1860 = frontier_phi_23_19_ladder;
        }
        float _2117;
        if (_1607 > 0.0)
        {
            _2117 = abs((1.0 - _1598) / _1607);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1607 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1598 + 1.0) / _1607);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2117 = frontier_phi_35_30_ladder;
        }
        float _2119 = isnan(_1860) ? _1635 : (isnan(_1635) ? _1860 : min(_1635, _1860));
        float _2120 = isnan(_2117) ? _2119 : (isnan(_2119) ? _2117 : min(_2119, _2117));
        float _2124 = (_2120 * _1601) + _1590;
        float _2125 = (_2120 * _1604) + _1594;
        float _2126 = (_2120 * _1607) + _1598;
        float _2127 = _2120 * 9.9999997473787516355514526367188e-05;
        float _2129 = (-1.0) - _2127;
        float _2131 = _2127 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2126 > _2131) || ((_2126 < _2129) || ((_2125 > _2131) || ((_2125 < _2129) || ((_2124 < _2129) || (_2124 > _2131))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2254 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2126, cbModelParam._m0[9u].z, fma(_2125, cbModelParam._m0[9u].y, _2124 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2126, cbModelParam._m0[10u].z, fma(_2125, cbModelParam._m0[10u].y, _2124 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2126, cbModelParam._m0[11u].z, fma(_2125, cbModelParam._m0[11u].y, _2124 * cbModelParam._m0[11u].x))), _1541);
            frontier_phi_13_35_ladder = _2254.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2254.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2254.x * cbModelParam._m0[1u].y;
        }
        _1623 = frontier_phi_13_35_ladder_2;
        _1625 = frontier_phi_13_35_ladder_1;
        _1627 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1611 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_730, _731, _732), _1541);
        _1623 = _1611.x * cbModelParam._m0[1u].y;
        _1625 = _1611.y * cbModelParam._m0[1u].y;
        _1627 = _1611.z * cbModelParam._m0[1u].y;
    }
    float _1631 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _559);
    float _1632 = isnan(_1631) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1631 : min(cbModelParam._m0[25u].w, _1631));
    float _1723;
    float _1725;
    float _1727;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1687 = fma(_794, cbModelParam._m0[21u].z, fma(_790, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _786)) + cbModelParam._m0[21u].w;
        float _1691 = fma(_794, cbModelParam._m0[22u].z, fma(_790, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _786)) + cbModelParam._m0[22u].w;
        float _1695 = fma(_794, cbModelParam._m0[23u].z, fma(_790, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _786)) + cbModelParam._m0[23u].w;
        float _1698 = fma(_732, cbModelParam._m0[21u].z, fma(_731, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _730));
        float _1701 = fma(_732, cbModelParam._m0[22u].z, fma(_731, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _730));
        float _1704 = fma(_732, cbModelParam._m0[23u].z, fma(_731, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _730));
        float _1865;
        if (_1698 > 0.0)
        {
            _1865 = abs((1.0 - _1687) / _1698);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1698 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1687 + 1.0) / _1698);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1865 = frontier_phi_25_21_ladder;
        }
        float _2144;
        if (_1701 > 0.0)
        {
            _2144 = abs((1.0 - _1691) / _1701);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1701 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1691 + 1.0) / _1701);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2144 = frontier_phi_37_32_ladder;
        }
        float _2357;
        if (_1704 > 0.0)
        {
            _2357 = abs((1.0 - _1695) / _1704);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1704 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1695 + 1.0) / _1704);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2357 = frontier_phi_46_43_ladder;
        }
        float _2359 = isnan(_2144) ? _1865 : (isnan(_1865) ? _2144 : min(_1865, _2144));
        float _2360 = isnan(_2357) ? _2359 : (isnan(_2359) ? _2357 : min(_2359, _2357));
        float _2364 = (_2360 * _1698) + _1687;
        float _2365 = (_2360 * _1701) + _1691;
        float _2366 = (_2360 * _1704) + _1695;
        float _2367 = _2360 * 9.9999997473787516355514526367188e-05;
        float _2368 = (-1.0) - _2367;
        float _2370 = _2367 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2366 > _2370) || ((_2366 < _2368) || ((_2365 > _2370) || ((_2365 < _2368) || ((_2364 < _2368) || (_2364 > _2370))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2565 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2366, cbModelParam._m0[17u].z, fma(_2365, cbModelParam._m0[17u].y, _2364 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2366, cbModelParam._m0[18u].z, fma(_2365, cbModelParam._m0[18u].y, _2364 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2366, cbModelParam._m0[19u].z, fma(_2365, cbModelParam._m0[19u].y, _2364 * cbModelParam._m0[19u].x))), _1632);
            frontier_phi_22_46_ladder = _2565.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2565.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2565.x * cbModelParam._m0[1u].z;
        }
        _1723 = frontier_phi_22_46_ladder_2;
        _1725 = frontier_phi_22_46_ladder_1;
        _1727 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1707 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_730, _731, _732), _1632);
        _1723 = _1707.x * cbModelParam._m0[1u].z;
        _1725 = _1707.y * cbModelParam._m0[1u].z;
        _1727 = _1707.z * cbModelParam._m0[1u].z;
    }
    float _1740 = (((_757 * _706) + _758) * _722) * ((cbModelParam._m0[1u].w * (_1723 - _1623)) + _1623);
    float _1742 = (((_757 * _708) + _758) * _722) * ((cbModelParam._m0[1u].w * (_1725 - _1625)) + _1625);
    float _1744 = (((_757 * _709) + _758) * _722) * ((cbModelParam._m0[1u].w * (_1727 - _1627)) + _1627);
    float _1747 = fma(_1744, cbSceneParam._m0[89u].z, fma(_1742, cbSceneParam._m0[89u].y, _1740 * cbSceneParam._m0[89u].x));
    float _1750 = fma(_1744, cbSceneParam._m0[90u].z, fma(_1742, cbSceneParam._m0[90u].y, _1740 * cbSceneParam._m0[90u].x));
    float _1753 = fma(_1744, cbSceneParam._m0[91u].z, fma(_1742, cbSceneParam._m0[91u].y, _1740 * cbSceneParam._m0[91u].x));
    vec4 _1761 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_644, _645));
    float _1763 = _1761.w;
    float _1775 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1763);
    float _1776 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1763);
    float _1777 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1763);
    uvec4 _1781 = floatBitsToUint(cbInstanceData._m0[_236 + 5u]);
    uint _1783 = _1781.x * 14u;
    uint _1784 = _1783 + 13u;
    float _1791 = _722 + (-1.0);
    float _1796 = (cbLight._m0[_1784].x * _1791) + 1.0;
    float _1797 = (cbLight._m0[_1784].y * _1791) + 1.0;
    float _1798 = (cbLight._m0[_1784].z * _1791) + 1.0;
    float _1799 = (cbLight._m0[_1784].w * _1791) + 1.0;
    uint _1800 = _1783 + 5u;
    float _1806 = isnan(1.0) ? _1797 : (isnan(_1797) ? 1.0 : min(_1797, 1.0));
    uint _1810 = _1783 + 4u;
    float _1819 = isnan(1.0) ? _1796 : (isnan(_1796) ? 1.0 : min(_1796, 1.0));
    uint _1823 = _1783 | 1u;
    float _1834 = dot(vec3(cbLight._m0[_1783].xyz), vec3(_556, _557, _558));
    float _1837 = dot(vec3(cbLight._m0[_1823].xyz), vec3(_556, _557, _558));
    float _3949 = isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0));
    float _3960 = isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0));
    float _1842 = (isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0))) * 0.3183098733425140380859375;
    float _1844 = (isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0))) * 0.3183098733425140380859375;
    float _1851 = ((cbLight._m0[_1800].x * _1806) * _1844) + (((cbLight._m0[_1810].x * _1775) * _1819) * _1842);
    float _1852 = ((_1806 * cbLight._m0[_1800].y) * _1844) + (((cbLight._m0[_1810].y * _1776) * _1819) * _1842);
    float _1853 = ((_1806 * cbLight._m0[_1800].z) * _1844) + (((cbLight._m0[_1810].z * _1777) * _1819) * _1842);
    uvec4 _1857 = floatBitsToUint(cbLight._m0[_1783 + 12u]);
    bool _1859 = _1857.x == 0u;
    float _1870;
    float _1872;
    float _1874;
    if (_1859)
    {
        _1870 = _1851;
        _1872 = _1852;
        _1874 = _1853;
    }
    else
    {
        uint _1878 = _1783 + 6u;
        float _1894 = (dot(vec3(cbLight._m0[_1783 + 2u].xyz), vec3(_556, _557, _558)) * 0.5) + 0.5;
        float _1895 = _1894 * _1894;
        float _3971 = isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0));
        float _1896 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
        float _1897 = isnan(1.0) ? _1798 : (isnan(_1798) ? 1.0 : min(_1798, 1.0));
        _1870 = (((cbLight._m0[_1878].x * 0.3183098733425140380859375) * _1896) * _1897) + _1851;
        _1872 = (((cbLight._m0[_1878].y * 0.3183098733425140380859375) * _1896) * _1897) + _1852;
        _1874 = (((cbLight._m0[_1878].z * 0.3183098733425140380859375) * _1896) * _1897) + _1853;
    }
    bool _1877 = _1857.y == 0u;
    float _1915;
    float _1917;
    float _1919;
    if (_1877)
    {
        _1915 = _1870;
        _1917 = _1872;
        _1919 = _1874;
    }
    else
    {
        uint _2088 = _1783 + 7u;
        float _2104 = (dot(vec3(cbLight._m0[_1783 + 3u].xyz), vec3(_556, _557, _558)) * 0.5) + 0.5;
        float _2105 = _2104 * _2104;
        float _3987 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0));
        float _2106 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
        float _2107 = isnan(1.0) ? _1799 : (isnan(_1799) ? 1.0 : min(_1799, 1.0));
        _1915 = (((cbLight._m0[_2088].x * 0.3183098733425140380859375) * _2106) * _2107) + _1870;
        _1917 = (((cbLight._m0[_2088].y * 0.3183098733425140380859375) * _2106) * _2107) + _1872;
        _1919 = (((cbLight._m0[_2088].z * 0.3183098733425140380859375) * _2106) * _2107) + _1874;
    }
    uint _1922 = _1783 + 8u;
    float _1935 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1783].w)) * _559) * 0.949999988079071044921875);
    float _1936 = _1935 * _1935;
    float _1937 = cbLight._m0[_1783].x + _636;
    float _1938 = cbLight._m0[_1783].y + _637;
    float _1939 = cbLight._m0[_1783].z + _638;
    float _1943 = inversesqrt(dot(vec3(_1937, _1938, _1939), vec3(_1937, _1938, _1939)));
    float _1944 = _1943 * _1937;
    float _1945 = _1943 * _1938;
    float _1946 = _1943 * _1939;
    float _1947 = dot(vec3(_556, _557, _558), vec3(cbLight._m0[_1783].xyz));
    float _4003 = isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0));
    float _1950 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
    float _4014 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    float _1951 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
    float _1952 = dot(vec3(_556, _557, _558), vec3(_1944, _1945, _1946));
    float _4025 = isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0));
    float _1955 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
    float _1956 = dot(vec3(cbLight._m0[_1783].xyz), vec3(_1944, _1945, _1946));
    float _4036 = isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0));
    float _1960 = _1936 * _1936;
    float _1964 = ((_1955 * _1955) * (_1960 + (-1.0))) + 1.0;
    float _1972 = exp2(log2(1.0 - (isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0)))) * 5.0);
    float _1973 = 0.959999978542327880859375 - _703;
    float _1975 = 0.959999978542327880859375 - _704;
    float _1976 = 0.959999978542327880859375 - _705;
    float _1983 = 1.0 - _1936;
    float _1994 = (0.5 / (((_1951 * ((_1950 * _1983) + _1936)) + 9.9999999392252902907785028219223e-09) + (((_1951 * _1983) + _1936) * _1950))) * _1950;
    float _4047 = isnan(0.0) ? _1994 : (isnan(_1994) ? 0.0 : max(_1994, 0.0));
    float _1996 = (isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0))) * (_1960 / ((_1964 * _1964) * 3.141590118408203125));
    uint _2010 = _1783 + 9u;
    float _2021 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1823].w)) * _559) * 0.949999988079071044921875);
    float _2022 = _2021 * _2021;
    float _2023 = cbLight._m0[_1823].x + _636;
    float _2024 = cbLight._m0[_1823].y + _637;
    float _2025 = cbLight._m0[_1823].z + _638;
    float _2029 = inversesqrt(dot(vec3(_2023, _2024, _2025), vec3(_2023, _2024, _2025)));
    float _2030 = _2029 * _2023;
    float _2031 = _2029 * _2024;
    float _2032 = _2029 * _2025;
    float _2033 = dot(vec3(_556, _557, _558), vec3(cbLight._m0[_1823].xyz));
    float _4058 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
    float _2036 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
    float _2037 = dot(vec3(_556, _557, _558), vec3(_2030, _2031, _2032));
    float _4069 = isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0));
    float _2040 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
    float _2041 = dot(vec3(cbLight._m0[_1823].xyz), vec3(_2030, _2031, _2032));
    float _4080 = isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0));
    float _2045 = _2022 * _2022;
    float _2049 = ((_2040 * _2040) * (_2045 + (-1.0))) + 1.0;
    float _2056 = exp2(log2(1.0 - (isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0)))) * 5.0);
    float _2063 = 1.0 - _2022;
    float _2073 = (0.5 / (((_1951 * ((_2036 * _2063) + _2022)) + 9.9999999392252902907785028219223e-09) + (((_1951 * _2063) + _2022) * _2036))) * _2036;
    float _4091 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
    float _2075 = (isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0))) * (_2045 / ((_2049 * _2049) * 3.141590118408203125));
    float _2085 = (((((_2056 * _1973) + _706) * cbLight._m0[_2010].x) * _2075) * _1806) + ((((cbLight._m0[_1922].x * _1775) * ((_1972 * _1973) + _706)) * _1996) * _1819);
    float _2086 = (((((_2056 * _1975) + _708) * cbLight._m0[_2010].y) * _2075) * _1806) + ((((cbLight._m0[_1922].y * _1776) * ((_1972 * _1975) + _708)) * _1996) * _1819);
    float _2087 = (((((_2056 * _1976) + _709) * cbLight._m0[_2010].z) * _2075) * _1806) + ((((cbLight._m0[_1922].z * _1777) * ((_1972 * _1976) + _709)) * _1996) * _1819);
    float _2149;
    float _2151;
    float _2153;
    if (_1859)
    {
        _2149 = _2085;
        _2151 = _2086;
        _2153 = _2087;
    }
    else
    {
        uint _2155 = _1783 + 2u;
        uint _2159 = _1783 + 10u;
        float _2173 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2155].w)) * _559) * 0.949999988079071044921875);
        float _2174 = _2173 * _2173;
        float _2175 = cbLight._m0[_2155].x + _636;
        float _2176 = cbLight._m0[_2155].y + _637;
        float _2177 = cbLight._m0[_2155].z + _638;
        float _2181 = inversesqrt(dot(vec3(_2175, _2176, _2177), vec3(_2175, _2176, _2177)));
        float _2182 = _2181 * _2175;
        float _2183 = _2181 * _2176;
        float _2184 = _2181 * _2177;
        float _2185 = dot(vec3(_556, _557, _558), vec3(cbLight._m0[_2155].xyz));
        float _4102 = isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0));
        float _2188 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
        float _2189 = dot(vec3(_556, _557, _558), vec3(_2182, _2183, _2184));
        float _4113 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
        float _2192 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
        float _2193 = dot(vec3(cbLight._m0[_2155].xyz), vec3(_2182, _2183, _2184));
        float _4124 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
        float _2197 = _2174 * _2174;
        float _2201 = ((_2192 * _2192) * (_2197 + (-1.0))) + 1.0;
        float _2208 = exp2(log2(1.0 - (isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0)))) * 5.0);
        float _2215 = 1.0 - _2174;
        float _2225 = (0.5 / (((_1951 * ((_2188 * _2215) + _2174)) + 9.9999999392252902907785028219223e-09) + (((_1951 * _2215) + _2174) * _2188))) * _2188;
        float _4135 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
        float _2227 = (isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0))) * (_2197 / ((_2201 * _2201) * 3.141590118408203125));
        float _2228 = isnan(1.0) ? _1798 : (isnan(_1798) ? 1.0 : min(_1798, 1.0));
        _2149 = (((((_2208 * _1973) + _706) * cbLight._m0[_2159].x) * _2227) * _2228) + _2085;
        _2151 = (((((_2208 * _1975) + _708) * cbLight._m0[_2159].y) * _2227) * _2228) + _2086;
        _2153 = (((((_2208 * _1976) + _709) * cbLight._m0[_2159].z) * _2227) * _2228) + _2087;
    }
    float _2263;
    float _2265;
    float _2267;
    if (_1877)
    {
        _2263 = _2149;
        _2265 = _2151;
        _2267 = _2153;
    }
    else
    {
        uint _2274 = _1783 + 3u;
        uint _2278 = _1783 + 11u;
        float _2292 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2274].w)) * _559) * 0.949999988079071044921875);
        float _2293 = _2292 * _2292;
        float _2294 = cbLight._m0[_2274].x + _636;
        float _2295 = cbLight._m0[_2274].y + _637;
        float _2296 = cbLight._m0[_2274].z + _638;
        float _2300 = inversesqrt(dot(vec3(_2294, _2295, _2296), vec3(_2294, _2295, _2296)));
        float _2301 = _2300 * _2294;
        float _2302 = _2300 * _2295;
        float _2303 = _2300 * _2296;
        float _2304 = dot(vec3(_556, _557, _558), vec3(cbLight._m0[_2274].xyz));
        float _4151 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
        float _2307 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
        float _2308 = dot(vec3(_556, _557, _558), vec3(_2301, _2302, _2303));
        float _4162 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
        float _2311 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
        float _2312 = dot(vec3(cbLight._m0[_2274].xyz), vec3(_2301, _2302, _2303));
        float _4173 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
        float _2316 = _2293 * _2293;
        float _2320 = ((_2311 * _2311) * (_2316 + (-1.0))) + 1.0;
        float _2327 = exp2(log2(1.0 - (isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0)))) * 5.0);
        float _2334 = 1.0 - _2293;
        float _2344 = (0.5 / (((_1951 * ((_2307 * _2334) + _2293)) + 9.9999999392252902907785028219223e-09) + (((_1951 * _2334) + _2293) * _2307))) * _2307;
        float _4184 = isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0));
        float _2346 = (isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0))) * (_2316 / ((_2320 * _2320) * 3.141590118408203125));
        float _2347 = isnan(1.0) ? _1799 : (isnan(_1799) ? 1.0 : min(_1799, 1.0));
        _2263 = (((((_2327 * _1973) + _706) * cbLight._m0[_2278].x) * _2346) * _2347) + _2149;
        _2265 = (((((_2327 * _1975) + _708) * cbLight._m0[_2278].y) * _2346) * _2347) + _2151;
        _2267 = (((((_2327 * _1976) + _709) * cbLight._m0[_2278].z) * _2346) * _2347) + _2153;
    }
    float _2482;
    float _2484;
    float _2486;
    float _2488;
    float _2490;
    float _2492;
    if (_1781.y == 0u)
    {
        float _2422 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2423 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2422;
        float _2424 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2422;
        float _2425 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2422;
        uvec4 _2437 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2438 = _2437.x;
        uint _2449 = uint((float(_2437.y) * floor(float(uint(cbSceneParam._m0[85u].y * _645) / _2438))) + floor(float(uint(cbSceneParam._m0[85u].x * _644) / _2438)));
        float _2459 = (log2(_2425 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2460 = isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : max(_2459, 0.0));
        uint _2463 = uint(isnan(14.0) ? _2460 : (isnan(_2460) ? 14.0 : min(_2460, 14.0)));
        uvec4 _2468 = texelFetch(g_lightClusterGridBuffer, int(((_2463 << 2u) + (_2449 << 6u)) >> 2u));
        uint _2469 = _2468.x;
        uint _2470 = _2437.z;
        float _2570;
        float _2572;
        float _2574;
        float _2576;
        float _2578;
        float _2580;
        if (((((1u << ((_2470 >> 4u) & 15u)) + 4294967295u) & _2469) == 0u) || ((_2470 & 240u) == 0u))
        {
            _2570 = 0.0;
            _2572 = 0.0;
            _2574 = 0.0;
            _2576 = 0.0;
            _2578 = 0.0;
            _2580 = 0.0;
        }
        else
        {
            float _2571;
            float _2573;
            float _2575;
            float _2577;
            float _2579;
            float _2581;
            float _2715 = 0.0;
            float _2716 = 0.0;
            float _2717 = 0.0;
            float _2718 = 0.0;
            float _2719 = 0.0;
            float _2720 = 0.0;
            uint _2721 = 0u;
            uint _2730;
            bool _2731;
            for (;;)
            {
                _2730 = texelFetch(g_lightClassification, int((((_2463 << 5u) + (_2449 << 9u)) + (_2721 << 2u)) >> 2u)).x;
                _2731 = _2730 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2731)
                {
                    frontier_phi_61_pred = _2715;
                    frontier_phi_61_pred_1 = _2720;
                    frontier_phi_61_pred_2 = _2719;
                    frontier_phi_61_pred_3 = _2718;
                    frontier_phi_61_pred_4 = _2717;
                    frontier_phi_61_pred_5 = _2716;
                }
                else
                {
                    float _2839;
                    float _2840;
                    float _2841;
                    float _2842;
                    float _2843;
                    float _2844;
                    uint _2845;
                    _2839 = _2715;
                    _2840 = _2716;
                    _2841 = _2717;
                    _2842 = _2718;
                    _2843 = _2719;
                    _2844 = _2720;
                    _2845 = _2730;
                    float _2771;
                    float _2772;
                    float _2773;
                    float _2774;
                    float _2775;
                    float _2776;
                    for (;;)
                    {
                        uint _2849 = uint(findLSB(_2845)) + (_2721 << 5u);
                        uint _2846 = (_2845 + 4294967295u) & _2845;
                        uint _2851 = _2849 * 48u;
                        vec4 _2865 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2851)).x, texelFetch(g_PointLightRenderingBuffer, int(_2851 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2851 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2851 + 3u)).x));
                        uint _2871 = (_2849 * 48u) + 4u;
                        vec4 _2884 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2871)).x, texelFetch(g_PointLightRenderingBuffer, int(_2871 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2871 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2871 + 3u)).x));
                        uint _2890 = (_2849 * 48u) + 8u;
                        vec3 _2901 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2890)).x, texelFetch(g_PointLightRenderingBuffer, int(_2890 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2890 + 2u)).x));
                        float _2905 = _2865.x - _2423;
                        float _2906 = _2865.y - _2424;
                        float _2907 = _2865.z - _2425;
                        float _2908 = dot(vec3(_2905, _2906, _2907), vec3(_2905, _2906, _2907));
                        float _2911 = inversesqrt(_2908);
                        float _2912 = _2911 * _2905;
                        float _2913 = _2911 * _2906;
                        float _2914 = _2911 * _2907;
                        float _2915 = dot(vec3(_663, _666, _669), vec3(_2912, _2913, _2914));
                        float _2920 = 1.0 - (_2908 * _2865.w);
                        float _4210 = isnan(0.0) ? _2920 : (isnan(_2920) ? 0.0 : max(_2920, 0.0));
                        float _2921 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
                        float _2922 = sqrt(_2908) * _2884.w;
                        float _2925 = 1.39999997615814208984375 / (_2922 + 1.39999997615814208984375);
                        float _2926 = _2925 * _2925;
                        float _2929 = ((1.0 - _2926) * _2915) + _2926;
                        float _2932 = _2922 * _2922;
                        float _2936 = ((isnan(0.0) ? _2929 : (isnan(_2929) ? 0.0 : max(_2929, 0.0))) * _2921) / ((_2932 * 0.699999988079071044921875) + 1.0);
                        float _2940 = (-0.0) - _2423;
                        float _2941 = (-0.0) - _2424;
                        float _2942 = (-0.0) - _2425;
                        float _2946 = inversesqrt(dot(vec3(_2940, _2941, _2942), vec3(_2940, _2941, _2942)));
                        float _2947 = _2946 * _2940;
                        float _2948 = _2946 * _2941;
                        float _2949 = _2946 * _2942;
                        float _2957 = exp2(log2(1.0 / ((_2932 * 3.5) + 5.0)) * 0.25);
                        float _2958 = 1.0 - _738;
                        float _2965 = sqrt(1.0 - ((1.0 - (_2958 * _2958)) * (1.0 - (_2957 * _2957))));
                        float _2966 = _2965 * _2965;
                        float _2967 = _2966 * _2966;
                        float _2968 = _2947 + _2912;
                        float _2969 = _2948 + _2913;
                        float _2970 = _2949 + _2914;
                        float _2974 = inversesqrt(dot(vec3(_2968, _2969, _2970), vec3(_2968, _2969, _2970)));
                        float _2978 = dot(vec3(_663, _666, _669), vec3(_2947, _2948, _2949));
                        float _4226 = isnan(0.0) ? _2978 : (isnan(_2978) ? 0.0 : max(_2978, 0.0));
                        float _2981 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
                        float _2982 = dot(vec3(_663, _666, _669), vec3(_2974 * _2968, _2974 * _2969, _2974 * _2970));
                        float _4237 = isnan(0.0) ? _2982 : (isnan(_2982) ? 0.0 : max(_2982, 0.0));
                        float _2985 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
                        float _2989 = ((_2985 * _2985) * (_2967 + (-1.0))) + 1.0;
                        float _2990 = _2925 * _2966;
                        float _2991 = _2990 * _2990;
                        float _2994 = ((1.0 - _2991) * _2915) + _2991;
                        float _4248 = isnan(0.0) ? _2994 : (isnan(_2994) ? 0.0 : max(_2994, 0.0));
                        float _2995 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
                        float _2996 = 1.0 - _2966;
                        float _3006 = (0.5 / (((_2995 * ((_2981 * _2996) + _2966)) + 9.9999999392252902907785028219223e-09) + (((_2995 * _2996) + _2966) * _2981))) * _2995;
                        float _4259 = isnan(0.0) ? _3006 : (isnan(_3006) ? 0.0 : max(_3006, 0.0));
                        float _3017 = (((_2967 * 3.1415927410125732421875) * (isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0)))) / ((_2989 * _2989) * ((_2932 * 2.1991131305694580078125) + 3.141590118408203125))) * _2921;
                        _2774 = (_2936 * _2884.x) + _2842;
                        _2775 = (_2936 * _2884.y) + _2843;
                        _2776 = (_2936 * _2884.z) + _2844;
                        _2771 = (_3017 * _2901.x) + _2839;
                        _2772 = (_3017 * _2901.y) + _2840;
                        _2773 = (_3017 * _2901.z) + _2841;
                        if (_2846 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2839 = _2771;
                            _2840 = _2772;
                            _2841 = _2773;
                            _2842 = _2774;
                            _2843 = _2775;
                            _2844 = _2776;
                            _2845 = _2846;
                        }
                    }
                    frontier_phi_61_pred = _2771;
                    frontier_phi_61_pred_1 = _2776;
                    frontier_phi_61_pred_2 = _2775;
                    frontier_phi_61_pred_3 = _2774;
                    frontier_phi_61_pred_4 = _2773;
                    frontier_phi_61_pred_5 = _2772;
                }
                _2571 = frontier_phi_61_pred;
                _2581 = frontier_phi_61_pred_1;
                _2579 = frontier_phi_61_pred_2;
                _2577 = frontier_phi_61_pred_3;
                _2575 = frontier_phi_61_pred_4;
                _2573 = frontier_phi_61_pred_5;
                uint _2722 = _2721 + 1u;
                if (_2722 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2715 = _2571;
                    _2716 = _2573;
                    _2717 = _2575;
                    _2718 = _2577;
                    _2719 = _2579;
                    _2720 = _2581;
                    _2721 = _2722;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2570 = _2571;
            _2572 = _2573;
            _2574 = _2575;
            _2576 = _2577;
            _2578 = _2579;
            _2580 = _2581;
        }
        uvec4 _2584 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2585 = _2584.z;
        uint _2587 = (_2585 >> 8u) & 15u;
        float _2683;
        float _2685;
        float _2687;
        float _2689;
        float _2691;
        float _2693;
        if (((4294967295u << _2587) & _2469) == 0u)
        {
            _2683 = _2570;
            _2685 = _2572;
            _2687 = _2574;
            _2689 = _2576;
            _2691 = _2578;
            _2693 = _2580;
        }
        else
        {
            float _2708 = inversesqrt(dot(vec3(_2423, _2424, _2425), vec3(_2423, _2424, _2425)));
            float _2709 = _2708 * _2423;
            float _2710 = _2708 * _2424;
            float _2711 = _2708 * _2425;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2587 < ((_2585 >> 12u) & 15u))
            {
                float _2684;
                float _2686;
                float _2688;
                float _2690;
                float _2692;
                float _2694;
                float _2822 = _2570;
                float _2823 = _2572;
                float _2824 = _2574;
                float _2825 = _2576;
                float _2826 = _2578;
                float _2827 = _2580;
                uint _2828 = _2587;
                uint _2837;
                bool _2838;
                for (;;)
                {
                    _2837 = texelFetch(g_lightClassification, int((((_2463 << 5u) + (_2449 << 9u)) + (_2828 << 2u)) >> 2u)).x;
                    _2838 = _2837 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2838)
                    {
                        frontier_phi_67_pred = _2825;
                        frontier_phi_67_pred_1 = _2826;
                        frontier_phi_67_pred_2 = _2827;
                        frontier_phi_67_pred_3 = _2824;
                        frontier_phi_67_pred_4 = _2823;
                        frontier_phi_67_pred_5 = _2822;
                    }
                    else
                    {
                        float _3022;
                        float _3023;
                        float _3024;
                        float _3025;
                        float _3026;
                        float _3027;
                        float _3315;
                        float _3316;
                        float _3317;
                        float _3318;
                        float _3319;
                        float _3320;
                        float _3035 = _2822;
                        float _3036 = _2823;
                        float _3037 = _2824;
                        float _3038 = _2825;
                        float _3039 = _2826;
                        float _3040 = _2827;
                        uint _3041 = _2837;
                        uint _3042;
                        vec4 _3067;
                        float _3068;
                        vec4 _3083;
                        vec3 _3095;
                        vec4 _3110;
                        vec4 _3125;
                        float _3171;
                        bool _3172;
                        for (;;)
                        {
                            uint _3052 = ((_2828 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3041));
                            _3042 = (_3041 + 4294967295u) & _3041;
                            uint _3054 = _3052 * 40u;
                            _3067 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3054)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3054 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3054 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3054 + 3u)).x));
                            _3068 = _3067.w;
                            uint _3070 = (_3052 * 40u) + 4u;
                            _3083 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3070)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3070 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3070 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3070 + 3u)).x));
                            uint _3085 = (_3052 * 40u) + 8u;
                            _3095 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3085)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 2u)).x));
                            uint _3097 = (_3052 * 40u) + 16u;
                            _3110 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3097)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3097 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3097 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3097 + 3u)).x));
                            uint _3112 = (_3052 * 40u) + 20u;
                            _3125 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3112)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 3u)).x));
                            uint _3127 = (_3052 * 40u) + 24u;
                            vec4 _3140 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3127)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 3u)).x));
                            uint _3146 = (_3052 * 40u) + 28u;
                            vec4 _3159 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3146)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3146 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3146 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3146 + 3u)).x));
                            _3171 = fma(_2425, _3159.z, fma(_2424, _3159.y, _3159.x * _2423)) + _3159.w;
                            _3172 = !((fma(_2425, _3140.z, fma(_2424, _3140.y, _3140.x * _2423)) + _3140.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3172)
                            {
                                float _3199 = _3067.x - _2423;
                                float _3200 = _3067.y - _2424;
                                float _3201 = _3067.z - _2425;
                                float _3202 = dot(vec3(_3199, _3200, _3201), vec3(_3199, _3200, _3201));
                                float _3205 = inversesqrt(_3202);
                                float _3206 = _3205 * _3199;
                                float _3207 = _3205 * _3200;
                                float _3208 = _3205 * _3201;
                                float _3212 = 1.0 - (_3202 / (_3068 * _3068));
                                float _4270 = isnan(0.0) ? _3212 : (isnan(_3212) ? 0.0 : max(_3212, 0.0));
                                float _3213 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
                                float _3217 = sqrt(_3202) * _3083.w;
                                float _3219 = 1.39999997615814208984375 / (_3217 + 1.39999997615814208984375);
                                float _3220 = _3219 * _3219;
                                float _3223 = ((1.0 - _3220) * dot(vec3(_3206, _3207, _3208), vec3(_663, _666, _669))) + _3220;
                                float _3226 = _3217 * _3217;
                                float _3230 = (fma(_2425, _3110.z, fma(_2424, _3110.y, _3110.x * _2423)) + _3110.w) / _3171;
                                float _3231 = (fma(_2425, _3125.z, fma(_2424, _3125.y, _3125.x * _2423)) + _3125.w) / _3171;
                                float _3235 = 1.0 - dot(vec2(_3230, _3231), vec2(_3230, _3231));
                                float _4286 = isnan(0.0) ? _3235 : (isnan(_3235) ? 0.0 : max(_3235, 0.0));
                                float _3236 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
                                float _3237 = _3236 * (((isnan(0.0) ? _3223 : (isnan(_3223) ? 0.0 : max(_3223, 0.0))) * _3213) / ((_3226 * 0.699999988079071044921875) + 1.0));
                                float _3249 = exp2(log2(1.0 / ((_3226 * 3.5) + 5.0)) * 0.25);
                                float _3250 = 1.0 - _738;
                                float _3257 = sqrt(1.0 - ((1.0 - (_3250 * _3250)) * (1.0 - (_3249 * _3249))));
                                float _3258 = _3257 * _3257;
                                float _3259 = _3258 * _3258;
                                float _3260 = _3206 - _2709;
                                float _3261 = _3207 - _2710;
                                float _3262 = _3208 - _2711;
                                float _3266 = inversesqrt(dot(vec3(_3260, _3261, _3262), vec3(_3260, _3261, _3262)));
                                float _3270 = dot(vec3(_663, _666, _669), vec3((-0.0) - _2709, (-0.0) - _2710, (-0.0) - _2711));
                                float _4297 = isnan(0.0) ? _3270 : (isnan(_3270) ? 0.0 : max(_3270, 0.0));
                                float _3273 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
                                float _3274 = dot(vec3(_663, _666, _669), vec3(_3266 * _3260, _3266 * _3261, _3266 * _3262));
                                float _4308 = isnan(0.0) ? _3274 : (isnan(_3274) ? 0.0 : max(_3274, 0.0));
                                float _3277 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
                                float _3281 = ((_3277 * _3277) * (_3259 + (-1.0))) + 1.0;
                                float _3282 = _3219 * _3258;
                                float _3283 = _3282 * _3282;
                                float _3289 = ((1.0 - _3283) * dot(vec3(_663, _666, _669), vec3(_3206, _3207, _3208))) + _3283;
                                float _4319 = isnan(0.0) ? _3289 : (isnan(_3289) ? 0.0 : max(_3289, 0.0));
                                float _3290 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
                                float _3291 = 1.0 - _3258;
                                float _3301 = (0.5 / (((_3290 * ((_3273 * _3291) + _3258)) + 9.9999999392252902907785028219223e-09) + (((_3290 * _3291) + _3258) * _3273))) * _3290;
                                float _4330 = isnan(0.0) ? _3301 : (isnan(_3301) ? 0.0 : max(_3301, 0.0));
                                float _3311 = (_3236 * _3213) * (((_3259 * 3.1415927410125732421875) * (isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0)))) / ((_3281 * _3281) * ((_3226 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3311 * _3095.x;
                                frontier_phi_73_pred_1 = _3311 * _3095.y;
                                frontier_phi_73_pred_2 = _3237 * _3083.z;
                                frontier_phi_73_pred_3 = _3237 * _3083.y;
                                frontier_phi_73_pred_4 = _3237 * _3083.x;
                                frontier_phi_73_pred_5 = _3311 * _3095.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3315 = frontier_phi_73_pred;
                            _3316 = frontier_phi_73_pred_1;
                            _3320 = frontier_phi_73_pred_2;
                            _3319 = frontier_phi_73_pred_3;
                            _3318 = frontier_phi_73_pred_4;
                            _3317 = frontier_phi_73_pred_5;
                            _3025 = _3318 + _3038;
                            _3026 = _3319 + _3039;
                            _3027 = _3320 + _3040;
                            _3022 = _3315 + _3035;
                            _3023 = _3316 + _3036;
                            _3024 = _3317 + _3037;
                            if (_3042 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3035 = _3022;
                                _3036 = _3023;
                                _3037 = _3024;
                                _3038 = _3025;
                                _3039 = _3026;
                                _3040 = _3027;
                                _3041 = _3042;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3025;
                        frontier_phi_67_pred_1 = _3026;
                        frontier_phi_67_pred_2 = _3027;
                        frontier_phi_67_pred_3 = _3024;
                        frontier_phi_67_pred_4 = _3023;
                        frontier_phi_67_pred_5 = _3022;
                    }
                    _2690 = frontier_phi_67_pred;
                    _2692 = frontier_phi_67_pred_1;
                    _2694 = frontier_phi_67_pred_2;
                    _2688 = frontier_phi_67_pred_3;
                    _2686 = frontier_phi_67_pred_4;
                    _2684 = frontier_phi_67_pred_5;
                    uint _2829 = _2828 + 1u;
                    if (_2829 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2822 = _2684;
                        _2823 = _2686;
                        _2824 = _2688;
                        _2825 = _2690;
                        _2826 = _2692;
                        _2827 = _2694;
                        _2828 = _2829;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2692;
                frontier_phi_55_56_ladder_1 = _2694;
                frontier_phi_55_56_ladder_2 = _2690;
                frontier_phi_55_56_ladder_3 = _2688;
                frontier_phi_55_56_ladder_4 = _2686;
                frontier_phi_55_56_ladder_5 = _2684;
            }
            else
            {
                frontier_phi_55_56_ladder = _2578;
                frontier_phi_55_56_ladder_1 = _2580;
                frontier_phi_55_56_ladder_2 = _2576;
                frontier_phi_55_56_ladder_3 = _2574;
                frontier_phi_55_56_ladder_4 = _2572;
                frontier_phi_55_56_ladder_5 = _2570;
            }
            _2683 = frontier_phi_55_56_ladder_5;
            _2685 = frontier_phi_55_56_ladder_4;
            _2687 = frontier_phi_55_56_ladder_3;
            _2689 = frontier_phi_55_56_ladder_2;
            _2691 = frontier_phi_55_56_ladder;
            _2693 = frontier_phi_55_56_ladder_1;
        }
        float _2698 = isnan(1.0) ? _722 : (isnan(_722) ? 1.0 : min(_722, 1.0));
        _2482 = (_2698 * _2689) + _1915;
        _2484 = (_2698 * _2691) + _1917;
        _2486 = (_2698 * _2693) + _1919;
        _2488 = ((_2683 * _706) * _2698) + _2263;
        _2490 = ((_2685 * _708) * _2698) + _2265;
        _2492 = ((_2687 * _709) * _2698) + _2267;
    }
    else
    {
        _2482 = _1915;
        _2484 = _1917;
        _2486 = _1919;
        _2488 = _2263;
        _2490 = _2265;
        _2492 = _2267;
    }
    float _4346 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
    float _4357 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _4368 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
    uint _2512 = _236 + 6u;
    float _2520 = _644 / cbSceneParam._m0[86u].x;
    float _2521 = _645 / cbSceneParam._m0[86u].y;
    vec4 _2535 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2520, _2521, (log2((isnan(cbSceneParam._m0[77u].w) ? _578 : (isnan(_578) ? cbSceneParam._m0[77u].w : min(_578, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2537 = _2535.x;
    float _2538 = _2535.y;
    float _2539 = _2535.z;
    float _2540 = _2535.w;
    float _2633;
    float _2635;
    float _2637;
    float _2639;
    if (_578 > cbSceneParam._m0[78u].w)
    {
        float _2595 = isnan(_578) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _578 : min(cbSceneParam._m0[80u].w, _578));
        float _2596 = _2595 / _578;
        float _2607 = _2596 * _629;
        float _2608 = _630 * _2596;
        float _2609 = (-0.0) - _2608;
        float _2611 = _2596 * _631;
        float _2613 = (cbSceneParam._m0[77u].w * _2609) / _2595;
        float _2614 = _2613 + cbSceneParam._m0[79u].w;
        float _2615 = cbSceneParam._m0[79u].w - _2608;
        float _2621 = sqrt(((_2607 * _2607) + (_2608 * _2608)) + (_2611 * _2611));
        float _2624 = (1.0 - (cbSceneParam._m0[77u].w / _2595)) * _2621;
        float _2629 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2631 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2784;
        if (abs((_2609 - _2613) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2784 = ((((_2614 > 0.0) ? exp2(_2629 * _2614) : (2.0 - exp2(_2631 * _2614))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2624;
        }
        else
        {
            float _2744 = 1.0 / cbSceneParam._m0[80u].x;
            float _2745 = isnan(_2615) ? _2614 : (isnan(_2614) ? _2615 : max(_2614, _2615));
            float _2746 = isnan(_2615) ? _2614 : (isnan(_2614) ? _2615 : min(_2614, _2615));
            float _2755 = isnan(0.0) ? _2745 : (isnan(_2745) ? 0.0 : min(_2745, 0.0));
            float _2756 = isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : min(_2746, 0.0));
            _2784 = ((abs(_2621 / _2609) * cbSceneParam._m0[80u].y) * ((((_2755 - _2756) * 2.0) - ((exp2(_2629 * (isnan(0.0) ? _2745 : (isnan(_2745) ? 0.0 : max(_2745, 0.0)))) - exp2(_2629 * (isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : max(_2746, 0.0))))) * _2744)) - ((exp2(_2631 * _2755) - exp2(_2631 * _2756)) * _2744))) + (_2624 * cbSceneParam._m0[80u].z);
        }
        vec4 _2786 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2520, _2521, 1.0), 0.0);
        float _2795 = exp2((_2784 * (-1.44269502162933349609375)) * (1.0 - _2786.w));
        float _2796 = log2(_2795);
        float _2812 = log2(_2540);
        _2633 = (exp2(_2812 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2796 * cbSceneParam._m0[78u].x)) * _2786.x) / cbSceneParam._m0[78u].x)) + _2537;
        _2635 = (exp2(_2812 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2796 * cbSceneParam._m0[78u].y)) * _2786.y) / cbSceneParam._m0[78u].y)) + _2538;
        _2637 = (exp2(_2812 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2796 * cbSceneParam._m0[78u].z)) * _2786.z) / cbSceneParam._m0[78u].z)) + _2539;
        _2639 = _2795 * _2540;
    }
    else
    {
        _2633 = _2537;
        _2635 = _2538;
        _2637 = _2539;
        _2639 = _2540;
    }
    float _2651 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2652 = _2651 == 3.0;
    float _2653 = log2(_2639);
    float _2660 = exp2(_2653 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0))) * (_2482 + ((isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0))) * _722))) + ((_2488 + ((isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0))) * _1530)) * cbPerFrame._m0[3u].x));
    float _2661 = exp2(_2653 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0))) * (_2484 + ((isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0))) * _722))) + ((_2490 + ((isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0))) * _1530)) * cbPerFrame._m0[3u].x));
    float _2662 = exp2(_2653 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0))) * (_2486 + ((isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0))) * _722))) + ((_2492 + ((isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0))) * _1530)) * cbPerFrame._m0[3u].x));
    float _2671 = (_2651 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2671 * (_2652 ? _2660 : (_2660 + (cbSceneParam._m0[72u].w * _2633)));
    SV_Target.y = _2671 * (_2652 ? _2661 : (_2661 + (cbSceneParam._m0[72u].w * _2635)));
    SV_Target.z = _2671 * (_2652 ? _2662 : (_2662 + (cbSceneParam._m0[72u].w * _2637)));
    SV_Target.w = cbInstanceData._m0[_2512].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2512].w;
}


