#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1220;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _222 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _223 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _224 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _230 = inversesqrt(dot(vec3(_222, _223, _224), vec3(_222, _223, _224)));
    float _237 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _244 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _256 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _258 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _259 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3570 = isnan(0.0) ? _256 : (isnan(_256) ? 0.0 : max(_256, 0.0));
    float _3581 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    float _3592 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    uint _269 = uint(roundEven(NORMAL.w)) * 13u;
    uint _274 = _269 + 1u;
    uint _278 = _269 + 2u;
    float _287 = sqrt(((cbInstanceData._m0[_274].x * cbInstanceData._m0[_274].x) + (cbInstanceData._m0[_269].x * cbInstanceData._m0[_269].x)) + (cbInstanceData._m0[_278].x * cbInstanceData._m0[_278].x));
    float _288 = _287 * TEXCOORD.z;
    float _289 = _287 * TEXCOORD.w;
    vec4 _302 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _288) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _289) + cbTextureTilingScale._m0[13u].w));
    vec4 _325 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _330 = _325.x * cbMtdParam._m0[9u].x;
    float _331 = _325.y * cbMtdParam._m0[9u].y;
    float _332 = _325.z * cbMtdParam._m0[9u].z;
    float _336 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _302.x) * _330;
    float _339 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _302.y) * _331;
    float _342 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _302.z) * _332;
    float _349 = ((_330 - _336) * (isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0)))) + _336;
    float _350 = ((_331 - _339) * (isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0)))) + _339;
    float _351 = ((_332 - _342) * (isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0)))) + _342;
    vec4 _370 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _288) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _289) + cbTextureTilingScale._m0[14u].w));
    vec4 _390 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _288) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _289) + cbTextureTilingScale._m0[20u].w));
    vec4 _416 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _420 = _416.z;
    float _424 = (_416.x * 2.0) + (-1.0);
    float _425 = (_416.y * 2.0) + (-1.0);
    float _426 = dot(vec2(_424, _425), vec2(_424, _425));
    float _3603 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _431 = sqrt(1.0 - (isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0))));
    float _436 = _424 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_390.x * 2.0) + (-1.0)));
    float _437 = _425 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_390.y * 2.0) + (-1.0)));
    vec4 _454 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _288) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _289) + cbTextureTilingScale._m0[11u].w));
    float _456 = _454.x;
    float _457 = 1.0 - _456;
    float _466 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _469 = ((isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : min(_466, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _478 = (_469 - ((((((_456 - _457) * cbMtdParam._m0[24u].z) + _457) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _469))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3624 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _479 = isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0));
    float _486 = (_479 * ((_370.x * cbMtdParam._m0[18u].x) - _349)) + _349;
    float _487 = (_479 * ((_370.y * cbMtdParam._m0[18u].y) - _350)) + _350;
    float _488 = (_479 * ((_370.z * cbMtdParam._m0[18u].z) - _351)) + _351;
    vec4 _501 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _288) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _289) + cbTextureTilingScale._m0[19u].w));
    float _503 = _501.x;
    float _504 = 1.0 - _503;
    float _531 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_503 - _504) * cbMtdParam._m0[24u].w) + _504) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3635 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _532 = isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0));
    float _540 = ((((cbMtdParam._m0[10u].x - _486) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _532) + _486;
    float _541 = ((((cbMtdParam._m0[10u].y - _487) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _532) + _487;
    float _542 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _488)) * _532) + _488;
    vec4 _555 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _557 = _555.x;
    float _559 = _557 - (_557 * _479);
    float _561 = _559 - (_559 * _532);
    float _566 = (((_390.z - _420) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _420;
    vec4 _580 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _288) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _289) + cbTextureTilingScale._m0[15u].w));
    float _587 = (_580.x * 2.0) + (-1.0);
    float _588 = (_580.y * 2.0) + (-1.0);
    float _589 = dot(vec2(_587, _588), vec2(_587, _588));
    float _3646 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
    float _597 = (_479 * (_580.z - _566)) + _566;
    float _600 = ((cbMtdParam._m0[23u].y - _597) * _532) + _597;
    vec4 _622 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _288) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _289) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _628 = (_622.x * 2.0) + (-1.0);
    float _629 = (_622.y * 2.0) + (-1.0);
    float _630 = dot(vec2(_628, _629), vec2(_628, _629));
    float _3657 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _647 = (((_587 - _436) + (cbMtdParam._m0[21u].x * _436)) * _479) + _436;
    float _648 = (((_588 - _437) + (cbMtdParam._m0[21u].x * _437)) * _479) + _437;
    float _649 = (_479 * (sqrt(1.0 - (isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0)))) - _431)) + _431;
    float _660 = (((_628 - _647) + (_647 * cbMtdParam._m0[22u].z)) * _532) + _647;
    float _661 = (((_629 - _648) + (_648 * cbMtdParam._m0[22u].z)) * _532) + _648;
    float _662 = ((sqrt(1.0 - (isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0)))) - _649) * _532) + _649;
    float _664 = cbMtdParam._m0[22u].x + _416.w;
    float _667 = fma(_662, _237 * NORMAL.x, fma(_661, _244 * TANGENT.x, (_230 * _222) * _660));
    float _670 = fma(_662, _237 * NORMAL.y, fma(_661, _244 * TANGENT.y, (_230 * _223) * _660));
    float _673 = fma(_662, _237 * NORMAL.z, fma(_661, _244 * TANGENT.z, (_230 * _224) * _660));
    float _677 = inversesqrt(dot(vec3(_667, _670, _673), vec3(_667, _670, _673)));
    float _678 = _677 * _667;
    float _679 = _677 * _670;
    float _680 = _677 * _673;
    float _3668 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _681 = isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0));
    float _3679 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _3690 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _3701 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _3712 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _3723 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _686 = isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0));
    float _700 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _740 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _750 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _740);
    float _751 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _740);
    float _752 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _740);
    float _756 = inversesqrt(dot(vec3(_750, _751, _752), vec3(_750, _751, _752)));
    float _757 = _750 * _756;
    float _758 = _751 * _756;
    float _759 = _752 * _756;
    float _765 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _766 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _787 = fma(_680, cbSceneParam._m0[5u].z, fma(_679, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _678));
    float _790 = fma(_680, cbSceneParam._m0[6u].z, fma(_679, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _678));
    float _793 = fma(_680, cbSceneParam._m0[7u].z, fma(_679, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _678));
    uint _807 = (_269 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _813 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0)))) * cbInstanceData._m0[_807].x;
    float _814 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0)))) * cbInstanceData._m0[_807].y;
    float _815 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0)))) * cbInstanceData._m0[_807].z;
    float _3734 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
    float _816 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
    float _3745 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
    float _817 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
    float _3756 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
    float _818 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
    float _819 = 1.0 - _686;
    float _820 = _816 * _819;
    float _821 = _817 * _819;
    float _822 = _818 * _819;
    float _827 = (_816 + (-0.039999999105930328369140625)) * _686;
    float _828 = (_817 + (-0.039999999105930328369140625)) * _686;
    float _829 = (_818 + (-0.039999999105930328369140625)) * _686;
    float _830 = _827 + 0.039999999105930328369140625;
    float _832 = _828 + 0.039999999105930328369140625;
    float _833 = _829 + 0.039999999105930328369140625;
    vec4 _842 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _765, cbSceneParam._m0[86u].y * _766));
    float _846 = ((isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0))) * TEXCOORD_5.w) * _842.x;
    float _847 = dot(vec3(_678, _679, _680), vec3(_757, _758, _759));
    float _850 = _847 * 2.0;
    float _854 = (_850 * _678) - _757;
    float _855 = (_850 * _679) - _758;
    float _856 = (_850 * _680) - _759;
    float _860 = abs(dot(vec3(_757, _758, _759), vec3(_678, _679, _680)));
    float _3767 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
    float _862 = sqrt(_681);
    float _875 = exp2((_862 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_862 * 3.0));
    float _881 = (1.0 - _875) * ((_862 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _882 = _875 * _862;
    float _910 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _914 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _918 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1219;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _944 = fma(_918, cbModelParam._m0[26u].z, fma(_914, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _910));
        float _948 = fma(_918, cbModelParam._m0[27u].z, fma(_914, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _910));
        float _952 = fma(_918, cbModelParam._m0[28u].z, fma(_914, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _910));
        float _977 = _910 + _678;
        float _978 = _914 + _679;
        float _979 = _918 + _680;
        float _989 = fma(_979, cbModelParam._m0[26u].z, fma(_978, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _977)) - _944;
        float _990 = fma(_979, cbModelParam._m0[27u].z, fma(_978, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _977)) - _948;
        float _991 = fma(_979, cbModelParam._m0[28u].z, fma(_978, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _977)) - _952;
        float _995 = inversesqrt(dot(vec3(_989, _990, _991), vec3(_989, _990, _991)));
        float _1008 = ((_995 * _989) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_944 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1009 = ((_995 * _990) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_948 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1010 = ((_995 * _991) / cbModelParam._m0[34u].z) + ((((((_952 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1013 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1008, _1009, _1010), 0.0);
        vec4 _1020 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1008, _1009, _1010), 0.0);
        vec4 _1027 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1008, _1009, _1010), 0.0);
        vec4 _1034 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1008, _1009, _1010), 0.0);
        float _1047 = exp2((_1013.w + (-0.5)) * 20.0) * 2.0;
        float _1048 = _1047 * (_1013.x + (-0.5));
        float _1049 = _1047 * (_1013.y + (-0.5));
        float _1050 = _1047 * (_1013.z + (-0.5));
        float _1057 = exp2((_1020.w + (-0.5)) * 20.0) * 2.0;
        float _1058 = _1057 * (_1020.x + (-0.5));
        float _1059 = _1057 * (_1020.y + (-0.5));
        float _1060 = _1057 * (_1020.z + (-0.5));
        float _1067 = exp2((_1027.w + (-0.5)) * 20.0) * 2.0;
        float _1068 = _1067 * (_1027.x + (-0.5));
        float _1069 = _1067 * (_1027.y + (-0.5));
        float _1070 = _1067 * (_1027.z + (-0.5));
        float _1077 = exp2((_1034.w + (-0.5)) * 20.0) * 2.0;
        float _1078 = _1077 * (_1034.x + (-0.5));
        float _1079 = _1077 * (_1034.y + (-0.5));
        float _1080 = _1077 * (_1034.z + (-0.5));
        float _1081 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1082 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1083 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1084 = _1048 * 0.5;
        float _1085 = _1058 * 0.5;
        float _1086 = _1068 * 0.5;
        float _1087 = dot(vec3(_1084, _1085, _1086), vec3(_1084, _1085, _1086));
        float _1092 = (_1087 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1087);
        float _1101 = (dot(vec3(_678, _679, _680), vec3(_1092 * _1084, _1092 * _1085, _1092 * _1086)) + 1.0) * 0.5;
        float _3793 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1111 = sqrt(((_1085 * _1085) + (_1084 * _1084)) + (_1086 * _1086)) / (_1081 + 9.9999997473787516355514526367188e-06);
        float _3804 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1112 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
        float _1113 = _1112 * 2.0;
        float _1117 = (1.0 - _1112) / (_1112 + 1.0);
        float _3815 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1118 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
        float _1127 = ((((1.0 - _1118) * (_1113 + 2.0)) * exp2(log2(isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0))) * (_1113 + 1.0))) + _1118) * _1081;
        float _1128 = _1049 * 0.5;
        float _1129 = _1059 * 0.5;
        float _1130 = _1069 * 0.5;
        float _1131 = dot(vec3(_1128, _1129, _1130), vec3(_1128, _1129, _1130));
        float _1136 = (_1131 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1131);
        float _1144 = (dot(vec3(_678, _679, _680), vec3(_1136 * _1128, _1136 * _1129, _1136 * _1130)) + 1.0) * 0.5;
        float _3826 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1153 = sqrt(((_1129 * _1129) + (_1128 * _1128)) + (_1130 * _1130)) / (_1082 + 9.9999997473787516355514526367188e-06);
        float _3837 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1154 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
        float _1155 = _1154 * 2.0;
        float _1159 = (1.0 - _1154) / (_1154 + 1.0);
        float _3848 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1160 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
        float _1169 = ((((1.0 - _1160) * (_1155 + 2.0)) * exp2(log2(isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0))) * (_1155 + 1.0))) + _1160) * _1082;
        float _1170 = _1050 * 0.5;
        float _1171 = _1060 * 0.5;
        float _1172 = _1070 * 0.5;
        float _1173 = dot(vec3(_1170, _1171, _1172), vec3(_1170, _1171, _1172));
        float _1178 = (_1173 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1173);
        float _1186 = (dot(vec3(_678, _679, _680), vec3(_1178 * _1170, _1178 * _1171, _1178 * _1172)) + 1.0) * 0.5;
        float _3859 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1195 = sqrt(((_1171 * _1171) + (_1170 * _1170)) + (_1172 * _1172)) / (_1083 + 9.9999997473787516355514526367188e-06);
        float _3870 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1196 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
        float _1197 = _1196 * 2.0;
        float _1201 = (1.0 - _1196) / (_1196 + 1.0);
        float _3881 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1202 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
        float _1211 = ((((1.0 - _1202) * (_1197 + 2.0)) * exp2(log2(isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0))) * (_1197 + 1.0))) + _1202) * _1083;
        _1219 = _1050;
        _1221 = _1049;
        _1222 = _1048;
        _1223 = _1060;
        _1224 = _1059;
        _1225 = _1058;
        _1226 = _1070;
        _1227 = _1069;
        _1228 = _1068;
        _1229 = _1083;
        _1230 = _1082;
        _1231 = _1081;
        _1232 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0)));
        _1233 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0)));
        _1234 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0)));
    }
    else
    {
        _1219 = _1220;
        _1221 = _1220;
        _1222 = _1220;
        _1223 = _1220;
        _1224 = _1220;
        _1225 = _1220;
        _1226 = _1220;
        _1227 = _1220;
        _1228 = _1220;
        _1229 = _1220;
        _1230 = _1220;
        _1231 = _1220;
        _1232 = 0.0;
        _1233 = 0.0;
        _1234 = 0.0;
    }
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1259 = fma(_918, cbModelParam._m0[30u].z, fma(_914, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _910));
        float _1263 = fma(_918, cbModelParam._m0[31u].z, fma(_914, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _910));
        float _1267 = fma(_918, cbModelParam._m0[32u].z, fma(_914, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _910));
        float _1290 = _910 + _678;
        float _1291 = _914 + _679;
        float _1292 = _918 + _680;
        float _1302 = fma(_1292, cbModelParam._m0[30u].z, fma(_1291, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1290)) - _1259;
        float _1303 = fma(_1292, cbModelParam._m0[31u].z, fma(_1291, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1290)) - _1263;
        float _1304 = fma(_1292, cbModelParam._m0[32u].z, fma(_1291, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1290)) - _1267;
        float _1308 = inversesqrt(dot(vec3(_1302, _1303, _1304), vec3(_1302, _1303, _1304)));
        float _1321 = ((_1308 * _1302) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1259 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1322 = ((_1308 * _1303) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1263 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1323 = ((_1308 * _1304) / cbModelParam._m0[35u].z) + ((((((_1267 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1325 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1321, _1322, _1323), 0.0);
        vec4 _1332 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1321, _1322, _1323), 0.0);
        vec4 _1339 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1321, _1322, _1323), 0.0);
        vec4 _1346 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1321, _1322, _1323), 0.0);
        float _1358 = exp2((_1325.w + (-0.5)) * 20.0) * 2.0;
        float _1359 = _1358 * (_1325.x + (-0.5));
        float _1360 = _1358 * (_1325.y + (-0.5));
        float _1361 = _1358 * (_1325.z + (-0.5));
        float _1368 = exp2((_1332.w + (-0.5)) * 20.0) * 2.0;
        float _1369 = _1368 * (_1332.x + (-0.5));
        float _1370 = _1368 * (_1332.y + (-0.5));
        float _1371 = _1368 * (_1332.z + (-0.5));
        float _1378 = exp2((_1339.w + (-0.5)) * 20.0) * 2.0;
        float _1379 = _1378 * (_1339.x + (-0.5));
        float _1380 = _1378 * (_1339.y + (-0.5));
        float _1381 = _1378 * (_1339.z + (-0.5));
        float _1388 = exp2((_1346.w + (-0.5)) * 20.0) * 2.0;
        float _1389 = _1388 * (_1346.x + (-0.5));
        float _1390 = _1388 * (_1346.y + (-0.5));
        float _1391 = _1388 * (_1346.z + (-0.5));
        float _1392 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1393 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1394 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1395 = _1359 * 0.5;
        float _1396 = _1369 * 0.5;
        float _1397 = _1379 * 0.5;
        float _1398 = dot(vec3(_1395, _1396, _1397), vec3(_1395, _1396, _1397));
        float _1403 = (_1398 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1398);
        float _1411 = (dot(vec3(_678, _679, _680), vec3(_1403 * _1395, _1403 * _1396, _1403 * _1397)) + 1.0) * 0.5;
        float _3922 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1420 = sqrt(((_1396 * _1396) + (_1395 * _1395)) + (_1397 * _1397)) / (_1392 + 9.9999997473787516355514526367188e-06);
        float _3933 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1421 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
        float _1422 = _1421 * 2.0;
        float _1426 = (1.0 - _1421) / (_1421 + 1.0);
        float _3944 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1427 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
        float _1436 = ((((1.0 - _1427) * (_1422 + 2.0)) * exp2(log2(isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0))) * (_1422 + 1.0))) + _1427) * _1392;
        float _1437 = _1360 * 0.5;
        float _1438 = _1370 * 0.5;
        float _1439 = _1380 * 0.5;
        float _1440 = dot(vec3(_1437, _1438, _1439), vec3(_1437, _1438, _1439));
        float _1445 = (_1440 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1440);
        float _1453 = (dot(vec3(_678, _679, _680), vec3(_1445 * _1437, _1445 * _1438, _1445 * _1439)) + 1.0) * 0.5;
        float _3955 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1462 = sqrt(((_1438 * _1438) + (_1437 * _1437)) + (_1439 * _1439)) / (_1393 + 9.9999997473787516355514526367188e-06);
        float _3966 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1463 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
        float _1464 = _1463 * 2.0;
        float _1468 = (1.0 - _1463) / (_1463 + 1.0);
        float _3977 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1469 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
        float _1478 = ((((1.0 - _1469) * (_1464 + 2.0)) * exp2(log2(isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0))) * (_1464 + 1.0))) + _1469) * _1393;
        float _1479 = _1361 * 0.5;
        float _1480 = _1371 * 0.5;
        float _1481 = _1381 * 0.5;
        float _1482 = dot(vec3(_1479, _1480, _1481), vec3(_1479, _1480, _1481));
        float _1487 = (_1482 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1482);
        float _1495 = (dot(vec3(_678, _679, _680), vec3(_1487 * _1479, _1487 * _1480, _1487 * _1481)) + 1.0) * 0.5;
        float _3988 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1504 = sqrt(((_1480 * _1480) + (_1479 * _1479)) + (_1481 * _1481)) / (_1394 + 9.9999997473787516355514526367188e-06);
        float _3999 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1505 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
        float _1506 = _1505 * 2.0;
        float _1510 = (1.0 - _1505) / (_1505 + 1.0);
        float _4010 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1511 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
        float _1520 = ((((1.0 - _1511) * (_1506 + 2.0)) * exp2(log2(isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0))) * (_1506 + 1.0))) + _1511) * _1394;
        _1528 = _1361;
        _1529 = _1360;
        _1530 = _1359;
        _1531 = _1371;
        _1532 = _1370;
        _1533 = _1369;
        _1534 = _1381;
        _1535 = _1380;
        _1536 = _1379;
        _1537 = _1394;
        _1538 = _1393;
        _1539 = _1392;
        _1540 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0)));
        _1541 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0)));
        _1542 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0)));
    }
    else
    {
        _1528 = _1220;
        _1529 = _1220;
        _1530 = _1220;
        _1531 = _1220;
        _1532 = _1220;
        _1533 = _1220;
        _1534 = _1220;
        _1535 = _1220;
        _1536 = _1220;
        _1537 = _1220;
        _1538 = _1220;
        _1539 = _1220;
        _1540 = 0.0;
        _1541 = 0.0;
        _1542 = 0.0;
    }
    float _1552 = (cbModelParam._m0[1u].x * (_1540 - _1232)) + _1232;
    float _1553 = (cbModelParam._m0[1u].x * (_1541 - _1233)) + _1233;
    float _1554 = (cbModelParam._m0[1u].x * (_1542 - _1234)) + _1234;
    float _1575 = fma(_1554, cbSceneParam._m0[89u].z, fma(_1553, cbSceneParam._m0[89u].y, _1552 * cbSceneParam._m0[89u].x));
    float _1578 = fma(_1554, cbSceneParam._m0[90u].z, fma(_1553, cbSceneParam._m0[90u].y, _1552 * cbSceneParam._m0[90u].x));
    float _1581 = fma(_1554, cbSceneParam._m0[91u].z, fma(_1553, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1552));
    float _1596 = _854 * 0.5;
    float _1597 = _855 * 0.5;
    float _1598 = _856 * 0.5;
    float _1599 = dot(vec4(_1596, _1597, _1598, 1.0), vec4(_1530, _1533, _1536, _1539));
    float _1602 = dot(vec4(_1596, _1597, _1598, 1.0), vec4(_1529, _1532, _1535, _1538));
    float _1605 = dot(vec4(_1596, _1597, _1598, 1.0), vec4(_1528, _1531, _1534, _1537));
    float _1639;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1612 = dot(vec4(_1596, _1597, _1598, 1.0), vec4(_1219, _1223, _1226, _1229));
        float _1616 = dot(vec4(_1596, _1597, _1598, 1.0), vec4(_1221, _1224, _1227, _1230));
        float _1620 = dot(vec4(_1596, _1597, _1598, 1.0), vec4(_1222, _1225, _1228, _1231));
        float _1627 = dot(vec4(cbModelParam._m0[39u]), vec4(_1596, _1597, _1598, 1.0));
        _1639 = dot(vec3(isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0)), isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0)), isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1627) ? 0.0 : (isnan(0.0) ? _1627 : max(0.0, _1627))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1639 = 1.0;
    }
    float _1650;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1641 = dot(vec4(cbModelParam._m0[40u]), vec4(_1596, _1597, _1598, 1.0));
        _1650 = dot(vec3(isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0)), isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0)), isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1641) ? 0.0 : (isnan(0.0) ? _1641 : max(0.0, _1641))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1650 = 1.0;
    }
    float _1654 = (_1650 * cbModelParam._m0[1u].x) + (_1639 * (1.0 - cbModelParam._m0[1u].x));
    float _1664 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _681);
    float _1665 = isnan(_1664) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1664 : min(cbModelParam._m0[25u].z, _1664));
    float _1745;
    float _1747;
    float _1749;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1712 = fma(_918, cbModelParam._m0[13u].z, fma(_914, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _910)) + cbModelParam._m0[13u].w;
        float _1716 = fma(_918, cbModelParam._m0[14u].z, fma(_914, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _910)) + cbModelParam._m0[14u].w;
        float _1720 = fma(_918, cbModelParam._m0[15u].z, fma(_914, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _910)) + cbModelParam._m0[15u].w;
        float _1723 = fma(_856, cbModelParam._m0[13u].z, fma(_855, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _854));
        float _1726 = fma(_856, cbModelParam._m0[14u].z, fma(_855, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _854));
        float _1729 = fma(_856, cbModelParam._m0[15u].z, fma(_855, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _854));
        float _1757;
        if (_1723 > 0.0)
        {
            _1757 = abs((1.0 - _1712) / _1723);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1723 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1712 + 1.0) / _1723);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1757 = frontier_phi_14_12_ladder;
        }
        float _1981;
        if (_1726 > 0.0)
        {
            _1981 = abs((1.0 - _1716) / _1726);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1726 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1716 + 1.0) / _1726);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1981 = frontier_phi_23_19_ladder;
        }
        float _2238;
        if (_1729 > 0.0)
        {
            _2238 = abs((1.0 - _1720) / _1729);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1729 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1720 + 1.0) / _1729);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2238 = frontier_phi_35_30_ladder;
        }
        float _2240 = isnan(_1981) ? _1757 : (isnan(_1757) ? _1981 : min(_1757, _1981));
        float _2241 = isnan(_2238) ? _2240 : (isnan(_2240) ? _2238 : min(_2240, _2238));
        float _2245 = (_2241 * _1723) + _1712;
        float _2246 = (_2241 * _1726) + _1716;
        float _2247 = (_2241 * _1729) + _1720;
        float _2248 = _2241 * 9.9999997473787516355514526367188e-05;
        float _2250 = (-1.0) - _2248;
        float _2252 = _2248 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2247 > _2252) || ((_2247 < _2250) || ((_2246 > _2252) || ((_2246 < _2250) || ((_2245 < _2250) || (_2245 > _2252))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2375 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2247, cbModelParam._m0[9u].z, fma(_2246, cbModelParam._m0[9u].y, _2245 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2247, cbModelParam._m0[10u].z, fma(_2246, cbModelParam._m0[10u].y, _2245 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2247, cbModelParam._m0[11u].z, fma(_2246, cbModelParam._m0[11u].y, _2245 * cbModelParam._m0[11u].x))), _1665);
            frontier_phi_13_35_ladder = _2375.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2375.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2375.x * cbModelParam._m0[1u].y;
        }
        _1745 = frontier_phi_13_35_ladder_2;
        _1747 = frontier_phi_13_35_ladder_1;
        _1749 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1733 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_854, _855, _856), _1665);
        _1745 = _1733.x * cbModelParam._m0[1u].y;
        _1747 = _1733.y * cbModelParam._m0[1u].y;
        _1749 = _1733.z * cbModelParam._m0[1u].y;
    }
    float _1753 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _681);
    float _1754 = isnan(_1753) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1753 : min(cbModelParam._m0[25u].w, _1753));
    float _1843;
    float _1845;
    float _1847;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1807 = fma(_918, cbModelParam._m0[21u].z, fma(_914, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _910)) + cbModelParam._m0[21u].w;
        float _1811 = fma(_918, cbModelParam._m0[22u].z, fma(_914, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _910)) + cbModelParam._m0[22u].w;
        float _1815 = fma(_918, cbModelParam._m0[23u].z, fma(_914, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _910)) + cbModelParam._m0[23u].w;
        float _1818 = fma(_856, cbModelParam._m0[21u].z, fma(_855, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _854));
        float _1821 = fma(_856, cbModelParam._m0[22u].z, fma(_855, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _854));
        float _1824 = fma(_856, cbModelParam._m0[23u].z, fma(_855, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _854));
        float _1986;
        if (_1818 > 0.0)
        {
            _1986 = abs((1.0 - _1807) / _1818);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1818 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1807 + 1.0) / _1818);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1986 = frontier_phi_25_21_ladder;
        }
        float _2265;
        if (_1821 > 0.0)
        {
            _2265 = abs((1.0 - _1811) / _1821);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1821 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1811 + 1.0) / _1821);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2265 = frontier_phi_37_32_ladder;
        }
        float _2478;
        if (_1824 > 0.0)
        {
            _2478 = abs((1.0 - _1815) / _1824);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1824 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1815 + 1.0) / _1824);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2478 = frontier_phi_46_43_ladder;
        }
        float _2480 = isnan(_2265) ? _1986 : (isnan(_1986) ? _2265 : min(_1986, _2265));
        float _2481 = isnan(_2478) ? _2480 : (isnan(_2480) ? _2478 : min(_2480, _2478));
        float _2485 = (_2481 * _1818) + _1807;
        float _2486 = (_2481 * _1821) + _1811;
        float _2487 = (_2481 * _1824) + _1815;
        float _2488 = _2481 * 9.9999997473787516355514526367188e-05;
        float _2489 = (-1.0) - _2488;
        float _2491 = _2488 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2487 > _2491) || ((_2487 < _2489) || ((_2486 > _2491) || ((_2486 < _2489) || ((_2485 < _2489) || (_2485 > _2491))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2686 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2487, cbModelParam._m0[17u].z, fma(_2486, cbModelParam._m0[17u].y, _2485 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2487, cbModelParam._m0[18u].z, fma(_2486, cbModelParam._m0[18u].y, _2485 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2487, cbModelParam._m0[19u].z, fma(_2486, cbModelParam._m0[19u].y, _2485 * cbModelParam._m0[19u].x))), _1754);
            frontier_phi_22_46_ladder = _2686.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2686.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2686.x * cbModelParam._m0[1u].z;
        }
        _1843 = frontier_phi_22_46_ladder_2;
        _1845 = frontier_phi_22_46_ladder_1;
        _1847 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1827 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_854, _855, _856), _1754);
        _1843 = _1827.x * cbModelParam._m0[1u].z;
        _1845 = _1827.y * cbModelParam._m0[1u].z;
        _1847 = _1827.z * cbModelParam._m0[1u].z;
    }
    float _1860 = (((_881 * _830) + _882) * _846) * ((cbModelParam._m0[1u].w * (_1843 - _1745)) + _1745);
    float _1862 = (((_881 * _832) + _882) * _846) * ((cbModelParam._m0[1u].w * (_1845 - _1747)) + _1747);
    float _1864 = (((_881 * _833) + _882) * _846) * ((cbModelParam._m0[1u].w * (_1847 - _1749)) + _1749);
    float _1867 = fma(_1864, cbSceneParam._m0[89u].z, fma(_1862, cbSceneParam._m0[89u].y, _1860 * cbSceneParam._m0[89u].x));
    float _1870 = fma(_1864, cbSceneParam._m0[90u].z, fma(_1862, cbSceneParam._m0[90u].y, _1860 * cbSceneParam._m0[90u].x));
    float _1873 = fma(_1864, cbSceneParam._m0[91u].z, fma(_1862, cbSceneParam._m0[91u].y, _1860 * cbSceneParam._m0[91u].x));
    vec4 _1881 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_765, _766));
    float _1883 = _1881.w;
    float _1895 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1883);
    float _1896 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1883);
    float _1897 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1883);
    uvec4 _1901 = floatBitsToUint(cbInstanceData._m0[_269 + 5u]);
    uint _1903 = _1901.x * 14u;
    uint _1904 = _1903 + 13u;
    float _1911 = _846 + (-1.0);
    float _1916 = (cbLight._m0[_1904].x * _1911) + 1.0;
    float _1917 = (cbLight._m0[_1904].y * _1911) + 1.0;
    float _1918 = (cbLight._m0[_1904].z * _1911) + 1.0;
    float _1919 = (cbLight._m0[_1904].w * _1911) + 1.0;
    uint _1920 = _1903 + 5u;
    float _1926 = isnan(1.0) ? _1917 : (isnan(_1917) ? 1.0 : min(_1917, 1.0));
    uint _1930 = _1903 + 4u;
    float _1940 = isnan(1.0) ? _1916 : (isnan(_1916) ? 1.0 : min(_1916, 1.0));
    uint _1944 = _1903 | 1u;
    float _1955 = dot(vec3(cbLight._m0[_1903].xyz), vec3(_678, _679, _680));
    float _1958 = dot(vec3(cbLight._m0[_1944].xyz), vec3(_678, _679, _680));
    float _4146 = isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0));
    float _4157 = isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0));
    float _1963 = (isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0))) * 0.3183098733425140380859375;
    float _1965 = (isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0))) * 0.3183098733425140380859375;
    float _1972 = ((cbLight._m0[_1920].x * _1926) * _1965) + (((cbLight._m0[_1930].x * _1895) * _1940) * _1963);
    float _1973 = ((_1926 * cbLight._m0[_1920].y) * _1965) + (((cbLight._m0[_1930].y * _1896) * _1940) * _1963);
    float _1974 = ((_1926 * cbLight._m0[_1920].z) * _1965) + (((cbLight._m0[_1930].z * _1897) * _1940) * _1963);
    uvec4 _1978 = floatBitsToUint(cbLight._m0[_1903 + 12u]);
    bool _1980 = _1978.x == 0u;
    float _1991;
    float _1993;
    float _1995;
    if (_1980)
    {
        _1991 = _1972;
        _1993 = _1973;
        _1995 = _1974;
    }
    else
    {
        uint _1999 = _1903 + 6u;
        float _2015 = (dot(vec3(cbLight._m0[_1903 + 2u].xyz), vec3(_678, _679, _680)) * 0.5) + 0.5;
        float _2016 = _2015 * _2015;
        float _4168 = isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0));
        float _2017 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
        float _2018 = isnan(1.0) ? _1918 : (isnan(_1918) ? 1.0 : min(_1918, 1.0));
        _1991 = (((cbLight._m0[_1999].x * 0.3183098733425140380859375) * _2017) * _2018) + _1972;
        _1993 = (((cbLight._m0[_1999].y * 0.3183098733425140380859375) * _2017) * _2018) + _1973;
        _1995 = (((cbLight._m0[_1999].z * 0.3183098733425140380859375) * _2017) * _2018) + _1974;
    }
    bool _1998 = _1978.y == 0u;
    float _2036;
    float _2038;
    float _2040;
    if (_1998)
    {
        _2036 = _1991;
        _2038 = _1993;
        _2040 = _1995;
    }
    else
    {
        uint _2209 = _1903 + 7u;
        float _2225 = (dot(vec3(cbLight._m0[_1903 + 3u].xyz), vec3(_678, _679, _680)) * 0.5) + 0.5;
        float _2226 = _2225 * _2225;
        float _4184 = isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0));
        float _2227 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
        float _2228 = isnan(1.0) ? _1919 : (isnan(_1919) ? 1.0 : min(_1919, 1.0));
        _2036 = (((cbLight._m0[_2209].x * 0.3183098733425140380859375) * _2227) * _2228) + _1991;
        _2038 = (((cbLight._m0[_2209].y * 0.3183098733425140380859375) * _2227) * _2228) + _1993;
        _2040 = (((cbLight._m0[_2209].z * 0.3183098733425140380859375) * _2227) * _2228) + _1995;
    }
    uint _2043 = _1903 + 8u;
    float _2056 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1903].w)) * _681) * 0.949999988079071044921875);
    float _2057 = _2056 * _2056;
    float _2058 = cbLight._m0[_1903].x + _757;
    float _2059 = cbLight._m0[_1903].y + _758;
    float _2060 = cbLight._m0[_1903].z + _759;
    float _2064 = inversesqrt(dot(vec3(_2058, _2059, _2060), vec3(_2058, _2059, _2060)));
    float _2065 = _2064 * _2058;
    float _2066 = _2064 * _2059;
    float _2067 = _2064 * _2060;
    float _2068 = dot(vec3(_678, _679, _680), vec3(cbLight._m0[_1903].xyz));
    float _4200 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
    float _2071 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
    float _4211 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
    float _2072 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
    float _2073 = dot(vec3(_678, _679, _680), vec3(_2065, _2066, _2067));
    float _4222 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
    float _2076 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
    float _2077 = dot(vec3(cbLight._m0[_1903].xyz), vec3(_2065, _2066, _2067));
    float _4233 = isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0));
    float _2081 = _2057 * _2057;
    float _2085 = ((_2076 * _2076) * (_2081 + (-1.0))) + 1.0;
    float _2093 = exp2(log2(1.0 - (isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0)))) * 5.0);
    float _2094 = 0.959999978542327880859375 - _827;
    float _2096 = 0.959999978542327880859375 - _828;
    float _2097 = 0.959999978542327880859375 - _829;
    float _2104 = 1.0 - _2057;
    float _2115 = (0.5 / (((_2072 * ((_2071 * _2104) + _2057)) + 9.9999999392252902907785028219223e-09) + (((_2072 * _2104) + _2057) * _2071))) * _2071;
    float _4244 = isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0));
    float _2117 = (isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0))) * (_2081 / ((_2085 * _2085) * 3.141590118408203125));
    uint _2131 = _1903 + 9u;
    float _2142 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1944].w)) * _681) * 0.949999988079071044921875);
    float _2143 = _2142 * _2142;
    float _2144 = cbLight._m0[_1944].x + _757;
    float _2145 = cbLight._m0[_1944].y + _758;
    float _2146 = cbLight._m0[_1944].z + _759;
    float _2150 = inversesqrt(dot(vec3(_2144, _2145, _2146), vec3(_2144, _2145, _2146)));
    float _2151 = _2150 * _2144;
    float _2152 = _2150 * _2145;
    float _2153 = _2150 * _2146;
    float _2154 = dot(vec3(_678, _679, _680), vec3(cbLight._m0[_1944].xyz));
    float _4255 = isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0));
    float _2157 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
    float _2158 = dot(vec3(_678, _679, _680), vec3(_2151, _2152, _2153));
    float _4266 = isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0));
    float _2161 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
    float _2162 = dot(vec3(cbLight._m0[_1944].xyz), vec3(_2151, _2152, _2153));
    float _4277 = isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0));
    float _2166 = _2143 * _2143;
    float _2170 = ((_2161 * _2161) * (_2166 + (-1.0))) + 1.0;
    float _2177 = exp2(log2(1.0 - (isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0)))) * 5.0);
    float _2184 = 1.0 - _2143;
    float _2194 = (0.5 / (((_2072 * ((_2157 * _2184) + _2143)) + 9.9999999392252902907785028219223e-09) + (((_2072 * _2184) + _2143) * _2157))) * _2157;
    float _4288 = isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : max(_2194, 0.0));
    float _2196 = (isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0))) * (_2166 / ((_2170 * _2170) * 3.141590118408203125));
    float _2206 = (((((_2177 * _2094) + _830) * cbLight._m0[_2131].x) * _2196) * _1926) + ((((cbLight._m0[_2043].x * _1895) * ((_2093 * _2094) + _830)) * _2117) * _1940);
    float _2207 = (((((_2177 * _2096) + _832) * cbLight._m0[_2131].y) * _2196) * _1926) + ((((cbLight._m0[_2043].y * _1896) * ((_2093 * _2096) + _832)) * _2117) * _1940);
    float _2208 = (((((_2177 * _2097) + _833) * cbLight._m0[_2131].z) * _2196) * _1926) + ((((cbLight._m0[_2043].z * _1897) * ((_2093 * _2097) + _833)) * _2117) * _1940);
    float _2270;
    float _2272;
    float _2274;
    if (_1980)
    {
        _2270 = _2206;
        _2272 = _2207;
        _2274 = _2208;
    }
    else
    {
        uint _2276 = _1903 + 2u;
        uint _2280 = _1903 + 10u;
        float _2294 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2276].w)) * _681) * 0.949999988079071044921875);
        float _2295 = _2294 * _2294;
        float _2296 = cbLight._m0[_2276].x + _757;
        float _2297 = cbLight._m0[_2276].y + _758;
        float _2298 = cbLight._m0[_2276].z + _759;
        float _2302 = inversesqrt(dot(vec3(_2296, _2297, _2298), vec3(_2296, _2297, _2298)));
        float _2303 = _2302 * _2296;
        float _2304 = _2302 * _2297;
        float _2305 = _2302 * _2298;
        float _2306 = dot(vec3(_678, _679, _680), vec3(cbLight._m0[_2276].xyz));
        float _4299 = isnan(0.0) ? _2306 : (isnan(_2306) ? 0.0 : max(_2306, 0.0));
        float _2309 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
        float _2310 = dot(vec3(_678, _679, _680), vec3(_2303, _2304, _2305));
        float _4310 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
        float _2313 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
        float _2314 = dot(vec3(cbLight._m0[_2276].xyz), vec3(_2303, _2304, _2305));
        float _4321 = isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0));
        float _2318 = _2295 * _2295;
        float _2322 = ((_2313 * _2313) * (_2318 + (-1.0))) + 1.0;
        float _2329 = exp2(log2(1.0 - (isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0)))) * 5.0);
        float _2336 = 1.0 - _2295;
        float _2346 = (0.5 / (((_2072 * ((_2309 * _2336) + _2295)) + 9.9999999392252902907785028219223e-09) + (((_2072 * _2336) + _2295) * _2309))) * _2309;
        float _4332 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
        float _2348 = (isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0))) * (_2318 / ((_2322 * _2322) * 3.141590118408203125));
        float _2349 = isnan(1.0) ? _1918 : (isnan(_1918) ? 1.0 : min(_1918, 1.0));
        _2270 = (((((_2329 * _2094) + _830) * cbLight._m0[_2280].x) * _2348) * _2349) + _2206;
        _2272 = (((((_2329 * _2096) + _832) * cbLight._m0[_2280].y) * _2348) * _2349) + _2207;
        _2274 = (((((_2329 * _2097) + _833) * cbLight._m0[_2280].z) * _2348) * _2349) + _2208;
    }
    float _2384;
    float _2386;
    float _2388;
    if (_1998)
    {
        _2384 = _2270;
        _2386 = _2272;
        _2388 = _2274;
    }
    else
    {
        uint _2395 = _1903 + 3u;
        uint _2399 = _1903 + 11u;
        float _2413 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2395].w)) * _681) * 0.949999988079071044921875);
        float _2414 = _2413 * _2413;
        float _2415 = cbLight._m0[_2395].x + _757;
        float _2416 = cbLight._m0[_2395].y + _758;
        float _2417 = cbLight._m0[_2395].z + _759;
        float _2421 = inversesqrt(dot(vec3(_2415, _2416, _2417), vec3(_2415, _2416, _2417)));
        float _2422 = _2421 * _2415;
        float _2423 = _2421 * _2416;
        float _2424 = _2421 * _2417;
        float _2425 = dot(vec3(_678, _679, _680), vec3(cbLight._m0[_2395].xyz));
        float _4348 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
        float _2428 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
        float _2429 = dot(vec3(_678, _679, _680), vec3(_2422, _2423, _2424));
        float _4359 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
        float _2432 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
        float _2433 = dot(vec3(cbLight._m0[_2395].xyz), vec3(_2422, _2423, _2424));
        float _4370 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
        float _2437 = _2414 * _2414;
        float _2441 = ((_2432 * _2432) * (_2437 + (-1.0))) + 1.0;
        float _2448 = exp2(log2(1.0 - (isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0)))) * 5.0);
        float _2455 = 1.0 - _2414;
        float _2465 = (0.5 / (((_2072 * ((_2428 * _2455) + _2414)) + 9.9999999392252902907785028219223e-09) + (((_2072 * _2455) + _2414) * _2428))) * _2428;
        float _4381 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
        float _2467 = (isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0))) * (_2437 / ((_2441 * _2441) * 3.141590118408203125));
        float _2468 = isnan(1.0) ? _1919 : (isnan(_1919) ? 1.0 : min(_1919, 1.0));
        _2384 = (((((_2448 * _2094) + _830) * cbLight._m0[_2399].x) * _2467) * _2468) + _2270;
        _2386 = (((((_2448 * _2096) + _832) * cbLight._m0[_2399].y) * _2467) * _2468) + _2272;
        _2388 = (((((_2448 * _2097) + _833) * cbLight._m0[_2399].z) * _2467) * _2468) + _2274;
    }
    float _2603;
    float _2605;
    float _2607;
    float _2609;
    float _2611;
    float _2613;
    if (_1901.y == 0u)
    {
        float _2543 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2544 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2543;
        float _2545 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2543;
        float _2546 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2543;
        uvec4 _2558 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2559 = _2558.x;
        uint _2570 = uint((float(_2558.y) * floor(float(uint(cbSceneParam._m0[85u].y * _766) / _2559))) + floor(float(uint(cbSceneParam._m0[85u].x * _765) / _2559)));
        float _2580 = (log2(_2546 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2581 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0));
        uint _2584 = uint(isnan(14.0) ? _2581 : (isnan(_2581) ? 14.0 : min(_2581, 14.0)));
        uvec4 _2589 = texelFetch(g_lightClusterGridBuffer, int(((_2584 << 2u) + (_2570 << 6u)) >> 2u));
        uint _2590 = _2589.x;
        uint _2591 = _2558.z;
        float _2691;
        float _2693;
        float _2695;
        float _2697;
        float _2699;
        float _2701;
        if (((((1u << ((_2591 >> 4u) & 15u)) + 4294967295u) & _2590) == 0u) || ((_2591 & 240u) == 0u))
        {
            _2691 = 0.0;
            _2693 = 0.0;
            _2695 = 0.0;
            _2697 = 0.0;
            _2699 = 0.0;
            _2701 = 0.0;
        }
        else
        {
            float _2692;
            float _2694;
            float _2696;
            float _2698;
            float _2700;
            float _2702;
            float _2836 = 0.0;
            float _2837 = 0.0;
            float _2838 = 0.0;
            float _2839 = 0.0;
            float _2840 = 0.0;
            float _2841 = 0.0;
            uint _2842 = 0u;
            uint _2851;
            bool _2852;
            for (;;)
            {
                _2851 = texelFetch(g_lightClassification, int((((_2584 << 5u) + (_2570 << 9u)) + (_2842 << 2u)) >> 2u)).x;
                _2852 = _2851 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2852)
                {
                    frontier_phi_61_pred = _2836;
                    frontier_phi_61_pred_1 = _2841;
                    frontier_phi_61_pred_2 = _2840;
                    frontier_phi_61_pred_3 = _2839;
                    frontier_phi_61_pred_4 = _2838;
                    frontier_phi_61_pred_5 = _2837;
                }
                else
                {
                    float _2960;
                    float _2961;
                    float _2962;
                    float _2963;
                    float _2964;
                    float _2965;
                    uint _2966;
                    _2960 = _2836;
                    _2961 = _2837;
                    _2962 = _2838;
                    _2963 = _2839;
                    _2964 = _2840;
                    _2965 = _2841;
                    _2966 = _2851;
                    float _2892;
                    float _2893;
                    float _2894;
                    float _2895;
                    float _2896;
                    float _2897;
                    for (;;)
                    {
                        uint _2970 = uint(findLSB(_2966)) + (_2842 << 5u);
                        uint _2967 = (_2966 + 4294967295u) & _2966;
                        uint _2972 = _2970 * 48u;
                        vec4 _2986 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2972)).x, texelFetch(g_PointLightRenderingBuffer, int(_2972 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2972 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2972 + 3u)).x));
                        uint _2992 = (_2970 * 48u) + 4u;
                        vec4 _3005 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2992)).x, texelFetch(g_PointLightRenderingBuffer, int(_2992 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2992 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2992 + 3u)).x));
                        uint _3011 = (_2970 * 48u) + 8u;
                        vec3 _3022 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3011)).x, texelFetch(g_PointLightRenderingBuffer, int(_3011 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3011 + 2u)).x));
                        float _3026 = _2986.x - _2544;
                        float _3027 = _2986.y - _2545;
                        float _3028 = _2986.z - _2546;
                        float _3029 = dot(vec3(_3026, _3027, _3028), vec3(_3026, _3027, _3028));
                        float _3032 = inversesqrt(_3029);
                        float _3033 = _3032 * _3026;
                        float _3034 = _3032 * _3027;
                        float _3035 = _3032 * _3028;
                        float _3036 = dot(vec3(_787, _790, _793), vec3(_3033, _3034, _3035));
                        float _3041 = 1.0 - (_3029 * _2986.w);
                        float _4407 = isnan(0.0) ? _3041 : (isnan(_3041) ? 0.0 : max(_3041, 0.0));
                        float _3042 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
                        float _3043 = sqrt(_3029) * _3005.w;
                        float _3046 = 1.39999997615814208984375 / (_3043 + 1.39999997615814208984375);
                        float _3047 = _3046 * _3046;
                        float _3050 = ((1.0 - _3047) * _3036) + _3047;
                        float _3053 = _3043 * _3043;
                        float _3057 = ((isnan(0.0) ? _3050 : (isnan(_3050) ? 0.0 : max(_3050, 0.0))) * _3042) / ((_3053 * 0.699999988079071044921875) + 1.0);
                        float _3061 = (-0.0) - _2544;
                        float _3062 = (-0.0) - _2545;
                        float _3063 = (-0.0) - _2546;
                        float _3067 = inversesqrt(dot(vec3(_3061, _3062, _3063), vec3(_3061, _3062, _3063)));
                        float _3068 = _3067 * _3061;
                        float _3069 = _3067 * _3062;
                        float _3070 = _3067 * _3063;
                        float _3078 = exp2(log2(1.0 / ((_3053 * 3.5) + 5.0)) * 0.25);
                        float _3079 = 1.0 - _862;
                        float _3086 = sqrt(1.0 - ((1.0 - (_3079 * _3079)) * (1.0 - (_3078 * _3078))));
                        float _3087 = _3086 * _3086;
                        float _3088 = _3087 * _3087;
                        float _3089 = _3068 + _3033;
                        float _3090 = _3069 + _3034;
                        float _3091 = _3070 + _3035;
                        float _3095 = inversesqrt(dot(vec3(_3089, _3090, _3091), vec3(_3089, _3090, _3091)));
                        float _3099 = dot(vec3(_787, _790, _793), vec3(_3068, _3069, _3070));
                        float _4423 = isnan(0.0) ? _3099 : (isnan(_3099) ? 0.0 : max(_3099, 0.0));
                        float _3102 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
                        float _3103 = dot(vec3(_787, _790, _793), vec3(_3095 * _3089, _3095 * _3090, _3095 * _3091));
                        float _4434 = isnan(0.0) ? _3103 : (isnan(_3103) ? 0.0 : max(_3103, 0.0));
                        float _3106 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
                        float _3110 = ((_3106 * _3106) * (_3088 + (-1.0))) + 1.0;
                        float _3111 = _3046 * _3087;
                        float _3112 = _3111 * _3111;
                        float _3115 = ((1.0 - _3112) * _3036) + _3112;
                        float _4445 = isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : max(_3115, 0.0));
                        float _3116 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
                        float _3117 = 1.0 - _3087;
                        float _3127 = (0.5 / (((_3116 * ((_3102 * _3117) + _3087)) + 9.9999999392252902907785028219223e-09) + (((_3116 * _3117) + _3087) * _3102))) * _3116;
                        float _4456 = isnan(0.0) ? _3127 : (isnan(_3127) ? 0.0 : max(_3127, 0.0));
                        float _3138 = (((_3088 * 3.1415927410125732421875) * (isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0)))) / ((_3110 * _3110) * ((_3053 * 2.1991131305694580078125) + 3.141590118408203125))) * _3042;
                        _2895 = (_3057 * _3005.x) + _2963;
                        _2896 = (_3057 * _3005.y) + _2964;
                        _2897 = (_3057 * _3005.z) + _2965;
                        _2892 = (_3138 * _3022.x) + _2960;
                        _2893 = (_3138 * _3022.y) + _2961;
                        _2894 = (_3138 * _3022.z) + _2962;
                        if (_2967 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2960 = _2892;
                            _2961 = _2893;
                            _2962 = _2894;
                            _2963 = _2895;
                            _2964 = _2896;
                            _2965 = _2897;
                            _2966 = _2967;
                        }
                    }
                    frontier_phi_61_pred = _2892;
                    frontier_phi_61_pred_1 = _2897;
                    frontier_phi_61_pred_2 = _2896;
                    frontier_phi_61_pred_3 = _2895;
                    frontier_phi_61_pred_4 = _2894;
                    frontier_phi_61_pred_5 = _2893;
                }
                _2692 = frontier_phi_61_pred;
                _2702 = frontier_phi_61_pred_1;
                _2700 = frontier_phi_61_pred_2;
                _2698 = frontier_phi_61_pred_3;
                _2696 = frontier_phi_61_pred_4;
                _2694 = frontier_phi_61_pred_5;
                uint _2843 = _2842 + 1u;
                if (_2843 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2836 = _2692;
                    _2837 = _2694;
                    _2838 = _2696;
                    _2839 = _2698;
                    _2840 = _2700;
                    _2841 = _2702;
                    _2842 = _2843;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2691 = _2692;
            _2693 = _2694;
            _2695 = _2696;
            _2697 = _2698;
            _2699 = _2700;
            _2701 = _2702;
        }
        uvec4 _2705 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2706 = _2705.z;
        uint _2708 = (_2706 >> 8u) & 15u;
        float _2804;
        float _2806;
        float _2808;
        float _2810;
        float _2812;
        float _2814;
        if (((4294967295u << _2708) & _2590) == 0u)
        {
            _2804 = _2691;
            _2806 = _2693;
            _2808 = _2695;
            _2810 = _2697;
            _2812 = _2699;
            _2814 = _2701;
        }
        else
        {
            float _2829 = inversesqrt(dot(vec3(_2544, _2545, _2546), vec3(_2544, _2545, _2546)));
            float _2830 = _2829 * _2544;
            float _2831 = _2829 * _2545;
            float _2832 = _2829 * _2546;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2708 < ((_2706 >> 12u) & 15u))
            {
                float _2805;
                float _2807;
                float _2809;
                float _2811;
                float _2813;
                float _2815;
                float _2943 = _2691;
                float _2944 = _2693;
                float _2945 = _2695;
                float _2946 = _2697;
                float _2947 = _2699;
                float _2948 = _2701;
                uint _2949 = _2708;
                uint _2958;
                bool _2959;
                for (;;)
                {
                    _2958 = texelFetch(g_lightClassification, int((((_2584 << 5u) + (_2570 << 9u)) + (_2949 << 2u)) >> 2u)).x;
                    _2959 = _2958 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2959)
                    {
                        frontier_phi_67_pred = _2946;
                        frontier_phi_67_pred_1 = _2947;
                        frontier_phi_67_pred_2 = _2948;
                        frontier_phi_67_pred_3 = _2945;
                        frontier_phi_67_pred_4 = _2944;
                        frontier_phi_67_pred_5 = _2943;
                    }
                    else
                    {
                        float _3143;
                        float _3144;
                        float _3145;
                        float _3146;
                        float _3147;
                        float _3148;
                        float _3436;
                        float _3437;
                        float _3438;
                        float _3439;
                        float _3440;
                        float _3441;
                        float _3156 = _2943;
                        float _3157 = _2944;
                        float _3158 = _2945;
                        float _3159 = _2946;
                        float _3160 = _2947;
                        float _3161 = _2948;
                        uint _3162 = _2958;
                        uint _3163;
                        vec4 _3188;
                        float _3189;
                        vec4 _3204;
                        vec3 _3216;
                        vec4 _3231;
                        vec4 _3246;
                        float _3292;
                        bool _3293;
                        for (;;)
                        {
                            uint _3173 = ((_2949 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3162));
                            _3163 = (_3162 + 4294967295u) & _3162;
                            uint _3175 = _3173 * 40u;
                            _3188 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3175)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3175 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3175 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3175 + 3u)).x));
                            _3189 = _3188.w;
                            uint _3191 = (_3173 * 40u) + 4u;
                            _3204 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3191)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3191 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3191 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3191 + 3u)).x));
                            uint _3206 = (_3173 * 40u) + 8u;
                            _3216 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3206)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 2u)).x));
                            uint _3218 = (_3173 * 40u) + 16u;
                            _3231 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3218)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3218 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3218 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3218 + 3u)).x));
                            uint _3233 = (_3173 * 40u) + 20u;
                            _3246 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3233)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 3u)).x));
                            uint _3248 = (_3173 * 40u) + 24u;
                            vec4 _3261 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3248)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 3u)).x));
                            uint _3267 = (_3173 * 40u) + 28u;
                            vec4 _3280 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3267)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3267 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3267 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3267 + 3u)).x));
                            _3292 = fma(_2546, _3280.z, fma(_2545, _3280.y, _3280.x * _2544)) + _3280.w;
                            _3293 = !((fma(_2546, _3261.z, fma(_2545, _3261.y, _3261.x * _2544)) + _3261.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3293)
                            {
                                float _3320 = _3188.x - _2544;
                                float _3321 = _3188.y - _2545;
                                float _3322 = _3188.z - _2546;
                                float _3323 = dot(vec3(_3320, _3321, _3322), vec3(_3320, _3321, _3322));
                                float _3326 = inversesqrt(_3323);
                                float _3327 = _3326 * _3320;
                                float _3328 = _3326 * _3321;
                                float _3329 = _3326 * _3322;
                                float _3333 = 1.0 - (_3323 / (_3189 * _3189));
                                float _4467 = isnan(0.0) ? _3333 : (isnan(_3333) ? 0.0 : max(_3333, 0.0));
                                float _3334 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
                                float _3338 = sqrt(_3323) * _3204.w;
                                float _3340 = 1.39999997615814208984375 / (_3338 + 1.39999997615814208984375);
                                float _3341 = _3340 * _3340;
                                float _3344 = ((1.0 - _3341) * dot(vec3(_3327, _3328, _3329), vec3(_787, _790, _793))) + _3341;
                                float _3347 = _3338 * _3338;
                                float _3351 = (fma(_2546, _3231.z, fma(_2545, _3231.y, _3231.x * _2544)) + _3231.w) / _3292;
                                float _3352 = (fma(_2546, _3246.z, fma(_2545, _3246.y, _3246.x * _2544)) + _3246.w) / _3292;
                                float _3356 = 1.0 - dot(vec2(_3351, _3352), vec2(_3351, _3352));
                                float _4483 = isnan(0.0) ? _3356 : (isnan(_3356) ? 0.0 : max(_3356, 0.0));
                                float _3357 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
                                float _3358 = _3357 * (((isnan(0.0) ? _3344 : (isnan(_3344) ? 0.0 : max(_3344, 0.0))) * _3334) / ((_3347 * 0.699999988079071044921875) + 1.0));
                                float _3370 = exp2(log2(1.0 / ((_3347 * 3.5) + 5.0)) * 0.25);
                                float _3371 = 1.0 - _862;
                                float _3378 = sqrt(1.0 - ((1.0 - (_3371 * _3371)) * (1.0 - (_3370 * _3370))));
                                float _3379 = _3378 * _3378;
                                float _3380 = _3379 * _3379;
                                float _3381 = _3327 - _2830;
                                float _3382 = _3328 - _2831;
                                float _3383 = _3329 - _2832;
                                float _3387 = inversesqrt(dot(vec3(_3381, _3382, _3383), vec3(_3381, _3382, _3383)));
                                float _3391 = dot(vec3(_787, _790, _793), vec3((-0.0) - _2830, (-0.0) - _2831, (-0.0) - _2832));
                                float _4494 = isnan(0.0) ? _3391 : (isnan(_3391) ? 0.0 : max(_3391, 0.0));
                                float _3394 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
                                float _3395 = dot(vec3(_787, _790, _793), vec3(_3387 * _3381, _3387 * _3382, _3387 * _3383));
                                float _4505 = isnan(0.0) ? _3395 : (isnan(_3395) ? 0.0 : max(_3395, 0.0));
                                float _3398 = isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0));
                                float _3402 = ((_3398 * _3398) * (_3380 + (-1.0))) + 1.0;
                                float _3403 = _3340 * _3379;
                                float _3404 = _3403 * _3403;
                                float _3410 = ((1.0 - _3404) * dot(vec3(_787, _790, _793), vec3(_3327, _3328, _3329))) + _3404;
                                float _4516 = isnan(0.0) ? _3410 : (isnan(_3410) ? 0.0 : max(_3410, 0.0));
                                float _3411 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
                                float _3412 = 1.0 - _3379;
                                float _3422 = (0.5 / (((_3411 * ((_3394 * _3412) + _3379)) + 9.9999999392252902907785028219223e-09) + (((_3411 * _3412) + _3379) * _3394))) * _3411;
                                float _4527 = isnan(0.0) ? _3422 : (isnan(_3422) ? 0.0 : max(_3422, 0.0));
                                float _3432 = (_3357 * _3334) * (((_3380 * 3.1415927410125732421875) * (isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0)))) / ((_3402 * _3402) * ((_3347 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3432 * _3216.x;
                                frontier_phi_73_pred_1 = _3432 * _3216.y;
                                frontier_phi_73_pred_2 = _3358 * _3204.z;
                                frontier_phi_73_pred_3 = _3358 * _3204.y;
                                frontier_phi_73_pred_4 = _3358 * _3204.x;
                                frontier_phi_73_pred_5 = _3432 * _3216.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3436 = frontier_phi_73_pred;
                            _3437 = frontier_phi_73_pred_1;
                            _3441 = frontier_phi_73_pred_2;
                            _3440 = frontier_phi_73_pred_3;
                            _3439 = frontier_phi_73_pred_4;
                            _3438 = frontier_phi_73_pred_5;
                            _3146 = _3439 + _3159;
                            _3147 = _3440 + _3160;
                            _3148 = _3441 + _3161;
                            _3143 = _3436 + _3156;
                            _3144 = _3437 + _3157;
                            _3145 = _3438 + _3158;
                            if (_3163 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3156 = _3143;
                                _3157 = _3144;
                                _3158 = _3145;
                                _3159 = _3146;
                                _3160 = _3147;
                                _3161 = _3148;
                                _3162 = _3163;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3146;
                        frontier_phi_67_pred_1 = _3147;
                        frontier_phi_67_pred_2 = _3148;
                        frontier_phi_67_pred_3 = _3145;
                        frontier_phi_67_pred_4 = _3144;
                        frontier_phi_67_pred_5 = _3143;
                    }
                    _2811 = frontier_phi_67_pred;
                    _2813 = frontier_phi_67_pred_1;
                    _2815 = frontier_phi_67_pred_2;
                    _2809 = frontier_phi_67_pred_3;
                    _2807 = frontier_phi_67_pred_4;
                    _2805 = frontier_phi_67_pred_5;
                    uint _2950 = _2949 + 1u;
                    if (_2950 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2943 = _2805;
                        _2944 = _2807;
                        _2945 = _2809;
                        _2946 = _2811;
                        _2947 = _2813;
                        _2948 = _2815;
                        _2949 = _2950;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2813;
                frontier_phi_55_56_ladder_1 = _2815;
                frontier_phi_55_56_ladder_2 = _2811;
                frontier_phi_55_56_ladder_3 = _2809;
                frontier_phi_55_56_ladder_4 = _2807;
                frontier_phi_55_56_ladder_5 = _2805;
            }
            else
            {
                frontier_phi_55_56_ladder = _2699;
                frontier_phi_55_56_ladder_1 = _2701;
                frontier_phi_55_56_ladder_2 = _2697;
                frontier_phi_55_56_ladder_3 = _2695;
                frontier_phi_55_56_ladder_4 = _2693;
                frontier_phi_55_56_ladder_5 = _2691;
            }
            _2804 = frontier_phi_55_56_ladder_5;
            _2806 = frontier_phi_55_56_ladder_4;
            _2808 = frontier_phi_55_56_ladder_3;
            _2810 = frontier_phi_55_56_ladder_2;
            _2812 = frontier_phi_55_56_ladder;
            _2814 = frontier_phi_55_56_ladder_1;
        }
        float _2819 = isnan(1.0) ? _846 : (isnan(_846) ? 1.0 : min(_846, 1.0));
        _2603 = (_2819 * _2810) + _2036;
        _2605 = (_2819 * _2812) + _2038;
        _2607 = (_2819 * _2814) + _2040;
        _2609 = ((_2804 * _830) * _2819) + _2384;
        _2611 = ((_2806 * _832) * _2819) + _2386;
        _2613 = ((_2808 * _833) * _2819) + _2388;
    }
    else
    {
        _2603 = _2036;
        _2605 = _2038;
        _2607 = _2040;
        _2609 = _2384;
        _2611 = _2386;
        _2613 = _2388;
    }
    float _4543 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
    float _4554 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
    float _4565 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
    uint _2633 = _269 + 6u;
    float _2641 = _765 / cbSceneParam._m0[86u].x;
    float _2642 = _766 / cbSceneParam._m0[86u].y;
    vec4 _2656 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2641, _2642, (log2((isnan(cbSceneParam._m0[77u].w) ? _700 : (isnan(_700) ? cbSceneParam._m0[77u].w : min(_700, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2658 = _2656.x;
    float _2659 = _2656.y;
    float _2660 = _2656.z;
    float _2661 = _2656.w;
    float _2754;
    float _2756;
    float _2758;
    float _2760;
    if (_700 > cbSceneParam._m0[78u].w)
    {
        float _2716 = isnan(_700) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _700 : min(cbSceneParam._m0[80u].w, _700));
        float _2717 = _2716 / _700;
        float _2728 = _2717 * _750;
        float _2729 = _751 * _2717;
        float _2730 = (-0.0) - _2729;
        float _2732 = _2717 * _752;
        float _2734 = (cbSceneParam._m0[77u].w * _2730) / _2716;
        float _2735 = _2734 + cbSceneParam._m0[79u].w;
        float _2736 = cbSceneParam._m0[79u].w - _2729;
        float _2742 = sqrt(((_2728 * _2728) + (_2729 * _2729)) + (_2732 * _2732));
        float _2745 = (1.0 - (cbSceneParam._m0[77u].w / _2716)) * _2742;
        float _2750 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2752 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2905;
        if (abs((_2730 - _2734) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2905 = ((((_2735 > 0.0) ? exp2(_2750 * _2735) : (2.0 - exp2(_2752 * _2735))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2745;
        }
        else
        {
            float _2865 = 1.0 / cbSceneParam._m0[80u].x;
            float _2866 = isnan(_2736) ? _2735 : (isnan(_2735) ? _2736 : max(_2735, _2736));
            float _2867 = isnan(_2736) ? _2735 : (isnan(_2735) ? _2736 : min(_2735, _2736));
            float _2876 = isnan(0.0) ? _2866 : (isnan(_2866) ? 0.0 : min(_2866, 0.0));
            float _2877 = isnan(0.0) ? _2867 : (isnan(_2867) ? 0.0 : min(_2867, 0.0));
            _2905 = ((abs(_2742 / _2730) * cbSceneParam._m0[80u].y) * ((((_2876 - _2877) * 2.0) - ((exp2(_2750 * (isnan(0.0) ? _2866 : (isnan(_2866) ? 0.0 : max(_2866, 0.0)))) - exp2(_2750 * (isnan(0.0) ? _2867 : (isnan(_2867) ? 0.0 : max(_2867, 0.0))))) * _2865)) - ((exp2(_2752 * _2876) - exp2(_2752 * _2877)) * _2865))) + (_2745 * cbSceneParam._m0[80u].z);
        }
        vec4 _2907 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2641, _2642, 1.0), 0.0);
        float _2916 = exp2((_2905 * (-1.44269502162933349609375)) * (1.0 - _2907.w));
        float _2917 = log2(_2916);
        float _2933 = log2(_2661);
        _2754 = (exp2(_2933 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2917 * cbSceneParam._m0[78u].x)) * _2907.x) / cbSceneParam._m0[78u].x)) + _2658;
        _2756 = (exp2(_2933 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2917 * cbSceneParam._m0[78u].y)) * _2907.y) / cbSceneParam._m0[78u].y)) + _2659;
        _2758 = (exp2(_2933 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2917 * cbSceneParam._m0[78u].z)) * _2907.z) / cbSceneParam._m0[78u].z)) + _2660;
        _2760 = _2916 * _2661;
    }
    else
    {
        _2754 = _2658;
        _2756 = _2659;
        _2758 = _2660;
        _2760 = _2661;
    }
    float _2772 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2773 = _2772 == 3.0;
    float _2774 = log2(_2760);
    float _2781 = exp2(_2774 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0))) * (_2603 + ((isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0))) * _846))) + ((_2609 + ((isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0))) * _1654)) * cbPerFrame._m0[3u].x));
    float _2782 = exp2(_2774 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0))) * (_2605 + ((isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0))) * _846))) + ((_2611 + ((isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0))) * _1654)) * cbPerFrame._m0[3u].x));
    float _2783 = exp2(_2774 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0))) * (_2607 + ((isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0))) * _846))) + ((_2613 + ((isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0))) * _1654)) * cbPerFrame._m0[3u].x));
    float _2792 = (_2772 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2792 * (_2773 ? _2781 : (_2781 + (cbSceneParam._m0[72u].w * _2754)));
    SV_Target.y = _2792 * (_2773 ? _2782 : (_2782 + (cbSceneParam._m0[72u].w * _2756)));
    SV_Target.z = _2792 * (_2773 ? _2783 : (_2783 + (cbSceneParam._m0[72u].w * _2758)));
    SV_Target.w = cbInstanceData._m0[_2633].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2633].w;
}


