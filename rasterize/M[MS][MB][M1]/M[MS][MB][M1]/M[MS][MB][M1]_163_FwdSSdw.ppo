#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1403;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _231 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _232 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _233 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _239 = inversesqrt(dot(vec3(_231, _232, _233), vec3(_231, _232, _233)));
    float _240 = _239 * _231;
    float _241 = _239 * _232;
    float _242 = _239 * _233;
    float _246 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _247 = _246 * NORMAL.x;
    float _248 = _246 * NORMAL.y;
    float _249 = _246 * NORMAL.z;
    float _253 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _254 = _253 * TANGENT.x;
    float _255 = _253 * TANGENT.y;
    float _256 = _253 * TANGENT.z;
    uint _259 = uint(roundEven(NORMAL.w)) * 13u;
    uint _264 = _259 + 1u;
    uint _268 = _259 + 2u;
    float _277 = sqrt(((cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x) + (cbInstanceData._m0[_259].x * cbInstanceData._m0[_259].x)) + (cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x));
    float _278 = _277 * TEXCOORD.z;
    float _279 = _277 * TEXCOORD.w;
    vec4 _299 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _305 = _299.x * cbMtdParam._m0[11u].x;
    float _306 = _299.y * cbMtdParam._m0[11u].y;
    float _307 = _299.z * cbMtdParam._m0[11u].z;
    vec4 _326 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _278) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _279) + cbTextureTilingScale._m0[5u].w));
    vec4 _364 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _366 = _364.x;
    float _378 = dot(vec4(_366, _364.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _395 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_366 - _378) * cbMtdParam._m0[24u].y) + _378) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3751 = isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0));
    float _396 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
    float _403 = (_396 * ((_326.x * cbMtdParam._m0[12u].x) - _305)) + _305;
    float _404 = (_396 * ((_326.y * cbMtdParam._m0[12u].y) - _306)) + _306;
    float _405 = (_396 * ((_326.z * cbMtdParam._m0[12u].z) - _307)) + _307;
    vec4 _424 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _278) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _279) + cbTextureTilingScale._m0[14u].w));
    vec4 _444 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _278) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _279) + cbTextureTilingScale._m0[20u].w));
    vec4 _471 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _278) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _279) + cbTextureTilingScale._m0[4u].w));
    vec4 _488 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _490 = _488.x;
    float _491 = _488.y;
    float _492 = _488.z;
    float _501 = ((_471.z - _492) * _396) + _492;
    float _504 = ((((_471.x - _490) * _396) + _490) * 2.0) + (-1.0);
    float _505 = ((((_471.y - _491) * _396) + _491) * 2.0) + (-1.0);
    float _506 = dot(vec2(_504, _505), vec2(_504, _505));
    float _3762 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _511 = sqrt(1.0 - (isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0))));
    vec4 _531 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _543 = (_504 + ((((_444.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_531.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _544 = (_505 + ((((_444.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_531.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _547 = fma(_511, _247, fma(_544, _254, _543 * _240));
    float _550 = fma(_511, _248, fma(_544, _255, _543 * _241));
    float _553 = fma(_511, _249, fma(_544, _256, _543 * _242));
    float _557 = inversesqrt(dot(vec3(_547, _550, _553), vec3(_547, _550, _553)));
    vec4 _584 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _278) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _279) + cbTextureTilingScale._m0[11u].w));
    float _586 = _584.x;
    float _587 = 1.0 - _586;
    float _591 = ((_586 - _587) * cbMtdParam._m0[24u].z) + _587;
    float _593 = (cbMtdParam._m0[19u].x + dot(vec4(_557 * _547, _557 * _550, _557 * _553, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_591 * cbMtdParam._m0[21u].z);
    float _3773 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
    float _594 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
    float _596 = (-0.0) - cbMtdParam._m0[24u].x;
    float _598 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _599 = isnan(1.0) ? _598 : (isnan(_598) ? 1.0 : min(_598, 1.0));
    float _606 = _594 - ((_594 * TEXCOORD_8.x) * _599);
    float _607 = _594 - ((_594 * TEXCOORD_8.y) * _599);
    float _608 = _594 - ((_594 * TEXCOORD_8.z) * _599);
    float _615 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _619 = ((isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : min(_615, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _627 = (_619 - (((_591 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _619))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3804 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _628 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
    float _632 = ((_606 * ((_424.x * cbMtdParam._m0[18u].x) - _403)) * _628) + _403;
    float _633 = ((_607 * ((_424.y * cbMtdParam._m0[18u].y) - _404)) * _628) + _404;
    float _634 = ((_608 * ((_424.z * cbMtdParam._m0[18u].z) - _405)) * _628) + _405;
    vec4 _646 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _278) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _279) + cbTextureTilingScale._m0[19u].w));
    float _648 = _646.x;
    float _649 = 1.0 - _648;
    float _676 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_648 - _649) * cbMtdParam._m0[24u].w) + _649) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3815 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
    float _677 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
    float _685 = ((((cbMtdParam._m0[10u].x - _632) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _677) + _632;
    float _686 = ((((cbMtdParam._m0[10u].y - _633) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _677) + _633;
    float _687 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _634)) * _677) + _634;
    vec4 _713 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _715 = _713.x;
    float _733 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _278) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _279) + cbTextureTilingScale._m0[9u].w)).x - _715) * _396) + _715;
    float _737 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _733) * cbMtdParam._m0[19u].z) + _733;
    float _740 = _737 - ((_628 * _606) * _737);
    float _742 = _740 - (_740 * _677);
    float _747 = (((_444.z - _501) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _501;
    float _751 = ((_531.z - _747) * cbMtdParam._m0[19u].w) + _747;
    vec4 _765 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _278) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _279) + cbTextureTilingScale._m0[15u].w));
    float _772 = (_765.x * 2.0) + (-1.0);
    float _773 = (_765.y * 2.0) + (-1.0);
    float _774 = dot(vec2(_772, _773), vec2(_772, _773));
    float _3826 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
    float _783 = (((_765.z - _751) * _606) * _628) + _751;
    float _786 = ((cbMtdParam._m0[23u].y - _783) * _677) + _783;
    vec4 _805 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _278) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _279) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _811 = (_805.x * 2.0) + (-1.0);
    float _812 = (_805.y * 2.0) + (-1.0);
    float _813 = dot(vec2(_811, _812), vec2(_811, _812));
    float _3837 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
    float _833 = (((cbMtdParam._m0[21u].x * _543) + ((_772 - _543) * _606)) * _628) + _543;
    float _834 = (((cbMtdParam._m0[21u].x * _544) + ((_773 - _544) * _607)) * _628) + _544;
    float _835 = (((sqrt(1.0 - (isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0)))) - _511) * _608) * _628) + _511;
    float _846 = (((_811 - _833) + (_833 * cbMtdParam._m0[22u].z)) * _677) + _833;
    float _847 = (((_812 - _834) + (_834 * cbMtdParam._m0[22u].z)) * _677) + _834;
    float _848 = ((sqrt(1.0 - (isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0)))) - _835) * _677) + _835;
    float _850 = cbMtdParam._m0[22u].x + _531.w;
    float _853 = fma(_848, _247, fma(_847, _254, _846 * _240));
    float _856 = fma(_848, _248, fma(_847, _255, _846 * _241));
    float _859 = fma(_848, _249, fma(_847, _256, _846 * _242));
    float _863 = inversesqrt(dot(vec3(_853, _856, _859), vec3(_853, _856, _859)));
    float _864 = _863 * _853;
    float _865 = _863 * _856;
    float _866 = _863 * _859;
    float _3848 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _867 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
    float _3859 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
    float _3870 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    float _3881 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
    float _3892 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
    float _3903 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _872 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
    float _886 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _926 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _936 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _926);
    float _937 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _926);
    float _938 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _926);
    float _942 = inversesqrt(dot(vec3(_936, _937, _938), vec3(_936, _937, _938)));
    float _943 = _936 * _942;
    float _944 = _937 * _942;
    float _945 = _938 * _942;
    float _951 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _952 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _970 = fma(_866, cbSceneParam._m0[5u].z, fma(_865, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _864));
    float _973 = fma(_866, cbSceneParam._m0[6u].z, fma(_865, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _864));
    float _976 = fma(_866, cbSceneParam._m0[7u].z, fma(_865, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _864));
    uint _990 = (_259 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _996 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0)))) * cbInstanceData._m0[_990].x;
    float _997 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0)))) * cbInstanceData._m0[_990].y;
    float _998 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0)))) * cbInstanceData._m0[_990].z;
    float _3914 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
    float _999 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
    float _3925 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
    float _1000 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
    float _3936 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
    float _1001 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
    float _1002 = 1.0 - _872;
    float _1003 = _999 * _1002;
    float _1004 = _1000 * _1002;
    float _1005 = _1001 * _1002;
    float _1010 = (_999 + (-0.039999999105930328369140625)) * _872;
    float _1011 = (_1000 + (-0.039999999105930328369140625)) * _872;
    float _1012 = (_1001 + (-0.039999999105930328369140625)) * _872;
    float _1013 = _1010 + 0.039999999105930328369140625;
    float _1015 = _1011 + 0.039999999105930328369140625;
    float _1016 = _1012 + 0.039999999105930328369140625;
    vec4 _1025 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _951, cbSceneParam._m0[86u].y * _952));
    float _1029 = ((isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0))) * TEXCOORD_5.w) * _1025.x;
    float _1030 = dot(vec3(_864, _865, _866), vec3(_943, _944, _945));
    float _1033 = _1030 * 2.0;
    float _1037 = (_1033 * _864) - _943;
    float _1038 = (_1033 * _865) - _944;
    float _1039 = (_1033 * _866) - _945;
    float _1043 = abs(dot(vec3(_943, _944, _945), vec3(_864, _865, _866)));
    float _3947 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
    float _1045 = sqrt(_867);
    float _1058 = exp2((_1045 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1045 * 3.0));
    float _1064 = (1.0 - _1058) * ((_1045 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1065 = _1058 * _1045;
    float _1093 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1097 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1101 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1402;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1127 = fma(_1101, cbModelParam._m0[26u].z, fma(_1097, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1093));
        float _1131 = fma(_1101, cbModelParam._m0[27u].z, fma(_1097, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1093));
        float _1135 = fma(_1101, cbModelParam._m0[28u].z, fma(_1097, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1093));
        float _1160 = _1093 + _864;
        float _1161 = _1097 + _865;
        float _1162 = _1101 + _866;
        float _1172 = fma(_1162, cbModelParam._m0[26u].z, fma(_1161, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1160)) - _1127;
        float _1173 = fma(_1162, cbModelParam._m0[27u].z, fma(_1161, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1160)) - _1131;
        float _1174 = fma(_1162, cbModelParam._m0[28u].z, fma(_1161, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1160)) - _1135;
        float _1178 = inversesqrt(dot(vec3(_1172, _1173, _1174), vec3(_1172, _1173, _1174)));
        float _1191 = ((_1178 * _1172) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1127 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1192 = ((_1178 * _1173) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1131 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1193 = ((_1178 * _1174) / cbModelParam._m0[34u].z) + ((((((_1135 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1196 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1191, _1192, _1193), 0.0);
        vec4 _1203 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1191, _1192, _1193), 0.0);
        vec4 _1210 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1191, _1192, _1193), 0.0);
        vec4 _1217 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1191, _1192, _1193), 0.0);
        float _1230 = exp2((_1196.w + (-0.5)) * 20.0) * 2.0;
        float _1231 = _1230 * (_1196.x + (-0.5));
        float _1232 = _1230 * (_1196.y + (-0.5));
        float _1233 = _1230 * (_1196.z + (-0.5));
        float _1240 = exp2((_1203.w + (-0.5)) * 20.0) * 2.0;
        float _1241 = _1240 * (_1203.x + (-0.5));
        float _1242 = _1240 * (_1203.y + (-0.5));
        float _1243 = _1240 * (_1203.z + (-0.5));
        float _1250 = exp2((_1210.w + (-0.5)) * 20.0) * 2.0;
        float _1251 = _1250 * (_1210.x + (-0.5));
        float _1252 = _1250 * (_1210.y + (-0.5));
        float _1253 = _1250 * (_1210.z + (-0.5));
        float _1260 = exp2((_1217.w + (-0.5)) * 20.0) * 2.0;
        float _1261 = _1260 * (_1217.x + (-0.5));
        float _1262 = _1260 * (_1217.y + (-0.5));
        float _1263 = _1260 * (_1217.z + (-0.5));
        float _1264 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1265 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1266 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1267 = _1231 * 0.5;
        float _1268 = _1241 * 0.5;
        float _1269 = _1251 * 0.5;
        float _1270 = dot(vec3(_1267, _1268, _1269), vec3(_1267, _1268, _1269));
        float _1275 = (_1270 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1270);
        float _1284 = (dot(vec3(_864, _865, _866), vec3(_1275 * _1267, _1275 * _1268, _1275 * _1269)) + 1.0) * 0.5;
        float _3973 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1294 = sqrt(((_1268 * _1268) + (_1267 * _1267)) + (_1269 * _1269)) / (_1264 + 9.9999997473787516355514526367188e-06);
        float _3984 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1295 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
        float _1296 = _1295 * 2.0;
        float _1300 = (1.0 - _1295) / (_1295 + 1.0);
        float _3995 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1301 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
        float _1310 = ((((1.0 - _1301) * (_1296 + 2.0)) * exp2(log2(isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0))) * (_1296 + 1.0))) + _1301) * _1264;
        float _1311 = _1232 * 0.5;
        float _1312 = _1242 * 0.5;
        float _1313 = _1252 * 0.5;
        float _1314 = dot(vec3(_1311, _1312, _1313), vec3(_1311, _1312, _1313));
        float _1319 = (_1314 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1314);
        float _1327 = (dot(vec3(_864, _865, _866), vec3(_1319 * _1311, _1319 * _1312, _1319 * _1313)) + 1.0) * 0.5;
        float _4006 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1336 = sqrt(((_1312 * _1312) + (_1311 * _1311)) + (_1313 * _1313)) / (_1265 + 9.9999997473787516355514526367188e-06);
        float _4017 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1337 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
        float _1338 = _1337 * 2.0;
        float _1342 = (1.0 - _1337) / (_1337 + 1.0);
        float _4028 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1343 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
        float _1352 = ((((1.0 - _1343) * (_1338 + 2.0)) * exp2(log2(isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0))) * (_1338 + 1.0))) + _1343) * _1265;
        float _1353 = _1233 * 0.5;
        float _1354 = _1243 * 0.5;
        float _1355 = _1253 * 0.5;
        float _1356 = dot(vec3(_1353, _1354, _1355), vec3(_1353, _1354, _1355));
        float _1361 = (_1356 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1356);
        float _1369 = (dot(vec3(_864, _865, _866), vec3(_1361 * _1353, _1361 * _1354, _1361 * _1355)) + 1.0) * 0.5;
        float _4039 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1378 = sqrt(((_1354 * _1354) + (_1353 * _1353)) + (_1355 * _1355)) / (_1266 + 9.9999997473787516355514526367188e-06);
        float _4050 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1379 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
        float _1380 = _1379 * 2.0;
        float _1384 = (1.0 - _1379) / (_1379 + 1.0);
        float _4061 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1385 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
        float _1394 = ((((1.0 - _1385) * (_1380 + 2.0)) * exp2(log2(isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0))) * (_1380 + 1.0))) + _1385) * _1266;
        _1402 = _1233;
        _1404 = _1232;
        _1405 = _1231;
        _1406 = _1243;
        _1407 = _1242;
        _1408 = _1241;
        _1409 = _1253;
        _1410 = _1252;
        _1411 = _1251;
        _1412 = _1266;
        _1413 = _1265;
        _1414 = _1264;
        _1415 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0)));
        _1416 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0)));
        _1417 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0)));
    }
    else
    {
        _1402 = _1403;
        _1404 = _1403;
        _1405 = _1403;
        _1406 = _1403;
        _1407 = _1403;
        _1408 = _1403;
        _1409 = _1403;
        _1410 = _1403;
        _1411 = _1403;
        _1412 = _1403;
        _1413 = _1403;
        _1414 = _1403;
        _1415 = 0.0;
        _1416 = 0.0;
        _1417 = 0.0;
    }
    float _1711;
    float _1712;
    float _1713;
    float _1714;
    float _1715;
    float _1716;
    float _1717;
    float _1718;
    float _1719;
    float _1720;
    float _1721;
    float _1722;
    float _1723;
    float _1724;
    float _1725;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1442 = fma(_1101, cbModelParam._m0[30u].z, fma(_1097, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1093));
        float _1446 = fma(_1101, cbModelParam._m0[31u].z, fma(_1097, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1093));
        float _1450 = fma(_1101, cbModelParam._m0[32u].z, fma(_1097, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1093));
        float _1473 = _1093 + _864;
        float _1474 = _1097 + _865;
        float _1475 = _1101 + _866;
        float _1485 = fma(_1475, cbModelParam._m0[30u].z, fma(_1474, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1473)) - _1442;
        float _1486 = fma(_1475, cbModelParam._m0[31u].z, fma(_1474, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1473)) - _1446;
        float _1487 = fma(_1475, cbModelParam._m0[32u].z, fma(_1474, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1473)) - _1450;
        float _1491 = inversesqrt(dot(vec3(_1485, _1486, _1487), vec3(_1485, _1486, _1487)));
        float _1504 = ((_1491 * _1485) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1442 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1505 = ((_1491 * _1486) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1446 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1506 = ((_1491 * _1487) / cbModelParam._m0[35u].z) + ((((((_1450 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1508 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1504, _1505, _1506), 0.0);
        vec4 _1515 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1504, _1505, _1506), 0.0);
        vec4 _1522 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1504, _1505, _1506), 0.0);
        vec4 _1529 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1504, _1505, _1506), 0.0);
        float _1541 = exp2((_1508.w + (-0.5)) * 20.0) * 2.0;
        float _1542 = _1541 * (_1508.x + (-0.5));
        float _1543 = _1541 * (_1508.y + (-0.5));
        float _1544 = _1541 * (_1508.z + (-0.5));
        float _1551 = exp2((_1515.w + (-0.5)) * 20.0) * 2.0;
        float _1552 = _1551 * (_1515.x + (-0.5));
        float _1553 = _1551 * (_1515.y + (-0.5));
        float _1554 = _1551 * (_1515.z + (-0.5));
        float _1561 = exp2((_1522.w + (-0.5)) * 20.0) * 2.0;
        float _1562 = _1561 * (_1522.x + (-0.5));
        float _1563 = _1561 * (_1522.y + (-0.5));
        float _1564 = _1561 * (_1522.z + (-0.5));
        float _1571 = exp2((_1529.w + (-0.5)) * 20.0) * 2.0;
        float _1572 = _1571 * (_1529.x + (-0.5));
        float _1573 = _1571 * (_1529.y + (-0.5));
        float _1574 = _1571 * (_1529.z + (-0.5));
        float _1575 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0));
        float _1576 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1577 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
        float _1578 = _1542 * 0.5;
        float _1579 = _1552 * 0.5;
        float _1580 = _1562 * 0.5;
        float _1581 = dot(vec3(_1578, _1579, _1580), vec3(_1578, _1579, _1580));
        float _1586 = (_1581 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1581);
        float _1594 = (dot(vec3(_864, _865, _866), vec3(_1586 * _1578, _1586 * _1579, _1586 * _1580)) + 1.0) * 0.5;
        float _4102 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
        float _1603 = sqrt(((_1579 * _1579) + (_1578 * _1578)) + (_1580 * _1580)) / (_1575 + 9.9999997473787516355514526367188e-06);
        float _4113 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
        float _1604 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
        float _1605 = _1604 * 2.0;
        float _1609 = (1.0 - _1604) / (_1604 + 1.0);
        float _4124 = isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0));
        float _1610 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
        float _1619 = ((((1.0 - _1610) * (_1605 + 2.0)) * exp2(log2(isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0))) * (_1605 + 1.0))) + _1610) * _1575;
        float _1620 = _1543 * 0.5;
        float _1621 = _1553 * 0.5;
        float _1622 = _1563 * 0.5;
        float _1623 = dot(vec3(_1620, _1621, _1622), vec3(_1620, _1621, _1622));
        float _1628 = (_1623 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1623);
        float _1636 = (dot(vec3(_864, _865, _866), vec3(_1628 * _1620, _1628 * _1621, _1628 * _1622)) + 1.0) * 0.5;
        float _4135 = isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0));
        float _1645 = sqrt(((_1621 * _1621) + (_1620 * _1620)) + (_1622 * _1622)) / (_1576 + 9.9999997473787516355514526367188e-06);
        float _4146 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
        float _1646 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
        float _1647 = _1646 * 2.0;
        float _1651 = (1.0 - _1646) / (_1646 + 1.0);
        float _4157 = isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0));
        float _1652 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
        float _1661 = ((((1.0 - _1652) * (_1647 + 2.0)) * exp2(log2(isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0))) * (_1647 + 1.0))) + _1652) * _1576;
        float _1662 = _1544 * 0.5;
        float _1663 = _1554 * 0.5;
        float _1664 = _1564 * 0.5;
        float _1665 = dot(vec3(_1662, _1663, _1664), vec3(_1662, _1663, _1664));
        float _1670 = (_1665 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1665);
        float _1678 = (dot(vec3(_864, _865, _866), vec3(_1670 * _1662, _1670 * _1663, _1670 * _1664)) + 1.0) * 0.5;
        float _4168 = isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0));
        float _1687 = sqrt(((_1663 * _1663) + (_1662 * _1662)) + (_1664 * _1664)) / (_1577 + 9.9999997473787516355514526367188e-06);
        float _4179 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
        float _1688 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
        float _1689 = _1688 * 2.0;
        float _1693 = (1.0 - _1688) / (_1688 + 1.0);
        float _4190 = isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0));
        float _1694 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
        float _1703 = ((((1.0 - _1694) * (_1689 + 2.0)) * exp2(log2(isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0))) * (_1689 + 1.0))) + _1694) * _1577;
        _1711 = _1544;
        _1712 = _1543;
        _1713 = _1542;
        _1714 = _1554;
        _1715 = _1553;
        _1716 = _1552;
        _1717 = _1564;
        _1718 = _1563;
        _1719 = _1562;
        _1720 = _1577;
        _1721 = _1576;
        _1722 = _1575;
        _1723 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0)));
        _1724 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0)));
        _1725 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0)));
    }
    else
    {
        _1711 = _1403;
        _1712 = _1403;
        _1713 = _1403;
        _1714 = _1403;
        _1715 = _1403;
        _1716 = _1403;
        _1717 = _1403;
        _1718 = _1403;
        _1719 = _1403;
        _1720 = _1403;
        _1721 = _1403;
        _1722 = _1403;
        _1723 = 0.0;
        _1724 = 0.0;
        _1725 = 0.0;
    }
    float _1735 = (cbModelParam._m0[1u].x * (_1723 - _1415)) + _1415;
    float _1736 = (cbModelParam._m0[1u].x * (_1724 - _1416)) + _1416;
    float _1737 = (cbModelParam._m0[1u].x * (_1725 - _1417)) + _1417;
    float _1758 = fma(_1737, cbSceneParam._m0[89u].z, fma(_1736, cbSceneParam._m0[89u].y, _1735 * cbSceneParam._m0[89u].x));
    float _1761 = fma(_1737, cbSceneParam._m0[90u].z, fma(_1736, cbSceneParam._m0[90u].y, _1735 * cbSceneParam._m0[90u].x));
    float _1764 = fma(_1737, cbSceneParam._m0[91u].z, fma(_1736, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1735));
    float _1779 = _1037 * 0.5;
    float _1780 = _1038 * 0.5;
    float _1781 = _1039 * 0.5;
    float _1782 = dot(vec4(_1779, _1780, _1781, 1.0), vec4(_1713, _1716, _1719, _1722));
    float _1785 = dot(vec4(_1779, _1780, _1781, 1.0), vec4(_1712, _1715, _1718, _1721));
    float _1788 = dot(vec4(_1779, _1780, _1781, 1.0), vec4(_1711, _1714, _1717, _1720));
    float _1822;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1795 = dot(vec4(_1779, _1780, _1781, 1.0), vec4(_1402, _1406, _1409, _1412));
        float _1799 = dot(vec4(_1779, _1780, _1781, 1.0), vec4(_1404, _1407, _1410, _1413));
        float _1803 = dot(vec4(_1779, _1780, _1781, 1.0), vec4(_1405, _1408, _1411, _1414));
        float _1810 = dot(vec4(cbModelParam._m0[39u]), vec4(_1779, _1780, _1781, 1.0));
        _1822 = dot(vec3(isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0)), isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0)), isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1810) ? 0.0 : (isnan(0.0) ? _1810 : max(0.0, _1810))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1822 = 1.0;
    }
    float _1833;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1824 = dot(vec4(cbModelParam._m0[40u]), vec4(_1779, _1780, _1781, 1.0));
        _1833 = dot(vec3(isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0)), isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0)), isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1824) ? 0.0 : (isnan(0.0) ? _1824 : max(0.0, _1824))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1833 = 1.0;
    }
    float _1837 = (_1833 * cbModelParam._m0[1u].x) + (_1822 * (1.0 - cbModelParam._m0[1u].x));
    float _1847 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _867);
    float _1848 = isnan(_1847) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1847 : min(cbModelParam._m0[25u].z, _1847));
    float _1928;
    float _1930;
    float _1932;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1895 = fma(_1101, cbModelParam._m0[13u].z, fma(_1097, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1093)) + cbModelParam._m0[13u].w;
        float _1899 = fma(_1101, cbModelParam._m0[14u].z, fma(_1097, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1093)) + cbModelParam._m0[14u].w;
        float _1903 = fma(_1101, cbModelParam._m0[15u].z, fma(_1097, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1093)) + cbModelParam._m0[15u].w;
        float _1906 = fma(_1039, cbModelParam._m0[13u].z, fma(_1038, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1037));
        float _1909 = fma(_1039, cbModelParam._m0[14u].z, fma(_1038, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1037));
        float _1912 = fma(_1039, cbModelParam._m0[15u].z, fma(_1038, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1037));
        float _1940;
        if (_1906 > 0.0)
        {
            _1940 = abs((1.0 - _1895) / _1906);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1906 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1895 + 1.0) / _1906);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1940 = frontier_phi_14_12_ladder;
        }
        float _2163;
        if (_1909 > 0.0)
        {
            _2163 = abs((1.0 - _1899) / _1909);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1909 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1899 + 1.0) / _1909);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2163 = frontier_phi_23_19_ladder;
        }
        float _2420;
        if (_1912 > 0.0)
        {
            _2420 = abs((1.0 - _1903) / _1912);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1912 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1903 + 1.0) / _1912);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2420 = frontier_phi_35_30_ladder;
        }
        float _2422 = isnan(_2163) ? _1940 : (isnan(_1940) ? _2163 : min(_1940, _2163));
        float _2423 = isnan(_2420) ? _2422 : (isnan(_2422) ? _2420 : min(_2422, _2420));
        float _2427 = (_2423 * _1906) + _1895;
        float _2428 = (_2423 * _1909) + _1899;
        float _2429 = (_2423 * _1912) + _1903;
        float _2430 = _2423 * 9.9999997473787516355514526367188e-05;
        float _2432 = (-1.0) - _2430;
        float _2434 = _2430 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2429 > _2434) || ((_2429 < _2432) || ((_2428 > _2434) || ((_2428 < _2432) || ((_2427 < _2432) || (_2427 > _2434))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2557 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2429, cbModelParam._m0[9u].z, fma(_2428, cbModelParam._m0[9u].y, _2427 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2429, cbModelParam._m0[10u].z, fma(_2428, cbModelParam._m0[10u].y, _2427 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2429, cbModelParam._m0[11u].z, fma(_2428, cbModelParam._m0[11u].y, _2427 * cbModelParam._m0[11u].x))), _1848);
            frontier_phi_13_35_ladder = _2557.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2557.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2557.x * cbModelParam._m0[1u].y;
        }
        _1928 = frontier_phi_13_35_ladder_2;
        _1930 = frontier_phi_13_35_ladder_1;
        _1932 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1916 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1037, _1038, _1039), _1848);
        _1928 = _1916.x * cbModelParam._m0[1u].y;
        _1930 = _1916.y * cbModelParam._m0[1u].y;
        _1932 = _1916.z * cbModelParam._m0[1u].y;
    }
    float _1936 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _867);
    float _1937 = isnan(_1936) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1936 : min(cbModelParam._m0[25u].w, _1936));
    float _2026;
    float _2028;
    float _2030;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1990 = fma(_1101, cbModelParam._m0[21u].z, fma(_1097, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1093)) + cbModelParam._m0[21u].w;
        float _1994 = fma(_1101, cbModelParam._m0[22u].z, fma(_1097, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1093)) + cbModelParam._m0[22u].w;
        float _1998 = fma(_1101, cbModelParam._m0[23u].z, fma(_1097, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1093)) + cbModelParam._m0[23u].w;
        float _2001 = fma(_1039, cbModelParam._m0[21u].z, fma(_1038, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1037));
        float _2004 = fma(_1039, cbModelParam._m0[22u].z, fma(_1038, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1037));
        float _2007 = fma(_1039, cbModelParam._m0[23u].z, fma(_1038, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1037));
        float _2168;
        if (_2001 > 0.0)
        {
            _2168 = abs((1.0 - _1990) / _2001);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2001 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1990 + 1.0) / _2001);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2168 = frontier_phi_25_21_ladder;
        }
        float _2447;
        if (_2004 > 0.0)
        {
            _2447 = abs((1.0 - _1994) / _2004);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2004 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1994 + 1.0) / _2004);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2447 = frontier_phi_37_32_ladder;
        }
        float _2660;
        if (_2007 > 0.0)
        {
            _2660 = abs((1.0 - _1998) / _2007);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2007 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1998 + 1.0) / _2007);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2660 = frontier_phi_46_43_ladder;
        }
        float _2662 = isnan(_2447) ? _2168 : (isnan(_2168) ? _2447 : min(_2168, _2447));
        float _2663 = isnan(_2660) ? _2662 : (isnan(_2662) ? _2660 : min(_2662, _2660));
        float _2667 = (_2663 * _2001) + _1990;
        float _2668 = (_2663 * _2004) + _1994;
        float _2669 = (_2663 * _2007) + _1998;
        float _2670 = _2663 * 9.9999997473787516355514526367188e-05;
        float _2671 = (-1.0) - _2670;
        float _2673 = _2670 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2669 > _2673) || ((_2669 < _2671) || ((_2668 > _2673) || ((_2668 < _2671) || ((_2667 < _2671) || (_2667 > _2673))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2868 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2669, cbModelParam._m0[17u].z, fma(_2668, cbModelParam._m0[17u].y, _2667 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2669, cbModelParam._m0[18u].z, fma(_2668, cbModelParam._m0[18u].y, _2667 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2669, cbModelParam._m0[19u].z, fma(_2668, cbModelParam._m0[19u].y, _2667 * cbModelParam._m0[19u].x))), _1937);
            frontier_phi_22_46_ladder = _2868.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2868.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2868.x * cbModelParam._m0[1u].z;
        }
        _2026 = frontier_phi_22_46_ladder_2;
        _2028 = frontier_phi_22_46_ladder_1;
        _2030 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2010 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1037, _1038, _1039), _1937);
        _2026 = _2010.x * cbModelParam._m0[1u].z;
        _2028 = _2010.y * cbModelParam._m0[1u].z;
        _2030 = _2010.z * cbModelParam._m0[1u].z;
    }
    float _2043 = (((_1064 * _1013) + _1065) * _1029) * ((cbModelParam._m0[1u].w * (_2026 - _1928)) + _1928);
    float _2045 = (((_1064 * _1015) + _1065) * _1029) * ((cbModelParam._m0[1u].w * (_2028 - _1930)) + _1930);
    float _2047 = (((_1064 * _1016) + _1065) * _1029) * ((cbModelParam._m0[1u].w * (_2030 - _1932)) + _1932);
    float _2050 = fma(_2047, cbSceneParam._m0[89u].z, fma(_2045, cbSceneParam._m0[89u].y, _2043 * cbSceneParam._m0[89u].x));
    float _2053 = fma(_2047, cbSceneParam._m0[90u].z, fma(_2045, cbSceneParam._m0[90u].y, _2043 * cbSceneParam._m0[90u].x));
    float _2056 = fma(_2047, cbSceneParam._m0[91u].z, fma(_2045, cbSceneParam._m0[91u].y, _2043 * cbSceneParam._m0[91u].x));
    vec4 _2064 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_951, _952));
    float _2066 = _2064.w;
    float _2078 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2066);
    float _2079 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2066);
    float _2080 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2066);
    uvec4 _2084 = floatBitsToUint(cbInstanceData._m0[_259 + 5u]);
    uint _2086 = _2084.x * 14u;
    uint _2087 = _2086 + 13u;
    float _2094 = _1029 + (-1.0);
    float _2099 = (cbLight._m0[_2087].x * _2094) + 1.0;
    float _2100 = (cbLight._m0[_2087].y * _2094) + 1.0;
    float _2101 = (cbLight._m0[_2087].z * _2094) + 1.0;
    float _2102 = (cbLight._m0[_2087].w * _2094) + 1.0;
    uint _2103 = _2086 + 5u;
    float _2109 = isnan(1.0) ? _2100 : (isnan(_2100) ? 1.0 : min(_2100, 1.0));
    uint _2113 = _2086 + 4u;
    float _2122 = isnan(1.0) ? _2099 : (isnan(_2099) ? 1.0 : min(_2099, 1.0));
    uint _2126 = _2086 | 1u;
    float _2137 = dot(vec3(cbLight._m0[_2086].xyz), vec3(_864, _865, _866));
    float _2140 = dot(vec3(cbLight._m0[_2126].xyz), vec3(_864, _865, _866));
    float _4326 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
    float _4337 = isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0));
    float _2145 = (isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0))) * 0.3183098733425140380859375;
    float _2147 = (isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0))) * 0.3183098733425140380859375;
    float _2154 = ((cbLight._m0[_2103].x * _2109) * _2147) + (((cbLight._m0[_2113].x * _2078) * _2122) * _2145);
    float _2155 = ((_2109 * cbLight._m0[_2103].y) * _2147) + (((cbLight._m0[_2113].y * _2079) * _2122) * _2145);
    float _2156 = ((_2109 * cbLight._m0[_2103].z) * _2147) + (((cbLight._m0[_2113].z * _2080) * _2122) * _2145);
    uvec4 _2160 = floatBitsToUint(cbLight._m0[_2086 + 12u]);
    bool _2162 = _2160.x == 0u;
    float _2173;
    float _2175;
    float _2177;
    if (_2162)
    {
        _2173 = _2154;
        _2175 = _2155;
        _2177 = _2156;
    }
    else
    {
        uint _2181 = _2086 + 6u;
        float _2197 = (dot(vec3(cbLight._m0[_2086 + 2u].xyz), vec3(_864, _865, _866)) * 0.5) + 0.5;
        float _2198 = _2197 * _2197;
        float _4348 = isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0));
        float _2199 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
        float _2200 = isnan(1.0) ? _2101 : (isnan(_2101) ? 1.0 : min(_2101, 1.0));
        _2173 = (((cbLight._m0[_2181].x * 0.3183098733425140380859375) * _2199) * _2200) + _2154;
        _2175 = (((cbLight._m0[_2181].y * 0.3183098733425140380859375) * _2199) * _2200) + _2155;
        _2177 = (((cbLight._m0[_2181].z * 0.3183098733425140380859375) * _2199) * _2200) + _2156;
    }
    bool _2180 = _2160.y == 0u;
    float _2218;
    float _2220;
    float _2222;
    if (_2180)
    {
        _2218 = _2173;
        _2220 = _2175;
        _2222 = _2177;
    }
    else
    {
        uint _2391 = _2086 + 7u;
        float _2407 = (dot(vec3(cbLight._m0[_2086 + 3u].xyz), vec3(_864, _865, _866)) * 0.5) + 0.5;
        float _2408 = _2407 * _2407;
        float _4364 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
        float _2409 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
        float _2410 = isnan(1.0) ? _2102 : (isnan(_2102) ? 1.0 : min(_2102, 1.0));
        _2218 = (((cbLight._m0[_2391].x * 0.3183098733425140380859375) * _2409) * _2410) + _2173;
        _2220 = (((cbLight._m0[_2391].y * 0.3183098733425140380859375) * _2409) * _2410) + _2175;
        _2222 = (((cbLight._m0[_2391].z * 0.3183098733425140380859375) * _2409) * _2410) + _2177;
    }
    uint _2225 = _2086 + 8u;
    float _2238 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2086].w)) * _867) * 0.949999988079071044921875);
    float _2239 = _2238 * _2238;
    float _2240 = cbLight._m0[_2086].x + _943;
    float _2241 = cbLight._m0[_2086].y + _944;
    float _2242 = cbLight._m0[_2086].z + _945;
    float _2246 = inversesqrt(dot(vec3(_2240, _2241, _2242), vec3(_2240, _2241, _2242)));
    float _2247 = _2246 * _2240;
    float _2248 = _2246 * _2241;
    float _2249 = _2246 * _2242;
    float _2250 = dot(vec3(_864, _865, _866), vec3(cbLight._m0[_2086].xyz));
    float _4380 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
    float _2253 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
    float _4391 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
    float _2254 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
    float _2255 = dot(vec3(_864, _865, _866), vec3(_2247, _2248, _2249));
    float _4402 = isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0));
    float _2258 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
    float _2259 = dot(vec3(cbLight._m0[_2086].xyz), vec3(_2247, _2248, _2249));
    float _4413 = isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0));
    float _2263 = _2239 * _2239;
    float _2267 = ((_2258 * _2258) * (_2263 + (-1.0))) + 1.0;
    float _2275 = exp2(log2(1.0 - (isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0)))) * 5.0);
    float _2276 = 0.959999978542327880859375 - _1010;
    float _2278 = 0.959999978542327880859375 - _1011;
    float _2279 = 0.959999978542327880859375 - _1012;
    float _2286 = 1.0 - _2239;
    float _2297 = (0.5 / (((_2254 * ((_2253 * _2286) + _2239)) + 9.9999999392252902907785028219223e-09) + (((_2254 * _2286) + _2239) * _2253))) * _2253;
    float _4424 = isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0));
    float _2299 = (isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0))) * (_2263 / ((_2267 * _2267) * 3.141590118408203125));
    uint _2313 = _2086 + 9u;
    float _2324 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2126].w)) * _867) * 0.949999988079071044921875);
    float _2325 = _2324 * _2324;
    float _2326 = cbLight._m0[_2126].x + _943;
    float _2327 = cbLight._m0[_2126].y + _944;
    float _2328 = cbLight._m0[_2126].z + _945;
    float _2332 = inversesqrt(dot(vec3(_2326, _2327, _2328), vec3(_2326, _2327, _2328)));
    float _2333 = _2332 * _2326;
    float _2334 = _2332 * _2327;
    float _2335 = _2332 * _2328;
    float _2336 = dot(vec3(_864, _865, _866), vec3(cbLight._m0[_2126].xyz));
    float _4435 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
    float _2339 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
    float _2340 = dot(vec3(_864, _865, _866), vec3(_2333, _2334, _2335));
    float _4446 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0));
    float _2343 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
    float _2344 = dot(vec3(cbLight._m0[_2126].xyz), vec3(_2333, _2334, _2335));
    float _4457 = isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0));
    float _2348 = _2325 * _2325;
    float _2352 = ((_2343 * _2343) * (_2348 + (-1.0))) + 1.0;
    float _2359 = exp2(log2(1.0 - (isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0)))) * 5.0);
    float _2366 = 1.0 - _2325;
    float _2376 = (0.5 / (((_2254 * ((_2339 * _2366) + _2325)) + 9.9999999392252902907785028219223e-09) + (((_2254 * _2366) + _2325) * _2339))) * _2339;
    float _4468 = isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : max(_2376, 0.0));
    float _2378 = (isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0))) * (_2348 / ((_2352 * _2352) * 3.141590118408203125));
    float _2388 = (((((_2359 * _2276) + _1013) * cbLight._m0[_2313].x) * _2378) * _2109) + ((((cbLight._m0[_2225].x * _2078) * ((_2275 * _2276) + _1013)) * _2299) * _2122);
    float _2389 = (((((_2359 * _2278) + _1015) * cbLight._m0[_2313].y) * _2378) * _2109) + ((((cbLight._m0[_2225].y * _2079) * ((_2275 * _2278) + _1015)) * _2299) * _2122);
    float _2390 = (((((_2359 * _2279) + _1016) * cbLight._m0[_2313].z) * _2378) * _2109) + ((((cbLight._m0[_2225].z * _2080) * ((_2275 * _2279) + _1016)) * _2299) * _2122);
    float _2452;
    float _2454;
    float _2456;
    if (_2162)
    {
        _2452 = _2388;
        _2454 = _2389;
        _2456 = _2390;
    }
    else
    {
        uint _2458 = _2086 + 2u;
        uint _2462 = _2086 + 10u;
        float _2476 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2458].w)) * _867) * 0.949999988079071044921875);
        float _2477 = _2476 * _2476;
        float _2478 = cbLight._m0[_2458].x + _943;
        float _2479 = cbLight._m0[_2458].y + _944;
        float _2480 = cbLight._m0[_2458].z + _945;
        float _2484 = inversesqrt(dot(vec3(_2478, _2479, _2480), vec3(_2478, _2479, _2480)));
        float _2485 = _2484 * _2478;
        float _2486 = _2484 * _2479;
        float _2487 = _2484 * _2480;
        float _2488 = dot(vec3(_864, _865, _866), vec3(cbLight._m0[_2458].xyz));
        float _4479 = isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : max(_2488, 0.0));
        float _2491 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
        float _2492 = dot(vec3(_864, _865, _866), vec3(_2485, _2486, _2487));
        float _4490 = isnan(0.0) ? _2492 : (isnan(_2492) ? 0.0 : max(_2492, 0.0));
        float _2495 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
        float _2496 = dot(vec3(cbLight._m0[_2458].xyz), vec3(_2485, _2486, _2487));
        float _4501 = isnan(0.0) ? _2496 : (isnan(_2496) ? 0.0 : max(_2496, 0.0));
        float _2500 = _2477 * _2477;
        float _2504 = ((_2495 * _2495) * (_2500 + (-1.0))) + 1.0;
        float _2511 = exp2(log2(1.0 - (isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0)))) * 5.0);
        float _2518 = 1.0 - _2477;
        float _2528 = (0.5 / (((_2254 * ((_2491 * _2518) + _2477)) + 9.9999999392252902907785028219223e-09) + (((_2254 * _2518) + _2477) * _2491))) * _2491;
        float _4512 = isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : max(_2528, 0.0));
        float _2530 = (isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0))) * (_2500 / ((_2504 * _2504) * 3.141590118408203125));
        float _2531 = isnan(1.0) ? _2101 : (isnan(_2101) ? 1.0 : min(_2101, 1.0));
        _2452 = (((((_2511 * _2276) + _1013) * cbLight._m0[_2462].x) * _2530) * _2531) + _2388;
        _2454 = (((((_2511 * _2278) + _1015) * cbLight._m0[_2462].y) * _2530) * _2531) + _2389;
        _2456 = (((((_2511 * _2279) + _1016) * cbLight._m0[_2462].z) * _2530) * _2531) + _2390;
    }
    float _2566;
    float _2568;
    float _2570;
    if (_2180)
    {
        _2566 = _2452;
        _2568 = _2454;
        _2570 = _2456;
    }
    else
    {
        uint _2577 = _2086 + 3u;
        uint _2581 = _2086 + 11u;
        float _2595 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2577].w)) * _867) * 0.949999988079071044921875);
        float _2596 = _2595 * _2595;
        float _2597 = cbLight._m0[_2577].x + _943;
        float _2598 = cbLight._m0[_2577].y + _944;
        float _2599 = cbLight._m0[_2577].z + _945;
        float _2603 = inversesqrt(dot(vec3(_2597, _2598, _2599), vec3(_2597, _2598, _2599)));
        float _2604 = _2603 * _2597;
        float _2605 = _2603 * _2598;
        float _2606 = _2603 * _2599;
        float _2607 = dot(vec3(_864, _865, _866), vec3(cbLight._m0[_2577].xyz));
        float _4528 = isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : max(_2607, 0.0));
        float _2610 = isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0));
        float _2611 = dot(vec3(_864, _865, _866), vec3(_2604, _2605, _2606));
        float _4539 = isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0));
        float _2614 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
        float _2615 = dot(vec3(cbLight._m0[_2577].xyz), vec3(_2604, _2605, _2606));
        float _4550 = isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : max(_2615, 0.0));
        float _2619 = _2596 * _2596;
        float _2623 = ((_2614 * _2614) * (_2619 + (-1.0))) + 1.0;
        float _2630 = exp2(log2(1.0 - (isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0)))) * 5.0);
        float _2637 = 1.0 - _2596;
        float _2647 = (0.5 / (((_2254 * ((_2610 * _2637) + _2596)) + 9.9999999392252902907785028219223e-09) + (((_2254 * _2637) + _2596) * _2610))) * _2610;
        float _4561 = isnan(0.0) ? _2647 : (isnan(_2647) ? 0.0 : max(_2647, 0.0));
        float _2649 = (isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0))) * (_2619 / ((_2623 * _2623) * 3.141590118408203125));
        float _2650 = isnan(1.0) ? _2102 : (isnan(_2102) ? 1.0 : min(_2102, 1.0));
        _2566 = (((((_2630 * _2276) + _1013) * cbLight._m0[_2581].x) * _2649) * _2650) + _2452;
        _2568 = (((((_2630 * _2278) + _1015) * cbLight._m0[_2581].y) * _2649) * _2650) + _2454;
        _2570 = (((((_2630 * _2279) + _1016) * cbLight._m0[_2581].z) * _2649) * _2650) + _2456;
    }
    float _2785;
    float _2787;
    float _2789;
    float _2791;
    float _2793;
    float _2795;
    if (_2084.y == 0u)
    {
        float _2725 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2726 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2725;
        float _2727 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2725;
        float _2728 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2725;
        uvec4 _2740 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2741 = _2740.x;
        uint _2752 = uint((float(_2740.y) * floor(float(uint(cbSceneParam._m0[85u].y * _952) / _2741))) + floor(float(uint(cbSceneParam._m0[85u].x * _951) / _2741)));
        float _2762 = (log2(_2728 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2763 = isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0));
        uint _2766 = uint(isnan(14.0) ? _2763 : (isnan(_2763) ? 14.0 : min(_2763, 14.0)));
        uvec4 _2771 = texelFetch(g_lightClusterGridBuffer, int(((_2766 << 2u) + (_2752 << 6u)) >> 2u));
        uint _2772 = _2771.x;
        uint _2773 = _2740.z;
        float _2873;
        float _2875;
        float _2877;
        float _2879;
        float _2881;
        float _2883;
        if (((((1u << ((_2773 >> 4u) & 15u)) + 4294967295u) & _2772) == 0u) || ((_2773 & 240u) == 0u))
        {
            _2873 = 0.0;
            _2875 = 0.0;
            _2877 = 0.0;
            _2879 = 0.0;
            _2881 = 0.0;
            _2883 = 0.0;
        }
        else
        {
            float _2874;
            float _2876;
            float _2878;
            float _2880;
            float _2882;
            float _2884;
            float _3017 = 0.0;
            float _3018 = 0.0;
            float _3019 = 0.0;
            float _3020 = 0.0;
            float _3021 = 0.0;
            float _3022 = 0.0;
            uint _3023 = 0u;
            uint _3032;
            bool _3033;
            for (;;)
            {
                _3032 = texelFetch(g_lightClassification, int((((_2766 << 5u) + (_2752 << 9u)) + (_3023 << 2u)) >> 2u)).x;
                _3033 = _3032 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3033)
                {
                    frontier_phi_61_pred = _3017;
                    frontier_phi_61_pred_1 = _3022;
                    frontier_phi_61_pred_2 = _3021;
                    frontier_phi_61_pred_3 = _3020;
                    frontier_phi_61_pred_4 = _3019;
                    frontier_phi_61_pred_5 = _3018;
                }
                else
                {
                    float _3141;
                    float _3142;
                    float _3143;
                    float _3144;
                    float _3145;
                    float _3146;
                    uint _3147;
                    _3141 = _3017;
                    _3142 = _3018;
                    _3143 = _3019;
                    _3144 = _3020;
                    _3145 = _3021;
                    _3146 = _3022;
                    _3147 = _3032;
                    float _3073;
                    float _3074;
                    float _3075;
                    float _3076;
                    float _3077;
                    float _3078;
                    for (;;)
                    {
                        uint _3151 = uint(findLSB(_3147)) + (_3023 << 5u);
                        uint _3148 = (_3147 + 4294967295u) & _3147;
                        uint _3153 = _3151 * 48u;
                        vec4 _3167 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3153)).x, texelFetch(g_PointLightRenderingBuffer, int(_3153 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3153 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3153 + 3u)).x));
                        uint _3173 = (_3151 * 48u) + 4u;
                        vec4 _3186 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3173)).x, texelFetch(g_PointLightRenderingBuffer, int(_3173 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3173 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3173 + 3u)).x));
                        uint _3192 = (_3151 * 48u) + 8u;
                        vec3 _3203 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3192)).x, texelFetch(g_PointLightRenderingBuffer, int(_3192 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3192 + 2u)).x));
                        float _3207 = _3167.x - _2726;
                        float _3208 = _3167.y - _2727;
                        float _3209 = _3167.z - _2728;
                        float _3210 = dot(vec3(_3207, _3208, _3209), vec3(_3207, _3208, _3209));
                        float _3213 = inversesqrt(_3210);
                        float _3214 = _3213 * _3207;
                        float _3215 = _3213 * _3208;
                        float _3216 = _3213 * _3209;
                        float _3217 = dot(vec3(_970, _973, _976), vec3(_3214, _3215, _3216));
                        float _3222 = 1.0 - (_3210 * _3167.w);
                        float _4587 = isnan(0.0) ? _3222 : (isnan(_3222) ? 0.0 : max(_3222, 0.0));
                        float _3223 = isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0));
                        float _3224 = sqrt(_3210) * _3186.w;
                        float _3227 = 1.39999997615814208984375 / (_3224 + 1.39999997615814208984375);
                        float _3228 = _3227 * _3227;
                        float _3231 = ((1.0 - _3228) * _3217) + _3228;
                        float _3234 = _3224 * _3224;
                        float _3238 = ((isnan(0.0) ? _3231 : (isnan(_3231) ? 0.0 : max(_3231, 0.0))) * _3223) / ((_3234 * 0.699999988079071044921875) + 1.0);
                        float _3242 = (-0.0) - _2726;
                        float _3243 = (-0.0) - _2727;
                        float _3244 = (-0.0) - _2728;
                        float _3248 = inversesqrt(dot(vec3(_3242, _3243, _3244), vec3(_3242, _3243, _3244)));
                        float _3249 = _3248 * _3242;
                        float _3250 = _3248 * _3243;
                        float _3251 = _3248 * _3244;
                        float _3259 = exp2(log2(1.0 / ((_3234 * 3.5) + 5.0)) * 0.25);
                        float _3260 = 1.0 - _1045;
                        float _3267 = sqrt(1.0 - ((1.0 - (_3260 * _3260)) * (1.0 - (_3259 * _3259))));
                        float _3268 = _3267 * _3267;
                        float _3269 = _3268 * _3268;
                        float _3270 = _3249 + _3214;
                        float _3271 = _3250 + _3215;
                        float _3272 = _3251 + _3216;
                        float _3276 = inversesqrt(dot(vec3(_3270, _3271, _3272), vec3(_3270, _3271, _3272)));
                        float _3280 = dot(vec3(_970, _973, _976), vec3(_3249, _3250, _3251));
                        float _4603 = isnan(0.0) ? _3280 : (isnan(_3280) ? 0.0 : max(_3280, 0.0));
                        float _3283 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
                        float _3284 = dot(vec3(_970, _973, _976), vec3(_3276 * _3270, _3276 * _3271, _3276 * _3272));
                        float _4614 = isnan(0.0) ? _3284 : (isnan(_3284) ? 0.0 : max(_3284, 0.0));
                        float _3287 = isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0));
                        float _3291 = ((_3287 * _3287) * (_3269 + (-1.0))) + 1.0;
                        float _3292 = _3227 * _3268;
                        float _3293 = _3292 * _3292;
                        float _3296 = ((1.0 - _3293) * _3217) + _3293;
                        float _4625 = isnan(0.0) ? _3296 : (isnan(_3296) ? 0.0 : max(_3296, 0.0));
                        float _3297 = isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0));
                        float _3298 = 1.0 - _3268;
                        float _3308 = (0.5 / (((_3297 * ((_3283 * _3298) + _3268)) + 9.9999999392252902907785028219223e-09) + (((_3297 * _3298) + _3268) * _3283))) * _3297;
                        float _4636 = isnan(0.0) ? _3308 : (isnan(_3308) ? 0.0 : max(_3308, 0.0));
                        float _3319 = (((_3269 * 3.1415927410125732421875) * (isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0)))) / ((_3291 * _3291) * ((_3234 * 2.1991131305694580078125) + 3.141590118408203125))) * _3223;
                        _3076 = (_3238 * _3186.x) + _3144;
                        _3077 = (_3238 * _3186.y) + _3145;
                        _3078 = (_3238 * _3186.z) + _3146;
                        _3073 = (_3319 * _3203.x) + _3141;
                        _3074 = (_3319 * _3203.y) + _3142;
                        _3075 = (_3319 * _3203.z) + _3143;
                        if (_3148 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3141 = _3073;
                            _3142 = _3074;
                            _3143 = _3075;
                            _3144 = _3076;
                            _3145 = _3077;
                            _3146 = _3078;
                            _3147 = _3148;
                        }
                    }
                    frontier_phi_61_pred = _3073;
                    frontier_phi_61_pred_1 = _3078;
                    frontier_phi_61_pred_2 = _3077;
                    frontier_phi_61_pred_3 = _3076;
                    frontier_phi_61_pred_4 = _3075;
                    frontier_phi_61_pred_5 = _3074;
                }
                _2874 = frontier_phi_61_pred;
                _2884 = frontier_phi_61_pred_1;
                _2882 = frontier_phi_61_pred_2;
                _2880 = frontier_phi_61_pred_3;
                _2878 = frontier_phi_61_pred_4;
                _2876 = frontier_phi_61_pred_5;
                uint _3024 = _3023 + 1u;
                if (_3024 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3017 = _2874;
                    _3018 = _2876;
                    _3019 = _2878;
                    _3020 = _2880;
                    _3021 = _2882;
                    _3022 = _2884;
                    _3023 = _3024;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2873 = _2874;
            _2875 = _2876;
            _2877 = _2878;
            _2879 = _2880;
            _2881 = _2882;
            _2883 = _2884;
        }
        uvec4 _2887 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2888 = _2887.z;
        uint _2890 = (_2888 >> 8u) & 15u;
        float _2985;
        float _2987;
        float _2989;
        float _2991;
        float _2993;
        float _2995;
        if (((4294967295u << _2890) & _2772) == 0u)
        {
            _2985 = _2873;
            _2987 = _2875;
            _2989 = _2877;
            _2991 = _2879;
            _2993 = _2881;
            _2995 = _2883;
        }
        else
        {
            float _3010 = inversesqrt(dot(vec3(_2726, _2727, _2728), vec3(_2726, _2727, _2728)));
            float _3011 = _3010 * _2726;
            float _3012 = _3010 * _2727;
            float _3013 = _3010 * _2728;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2890 < ((_2888 >> 12u) & 15u))
            {
                float _2986;
                float _2988;
                float _2990;
                float _2992;
                float _2994;
                float _2996;
                float _3124 = _2873;
                float _3125 = _2875;
                float _3126 = _2877;
                float _3127 = _2879;
                float _3128 = _2881;
                float _3129 = _2883;
                uint _3130 = _2890;
                uint _3139;
                bool _3140;
                for (;;)
                {
                    _3139 = texelFetch(g_lightClassification, int((((_2766 << 5u) + (_2752 << 9u)) + (_3130 << 2u)) >> 2u)).x;
                    _3140 = _3139 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3140)
                    {
                        frontier_phi_67_pred = _3127;
                        frontier_phi_67_pred_1 = _3128;
                        frontier_phi_67_pred_2 = _3129;
                        frontier_phi_67_pred_3 = _3126;
                        frontier_phi_67_pred_4 = _3125;
                        frontier_phi_67_pred_5 = _3124;
                    }
                    else
                    {
                        float _3324;
                        float _3325;
                        float _3326;
                        float _3327;
                        float _3328;
                        float _3329;
                        float _3617;
                        float _3618;
                        float _3619;
                        float _3620;
                        float _3621;
                        float _3622;
                        float _3337 = _3124;
                        float _3338 = _3125;
                        float _3339 = _3126;
                        float _3340 = _3127;
                        float _3341 = _3128;
                        float _3342 = _3129;
                        uint _3343 = _3139;
                        uint _3344;
                        vec4 _3369;
                        float _3370;
                        vec4 _3385;
                        vec3 _3397;
                        vec4 _3412;
                        vec4 _3427;
                        float _3473;
                        bool _3474;
                        for (;;)
                        {
                            uint _3354 = ((_3130 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3343));
                            _3344 = (_3343 + 4294967295u) & _3343;
                            uint _3356 = _3354 * 40u;
                            _3369 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3356)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 3u)).x));
                            _3370 = _3369.w;
                            uint _3372 = (_3354 * 40u) + 4u;
                            _3385 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3372)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3372 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3372 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3372 + 3u)).x));
                            uint _3387 = (_3354 * 40u) + 8u;
                            _3397 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3387)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 2u)).x));
                            uint _3399 = (_3354 * 40u) + 16u;
                            _3412 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3399)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 3u)).x));
                            uint _3414 = (_3354 * 40u) + 20u;
                            _3427 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3414)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 3u)).x));
                            uint _3429 = (_3354 * 40u) + 24u;
                            vec4 _3442 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3429)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3429 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3429 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3429 + 3u)).x));
                            uint _3448 = (_3354 * 40u) + 28u;
                            vec4 _3461 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3448)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 3u)).x));
                            _3473 = fma(_2728, _3461.z, fma(_2727, _3461.y, _3461.x * _2726)) + _3461.w;
                            _3474 = !((fma(_2728, _3442.z, fma(_2727, _3442.y, _3442.x * _2726)) + _3442.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3474)
                            {
                                float _3501 = _3369.x - _2726;
                                float _3502 = _3369.y - _2727;
                                float _3503 = _3369.z - _2728;
                                float _3504 = dot(vec3(_3501, _3502, _3503), vec3(_3501, _3502, _3503));
                                float _3507 = inversesqrt(_3504);
                                float _3508 = _3507 * _3501;
                                float _3509 = _3507 * _3502;
                                float _3510 = _3507 * _3503;
                                float _3514 = 1.0 - (_3504 / (_3370 * _3370));
                                float _4647 = isnan(0.0) ? _3514 : (isnan(_3514) ? 0.0 : max(_3514, 0.0));
                                float _3515 = isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0));
                                float _3519 = sqrt(_3504) * _3385.w;
                                float _3521 = 1.39999997615814208984375 / (_3519 + 1.39999997615814208984375);
                                float _3522 = _3521 * _3521;
                                float _3525 = ((1.0 - _3522) * dot(vec3(_3508, _3509, _3510), vec3(_970, _973, _976))) + _3522;
                                float _3528 = _3519 * _3519;
                                float _3532 = (fma(_2728, _3412.z, fma(_2727, _3412.y, _3412.x * _2726)) + _3412.w) / _3473;
                                float _3533 = (fma(_2728, _3427.z, fma(_2727, _3427.y, _3427.x * _2726)) + _3427.w) / _3473;
                                float _3537 = 1.0 - dot(vec2(_3532, _3533), vec2(_3532, _3533));
                                float _4663 = isnan(0.0) ? _3537 : (isnan(_3537) ? 0.0 : max(_3537, 0.0));
                                float _3538 = isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0));
                                float _3539 = _3538 * (((isnan(0.0) ? _3525 : (isnan(_3525) ? 0.0 : max(_3525, 0.0))) * _3515) / ((_3528 * 0.699999988079071044921875) + 1.0));
                                float _3551 = exp2(log2(1.0 / ((_3528 * 3.5) + 5.0)) * 0.25);
                                float _3552 = 1.0 - _1045;
                                float _3559 = sqrt(1.0 - ((1.0 - (_3552 * _3552)) * (1.0 - (_3551 * _3551))));
                                float _3560 = _3559 * _3559;
                                float _3561 = _3560 * _3560;
                                float _3562 = _3508 - _3011;
                                float _3563 = _3509 - _3012;
                                float _3564 = _3510 - _3013;
                                float _3568 = inversesqrt(dot(vec3(_3562, _3563, _3564), vec3(_3562, _3563, _3564)));
                                float _3572 = dot(vec3(_970, _973, _976), vec3((-0.0) - _3011, (-0.0) - _3012, (-0.0) - _3013));
                                float _4674 = isnan(0.0) ? _3572 : (isnan(_3572) ? 0.0 : max(_3572, 0.0));
                                float _3575 = isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0));
                                float _3576 = dot(vec3(_970, _973, _976), vec3(_3568 * _3562, _3568 * _3563, _3568 * _3564));
                                float _4685 = isnan(0.0) ? _3576 : (isnan(_3576) ? 0.0 : max(_3576, 0.0));
                                float _3579 = isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0));
                                float _3583 = ((_3579 * _3579) * (_3561 + (-1.0))) + 1.0;
                                float _3584 = _3521 * _3560;
                                float _3585 = _3584 * _3584;
                                float _3591 = ((1.0 - _3585) * dot(vec3(_970, _973, _976), vec3(_3508, _3509, _3510))) + _3585;
                                float _4696 = isnan(0.0) ? _3591 : (isnan(_3591) ? 0.0 : max(_3591, 0.0));
                                float _3592 = isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0));
                                float _3593 = 1.0 - _3560;
                                float _3603 = (0.5 / (((_3592 * ((_3575 * _3593) + _3560)) + 9.9999999392252902907785028219223e-09) + (((_3592 * _3593) + _3560) * _3575))) * _3592;
                                float _4707 = isnan(0.0) ? _3603 : (isnan(_3603) ? 0.0 : max(_3603, 0.0));
                                float _3613 = (_3538 * _3515) * (((_3561 * 3.1415927410125732421875) * (isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0)))) / ((_3583 * _3583) * ((_3528 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3613 * _3397.x;
                                frontier_phi_73_pred_1 = _3613 * _3397.y;
                                frontier_phi_73_pred_2 = _3539 * _3385.z;
                                frontier_phi_73_pred_3 = _3539 * _3385.y;
                                frontier_phi_73_pred_4 = _3539 * _3385.x;
                                frontier_phi_73_pred_5 = _3613 * _3397.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3617 = frontier_phi_73_pred;
                            _3618 = frontier_phi_73_pred_1;
                            _3622 = frontier_phi_73_pred_2;
                            _3621 = frontier_phi_73_pred_3;
                            _3620 = frontier_phi_73_pred_4;
                            _3619 = frontier_phi_73_pred_5;
                            _3327 = _3620 + _3340;
                            _3328 = _3621 + _3341;
                            _3329 = _3622 + _3342;
                            _3324 = _3617 + _3337;
                            _3325 = _3618 + _3338;
                            _3326 = _3619 + _3339;
                            if (_3344 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3337 = _3324;
                                _3338 = _3325;
                                _3339 = _3326;
                                _3340 = _3327;
                                _3341 = _3328;
                                _3342 = _3329;
                                _3343 = _3344;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3327;
                        frontier_phi_67_pred_1 = _3328;
                        frontier_phi_67_pred_2 = _3329;
                        frontier_phi_67_pred_3 = _3326;
                        frontier_phi_67_pred_4 = _3325;
                        frontier_phi_67_pred_5 = _3324;
                    }
                    _2992 = frontier_phi_67_pred;
                    _2994 = frontier_phi_67_pred_1;
                    _2996 = frontier_phi_67_pred_2;
                    _2990 = frontier_phi_67_pred_3;
                    _2988 = frontier_phi_67_pred_4;
                    _2986 = frontier_phi_67_pred_5;
                    uint _3131 = _3130 + 1u;
                    if (_3131 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3124 = _2986;
                        _3125 = _2988;
                        _3126 = _2990;
                        _3127 = _2992;
                        _3128 = _2994;
                        _3129 = _2996;
                        _3130 = _3131;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2994;
                frontier_phi_55_56_ladder_1 = _2996;
                frontier_phi_55_56_ladder_2 = _2992;
                frontier_phi_55_56_ladder_3 = _2990;
                frontier_phi_55_56_ladder_4 = _2988;
                frontier_phi_55_56_ladder_5 = _2986;
            }
            else
            {
                frontier_phi_55_56_ladder = _2881;
                frontier_phi_55_56_ladder_1 = _2883;
                frontier_phi_55_56_ladder_2 = _2879;
                frontier_phi_55_56_ladder_3 = _2877;
                frontier_phi_55_56_ladder_4 = _2875;
                frontier_phi_55_56_ladder_5 = _2873;
            }
            _2985 = frontier_phi_55_56_ladder_5;
            _2987 = frontier_phi_55_56_ladder_4;
            _2989 = frontier_phi_55_56_ladder_3;
            _2991 = frontier_phi_55_56_ladder_2;
            _2993 = frontier_phi_55_56_ladder;
            _2995 = frontier_phi_55_56_ladder_1;
        }
        float _3000 = isnan(1.0) ? _1029 : (isnan(_1029) ? 1.0 : min(_1029, 1.0));
        _2785 = (_3000 * _2991) + _2218;
        _2787 = (_3000 * _2993) + _2220;
        _2789 = (_3000 * _2995) + _2222;
        _2791 = ((_2985 * _1013) * _3000) + _2566;
        _2793 = ((_2987 * _1015) * _3000) + _2568;
        _2795 = ((_2989 * _1016) * _3000) + _2570;
    }
    else
    {
        _2785 = _2218;
        _2787 = _2220;
        _2789 = _2222;
        _2791 = _2566;
        _2793 = _2568;
        _2795 = _2570;
    }
    float _4723 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
    float _4734 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
    float _4745 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
    uint _2815 = _259 + 6u;
    float _2823 = _951 / cbSceneParam._m0[86u].x;
    float _2824 = _952 / cbSceneParam._m0[86u].y;
    vec4 _2838 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2823, _2824, (log2((isnan(cbSceneParam._m0[77u].w) ? _886 : (isnan(_886) ? cbSceneParam._m0[77u].w : min(_886, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2840 = _2838.x;
    float _2841 = _2838.y;
    float _2842 = _2838.z;
    float _2843 = _2838.w;
    float _2935;
    float _2937;
    float _2939;
    float _2941;
    if (_886 > cbSceneParam._m0[78u].w)
    {
        float _2898 = isnan(_886) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _886 : min(cbSceneParam._m0[80u].w, _886));
        float _2899 = _2898 / _886;
        float _2910 = _2899 * _936;
        float _2911 = _937 * _2899;
        float _2912 = (-0.0) - _2911;
        float _2913 = _2899 * _938;
        float _2915 = (cbSceneParam._m0[77u].w * _2912) / _2898;
        float _2916 = _2915 + cbSceneParam._m0[79u].w;
        float _2917 = cbSceneParam._m0[79u].w - _2911;
        float _2923 = sqrt(((_2910 * _2910) + (_2911 * _2911)) + (_2913 * _2913));
        float _2926 = (1.0 - (cbSceneParam._m0[77u].w / _2898)) * _2923;
        float _2931 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2933 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3086;
        if (abs((_2912 - _2915) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3086 = ((((_2916 > 0.0) ? exp2(_2931 * _2916) : (2.0 - exp2(_2933 * _2916))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2926;
        }
        else
        {
            float _3046 = 1.0 / cbSceneParam._m0[80u].x;
            float _3047 = isnan(_2917) ? _2916 : (isnan(_2916) ? _2917 : max(_2916, _2917));
            float _3048 = isnan(_2917) ? _2916 : (isnan(_2916) ? _2917 : min(_2916, _2917));
            float _3057 = isnan(0.0) ? _3047 : (isnan(_3047) ? 0.0 : min(_3047, 0.0));
            float _3058 = isnan(0.0) ? _3048 : (isnan(_3048) ? 0.0 : min(_3048, 0.0));
            _3086 = ((abs(_2923 / _2912) * cbSceneParam._m0[80u].y) * ((((_3057 - _3058) * 2.0) - ((exp2(_2931 * (isnan(0.0) ? _3047 : (isnan(_3047) ? 0.0 : max(_3047, 0.0)))) - exp2(_2931 * (isnan(0.0) ? _3048 : (isnan(_3048) ? 0.0 : max(_3048, 0.0))))) * _3046)) - ((exp2(_2933 * _3057) - exp2(_2933 * _3058)) * _3046))) + (_2926 * cbSceneParam._m0[80u].z);
        }
        vec4 _3088 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2823, _2824, 1.0), 0.0);
        float _3097 = exp2((_3086 * (-1.44269502162933349609375)) * (1.0 - _3088.w));
        float _3098 = log2(_3097);
        float _3114 = log2(_2843);
        _2935 = (exp2(_3114 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3098 * cbSceneParam._m0[78u].x)) * _3088.x) / cbSceneParam._m0[78u].x)) + _2840;
        _2937 = (exp2(_3114 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3098 * cbSceneParam._m0[78u].y)) * _3088.y) / cbSceneParam._m0[78u].y)) + _2841;
        _2939 = (exp2(_3114 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3098 * cbSceneParam._m0[78u].z)) * _3088.z) / cbSceneParam._m0[78u].z)) + _2842;
        _2941 = _3097 * _2843;
    }
    else
    {
        _2935 = _2840;
        _2937 = _2841;
        _2939 = _2842;
        _2941 = _2843;
    }
    float _2953 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2954 = _2953 == 3.0;
    float _2955 = log2(_2941);
    float _2962 = exp2(_2955 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0))) * (_2785 + ((isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0))) * _1029))) + ((_2791 + ((isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0))) * _1837)) * cbPerFrame._m0[3u].x));
    float _2963 = exp2(_2955 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0))) * (_2787 + ((isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0))) * _1029))) + ((_2793 + ((isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0))) * _1837)) * cbPerFrame._m0[3u].x));
    float _2964 = exp2(_2955 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0))) * (_2789 + ((isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0))) * _1029))) + ((_2795 + ((isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0))) * _1837)) * cbPerFrame._m0[3u].x));
    float _2973 = (_2953 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2973 * (_2954 ? _2962 : (_2962 + (cbSceneParam._m0[72u].w * _2935)));
    SV_Target.y = _2973 * (_2954 ? _2963 : (_2963 + (cbSceneParam._m0[72u].w * _2937)));
    SV_Target.z = _2973 * (_2954 ? _2964 : (_2964 + (cbSceneParam._m0[72u].w * _2939)));
    SV_Target.w = cbInstanceData._m0[_2815].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2815].w;
}


