#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1152;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _206 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _207 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _208 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _214 = inversesqrt(dot(vec3(_206, _207, _208), vec3(_206, _207, _208)));
    float _221 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _228 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _234 = uint(roundEven(NORMAL.w)) * 13u;
    uint _240 = _234 + 1u;
    uint _244 = _234 + 2u;
    float _253 = sqrt(((cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x) + (cbInstanceData._m0[_234].x * cbInstanceData._m0[_234].x)) + (cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x));
    float _254 = _253 * TEXCOORD.z;
    float _255 = _253 * TEXCOORD.w;
    vec4 _275 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _281 = _275.x * cbMtdParam._m0[11u].x;
    float _282 = _275.y * cbMtdParam._m0[11u].y;
    float _283 = _275.z * cbMtdParam._m0[11u].z;
    vec4 _302 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _254) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _255) + cbTextureTilingScale._m0[5u].w));
    vec4 _340 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _342 = _340.x;
    float _354 = dot(vec4(_342, _340.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _371 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_342 - _354) * cbMtdParam._m0[24u].y) + _354) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3480 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _372 = isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0));
    float _379 = (_372 * ((_302.x * cbMtdParam._m0[12u].x) - _281)) + _281;
    float _380 = (_372 * ((_302.y * cbMtdParam._m0[12u].y) - _282)) + _282;
    float _381 = (_372 * ((_302.z * cbMtdParam._m0[12u].z) - _283)) + _283;
    vec4 _399 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _254) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _255) + cbTextureTilingScale._m0[4u].w));
    vec4 _416 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _418 = _416.x;
    float _419 = _416.y;
    float _420 = _416.z;
    float _429 = ((_399.z - _420) * _372) + _420;
    float _432 = ((((_399.x - _418) * _372) + _418) * 2.0) + (-1.0);
    float _434 = ((((_399.y - _419) * _372) + _419) * 2.0) + (-1.0);
    float _435 = dot(vec2(_432, _434), vec2(_432, _434));
    float _3491 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _440 = sqrt(1.0 - (isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0))));
    vec4 _453 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _471 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _254) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _255) + cbTextureTilingScale._m0[11u].w));
    float _473 = _471.x;
    float _474 = 1.0 - _473;
    float _487 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_473 - _474) * cbMtdParam._m0[24u].z) + _474) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3502 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _488 = isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0));
    float _495 = (_488 * (cbMtdParam._m0[17u].x - _379)) + _379;
    float _496 = (_488 * (cbMtdParam._m0[17u].y - _380)) + _380;
    float _497 = (_488 * (cbMtdParam._m0[17u].z - _381)) + _381;
    vec4 _509 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _523 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _525 = _523.x;
    float _543 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _254) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _255) + cbTextureTilingScale._m0[9u].w)).x - _525) * _372) + _525;
    float _547 = ((_509.x - _543) * cbMtdParam._m0[19u].z) + _543;
    float _549 = _547 - (_547 * _488);
    vec4 _562 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _254) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _255) + cbTextureTilingScale._m0[15u].w));
    float _569 = (_562.x * 2.0) + (-1.0);
    float _570 = (_562.y * 2.0) + (-1.0);
    float _571 = dot(vec2(_569, _570), vec2(_569, _570));
    float _3513 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _579 = (_488 * (_562.z - _429)) + _429;
    float _591 = (((_569 - _432) + (cbMtdParam._m0[21u].x * _432)) * _488) + _432;
    float _592 = (((_570 - _434) + (cbMtdParam._m0[21u].x * _434)) * _488) + _434;
    float _593 = (_488 * (sqrt(1.0 - (isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0)))) - _440)) + _440;
    float _598 = cbMtdParam._m0[22u].x + _453.w;
    float _601 = fma(_593, _221 * NORMAL.x, fma(_592, _228 * TANGENT.x, (_214 * _206) * _591));
    float _604 = fma(_593, _221 * NORMAL.y, fma(_592, _228 * TANGENT.y, (_214 * _207) * _591));
    float _607 = fma(_593, _221 * NORMAL.z, fma(_592, _228 * TANGENT.z, (_214 * _208) * _591));
    float _611 = inversesqrt(dot(vec3(_601, _604, _607), vec3(_601, _604, _607)));
    float _612 = _611 * _601;
    float _613 = _611 * _604;
    float _614 = _611 * _607;
    float _3524 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _615 = isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0));
    float _3535 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _3546 = isnan(0.0) ? _495 : (isnan(_495) ? 0.0 : max(_495, 0.0));
    float _3557 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _3568 = isnan(0.0) ? _497 : (isnan(_497) ? 0.0 : max(_497, 0.0));
    float _3579 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _620 = isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0));
    float _634 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _675 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _685 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _675);
    float _686 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _675);
    float _687 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _675);
    float _691 = inversesqrt(dot(vec3(_685, _686, _687), vec3(_685, _686, _687)));
    float _692 = _685 * _691;
    float _693 = _686 * _691;
    float _694 = _687 * _691;
    float _700 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _701 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _719 = fma(_614, cbSceneParam._m0[5u].z, fma(_613, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _612));
    float _722 = fma(_614, cbSceneParam._m0[6u].z, fma(_613, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _612));
    float _725 = fma(_614, cbSceneParam._m0[7u].z, fma(_613, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _612));
    uint _739 = (_234 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _745 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0)))) * cbInstanceData._m0[_739].x;
    float _746 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0)))) * cbInstanceData._m0[_739].y;
    float _747 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0)))) * cbInstanceData._m0[_739].z;
    float _3590 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _748 = isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0));
    float _3601 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
    float _749 = isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0));
    float _3612 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _750 = isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0));
    float _751 = 1.0 - _620;
    float _752 = _748 * _751;
    float _753 = _749 * _751;
    float _754 = _750 * _751;
    float _759 = (_748 + (-0.039999999105930328369140625)) * _620;
    float _760 = (_749 + (-0.039999999105930328369140625)) * _620;
    float _761 = (_750 + (-0.039999999105930328369140625)) * _620;
    float _762 = _759 + 0.039999999105930328369140625;
    float _764 = _760 + 0.039999999105930328369140625;
    float _765 = _761 + 0.039999999105930328369140625;
    vec4 _774 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _700, cbSceneParam._m0[86u].y * _701));
    float _778 = ((isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0))) * TEXCOORD_5.w) * _774.x;
    float _779 = dot(vec3(_612, _613, _614), vec3(_692, _693, _694));
    float _782 = _779 * 2.0;
    float _786 = (_782 * _612) - _692;
    float _787 = (_782 * _613) - _693;
    float _788 = (_782 * _614) - _694;
    float _792 = abs(dot(vec3(_692, _693, _694), vec3(_612, _613, _614)));
    float _3623 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
    float _794 = sqrt(_615);
    float _807 = exp2((_794 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_794 * 3.0));
    float _813 = (1.0 - _807) * ((_794 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _814 = _807 * _794;
    float _842 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _846 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _850 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1151;
    float _1153;
    float _1154;
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _876 = fma(_850, cbModelParam._m0[26u].z, fma(_846, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _842));
        float _880 = fma(_850, cbModelParam._m0[27u].z, fma(_846, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _842));
        float _884 = fma(_850, cbModelParam._m0[28u].z, fma(_846, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _842));
        float _909 = _842 + _612;
        float _910 = _846 + _613;
        float _911 = _850 + _614;
        float _921 = fma(_911, cbModelParam._m0[26u].z, fma(_910, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _909)) - _876;
        float _922 = fma(_911, cbModelParam._m0[27u].z, fma(_910, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _909)) - _880;
        float _923 = fma(_911, cbModelParam._m0[28u].z, fma(_910, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _909)) - _884;
        float _927 = inversesqrt(dot(vec3(_921, _922, _923), vec3(_921, _922, _923)));
        float _940 = ((_927 * _921) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_876 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _941 = ((_927 * _922) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_880 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _942 = ((_927 * _923) / cbModelParam._m0[34u].z) + ((((((_884 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _945 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_940, _941, _942), 0.0);
        vec4 _952 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_940, _941, _942), 0.0);
        vec4 _959 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_940, _941, _942), 0.0);
        vec4 _966 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_940, _941, _942), 0.0);
        float _979 = exp2((_945.w + (-0.5)) * 20.0) * 2.0;
        float _980 = _979 * (_945.x + (-0.5));
        float _981 = _979 * (_945.y + (-0.5));
        float _982 = _979 * (_945.z + (-0.5));
        float _989 = exp2((_952.w + (-0.5)) * 20.0) * 2.0;
        float _990 = _989 * (_952.x + (-0.5));
        float _991 = _989 * (_952.y + (-0.5));
        float _992 = _989 * (_952.z + (-0.5));
        float _999 = exp2((_959.w + (-0.5)) * 20.0) * 2.0;
        float _1000 = _999 * (_959.x + (-0.5));
        float _1001 = _999 * (_959.y + (-0.5));
        float _1002 = _999 * (_959.z + (-0.5));
        float _1009 = exp2((_966.w + (-0.5)) * 20.0) * 2.0;
        float _1010 = _1009 * (_966.x + (-0.5));
        float _1011 = _1009 * (_966.y + (-0.5));
        float _1012 = _1009 * (_966.z + (-0.5));
        float _1013 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1014 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1015 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1016 = _980 * 0.5;
        float _1017 = _990 * 0.5;
        float _1018 = _1000 * 0.5;
        float _1019 = dot(vec3(_1016, _1017, _1018), vec3(_1016, _1017, _1018));
        float _1024 = (_1019 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1019);
        float _1033 = (dot(vec3(_612, _613, _614), vec3(_1024 * _1016, _1024 * _1017, _1024 * _1018)) + 1.0) * 0.5;
        float _3649 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1043 = sqrt(((_1017 * _1017) + (_1016 * _1016)) + (_1018 * _1018)) / (_1013 + 9.9999997473787516355514526367188e-06);
        float _3660 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1044 = isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0));
        float _1045 = _1044 * 2.0;
        float _1049 = (1.0 - _1044) / (_1044 + 1.0);
        float _3671 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1050 = isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0));
        float _1059 = ((((1.0 - _1050) * (_1045 + 2.0)) * exp2(log2(isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0))) * (_1045 + 1.0))) + _1050) * _1013;
        float _1060 = _981 * 0.5;
        float _1061 = _991 * 0.5;
        float _1062 = _1001 * 0.5;
        float _1063 = dot(vec3(_1060, _1061, _1062), vec3(_1060, _1061, _1062));
        float _1068 = (_1063 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1063);
        float _1076 = (dot(vec3(_612, _613, _614), vec3(_1068 * _1060, _1068 * _1061, _1068 * _1062)) + 1.0) * 0.5;
        float _3682 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1085 = sqrt(((_1061 * _1061) + (_1060 * _1060)) + (_1062 * _1062)) / (_1014 + 9.9999997473787516355514526367188e-06);
        float _3693 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1086 = isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0));
        float _1087 = _1086 * 2.0;
        float _1091 = (1.0 - _1086) / (_1086 + 1.0);
        float _3704 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1092 = isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0));
        float _1101 = ((((1.0 - _1092) * (_1087 + 2.0)) * exp2(log2(isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0))) * (_1087 + 1.0))) + _1092) * _1014;
        float _1102 = _982 * 0.5;
        float _1103 = _992 * 0.5;
        float _1104 = _1002 * 0.5;
        float _1105 = dot(vec3(_1102, _1103, _1104), vec3(_1102, _1103, _1104));
        float _1110 = (_1105 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1105);
        float _1118 = (dot(vec3(_612, _613, _614), vec3(_1110 * _1102, _1110 * _1103, _1110 * _1104)) + 1.0) * 0.5;
        float _3715 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1127 = sqrt(((_1103 * _1103) + (_1102 * _1102)) + (_1104 * _1104)) / (_1015 + 9.9999997473787516355514526367188e-06);
        float _3726 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1128 = isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0));
        float _1129 = _1128 * 2.0;
        float _1133 = (1.0 - _1128) / (_1128 + 1.0);
        float _3737 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1134 = isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0));
        float _1143 = ((((1.0 - _1134) * (_1129 + 2.0)) * exp2(log2(isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0))) * (_1129 + 1.0))) + _1134) * _1015;
        _1151 = _982;
        _1153 = _981;
        _1154 = _980;
        _1155 = _992;
        _1156 = _991;
        _1157 = _990;
        _1158 = _1002;
        _1159 = _1001;
        _1160 = _1000;
        _1161 = _1015;
        _1162 = _1014;
        _1163 = _1013;
        _1164 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0)));
        _1165 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0)));
        _1166 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0)));
    }
    else
    {
        _1151 = _1152;
        _1153 = _1152;
        _1154 = _1152;
        _1155 = _1152;
        _1156 = _1152;
        _1157 = _1152;
        _1158 = _1152;
        _1159 = _1152;
        _1160 = _1152;
        _1161 = _1152;
        _1162 = _1152;
        _1163 = _1152;
        _1164 = 0.0;
        _1165 = 0.0;
        _1166 = 0.0;
    }
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1191 = fma(_850, cbModelParam._m0[30u].z, fma(_846, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _842));
        float _1195 = fma(_850, cbModelParam._m0[31u].z, fma(_846, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _842));
        float _1199 = fma(_850, cbModelParam._m0[32u].z, fma(_846, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _842));
        float _1222 = _842 + _612;
        float _1223 = _846 + _613;
        float _1224 = _850 + _614;
        float _1234 = fma(_1224, cbModelParam._m0[30u].z, fma(_1223, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1222)) - _1191;
        float _1235 = fma(_1224, cbModelParam._m0[31u].z, fma(_1223, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1222)) - _1195;
        float _1236 = fma(_1224, cbModelParam._m0[32u].z, fma(_1223, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1222)) - _1199;
        float _1240 = inversesqrt(dot(vec3(_1234, _1235, _1236), vec3(_1234, _1235, _1236)));
        float _1253 = ((_1240 * _1234) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1191 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1254 = ((_1240 * _1235) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1195 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1255 = ((_1240 * _1236) / cbModelParam._m0[35u].z) + ((((((_1199 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1257 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1253, _1254, _1255), 0.0);
        vec4 _1264 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1253, _1254, _1255), 0.0);
        vec4 _1271 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1253, _1254, _1255), 0.0);
        vec4 _1278 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1253, _1254, _1255), 0.0);
        float _1290 = exp2((_1257.w + (-0.5)) * 20.0) * 2.0;
        float _1291 = _1290 * (_1257.x + (-0.5));
        float _1292 = _1290 * (_1257.y + (-0.5));
        float _1293 = _1290 * (_1257.z + (-0.5));
        float _1300 = exp2((_1264.w + (-0.5)) * 20.0) * 2.0;
        float _1301 = _1300 * (_1264.x + (-0.5));
        float _1302 = _1300 * (_1264.y + (-0.5));
        float _1303 = _1300 * (_1264.z + (-0.5));
        float _1310 = exp2((_1271.w + (-0.5)) * 20.0) * 2.0;
        float _1311 = _1310 * (_1271.x + (-0.5));
        float _1312 = _1310 * (_1271.y + (-0.5));
        float _1313 = _1310 * (_1271.z + (-0.5));
        float _1320 = exp2((_1278.w + (-0.5)) * 20.0) * 2.0;
        float _1321 = _1320 * (_1278.x + (-0.5));
        float _1322 = _1320 * (_1278.y + (-0.5));
        float _1323 = _1320 * (_1278.z + (-0.5));
        float _1324 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1325 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1326 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1327 = _1291 * 0.5;
        float _1328 = _1301 * 0.5;
        float _1329 = _1311 * 0.5;
        float _1330 = dot(vec3(_1327, _1328, _1329), vec3(_1327, _1328, _1329));
        float _1335 = (_1330 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1330);
        float _1343 = (dot(vec3(_612, _613, _614), vec3(_1335 * _1327, _1335 * _1328, _1335 * _1329)) + 1.0) * 0.5;
        float _3778 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1352 = sqrt(((_1328 * _1328) + (_1327 * _1327)) + (_1329 * _1329)) / (_1324 + 9.9999997473787516355514526367188e-06);
        float _3789 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1353 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
        float _1354 = _1353 * 2.0;
        float _1358 = (1.0 - _1353) / (_1353 + 1.0);
        float _3800 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1359 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
        float _1368 = ((((1.0 - _1359) * (_1354 + 2.0)) * exp2(log2(isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0))) * (_1354 + 1.0))) + _1359) * _1324;
        float _1369 = _1292 * 0.5;
        float _1370 = _1302 * 0.5;
        float _1371 = _1312 * 0.5;
        float _1372 = dot(vec3(_1369, _1370, _1371), vec3(_1369, _1370, _1371));
        float _1377 = (_1372 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1372);
        float _1385 = (dot(vec3(_612, _613, _614), vec3(_1377 * _1369, _1377 * _1370, _1377 * _1371)) + 1.0) * 0.5;
        float _3811 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1394 = sqrt(((_1370 * _1370) + (_1369 * _1369)) + (_1371 * _1371)) / (_1325 + 9.9999997473787516355514526367188e-06);
        float _3822 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1395 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
        float _1396 = _1395 * 2.0;
        float _1400 = (1.0 - _1395) / (_1395 + 1.0);
        float _3833 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1401 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
        float _1410 = ((((1.0 - _1401) * (_1396 + 2.0)) * exp2(log2(isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0))) * (_1396 + 1.0))) + _1401) * _1325;
        float _1411 = _1293 * 0.5;
        float _1412 = _1303 * 0.5;
        float _1413 = _1313 * 0.5;
        float _1414 = dot(vec3(_1411, _1412, _1413), vec3(_1411, _1412, _1413));
        float _1419 = (_1414 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1414);
        float _1427 = (dot(vec3(_612, _613, _614), vec3(_1419 * _1411, _1419 * _1412, _1419 * _1413)) + 1.0) * 0.5;
        float _3844 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1436 = sqrt(((_1412 * _1412) + (_1411 * _1411)) + (_1413 * _1413)) / (_1326 + 9.9999997473787516355514526367188e-06);
        float _3855 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1437 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
        float _1438 = _1437 * 2.0;
        float _1442 = (1.0 - _1437) / (_1437 + 1.0);
        float _3866 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1443 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
        float _1452 = ((((1.0 - _1443) * (_1438 + 2.0)) * exp2(log2(isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0))) * (_1438 + 1.0))) + _1443) * _1326;
        _1460 = _1293;
        _1461 = _1292;
        _1462 = _1291;
        _1463 = _1303;
        _1464 = _1302;
        _1465 = _1301;
        _1466 = _1313;
        _1467 = _1312;
        _1468 = _1311;
        _1469 = _1326;
        _1470 = _1325;
        _1471 = _1324;
        _1472 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0)));
        _1473 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0)));
        _1474 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0)));
    }
    else
    {
        _1460 = _1152;
        _1461 = _1152;
        _1462 = _1152;
        _1463 = _1152;
        _1464 = _1152;
        _1465 = _1152;
        _1466 = _1152;
        _1467 = _1152;
        _1468 = _1152;
        _1469 = _1152;
        _1470 = _1152;
        _1471 = _1152;
        _1472 = 0.0;
        _1473 = 0.0;
        _1474 = 0.0;
    }
    float _1484 = (cbModelParam._m0[1u].x * (_1472 - _1164)) + _1164;
    float _1485 = (cbModelParam._m0[1u].x * (_1473 - _1165)) + _1165;
    float _1486 = (cbModelParam._m0[1u].x * (_1474 - _1166)) + _1166;
    float _1507 = fma(_1486, cbSceneParam._m0[89u].z, fma(_1485, cbSceneParam._m0[89u].y, _1484 * cbSceneParam._m0[89u].x));
    float _1510 = fma(_1486, cbSceneParam._m0[90u].z, fma(_1485, cbSceneParam._m0[90u].y, _1484 * cbSceneParam._m0[90u].x));
    float _1513 = fma(_1486, cbSceneParam._m0[91u].z, fma(_1485, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1484));
    float _1528 = _786 * 0.5;
    float _1529 = _787 * 0.5;
    float _1530 = _788 * 0.5;
    float _1531 = dot(vec4(_1528, _1529, _1530, 1.0), vec4(_1462, _1465, _1468, _1471));
    float _1534 = dot(vec4(_1528, _1529, _1530, 1.0), vec4(_1461, _1464, _1467, _1470));
    float _1537 = dot(vec4(_1528, _1529, _1530, 1.0), vec4(_1460, _1463, _1466, _1469));
    float _1571;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1544 = dot(vec4(_1528, _1529, _1530, 1.0), vec4(_1151, _1155, _1158, _1161));
        float _1548 = dot(vec4(_1528, _1529, _1530, 1.0), vec4(_1153, _1156, _1159, _1162));
        float _1552 = dot(vec4(_1528, _1529, _1530, 1.0), vec4(_1154, _1157, _1160, _1163));
        float _1559 = dot(vec4(cbModelParam._m0[39u]), vec4(_1528, _1529, _1530, 1.0));
        _1571 = dot(vec3(isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0)), isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0)), isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1559) ? 0.0 : (isnan(0.0) ? _1559 : max(0.0, _1559))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1571 = 1.0;
    }
    float _1582;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1573 = dot(vec4(cbModelParam._m0[40u]), vec4(_1528, _1529, _1530, 1.0));
        _1582 = dot(vec3(isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0)), isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0)), isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1573) ? 0.0 : (isnan(0.0) ? _1573 : max(0.0, _1573))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1582 = 1.0;
    }
    float _1586 = (_1582 * cbModelParam._m0[1u].x) + (_1571 * (1.0 - cbModelParam._m0[1u].x));
    float _1596 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _615);
    float _1597 = isnan(_1596) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1596 : min(cbModelParam._m0[25u].z, _1596));
    float _1678;
    float _1680;
    float _1682;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1645 = fma(_850, cbModelParam._m0[13u].z, fma(_846, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _842)) + cbModelParam._m0[13u].w;
        float _1649 = fma(_850, cbModelParam._m0[14u].z, fma(_846, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _842)) + cbModelParam._m0[14u].w;
        float _1653 = fma(_850, cbModelParam._m0[15u].z, fma(_846, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _842)) + cbModelParam._m0[15u].w;
        float _1656 = fma(_788, cbModelParam._m0[13u].z, fma(_787, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _786));
        float _1659 = fma(_788, cbModelParam._m0[14u].z, fma(_787, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _786));
        float _1662 = fma(_788, cbModelParam._m0[15u].z, fma(_787, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _786));
        float _1690;
        if (_1656 > 0.0)
        {
            _1690 = abs((1.0 - _1645) / _1656);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1656 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1645 + 1.0) / _1656);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1690 = frontier_phi_14_12_ladder;
        }
        float _1893;
        if (_1659 > 0.0)
        {
            _1893 = abs((1.0 - _1649) / _1659);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1659 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1649 + 1.0) / _1659);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1893 = frontier_phi_23_19_ladder;
        }
        float _2147;
        if (_1662 > 0.0)
        {
            _2147 = abs((1.0 - _1653) / _1662);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1662 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1653 + 1.0) / _1662);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2147 = frontier_phi_35_30_ladder;
        }
        float _2149 = isnan(_1893) ? _1690 : (isnan(_1690) ? _1893 : min(_1690, _1893));
        float _2150 = isnan(_2147) ? _2149 : (isnan(_2149) ? _2147 : min(_2149, _2147));
        float _2154 = (_2150 * _1656) + _1645;
        float _2155 = (_2150 * _1659) + _1649;
        float _2156 = (_2150 * _1662) + _1653;
        float _2157 = _2150 * 9.9999997473787516355514526367188e-05;
        float _2159 = (-1.0) - _2157;
        float _2161 = _2157 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2156 > _2161) || ((_2156 < _2159) || ((_2155 > _2161) || ((_2155 < _2159) || ((_2154 < _2159) || (_2154 > _2161))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2284 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2156, cbModelParam._m0[9u].z, fma(_2155, cbModelParam._m0[9u].y, _2154 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2156, cbModelParam._m0[10u].z, fma(_2155, cbModelParam._m0[10u].y, _2154 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2156, cbModelParam._m0[11u].z, fma(_2155, cbModelParam._m0[11u].y, _2154 * cbModelParam._m0[11u].x))), _1597);
            frontier_phi_13_35_ladder = _2284.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2284.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2284.x * cbModelParam._m0[1u].y;
        }
        _1678 = frontier_phi_13_35_ladder_2;
        _1680 = frontier_phi_13_35_ladder_1;
        _1682 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1666 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_786, _787, _788), _1597);
        _1678 = _1666.x * cbModelParam._m0[1u].y;
        _1680 = _1666.y * cbModelParam._m0[1u].y;
        _1682 = _1666.z * cbModelParam._m0[1u].y;
    }
    float _1686 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _615);
    float _1687 = isnan(_1686) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1686 : min(cbModelParam._m0[25u].w, _1686));
    float _1777;
    float _1779;
    float _1781;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1741 = fma(_850, cbModelParam._m0[21u].z, fma(_846, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _842)) + cbModelParam._m0[21u].w;
        float _1745 = fma(_850, cbModelParam._m0[22u].z, fma(_846, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _842)) + cbModelParam._m0[22u].w;
        float _1749 = fma(_850, cbModelParam._m0[23u].z, fma(_846, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _842)) + cbModelParam._m0[23u].w;
        float _1752 = fma(_788, cbModelParam._m0[21u].z, fma(_787, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _786));
        float _1755 = fma(_788, cbModelParam._m0[22u].z, fma(_787, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _786));
        float _1758 = fma(_788, cbModelParam._m0[23u].z, fma(_787, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _786));
        float _1898;
        if (_1752 > 0.0)
        {
            _1898 = abs((1.0 - _1741) / _1752);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1752 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1741 + 1.0) / _1752);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1898 = frontier_phi_25_21_ladder;
        }
        float _2174;
        if (_1755 > 0.0)
        {
            _2174 = abs((1.0 - _1745) / _1755);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1755 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1745 + 1.0) / _1755);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2174 = frontier_phi_37_32_ladder;
        }
        float _2387;
        if (_1758 > 0.0)
        {
            _2387 = abs((1.0 - _1749) / _1758);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1758 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1749 + 1.0) / _1758);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2387 = frontier_phi_46_43_ladder;
        }
        float _2389 = isnan(_2174) ? _1898 : (isnan(_1898) ? _2174 : min(_1898, _2174));
        float _2390 = isnan(_2387) ? _2389 : (isnan(_2389) ? _2387 : min(_2389, _2387));
        float _2394 = (_2390 * _1752) + _1741;
        float _2395 = (_2390 * _1755) + _1745;
        float _2396 = (_2390 * _1758) + _1749;
        float _2397 = _2390 * 9.9999997473787516355514526367188e-05;
        float _2398 = (-1.0) - _2397;
        float _2400 = _2397 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2396 > _2400) || ((_2396 < _2398) || ((_2395 > _2400) || ((_2395 < _2398) || ((_2394 < _2398) || (_2394 > _2400))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2595 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2396, cbModelParam._m0[17u].z, fma(_2395, cbModelParam._m0[17u].y, _2394 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2396, cbModelParam._m0[18u].z, fma(_2395, cbModelParam._m0[18u].y, _2394 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2396, cbModelParam._m0[19u].z, fma(_2395, cbModelParam._m0[19u].y, _2394 * cbModelParam._m0[19u].x))), _1687);
            frontier_phi_22_46_ladder = _2595.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2595.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2595.x * cbModelParam._m0[1u].z;
        }
        _1777 = frontier_phi_22_46_ladder_2;
        _1779 = frontier_phi_22_46_ladder_1;
        _1781 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1761 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_786, _787, _788), _1687);
        _1777 = _1761.x * cbModelParam._m0[1u].z;
        _1779 = _1761.y * cbModelParam._m0[1u].z;
        _1781 = _1761.z * cbModelParam._m0[1u].z;
    }
    float _1794 = (((_813 * _762) + _814) * _778) * ((cbModelParam._m0[1u].w * (_1777 - _1678)) + _1678);
    float _1796 = (((_813 * _764) + _814) * _778) * ((cbModelParam._m0[1u].w * (_1779 - _1680)) + _1680);
    float _1798 = (((_813 * _765) + _814) * _778) * ((cbModelParam._m0[1u].w * (_1781 - _1682)) + _1682);
    float _1801 = fma(_1798, cbSceneParam._m0[89u].z, fma(_1796, cbSceneParam._m0[89u].y, _1794 * cbSceneParam._m0[89u].x));
    float _1804 = fma(_1798, cbSceneParam._m0[90u].z, fma(_1796, cbSceneParam._m0[90u].y, _1794 * cbSceneParam._m0[90u].x));
    float _1807 = fma(_1798, cbSceneParam._m0[91u].z, fma(_1796, cbSceneParam._m0[91u].y, _1794 * cbSceneParam._m0[91u].x));
    uvec4 _1817 = floatBitsToUint(cbInstanceData._m0[_234 + 5u]);
    uint _1819 = _1817.x * 14u;
    uint _1820 = _1819 + 13u;
    float _1827 = _778 + (-1.0);
    float _1832 = (cbLight._m0[_1820].x * _1827) + 1.0;
    float _1833 = (cbLight._m0[_1820].y * _1827) + 1.0;
    float _1834 = (cbLight._m0[_1820].z * _1827) + 1.0;
    float _1835 = (cbLight._m0[_1820].w * _1827) + 1.0;
    uint _1836 = _1819 + 5u;
    float _1842 = isnan(1.0) ? _1833 : (isnan(_1833) ? 1.0 : min(_1833, 1.0));
    uint _1846 = _1819 + 4u;
    float _1852 = isnan(1.0) ? _1832 : (isnan(_1832) ? 1.0 : min(_1832, 1.0));
    uint _1856 = _1819 | 1u;
    float _1867 = dot(vec3(cbLight._m0[_1819].xyz), vec3(_612, _613, _614));
    float _1870 = dot(vec3(cbLight._m0[_1856].xyz), vec3(_612, _613, _614));
    float _4002 = isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0));
    float _4013 = isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0));
    float _1875 = (isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0))) * 0.3183098733425140380859375;
    float _1877 = (isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0))) * 0.3183098733425140380859375;
    float _1884 = ((cbLight._m0[_1836].x * _1842) * _1877) + ((cbLight._m0[_1846].x * _1852) * _1875);
    float _1885 = ((_1842 * cbLight._m0[_1836].y) * _1877) + ((_1852 * cbLight._m0[_1846].y) * _1875);
    float _1886 = ((_1842 * cbLight._m0[_1836].z) * _1877) + ((_1852 * cbLight._m0[_1846].z) * _1875);
    uvec4 _1890 = floatBitsToUint(cbLight._m0[_1819 + 12u]);
    bool _1892 = _1890.x == 0u;
    float _1903;
    float _1905;
    float _1907;
    if (_1892)
    {
        _1903 = _1884;
        _1905 = _1885;
        _1907 = _1886;
    }
    else
    {
        uint _1911 = _1819 + 6u;
        float _1927 = (dot(vec3(cbLight._m0[_1819 + 2u].xyz), vec3(_612, _613, _614)) * 0.5) + 0.5;
        float _1928 = _1927 * _1927;
        float _4024 = isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0));
        float _1929 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
        float _1930 = isnan(1.0) ? _1834 : (isnan(_1834) ? 1.0 : min(_1834, 1.0));
        _1903 = (((cbLight._m0[_1911].x * 0.3183098733425140380859375) * _1929) * _1930) + _1884;
        _1905 = (((cbLight._m0[_1911].y * 0.3183098733425140380859375) * _1929) * _1930) + _1885;
        _1907 = (((cbLight._m0[_1911].z * 0.3183098733425140380859375) * _1929) * _1930) + _1886;
    }
    bool _1910 = _1890.y == 0u;
    float _1948;
    float _1950;
    float _1952;
    if (_1910)
    {
        _1948 = _1903;
        _1950 = _1905;
        _1952 = _1907;
    }
    else
    {
        uint _2118 = _1819 + 7u;
        float _2134 = (dot(vec3(cbLight._m0[_1819 + 3u].xyz), vec3(_612, _613, _614)) * 0.5) + 0.5;
        float _2135 = _2134 * _2134;
        float _4040 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
        float _2136 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
        float _2137 = isnan(1.0) ? _1835 : (isnan(_1835) ? 1.0 : min(_1835, 1.0));
        _1948 = (((cbLight._m0[_2118].x * 0.3183098733425140380859375) * _2136) * _2137) + _1903;
        _1950 = (((cbLight._m0[_2118].y * 0.3183098733425140380859375) * _2136) * _2137) + _1905;
        _1952 = (((cbLight._m0[_2118].z * 0.3183098733425140380859375) * _2136) * _2137) + _1907;
    }
    uint _1955 = _1819 + 8u;
    float _1968 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1819].w)) * _615) * 0.949999988079071044921875);
    float _1969 = _1968 * _1968;
    float _1970 = cbLight._m0[_1819].x + _692;
    float _1971 = cbLight._m0[_1819].y + _693;
    float _1972 = cbLight._m0[_1819].z + _694;
    float _1976 = inversesqrt(dot(vec3(_1970, _1971, _1972), vec3(_1970, _1971, _1972)));
    float _1977 = _1976 * _1970;
    float _1978 = _1976 * _1971;
    float _1979 = _1976 * _1972;
    float _1980 = dot(vec3(_612, _613, _614), vec3(cbLight._m0[_1819].xyz));
    float _4056 = isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0));
    float _1983 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
    float _4067 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
    float _1984 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
    float _1985 = dot(vec3(_612, _613, _614), vec3(_1977, _1978, _1979));
    float _4078 = isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0));
    float _1988 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
    float _1989 = dot(vec3(cbLight._m0[_1819].xyz), vec3(_1977, _1978, _1979));
    float _4089 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
    float _1993 = _1969 * _1969;
    float _1997 = ((_1988 * _1988) * (_1993 + (-1.0))) + 1.0;
    float _2005 = exp2(log2(1.0 - (isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0)))) * 5.0);
    float _2006 = 0.959999978542327880859375 - _759;
    float _2008 = 0.959999978542327880859375 - _760;
    float _2009 = 0.959999978542327880859375 - _761;
    float _2016 = 1.0 - _1969;
    float _2027 = (0.5 / (((_1984 * ((_1983 * _2016) + _1969)) + 9.9999999392252902907785028219223e-09) + (((_1984 * _2016) + _1969) * _1983))) * _1983;
    float _4100 = isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0));
    float _2029 = (isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0))) * (_1993 / ((_1997 * _1997) * 3.141590118408203125));
    uint _2040 = _1819 + 9u;
    float _2051 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1856].w)) * _615) * 0.949999988079071044921875);
    float _2052 = _2051 * _2051;
    float _2053 = cbLight._m0[_1856].x + _692;
    float _2054 = cbLight._m0[_1856].y + _693;
    float _2055 = cbLight._m0[_1856].z + _694;
    float _2059 = inversesqrt(dot(vec3(_2053, _2054, _2055), vec3(_2053, _2054, _2055)));
    float _2060 = _2059 * _2053;
    float _2061 = _2059 * _2054;
    float _2062 = _2059 * _2055;
    float _2063 = dot(vec3(_612, _613, _614), vec3(cbLight._m0[_1856].xyz));
    float _4111 = isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0));
    float _2066 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
    float _2067 = dot(vec3(_612, _613, _614), vec3(_2060, _2061, _2062));
    float _4122 = isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0));
    float _2070 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
    float _2071 = dot(vec3(cbLight._m0[_1856].xyz), vec3(_2060, _2061, _2062));
    float _4133 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
    float _2075 = _2052 * _2052;
    float _2079 = ((_2070 * _2070) * (_2075 + (-1.0))) + 1.0;
    float _2086 = exp2(log2(1.0 - (isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0)))) * 5.0);
    float _2093 = 1.0 - _2052;
    float _2103 = (0.5 / (((_1984 * ((_2066 * _2093) + _2052)) + 9.9999999392252902907785028219223e-09) + (((_1984 * _2093) + _2052) * _2066))) * _2066;
    float _4144 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
    float _2105 = (isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0))) * (_2075 / ((_2079 * _2079) * 3.141590118408203125));
    float _2115 = (((((_2086 * _2006) + _762) * cbLight._m0[_2040].x) * _2105) * _1842) + (((((_2005 * _2006) + _762) * cbLight._m0[_1955].x) * _2029) * _1852);
    float _2116 = (((((_2086 * _2008) + _764) * cbLight._m0[_2040].y) * _2105) * _1842) + (((((_2005 * _2008) + _764) * cbLight._m0[_1955].y) * _2029) * _1852);
    float _2117 = (((((_2086 * _2009) + _765) * cbLight._m0[_2040].z) * _2105) * _1842) + (((((_2005 * _2009) + _765) * cbLight._m0[_1955].z) * _2029) * _1852);
    float _2179;
    float _2181;
    float _2183;
    if (_1892)
    {
        _2179 = _2115;
        _2181 = _2116;
        _2183 = _2117;
    }
    else
    {
        uint _2185 = _1819 + 2u;
        uint _2189 = _1819 + 10u;
        float _2203 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2185].w)) * _615) * 0.949999988079071044921875);
        float _2204 = _2203 * _2203;
        float _2205 = cbLight._m0[_2185].x + _692;
        float _2206 = cbLight._m0[_2185].y + _693;
        float _2207 = cbLight._m0[_2185].z + _694;
        float _2211 = inversesqrt(dot(vec3(_2205, _2206, _2207), vec3(_2205, _2206, _2207)));
        float _2212 = _2211 * _2205;
        float _2213 = _2211 * _2206;
        float _2214 = _2211 * _2207;
        float _2215 = dot(vec3(_612, _613, _614), vec3(cbLight._m0[_2185].xyz));
        float _4155 = isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0));
        float _2218 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
        float _2219 = dot(vec3(_612, _613, _614), vec3(_2212, _2213, _2214));
        float _4166 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
        float _2222 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
        float _2223 = dot(vec3(cbLight._m0[_2185].xyz), vec3(_2212, _2213, _2214));
        float _4177 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
        float _2227 = _2204 * _2204;
        float _2231 = ((_2222 * _2222) * (_2227 + (-1.0))) + 1.0;
        float _2238 = exp2(log2(1.0 - (isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0)))) * 5.0);
        float _2245 = 1.0 - _2204;
        float _2255 = (0.5 / (((_1984 * ((_2218 * _2245) + _2204)) + 9.9999999392252902907785028219223e-09) + (((_1984 * _2245) + _2204) * _2218))) * _2218;
        float _4188 = isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0));
        float _2257 = (isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0))) * (_2227 / ((_2231 * _2231) * 3.141590118408203125));
        float _2258 = isnan(1.0) ? _1834 : (isnan(_1834) ? 1.0 : min(_1834, 1.0));
        _2179 = (((((_2238 * _2006) + _762) * cbLight._m0[_2189].x) * _2257) * _2258) + _2115;
        _2181 = (((((_2238 * _2008) + _764) * cbLight._m0[_2189].y) * _2257) * _2258) + _2116;
        _2183 = (((((_2238 * _2009) + _765) * cbLight._m0[_2189].z) * _2257) * _2258) + _2117;
    }
    float _2293;
    float _2295;
    float _2297;
    if (_1910)
    {
        _2293 = _2179;
        _2295 = _2181;
        _2297 = _2183;
    }
    else
    {
        uint _2304 = _1819 + 3u;
        uint _2308 = _1819 + 11u;
        float _2322 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2304].w)) * _615) * 0.949999988079071044921875);
        float _2323 = _2322 * _2322;
        float _2324 = cbLight._m0[_2304].x + _692;
        float _2325 = cbLight._m0[_2304].y + _693;
        float _2326 = cbLight._m0[_2304].z + _694;
        float _2330 = inversesqrt(dot(vec3(_2324, _2325, _2326), vec3(_2324, _2325, _2326)));
        float _2331 = _2330 * _2324;
        float _2332 = _2330 * _2325;
        float _2333 = _2330 * _2326;
        float _2334 = dot(vec3(_612, _613, _614), vec3(cbLight._m0[_2304].xyz));
        float _4204 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
        float _2337 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
        float _2338 = dot(vec3(_612, _613, _614), vec3(_2331, _2332, _2333));
        float _4215 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
        float _2341 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
        float _2342 = dot(vec3(cbLight._m0[_2304].xyz), vec3(_2331, _2332, _2333));
        float _4226 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
        float _2346 = _2323 * _2323;
        float _2350 = ((_2341 * _2341) * (_2346 + (-1.0))) + 1.0;
        float _2357 = exp2(log2(1.0 - (isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0)))) * 5.0);
        float _2364 = 1.0 - _2323;
        float _2374 = (0.5 / (((_1984 * ((_2337 * _2364) + _2323)) + 9.9999999392252902907785028219223e-09) + (((_1984 * _2364) + _2323) * _2337))) * _2337;
        float _4237 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
        float _2376 = (isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0))) * (_2346 / ((_2350 * _2350) * 3.141590118408203125));
        float _2377 = isnan(1.0) ? _1835 : (isnan(_1835) ? 1.0 : min(_1835, 1.0));
        _2293 = (((((_2357 * _2006) + _762) * cbLight._m0[_2308].x) * _2376) * _2377) + _2179;
        _2295 = (((((_2357 * _2008) + _764) * cbLight._m0[_2308].y) * _2376) * _2377) + _2181;
        _2297 = (((((_2357 * _2009) + _765) * cbLight._m0[_2308].z) * _2376) * _2377) + _2183;
    }
    float _2512;
    float _2514;
    float _2516;
    float _2518;
    float _2520;
    float _2522;
    if (_1817.y == 0u)
    {
        float _2452 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2453 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2452;
        float _2454 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2452;
        float _2455 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2452;
        uvec4 _2467 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2468 = _2467.x;
        uint _2479 = uint((float(_2467.y) * floor(float(uint(cbSceneParam._m0[85u].y * _701) / _2468))) + floor(float(uint(cbSceneParam._m0[85u].x * _700) / _2468)));
        float _2489 = (log2(_2455 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2490 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
        uint _2493 = uint(isnan(14.0) ? _2490 : (isnan(_2490) ? 14.0 : min(_2490, 14.0)));
        uvec4 _2498 = texelFetch(g_lightClusterGridBuffer, int(((_2493 << 2u) + (_2479 << 6u)) >> 2u));
        uint _2499 = _2498.x;
        uint _2500 = _2467.z;
        float _2600;
        float _2602;
        float _2604;
        float _2606;
        float _2608;
        float _2610;
        if (((((1u << ((_2500 >> 4u) & 15u)) + 4294967295u) & _2499) == 0u) || ((_2500 & 240u) == 0u))
        {
            _2600 = 0.0;
            _2602 = 0.0;
            _2604 = 0.0;
            _2606 = 0.0;
            _2608 = 0.0;
            _2610 = 0.0;
        }
        else
        {
            float _2601;
            float _2603;
            float _2605;
            float _2607;
            float _2609;
            float _2611;
            float _2745 = 0.0;
            float _2746 = 0.0;
            float _2747 = 0.0;
            float _2748 = 0.0;
            float _2749 = 0.0;
            float _2750 = 0.0;
            uint _2751 = 0u;
            uint _2760;
            bool _2761;
            for (;;)
            {
                _2760 = texelFetch(g_lightClassification, int((((_2493 << 5u) + (_2479 << 9u)) + (_2751 << 2u)) >> 2u)).x;
                _2761 = _2760 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2761)
                {
                    frontier_phi_61_pred = _2745;
                    frontier_phi_61_pred_1 = _2750;
                    frontier_phi_61_pred_2 = _2749;
                    frontier_phi_61_pred_3 = _2748;
                    frontier_phi_61_pred_4 = _2747;
                    frontier_phi_61_pred_5 = _2746;
                }
                else
                {
                    float _2869;
                    float _2870;
                    float _2871;
                    float _2872;
                    float _2873;
                    float _2874;
                    uint _2875;
                    _2869 = _2745;
                    _2870 = _2746;
                    _2871 = _2747;
                    _2872 = _2748;
                    _2873 = _2749;
                    _2874 = _2750;
                    _2875 = _2760;
                    float _2801;
                    float _2802;
                    float _2803;
                    float _2804;
                    float _2805;
                    float _2806;
                    for (;;)
                    {
                        uint _2879 = uint(findLSB(_2875)) + (_2751 << 5u);
                        uint _2876 = (_2875 + 4294967295u) & _2875;
                        uint _2881 = _2879 * 48u;
                        vec4 _2895 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2881)).x, texelFetch(g_PointLightRenderingBuffer, int(_2881 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2881 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2881 + 3u)).x));
                        uint _2901 = (_2879 * 48u) + 4u;
                        vec4 _2914 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2901)).x, texelFetch(g_PointLightRenderingBuffer, int(_2901 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2901 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2901 + 3u)).x));
                        uint _2920 = (_2879 * 48u) + 8u;
                        vec3 _2931 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2920)).x, texelFetch(g_PointLightRenderingBuffer, int(_2920 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2920 + 2u)).x));
                        float _2935 = _2895.x - _2453;
                        float _2936 = _2895.y - _2454;
                        float _2937 = _2895.z - _2455;
                        float _2938 = dot(vec3(_2935, _2936, _2937), vec3(_2935, _2936, _2937));
                        float _2941 = inversesqrt(_2938);
                        float _2942 = _2941 * _2935;
                        float _2943 = _2941 * _2936;
                        float _2944 = _2941 * _2937;
                        float _2945 = dot(vec3(_719, _722, _725), vec3(_2942, _2943, _2944));
                        float _2950 = 1.0 - (_2938 * _2895.w);
                        float _4263 = isnan(0.0) ? _2950 : (isnan(_2950) ? 0.0 : max(_2950, 0.0));
                        float _2951 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
                        float _2952 = sqrt(_2938) * _2914.w;
                        float _2955 = 1.39999997615814208984375 / (_2952 + 1.39999997615814208984375);
                        float _2956 = _2955 * _2955;
                        float _2959 = ((1.0 - _2956) * _2945) + _2956;
                        float _2962 = _2952 * _2952;
                        float _2966 = ((isnan(0.0) ? _2959 : (isnan(_2959) ? 0.0 : max(_2959, 0.0))) * _2951) / ((_2962 * 0.699999988079071044921875) + 1.0);
                        float _2970 = (-0.0) - _2453;
                        float _2971 = (-0.0) - _2454;
                        float _2972 = (-0.0) - _2455;
                        float _2976 = inversesqrt(dot(vec3(_2970, _2971, _2972), vec3(_2970, _2971, _2972)));
                        float _2977 = _2976 * _2970;
                        float _2978 = _2976 * _2971;
                        float _2979 = _2976 * _2972;
                        float _2987 = exp2(log2(1.0 / ((_2962 * 3.5) + 5.0)) * 0.25);
                        float _2988 = 1.0 - _794;
                        float _2995 = sqrt(1.0 - ((1.0 - (_2988 * _2988)) * (1.0 - (_2987 * _2987))));
                        float _2996 = _2995 * _2995;
                        float _2997 = _2996 * _2996;
                        float _2998 = _2977 + _2942;
                        float _2999 = _2978 + _2943;
                        float _3000 = _2979 + _2944;
                        float _3004 = inversesqrt(dot(vec3(_2998, _2999, _3000), vec3(_2998, _2999, _3000)));
                        float _3008 = dot(vec3(_719, _722, _725), vec3(_2977, _2978, _2979));
                        float _4279 = isnan(0.0) ? _3008 : (isnan(_3008) ? 0.0 : max(_3008, 0.0));
                        float _3011 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
                        float _3012 = dot(vec3(_719, _722, _725), vec3(_3004 * _2998, _3004 * _2999, _3004 * _3000));
                        float _4290 = isnan(0.0) ? _3012 : (isnan(_3012) ? 0.0 : max(_3012, 0.0));
                        float _3015 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
                        float _3019 = ((_3015 * _3015) * (_2997 + (-1.0))) + 1.0;
                        float _3020 = _2955 * _2996;
                        float _3021 = _3020 * _3020;
                        float _3024 = ((1.0 - _3021) * _2945) + _3021;
                        float _4301 = isnan(0.0) ? _3024 : (isnan(_3024) ? 0.0 : max(_3024, 0.0));
                        float _3025 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
                        float _3026 = 1.0 - _2996;
                        float _3036 = (0.5 / (((_3025 * ((_3011 * _3026) + _2996)) + 9.9999999392252902907785028219223e-09) + (((_3025 * _3026) + _2996) * _3011))) * _3025;
                        float _4312 = isnan(0.0) ? _3036 : (isnan(_3036) ? 0.0 : max(_3036, 0.0));
                        float _3047 = (((_2997 * 3.1415927410125732421875) * (isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0)))) / ((_3019 * _3019) * ((_2962 * 2.1991131305694580078125) + 3.141590118408203125))) * _2951;
                        _2804 = (_2966 * _2914.x) + _2872;
                        _2805 = (_2966 * _2914.y) + _2873;
                        _2806 = (_2966 * _2914.z) + _2874;
                        _2801 = (_3047 * _2931.x) + _2869;
                        _2802 = (_3047 * _2931.y) + _2870;
                        _2803 = (_3047 * _2931.z) + _2871;
                        if (_2876 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2869 = _2801;
                            _2870 = _2802;
                            _2871 = _2803;
                            _2872 = _2804;
                            _2873 = _2805;
                            _2874 = _2806;
                            _2875 = _2876;
                        }
                    }
                    frontier_phi_61_pred = _2801;
                    frontier_phi_61_pred_1 = _2806;
                    frontier_phi_61_pred_2 = _2805;
                    frontier_phi_61_pred_3 = _2804;
                    frontier_phi_61_pred_4 = _2803;
                    frontier_phi_61_pred_5 = _2802;
                }
                _2601 = frontier_phi_61_pred;
                _2611 = frontier_phi_61_pred_1;
                _2609 = frontier_phi_61_pred_2;
                _2607 = frontier_phi_61_pred_3;
                _2605 = frontier_phi_61_pred_4;
                _2603 = frontier_phi_61_pred_5;
                uint _2752 = _2751 + 1u;
                if (_2752 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2745 = _2601;
                    _2746 = _2603;
                    _2747 = _2605;
                    _2748 = _2607;
                    _2749 = _2609;
                    _2750 = _2611;
                    _2751 = _2752;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2600 = _2601;
            _2602 = _2603;
            _2604 = _2605;
            _2606 = _2607;
            _2608 = _2609;
            _2610 = _2611;
        }
        uvec4 _2614 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2615 = _2614.z;
        uint _2617 = (_2615 >> 8u) & 15u;
        float _2713;
        float _2715;
        float _2717;
        float _2719;
        float _2721;
        float _2723;
        if (((4294967295u << _2617) & _2499) == 0u)
        {
            _2713 = _2600;
            _2715 = _2602;
            _2717 = _2604;
            _2719 = _2606;
            _2721 = _2608;
            _2723 = _2610;
        }
        else
        {
            float _2738 = inversesqrt(dot(vec3(_2453, _2454, _2455), vec3(_2453, _2454, _2455)));
            float _2739 = _2738 * _2453;
            float _2740 = _2738 * _2454;
            float _2741 = _2738 * _2455;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2617 < ((_2615 >> 12u) & 15u))
            {
                float _2714;
                float _2716;
                float _2718;
                float _2720;
                float _2722;
                float _2724;
                float _2852 = _2600;
                float _2853 = _2602;
                float _2854 = _2604;
                float _2855 = _2606;
                float _2856 = _2608;
                float _2857 = _2610;
                uint _2858 = _2617;
                uint _2867;
                bool _2868;
                for (;;)
                {
                    _2867 = texelFetch(g_lightClassification, int((((_2493 << 5u) + (_2479 << 9u)) + (_2858 << 2u)) >> 2u)).x;
                    _2868 = _2867 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2868)
                    {
                        frontier_phi_67_pred = _2855;
                        frontier_phi_67_pred_1 = _2856;
                        frontier_phi_67_pred_2 = _2857;
                        frontier_phi_67_pred_3 = _2854;
                        frontier_phi_67_pred_4 = _2853;
                        frontier_phi_67_pred_5 = _2852;
                    }
                    else
                    {
                        float _3052;
                        float _3053;
                        float _3054;
                        float _3055;
                        float _3056;
                        float _3057;
                        float _3346;
                        float _3347;
                        float _3348;
                        float _3349;
                        float _3350;
                        float _3351;
                        float _3065 = _2852;
                        float _3066 = _2853;
                        float _3067 = _2854;
                        float _3068 = _2855;
                        float _3069 = _2856;
                        float _3070 = _2857;
                        uint _3071 = _2867;
                        uint _3072;
                        vec4 _3097;
                        float _3098;
                        vec4 _3113;
                        vec3 _3125;
                        vec4 _3140;
                        vec4 _3156;
                        float _3202;
                        bool _3203;
                        for (;;)
                        {
                            uint _3082 = ((_2858 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3071));
                            _3072 = (_3071 + 4294967295u) & _3071;
                            uint _3084 = _3082 * 40u;
                            _3097 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3084)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 3u)).x));
                            _3098 = _3097.w;
                            uint _3100 = (_3082 * 40u) + 4u;
                            _3113 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3100)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 3u)).x));
                            uint _3115 = (_3082 * 40u) + 8u;
                            _3125 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3115)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 2u)).x));
                            uint _3127 = (_3082 * 40u) + 16u;
                            _3140 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3127)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 3u)).x));
                            uint _3143 = (_3082 * 40u) + 20u;
                            _3156 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3143)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 3u)).x));
                            uint _3158 = (_3082 * 40u) + 24u;
                            vec4 _3171 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3158)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 3u)).x));
                            uint _3177 = (_3082 * 40u) + 28u;
                            vec4 _3190 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3177)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3177 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3177 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3177 + 3u)).x));
                            _3202 = fma(_2455, _3190.z, fma(_2454, _3190.y, _3190.x * _2453)) + _3190.w;
                            _3203 = !((fma(_2455, _3171.z, fma(_2454, _3171.y, _3171.x * _2453)) + _3171.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3203)
                            {
                                float _3230 = _3097.x - _2453;
                                float _3231 = _3097.y - _2454;
                                float _3232 = _3097.z - _2455;
                                float _3233 = dot(vec3(_3230, _3231, _3232), vec3(_3230, _3231, _3232));
                                float _3236 = inversesqrt(_3233);
                                float _3237 = _3236 * _3230;
                                float _3238 = _3236 * _3231;
                                float _3239 = _3236 * _3232;
                                float _3243 = 1.0 - (_3233 / (_3098 * _3098));
                                float _4323 = isnan(0.0) ? _3243 : (isnan(_3243) ? 0.0 : max(_3243, 0.0));
                                float _3244 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
                                float _3248 = sqrt(_3233) * _3113.w;
                                float _3250 = 1.39999997615814208984375 / (_3248 + 1.39999997615814208984375);
                                float _3251 = _3250 * _3250;
                                float _3254 = ((1.0 - _3251) * dot(vec3(_3237, _3238, _3239), vec3(_719, _722, _725))) + _3251;
                                float _3257 = _3248 * _3248;
                                float _3261 = (fma(_2455, _3140.z, fma(_2454, _3140.y, _3140.x * _2453)) + _3140.w) / _3202;
                                float _3262 = (fma(_2455, _3156.z, fma(_2454, _3156.y, _3156.x * _2453)) + _3156.w) / _3202;
                                float _3266 = 1.0 - dot(vec2(_3261, _3262), vec2(_3261, _3262));
                                float _4339 = isnan(0.0) ? _3266 : (isnan(_3266) ? 0.0 : max(_3266, 0.0));
                                float _3267 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
                                float _3268 = _3267 * (((isnan(0.0) ? _3254 : (isnan(_3254) ? 0.0 : max(_3254, 0.0))) * _3244) / ((_3257 * 0.699999988079071044921875) + 1.0));
                                float _3280 = exp2(log2(1.0 / ((_3257 * 3.5) + 5.0)) * 0.25);
                                float _3281 = 1.0 - _794;
                                float _3288 = sqrt(1.0 - ((1.0 - (_3281 * _3281)) * (1.0 - (_3280 * _3280))));
                                float _3289 = _3288 * _3288;
                                float _3290 = _3289 * _3289;
                                float _3291 = _3237 - _2739;
                                float _3292 = _3238 - _2740;
                                float _3293 = _3239 - _2741;
                                float _3297 = inversesqrt(dot(vec3(_3291, _3292, _3293), vec3(_3291, _3292, _3293)));
                                float _3301 = dot(vec3(_719, _722, _725), vec3((-0.0) - _2739, (-0.0) - _2740, (-0.0) - _2741));
                                float _4350 = isnan(0.0) ? _3301 : (isnan(_3301) ? 0.0 : max(_3301, 0.0));
                                float _3304 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
                                float _3305 = dot(vec3(_719, _722, _725), vec3(_3297 * _3291, _3297 * _3292, _3297 * _3293));
                                float _4361 = isnan(0.0) ? _3305 : (isnan(_3305) ? 0.0 : max(_3305, 0.0));
                                float _3308 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
                                float _3312 = ((_3308 * _3308) * (_3290 + (-1.0))) + 1.0;
                                float _3313 = _3250 * _3289;
                                float _3314 = _3313 * _3313;
                                float _3320 = ((1.0 - _3314) * dot(vec3(_719, _722, _725), vec3(_3237, _3238, _3239))) + _3314;
                                float _4372 = isnan(0.0) ? _3320 : (isnan(_3320) ? 0.0 : max(_3320, 0.0));
                                float _3321 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
                                float _3322 = 1.0 - _3289;
                                float _3332 = (0.5 / (((_3321 * ((_3304 * _3322) + _3289)) + 9.9999999392252902907785028219223e-09) + (((_3321 * _3322) + _3289) * _3304))) * _3321;
                                float _4383 = isnan(0.0) ? _3332 : (isnan(_3332) ? 0.0 : max(_3332, 0.0));
                                float _3342 = (_3267 * _3244) * (((_3290 * 3.1415927410125732421875) * (isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0)))) / ((_3312 * _3312) * ((_3257 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3342 * _3125.x;
                                frontier_phi_73_pred_1 = _3342 * _3125.y;
                                frontier_phi_73_pred_2 = _3268 * _3113.z;
                                frontier_phi_73_pred_3 = _3268 * _3113.y;
                                frontier_phi_73_pred_4 = _3268 * _3113.x;
                                frontier_phi_73_pred_5 = _3342 * _3125.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3346 = frontier_phi_73_pred;
                            _3347 = frontier_phi_73_pred_1;
                            _3351 = frontier_phi_73_pred_2;
                            _3350 = frontier_phi_73_pred_3;
                            _3349 = frontier_phi_73_pred_4;
                            _3348 = frontier_phi_73_pred_5;
                            _3055 = _3349 + _3068;
                            _3056 = _3350 + _3069;
                            _3057 = _3351 + _3070;
                            _3052 = _3346 + _3065;
                            _3053 = _3347 + _3066;
                            _3054 = _3348 + _3067;
                            if (_3072 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3065 = _3052;
                                _3066 = _3053;
                                _3067 = _3054;
                                _3068 = _3055;
                                _3069 = _3056;
                                _3070 = _3057;
                                _3071 = _3072;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3055;
                        frontier_phi_67_pred_1 = _3056;
                        frontier_phi_67_pred_2 = _3057;
                        frontier_phi_67_pred_3 = _3054;
                        frontier_phi_67_pred_4 = _3053;
                        frontier_phi_67_pred_5 = _3052;
                    }
                    _2720 = frontier_phi_67_pred;
                    _2722 = frontier_phi_67_pred_1;
                    _2724 = frontier_phi_67_pred_2;
                    _2718 = frontier_phi_67_pred_3;
                    _2716 = frontier_phi_67_pred_4;
                    _2714 = frontier_phi_67_pred_5;
                    uint _2859 = _2858 + 1u;
                    if (_2859 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2852 = _2714;
                        _2853 = _2716;
                        _2854 = _2718;
                        _2855 = _2720;
                        _2856 = _2722;
                        _2857 = _2724;
                        _2858 = _2859;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2722;
                frontier_phi_55_56_ladder_1 = _2724;
                frontier_phi_55_56_ladder_2 = _2720;
                frontier_phi_55_56_ladder_3 = _2718;
                frontier_phi_55_56_ladder_4 = _2716;
                frontier_phi_55_56_ladder_5 = _2714;
            }
            else
            {
                frontier_phi_55_56_ladder = _2608;
                frontier_phi_55_56_ladder_1 = _2610;
                frontier_phi_55_56_ladder_2 = _2606;
                frontier_phi_55_56_ladder_3 = _2604;
                frontier_phi_55_56_ladder_4 = _2602;
                frontier_phi_55_56_ladder_5 = _2600;
            }
            _2713 = frontier_phi_55_56_ladder_5;
            _2715 = frontier_phi_55_56_ladder_4;
            _2717 = frontier_phi_55_56_ladder_3;
            _2719 = frontier_phi_55_56_ladder_2;
            _2721 = frontier_phi_55_56_ladder;
            _2723 = frontier_phi_55_56_ladder_1;
        }
        float _2728 = isnan(1.0) ? _778 : (isnan(_778) ? 1.0 : min(_778, 1.0));
        _2512 = (_2728 * _2719) + _1948;
        _2514 = (_2728 * _2721) + _1950;
        _2516 = (_2728 * _2723) + _1952;
        _2518 = ((_2713 * _762) * _2728) + _2293;
        _2520 = ((_2715 * _764) * _2728) + _2295;
        _2522 = ((_2717 * _765) * _2728) + _2297;
    }
    else
    {
        _2512 = _1948;
        _2514 = _1950;
        _2516 = _1952;
        _2518 = _2293;
        _2520 = _2295;
        _2522 = _2297;
    }
    float _4399 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
    float _4410 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _4421 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    uint _2542 = _234 + 6u;
    float _2550 = _700 / cbSceneParam._m0[86u].x;
    float _2551 = _701 / cbSceneParam._m0[86u].y;
    vec4 _2565 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2550, _2551, (log2((isnan(cbSceneParam._m0[77u].w) ? _634 : (isnan(_634) ? cbSceneParam._m0[77u].w : min(_634, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2567 = _2565.x;
    float _2568 = _2565.y;
    float _2569 = _2565.z;
    float _2570 = _2565.w;
    float _2663;
    float _2665;
    float _2667;
    float _2669;
    if (_634 > cbSceneParam._m0[78u].w)
    {
        float _2625 = isnan(_634) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _634 : min(cbSceneParam._m0[80u].w, _634));
        float _2626 = _2625 / _634;
        float _2637 = _2626 * _685;
        float _2638 = _686 * _2626;
        float _2639 = (-0.0) - _2638;
        float _2641 = _2626 * _687;
        float _2643 = (cbSceneParam._m0[77u].w * _2639) / _2625;
        float _2644 = _2643 + cbSceneParam._m0[79u].w;
        float _2645 = cbSceneParam._m0[79u].w - _2638;
        float _2651 = sqrt(((_2637 * _2637) + (_2638 * _2638)) + (_2641 * _2641));
        float _2654 = (1.0 - (cbSceneParam._m0[77u].w / _2625)) * _2651;
        float _2659 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2661 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2814;
        if (abs((_2639 - _2643) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2814 = ((((_2644 > 0.0) ? exp2(_2659 * _2644) : (2.0 - exp2(_2661 * _2644))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2654;
        }
        else
        {
            float _2774 = 1.0 / cbSceneParam._m0[80u].x;
            float _2775 = isnan(_2645) ? _2644 : (isnan(_2644) ? _2645 : max(_2644, _2645));
            float _2776 = isnan(_2645) ? _2644 : (isnan(_2644) ? _2645 : min(_2644, _2645));
            float _2785 = isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : min(_2775, 0.0));
            float _2786 = isnan(0.0) ? _2776 : (isnan(_2776) ? 0.0 : min(_2776, 0.0));
            _2814 = ((abs(_2651 / _2639) * cbSceneParam._m0[80u].y) * ((((_2785 - _2786) * 2.0) - ((exp2(_2659 * (isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : max(_2775, 0.0)))) - exp2(_2659 * (isnan(0.0) ? _2776 : (isnan(_2776) ? 0.0 : max(_2776, 0.0))))) * _2774)) - ((exp2(_2661 * _2785) - exp2(_2661 * _2786)) * _2774))) + (_2654 * cbSceneParam._m0[80u].z);
        }
        vec4 _2816 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2550, _2551, 1.0), 0.0);
        float _2825 = exp2((_2814 * (-1.44269502162933349609375)) * (1.0 - _2816.w));
        float _2826 = log2(_2825);
        float _2842 = log2(_2570);
        _2663 = (exp2(_2842 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2826 * cbSceneParam._m0[78u].x)) * _2816.x) / cbSceneParam._m0[78u].x)) + _2567;
        _2665 = (exp2(_2842 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2826 * cbSceneParam._m0[78u].y)) * _2816.y) / cbSceneParam._m0[78u].y)) + _2568;
        _2667 = (exp2(_2842 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2826 * cbSceneParam._m0[78u].z)) * _2816.z) / cbSceneParam._m0[78u].z)) + _2569;
        _2669 = _2825 * _2570;
    }
    else
    {
        _2663 = _2567;
        _2665 = _2568;
        _2667 = _2569;
        _2669 = _2570;
    }
    float _2681 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2682 = _2681 == 3.0;
    float _2683 = log2(_2669);
    float _2690 = exp2(_2683 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0))) * (_2512 + ((isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0))) * _778))) + ((_2518 + ((isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0))) * _1586)) * cbPerFrame._m0[3u].x));
    float _2691 = exp2(_2683 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0))) * (_2514 + ((isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0))) * _778))) + ((_2520 + ((isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0))) * _1586)) * cbPerFrame._m0[3u].x));
    float _2692 = exp2(_2683 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0))) * (_2516 + ((isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0))) * _778))) + ((_2522 + ((isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0))) * _1586)) * cbPerFrame._m0[3u].x));
    float _2701 = (_2681 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2701 * (_2682 ? _2690 : (_2690 + (cbSceneParam._m0[72u].w * _2663)));
    SV_Target.y = _2701 * (_2682 ? _2691 : (_2691 + (cbSceneParam._m0[72u].w * _2665)));
    SV_Target.z = _2701 * (_2682 ? _2692 : (_2692 + (cbSceneParam._m0[72u].w * _2667)));
    SV_Target.w = cbInstanceData._m0[_2542].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2542].w;
}


