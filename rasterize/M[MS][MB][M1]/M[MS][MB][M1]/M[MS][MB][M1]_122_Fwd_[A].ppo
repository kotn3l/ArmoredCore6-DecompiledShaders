#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1479;
float _3859;
float _3860;
float _3861;
float _3862;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _236 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _237 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _238 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _244 = inversesqrt(dot(vec3(_236, _237, _238), vec3(_236, _237, _238)));
    float _245 = _244 * _236;
    float _246 = _244 * _237;
    float _247 = _244 * _238;
    float _251 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _252 = _251 * NORMAL.x;
    float _253 = _251 * NORMAL.y;
    float _254 = _251 * NORMAL.z;
    float _258 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _259 = _258 * TANGENT.x;
    float _260 = _258 * TANGENT.y;
    float _261 = _258 * TANGENT.z;
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _273 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3871 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _3882 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _3893 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    uint _283 = uint(roundEven(NORMAL.w)) * 13u;
    uint _288 = _283 + 1u;
    uint _292 = _283 + 2u;
    float _301 = sqrt(((cbInstanceData._m0[_288].x * cbInstanceData._m0[_288].x) + (cbInstanceData._m0[_283].x * cbInstanceData._m0[_283].x)) + (cbInstanceData._m0[_292].x * cbInstanceData._m0[_292].x));
    float _302 = _301 * TEXCOORD.z;
    float _303 = _301 * TEXCOORD.w;
    vec4 _316 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _302) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _303) + cbTextureTilingScale._m0[13u].w));
    vec4 _340 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _345 = _340.x * cbMtdParam._m0[11u].x;
    float _346 = _340.y * cbMtdParam._m0[11u].y;
    float _347 = _340.z * cbMtdParam._m0[11u].z;
    vec4 _366 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _302) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _303) + cbTextureTilingScale._m0[5u].w));
    vec4 _402 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _404 = _402.x;
    float _416 = dot(vec4(_404, _402.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _433 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_404 - _416) * cbMtdParam._m0[24u].y) + _416) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3904 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _434 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
    float _441 = (_434 * ((_366.x * cbMtdParam._m0[12u].x) - _345)) + _345;
    float _442 = (_434 * ((_366.y * cbMtdParam._m0[12u].y) - _346)) + _346;
    float _443 = (_434 * ((_366.z * cbMtdParam._m0[12u].z) - _347)) + _347;
    float _447 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _316.x) * _441;
    float _450 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _316.y) * _442;
    float _453 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _316.z) * _443;
    float _460 = ((_441 - _447) * (isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0)))) + _447;
    float _461 = ((_442 - _450) * (isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0)))) + _450;
    float _462 = ((_443 - _453) * (isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0)))) + _453;
    vec4 _480 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _302) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _303) + cbTextureTilingScale._m0[20u].w));
    vec4 _507 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _302) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _303) + cbTextureTilingScale._m0[4u].w));
    vec4 _524 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _526 = _524.x;
    float _527 = _524.y;
    float _528 = _524.z;
    float _537 = ((_507.z - _528) * _434) + _528;
    float _540 = ((((_507.x - _526) * _434) + _526) * 2.0) + (-1.0);
    float _541 = ((((_507.y - _527) * _434) + _527) * 2.0) + (-1.0);
    float _542 = dot(vec2(_540, _541), vec2(_540, _541));
    float _3915 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _547 = sqrt(1.0 - (isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0))));
    vec4 _567 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _579 = (_540 + ((((_480.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_567.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _580 = (_541 + ((((_480.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_567.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _583 = fma(_547, _252, fma(_580, _259, _579 * _245));
    float _586 = fma(_547, _253, fma(_580, _260, _579 * _246));
    float _589 = fma(_547, _254, fma(_580, _261, _579 * _247));
    float _593 = inversesqrt(dot(vec3(_583, _586, _589), vec3(_583, _586, _589)));
    vec4 _620 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _302) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _303) + cbTextureTilingScale._m0[11u].w));
    float _622 = _620.x;
    float _623 = 1.0 - _622;
    float _627 = ((_622 - _623) * cbMtdParam._m0[24u].z) + _623;
    float _629 = (cbMtdParam._m0[19u].x + dot(vec4(_593 * _583, _593 * _586, _593 * _589, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_627 * cbMtdParam._m0[21u].z);
    float _3926 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _630 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
    float _632 = (-0.0) - cbMtdParam._m0[24u].x;
    float _634 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _635 = isnan(1.0) ? _634 : (isnan(_634) ? 1.0 : min(_634, 1.0));
    float _642 = _630 - ((_630 * TEXCOORD_8.x) * _635);
    float _643 = _630 - ((_630 * TEXCOORD_8.y) * _635);
    float _644 = _630 - ((_630 * TEXCOORD_8.z) * _635);
    float _651 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _655 = ((isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : min(_651, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _663 = (_655 - (((_627 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _655))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3957 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _664 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
    float _668 = ((_642 * (cbMtdParam._m0[17u].x - _460)) * _664) + _460;
    float _669 = ((_643 * (cbMtdParam._m0[17u].y - _461)) * _664) + _461;
    float _670 = ((_644 * (cbMtdParam._m0[17u].z - _462)) * _664) + _462;
    vec4 _682 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _302) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _303) + cbTextureTilingScale._m0[19u].w));
    float _684 = _682.x;
    float _685 = 1.0 - _684;
    float _710 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_684 - _685) * cbMtdParam._m0[24u].w) + _685) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3968 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
    float _711 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
    float _719 = ((((cbMtdParam._m0[10u].x - _668) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _711) + _668;
    float _720 = ((((cbMtdParam._m0[10u].y - _669) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _711) + _669;
    float _721 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _670)) * _711) + _670;
    vec4 _747 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _749 = _747.x;
    float _767 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _302) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _303) + cbTextureTilingScale._m0[9u].w)).x - _749) * _434) + _749;
    float _771 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _767) * cbMtdParam._m0[19u].z) + _767;
    float _774 = _771 - ((_664 * _642) * _771);
    float _776 = _774 - (_774 * _711);
    float _781 = (((_480.z - _537) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _537;
    float _785 = ((_567.z - _781) * cbMtdParam._m0[19u].w) + _781;
    vec4 _799 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _302) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _303) + cbTextureTilingScale._m0[15u].w));
    float _806 = (_799.x * 2.0) + (-1.0);
    float _807 = (_799.y * 2.0) + (-1.0);
    float _808 = dot(vec2(_806, _807), vec2(_806, _807));
    float _3979 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
    float _817 = (((_799.z - _785) * _642) * _664) + _785;
    float _820 = ((cbMtdParam._m0[23u].y - _817) * _711) + _817;
    vec4 _839 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _302) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _303) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _845 = (_839.x * 2.0) + (-1.0);
    float _846 = (_839.y * 2.0) + (-1.0);
    float _847 = dot(vec2(_845, _846), vec2(_845, _846));
    float _3990 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
    float _867 = (((cbMtdParam._m0[21u].x * _579) + ((_806 - _579) * _642)) * _664) + _579;
    float _868 = (((cbMtdParam._m0[21u].x * _580) + ((_807 - _580) * _643)) * _664) + _580;
    float _869 = (((sqrt(1.0 - (isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0)))) - _547) * _644) * _664) + _547;
    float _880 = (((_845 - _867) + (_867 * cbMtdParam._m0[22u].z)) * _711) + _867;
    float _881 = (((_846 - _868) + (_868 * cbMtdParam._m0[22u].z)) * _711) + _868;
    float _882 = ((sqrt(1.0 - (isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0)))) - _869) * _711) + _869;
    float _886 = cbMtdParam._m0[22u].x + _567.w;
    float _889 = fma(_882, _252, fma(_881, _259, _880 * _245));
    float _892 = fma(_882, _253, fma(_881, _260, _880 * _246));
    float _895 = fma(_882, _254, fma(_881, _261, _880 * _247));
    float _899 = inversesqrt(dot(vec3(_889, _892, _895), vec3(_889, _892, _895)));
    float _900 = _899 * _889;
    float _901 = _899 * _892;
    float _902 = _899 * _895;
    float _4001 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
    float _903 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
    float _4012 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
    float _4023 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
    float _4034 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
    float _4045 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
    float _4056 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
    float _908 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
    float _922 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _962 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _972 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _962);
    float _973 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _962);
    float _974 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _962);
    float _978 = inversesqrt(dot(vec3(_972, _973, _974), vec3(_972, _973, _974)));
    float _979 = _972 * _978;
    float _980 = _973 * _978;
    float _981 = _974 * _978;
    vec4 _986 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _988 = _986.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1160 = sqrt(((_972 * _972) + (_973 * _973)) + (_974 * _974));
        float _1166 = (cbMatDynParam._m0[5u].x * _1160) + cbMatDynParam._m0[5u].y;
        float _4067 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1167 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
        float _1171 = (cbMatDynParam._m0[5u].z * _1160) + cbMatDynParam._m0[5u].w;
        float _4078 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0))) - _1167)) + _1167) < ((_988 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _999 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1000 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1018 = fma(_902, cbSceneParam._m0[5u].z, fma(_901, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _900));
    float _1021 = fma(_902, cbSceneParam._m0[6u].z, fma(_901, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _900));
    float _1024 = fma(_902, cbSceneParam._m0[7u].z, fma(_901, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _900));
    uint _1037 = _283 + 9u;
    uint _1038 = _1037 + uint(cbMatDynParam._m0[0u].w);
    float _1044 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0)))) * cbInstanceData._m0[_1038].x;
    float _1045 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0)))) * cbInstanceData._m0[_1038].y;
    float _1046 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0)))) * cbInstanceData._m0[_1038].z;
    float _4089 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
    float _1047 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
    float _4100 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
    float _1048 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
    float _4111 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
    float _1049 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
    float _1050 = 1.0 - _908;
    float _1051 = _1047 * _1050;
    float _1052 = _1048 * _1050;
    float _1053 = _1049 * _1050;
    float _1058 = (_1047 + (-0.039999999105930328369140625)) * _908;
    float _1059 = (_1048 + (-0.039999999105930328369140625)) * _908;
    float _1060 = (_1049 + (-0.039999999105930328369140625)) * _908;
    float _1061 = _1058 + 0.039999999105930328369140625;
    float _1063 = _1059 + 0.039999999105930328369140625;
    float _1064 = _1060 + 0.039999999105930328369140625;
    vec4 _1073 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _999, cbSceneParam._m0[86u].y * _1000));
    float _1077 = ((isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0))) * TEXCOORD_5.w) * _1073.x;
    float _1078 = dot(vec3(_900, _901, _902), vec3(_979, _980, _981));
    float _1081 = _1078 * 2.0;
    float _1085 = (_1081 * _900) - _979;
    float _1086 = (_1081 * _901) - _980;
    float _1087 = (_1081 * _902) - _981;
    float _1091 = abs(dot(vec3(_979, _980, _981), vec3(_900, _901, _902)));
    float _4122 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
    float _1093 = sqrt(_903);
    float _1106 = exp2((_1093 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1093 * 3.0));
    float _1112 = (1.0 - _1106) * ((_1093 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1113 = _1106 * _1093;
    float _1141 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1145 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1149 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1478;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1203 = fma(_1149, cbModelParam._m0[26u].z, fma(_1145, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1141));
        float _1207 = fma(_1149, cbModelParam._m0[27u].z, fma(_1145, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1141));
        float _1211 = fma(_1149, cbModelParam._m0[28u].z, fma(_1145, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1141));
        float _1236 = _1141 + _900;
        float _1237 = _1145 + _901;
        float _1238 = _1149 + _902;
        float _1248 = fma(_1238, cbModelParam._m0[26u].z, fma(_1237, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1236)) - _1203;
        float _1249 = fma(_1238, cbModelParam._m0[27u].z, fma(_1237, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1236)) - _1207;
        float _1250 = fma(_1238, cbModelParam._m0[28u].z, fma(_1237, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1236)) - _1211;
        float _1254 = inversesqrt(dot(vec3(_1248, _1249, _1250), vec3(_1248, _1249, _1250)));
        float _1267 = ((_1254 * _1248) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1203 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1268 = ((_1254 * _1249) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1207 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1269 = ((_1254 * _1250) / cbModelParam._m0[34u].z) + ((((((_1211 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1272 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1267, _1268, _1269), 0.0);
        vec4 _1279 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1267, _1268, _1269), 0.0);
        vec4 _1286 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1267, _1268, _1269), 0.0);
        vec4 _1293 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1267, _1268, _1269), 0.0);
        float _1306 = exp2((_1272.w + (-0.5)) * 20.0) * 2.0;
        float _1307 = _1306 * (_1272.x + (-0.5));
        float _1308 = _1306 * (_1272.y + (-0.5));
        float _1309 = _1306 * (_1272.z + (-0.5));
        float _1316 = exp2((_1279.w + (-0.5)) * 20.0) * 2.0;
        float _1317 = _1316 * (_1279.x + (-0.5));
        float _1318 = _1316 * (_1279.y + (-0.5));
        float _1319 = _1316 * (_1279.z + (-0.5));
        float _1326 = exp2((_1286.w + (-0.5)) * 20.0) * 2.0;
        float _1327 = _1326 * (_1286.x + (-0.5));
        float _1328 = _1326 * (_1286.y + (-0.5));
        float _1329 = _1326 * (_1286.z + (-0.5));
        float _1336 = exp2((_1293.w + (-0.5)) * 20.0) * 2.0;
        float _1337 = _1336 * (_1293.x + (-0.5));
        float _1338 = _1336 * (_1293.y + (-0.5));
        float _1339 = _1336 * (_1293.z + (-0.5));
        float _1340 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1341 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1342 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1343 = _1307 * 0.5;
        float _1344 = _1317 * 0.5;
        float _1345 = _1327 * 0.5;
        float _1346 = dot(vec3(_1343, _1344, _1345), vec3(_1343, _1344, _1345));
        float _1351 = (_1346 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1346);
        float _1360 = (dot(vec3(_900, _901, _902), vec3(_1351 * _1343, _1351 * _1344, _1351 * _1345)) + 1.0) * 0.5;
        float _4148 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1370 = sqrt(((_1344 * _1344) + (_1343 * _1343)) + (_1345 * _1345)) / (_1340 + 9.9999997473787516355514526367188e-06);
        float _4159 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1371 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
        float _1372 = _1371 * 2.0;
        float _1376 = (1.0 - _1371) / (_1371 + 1.0);
        float _4170 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1377 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
        float _1386 = ((((1.0 - _1377) * (_1372 + 2.0)) * exp2(log2(isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0))) * (_1372 + 1.0))) + _1377) * _1340;
        float _1387 = _1308 * 0.5;
        float _1388 = _1318 * 0.5;
        float _1389 = _1328 * 0.5;
        float _1390 = dot(vec3(_1387, _1388, _1389), vec3(_1387, _1388, _1389));
        float _1395 = (_1390 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1390);
        float _1403 = (dot(vec3(_900, _901, _902), vec3(_1395 * _1387, _1395 * _1388, _1395 * _1389)) + 1.0) * 0.5;
        float _4181 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1412 = sqrt(((_1388 * _1388) + (_1387 * _1387)) + (_1389 * _1389)) / (_1341 + 9.9999997473787516355514526367188e-06);
        float _4192 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1413 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
        float _1414 = _1413 * 2.0;
        float _1418 = (1.0 - _1413) / (_1413 + 1.0);
        float _4203 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1419 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
        float _1428 = ((((1.0 - _1419) * (_1414 + 2.0)) * exp2(log2(isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0))) * (_1414 + 1.0))) + _1419) * _1341;
        float _1429 = _1309 * 0.5;
        float _1430 = _1319 * 0.5;
        float _1431 = _1329 * 0.5;
        float _1432 = dot(vec3(_1429, _1430, _1431), vec3(_1429, _1430, _1431));
        float _1437 = (_1432 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1432);
        float _1445 = (dot(vec3(_900, _901, _902), vec3(_1437 * _1429, _1437 * _1430, _1437 * _1431)) + 1.0) * 0.5;
        float _4214 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1454 = sqrt(((_1430 * _1430) + (_1429 * _1429)) + (_1431 * _1431)) / (_1342 + 9.9999997473787516355514526367188e-06);
        float _4225 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1455 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
        float _1456 = _1455 * 2.0;
        float _1460 = (1.0 - _1455) / (_1455 + 1.0);
        float _4236 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1461 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
        float _1470 = ((((1.0 - _1461) * (_1456 + 2.0)) * exp2(log2(isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0))) * (_1456 + 1.0))) + _1461) * _1342;
        _1478 = _1309;
        _1480 = _1308;
        _1481 = _1307;
        _1482 = _1319;
        _1483 = _1318;
        _1484 = _1317;
        _1485 = _1329;
        _1486 = _1328;
        _1487 = _1327;
        _1488 = _1342;
        _1489 = _1341;
        _1490 = _1340;
        _1491 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0)));
        _1492 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0)));
        _1493 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0)));
    }
    else
    {
        _1478 = _1479;
        _1480 = _1479;
        _1481 = _1479;
        _1482 = _1479;
        _1483 = _1479;
        _1484 = _1479;
        _1485 = _1479;
        _1486 = _1479;
        _1487 = _1479;
        _1488 = _1479;
        _1489 = _1479;
        _1490 = _1479;
        _1491 = 0.0;
        _1492 = 0.0;
        _1493 = 0.0;
    }
    float _1790;
    float _1791;
    float _1792;
    float _1793;
    float _1794;
    float _1795;
    float _1796;
    float _1797;
    float _1798;
    float _1799;
    float _1800;
    float _1801;
    float _1802;
    float _1803;
    float _1804;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1521 = fma(_1149, cbModelParam._m0[30u].z, fma(_1145, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1141));
        float _1525 = fma(_1149, cbModelParam._m0[31u].z, fma(_1145, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1141));
        float _1529 = fma(_1149, cbModelParam._m0[32u].z, fma(_1145, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1141));
        float _1552 = _1141 + _900;
        float _1553 = _1145 + _901;
        float _1554 = _1149 + _902;
        float _1564 = fma(_1554, cbModelParam._m0[30u].z, fma(_1553, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1552)) - _1521;
        float _1565 = fma(_1554, cbModelParam._m0[31u].z, fma(_1553, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1552)) - _1525;
        float _1566 = fma(_1554, cbModelParam._m0[32u].z, fma(_1553, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1552)) - _1529;
        float _1570 = inversesqrt(dot(vec3(_1564, _1565, _1566), vec3(_1564, _1565, _1566)));
        float _1583 = ((_1570 * _1564) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1521 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1584 = ((_1570 * _1565) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1525 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1585 = ((_1570 * _1566) / cbModelParam._m0[35u].z) + ((((((_1529 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1587 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1583, _1584, _1585), 0.0);
        vec4 _1594 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1583, _1584, _1585), 0.0);
        vec4 _1601 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1583, _1584, _1585), 0.0);
        vec4 _1608 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1583, _1584, _1585), 0.0);
        float _1620 = exp2((_1587.w + (-0.5)) * 20.0) * 2.0;
        float _1621 = _1620 * (_1587.x + (-0.5));
        float _1622 = _1620 * (_1587.y + (-0.5));
        float _1623 = _1620 * (_1587.z + (-0.5));
        float _1630 = exp2((_1594.w + (-0.5)) * 20.0) * 2.0;
        float _1631 = _1630 * (_1594.x + (-0.5));
        float _1632 = _1630 * (_1594.y + (-0.5));
        float _1633 = _1630 * (_1594.z + (-0.5));
        float _1640 = exp2((_1601.w + (-0.5)) * 20.0) * 2.0;
        float _1641 = _1640 * (_1601.x + (-0.5));
        float _1642 = _1640 * (_1601.y + (-0.5));
        float _1643 = _1640 * (_1601.z + (-0.5));
        float _1650 = exp2((_1608.w + (-0.5)) * 20.0) * 2.0;
        float _1651 = _1650 * (_1608.x + (-0.5));
        float _1652 = _1650 * (_1608.y + (-0.5));
        float _1653 = _1650 * (_1608.z + (-0.5));
        float _1654 = isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0));
        float _1655 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
        float _1656 = isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0));
        float _1657 = _1621 * 0.5;
        float _1658 = _1631 * 0.5;
        float _1659 = _1641 * 0.5;
        float _1660 = dot(vec3(_1657, _1658, _1659), vec3(_1657, _1658, _1659));
        float _1665 = (_1660 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1660);
        float _1673 = (dot(vec3(_900, _901, _902), vec3(_1665 * _1657, _1665 * _1658, _1665 * _1659)) + 1.0) * 0.5;
        float _4277 = isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0));
        float _1682 = sqrt(((_1658 * _1658) + (_1657 * _1657)) + (_1659 * _1659)) / (_1654 + 9.9999997473787516355514526367188e-06);
        float _4288 = isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0));
        float _1683 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
        float _1684 = _1683 * 2.0;
        float _1688 = (1.0 - _1683) / (_1683 + 1.0);
        float _4299 = isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0));
        float _1689 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
        float _1698 = ((((1.0 - _1689) * (_1684 + 2.0)) * exp2(log2(isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0))) * (_1684 + 1.0))) + _1689) * _1654;
        float _1699 = _1622 * 0.5;
        float _1700 = _1632 * 0.5;
        float _1701 = _1642 * 0.5;
        float _1702 = dot(vec3(_1699, _1700, _1701), vec3(_1699, _1700, _1701));
        float _1707 = (_1702 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1702);
        float _1715 = (dot(vec3(_900, _901, _902), vec3(_1707 * _1699, _1707 * _1700, _1707 * _1701)) + 1.0) * 0.5;
        float _4310 = isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0));
        float _1724 = sqrt(((_1700 * _1700) + (_1699 * _1699)) + (_1701 * _1701)) / (_1655 + 9.9999997473787516355514526367188e-06);
        float _4321 = isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0));
        float _1725 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
        float _1726 = _1725 * 2.0;
        float _1730 = (1.0 - _1725) / (_1725 + 1.0);
        float _4332 = isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0));
        float _1731 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
        float _1740 = ((((1.0 - _1731) * (_1726 + 2.0)) * exp2(log2(isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0))) * (_1726 + 1.0))) + _1731) * _1655;
        float _1741 = _1623 * 0.5;
        float _1742 = _1633 * 0.5;
        float _1743 = _1643 * 0.5;
        float _1744 = dot(vec3(_1741, _1742, _1743), vec3(_1741, _1742, _1743));
        float _1749 = (_1744 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1744);
        float _1757 = (dot(vec3(_900, _901, _902), vec3(_1749 * _1741, _1749 * _1742, _1749 * _1743)) + 1.0) * 0.5;
        float _4343 = isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0));
        float _1766 = sqrt(((_1742 * _1742) + (_1741 * _1741)) + (_1743 * _1743)) / (_1656 + 9.9999997473787516355514526367188e-06);
        float _4354 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
        float _1767 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
        float _1768 = _1767 * 2.0;
        float _1772 = (1.0 - _1767) / (_1767 + 1.0);
        float _4365 = isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0));
        float _1773 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
        float _1782 = ((((1.0 - _1773) * (_1768 + 2.0)) * exp2(log2(isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0))) * (_1768 + 1.0))) + _1773) * _1656;
        _1790 = _1623;
        _1791 = _1622;
        _1792 = _1621;
        _1793 = _1633;
        _1794 = _1632;
        _1795 = _1631;
        _1796 = _1643;
        _1797 = _1642;
        _1798 = _1641;
        _1799 = _1656;
        _1800 = _1655;
        _1801 = _1654;
        _1802 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0)));
        _1803 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0)));
        _1804 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0)));
    }
    else
    {
        _1790 = _1479;
        _1791 = _1479;
        _1792 = _1479;
        _1793 = _1479;
        _1794 = _1479;
        _1795 = _1479;
        _1796 = _1479;
        _1797 = _1479;
        _1798 = _1479;
        _1799 = _1479;
        _1800 = _1479;
        _1801 = _1479;
        _1802 = 0.0;
        _1803 = 0.0;
        _1804 = 0.0;
    }
    float _1814 = (cbModelParam._m0[1u].x * (_1802 - _1491)) + _1491;
    float _1815 = (cbModelParam._m0[1u].x * (_1803 - _1492)) + _1492;
    float _1816 = (cbModelParam._m0[1u].x * (_1804 - _1493)) + _1493;
    float _1837 = fma(_1816, cbSceneParam._m0[89u].z, fma(_1815, cbSceneParam._m0[89u].y, _1814 * cbSceneParam._m0[89u].x));
    float _1840 = fma(_1816, cbSceneParam._m0[90u].z, fma(_1815, cbSceneParam._m0[90u].y, _1814 * cbSceneParam._m0[90u].x));
    float _1843 = fma(_1816, cbSceneParam._m0[91u].z, fma(_1815, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1814));
    float _1858 = _1085 * 0.5;
    float _1859 = _1086 * 0.5;
    float _1860 = _1087 * 0.5;
    float _1861 = dot(vec4(_1858, _1859, _1860, 1.0), vec4(_1792, _1795, _1798, _1801));
    float _1864 = dot(vec4(_1858, _1859, _1860, 1.0), vec4(_1791, _1794, _1797, _1800));
    float _1867 = dot(vec4(_1858, _1859, _1860, 1.0), vec4(_1790, _1793, _1796, _1799));
    float _1901;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1874 = dot(vec4(_1858, _1859, _1860, 1.0), vec4(_1478, _1482, _1485, _1488));
        float _1878 = dot(vec4(_1858, _1859, _1860, 1.0), vec4(_1480, _1483, _1486, _1489));
        float _1882 = dot(vec4(_1858, _1859, _1860, 1.0), vec4(_1481, _1484, _1487, _1490));
        float _1889 = dot(vec4(cbModelParam._m0[39u]), vec4(_1858, _1859, _1860, 1.0));
        _1901 = dot(vec3(isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0)), isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0)), isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1889) ? 0.0 : (isnan(0.0) ? _1889 : max(0.0, _1889))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1901 = 1.0;
    }
    float _1912;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1903 = dot(vec4(cbModelParam._m0[40u]), vec4(_1858, _1859, _1860, 1.0));
        _1912 = dot(vec3(isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0)), isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0)), isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1903) ? 0.0 : (isnan(0.0) ? _1903 : max(0.0, _1903))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1912 = 1.0;
    }
    float _1916 = (_1912 * cbModelParam._m0[1u].x) + (_1901 * (1.0 - cbModelParam._m0[1u].x));
    float _1926 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _903);
    float _1927 = isnan(_1926) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1926 : min(cbModelParam._m0[25u].z, _1926));
    float _2008;
    float _2010;
    float _2012;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1975 = fma(_1149, cbModelParam._m0[13u].z, fma(_1145, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1141)) + cbModelParam._m0[13u].w;
        float _1979 = fma(_1149, cbModelParam._m0[14u].z, fma(_1145, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1141)) + cbModelParam._m0[14u].w;
        float _1983 = fma(_1149, cbModelParam._m0[15u].z, fma(_1145, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1141)) + cbModelParam._m0[15u].w;
        float _1986 = fma(_1087, cbModelParam._m0[13u].z, fma(_1086, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1085));
        float _1989 = fma(_1087, cbModelParam._m0[14u].z, fma(_1086, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1085));
        float _1992 = fma(_1087, cbModelParam._m0[15u].z, fma(_1086, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1085));
        float _2020;
        if (_1986 > 0.0)
        {
            _2020 = abs((1.0 - _1975) / _1986);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1986 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1975 + 1.0) / _1986);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2020 = frontier_phi_17_15_ladder;
        }
        float _2223;
        if (_1989 > 0.0)
        {
            _2223 = abs((1.0 - _1979) / _1989);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1989 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1979 + 1.0) / _1989);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2223 = frontier_phi_26_22_ladder;
        }
        float _2477;
        if (_1992 > 0.0)
        {
            _2477 = abs((1.0 - _1983) / _1992);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1992 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1983 + 1.0) / _1992);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2477 = frontier_phi_38_33_ladder;
        }
        float _2479 = isnan(_2223) ? _2020 : (isnan(_2020) ? _2223 : min(_2020, _2223));
        float _2480 = isnan(_2477) ? _2479 : (isnan(_2479) ? _2477 : min(_2479, _2477));
        float _2484 = (_2480 * _1986) + _1975;
        float _2485 = (_2480 * _1989) + _1979;
        float _2486 = (_2480 * _1992) + _1983;
        float _2487 = _2480 * 9.9999997473787516355514526367188e-05;
        float _2489 = (-1.0) - _2487;
        float _2491 = _2487 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2486 > _2491) || ((_2486 < _2489) || ((_2485 > _2491) || ((_2485 < _2489) || ((_2484 < _2489) || (_2484 > _2491))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2614 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2486, cbModelParam._m0[9u].z, fma(_2485, cbModelParam._m0[9u].y, _2484 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2486, cbModelParam._m0[10u].z, fma(_2485, cbModelParam._m0[10u].y, _2484 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2486, cbModelParam._m0[11u].z, fma(_2485, cbModelParam._m0[11u].y, _2484 * cbModelParam._m0[11u].x))), _1927);
            frontier_phi_16_38_ladder = _2614.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2614.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2614.x * cbModelParam._m0[1u].y;
        }
        _2008 = frontier_phi_16_38_ladder_2;
        _2010 = frontier_phi_16_38_ladder_1;
        _2012 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1996 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1085, _1086, _1087), _1927);
        _2008 = _1996.x * cbModelParam._m0[1u].y;
        _2010 = _1996.y * cbModelParam._m0[1u].y;
        _2012 = _1996.z * cbModelParam._m0[1u].y;
    }
    float _2016 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _903);
    float _2017 = isnan(_2016) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2016 : min(cbModelParam._m0[25u].w, _2016));
    float _2107;
    float _2109;
    float _2111;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2071 = fma(_1149, cbModelParam._m0[21u].z, fma(_1145, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1141)) + cbModelParam._m0[21u].w;
        float _2075 = fma(_1149, cbModelParam._m0[22u].z, fma(_1145, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1141)) + cbModelParam._m0[22u].w;
        float _2079 = fma(_1149, cbModelParam._m0[23u].z, fma(_1145, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1141)) + cbModelParam._m0[23u].w;
        float _2082 = fma(_1087, cbModelParam._m0[21u].z, fma(_1086, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1085));
        float _2085 = fma(_1087, cbModelParam._m0[22u].z, fma(_1086, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1085));
        float _2088 = fma(_1087, cbModelParam._m0[23u].z, fma(_1086, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1085));
        float _2228;
        if (_2082 > 0.0)
        {
            _2228 = abs((1.0 - _2071) / _2082);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2082 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2071 + 1.0) / _2082);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2228 = frontier_phi_28_24_ladder;
        }
        float _2504;
        if (_2085 > 0.0)
        {
            _2504 = abs((1.0 - _2075) / _2085);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2085 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2075 + 1.0) / _2085);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2504 = frontier_phi_40_35_ladder;
        }
        float _2717;
        if (_2088 > 0.0)
        {
            _2717 = abs((1.0 - _2079) / _2088);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2088 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2079 + 1.0) / _2088);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2717 = frontier_phi_49_46_ladder;
        }
        float _2719 = isnan(_2504) ? _2228 : (isnan(_2228) ? _2504 : min(_2228, _2504));
        float _2720 = isnan(_2717) ? _2719 : (isnan(_2719) ? _2717 : min(_2719, _2717));
        float _2724 = (_2720 * _2082) + _2071;
        float _2725 = (_2720 * _2085) + _2075;
        float _2726 = (_2720 * _2088) + _2079;
        float _2727 = _2720 * 9.9999997473787516355514526367188e-05;
        float _2728 = (-1.0) - _2727;
        float _2730 = _2727 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2726 > _2730) || ((_2726 < _2728) || ((_2725 > _2730) || ((_2725 < _2728) || ((_2724 < _2728) || (_2724 > _2730))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2925 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2726, cbModelParam._m0[17u].z, fma(_2725, cbModelParam._m0[17u].y, _2724 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2726, cbModelParam._m0[18u].z, fma(_2725, cbModelParam._m0[18u].y, _2724 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2726, cbModelParam._m0[19u].z, fma(_2725, cbModelParam._m0[19u].y, _2724 * cbModelParam._m0[19u].x))), _2017);
            frontier_phi_25_49_ladder = _2925.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2925.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2925.x * cbModelParam._m0[1u].z;
        }
        _2107 = frontier_phi_25_49_ladder_2;
        _2109 = frontier_phi_25_49_ladder_1;
        _2111 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2091 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1085, _1086, _1087), _2017);
        _2107 = _2091.x * cbModelParam._m0[1u].z;
        _2109 = _2091.y * cbModelParam._m0[1u].z;
        _2111 = _2091.z * cbModelParam._m0[1u].z;
    }
    float _2124 = (((_1112 * _1061) + _1113) * _1077) * ((cbModelParam._m0[1u].w * (_2107 - _2008)) + _2008);
    float _2126 = (((_1112 * _1063) + _1113) * _1077) * ((cbModelParam._m0[1u].w * (_2109 - _2010)) + _2010);
    float _2128 = (((_1112 * _1064) + _1113) * _1077) * ((cbModelParam._m0[1u].w * (_2111 - _2012)) + _2012);
    float _2131 = fma(_2128, cbSceneParam._m0[89u].z, fma(_2126, cbSceneParam._m0[89u].y, _2124 * cbSceneParam._m0[89u].x));
    float _2134 = fma(_2128, cbSceneParam._m0[90u].z, fma(_2126, cbSceneParam._m0[90u].y, _2124 * cbSceneParam._m0[90u].x));
    float _2137 = fma(_2128, cbSceneParam._m0[91u].z, fma(_2126, cbSceneParam._m0[91u].y, _2124 * cbSceneParam._m0[91u].x));
    uvec4 _2147 = floatBitsToUint(cbInstanceData._m0[_283 + 5u]);
    uint _2149 = _2147.x * 14u;
    uint _2150 = _2149 + 13u;
    float _2157 = _1077 + (-1.0);
    float _2162 = (cbLight._m0[_2150].x * _2157) + 1.0;
    float _2163 = (cbLight._m0[_2150].y * _2157) + 1.0;
    float _2164 = (cbLight._m0[_2150].z * _2157) + 1.0;
    float _2165 = (cbLight._m0[_2150].w * _2157) + 1.0;
    uint _2166 = _2149 + 5u;
    float _2172 = isnan(1.0) ? _2163 : (isnan(_2163) ? 1.0 : min(_2163, 1.0));
    uint _2176 = _2149 + 4u;
    float _2182 = isnan(1.0) ? _2162 : (isnan(_2162) ? 1.0 : min(_2162, 1.0));
    uint _2186 = _2149 | 1u;
    float _2197 = dot(vec3(cbLight._m0[_2149].xyz), vec3(_900, _901, _902));
    float _2200 = dot(vec3(cbLight._m0[_2186].xyz), vec3(_900, _901, _902));
    float _4501 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
    float _4512 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
    float _2205 = (isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0))) * 0.3183098733425140380859375;
    float _2207 = (isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0))) * 0.3183098733425140380859375;
    float _2214 = ((cbLight._m0[_2166].x * _2172) * _2207) + ((cbLight._m0[_2176].x * _2182) * _2205);
    float _2215 = ((_2172 * cbLight._m0[_2166].y) * _2207) + ((_2182 * cbLight._m0[_2176].y) * _2205);
    float _2216 = ((_2172 * cbLight._m0[_2166].z) * _2207) + ((_2182 * cbLight._m0[_2176].z) * _2205);
    uvec4 _2220 = floatBitsToUint(cbLight._m0[_2149 + 12u]);
    bool _2222 = _2220.x == 0u;
    float _2233;
    float _2235;
    float _2237;
    if (_2222)
    {
        _2233 = _2214;
        _2235 = _2215;
        _2237 = _2216;
    }
    else
    {
        uint _2241 = _2149 + 6u;
        float _2257 = (dot(vec3(cbLight._m0[_2149 + 2u].xyz), vec3(_900, _901, _902)) * 0.5) + 0.5;
        float _2258 = _2257 * _2257;
        float _4523 = isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0));
        float _2259 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
        float _2260 = isnan(1.0) ? _2164 : (isnan(_2164) ? 1.0 : min(_2164, 1.0));
        _2233 = (((cbLight._m0[_2241].x * 0.3183098733425140380859375) * _2259) * _2260) + _2214;
        _2235 = (((cbLight._m0[_2241].y * 0.3183098733425140380859375) * _2259) * _2260) + _2215;
        _2237 = (((cbLight._m0[_2241].z * 0.3183098733425140380859375) * _2259) * _2260) + _2216;
    }
    bool _2240 = _2220.y == 0u;
    float _2278;
    float _2280;
    float _2282;
    if (_2240)
    {
        _2278 = _2233;
        _2280 = _2235;
        _2282 = _2237;
    }
    else
    {
        uint _2448 = _2149 + 7u;
        float _2464 = (dot(vec3(cbLight._m0[_2149 + 3u].xyz), vec3(_900, _901, _902)) * 0.5) + 0.5;
        float _2465 = _2464 * _2464;
        float _4539 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
        float _2466 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
        float _2467 = isnan(1.0) ? _2165 : (isnan(_2165) ? 1.0 : min(_2165, 1.0));
        _2278 = (((cbLight._m0[_2448].x * 0.3183098733425140380859375) * _2466) * _2467) + _2233;
        _2280 = (((cbLight._m0[_2448].y * 0.3183098733425140380859375) * _2466) * _2467) + _2235;
        _2282 = (((cbLight._m0[_2448].z * 0.3183098733425140380859375) * _2466) * _2467) + _2237;
    }
    uint _2285 = _2149 + 8u;
    float _2298 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2149].w)) * _903) * 0.949999988079071044921875);
    float _2299 = _2298 * _2298;
    float _2300 = cbLight._m0[_2149].x + _979;
    float _2301 = cbLight._m0[_2149].y + _980;
    float _2302 = cbLight._m0[_2149].z + _981;
    float _2306 = inversesqrt(dot(vec3(_2300, _2301, _2302), vec3(_2300, _2301, _2302)));
    float _2307 = _2306 * _2300;
    float _2308 = _2306 * _2301;
    float _2309 = _2306 * _2302;
    float _2310 = dot(vec3(_900, _901, _902), vec3(cbLight._m0[_2149].xyz));
    float _4555 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
    float _2313 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
    float _4566 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
    float _2314 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
    float _2315 = dot(vec3(_900, _901, _902), vec3(_2307, _2308, _2309));
    float _4577 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
    float _2318 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
    float _2319 = dot(vec3(cbLight._m0[_2149].xyz), vec3(_2307, _2308, _2309));
    float _4588 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
    float _2323 = _2299 * _2299;
    float _2327 = ((_2318 * _2318) * (_2323 + (-1.0))) + 1.0;
    float _2335 = exp2(log2(1.0 - (isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0)))) * 5.0);
    float _2336 = 0.959999978542327880859375 - _1058;
    float _2338 = 0.959999978542327880859375 - _1059;
    float _2339 = 0.959999978542327880859375 - _1060;
    float _2346 = 1.0 - _2299;
    float _2357 = (0.5 / (((_2314 * ((_2313 * _2346) + _2299)) + 9.9999999392252902907785028219223e-09) + (((_2314 * _2346) + _2299) * _2313))) * _2313;
    float _4599 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
    float _2359 = (isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0))) * (_2323 / ((_2327 * _2327) * 3.141590118408203125));
    uint _2370 = _2149 + 9u;
    float _2381 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2186].w)) * _903) * 0.949999988079071044921875);
    float _2382 = _2381 * _2381;
    float _2383 = cbLight._m0[_2186].x + _979;
    float _2384 = cbLight._m0[_2186].y + _980;
    float _2385 = cbLight._m0[_2186].z + _981;
    float _2389 = inversesqrt(dot(vec3(_2383, _2384, _2385), vec3(_2383, _2384, _2385)));
    float _2390 = _2389 * _2383;
    float _2391 = _2389 * _2384;
    float _2392 = _2389 * _2385;
    float _2393 = dot(vec3(_900, _901, _902), vec3(cbLight._m0[_2186].xyz));
    float _4610 = isnan(0.0) ? _2393 : (isnan(_2393) ? 0.0 : max(_2393, 0.0));
    float _2396 = isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0));
    float _2397 = dot(vec3(_900, _901, _902), vec3(_2390, _2391, _2392));
    float _4621 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
    float _2400 = isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0));
    float _2401 = dot(vec3(cbLight._m0[_2186].xyz), vec3(_2390, _2391, _2392));
    float _4632 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0));
    float _2405 = _2382 * _2382;
    float _2409 = ((_2400 * _2400) * (_2405 + (-1.0))) + 1.0;
    float _2416 = exp2(log2(1.0 - (isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0)))) * 5.0);
    float _2423 = 1.0 - _2382;
    float _2433 = (0.5 / (((_2314 * ((_2396 * _2423) + _2382)) + 9.9999999392252902907785028219223e-09) + (((_2314 * _2423) + _2382) * _2396))) * _2396;
    float _4643 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
    float _2435 = (isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0))) * (_2405 / ((_2409 * _2409) * 3.141590118408203125));
    float _2445 = (((((_2416 * _2336) + _1061) * cbLight._m0[_2370].x) * _2435) * _2172) + (((((_2335 * _2336) + _1061) * cbLight._m0[_2285].x) * _2359) * _2182);
    float _2446 = (((((_2416 * _2338) + _1063) * cbLight._m0[_2370].y) * _2435) * _2172) + (((((_2335 * _2338) + _1063) * cbLight._m0[_2285].y) * _2359) * _2182);
    float _2447 = (((((_2416 * _2339) + _1064) * cbLight._m0[_2370].z) * _2435) * _2172) + (((((_2335 * _2339) + _1064) * cbLight._m0[_2285].z) * _2359) * _2182);
    float _2509;
    float _2511;
    float _2513;
    if (_2222)
    {
        _2509 = _2445;
        _2511 = _2446;
        _2513 = _2447;
    }
    else
    {
        uint _2515 = _2149 + 2u;
        uint _2519 = _2149 + 10u;
        float _2533 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2515].w)) * _903) * 0.949999988079071044921875);
        float _2534 = _2533 * _2533;
        float _2535 = cbLight._m0[_2515].x + _979;
        float _2536 = cbLight._m0[_2515].y + _980;
        float _2537 = cbLight._m0[_2515].z + _981;
        float _2541 = inversesqrt(dot(vec3(_2535, _2536, _2537), vec3(_2535, _2536, _2537)));
        float _2542 = _2541 * _2535;
        float _2543 = _2541 * _2536;
        float _2544 = _2541 * _2537;
        float _2545 = dot(vec3(_900, _901, _902), vec3(cbLight._m0[_2515].xyz));
        float _4654 = isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0));
        float _2548 = isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0));
        float _2549 = dot(vec3(_900, _901, _902), vec3(_2542, _2543, _2544));
        float _4665 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0));
        float _2552 = isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0));
        float _2553 = dot(vec3(cbLight._m0[_2515].xyz), vec3(_2542, _2543, _2544));
        float _4676 = isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : max(_2553, 0.0));
        float _2557 = _2534 * _2534;
        float _2561 = ((_2552 * _2552) * (_2557 + (-1.0))) + 1.0;
        float _2568 = exp2(log2(1.0 - (isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0)))) * 5.0);
        float _2575 = 1.0 - _2534;
        float _2585 = (0.5 / (((_2314 * ((_2548 * _2575) + _2534)) + 9.9999999392252902907785028219223e-09) + (((_2314 * _2575) + _2534) * _2548))) * _2548;
        float _4687 = isnan(0.0) ? _2585 : (isnan(_2585) ? 0.0 : max(_2585, 0.0));
        float _2587 = (isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0))) * (_2557 / ((_2561 * _2561) * 3.141590118408203125));
        float _2588 = isnan(1.0) ? _2164 : (isnan(_2164) ? 1.0 : min(_2164, 1.0));
        _2509 = (((((_2568 * _2336) + _1061) * cbLight._m0[_2519].x) * _2587) * _2588) + _2445;
        _2511 = (((((_2568 * _2338) + _1063) * cbLight._m0[_2519].y) * _2587) * _2588) + _2446;
        _2513 = (((((_2568 * _2339) + _1064) * cbLight._m0[_2519].z) * _2587) * _2588) + _2447;
    }
    float _2623;
    float _2625;
    float _2627;
    if (_2240)
    {
        _2623 = _2509;
        _2625 = _2511;
        _2627 = _2513;
    }
    else
    {
        uint _2634 = _2149 + 3u;
        uint _2638 = _2149 + 11u;
        float _2652 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2634].w)) * _903) * 0.949999988079071044921875);
        float _2653 = _2652 * _2652;
        float _2654 = cbLight._m0[_2634].x + _979;
        float _2655 = cbLight._m0[_2634].y + _980;
        float _2656 = cbLight._m0[_2634].z + _981;
        float _2660 = inversesqrt(dot(vec3(_2654, _2655, _2656), vec3(_2654, _2655, _2656)));
        float _2661 = _2660 * _2654;
        float _2662 = _2660 * _2655;
        float _2663 = _2660 * _2656;
        float _2664 = dot(vec3(_900, _901, _902), vec3(cbLight._m0[_2634].xyz));
        float _4703 = isnan(0.0) ? _2664 : (isnan(_2664) ? 0.0 : max(_2664, 0.0));
        float _2667 = isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0));
        float _2668 = dot(vec3(_900, _901, _902), vec3(_2661, _2662, _2663));
        float _4714 = isnan(0.0) ? _2668 : (isnan(_2668) ? 0.0 : max(_2668, 0.0));
        float _2671 = isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0));
        float _2672 = dot(vec3(cbLight._m0[_2634].xyz), vec3(_2661, _2662, _2663));
        float _4725 = isnan(0.0) ? _2672 : (isnan(_2672) ? 0.0 : max(_2672, 0.0));
        float _2676 = _2653 * _2653;
        float _2680 = ((_2671 * _2671) * (_2676 + (-1.0))) + 1.0;
        float _2687 = exp2(log2(1.0 - (isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0)))) * 5.0);
        float _2694 = 1.0 - _2653;
        float _2704 = (0.5 / (((_2314 * ((_2667 * _2694) + _2653)) + 9.9999999392252902907785028219223e-09) + (((_2314 * _2694) + _2653) * _2667))) * _2667;
        float _4736 = isnan(0.0) ? _2704 : (isnan(_2704) ? 0.0 : max(_2704, 0.0));
        float _2706 = (isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0))) * (_2676 / ((_2680 * _2680) * 3.141590118408203125));
        float _2707 = isnan(1.0) ? _2165 : (isnan(_2165) ? 1.0 : min(_2165, 1.0));
        _2623 = (((((_2687 * _2336) + _1061) * cbLight._m0[_2638].x) * _2706) * _2707) + _2509;
        _2625 = (((((_2687 * _2338) + _1063) * cbLight._m0[_2638].y) * _2706) * _2707) + _2511;
        _2627 = (((((_2687 * _2339) + _1064) * cbLight._m0[_2638].z) * _2706) * _2707) + _2513;
    }
    float _2842;
    float _2844;
    float _2846;
    float _2848;
    float _2850;
    float _2852;
    if (_2147.y == 0u)
    {
        float _2782 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2783 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2782;
        float _2784 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2782;
        float _2785 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2782;
        uvec4 _2797 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2798 = _2797.x;
        uint _2809 = uint((float(_2797.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1000) / _2798))) + floor(float(uint(cbSceneParam._m0[85u].x * _999) / _2798)));
        float _2819 = (log2(_2785 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2820 = isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : max(_2819, 0.0));
        uint _2823 = uint(isnan(14.0) ? _2820 : (isnan(_2820) ? 14.0 : min(_2820, 14.0)));
        uvec4 _2828 = texelFetch(g_lightClusterGridBuffer, int(((_2823 << 2u) + (_2809 << 6u)) >> 2u));
        uint _2829 = _2828.x;
        uint _2830 = _2797.z;
        float _2930;
        float _2932;
        float _2934;
        float _2936;
        float _2938;
        float _2940;
        if (((((1u << ((_2830 >> 4u) & 15u)) + 4294967295u) & _2829) == 0u) || ((_2830 & 240u) == 0u))
        {
            _2930 = 0.0;
            _2932 = 0.0;
            _2934 = 0.0;
            _2936 = 0.0;
            _2938 = 0.0;
            _2940 = 0.0;
        }
        else
        {
            float _2931;
            float _2933;
            float _2935;
            float _2937;
            float _2939;
            float _2941;
            float _3082 = 0.0;
            float _3083 = 0.0;
            float _3084 = 0.0;
            float _3085 = 0.0;
            float _3086 = 0.0;
            float _3087 = 0.0;
            uint _3088 = 0u;
            uint _3097;
            bool _3098;
            for (;;)
            {
                _3097 = texelFetch(g_lightClassification, int((((_2823 << 5u) + (_2809 << 9u)) + (_3088 << 2u)) >> 2u)).x;
                _3098 = _3097 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3098)
                {
                    frontier_phi_66_pred = _3082;
                    frontier_phi_66_pred_1 = _3087;
                    frontier_phi_66_pred_2 = _3086;
                    frontier_phi_66_pred_3 = _3085;
                    frontier_phi_66_pred_4 = _3084;
                    frontier_phi_66_pred_5 = _3083;
                }
                else
                {
                    float _3227;
                    float _3228;
                    float _3229;
                    float _3230;
                    float _3231;
                    float _3232;
                    uint _3233;
                    _3227 = _3082;
                    _3228 = _3083;
                    _3229 = _3084;
                    _3230 = _3085;
                    _3231 = _3086;
                    _3232 = _3087;
                    _3233 = _3097;
                    float _3154;
                    float _3155;
                    float _3156;
                    float _3157;
                    float _3158;
                    float _3159;
                    for (;;)
                    {
                        uint _3237 = uint(findLSB(_3233)) + (_3088 << 5u);
                        uint _3234 = (_3233 + 4294967295u) & _3233;
                        uint _3239 = _3237 * 48u;
                        vec4 _3253 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3239)).x, texelFetch(g_PointLightRenderingBuffer, int(_3239 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3239 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3239 + 3u)).x));
                        uint _3259 = (_3237 * 48u) + 4u;
                        vec4 _3272 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3259)).x, texelFetch(g_PointLightRenderingBuffer, int(_3259 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3259 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3259 + 3u)).x));
                        uint _3278 = (_3237 * 48u) + 8u;
                        vec3 _3289 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3278)).x, texelFetch(g_PointLightRenderingBuffer, int(_3278 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3278 + 2u)).x));
                        float _3293 = _3253.x - _2783;
                        float _3294 = _3253.y - _2784;
                        float _3295 = _3253.z - _2785;
                        float _3296 = dot(vec3(_3293, _3294, _3295), vec3(_3293, _3294, _3295));
                        float _3299 = inversesqrt(_3296);
                        float _3300 = _3299 * _3293;
                        float _3301 = _3299 * _3294;
                        float _3302 = _3299 * _3295;
                        float _3303 = dot(vec3(_1018, _1021, _1024), vec3(_3300, _3301, _3302));
                        float _3308 = 1.0 - (_3296 * _3253.w);
                        float _4762 = isnan(0.0) ? _3308 : (isnan(_3308) ? 0.0 : max(_3308, 0.0));
                        float _3309 = isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0));
                        float _3310 = sqrt(_3296) * _3272.w;
                        float _3313 = 1.39999997615814208984375 / (_3310 + 1.39999997615814208984375);
                        float _3314 = _3313 * _3313;
                        float _3317 = ((1.0 - _3314) * _3303) + _3314;
                        float _3320 = _3310 * _3310;
                        float _3324 = ((isnan(0.0) ? _3317 : (isnan(_3317) ? 0.0 : max(_3317, 0.0))) * _3309) / ((_3320 * 0.699999988079071044921875) + 1.0);
                        float _3328 = (-0.0) - _2783;
                        float _3329 = (-0.0) - _2784;
                        float _3330 = (-0.0) - _2785;
                        float _3334 = inversesqrt(dot(vec3(_3328, _3329, _3330), vec3(_3328, _3329, _3330)));
                        float _3335 = _3334 * _3328;
                        float _3336 = _3334 * _3329;
                        float _3337 = _3334 * _3330;
                        float _3345 = exp2(log2(1.0 / ((_3320 * 3.5) + 5.0)) * 0.25);
                        float _3346 = 1.0 - _1093;
                        float _3353 = sqrt(1.0 - ((1.0 - (_3346 * _3346)) * (1.0 - (_3345 * _3345))));
                        float _3354 = _3353 * _3353;
                        float _3355 = _3354 * _3354;
                        float _3356 = _3335 + _3300;
                        float _3357 = _3336 + _3301;
                        float _3358 = _3337 + _3302;
                        float _3362 = inversesqrt(dot(vec3(_3356, _3357, _3358), vec3(_3356, _3357, _3358)));
                        float _3366 = dot(vec3(_1018, _1021, _1024), vec3(_3335, _3336, _3337));
                        float _4778 = isnan(0.0) ? _3366 : (isnan(_3366) ? 0.0 : max(_3366, 0.0));
                        float _3369 = isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0));
                        float _3370 = dot(vec3(_1018, _1021, _1024), vec3(_3362 * _3356, _3362 * _3357, _3362 * _3358));
                        float _4789 = isnan(0.0) ? _3370 : (isnan(_3370) ? 0.0 : max(_3370, 0.0));
                        float _3373 = isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0));
                        float _3377 = ((_3373 * _3373) * (_3355 + (-1.0))) + 1.0;
                        float _3378 = _3313 * _3354;
                        float _3379 = _3378 * _3378;
                        float _3382 = ((1.0 - _3379) * _3303) + _3379;
                        float _4800 = isnan(0.0) ? _3382 : (isnan(_3382) ? 0.0 : max(_3382, 0.0));
                        float _3383 = isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0));
                        float _3384 = 1.0 - _3354;
                        float _3394 = (0.5 / (((_3383 * ((_3369 * _3384) + _3354)) + 9.9999999392252902907785028219223e-09) + (((_3383 * _3384) + _3354) * _3369))) * _3383;
                        float _4811 = isnan(0.0) ? _3394 : (isnan(_3394) ? 0.0 : max(_3394, 0.0));
                        float _3405 = (((_3355 * 3.1415927410125732421875) * (isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0)))) / ((_3377 * _3377) * ((_3320 * 2.1991131305694580078125) + 3.141590118408203125))) * _3309;
                        _3157 = (_3324 * _3272.x) + _3230;
                        _3158 = (_3324 * _3272.y) + _3231;
                        _3159 = (_3324 * _3272.z) + _3232;
                        _3154 = (_3405 * _3289.x) + _3227;
                        _3155 = (_3405 * _3289.y) + _3228;
                        _3156 = (_3405 * _3289.z) + _3229;
                        if (_3234 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3227 = _3154;
                            _3228 = _3155;
                            _3229 = _3156;
                            _3230 = _3157;
                            _3231 = _3158;
                            _3232 = _3159;
                            _3233 = _3234;
                        }
                    }
                    frontier_phi_66_pred = _3154;
                    frontier_phi_66_pred_1 = _3159;
                    frontier_phi_66_pred_2 = _3158;
                    frontier_phi_66_pred_3 = _3157;
                    frontier_phi_66_pred_4 = _3156;
                    frontier_phi_66_pred_5 = _3155;
                }
                _2931 = frontier_phi_66_pred;
                _2941 = frontier_phi_66_pred_1;
                _2939 = frontier_phi_66_pred_2;
                _2937 = frontier_phi_66_pred_3;
                _2935 = frontier_phi_66_pred_4;
                _2933 = frontier_phi_66_pred_5;
                uint _3089 = _3088 + 1u;
                if (_3089 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3082 = _2931;
                    _3083 = _2933;
                    _3084 = _2935;
                    _3085 = _2937;
                    _3086 = _2939;
                    _3087 = _2941;
                    _3088 = _3089;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2930 = _2931;
            _2932 = _2933;
            _2934 = _2935;
            _2936 = _2937;
            _2938 = _2939;
            _2940 = _2941;
        }
        uvec4 _2944 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2945 = _2944.z;
        uint _2947 = (_2945 >> 8u) & 15u;
        float _3050;
        float _3052;
        float _3054;
        float _3056;
        float _3058;
        float _3060;
        if (((4294967295u << _2947) & _2829) == 0u)
        {
            _3050 = _2930;
            _3052 = _2932;
            _3054 = _2934;
            _3056 = _2936;
            _3058 = _2938;
            _3060 = _2940;
        }
        else
        {
            float _3075 = inversesqrt(dot(vec3(_2783, _2784, _2785), vec3(_2783, _2784, _2785)));
            float _3076 = _3075 * _2783;
            float _3077 = _3075 * _2784;
            float _3078 = _3075 * _2785;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2947 < ((_2945 >> 12u) & 15u))
            {
                float _3051;
                float _3053;
                float _3055;
                float _3057;
                float _3059;
                float _3061;
                float _3210 = _2930;
                float _3211 = _2932;
                float _3212 = _2934;
                float _3213 = _2936;
                float _3214 = _2938;
                float _3215 = _2940;
                uint _3216 = _2947;
                uint _3225;
                bool _3226;
                for (;;)
                {
                    _3225 = texelFetch(g_lightClassification, int((((_2823 << 5u) + (_2809 << 9u)) + (_3216 << 2u)) >> 2u)).x;
                    _3226 = _3225 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3226)
                    {
                        frontier_phi_77_pred = _3215;
                        frontier_phi_77_pred_1 = _3214;
                        frontier_phi_77_pred_2 = _3213;
                        frontier_phi_77_pred_3 = _3212;
                        frontier_phi_77_pred_4 = _3211;
                        frontier_phi_77_pred_5 = _3210;
                    }
                    else
                    {
                        float _3419;
                        float _3420;
                        float _3421;
                        float _3422;
                        float _3423;
                        float _3424;
                        float _3712;
                        float _3713;
                        float _3714;
                        float _3715;
                        float _3716;
                        float _3717;
                        float _3432 = _3210;
                        float _3433 = _3211;
                        float _3434 = _3212;
                        float _3435 = _3213;
                        float _3436 = _3214;
                        float _3437 = _3215;
                        uint _3438 = _3225;
                        uint _3439;
                        vec4 _3464;
                        float _3465;
                        vec4 _3480;
                        vec3 _3492;
                        vec4 _3507;
                        vec4 _3522;
                        float _3568;
                        bool _3569;
                        for (;;)
                        {
                            uint _3449 = ((_3216 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3438));
                            _3439 = (_3438 + 4294967295u) & _3438;
                            uint _3451 = _3449 * 40u;
                            _3464 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3451)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3451 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3451 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3451 + 3u)).x));
                            _3465 = _3464.w;
                            uint _3467 = (_3449 * 40u) + 4u;
                            _3480 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3467)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 3u)).x));
                            uint _3482 = (_3449 * 40u) + 8u;
                            _3492 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3482)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3482 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3482 + 2u)).x));
                            uint _3494 = (_3449 * 40u) + 16u;
                            _3507 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3494)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 3u)).x));
                            uint _3509 = (_3449 * 40u) + 20u;
                            _3522 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3509)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 3u)).x));
                            uint _3524 = (_3449 * 40u) + 24u;
                            vec4 _3537 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3524)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3524 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3524 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3524 + 3u)).x));
                            uint _3543 = (_3449 * 40u) + 28u;
                            vec4 _3556 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3543)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 3u)).x));
                            _3568 = fma(_2785, _3556.z, fma(_2784, _3556.y, _3556.x * _2783)) + _3556.w;
                            _3569 = !((fma(_2785, _3537.z, fma(_2784, _3537.y, _3537.x * _2783)) + _3537.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3569)
                            {
                                float _3596 = _3464.x - _2783;
                                float _3597 = _3464.y - _2784;
                                float _3598 = _3464.z - _2785;
                                float _3599 = dot(vec3(_3596, _3597, _3598), vec3(_3596, _3597, _3598));
                                float _3602 = inversesqrt(_3599);
                                float _3603 = _3602 * _3596;
                                float _3604 = _3602 * _3597;
                                float _3605 = _3602 * _3598;
                                float _3609 = 1.0 - (_3599 / (_3465 * _3465));
                                float _4822 = isnan(0.0) ? _3609 : (isnan(_3609) ? 0.0 : max(_3609, 0.0));
                                float _3610 = isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0));
                                float _3614 = sqrt(_3599) * _3480.w;
                                float _3616 = 1.39999997615814208984375 / (_3614 + 1.39999997615814208984375);
                                float _3617 = _3616 * _3616;
                                float _3620 = ((1.0 - _3617) * dot(vec3(_3603, _3604, _3605), vec3(_1018, _1021, _1024))) + _3617;
                                float _3623 = _3614 * _3614;
                                float _3627 = (fma(_2785, _3507.z, fma(_2784, _3507.y, _3507.x * _2783)) + _3507.w) / _3568;
                                float _3628 = (fma(_2785, _3522.z, fma(_2784, _3522.y, _3522.x * _2783)) + _3522.w) / _3568;
                                float _3632 = 1.0 - dot(vec2(_3627, _3628), vec2(_3627, _3628));
                                float _4838 = isnan(0.0) ? _3632 : (isnan(_3632) ? 0.0 : max(_3632, 0.0));
                                float _3633 = isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0));
                                float _3634 = _3633 * (((isnan(0.0) ? _3620 : (isnan(_3620) ? 0.0 : max(_3620, 0.0))) * _3610) / ((_3623 * 0.699999988079071044921875) + 1.0));
                                float _3646 = exp2(log2(1.0 / ((_3623 * 3.5) + 5.0)) * 0.25);
                                float _3647 = 1.0 - _1093;
                                float _3654 = sqrt(1.0 - ((1.0 - (_3647 * _3647)) * (1.0 - (_3646 * _3646))));
                                float _3655 = _3654 * _3654;
                                float _3656 = _3655 * _3655;
                                float _3657 = _3603 - _3076;
                                float _3658 = _3604 - _3077;
                                float _3659 = _3605 - _3078;
                                float _3663 = inversesqrt(dot(vec3(_3657, _3658, _3659), vec3(_3657, _3658, _3659)));
                                float _3667 = dot(vec3(_1018, _1021, _1024), vec3((-0.0) - _3076, (-0.0) - _3077, (-0.0) - _3078));
                                float _4849 = isnan(0.0) ? _3667 : (isnan(_3667) ? 0.0 : max(_3667, 0.0));
                                float _3670 = isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0));
                                float _3671 = dot(vec3(_1018, _1021, _1024), vec3(_3663 * _3657, _3663 * _3658, _3663 * _3659));
                                float _4860 = isnan(0.0) ? _3671 : (isnan(_3671) ? 0.0 : max(_3671, 0.0));
                                float _3674 = isnan(1.0) ? _4860 : (isnan(_4860) ? 1.0 : min(_4860, 1.0));
                                float _3678 = ((_3674 * _3674) * (_3656 + (-1.0))) + 1.0;
                                float _3679 = _3616 * _3655;
                                float _3680 = _3679 * _3679;
                                float _3686 = ((1.0 - _3680) * dot(vec3(_1018, _1021, _1024), vec3(_3603, _3604, _3605))) + _3680;
                                float _4871 = isnan(0.0) ? _3686 : (isnan(_3686) ? 0.0 : max(_3686, 0.0));
                                float _3687 = isnan(1.0) ? _4871 : (isnan(_4871) ? 1.0 : min(_4871, 1.0));
                                float _3688 = 1.0 - _3655;
                                float _3698 = (0.5 / (((_3687 * ((_3670 * _3688) + _3655)) + 9.9999999392252902907785028219223e-09) + (((_3687 * _3688) + _3655) * _3670))) * _3687;
                                float _4882 = isnan(0.0) ? _3698 : (isnan(_3698) ? 0.0 : max(_3698, 0.0));
                                float _3708 = (_3633 * _3610) * (((_3656 * 3.1415927410125732421875) * (isnan(1.0) ? _4882 : (isnan(_4882) ? 1.0 : min(_4882, 1.0)))) / ((_3678 * _3678) * ((_3623 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3634 * _3480.y;
                                frontier_phi_83_pred_1 = _3634 * _3480.x;
                                frontier_phi_83_pred_2 = _3708 * _3492.z;
                                frontier_phi_83_pred_3 = _3708 * _3492.y;
                                frontier_phi_83_pred_4 = _3708 * _3492.x;
                                frontier_phi_83_pred_5 = _3634 * _3480.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3716 = frontier_phi_83_pred;
                            _3715 = frontier_phi_83_pred_1;
                            _3714 = frontier_phi_83_pred_2;
                            _3713 = frontier_phi_83_pred_3;
                            _3712 = frontier_phi_83_pred_4;
                            _3717 = frontier_phi_83_pred_5;
                            _3422 = _3715 + _3435;
                            _3423 = _3716 + _3436;
                            _3424 = _3717 + _3437;
                            _3419 = _3712 + _3432;
                            _3420 = _3713 + _3433;
                            _3421 = _3714 + _3434;
                            if (_3439 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3432 = _3419;
                                _3433 = _3420;
                                _3434 = _3421;
                                _3435 = _3422;
                                _3436 = _3423;
                                _3437 = _3424;
                                _3438 = _3439;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3424;
                        frontier_phi_77_pred_1 = _3423;
                        frontier_phi_77_pred_2 = _3422;
                        frontier_phi_77_pred_3 = _3421;
                        frontier_phi_77_pred_4 = _3420;
                        frontier_phi_77_pred_5 = _3419;
                    }
                    _3061 = frontier_phi_77_pred;
                    _3059 = frontier_phi_77_pred_1;
                    _3057 = frontier_phi_77_pred_2;
                    _3055 = frontier_phi_77_pred_3;
                    _3053 = frontier_phi_77_pred_4;
                    _3051 = frontier_phi_77_pred_5;
                    uint _3217 = _3216 + 1u;
                    if (_3217 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3210 = _3051;
                        _3211 = _3053;
                        _3212 = _3055;
                        _3213 = _3057;
                        _3214 = _3059;
                        _3215 = _3061;
                        _3216 = _3217;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3055;
                frontier_phi_58_59_ladder_1 = _3061;
                frontier_phi_58_59_ladder_2 = _3059;
                frontier_phi_58_59_ladder_3 = _3057;
                frontier_phi_58_59_ladder_4 = _3053;
                frontier_phi_58_59_ladder_5 = _3051;
            }
            else
            {
                frontier_phi_58_59_ladder = _2934;
                frontier_phi_58_59_ladder_1 = _2940;
                frontier_phi_58_59_ladder_2 = _2938;
                frontier_phi_58_59_ladder_3 = _2936;
                frontier_phi_58_59_ladder_4 = _2932;
                frontier_phi_58_59_ladder_5 = _2930;
            }
            _3050 = frontier_phi_58_59_ladder_5;
            _3052 = frontier_phi_58_59_ladder_4;
            _3054 = frontier_phi_58_59_ladder;
            _3056 = frontier_phi_58_59_ladder_3;
            _3058 = frontier_phi_58_59_ladder_2;
            _3060 = frontier_phi_58_59_ladder_1;
        }
        float _3065 = isnan(1.0) ? _1077 : (isnan(_1077) ? 1.0 : min(_1077, 1.0));
        _2842 = (_3065 * _3056) + _2278;
        _2844 = (_3065 * _3058) + _2280;
        _2846 = (_3065 * _3060) + _2282;
        _2848 = ((_3050 * _1061) * _3065) + _2623;
        _2850 = ((_3052 * _1063) * _3065) + _2625;
        _2852 = ((_3054 * _1064) * _3065) + _2627;
    }
    else
    {
        _2842 = _2278;
        _2844 = _2280;
        _2846 = _2282;
        _2848 = _2623;
        _2850 = _2625;
        _2852 = _2627;
    }
    float _4898 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
    float _4909 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
    float _4920 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
    float _2869 = ((isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0))) * (_2842 + ((isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0))) * _1077))) + ((_2848 + ((isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0))) * _1916)) * cbPerFrame._m0[3u].x);
    float _2870 = ((isnan(1.0) ? _4909 : (isnan(_4909) ? 1.0 : min(_4909, 1.0))) * (_2844 + ((isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0))) * _1077))) + ((_2850 + ((isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0))) * _1916)) * cbPerFrame._m0[3u].x);
    float _2871 = ((isnan(1.0) ? _4920 : (isnan(_4920) ? 1.0 : min(_4920, 1.0))) * (_2846 + ((isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0))) * _1077))) + ((_2852 + ((isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0))) * _1916)) * cbPerFrame._m0[3u].x);
    uint _2872 = _283 + 6u;
    float _2880 = _999 / cbSceneParam._m0[86u].x;
    float _2881 = _1000 / cbSceneParam._m0[86u].y;
    vec4 _2895 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2880, _2881, (log2((isnan(cbSceneParam._m0[77u].w) ? _922 : (isnan(_922) ? cbSceneParam._m0[77u].w : min(_922, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2897 = _2895.x;
    float _2898 = _2895.y;
    float _2899 = _2895.z;
    float _2900 = _2895.w;
    float _2992;
    float _2994;
    float _2996;
    float _2998;
    if (_922 > cbSceneParam._m0[78u].w)
    {
        float _2955 = isnan(_922) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _922 : min(cbSceneParam._m0[80u].w, _922));
        float _2956 = _2955 / _922;
        float _2967 = _2956 * _972;
        float _2968 = _973 * _2956;
        float _2969 = (-0.0) - _2968;
        float _2970 = _2956 * _974;
        float _2972 = (cbSceneParam._m0[77u].w * _2969) / _2955;
        float _2973 = _2972 + cbSceneParam._m0[79u].w;
        float _2974 = cbSceneParam._m0[79u].w - _2968;
        float _2980 = sqrt(((_2967 * _2967) + (_2968 * _2968)) + (_2970 * _2970));
        float _2983 = (1.0 - (cbSceneParam._m0[77u].w / _2955)) * _2980;
        float _2988 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2990 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3167;
        if (abs((_2969 - _2972) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3167 = ((((_2973 > 0.0) ? exp2(_2988 * _2973) : (2.0 - exp2(_2990 * _2973))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2983;
        }
        else
        {
            float _3111 = 1.0 / cbSceneParam._m0[80u].x;
            float _3112 = isnan(_2974) ? _2973 : (isnan(_2973) ? _2974 : max(_2973, _2974));
            float _3113 = isnan(_2974) ? _2973 : (isnan(_2973) ? _2974 : min(_2973, _2974));
            float _3122 = isnan(0.0) ? _3112 : (isnan(_3112) ? 0.0 : min(_3112, 0.0));
            float _3123 = isnan(0.0) ? _3113 : (isnan(_3113) ? 0.0 : min(_3113, 0.0));
            _3167 = ((abs(_2980 / _2969) * cbSceneParam._m0[80u].y) * ((((_3122 - _3123) * 2.0) - ((exp2(_2988 * (isnan(0.0) ? _3112 : (isnan(_3112) ? 0.0 : max(_3112, 0.0)))) - exp2(_2988 * (isnan(0.0) ? _3113 : (isnan(_3113) ? 0.0 : max(_3113, 0.0))))) * _3111)) - ((exp2(_2990 * _3122) - exp2(_2990 * _3123)) * _3111))) + (_2983 * cbSceneParam._m0[80u].z);
        }
        vec4 _3169 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2880, _2881, 1.0), 0.0);
        float _3178 = exp2((_3167 * (-1.44269502162933349609375)) * (1.0 - _3169.w));
        float _3179 = log2(_3178);
        float _3195 = log2(_2900);
        _2992 = (exp2(_3195 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3179 * cbSceneParam._m0[78u].x)) * _3169.x) / cbSceneParam._m0[78u].x)) + _2897;
        _2994 = (exp2(_3195 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3179 * cbSceneParam._m0[78u].y)) * _3169.y) / cbSceneParam._m0[78u].y)) + _2898;
        _2996 = (exp2(_3195 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3179 * cbSceneParam._m0[78u].z)) * _3169.z) / cbSceneParam._m0[78u].z)) + _2899;
        _2998 = _3178 * _2900;
    }
    else
    {
        _2992 = _2897;
        _2994 = _2898;
        _2996 = _2899;
        _2998 = _2900;
    }
    bool _3205;
    vec4 _3008;
    vec4 _3030;
    float _3032;
    float _3036;
    float _3037;
    float _3038;
    float _3039;
    bool _3049;
    for (;;)
    {
        _3008 = cbMatDynParam._m0[0u];
        float _3010 = roundEven(_3008.y);
        bool _3011 = _3010 == 3.0;
        float _3012 = log2(_2998);
        float _3019 = exp2(_3012 * cbSceneParam._m0[78u].x) * _2869;
        float _3020 = exp2(_3012 * cbSceneParam._m0[78u].y) * _2870;
        float _3021 = exp2(_3012 * cbSceneParam._m0[78u].z) * _2871;
        float _3028 = _988 + (-0.5);
        _3030 = cbMtdParam._m0[1u];
        _3032 = _3030.y * _3028;
        float _3035 = (_3010 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3036 = _3035 * (_3011 ? _3019 : (_3019 + (cbSceneParam._m0[72u].w * _2992)));
        _3037 = _3035 * (_3011 ? _3020 : (_3020 + (cbSceneParam._m0[72u].w * _2994)));
        _3038 = _3035 * (_3011 ? _3021 : (_3021 + (cbSceneParam._m0[72u].w * _2996)));
        _3039 = _3028 * 0.999000012874603271484375;
        _3049 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3049)
        {
            if ((cbInstanceData._m0[_283 + 7u].x + _3039) < 0.5)
            {
                _3205 = true;
                break;
            }
        }
        uint _3146 = _1037 + uint(_3008.w);
        if ((cbInstanceData._m0[_3146].w < 1.0) && ((cbInstanceData._m0[_3146].w + _3039) < 0.5))
        {
            _3205 = true;
            break;
        }
        if ((_3032 + 1.0) < _3030.x)
        {
            _3205 = true;
            break;
        }
        _3205 = false;
        break;
    }
    float _3410;
    if (_3205)
    {
        discard_state = true;
        _3410 = 0.0;
    }
    else
    {
        _3410 = cbInstanceData._m0[_2872].w;
    }
    SV_Target.x = _3036;
    SV_Target.y = _3037;
    SV_Target.z = _3038;
    SV_Target.w = _3410;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2872].w;
    discard_exit();
}


