#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1328;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _223 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _224 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _225 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _231 = inversesqrt(dot(vec3(_223, _224, _225), vec3(_223, _224, _225)));
    float _232 = _231 * _223;
    float _233 = _231 * _224;
    float _234 = _231 * _225;
    float _238 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _239 = _238 * NORMAL.x;
    float _240 = _238 * NORMAL.y;
    float _241 = _238 * NORMAL.z;
    float _245 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _246 = _245 * TANGENT.x;
    float _247 = _245 * TANGENT.y;
    float _248 = _245 * TANGENT.z;
    float _259 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _261 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _262 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3936 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _3947 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    float _3958 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    uint _272 = uint(roundEven(NORMAL.w)) * 13u;
    uint _277 = _272 + 1u;
    uint _281 = _272 + 2u;
    float _290 = sqrt(((cbInstanceData._m0[_277].x * cbInstanceData._m0[_277].x) + (cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x)) + (cbInstanceData._m0[_281].x * cbInstanceData._m0[_281].x));
    float _291 = _290 * TEXCOORD.z;
    float _292 = _290 * TEXCOORD.w;
    vec4 _305 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _291) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _292) + cbTextureTilingScale._m0[13u].w));
    vec4 _329 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _334 = _329.x * cbMtdParam._m0[11u].x;
    float _335 = _329.y * cbMtdParam._m0[11u].y;
    float _336 = _329.z * cbMtdParam._m0[11u].z;
    vec4 _355 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _291) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _292) + cbTextureTilingScale._m0[5u].w));
    vec4 _391 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _393 = _391.x;
    float _405 = dot(vec4(_393, _391.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _422 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_393 - _405) * cbMtdParam._m0[24u].y) + _405) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3969 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _423 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
    float _430 = (_423 * ((_355.x * cbMtdParam._m0[12u].x) - _334)) + _334;
    float _431 = (_423 * ((_355.y * cbMtdParam._m0[12u].y) - _335)) + _335;
    float _432 = (_423 * ((_355.z * cbMtdParam._m0[12u].z) - _336)) + _336;
    float _436 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _305.x) * _430;
    float _439 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _305.y) * _431;
    float _442 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _305.z) * _432;
    float _449 = ((_430 - _436) * (isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0)))) + _436;
    float _450 = ((_431 - _439) * (isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0)))) + _439;
    float _451 = ((_432 - _442) * (isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0)))) + _442;
    vec4 _470 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _291) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _292) + cbTextureTilingScale._m0[14u].w));
    vec4 _490 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _291) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _292) + cbTextureTilingScale._m0[20u].w));
    vec4 _517 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _291) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _292) + cbTextureTilingScale._m0[4u].w));
    vec4 _534 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _536 = _534.x;
    float _537 = _534.y;
    float _538 = _534.z;
    float _547 = ((_517.z - _538) * _423) + _538;
    float _550 = ((((_517.x - _536) * _423) + _536) * 2.0) + (-1.0);
    float _551 = ((((_517.y - _537) * _423) + _537) * 2.0) + (-1.0);
    float _552 = dot(vec2(_550, _551), vec2(_550, _551));
    float _3980 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
    float _557 = sqrt(1.0 - (isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0))));
    vec4 _577 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _589 = (_550 + ((((_490.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_577.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _590 = (_551 + ((((_490.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_577.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _593 = fma(_557, _239, fma(_590, _246, _589 * _232));
    float _596 = fma(_557, _240, fma(_590, _247, _589 * _233));
    float _599 = fma(_557, _241, fma(_590, _248, _589 * _234));
    float _603 = inversesqrt(dot(vec3(_593, _596, _599), vec3(_593, _596, _599)));
    vec4 _630 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _291) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _292) + cbTextureTilingScale._m0[11u].w));
    float _632 = _630.x;
    float _633 = 1.0 - _632;
    float _637 = ((_632 - _633) * cbMtdParam._m0[24u].z) + _633;
    float _639 = (cbMtdParam._m0[19u].x + dot(vec4(_603 * _593, _603 * _596, _603 * _599, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_637 * cbMtdParam._m0[21u].z);
    float _3991 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _640 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
    float _655 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_637 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4002 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    float _656 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
    float _660 = ((_640 * ((_470.x * cbMtdParam._m0[18u].x) - _449)) * _656) + _449;
    float _661 = ((_640 * ((_470.y * cbMtdParam._m0[18u].y) - _450)) * _656) + _450;
    float _662 = ((_640 * ((_470.z * cbMtdParam._m0[18u].z) - _451)) * _656) + _451;
    vec4 _674 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _688 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _690 = _688.x;
    float _708 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _291) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _292) + cbTextureTilingScale._m0[9u].w)).x - _690) * _423) + _690;
    float _712 = ((_674.x - _708) * cbMtdParam._m0[19u].z) + _708;
    float _715 = _712 - ((_656 * _640) * _712);
    float _720 = (((_490.z - _547) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _547;
    float _724 = ((_577.z - _720) * cbMtdParam._m0[19u].w) + _720;
    vec4 _737 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _291) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _292) + cbTextureTilingScale._m0[15u].w));
    float _744 = (_737.x * 2.0) + (-1.0);
    float _745 = (_737.y * 2.0) + (-1.0);
    float _746 = dot(vec2(_744, _745), vec2(_744, _745));
    float _4013 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
    float _755 = (((_737.z - _724) * _640) * _656) + _724;
    float _770 = (((cbMtdParam._m0[21u].x * _589) + ((_744 - _589) * _640)) * _656) + _589;
    float _771 = (((cbMtdParam._m0[21u].x * _590) + ((_745 - _590) * _640)) * _656) + _590;
    float _772 = (((sqrt(1.0 - (isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0)))) - _557) * _640) * _656) + _557;
    float _774 = cbMtdParam._m0[22u].x + _577.w;
    float _777 = fma(_772, _239, fma(_771, _246, _770 * _232));
    float _780 = fma(_772, _240, fma(_771, _247, _770 * _233));
    float _783 = fma(_772, _241, fma(_771, _248, _770 * _234));
    float _787 = inversesqrt(dot(vec3(_777, _780, _783), vec3(_777, _780, _783)));
    float _788 = _787 * _777;
    float _789 = _787 * _780;
    float _790 = _787 * _783;
    float _4024 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _791 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
    float _4035 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
    float _4046 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _4057 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
    float _4068 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _4079 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _796 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
    float _810 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _851 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _861 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _851);
    float _862 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _851);
    float _863 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _851);
    float _867 = inversesqrt(dot(vec3(_861, _862, _863), vec3(_861, _862, _863)));
    float _868 = _861 * _867;
    float _869 = _862 * _867;
    float _870 = _863 * _867;
    float _876 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _877 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _895 = fma(_790, cbSceneParam._m0[5u].z, fma(_789, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _788));
    float _898 = fma(_790, cbSceneParam._m0[6u].z, fma(_789, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _788));
    float _901 = fma(_790, cbSceneParam._m0[7u].z, fma(_789, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _788));
    uint _915 = (_272 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _921 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0)))) * cbInstanceData._m0[_915].x;
    float _922 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0)))) * cbInstanceData._m0[_915].y;
    float _923 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0)))) * cbInstanceData._m0[_915].z;
    float _4090 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
    float _924 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
    float _4101 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
    float _925 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
    float _4112 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
    float _926 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
    float _927 = 1.0 - _796;
    float _928 = _924 * _927;
    float _929 = _925 * _927;
    float _930 = _926 * _927;
    float _935 = (_924 + (-0.039999999105930328369140625)) * _796;
    float _936 = (_925 + (-0.039999999105930328369140625)) * _796;
    float _937 = (_926 + (-0.039999999105930328369140625)) * _796;
    float _938 = _935 + 0.039999999105930328369140625;
    float _940 = _936 + 0.039999999105930328369140625;
    float _941 = _937 + 0.039999999105930328369140625;
    vec4 _950 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _876, cbSceneParam._m0[86u].y * _877));
    float _954 = ((isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0))) * TEXCOORD_5.w) * _950.x;
    float _955 = dot(vec3(_788, _789, _790), vec3(_868, _869, _870));
    float _958 = _955 * 2.0;
    float _962 = (_958 * _788) - _868;
    float _963 = (_958 * _789) - _869;
    float _964 = (_958 * _790) - _870;
    float _968 = abs(dot(vec3(_868, _869, _870), vec3(_788, _789, _790)));
    float _4123 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
    float _970 = sqrt(_791);
    float _983 = exp2((_970 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_970 * 3.0));
    float _989 = (1.0 - _983) * ((_970 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _990 = _983 * _970;
    float _1018 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1022 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1026 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1327;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1052 = fma(_1026, cbModelParam._m0[26u].z, fma(_1022, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1018));
        float _1056 = fma(_1026, cbModelParam._m0[27u].z, fma(_1022, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1018));
        float _1060 = fma(_1026, cbModelParam._m0[28u].z, fma(_1022, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1018));
        float _1085 = _1018 + _788;
        float _1086 = _1022 + _789;
        float _1087 = _1026 + _790;
        float _1097 = fma(_1087, cbModelParam._m0[26u].z, fma(_1086, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1085)) - _1052;
        float _1098 = fma(_1087, cbModelParam._m0[27u].z, fma(_1086, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1085)) - _1056;
        float _1099 = fma(_1087, cbModelParam._m0[28u].z, fma(_1086, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1085)) - _1060;
        float _1103 = inversesqrt(dot(vec3(_1097, _1098, _1099), vec3(_1097, _1098, _1099)));
        float _1116 = ((_1103 * _1097) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1052 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1117 = ((_1103 * _1098) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1056 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1118 = ((_1103 * _1099) / cbModelParam._m0[34u].z) + ((((((_1060 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1121 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1116, _1117, _1118), 0.0);
        vec4 _1128 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1116, _1117, _1118), 0.0);
        vec4 _1135 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1116, _1117, _1118), 0.0);
        vec4 _1142 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1116, _1117, _1118), 0.0);
        float _1155 = exp2((_1121.w + (-0.5)) * 20.0) * 2.0;
        float _1156 = _1155 * (_1121.x + (-0.5));
        float _1157 = _1155 * (_1121.y + (-0.5));
        float _1158 = _1155 * (_1121.z + (-0.5));
        float _1165 = exp2((_1128.w + (-0.5)) * 20.0) * 2.0;
        float _1166 = _1165 * (_1128.x + (-0.5));
        float _1167 = _1165 * (_1128.y + (-0.5));
        float _1168 = _1165 * (_1128.z + (-0.5));
        float _1175 = exp2((_1135.w + (-0.5)) * 20.0) * 2.0;
        float _1176 = _1175 * (_1135.x + (-0.5));
        float _1177 = _1175 * (_1135.y + (-0.5));
        float _1178 = _1175 * (_1135.z + (-0.5));
        float _1185 = exp2((_1142.w + (-0.5)) * 20.0) * 2.0;
        float _1186 = _1185 * (_1142.x + (-0.5));
        float _1187 = _1185 * (_1142.y + (-0.5));
        float _1188 = _1185 * (_1142.z + (-0.5));
        float _1189 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1190 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1191 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1192 = _1156 * 0.5;
        float _1193 = _1166 * 0.5;
        float _1194 = _1176 * 0.5;
        float _1195 = dot(vec3(_1192, _1193, _1194), vec3(_1192, _1193, _1194));
        float _1200 = (_1195 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1195);
        float _1209 = (dot(vec3(_788, _789, _790), vec3(_1200 * _1192, _1200 * _1193, _1200 * _1194)) + 1.0) * 0.5;
        float _4149 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1219 = sqrt(((_1193 * _1193) + (_1192 * _1192)) + (_1194 * _1194)) / (_1189 + 9.9999997473787516355514526367188e-06);
        float _4160 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1220 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
        float _1221 = _1220 * 2.0;
        float _1225 = (1.0 - _1220) / (_1220 + 1.0);
        float _4171 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1226 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
        float _1235 = ((((1.0 - _1226) * (_1221 + 2.0)) * exp2(log2(isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0))) * (_1221 + 1.0))) + _1226) * _1189;
        float _1236 = _1157 * 0.5;
        float _1237 = _1167 * 0.5;
        float _1238 = _1177 * 0.5;
        float _1239 = dot(vec3(_1236, _1237, _1238), vec3(_1236, _1237, _1238));
        float _1244 = (_1239 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1239);
        float _1252 = (dot(vec3(_788, _789, _790), vec3(_1244 * _1236, _1244 * _1237, _1244 * _1238)) + 1.0) * 0.5;
        float _4182 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1261 = sqrt(((_1237 * _1237) + (_1236 * _1236)) + (_1238 * _1238)) / (_1190 + 9.9999997473787516355514526367188e-06);
        float _4193 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1262 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
        float _1263 = _1262 * 2.0;
        float _1267 = (1.0 - _1262) / (_1262 + 1.0);
        float _4204 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1268 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
        float _1277 = ((((1.0 - _1268) * (_1263 + 2.0)) * exp2(log2(isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0))) * (_1263 + 1.0))) + _1268) * _1190;
        float _1278 = _1158 * 0.5;
        float _1279 = _1168 * 0.5;
        float _1280 = _1178 * 0.5;
        float _1281 = dot(vec3(_1278, _1279, _1280), vec3(_1278, _1279, _1280));
        float _1286 = (_1281 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1281);
        float _1294 = (dot(vec3(_788, _789, _790), vec3(_1286 * _1278, _1286 * _1279, _1286 * _1280)) + 1.0) * 0.5;
        float _4215 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1303 = sqrt(((_1279 * _1279) + (_1278 * _1278)) + (_1280 * _1280)) / (_1191 + 9.9999997473787516355514526367188e-06);
        float _4226 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1304 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
        float _1305 = _1304 * 2.0;
        float _1309 = (1.0 - _1304) / (_1304 + 1.0);
        float _4237 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1310 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
        float _1319 = ((((1.0 - _1310) * (_1305 + 2.0)) * exp2(log2(isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0))) * (_1305 + 1.0))) + _1310) * _1191;
        _1327 = _1158;
        _1329 = _1157;
        _1330 = _1156;
        _1331 = _1168;
        _1332 = _1167;
        _1333 = _1166;
        _1334 = _1178;
        _1335 = _1177;
        _1336 = _1176;
        _1337 = _1191;
        _1338 = _1190;
        _1339 = _1189;
        _1340 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0)));
        _1341 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0)));
        _1342 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0)));
    }
    else
    {
        _1327 = _1328;
        _1329 = _1328;
        _1330 = _1328;
        _1331 = _1328;
        _1332 = _1328;
        _1333 = _1328;
        _1334 = _1328;
        _1335 = _1328;
        _1336 = _1328;
        _1337 = _1328;
        _1338 = _1328;
        _1339 = _1328;
        _1340 = 0.0;
        _1341 = 0.0;
        _1342 = 0.0;
    }
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    float _1641;
    float _1642;
    float _1643;
    float _1644;
    float _1645;
    float _1646;
    float _1647;
    float _1648;
    float _1649;
    float _1650;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1367 = fma(_1026, cbModelParam._m0[30u].z, fma(_1022, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1018));
        float _1371 = fma(_1026, cbModelParam._m0[31u].z, fma(_1022, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1018));
        float _1375 = fma(_1026, cbModelParam._m0[32u].z, fma(_1022, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1018));
        float _1398 = _1018 + _788;
        float _1399 = _1022 + _789;
        float _1400 = _1026 + _790;
        float _1410 = fma(_1400, cbModelParam._m0[30u].z, fma(_1399, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1398)) - _1367;
        float _1411 = fma(_1400, cbModelParam._m0[31u].z, fma(_1399, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1398)) - _1371;
        float _1412 = fma(_1400, cbModelParam._m0[32u].z, fma(_1399, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1398)) - _1375;
        float _1416 = inversesqrt(dot(vec3(_1410, _1411, _1412), vec3(_1410, _1411, _1412)));
        float _1429 = ((_1416 * _1410) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1367 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1430 = ((_1416 * _1411) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1371 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1431 = ((_1416 * _1412) / cbModelParam._m0[35u].z) + ((((((_1375 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1433 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1429, _1430, _1431), 0.0);
        vec4 _1440 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1429, _1430, _1431), 0.0);
        vec4 _1447 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1429, _1430, _1431), 0.0);
        vec4 _1454 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1429, _1430, _1431), 0.0);
        float _1466 = exp2((_1433.w + (-0.5)) * 20.0) * 2.0;
        float _1467 = _1466 * (_1433.x + (-0.5));
        float _1468 = _1466 * (_1433.y + (-0.5));
        float _1469 = _1466 * (_1433.z + (-0.5));
        float _1476 = exp2((_1440.w + (-0.5)) * 20.0) * 2.0;
        float _1477 = _1476 * (_1440.x + (-0.5));
        float _1478 = _1476 * (_1440.y + (-0.5));
        float _1479 = _1476 * (_1440.z + (-0.5));
        float _1486 = exp2((_1447.w + (-0.5)) * 20.0) * 2.0;
        float _1487 = _1486 * (_1447.x + (-0.5));
        float _1488 = _1486 * (_1447.y + (-0.5));
        float _1489 = _1486 * (_1447.z + (-0.5));
        float _1496 = exp2((_1454.w + (-0.5)) * 20.0) * 2.0;
        float _1497 = _1496 * (_1454.x + (-0.5));
        float _1498 = _1496 * (_1454.y + (-0.5));
        float _1499 = _1496 * (_1454.z + (-0.5));
        float _1500 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
        float _1501 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1502 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1503 = _1467 * 0.5;
        float _1504 = _1477 * 0.5;
        float _1505 = _1487 * 0.5;
        float _1506 = dot(vec3(_1503, _1504, _1505), vec3(_1503, _1504, _1505));
        float _1511 = (_1506 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1506);
        float _1519 = (dot(vec3(_788, _789, _790), vec3(_1511 * _1503, _1511 * _1504, _1511 * _1505)) + 1.0) * 0.5;
        float _4278 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1528 = sqrt(((_1504 * _1504) + (_1503 * _1503)) + (_1505 * _1505)) / (_1500 + 9.9999997473787516355514526367188e-06);
        float _4289 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1529 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
        float _1530 = _1529 * 2.0;
        float _1534 = (1.0 - _1529) / (_1529 + 1.0);
        float _4300 = isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0));
        float _1535 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
        float _1544 = ((((1.0 - _1535) * (_1530 + 2.0)) * exp2(log2(isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0))) * (_1530 + 1.0))) + _1535) * _1500;
        float _1545 = _1468 * 0.5;
        float _1546 = _1478 * 0.5;
        float _1547 = _1488 * 0.5;
        float _1548 = dot(vec3(_1545, _1546, _1547), vec3(_1545, _1546, _1547));
        float _1553 = (_1548 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1548);
        float _1561 = (dot(vec3(_788, _789, _790), vec3(_1553 * _1545, _1553 * _1546, _1553 * _1547)) + 1.0) * 0.5;
        float _4311 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1570 = sqrt(((_1546 * _1546) + (_1545 * _1545)) + (_1547 * _1547)) / (_1501 + 9.9999997473787516355514526367188e-06);
        float _4322 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1571 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
        float _1572 = _1571 * 2.0;
        float _1576 = (1.0 - _1571) / (_1571 + 1.0);
        float _4333 = isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0));
        float _1577 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
        float _1586 = ((((1.0 - _1577) * (_1572 + 2.0)) * exp2(log2(isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0))) * (_1572 + 1.0))) + _1577) * _1501;
        float _1587 = _1469 * 0.5;
        float _1588 = _1479 * 0.5;
        float _1589 = _1489 * 0.5;
        float _1590 = dot(vec3(_1587, _1588, _1589), vec3(_1587, _1588, _1589));
        float _1595 = (_1590 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1590);
        float _1603 = (dot(vec3(_788, _789, _790), vec3(_1595 * _1587, _1595 * _1588, _1595 * _1589)) + 1.0) * 0.5;
        float _4344 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
        float _1612 = sqrt(((_1588 * _1588) + (_1587 * _1587)) + (_1589 * _1589)) / (_1502 + 9.9999997473787516355514526367188e-06);
        float _4355 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
        float _1613 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
        float _1614 = _1613 * 2.0;
        float _1618 = (1.0 - _1613) / (_1613 + 1.0);
        float _4366 = isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0));
        float _1619 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
        float _1628 = ((((1.0 - _1619) * (_1614 + 2.0)) * exp2(log2(isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0))) * (_1614 + 1.0))) + _1619) * _1502;
        _1636 = _1469;
        _1637 = _1468;
        _1638 = _1467;
        _1639 = _1479;
        _1640 = _1478;
        _1641 = _1477;
        _1642 = _1489;
        _1643 = _1488;
        _1644 = _1487;
        _1645 = _1502;
        _1646 = _1501;
        _1647 = _1500;
        _1648 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0)));
        _1649 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0)));
        _1650 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0)));
    }
    else
    {
        _1636 = _1328;
        _1637 = _1328;
        _1638 = _1328;
        _1639 = _1328;
        _1640 = _1328;
        _1641 = _1328;
        _1642 = _1328;
        _1643 = _1328;
        _1644 = _1328;
        _1645 = _1328;
        _1646 = _1328;
        _1647 = _1328;
        _1648 = 0.0;
        _1649 = 0.0;
        _1650 = 0.0;
    }
    float _1660 = (cbModelParam._m0[1u].x * (_1648 - _1340)) + _1340;
    float _1661 = (cbModelParam._m0[1u].x * (_1649 - _1341)) + _1341;
    float _1662 = (cbModelParam._m0[1u].x * (_1650 - _1342)) + _1342;
    float _1683 = fma(_1662, cbSceneParam._m0[89u].z, fma(_1661, cbSceneParam._m0[89u].y, _1660 * cbSceneParam._m0[89u].x));
    float _1686 = fma(_1662, cbSceneParam._m0[90u].z, fma(_1661, cbSceneParam._m0[90u].y, _1660 * cbSceneParam._m0[90u].x));
    float _1689 = fma(_1662, cbSceneParam._m0[91u].z, fma(_1661, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1660));
    float _1704 = _962 * 0.5;
    float _1705 = _963 * 0.5;
    float _1706 = _964 * 0.5;
    float _1707 = dot(vec4(_1704, _1705, _1706, 1.0), vec4(_1638, _1641, _1644, _1647));
    float _1710 = dot(vec4(_1704, _1705, _1706, 1.0), vec4(_1637, _1640, _1643, _1646));
    float _1713 = dot(vec4(_1704, _1705, _1706, 1.0), vec4(_1636, _1639, _1642, _1645));
    float _1747;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1720 = dot(vec4(_1704, _1705, _1706, 1.0), vec4(_1327, _1331, _1334, _1337));
        float _1724 = dot(vec4(_1704, _1705, _1706, 1.0), vec4(_1329, _1332, _1335, _1338));
        float _1728 = dot(vec4(_1704, _1705, _1706, 1.0), vec4(_1330, _1333, _1336, _1339));
        float _1735 = dot(vec4(cbModelParam._m0[39u]), vec4(_1704, _1705, _1706, 1.0));
        _1747 = dot(vec3(isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0)), isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0)), isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1735) ? 0.0 : (isnan(0.0) ? _1735 : max(0.0, _1735))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1747 = 1.0;
    }
    float _1758;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1749 = dot(vec4(cbModelParam._m0[40u]), vec4(_1704, _1705, _1706, 1.0));
        _1758 = dot(vec3(isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0)), isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0)), isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1749) ? 0.0 : (isnan(0.0) ? _1749 : max(0.0, _1749))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1758 = 1.0;
    }
    float _1762 = (_1758 * cbModelParam._m0[1u].x) + (_1747 * (1.0 - cbModelParam._m0[1u].x));
    float _1772 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _791);
    float _1773 = isnan(_1772) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1772 : min(cbModelParam._m0[25u].z, _1772));
    float _1853;
    float _1855;
    float _1857;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1820 = fma(_1026, cbModelParam._m0[13u].z, fma(_1022, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1018)) + cbModelParam._m0[13u].w;
        float _1824 = fma(_1026, cbModelParam._m0[14u].z, fma(_1022, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1018)) + cbModelParam._m0[14u].w;
        float _1828 = fma(_1026, cbModelParam._m0[15u].z, fma(_1022, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1018)) + cbModelParam._m0[15u].w;
        float _1831 = fma(_964, cbModelParam._m0[13u].z, fma(_963, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _962));
        float _1834 = fma(_964, cbModelParam._m0[14u].z, fma(_963, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _962));
        float _1837 = fma(_964, cbModelParam._m0[15u].z, fma(_963, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _962));
        float _1865;
        if (_1831 > 0.0)
        {
            _1865 = abs((1.0 - _1820) / _1831);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1831 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1820 + 1.0) / _1831);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1865 = frontier_phi_14_12_ladder;
        }
        float _2036;
        if (_1834 > 0.0)
        {
            _2036 = abs((1.0 - _1824) / _1834);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1834 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1824 + 1.0) / _1834);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2036 = frontier_phi_23_19_ladder;
        }
        float _2331;
        if (_1837 > 0.0)
        {
            _2331 = abs((1.0 - _1828) / _1837);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1837 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1828 + 1.0) / _1837);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2331 = frontier_phi_35_30_ladder;
        }
        float _2333 = isnan(_2036) ? _1865 : (isnan(_1865) ? _2036 : min(_1865, _2036));
        float _2334 = isnan(_2331) ? _2333 : (isnan(_2333) ? _2331 : min(_2333, _2331));
        float _2338 = (_2334 * _1831) + _1820;
        float _2339 = (_2334 * _1834) + _1824;
        float _2340 = (_2334 * _1837) + _1828;
        float _2341 = _2334 * 9.9999997473787516355514526367188e-05;
        float _2343 = (-1.0) - _2341;
        float _2345 = _2341 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2340 > _2345) || ((_2340 < _2343) || ((_2339 > _2345) || ((_2339 < _2343) || ((_2338 < _2343) || (_2338 > _2345))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2485 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2340, cbModelParam._m0[9u].z, fma(_2339, cbModelParam._m0[9u].y, _2338 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2340, cbModelParam._m0[10u].z, fma(_2339, cbModelParam._m0[10u].y, _2338 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2340, cbModelParam._m0[11u].z, fma(_2339, cbModelParam._m0[11u].y, _2338 * cbModelParam._m0[11u].x))), _1773);
            frontier_phi_13_35_ladder = _2485.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2485.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2485.x * cbModelParam._m0[1u].y;
        }
        _1853 = frontier_phi_13_35_ladder_2;
        _1855 = frontier_phi_13_35_ladder_1;
        _1857 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1841 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_962, _963, _964), _1773);
        _1853 = _1841.x * cbModelParam._m0[1u].y;
        _1855 = _1841.y * cbModelParam._m0[1u].y;
        _1857 = _1841.z * cbModelParam._m0[1u].y;
    }
    float _1861 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _791);
    float _1862 = isnan(_1861) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1861 : min(cbModelParam._m0[25u].w, _1861));
    float _1951;
    float _1953;
    float _1955;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1915 = fma(_1026, cbModelParam._m0[21u].z, fma(_1022, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1018)) + cbModelParam._m0[21u].w;
        float _1919 = fma(_1026, cbModelParam._m0[22u].z, fma(_1022, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1018)) + cbModelParam._m0[22u].w;
        float _1923 = fma(_1026, cbModelParam._m0[23u].z, fma(_1022, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1018)) + cbModelParam._m0[23u].w;
        float _1926 = fma(_964, cbModelParam._m0[21u].z, fma(_963, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _962));
        float _1929 = fma(_964, cbModelParam._m0[22u].z, fma(_963, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _962));
        float _1932 = fma(_964, cbModelParam._m0[23u].z, fma(_963, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _962));
        float _2041;
        if (_1926 > 0.0)
        {
            _2041 = abs((1.0 - _1915) / _1926);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1926 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1915 + 1.0) / _1926);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2041 = frontier_phi_25_21_ladder;
        }
        float _2358;
        if (_1929 > 0.0)
        {
            _2358 = abs((1.0 - _1919) / _1929);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1929 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1919 + 1.0) / _1929);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2358 = frontier_phi_37_32_ladder;
        }
        float _2696;
        if (_1932 > 0.0)
        {
            _2696 = abs((1.0 - _1923) / _1932);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1932 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1923 + 1.0) / _1932);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2696 = frontier_phi_47_44_ladder;
        }
        float _2698 = isnan(_2358) ? _2041 : (isnan(_2041) ? _2358 : min(_2041, _2358));
        float _2699 = isnan(_2696) ? _2698 : (isnan(_2698) ? _2696 : min(_2698, _2696));
        float _2703 = (_2699 * _1926) + _1915;
        float _2704 = (_2699 * _1929) + _1919;
        float _2705 = (_2699 * _1932) + _1923;
        float _2706 = _2699 * 9.9999997473787516355514526367188e-05;
        float _2707 = (-1.0) - _2706;
        float _2709 = _2706 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2705 > _2709) || ((_2705 < _2707) || ((_2704 > _2709) || ((_2704 < _2707) || ((_2703 < _2707) || (_2703 > _2709))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2827 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2705, cbModelParam._m0[17u].z, fma(_2704, cbModelParam._m0[17u].y, _2703 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2705, cbModelParam._m0[18u].z, fma(_2704, cbModelParam._m0[18u].y, _2703 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2705, cbModelParam._m0[19u].z, fma(_2704, cbModelParam._m0[19u].y, _2703 * cbModelParam._m0[19u].x))), _1862);
            frontier_phi_22_47_ladder = _2827.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2827.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2827.x * cbModelParam._m0[1u].z;
        }
        _1951 = frontier_phi_22_47_ladder_2;
        _1953 = frontier_phi_22_47_ladder_1;
        _1955 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1935 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_962, _963, _964), _1862);
        _1951 = _1935.x * cbModelParam._m0[1u].z;
        _1953 = _1935.y * cbModelParam._m0[1u].z;
        _1955 = _1935.z * cbModelParam._m0[1u].z;
    }
    float _1968 = (((_989 * _938) + _990) * _954) * ((cbModelParam._m0[1u].w * (_1951 - _1853)) + _1853);
    float _1970 = (((_989 * _940) + _990) * _954) * ((cbModelParam._m0[1u].w * (_1953 - _1855)) + _1855);
    float _1972 = (((_989 * _941) + _990) * _954) * ((cbModelParam._m0[1u].w * (_1955 - _1857)) + _1857);
    float _1975 = fma(_1972, cbSceneParam._m0[89u].z, fma(_1970, cbSceneParam._m0[89u].y, _1968 * cbSceneParam._m0[89u].x));
    float _1978 = fma(_1972, cbSceneParam._m0[90u].z, fma(_1970, cbSceneParam._m0[90u].y, _1968 * cbSceneParam._m0[90u].x));
    float _1981 = fma(_1972, cbSceneParam._m0[91u].z, fma(_1970, cbSceneParam._m0[91u].y, _1968 * cbSceneParam._m0[91u].x));
    float _2015 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2019 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2023 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2027 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2028 = _2015 / _2027;
    float _2029 = _2019 / _2027;
    float _2030 = _2023 / _2027;
    float _2177;
    float _2178;
    float _2179;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2057 = ((uint(_2030 > cbSceneParam._m0[59u].y) + uint(_2030 > cbSceneParam._m0[59u].x)) + uint(_2030 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2058 = _2057 + 43u;
        uint _2066 = _2057 + 44u;
        uint _2074 = _2057 + 45u;
        uint _2082 = _2057 + 46u;
        float _2093 = fma(_2027, cbSceneParam._m0[_2058].w, fma(_2023, cbSceneParam._m0[_2058].z, fma(_2019, cbSceneParam._m0[_2058].y, _2015 * cbSceneParam._m0[_2058].x)));
        float _2097 = fma(_2027, cbSceneParam._m0[_2066].w, fma(_2023, cbSceneParam._m0[_2066].z, fma(_2019, cbSceneParam._m0[_2066].y, _2015 * cbSceneParam._m0[_2066].x)));
        float _2105 = fma(_2027, cbSceneParam._m0[_2082].w, fma(_2023, cbSceneParam._m0[_2082].z, fma(_2019, cbSceneParam._m0[_2082].y, _2015 * cbSceneParam._m0[_2082].x)));
        float _2110 = cbSceneParam._m0[33u].z * _2105;
        float _2112 = cbSceneParam._m0[33u].w * _2105;
        float _2115 = fma(_2027, cbSceneParam._m0[_2074].w, fma(_2023, cbSceneParam._m0[_2074].z, fma(_2019, cbSceneParam._m0[_2074].y, _2015 * cbSceneParam._m0[_2074].x))) / _2105;
        float _2163 = (cbSceneParam._m0[33u].x - sqrt(((_2029 * _2029) + (_2028 * _2028)) + (_2030 * _2030))) * cbSceneParam._m0[33u].y;
        float _4492 = isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0));
        float _2170 = (isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2110 + _2093) / _2105, (_2112 + _2097) / _2105), _2115), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2112 + _2093) / _2105, (_2097 - _2110) / _2105), _2115), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2093 - _2110) / _2105, (_2097 - _2112) / _2105), _2115), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2093 - _2112) / _2105, (_2110 + _2097) / _2105), _2115), 0.0)).x), vec4(0.25)));
        _2177 = 1.0 - (_2170 * cbSceneParam._m0[34u].x);
        _2178 = 1.0 - (_2170 * cbSceneParam._m0[34u].y);
        _2179 = 1.0 - (_2170 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2177 = 1.0;
        _2178 = 1.0;
        _2179 = 1.0;
    }
    float _2243;
    float _2245;
    float _2247;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2231 = fma(_2027, cbSceneParam._m0[63u].w, fma(_2023, cbSceneParam._m0[63u].z, fma(_2019, cbSceneParam._m0[63u].y, _2015 * cbSceneParam._m0[63u].x)));
        float _2232 = fma(_2027, cbSceneParam._m0[60u].w, fma(_2023, cbSceneParam._m0[60u].z, fma(_2019, cbSceneParam._m0[60u].y, _2015 * cbSceneParam._m0[60u].x))) / _2231;
        float _2233 = fma(_2027, cbSceneParam._m0[61u].w, fma(_2023, cbSceneParam._m0[61u].z, fma(_2019, cbSceneParam._m0[61u].y, _2015 * cbSceneParam._m0[61u].x))) / _2231;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2232 >= cbSceneParam._m0[64u].x) && (_2233 >= cbSceneParam._m0[64u].y)) && (_2232 <= cbSceneParam._m0[64u].z)) && (_2233 <= cbSceneParam._m0[64u].w))
        {
            float _2371 = fma(_2027, cbSceneParam._m0[62u].w, fma(_2023, cbSceneParam._m0[62u].z, fma(_2019, cbSceneParam._m0[62u].y, _2015 * cbSceneParam._m0[62u].x))) / _2231;
            float _2375 = isnan(cbSceneParam._m0[41u].w) ? _2371 : (isnan(_2371) ? cbSceneParam._m0[41u].w : max(_2371, cbSceneParam._m0[41u].w));
            float _2418 = (cbSceneParam._m0[33u].x - sqrt(((_2029 * _2029) + (_2028 * _2028)) + (_2030 * _2030))) * cbSceneParam._m0[33u].y;
            float _4508 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
            float _2425 = (isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2232, cbSceneParam._m0[33u].w + _2233), _2375), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2232, _2233 - cbSceneParam._m0[33u].z), _2375), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2232 - cbSceneParam._m0[33u].z, _2233 - cbSceneParam._m0[33u].w), _2375), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2232 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2233), _2375), 0.0)).x), vec4(0.25)));
            float _2429 = 1.0 - (_2425 * cbSceneParam._m0[34u].x);
            float _2430 = 1.0 - (_2425 * cbSceneParam._m0[34u].y);
            float _2431 = 1.0 - (_2425 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2431) ? _2179 : (isnan(_2179) ? _2431 : min(_2179, _2431));
            frontier_phi_34_33_ladder_1 = isnan(_2430) ? _2178 : (isnan(_2178) ? _2430 : min(_2178, _2430));
            frontier_phi_34_33_ladder_2 = isnan(_2429) ? _2177 : (isnan(_2177) ? _2429 : min(_2177, _2429));
        }
        else
        {
            frontier_phi_34_33_ladder = _2179;
            frontier_phi_34_33_ladder_1 = _2178;
            frontier_phi_34_33_ladder_2 = _2177;
        }
        _2243 = frontier_phi_34_33_ladder_2;
        _2245 = frontier_phi_34_33_ladder_1;
        _2247 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2243 = _2177;
        _2245 = _2178;
        _2247 = _2179;
    }
    uvec4 _2252 = floatBitsToUint(cbInstanceData._m0[_272 + 5u]);
    uint _2254 = _2252.x * 14u;
    uint _2255 = _2254 + 13u;
    float _2262 = _954 + (-1.0);
    float _2267 = (cbLight._m0[_2255].x * _2262) + 1.0;
    float _2268 = (cbLight._m0[_2255].y * _2262) + 1.0;
    float _2269 = (cbLight._m0[_2255].z * _2262) + 1.0;
    float _2270 = (cbLight._m0[_2255].w * _2262) + 1.0;
    uint _2271 = _2254 + 5u;
    float _2277 = isnan(1.0) ? _2268 : (isnan(_2268) ? 1.0 : min(_2268, 1.0));
    uint _2281 = _2254 + 4u;
    float _2290 = isnan(1.0) ? _2267 : (isnan(_2267) ? 1.0 : min(_2267, 1.0));
    uint _2294 = _2254 | 1u;
    float _2305 = dot(vec3(cbLight._m0[_2254].xyz), vec3(_788, _789, _790));
    float _2308 = dot(vec3(cbLight._m0[_2294].xyz), vec3(_788, _789, _790));
    float _4544 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
    float _4555 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
    float _2313 = (isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0))) * 0.3183098733425140380859375;
    float _2315 = (isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0))) * 0.3183098733425140380859375;
    float _2322 = ((cbLight._m0[_2271].x * _2277) * _2315) + (((cbLight._m0[_2281].x * _2243) * _2290) * _2313);
    float _2323 = ((_2277 * cbLight._m0[_2271].y) * _2315) + (((cbLight._m0[_2281].y * _2245) * _2290) * _2313);
    float _2324 = ((_2277 * cbLight._m0[_2271].z) * _2315) + (((cbLight._m0[_2281].z * _2247) * _2290) * _2313);
    uvec4 _2328 = floatBitsToUint(cbLight._m0[_2254 + 12u]);
    bool _2330 = _2328.x == 0u;
    float _2432;
    float _2434;
    float _2436;
    if (_2330)
    {
        _2432 = _2322;
        _2434 = _2323;
        _2436 = _2324;
    }
    else
    {
        uint _2440 = _2254 + 6u;
        float _2456 = (dot(vec3(cbLight._m0[_2254 + 2u].xyz), vec3(_788, _789, _790)) * 0.5) + 0.5;
        float _2457 = _2456 * _2456;
        float _4566 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
        float _2458 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
        float _2459 = isnan(1.0) ? _2269 : (isnan(_2269) ? 1.0 : min(_2269, 1.0));
        _2432 = (((cbLight._m0[_2440].x * 0.3183098733425140380859375) * _2458) * _2459) + _2322;
        _2434 = (((cbLight._m0[_2440].y * 0.3183098733425140380859375) * _2458) * _2459) + _2323;
        _2436 = (((cbLight._m0[_2440].z * 0.3183098733425140380859375) * _2458) * _2459) + _2324;
    }
    bool _2439 = _2328.y == 0u;
    float _2494;
    float _2496;
    float _2498;
    if (_2439)
    {
        _2494 = _2432;
        _2496 = _2434;
        _2498 = _2436;
    }
    else
    {
        uint _2667 = _2254 + 7u;
        float _2683 = (dot(vec3(cbLight._m0[_2254 + 3u].xyz), vec3(_788, _789, _790)) * 0.5) + 0.5;
        float _2684 = _2683 * _2683;
        float _4582 = isnan(0.0) ? _2684 : (isnan(_2684) ? 0.0 : max(_2684, 0.0));
        float _2685 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
        float _2686 = isnan(1.0) ? _2270 : (isnan(_2270) ? 1.0 : min(_2270, 1.0));
        _2494 = (((cbLight._m0[_2667].x * 0.3183098733425140380859375) * _2685) * _2686) + _2432;
        _2496 = (((cbLight._m0[_2667].y * 0.3183098733425140380859375) * _2685) * _2686) + _2434;
        _2498 = (((cbLight._m0[_2667].z * 0.3183098733425140380859375) * _2685) * _2686) + _2436;
    }
    uint _2501 = _2254 + 8u;
    float _2514 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2254].w)) * _791) * 0.949999988079071044921875);
    float _2515 = _2514 * _2514;
    float _2516 = cbLight._m0[_2254].x + _868;
    float _2517 = cbLight._m0[_2254].y + _869;
    float _2518 = cbLight._m0[_2254].z + _870;
    float _2522 = inversesqrt(dot(vec3(_2516, _2517, _2518), vec3(_2516, _2517, _2518)));
    float _2523 = _2522 * _2516;
    float _2524 = _2522 * _2517;
    float _2525 = _2522 * _2518;
    float _2526 = dot(vec3(_788, _789, _790), vec3(cbLight._m0[_2254].xyz));
    float _4598 = isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0));
    float _2529 = isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0));
    float _4609 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
    float _2530 = isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0));
    float _2531 = dot(vec3(_788, _789, _790), vec3(_2523, _2524, _2525));
    float _4620 = isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0));
    float _2534 = isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0));
    float _2535 = dot(vec3(cbLight._m0[_2254].xyz), vec3(_2523, _2524, _2525));
    float _4631 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0));
    float _2539 = _2515 * _2515;
    float _2543 = ((_2534 * _2534) * (_2539 + (-1.0))) + 1.0;
    float _2551 = exp2(log2(1.0 - (isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0)))) * 5.0);
    float _2552 = 0.959999978542327880859375 - _935;
    float _2554 = 0.959999978542327880859375 - _936;
    float _2555 = 0.959999978542327880859375 - _937;
    float _2562 = 1.0 - _2515;
    float _2573 = (0.5 / (((_2530 * ((_2529 * _2562) + _2515)) + 9.9999999392252902907785028219223e-09) + (((_2530 * _2562) + _2515) * _2529))) * _2529;
    float _4642 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0));
    float _2575 = (isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0))) * (_2539 / ((_2543 * _2543) * 3.141590118408203125));
    uint _2589 = _2254 + 9u;
    float _2600 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2294].w)) * _791) * 0.949999988079071044921875);
    float _2601 = _2600 * _2600;
    float _2602 = cbLight._m0[_2294].x + _868;
    float _2603 = cbLight._m0[_2294].y + _869;
    float _2604 = cbLight._m0[_2294].z + _870;
    float _2608 = inversesqrt(dot(vec3(_2602, _2603, _2604), vec3(_2602, _2603, _2604)));
    float _2609 = _2608 * _2602;
    float _2610 = _2608 * _2603;
    float _2611 = _2608 * _2604;
    float _2612 = dot(vec3(_788, _789, _790), vec3(cbLight._m0[_2294].xyz));
    float _4653 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0));
    float _2615 = isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0));
    float _2616 = dot(vec3(_788, _789, _790), vec3(_2609, _2610, _2611));
    float _4664 = isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : max(_2616, 0.0));
    float _2619 = isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0));
    float _2620 = dot(vec3(cbLight._m0[_2294].xyz), vec3(_2609, _2610, _2611));
    float _4675 = isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : max(_2620, 0.0));
    float _2624 = _2601 * _2601;
    float _2628 = ((_2619 * _2619) * (_2624 + (-1.0))) + 1.0;
    float _2635 = exp2(log2(1.0 - (isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0)))) * 5.0);
    float _2642 = 1.0 - _2601;
    float _2652 = (0.5 / (((_2530 * ((_2615 * _2642) + _2601)) + 9.9999999392252902907785028219223e-09) + (((_2530 * _2642) + _2601) * _2615))) * _2615;
    float _4686 = isnan(0.0) ? _2652 : (isnan(_2652) ? 0.0 : max(_2652, 0.0));
    float _2654 = (isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0))) * (_2624 / ((_2628 * _2628) * 3.141590118408203125));
    float _2664 = (((((_2635 * _2552) + _938) * cbLight._m0[_2589].x) * _2654) * _2277) + ((((cbLight._m0[_2501].x * _2243) * ((_2551 * _2552) + _938)) * _2575) * _2290);
    float _2665 = (((((_2635 * _2554) + _940) * cbLight._m0[_2589].y) * _2654) * _2277) + ((((cbLight._m0[_2501].y * _2245) * ((_2551 * _2554) + _940)) * _2575) * _2290);
    float _2666 = (((((_2635 * _2555) + _941) * cbLight._m0[_2589].z) * _2654) * _2277) + ((((cbLight._m0[_2501].z * _2247) * ((_2551 * _2555) + _941)) * _2575) * _2290);
    float _2722;
    float _2724;
    float _2726;
    if (_2330)
    {
        _2722 = _2664;
        _2724 = _2665;
        _2726 = _2666;
    }
    else
    {
        uint _2728 = _2254 + 2u;
        uint _2732 = _2254 + 10u;
        float _2746 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2728].w)) * _791) * 0.949999988079071044921875);
        float _2747 = _2746 * _2746;
        float _2748 = cbLight._m0[_2728].x + _868;
        float _2749 = cbLight._m0[_2728].y + _869;
        float _2750 = cbLight._m0[_2728].z + _870;
        float _2754 = inversesqrt(dot(vec3(_2748, _2749, _2750), vec3(_2748, _2749, _2750)));
        float _2755 = _2754 * _2748;
        float _2756 = _2754 * _2749;
        float _2757 = _2754 * _2750;
        float _2758 = dot(vec3(_788, _789, _790), vec3(cbLight._m0[_2728].xyz));
        float _4697 = isnan(0.0) ? _2758 : (isnan(_2758) ? 0.0 : max(_2758, 0.0));
        float _2761 = isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0));
        float _2762 = dot(vec3(_788, _789, _790), vec3(_2755, _2756, _2757));
        float _4708 = isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0));
        float _2765 = isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0));
        float _2766 = dot(vec3(cbLight._m0[_2728].xyz), vec3(_2755, _2756, _2757));
        float _4719 = isnan(0.0) ? _2766 : (isnan(_2766) ? 0.0 : max(_2766, 0.0));
        float _2770 = _2747 * _2747;
        float _2774 = ((_2765 * _2765) * (_2770 + (-1.0))) + 1.0;
        float _2781 = exp2(log2(1.0 - (isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0)))) * 5.0);
        float _2788 = 1.0 - _2747;
        float _2798 = (0.5 / (((_2530 * ((_2761 * _2788) + _2747)) + 9.9999999392252902907785028219223e-09) + (((_2530 * _2788) + _2747) * _2761))) * _2761;
        float _4730 = isnan(0.0) ? _2798 : (isnan(_2798) ? 0.0 : max(_2798, 0.0));
        float _2800 = (isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0))) * (_2770 / ((_2774 * _2774) * 3.141590118408203125));
        float _2801 = isnan(1.0) ? _2269 : (isnan(_2269) ? 1.0 : min(_2269, 1.0));
        _2722 = (((((_2781 * _2552) + _938) * cbLight._m0[_2732].x) * _2800) * _2801) + _2664;
        _2724 = (((((_2781 * _2554) + _940) * cbLight._m0[_2732].y) * _2800) * _2801) + _2665;
        _2726 = (((((_2781 * _2555) + _941) * cbLight._m0[_2732].z) * _2800) * _2801) + _2666;
    }
    float _2832;
    float _2834;
    float _2836;
    if (_2439)
    {
        _2832 = _2722;
        _2834 = _2724;
        _2836 = _2726;
    }
    else
    {
        uint _2843 = _2254 + 3u;
        uint _2847 = _2254 + 11u;
        float _2861 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2843].w)) * _791) * 0.949999988079071044921875);
        float _2862 = _2861 * _2861;
        float _2863 = cbLight._m0[_2843].x + _868;
        float _2864 = cbLight._m0[_2843].y + _869;
        float _2865 = cbLight._m0[_2843].z + _870;
        float _2869 = inversesqrt(dot(vec3(_2863, _2864, _2865), vec3(_2863, _2864, _2865)));
        float _2870 = _2869 * _2863;
        float _2871 = _2869 * _2864;
        float _2872 = _2869 * _2865;
        float _2873 = dot(vec3(_788, _789, _790), vec3(cbLight._m0[_2843].xyz));
        float _4746 = isnan(0.0) ? _2873 : (isnan(_2873) ? 0.0 : max(_2873, 0.0));
        float _2876 = isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0));
        float _2877 = dot(vec3(_788, _789, _790), vec3(_2870, _2871, _2872));
        float _4757 = isnan(0.0) ? _2877 : (isnan(_2877) ? 0.0 : max(_2877, 0.0));
        float _2880 = isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0));
        float _2881 = dot(vec3(cbLight._m0[_2843].xyz), vec3(_2870, _2871, _2872));
        float _4768 = isnan(0.0) ? _2881 : (isnan(_2881) ? 0.0 : max(_2881, 0.0));
        float _2885 = _2862 * _2862;
        float _2889 = ((_2880 * _2880) * (_2885 + (-1.0))) + 1.0;
        float _2896 = exp2(log2(1.0 - (isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0)))) * 5.0);
        float _2903 = 1.0 - _2862;
        float _2913 = (0.5 / (((_2530 * ((_2876 * _2903) + _2862)) + 9.9999999392252902907785028219223e-09) + (((_2530 * _2903) + _2862) * _2876))) * _2876;
        float _4779 = isnan(0.0) ? _2913 : (isnan(_2913) ? 0.0 : max(_2913, 0.0));
        float _2915 = (isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0))) * (_2885 / ((_2889 * _2889) * 3.141590118408203125));
        float _2916 = isnan(1.0) ? _2270 : (isnan(_2270) ? 1.0 : min(_2270, 1.0));
        _2832 = (((((_2896 * _2552) + _938) * cbLight._m0[_2847].x) * _2915) * _2916) + _2722;
        _2834 = (((((_2896 * _2554) + _940) * cbLight._m0[_2847].y) * _2915) * _2916) + _2724;
        _2836 = (((((_2896 * _2555) + _941) * cbLight._m0[_2847].z) * _2915) * _2916) + _2726;
    }
    float _2982;
    float _2984;
    float _2986;
    float _2988;
    float _2990;
    float _2992;
    if (_2252.y == 0u)
    {
        uvec4 _2937 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2938 = _2937.x;
        uint _2949 = uint((float(_2937.y) * floor(float(uint(cbSceneParam._m0[85u].y * _877) / _2938))) + floor(float(uint(cbSceneParam._m0[85u].x * _876) / _2938)));
        float _2959 = (log2(_2030 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2960 = isnan(0.0) ? _2959 : (isnan(_2959) ? 0.0 : max(_2959, 0.0));
        uint _2963 = uint(isnan(14.0) ? _2960 : (isnan(_2960) ? 14.0 : min(_2960, 14.0)));
        uvec4 _2968 = texelFetch(g_lightClusterGridBuffer, int(((_2963 << 2u) + (_2949 << 6u)) >> 2u));
        uint _2969 = _2968.x;
        uint _2970 = _2937.z;
        float _3049;
        float _3051;
        float _3053;
        float _3055;
        float _3057;
        float _3059;
        if (((((1u << ((_2970 >> 4u) & 15u)) + 4294967295u) & _2969) == 0u) || ((_2970 & 240u) == 0u))
        {
            _3049 = 0.0;
            _3051 = 0.0;
            _3053 = 0.0;
            _3055 = 0.0;
            _3057 = 0.0;
            _3059 = 0.0;
        }
        else
        {
            float _3050;
            float _3052;
            float _3054;
            float _3056;
            float _3058;
            float _3060;
            float _3194 = 0.0;
            float _3195 = 0.0;
            float _3196 = 0.0;
            float _3197 = 0.0;
            float _3198 = 0.0;
            float _3199 = 0.0;
            uint _3200 = 0u;
            uint _3209;
            bool _3210;
            for (;;)
            {
                _3209 = texelFetch(g_lightClassification, int((((_2963 << 5u) + (_2949 << 9u)) + (_3200 << 2u)) >> 2u)).x;
                _3210 = _3209 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3210)
                {
                    frontier_phi_66_pred = _3199;
                    frontier_phi_66_pred_1 = _3198;
                    frontier_phi_66_pred_2 = _3197;
                    frontier_phi_66_pred_3 = _3196;
                    frontier_phi_66_pred_4 = _3195;
                    frontier_phi_66_pred_5 = _3194;
                }
                else
                {
                    float _3318;
                    float _3319;
                    float _3320;
                    float _3321;
                    float _3322;
                    float _3323;
                    uint _3324;
                    _3318 = _3194;
                    _3319 = _3195;
                    _3320 = _3196;
                    _3321 = _3197;
                    _3322 = _3198;
                    _3323 = _3199;
                    _3324 = _3209;
                    float _3250;
                    float _3251;
                    float _3252;
                    float _3253;
                    float _3254;
                    float _3255;
                    for (;;)
                    {
                        uint _3328 = uint(findLSB(_3324)) + (_3200 << 5u);
                        uint _3325 = (_3324 + 4294967295u) & _3324;
                        uint _3330 = _3328 * 48u;
                        vec4 _3344 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3330)).x, texelFetch(g_PointLightRenderingBuffer, int(_3330 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3330 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3330 + 3u)).x));
                        uint _3350 = (_3328 * 48u) + 4u;
                        vec4 _3363 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3350)).x, texelFetch(g_PointLightRenderingBuffer, int(_3350 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3350 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3350 + 3u)).x));
                        uint _3369 = (_3328 * 48u) + 8u;
                        vec3 _3380 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3369)).x, texelFetch(g_PointLightRenderingBuffer, int(_3369 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3369 + 2u)).x));
                        float _3384 = _3344.x - _2028;
                        float _3385 = _3344.y - _2029;
                        float _3386 = _3344.z - _2030;
                        float _3387 = dot(vec3(_3384, _3385, _3386), vec3(_3384, _3385, _3386));
                        float _3390 = inversesqrt(_3387);
                        float _3391 = _3390 * _3384;
                        float _3392 = _3390 * _3385;
                        float _3393 = _3390 * _3386;
                        float _3394 = dot(vec3(_895, _898, _901), vec3(_3391, _3392, _3393));
                        float _3399 = 1.0 - (_3387 * _3344.w);
                        float _4805 = isnan(0.0) ? _3399 : (isnan(_3399) ? 0.0 : max(_3399, 0.0));
                        float _3400 = isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0));
                        float _3401 = sqrt(_3387) * _3363.w;
                        float _3404 = 1.39999997615814208984375 / (_3401 + 1.39999997615814208984375);
                        float _3405 = _3404 * _3404;
                        float _3408 = ((1.0 - _3405) * _3394) + _3405;
                        float _3411 = _3401 * _3401;
                        float _3415 = ((isnan(0.0) ? _3408 : (isnan(_3408) ? 0.0 : max(_3408, 0.0))) * _3400) / ((_3411 * 0.699999988079071044921875) + 1.0);
                        float _3419 = (-0.0) - _2028;
                        float _3420 = (-0.0) - _2029;
                        float _3421 = (-0.0) - _2030;
                        float _3425 = inversesqrt(dot(vec3(_3419, _3420, _3421), vec3(_3419, _3420, _3421)));
                        float _3426 = _3425 * _3419;
                        float _3427 = _3425 * _3420;
                        float _3428 = _3425 * _3421;
                        float _3435 = exp2(log2(1.0 / ((_3411 * 3.5) + 5.0)) * 0.25);
                        float _3436 = 1.0 - _970;
                        float _3443 = sqrt(1.0 - ((1.0 - (_3436 * _3436)) * (1.0 - (_3435 * _3435))));
                        float _3444 = _3443 * _3443;
                        float _3445 = _3444 * _3444;
                        float _3446 = _3426 + _3391;
                        float _3447 = _3427 + _3392;
                        float _3448 = _3428 + _3393;
                        float _3452 = inversesqrt(dot(vec3(_3446, _3447, _3448), vec3(_3446, _3447, _3448)));
                        float _3456 = dot(vec3(_895, _898, _901), vec3(_3426, _3427, _3428));
                        float _4821 = isnan(0.0) ? _3456 : (isnan(_3456) ? 0.0 : max(_3456, 0.0));
                        float _3459 = isnan(1.0) ? _4821 : (isnan(_4821) ? 1.0 : min(_4821, 1.0));
                        float _3460 = dot(vec3(_895, _898, _901), vec3(_3452 * _3446, _3452 * _3447, _3452 * _3448));
                        float _4832 = isnan(0.0) ? _3460 : (isnan(_3460) ? 0.0 : max(_3460, 0.0));
                        float _3463 = isnan(1.0) ? _4832 : (isnan(_4832) ? 1.0 : min(_4832, 1.0));
                        float _3467 = ((_3463 * _3463) * (_3445 + (-1.0))) + 1.0;
                        float _3468 = _3404 * _3444;
                        float _3469 = _3468 * _3468;
                        float _3472 = ((1.0 - _3469) * _3394) + _3469;
                        float _4843 = isnan(0.0) ? _3472 : (isnan(_3472) ? 0.0 : max(_3472, 0.0));
                        float _3473 = isnan(1.0) ? _4843 : (isnan(_4843) ? 1.0 : min(_4843, 1.0));
                        float _3474 = 1.0 - _3444;
                        float _3484 = (0.5 / (((_3473 * ((_3459 * _3474) + _3444)) + 9.9999999392252902907785028219223e-09) + (((_3473 * _3474) + _3444) * _3459))) * _3473;
                        float _4854 = isnan(0.0) ? _3484 : (isnan(_3484) ? 0.0 : max(_3484, 0.0));
                        float _3495 = (((_3445 * 3.1415927410125732421875) * (isnan(1.0) ? _4854 : (isnan(_4854) ? 1.0 : min(_4854, 1.0)))) / ((_3467 * _3467) * ((_3411 * 2.1991131305694580078125) + 3.141590118408203125))) * _3400;
                        _3253 = (_3415 * _3363.x) + _3321;
                        _3254 = (_3415 * _3363.y) + _3322;
                        _3255 = (_3415 * _3363.z) + _3323;
                        _3250 = (_3495 * _3380.x) + _3318;
                        _3251 = (_3495 * _3380.y) + _3319;
                        _3252 = (_3495 * _3380.z) + _3320;
                        if (_3325 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3318 = _3250;
                            _3319 = _3251;
                            _3320 = _3252;
                            _3321 = _3253;
                            _3322 = _3254;
                            _3323 = _3255;
                            _3324 = _3325;
                        }
                    }
                    frontier_phi_66_pred = _3255;
                    frontier_phi_66_pred_1 = _3254;
                    frontier_phi_66_pred_2 = _3253;
                    frontier_phi_66_pred_3 = _3252;
                    frontier_phi_66_pred_4 = _3251;
                    frontier_phi_66_pred_5 = _3250;
                }
                _3060 = frontier_phi_66_pred;
                _3058 = frontier_phi_66_pred_1;
                _3056 = frontier_phi_66_pred_2;
                _3054 = frontier_phi_66_pred_3;
                _3052 = frontier_phi_66_pred_4;
                _3050 = frontier_phi_66_pred_5;
                uint _3201 = _3200 + 1u;
                if (_3201 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3194 = _3050;
                    _3195 = _3052;
                    _3196 = _3054;
                    _3197 = _3056;
                    _3198 = _3058;
                    _3199 = _3060;
                    _3200 = _3201;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3049 = _3050;
            _3051 = _3052;
            _3053 = _3054;
            _3055 = _3056;
            _3057 = _3058;
            _3059 = _3060;
        }
        uvec4 _3063 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3064 = _3063.z;
        uint _3066 = (_3064 >> 8u) & 15u;
        float _3162;
        float _3164;
        float _3166;
        float _3168;
        float _3170;
        float _3172;
        if (((4294967295u << _3066) & _2969) == 0u)
        {
            _3162 = _3049;
            _3164 = _3051;
            _3166 = _3053;
            _3168 = _3055;
            _3170 = _3057;
            _3172 = _3059;
        }
        else
        {
            float _3187 = inversesqrt(dot(vec3(_2028, _2029, _2030), vec3(_2028, _2029, _2030)));
            float _3188 = _3187 * _2028;
            float _3189 = _3187 * _2029;
            float _3190 = _3187 * _2030;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3066 < ((_3064 >> 12u) & 15u))
            {
                float _3163;
                float _3165;
                float _3167;
                float _3169;
                float _3171;
                float _3173;
                float _3301 = _3049;
                float _3302 = _3051;
                float _3303 = _3053;
                float _3304 = _3055;
                float _3305 = _3057;
                float _3306 = _3059;
                uint _3307 = _3066;
                uint _3316;
                bool _3317;
                for (;;)
                {
                    _3316 = texelFetch(g_lightClassification, int((((_2963 << 5u) + (_2949 << 9u)) + (_3307 << 2u)) >> 2u)).x;
                    _3317 = _3316 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3317)
                    {
                        frontier_phi_72_pred = _3306;
                        frontier_phi_72_pred_1 = _3305;
                        frontier_phi_72_pred_2 = _3304;
                        frontier_phi_72_pred_3 = _3303;
                        frontier_phi_72_pred_4 = _3302;
                        frontier_phi_72_pred_5 = _3301;
                    }
                    else
                    {
                        float _3500;
                        float _3501;
                        float _3502;
                        float _3503;
                        float _3504;
                        float _3505;
                        float _3793;
                        float _3794;
                        float _3795;
                        float _3796;
                        float _3797;
                        float _3798;
                        float _3513 = _3301;
                        float _3514 = _3302;
                        float _3515 = _3303;
                        float _3516 = _3304;
                        float _3517 = _3305;
                        float _3518 = _3306;
                        uint _3519 = _3316;
                        uint _3520;
                        vec4 _3545;
                        float _3546;
                        vec4 _3561;
                        vec3 _3573;
                        vec4 _3588;
                        vec4 _3603;
                        float _3649;
                        bool _3650;
                        for (;;)
                        {
                            uint _3530 = ((_3307 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3519));
                            _3520 = (_3519 + 4294967295u) & _3519;
                            uint _3532 = _3530 * 40u;
                            _3545 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3532)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3532 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3532 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3532 + 3u)).x));
                            _3546 = _3545.w;
                            uint _3548 = (_3530 * 40u) + 4u;
                            _3561 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3548)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3548 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3548 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3548 + 3u)).x));
                            uint _3563 = (_3530 * 40u) + 8u;
                            _3573 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3563)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3563 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3563 + 2u)).x));
                            uint _3575 = (_3530 * 40u) + 16u;
                            _3588 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3575)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3575 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3575 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3575 + 3u)).x));
                            uint _3590 = (_3530 * 40u) + 20u;
                            _3603 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3590)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 3u)).x));
                            uint _3605 = (_3530 * 40u) + 24u;
                            vec4 _3618 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3605)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3605 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3605 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3605 + 3u)).x));
                            uint _3624 = (_3530 * 40u) + 28u;
                            vec4 _3637 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3624)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3624 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3624 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3624 + 3u)).x));
                            _3649 = fma(_2030, _3637.z, fma(_2029, _3637.y, _3637.x * _2028)) + _3637.w;
                            _3650 = !((fma(_2030, _3618.z, fma(_2029, _3618.y, _3618.x * _2028)) + _3618.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3650)
                            {
                                float _3677 = _3545.x - _2028;
                                float _3678 = _3545.y - _2029;
                                float _3679 = _3545.z - _2030;
                                float _3680 = dot(vec3(_3677, _3678, _3679), vec3(_3677, _3678, _3679));
                                float _3683 = inversesqrt(_3680);
                                float _3684 = _3683 * _3677;
                                float _3685 = _3683 * _3678;
                                float _3686 = _3683 * _3679;
                                float _3690 = 1.0 - (_3680 / (_3546 * _3546));
                                float _4865 = isnan(0.0) ? _3690 : (isnan(_3690) ? 0.0 : max(_3690, 0.0));
                                float _3691 = isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0));
                                float _3695 = sqrt(_3680) * _3561.w;
                                float _3697 = 1.39999997615814208984375 / (_3695 + 1.39999997615814208984375);
                                float _3698 = _3697 * _3697;
                                float _3701 = ((1.0 - _3698) * dot(vec3(_3684, _3685, _3686), vec3(_895, _898, _901))) + _3698;
                                float _3704 = _3695 * _3695;
                                float _3708 = (fma(_2030, _3588.z, fma(_2029, _3588.y, _3588.x * _2028)) + _3588.w) / _3649;
                                float _3709 = (fma(_2030, _3603.z, fma(_2029, _3603.y, _3603.x * _2028)) + _3603.w) / _3649;
                                float _3713 = 1.0 - dot(vec2(_3708, _3709), vec2(_3708, _3709));
                                float _4881 = isnan(0.0) ? _3713 : (isnan(_3713) ? 0.0 : max(_3713, 0.0));
                                float _3714 = isnan(1.0) ? _4881 : (isnan(_4881) ? 1.0 : min(_4881, 1.0));
                                float _3715 = _3714 * (((isnan(0.0) ? _3701 : (isnan(_3701) ? 0.0 : max(_3701, 0.0))) * _3691) / ((_3704 * 0.699999988079071044921875) + 1.0));
                                float _3727 = exp2(log2(1.0 / ((_3704 * 3.5) + 5.0)) * 0.25);
                                float _3728 = 1.0 - _970;
                                float _3735 = sqrt(1.0 - ((1.0 - (_3728 * _3728)) * (1.0 - (_3727 * _3727))));
                                float _3736 = _3735 * _3735;
                                float _3737 = _3736 * _3736;
                                float _3738 = _3684 - _3188;
                                float _3739 = _3685 - _3189;
                                float _3740 = _3686 - _3190;
                                float _3744 = inversesqrt(dot(vec3(_3738, _3739, _3740), vec3(_3738, _3739, _3740)));
                                float _3748 = dot(vec3(_895, _898, _901), vec3((-0.0) - _3188, (-0.0) - _3189, (-0.0) - _3190));
                                float _4892 = isnan(0.0) ? _3748 : (isnan(_3748) ? 0.0 : max(_3748, 0.0));
                                float _3751 = isnan(1.0) ? _4892 : (isnan(_4892) ? 1.0 : min(_4892, 1.0));
                                float _3752 = dot(vec3(_895, _898, _901), vec3(_3744 * _3738, _3744 * _3739, _3744 * _3740));
                                float _4903 = isnan(0.0) ? _3752 : (isnan(_3752) ? 0.0 : max(_3752, 0.0));
                                float _3755 = isnan(1.0) ? _4903 : (isnan(_4903) ? 1.0 : min(_4903, 1.0));
                                float _3759 = ((_3755 * _3755) * (_3737 + (-1.0))) + 1.0;
                                float _3760 = _3697 * _3736;
                                float _3761 = _3760 * _3760;
                                float _3767 = ((1.0 - _3761) * dot(vec3(_895, _898, _901), vec3(_3684, _3685, _3686))) + _3761;
                                float _4914 = isnan(0.0) ? _3767 : (isnan(_3767) ? 0.0 : max(_3767, 0.0));
                                float _3768 = isnan(1.0) ? _4914 : (isnan(_4914) ? 1.0 : min(_4914, 1.0));
                                float _3769 = 1.0 - _3736;
                                float _3779 = (0.5 / (((_3768 * ((_3751 * _3769) + _3736)) + 9.9999999392252902907785028219223e-09) + (((_3768 * _3769) + _3736) * _3751))) * _3768;
                                float _4925 = isnan(0.0) ? _3779 : (isnan(_3779) ? 0.0 : max(_3779, 0.0));
                                float _3789 = (_3714 * _3691) * (((_3737 * 3.1415927410125732421875) * (isnan(1.0) ? _4925 : (isnan(_4925) ? 1.0 : min(_4925, 1.0)))) / ((_3759 * _3759) * ((_3704 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3715 * _3561.y;
                                frontier_phi_78_pred_1 = _3715 * _3561.x;
                                frontier_phi_78_pred_2 = _3789 * _3573.z;
                                frontier_phi_78_pred_3 = _3789 * _3573.y;
                                frontier_phi_78_pred_4 = _3789 * _3573.x;
                                frontier_phi_78_pred_5 = _3715 * _3561.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3797 = frontier_phi_78_pred;
                            _3796 = frontier_phi_78_pred_1;
                            _3795 = frontier_phi_78_pred_2;
                            _3794 = frontier_phi_78_pred_3;
                            _3793 = frontier_phi_78_pred_4;
                            _3798 = frontier_phi_78_pred_5;
                            _3503 = _3796 + _3516;
                            _3504 = _3797 + _3517;
                            _3505 = _3798 + _3518;
                            _3500 = _3793 + _3513;
                            _3501 = _3794 + _3514;
                            _3502 = _3795 + _3515;
                            if (_3520 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3513 = _3500;
                                _3514 = _3501;
                                _3515 = _3502;
                                _3516 = _3503;
                                _3517 = _3504;
                                _3518 = _3505;
                                _3519 = _3520;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3505;
                        frontier_phi_72_pred_1 = _3504;
                        frontier_phi_72_pred_2 = _3503;
                        frontier_phi_72_pred_3 = _3502;
                        frontier_phi_72_pred_4 = _3501;
                        frontier_phi_72_pred_5 = _3500;
                    }
                    _3173 = frontier_phi_72_pred;
                    _3171 = frontier_phi_72_pred_1;
                    _3169 = frontier_phi_72_pred_2;
                    _3167 = frontier_phi_72_pred_3;
                    _3165 = frontier_phi_72_pred_4;
                    _3163 = frontier_phi_72_pred_5;
                    uint _3308 = _3307 + 1u;
                    if (_3308 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3301 = _3163;
                        _3302 = _3165;
                        _3303 = _3167;
                        _3304 = _3169;
                        _3305 = _3171;
                        _3306 = _3173;
                        _3307 = _3308;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3173;
                frontier_phi_60_61_ladder_1 = _3171;
                frontier_phi_60_61_ladder_2 = _3167;
                frontier_phi_60_61_ladder_3 = _3165;
                frontier_phi_60_61_ladder_4 = _3163;
                frontier_phi_60_61_ladder_5 = _3169;
            }
            else
            {
                frontier_phi_60_61_ladder = _3059;
                frontier_phi_60_61_ladder_1 = _3057;
                frontier_phi_60_61_ladder_2 = _3053;
                frontier_phi_60_61_ladder_3 = _3051;
                frontier_phi_60_61_ladder_4 = _3049;
                frontier_phi_60_61_ladder_5 = _3055;
            }
            _3162 = frontier_phi_60_61_ladder_4;
            _3164 = frontier_phi_60_61_ladder_3;
            _3166 = frontier_phi_60_61_ladder_2;
            _3168 = frontier_phi_60_61_ladder_5;
            _3170 = frontier_phi_60_61_ladder_1;
            _3172 = frontier_phi_60_61_ladder;
        }
        float _3177 = isnan(1.0) ? _954 : (isnan(_954) ? 1.0 : min(_954, 1.0));
        _2982 = (_3177 * _3168) + _2494;
        _2984 = (_3177 * _3170) + _2496;
        _2986 = (_3177 * _3172) + _2498;
        _2988 = ((_3162 * _938) * _3177) + _2832;
        _2990 = ((_3164 * _940) * _3177) + _2834;
        _2992 = ((_3166 * _941) * _3177) + _2836;
    }
    else
    {
        _2982 = _2494;
        _2984 = _2496;
        _2986 = _2498;
        _2988 = _2832;
        _2990 = _2834;
        _2992 = _2836;
    }
    float _4941 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
    float _4952 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
    float _4963 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
    uint _3012 = _272 + 6u;
    float _3020 = _876 / cbSceneParam._m0[86u].x;
    float _3021 = _877 / cbSceneParam._m0[86u].y;
    vec4 _3035 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3020, _3021, (log2((isnan(cbSceneParam._m0[77u].w) ? _810 : (isnan(_810) ? cbSceneParam._m0[77u].w : min(_810, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3037 = _3035.x;
    float _3038 = _3035.y;
    float _3039 = _3035.z;
    float _3040 = _3035.w;
    float _3112;
    float _3114;
    float _3116;
    float _3118;
    if (_810 > cbSceneParam._m0[78u].w)
    {
        float _3074 = isnan(_810) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _810 : min(cbSceneParam._m0[80u].w, _810));
        float _3075 = _3074 / _810;
        float _3086 = _3075 * _861;
        float _3087 = _862 * _3075;
        float _3088 = (-0.0) - _3087;
        float _3090 = _3075 * _863;
        float _3092 = (cbSceneParam._m0[77u].w * _3088) / _3074;
        float _3093 = _3092 + cbSceneParam._m0[79u].w;
        float _3094 = cbSceneParam._m0[79u].w - _3087;
        float _3100 = sqrt(((_3086 * _3086) + (_3087 * _3087)) + (_3090 * _3090));
        float _3103 = (1.0 - (cbSceneParam._m0[77u].w / _3074)) * _3100;
        float _3108 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3110 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3263;
        if (abs((_3088 - _3092) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3263 = ((((_3093 > 0.0) ? exp2(_3108 * _3093) : (2.0 - exp2(_3110 * _3093))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3103;
        }
        else
        {
            float _3223 = 1.0 / cbSceneParam._m0[80u].x;
            float _3224 = isnan(_3094) ? _3093 : (isnan(_3093) ? _3094 : max(_3093, _3094));
            float _3225 = isnan(_3094) ? _3093 : (isnan(_3093) ? _3094 : min(_3093, _3094));
            float _3234 = isnan(0.0) ? _3224 : (isnan(_3224) ? 0.0 : min(_3224, 0.0));
            float _3235 = isnan(0.0) ? _3225 : (isnan(_3225) ? 0.0 : min(_3225, 0.0));
            _3263 = ((abs(_3100 / _3088) * cbSceneParam._m0[80u].y) * ((((_3234 - _3235) * 2.0) - ((exp2(_3108 * (isnan(0.0) ? _3224 : (isnan(_3224) ? 0.0 : max(_3224, 0.0)))) - exp2(_3108 * (isnan(0.0) ? _3225 : (isnan(_3225) ? 0.0 : max(_3225, 0.0))))) * _3223)) - ((exp2(_3110 * _3234) - exp2(_3110 * _3235)) * _3223))) + (_3103 * cbSceneParam._m0[80u].z);
        }
        vec4 _3265 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3020, _3021, 1.0), 0.0);
        float _3274 = exp2((_3263 * (-1.44269502162933349609375)) * (1.0 - _3265.w));
        float _3275 = log2(_3274);
        float _3291 = log2(_3040);
        _3112 = (exp2(_3291 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3275 * cbSceneParam._m0[78u].x)) * _3265.x) / cbSceneParam._m0[78u].x)) + _3037;
        _3114 = (exp2(_3291 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3275 * cbSceneParam._m0[78u].y)) * _3265.y) / cbSceneParam._m0[78u].y)) + _3038;
        _3116 = (exp2(_3291 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3275 * cbSceneParam._m0[78u].z)) * _3265.z) / cbSceneParam._m0[78u].z)) + _3039;
        _3118 = _3274 * _3040;
    }
    else
    {
        _3112 = _3037;
        _3114 = _3038;
        _3116 = _3039;
        _3118 = _3040;
    }
    float _3130 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3131 = _3130 == 3.0;
    float _3132 = log2(_3118);
    float _3139 = exp2(_3132 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4941 : (isnan(_4941) ? 1.0 : min(_4941, 1.0))) * (_2982 + ((isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0))) * _954))) + ((_2988 + ((isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0))) * _1762)) * cbPerFrame._m0[3u].x));
    float _3140 = exp2(_3132 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4952 : (isnan(_4952) ? 1.0 : min(_4952, 1.0))) * (_2984 + ((isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0))) * _954))) + ((_2990 + ((isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0))) * _1762)) * cbPerFrame._m0[3u].x));
    float _3141 = exp2(_3132 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4963 : (isnan(_4963) ? 1.0 : min(_4963, 1.0))) * (_2986 + ((isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0))) * _954))) + ((_2992 + ((isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0))) * _1762)) * cbPerFrame._m0[3u].x));
    float _3150 = (_3130 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3150 * (_3131 ? _3139 : (_3139 + (cbSceneParam._m0[72u].w * _3112)));
    SV_Target.y = _3150 * (_3131 ? _3140 : (_3140 + (cbSceneParam._m0[72u].w * _3114)));
    SV_Target.z = _3150 * (_3131 ? _3141 : (_3141 + (cbSceneParam._m0[72u].w * _3116)));
    SV_Target.w = cbInstanceData._m0[_3012].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3012].w;
}


