#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1335;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _233 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _234 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _235 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _241 = inversesqrt(dot(vec3(_233, _234, _235), vec3(_233, _234, _235)));
    float _248 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _255 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _261 = uint(roundEven(NORMAL.w)) * 13u;
    uint _266 = _261 + 1u;
    uint _270 = _261 + 2u;
    float _279 = sqrt(((cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x) + (cbInstanceData._m0[_261].x * cbInstanceData._m0[_261].x)) + (cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x));
    float _280 = _279 * TEXCOORD.z;
    float _281 = _279 * TEXCOORD.w;
    vec4 _301 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _307 = _301.x * cbMtdParam._m0[11u].x;
    float _308 = _301.y * cbMtdParam._m0[11u].y;
    float _309 = _301.z * cbMtdParam._m0[11u].z;
    vec4 _328 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _280) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _281) + cbTextureTilingScale._m0[5u].w));
    vec4 _367 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _369 = _367.x;
    float _381 = dot(vec4(_369, _367.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _398 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_369 - _381) * cbMtdParam._m0[24u].y) + _381) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3945 = isnan(0.0) ? _398 : (isnan(_398) ? 0.0 : max(_398, 0.0));
    float _399 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
    float _406 = (_399 * ((_328.x * cbMtdParam._m0[12u].x) - _307)) + _307;
    float _407 = (_399 * ((_328.y * cbMtdParam._m0[12u].y) - _308)) + _308;
    float _408 = (_399 * ((_328.z * cbMtdParam._m0[12u].z) - _309)) + _309;
    vec4 _425 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _280) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _281) + cbTextureTilingScale._m0[3u].w));
    vec4 _445 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _447 = _445.x;
    float _457 = dot(vec4(_447, _445.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _471 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_447 - _457) * cbMtdParam._m0[24u].y) + _457) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3956 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _472 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
    float _479 = (_472 * ((_425.x * cbMtdParam._m0[13u].x) - _406)) + _406;
    float _480 = (_472 * ((_425.y * cbMtdParam._m0[13u].y) - _407)) + _407;
    float _481 = (_472 * ((_425.z * cbMtdParam._m0[13u].z) - _408)) + _408;
    vec4 _493 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _280) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _281) + cbTextureTilingScale._m0[20u].w));
    vec4 _516 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _280) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _281) + cbTextureTilingScale._m0[4u].w));
    vec4 _533 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _535 = _533.x;
    float _536 = _533.y;
    float _537 = _533.z;
    float _544 = ((_516.x - _535) * _399) + _535;
    float _545 = ((_516.y - _536) * _399) + _536;
    float _546 = ((_516.z - _537) * _399) + _537;
    vec4 _558 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _280) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _281) + cbTextureTilingScale._m0[2u].w));
    float _571 = ((_558.z - _546) * _472) + _546;
    float _574 = ((((_558.x - _544) * _472) + _544) * 2.0) + (-1.0);
    float _575 = ((((_558.y - _545) * _472) + _545) * 2.0) + (-1.0);
    float _576 = dot(vec2(_574, _575), vec2(_574, _575));
    float _3967 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
    float _581 = sqrt(1.0 - (isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0))));
    float _586 = _574 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_493.x * 2.0) + (-1.0)));
    float _587 = _575 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_493.y * 2.0) + (-1.0)));
    vec4 _600 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _614 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _280) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _281) + cbTextureTilingScale._m0[19u].w));
    float _616 = _614.x;
    float _617 = 1.0 - _616;
    float _645 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_616 - _617) * cbMtdParam._m0[24u].w) + _617) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3978 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _646 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
    float _654 = ((((cbMtdParam._m0[10u].x - _479) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _646) + _479;
    float _655 = ((((cbMtdParam._m0[10u].y - _480) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _646) + _480;
    float _656 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _481)) * _646) + _481;
    vec4 _668 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _682 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _684 = _682.x;
    float _702 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _280) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _281) + cbTextureTilingScale._m0[9u].w)).x - _684) * _399) + _684;
    float _720 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _280) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _281) + cbTextureTilingScale._m0[21u].w)).x - _702) * _472) + _702;
    float _724 = ((_668.x - _720) * cbMtdParam._m0[19u].z) + _720;
    float _726 = _724 - (_724 * _646);
    float _731 = (((_493.z - _571) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _571;
    float _735 = ((cbMtdParam._m0[23u].y - _731) * _646) + _731;
    vec4 _754 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _280) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _281) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _760 = (_754.x * 2.0) + (-1.0);
    float _761 = (_754.y * 2.0) + (-1.0);
    float _762 = dot(vec2(_760, _761), vec2(_760, _761));
    float _3989 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _778 = (_646 * (((cbMtdParam._m0[22u].z * _586) - _586) + _760)) + _586;
    float _779 = (_646 * (((cbMtdParam._m0[22u].z * _587) - _587) + _761)) + _587;
    float _780 = (_646 * (sqrt(1.0 - (isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0)))) - _581)) + _581;
    float _782 = cbMtdParam._m0[22u].x + _600.w;
    float _785 = fma(_780, _248 * NORMAL.x, fma(_779, _255 * TANGENT.x, (_241 * _233) * _778));
    float _788 = fma(_780, _248 * NORMAL.y, fma(_779, _255 * TANGENT.y, (_241 * _234) * _778));
    float _791 = fma(_780, _248 * NORMAL.z, fma(_779, _255 * TANGENT.z, (_241 * _235) * _778));
    float _795 = inversesqrt(dot(vec3(_785, _788, _791), vec3(_785, _788, _791)));
    float _796 = _795 * _785;
    float _797 = _795 * _788;
    float _798 = _795 * _791;
    float _4000 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
    float _799 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
    float _4011 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _4022 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _4033 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    float _4044 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _4055 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _804 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
    float _818 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _858 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _868 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _858);
    float _869 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _858);
    float _870 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _858);
    float _874 = inversesqrt(dot(vec3(_868, _869, _870), vec3(_868, _869, _870)));
    float _875 = _868 * _874;
    float _876 = _869 * _874;
    float _877 = _870 * _874;
    float _883 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _884 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _902 = fma(_798, cbSceneParam._m0[5u].z, fma(_797, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _796));
    float _905 = fma(_798, cbSceneParam._m0[6u].z, fma(_797, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _796));
    float _908 = fma(_798, cbSceneParam._m0[7u].z, fma(_797, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _796));
    uint _922 = (_261 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _928 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0)))) * cbInstanceData._m0[_922].x;
    float _929 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0)))) * cbInstanceData._m0[_922].y;
    float _930 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0)))) * cbInstanceData._m0[_922].z;
    float _4066 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
    float _931 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
    float _4077 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
    float _932 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
    float _4088 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
    float _933 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
    float _934 = 1.0 - _804;
    float _935 = _931 * _934;
    float _936 = _932 * _934;
    float _937 = _933 * _934;
    float _942 = (_931 + (-0.039999999105930328369140625)) * _804;
    float _943 = (_932 + (-0.039999999105930328369140625)) * _804;
    float _944 = (_933 + (-0.039999999105930328369140625)) * _804;
    float _945 = _942 + 0.039999999105930328369140625;
    float _947 = _943 + 0.039999999105930328369140625;
    float _948 = _944 + 0.039999999105930328369140625;
    vec4 _957 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _883, cbSceneParam._m0[86u].y * _884));
    float _961 = ((isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0))) * TEXCOORD_5.w) * _957.x;
    float _962 = dot(vec3(_796, _797, _798), vec3(_875, _876, _877));
    float _965 = _962 * 2.0;
    float _969 = (_965 * _796) - _875;
    float _970 = (_965 * _797) - _876;
    float _971 = (_965 * _798) - _877;
    float _975 = abs(dot(vec3(_875, _876, _877), vec3(_796, _797, _798)));
    float _4099 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
    float _977 = sqrt(_799);
    float _990 = exp2((_977 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_977 * 3.0));
    float _996 = (1.0 - _990) * ((_977 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _997 = _990 * _977;
    float _1025 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1029 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1033 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1334;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1059 = fma(_1033, cbModelParam._m0[26u].z, fma(_1029, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1025));
        float _1063 = fma(_1033, cbModelParam._m0[27u].z, fma(_1029, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1025));
        float _1067 = fma(_1033, cbModelParam._m0[28u].z, fma(_1029, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1025));
        float _1092 = _1025 + _796;
        float _1093 = _1029 + _797;
        float _1094 = _1033 + _798;
        float _1104 = fma(_1094, cbModelParam._m0[26u].z, fma(_1093, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1092)) - _1059;
        float _1105 = fma(_1094, cbModelParam._m0[27u].z, fma(_1093, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1092)) - _1063;
        float _1106 = fma(_1094, cbModelParam._m0[28u].z, fma(_1093, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1092)) - _1067;
        float _1110 = inversesqrt(dot(vec3(_1104, _1105, _1106), vec3(_1104, _1105, _1106)));
        float _1123 = ((_1110 * _1104) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1059 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1124 = ((_1110 * _1105) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1063 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1125 = ((_1110 * _1106) / cbModelParam._m0[34u].z) + ((((((_1067 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1128 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1123, _1124, _1125), 0.0);
        vec4 _1135 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1123, _1124, _1125), 0.0);
        vec4 _1142 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1123, _1124, _1125), 0.0);
        vec4 _1149 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1123, _1124, _1125), 0.0);
        float _1162 = exp2((_1128.w + (-0.5)) * 20.0) * 2.0;
        float _1163 = _1162 * (_1128.x + (-0.5));
        float _1164 = _1162 * (_1128.y + (-0.5));
        float _1165 = _1162 * (_1128.z + (-0.5));
        float _1172 = exp2((_1135.w + (-0.5)) * 20.0) * 2.0;
        float _1173 = _1172 * (_1135.x + (-0.5));
        float _1174 = _1172 * (_1135.y + (-0.5));
        float _1175 = _1172 * (_1135.z + (-0.5));
        float _1182 = exp2((_1142.w + (-0.5)) * 20.0) * 2.0;
        float _1183 = _1182 * (_1142.x + (-0.5));
        float _1184 = _1182 * (_1142.y + (-0.5));
        float _1185 = _1182 * (_1142.z + (-0.5));
        float _1192 = exp2((_1149.w + (-0.5)) * 20.0) * 2.0;
        float _1193 = _1192 * (_1149.x + (-0.5));
        float _1194 = _1192 * (_1149.y + (-0.5));
        float _1195 = _1192 * (_1149.z + (-0.5));
        float _1196 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1197 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1198 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1199 = _1163 * 0.5;
        float _1200 = _1173 * 0.5;
        float _1201 = _1183 * 0.5;
        float _1202 = dot(vec3(_1199, _1200, _1201), vec3(_1199, _1200, _1201));
        float _1207 = (_1202 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1202);
        float _1216 = (dot(vec3(_796, _797, _798), vec3(_1207 * _1199, _1207 * _1200, _1207 * _1201)) + 1.0) * 0.5;
        float _4125 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1226 = sqrt(((_1200 * _1200) + (_1199 * _1199)) + (_1201 * _1201)) / (_1196 + 9.9999997473787516355514526367188e-06);
        float _4136 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1227 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
        float _1228 = _1227 * 2.0;
        float _1232 = (1.0 - _1227) / (_1227 + 1.0);
        float _4147 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1233 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
        float _1242 = ((((1.0 - _1233) * (_1228 + 2.0)) * exp2(log2(isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0))) * (_1228 + 1.0))) + _1233) * _1196;
        float _1243 = _1164 * 0.5;
        float _1244 = _1174 * 0.5;
        float _1245 = _1184 * 0.5;
        float _1246 = dot(vec3(_1243, _1244, _1245), vec3(_1243, _1244, _1245));
        float _1251 = (_1246 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1246);
        float _1259 = (dot(vec3(_796, _797, _798), vec3(_1251 * _1243, _1251 * _1244, _1251 * _1245)) + 1.0) * 0.5;
        float _4158 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1268 = sqrt(((_1244 * _1244) + (_1243 * _1243)) + (_1245 * _1245)) / (_1197 + 9.9999997473787516355514526367188e-06);
        float _4169 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1269 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
        float _1270 = _1269 * 2.0;
        float _1274 = (1.0 - _1269) / (_1269 + 1.0);
        float _4180 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1275 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
        float _1284 = ((((1.0 - _1275) * (_1270 + 2.0)) * exp2(log2(isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0))) * (_1270 + 1.0))) + _1275) * _1197;
        float _1285 = _1165 * 0.5;
        float _1286 = _1175 * 0.5;
        float _1287 = _1185 * 0.5;
        float _1288 = dot(vec3(_1285, _1286, _1287), vec3(_1285, _1286, _1287));
        float _1293 = (_1288 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1288);
        float _1301 = (dot(vec3(_796, _797, _798), vec3(_1293 * _1285, _1293 * _1286, _1293 * _1287)) + 1.0) * 0.5;
        float _4191 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1310 = sqrt(((_1286 * _1286) + (_1285 * _1285)) + (_1287 * _1287)) / (_1198 + 9.9999997473787516355514526367188e-06);
        float _4202 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1311 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
        float _1312 = _1311 * 2.0;
        float _1316 = (1.0 - _1311) / (_1311 + 1.0);
        float _4213 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1317 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
        float _1326 = ((((1.0 - _1317) * (_1312 + 2.0)) * exp2(log2(isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0))) * (_1312 + 1.0))) + _1317) * _1198;
        _1334 = _1165;
        _1336 = _1164;
        _1337 = _1163;
        _1338 = _1175;
        _1339 = _1174;
        _1340 = _1173;
        _1341 = _1185;
        _1342 = _1184;
        _1343 = _1183;
        _1344 = _1198;
        _1345 = _1197;
        _1346 = _1196;
        _1347 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0)));
        _1348 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0)));
        _1349 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0)));
    }
    else
    {
        _1334 = _1335;
        _1336 = _1335;
        _1337 = _1335;
        _1338 = _1335;
        _1339 = _1335;
        _1340 = _1335;
        _1341 = _1335;
        _1342 = _1335;
        _1343 = _1335;
        _1344 = _1335;
        _1345 = _1335;
        _1346 = _1335;
        _1347 = 0.0;
        _1348 = 0.0;
        _1349 = 0.0;
    }
    float _1642;
    float _1643;
    float _1644;
    float _1645;
    float _1646;
    float _1647;
    float _1648;
    float _1649;
    float _1650;
    float _1651;
    float _1652;
    float _1653;
    float _1654;
    float _1655;
    float _1656;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1373 = fma(_1033, cbModelParam._m0[30u].z, fma(_1029, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1025));
        float _1377 = fma(_1033, cbModelParam._m0[31u].z, fma(_1029, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1025));
        float _1381 = fma(_1033, cbModelParam._m0[32u].z, fma(_1029, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1025));
        float _1404 = _1025 + _796;
        float _1405 = _1029 + _797;
        float _1406 = _1033 + _798;
        float _1416 = fma(_1406, cbModelParam._m0[30u].z, fma(_1405, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1404)) - _1373;
        float _1417 = fma(_1406, cbModelParam._m0[31u].z, fma(_1405, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1404)) - _1377;
        float _1418 = fma(_1406, cbModelParam._m0[32u].z, fma(_1405, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1404)) - _1381;
        float _1422 = inversesqrt(dot(vec3(_1416, _1417, _1418), vec3(_1416, _1417, _1418)));
        float _1435 = ((_1422 * _1416) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1373 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1436 = ((_1422 * _1417) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1377 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1437 = ((_1422 * _1418) / cbModelParam._m0[35u].z) + ((((((_1381 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1439 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1435, _1436, _1437), 0.0);
        vec4 _1446 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1435, _1436, _1437), 0.0);
        vec4 _1453 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1435, _1436, _1437), 0.0);
        vec4 _1460 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1435, _1436, _1437), 0.0);
        float _1472 = exp2((_1439.w + (-0.5)) * 20.0) * 2.0;
        float _1473 = _1472 * (_1439.x + (-0.5));
        float _1474 = _1472 * (_1439.y + (-0.5));
        float _1475 = _1472 * (_1439.z + (-0.5));
        float _1482 = exp2((_1446.w + (-0.5)) * 20.0) * 2.0;
        float _1483 = _1482 * (_1446.x + (-0.5));
        float _1484 = _1482 * (_1446.y + (-0.5));
        float _1485 = _1482 * (_1446.z + (-0.5));
        float _1492 = exp2((_1453.w + (-0.5)) * 20.0) * 2.0;
        float _1493 = _1492 * (_1453.x + (-0.5));
        float _1494 = _1492 * (_1453.y + (-0.5));
        float _1495 = _1492 * (_1453.z + (-0.5));
        float _1502 = exp2((_1460.w + (-0.5)) * 20.0) * 2.0;
        float _1503 = _1502 * (_1460.x + (-0.5));
        float _1504 = _1502 * (_1460.y + (-0.5));
        float _1505 = _1502 * (_1460.z + (-0.5));
        float _1506 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1507 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1508 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1509 = _1473 * 0.5;
        float _1510 = _1483 * 0.5;
        float _1511 = _1493 * 0.5;
        float _1512 = dot(vec3(_1509, _1510, _1511), vec3(_1509, _1510, _1511));
        float _1517 = (_1512 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1512);
        float _1525 = (dot(vec3(_796, _797, _798), vec3(_1517 * _1509, _1517 * _1510, _1517 * _1511)) + 1.0) * 0.5;
        float _4254 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1534 = sqrt(((_1510 * _1510) + (_1509 * _1509)) + (_1511 * _1511)) / (_1506 + 9.9999997473787516355514526367188e-06);
        float _4265 = isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0));
        float _1535 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
        float _1536 = _1535 * 2.0;
        float _1540 = (1.0 - _1535) / (_1535 + 1.0);
        float _4276 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1541 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
        float _1550 = ((((1.0 - _1541) * (_1536 + 2.0)) * exp2(log2(isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0))) * (_1536 + 1.0))) + _1541) * _1506;
        float _1551 = _1474 * 0.5;
        float _1552 = _1484 * 0.5;
        float _1553 = _1494 * 0.5;
        float _1554 = dot(vec3(_1551, _1552, _1553), vec3(_1551, _1552, _1553));
        float _1559 = (_1554 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1554);
        float _1567 = (dot(vec3(_796, _797, _798), vec3(_1559 * _1551, _1559 * _1552, _1559 * _1553)) + 1.0) * 0.5;
        float _4287 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
        float _1576 = sqrt(((_1552 * _1552) + (_1551 * _1551)) + (_1553 * _1553)) / (_1507 + 9.9999997473787516355514526367188e-06);
        float _4298 = isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0));
        float _1577 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
        float _1578 = _1577 * 2.0;
        float _1582 = (1.0 - _1577) / (_1577 + 1.0);
        float _4309 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
        float _1583 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
        float _1592 = ((((1.0 - _1583) * (_1578 + 2.0)) * exp2(log2(isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0))) * (_1578 + 1.0))) + _1583) * _1507;
        float _1593 = _1475 * 0.5;
        float _1594 = _1485 * 0.5;
        float _1595 = _1495 * 0.5;
        float _1596 = dot(vec3(_1593, _1594, _1595), vec3(_1593, _1594, _1595));
        float _1601 = (_1596 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1596);
        float _1609 = (dot(vec3(_796, _797, _798), vec3(_1601 * _1593, _1601 * _1594, _1601 * _1595)) + 1.0) * 0.5;
        float _4320 = isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0));
        float _1618 = sqrt(((_1594 * _1594) + (_1593 * _1593)) + (_1595 * _1595)) / (_1508 + 9.9999997473787516355514526367188e-06);
        float _4331 = isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0));
        float _1619 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
        float _1620 = _1619 * 2.0;
        float _1624 = (1.0 - _1619) / (_1619 + 1.0);
        float _4342 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
        float _1625 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
        float _1634 = ((((1.0 - _1625) * (_1620 + 2.0)) * exp2(log2(isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0))) * (_1620 + 1.0))) + _1625) * _1508;
        _1642 = _1475;
        _1643 = _1474;
        _1644 = _1473;
        _1645 = _1485;
        _1646 = _1484;
        _1647 = _1483;
        _1648 = _1495;
        _1649 = _1494;
        _1650 = _1493;
        _1651 = _1508;
        _1652 = _1507;
        _1653 = _1506;
        _1654 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0)));
        _1655 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0)));
        _1656 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0)));
    }
    else
    {
        _1642 = _1335;
        _1643 = _1335;
        _1644 = _1335;
        _1645 = _1335;
        _1646 = _1335;
        _1647 = _1335;
        _1648 = _1335;
        _1649 = _1335;
        _1650 = _1335;
        _1651 = _1335;
        _1652 = _1335;
        _1653 = _1335;
        _1654 = 0.0;
        _1655 = 0.0;
        _1656 = 0.0;
    }
    float _1666 = (cbModelParam._m0[1u].x * (_1654 - _1347)) + _1347;
    float _1667 = (cbModelParam._m0[1u].x * (_1655 - _1348)) + _1348;
    float _1668 = (cbModelParam._m0[1u].x * (_1656 - _1349)) + _1349;
    float _1689 = fma(_1668, cbSceneParam._m0[89u].z, fma(_1667, cbSceneParam._m0[89u].y, _1666 * cbSceneParam._m0[89u].x));
    float _1692 = fma(_1668, cbSceneParam._m0[90u].z, fma(_1667, cbSceneParam._m0[90u].y, _1666 * cbSceneParam._m0[90u].x));
    float _1695 = fma(_1668, cbSceneParam._m0[91u].z, fma(_1667, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1666));
    float _1710 = _969 * 0.5;
    float _1711 = _970 * 0.5;
    float _1712 = _971 * 0.5;
    float _1713 = dot(vec4(_1710, _1711, _1712, 1.0), vec4(_1644, _1647, _1650, _1653));
    float _1716 = dot(vec4(_1710, _1711, _1712, 1.0), vec4(_1643, _1646, _1649, _1652));
    float _1719 = dot(vec4(_1710, _1711, _1712, 1.0), vec4(_1642, _1645, _1648, _1651));
    float _1753;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1726 = dot(vec4(_1710, _1711, _1712, 1.0), vec4(_1334, _1338, _1341, _1344));
        float _1730 = dot(vec4(_1710, _1711, _1712, 1.0), vec4(_1336, _1339, _1342, _1345));
        float _1734 = dot(vec4(_1710, _1711, _1712, 1.0), vec4(_1337, _1340, _1343, _1346));
        float _1741 = dot(vec4(cbModelParam._m0[39u]), vec4(_1710, _1711, _1712, 1.0));
        _1753 = dot(vec3(isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0)), isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0)), isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1741) ? 0.0 : (isnan(0.0) ? _1741 : max(0.0, _1741))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1753 = 1.0;
    }
    float _1764;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1755 = dot(vec4(cbModelParam._m0[40u]), vec4(_1710, _1711, _1712, 1.0));
        _1764 = dot(vec3(isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0)), isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0)), isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1755) ? 0.0 : (isnan(0.0) ? _1755 : max(0.0, _1755))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1764 = 1.0;
    }
    float _1768 = (_1764 * cbModelParam._m0[1u].x) + (_1753 * (1.0 - cbModelParam._m0[1u].x));
    float _1778 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _799);
    float _1779 = isnan(_1778) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1778 : min(cbModelParam._m0[25u].z, _1778));
    float _1861;
    float _1863;
    float _1865;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1828 = fma(_1033, cbModelParam._m0[13u].z, fma(_1029, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1025)) + cbModelParam._m0[13u].w;
        float _1832 = fma(_1033, cbModelParam._m0[14u].z, fma(_1029, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1025)) + cbModelParam._m0[14u].w;
        float _1836 = fma(_1033, cbModelParam._m0[15u].z, fma(_1029, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1025)) + cbModelParam._m0[15u].w;
        float _1839 = fma(_971, cbModelParam._m0[13u].z, fma(_970, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _969));
        float _1842 = fma(_971, cbModelParam._m0[14u].z, fma(_970, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _969));
        float _1845 = fma(_971, cbModelParam._m0[15u].z, fma(_970, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _969));
        float _1873;
        if (_1839 > 0.0)
        {
            _1873 = abs((1.0 - _1828) / _1839);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1839 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1828 + 1.0) / _1839);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1873 = frontier_phi_14_12_ladder;
        }
        float _2045;
        if (_1842 > 0.0)
        {
            _2045 = abs((1.0 - _1832) / _1842);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1842 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1832 + 1.0) / _1842);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2045 = frontier_phi_23_19_ladder;
        }
        float _2340;
        if (_1845 > 0.0)
        {
            _2340 = abs((1.0 - _1836) / _1845);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1845 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1836 + 1.0) / _1845);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2340 = frontier_phi_35_30_ladder;
        }
        float _2342 = isnan(_2045) ? _1873 : (isnan(_1873) ? _2045 : min(_1873, _2045));
        float _2343 = isnan(_2340) ? _2342 : (isnan(_2342) ? _2340 : min(_2342, _2340));
        float _2347 = (_2343 * _1839) + _1828;
        float _2348 = (_2343 * _1842) + _1832;
        float _2349 = (_2343 * _1845) + _1836;
        float _2350 = _2343 * 9.9999997473787516355514526367188e-05;
        float _2352 = (-1.0) - _2350;
        float _2354 = _2350 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2349 > _2354) || ((_2349 < _2352) || ((_2348 > _2354) || ((_2348 < _2352) || ((_2347 < _2352) || (_2347 > _2354))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2494 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2349, cbModelParam._m0[9u].z, fma(_2348, cbModelParam._m0[9u].y, _2347 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2349, cbModelParam._m0[10u].z, fma(_2348, cbModelParam._m0[10u].y, _2347 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2349, cbModelParam._m0[11u].z, fma(_2348, cbModelParam._m0[11u].y, _2347 * cbModelParam._m0[11u].x))), _1779);
            frontier_phi_13_35_ladder = _2494.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2494.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2494.x * cbModelParam._m0[1u].y;
        }
        _1861 = frontier_phi_13_35_ladder_2;
        _1863 = frontier_phi_13_35_ladder_1;
        _1865 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1849 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_969, _970, _971), _1779);
        _1861 = _1849.x * cbModelParam._m0[1u].y;
        _1863 = _1849.y * cbModelParam._m0[1u].y;
        _1865 = _1849.z * cbModelParam._m0[1u].y;
    }
    float _1869 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _799);
    float _1870 = isnan(_1869) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1869 : min(cbModelParam._m0[25u].w, _1869));
    float _1960;
    float _1962;
    float _1964;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1924 = fma(_1033, cbModelParam._m0[21u].z, fma(_1029, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1025)) + cbModelParam._m0[21u].w;
        float _1928 = fma(_1033, cbModelParam._m0[22u].z, fma(_1029, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1025)) + cbModelParam._m0[22u].w;
        float _1932 = fma(_1033, cbModelParam._m0[23u].z, fma(_1029, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1025)) + cbModelParam._m0[23u].w;
        float _1935 = fma(_971, cbModelParam._m0[21u].z, fma(_970, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _969));
        float _1938 = fma(_971, cbModelParam._m0[22u].z, fma(_970, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _969));
        float _1941 = fma(_971, cbModelParam._m0[23u].z, fma(_970, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _969));
        float _2050;
        if (_1935 > 0.0)
        {
            _2050 = abs((1.0 - _1924) / _1935);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1935 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1924 + 1.0) / _1935);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2050 = frontier_phi_25_21_ladder;
        }
        float _2367;
        if (_1938 > 0.0)
        {
            _2367 = abs((1.0 - _1928) / _1938);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1938 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1928 + 1.0) / _1938);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2367 = frontier_phi_37_32_ladder;
        }
        float _2705;
        if (_1941 > 0.0)
        {
            _2705 = abs((1.0 - _1932) / _1941);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1941 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1932 + 1.0) / _1941);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2705 = frontier_phi_47_44_ladder;
        }
        float _2707 = isnan(_2367) ? _2050 : (isnan(_2050) ? _2367 : min(_2050, _2367));
        float _2708 = isnan(_2705) ? _2707 : (isnan(_2707) ? _2705 : min(_2707, _2705));
        float _2712 = (_2708 * _1935) + _1924;
        float _2713 = (_2708 * _1938) + _1928;
        float _2714 = (_2708 * _1941) + _1932;
        float _2715 = _2708 * 9.9999997473787516355514526367188e-05;
        float _2716 = (-1.0) - _2715;
        float _2718 = _2715 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2714 > _2718) || ((_2714 < _2716) || ((_2713 > _2718) || ((_2713 < _2716) || ((_2712 < _2716) || (_2712 > _2718))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2836 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2714, cbModelParam._m0[17u].z, fma(_2713, cbModelParam._m0[17u].y, _2712 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2714, cbModelParam._m0[18u].z, fma(_2713, cbModelParam._m0[18u].y, _2712 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2714, cbModelParam._m0[19u].z, fma(_2713, cbModelParam._m0[19u].y, _2712 * cbModelParam._m0[19u].x))), _1870);
            frontier_phi_22_47_ladder = _2836.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2836.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2836.x * cbModelParam._m0[1u].z;
        }
        _1960 = frontier_phi_22_47_ladder_2;
        _1962 = frontier_phi_22_47_ladder_1;
        _1964 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1944 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_969, _970, _971), _1870);
        _1960 = _1944.x * cbModelParam._m0[1u].z;
        _1962 = _1944.y * cbModelParam._m0[1u].z;
        _1964 = _1944.z * cbModelParam._m0[1u].z;
    }
    float _1977 = (((_996 * _945) + _997) * _961) * ((cbModelParam._m0[1u].w * (_1960 - _1861)) + _1861);
    float _1979 = (((_996 * _947) + _997) * _961) * ((cbModelParam._m0[1u].w * (_1962 - _1863)) + _1863);
    float _1981 = (((_996 * _948) + _997) * _961) * ((cbModelParam._m0[1u].w * (_1964 - _1865)) + _1865);
    float _1984 = fma(_1981, cbSceneParam._m0[89u].z, fma(_1979, cbSceneParam._m0[89u].y, _1977 * cbSceneParam._m0[89u].x));
    float _1987 = fma(_1981, cbSceneParam._m0[90u].z, fma(_1979, cbSceneParam._m0[90u].y, _1977 * cbSceneParam._m0[90u].x));
    float _1990 = fma(_1981, cbSceneParam._m0[91u].z, fma(_1979, cbSceneParam._m0[91u].y, _1977 * cbSceneParam._m0[91u].x));
    float _2024 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2028 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2032 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2036 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2037 = _2024 / _2036;
    float _2038 = _2028 / _2036;
    float _2039 = _2032 / _2036;
    float _2186;
    float _2187;
    float _2188;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2066 = ((uint(_2039 > cbSceneParam._m0[59u].y) + uint(_2039 > cbSceneParam._m0[59u].x)) + uint(_2039 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2067 = _2066 + 43u;
        uint _2075 = _2066 + 44u;
        uint _2083 = _2066 + 45u;
        uint _2091 = _2066 + 46u;
        float _2102 = fma(_2036, cbSceneParam._m0[_2067].w, fma(_2032, cbSceneParam._m0[_2067].z, fma(_2028, cbSceneParam._m0[_2067].y, _2024 * cbSceneParam._m0[_2067].x)));
        float _2106 = fma(_2036, cbSceneParam._m0[_2075].w, fma(_2032, cbSceneParam._m0[_2075].z, fma(_2028, cbSceneParam._m0[_2075].y, _2024 * cbSceneParam._m0[_2075].x)));
        float _2114 = fma(_2036, cbSceneParam._m0[_2091].w, fma(_2032, cbSceneParam._m0[_2091].z, fma(_2028, cbSceneParam._m0[_2091].y, _2024 * cbSceneParam._m0[_2091].x)));
        float _2119 = cbSceneParam._m0[33u].z * _2114;
        float _2121 = cbSceneParam._m0[33u].w * _2114;
        float _2124 = fma(_2036, cbSceneParam._m0[_2083].w, fma(_2032, cbSceneParam._m0[_2083].z, fma(_2028, cbSceneParam._m0[_2083].y, _2024 * cbSceneParam._m0[_2083].x))) / _2114;
        float _2172 = (cbSceneParam._m0[33u].x - sqrt(((_2038 * _2038) + (_2037 * _2037)) + (_2039 * _2039))) * cbSceneParam._m0[33u].y;
        float _4468 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
        float _2179 = (isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2119 + _2102) / _2114, (_2121 + _2106) / _2114), _2124), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2121 + _2102) / _2114, (_2106 - _2119) / _2114), _2124), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2102 - _2119) / _2114, (_2106 - _2121) / _2114), _2124), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2102 - _2121) / _2114, (_2119 + _2106) / _2114), _2124), 0.0)).x), vec4(0.25)));
        _2186 = 1.0 - (_2179 * cbSceneParam._m0[34u].x);
        _2187 = 1.0 - (_2179 * cbSceneParam._m0[34u].y);
        _2188 = 1.0 - (_2179 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2186 = 1.0;
        _2187 = 1.0;
        _2188 = 1.0;
    }
    float _2252;
    float _2254;
    float _2256;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2240 = fma(_2036, cbSceneParam._m0[63u].w, fma(_2032, cbSceneParam._m0[63u].z, fma(_2028, cbSceneParam._m0[63u].y, _2024 * cbSceneParam._m0[63u].x)));
        float _2241 = fma(_2036, cbSceneParam._m0[60u].w, fma(_2032, cbSceneParam._m0[60u].z, fma(_2028, cbSceneParam._m0[60u].y, _2024 * cbSceneParam._m0[60u].x))) / _2240;
        float _2242 = fma(_2036, cbSceneParam._m0[61u].w, fma(_2032, cbSceneParam._m0[61u].z, fma(_2028, cbSceneParam._m0[61u].y, _2024 * cbSceneParam._m0[61u].x))) / _2240;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2241 >= cbSceneParam._m0[64u].x) && (_2242 >= cbSceneParam._m0[64u].y)) && (_2241 <= cbSceneParam._m0[64u].z)) && (_2242 <= cbSceneParam._m0[64u].w))
        {
            float _2380 = fma(_2036, cbSceneParam._m0[62u].w, fma(_2032, cbSceneParam._m0[62u].z, fma(_2028, cbSceneParam._m0[62u].y, _2024 * cbSceneParam._m0[62u].x))) / _2240;
            float _2384 = isnan(cbSceneParam._m0[41u].w) ? _2380 : (isnan(_2380) ? cbSceneParam._m0[41u].w : max(_2380, cbSceneParam._m0[41u].w));
            float _2427 = (cbSceneParam._m0[33u].x - sqrt(((_2038 * _2038) + (_2037 * _2037)) + (_2039 * _2039))) * cbSceneParam._m0[33u].y;
            float _4484 = isnan(0.0) ? _2427 : (isnan(_2427) ? 0.0 : max(_2427, 0.0));
            float _2434 = (isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2241, cbSceneParam._m0[33u].w + _2242), _2384), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2241, _2242 - cbSceneParam._m0[33u].z), _2384), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2241 - cbSceneParam._m0[33u].z, _2242 - cbSceneParam._m0[33u].w), _2384), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2241 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2242), _2384), 0.0)).x), vec4(0.25)));
            float _2438 = 1.0 - (_2434 * cbSceneParam._m0[34u].x);
            float _2439 = 1.0 - (_2434 * cbSceneParam._m0[34u].y);
            float _2440 = 1.0 - (_2434 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2440) ? _2188 : (isnan(_2188) ? _2440 : min(_2188, _2440));
            frontier_phi_34_33_ladder_1 = isnan(_2439) ? _2187 : (isnan(_2187) ? _2439 : min(_2187, _2439));
            frontier_phi_34_33_ladder_2 = isnan(_2438) ? _2186 : (isnan(_2186) ? _2438 : min(_2186, _2438));
        }
        else
        {
            frontier_phi_34_33_ladder = _2188;
            frontier_phi_34_33_ladder_1 = _2187;
            frontier_phi_34_33_ladder_2 = _2186;
        }
        _2252 = frontier_phi_34_33_ladder_2;
        _2254 = frontier_phi_34_33_ladder_1;
        _2256 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2252 = _2186;
        _2254 = _2187;
        _2256 = _2188;
    }
    uvec4 _2261 = floatBitsToUint(cbInstanceData._m0[_261 + 5u]);
    uint _2263 = _2261.x * 14u;
    uint _2264 = _2263 + 13u;
    float _2271 = _961 + (-1.0);
    float _2276 = (cbLight._m0[_2264].x * _2271) + 1.0;
    float _2277 = (cbLight._m0[_2264].y * _2271) + 1.0;
    float _2278 = (cbLight._m0[_2264].z * _2271) + 1.0;
    float _2279 = (cbLight._m0[_2264].w * _2271) + 1.0;
    uint _2280 = _2263 + 5u;
    float _2286 = isnan(1.0) ? _2277 : (isnan(_2277) ? 1.0 : min(_2277, 1.0));
    uint _2290 = _2263 + 4u;
    float _2299 = isnan(1.0) ? _2276 : (isnan(_2276) ? 1.0 : min(_2276, 1.0));
    uint _2303 = _2263 | 1u;
    float _2314 = dot(vec3(cbLight._m0[_2263].xyz), vec3(_796, _797, _798));
    float _2317 = dot(vec3(cbLight._m0[_2303].xyz), vec3(_796, _797, _798));
    float _4520 = isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0));
    float _4531 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
    float _2322 = (isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0))) * 0.3183098733425140380859375;
    float _2324 = (isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0))) * 0.3183098733425140380859375;
    float _2331 = ((cbLight._m0[_2280].x * _2286) * _2324) + (((cbLight._m0[_2290].x * _2252) * _2299) * _2322);
    float _2332 = ((_2286 * cbLight._m0[_2280].y) * _2324) + (((cbLight._m0[_2290].y * _2254) * _2299) * _2322);
    float _2333 = ((_2286 * cbLight._m0[_2280].z) * _2324) + (((cbLight._m0[_2290].z * _2256) * _2299) * _2322);
    uvec4 _2337 = floatBitsToUint(cbLight._m0[_2263 + 12u]);
    bool _2339 = _2337.x == 0u;
    float _2441;
    float _2443;
    float _2445;
    if (_2339)
    {
        _2441 = _2331;
        _2443 = _2332;
        _2445 = _2333;
    }
    else
    {
        uint _2449 = _2263 + 6u;
        float _2465 = (dot(vec3(cbLight._m0[_2263 + 2u].xyz), vec3(_796, _797, _798)) * 0.5) + 0.5;
        float _2466 = _2465 * _2465;
        float _4542 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
        float _2467 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
        float _2468 = isnan(1.0) ? _2278 : (isnan(_2278) ? 1.0 : min(_2278, 1.0));
        _2441 = (((cbLight._m0[_2449].x * 0.3183098733425140380859375) * _2467) * _2468) + _2331;
        _2443 = (((cbLight._m0[_2449].y * 0.3183098733425140380859375) * _2467) * _2468) + _2332;
        _2445 = (((cbLight._m0[_2449].z * 0.3183098733425140380859375) * _2467) * _2468) + _2333;
    }
    bool _2448 = _2337.y == 0u;
    float _2503;
    float _2505;
    float _2507;
    if (_2448)
    {
        _2503 = _2441;
        _2505 = _2443;
        _2507 = _2445;
    }
    else
    {
        uint _2676 = _2263 + 7u;
        float _2692 = (dot(vec3(cbLight._m0[_2263 + 3u].xyz), vec3(_796, _797, _798)) * 0.5) + 0.5;
        float _2693 = _2692 * _2692;
        float _4558 = isnan(0.0) ? _2693 : (isnan(_2693) ? 0.0 : max(_2693, 0.0));
        float _2694 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
        float _2695 = isnan(1.0) ? _2279 : (isnan(_2279) ? 1.0 : min(_2279, 1.0));
        _2503 = (((cbLight._m0[_2676].x * 0.3183098733425140380859375) * _2694) * _2695) + _2441;
        _2505 = (((cbLight._m0[_2676].y * 0.3183098733425140380859375) * _2694) * _2695) + _2443;
        _2507 = (((cbLight._m0[_2676].z * 0.3183098733425140380859375) * _2694) * _2695) + _2445;
    }
    uint _2510 = _2263 + 8u;
    float _2523 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2263].w)) * _799) * 0.949999988079071044921875);
    float _2524 = _2523 * _2523;
    float _2525 = cbLight._m0[_2263].x + _875;
    float _2526 = cbLight._m0[_2263].y + _876;
    float _2527 = cbLight._m0[_2263].z + _877;
    float _2531 = inversesqrt(dot(vec3(_2525, _2526, _2527), vec3(_2525, _2526, _2527)));
    float _2532 = _2531 * _2525;
    float _2533 = _2531 * _2526;
    float _2534 = _2531 * _2527;
    float _2535 = dot(vec3(_796, _797, _798), vec3(cbLight._m0[_2263].xyz));
    float _4574 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0));
    float _2538 = isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0));
    float _4585 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
    float _2539 = isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0));
    float _2540 = dot(vec3(_796, _797, _798), vec3(_2532, _2533, _2534));
    float _4596 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
    float _2543 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
    float _2544 = dot(vec3(cbLight._m0[_2263].xyz), vec3(_2532, _2533, _2534));
    float _4607 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
    float _2548 = _2524 * _2524;
    float _2552 = ((_2543 * _2543) * (_2548 + (-1.0))) + 1.0;
    float _2560 = exp2(log2(1.0 - (isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0)))) * 5.0);
    float _2561 = 0.959999978542327880859375 - _942;
    float _2563 = 0.959999978542327880859375 - _943;
    float _2564 = 0.959999978542327880859375 - _944;
    float _2571 = 1.0 - _2524;
    float _2582 = (0.5 / (((_2539 * ((_2538 * _2571) + _2524)) + 9.9999999392252902907785028219223e-09) + (((_2539 * _2571) + _2524) * _2538))) * _2538;
    float _4618 = isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : max(_2582, 0.0));
    float _2584 = (isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0))) * (_2548 / ((_2552 * _2552) * 3.141590118408203125));
    uint _2598 = _2263 + 9u;
    float _2609 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2303].w)) * _799) * 0.949999988079071044921875);
    float _2610 = _2609 * _2609;
    float _2611 = cbLight._m0[_2303].x + _875;
    float _2612 = cbLight._m0[_2303].y + _876;
    float _2613 = cbLight._m0[_2303].z + _877;
    float _2617 = inversesqrt(dot(vec3(_2611, _2612, _2613), vec3(_2611, _2612, _2613)));
    float _2618 = _2617 * _2611;
    float _2619 = _2617 * _2612;
    float _2620 = _2617 * _2613;
    float _2621 = dot(vec3(_796, _797, _798), vec3(cbLight._m0[_2303].xyz));
    float _4629 = isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : max(_2621, 0.0));
    float _2624 = isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0));
    float _2625 = dot(vec3(_796, _797, _798), vec3(_2618, _2619, _2620));
    float _4640 = isnan(0.0) ? _2625 : (isnan(_2625) ? 0.0 : max(_2625, 0.0));
    float _2628 = isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0));
    float _2629 = dot(vec3(cbLight._m0[_2303].xyz), vec3(_2618, _2619, _2620));
    float _4651 = isnan(0.0) ? _2629 : (isnan(_2629) ? 0.0 : max(_2629, 0.0));
    float _2633 = _2610 * _2610;
    float _2637 = ((_2628 * _2628) * (_2633 + (-1.0))) + 1.0;
    float _2644 = exp2(log2(1.0 - (isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0)))) * 5.0);
    float _2651 = 1.0 - _2610;
    float _2661 = (0.5 / (((_2539 * ((_2624 * _2651) + _2610)) + 9.9999999392252902907785028219223e-09) + (((_2539 * _2651) + _2610) * _2624))) * _2624;
    float _4662 = isnan(0.0) ? _2661 : (isnan(_2661) ? 0.0 : max(_2661, 0.0));
    float _2663 = (isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0))) * (_2633 / ((_2637 * _2637) * 3.141590118408203125));
    float _2673 = (((((_2644 * _2561) + _945) * cbLight._m0[_2598].x) * _2663) * _2286) + ((((cbLight._m0[_2510].x * _2252) * ((_2560 * _2561) + _945)) * _2584) * _2299);
    float _2674 = (((((_2644 * _2563) + _947) * cbLight._m0[_2598].y) * _2663) * _2286) + ((((cbLight._m0[_2510].y * _2254) * ((_2560 * _2563) + _947)) * _2584) * _2299);
    float _2675 = (((((_2644 * _2564) + _948) * cbLight._m0[_2598].z) * _2663) * _2286) + ((((cbLight._m0[_2510].z * _2256) * ((_2560 * _2564) + _948)) * _2584) * _2299);
    float _2731;
    float _2733;
    float _2735;
    if (_2339)
    {
        _2731 = _2673;
        _2733 = _2674;
        _2735 = _2675;
    }
    else
    {
        uint _2737 = _2263 + 2u;
        uint _2741 = _2263 + 10u;
        float _2755 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2737].w)) * _799) * 0.949999988079071044921875);
        float _2756 = _2755 * _2755;
        float _2757 = cbLight._m0[_2737].x + _875;
        float _2758 = cbLight._m0[_2737].y + _876;
        float _2759 = cbLight._m0[_2737].z + _877;
        float _2763 = inversesqrt(dot(vec3(_2757, _2758, _2759), vec3(_2757, _2758, _2759)));
        float _2764 = _2763 * _2757;
        float _2765 = _2763 * _2758;
        float _2766 = _2763 * _2759;
        float _2767 = dot(vec3(_796, _797, _798), vec3(cbLight._m0[_2737].xyz));
        float _4673 = isnan(0.0) ? _2767 : (isnan(_2767) ? 0.0 : max(_2767, 0.0));
        float _2770 = isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0));
        float _2771 = dot(vec3(_796, _797, _798), vec3(_2764, _2765, _2766));
        float _4684 = isnan(0.0) ? _2771 : (isnan(_2771) ? 0.0 : max(_2771, 0.0));
        float _2774 = isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0));
        float _2775 = dot(vec3(cbLight._m0[_2737].xyz), vec3(_2764, _2765, _2766));
        float _4695 = isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : max(_2775, 0.0));
        float _2779 = _2756 * _2756;
        float _2783 = ((_2774 * _2774) * (_2779 + (-1.0))) + 1.0;
        float _2790 = exp2(log2(1.0 - (isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0)))) * 5.0);
        float _2797 = 1.0 - _2756;
        float _2807 = (0.5 / (((_2539 * ((_2770 * _2797) + _2756)) + 9.9999999392252902907785028219223e-09) + (((_2539 * _2797) + _2756) * _2770))) * _2770;
        float _4706 = isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : max(_2807, 0.0));
        float _2809 = (isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0))) * (_2779 / ((_2783 * _2783) * 3.141590118408203125));
        float _2810 = isnan(1.0) ? _2278 : (isnan(_2278) ? 1.0 : min(_2278, 1.0));
        _2731 = (((((_2790 * _2561) + _945) * cbLight._m0[_2741].x) * _2809) * _2810) + _2673;
        _2733 = (((((_2790 * _2563) + _947) * cbLight._m0[_2741].y) * _2809) * _2810) + _2674;
        _2735 = (((((_2790 * _2564) + _948) * cbLight._m0[_2741].z) * _2809) * _2810) + _2675;
    }
    float _2841;
    float _2843;
    float _2845;
    if (_2448)
    {
        _2841 = _2731;
        _2843 = _2733;
        _2845 = _2735;
    }
    else
    {
        uint _2852 = _2263 + 3u;
        uint _2856 = _2263 + 11u;
        float _2870 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2852].w)) * _799) * 0.949999988079071044921875);
        float _2871 = _2870 * _2870;
        float _2872 = cbLight._m0[_2852].x + _875;
        float _2873 = cbLight._m0[_2852].y + _876;
        float _2874 = cbLight._m0[_2852].z + _877;
        float _2878 = inversesqrt(dot(vec3(_2872, _2873, _2874), vec3(_2872, _2873, _2874)));
        float _2879 = _2878 * _2872;
        float _2880 = _2878 * _2873;
        float _2881 = _2878 * _2874;
        float _2882 = dot(vec3(_796, _797, _798), vec3(cbLight._m0[_2852].xyz));
        float _4722 = isnan(0.0) ? _2882 : (isnan(_2882) ? 0.0 : max(_2882, 0.0));
        float _2885 = isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0));
        float _2886 = dot(vec3(_796, _797, _798), vec3(_2879, _2880, _2881));
        float _4733 = isnan(0.0) ? _2886 : (isnan(_2886) ? 0.0 : max(_2886, 0.0));
        float _2889 = isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0));
        float _2890 = dot(vec3(cbLight._m0[_2852].xyz), vec3(_2879, _2880, _2881));
        float _4744 = isnan(0.0) ? _2890 : (isnan(_2890) ? 0.0 : max(_2890, 0.0));
        float _2894 = _2871 * _2871;
        float _2898 = ((_2889 * _2889) * (_2894 + (-1.0))) + 1.0;
        float _2905 = exp2(log2(1.0 - (isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0)))) * 5.0);
        float _2912 = 1.0 - _2871;
        float _2922 = (0.5 / (((_2539 * ((_2885 * _2912) + _2871)) + 9.9999999392252902907785028219223e-09) + (((_2539 * _2912) + _2871) * _2885))) * _2885;
        float _4755 = isnan(0.0) ? _2922 : (isnan(_2922) ? 0.0 : max(_2922, 0.0));
        float _2924 = (isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0))) * (_2894 / ((_2898 * _2898) * 3.141590118408203125));
        float _2925 = isnan(1.0) ? _2279 : (isnan(_2279) ? 1.0 : min(_2279, 1.0));
        _2841 = (((((_2905 * _2561) + _945) * cbLight._m0[_2856].x) * _2924) * _2925) + _2731;
        _2843 = (((((_2905 * _2563) + _947) * cbLight._m0[_2856].y) * _2924) * _2925) + _2733;
        _2845 = (((((_2905 * _2564) + _948) * cbLight._m0[_2856].z) * _2924) * _2925) + _2735;
    }
    float _2991;
    float _2993;
    float _2995;
    float _2997;
    float _2999;
    float _3001;
    if (_2261.y == 0u)
    {
        uvec4 _2946 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2947 = _2946.x;
        uint _2958 = uint((float(_2946.y) * floor(float(uint(cbSceneParam._m0[85u].y * _884) / _2947))) + floor(float(uint(cbSceneParam._m0[85u].x * _883) / _2947)));
        float _2968 = (log2(_2039 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2969 = isnan(0.0) ? _2968 : (isnan(_2968) ? 0.0 : max(_2968, 0.0));
        uint _2972 = uint(isnan(14.0) ? _2969 : (isnan(_2969) ? 14.0 : min(_2969, 14.0)));
        uvec4 _2977 = texelFetch(g_lightClusterGridBuffer, int(((_2972 << 2u) + (_2958 << 6u)) >> 2u));
        uint _2978 = _2977.x;
        uint _2979 = _2946.z;
        float _3058;
        float _3060;
        float _3062;
        float _3064;
        float _3066;
        float _3068;
        if (((((1u << ((_2979 >> 4u) & 15u)) + 4294967295u) & _2978) == 0u) || ((_2979 & 240u) == 0u))
        {
            _3058 = 0.0;
            _3060 = 0.0;
            _3062 = 0.0;
            _3064 = 0.0;
            _3066 = 0.0;
            _3068 = 0.0;
        }
        else
        {
            float _3059;
            float _3061;
            float _3063;
            float _3065;
            float _3067;
            float _3069;
            float _3203 = 0.0;
            float _3204 = 0.0;
            float _3205 = 0.0;
            float _3206 = 0.0;
            float _3207 = 0.0;
            float _3208 = 0.0;
            uint _3209 = 0u;
            uint _3218;
            bool _3219;
            for (;;)
            {
                _3218 = texelFetch(g_lightClassification, int((((_2972 << 5u) + (_2958 << 9u)) + (_3209 << 2u)) >> 2u)).x;
                _3219 = _3218 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3219)
                {
                    frontier_phi_66_pred = _3208;
                    frontier_phi_66_pred_1 = _3207;
                    frontier_phi_66_pred_2 = _3206;
                    frontier_phi_66_pred_3 = _3205;
                    frontier_phi_66_pred_4 = _3204;
                    frontier_phi_66_pred_5 = _3203;
                }
                else
                {
                    float _3327;
                    float _3328;
                    float _3329;
                    float _3330;
                    float _3331;
                    float _3332;
                    uint _3333;
                    _3327 = _3203;
                    _3328 = _3204;
                    _3329 = _3205;
                    _3330 = _3206;
                    _3331 = _3207;
                    _3332 = _3208;
                    _3333 = _3218;
                    float _3259;
                    float _3260;
                    float _3261;
                    float _3262;
                    float _3263;
                    float _3264;
                    for (;;)
                    {
                        uint _3337 = uint(findLSB(_3333)) + (_3209 << 5u);
                        uint _3334 = (_3333 + 4294967295u) & _3333;
                        uint _3339 = _3337 * 48u;
                        vec4 _3353 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3339)).x, texelFetch(g_PointLightRenderingBuffer, int(_3339 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3339 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3339 + 3u)).x));
                        uint _3359 = (_3337 * 48u) + 4u;
                        vec4 _3372 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3359)).x, texelFetch(g_PointLightRenderingBuffer, int(_3359 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3359 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3359 + 3u)).x));
                        uint _3378 = (_3337 * 48u) + 8u;
                        vec3 _3389 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3378)).x, texelFetch(g_PointLightRenderingBuffer, int(_3378 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3378 + 2u)).x));
                        float _3393 = _3353.x - _2037;
                        float _3394 = _3353.y - _2038;
                        float _3395 = _3353.z - _2039;
                        float _3396 = dot(vec3(_3393, _3394, _3395), vec3(_3393, _3394, _3395));
                        float _3399 = inversesqrt(_3396);
                        float _3400 = _3399 * _3393;
                        float _3401 = _3399 * _3394;
                        float _3402 = _3399 * _3395;
                        float _3403 = dot(vec3(_902, _905, _908), vec3(_3400, _3401, _3402));
                        float _3408 = 1.0 - (_3396 * _3353.w);
                        float _4781 = isnan(0.0) ? _3408 : (isnan(_3408) ? 0.0 : max(_3408, 0.0));
                        float _3409 = isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0));
                        float _3410 = sqrt(_3396) * _3372.w;
                        float _3413 = 1.39999997615814208984375 / (_3410 + 1.39999997615814208984375);
                        float _3414 = _3413 * _3413;
                        float _3417 = ((1.0 - _3414) * _3403) + _3414;
                        float _3420 = _3410 * _3410;
                        float _3424 = ((isnan(0.0) ? _3417 : (isnan(_3417) ? 0.0 : max(_3417, 0.0))) * _3409) / ((_3420 * 0.699999988079071044921875) + 1.0);
                        float _3428 = (-0.0) - _2037;
                        float _3429 = (-0.0) - _2038;
                        float _3430 = (-0.0) - _2039;
                        float _3434 = inversesqrt(dot(vec3(_3428, _3429, _3430), vec3(_3428, _3429, _3430)));
                        float _3435 = _3434 * _3428;
                        float _3436 = _3434 * _3429;
                        float _3437 = _3434 * _3430;
                        float _3444 = exp2(log2(1.0 / ((_3420 * 3.5) + 5.0)) * 0.25);
                        float _3445 = 1.0 - _977;
                        float _3452 = sqrt(1.0 - ((1.0 - (_3445 * _3445)) * (1.0 - (_3444 * _3444))));
                        float _3453 = _3452 * _3452;
                        float _3454 = _3453 * _3453;
                        float _3455 = _3435 + _3400;
                        float _3456 = _3436 + _3401;
                        float _3457 = _3437 + _3402;
                        float _3461 = inversesqrt(dot(vec3(_3455, _3456, _3457), vec3(_3455, _3456, _3457)));
                        float _3465 = dot(vec3(_902, _905, _908), vec3(_3435, _3436, _3437));
                        float _4797 = isnan(0.0) ? _3465 : (isnan(_3465) ? 0.0 : max(_3465, 0.0));
                        float _3468 = isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0));
                        float _3469 = dot(vec3(_902, _905, _908), vec3(_3461 * _3455, _3461 * _3456, _3461 * _3457));
                        float _4808 = isnan(0.0) ? _3469 : (isnan(_3469) ? 0.0 : max(_3469, 0.0));
                        float _3472 = isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0));
                        float _3476 = ((_3472 * _3472) * (_3454 + (-1.0))) + 1.0;
                        float _3477 = _3413 * _3453;
                        float _3478 = _3477 * _3477;
                        float _3481 = ((1.0 - _3478) * _3403) + _3478;
                        float _4819 = isnan(0.0) ? _3481 : (isnan(_3481) ? 0.0 : max(_3481, 0.0));
                        float _3482 = isnan(1.0) ? _4819 : (isnan(_4819) ? 1.0 : min(_4819, 1.0));
                        float _3483 = 1.0 - _3453;
                        float _3493 = (0.5 / (((_3482 * ((_3468 * _3483) + _3453)) + 9.9999999392252902907785028219223e-09) + (((_3482 * _3483) + _3453) * _3468))) * _3482;
                        float _4830 = isnan(0.0) ? _3493 : (isnan(_3493) ? 0.0 : max(_3493, 0.0));
                        float _3504 = (((_3454 * 3.1415927410125732421875) * (isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0)))) / ((_3476 * _3476) * ((_3420 * 2.1991131305694580078125) + 3.141590118408203125))) * _3409;
                        _3262 = (_3424 * _3372.x) + _3330;
                        _3263 = (_3424 * _3372.y) + _3331;
                        _3264 = (_3424 * _3372.z) + _3332;
                        _3259 = (_3504 * _3389.x) + _3327;
                        _3260 = (_3504 * _3389.y) + _3328;
                        _3261 = (_3504 * _3389.z) + _3329;
                        if (_3334 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3327 = _3259;
                            _3328 = _3260;
                            _3329 = _3261;
                            _3330 = _3262;
                            _3331 = _3263;
                            _3332 = _3264;
                            _3333 = _3334;
                        }
                    }
                    frontier_phi_66_pred = _3264;
                    frontier_phi_66_pred_1 = _3263;
                    frontier_phi_66_pred_2 = _3262;
                    frontier_phi_66_pred_3 = _3261;
                    frontier_phi_66_pred_4 = _3260;
                    frontier_phi_66_pred_5 = _3259;
                }
                _3069 = frontier_phi_66_pred;
                _3067 = frontier_phi_66_pred_1;
                _3065 = frontier_phi_66_pred_2;
                _3063 = frontier_phi_66_pred_3;
                _3061 = frontier_phi_66_pred_4;
                _3059 = frontier_phi_66_pred_5;
                uint _3210 = _3209 + 1u;
                if (_3210 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3203 = _3059;
                    _3204 = _3061;
                    _3205 = _3063;
                    _3206 = _3065;
                    _3207 = _3067;
                    _3208 = _3069;
                    _3209 = _3210;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3058 = _3059;
            _3060 = _3061;
            _3062 = _3063;
            _3064 = _3065;
            _3066 = _3067;
            _3068 = _3069;
        }
        uvec4 _3072 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3073 = _3072.z;
        uint _3075 = (_3073 >> 8u) & 15u;
        float _3171;
        float _3173;
        float _3175;
        float _3177;
        float _3179;
        float _3181;
        if (((4294967295u << _3075) & _2978) == 0u)
        {
            _3171 = _3058;
            _3173 = _3060;
            _3175 = _3062;
            _3177 = _3064;
            _3179 = _3066;
            _3181 = _3068;
        }
        else
        {
            float _3196 = inversesqrt(dot(vec3(_2037, _2038, _2039), vec3(_2037, _2038, _2039)));
            float _3197 = _3196 * _2037;
            float _3198 = _3196 * _2038;
            float _3199 = _3196 * _2039;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3075 < ((_3073 >> 12u) & 15u))
            {
                float _3172;
                float _3174;
                float _3176;
                float _3178;
                float _3180;
                float _3182;
                float _3310 = _3058;
                float _3311 = _3060;
                float _3312 = _3062;
                float _3313 = _3064;
                float _3314 = _3066;
                float _3315 = _3068;
                uint _3316 = _3075;
                uint _3325;
                bool _3326;
                for (;;)
                {
                    _3325 = texelFetch(g_lightClassification, int((((_2972 << 5u) + (_2958 << 9u)) + (_3316 << 2u)) >> 2u)).x;
                    _3326 = _3325 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3326)
                    {
                        frontier_phi_72_pred = _3315;
                        frontier_phi_72_pred_1 = _3314;
                        frontier_phi_72_pred_2 = _3313;
                        frontier_phi_72_pred_3 = _3312;
                        frontier_phi_72_pred_4 = _3311;
                        frontier_phi_72_pred_5 = _3310;
                    }
                    else
                    {
                        float _3509;
                        float _3510;
                        float _3511;
                        float _3512;
                        float _3513;
                        float _3514;
                        float _3802;
                        float _3803;
                        float _3804;
                        float _3805;
                        float _3806;
                        float _3807;
                        float _3522 = _3310;
                        float _3523 = _3311;
                        float _3524 = _3312;
                        float _3525 = _3313;
                        float _3526 = _3314;
                        float _3527 = _3315;
                        uint _3528 = _3325;
                        uint _3529;
                        vec4 _3554;
                        float _3555;
                        vec4 _3570;
                        vec3 _3582;
                        vec4 _3597;
                        vec4 _3612;
                        float _3658;
                        bool _3659;
                        for (;;)
                        {
                            uint _3539 = ((_3316 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3528));
                            _3529 = (_3528 + 4294967295u) & _3528;
                            uint _3541 = _3539 * 40u;
                            _3554 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3541)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 3u)).x));
                            _3555 = _3554.w;
                            uint _3557 = (_3539 * 40u) + 4u;
                            _3570 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3557)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3557 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3557 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3557 + 3u)).x));
                            uint _3572 = (_3539 * 40u) + 8u;
                            _3582 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3572)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3572 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3572 + 2u)).x));
                            uint _3584 = (_3539 * 40u) + 16u;
                            _3597 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3584)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3584 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3584 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3584 + 3u)).x));
                            uint _3599 = (_3539 * 40u) + 20u;
                            _3612 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3599)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3599 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3599 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3599 + 3u)).x));
                            uint _3614 = (_3539 * 40u) + 24u;
                            vec4 _3627 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3614)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3614 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3614 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3614 + 3u)).x));
                            uint _3633 = (_3539 * 40u) + 28u;
                            vec4 _3646 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3633)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3633 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3633 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3633 + 3u)).x));
                            _3658 = fma(_2039, _3646.z, fma(_2038, _3646.y, _3646.x * _2037)) + _3646.w;
                            _3659 = !((fma(_2039, _3627.z, fma(_2038, _3627.y, _3627.x * _2037)) + _3627.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3659)
                            {
                                float _3686 = _3554.x - _2037;
                                float _3687 = _3554.y - _2038;
                                float _3688 = _3554.z - _2039;
                                float _3689 = dot(vec3(_3686, _3687, _3688), vec3(_3686, _3687, _3688));
                                float _3692 = inversesqrt(_3689);
                                float _3693 = _3692 * _3686;
                                float _3694 = _3692 * _3687;
                                float _3695 = _3692 * _3688;
                                float _3699 = 1.0 - (_3689 / (_3555 * _3555));
                                float _4841 = isnan(0.0) ? _3699 : (isnan(_3699) ? 0.0 : max(_3699, 0.0));
                                float _3700 = isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0));
                                float _3704 = sqrt(_3689) * _3570.w;
                                float _3706 = 1.39999997615814208984375 / (_3704 + 1.39999997615814208984375);
                                float _3707 = _3706 * _3706;
                                float _3710 = ((1.0 - _3707) * dot(vec3(_3693, _3694, _3695), vec3(_902, _905, _908))) + _3707;
                                float _3713 = _3704 * _3704;
                                float _3717 = (fma(_2039, _3597.z, fma(_2038, _3597.y, _3597.x * _2037)) + _3597.w) / _3658;
                                float _3718 = (fma(_2039, _3612.z, fma(_2038, _3612.y, _3612.x * _2037)) + _3612.w) / _3658;
                                float _3722 = 1.0 - dot(vec2(_3717, _3718), vec2(_3717, _3718));
                                float _4857 = isnan(0.0) ? _3722 : (isnan(_3722) ? 0.0 : max(_3722, 0.0));
                                float _3723 = isnan(1.0) ? _4857 : (isnan(_4857) ? 1.0 : min(_4857, 1.0));
                                float _3724 = _3723 * (((isnan(0.0) ? _3710 : (isnan(_3710) ? 0.0 : max(_3710, 0.0))) * _3700) / ((_3713 * 0.699999988079071044921875) + 1.0));
                                float _3736 = exp2(log2(1.0 / ((_3713 * 3.5) + 5.0)) * 0.25);
                                float _3737 = 1.0 - _977;
                                float _3744 = sqrt(1.0 - ((1.0 - (_3737 * _3737)) * (1.0 - (_3736 * _3736))));
                                float _3745 = _3744 * _3744;
                                float _3746 = _3745 * _3745;
                                float _3747 = _3693 - _3197;
                                float _3748 = _3694 - _3198;
                                float _3749 = _3695 - _3199;
                                float _3753 = inversesqrt(dot(vec3(_3747, _3748, _3749), vec3(_3747, _3748, _3749)));
                                float _3757 = dot(vec3(_902, _905, _908), vec3((-0.0) - _3197, (-0.0) - _3198, (-0.0) - _3199));
                                float _4868 = isnan(0.0) ? _3757 : (isnan(_3757) ? 0.0 : max(_3757, 0.0));
                                float _3760 = isnan(1.0) ? _4868 : (isnan(_4868) ? 1.0 : min(_4868, 1.0));
                                float _3761 = dot(vec3(_902, _905, _908), vec3(_3753 * _3747, _3753 * _3748, _3753 * _3749));
                                float _4879 = isnan(0.0) ? _3761 : (isnan(_3761) ? 0.0 : max(_3761, 0.0));
                                float _3764 = isnan(1.0) ? _4879 : (isnan(_4879) ? 1.0 : min(_4879, 1.0));
                                float _3768 = ((_3764 * _3764) * (_3746 + (-1.0))) + 1.0;
                                float _3769 = _3706 * _3745;
                                float _3770 = _3769 * _3769;
                                float _3776 = ((1.0 - _3770) * dot(vec3(_902, _905, _908), vec3(_3693, _3694, _3695))) + _3770;
                                float _4890 = isnan(0.0) ? _3776 : (isnan(_3776) ? 0.0 : max(_3776, 0.0));
                                float _3777 = isnan(1.0) ? _4890 : (isnan(_4890) ? 1.0 : min(_4890, 1.0));
                                float _3778 = 1.0 - _3745;
                                float _3788 = (0.5 / (((_3777 * ((_3760 * _3778) + _3745)) + 9.9999999392252902907785028219223e-09) + (((_3777 * _3778) + _3745) * _3760))) * _3777;
                                float _4901 = isnan(0.0) ? _3788 : (isnan(_3788) ? 0.0 : max(_3788, 0.0));
                                float _3798 = (_3723 * _3700) * (((_3746 * 3.1415927410125732421875) * (isnan(1.0) ? _4901 : (isnan(_4901) ? 1.0 : min(_4901, 1.0)))) / ((_3768 * _3768) * ((_3713 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3724 * _3570.y;
                                frontier_phi_78_pred_1 = _3724 * _3570.x;
                                frontier_phi_78_pred_2 = _3798 * _3582.z;
                                frontier_phi_78_pred_3 = _3798 * _3582.y;
                                frontier_phi_78_pred_4 = _3798 * _3582.x;
                                frontier_phi_78_pred_5 = _3724 * _3570.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3806 = frontier_phi_78_pred;
                            _3805 = frontier_phi_78_pred_1;
                            _3804 = frontier_phi_78_pred_2;
                            _3803 = frontier_phi_78_pred_3;
                            _3802 = frontier_phi_78_pred_4;
                            _3807 = frontier_phi_78_pred_5;
                            _3512 = _3805 + _3525;
                            _3513 = _3806 + _3526;
                            _3514 = _3807 + _3527;
                            _3509 = _3802 + _3522;
                            _3510 = _3803 + _3523;
                            _3511 = _3804 + _3524;
                            if (_3529 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3522 = _3509;
                                _3523 = _3510;
                                _3524 = _3511;
                                _3525 = _3512;
                                _3526 = _3513;
                                _3527 = _3514;
                                _3528 = _3529;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3514;
                        frontier_phi_72_pred_1 = _3513;
                        frontier_phi_72_pred_2 = _3512;
                        frontier_phi_72_pred_3 = _3511;
                        frontier_phi_72_pred_4 = _3510;
                        frontier_phi_72_pred_5 = _3509;
                    }
                    _3182 = frontier_phi_72_pred;
                    _3180 = frontier_phi_72_pred_1;
                    _3178 = frontier_phi_72_pred_2;
                    _3176 = frontier_phi_72_pred_3;
                    _3174 = frontier_phi_72_pred_4;
                    _3172 = frontier_phi_72_pred_5;
                    uint _3317 = _3316 + 1u;
                    if (_3317 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3310 = _3172;
                        _3311 = _3174;
                        _3312 = _3176;
                        _3313 = _3178;
                        _3314 = _3180;
                        _3315 = _3182;
                        _3316 = _3317;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3182;
                frontier_phi_60_61_ladder_1 = _3180;
                frontier_phi_60_61_ladder_2 = _3176;
                frontier_phi_60_61_ladder_3 = _3174;
                frontier_phi_60_61_ladder_4 = _3172;
                frontier_phi_60_61_ladder_5 = _3178;
            }
            else
            {
                frontier_phi_60_61_ladder = _3068;
                frontier_phi_60_61_ladder_1 = _3066;
                frontier_phi_60_61_ladder_2 = _3062;
                frontier_phi_60_61_ladder_3 = _3060;
                frontier_phi_60_61_ladder_4 = _3058;
                frontier_phi_60_61_ladder_5 = _3064;
            }
            _3171 = frontier_phi_60_61_ladder_4;
            _3173 = frontier_phi_60_61_ladder_3;
            _3175 = frontier_phi_60_61_ladder_2;
            _3177 = frontier_phi_60_61_ladder_5;
            _3179 = frontier_phi_60_61_ladder_1;
            _3181 = frontier_phi_60_61_ladder;
        }
        float _3186 = isnan(1.0) ? _961 : (isnan(_961) ? 1.0 : min(_961, 1.0));
        _2991 = (_3186 * _3177) + _2503;
        _2993 = (_3186 * _3179) + _2505;
        _2995 = (_3186 * _3181) + _2507;
        _2997 = ((_3171 * _945) * _3186) + _2841;
        _2999 = ((_3173 * _947) * _3186) + _2843;
        _3001 = ((_3175 * _948) * _3186) + _2845;
    }
    else
    {
        _2991 = _2503;
        _2993 = _2505;
        _2995 = _2507;
        _2997 = _2841;
        _2999 = _2843;
        _3001 = _2845;
    }
    float _4917 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
    float _4928 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
    float _4939 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
    uint _3021 = _261 + 6u;
    float _3029 = _883 / cbSceneParam._m0[86u].x;
    float _3030 = _884 / cbSceneParam._m0[86u].y;
    vec4 _3044 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3029, _3030, (log2((isnan(cbSceneParam._m0[77u].w) ? _818 : (isnan(_818) ? cbSceneParam._m0[77u].w : min(_818, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3046 = _3044.x;
    float _3047 = _3044.y;
    float _3048 = _3044.z;
    float _3049 = _3044.w;
    float _3121;
    float _3123;
    float _3125;
    float _3127;
    if (_818 > cbSceneParam._m0[78u].w)
    {
        float _3083 = isnan(_818) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _818 : min(cbSceneParam._m0[80u].w, _818));
        float _3084 = _3083 / _818;
        float _3095 = _3084 * _868;
        float _3096 = _869 * _3084;
        float _3097 = (-0.0) - _3096;
        float _3099 = _3084 * _870;
        float _3101 = (cbSceneParam._m0[77u].w * _3097) / _3083;
        float _3102 = _3101 + cbSceneParam._m0[79u].w;
        float _3103 = cbSceneParam._m0[79u].w - _3096;
        float _3109 = sqrt(((_3095 * _3095) + (_3096 * _3096)) + (_3099 * _3099));
        float _3112 = (1.0 - (cbSceneParam._m0[77u].w / _3083)) * _3109;
        float _3117 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3119 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3272;
        if (abs((_3097 - _3101) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3272 = ((((_3102 > 0.0) ? exp2(_3117 * _3102) : (2.0 - exp2(_3119 * _3102))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3112;
        }
        else
        {
            float _3232 = 1.0 / cbSceneParam._m0[80u].x;
            float _3233 = isnan(_3103) ? _3102 : (isnan(_3102) ? _3103 : max(_3102, _3103));
            float _3234 = isnan(_3103) ? _3102 : (isnan(_3102) ? _3103 : min(_3102, _3103));
            float _3243 = isnan(0.0) ? _3233 : (isnan(_3233) ? 0.0 : min(_3233, 0.0));
            float _3244 = isnan(0.0) ? _3234 : (isnan(_3234) ? 0.0 : min(_3234, 0.0));
            _3272 = ((abs(_3109 / _3097) * cbSceneParam._m0[80u].y) * ((((_3243 - _3244) * 2.0) - ((exp2(_3117 * (isnan(0.0) ? _3233 : (isnan(_3233) ? 0.0 : max(_3233, 0.0)))) - exp2(_3117 * (isnan(0.0) ? _3234 : (isnan(_3234) ? 0.0 : max(_3234, 0.0))))) * _3232)) - ((exp2(_3119 * _3243) - exp2(_3119 * _3244)) * _3232))) + (_3112 * cbSceneParam._m0[80u].z);
        }
        vec4 _3274 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3029, _3030, 1.0), 0.0);
        float _3283 = exp2((_3272 * (-1.44269502162933349609375)) * (1.0 - _3274.w));
        float _3284 = log2(_3283);
        float _3300 = log2(_3049);
        _3121 = (exp2(_3300 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3284 * cbSceneParam._m0[78u].x)) * _3274.x) / cbSceneParam._m0[78u].x)) + _3046;
        _3123 = (exp2(_3300 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3284 * cbSceneParam._m0[78u].y)) * _3274.y) / cbSceneParam._m0[78u].y)) + _3047;
        _3125 = (exp2(_3300 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3284 * cbSceneParam._m0[78u].z)) * _3274.z) / cbSceneParam._m0[78u].z)) + _3048;
        _3127 = _3283 * _3049;
    }
    else
    {
        _3121 = _3046;
        _3123 = _3047;
        _3125 = _3048;
        _3127 = _3049;
    }
    float _3139 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3140 = _3139 == 3.0;
    float _3141 = log2(_3127);
    float _3148 = exp2(_3141 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4917 : (isnan(_4917) ? 1.0 : min(_4917, 1.0))) * (_2991 + ((isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0))) * _961))) + ((_2997 + ((isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0))) * _1768)) * cbPerFrame._m0[3u].x));
    float _3149 = exp2(_3141 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4928 : (isnan(_4928) ? 1.0 : min(_4928, 1.0))) * (_2993 + ((isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0))) * _961))) + ((_2999 + ((isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0))) * _1768)) * cbPerFrame._m0[3u].x));
    float _3150 = exp2(_3141 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4939 : (isnan(_4939) ? 1.0 : min(_4939, 1.0))) * (_2995 + ((isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0))) * _961))) + ((_3001 + ((isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0))) * _1768)) * cbPerFrame._m0[3u].x));
    float _3159 = (_3139 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3159 * (_3140 ? _3148 : (_3148 + (cbSceneParam._m0[72u].w * _3121)));
    SV_Target.y = _3159 * (_3140 ? _3149 : (_3149 + (cbSceneParam._m0[72u].w * _3123)));
    SV_Target.z = _3159 * (_3140 ? _3150 : (_3150 + (cbSceneParam._m0[72u].w * _3125)));
    SV_Target.w = cbInstanceData._m0[_3021].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3021].w;
}


