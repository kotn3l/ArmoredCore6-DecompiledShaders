#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1061;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _202 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _203 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _204 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _210 = inversesqrt(dot(vec3(_202, _203, _204), vec3(_202, _203, _204)));
    float _211 = _210 * _202;
    float _212 = _210 * _203;
    float _213 = _210 * _204;
    float _217 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _218 = _217 * NORMAL.x;
    float _219 = _217 * NORMAL.y;
    float _220 = _217 * NORMAL.z;
    float _224 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _225 = _224 * TANGENT.x;
    float _226 = _224 * TANGENT.y;
    float _227 = _224 * TANGENT.z;
    uint _230 = uint(roundEven(NORMAL.w)) * 13u;
    uint _236 = _230 + 1u;
    uint _240 = _230 + 2u;
    float _249 = sqrt(((cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x) + (cbInstanceData._m0[_230].x * cbInstanceData._m0[_230].x)) + (cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x));
    float _250 = _249 * TEXCOORD.z;
    float _251 = _249 * TEXCOORD.w;
    vec4 _270 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _276 = _270.x * cbMtdParam._m0[9u].x;
    float _277 = _270.y * cbMtdParam._m0[9u].y;
    float _278 = _270.z * cbMtdParam._m0[9u].z;
    vec4 _296 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _250) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _251) + cbTextureTilingScale._m0[20u].w));
    vec4 _322 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _326 = _322.z;
    float _330 = (_322.x * 2.0) + (-1.0);
    float _331 = (_322.y * 2.0) + (-1.0);
    float _332 = dot(vec2(_330, _331), vec2(_330, _331));
    float _3673 = isnan(0.0) ? _332 : (isnan(_332) ? 0.0 : max(_332, 0.0));
    float _338 = sqrt(1.0 - (isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0))));
    float _343 = _330 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_296.x * 2.0) + (-1.0)));
    float _344 = _331 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_296.y * 2.0) + (-1.0)));
    float _347 = fma(_338, _218, fma(_344, _225, _343 * _211));
    float _350 = fma(_338, _219, fma(_344, _226, _343 * _212));
    float _353 = fma(_338, _220, fma(_344, _227, _343 * _213));
    float _357 = inversesqrt(dot(vec3(_347, _350, _353), vec3(_347, _350, _353)));
    vec4 _393 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _250) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _251) + cbTextureTilingScale._m0[11u].w));
    float _395 = _393.x;
    float _396 = 1.0 - _395;
    float _403 = ((_395 - _396) * cbMtdParam._m0[24u].z) + _396;
    float _405 = (cbMtdParam._m0[19u].x + dot(vec4(_357 * _347, _357 * _350, _357 * _353, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_403 * cbMtdParam._m0[21u].z);
    float _3684 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _406 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
    float _421 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_403 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3695 = isnan(0.0) ? _421 : (isnan(_421) ? 0.0 : max(_421, 0.0));
    float _422 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
    float _426 = ((_406 * (cbMtdParam._m0[17u].x - _276)) * _422) + _276;
    float _427 = ((_406 * (cbMtdParam._m0[17u].y - _277)) * _422) + _277;
    float _428 = ((_406 * (cbMtdParam._m0[17u].z - _278)) * _422) + _278;
    vec4 _441 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _443 = _441.x;
    float _446 = _443 - ((_443 * _406) * _422);
    float _451 = (((_296.z - _326) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _326;
    vec4 _464 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _250) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _251) + cbTextureTilingScale._m0[15u].w));
    float _471 = (_464.x * 2.0) + (-1.0);
    float _472 = (_464.y * 2.0) + (-1.0);
    float _473 = dot(vec2(_471, _472), vec2(_471, _472));
    float _3706 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _482 = (((_464.z - _451) * _406) * _422) + _451;
    float _497 = (((cbMtdParam._m0[21u].x * _343) + ((_471 - _343) * _406)) * _422) + _343;
    float _498 = (((cbMtdParam._m0[21u].x * _344) + ((_472 - _344) * _406)) * _422) + _344;
    float _499 = (((sqrt(1.0 - (isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0)))) - _338) * _406) * _422) + _338;
    float _504 = cbMtdParam._m0[22u].x + _322.w;
    float _507 = fma(_499, _218, fma(_498, _225, _497 * _211));
    float _510 = fma(_499, _219, fma(_498, _226, _497 * _212));
    float _513 = fma(_499, _220, fma(_498, _227, _497 * _213));
    float _517 = inversesqrt(dot(vec3(_507, _510, _513), vec3(_507, _510, _513)));
    float _518 = _517 * _507;
    float _519 = _517 * _510;
    float _520 = _517 * _513;
    float _3717 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _521 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
    float _3728 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _3739 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _3750 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _3761 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _3772 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _526 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
    float _540 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _581 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _591 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _581);
    float _592 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _581);
    float _593 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _581);
    float _597 = inversesqrt(dot(vec3(_591, _592, _593), vec3(_591, _592, _593)));
    float _598 = _591 * _597;
    float _599 = _592 * _597;
    float _600 = _593 * _597;
    float _606 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _607 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _628 = fma(_520, cbSceneParam._m0[5u].z, fma(_519, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _518));
    float _631 = fma(_520, cbSceneParam._m0[6u].z, fma(_519, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _518));
    float _634 = fma(_520, cbSceneParam._m0[7u].z, fma(_519, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _518));
    uint _648 = (_230 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _654 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0)))) * cbInstanceData._m0[_648].x;
    float _655 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0)))) * cbInstanceData._m0[_648].y;
    float _656 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0)))) * cbInstanceData._m0[_648].z;
    float _3783 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _657 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
    float _3794 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    float _658 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
    float _3805 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _659 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
    float _660 = 1.0 - _526;
    float _661 = _657 * _660;
    float _662 = _658 * _660;
    float _663 = _659 * _660;
    float _668 = (_657 + (-0.039999999105930328369140625)) * _526;
    float _669 = (_658 + (-0.039999999105930328369140625)) * _526;
    float _670 = (_659 + (-0.039999999105930328369140625)) * _526;
    float _671 = _668 + 0.039999999105930328369140625;
    float _673 = _669 + 0.039999999105930328369140625;
    float _674 = _670 + 0.039999999105930328369140625;
    vec4 _683 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _606, cbSceneParam._m0[86u].y * _607));
    float _687 = ((isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0))) * TEXCOORD_5.w) * _683.x;
    float _688 = dot(vec3(_518, _519, _520), vec3(_598, _599, _600));
    float _691 = _688 * 2.0;
    float _695 = (_691 * _518) - _598;
    float _696 = (_691 * _519) - _599;
    float _697 = (_691 * _520) - _600;
    float _701 = abs(dot(vec3(_598, _599, _600), vec3(_518, _519, _520)));
    float _3816 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
    float _703 = sqrt(_521);
    float _716 = exp2((_703 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_703 * 3.0));
    float _722 = (1.0 - _716) * ((_703 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _723 = _716 * _703;
    float _751 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _755 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _759 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1060;
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _785 = fma(_759, cbModelParam._m0[26u].z, fma(_755, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _751));
        float _789 = fma(_759, cbModelParam._m0[27u].z, fma(_755, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _751));
        float _793 = fma(_759, cbModelParam._m0[28u].z, fma(_755, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _751));
        float _818 = _751 + _518;
        float _819 = _755 + _519;
        float _820 = _759 + _520;
        float _830 = fma(_820, cbModelParam._m0[26u].z, fma(_819, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _818)) - _785;
        float _831 = fma(_820, cbModelParam._m0[27u].z, fma(_819, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _818)) - _789;
        float _832 = fma(_820, cbModelParam._m0[28u].z, fma(_819, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _818)) - _793;
        float _836 = inversesqrt(dot(vec3(_830, _831, _832), vec3(_830, _831, _832)));
        float _849 = ((_836 * _830) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_785 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _850 = ((_836 * _831) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_789 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _851 = ((_836 * _832) / cbModelParam._m0[34u].z) + ((((((_793 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _854 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_849, _850, _851), 0.0);
        vec4 _861 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_849, _850, _851), 0.0);
        vec4 _868 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_849, _850, _851), 0.0);
        vec4 _875 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_849, _850, _851), 0.0);
        float _888 = exp2((_854.w + (-0.5)) * 20.0) * 2.0;
        float _889 = _888 * (_854.x + (-0.5));
        float _890 = _888 * (_854.y + (-0.5));
        float _891 = _888 * (_854.z + (-0.5));
        float _898 = exp2((_861.w + (-0.5)) * 20.0) * 2.0;
        float _899 = _898 * (_861.x + (-0.5));
        float _900 = _898 * (_861.y + (-0.5));
        float _901 = _898 * (_861.z + (-0.5));
        float _908 = exp2((_868.w + (-0.5)) * 20.0) * 2.0;
        float _909 = _908 * (_868.x + (-0.5));
        float _910 = _908 * (_868.y + (-0.5));
        float _911 = _908 * (_868.z + (-0.5));
        float _918 = exp2((_875.w + (-0.5)) * 20.0) * 2.0;
        float _919 = _918 * (_875.x + (-0.5));
        float _920 = _918 * (_875.y + (-0.5));
        float _921 = _918 * (_875.z + (-0.5));
        float _922 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
        float _923 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
        float _924 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
        float _925 = _889 * 0.5;
        float _926 = _899 * 0.5;
        float _927 = _909 * 0.5;
        float _928 = dot(vec3(_925, _926, _927), vec3(_925, _926, _927));
        float _933 = (_928 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_928);
        float _942 = (dot(vec3(_518, _519, _520), vec3(_933 * _925, _933 * _926, _933 * _927)) + 1.0) * 0.5;
        float _3842 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _952 = sqrt(((_926 * _926) + (_925 * _925)) + (_927 * _927)) / (_922 + 9.9999997473787516355514526367188e-06);
        float _3853 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
        float _953 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
        float _954 = _953 * 2.0;
        float _958 = (1.0 - _953) / (_953 + 1.0);
        float _3864 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
        float _959 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
        float _968 = ((((1.0 - _959) * (_954 + 2.0)) * exp2(log2(isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0))) * (_954 + 1.0))) + _959) * _922;
        float _969 = _890 * 0.5;
        float _970 = _900 * 0.5;
        float _971 = _910 * 0.5;
        float _972 = dot(vec3(_969, _970, _971), vec3(_969, _970, _971));
        float _977 = (_972 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_972);
        float _985 = (dot(vec3(_518, _519, _520), vec3(_977 * _969, _977 * _970, _977 * _971)) + 1.0) * 0.5;
        float _3875 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        float _994 = sqrt(((_970 * _970) + (_969 * _969)) + (_971 * _971)) / (_923 + 9.9999997473787516355514526367188e-06);
        float _3886 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
        float _995 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
        float _996 = _995 * 2.0;
        float _1000 = (1.0 - _995) / (_995 + 1.0);
        float _3897 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
        float _1001 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
        float _1010 = ((((1.0 - _1001) * (_996 + 2.0)) * exp2(log2(isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0))) * (_996 + 1.0))) + _1001) * _923;
        float _1011 = _891 * 0.5;
        float _1012 = _901 * 0.5;
        float _1013 = _911 * 0.5;
        float _1014 = dot(vec3(_1011, _1012, _1013), vec3(_1011, _1012, _1013));
        float _1019 = (_1014 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1014);
        float _1027 = (dot(vec3(_518, _519, _520), vec3(_1019 * _1011, _1019 * _1012, _1019 * _1013)) + 1.0) * 0.5;
        float _3908 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1036 = sqrt(((_1012 * _1012) + (_1011 * _1011)) + (_1013 * _1013)) / (_924 + 9.9999997473787516355514526367188e-06);
        float _3919 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1037 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
        float _1038 = _1037 * 2.0;
        float _1042 = (1.0 - _1037) / (_1037 + 1.0);
        float _3930 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1043 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
        float _1052 = ((((1.0 - _1043) * (_1038 + 2.0)) * exp2(log2(isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0))) * (_1038 + 1.0))) + _1043) * _924;
        _1060 = _891;
        _1062 = _890;
        _1063 = _889;
        _1064 = _901;
        _1065 = _900;
        _1066 = _899;
        _1067 = _911;
        _1068 = _910;
        _1069 = _909;
        _1070 = _924;
        _1071 = _923;
        _1072 = _922;
        _1073 = cbModelParam._m0[36u].z * (isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0)));
        _1074 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0)));
        _1075 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0)));
    }
    else
    {
        _1060 = _1061;
        _1062 = _1061;
        _1063 = _1061;
        _1064 = _1061;
        _1065 = _1061;
        _1066 = _1061;
        _1067 = _1061;
        _1068 = _1061;
        _1069 = _1061;
        _1070 = _1061;
        _1071 = _1061;
        _1072 = _1061;
        _1073 = 0.0;
        _1074 = 0.0;
        _1075 = 0.0;
    }
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1100 = fma(_759, cbModelParam._m0[30u].z, fma(_755, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _751));
        float _1104 = fma(_759, cbModelParam._m0[31u].z, fma(_755, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _751));
        float _1108 = fma(_759, cbModelParam._m0[32u].z, fma(_755, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _751));
        float _1131 = _751 + _518;
        float _1132 = _755 + _519;
        float _1133 = _759 + _520;
        float _1143 = fma(_1133, cbModelParam._m0[30u].z, fma(_1132, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1131)) - _1100;
        float _1144 = fma(_1133, cbModelParam._m0[31u].z, fma(_1132, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1131)) - _1104;
        float _1145 = fma(_1133, cbModelParam._m0[32u].z, fma(_1132, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1131)) - _1108;
        float _1149 = inversesqrt(dot(vec3(_1143, _1144, _1145), vec3(_1143, _1144, _1145)));
        float _1162 = ((_1149 * _1143) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1100 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1163 = ((_1149 * _1144) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1104 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1164 = ((_1149 * _1145) / cbModelParam._m0[35u].z) + ((((((_1108 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1166 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1162, _1163, _1164), 0.0);
        vec4 _1173 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1162, _1163, _1164), 0.0);
        vec4 _1180 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1162, _1163, _1164), 0.0);
        vec4 _1187 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1162, _1163, _1164), 0.0);
        float _1199 = exp2((_1166.w + (-0.5)) * 20.0) * 2.0;
        float _1200 = _1199 * (_1166.x + (-0.5));
        float _1201 = _1199 * (_1166.y + (-0.5));
        float _1202 = _1199 * (_1166.z + (-0.5));
        float _1209 = exp2((_1173.w + (-0.5)) * 20.0) * 2.0;
        float _1210 = _1209 * (_1173.x + (-0.5));
        float _1211 = _1209 * (_1173.y + (-0.5));
        float _1212 = _1209 * (_1173.z + (-0.5));
        float _1219 = exp2((_1180.w + (-0.5)) * 20.0) * 2.0;
        float _1220 = _1219 * (_1180.x + (-0.5));
        float _1221 = _1219 * (_1180.y + (-0.5));
        float _1222 = _1219 * (_1180.z + (-0.5));
        float _1229 = exp2((_1187.w + (-0.5)) * 20.0) * 2.0;
        float _1230 = _1229 * (_1187.x + (-0.5));
        float _1231 = _1229 * (_1187.y + (-0.5));
        float _1232 = _1229 * (_1187.z + (-0.5));
        float _1233 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1234 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1235 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1236 = _1200 * 0.5;
        float _1237 = _1210 * 0.5;
        float _1238 = _1220 * 0.5;
        float _1239 = dot(vec3(_1236, _1237, _1238), vec3(_1236, _1237, _1238));
        float _1244 = (_1239 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1239);
        float _1252 = (dot(vec3(_518, _519, _520), vec3(_1244 * _1236, _1244 * _1237, _1244 * _1238)) + 1.0) * 0.5;
        float _3971 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1261 = sqrt(((_1237 * _1237) + (_1236 * _1236)) + (_1238 * _1238)) / (_1233 + 9.9999997473787516355514526367188e-06);
        float _3982 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1262 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
        float _1263 = _1262 * 2.0;
        float _1267 = (1.0 - _1262) / (_1262 + 1.0);
        float _3993 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1268 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
        float _1277 = ((((1.0 - _1268) * (_1263 + 2.0)) * exp2(log2(isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0))) * (_1263 + 1.0))) + _1268) * _1233;
        float _1278 = _1201 * 0.5;
        float _1279 = _1211 * 0.5;
        float _1280 = _1221 * 0.5;
        float _1281 = dot(vec3(_1278, _1279, _1280), vec3(_1278, _1279, _1280));
        float _1286 = (_1281 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1281);
        float _1294 = (dot(vec3(_518, _519, _520), vec3(_1286 * _1278, _1286 * _1279, _1286 * _1280)) + 1.0) * 0.5;
        float _4004 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1303 = sqrt(((_1279 * _1279) + (_1278 * _1278)) + (_1280 * _1280)) / (_1234 + 9.9999997473787516355514526367188e-06);
        float _4015 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1304 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
        float _1305 = _1304 * 2.0;
        float _1309 = (1.0 - _1304) / (_1304 + 1.0);
        float _4026 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1310 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
        float _1319 = ((((1.0 - _1310) * (_1305 + 2.0)) * exp2(log2(isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0))) * (_1305 + 1.0))) + _1310) * _1234;
        float _1320 = _1202 * 0.5;
        float _1321 = _1212 * 0.5;
        float _1322 = _1222 * 0.5;
        float _1323 = dot(vec3(_1320, _1321, _1322), vec3(_1320, _1321, _1322));
        float _1328 = (_1323 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1323);
        float _1336 = (dot(vec3(_518, _519, _520), vec3(_1328 * _1320, _1328 * _1321, _1328 * _1322)) + 1.0) * 0.5;
        float _4037 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1345 = sqrt(((_1321 * _1321) + (_1320 * _1320)) + (_1322 * _1322)) / (_1235 + 9.9999997473787516355514526367188e-06);
        float _4048 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1346 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
        float _1347 = _1346 * 2.0;
        float _1351 = (1.0 - _1346) / (_1346 + 1.0);
        float _4059 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1352 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
        float _1361 = ((((1.0 - _1352) * (_1347 + 2.0)) * exp2(log2(isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0))) * (_1347 + 1.0))) + _1352) * _1235;
        _1369 = _1202;
        _1370 = _1201;
        _1371 = _1200;
        _1372 = _1212;
        _1373 = _1211;
        _1374 = _1210;
        _1375 = _1222;
        _1376 = _1221;
        _1377 = _1220;
        _1378 = _1235;
        _1379 = _1234;
        _1380 = _1233;
        _1381 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0)));
        _1382 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0)));
        _1383 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0)));
    }
    else
    {
        _1369 = _1061;
        _1370 = _1061;
        _1371 = _1061;
        _1372 = _1061;
        _1373 = _1061;
        _1374 = _1061;
        _1375 = _1061;
        _1376 = _1061;
        _1377 = _1061;
        _1378 = _1061;
        _1379 = _1061;
        _1380 = _1061;
        _1381 = 0.0;
        _1382 = 0.0;
        _1383 = 0.0;
    }
    float _1393 = (cbModelParam._m0[1u].x * (_1381 - _1073)) + _1073;
    float _1394 = (cbModelParam._m0[1u].x * (_1382 - _1074)) + _1074;
    float _1395 = (cbModelParam._m0[1u].x * (_1383 - _1075)) + _1075;
    float _1416 = fma(_1395, cbSceneParam._m0[89u].z, fma(_1394, cbSceneParam._m0[89u].y, _1393 * cbSceneParam._m0[89u].x));
    float _1419 = fma(_1395, cbSceneParam._m0[90u].z, fma(_1394, cbSceneParam._m0[90u].y, _1393 * cbSceneParam._m0[90u].x));
    float _1422 = fma(_1395, cbSceneParam._m0[91u].z, fma(_1394, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1393));
    float _1437 = _695 * 0.5;
    float _1438 = _696 * 0.5;
    float _1439 = _697 * 0.5;
    float _1440 = dot(vec4(_1437, _1438, _1439, 1.0), vec4(_1371, _1374, _1377, _1380));
    float _1443 = dot(vec4(_1437, _1438, _1439, 1.0), vec4(_1370, _1373, _1376, _1379));
    float _1446 = dot(vec4(_1437, _1438, _1439, 1.0), vec4(_1369, _1372, _1375, _1378));
    float _1480;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1453 = dot(vec4(_1437, _1438, _1439, 1.0), vec4(_1060, _1064, _1067, _1070));
        float _1457 = dot(vec4(_1437, _1438, _1439, 1.0), vec4(_1062, _1065, _1068, _1071));
        float _1461 = dot(vec4(_1437, _1438, _1439, 1.0), vec4(_1063, _1066, _1069, _1072));
        float _1468 = dot(vec4(cbModelParam._m0[39u]), vec4(_1437, _1438, _1439, 1.0));
        _1480 = dot(vec3(isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0)), isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0)), isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1468) ? 0.0 : (isnan(0.0) ? _1468 : max(0.0, _1468))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1480 = 1.0;
    }
    float _1491;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1482 = dot(vec4(cbModelParam._m0[40u]), vec4(_1437, _1438, _1439, 1.0));
        _1491 = dot(vec3(isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0)), isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0)), isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1482) ? 0.0 : (isnan(0.0) ? _1482 : max(0.0, _1482))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1491 = 1.0;
    }
    float _1495 = (_1491 * cbModelParam._m0[1u].x) + (_1480 * (1.0 - cbModelParam._m0[1u].x));
    float _1505 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _521);
    float _1506 = isnan(_1505) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1505 : min(cbModelParam._m0[25u].z, _1505));
    float _1587;
    float _1589;
    float _1591;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1554 = fma(_759, cbModelParam._m0[13u].z, fma(_755, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _751)) + cbModelParam._m0[13u].w;
        float _1558 = fma(_759, cbModelParam._m0[14u].z, fma(_755, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _751)) + cbModelParam._m0[14u].w;
        float _1562 = fma(_759, cbModelParam._m0[15u].z, fma(_755, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _751)) + cbModelParam._m0[15u].w;
        float _1565 = fma(_697, cbModelParam._m0[13u].z, fma(_696, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _695));
        float _1568 = fma(_697, cbModelParam._m0[14u].z, fma(_696, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _695));
        float _1571 = fma(_697, cbModelParam._m0[15u].z, fma(_696, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _695));
        float _1599;
        if (_1565 > 0.0)
        {
            _1599 = abs((1.0 - _1554) / _1565);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1565 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1554 + 1.0) / _1565);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1599 = frontier_phi_14_12_ladder;
        }
        float _1771;
        if (_1568 > 0.0)
        {
            _1771 = abs((1.0 - _1558) / _1568);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1568 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1558 + 1.0) / _1568);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1771 = frontier_phi_23_19_ladder;
        }
        float _2067;
        if (_1571 > 0.0)
        {
            _2067 = abs((1.0 - _1562) / _1571);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1571 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1562 + 1.0) / _1571);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2067 = frontier_phi_35_30_ladder;
        }
        float _2069 = isnan(_1771) ? _1599 : (isnan(_1599) ? _1771 : min(_1599, _1771));
        float _2070 = isnan(_2067) ? _2069 : (isnan(_2069) ? _2067 : min(_2069, _2067));
        float _2074 = (_2070 * _1565) + _1554;
        float _2075 = (_2070 * _1568) + _1558;
        float _2076 = (_2070 * _1571) + _1562;
        float _2077 = _2070 * 9.9999997473787516355514526367188e-05;
        float _2079 = (-1.0) - _2077;
        float _2081 = _2077 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2076 > _2081) || ((_2076 < _2079) || ((_2075 > _2081) || ((_2075 < _2079) || ((_2074 < _2079) || (_2074 > _2081))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2221 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2076, cbModelParam._m0[9u].z, fma(_2075, cbModelParam._m0[9u].y, _2074 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2076, cbModelParam._m0[10u].z, fma(_2075, cbModelParam._m0[10u].y, _2074 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2076, cbModelParam._m0[11u].z, fma(_2075, cbModelParam._m0[11u].y, _2074 * cbModelParam._m0[11u].x))), _1506);
            frontier_phi_13_35_ladder = _2221.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2221.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2221.x * cbModelParam._m0[1u].y;
        }
        _1587 = frontier_phi_13_35_ladder_2;
        _1589 = frontier_phi_13_35_ladder_1;
        _1591 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1575 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_695, _696, _697), _1506);
        _1587 = _1575.x * cbModelParam._m0[1u].y;
        _1589 = _1575.y * cbModelParam._m0[1u].y;
        _1591 = _1575.z * cbModelParam._m0[1u].y;
    }
    float _1595 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _521);
    float _1596 = isnan(_1595) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1595 : min(cbModelParam._m0[25u].w, _1595));
    float _1686;
    float _1688;
    float _1690;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1650 = fma(_759, cbModelParam._m0[21u].z, fma(_755, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _751)) + cbModelParam._m0[21u].w;
        float _1654 = fma(_759, cbModelParam._m0[22u].z, fma(_755, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _751)) + cbModelParam._m0[22u].w;
        float _1658 = fma(_759, cbModelParam._m0[23u].z, fma(_755, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _751)) + cbModelParam._m0[23u].w;
        float _1661 = fma(_697, cbModelParam._m0[21u].z, fma(_696, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _695));
        float _1664 = fma(_697, cbModelParam._m0[22u].z, fma(_696, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _695));
        float _1667 = fma(_697, cbModelParam._m0[23u].z, fma(_696, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _695));
        float _1776;
        if (_1661 > 0.0)
        {
            _1776 = abs((1.0 - _1650) / _1661);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1661 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1650 + 1.0) / _1661);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1776 = frontier_phi_25_21_ladder;
        }
        float _2094;
        if (_1664 > 0.0)
        {
            _2094 = abs((1.0 - _1654) / _1664);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1664 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1654 + 1.0) / _1664);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2094 = frontier_phi_37_32_ladder;
        }
        float _2432;
        if (_1667 > 0.0)
        {
            _2432 = abs((1.0 - _1658) / _1667);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1667 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1658 + 1.0) / _1667);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2432 = frontier_phi_47_44_ladder;
        }
        float _2434 = isnan(_2094) ? _1776 : (isnan(_1776) ? _2094 : min(_1776, _2094));
        float _2435 = isnan(_2432) ? _2434 : (isnan(_2434) ? _2432 : min(_2434, _2432));
        float _2439 = (_2435 * _1661) + _1650;
        float _2440 = (_2435 * _1664) + _1654;
        float _2441 = (_2435 * _1667) + _1658;
        float _2442 = _2435 * 9.9999997473787516355514526367188e-05;
        float _2443 = (-1.0) - _2442;
        float _2445 = _2442 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2441 > _2445) || ((_2441 < _2443) || ((_2440 > _2445) || ((_2440 < _2443) || ((_2439 < _2443) || (_2439 > _2445))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2563 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2441, cbModelParam._m0[17u].z, fma(_2440, cbModelParam._m0[17u].y, _2439 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2441, cbModelParam._m0[18u].z, fma(_2440, cbModelParam._m0[18u].y, _2439 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2441, cbModelParam._m0[19u].z, fma(_2440, cbModelParam._m0[19u].y, _2439 * cbModelParam._m0[19u].x))), _1596);
            frontier_phi_22_47_ladder = _2563.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2563.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2563.x * cbModelParam._m0[1u].z;
        }
        _1686 = frontier_phi_22_47_ladder_2;
        _1688 = frontier_phi_22_47_ladder_1;
        _1690 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1670 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_695, _696, _697), _1596);
        _1686 = _1670.x * cbModelParam._m0[1u].z;
        _1688 = _1670.y * cbModelParam._m0[1u].z;
        _1690 = _1670.z * cbModelParam._m0[1u].z;
    }
    float _1703 = (((_722 * _671) + _723) * _687) * ((cbModelParam._m0[1u].w * (_1686 - _1587)) + _1587);
    float _1705 = (((_722 * _673) + _723) * _687) * ((cbModelParam._m0[1u].w * (_1688 - _1589)) + _1589);
    float _1707 = (((_722 * _674) + _723) * _687) * ((cbModelParam._m0[1u].w * (_1690 - _1591)) + _1591);
    float _1710 = fma(_1707, cbSceneParam._m0[89u].z, fma(_1705, cbSceneParam._m0[89u].y, _1703 * cbSceneParam._m0[89u].x));
    float _1713 = fma(_1707, cbSceneParam._m0[90u].z, fma(_1705, cbSceneParam._m0[90u].y, _1703 * cbSceneParam._m0[90u].x));
    float _1716 = fma(_1707, cbSceneParam._m0[91u].z, fma(_1705, cbSceneParam._m0[91u].y, _1703 * cbSceneParam._m0[91u].x));
    float _1750 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1754 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1758 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1762 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1763 = _1750 / _1762;
    float _1764 = _1754 / _1762;
    float _1765 = _1758 / _1762;
    float _1912;
    float _1913;
    float _1914;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1792 = ((uint(_1765 > cbSceneParam._m0[59u].y) + uint(_1765 > cbSceneParam._m0[59u].x)) + uint(_1765 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1793 = _1792 + 43u;
        uint _1801 = _1792 + 44u;
        uint _1809 = _1792 + 45u;
        uint _1817 = _1792 + 46u;
        float _1828 = fma(_1762, cbSceneParam._m0[_1793].w, fma(_1758, cbSceneParam._m0[_1793].z, fma(_1754, cbSceneParam._m0[_1793].y, _1750 * cbSceneParam._m0[_1793].x)));
        float _1832 = fma(_1762, cbSceneParam._m0[_1801].w, fma(_1758, cbSceneParam._m0[_1801].z, fma(_1754, cbSceneParam._m0[_1801].y, _1750 * cbSceneParam._m0[_1801].x)));
        float _1840 = fma(_1762, cbSceneParam._m0[_1817].w, fma(_1758, cbSceneParam._m0[_1817].z, fma(_1754, cbSceneParam._m0[_1817].y, _1750 * cbSceneParam._m0[_1817].x)));
        float _1845 = cbSceneParam._m0[33u].z * _1840;
        float _1847 = cbSceneParam._m0[33u].w * _1840;
        float _1850 = fma(_1762, cbSceneParam._m0[_1809].w, fma(_1758, cbSceneParam._m0[_1809].z, fma(_1754, cbSceneParam._m0[_1809].y, _1750 * cbSceneParam._m0[_1809].x))) / _1840;
        float _1898 = (cbSceneParam._m0[33u].x - sqrt(((_1764 * _1764) + (_1763 * _1763)) + (_1765 * _1765))) * cbSceneParam._m0[33u].y;
        float _4185 = isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0));
        float _1905 = (isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1845 + _1828) / _1840, (_1847 + _1832) / _1840), _1850), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1847 + _1828) / _1840, (_1832 - _1845) / _1840), _1850), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1828 - _1845) / _1840, (_1832 - _1847) / _1840), _1850), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1828 - _1847) / _1840, (_1845 + _1832) / _1840), _1850), 0.0)).x), vec4(0.25)));
        _1912 = 1.0 - (_1905 * cbSceneParam._m0[34u].x);
        _1913 = 1.0 - (_1905 * cbSceneParam._m0[34u].y);
        _1914 = 1.0 - (_1905 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1912 = 1.0;
        _1913 = 1.0;
        _1914 = 1.0;
    }
    float _1978;
    float _1980;
    float _1982;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1966 = fma(_1762, cbSceneParam._m0[63u].w, fma(_1758, cbSceneParam._m0[63u].z, fma(_1754, cbSceneParam._m0[63u].y, _1750 * cbSceneParam._m0[63u].x)));
        float _1967 = fma(_1762, cbSceneParam._m0[60u].w, fma(_1758, cbSceneParam._m0[60u].z, fma(_1754, cbSceneParam._m0[60u].y, _1750 * cbSceneParam._m0[60u].x))) / _1966;
        float _1968 = fma(_1762, cbSceneParam._m0[61u].w, fma(_1758, cbSceneParam._m0[61u].z, fma(_1754, cbSceneParam._m0[61u].y, _1750 * cbSceneParam._m0[61u].x))) / _1966;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1967 >= cbSceneParam._m0[64u].x) && (_1968 >= cbSceneParam._m0[64u].y)) && (_1967 <= cbSceneParam._m0[64u].z)) && (_1968 <= cbSceneParam._m0[64u].w))
        {
            float _2107 = fma(_1762, cbSceneParam._m0[62u].w, fma(_1758, cbSceneParam._m0[62u].z, fma(_1754, cbSceneParam._m0[62u].y, _1750 * cbSceneParam._m0[62u].x))) / _1966;
            float _2111 = isnan(cbSceneParam._m0[41u].w) ? _2107 : (isnan(_2107) ? cbSceneParam._m0[41u].w : max(_2107, cbSceneParam._m0[41u].w));
            float _2154 = (cbSceneParam._m0[33u].x - sqrt(((_1764 * _1764) + (_1763 * _1763)) + (_1765 * _1765))) * cbSceneParam._m0[33u].y;
            float _4201 = isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0));
            float _2161 = (isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1967, cbSceneParam._m0[33u].w + _1968), _2111), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1967, _1968 - cbSceneParam._m0[33u].z), _2111), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1967 - cbSceneParam._m0[33u].z, _1968 - cbSceneParam._m0[33u].w), _2111), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1967 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1968), _2111), 0.0)).x), vec4(0.25)));
            float _2165 = 1.0 - (_2161 * cbSceneParam._m0[34u].x);
            float _2166 = 1.0 - (_2161 * cbSceneParam._m0[34u].y);
            float _2167 = 1.0 - (_2161 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2167) ? _1914 : (isnan(_1914) ? _2167 : min(_1914, _2167));
            frontier_phi_34_33_ladder_1 = isnan(_2166) ? _1913 : (isnan(_1913) ? _2166 : min(_1913, _2166));
            frontier_phi_34_33_ladder_2 = isnan(_2165) ? _1912 : (isnan(_1912) ? _2165 : min(_1912, _2165));
        }
        else
        {
            frontier_phi_34_33_ladder = _1914;
            frontier_phi_34_33_ladder_1 = _1913;
            frontier_phi_34_33_ladder_2 = _1912;
        }
        _1978 = frontier_phi_34_33_ladder_2;
        _1980 = frontier_phi_34_33_ladder_1;
        _1982 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1978 = _1912;
        _1980 = _1913;
        _1982 = _1914;
    }
    uvec4 _1987 = floatBitsToUint(cbInstanceData._m0[_230 + 5u]);
    uint _1989 = _1987.x * 14u;
    uint _1990 = _1989 + 13u;
    float _1997 = _687 + (-1.0);
    float _2002 = (cbLight._m0[_1990].x * _1997) + 1.0;
    float _2003 = (cbLight._m0[_1990].y * _1997) + 1.0;
    float _2004 = (cbLight._m0[_1990].z * _1997) + 1.0;
    float _2005 = (cbLight._m0[_1990].w * _1997) + 1.0;
    uint _2006 = _1989 + 5u;
    float _2012 = isnan(1.0) ? _2003 : (isnan(_2003) ? 1.0 : min(_2003, 1.0));
    uint _2016 = _1989 + 4u;
    float _2026 = isnan(1.0) ? _2002 : (isnan(_2002) ? 1.0 : min(_2002, 1.0));
    uint _2030 = _1989 | 1u;
    float _2041 = dot(vec3(cbLight._m0[_1989].xyz), vec3(_518, _519, _520));
    float _2044 = dot(vec3(cbLight._m0[_2030].xyz), vec3(_518, _519, _520));
    float _4237 = isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0));
    float _4248 = isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0));
    float _2049 = (isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0))) * 0.3183098733425140380859375;
    float _2051 = (isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0))) * 0.3183098733425140380859375;
    float _2058 = ((cbLight._m0[_2006].x * _2012) * _2051) + (((cbLight._m0[_2016].x * _1978) * _2026) * _2049);
    float _2059 = ((_2012 * cbLight._m0[_2006].y) * _2051) + (((cbLight._m0[_2016].y * _1980) * _2026) * _2049);
    float _2060 = ((_2012 * cbLight._m0[_2006].z) * _2051) + (((cbLight._m0[_2016].z * _1982) * _2026) * _2049);
    uvec4 _2064 = floatBitsToUint(cbLight._m0[_1989 + 12u]);
    bool _2066 = _2064.x == 0u;
    float _2168;
    float _2170;
    float _2172;
    if (_2066)
    {
        _2168 = _2058;
        _2170 = _2059;
        _2172 = _2060;
    }
    else
    {
        uint _2176 = _1989 + 6u;
        float _2192 = (dot(vec3(cbLight._m0[_1989 + 2u].xyz), vec3(_518, _519, _520)) * 0.5) + 0.5;
        float _2193 = _2192 * _2192;
        float _4259 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
        float _2194 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
        float _2195 = isnan(1.0) ? _2004 : (isnan(_2004) ? 1.0 : min(_2004, 1.0));
        _2168 = (((cbLight._m0[_2176].x * 0.3183098733425140380859375) * _2194) * _2195) + _2058;
        _2170 = (((cbLight._m0[_2176].y * 0.3183098733425140380859375) * _2194) * _2195) + _2059;
        _2172 = (((cbLight._m0[_2176].z * 0.3183098733425140380859375) * _2194) * _2195) + _2060;
    }
    bool _2175 = _2064.y == 0u;
    float _2230;
    float _2232;
    float _2234;
    if (_2175)
    {
        _2230 = _2168;
        _2232 = _2170;
        _2234 = _2172;
    }
    else
    {
        uint _2403 = _1989 + 7u;
        float _2419 = (dot(vec3(cbLight._m0[_1989 + 3u].xyz), vec3(_518, _519, _520)) * 0.5) + 0.5;
        float _2420 = _2419 * _2419;
        float _4275 = isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0));
        float _2421 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
        float _2422 = isnan(1.0) ? _2005 : (isnan(_2005) ? 1.0 : min(_2005, 1.0));
        _2230 = (((cbLight._m0[_2403].x * 0.3183098733425140380859375) * _2421) * _2422) + _2168;
        _2232 = (((cbLight._m0[_2403].y * 0.3183098733425140380859375) * _2421) * _2422) + _2170;
        _2234 = (((cbLight._m0[_2403].z * 0.3183098733425140380859375) * _2421) * _2422) + _2172;
    }
    uint _2237 = _1989 + 8u;
    float _2250 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1989].w)) * _521) * 0.949999988079071044921875);
    float _2251 = _2250 * _2250;
    float _2252 = cbLight._m0[_1989].x + _598;
    float _2253 = cbLight._m0[_1989].y + _599;
    float _2254 = cbLight._m0[_1989].z + _600;
    float _2258 = inversesqrt(dot(vec3(_2252, _2253, _2254), vec3(_2252, _2253, _2254)));
    float _2259 = _2258 * _2252;
    float _2260 = _2258 * _2253;
    float _2261 = _2258 * _2254;
    float _2262 = dot(vec3(_518, _519, _520), vec3(cbLight._m0[_1989].xyz));
    float _4291 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
    float _2265 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
    float _4302 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _2266 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
    float _2267 = dot(vec3(_518, _519, _520), vec3(_2259, _2260, _2261));
    float _4313 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0));
    float _2270 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
    float _2271 = dot(vec3(cbLight._m0[_1989].xyz), vec3(_2259, _2260, _2261));
    float _4324 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0));
    float _2275 = _2251 * _2251;
    float _2279 = ((_2270 * _2270) * (_2275 + (-1.0))) + 1.0;
    float _2287 = exp2(log2(1.0 - (isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0)))) * 5.0);
    float _2288 = 0.959999978542327880859375 - _668;
    float _2290 = 0.959999978542327880859375 - _669;
    float _2291 = 0.959999978542327880859375 - _670;
    float _2298 = 1.0 - _2251;
    float _2309 = (0.5 / (((_2266 * ((_2265 * _2298) + _2251)) + 9.9999999392252902907785028219223e-09) + (((_2266 * _2298) + _2251) * _2265))) * _2265;
    float _4335 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
    float _2311 = (isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0))) * (_2275 / ((_2279 * _2279) * 3.141590118408203125));
    uint _2325 = _1989 + 9u;
    float _2336 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2030].w)) * _521) * 0.949999988079071044921875);
    float _2337 = _2336 * _2336;
    float _2338 = cbLight._m0[_2030].x + _598;
    float _2339 = cbLight._m0[_2030].y + _599;
    float _2340 = cbLight._m0[_2030].z + _600;
    float _2344 = inversesqrt(dot(vec3(_2338, _2339, _2340), vec3(_2338, _2339, _2340)));
    float _2345 = _2344 * _2338;
    float _2346 = _2344 * _2339;
    float _2347 = _2344 * _2340;
    float _2348 = dot(vec3(_518, _519, _520), vec3(cbLight._m0[_2030].xyz));
    float _4346 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
    float _2351 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
    float _2352 = dot(vec3(_518, _519, _520), vec3(_2345, _2346, _2347));
    float _4357 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
    float _2355 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
    float _2356 = dot(vec3(cbLight._m0[_2030].xyz), vec3(_2345, _2346, _2347));
    float _4368 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
    float _2360 = _2337 * _2337;
    float _2364 = ((_2355 * _2355) * (_2360 + (-1.0))) + 1.0;
    float _2371 = exp2(log2(1.0 - (isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0)))) * 5.0);
    float _2378 = 1.0 - _2337;
    float _2388 = (0.5 / (((_2266 * ((_2351 * _2378) + _2337)) + 9.9999999392252902907785028219223e-09) + (((_2266 * _2378) + _2337) * _2351))) * _2351;
    float _4379 = isnan(0.0) ? _2388 : (isnan(_2388) ? 0.0 : max(_2388, 0.0));
    float _2390 = (isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0))) * (_2360 / ((_2364 * _2364) * 3.141590118408203125));
    float _2400 = (((((_2371 * _2288) + _671) * cbLight._m0[_2325].x) * _2390) * _2012) + ((((cbLight._m0[_2237].x * _1978) * ((_2287 * _2288) + _671)) * _2311) * _2026);
    float _2401 = (((((_2371 * _2290) + _673) * cbLight._m0[_2325].y) * _2390) * _2012) + ((((cbLight._m0[_2237].y * _1980) * ((_2287 * _2290) + _673)) * _2311) * _2026);
    float _2402 = (((((_2371 * _2291) + _674) * cbLight._m0[_2325].z) * _2390) * _2012) + ((((cbLight._m0[_2237].z * _1982) * ((_2287 * _2291) + _674)) * _2311) * _2026);
    float _2458;
    float _2460;
    float _2462;
    if (_2066)
    {
        _2458 = _2400;
        _2460 = _2401;
        _2462 = _2402;
    }
    else
    {
        uint _2464 = _1989 + 2u;
        uint _2468 = _1989 + 10u;
        float _2482 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2464].w)) * _521) * 0.949999988079071044921875);
        float _2483 = _2482 * _2482;
        float _2484 = cbLight._m0[_2464].x + _598;
        float _2485 = cbLight._m0[_2464].y + _599;
        float _2486 = cbLight._m0[_2464].z + _600;
        float _2490 = inversesqrt(dot(vec3(_2484, _2485, _2486), vec3(_2484, _2485, _2486)));
        float _2491 = _2490 * _2484;
        float _2492 = _2490 * _2485;
        float _2493 = _2490 * _2486;
        float _2494 = dot(vec3(_518, _519, _520), vec3(cbLight._m0[_2464].xyz));
        float _4390 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
        float _2497 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
        float _2498 = dot(vec3(_518, _519, _520), vec3(_2491, _2492, _2493));
        float _4401 = isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0));
        float _2501 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
        float _2502 = dot(vec3(cbLight._m0[_2464].xyz), vec3(_2491, _2492, _2493));
        float _4412 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
        float _2506 = _2483 * _2483;
        float _2510 = ((_2501 * _2501) * (_2506 + (-1.0))) + 1.0;
        float _2517 = exp2(log2(1.0 - (isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0)))) * 5.0);
        float _2524 = 1.0 - _2483;
        float _2534 = (0.5 / (((_2266 * ((_2497 * _2524) + _2483)) + 9.9999999392252902907785028219223e-09) + (((_2266 * _2524) + _2483) * _2497))) * _2497;
        float _4423 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
        float _2536 = (isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0))) * (_2506 / ((_2510 * _2510) * 3.141590118408203125));
        float _2537 = isnan(1.0) ? _2004 : (isnan(_2004) ? 1.0 : min(_2004, 1.0));
        _2458 = (((((_2517 * _2288) + _671) * cbLight._m0[_2468].x) * _2536) * _2537) + _2400;
        _2460 = (((((_2517 * _2290) + _673) * cbLight._m0[_2468].y) * _2536) * _2537) + _2401;
        _2462 = (((((_2517 * _2291) + _674) * cbLight._m0[_2468].z) * _2536) * _2537) + _2402;
    }
    float _2568;
    float _2570;
    float _2572;
    if (_2175)
    {
        _2568 = _2458;
        _2570 = _2460;
        _2572 = _2462;
    }
    else
    {
        uint _2579 = _1989 + 3u;
        uint _2583 = _1989 + 11u;
        float _2597 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2579].w)) * _521) * 0.949999988079071044921875);
        float _2598 = _2597 * _2597;
        float _2599 = cbLight._m0[_2579].x + _598;
        float _2600 = cbLight._m0[_2579].y + _599;
        float _2601 = cbLight._m0[_2579].z + _600;
        float _2605 = inversesqrt(dot(vec3(_2599, _2600, _2601), vec3(_2599, _2600, _2601)));
        float _2606 = _2605 * _2599;
        float _2607 = _2605 * _2600;
        float _2608 = _2605 * _2601;
        float _2609 = dot(vec3(_518, _519, _520), vec3(cbLight._m0[_2579].xyz));
        float _4439 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0));
        float _2612 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
        float _2613 = dot(vec3(_518, _519, _520), vec3(_2606, _2607, _2608));
        float _4450 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0));
        float _2616 = isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0));
        float _2617 = dot(vec3(cbLight._m0[_2579].xyz), vec3(_2606, _2607, _2608));
        float _4461 = isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : max(_2617, 0.0));
        float _2621 = _2598 * _2598;
        float _2625 = ((_2616 * _2616) * (_2621 + (-1.0))) + 1.0;
        float _2632 = exp2(log2(1.0 - (isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0)))) * 5.0);
        float _2639 = 1.0 - _2598;
        float _2649 = (0.5 / (((_2266 * ((_2612 * _2639) + _2598)) + 9.9999999392252902907785028219223e-09) + (((_2266 * _2639) + _2598) * _2612))) * _2612;
        float _4472 = isnan(0.0) ? _2649 : (isnan(_2649) ? 0.0 : max(_2649, 0.0));
        float _2651 = (isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0))) * (_2621 / ((_2625 * _2625) * 3.141590118408203125));
        float _2652 = isnan(1.0) ? _2005 : (isnan(_2005) ? 1.0 : min(_2005, 1.0));
        _2568 = (((((_2632 * _2288) + _671) * cbLight._m0[_2583].x) * _2651) * _2652) + _2458;
        _2570 = (((((_2632 * _2290) + _673) * cbLight._m0[_2583].y) * _2651) * _2652) + _2460;
        _2572 = (((((_2632 * _2291) + _674) * cbLight._m0[_2583].z) * _2651) * _2652) + _2462;
    }
    float _2718;
    float _2720;
    float _2722;
    float _2724;
    float _2726;
    float _2728;
    if (_1987.y == 0u)
    {
        uvec4 _2673 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2674 = _2673.x;
        uint _2685 = uint((float(_2673.y) * floor(float(uint(cbSceneParam._m0[85u].y * _607) / _2674))) + floor(float(uint(cbSceneParam._m0[85u].x * _606) / _2674)));
        float _2695 = (log2(_1765 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2696 = isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : max(_2695, 0.0));
        uint _2699 = uint(isnan(14.0) ? _2696 : (isnan(_2696) ? 14.0 : min(_2696, 14.0)));
        uvec4 _2704 = texelFetch(g_lightClusterGridBuffer, int(((_2699 << 2u) + (_2685 << 6u)) >> 2u));
        uint _2705 = _2704.x;
        uint _2706 = _2673.z;
        float _2785;
        float _2787;
        float _2789;
        float _2791;
        float _2793;
        float _2795;
        if (((((1u << ((_2706 >> 4u) & 15u)) + 4294967295u) & _2705) == 0u) || ((_2706 & 240u) == 0u))
        {
            _2785 = 0.0;
            _2787 = 0.0;
            _2789 = 0.0;
            _2791 = 0.0;
            _2793 = 0.0;
            _2795 = 0.0;
        }
        else
        {
            float _2786;
            float _2788;
            float _2790;
            float _2792;
            float _2794;
            float _2796;
            float _2930 = 0.0;
            float _2931 = 0.0;
            float _2932 = 0.0;
            float _2933 = 0.0;
            float _2934 = 0.0;
            float _2935 = 0.0;
            uint _2936 = 0u;
            uint _2945;
            bool _2946;
            for (;;)
            {
                _2945 = texelFetch(g_lightClassification, int((((_2699 << 5u) + (_2685 << 9u)) + (_2936 << 2u)) >> 2u)).x;
                _2946 = _2945 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2946)
                {
                    frontier_phi_66_pred = _2935;
                    frontier_phi_66_pred_1 = _2934;
                    frontier_phi_66_pred_2 = _2933;
                    frontier_phi_66_pred_3 = _2932;
                    frontier_phi_66_pred_4 = _2931;
                    frontier_phi_66_pred_5 = _2930;
                }
                else
                {
                    float _3054;
                    float _3055;
                    float _3056;
                    float _3057;
                    float _3058;
                    float _3059;
                    uint _3060;
                    _3054 = _2930;
                    _3055 = _2931;
                    _3056 = _2932;
                    _3057 = _2933;
                    _3058 = _2934;
                    _3059 = _2935;
                    _3060 = _2945;
                    float _2986;
                    float _2987;
                    float _2988;
                    float _2989;
                    float _2990;
                    float _2991;
                    for (;;)
                    {
                        uint _3064 = uint(findLSB(_3060)) + (_2936 << 5u);
                        uint _3061 = (_3060 + 4294967295u) & _3060;
                        uint _3066 = _3064 * 48u;
                        vec4 _3080 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3066)).x, texelFetch(g_PointLightRenderingBuffer, int(_3066 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3066 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3066 + 3u)).x));
                        uint _3086 = (_3064 * 48u) + 4u;
                        vec4 _3099 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3086)).x, texelFetch(g_PointLightRenderingBuffer, int(_3086 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3086 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3086 + 3u)).x));
                        uint _3105 = (_3064 * 48u) + 8u;
                        vec3 _3116 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3105)).x, texelFetch(g_PointLightRenderingBuffer, int(_3105 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3105 + 2u)).x));
                        float _3120 = _3080.x - _1763;
                        float _3121 = _3080.y - _1764;
                        float _3122 = _3080.z - _1765;
                        float _3123 = dot(vec3(_3120, _3121, _3122), vec3(_3120, _3121, _3122));
                        float _3126 = inversesqrt(_3123);
                        float _3127 = _3126 * _3120;
                        float _3128 = _3126 * _3121;
                        float _3129 = _3126 * _3122;
                        float _3130 = dot(vec3(_628, _631, _634), vec3(_3127, _3128, _3129));
                        float _3135 = 1.0 - (_3123 * _3080.w);
                        float _4498 = isnan(0.0) ? _3135 : (isnan(_3135) ? 0.0 : max(_3135, 0.0));
                        float _3136 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
                        float _3137 = sqrt(_3123) * _3099.w;
                        float _3140 = 1.39999997615814208984375 / (_3137 + 1.39999997615814208984375);
                        float _3141 = _3140 * _3140;
                        float _3144 = ((1.0 - _3141) * _3130) + _3141;
                        float _3147 = _3137 * _3137;
                        float _3151 = ((isnan(0.0) ? _3144 : (isnan(_3144) ? 0.0 : max(_3144, 0.0))) * _3136) / ((_3147 * 0.699999988079071044921875) + 1.0);
                        float _3155 = (-0.0) - _1763;
                        float _3156 = (-0.0) - _1764;
                        float _3157 = (-0.0) - _1765;
                        float _3161 = inversesqrt(dot(vec3(_3155, _3156, _3157), vec3(_3155, _3156, _3157)));
                        float _3162 = _3161 * _3155;
                        float _3163 = _3161 * _3156;
                        float _3164 = _3161 * _3157;
                        float _3171 = exp2(log2(1.0 / ((_3147 * 3.5) + 5.0)) * 0.25);
                        float _3172 = 1.0 - _703;
                        float _3179 = sqrt(1.0 - ((1.0 - (_3172 * _3172)) * (1.0 - (_3171 * _3171))));
                        float _3180 = _3179 * _3179;
                        float _3181 = _3180 * _3180;
                        float _3182 = _3162 + _3127;
                        float _3183 = _3163 + _3128;
                        float _3184 = _3164 + _3129;
                        float _3188 = inversesqrt(dot(vec3(_3182, _3183, _3184), vec3(_3182, _3183, _3184)));
                        float _3192 = dot(vec3(_628, _631, _634), vec3(_3162, _3163, _3164));
                        float _4514 = isnan(0.0) ? _3192 : (isnan(_3192) ? 0.0 : max(_3192, 0.0));
                        float _3195 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
                        float _3196 = dot(vec3(_628, _631, _634), vec3(_3188 * _3182, _3188 * _3183, _3188 * _3184));
                        float _4525 = isnan(0.0) ? _3196 : (isnan(_3196) ? 0.0 : max(_3196, 0.0));
                        float _3199 = isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0));
                        float _3203 = ((_3199 * _3199) * (_3181 + (-1.0))) + 1.0;
                        float _3204 = _3140 * _3180;
                        float _3205 = _3204 * _3204;
                        float _3208 = ((1.0 - _3205) * _3130) + _3205;
                        float _4536 = isnan(0.0) ? _3208 : (isnan(_3208) ? 0.0 : max(_3208, 0.0));
                        float _3209 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
                        float _3210 = 1.0 - _3180;
                        float _3220 = (0.5 / (((_3209 * ((_3195 * _3210) + _3180)) + 9.9999999392252902907785028219223e-09) + (((_3209 * _3210) + _3180) * _3195))) * _3209;
                        float _4547 = isnan(0.0) ? _3220 : (isnan(_3220) ? 0.0 : max(_3220, 0.0));
                        float _3231 = (((_3181 * 3.1415927410125732421875) * (isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0)))) / ((_3203 * _3203) * ((_3147 * 2.1991131305694580078125) + 3.141590118408203125))) * _3136;
                        _2989 = (_3151 * _3099.x) + _3057;
                        _2990 = (_3151 * _3099.y) + _3058;
                        _2991 = (_3151 * _3099.z) + _3059;
                        _2986 = (_3231 * _3116.x) + _3054;
                        _2987 = (_3231 * _3116.y) + _3055;
                        _2988 = (_3231 * _3116.z) + _3056;
                        if (_3061 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3054 = _2986;
                            _3055 = _2987;
                            _3056 = _2988;
                            _3057 = _2989;
                            _3058 = _2990;
                            _3059 = _2991;
                            _3060 = _3061;
                        }
                    }
                    frontier_phi_66_pred = _2991;
                    frontier_phi_66_pred_1 = _2990;
                    frontier_phi_66_pred_2 = _2989;
                    frontier_phi_66_pred_3 = _2988;
                    frontier_phi_66_pred_4 = _2987;
                    frontier_phi_66_pred_5 = _2986;
                }
                _2796 = frontier_phi_66_pred;
                _2794 = frontier_phi_66_pred_1;
                _2792 = frontier_phi_66_pred_2;
                _2790 = frontier_phi_66_pred_3;
                _2788 = frontier_phi_66_pred_4;
                _2786 = frontier_phi_66_pred_5;
                uint _2937 = _2936 + 1u;
                if (_2937 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2930 = _2786;
                    _2931 = _2788;
                    _2932 = _2790;
                    _2933 = _2792;
                    _2934 = _2794;
                    _2935 = _2796;
                    _2936 = _2937;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2785 = _2786;
            _2787 = _2788;
            _2789 = _2790;
            _2791 = _2792;
            _2793 = _2794;
            _2795 = _2796;
        }
        uvec4 _2799 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2800 = _2799.z;
        uint _2802 = (_2800 >> 8u) & 15u;
        float _2898;
        float _2900;
        float _2902;
        float _2904;
        float _2906;
        float _2908;
        if (((4294967295u << _2802) & _2705) == 0u)
        {
            _2898 = _2785;
            _2900 = _2787;
            _2902 = _2789;
            _2904 = _2791;
            _2906 = _2793;
            _2908 = _2795;
        }
        else
        {
            float _2923 = inversesqrt(dot(vec3(_1763, _1764, _1765), vec3(_1763, _1764, _1765)));
            float _2924 = _2923 * _1763;
            float _2925 = _2923 * _1764;
            float _2926 = _2923 * _1765;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2802 < ((_2800 >> 12u) & 15u))
            {
                float _2899;
                float _2901;
                float _2903;
                float _2905;
                float _2907;
                float _2909;
                float _3037 = _2785;
                float _3038 = _2787;
                float _3039 = _2789;
                float _3040 = _2791;
                float _3041 = _2793;
                float _3042 = _2795;
                uint _3043 = _2802;
                uint _3052;
                bool _3053;
                for (;;)
                {
                    _3052 = texelFetch(g_lightClassification, int((((_2699 << 5u) + (_2685 << 9u)) + (_3043 << 2u)) >> 2u)).x;
                    _3053 = _3052 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3053)
                    {
                        frontier_phi_72_pred = _3042;
                        frontier_phi_72_pred_1 = _3041;
                        frontier_phi_72_pred_2 = _3040;
                        frontier_phi_72_pred_3 = _3039;
                        frontier_phi_72_pred_4 = _3038;
                        frontier_phi_72_pred_5 = _3037;
                    }
                    else
                    {
                        float _3236;
                        float _3237;
                        float _3238;
                        float _3239;
                        float _3240;
                        float _3241;
                        float _3530;
                        float _3531;
                        float _3532;
                        float _3533;
                        float _3534;
                        float _3535;
                        float _3249 = _3037;
                        float _3250 = _3038;
                        float _3251 = _3039;
                        float _3252 = _3040;
                        float _3253 = _3041;
                        float _3254 = _3042;
                        uint _3255 = _3052;
                        uint _3256;
                        vec4 _3281;
                        float _3282;
                        vec4 _3297;
                        vec3 _3309;
                        vec4 _3325;
                        vec4 _3340;
                        float _3386;
                        bool _3387;
                        for (;;)
                        {
                            uint _3266 = ((_3043 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3255));
                            _3256 = (_3255 + 4294967295u) & _3255;
                            uint _3268 = _3266 * 40u;
                            _3281 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3268)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3268 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3268 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3268 + 3u)).x));
                            _3282 = _3281.w;
                            uint _3284 = (_3266 * 40u) + 4u;
                            _3297 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3284)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 3u)).x));
                            uint _3299 = (_3266 * 40u) + 8u;
                            _3309 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3299)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 2u)).x));
                            uint _3312 = (_3266 * 40u) + 16u;
                            _3325 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3312)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3312 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3312 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3312 + 3u)).x));
                            uint _3327 = (_3266 * 40u) + 20u;
                            _3340 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3327)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3327 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3327 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3327 + 3u)).x));
                            uint _3342 = (_3266 * 40u) + 24u;
                            vec4 _3355 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3342)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 3u)).x));
                            uint _3361 = (_3266 * 40u) + 28u;
                            vec4 _3374 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3361)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 3u)).x));
                            _3386 = fma(_1765, _3374.z, fma(_1764, _3374.y, _3374.x * _1763)) + _3374.w;
                            _3387 = !((fma(_1765, _3355.z, fma(_1764, _3355.y, _3355.x * _1763)) + _3355.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3387)
                            {
                                float _3414 = _3281.x - _1763;
                                float _3415 = _3281.y - _1764;
                                float _3416 = _3281.z - _1765;
                                float _3417 = dot(vec3(_3414, _3415, _3416), vec3(_3414, _3415, _3416));
                                float _3420 = inversesqrt(_3417);
                                float _3421 = _3420 * _3414;
                                float _3422 = _3420 * _3415;
                                float _3423 = _3420 * _3416;
                                float _3427 = 1.0 - (_3417 / (_3282 * _3282));
                                float _4558 = isnan(0.0) ? _3427 : (isnan(_3427) ? 0.0 : max(_3427, 0.0));
                                float _3428 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
                                float _3432 = sqrt(_3417) * _3297.w;
                                float _3434 = 1.39999997615814208984375 / (_3432 + 1.39999997615814208984375);
                                float _3435 = _3434 * _3434;
                                float _3438 = ((1.0 - _3435) * dot(vec3(_3421, _3422, _3423), vec3(_628, _631, _634))) + _3435;
                                float _3441 = _3432 * _3432;
                                float _3445 = (fma(_1765, _3325.z, fma(_1764, _3325.y, _3325.x * _1763)) + _3325.w) / _3386;
                                float _3446 = (fma(_1765, _3340.z, fma(_1764, _3340.y, _3340.x * _1763)) + _3340.w) / _3386;
                                float _3450 = 1.0 - dot(vec2(_3445, _3446), vec2(_3445, _3446));
                                float _4574 = isnan(0.0) ? _3450 : (isnan(_3450) ? 0.0 : max(_3450, 0.0));
                                float _3451 = isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0));
                                float _3452 = _3451 * (((isnan(0.0) ? _3438 : (isnan(_3438) ? 0.0 : max(_3438, 0.0))) * _3428) / ((_3441 * 0.699999988079071044921875) + 1.0));
                                float _3464 = exp2(log2(1.0 / ((_3441 * 3.5) + 5.0)) * 0.25);
                                float _3465 = 1.0 - _703;
                                float _3472 = sqrt(1.0 - ((1.0 - (_3465 * _3465)) * (1.0 - (_3464 * _3464))));
                                float _3473 = _3472 * _3472;
                                float _3474 = _3473 * _3473;
                                float _3475 = _3421 - _2924;
                                float _3476 = _3422 - _2925;
                                float _3477 = _3423 - _2926;
                                float _3481 = inversesqrt(dot(vec3(_3475, _3476, _3477), vec3(_3475, _3476, _3477)));
                                float _3485 = dot(vec3(_628, _631, _634), vec3((-0.0) - _2924, (-0.0) - _2925, (-0.0) - _2926));
                                float _4585 = isnan(0.0) ? _3485 : (isnan(_3485) ? 0.0 : max(_3485, 0.0));
                                float _3488 = isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0));
                                float _3489 = dot(vec3(_628, _631, _634), vec3(_3481 * _3475, _3481 * _3476, _3481 * _3477));
                                float _4596 = isnan(0.0) ? _3489 : (isnan(_3489) ? 0.0 : max(_3489, 0.0));
                                float _3492 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
                                float _3496 = ((_3492 * _3492) * (_3474 + (-1.0))) + 1.0;
                                float _3497 = _3434 * _3473;
                                float _3498 = _3497 * _3497;
                                float _3504 = ((1.0 - _3498) * dot(vec3(_628, _631, _634), vec3(_3421, _3422, _3423))) + _3498;
                                float _4607 = isnan(0.0) ? _3504 : (isnan(_3504) ? 0.0 : max(_3504, 0.0));
                                float _3505 = isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0));
                                float _3506 = 1.0 - _3473;
                                float _3516 = (0.5 / (((_3505 * ((_3488 * _3506) + _3473)) + 9.9999999392252902907785028219223e-09) + (((_3505 * _3506) + _3473) * _3488))) * _3505;
                                float _4618 = isnan(0.0) ? _3516 : (isnan(_3516) ? 0.0 : max(_3516, 0.0));
                                float _3526 = (_3451 * _3428) * (((_3474 * 3.1415927410125732421875) * (isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0)))) / ((_3496 * _3496) * ((_3441 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3452 * _3297.y;
                                frontier_phi_78_pred_1 = _3452 * _3297.x;
                                frontier_phi_78_pred_2 = _3526 * _3309.z;
                                frontier_phi_78_pred_3 = _3526 * _3309.y;
                                frontier_phi_78_pred_4 = _3526 * _3309.x;
                                frontier_phi_78_pred_5 = _3452 * _3297.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3534 = frontier_phi_78_pred;
                            _3533 = frontier_phi_78_pred_1;
                            _3532 = frontier_phi_78_pred_2;
                            _3531 = frontier_phi_78_pred_3;
                            _3530 = frontier_phi_78_pred_4;
                            _3535 = frontier_phi_78_pred_5;
                            _3239 = _3533 + _3252;
                            _3240 = _3534 + _3253;
                            _3241 = _3535 + _3254;
                            _3236 = _3530 + _3249;
                            _3237 = _3531 + _3250;
                            _3238 = _3532 + _3251;
                            if (_3256 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3249 = _3236;
                                _3250 = _3237;
                                _3251 = _3238;
                                _3252 = _3239;
                                _3253 = _3240;
                                _3254 = _3241;
                                _3255 = _3256;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3241;
                        frontier_phi_72_pred_1 = _3240;
                        frontier_phi_72_pred_2 = _3239;
                        frontier_phi_72_pred_3 = _3238;
                        frontier_phi_72_pred_4 = _3237;
                        frontier_phi_72_pred_5 = _3236;
                    }
                    _2909 = frontier_phi_72_pred;
                    _2907 = frontier_phi_72_pred_1;
                    _2905 = frontier_phi_72_pred_2;
                    _2903 = frontier_phi_72_pred_3;
                    _2901 = frontier_phi_72_pred_4;
                    _2899 = frontier_phi_72_pred_5;
                    uint _3044 = _3043 + 1u;
                    if (_3044 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3037 = _2899;
                        _3038 = _2901;
                        _3039 = _2903;
                        _3040 = _2905;
                        _3041 = _2907;
                        _3042 = _2909;
                        _3043 = _3044;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2909;
                frontier_phi_60_61_ladder_1 = _2907;
                frontier_phi_60_61_ladder_2 = _2903;
                frontier_phi_60_61_ladder_3 = _2901;
                frontier_phi_60_61_ladder_4 = _2899;
                frontier_phi_60_61_ladder_5 = _2905;
            }
            else
            {
                frontier_phi_60_61_ladder = _2795;
                frontier_phi_60_61_ladder_1 = _2793;
                frontier_phi_60_61_ladder_2 = _2789;
                frontier_phi_60_61_ladder_3 = _2787;
                frontier_phi_60_61_ladder_4 = _2785;
                frontier_phi_60_61_ladder_5 = _2791;
            }
            _2898 = frontier_phi_60_61_ladder_4;
            _2900 = frontier_phi_60_61_ladder_3;
            _2902 = frontier_phi_60_61_ladder_2;
            _2904 = frontier_phi_60_61_ladder_5;
            _2906 = frontier_phi_60_61_ladder_1;
            _2908 = frontier_phi_60_61_ladder;
        }
        float _2913 = isnan(1.0) ? _687 : (isnan(_687) ? 1.0 : min(_687, 1.0));
        _2718 = (_2913 * _2904) + _2230;
        _2720 = (_2913 * _2906) + _2232;
        _2722 = (_2913 * _2908) + _2234;
        _2724 = ((_2898 * _671) * _2913) + _2568;
        _2726 = ((_2900 * _673) * _2913) + _2570;
        _2728 = ((_2902 * _674) * _2913) + _2572;
    }
    else
    {
        _2718 = _2230;
        _2720 = _2232;
        _2722 = _2234;
        _2724 = _2568;
        _2726 = _2570;
        _2728 = _2572;
    }
    float _4634 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
    float _4645 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _4656 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    uint _2748 = _230 + 6u;
    float _2756 = _606 / cbSceneParam._m0[86u].x;
    float _2757 = _607 / cbSceneParam._m0[86u].y;
    vec4 _2771 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2756, _2757, (log2((isnan(cbSceneParam._m0[77u].w) ? _540 : (isnan(_540) ? cbSceneParam._m0[77u].w : min(_540, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2773 = _2771.x;
    float _2774 = _2771.y;
    float _2775 = _2771.z;
    float _2776 = _2771.w;
    float _2848;
    float _2850;
    float _2852;
    float _2854;
    if (_540 > cbSceneParam._m0[78u].w)
    {
        float _2810 = isnan(_540) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _540 : min(cbSceneParam._m0[80u].w, _540));
        float _2811 = _2810 / _540;
        float _2822 = _2811 * _591;
        float _2823 = _592 * _2811;
        float _2824 = (-0.0) - _2823;
        float _2826 = _2811 * _593;
        float _2828 = (cbSceneParam._m0[77u].w * _2824) / _2810;
        float _2829 = _2828 + cbSceneParam._m0[79u].w;
        float _2830 = cbSceneParam._m0[79u].w - _2823;
        float _2836 = sqrt(((_2822 * _2822) + (_2823 * _2823)) + (_2826 * _2826));
        float _2839 = (1.0 - (cbSceneParam._m0[77u].w / _2810)) * _2836;
        float _2844 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2846 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2999;
        if (abs((_2824 - _2828) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2999 = ((((_2829 > 0.0) ? exp2(_2844 * _2829) : (2.0 - exp2(_2846 * _2829))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2839;
        }
        else
        {
            float _2959 = 1.0 / cbSceneParam._m0[80u].x;
            float _2960 = isnan(_2830) ? _2829 : (isnan(_2829) ? _2830 : max(_2829, _2830));
            float _2961 = isnan(_2830) ? _2829 : (isnan(_2829) ? _2830 : min(_2829, _2830));
            float _2970 = isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : min(_2960, 0.0));
            float _2971 = isnan(0.0) ? _2961 : (isnan(_2961) ? 0.0 : min(_2961, 0.0));
            _2999 = ((abs(_2836 / _2824) * cbSceneParam._m0[80u].y) * ((((_2970 - _2971) * 2.0) - ((exp2(_2844 * (isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : max(_2960, 0.0)))) - exp2(_2844 * (isnan(0.0) ? _2961 : (isnan(_2961) ? 0.0 : max(_2961, 0.0))))) * _2959)) - ((exp2(_2846 * _2970) - exp2(_2846 * _2971)) * _2959))) + (_2839 * cbSceneParam._m0[80u].z);
        }
        vec4 _3001 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2756, _2757, 1.0), 0.0);
        float _3010 = exp2((_2999 * (-1.44269502162933349609375)) * (1.0 - _3001.w));
        float _3011 = log2(_3010);
        float _3027 = log2(_2776);
        _2848 = (exp2(_3027 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3011 * cbSceneParam._m0[78u].x)) * _3001.x) / cbSceneParam._m0[78u].x)) + _2773;
        _2850 = (exp2(_3027 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3011 * cbSceneParam._m0[78u].y)) * _3001.y) / cbSceneParam._m0[78u].y)) + _2774;
        _2852 = (exp2(_3027 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3011 * cbSceneParam._m0[78u].z)) * _3001.z) / cbSceneParam._m0[78u].z)) + _2775;
        _2854 = _3010 * _2776;
    }
    else
    {
        _2848 = _2773;
        _2850 = _2774;
        _2852 = _2775;
        _2854 = _2776;
    }
    float _2866 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2867 = _2866 == 3.0;
    float _2868 = log2(_2854);
    float _2875 = exp2(_2868 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0))) * (_2718 + ((isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0))) * _687))) + ((_2724 + ((isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0))) * _1495)) * cbPerFrame._m0[3u].x));
    float _2876 = exp2(_2868 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0))) * (_2720 + ((isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0))) * _687))) + ((_2726 + ((isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0))) * _1495)) * cbPerFrame._m0[3u].x));
    float _2877 = exp2(_2868 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0))) * (_2722 + ((isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0))) * _687))) + ((_2728 + ((isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0))) * _1495)) * cbPerFrame._m0[3u].x));
    float _2886 = (_2866 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2886 * (_2867 ? _2875 : (_2875 + (cbSceneParam._m0[72u].w * _2848)));
    SV_Target.y = _2886 * (_2867 ? _2876 : (_2876 + (cbSceneParam._m0[72u].w * _2850)));
    SV_Target.z = _2886 * (_2867 ? _2877 : (_2877 + (cbSceneParam._m0[72u].w * _2852)));
    SV_Target.w = cbInstanceData._m0[_2748].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2748].w;
}


