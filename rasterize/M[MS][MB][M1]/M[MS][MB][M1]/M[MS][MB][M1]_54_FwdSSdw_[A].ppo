#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1126;
float _3531;
float _3532;
float _3533;
float _3534;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _206 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _207 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _208 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _214 = inversesqrt(dot(vec3(_206, _207, _208), vec3(_206, _207, _208)));
    float _215 = _214 * _206;
    float _216 = _214 * _207;
    float _217 = _214 * _208;
    float _221 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _222 = _221 * NORMAL.x;
    float _223 = _221 * NORMAL.y;
    float _224 = _221 * NORMAL.z;
    float _228 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _229 = _228 * TANGENT.x;
    float _230 = _228 * TANGENT.y;
    float _231 = _228 * TANGENT.z;
    uint _234 = uint(roundEven(NORMAL.w)) * 13u;
    uint _240 = _234 + 1u;
    uint _244 = _234 + 2u;
    float _253 = sqrt(((cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x) + (cbInstanceData._m0[_234].x * cbInstanceData._m0[_234].x)) + (cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x));
    float _254 = _253 * TEXCOORD.z;
    float _255 = _253 * TEXCOORD.w;
    vec4 _274 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _280 = _274.x * cbMtdParam._m0[9u].x;
    float _281 = _274.y * cbMtdParam._m0[9u].y;
    float _282 = _274.z * cbMtdParam._m0[9u].z;
    vec4 _301 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _254) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _255) + cbTextureTilingScale._m0[14u].w));
    vec4 _321 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _254) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _255) + cbTextureTilingScale._m0[20u].w));
    vec4 _347 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _351 = _347.z;
    float _355 = (_347.x * 2.0) + (-1.0);
    float _356 = (_347.y * 2.0) + (-1.0);
    float _357 = dot(vec2(_355, _356), vec2(_355, _356));
    float _3543 = isnan(0.0) ? _357 : (isnan(_357) ? 0.0 : max(_357, 0.0));
    float _363 = sqrt(1.0 - (isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0))));
    float _368 = _355 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_321.x * 2.0) + (-1.0)));
    float _369 = _356 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_321.y * 2.0) + (-1.0)));
    float _372 = fma(_363, _222, fma(_369, _229, _368 * _215));
    float _375 = fma(_363, _223, fma(_369, _230, _368 * _216));
    float _378 = fma(_363, _224, fma(_369, _231, _368 * _217));
    float _382 = inversesqrt(dot(vec3(_372, _375, _378), vec3(_372, _375, _378)));
    vec4 _418 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _254) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _255) + cbTextureTilingScale._m0[11u].w));
    float _420 = _418.x;
    float _421 = 1.0 - _420;
    float _428 = ((_420 - _421) * cbMtdParam._m0[24u].z) + _421;
    float _430 = (cbMtdParam._m0[19u].x + dot(vec4(_382 * _372, _382 * _375, _382 * _378, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_428 * cbMtdParam._m0[21u].z);
    float _3554 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _431 = isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0));
    float _446 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_428 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3565 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _447 = isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0));
    float _451 = ((_431 * ((_301.x * cbMtdParam._m0[18u].x) - _280)) * _447) + _280;
    float _452 = ((_431 * ((_301.y * cbMtdParam._m0[18u].y) - _281)) * _447) + _281;
    float _453 = ((_431 * ((_301.z * cbMtdParam._m0[18u].z) - _282)) * _447) + _282;
    vec4 _466 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _468 = _466.x;
    float _471 = _468 - ((_468 * _431) * _447);
    float _476 = (((_321.z - _351) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _351;
    vec4 _489 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _254) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _255) + cbTextureTilingScale._m0[15u].w));
    float _496 = (_489.x * 2.0) + (-1.0);
    float _497 = (_489.y * 2.0) + (-1.0);
    float _498 = dot(vec2(_496, _497), vec2(_496, _497));
    float _3576 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _507 = (((_489.z - _476) * _431) * _447) + _476;
    float _522 = (((cbMtdParam._m0[21u].x * _368) + ((_496 - _368) * _431)) * _447) + _368;
    float _523 = (((cbMtdParam._m0[21u].x * _369) + ((_497 - _369) * _431)) * _447) + _369;
    float _524 = (((sqrt(1.0 - (isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0)))) - _363) * _431) * _447) + _363;
    float _529 = cbMtdParam._m0[22u].x + _347.w;
    float _532 = fma(_524, _222, fma(_523, _229, _522 * _215));
    float _535 = fma(_524, _223, fma(_523, _230, _522 * _216));
    float _538 = fma(_524, _224, fma(_523, _231, _522 * _217));
    float _542 = inversesqrt(dot(vec3(_532, _535, _538), vec3(_532, _535, _538)));
    float _543 = _542 * _532;
    float _544 = _542 * _535;
    float _545 = _542 * _538;
    float _3587 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _546 = isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0));
    float _3598 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _3609 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _3620 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _3631 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _3642 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _551 = isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0));
    float _565 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _606 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _616 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _606);
    float _617 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _606);
    float _618 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _606);
    float _622 = inversesqrt(dot(vec3(_616, _617, _618), vec3(_616, _617, _618)));
    float _623 = _616 * _622;
    float _624 = _617 * _622;
    float _625 = _618 * _622;
    vec4 _630 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _632 = _630.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _807 = sqrt(((_616 * _616) + (_617 * _617)) + (_618 * _618));
        float _813 = (cbMatDynParam._m0[5u].x * _807) + cbMatDynParam._m0[5u].y;
        float _3653 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
        float _814 = isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0));
        float _818 = (cbMatDynParam._m0[5u].z * _807) + cbMatDynParam._m0[5u].w;
        float _3664 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0))) - _814)) + _814) < ((_632 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _644 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _645 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _665 = fma(_545, cbSceneParam._m0[5u].z, fma(_544, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _543));
    float _668 = fma(_545, cbSceneParam._m0[6u].z, fma(_544, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _543));
    float _671 = fma(_545, cbSceneParam._m0[7u].z, fma(_544, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _543));
    uint _684 = _234 + 9u;
    uint _685 = _684 + uint(cbMatDynParam._m0[0u].w);
    float _691 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0)))) * cbInstanceData._m0[_685].x;
    float _692 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0)))) * cbInstanceData._m0[_685].y;
    float _693 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0)))) * cbInstanceData._m0[_685].z;
    float _3675 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _694 = isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0));
    float _3686 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
    float _695 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
    float _3697 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _696 = isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0));
    float _697 = 1.0 - _551;
    float _698 = _694 * _697;
    float _699 = _695 * _697;
    float _700 = _696 * _697;
    float _705 = (_694 + (-0.039999999105930328369140625)) * _551;
    float _706 = (_695 + (-0.039999999105930328369140625)) * _551;
    float _707 = (_696 + (-0.039999999105930328369140625)) * _551;
    float _708 = _705 + 0.039999999105930328369140625;
    float _710 = _706 + 0.039999999105930328369140625;
    float _711 = _707 + 0.039999999105930328369140625;
    vec4 _720 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _644, cbSceneParam._m0[86u].y * _645));
    float _724 = ((isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0))) * TEXCOORD_5.w) * _720.x;
    float _725 = dot(vec3(_543, _544, _545), vec3(_623, _624, _625));
    float _728 = _725 * 2.0;
    float _732 = (_728 * _543) - _623;
    float _733 = (_728 * _544) - _624;
    float _734 = (_728 * _545) - _625;
    float _738 = abs(dot(vec3(_623, _624, _625), vec3(_543, _544, _545)));
    float _3708 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
    float _740 = sqrt(_546);
    float _753 = exp2((_740 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_740 * 3.0));
    float _759 = (1.0 - _753) * ((_740 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _760 = _753 * _740;
    float _788 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _792 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _796 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1125;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    float _1133;
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _850 = fma(_796, cbModelParam._m0[26u].z, fma(_792, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _788));
        float _854 = fma(_796, cbModelParam._m0[27u].z, fma(_792, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _788));
        float _858 = fma(_796, cbModelParam._m0[28u].z, fma(_792, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _788));
        float _883 = _788 + _543;
        float _884 = _792 + _544;
        float _885 = _796 + _545;
        float _895 = fma(_885, cbModelParam._m0[26u].z, fma(_884, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _883)) - _850;
        float _896 = fma(_885, cbModelParam._m0[27u].z, fma(_884, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _883)) - _854;
        float _897 = fma(_885, cbModelParam._m0[28u].z, fma(_884, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _883)) - _858;
        float _901 = inversesqrt(dot(vec3(_895, _896, _897), vec3(_895, _896, _897)));
        float _914 = ((_901 * _895) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_850 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _915 = ((_901 * _896) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_854 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _916 = ((_901 * _897) / cbModelParam._m0[34u].z) + ((((((_858 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _919 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_914, _915, _916), 0.0);
        vec4 _926 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_914, _915, _916), 0.0);
        vec4 _933 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_914, _915, _916), 0.0);
        vec4 _940 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_914, _915, _916), 0.0);
        float _953 = exp2((_919.w + (-0.5)) * 20.0) * 2.0;
        float _954 = _953 * (_919.x + (-0.5));
        float _955 = _953 * (_919.y + (-0.5));
        float _956 = _953 * (_919.z + (-0.5));
        float _963 = exp2((_926.w + (-0.5)) * 20.0) * 2.0;
        float _964 = _963 * (_926.x + (-0.5));
        float _965 = _963 * (_926.y + (-0.5));
        float _966 = _963 * (_926.z + (-0.5));
        float _973 = exp2((_933.w + (-0.5)) * 20.0) * 2.0;
        float _974 = _973 * (_933.x + (-0.5));
        float _975 = _973 * (_933.y + (-0.5));
        float _976 = _973 * (_933.z + (-0.5));
        float _983 = exp2((_940.w + (-0.5)) * 20.0) * 2.0;
        float _984 = _983 * (_940.x + (-0.5));
        float _985 = _983 * (_940.y + (-0.5));
        float _986 = _983 * (_940.z + (-0.5));
        float _987 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _988 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        float _989 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _990 = _954 * 0.5;
        float _991 = _964 * 0.5;
        float _992 = _974 * 0.5;
        float _993 = dot(vec3(_990, _991, _992), vec3(_990, _991, _992));
        float _998 = (_993 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_993);
        float _1007 = (dot(vec3(_543, _544, _545), vec3(_998 * _990, _998 * _991, _998 * _992)) + 1.0) * 0.5;
        float _3734 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        float _1017 = sqrt(((_991 * _991) + (_990 * _990)) + (_992 * _992)) / (_987 + 9.9999997473787516355514526367188e-06);
        float _3745 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1018 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
        float _1019 = _1018 * 2.0;
        float _1023 = (1.0 - _1018) / (_1018 + 1.0);
        float _3756 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1024 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
        float _1033 = ((((1.0 - _1024) * (_1019 + 2.0)) * exp2(log2(isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0))) * (_1019 + 1.0))) + _1024) * _987;
        float _1034 = _955 * 0.5;
        float _1035 = _965 * 0.5;
        float _1036 = _975 * 0.5;
        float _1037 = dot(vec3(_1034, _1035, _1036), vec3(_1034, _1035, _1036));
        float _1042 = (_1037 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1037);
        float _1050 = (dot(vec3(_543, _544, _545), vec3(_1042 * _1034, _1042 * _1035, _1042 * _1036)) + 1.0) * 0.5;
        float _3767 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1059 = sqrt(((_1035 * _1035) + (_1034 * _1034)) + (_1036 * _1036)) / (_988 + 9.9999997473787516355514526367188e-06);
        float _3778 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1060 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
        float _1061 = _1060 * 2.0;
        float _1065 = (1.0 - _1060) / (_1060 + 1.0);
        float _3789 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1066 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
        float _1075 = ((((1.0 - _1066) * (_1061 + 2.0)) * exp2(log2(isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0))) * (_1061 + 1.0))) + _1066) * _988;
        float _1076 = _956 * 0.5;
        float _1077 = _966 * 0.5;
        float _1078 = _976 * 0.5;
        float _1079 = dot(vec3(_1076, _1077, _1078), vec3(_1076, _1077, _1078));
        float _1084 = (_1079 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1079);
        float _1092 = (dot(vec3(_543, _544, _545), vec3(_1084 * _1076, _1084 * _1077, _1084 * _1078)) + 1.0) * 0.5;
        float _3800 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1101 = sqrt(((_1077 * _1077) + (_1076 * _1076)) + (_1078 * _1078)) / (_989 + 9.9999997473787516355514526367188e-06);
        float _3811 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1102 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
        float _1103 = _1102 * 2.0;
        float _1107 = (1.0 - _1102) / (_1102 + 1.0);
        float _3822 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1108 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
        float _1117 = ((((1.0 - _1108) * (_1103 + 2.0)) * exp2(log2(isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0))) * (_1103 + 1.0))) + _1108) * _989;
        _1125 = _956;
        _1127 = _955;
        _1128 = _954;
        _1129 = _966;
        _1130 = _965;
        _1131 = _964;
        _1132 = _976;
        _1133 = _975;
        _1134 = _974;
        _1135 = _989;
        _1136 = _988;
        _1137 = _987;
        _1138 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0)));
        _1139 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0)));
        _1140 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0)));
    }
    else
    {
        _1125 = _1126;
        _1127 = _1126;
        _1128 = _1126;
        _1129 = _1126;
        _1130 = _1126;
        _1131 = _1126;
        _1132 = _1126;
        _1133 = _1126;
        _1134 = _1126;
        _1135 = _1126;
        _1136 = _1126;
        _1137 = _1126;
        _1138 = 0.0;
        _1139 = 0.0;
        _1140 = 0.0;
    }
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1168 = fma(_796, cbModelParam._m0[30u].z, fma(_792, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _788));
        float _1172 = fma(_796, cbModelParam._m0[31u].z, fma(_792, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _788));
        float _1176 = fma(_796, cbModelParam._m0[32u].z, fma(_792, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _788));
        float _1199 = _788 + _543;
        float _1200 = _792 + _544;
        float _1201 = _796 + _545;
        float _1211 = fma(_1201, cbModelParam._m0[30u].z, fma(_1200, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1199)) - _1168;
        float _1212 = fma(_1201, cbModelParam._m0[31u].z, fma(_1200, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1199)) - _1172;
        float _1213 = fma(_1201, cbModelParam._m0[32u].z, fma(_1200, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1199)) - _1176;
        float _1217 = inversesqrt(dot(vec3(_1211, _1212, _1213), vec3(_1211, _1212, _1213)));
        float _1230 = ((_1217 * _1211) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1168 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1231 = ((_1217 * _1212) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1172 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1232 = ((_1217 * _1213) / cbModelParam._m0[35u].z) + ((((((_1176 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1234 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1230, _1231, _1232), 0.0);
        vec4 _1241 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1230, _1231, _1232), 0.0);
        vec4 _1248 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1230, _1231, _1232), 0.0);
        vec4 _1255 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1230, _1231, _1232), 0.0);
        float _1267 = exp2((_1234.w + (-0.5)) * 20.0) * 2.0;
        float _1268 = _1267 * (_1234.x + (-0.5));
        float _1269 = _1267 * (_1234.y + (-0.5));
        float _1270 = _1267 * (_1234.z + (-0.5));
        float _1277 = exp2((_1241.w + (-0.5)) * 20.0) * 2.0;
        float _1278 = _1277 * (_1241.x + (-0.5));
        float _1279 = _1277 * (_1241.y + (-0.5));
        float _1280 = _1277 * (_1241.z + (-0.5));
        float _1287 = exp2((_1248.w + (-0.5)) * 20.0) * 2.0;
        float _1288 = _1287 * (_1248.x + (-0.5));
        float _1289 = _1287 * (_1248.y + (-0.5));
        float _1290 = _1287 * (_1248.z + (-0.5));
        float _1297 = exp2((_1255.w + (-0.5)) * 20.0) * 2.0;
        float _1298 = _1297 * (_1255.x + (-0.5));
        float _1299 = _1297 * (_1255.y + (-0.5));
        float _1300 = _1297 * (_1255.z + (-0.5));
        float _1301 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1302 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1303 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1304 = _1268 * 0.5;
        float _1305 = _1278 * 0.5;
        float _1306 = _1288 * 0.5;
        float _1307 = dot(vec3(_1304, _1305, _1306), vec3(_1304, _1305, _1306));
        float _1312 = (_1307 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1307);
        float _1320 = (dot(vec3(_543, _544, _545), vec3(_1312 * _1304, _1312 * _1305, _1312 * _1306)) + 1.0) * 0.5;
        float _3863 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1329 = sqrt(((_1305 * _1305) + (_1304 * _1304)) + (_1306 * _1306)) / (_1301 + 9.9999997473787516355514526367188e-06);
        float _3874 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1330 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
        float _1331 = _1330 * 2.0;
        float _1335 = (1.0 - _1330) / (_1330 + 1.0);
        float _3885 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1336 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
        float _1345 = ((((1.0 - _1336) * (_1331 + 2.0)) * exp2(log2(isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0))) * (_1331 + 1.0))) + _1336) * _1301;
        float _1346 = _1269 * 0.5;
        float _1347 = _1279 * 0.5;
        float _1348 = _1289 * 0.5;
        float _1349 = dot(vec3(_1346, _1347, _1348), vec3(_1346, _1347, _1348));
        float _1354 = (_1349 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1349);
        float _1362 = (dot(vec3(_543, _544, _545), vec3(_1354 * _1346, _1354 * _1347, _1354 * _1348)) + 1.0) * 0.5;
        float _3896 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1371 = sqrt(((_1347 * _1347) + (_1346 * _1346)) + (_1348 * _1348)) / (_1302 + 9.9999997473787516355514526367188e-06);
        float _3907 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1372 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
        float _1373 = _1372 * 2.0;
        float _1377 = (1.0 - _1372) / (_1372 + 1.0);
        float _3918 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1378 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
        float _1387 = ((((1.0 - _1378) * (_1373 + 2.0)) * exp2(log2(isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0))) * (_1373 + 1.0))) + _1378) * _1302;
        float _1388 = _1270 * 0.5;
        float _1389 = _1280 * 0.5;
        float _1390 = _1290 * 0.5;
        float _1391 = dot(vec3(_1388, _1389, _1390), vec3(_1388, _1389, _1390));
        float _1396 = (_1391 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1391);
        float _1404 = (dot(vec3(_543, _544, _545), vec3(_1396 * _1388, _1396 * _1389, _1396 * _1390)) + 1.0) * 0.5;
        float _3929 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1413 = sqrt(((_1389 * _1389) + (_1388 * _1388)) + (_1390 * _1390)) / (_1303 + 9.9999997473787516355514526367188e-06);
        float _3940 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1414 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
        float _1415 = _1414 * 2.0;
        float _1419 = (1.0 - _1414) / (_1414 + 1.0);
        float _3951 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1420 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
        float _1429 = ((((1.0 - _1420) * (_1415 + 2.0)) * exp2(log2(isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0))) * (_1415 + 1.0))) + _1420) * _1303;
        _1437 = _1270;
        _1438 = _1269;
        _1439 = _1268;
        _1440 = _1280;
        _1441 = _1279;
        _1442 = _1278;
        _1443 = _1290;
        _1444 = _1289;
        _1445 = _1288;
        _1446 = _1303;
        _1447 = _1302;
        _1448 = _1301;
        _1449 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0)));
        _1450 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0)));
        _1451 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0)));
    }
    else
    {
        _1437 = _1126;
        _1438 = _1126;
        _1439 = _1126;
        _1440 = _1126;
        _1441 = _1126;
        _1442 = _1126;
        _1443 = _1126;
        _1444 = _1126;
        _1445 = _1126;
        _1446 = _1126;
        _1447 = _1126;
        _1448 = _1126;
        _1449 = 0.0;
        _1450 = 0.0;
        _1451 = 0.0;
    }
    float _1461 = (cbModelParam._m0[1u].x * (_1449 - _1138)) + _1138;
    float _1462 = (cbModelParam._m0[1u].x * (_1450 - _1139)) + _1139;
    float _1463 = (cbModelParam._m0[1u].x * (_1451 - _1140)) + _1140;
    float _1484 = fma(_1463, cbSceneParam._m0[89u].z, fma(_1462, cbSceneParam._m0[89u].y, _1461 * cbSceneParam._m0[89u].x));
    float _1487 = fma(_1463, cbSceneParam._m0[90u].z, fma(_1462, cbSceneParam._m0[90u].y, _1461 * cbSceneParam._m0[90u].x));
    float _1490 = fma(_1463, cbSceneParam._m0[91u].z, fma(_1462, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1461));
    float _1505 = _732 * 0.5;
    float _1506 = _733 * 0.5;
    float _1507 = _734 * 0.5;
    float _1508 = dot(vec4(_1505, _1506, _1507, 1.0), vec4(_1439, _1442, _1445, _1448));
    float _1511 = dot(vec4(_1505, _1506, _1507, 1.0), vec4(_1438, _1441, _1444, _1447));
    float _1514 = dot(vec4(_1505, _1506, _1507, 1.0), vec4(_1437, _1440, _1443, _1446));
    float _1548;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1521 = dot(vec4(_1505, _1506, _1507, 1.0), vec4(_1125, _1129, _1132, _1135));
        float _1525 = dot(vec4(_1505, _1506, _1507, 1.0), vec4(_1127, _1130, _1133, _1136));
        float _1529 = dot(vec4(_1505, _1506, _1507, 1.0), vec4(_1128, _1131, _1134, _1137));
        float _1536 = dot(vec4(cbModelParam._m0[39u]), vec4(_1505, _1506, _1507, 1.0));
        _1548 = dot(vec3(isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0)), isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0)), isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1536) ? 0.0 : (isnan(0.0) ? _1536 : max(0.0, _1536))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1548 = 1.0;
    }
    float _1559;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1550 = dot(vec4(cbModelParam._m0[40u]), vec4(_1505, _1506, _1507, 1.0));
        _1559 = dot(vec3(isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0)), isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0)), isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1550) ? 0.0 : (isnan(0.0) ? _1550 : max(0.0, _1550))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1559 = 1.0;
    }
    float _1563 = (_1559 * cbModelParam._m0[1u].x) + (_1548 * (1.0 - cbModelParam._m0[1u].x));
    float _1573 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _546);
    float _1574 = isnan(_1573) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1573 : min(cbModelParam._m0[25u].z, _1573));
    float _1654;
    float _1656;
    float _1658;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1621 = fma(_796, cbModelParam._m0[13u].z, fma(_792, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _788)) + cbModelParam._m0[13u].w;
        float _1625 = fma(_796, cbModelParam._m0[14u].z, fma(_792, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _788)) + cbModelParam._m0[14u].w;
        float _1629 = fma(_796, cbModelParam._m0[15u].z, fma(_792, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _788)) + cbModelParam._m0[15u].w;
        float _1632 = fma(_734, cbModelParam._m0[13u].z, fma(_733, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _732));
        float _1635 = fma(_734, cbModelParam._m0[14u].z, fma(_733, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _732));
        float _1638 = fma(_734, cbModelParam._m0[15u].z, fma(_733, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _732));
        float _1666;
        if (_1632 > 0.0)
        {
            _1666 = abs((1.0 - _1621) / _1632);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1632 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1621 + 1.0) / _1632);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1666 = frontier_phi_17_15_ladder;
        }
        float _1890;
        if (_1635 > 0.0)
        {
            _1890 = abs((1.0 - _1625) / _1635);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1635 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1625 + 1.0) / _1635);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1890 = frontier_phi_26_22_ladder;
        }
        float _2147;
        if (_1638 > 0.0)
        {
            _2147 = abs((1.0 - _1629) / _1638);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1638 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1629 + 1.0) / _1638);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2147 = frontier_phi_38_33_ladder;
        }
        float _2149 = isnan(_1890) ? _1666 : (isnan(_1666) ? _1890 : min(_1666, _1890));
        float _2150 = isnan(_2147) ? _2149 : (isnan(_2149) ? _2147 : min(_2149, _2147));
        float _2154 = (_2150 * _1632) + _1621;
        float _2155 = (_2150 * _1635) + _1625;
        float _2156 = (_2150 * _1638) + _1629;
        float _2157 = _2150 * 9.9999997473787516355514526367188e-05;
        float _2159 = (-1.0) - _2157;
        float _2161 = _2157 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2156 > _2161) || ((_2156 < _2159) || ((_2155 > _2161) || ((_2155 < _2159) || ((_2154 < _2159) || (_2154 > _2161))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2284 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2156, cbModelParam._m0[9u].z, fma(_2155, cbModelParam._m0[9u].y, _2154 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2156, cbModelParam._m0[10u].z, fma(_2155, cbModelParam._m0[10u].y, _2154 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2156, cbModelParam._m0[11u].z, fma(_2155, cbModelParam._m0[11u].y, _2154 * cbModelParam._m0[11u].x))), _1574);
            frontier_phi_16_38_ladder = _2284.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2284.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2284.x * cbModelParam._m0[1u].y;
        }
        _1654 = frontier_phi_16_38_ladder_2;
        _1656 = frontier_phi_16_38_ladder_1;
        _1658 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1642 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_732, _733, _734), _1574);
        _1654 = _1642.x * cbModelParam._m0[1u].y;
        _1656 = _1642.y * cbModelParam._m0[1u].y;
        _1658 = _1642.z * cbModelParam._m0[1u].y;
    }
    float _1662 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _546);
    float _1663 = isnan(_1662) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1662 : min(cbModelParam._m0[25u].w, _1662));
    float _1752;
    float _1754;
    float _1756;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1716 = fma(_796, cbModelParam._m0[21u].z, fma(_792, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _788)) + cbModelParam._m0[21u].w;
        float _1720 = fma(_796, cbModelParam._m0[22u].z, fma(_792, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _788)) + cbModelParam._m0[22u].w;
        float _1724 = fma(_796, cbModelParam._m0[23u].z, fma(_792, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _788)) + cbModelParam._m0[23u].w;
        float _1727 = fma(_734, cbModelParam._m0[21u].z, fma(_733, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _732));
        float _1730 = fma(_734, cbModelParam._m0[22u].z, fma(_733, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _732));
        float _1733 = fma(_734, cbModelParam._m0[23u].z, fma(_733, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _732));
        float _1895;
        if (_1727 > 0.0)
        {
            _1895 = abs((1.0 - _1716) / _1727);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1727 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1716 + 1.0) / _1727);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1895 = frontier_phi_28_24_ladder;
        }
        float _2174;
        if (_1730 > 0.0)
        {
            _2174 = abs((1.0 - _1720) / _1730);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1730 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1720 + 1.0) / _1730);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2174 = frontier_phi_40_35_ladder;
        }
        float _2387;
        if (_1733 > 0.0)
        {
            _2387 = abs((1.0 - _1724) / _1733);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1733 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1724 + 1.0) / _1733);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2387 = frontier_phi_49_46_ladder;
        }
        float _2389 = isnan(_2174) ? _1895 : (isnan(_1895) ? _2174 : min(_1895, _2174));
        float _2390 = isnan(_2387) ? _2389 : (isnan(_2389) ? _2387 : min(_2389, _2387));
        float _2394 = (_2390 * _1727) + _1716;
        float _2395 = (_2390 * _1730) + _1720;
        float _2396 = (_2390 * _1733) + _1724;
        float _2397 = _2390 * 9.9999997473787516355514526367188e-05;
        float _2398 = (-1.0) - _2397;
        float _2400 = _2397 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2396 > _2400) || ((_2396 < _2398) || ((_2395 > _2400) || ((_2395 < _2398) || ((_2394 < _2398) || (_2394 > _2400))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2595 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2396, cbModelParam._m0[17u].z, fma(_2395, cbModelParam._m0[17u].y, _2394 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2396, cbModelParam._m0[18u].z, fma(_2395, cbModelParam._m0[18u].y, _2394 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2396, cbModelParam._m0[19u].z, fma(_2395, cbModelParam._m0[19u].y, _2394 * cbModelParam._m0[19u].x))), _1663);
            frontier_phi_25_49_ladder = _2595.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2595.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2595.x * cbModelParam._m0[1u].z;
        }
        _1752 = frontier_phi_25_49_ladder_2;
        _1754 = frontier_phi_25_49_ladder_1;
        _1756 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1736 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_732, _733, _734), _1663);
        _1752 = _1736.x * cbModelParam._m0[1u].z;
        _1754 = _1736.y * cbModelParam._m0[1u].z;
        _1756 = _1736.z * cbModelParam._m0[1u].z;
    }
    float _1769 = (((_759 * _708) + _760) * _724) * ((cbModelParam._m0[1u].w * (_1752 - _1654)) + _1654);
    float _1771 = (((_759 * _710) + _760) * _724) * ((cbModelParam._m0[1u].w * (_1754 - _1656)) + _1656);
    float _1773 = (((_759 * _711) + _760) * _724) * ((cbModelParam._m0[1u].w * (_1756 - _1658)) + _1658);
    float _1776 = fma(_1773, cbSceneParam._m0[89u].z, fma(_1771, cbSceneParam._m0[89u].y, _1769 * cbSceneParam._m0[89u].x));
    float _1779 = fma(_1773, cbSceneParam._m0[90u].z, fma(_1771, cbSceneParam._m0[90u].y, _1769 * cbSceneParam._m0[90u].x));
    float _1782 = fma(_1773, cbSceneParam._m0[91u].z, fma(_1771, cbSceneParam._m0[91u].y, _1769 * cbSceneParam._m0[91u].x));
    vec4 _1790 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_644, _645));
    float _1792 = _1790.w;
    float _1804 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1792);
    float _1805 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1792);
    float _1806 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1792);
    uvec4 _1810 = floatBitsToUint(cbInstanceData._m0[_234 + 5u]);
    uint _1812 = _1810.x * 14u;
    uint _1813 = _1812 + 13u;
    float _1820 = _724 + (-1.0);
    float _1825 = (cbLight._m0[_1813].x * _1820) + 1.0;
    float _1826 = (cbLight._m0[_1813].y * _1820) + 1.0;
    float _1827 = (cbLight._m0[_1813].z * _1820) + 1.0;
    float _1828 = (cbLight._m0[_1813].w * _1820) + 1.0;
    uint _1829 = _1812 + 5u;
    float _1835 = isnan(1.0) ? _1826 : (isnan(_1826) ? 1.0 : min(_1826, 1.0));
    uint _1839 = _1812 + 4u;
    float _1849 = isnan(1.0) ? _1825 : (isnan(_1825) ? 1.0 : min(_1825, 1.0));
    uint _1853 = _1812 | 1u;
    float _1864 = dot(vec3(cbLight._m0[_1812].xyz), vec3(_543, _544, _545));
    float _1867 = dot(vec3(cbLight._m0[_1853].xyz), vec3(_543, _544, _545));
    float _4087 = isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0));
    float _4098 = isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0));
    float _1872 = (isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0))) * 0.3183098733425140380859375;
    float _1874 = (isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0))) * 0.3183098733425140380859375;
    float _1881 = ((cbLight._m0[_1829].x * _1835) * _1874) + (((cbLight._m0[_1839].x * _1804) * _1849) * _1872);
    float _1882 = ((_1835 * cbLight._m0[_1829].y) * _1874) + (((cbLight._m0[_1839].y * _1805) * _1849) * _1872);
    float _1883 = ((_1835 * cbLight._m0[_1829].z) * _1874) + (((cbLight._m0[_1839].z * _1806) * _1849) * _1872);
    uvec4 _1887 = floatBitsToUint(cbLight._m0[_1812 + 12u]);
    bool _1889 = _1887.x == 0u;
    float _1900;
    float _1902;
    float _1904;
    if (_1889)
    {
        _1900 = _1881;
        _1902 = _1882;
        _1904 = _1883;
    }
    else
    {
        uint _1908 = _1812 + 6u;
        float _1924 = (dot(vec3(cbLight._m0[_1812 + 2u].xyz), vec3(_543, _544, _545)) * 0.5) + 0.5;
        float _1925 = _1924 * _1924;
        float _4109 = isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0));
        float _1926 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
        float _1927 = isnan(1.0) ? _1827 : (isnan(_1827) ? 1.0 : min(_1827, 1.0));
        _1900 = (((cbLight._m0[_1908].x * 0.3183098733425140380859375) * _1926) * _1927) + _1881;
        _1902 = (((cbLight._m0[_1908].y * 0.3183098733425140380859375) * _1926) * _1927) + _1882;
        _1904 = (((cbLight._m0[_1908].z * 0.3183098733425140380859375) * _1926) * _1927) + _1883;
    }
    bool _1907 = _1887.y == 0u;
    float _1945;
    float _1947;
    float _1949;
    if (_1907)
    {
        _1945 = _1900;
        _1947 = _1902;
        _1949 = _1904;
    }
    else
    {
        uint _2118 = _1812 + 7u;
        float _2134 = (dot(vec3(cbLight._m0[_1812 + 3u].xyz), vec3(_543, _544, _545)) * 0.5) + 0.5;
        float _2135 = _2134 * _2134;
        float _4125 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
        float _2136 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
        float _2137 = isnan(1.0) ? _1828 : (isnan(_1828) ? 1.0 : min(_1828, 1.0));
        _1945 = (((cbLight._m0[_2118].x * 0.3183098733425140380859375) * _2136) * _2137) + _1900;
        _1947 = (((cbLight._m0[_2118].y * 0.3183098733425140380859375) * _2136) * _2137) + _1902;
        _1949 = (((cbLight._m0[_2118].z * 0.3183098733425140380859375) * _2136) * _2137) + _1904;
    }
    uint _1952 = _1812 + 8u;
    float _1965 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1812].w)) * _546) * 0.949999988079071044921875);
    float _1966 = _1965 * _1965;
    float _1967 = cbLight._m0[_1812].x + _623;
    float _1968 = cbLight._m0[_1812].y + _624;
    float _1969 = cbLight._m0[_1812].z + _625;
    float _1973 = inversesqrt(dot(vec3(_1967, _1968, _1969), vec3(_1967, _1968, _1969)));
    float _1974 = _1973 * _1967;
    float _1975 = _1973 * _1968;
    float _1976 = _1973 * _1969;
    float _1977 = dot(vec3(_543, _544, _545), vec3(cbLight._m0[_1812].xyz));
    float _4141 = isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0));
    float _1980 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
    float _4152 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
    float _1981 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
    float _1982 = dot(vec3(_543, _544, _545), vec3(_1974, _1975, _1976));
    float _4163 = isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0));
    float _1985 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
    float _1986 = dot(vec3(cbLight._m0[_1812].xyz), vec3(_1974, _1975, _1976));
    float _4174 = isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0));
    float _1990 = _1966 * _1966;
    float _1994 = ((_1985 * _1985) * (_1990 + (-1.0))) + 1.0;
    float _2002 = exp2(log2(1.0 - (isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0)))) * 5.0);
    float _2003 = 0.959999978542327880859375 - _705;
    float _2005 = 0.959999978542327880859375 - _706;
    float _2006 = 0.959999978542327880859375 - _707;
    float _2013 = 1.0 - _1966;
    float _2024 = (0.5 / (((_1981 * ((_1980 * _2013) + _1966)) + 9.9999999392252902907785028219223e-09) + (((_1981 * _2013) + _1966) * _1980))) * _1980;
    float _4185 = isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0));
    float _2026 = (isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0))) * (_1990 / ((_1994 * _1994) * 3.141590118408203125));
    uint _2040 = _1812 + 9u;
    float _2051 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1853].w)) * _546) * 0.949999988079071044921875);
    float _2052 = _2051 * _2051;
    float _2053 = cbLight._m0[_1853].x + _623;
    float _2054 = cbLight._m0[_1853].y + _624;
    float _2055 = cbLight._m0[_1853].z + _625;
    float _2059 = inversesqrt(dot(vec3(_2053, _2054, _2055), vec3(_2053, _2054, _2055)));
    float _2060 = _2059 * _2053;
    float _2061 = _2059 * _2054;
    float _2062 = _2059 * _2055;
    float _2063 = dot(vec3(_543, _544, _545), vec3(cbLight._m0[_1853].xyz));
    float _4196 = isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0));
    float _2066 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
    float _2067 = dot(vec3(_543, _544, _545), vec3(_2060, _2061, _2062));
    float _4207 = isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0));
    float _2070 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
    float _2071 = dot(vec3(cbLight._m0[_1853].xyz), vec3(_2060, _2061, _2062));
    float _4218 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
    float _2075 = _2052 * _2052;
    float _2079 = ((_2070 * _2070) * (_2075 + (-1.0))) + 1.0;
    float _2086 = exp2(log2(1.0 - (isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0)))) * 5.0);
    float _2093 = 1.0 - _2052;
    float _2103 = (0.5 / (((_1981 * ((_2066 * _2093) + _2052)) + 9.9999999392252902907785028219223e-09) + (((_1981 * _2093) + _2052) * _2066))) * _2066;
    float _4229 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
    float _2105 = (isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0))) * (_2075 / ((_2079 * _2079) * 3.141590118408203125));
    float _2115 = (((((_2086 * _2003) + _708) * cbLight._m0[_2040].x) * _2105) * _1835) + ((((cbLight._m0[_1952].x * _1804) * ((_2002 * _2003) + _708)) * _2026) * _1849);
    float _2116 = (((((_2086 * _2005) + _710) * cbLight._m0[_2040].y) * _2105) * _1835) + ((((cbLight._m0[_1952].y * _1805) * ((_2002 * _2005) + _710)) * _2026) * _1849);
    float _2117 = (((((_2086 * _2006) + _711) * cbLight._m0[_2040].z) * _2105) * _1835) + ((((cbLight._m0[_1952].z * _1806) * ((_2002 * _2006) + _711)) * _2026) * _1849);
    float _2179;
    float _2181;
    float _2183;
    if (_1889)
    {
        _2179 = _2115;
        _2181 = _2116;
        _2183 = _2117;
    }
    else
    {
        uint _2185 = _1812 + 2u;
        uint _2189 = _1812 + 10u;
        float _2203 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2185].w)) * _546) * 0.949999988079071044921875);
        float _2204 = _2203 * _2203;
        float _2205 = cbLight._m0[_2185].x + _623;
        float _2206 = cbLight._m0[_2185].y + _624;
        float _2207 = cbLight._m0[_2185].z + _625;
        float _2211 = inversesqrt(dot(vec3(_2205, _2206, _2207), vec3(_2205, _2206, _2207)));
        float _2212 = _2211 * _2205;
        float _2213 = _2211 * _2206;
        float _2214 = _2211 * _2207;
        float _2215 = dot(vec3(_543, _544, _545), vec3(cbLight._m0[_2185].xyz));
        float _4240 = isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0));
        float _2218 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
        float _2219 = dot(vec3(_543, _544, _545), vec3(_2212, _2213, _2214));
        float _4251 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
        float _2222 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
        float _2223 = dot(vec3(cbLight._m0[_2185].xyz), vec3(_2212, _2213, _2214));
        float _4262 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
        float _2227 = _2204 * _2204;
        float _2231 = ((_2222 * _2222) * (_2227 + (-1.0))) + 1.0;
        float _2238 = exp2(log2(1.0 - (isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0)))) * 5.0);
        float _2245 = 1.0 - _2204;
        float _2255 = (0.5 / (((_1981 * ((_2218 * _2245) + _2204)) + 9.9999999392252902907785028219223e-09) + (((_1981 * _2245) + _2204) * _2218))) * _2218;
        float _4273 = isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0));
        float _2257 = (isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0))) * (_2227 / ((_2231 * _2231) * 3.141590118408203125));
        float _2258 = isnan(1.0) ? _1827 : (isnan(_1827) ? 1.0 : min(_1827, 1.0));
        _2179 = (((((_2238 * _2003) + _708) * cbLight._m0[_2189].x) * _2257) * _2258) + _2115;
        _2181 = (((((_2238 * _2005) + _710) * cbLight._m0[_2189].y) * _2257) * _2258) + _2116;
        _2183 = (((((_2238 * _2006) + _711) * cbLight._m0[_2189].z) * _2257) * _2258) + _2117;
    }
    float _2293;
    float _2295;
    float _2297;
    if (_1907)
    {
        _2293 = _2179;
        _2295 = _2181;
        _2297 = _2183;
    }
    else
    {
        uint _2304 = _1812 + 3u;
        uint _2308 = _1812 + 11u;
        float _2322 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2304].w)) * _546) * 0.949999988079071044921875);
        float _2323 = _2322 * _2322;
        float _2324 = cbLight._m0[_2304].x + _623;
        float _2325 = cbLight._m0[_2304].y + _624;
        float _2326 = cbLight._m0[_2304].z + _625;
        float _2330 = inversesqrt(dot(vec3(_2324, _2325, _2326), vec3(_2324, _2325, _2326)));
        float _2331 = _2330 * _2324;
        float _2332 = _2330 * _2325;
        float _2333 = _2330 * _2326;
        float _2334 = dot(vec3(_543, _544, _545), vec3(cbLight._m0[_2304].xyz));
        float _4289 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
        float _2337 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
        float _2338 = dot(vec3(_543, _544, _545), vec3(_2331, _2332, _2333));
        float _4300 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
        float _2341 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
        float _2342 = dot(vec3(cbLight._m0[_2304].xyz), vec3(_2331, _2332, _2333));
        float _4311 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
        float _2346 = _2323 * _2323;
        float _2350 = ((_2341 * _2341) * (_2346 + (-1.0))) + 1.0;
        float _2357 = exp2(log2(1.0 - (isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0)))) * 5.0);
        float _2364 = 1.0 - _2323;
        float _2374 = (0.5 / (((_1981 * ((_2337 * _2364) + _2323)) + 9.9999999392252902907785028219223e-09) + (((_1981 * _2364) + _2323) * _2337))) * _2337;
        float _4322 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
        float _2376 = (isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0))) * (_2346 / ((_2350 * _2350) * 3.141590118408203125));
        float _2377 = isnan(1.0) ? _1828 : (isnan(_1828) ? 1.0 : min(_1828, 1.0));
        _2293 = (((((_2357 * _2003) + _708) * cbLight._m0[_2308].x) * _2376) * _2377) + _2179;
        _2295 = (((((_2357 * _2005) + _710) * cbLight._m0[_2308].y) * _2376) * _2377) + _2181;
        _2297 = (((((_2357 * _2006) + _711) * cbLight._m0[_2308].z) * _2376) * _2377) + _2183;
    }
    float _2512;
    float _2514;
    float _2516;
    float _2518;
    float _2520;
    float _2522;
    if (_1810.y == 0u)
    {
        float _2452 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2453 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2452;
        float _2454 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2452;
        float _2455 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2452;
        uvec4 _2467 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2468 = _2467.x;
        uint _2479 = uint((float(_2467.y) * floor(float(uint(cbSceneParam._m0[85u].y * _645) / _2468))) + floor(float(uint(cbSceneParam._m0[85u].x * _644) / _2468)));
        float _2489 = (log2(_2455 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2490 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
        uint _2493 = uint(isnan(14.0) ? _2490 : (isnan(_2490) ? 14.0 : min(_2490, 14.0)));
        uvec4 _2498 = texelFetch(g_lightClusterGridBuffer, int(((_2493 << 2u) + (_2479 << 6u)) >> 2u));
        uint _2499 = _2498.x;
        uint _2500 = _2467.z;
        float _2600;
        float _2602;
        float _2604;
        float _2606;
        float _2608;
        float _2610;
        if (((((1u << ((_2500 >> 4u) & 15u)) + 4294967295u) & _2499) == 0u) || ((_2500 & 240u) == 0u))
        {
            _2600 = 0.0;
            _2602 = 0.0;
            _2604 = 0.0;
            _2606 = 0.0;
            _2608 = 0.0;
            _2610 = 0.0;
        }
        else
        {
            float _2601;
            float _2603;
            float _2605;
            float _2607;
            float _2609;
            float _2611;
            float _2753 = 0.0;
            float _2754 = 0.0;
            float _2755 = 0.0;
            float _2756 = 0.0;
            float _2757 = 0.0;
            float _2758 = 0.0;
            uint _2759 = 0u;
            uint _2768;
            bool _2769;
            for (;;)
            {
                _2768 = texelFetch(g_lightClassification, int((((_2493 << 5u) + (_2479 << 9u)) + (_2759 << 2u)) >> 2u)).x;
                _2769 = _2768 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2769)
                {
                    frontier_phi_66_pred = _2753;
                    frontier_phi_66_pred_1 = _2758;
                    frontier_phi_66_pred_2 = _2757;
                    frontier_phi_66_pred_3 = _2756;
                    frontier_phi_66_pred_4 = _2755;
                    frontier_phi_66_pred_5 = _2754;
                }
                else
                {
                    float _2898;
                    float _2899;
                    float _2900;
                    float _2901;
                    float _2902;
                    float _2903;
                    uint _2904;
                    _2898 = _2753;
                    _2899 = _2754;
                    _2900 = _2755;
                    _2901 = _2756;
                    _2902 = _2757;
                    _2903 = _2758;
                    _2904 = _2768;
                    float _2825;
                    float _2826;
                    float _2827;
                    float _2828;
                    float _2829;
                    float _2830;
                    for (;;)
                    {
                        uint _2908 = uint(findLSB(_2904)) + (_2759 << 5u);
                        uint _2905 = (_2904 + 4294967295u) & _2904;
                        uint _2910 = _2908 * 48u;
                        vec4 _2924 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2910)).x, texelFetch(g_PointLightRenderingBuffer, int(_2910 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2910 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2910 + 3u)).x));
                        uint _2930 = (_2908 * 48u) + 4u;
                        vec4 _2943 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2930)).x, texelFetch(g_PointLightRenderingBuffer, int(_2930 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2930 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2930 + 3u)).x));
                        uint _2949 = (_2908 * 48u) + 8u;
                        vec3 _2960 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2949)).x, texelFetch(g_PointLightRenderingBuffer, int(_2949 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2949 + 2u)).x));
                        float _2964 = _2924.x - _2453;
                        float _2965 = _2924.y - _2454;
                        float _2966 = _2924.z - _2455;
                        float _2967 = dot(vec3(_2964, _2965, _2966), vec3(_2964, _2965, _2966));
                        float _2970 = inversesqrt(_2967);
                        float _2971 = _2970 * _2964;
                        float _2972 = _2970 * _2965;
                        float _2973 = _2970 * _2966;
                        float _2974 = dot(vec3(_665, _668, _671), vec3(_2971, _2972, _2973));
                        float _2979 = 1.0 - (_2967 * _2924.w);
                        float _4348 = isnan(0.0) ? _2979 : (isnan(_2979) ? 0.0 : max(_2979, 0.0));
                        float _2980 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
                        float _2981 = sqrt(_2967) * _2943.w;
                        float _2984 = 1.39999997615814208984375 / (_2981 + 1.39999997615814208984375);
                        float _2985 = _2984 * _2984;
                        float _2988 = ((1.0 - _2985) * _2974) + _2985;
                        float _2991 = _2981 * _2981;
                        float _2995 = ((isnan(0.0) ? _2988 : (isnan(_2988) ? 0.0 : max(_2988, 0.0))) * _2980) / ((_2991 * 0.699999988079071044921875) + 1.0);
                        float _2999 = (-0.0) - _2453;
                        float _3000 = (-0.0) - _2454;
                        float _3001 = (-0.0) - _2455;
                        float _3005 = inversesqrt(dot(vec3(_2999, _3000, _3001), vec3(_2999, _3000, _3001)));
                        float _3006 = _3005 * _2999;
                        float _3007 = _3005 * _3000;
                        float _3008 = _3005 * _3001;
                        float _3016 = exp2(log2(1.0 / ((_2991 * 3.5) + 5.0)) * 0.25);
                        float _3017 = 1.0 - _740;
                        float _3024 = sqrt(1.0 - ((1.0 - (_3017 * _3017)) * (1.0 - (_3016 * _3016))));
                        float _3025 = _3024 * _3024;
                        float _3026 = _3025 * _3025;
                        float _3027 = _3006 + _2971;
                        float _3028 = _3007 + _2972;
                        float _3029 = _3008 + _2973;
                        float _3033 = inversesqrt(dot(vec3(_3027, _3028, _3029), vec3(_3027, _3028, _3029)));
                        float _3037 = dot(vec3(_665, _668, _671), vec3(_3006, _3007, _3008));
                        float _4364 = isnan(0.0) ? _3037 : (isnan(_3037) ? 0.0 : max(_3037, 0.0));
                        float _3040 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
                        float _3041 = dot(vec3(_665, _668, _671), vec3(_3033 * _3027, _3033 * _3028, _3033 * _3029));
                        float _4375 = isnan(0.0) ? _3041 : (isnan(_3041) ? 0.0 : max(_3041, 0.0));
                        float _3044 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
                        float _3048 = ((_3044 * _3044) * (_3026 + (-1.0))) + 1.0;
                        float _3049 = _2984 * _3025;
                        float _3050 = _3049 * _3049;
                        float _3053 = ((1.0 - _3050) * _2974) + _3050;
                        float _4386 = isnan(0.0) ? _3053 : (isnan(_3053) ? 0.0 : max(_3053, 0.0));
                        float _3054 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
                        float _3055 = 1.0 - _3025;
                        float _3065 = (0.5 / (((_3054 * ((_3040 * _3055) + _3025)) + 9.9999999392252902907785028219223e-09) + (((_3054 * _3055) + _3025) * _3040))) * _3054;
                        float _4397 = isnan(0.0) ? _3065 : (isnan(_3065) ? 0.0 : max(_3065, 0.0));
                        float _3076 = (((_3026 * 3.1415927410125732421875) * (isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0)))) / ((_3048 * _3048) * ((_2991 * 2.1991131305694580078125) + 3.141590118408203125))) * _2980;
                        _2828 = (_2995 * _2943.x) + _2901;
                        _2829 = (_2995 * _2943.y) + _2902;
                        _2830 = (_2995 * _2943.z) + _2903;
                        _2825 = (_3076 * _2960.x) + _2898;
                        _2826 = (_3076 * _2960.y) + _2899;
                        _2827 = (_3076 * _2960.z) + _2900;
                        if (_2905 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2898 = _2825;
                            _2899 = _2826;
                            _2900 = _2827;
                            _2901 = _2828;
                            _2902 = _2829;
                            _2903 = _2830;
                            _2904 = _2905;
                        }
                    }
                    frontier_phi_66_pred = _2825;
                    frontier_phi_66_pred_1 = _2830;
                    frontier_phi_66_pred_2 = _2829;
                    frontier_phi_66_pred_3 = _2828;
                    frontier_phi_66_pred_4 = _2827;
                    frontier_phi_66_pred_5 = _2826;
                }
                _2601 = frontier_phi_66_pred;
                _2611 = frontier_phi_66_pred_1;
                _2609 = frontier_phi_66_pred_2;
                _2607 = frontier_phi_66_pred_3;
                _2605 = frontier_phi_66_pred_4;
                _2603 = frontier_phi_66_pred_5;
                uint _2760 = _2759 + 1u;
                if (_2760 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2753 = _2601;
                    _2754 = _2603;
                    _2755 = _2605;
                    _2756 = _2607;
                    _2757 = _2609;
                    _2758 = _2611;
                    _2759 = _2760;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2600 = _2601;
            _2602 = _2603;
            _2604 = _2605;
            _2606 = _2607;
            _2608 = _2609;
            _2610 = _2611;
        }
        uvec4 _2614 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2615 = _2614.z;
        uint _2617 = (_2615 >> 8u) & 15u;
        float _2721;
        float _2723;
        float _2725;
        float _2727;
        float _2729;
        float _2731;
        if (((4294967295u << _2617) & _2499) == 0u)
        {
            _2721 = _2600;
            _2723 = _2602;
            _2725 = _2604;
            _2727 = _2606;
            _2729 = _2608;
            _2731 = _2610;
        }
        else
        {
            float _2746 = inversesqrt(dot(vec3(_2453, _2454, _2455), vec3(_2453, _2454, _2455)));
            float _2747 = _2746 * _2453;
            float _2748 = _2746 * _2454;
            float _2749 = _2746 * _2455;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2617 < ((_2615 >> 12u) & 15u))
            {
                float _2722;
                float _2724;
                float _2726;
                float _2728;
                float _2730;
                float _2732;
                float _2881 = _2600;
                float _2882 = _2602;
                float _2883 = _2604;
                float _2884 = _2606;
                float _2885 = _2608;
                float _2886 = _2610;
                uint _2887 = _2617;
                uint _2896;
                bool _2897;
                for (;;)
                {
                    _2896 = texelFetch(g_lightClassification, int((((_2493 << 5u) + (_2479 << 9u)) + (_2887 << 2u)) >> 2u)).x;
                    _2897 = _2896 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2897)
                    {
                        frontier_phi_77_pred = _2886;
                        frontier_phi_77_pred_1 = _2885;
                        frontier_phi_77_pred_2 = _2884;
                        frontier_phi_77_pred_3 = _2883;
                        frontier_phi_77_pred_4 = _2882;
                        frontier_phi_77_pred_5 = _2881;
                    }
                    else
                    {
                        float _3090;
                        float _3091;
                        float _3092;
                        float _3093;
                        float _3094;
                        float _3095;
                        float _3384;
                        float _3385;
                        float _3386;
                        float _3387;
                        float _3388;
                        float _3389;
                        float _3103 = _2881;
                        float _3104 = _2882;
                        float _3105 = _2883;
                        float _3106 = _2884;
                        float _3107 = _2885;
                        float _3108 = _2886;
                        uint _3109 = _2896;
                        uint _3110;
                        vec4 _3135;
                        float _3136;
                        vec4 _3151;
                        vec3 _3163;
                        vec4 _3179;
                        vec4 _3194;
                        float _3240;
                        bool _3241;
                        for (;;)
                        {
                            uint _3120 = ((_2887 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3109));
                            _3110 = (_3109 + 4294967295u) & _3109;
                            uint _3122 = _3120 * 40u;
                            _3135 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3122)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 3u)).x));
                            _3136 = _3135.w;
                            uint _3138 = (_3120 * 40u) + 4u;
                            _3151 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3138)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3138 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3138 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3138 + 3u)).x));
                            uint _3153 = (_3120 * 40u) + 8u;
                            _3163 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3153)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 2u)).x));
                            uint _3166 = (_3120 * 40u) + 16u;
                            _3179 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3166)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 3u)).x));
                            uint _3181 = (_3120 * 40u) + 20u;
                            _3194 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3181)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 3u)).x));
                            uint _3196 = (_3120 * 40u) + 24u;
                            vec4 _3209 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3196)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3196 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3196 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3196 + 3u)).x));
                            uint _3215 = (_3120 * 40u) + 28u;
                            vec4 _3228 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3215)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3215 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3215 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3215 + 3u)).x));
                            _3240 = fma(_2455, _3228.z, fma(_2454, _3228.y, _3228.x * _2453)) + _3228.w;
                            _3241 = !((fma(_2455, _3209.z, fma(_2454, _3209.y, _3209.x * _2453)) + _3209.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3241)
                            {
                                float _3268 = _3135.x - _2453;
                                float _3269 = _3135.y - _2454;
                                float _3270 = _3135.z - _2455;
                                float _3271 = dot(vec3(_3268, _3269, _3270), vec3(_3268, _3269, _3270));
                                float _3274 = inversesqrt(_3271);
                                float _3275 = _3274 * _3268;
                                float _3276 = _3274 * _3269;
                                float _3277 = _3274 * _3270;
                                float _3281 = 1.0 - (_3271 / (_3136 * _3136));
                                float _4408 = isnan(0.0) ? _3281 : (isnan(_3281) ? 0.0 : max(_3281, 0.0));
                                float _3282 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
                                float _3286 = sqrt(_3271) * _3151.w;
                                float _3288 = 1.39999997615814208984375 / (_3286 + 1.39999997615814208984375);
                                float _3289 = _3288 * _3288;
                                float _3292 = ((1.0 - _3289) * dot(vec3(_3275, _3276, _3277), vec3(_665, _668, _671))) + _3289;
                                float _3295 = _3286 * _3286;
                                float _3299 = (fma(_2455, _3179.z, fma(_2454, _3179.y, _3179.x * _2453)) + _3179.w) / _3240;
                                float _3300 = (fma(_2455, _3194.z, fma(_2454, _3194.y, _3194.x * _2453)) + _3194.w) / _3240;
                                float _3304 = 1.0 - dot(vec2(_3299, _3300), vec2(_3299, _3300));
                                float _4424 = isnan(0.0) ? _3304 : (isnan(_3304) ? 0.0 : max(_3304, 0.0));
                                float _3305 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
                                float _3306 = _3305 * (((isnan(0.0) ? _3292 : (isnan(_3292) ? 0.0 : max(_3292, 0.0))) * _3282) / ((_3295 * 0.699999988079071044921875) + 1.0));
                                float _3318 = exp2(log2(1.0 / ((_3295 * 3.5) + 5.0)) * 0.25);
                                float _3319 = 1.0 - _740;
                                float _3326 = sqrt(1.0 - ((1.0 - (_3319 * _3319)) * (1.0 - (_3318 * _3318))));
                                float _3327 = _3326 * _3326;
                                float _3328 = _3327 * _3327;
                                float _3329 = _3275 - _2747;
                                float _3330 = _3276 - _2748;
                                float _3331 = _3277 - _2749;
                                float _3335 = inversesqrt(dot(vec3(_3329, _3330, _3331), vec3(_3329, _3330, _3331)));
                                float _3339 = dot(vec3(_665, _668, _671), vec3((-0.0) - _2747, (-0.0) - _2748, (-0.0) - _2749));
                                float _4435 = isnan(0.0) ? _3339 : (isnan(_3339) ? 0.0 : max(_3339, 0.0));
                                float _3342 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
                                float _3343 = dot(vec3(_665, _668, _671), vec3(_3335 * _3329, _3335 * _3330, _3335 * _3331));
                                float _4446 = isnan(0.0) ? _3343 : (isnan(_3343) ? 0.0 : max(_3343, 0.0));
                                float _3346 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
                                float _3350 = ((_3346 * _3346) * (_3328 + (-1.0))) + 1.0;
                                float _3351 = _3288 * _3327;
                                float _3352 = _3351 * _3351;
                                float _3358 = ((1.0 - _3352) * dot(vec3(_665, _668, _671), vec3(_3275, _3276, _3277))) + _3352;
                                float _4457 = isnan(0.0) ? _3358 : (isnan(_3358) ? 0.0 : max(_3358, 0.0));
                                float _3359 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
                                float _3360 = 1.0 - _3327;
                                float _3370 = (0.5 / (((_3359 * ((_3342 * _3360) + _3327)) + 9.9999999392252902907785028219223e-09) + (((_3359 * _3360) + _3327) * _3342))) * _3359;
                                float _4468 = isnan(0.0) ? _3370 : (isnan(_3370) ? 0.0 : max(_3370, 0.0));
                                float _3380 = (_3305 * _3282) * (((_3328 * 3.1415927410125732421875) * (isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0)))) / ((_3350 * _3350) * ((_3295 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3306 * _3151.y;
                                frontier_phi_83_pred_1 = _3306 * _3151.x;
                                frontier_phi_83_pred_2 = _3380 * _3163.z;
                                frontier_phi_83_pred_3 = _3380 * _3163.y;
                                frontier_phi_83_pred_4 = _3380 * _3163.x;
                                frontier_phi_83_pred_5 = _3306 * _3151.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3388 = frontier_phi_83_pred;
                            _3387 = frontier_phi_83_pred_1;
                            _3386 = frontier_phi_83_pred_2;
                            _3385 = frontier_phi_83_pred_3;
                            _3384 = frontier_phi_83_pred_4;
                            _3389 = frontier_phi_83_pred_5;
                            _3093 = _3387 + _3106;
                            _3094 = _3388 + _3107;
                            _3095 = _3389 + _3108;
                            _3090 = _3384 + _3103;
                            _3091 = _3385 + _3104;
                            _3092 = _3386 + _3105;
                            if (_3110 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3103 = _3090;
                                _3104 = _3091;
                                _3105 = _3092;
                                _3106 = _3093;
                                _3107 = _3094;
                                _3108 = _3095;
                                _3109 = _3110;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3095;
                        frontier_phi_77_pred_1 = _3094;
                        frontier_phi_77_pred_2 = _3093;
                        frontier_phi_77_pred_3 = _3092;
                        frontier_phi_77_pred_4 = _3091;
                        frontier_phi_77_pred_5 = _3090;
                    }
                    _2732 = frontier_phi_77_pred;
                    _2730 = frontier_phi_77_pred_1;
                    _2728 = frontier_phi_77_pred_2;
                    _2726 = frontier_phi_77_pred_3;
                    _2724 = frontier_phi_77_pred_4;
                    _2722 = frontier_phi_77_pred_5;
                    uint _2888 = _2887 + 1u;
                    if (_2888 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2881 = _2722;
                        _2882 = _2724;
                        _2883 = _2726;
                        _2884 = _2728;
                        _2885 = _2730;
                        _2886 = _2732;
                        _2887 = _2888;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2726;
                frontier_phi_58_59_ladder_1 = _2732;
                frontier_phi_58_59_ladder_2 = _2730;
                frontier_phi_58_59_ladder_3 = _2728;
                frontier_phi_58_59_ladder_4 = _2724;
                frontier_phi_58_59_ladder_5 = _2722;
            }
            else
            {
                frontier_phi_58_59_ladder = _2604;
                frontier_phi_58_59_ladder_1 = _2610;
                frontier_phi_58_59_ladder_2 = _2608;
                frontier_phi_58_59_ladder_3 = _2606;
                frontier_phi_58_59_ladder_4 = _2602;
                frontier_phi_58_59_ladder_5 = _2600;
            }
            _2721 = frontier_phi_58_59_ladder_5;
            _2723 = frontier_phi_58_59_ladder_4;
            _2725 = frontier_phi_58_59_ladder;
            _2727 = frontier_phi_58_59_ladder_3;
            _2729 = frontier_phi_58_59_ladder_2;
            _2731 = frontier_phi_58_59_ladder_1;
        }
        float _2736 = isnan(1.0) ? _724 : (isnan(_724) ? 1.0 : min(_724, 1.0));
        _2512 = (_2736 * _2727) + _1945;
        _2514 = (_2736 * _2729) + _1947;
        _2516 = (_2736 * _2731) + _1949;
        _2518 = ((_2721 * _708) * _2736) + _2293;
        _2520 = ((_2723 * _710) * _2736) + _2295;
        _2522 = ((_2725 * _711) * _2736) + _2297;
    }
    else
    {
        _2512 = _1945;
        _2514 = _1947;
        _2516 = _1949;
        _2518 = _2293;
        _2520 = _2295;
        _2522 = _2297;
    }
    float _4484 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
    float _4495 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
    float _4506 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
    float _2539 = ((isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0))) * (_2512 + ((isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0))) * _724))) + ((_2518 + ((isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0))) * _1563)) * cbPerFrame._m0[3u].x);
    float _2540 = ((isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0))) * (_2514 + ((isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0))) * _724))) + ((_2520 + ((isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0))) * _1563)) * cbPerFrame._m0[3u].x);
    float _2541 = ((isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0))) * (_2516 + ((isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0))) * _724))) + ((_2522 + ((isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0))) * _1563)) * cbPerFrame._m0[3u].x);
    uint _2542 = _234 + 6u;
    float _2550 = _644 / cbSceneParam._m0[86u].x;
    float _2551 = _645 / cbSceneParam._m0[86u].y;
    vec4 _2565 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2550, _2551, (log2((isnan(cbSceneParam._m0[77u].w) ? _565 : (isnan(_565) ? cbSceneParam._m0[77u].w : min(_565, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2567 = _2565.x;
    float _2568 = _2565.y;
    float _2569 = _2565.z;
    float _2570 = _2565.w;
    float _2663;
    float _2665;
    float _2667;
    float _2669;
    if (_565 > cbSceneParam._m0[78u].w)
    {
        float _2625 = isnan(_565) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _565 : min(cbSceneParam._m0[80u].w, _565));
        float _2626 = _2625 / _565;
        float _2637 = _2626 * _616;
        float _2638 = _617 * _2626;
        float _2639 = (-0.0) - _2638;
        float _2641 = _2626 * _618;
        float _2643 = (cbSceneParam._m0[77u].w * _2639) / _2625;
        float _2644 = _2643 + cbSceneParam._m0[79u].w;
        float _2645 = cbSceneParam._m0[79u].w - _2638;
        float _2651 = sqrt(((_2637 * _2637) + (_2638 * _2638)) + (_2641 * _2641));
        float _2654 = (1.0 - (cbSceneParam._m0[77u].w / _2625)) * _2651;
        float _2659 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2661 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2838;
        if (abs((_2639 - _2643) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2838 = ((((_2644 > 0.0) ? exp2(_2659 * _2644) : (2.0 - exp2(_2661 * _2644))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2654;
        }
        else
        {
            float _2782 = 1.0 / cbSceneParam._m0[80u].x;
            float _2783 = isnan(_2645) ? _2644 : (isnan(_2644) ? _2645 : max(_2644, _2645));
            float _2784 = isnan(_2645) ? _2644 : (isnan(_2644) ? _2645 : min(_2644, _2645));
            float _2793 = isnan(0.0) ? _2783 : (isnan(_2783) ? 0.0 : min(_2783, 0.0));
            float _2794 = isnan(0.0) ? _2784 : (isnan(_2784) ? 0.0 : min(_2784, 0.0));
            _2838 = ((abs(_2651 / _2639) * cbSceneParam._m0[80u].y) * ((((_2793 - _2794) * 2.0) - ((exp2(_2659 * (isnan(0.0) ? _2783 : (isnan(_2783) ? 0.0 : max(_2783, 0.0)))) - exp2(_2659 * (isnan(0.0) ? _2784 : (isnan(_2784) ? 0.0 : max(_2784, 0.0))))) * _2782)) - ((exp2(_2661 * _2793) - exp2(_2661 * _2794)) * _2782))) + (_2654 * cbSceneParam._m0[80u].z);
        }
        vec4 _2840 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2550, _2551, 1.0), 0.0);
        float _2849 = exp2((_2838 * (-1.44269502162933349609375)) * (1.0 - _2840.w));
        float _2850 = log2(_2849);
        float _2866 = log2(_2570);
        _2663 = (exp2(_2866 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2850 * cbSceneParam._m0[78u].x)) * _2840.x) / cbSceneParam._m0[78u].x)) + _2567;
        _2665 = (exp2(_2866 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2850 * cbSceneParam._m0[78u].y)) * _2840.y) / cbSceneParam._m0[78u].y)) + _2568;
        _2667 = (exp2(_2866 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2850 * cbSceneParam._m0[78u].z)) * _2840.z) / cbSceneParam._m0[78u].z)) + _2569;
        _2669 = _2849 * _2570;
    }
    else
    {
        _2663 = _2567;
        _2665 = _2568;
        _2667 = _2569;
        _2669 = _2570;
    }
    bool _2876;
    vec4 _2679;
    vec4 _2701;
    float _2703;
    float _2707;
    float _2708;
    float _2709;
    float _2710;
    bool _2720;
    for (;;)
    {
        _2679 = cbMatDynParam._m0[0u];
        float _2681 = roundEven(_2679.y);
        bool _2682 = _2681 == 3.0;
        float _2683 = log2(_2669);
        float _2690 = exp2(_2683 * cbSceneParam._m0[78u].x) * _2539;
        float _2691 = exp2(_2683 * cbSceneParam._m0[78u].y) * _2540;
        float _2692 = exp2(_2683 * cbSceneParam._m0[78u].z) * _2541;
        float _2699 = _632 + (-0.5);
        _2701 = cbMtdParam._m0[1u];
        _2703 = _2701.y * _2699;
        float _2706 = (_2681 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2707 = _2706 * (_2682 ? _2690 : (_2690 + (cbSceneParam._m0[72u].w * _2663)));
        _2708 = _2706 * (_2682 ? _2691 : (_2691 + (cbSceneParam._m0[72u].w * _2665)));
        _2709 = _2706 * (_2682 ? _2692 : (_2692 + (cbSceneParam._m0[72u].w * _2667)));
        _2710 = _2699 * 0.999000012874603271484375;
        _2720 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2720)
        {
            if ((cbInstanceData._m0[_234 + 7u].x + _2710) < 0.5)
            {
                _2876 = true;
                break;
            }
        }
        uint _2817 = _684 + uint(_2679.w);
        if ((cbInstanceData._m0[_2817].w < 1.0) && ((cbInstanceData._m0[_2817].w + _2710) < 0.5))
        {
            _2876 = true;
            break;
        }
        if ((_2703 + 1.0) < _2701.x)
        {
            _2876 = true;
            break;
        }
        _2876 = false;
        break;
    }
    float _3081;
    if (_2876)
    {
        discard_state = true;
        _3081 = 0.0;
    }
    else
    {
        _3081 = cbInstanceData._m0[_2542].w;
    }
    SV_Target.x = _2707;
    SV_Target.y = _2708;
    SV_Target.z = _2709;
    SV_Target.w = _3081;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2542].w;
    discard_exit();
}


