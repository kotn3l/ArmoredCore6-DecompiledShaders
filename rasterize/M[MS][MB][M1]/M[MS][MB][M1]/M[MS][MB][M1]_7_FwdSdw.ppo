#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1096;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _216 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _217 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _218 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _224 = inversesqrt(dot(vec3(_216, _217, _218), vec3(_216, _217, _218)));
    float _231 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _238 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _250 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _252 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _253 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3709 = isnan(0.0) ? _250 : (isnan(_250) ? 0.0 : max(_250, 0.0));
    float _3720 = isnan(0.0) ? _252 : (isnan(_252) ? 0.0 : max(_252, 0.0));
    float _3731 = isnan(0.0) ? _253 : (isnan(_253) ? 0.0 : max(_253, 0.0));
    uint _263 = uint(roundEven(NORMAL.w)) * 13u;
    uint _268 = _263 + 1u;
    uint _272 = _263 + 2u;
    float _281 = sqrt(((cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x) + (cbInstanceData._m0[_263].x * cbInstanceData._m0[_263].x)) + (cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x));
    float _282 = _281 * TEXCOORD.z;
    float _283 = _281 * TEXCOORD.w;
    vec4 _296 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _282) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _283) + cbTextureTilingScale._m0[13u].w));
    vec4 _319 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _324 = _319.x * cbMtdParam._m0[9u].x;
    float _325 = _319.y * cbMtdParam._m0[9u].y;
    float _326 = _319.z * cbMtdParam._m0[9u].z;
    float _330 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _296.x) * _324;
    float _333 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _296.y) * _325;
    float _336 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _296.z) * _326;
    float _343 = ((_324 - _330) * (isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0)))) + _330;
    float _344 = ((_325 - _333) * (isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0)))) + _333;
    float _345 = ((_326 - _336) * (isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0)))) + _336;
    vec4 _358 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _282) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _283) + cbTextureTilingScale._m0[20u].w));
    vec4 _384 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _388 = _384.z;
    float _392 = (_384.x * 2.0) + (-1.0);
    float _393 = (_384.y * 2.0) + (-1.0);
    float _394 = dot(vec2(_392, _393), vec2(_392, _393));
    float _3742 = isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0));
    float _399 = sqrt(1.0 - (isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0))));
    float _404 = _392 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_358.x * 2.0) + (-1.0)));
    float _405 = _393 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_358.y * 2.0) + (-1.0)));
    vec4 _418 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _282) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _283) + cbTextureTilingScale._m0[19u].w));
    float _420 = _418.x;
    float _421 = 1.0 - _420;
    float _452 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_420 - _421) * cbMtdParam._m0[24u].w) + _421) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3753 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _453 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
    float _461 = ((((cbMtdParam._m0[10u].x - _343) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _453) + _343;
    float _462 = ((((cbMtdParam._m0[10u].y - _344) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _453) + _344;
    float _463 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _345)) * _453) + _345;
    vec4 _476 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _478 = _476.x;
    float _480 = _478 - (_478 * _453);
    float _485 = (((_358.z - _388) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _388;
    float _489 = ((cbMtdParam._m0[23u].y - _485) * _453) + _485;
    vec4 _511 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _282) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _283) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _517 = (_511.x * 2.0) + (-1.0);
    float _518 = (_511.y * 2.0) + (-1.0);
    float _519 = dot(vec2(_517, _518), vec2(_517, _518));
    float _3764 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _535 = (_453 * (((cbMtdParam._m0[22u].z * _404) - _404) + _517)) + _404;
    float _536 = (_453 * (((cbMtdParam._m0[22u].z * _405) - _405) + _518)) + _405;
    float _537 = (_453 * (sqrt(1.0 - (isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0)))) - _399)) + _399;
    float _539 = cbMtdParam._m0[22u].x + _384.w;
    float _542 = fma(_537, _231 * NORMAL.x, fma(_536, _238 * TANGENT.x, (_224 * _216) * _535));
    float _545 = fma(_537, _231 * NORMAL.y, fma(_536, _238 * TANGENT.y, (_224 * _217) * _535));
    float _548 = fma(_537, _231 * NORMAL.z, fma(_536, _238 * TANGENT.z, (_224 * _218) * _535));
    float _552 = inversesqrt(dot(vec3(_542, _545, _548), vec3(_542, _545, _548)));
    float _553 = _552 * _542;
    float _554 = _552 * _545;
    float _555 = _552 * _548;
    float _3775 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _556 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
    float _3786 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _3797 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _3808 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _3819 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _3830 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _561 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
    float _575 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _616 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _626 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _616);
    float _627 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _616);
    float _628 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _616);
    float _632 = inversesqrt(dot(vec3(_626, _627, _628), vec3(_626, _627, _628)));
    float _633 = _626 * _632;
    float _634 = _627 * _632;
    float _635 = _628 * _632;
    float _641 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _642 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _663 = fma(_555, cbSceneParam._m0[5u].z, fma(_554, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _553));
    float _666 = fma(_555, cbSceneParam._m0[6u].z, fma(_554, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _553));
    float _669 = fma(_555, cbSceneParam._m0[7u].z, fma(_554, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _553));
    uint _683 = (_263 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _689 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0)))) * cbInstanceData._m0[_683].x;
    float _690 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0)))) * cbInstanceData._m0[_683].y;
    float _691 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0)))) * cbInstanceData._m0[_683].z;
    float _3841 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _692 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
    float _3852 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _693 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
    float _3863 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _694 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
    float _695 = 1.0 - _561;
    float _696 = _692 * _695;
    float _697 = _693 * _695;
    float _698 = _694 * _695;
    float _703 = (_692 + (-0.039999999105930328369140625)) * _561;
    float _704 = (_693 + (-0.039999999105930328369140625)) * _561;
    float _705 = (_694 + (-0.039999999105930328369140625)) * _561;
    float _706 = _703 + 0.039999999105930328369140625;
    float _708 = _704 + 0.039999999105930328369140625;
    float _709 = _705 + 0.039999999105930328369140625;
    vec4 _718 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _641, cbSceneParam._m0[86u].y * _642));
    float _722 = ((isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0))) * TEXCOORD_5.w) * _718.x;
    float _723 = dot(vec3(_553, _554, _555), vec3(_633, _634, _635));
    float _726 = _723 * 2.0;
    float _730 = (_726 * _553) - _633;
    float _731 = (_726 * _554) - _634;
    float _732 = (_726 * _555) - _635;
    float _736 = abs(dot(vec3(_633, _634, _635), vec3(_553, _554, _555)));
    float _3874 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
    float _738 = sqrt(_556);
    float _751 = exp2((_738 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_738 * 3.0));
    float _757 = (1.0 - _751) * ((_738 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _758 = _751 * _738;
    float _786 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _790 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _794 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1095;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    float _1107;
    float _1108;
    float _1109;
    float _1110;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _820 = fma(_794, cbModelParam._m0[26u].z, fma(_790, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _786));
        float _824 = fma(_794, cbModelParam._m0[27u].z, fma(_790, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _786));
        float _828 = fma(_794, cbModelParam._m0[28u].z, fma(_790, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _786));
        float _853 = _786 + _553;
        float _854 = _790 + _554;
        float _855 = _794 + _555;
        float _865 = fma(_855, cbModelParam._m0[26u].z, fma(_854, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _853)) - _820;
        float _866 = fma(_855, cbModelParam._m0[27u].z, fma(_854, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _853)) - _824;
        float _867 = fma(_855, cbModelParam._m0[28u].z, fma(_854, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _853)) - _828;
        float _871 = inversesqrt(dot(vec3(_865, _866, _867), vec3(_865, _866, _867)));
        float _884 = ((_871 * _865) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_820 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _885 = ((_871 * _866) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_824 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _886 = ((_871 * _867) / cbModelParam._m0[34u].z) + ((((((_828 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _889 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_884, _885, _886), 0.0);
        vec4 _896 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_884, _885, _886), 0.0);
        vec4 _903 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_884, _885, _886), 0.0);
        vec4 _910 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_884, _885, _886), 0.0);
        float _923 = exp2((_889.w + (-0.5)) * 20.0) * 2.0;
        float _924 = _923 * (_889.x + (-0.5));
        float _925 = _923 * (_889.y + (-0.5));
        float _926 = _923 * (_889.z + (-0.5));
        float _933 = exp2((_896.w + (-0.5)) * 20.0) * 2.0;
        float _934 = _933 * (_896.x + (-0.5));
        float _935 = _933 * (_896.y + (-0.5));
        float _936 = _933 * (_896.z + (-0.5));
        float _943 = exp2((_903.w + (-0.5)) * 20.0) * 2.0;
        float _944 = _943 * (_903.x + (-0.5));
        float _945 = _943 * (_903.y + (-0.5));
        float _946 = _943 * (_903.z + (-0.5));
        float _953 = exp2((_910.w + (-0.5)) * 20.0) * 2.0;
        float _954 = _953 * (_910.x + (-0.5));
        float _955 = _953 * (_910.y + (-0.5));
        float _956 = _953 * (_910.z + (-0.5));
        float _957 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        float _958 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
        float _959 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
        float _960 = _924 * 0.5;
        float _961 = _934 * 0.5;
        float _962 = _944 * 0.5;
        float _963 = dot(vec3(_960, _961, _962), vec3(_960, _961, _962));
        float _968 = (_963 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_963);
        float _977 = (dot(vec3(_553, _554, _555), vec3(_968 * _960, _968 * _961, _968 * _962)) + 1.0) * 0.5;
        float _3900 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _987 = sqrt(((_961 * _961) + (_960 * _960)) + (_962 * _962)) / (_957 + 9.9999997473787516355514526367188e-06);
        float _3911 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _988 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
        float _989 = _988 * 2.0;
        float _993 = (1.0 - _988) / (_988 + 1.0);
        float _3922 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _994 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
        float _1003 = ((((1.0 - _994) * (_989 + 2.0)) * exp2(log2(isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0))) * (_989 + 1.0))) + _994) * _957;
        float _1004 = _925 * 0.5;
        float _1005 = _935 * 0.5;
        float _1006 = _945 * 0.5;
        float _1007 = dot(vec3(_1004, _1005, _1006), vec3(_1004, _1005, _1006));
        float _1012 = (_1007 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1007);
        float _1020 = (dot(vec3(_553, _554, _555), vec3(_1012 * _1004, _1012 * _1005, _1012 * _1006)) + 1.0) * 0.5;
        float _3933 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1029 = sqrt(((_1005 * _1005) + (_1004 * _1004)) + (_1006 * _1006)) / (_958 + 9.9999997473787516355514526367188e-06);
        float _3944 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1030 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
        float _1031 = _1030 * 2.0;
        float _1035 = (1.0 - _1030) / (_1030 + 1.0);
        float _3955 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1036 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
        float _1045 = ((((1.0 - _1036) * (_1031 + 2.0)) * exp2(log2(isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0))) * (_1031 + 1.0))) + _1036) * _958;
        float _1046 = _926 * 0.5;
        float _1047 = _936 * 0.5;
        float _1048 = _946 * 0.5;
        float _1049 = dot(vec3(_1046, _1047, _1048), vec3(_1046, _1047, _1048));
        float _1054 = (_1049 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1049);
        float _1062 = (dot(vec3(_553, _554, _555), vec3(_1054 * _1046, _1054 * _1047, _1054 * _1048)) + 1.0) * 0.5;
        float _3966 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1071 = sqrt(((_1047 * _1047) + (_1046 * _1046)) + (_1048 * _1048)) / (_959 + 9.9999997473787516355514526367188e-06);
        float _3977 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1072 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
        float _1073 = _1072 * 2.0;
        float _1077 = (1.0 - _1072) / (_1072 + 1.0);
        float _3988 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1078 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
        float _1087 = ((((1.0 - _1078) * (_1073 + 2.0)) * exp2(log2(isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0))) * (_1073 + 1.0))) + _1078) * _959;
        _1095 = _926;
        _1097 = _925;
        _1098 = _924;
        _1099 = _936;
        _1100 = _935;
        _1101 = _934;
        _1102 = _946;
        _1103 = _945;
        _1104 = _944;
        _1105 = _959;
        _1106 = _958;
        _1107 = _957;
        _1108 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0)));
        _1109 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0)));
        _1110 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0)));
    }
    else
    {
        _1095 = _1096;
        _1097 = _1096;
        _1098 = _1096;
        _1099 = _1096;
        _1100 = _1096;
        _1101 = _1096;
        _1102 = _1096;
        _1103 = _1096;
        _1104 = _1096;
        _1105 = _1096;
        _1106 = _1096;
        _1107 = _1096;
        _1108 = 0.0;
        _1109 = 0.0;
        _1110 = 0.0;
    }
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1135 = fma(_794, cbModelParam._m0[30u].z, fma(_790, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _786));
        float _1139 = fma(_794, cbModelParam._m0[31u].z, fma(_790, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _786));
        float _1143 = fma(_794, cbModelParam._m0[32u].z, fma(_790, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _786));
        float _1166 = _786 + _553;
        float _1167 = _790 + _554;
        float _1168 = _794 + _555;
        float _1178 = fma(_1168, cbModelParam._m0[30u].z, fma(_1167, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1166)) - _1135;
        float _1179 = fma(_1168, cbModelParam._m0[31u].z, fma(_1167, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1166)) - _1139;
        float _1180 = fma(_1168, cbModelParam._m0[32u].z, fma(_1167, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1166)) - _1143;
        float _1184 = inversesqrt(dot(vec3(_1178, _1179, _1180), vec3(_1178, _1179, _1180)));
        float _1197 = ((_1184 * _1178) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1135 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1198 = ((_1184 * _1179) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1139 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1199 = ((_1184 * _1180) / cbModelParam._m0[35u].z) + ((((((_1143 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1201 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1197, _1198, _1199), 0.0);
        vec4 _1208 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1197, _1198, _1199), 0.0);
        vec4 _1215 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1197, _1198, _1199), 0.0);
        vec4 _1222 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1197, _1198, _1199), 0.0);
        float _1234 = exp2((_1201.w + (-0.5)) * 20.0) * 2.0;
        float _1235 = _1234 * (_1201.x + (-0.5));
        float _1236 = _1234 * (_1201.y + (-0.5));
        float _1237 = _1234 * (_1201.z + (-0.5));
        float _1244 = exp2((_1208.w + (-0.5)) * 20.0) * 2.0;
        float _1245 = _1244 * (_1208.x + (-0.5));
        float _1246 = _1244 * (_1208.y + (-0.5));
        float _1247 = _1244 * (_1208.z + (-0.5));
        float _1254 = exp2((_1215.w + (-0.5)) * 20.0) * 2.0;
        float _1255 = _1254 * (_1215.x + (-0.5));
        float _1256 = _1254 * (_1215.y + (-0.5));
        float _1257 = _1254 * (_1215.z + (-0.5));
        float _1264 = exp2((_1222.w + (-0.5)) * 20.0) * 2.0;
        float _1265 = _1264 * (_1222.x + (-0.5));
        float _1266 = _1264 * (_1222.y + (-0.5));
        float _1267 = _1264 * (_1222.z + (-0.5));
        float _1268 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1269 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1270 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1271 = _1235 * 0.5;
        float _1272 = _1245 * 0.5;
        float _1273 = _1255 * 0.5;
        float _1274 = dot(vec3(_1271, _1272, _1273), vec3(_1271, _1272, _1273));
        float _1279 = (_1274 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1274);
        float _1287 = (dot(vec3(_553, _554, _555), vec3(_1279 * _1271, _1279 * _1272, _1279 * _1273)) + 1.0) * 0.5;
        float _4029 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1296 = sqrt(((_1272 * _1272) + (_1271 * _1271)) + (_1273 * _1273)) / (_1268 + 9.9999997473787516355514526367188e-06);
        float _4040 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1297 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
        float _1298 = _1297 * 2.0;
        float _1302 = (1.0 - _1297) / (_1297 + 1.0);
        float _4051 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1303 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
        float _1312 = ((((1.0 - _1303) * (_1298 + 2.0)) * exp2(log2(isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0))) * (_1298 + 1.0))) + _1303) * _1268;
        float _1313 = _1236 * 0.5;
        float _1314 = _1246 * 0.5;
        float _1315 = _1256 * 0.5;
        float _1316 = dot(vec3(_1313, _1314, _1315), vec3(_1313, _1314, _1315));
        float _1321 = (_1316 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1316);
        float _1329 = (dot(vec3(_553, _554, _555), vec3(_1321 * _1313, _1321 * _1314, _1321 * _1315)) + 1.0) * 0.5;
        float _4062 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1338 = sqrt(((_1314 * _1314) + (_1313 * _1313)) + (_1315 * _1315)) / (_1269 + 9.9999997473787516355514526367188e-06);
        float _4073 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1339 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
        float _1340 = _1339 * 2.0;
        float _1344 = (1.0 - _1339) / (_1339 + 1.0);
        float _4084 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1345 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
        float _1354 = ((((1.0 - _1345) * (_1340 + 2.0)) * exp2(log2(isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0))) * (_1340 + 1.0))) + _1345) * _1269;
        float _1355 = _1237 * 0.5;
        float _1356 = _1247 * 0.5;
        float _1357 = _1257 * 0.5;
        float _1358 = dot(vec3(_1355, _1356, _1357), vec3(_1355, _1356, _1357));
        float _1363 = (_1358 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1358);
        float _1371 = (dot(vec3(_553, _554, _555), vec3(_1363 * _1355, _1363 * _1356, _1363 * _1357)) + 1.0) * 0.5;
        float _4095 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1380 = sqrt(((_1356 * _1356) + (_1355 * _1355)) + (_1357 * _1357)) / (_1270 + 9.9999997473787516355514526367188e-06);
        float _4106 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1381 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
        float _1382 = _1381 * 2.0;
        float _1386 = (1.0 - _1381) / (_1381 + 1.0);
        float _4117 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1387 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
        float _1396 = ((((1.0 - _1387) * (_1382 + 2.0)) * exp2(log2(isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0))) * (_1382 + 1.0))) + _1387) * _1270;
        _1404 = _1237;
        _1405 = _1236;
        _1406 = _1235;
        _1407 = _1247;
        _1408 = _1246;
        _1409 = _1245;
        _1410 = _1257;
        _1411 = _1256;
        _1412 = _1255;
        _1413 = _1270;
        _1414 = _1269;
        _1415 = _1268;
        _1416 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0)));
        _1417 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0)));
        _1418 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0)));
    }
    else
    {
        _1404 = _1096;
        _1405 = _1096;
        _1406 = _1096;
        _1407 = _1096;
        _1408 = _1096;
        _1409 = _1096;
        _1410 = _1096;
        _1411 = _1096;
        _1412 = _1096;
        _1413 = _1096;
        _1414 = _1096;
        _1415 = _1096;
        _1416 = 0.0;
        _1417 = 0.0;
        _1418 = 0.0;
    }
    float _1428 = (cbModelParam._m0[1u].x * (_1416 - _1108)) + _1108;
    float _1429 = (cbModelParam._m0[1u].x * (_1417 - _1109)) + _1109;
    float _1430 = (cbModelParam._m0[1u].x * (_1418 - _1110)) + _1110;
    float _1451 = fma(_1430, cbSceneParam._m0[89u].z, fma(_1429, cbSceneParam._m0[89u].y, _1428 * cbSceneParam._m0[89u].x));
    float _1454 = fma(_1430, cbSceneParam._m0[90u].z, fma(_1429, cbSceneParam._m0[90u].y, _1428 * cbSceneParam._m0[90u].x));
    float _1457 = fma(_1430, cbSceneParam._m0[91u].z, fma(_1429, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1428));
    float _1472 = _730 * 0.5;
    float _1473 = _731 * 0.5;
    float _1474 = _732 * 0.5;
    float _1475 = dot(vec4(_1472, _1473, _1474, 1.0), vec4(_1406, _1409, _1412, _1415));
    float _1478 = dot(vec4(_1472, _1473, _1474, 1.0), vec4(_1405, _1408, _1411, _1414));
    float _1481 = dot(vec4(_1472, _1473, _1474, 1.0), vec4(_1404, _1407, _1410, _1413));
    float _1515;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1488 = dot(vec4(_1472, _1473, _1474, 1.0), vec4(_1095, _1099, _1102, _1105));
        float _1492 = dot(vec4(_1472, _1473, _1474, 1.0), vec4(_1097, _1100, _1103, _1106));
        float _1496 = dot(vec4(_1472, _1473, _1474, 1.0), vec4(_1098, _1101, _1104, _1107));
        float _1503 = dot(vec4(cbModelParam._m0[39u]), vec4(_1472, _1473, _1474, 1.0));
        _1515 = dot(vec3(isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0)), isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0)), isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1503) ? 0.0 : (isnan(0.0) ? _1503 : max(0.0, _1503))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1515 = 1.0;
    }
    float _1526;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1517 = dot(vec4(cbModelParam._m0[40u]), vec4(_1472, _1473, _1474, 1.0));
        _1526 = dot(vec3(isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0)), isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0)), isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1517) ? 0.0 : (isnan(0.0) ? _1517 : max(0.0, _1517))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1526 = 1.0;
    }
    float _1530 = (_1526 * cbModelParam._m0[1u].x) + (_1515 * (1.0 - cbModelParam._m0[1u].x));
    float _1540 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _556);
    float _1541 = isnan(_1540) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1540 : min(cbModelParam._m0[25u].z, _1540));
    float _1623;
    float _1625;
    float _1627;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1590 = fma(_794, cbModelParam._m0[13u].z, fma(_790, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _786)) + cbModelParam._m0[13u].w;
        float _1594 = fma(_794, cbModelParam._m0[14u].z, fma(_790, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _786)) + cbModelParam._m0[14u].w;
        float _1598 = fma(_794, cbModelParam._m0[15u].z, fma(_790, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _786)) + cbModelParam._m0[15u].w;
        float _1601 = fma(_732, cbModelParam._m0[13u].z, fma(_731, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _730));
        float _1604 = fma(_732, cbModelParam._m0[14u].z, fma(_731, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _730));
        float _1607 = fma(_732, cbModelParam._m0[15u].z, fma(_731, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _730));
        float _1635;
        if (_1601 > 0.0)
        {
            _1635 = abs((1.0 - _1590) / _1601);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1601 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1590 + 1.0) / _1601);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1635 = frontier_phi_14_12_ladder;
        }
        float _1808;
        if (_1604 > 0.0)
        {
            _1808 = abs((1.0 - _1594) / _1604);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1604 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1594 + 1.0) / _1604);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1808 = frontier_phi_23_19_ladder;
        }
        float _2104;
        if (_1607 > 0.0)
        {
            _2104 = abs((1.0 - _1598) / _1607);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1607 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1598 + 1.0) / _1607);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2104 = frontier_phi_35_30_ladder;
        }
        float _2106 = isnan(_1808) ? _1635 : (isnan(_1635) ? _1808 : min(_1635, _1808));
        float _2107 = isnan(_2104) ? _2106 : (isnan(_2106) ? _2104 : min(_2106, _2104));
        float _2111 = (_2107 * _1601) + _1590;
        float _2112 = (_2107 * _1604) + _1594;
        float _2113 = (_2107 * _1607) + _1598;
        float _2114 = _2107 * 9.9999997473787516355514526367188e-05;
        float _2116 = (-1.0) - _2114;
        float _2118 = _2114 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2113 > _2118) || ((_2113 < _2116) || ((_2112 > _2118) || ((_2112 < _2116) || ((_2111 < _2116) || (_2111 > _2118))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2258 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2113, cbModelParam._m0[9u].z, fma(_2112, cbModelParam._m0[9u].y, _2111 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2113, cbModelParam._m0[10u].z, fma(_2112, cbModelParam._m0[10u].y, _2111 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2113, cbModelParam._m0[11u].z, fma(_2112, cbModelParam._m0[11u].y, _2111 * cbModelParam._m0[11u].x))), _1541);
            frontier_phi_13_35_ladder = _2258.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2258.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2258.x * cbModelParam._m0[1u].y;
        }
        _1623 = frontier_phi_13_35_ladder_2;
        _1625 = frontier_phi_13_35_ladder_1;
        _1627 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1611 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_730, _731, _732), _1541);
        _1623 = _1611.x * cbModelParam._m0[1u].y;
        _1625 = _1611.y * cbModelParam._m0[1u].y;
        _1627 = _1611.z * cbModelParam._m0[1u].y;
    }
    float _1631 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _556);
    float _1632 = isnan(_1631) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1631 : min(cbModelParam._m0[25u].w, _1631));
    float _1723;
    float _1725;
    float _1727;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1687 = fma(_794, cbModelParam._m0[21u].z, fma(_790, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _786)) + cbModelParam._m0[21u].w;
        float _1691 = fma(_794, cbModelParam._m0[22u].z, fma(_790, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _786)) + cbModelParam._m0[22u].w;
        float _1695 = fma(_794, cbModelParam._m0[23u].z, fma(_790, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _786)) + cbModelParam._m0[23u].w;
        float _1698 = fma(_732, cbModelParam._m0[21u].z, fma(_731, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _730));
        float _1701 = fma(_732, cbModelParam._m0[22u].z, fma(_731, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _730));
        float _1704 = fma(_732, cbModelParam._m0[23u].z, fma(_731, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _730));
        float _1813;
        if (_1698 > 0.0)
        {
            _1813 = abs((1.0 - _1687) / _1698);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1698 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1687 + 1.0) / _1698);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1813 = frontier_phi_25_21_ladder;
        }
        float _2131;
        if (_1701 > 0.0)
        {
            _2131 = abs((1.0 - _1691) / _1701);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1701 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1691 + 1.0) / _1701);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2131 = frontier_phi_37_32_ladder;
        }
        float _2469;
        if (_1704 > 0.0)
        {
            _2469 = abs((1.0 - _1695) / _1704);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1704 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1695 + 1.0) / _1704);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2469 = frontier_phi_47_44_ladder;
        }
        float _2471 = isnan(_2131) ? _1813 : (isnan(_1813) ? _2131 : min(_1813, _2131));
        float _2472 = isnan(_2469) ? _2471 : (isnan(_2471) ? _2469 : min(_2471, _2469));
        float _2476 = (_2472 * _1698) + _1687;
        float _2477 = (_2472 * _1701) + _1691;
        float _2478 = (_2472 * _1704) + _1695;
        float _2479 = _2472 * 9.9999997473787516355514526367188e-05;
        float _2480 = (-1.0) - _2479;
        float _2482 = _2479 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2478 > _2482) || ((_2478 < _2480) || ((_2477 > _2482) || ((_2477 < _2480) || ((_2476 < _2480) || (_2476 > _2482))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2600 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2478, cbModelParam._m0[17u].z, fma(_2477, cbModelParam._m0[17u].y, _2476 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2478, cbModelParam._m0[18u].z, fma(_2477, cbModelParam._m0[18u].y, _2476 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2478, cbModelParam._m0[19u].z, fma(_2477, cbModelParam._m0[19u].y, _2476 * cbModelParam._m0[19u].x))), _1632);
            frontier_phi_22_47_ladder = _2600.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2600.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2600.x * cbModelParam._m0[1u].z;
        }
        _1723 = frontier_phi_22_47_ladder_2;
        _1725 = frontier_phi_22_47_ladder_1;
        _1727 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1707 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_730, _731, _732), _1632);
        _1723 = _1707.x * cbModelParam._m0[1u].z;
        _1725 = _1707.y * cbModelParam._m0[1u].z;
        _1727 = _1707.z * cbModelParam._m0[1u].z;
    }
    float _1740 = (((_757 * _706) + _758) * _722) * ((cbModelParam._m0[1u].w * (_1723 - _1623)) + _1623);
    float _1742 = (((_757 * _708) + _758) * _722) * ((cbModelParam._m0[1u].w * (_1725 - _1625)) + _1625);
    float _1744 = (((_757 * _709) + _758) * _722) * ((cbModelParam._m0[1u].w * (_1727 - _1627)) + _1627);
    float _1747 = fma(_1744, cbSceneParam._m0[89u].z, fma(_1742, cbSceneParam._m0[89u].y, _1740 * cbSceneParam._m0[89u].x));
    float _1750 = fma(_1744, cbSceneParam._m0[90u].z, fma(_1742, cbSceneParam._m0[90u].y, _1740 * cbSceneParam._m0[90u].x));
    float _1753 = fma(_1744, cbSceneParam._m0[91u].z, fma(_1742, cbSceneParam._m0[91u].y, _1740 * cbSceneParam._m0[91u].x));
    float _1787 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1791 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1795 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1799 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1800 = _1787 / _1799;
    float _1801 = _1791 / _1799;
    float _1802 = _1795 / _1799;
    float _1949;
    float _1950;
    float _1951;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1829 = ((uint(_1802 > cbSceneParam._m0[59u].y) + uint(_1802 > cbSceneParam._m0[59u].x)) + uint(_1802 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1830 = _1829 + 43u;
        uint _1838 = _1829 + 44u;
        uint _1846 = _1829 + 45u;
        uint _1854 = _1829 + 46u;
        float _1865 = fma(_1799, cbSceneParam._m0[_1830].w, fma(_1795, cbSceneParam._m0[_1830].z, fma(_1791, cbSceneParam._m0[_1830].y, _1787 * cbSceneParam._m0[_1830].x)));
        float _1869 = fma(_1799, cbSceneParam._m0[_1838].w, fma(_1795, cbSceneParam._m0[_1838].z, fma(_1791, cbSceneParam._m0[_1838].y, _1787 * cbSceneParam._m0[_1838].x)));
        float _1877 = fma(_1799, cbSceneParam._m0[_1854].w, fma(_1795, cbSceneParam._m0[_1854].z, fma(_1791, cbSceneParam._m0[_1854].y, _1787 * cbSceneParam._m0[_1854].x)));
        float _1882 = cbSceneParam._m0[33u].z * _1877;
        float _1884 = cbSceneParam._m0[33u].w * _1877;
        float _1887 = fma(_1799, cbSceneParam._m0[_1846].w, fma(_1795, cbSceneParam._m0[_1846].z, fma(_1791, cbSceneParam._m0[_1846].y, _1787 * cbSceneParam._m0[_1846].x))) / _1877;
        float _1935 = (cbSceneParam._m0[33u].x - sqrt(((_1801 * _1801) + (_1800 * _1800)) + (_1802 * _1802))) * cbSceneParam._m0[33u].y;
        float _4243 = isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0));
        float _1942 = (isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1882 + _1865) / _1877, (_1884 + _1869) / _1877), _1887), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1884 + _1865) / _1877, (_1869 - _1882) / _1877), _1887), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1865 - _1882) / _1877, (_1869 - _1884) / _1877), _1887), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1865 - _1884) / _1877, (_1882 + _1869) / _1877), _1887), 0.0)).x), vec4(0.25)));
        _1949 = 1.0 - (_1942 * cbSceneParam._m0[34u].x);
        _1950 = 1.0 - (_1942 * cbSceneParam._m0[34u].y);
        _1951 = 1.0 - (_1942 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1949 = 1.0;
        _1950 = 1.0;
        _1951 = 1.0;
    }
    float _2015;
    float _2017;
    float _2019;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2003 = fma(_1799, cbSceneParam._m0[63u].w, fma(_1795, cbSceneParam._m0[63u].z, fma(_1791, cbSceneParam._m0[63u].y, _1787 * cbSceneParam._m0[63u].x)));
        float _2004 = fma(_1799, cbSceneParam._m0[60u].w, fma(_1795, cbSceneParam._m0[60u].z, fma(_1791, cbSceneParam._m0[60u].y, _1787 * cbSceneParam._m0[60u].x))) / _2003;
        float _2005 = fma(_1799, cbSceneParam._m0[61u].w, fma(_1795, cbSceneParam._m0[61u].z, fma(_1791, cbSceneParam._m0[61u].y, _1787 * cbSceneParam._m0[61u].x))) / _2003;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2004 >= cbSceneParam._m0[64u].x) && (_2005 >= cbSceneParam._m0[64u].y)) && (_2004 <= cbSceneParam._m0[64u].z)) && (_2005 <= cbSceneParam._m0[64u].w))
        {
            float _2144 = fma(_1799, cbSceneParam._m0[62u].w, fma(_1795, cbSceneParam._m0[62u].z, fma(_1791, cbSceneParam._m0[62u].y, _1787 * cbSceneParam._m0[62u].x))) / _2003;
            float _2148 = isnan(cbSceneParam._m0[41u].w) ? _2144 : (isnan(_2144) ? cbSceneParam._m0[41u].w : max(_2144, cbSceneParam._m0[41u].w));
            float _2191 = (cbSceneParam._m0[33u].x - sqrt(((_1801 * _1801) + (_1800 * _1800)) + (_1802 * _1802))) * cbSceneParam._m0[33u].y;
            float _4259 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
            float _2198 = (isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2004, cbSceneParam._m0[33u].w + _2005), _2148), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2004, _2005 - cbSceneParam._m0[33u].z), _2148), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2004 - cbSceneParam._m0[33u].z, _2005 - cbSceneParam._m0[33u].w), _2148), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2004 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2005), _2148), 0.0)).x), vec4(0.25)));
            float _2202 = 1.0 - (_2198 * cbSceneParam._m0[34u].x);
            float _2203 = 1.0 - (_2198 * cbSceneParam._m0[34u].y);
            float _2204 = 1.0 - (_2198 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2204) ? _1951 : (isnan(_1951) ? _2204 : min(_1951, _2204));
            frontier_phi_34_33_ladder_1 = isnan(_2203) ? _1950 : (isnan(_1950) ? _2203 : min(_1950, _2203));
            frontier_phi_34_33_ladder_2 = isnan(_2202) ? _1949 : (isnan(_1949) ? _2202 : min(_1949, _2202));
        }
        else
        {
            frontier_phi_34_33_ladder = _1951;
            frontier_phi_34_33_ladder_1 = _1950;
            frontier_phi_34_33_ladder_2 = _1949;
        }
        _2015 = frontier_phi_34_33_ladder_2;
        _2017 = frontier_phi_34_33_ladder_1;
        _2019 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2015 = _1949;
        _2017 = _1950;
        _2019 = _1951;
    }
    uvec4 _2024 = floatBitsToUint(cbInstanceData._m0[_263 + 5u]);
    uint _2026 = _2024.x * 14u;
    uint _2027 = _2026 + 13u;
    float _2034 = _722 + (-1.0);
    float _2039 = (cbLight._m0[_2027].x * _2034) + 1.0;
    float _2040 = (cbLight._m0[_2027].y * _2034) + 1.0;
    float _2041 = (cbLight._m0[_2027].z * _2034) + 1.0;
    float _2042 = (cbLight._m0[_2027].w * _2034) + 1.0;
    uint _2043 = _2026 + 5u;
    float _2049 = isnan(1.0) ? _2040 : (isnan(_2040) ? 1.0 : min(_2040, 1.0));
    uint _2053 = _2026 + 4u;
    float _2063 = isnan(1.0) ? _2039 : (isnan(_2039) ? 1.0 : min(_2039, 1.0));
    uint _2067 = _2026 | 1u;
    float _2078 = dot(vec3(cbLight._m0[_2026].xyz), vec3(_553, _554, _555));
    float _2081 = dot(vec3(cbLight._m0[_2067].xyz), vec3(_553, _554, _555));
    float _4295 = isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0));
    float _4306 = isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0));
    float _2086 = (isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0))) * 0.3183098733425140380859375;
    float _2088 = (isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0))) * 0.3183098733425140380859375;
    float _2095 = ((cbLight._m0[_2043].x * _2049) * _2088) + (((cbLight._m0[_2053].x * _2015) * _2063) * _2086);
    float _2096 = ((_2049 * cbLight._m0[_2043].y) * _2088) + (((cbLight._m0[_2053].y * _2017) * _2063) * _2086);
    float _2097 = ((_2049 * cbLight._m0[_2043].z) * _2088) + (((cbLight._m0[_2053].z * _2019) * _2063) * _2086);
    uvec4 _2101 = floatBitsToUint(cbLight._m0[_2026 + 12u]);
    bool _2103 = _2101.x == 0u;
    float _2205;
    float _2207;
    float _2209;
    if (_2103)
    {
        _2205 = _2095;
        _2207 = _2096;
        _2209 = _2097;
    }
    else
    {
        uint _2213 = _2026 + 6u;
        float _2229 = (dot(vec3(cbLight._m0[_2026 + 2u].xyz), vec3(_553, _554, _555)) * 0.5) + 0.5;
        float _2230 = _2229 * _2229;
        float _4317 = isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0));
        float _2231 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
        float _2232 = isnan(1.0) ? _2041 : (isnan(_2041) ? 1.0 : min(_2041, 1.0));
        _2205 = (((cbLight._m0[_2213].x * 0.3183098733425140380859375) * _2231) * _2232) + _2095;
        _2207 = (((cbLight._m0[_2213].y * 0.3183098733425140380859375) * _2231) * _2232) + _2096;
        _2209 = (((cbLight._m0[_2213].z * 0.3183098733425140380859375) * _2231) * _2232) + _2097;
    }
    bool _2212 = _2101.y == 0u;
    float _2267;
    float _2269;
    float _2271;
    if (_2212)
    {
        _2267 = _2205;
        _2269 = _2207;
        _2271 = _2209;
    }
    else
    {
        uint _2440 = _2026 + 7u;
        float _2456 = (dot(vec3(cbLight._m0[_2026 + 3u].xyz), vec3(_553, _554, _555)) * 0.5) + 0.5;
        float _2457 = _2456 * _2456;
        float _4333 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
        float _2458 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
        float _2459 = isnan(1.0) ? _2042 : (isnan(_2042) ? 1.0 : min(_2042, 1.0));
        _2267 = (((cbLight._m0[_2440].x * 0.3183098733425140380859375) * _2458) * _2459) + _2205;
        _2269 = (((cbLight._m0[_2440].y * 0.3183098733425140380859375) * _2458) * _2459) + _2207;
        _2271 = (((cbLight._m0[_2440].z * 0.3183098733425140380859375) * _2458) * _2459) + _2209;
    }
    uint _2274 = _2026 + 8u;
    float _2287 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2026].w)) * _556) * 0.949999988079071044921875);
    float _2288 = _2287 * _2287;
    float _2289 = cbLight._m0[_2026].x + _633;
    float _2290 = cbLight._m0[_2026].y + _634;
    float _2291 = cbLight._m0[_2026].z + _635;
    float _2295 = inversesqrt(dot(vec3(_2289, _2290, _2291), vec3(_2289, _2290, _2291)));
    float _2296 = _2295 * _2289;
    float _2297 = _2295 * _2290;
    float _2298 = _2295 * _2291;
    float _2299 = dot(vec3(_553, _554, _555), vec3(cbLight._m0[_2026].xyz));
    float _4349 = isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0));
    float _2302 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
    float _4360 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    float _2303 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
    float _2304 = dot(vec3(_553, _554, _555), vec3(_2296, _2297, _2298));
    float _4371 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
    float _2307 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
    float _2308 = dot(vec3(cbLight._m0[_2026].xyz), vec3(_2296, _2297, _2298));
    float _4382 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
    float _2312 = _2288 * _2288;
    float _2316 = ((_2307 * _2307) * (_2312 + (-1.0))) + 1.0;
    float _2324 = exp2(log2(1.0 - (isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0)))) * 5.0);
    float _2325 = 0.959999978542327880859375 - _703;
    float _2327 = 0.959999978542327880859375 - _704;
    float _2328 = 0.959999978542327880859375 - _705;
    float _2335 = 1.0 - _2288;
    float _2346 = (0.5 / (((_2303 * ((_2302 * _2335) + _2288)) + 9.9999999392252902907785028219223e-09) + (((_2303 * _2335) + _2288) * _2302))) * _2302;
    float _4393 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
    float _2348 = (isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0))) * (_2312 / ((_2316 * _2316) * 3.141590118408203125));
    uint _2362 = _2026 + 9u;
    float _2373 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2067].w)) * _556) * 0.949999988079071044921875);
    float _2374 = _2373 * _2373;
    float _2375 = cbLight._m0[_2067].x + _633;
    float _2376 = cbLight._m0[_2067].y + _634;
    float _2377 = cbLight._m0[_2067].z + _635;
    float _2381 = inversesqrt(dot(vec3(_2375, _2376, _2377), vec3(_2375, _2376, _2377)));
    float _2382 = _2381 * _2375;
    float _2383 = _2381 * _2376;
    float _2384 = _2381 * _2377;
    float _2385 = dot(vec3(_553, _554, _555), vec3(cbLight._m0[_2067].xyz));
    float _4404 = isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0));
    float _2388 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
    float _2389 = dot(vec3(_553, _554, _555), vec3(_2382, _2383, _2384));
    float _4415 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
    float _2392 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
    float _2393 = dot(vec3(cbLight._m0[_2067].xyz), vec3(_2382, _2383, _2384));
    float _4426 = isnan(0.0) ? _2393 : (isnan(_2393) ? 0.0 : max(_2393, 0.0));
    float _2397 = _2374 * _2374;
    float _2401 = ((_2392 * _2392) * (_2397 + (-1.0))) + 1.0;
    float _2408 = exp2(log2(1.0 - (isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0)))) * 5.0);
    float _2415 = 1.0 - _2374;
    float _2425 = (0.5 / (((_2303 * ((_2388 * _2415) + _2374)) + 9.9999999392252902907785028219223e-09) + (((_2303 * _2415) + _2374) * _2388))) * _2388;
    float _4437 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
    float _2427 = (isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0))) * (_2397 / ((_2401 * _2401) * 3.141590118408203125));
    float _2437 = (((((_2408 * _2325) + _706) * cbLight._m0[_2362].x) * _2427) * _2049) + ((((cbLight._m0[_2274].x * _2015) * ((_2324 * _2325) + _706)) * _2348) * _2063);
    float _2438 = (((((_2408 * _2327) + _708) * cbLight._m0[_2362].y) * _2427) * _2049) + ((((cbLight._m0[_2274].y * _2017) * ((_2324 * _2327) + _708)) * _2348) * _2063);
    float _2439 = (((((_2408 * _2328) + _709) * cbLight._m0[_2362].z) * _2427) * _2049) + ((((cbLight._m0[_2274].z * _2019) * ((_2324 * _2328) + _709)) * _2348) * _2063);
    float _2495;
    float _2497;
    float _2499;
    if (_2103)
    {
        _2495 = _2437;
        _2497 = _2438;
        _2499 = _2439;
    }
    else
    {
        uint _2501 = _2026 + 2u;
        uint _2505 = _2026 + 10u;
        float _2519 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2501].w)) * _556) * 0.949999988079071044921875);
        float _2520 = _2519 * _2519;
        float _2521 = cbLight._m0[_2501].x + _633;
        float _2522 = cbLight._m0[_2501].y + _634;
        float _2523 = cbLight._m0[_2501].z + _635;
        float _2527 = inversesqrt(dot(vec3(_2521, _2522, _2523), vec3(_2521, _2522, _2523)));
        float _2528 = _2527 * _2521;
        float _2529 = _2527 * _2522;
        float _2530 = _2527 * _2523;
        float _2531 = dot(vec3(_553, _554, _555), vec3(cbLight._m0[_2501].xyz));
        float _4448 = isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0));
        float _2534 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
        float _2535 = dot(vec3(_553, _554, _555), vec3(_2528, _2529, _2530));
        float _4459 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0));
        float _2538 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
        float _2539 = dot(vec3(cbLight._m0[_2501].xyz), vec3(_2528, _2529, _2530));
        float _4470 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0));
        float _2543 = _2520 * _2520;
        float _2547 = ((_2538 * _2538) * (_2543 + (-1.0))) + 1.0;
        float _2554 = exp2(log2(1.0 - (isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0)))) * 5.0);
        float _2561 = 1.0 - _2520;
        float _2571 = (0.5 / (((_2303 * ((_2534 * _2561) + _2520)) + 9.9999999392252902907785028219223e-09) + (((_2303 * _2561) + _2520) * _2534))) * _2534;
        float _4481 = isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0));
        float _2573 = (isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0))) * (_2543 / ((_2547 * _2547) * 3.141590118408203125));
        float _2574 = isnan(1.0) ? _2041 : (isnan(_2041) ? 1.0 : min(_2041, 1.0));
        _2495 = (((((_2554 * _2325) + _706) * cbLight._m0[_2505].x) * _2573) * _2574) + _2437;
        _2497 = (((((_2554 * _2327) + _708) * cbLight._m0[_2505].y) * _2573) * _2574) + _2438;
        _2499 = (((((_2554 * _2328) + _709) * cbLight._m0[_2505].z) * _2573) * _2574) + _2439;
    }
    float _2605;
    float _2607;
    float _2609;
    if (_2212)
    {
        _2605 = _2495;
        _2607 = _2497;
        _2609 = _2499;
    }
    else
    {
        uint _2616 = _2026 + 3u;
        uint _2620 = _2026 + 11u;
        float _2634 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2616].w)) * _556) * 0.949999988079071044921875);
        float _2635 = _2634 * _2634;
        float _2636 = cbLight._m0[_2616].x + _633;
        float _2637 = cbLight._m0[_2616].y + _634;
        float _2638 = cbLight._m0[_2616].z + _635;
        float _2642 = inversesqrt(dot(vec3(_2636, _2637, _2638), vec3(_2636, _2637, _2638)));
        float _2643 = _2642 * _2636;
        float _2644 = _2642 * _2637;
        float _2645 = _2642 * _2638;
        float _2646 = dot(vec3(_553, _554, _555), vec3(cbLight._m0[_2616].xyz));
        float _4497 = isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : max(_2646, 0.0));
        float _2649 = isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0));
        float _2650 = dot(vec3(_553, _554, _555), vec3(_2643, _2644, _2645));
        float _4508 = isnan(0.0) ? _2650 : (isnan(_2650) ? 0.0 : max(_2650, 0.0));
        float _2653 = isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0));
        float _2654 = dot(vec3(cbLight._m0[_2616].xyz), vec3(_2643, _2644, _2645));
        float _4519 = isnan(0.0) ? _2654 : (isnan(_2654) ? 0.0 : max(_2654, 0.0));
        float _2658 = _2635 * _2635;
        float _2662 = ((_2653 * _2653) * (_2658 + (-1.0))) + 1.0;
        float _2669 = exp2(log2(1.0 - (isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0)))) * 5.0);
        float _2676 = 1.0 - _2635;
        float _2686 = (0.5 / (((_2303 * ((_2649 * _2676) + _2635)) + 9.9999999392252902907785028219223e-09) + (((_2303 * _2676) + _2635) * _2649))) * _2649;
        float _4530 = isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : max(_2686, 0.0));
        float _2688 = (isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0))) * (_2658 / ((_2662 * _2662) * 3.141590118408203125));
        float _2689 = isnan(1.0) ? _2042 : (isnan(_2042) ? 1.0 : min(_2042, 1.0));
        _2605 = (((((_2669 * _2325) + _706) * cbLight._m0[_2620].x) * _2688) * _2689) + _2495;
        _2607 = (((((_2669 * _2327) + _708) * cbLight._m0[_2620].y) * _2688) * _2689) + _2497;
        _2609 = (((((_2669 * _2328) + _709) * cbLight._m0[_2620].z) * _2688) * _2689) + _2499;
    }
    float _2755;
    float _2757;
    float _2759;
    float _2761;
    float _2763;
    float _2765;
    if (_2024.y == 0u)
    {
        uvec4 _2710 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2711 = _2710.x;
        uint _2722 = uint((float(_2710.y) * floor(float(uint(cbSceneParam._m0[85u].y * _642) / _2711))) + floor(float(uint(cbSceneParam._m0[85u].x * _641) / _2711)));
        float _2732 = (log2(_1802 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2733 = isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : max(_2732, 0.0));
        uint _2736 = uint(isnan(14.0) ? _2733 : (isnan(_2733) ? 14.0 : min(_2733, 14.0)));
        uvec4 _2741 = texelFetch(g_lightClusterGridBuffer, int(((_2736 << 2u) + (_2722 << 6u)) >> 2u));
        uint _2742 = _2741.x;
        uint _2743 = _2710.z;
        float _2822;
        float _2824;
        float _2826;
        float _2828;
        float _2830;
        float _2832;
        if (((((1u << ((_2743 >> 4u) & 15u)) + 4294967295u) & _2742) == 0u) || ((_2743 & 240u) == 0u))
        {
            _2822 = 0.0;
            _2824 = 0.0;
            _2826 = 0.0;
            _2828 = 0.0;
            _2830 = 0.0;
            _2832 = 0.0;
        }
        else
        {
            float _2823;
            float _2825;
            float _2827;
            float _2829;
            float _2831;
            float _2833;
            float _2967 = 0.0;
            float _2968 = 0.0;
            float _2969 = 0.0;
            float _2970 = 0.0;
            float _2971 = 0.0;
            float _2972 = 0.0;
            uint _2973 = 0u;
            uint _2982;
            bool _2983;
            for (;;)
            {
                _2982 = texelFetch(g_lightClassification, int((((_2736 << 5u) + (_2722 << 9u)) + (_2973 << 2u)) >> 2u)).x;
                _2983 = _2982 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2983)
                {
                    frontier_phi_66_pred = _2972;
                    frontier_phi_66_pred_1 = _2971;
                    frontier_phi_66_pred_2 = _2970;
                    frontier_phi_66_pred_3 = _2969;
                    frontier_phi_66_pred_4 = _2968;
                    frontier_phi_66_pred_5 = _2967;
                }
                else
                {
                    float _3091;
                    float _3092;
                    float _3093;
                    float _3094;
                    float _3095;
                    float _3096;
                    uint _3097;
                    _3091 = _2967;
                    _3092 = _2968;
                    _3093 = _2969;
                    _3094 = _2970;
                    _3095 = _2971;
                    _3096 = _2972;
                    _3097 = _2982;
                    float _3023;
                    float _3024;
                    float _3025;
                    float _3026;
                    float _3027;
                    float _3028;
                    for (;;)
                    {
                        uint _3101 = uint(findLSB(_3097)) + (_2973 << 5u);
                        uint _3098 = (_3097 + 4294967295u) & _3097;
                        uint _3103 = _3101 * 48u;
                        vec4 _3117 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3103)).x, texelFetch(g_PointLightRenderingBuffer, int(_3103 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3103 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3103 + 3u)).x));
                        uint _3123 = (_3101 * 48u) + 4u;
                        vec4 _3136 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3123)).x, texelFetch(g_PointLightRenderingBuffer, int(_3123 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3123 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3123 + 3u)).x));
                        uint _3142 = (_3101 * 48u) + 8u;
                        vec3 _3153 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3142)).x, texelFetch(g_PointLightRenderingBuffer, int(_3142 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3142 + 2u)).x));
                        float _3157 = _3117.x - _1800;
                        float _3158 = _3117.y - _1801;
                        float _3159 = _3117.z - _1802;
                        float _3160 = dot(vec3(_3157, _3158, _3159), vec3(_3157, _3158, _3159));
                        float _3163 = inversesqrt(_3160);
                        float _3164 = _3163 * _3157;
                        float _3165 = _3163 * _3158;
                        float _3166 = _3163 * _3159;
                        float _3167 = dot(vec3(_663, _666, _669), vec3(_3164, _3165, _3166));
                        float _3172 = 1.0 - (_3160 * _3117.w);
                        float _4556 = isnan(0.0) ? _3172 : (isnan(_3172) ? 0.0 : max(_3172, 0.0));
                        float _3173 = isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0));
                        float _3174 = sqrt(_3160) * _3136.w;
                        float _3177 = 1.39999997615814208984375 / (_3174 + 1.39999997615814208984375);
                        float _3178 = _3177 * _3177;
                        float _3181 = ((1.0 - _3178) * _3167) + _3178;
                        float _3184 = _3174 * _3174;
                        float _3188 = ((isnan(0.0) ? _3181 : (isnan(_3181) ? 0.0 : max(_3181, 0.0))) * _3173) / ((_3184 * 0.699999988079071044921875) + 1.0);
                        float _3192 = (-0.0) - _1800;
                        float _3193 = (-0.0) - _1801;
                        float _3194 = (-0.0) - _1802;
                        float _3198 = inversesqrt(dot(vec3(_3192, _3193, _3194), vec3(_3192, _3193, _3194)));
                        float _3199 = _3198 * _3192;
                        float _3200 = _3198 * _3193;
                        float _3201 = _3198 * _3194;
                        float _3208 = exp2(log2(1.0 / ((_3184 * 3.5) + 5.0)) * 0.25);
                        float _3209 = 1.0 - _738;
                        float _3216 = sqrt(1.0 - ((1.0 - (_3209 * _3209)) * (1.0 - (_3208 * _3208))));
                        float _3217 = _3216 * _3216;
                        float _3218 = _3217 * _3217;
                        float _3219 = _3199 + _3164;
                        float _3220 = _3200 + _3165;
                        float _3221 = _3201 + _3166;
                        float _3225 = inversesqrt(dot(vec3(_3219, _3220, _3221), vec3(_3219, _3220, _3221)));
                        float _3229 = dot(vec3(_663, _666, _669), vec3(_3199, _3200, _3201));
                        float _4572 = isnan(0.0) ? _3229 : (isnan(_3229) ? 0.0 : max(_3229, 0.0));
                        float _3232 = isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0));
                        float _3233 = dot(vec3(_663, _666, _669), vec3(_3225 * _3219, _3225 * _3220, _3225 * _3221));
                        float _4583 = isnan(0.0) ? _3233 : (isnan(_3233) ? 0.0 : max(_3233, 0.0));
                        float _3236 = isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0));
                        float _3240 = ((_3236 * _3236) * (_3218 + (-1.0))) + 1.0;
                        float _3241 = _3177 * _3217;
                        float _3242 = _3241 * _3241;
                        float _3245 = ((1.0 - _3242) * _3167) + _3242;
                        float _4594 = isnan(0.0) ? _3245 : (isnan(_3245) ? 0.0 : max(_3245, 0.0));
                        float _3246 = isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0));
                        float _3247 = 1.0 - _3217;
                        float _3257 = (0.5 / (((_3246 * ((_3232 * _3247) + _3217)) + 9.9999999392252902907785028219223e-09) + (((_3246 * _3247) + _3217) * _3232))) * _3246;
                        float _4605 = isnan(0.0) ? _3257 : (isnan(_3257) ? 0.0 : max(_3257, 0.0));
                        float _3268 = (((_3218 * 3.1415927410125732421875) * (isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0)))) / ((_3240 * _3240) * ((_3184 * 2.1991131305694580078125) + 3.141590118408203125))) * _3173;
                        _3026 = (_3188 * _3136.x) + _3094;
                        _3027 = (_3188 * _3136.y) + _3095;
                        _3028 = (_3188 * _3136.z) + _3096;
                        _3023 = (_3268 * _3153.x) + _3091;
                        _3024 = (_3268 * _3153.y) + _3092;
                        _3025 = (_3268 * _3153.z) + _3093;
                        if (_3098 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3091 = _3023;
                            _3092 = _3024;
                            _3093 = _3025;
                            _3094 = _3026;
                            _3095 = _3027;
                            _3096 = _3028;
                            _3097 = _3098;
                        }
                    }
                    frontier_phi_66_pred = _3028;
                    frontier_phi_66_pred_1 = _3027;
                    frontier_phi_66_pred_2 = _3026;
                    frontier_phi_66_pred_3 = _3025;
                    frontier_phi_66_pred_4 = _3024;
                    frontier_phi_66_pred_5 = _3023;
                }
                _2833 = frontier_phi_66_pred;
                _2831 = frontier_phi_66_pred_1;
                _2829 = frontier_phi_66_pred_2;
                _2827 = frontier_phi_66_pred_3;
                _2825 = frontier_phi_66_pred_4;
                _2823 = frontier_phi_66_pred_5;
                uint _2974 = _2973 + 1u;
                if (_2974 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2967 = _2823;
                    _2968 = _2825;
                    _2969 = _2827;
                    _2970 = _2829;
                    _2971 = _2831;
                    _2972 = _2833;
                    _2973 = _2974;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2822 = _2823;
            _2824 = _2825;
            _2826 = _2827;
            _2828 = _2829;
            _2830 = _2831;
            _2832 = _2833;
        }
        uvec4 _2836 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2837 = _2836.z;
        uint _2839 = (_2837 >> 8u) & 15u;
        float _2935;
        float _2937;
        float _2939;
        float _2941;
        float _2943;
        float _2945;
        if (((4294967295u << _2839) & _2742) == 0u)
        {
            _2935 = _2822;
            _2937 = _2824;
            _2939 = _2826;
            _2941 = _2828;
            _2943 = _2830;
            _2945 = _2832;
        }
        else
        {
            float _2960 = inversesqrt(dot(vec3(_1800, _1801, _1802), vec3(_1800, _1801, _1802)));
            float _2961 = _2960 * _1800;
            float _2962 = _2960 * _1801;
            float _2963 = _2960 * _1802;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2839 < ((_2837 >> 12u) & 15u))
            {
                float _2936;
                float _2938;
                float _2940;
                float _2942;
                float _2944;
                float _2946;
                float _3074 = _2822;
                float _3075 = _2824;
                float _3076 = _2826;
                float _3077 = _2828;
                float _3078 = _2830;
                float _3079 = _2832;
                uint _3080 = _2839;
                uint _3089;
                bool _3090;
                for (;;)
                {
                    _3089 = texelFetch(g_lightClassification, int((((_2736 << 5u) + (_2722 << 9u)) + (_3080 << 2u)) >> 2u)).x;
                    _3090 = _3089 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3090)
                    {
                        frontier_phi_72_pred = _3079;
                        frontier_phi_72_pred_1 = _3078;
                        frontier_phi_72_pred_2 = _3077;
                        frontier_phi_72_pred_3 = _3076;
                        frontier_phi_72_pred_4 = _3075;
                        frontier_phi_72_pred_5 = _3074;
                    }
                    else
                    {
                        float _3273;
                        float _3274;
                        float _3275;
                        float _3276;
                        float _3277;
                        float _3278;
                        float _3566;
                        float _3567;
                        float _3568;
                        float _3569;
                        float _3570;
                        float _3571;
                        float _3286 = _3074;
                        float _3287 = _3075;
                        float _3288 = _3076;
                        float _3289 = _3077;
                        float _3290 = _3078;
                        float _3291 = _3079;
                        uint _3292 = _3089;
                        uint _3293;
                        vec4 _3318;
                        float _3319;
                        vec4 _3334;
                        vec3 _3346;
                        vec4 _3361;
                        vec4 _3376;
                        float _3422;
                        bool _3423;
                        for (;;)
                        {
                            uint _3303 = ((_3080 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3292));
                            _3293 = (_3292 + 4294967295u) & _3292;
                            uint _3305 = _3303 * 40u;
                            _3318 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3305)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3305 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3305 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3305 + 3u)).x));
                            _3319 = _3318.w;
                            uint _3321 = (_3303 * 40u) + 4u;
                            _3334 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3321)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3321 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3321 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3321 + 3u)).x));
                            uint _3336 = (_3303 * 40u) + 8u;
                            _3346 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3336)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3336 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3336 + 2u)).x));
                            uint _3348 = (_3303 * 40u) + 16u;
                            _3361 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3348)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 3u)).x));
                            uint _3363 = (_3303 * 40u) + 20u;
                            _3376 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3363)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 3u)).x));
                            uint _3378 = (_3303 * 40u) + 24u;
                            vec4 _3391 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3378)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 3u)).x));
                            uint _3397 = (_3303 * 40u) + 28u;
                            vec4 _3410 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3397)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 3u)).x));
                            _3422 = fma(_1802, _3410.z, fma(_1801, _3410.y, _3410.x * _1800)) + _3410.w;
                            _3423 = !((fma(_1802, _3391.z, fma(_1801, _3391.y, _3391.x * _1800)) + _3391.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3423)
                            {
                                float _3450 = _3318.x - _1800;
                                float _3451 = _3318.y - _1801;
                                float _3452 = _3318.z - _1802;
                                float _3453 = dot(vec3(_3450, _3451, _3452), vec3(_3450, _3451, _3452));
                                float _3456 = inversesqrt(_3453);
                                float _3457 = _3456 * _3450;
                                float _3458 = _3456 * _3451;
                                float _3459 = _3456 * _3452;
                                float _3463 = 1.0 - (_3453 / (_3319 * _3319));
                                float _4616 = isnan(0.0) ? _3463 : (isnan(_3463) ? 0.0 : max(_3463, 0.0));
                                float _3464 = isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0));
                                float _3468 = sqrt(_3453) * _3334.w;
                                float _3470 = 1.39999997615814208984375 / (_3468 + 1.39999997615814208984375);
                                float _3471 = _3470 * _3470;
                                float _3474 = ((1.0 - _3471) * dot(vec3(_3457, _3458, _3459), vec3(_663, _666, _669))) + _3471;
                                float _3477 = _3468 * _3468;
                                float _3481 = (fma(_1802, _3361.z, fma(_1801, _3361.y, _3361.x * _1800)) + _3361.w) / _3422;
                                float _3482 = (fma(_1802, _3376.z, fma(_1801, _3376.y, _3376.x * _1800)) + _3376.w) / _3422;
                                float _3486 = 1.0 - dot(vec2(_3481, _3482), vec2(_3481, _3482));
                                float _4632 = isnan(0.0) ? _3486 : (isnan(_3486) ? 0.0 : max(_3486, 0.0));
                                float _3487 = isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0));
                                float _3488 = _3487 * (((isnan(0.0) ? _3474 : (isnan(_3474) ? 0.0 : max(_3474, 0.0))) * _3464) / ((_3477 * 0.699999988079071044921875) + 1.0));
                                float _3500 = exp2(log2(1.0 / ((_3477 * 3.5) + 5.0)) * 0.25);
                                float _3501 = 1.0 - _738;
                                float _3508 = sqrt(1.0 - ((1.0 - (_3501 * _3501)) * (1.0 - (_3500 * _3500))));
                                float _3509 = _3508 * _3508;
                                float _3510 = _3509 * _3509;
                                float _3511 = _3457 - _2961;
                                float _3512 = _3458 - _2962;
                                float _3513 = _3459 - _2963;
                                float _3517 = inversesqrt(dot(vec3(_3511, _3512, _3513), vec3(_3511, _3512, _3513)));
                                float _3521 = dot(vec3(_663, _666, _669), vec3((-0.0) - _2961, (-0.0) - _2962, (-0.0) - _2963));
                                float _4643 = isnan(0.0) ? _3521 : (isnan(_3521) ? 0.0 : max(_3521, 0.0));
                                float _3524 = isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0));
                                float _3525 = dot(vec3(_663, _666, _669), vec3(_3517 * _3511, _3517 * _3512, _3517 * _3513));
                                float _4654 = isnan(0.0) ? _3525 : (isnan(_3525) ? 0.0 : max(_3525, 0.0));
                                float _3528 = isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0));
                                float _3532 = ((_3528 * _3528) * (_3510 + (-1.0))) + 1.0;
                                float _3533 = _3470 * _3509;
                                float _3534 = _3533 * _3533;
                                float _3540 = ((1.0 - _3534) * dot(vec3(_663, _666, _669), vec3(_3457, _3458, _3459))) + _3534;
                                float _4665 = isnan(0.0) ? _3540 : (isnan(_3540) ? 0.0 : max(_3540, 0.0));
                                float _3541 = isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0));
                                float _3542 = 1.0 - _3509;
                                float _3552 = (0.5 / (((_3541 * ((_3524 * _3542) + _3509)) + 9.9999999392252902907785028219223e-09) + (((_3541 * _3542) + _3509) * _3524))) * _3541;
                                float _4676 = isnan(0.0) ? _3552 : (isnan(_3552) ? 0.0 : max(_3552, 0.0));
                                float _3562 = (_3487 * _3464) * (((_3510 * 3.1415927410125732421875) * (isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0)))) / ((_3532 * _3532) * ((_3477 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3488 * _3334.y;
                                frontier_phi_78_pred_1 = _3488 * _3334.x;
                                frontier_phi_78_pred_2 = _3562 * _3346.z;
                                frontier_phi_78_pred_3 = _3562 * _3346.y;
                                frontier_phi_78_pred_4 = _3562 * _3346.x;
                                frontier_phi_78_pred_5 = _3488 * _3334.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3570 = frontier_phi_78_pred;
                            _3569 = frontier_phi_78_pred_1;
                            _3568 = frontier_phi_78_pred_2;
                            _3567 = frontier_phi_78_pred_3;
                            _3566 = frontier_phi_78_pred_4;
                            _3571 = frontier_phi_78_pred_5;
                            _3276 = _3569 + _3289;
                            _3277 = _3570 + _3290;
                            _3278 = _3571 + _3291;
                            _3273 = _3566 + _3286;
                            _3274 = _3567 + _3287;
                            _3275 = _3568 + _3288;
                            if (_3293 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3286 = _3273;
                                _3287 = _3274;
                                _3288 = _3275;
                                _3289 = _3276;
                                _3290 = _3277;
                                _3291 = _3278;
                                _3292 = _3293;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3278;
                        frontier_phi_72_pred_1 = _3277;
                        frontier_phi_72_pred_2 = _3276;
                        frontier_phi_72_pred_3 = _3275;
                        frontier_phi_72_pred_4 = _3274;
                        frontier_phi_72_pred_5 = _3273;
                    }
                    _2946 = frontier_phi_72_pred;
                    _2944 = frontier_phi_72_pred_1;
                    _2942 = frontier_phi_72_pred_2;
                    _2940 = frontier_phi_72_pred_3;
                    _2938 = frontier_phi_72_pred_4;
                    _2936 = frontier_phi_72_pred_5;
                    uint _3081 = _3080 + 1u;
                    if (_3081 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3074 = _2936;
                        _3075 = _2938;
                        _3076 = _2940;
                        _3077 = _2942;
                        _3078 = _2944;
                        _3079 = _2946;
                        _3080 = _3081;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2946;
                frontier_phi_60_61_ladder_1 = _2944;
                frontier_phi_60_61_ladder_2 = _2940;
                frontier_phi_60_61_ladder_3 = _2938;
                frontier_phi_60_61_ladder_4 = _2936;
                frontier_phi_60_61_ladder_5 = _2942;
            }
            else
            {
                frontier_phi_60_61_ladder = _2832;
                frontier_phi_60_61_ladder_1 = _2830;
                frontier_phi_60_61_ladder_2 = _2826;
                frontier_phi_60_61_ladder_3 = _2824;
                frontier_phi_60_61_ladder_4 = _2822;
                frontier_phi_60_61_ladder_5 = _2828;
            }
            _2935 = frontier_phi_60_61_ladder_4;
            _2937 = frontier_phi_60_61_ladder_3;
            _2939 = frontier_phi_60_61_ladder_2;
            _2941 = frontier_phi_60_61_ladder_5;
            _2943 = frontier_phi_60_61_ladder_1;
            _2945 = frontier_phi_60_61_ladder;
        }
        float _2950 = isnan(1.0) ? _722 : (isnan(_722) ? 1.0 : min(_722, 1.0));
        _2755 = (_2950 * _2941) + _2267;
        _2757 = (_2950 * _2943) + _2269;
        _2759 = (_2950 * _2945) + _2271;
        _2761 = ((_2935 * _706) * _2950) + _2605;
        _2763 = ((_2937 * _708) * _2950) + _2607;
        _2765 = ((_2939 * _709) * _2950) + _2609;
    }
    else
    {
        _2755 = _2267;
        _2757 = _2269;
        _2759 = _2271;
        _2761 = _2605;
        _2763 = _2607;
        _2765 = _2609;
    }
    float _4692 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
    float _4703 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _4714 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
    uint _2785 = _263 + 6u;
    float _2793 = _641 / cbSceneParam._m0[86u].x;
    float _2794 = _642 / cbSceneParam._m0[86u].y;
    vec4 _2808 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2793, _2794, (log2((isnan(cbSceneParam._m0[77u].w) ? _575 : (isnan(_575) ? cbSceneParam._m0[77u].w : min(_575, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2810 = _2808.x;
    float _2811 = _2808.y;
    float _2812 = _2808.z;
    float _2813 = _2808.w;
    float _2885;
    float _2887;
    float _2889;
    float _2891;
    if (_575 > cbSceneParam._m0[78u].w)
    {
        float _2847 = isnan(_575) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _575 : min(cbSceneParam._m0[80u].w, _575));
        float _2848 = _2847 / _575;
        float _2859 = _2848 * _626;
        float _2860 = _627 * _2848;
        float _2861 = (-0.0) - _2860;
        float _2863 = _2848 * _628;
        float _2865 = (cbSceneParam._m0[77u].w * _2861) / _2847;
        float _2866 = _2865 + cbSceneParam._m0[79u].w;
        float _2867 = cbSceneParam._m0[79u].w - _2860;
        float _2873 = sqrt(((_2859 * _2859) + (_2860 * _2860)) + (_2863 * _2863));
        float _2876 = (1.0 - (cbSceneParam._m0[77u].w / _2847)) * _2873;
        float _2881 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2883 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3036;
        if (abs((_2861 - _2865) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3036 = ((((_2866 > 0.0) ? exp2(_2881 * _2866) : (2.0 - exp2(_2883 * _2866))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2876;
        }
        else
        {
            float _2996 = 1.0 / cbSceneParam._m0[80u].x;
            float _2997 = isnan(_2867) ? _2866 : (isnan(_2866) ? _2867 : max(_2866, _2867));
            float _2998 = isnan(_2867) ? _2866 : (isnan(_2866) ? _2867 : min(_2866, _2867));
            float _3007 = isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : min(_2997, 0.0));
            float _3008 = isnan(0.0) ? _2998 : (isnan(_2998) ? 0.0 : min(_2998, 0.0));
            _3036 = ((abs(_2873 / _2861) * cbSceneParam._m0[80u].y) * ((((_3007 - _3008) * 2.0) - ((exp2(_2881 * (isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : max(_2997, 0.0)))) - exp2(_2881 * (isnan(0.0) ? _2998 : (isnan(_2998) ? 0.0 : max(_2998, 0.0))))) * _2996)) - ((exp2(_2883 * _3007) - exp2(_2883 * _3008)) * _2996))) + (_2876 * cbSceneParam._m0[80u].z);
        }
        vec4 _3038 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2793, _2794, 1.0), 0.0);
        float _3047 = exp2((_3036 * (-1.44269502162933349609375)) * (1.0 - _3038.w));
        float _3048 = log2(_3047);
        float _3064 = log2(_2813);
        _2885 = (exp2(_3064 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3048 * cbSceneParam._m0[78u].x)) * _3038.x) / cbSceneParam._m0[78u].x)) + _2810;
        _2887 = (exp2(_3064 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3048 * cbSceneParam._m0[78u].y)) * _3038.y) / cbSceneParam._m0[78u].y)) + _2811;
        _2889 = (exp2(_3064 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3048 * cbSceneParam._m0[78u].z)) * _3038.z) / cbSceneParam._m0[78u].z)) + _2812;
        _2891 = _3047 * _2813;
    }
    else
    {
        _2885 = _2810;
        _2887 = _2811;
        _2889 = _2812;
        _2891 = _2813;
    }
    float _2903 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2904 = _2903 == 3.0;
    float _2905 = log2(_2891);
    float _2912 = exp2(_2905 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0))) * (_2755 + ((isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0))) * _722))) + ((_2761 + ((isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0))) * _1530)) * cbPerFrame._m0[3u].x));
    float _2913 = exp2(_2905 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0))) * (_2757 + ((isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0))) * _722))) + ((_2763 + ((isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0))) * _1530)) * cbPerFrame._m0[3u].x));
    float _2914 = exp2(_2905 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0))) * (_2759 + ((isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0))) * _722))) + ((_2765 + ((isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0))) * _1530)) * cbPerFrame._m0[3u].x));
    float _2923 = (_2903 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2923 * (_2904 ? _2912 : (_2912 + (cbSceneParam._m0[72u].w * _2885)));
    SV_Target.y = _2923 * (_2904 ? _2913 : (_2913 + (cbSceneParam._m0[72u].w * _2887)));
    SV_Target.z = _2923 * (_2904 ? _2914 : (_2914 + (cbSceneParam._m0[72u].w * _2889)));
    SV_Target.w = cbInstanceData._m0[_2785].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2785].w;
}


