#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1266;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _228 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _229 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _230 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _236 = inversesqrt(dot(vec3(_228, _229, _230), vec3(_228, _229, _230)));
    float _243 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _250 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _262 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _264 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _265 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3619 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    float _3630 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _3641 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    uint _275 = uint(roundEven(NORMAL.w)) * 13u;
    uint _280 = _275 + 1u;
    uint _284 = _275 + 2u;
    float _293 = sqrt(((cbInstanceData._m0[_280].x * cbInstanceData._m0[_280].x) + (cbInstanceData._m0[_275].x * cbInstanceData._m0[_275].x)) + (cbInstanceData._m0[_284].x * cbInstanceData._m0[_284].x));
    float _294 = _293 * TEXCOORD.z;
    float _295 = _293 * TEXCOORD.w;
    vec4 _308 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _294) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _295) + cbTextureTilingScale._m0[13u].w));
    vec4 _332 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _337 = _332.x * cbMtdParam._m0[11u].x;
    float _338 = _332.y * cbMtdParam._m0[11u].y;
    float _339 = _332.z * cbMtdParam._m0[11u].z;
    vec4 _358 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _294) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _295) + cbTextureTilingScale._m0[5u].w));
    vec4 _394 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _396 = _394.x;
    float _408 = dot(vec4(_396, _394.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _425 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_396 - _408) * cbMtdParam._m0[24u].y) + _408) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3652 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
    float _426 = isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0));
    float _433 = (_426 * ((_358.x * cbMtdParam._m0[12u].x) - _337)) + _337;
    float _434 = (_426 * ((_358.y * cbMtdParam._m0[12u].y) - _338)) + _338;
    float _435 = (_426 * ((_358.z * cbMtdParam._m0[12u].z) - _339)) + _339;
    float _439 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _308.x) * _433;
    float _442 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _308.y) * _434;
    float _445 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _308.z) * _435;
    float _452 = ((_433 - _439) * (isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0)))) + _439;
    float _453 = ((_434 - _442) * (isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0)))) + _442;
    float _454 = ((_435 - _445) * (isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0)))) + _445;
    vec4 _467 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _294) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _295) + cbTextureTilingScale._m0[20u].w));
    vec4 _492 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _294) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _295) + cbTextureTilingScale._m0[4u].w));
    vec4 _509 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _511 = _509.x;
    float _512 = _509.y;
    float _513 = _509.z;
    float _522 = ((_492.z - _513) * _426) + _513;
    float _525 = ((((_492.x - _511) * _426) + _511) * 2.0) + (-1.0);
    float _526 = ((((_492.y - _512) * _426) + _512) * 2.0) + (-1.0);
    float _527 = dot(vec2(_525, _526), vec2(_525, _526));
    float _3663 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _532 = sqrt(1.0 - (isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0))));
    float _537 = _525 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_467.x * 2.0) + (-1.0)));
    float _538 = _526 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_467.y * 2.0) + (-1.0)));
    vec4 _551 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _565 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _294) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _295) + cbTextureTilingScale._m0[19u].w));
    float _567 = _565.x;
    float _568 = 1.0 - _567;
    float _594 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_567 - _568) * cbMtdParam._m0[24u].w) + _568) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3674 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _595 = isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0));
    float _603 = ((((cbMtdParam._m0[10u].x - _452) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _595) + _452;
    float _604 = ((((cbMtdParam._m0[10u].y - _453) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _595) + _453;
    float _605 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _454)) * _595) + _454;
    vec4 _617 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _631 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _633 = _631.x;
    float _651 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _294) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _295) + cbTextureTilingScale._m0[9u].w)).x - _633) * _426) + _633;
    float _655 = ((_617.x - _651) * cbMtdParam._m0[19u].z) + _651;
    float _657 = _655 - (_655 * _595);
    float _662 = (((_467.z - _522) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _522;
    float _666 = ((cbMtdParam._m0[23u].y - _662) * _595) + _662;
    vec4 _685 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _294) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _295) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _691 = (_685.x * 2.0) + (-1.0);
    float _692 = (_685.y * 2.0) + (-1.0);
    float _693 = dot(vec2(_691, _692), vec2(_691, _692));
    float _3685 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _709 = (_595 * (((cbMtdParam._m0[22u].z * _537) - _537) + _691)) + _537;
    float _710 = (_595 * (((cbMtdParam._m0[22u].z * _538) - _538) + _692)) + _538;
    float _711 = (_595 * (sqrt(1.0 - (isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0)))) - _532)) + _532;
    float _713 = cbMtdParam._m0[22u].x + _551.w;
    float _716 = fma(_711, _243 * NORMAL.x, fma(_710, _250 * TANGENT.x, (_236 * _228) * _709));
    float _719 = fma(_711, _243 * NORMAL.y, fma(_710, _250 * TANGENT.y, (_236 * _229) * _709));
    float _722 = fma(_711, _243 * NORMAL.z, fma(_710, _250 * TANGENT.z, (_236 * _230) * _709));
    float _726 = inversesqrt(dot(vec3(_716, _719, _722), vec3(_716, _719, _722)));
    float _727 = _726 * _716;
    float _728 = _726 * _719;
    float _729 = _726 * _722;
    float _3696 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _730 = isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0));
    float _3707 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _3718 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _3729 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _3740 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    float _3751 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _735 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
    float _749 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _789 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _799 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _789);
    float _800 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _789);
    float _801 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _789);
    float _805 = inversesqrt(dot(vec3(_799, _800, _801), vec3(_799, _800, _801)));
    float _806 = _799 * _805;
    float _807 = _800 * _805;
    float _808 = _801 * _805;
    float _814 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _815 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _833 = fma(_729, cbSceneParam._m0[5u].z, fma(_728, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _727));
    float _836 = fma(_729, cbSceneParam._m0[6u].z, fma(_728, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _727));
    float _839 = fma(_729, cbSceneParam._m0[7u].z, fma(_728, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _727));
    uint _853 = (_275 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _859 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0)))) * cbInstanceData._m0[_853].x;
    float _860 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0)))) * cbInstanceData._m0[_853].y;
    float _861 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0)))) * cbInstanceData._m0[_853].z;
    float _3762 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
    float _862 = isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0));
    float _3773 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
    float _863 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
    float _3784 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
    float _864 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
    float _865 = 1.0 - _735;
    float _866 = _862 * _865;
    float _867 = _863 * _865;
    float _868 = _864 * _865;
    float _873 = (_862 + (-0.039999999105930328369140625)) * _735;
    float _874 = (_863 + (-0.039999999105930328369140625)) * _735;
    float _875 = (_864 + (-0.039999999105930328369140625)) * _735;
    float _876 = _873 + 0.039999999105930328369140625;
    float _878 = _874 + 0.039999999105930328369140625;
    float _879 = _875 + 0.039999999105930328369140625;
    vec4 _888 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _814, cbSceneParam._m0[86u].y * _815));
    float _892 = ((isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0))) * TEXCOORD_5.w) * _888.x;
    float _893 = dot(vec3(_727, _728, _729), vec3(_806, _807, _808));
    float _896 = _893 * 2.0;
    float _900 = (_896 * _727) - _806;
    float _901 = (_896 * _728) - _807;
    float _902 = (_896 * _729) - _808;
    float _906 = abs(dot(vec3(_806, _807, _808), vec3(_727, _728, _729)));
    float _3795 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
    float _908 = sqrt(_730);
    float _921 = exp2((_908 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_908 * 3.0));
    float _927 = (1.0 - _921) * ((_908 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _928 = _921 * _908;
    float _956 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _960 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _964 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1265;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _990 = fma(_964, cbModelParam._m0[26u].z, fma(_960, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _956));
        float _994 = fma(_964, cbModelParam._m0[27u].z, fma(_960, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _956));
        float _998 = fma(_964, cbModelParam._m0[28u].z, fma(_960, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _956));
        float _1023 = _956 + _727;
        float _1024 = _960 + _728;
        float _1025 = _964 + _729;
        float _1035 = fma(_1025, cbModelParam._m0[26u].z, fma(_1024, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1023)) - _990;
        float _1036 = fma(_1025, cbModelParam._m0[27u].z, fma(_1024, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1023)) - _994;
        float _1037 = fma(_1025, cbModelParam._m0[28u].z, fma(_1024, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1023)) - _998;
        float _1041 = inversesqrt(dot(vec3(_1035, _1036, _1037), vec3(_1035, _1036, _1037)));
        float _1054 = ((_1041 * _1035) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_990 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1055 = ((_1041 * _1036) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_994 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1056 = ((_1041 * _1037) / cbModelParam._m0[34u].z) + ((((((_998 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1059 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1054, _1055, _1056), 0.0);
        vec4 _1066 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1054, _1055, _1056), 0.0);
        vec4 _1073 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1054, _1055, _1056), 0.0);
        vec4 _1080 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1054, _1055, _1056), 0.0);
        float _1093 = exp2((_1059.w + (-0.5)) * 20.0) * 2.0;
        float _1094 = _1093 * (_1059.x + (-0.5));
        float _1095 = _1093 * (_1059.y + (-0.5));
        float _1096 = _1093 * (_1059.z + (-0.5));
        float _1103 = exp2((_1066.w + (-0.5)) * 20.0) * 2.0;
        float _1104 = _1103 * (_1066.x + (-0.5));
        float _1105 = _1103 * (_1066.y + (-0.5));
        float _1106 = _1103 * (_1066.z + (-0.5));
        float _1113 = exp2((_1073.w + (-0.5)) * 20.0) * 2.0;
        float _1114 = _1113 * (_1073.x + (-0.5));
        float _1115 = _1113 * (_1073.y + (-0.5));
        float _1116 = _1113 * (_1073.z + (-0.5));
        float _1123 = exp2((_1080.w + (-0.5)) * 20.0) * 2.0;
        float _1124 = _1123 * (_1080.x + (-0.5));
        float _1125 = _1123 * (_1080.y + (-0.5));
        float _1126 = _1123 * (_1080.z + (-0.5));
        float _1127 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1128 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1129 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1130 = _1094 * 0.5;
        float _1131 = _1104 * 0.5;
        float _1132 = _1114 * 0.5;
        float _1133 = dot(vec3(_1130, _1131, _1132), vec3(_1130, _1131, _1132));
        float _1138 = (_1133 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1133);
        float _1147 = (dot(vec3(_727, _728, _729), vec3(_1138 * _1130, _1138 * _1131, _1138 * _1132)) + 1.0) * 0.5;
        float _3821 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1157 = sqrt(((_1131 * _1131) + (_1130 * _1130)) + (_1132 * _1132)) / (_1127 + 9.9999997473787516355514526367188e-06);
        float _3832 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1158 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
        float _1159 = _1158 * 2.0;
        float _1163 = (1.0 - _1158) / (_1158 + 1.0);
        float _3843 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1164 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
        float _1173 = ((((1.0 - _1164) * (_1159 + 2.0)) * exp2(log2(isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0))) * (_1159 + 1.0))) + _1164) * _1127;
        float _1174 = _1095 * 0.5;
        float _1175 = _1105 * 0.5;
        float _1176 = _1115 * 0.5;
        float _1177 = dot(vec3(_1174, _1175, _1176), vec3(_1174, _1175, _1176));
        float _1182 = (_1177 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1177);
        float _1190 = (dot(vec3(_727, _728, _729), vec3(_1182 * _1174, _1182 * _1175, _1182 * _1176)) + 1.0) * 0.5;
        float _3854 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1199 = sqrt(((_1175 * _1175) + (_1174 * _1174)) + (_1176 * _1176)) / (_1128 + 9.9999997473787516355514526367188e-06);
        float _3865 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1200 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
        float _1201 = _1200 * 2.0;
        float _1205 = (1.0 - _1200) / (_1200 + 1.0);
        float _3876 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1206 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
        float _1215 = ((((1.0 - _1206) * (_1201 + 2.0)) * exp2(log2(isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0))) * (_1201 + 1.0))) + _1206) * _1128;
        float _1216 = _1096 * 0.5;
        float _1217 = _1106 * 0.5;
        float _1218 = _1116 * 0.5;
        float _1219 = dot(vec3(_1216, _1217, _1218), vec3(_1216, _1217, _1218));
        float _1224 = (_1219 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1219);
        float _1232 = (dot(vec3(_727, _728, _729), vec3(_1224 * _1216, _1224 * _1217, _1224 * _1218)) + 1.0) * 0.5;
        float _3887 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1241 = sqrt(((_1217 * _1217) + (_1216 * _1216)) + (_1218 * _1218)) / (_1129 + 9.9999997473787516355514526367188e-06);
        float _3898 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1242 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
        float _1243 = _1242 * 2.0;
        float _1247 = (1.0 - _1242) / (_1242 + 1.0);
        float _3909 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1248 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
        float _1257 = ((((1.0 - _1248) * (_1243 + 2.0)) * exp2(log2(isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0))) * (_1243 + 1.0))) + _1248) * _1129;
        _1265 = _1096;
        _1267 = _1095;
        _1268 = _1094;
        _1269 = _1106;
        _1270 = _1105;
        _1271 = _1104;
        _1272 = _1116;
        _1273 = _1115;
        _1274 = _1114;
        _1275 = _1129;
        _1276 = _1128;
        _1277 = _1127;
        _1278 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0)));
        _1279 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0)));
        _1280 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0)));
    }
    else
    {
        _1265 = _1266;
        _1267 = _1266;
        _1268 = _1266;
        _1269 = _1266;
        _1270 = _1266;
        _1271 = _1266;
        _1272 = _1266;
        _1273 = _1266;
        _1274 = _1266;
        _1275 = _1266;
        _1276 = _1266;
        _1277 = _1266;
        _1278 = 0.0;
        _1279 = 0.0;
        _1280 = 0.0;
    }
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1305 = fma(_964, cbModelParam._m0[30u].z, fma(_960, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _956));
        float _1309 = fma(_964, cbModelParam._m0[31u].z, fma(_960, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _956));
        float _1313 = fma(_964, cbModelParam._m0[32u].z, fma(_960, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _956));
        float _1336 = _956 + _727;
        float _1337 = _960 + _728;
        float _1338 = _964 + _729;
        float _1348 = fma(_1338, cbModelParam._m0[30u].z, fma(_1337, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1336)) - _1305;
        float _1349 = fma(_1338, cbModelParam._m0[31u].z, fma(_1337, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1336)) - _1309;
        float _1350 = fma(_1338, cbModelParam._m0[32u].z, fma(_1337, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1336)) - _1313;
        float _1354 = inversesqrt(dot(vec3(_1348, _1349, _1350), vec3(_1348, _1349, _1350)));
        float _1367 = ((_1354 * _1348) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1305 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1368 = ((_1354 * _1349) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1309 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1369 = ((_1354 * _1350) / cbModelParam._m0[35u].z) + ((((((_1313 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1371 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1367, _1368, _1369), 0.0);
        vec4 _1378 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1367, _1368, _1369), 0.0);
        vec4 _1385 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1367, _1368, _1369), 0.0);
        vec4 _1392 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1367, _1368, _1369), 0.0);
        float _1404 = exp2((_1371.w + (-0.5)) * 20.0) * 2.0;
        float _1405 = _1404 * (_1371.x + (-0.5));
        float _1406 = _1404 * (_1371.y + (-0.5));
        float _1407 = _1404 * (_1371.z + (-0.5));
        float _1414 = exp2((_1378.w + (-0.5)) * 20.0) * 2.0;
        float _1415 = _1414 * (_1378.x + (-0.5));
        float _1416 = _1414 * (_1378.y + (-0.5));
        float _1417 = _1414 * (_1378.z + (-0.5));
        float _1424 = exp2((_1385.w + (-0.5)) * 20.0) * 2.0;
        float _1425 = _1424 * (_1385.x + (-0.5));
        float _1426 = _1424 * (_1385.y + (-0.5));
        float _1427 = _1424 * (_1385.z + (-0.5));
        float _1434 = exp2((_1392.w + (-0.5)) * 20.0) * 2.0;
        float _1435 = _1434 * (_1392.x + (-0.5));
        float _1436 = _1434 * (_1392.y + (-0.5));
        float _1437 = _1434 * (_1392.z + (-0.5));
        float _1438 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1439 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1440 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1441 = _1405 * 0.5;
        float _1442 = _1415 * 0.5;
        float _1443 = _1425 * 0.5;
        float _1444 = dot(vec3(_1441, _1442, _1443), vec3(_1441, _1442, _1443));
        float _1449 = (_1444 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1444);
        float _1457 = (dot(vec3(_727, _728, _729), vec3(_1449 * _1441, _1449 * _1442, _1449 * _1443)) + 1.0) * 0.5;
        float _3950 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1466 = sqrt(((_1442 * _1442) + (_1441 * _1441)) + (_1443 * _1443)) / (_1438 + 9.9999997473787516355514526367188e-06);
        float _3961 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1467 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
        float _1468 = _1467 * 2.0;
        float _1472 = (1.0 - _1467) / (_1467 + 1.0);
        float _3972 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1473 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
        float _1482 = ((((1.0 - _1473) * (_1468 + 2.0)) * exp2(log2(isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0))) * (_1468 + 1.0))) + _1473) * _1438;
        float _1483 = _1406 * 0.5;
        float _1484 = _1416 * 0.5;
        float _1485 = _1426 * 0.5;
        float _1486 = dot(vec3(_1483, _1484, _1485), vec3(_1483, _1484, _1485));
        float _1491 = (_1486 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1486);
        float _1499 = (dot(vec3(_727, _728, _729), vec3(_1491 * _1483, _1491 * _1484, _1491 * _1485)) + 1.0) * 0.5;
        float _3983 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1508 = sqrt(((_1484 * _1484) + (_1483 * _1483)) + (_1485 * _1485)) / (_1439 + 9.9999997473787516355514526367188e-06);
        float _3994 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1509 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
        float _1510 = _1509 * 2.0;
        float _1514 = (1.0 - _1509) / (_1509 + 1.0);
        float _4005 = isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0));
        float _1515 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
        float _1524 = ((((1.0 - _1515) * (_1510 + 2.0)) * exp2(log2(isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0))) * (_1510 + 1.0))) + _1515) * _1439;
        float _1525 = _1407 * 0.5;
        float _1526 = _1417 * 0.5;
        float _1527 = _1427 * 0.5;
        float _1528 = dot(vec3(_1525, _1526, _1527), vec3(_1525, _1526, _1527));
        float _1533 = (_1528 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1528);
        float _1541 = (dot(vec3(_727, _728, _729), vec3(_1533 * _1525, _1533 * _1526, _1533 * _1527)) + 1.0) * 0.5;
        float _4016 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
        float _1550 = sqrt(((_1526 * _1526) + (_1525 * _1525)) + (_1527 * _1527)) / (_1440 + 9.9999997473787516355514526367188e-06);
        float _4027 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1551 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
        float _1552 = _1551 * 2.0;
        float _1556 = (1.0 - _1551) / (_1551 + 1.0);
        float _4038 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
        float _1557 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
        float _1566 = ((((1.0 - _1557) * (_1552 + 2.0)) * exp2(log2(isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0))) * (_1552 + 1.0))) + _1557) * _1440;
        _1574 = _1407;
        _1575 = _1406;
        _1576 = _1405;
        _1577 = _1417;
        _1578 = _1416;
        _1579 = _1415;
        _1580 = _1427;
        _1581 = _1426;
        _1582 = _1425;
        _1583 = _1440;
        _1584 = _1439;
        _1585 = _1438;
        _1586 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0)));
        _1587 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0)));
        _1588 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0)));
    }
    else
    {
        _1574 = _1266;
        _1575 = _1266;
        _1576 = _1266;
        _1577 = _1266;
        _1578 = _1266;
        _1579 = _1266;
        _1580 = _1266;
        _1581 = _1266;
        _1582 = _1266;
        _1583 = _1266;
        _1584 = _1266;
        _1585 = _1266;
        _1586 = 0.0;
        _1587 = 0.0;
        _1588 = 0.0;
    }
    float _1598 = (cbModelParam._m0[1u].x * (_1586 - _1278)) + _1278;
    float _1599 = (cbModelParam._m0[1u].x * (_1587 - _1279)) + _1279;
    float _1600 = (cbModelParam._m0[1u].x * (_1588 - _1280)) + _1280;
    float _1621 = fma(_1600, cbSceneParam._m0[89u].z, fma(_1599, cbSceneParam._m0[89u].y, _1598 * cbSceneParam._m0[89u].x));
    float _1624 = fma(_1600, cbSceneParam._m0[90u].z, fma(_1599, cbSceneParam._m0[90u].y, _1598 * cbSceneParam._m0[90u].x));
    float _1627 = fma(_1600, cbSceneParam._m0[91u].z, fma(_1599, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1598));
    float _1642 = _900 * 0.5;
    float _1643 = _901 * 0.5;
    float _1644 = _902 * 0.5;
    float _1645 = dot(vec4(_1642, _1643, _1644, 1.0), vec4(_1576, _1579, _1582, _1585));
    float _1648 = dot(vec4(_1642, _1643, _1644, 1.0), vec4(_1575, _1578, _1581, _1584));
    float _1651 = dot(vec4(_1642, _1643, _1644, 1.0), vec4(_1574, _1577, _1580, _1583));
    float _1685;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1658 = dot(vec4(_1642, _1643, _1644, 1.0), vec4(_1265, _1269, _1272, _1275));
        float _1662 = dot(vec4(_1642, _1643, _1644, 1.0), vec4(_1267, _1270, _1273, _1276));
        float _1666 = dot(vec4(_1642, _1643, _1644, 1.0), vec4(_1268, _1271, _1274, _1277));
        float _1673 = dot(vec4(cbModelParam._m0[39u]), vec4(_1642, _1643, _1644, 1.0));
        _1685 = dot(vec3(isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0)), isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0)), isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1673) ? 0.0 : (isnan(0.0) ? _1673 : max(0.0, _1673))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1685 = 1.0;
    }
    float _1696;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1687 = dot(vec4(cbModelParam._m0[40u]), vec4(_1642, _1643, _1644, 1.0));
        _1696 = dot(vec3(isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0)), isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0)), isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1687) ? 0.0 : (isnan(0.0) ? _1687 : max(0.0, _1687))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1696 = 1.0;
    }
    float _1700 = (_1696 * cbModelParam._m0[1u].x) + (_1685 * (1.0 - cbModelParam._m0[1u].x));
    float _1710 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _730);
    float _1711 = isnan(_1710) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1710 : min(cbModelParam._m0[25u].z, _1710));
    float _1793;
    float _1795;
    float _1797;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1760 = fma(_964, cbModelParam._m0[13u].z, fma(_960, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _956)) + cbModelParam._m0[13u].w;
        float _1764 = fma(_964, cbModelParam._m0[14u].z, fma(_960, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _956)) + cbModelParam._m0[14u].w;
        float _1768 = fma(_964, cbModelParam._m0[15u].z, fma(_960, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _956)) + cbModelParam._m0[15u].w;
        float _1771 = fma(_902, cbModelParam._m0[13u].z, fma(_901, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _900));
        float _1774 = fma(_902, cbModelParam._m0[14u].z, fma(_901, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _900));
        float _1777 = fma(_902, cbModelParam._m0[15u].z, fma(_901, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _900));
        float _1805;
        if (_1771 > 0.0)
        {
            _1805 = abs((1.0 - _1760) / _1771);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1771 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1760 + 1.0) / _1771);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1805 = frontier_phi_14_12_ladder;
        }
        float _2030;
        if (_1774 > 0.0)
        {
            _2030 = abs((1.0 - _1764) / _1774);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1774 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1764 + 1.0) / _1774);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2030 = frontier_phi_23_19_ladder;
        }
        float _2287;
        if (_1777 > 0.0)
        {
            _2287 = abs((1.0 - _1768) / _1777);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1777 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1768 + 1.0) / _1777);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2287 = frontier_phi_35_30_ladder;
        }
        float _2289 = isnan(_2030) ? _1805 : (isnan(_1805) ? _2030 : min(_1805, _2030));
        float _2290 = isnan(_2287) ? _2289 : (isnan(_2289) ? _2287 : min(_2289, _2287));
        float _2294 = (_2290 * _1771) + _1760;
        float _2295 = (_2290 * _1774) + _1764;
        float _2296 = (_2290 * _1777) + _1768;
        float _2297 = _2290 * 9.9999997473787516355514526367188e-05;
        float _2299 = (-1.0) - _2297;
        float _2301 = _2297 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2296 > _2301) || ((_2296 < _2299) || ((_2295 > _2301) || ((_2295 < _2299) || ((_2294 < _2299) || (_2294 > _2301))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2424 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2296, cbModelParam._m0[9u].z, fma(_2295, cbModelParam._m0[9u].y, _2294 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2296, cbModelParam._m0[10u].z, fma(_2295, cbModelParam._m0[10u].y, _2294 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2296, cbModelParam._m0[11u].z, fma(_2295, cbModelParam._m0[11u].y, _2294 * cbModelParam._m0[11u].x))), _1711);
            frontier_phi_13_35_ladder = _2424.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2424.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2424.x * cbModelParam._m0[1u].y;
        }
        _1793 = frontier_phi_13_35_ladder_2;
        _1795 = frontier_phi_13_35_ladder_1;
        _1797 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1781 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_900, _901, _902), _1711);
        _1793 = _1781.x * cbModelParam._m0[1u].y;
        _1795 = _1781.y * cbModelParam._m0[1u].y;
        _1797 = _1781.z * cbModelParam._m0[1u].y;
    }
    float _1801 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _730);
    float _1802 = isnan(_1801) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1801 : min(cbModelParam._m0[25u].w, _1801));
    float _1893;
    float _1895;
    float _1897;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1857 = fma(_964, cbModelParam._m0[21u].z, fma(_960, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _956)) + cbModelParam._m0[21u].w;
        float _1861 = fma(_964, cbModelParam._m0[22u].z, fma(_960, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _956)) + cbModelParam._m0[22u].w;
        float _1865 = fma(_964, cbModelParam._m0[23u].z, fma(_960, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _956)) + cbModelParam._m0[23u].w;
        float _1868 = fma(_902, cbModelParam._m0[21u].z, fma(_901, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _900));
        float _1871 = fma(_902, cbModelParam._m0[22u].z, fma(_901, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _900));
        float _1874 = fma(_902, cbModelParam._m0[23u].z, fma(_901, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _900));
        float _2035;
        if (_1868 > 0.0)
        {
            _2035 = abs((1.0 - _1857) / _1868);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1868 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1857 + 1.0) / _1868);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2035 = frontier_phi_25_21_ladder;
        }
        float _2314;
        if (_1871 > 0.0)
        {
            _2314 = abs((1.0 - _1861) / _1871);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1871 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1861 + 1.0) / _1871);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2314 = frontier_phi_37_32_ladder;
        }
        float _2527;
        if (_1874 > 0.0)
        {
            _2527 = abs((1.0 - _1865) / _1874);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1874 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1865 + 1.0) / _1874);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2527 = frontier_phi_46_43_ladder;
        }
        float _2529 = isnan(_2314) ? _2035 : (isnan(_2035) ? _2314 : min(_2035, _2314));
        float _2530 = isnan(_2527) ? _2529 : (isnan(_2529) ? _2527 : min(_2529, _2527));
        float _2534 = (_2530 * _1868) + _1857;
        float _2535 = (_2530 * _1871) + _1861;
        float _2536 = (_2530 * _1874) + _1865;
        float _2537 = _2530 * 9.9999997473787516355514526367188e-05;
        float _2538 = (-1.0) - _2537;
        float _2540 = _2537 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2536 > _2540) || ((_2536 < _2538) || ((_2535 > _2540) || ((_2535 < _2538) || ((_2534 < _2538) || (_2534 > _2540))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2735 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2536, cbModelParam._m0[17u].z, fma(_2535, cbModelParam._m0[17u].y, _2534 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2536, cbModelParam._m0[18u].z, fma(_2535, cbModelParam._m0[18u].y, _2534 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2536, cbModelParam._m0[19u].z, fma(_2535, cbModelParam._m0[19u].y, _2534 * cbModelParam._m0[19u].x))), _1802);
            frontier_phi_22_46_ladder = _2735.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2735.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2735.x * cbModelParam._m0[1u].z;
        }
        _1893 = frontier_phi_22_46_ladder_2;
        _1895 = frontier_phi_22_46_ladder_1;
        _1897 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1877 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_900, _901, _902), _1802);
        _1893 = _1877.x * cbModelParam._m0[1u].z;
        _1895 = _1877.y * cbModelParam._m0[1u].z;
        _1897 = _1877.z * cbModelParam._m0[1u].z;
    }
    float _1910 = (((_927 * _876) + _928) * _892) * ((cbModelParam._m0[1u].w * (_1893 - _1793)) + _1793);
    float _1912 = (((_927 * _878) + _928) * _892) * ((cbModelParam._m0[1u].w * (_1895 - _1795)) + _1795);
    float _1914 = (((_927 * _879) + _928) * _892) * ((cbModelParam._m0[1u].w * (_1897 - _1797)) + _1797);
    float _1917 = fma(_1914, cbSceneParam._m0[89u].z, fma(_1912, cbSceneParam._m0[89u].y, _1910 * cbSceneParam._m0[89u].x));
    float _1920 = fma(_1914, cbSceneParam._m0[90u].z, fma(_1912, cbSceneParam._m0[90u].y, _1910 * cbSceneParam._m0[90u].x));
    float _1923 = fma(_1914, cbSceneParam._m0[91u].z, fma(_1912, cbSceneParam._m0[91u].y, _1910 * cbSceneParam._m0[91u].x));
    vec4 _1931 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_814, _815));
    float _1933 = _1931.w;
    float _1945 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1933);
    float _1946 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1933);
    float _1947 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1933);
    uvec4 _1951 = floatBitsToUint(cbInstanceData._m0[_275 + 5u]);
    uint _1953 = _1951.x * 14u;
    uint _1954 = _1953 + 13u;
    float _1961 = _892 + (-1.0);
    float _1966 = (cbLight._m0[_1954].x * _1961) + 1.0;
    float _1967 = (cbLight._m0[_1954].y * _1961) + 1.0;
    float _1968 = (cbLight._m0[_1954].z * _1961) + 1.0;
    float _1969 = (cbLight._m0[_1954].w * _1961) + 1.0;
    uint _1970 = _1953 + 5u;
    float _1976 = isnan(1.0) ? _1967 : (isnan(_1967) ? 1.0 : min(_1967, 1.0));
    uint _1980 = _1953 + 4u;
    float _1989 = isnan(1.0) ? _1966 : (isnan(_1966) ? 1.0 : min(_1966, 1.0));
    uint _1993 = _1953 | 1u;
    float _2004 = dot(vec3(cbLight._m0[_1953].xyz), vec3(_727, _728, _729));
    float _2007 = dot(vec3(cbLight._m0[_1993].xyz), vec3(_727, _728, _729));
    float _4174 = isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0));
    float _4185 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
    float _2012 = (isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0))) * 0.3183098733425140380859375;
    float _2014 = (isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0))) * 0.3183098733425140380859375;
    float _2021 = ((cbLight._m0[_1970].x * _1976) * _2014) + (((cbLight._m0[_1980].x * _1945) * _1989) * _2012);
    float _2022 = ((_1976 * cbLight._m0[_1970].y) * _2014) + (((cbLight._m0[_1980].y * _1946) * _1989) * _2012);
    float _2023 = ((_1976 * cbLight._m0[_1970].z) * _2014) + (((cbLight._m0[_1980].z * _1947) * _1989) * _2012);
    uvec4 _2027 = floatBitsToUint(cbLight._m0[_1953 + 12u]);
    bool _2029 = _2027.x == 0u;
    float _2040;
    float _2042;
    float _2044;
    if (_2029)
    {
        _2040 = _2021;
        _2042 = _2022;
        _2044 = _2023;
    }
    else
    {
        uint _2048 = _1953 + 6u;
        float _2064 = (dot(vec3(cbLight._m0[_1953 + 2u].xyz), vec3(_727, _728, _729)) * 0.5) + 0.5;
        float _2065 = _2064 * _2064;
        float _4196 = isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0));
        float _2066 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
        float _2067 = isnan(1.0) ? _1968 : (isnan(_1968) ? 1.0 : min(_1968, 1.0));
        _2040 = (((cbLight._m0[_2048].x * 0.3183098733425140380859375) * _2066) * _2067) + _2021;
        _2042 = (((cbLight._m0[_2048].y * 0.3183098733425140380859375) * _2066) * _2067) + _2022;
        _2044 = (((cbLight._m0[_2048].z * 0.3183098733425140380859375) * _2066) * _2067) + _2023;
    }
    bool _2047 = _2027.y == 0u;
    float _2085;
    float _2087;
    float _2089;
    if (_2047)
    {
        _2085 = _2040;
        _2087 = _2042;
        _2089 = _2044;
    }
    else
    {
        uint _2258 = _1953 + 7u;
        float _2274 = (dot(vec3(cbLight._m0[_1953 + 3u].xyz), vec3(_727, _728, _729)) * 0.5) + 0.5;
        float _2275 = _2274 * _2274;
        float _4212 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
        float _2276 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
        float _2277 = isnan(1.0) ? _1969 : (isnan(_1969) ? 1.0 : min(_1969, 1.0));
        _2085 = (((cbLight._m0[_2258].x * 0.3183098733425140380859375) * _2276) * _2277) + _2040;
        _2087 = (((cbLight._m0[_2258].y * 0.3183098733425140380859375) * _2276) * _2277) + _2042;
        _2089 = (((cbLight._m0[_2258].z * 0.3183098733425140380859375) * _2276) * _2277) + _2044;
    }
    uint _2092 = _1953 + 8u;
    float _2105 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1953].w)) * _730) * 0.949999988079071044921875);
    float _2106 = _2105 * _2105;
    float _2107 = cbLight._m0[_1953].x + _806;
    float _2108 = cbLight._m0[_1953].y + _807;
    float _2109 = cbLight._m0[_1953].z + _808;
    float _2113 = inversesqrt(dot(vec3(_2107, _2108, _2109), vec3(_2107, _2108, _2109)));
    float _2114 = _2113 * _2107;
    float _2115 = _2113 * _2108;
    float _2116 = _2113 * _2109;
    float _2117 = dot(vec3(_727, _728, _729), vec3(cbLight._m0[_1953].xyz));
    float _4228 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
    float _2120 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
    float _4239 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
    float _2121 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
    float _2122 = dot(vec3(_727, _728, _729), vec3(_2114, _2115, _2116));
    float _4250 = isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0));
    float _2125 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
    float _2126 = dot(vec3(cbLight._m0[_1953].xyz), vec3(_2114, _2115, _2116));
    float _4261 = isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0));
    float _2130 = _2106 * _2106;
    float _2134 = ((_2125 * _2125) * (_2130 + (-1.0))) + 1.0;
    float _2142 = exp2(log2(1.0 - (isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0)))) * 5.0);
    float _2143 = 0.959999978542327880859375 - _873;
    float _2145 = 0.959999978542327880859375 - _874;
    float _2146 = 0.959999978542327880859375 - _875;
    float _2153 = 1.0 - _2106;
    float _2164 = (0.5 / (((_2121 * ((_2120 * _2153) + _2106)) + 9.9999999392252902907785028219223e-09) + (((_2121 * _2153) + _2106) * _2120))) * _2120;
    float _4272 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
    float _2166 = (isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0))) * (_2130 / ((_2134 * _2134) * 3.141590118408203125));
    uint _2180 = _1953 + 9u;
    float _2191 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1993].w)) * _730) * 0.949999988079071044921875);
    float _2192 = _2191 * _2191;
    float _2193 = cbLight._m0[_1993].x + _806;
    float _2194 = cbLight._m0[_1993].y + _807;
    float _2195 = cbLight._m0[_1993].z + _808;
    float _2199 = inversesqrt(dot(vec3(_2193, _2194, _2195), vec3(_2193, _2194, _2195)));
    float _2200 = _2199 * _2193;
    float _2201 = _2199 * _2194;
    float _2202 = _2199 * _2195;
    float _2203 = dot(vec3(_727, _728, _729), vec3(cbLight._m0[_1993].xyz));
    float _4283 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
    float _2206 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
    float _2207 = dot(vec3(_727, _728, _729), vec3(_2200, _2201, _2202));
    float _4294 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
    float _2210 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
    float _2211 = dot(vec3(cbLight._m0[_1993].xyz), vec3(_2200, _2201, _2202));
    float _4305 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
    float _2215 = _2192 * _2192;
    float _2219 = ((_2210 * _2210) * (_2215 + (-1.0))) + 1.0;
    float _2226 = exp2(log2(1.0 - (isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0)))) * 5.0);
    float _2233 = 1.0 - _2192;
    float _2243 = (0.5 / (((_2121 * ((_2206 * _2233) + _2192)) + 9.9999999392252902907785028219223e-09) + (((_2121 * _2233) + _2192) * _2206))) * _2206;
    float _4316 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
    float _2245 = (isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0))) * (_2215 / ((_2219 * _2219) * 3.141590118408203125));
    float _2255 = (((((_2226 * _2143) + _876) * cbLight._m0[_2180].x) * _2245) * _1976) + ((((cbLight._m0[_2092].x * _1945) * ((_2142 * _2143) + _876)) * _2166) * _1989);
    float _2256 = (((((_2226 * _2145) + _878) * cbLight._m0[_2180].y) * _2245) * _1976) + ((((cbLight._m0[_2092].y * _1946) * ((_2142 * _2145) + _878)) * _2166) * _1989);
    float _2257 = (((((_2226 * _2146) + _879) * cbLight._m0[_2180].z) * _2245) * _1976) + ((((cbLight._m0[_2092].z * _1947) * ((_2142 * _2146) + _879)) * _2166) * _1989);
    float _2319;
    float _2321;
    float _2323;
    if (_2029)
    {
        _2319 = _2255;
        _2321 = _2256;
        _2323 = _2257;
    }
    else
    {
        uint _2325 = _1953 + 2u;
        uint _2329 = _1953 + 10u;
        float _2343 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2325].w)) * _730) * 0.949999988079071044921875);
        float _2344 = _2343 * _2343;
        float _2345 = cbLight._m0[_2325].x + _806;
        float _2346 = cbLight._m0[_2325].y + _807;
        float _2347 = cbLight._m0[_2325].z + _808;
        float _2351 = inversesqrt(dot(vec3(_2345, _2346, _2347), vec3(_2345, _2346, _2347)));
        float _2352 = _2351 * _2345;
        float _2353 = _2351 * _2346;
        float _2354 = _2351 * _2347;
        float _2355 = dot(vec3(_727, _728, _729), vec3(cbLight._m0[_2325].xyz));
        float _4327 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
        float _2358 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
        float _2359 = dot(vec3(_727, _728, _729), vec3(_2352, _2353, _2354));
        float _4338 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0));
        float _2362 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
        float _2363 = dot(vec3(cbLight._m0[_2325].xyz), vec3(_2352, _2353, _2354));
        float _4349 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
        float _2367 = _2344 * _2344;
        float _2371 = ((_2362 * _2362) * (_2367 + (-1.0))) + 1.0;
        float _2378 = exp2(log2(1.0 - (isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0)))) * 5.0);
        float _2385 = 1.0 - _2344;
        float _2395 = (0.5 / (((_2121 * ((_2358 * _2385) + _2344)) + 9.9999999392252902907785028219223e-09) + (((_2121 * _2385) + _2344) * _2358))) * _2358;
        float _4360 = isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : max(_2395, 0.0));
        float _2397 = (isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0))) * (_2367 / ((_2371 * _2371) * 3.141590118408203125));
        float _2398 = isnan(1.0) ? _1968 : (isnan(_1968) ? 1.0 : min(_1968, 1.0));
        _2319 = (((((_2378 * _2143) + _876) * cbLight._m0[_2329].x) * _2397) * _2398) + _2255;
        _2321 = (((((_2378 * _2145) + _878) * cbLight._m0[_2329].y) * _2397) * _2398) + _2256;
        _2323 = (((((_2378 * _2146) + _879) * cbLight._m0[_2329].z) * _2397) * _2398) + _2257;
    }
    float _2433;
    float _2435;
    float _2437;
    if (_2047)
    {
        _2433 = _2319;
        _2435 = _2321;
        _2437 = _2323;
    }
    else
    {
        uint _2444 = _1953 + 3u;
        uint _2448 = _1953 + 11u;
        float _2462 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2444].w)) * _730) * 0.949999988079071044921875);
        float _2463 = _2462 * _2462;
        float _2464 = cbLight._m0[_2444].x + _806;
        float _2465 = cbLight._m0[_2444].y + _807;
        float _2466 = cbLight._m0[_2444].z + _808;
        float _2470 = inversesqrt(dot(vec3(_2464, _2465, _2466), vec3(_2464, _2465, _2466)));
        float _2471 = _2470 * _2464;
        float _2472 = _2470 * _2465;
        float _2473 = _2470 * _2466;
        float _2474 = dot(vec3(_727, _728, _729), vec3(cbLight._m0[_2444].xyz));
        float _4376 = isnan(0.0) ? _2474 : (isnan(_2474) ? 0.0 : max(_2474, 0.0));
        float _2477 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
        float _2478 = dot(vec3(_727, _728, _729), vec3(_2471, _2472, _2473));
        float _4387 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0));
        float _2481 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
        float _2482 = dot(vec3(cbLight._m0[_2444].xyz), vec3(_2471, _2472, _2473));
        float _4398 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0));
        float _2486 = _2463 * _2463;
        float _2490 = ((_2481 * _2481) * (_2486 + (-1.0))) + 1.0;
        float _2497 = exp2(log2(1.0 - (isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0)))) * 5.0);
        float _2504 = 1.0 - _2463;
        float _2514 = (0.5 / (((_2121 * ((_2477 * _2504) + _2463)) + 9.9999999392252902907785028219223e-09) + (((_2121 * _2504) + _2463) * _2477))) * _2477;
        float _4409 = isnan(0.0) ? _2514 : (isnan(_2514) ? 0.0 : max(_2514, 0.0));
        float _2516 = (isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0))) * (_2486 / ((_2490 * _2490) * 3.141590118408203125));
        float _2517 = isnan(1.0) ? _1969 : (isnan(_1969) ? 1.0 : min(_1969, 1.0));
        _2433 = (((((_2497 * _2143) + _876) * cbLight._m0[_2448].x) * _2516) * _2517) + _2319;
        _2435 = (((((_2497 * _2145) + _878) * cbLight._m0[_2448].y) * _2516) * _2517) + _2321;
        _2437 = (((((_2497 * _2146) + _879) * cbLight._m0[_2448].z) * _2516) * _2517) + _2323;
    }
    float _2652;
    float _2654;
    float _2656;
    float _2658;
    float _2660;
    float _2662;
    if (_1951.y == 0u)
    {
        float _2592 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2593 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2592;
        float _2594 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2592;
        float _2595 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2592;
        uvec4 _2607 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2608 = _2607.x;
        uint _2619 = uint((float(_2607.y) * floor(float(uint(cbSceneParam._m0[85u].y * _815) / _2608))) + floor(float(uint(cbSceneParam._m0[85u].x * _814) / _2608)));
        float _2629 = (log2(_2595 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2630 = isnan(0.0) ? _2629 : (isnan(_2629) ? 0.0 : max(_2629, 0.0));
        uint _2633 = uint(isnan(14.0) ? _2630 : (isnan(_2630) ? 14.0 : min(_2630, 14.0)));
        uvec4 _2638 = texelFetch(g_lightClusterGridBuffer, int(((_2633 << 2u) + (_2619 << 6u)) >> 2u));
        uint _2639 = _2638.x;
        uint _2640 = _2607.z;
        float _2740;
        float _2742;
        float _2744;
        float _2746;
        float _2748;
        float _2750;
        if (((((1u << ((_2640 >> 4u) & 15u)) + 4294967295u) & _2639) == 0u) || ((_2640 & 240u) == 0u))
        {
            _2740 = 0.0;
            _2742 = 0.0;
            _2744 = 0.0;
            _2746 = 0.0;
            _2748 = 0.0;
            _2750 = 0.0;
        }
        else
        {
            float _2741;
            float _2743;
            float _2745;
            float _2747;
            float _2749;
            float _2751;
            float _2885 = 0.0;
            float _2886 = 0.0;
            float _2887 = 0.0;
            float _2888 = 0.0;
            float _2889 = 0.0;
            float _2890 = 0.0;
            uint _2891 = 0u;
            uint _2900;
            bool _2901;
            for (;;)
            {
                _2900 = texelFetch(g_lightClassification, int((((_2633 << 5u) + (_2619 << 9u)) + (_2891 << 2u)) >> 2u)).x;
                _2901 = _2900 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2901)
                {
                    frontier_phi_61_pred = _2885;
                    frontier_phi_61_pred_1 = _2890;
                    frontier_phi_61_pred_2 = _2889;
                    frontier_phi_61_pred_3 = _2888;
                    frontier_phi_61_pred_4 = _2887;
                    frontier_phi_61_pred_5 = _2886;
                }
                else
                {
                    float _3009;
                    float _3010;
                    float _3011;
                    float _3012;
                    float _3013;
                    float _3014;
                    uint _3015;
                    _3009 = _2885;
                    _3010 = _2886;
                    _3011 = _2887;
                    _3012 = _2888;
                    _3013 = _2889;
                    _3014 = _2890;
                    _3015 = _2900;
                    float _2941;
                    float _2942;
                    float _2943;
                    float _2944;
                    float _2945;
                    float _2946;
                    for (;;)
                    {
                        uint _3019 = uint(findLSB(_3015)) + (_2891 << 5u);
                        uint _3016 = (_3015 + 4294967295u) & _3015;
                        uint _3021 = _3019 * 48u;
                        vec4 _3035 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3021)).x, texelFetch(g_PointLightRenderingBuffer, int(_3021 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3021 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3021 + 3u)).x));
                        uint _3041 = (_3019 * 48u) + 4u;
                        vec4 _3054 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3041)).x, texelFetch(g_PointLightRenderingBuffer, int(_3041 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3041 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3041 + 3u)).x));
                        uint _3060 = (_3019 * 48u) + 8u;
                        vec3 _3071 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3060)).x, texelFetch(g_PointLightRenderingBuffer, int(_3060 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3060 + 2u)).x));
                        float _3075 = _3035.x - _2593;
                        float _3076 = _3035.y - _2594;
                        float _3077 = _3035.z - _2595;
                        float _3078 = dot(vec3(_3075, _3076, _3077), vec3(_3075, _3076, _3077));
                        float _3081 = inversesqrt(_3078);
                        float _3082 = _3081 * _3075;
                        float _3083 = _3081 * _3076;
                        float _3084 = _3081 * _3077;
                        float _3085 = dot(vec3(_833, _836, _839), vec3(_3082, _3083, _3084));
                        float _3090 = 1.0 - (_3078 * _3035.w);
                        float _4435 = isnan(0.0) ? _3090 : (isnan(_3090) ? 0.0 : max(_3090, 0.0));
                        float _3091 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
                        float _3092 = sqrt(_3078) * _3054.w;
                        float _3095 = 1.39999997615814208984375 / (_3092 + 1.39999997615814208984375);
                        float _3096 = _3095 * _3095;
                        float _3099 = ((1.0 - _3096) * _3085) + _3096;
                        float _3102 = _3092 * _3092;
                        float _3106 = ((isnan(0.0) ? _3099 : (isnan(_3099) ? 0.0 : max(_3099, 0.0))) * _3091) / ((_3102 * 0.699999988079071044921875) + 1.0);
                        float _3110 = (-0.0) - _2593;
                        float _3111 = (-0.0) - _2594;
                        float _3112 = (-0.0) - _2595;
                        float _3116 = inversesqrt(dot(vec3(_3110, _3111, _3112), vec3(_3110, _3111, _3112)));
                        float _3117 = _3116 * _3110;
                        float _3118 = _3116 * _3111;
                        float _3119 = _3116 * _3112;
                        float _3127 = exp2(log2(1.0 / ((_3102 * 3.5) + 5.0)) * 0.25);
                        float _3128 = 1.0 - _908;
                        float _3135 = sqrt(1.0 - ((1.0 - (_3128 * _3128)) * (1.0 - (_3127 * _3127))));
                        float _3136 = _3135 * _3135;
                        float _3137 = _3136 * _3136;
                        float _3138 = _3117 + _3082;
                        float _3139 = _3118 + _3083;
                        float _3140 = _3119 + _3084;
                        float _3144 = inversesqrt(dot(vec3(_3138, _3139, _3140), vec3(_3138, _3139, _3140)));
                        float _3148 = dot(vec3(_833, _836, _839), vec3(_3117, _3118, _3119));
                        float _4451 = isnan(0.0) ? _3148 : (isnan(_3148) ? 0.0 : max(_3148, 0.0));
                        float _3151 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
                        float _3152 = dot(vec3(_833, _836, _839), vec3(_3144 * _3138, _3144 * _3139, _3144 * _3140));
                        float _4462 = isnan(0.0) ? _3152 : (isnan(_3152) ? 0.0 : max(_3152, 0.0));
                        float _3155 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
                        float _3159 = ((_3155 * _3155) * (_3137 + (-1.0))) + 1.0;
                        float _3160 = _3095 * _3136;
                        float _3161 = _3160 * _3160;
                        float _3164 = ((1.0 - _3161) * _3085) + _3161;
                        float _4473 = isnan(0.0) ? _3164 : (isnan(_3164) ? 0.0 : max(_3164, 0.0));
                        float _3165 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
                        float _3166 = 1.0 - _3136;
                        float _3176 = (0.5 / (((_3165 * ((_3151 * _3166) + _3136)) + 9.9999999392252902907785028219223e-09) + (((_3165 * _3166) + _3136) * _3151))) * _3165;
                        float _4484 = isnan(0.0) ? _3176 : (isnan(_3176) ? 0.0 : max(_3176, 0.0));
                        float _3187 = (((_3137 * 3.1415927410125732421875) * (isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0)))) / ((_3159 * _3159) * ((_3102 * 2.1991131305694580078125) + 3.141590118408203125))) * _3091;
                        _2944 = (_3106 * _3054.x) + _3012;
                        _2945 = (_3106 * _3054.y) + _3013;
                        _2946 = (_3106 * _3054.z) + _3014;
                        _2941 = (_3187 * _3071.x) + _3009;
                        _2942 = (_3187 * _3071.y) + _3010;
                        _2943 = (_3187 * _3071.z) + _3011;
                        if (_3016 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3009 = _2941;
                            _3010 = _2942;
                            _3011 = _2943;
                            _3012 = _2944;
                            _3013 = _2945;
                            _3014 = _2946;
                            _3015 = _3016;
                        }
                    }
                    frontier_phi_61_pred = _2941;
                    frontier_phi_61_pred_1 = _2946;
                    frontier_phi_61_pred_2 = _2945;
                    frontier_phi_61_pred_3 = _2944;
                    frontier_phi_61_pred_4 = _2943;
                    frontier_phi_61_pred_5 = _2942;
                }
                _2741 = frontier_phi_61_pred;
                _2751 = frontier_phi_61_pred_1;
                _2749 = frontier_phi_61_pred_2;
                _2747 = frontier_phi_61_pred_3;
                _2745 = frontier_phi_61_pred_4;
                _2743 = frontier_phi_61_pred_5;
                uint _2892 = _2891 + 1u;
                if (_2892 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2885 = _2741;
                    _2886 = _2743;
                    _2887 = _2745;
                    _2888 = _2747;
                    _2889 = _2749;
                    _2890 = _2751;
                    _2891 = _2892;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2740 = _2741;
            _2742 = _2743;
            _2744 = _2745;
            _2746 = _2747;
            _2748 = _2749;
            _2750 = _2751;
        }
        uvec4 _2754 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2755 = _2754.z;
        uint _2757 = (_2755 >> 8u) & 15u;
        float _2853;
        float _2855;
        float _2857;
        float _2859;
        float _2861;
        float _2863;
        if (((4294967295u << _2757) & _2639) == 0u)
        {
            _2853 = _2740;
            _2855 = _2742;
            _2857 = _2744;
            _2859 = _2746;
            _2861 = _2748;
            _2863 = _2750;
        }
        else
        {
            float _2878 = inversesqrt(dot(vec3(_2593, _2594, _2595), vec3(_2593, _2594, _2595)));
            float _2879 = _2878 * _2593;
            float _2880 = _2878 * _2594;
            float _2881 = _2878 * _2595;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2757 < ((_2755 >> 12u) & 15u))
            {
                float _2854;
                float _2856;
                float _2858;
                float _2860;
                float _2862;
                float _2864;
                float _2992 = _2740;
                float _2993 = _2742;
                float _2994 = _2744;
                float _2995 = _2746;
                float _2996 = _2748;
                float _2997 = _2750;
                uint _2998 = _2757;
                uint _3007;
                bool _3008;
                for (;;)
                {
                    _3007 = texelFetch(g_lightClassification, int((((_2633 << 5u) + (_2619 << 9u)) + (_2998 << 2u)) >> 2u)).x;
                    _3008 = _3007 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3008)
                    {
                        frontier_phi_67_pred = _2995;
                        frontier_phi_67_pred_1 = _2996;
                        frontier_phi_67_pred_2 = _2997;
                        frontier_phi_67_pred_3 = _2994;
                        frontier_phi_67_pred_4 = _2993;
                        frontier_phi_67_pred_5 = _2992;
                    }
                    else
                    {
                        float _3192;
                        float _3193;
                        float _3194;
                        float _3195;
                        float _3196;
                        float _3197;
                        float _3485;
                        float _3486;
                        float _3487;
                        float _3488;
                        float _3489;
                        float _3490;
                        float _3205 = _2992;
                        float _3206 = _2993;
                        float _3207 = _2994;
                        float _3208 = _2995;
                        float _3209 = _2996;
                        float _3210 = _2997;
                        uint _3211 = _3007;
                        uint _3212;
                        vec4 _3237;
                        float _3238;
                        vec4 _3253;
                        vec3 _3265;
                        vec4 _3280;
                        vec4 _3295;
                        float _3341;
                        bool _3342;
                        for (;;)
                        {
                            uint _3222 = ((_2998 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3211));
                            _3212 = (_3211 + 4294967295u) & _3211;
                            uint _3224 = _3222 * 40u;
                            _3237 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3224)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 3u)).x));
                            _3238 = _3237.w;
                            uint _3240 = (_3222 * 40u) + 4u;
                            _3253 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3240)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 3u)).x));
                            uint _3255 = (_3222 * 40u) + 8u;
                            _3265 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3255)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3255 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3255 + 2u)).x));
                            uint _3267 = (_3222 * 40u) + 16u;
                            _3280 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3267)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3267 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3267 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3267 + 3u)).x));
                            uint _3282 = (_3222 * 40u) + 20u;
                            _3295 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3282)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 3u)).x));
                            uint _3297 = (_3222 * 40u) + 24u;
                            vec4 _3310 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3297)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 3u)).x));
                            uint _3316 = (_3222 * 40u) + 28u;
                            vec4 _3329 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3316)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 3u)).x));
                            _3341 = fma(_2595, _3329.z, fma(_2594, _3329.y, _3329.x * _2593)) + _3329.w;
                            _3342 = !((fma(_2595, _3310.z, fma(_2594, _3310.y, _3310.x * _2593)) + _3310.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3342)
                            {
                                float _3369 = _3237.x - _2593;
                                float _3370 = _3237.y - _2594;
                                float _3371 = _3237.z - _2595;
                                float _3372 = dot(vec3(_3369, _3370, _3371), vec3(_3369, _3370, _3371));
                                float _3375 = inversesqrt(_3372);
                                float _3376 = _3375 * _3369;
                                float _3377 = _3375 * _3370;
                                float _3378 = _3375 * _3371;
                                float _3382 = 1.0 - (_3372 / (_3238 * _3238));
                                float _4495 = isnan(0.0) ? _3382 : (isnan(_3382) ? 0.0 : max(_3382, 0.0));
                                float _3383 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
                                float _3387 = sqrt(_3372) * _3253.w;
                                float _3389 = 1.39999997615814208984375 / (_3387 + 1.39999997615814208984375);
                                float _3390 = _3389 * _3389;
                                float _3393 = ((1.0 - _3390) * dot(vec3(_3376, _3377, _3378), vec3(_833, _836, _839))) + _3390;
                                float _3396 = _3387 * _3387;
                                float _3400 = (fma(_2595, _3280.z, fma(_2594, _3280.y, _3280.x * _2593)) + _3280.w) / _3341;
                                float _3401 = (fma(_2595, _3295.z, fma(_2594, _3295.y, _3295.x * _2593)) + _3295.w) / _3341;
                                float _3405 = 1.0 - dot(vec2(_3400, _3401), vec2(_3400, _3401));
                                float _4511 = isnan(0.0) ? _3405 : (isnan(_3405) ? 0.0 : max(_3405, 0.0));
                                float _3406 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
                                float _3407 = _3406 * (((isnan(0.0) ? _3393 : (isnan(_3393) ? 0.0 : max(_3393, 0.0))) * _3383) / ((_3396 * 0.699999988079071044921875) + 1.0));
                                float _3419 = exp2(log2(1.0 / ((_3396 * 3.5) + 5.0)) * 0.25);
                                float _3420 = 1.0 - _908;
                                float _3427 = sqrt(1.0 - ((1.0 - (_3420 * _3420)) * (1.0 - (_3419 * _3419))));
                                float _3428 = _3427 * _3427;
                                float _3429 = _3428 * _3428;
                                float _3430 = _3376 - _2879;
                                float _3431 = _3377 - _2880;
                                float _3432 = _3378 - _2881;
                                float _3436 = inversesqrt(dot(vec3(_3430, _3431, _3432), vec3(_3430, _3431, _3432)));
                                float _3440 = dot(vec3(_833, _836, _839), vec3((-0.0) - _2879, (-0.0) - _2880, (-0.0) - _2881));
                                float _4522 = isnan(0.0) ? _3440 : (isnan(_3440) ? 0.0 : max(_3440, 0.0));
                                float _3443 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
                                float _3444 = dot(vec3(_833, _836, _839), vec3(_3436 * _3430, _3436 * _3431, _3436 * _3432));
                                float _4533 = isnan(0.0) ? _3444 : (isnan(_3444) ? 0.0 : max(_3444, 0.0));
                                float _3447 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
                                float _3451 = ((_3447 * _3447) * (_3429 + (-1.0))) + 1.0;
                                float _3452 = _3389 * _3428;
                                float _3453 = _3452 * _3452;
                                float _3459 = ((1.0 - _3453) * dot(vec3(_833, _836, _839), vec3(_3376, _3377, _3378))) + _3453;
                                float _4544 = isnan(0.0) ? _3459 : (isnan(_3459) ? 0.0 : max(_3459, 0.0));
                                float _3460 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
                                float _3461 = 1.0 - _3428;
                                float _3471 = (0.5 / (((_3460 * ((_3443 * _3461) + _3428)) + 9.9999999392252902907785028219223e-09) + (((_3460 * _3461) + _3428) * _3443))) * _3460;
                                float _4555 = isnan(0.0) ? _3471 : (isnan(_3471) ? 0.0 : max(_3471, 0.0));
                                float _3481 = (_3406 * _3383) * (((_3429 * 3.1415927410125732421875) * (isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0)))) / ((_3451 * _3451) * ((_3396 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3481 * _3265.x;
                                frontier_phi_73_pred_1 = _3481 * _3265.y;
                                frontier_phi_73_pred_2 = _3407 * _3253.z;
                                frontier_phi_73_pred_3 = _3407 * _3253.y;
                                frontier_phi_73_pred_4 = _3407 * _3253.x;
                                frontier_phi_73_pred_5 = _3481 * _3265.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3485 = frontier_phi_73_pred;
                            _3486 = frontier_phi_73_pred_1;
                            _3490 = frontier_phi_73_pred_2;
                            _3489 = frontier_phi_73_pred_3;
                            _3488 = frontier_phi_73_pred_4;
                            _3487 = frontier_phi_73_pred_5;
                            _3195 = _3488 + _3208;
                            _3196 = _3489 + _3209;
                            _3197 = _3490 + _3210;
                            _3192 = _3485 + _3205;
                            _3193 = _3486 + _3206;
                            _3194 = _3487 + _3207;
                            if (_3212 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3205 = _3192;
                                _3206 = _3193;
                                _3207 = _3194;
                                _3208 = _3195;
                                _3209 = _3196;
                                _3210 = _3197;
                                _3211 = _3212;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3195;
                        frontier_phi_67_pred_1 = _3196;
                        frontier_phi_67_pred_2 = _3197;
                        frontier_phi_67_pred_3 = _3194;
                        frontier_phi_67_pred_4 = _3193;
                        frontier_phi_67_pred_5 = _3192;
                    }
                    _2860 = frontier_phi_67_pred;
                    _2862 = frontier_phi_67_pred_1;
                    _2864 = frontier_phi_67_pred_2;
                    _2858 = frontier_phi_67_pred_3;
                    _2856 = frontier_phi_67_pred_4;
                    _2854 = frontier_phi_67_pred_5;
                    uint _2999 = _2998 + 1u;
                    if (_2999 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2992 = _2854;
                        _2993 = _2856;
                        _2994 = _2858;
                        _2995 = _2860;
                        _2996 = _2862;
                        _2997 = _2864;
                        _2998 = _2999;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2862;
                frontier_phi_55_56_ladder_1 = _2864;
                frontier_phi_55_56_ladder_2 = _2860;
                frontier_phi_55_56_ladder_3 = _2858;
                frontier_phi_55_56_ladder_4 = _2856;
                frontier_phi_55_56_ladder_5 = _2854;
            }
            else
            {
                frontier_phi_55_56_ladder = _2748;
                frontier_phi_55_56_ladder_1 = _2750;
                frontier_phi_55_56_ladder_2 = _2746;
                frontier_phi_55_56_ladder_3 = _2744;
                frontier_phi_55_56_ladder_4 = _2742;
                frontier_phi_55_56_ladder_5 = _2740;
            }
            _2853 = frontier_phi_55_56_ladder_5;
            _2855 = frontier_phi_55_56_ladder_4;
            _2857 = frontier_phi_55_56_ladder_3;
            _2859 = frontier_phi_55_56_ladder_2;
            _2861 = frontier_phi_55_56_ladder;
            _2863 = frontier_phi_55_56_ladder_1;
        }
        float _2868 = isnan(1.0) ? _892 : (isnan(_892) ? 1.0 : min(_892, 1.0));
        _2652 = (_2868 * _2859) + _2085;
        _2654 = (_2868 * _2861) + _2087;
        _2656 = (_2868 * _2863) + _2089;
        _2658 = ((_2853 * _876) * _2868) + _2433;
        _2660 = ((_2855 * _878) * _2868) + _2435;
        _2662 = ((_2857 * _879) * _2868) + _2437;
    }
    else
    {
        _2652 = _2085;
        _2654 = _2087;
        _2656 = _2089;
        _2658 = _2433;
        _2660 = _2435;
        _2662 = _2437;
    }
    float _4571 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
    float _4582 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
    float _4593 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
    uint _2682 = _275 + 6u;
    float _2690 = _814 / cbSceneParam._m0[86u].x;
    float _2691 = _815 / cbSceneParam._m0[86u].y;
    vec4 _2705 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2690, _2691, (log2((isnan(cbSceneParam._m0[77u].w) ? _749 : (isnan(_749) ? cbSceneParam._m0[77u].w : min(_749, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2707 = _2705.x;
    float _2708 = _2705.y;
    float _2709 = _2705.z;
    float _2710 = _2705.w;
    float _2803;
    float _2805;
    float _2807;
    float _2809;
    if (_749 > cbSceneParam._m0[78u].w)
    {
        float _2765 = isnan(_749) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _749 : min(cbSceneParam._m0[80u].w, _749));
        float _2766 = _2765 / _749;
        float _2777 = _2766 * _799;
        float _2778 = _800 * _2766;
        float _2779 = (-0.0) - _2778;
        float _2781 = _2766 * _801;
        float _2783 = (cbSceneParam._m0[77u].w * _2779) / _2765;
        float _2784 = _2783 + cbSceneParam._m0[79u].w;
        float _2785 = cbSceneParam._m0[79u].w - _2778;
        float _2791 = sqrt(((_2777 * _2777) + (_2778 * _2778)) + (_2781 * _2781));
        float _2794 = (1.0 - (cbSceneParam._m0[77u].w / _2765)) * _2791;
        float _2799 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2801 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2954;
        if (abs((_2779 - _2783) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2954 = ((((_2784 > 0.0) ? exp2(_2799 * _2784) : (2.0 - exp2(_2801 * _2784))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2794;
        }
        else
        {
            float _2914 = 1.0 / cbSceneParam._m0[80u].x;
            float _2915 = isnan(_2785) ? _2784 : (isnan(_2784) ? _2785 : max(_2784, _2785));
            float _2916 = isnan(_2785) ? _2784 : (isnan(_2784) ? _2785 : min(_2784, _2785));
            float _2925 = isnan(0.0) ? _2915 : (isnan(_2915) ? 0.0 : min(_2915, 0.0));
            float _2926 = isnan(0.0) ? _2916 : (isnan(_2916) ? 0.0 : min(_2916, 0.0));
            _2954 = ((abs(_2791 / _2779) * cbSceneParam._m0[80u].y) * ((((_2925 - _2926) * 2.0) - ((exp2(_2799 * (isnan(0.0) ? _2915 : (isnan(_2915) ? 0.0 : max(_2915, 0.0)))) - exp2(_2799 * (isnan(0.0) ? _2916 : (isnan(_2916) ? 0.0 : max(_2916, 0.0))))) * _2914)) - ((exp2(_2801 * _2925) - exp2(_2801 * _2926)) * _2914))) + (_2794 * cbSceneParam._m0[80u].z);
        }
        vec4 _2956 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2690, _2691, 1.0), 0.0);
        float _2965 = exp2((_2954 * (-1.44269502162933349609375)) * (1.0 - _2956.w));
        float _2966 = log2(_2965);
        float _2982 = log2(_2710);
        _2803 = (exp2(_2982 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2966 * cbSceneParam._m0[78u].x)) * _2956.x) / cbSceneParam._m0[78u].x)) + _2707;
        _2805 = (exp2(_2982 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2966 * cbSceneParam._m0[78u].y)) * _2956.y) / cbSceneParam._m0[78u].y)) + _2708;
        _2807 = (exp2(_2982 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2966 * cbSceneParam._m0[78u].z)) * _2956.z) / cbSceneParam._m0[78u].z)) + _2709;
        _2809 = _2965 * _2710;
    }
    else
    {
        _2803 = _2707;
        _2805 = _2708;
        _2807 = _2709;
        _2809 = _2710;
    }
    float _2821 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2822 = _2821 == 3.0;
    float _2823 = log2(_2809);
    float _2830 = exp2(_2823 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0))) * (_2652 + ((isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0))) * _892))) + ((_2658 + ((isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0))) * _1700)) * cbPerFrame._m0[3u].x));
    float _2831 = exp2(_2823 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0))) * (_2654 + ((isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0))) * _892))) + ((_2660 + ((isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0))) * _1700)) * cbPerFrame._m0[3u].x));
    float _2832 = exp2(_2823 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0))) * (_2656 + ((isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0))) * _892))) + ((_2662 + ((isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0))) * _1700)) * cbPerFrame._m0[3u].x));
    float _2841 = (_2821 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2841 * (_2822 ? _2830 : (_2830 + (cbSceneParam._m0[72u].w * _2803)));
    SV_Target.y = _2841 * (_2822 ? _2831 : (_2831 + (cbSceneParam._m0[72u].w * _2805)));
    SV_Target.z = _2841 * (_2822 ? _2832 : (_2832 + (cbSceneParam._m0[72u].w * _2807)));
    SV_Target.w = cbInstanceData._m0[_2682].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2682].w;
}


