#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1230;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _210 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _211 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _212 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _218 = inversesqrt(dot(vec3(_210, _211, _212), vec3(_210, _211, _212)));
    float _219 = _218 * _210;
    float _220 = _218 * _211;
    float _221 = _218 * _212;
    float _225 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _226 = _225 * NORMAL.x;
    float _227 = _225 * NORMAL.y;
    float _228 = _225 * NORMAL.z;
    float _232 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _233 = _232 * TANGENT.x;
    float _234 = _232 * TANGENT.y;
    float _235 = _232 * TANGENT.z;
    uint _238 = uint(roundEven(NORMAL.w)) * 13u;
    uint _244 = _238 + 1u;
    uint _248 = _238 + 2u;
    float _257 = sqrt(((cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x) + (cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x)) + (cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x));
    float _258 = _257 * TEXCOORD.z;
    float _259 = _257 * TEXCOORD.w;
    vec4 _279 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _285 = _279.x * cbMtdParam._m0[11u].x;
    float _286 = _279.y * cbMtdParam._m0[11u].y;
    float _287 = _279.z * cbMtdParam._m0[11u].z;
    vec4 _306 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _258) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _259) + cbTextureTilingScale._m0[5u].w));
    vec4 _344 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _346 = _344.x;
    float _358 = dot(vec4(_346, _344.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _375 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_346 - _358) * cbMtdParam._m0[24u].y) + _358) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3580 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _376 = isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0));
    float _383 = (_376 * ((_306.x * cbMtdParam._m0[12u].x) - _285)) + _285;
    float _384 = (_376 * ((_306.y * cbMtdParam._m0[12u].y) - _286)) + _286;
    float _385 = (_376 * ((_306.z * cbMtdParam._m0[12u].z) - _287)) + _287;
    vec4 _404 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _258) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _259) + cbTextureTilingScale._m0[14u].w));
    vec4 _424 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _258) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _259) + cbTextureTilingScale._m0[4u].w));
    vec4 _441 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _443 = _441.x;
    float _444 = _441.y;
    float _445 = _441.z;
    float _454 = ((_424.z - _445) * _376) + _445;
    float _457 = ((((_424.x - _443) * _376) + _443) * 2.0) + (-1.0);
    float _459 = ((((_424.y - _444) * _376) + _444) * 2.0) + (-1.0);
    float _460 = dot(vec2(_457, _459), vec2(_457, _459));
    float _3591 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _465 = sqrt(1.0 - (isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0))));
    vec4 _481 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _493 = (((_481.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _457;
    float _494 = (((_481.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _459;
    float _497 = fma(_465, _226, fma(_494, _233, _493 * _219));
    float _500 = fma(_465, _227, fma(_494, _234, _493 * _220));
    float _503 = fma(_465, _228, fma(_494, _235, _493 * _221));
    float _507 = inversesqrt(dot(vec3(_497, _500, _503), vec3(_497, _500, _503)));
    vec4 _534 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _258) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _259) + cbTextureTilingScale._m0[11u].w));
    float _536 = _534.x;
    float _537 = 1.0 - _536;
    float _541 = ((_536 - _537) * cbMtdParam._m0[24u].z) + _537;
    float _543 = (cbMtdParam._m0[19u].x + dot(vec4(_507 * _497, _507 * _500, _507 * _503, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_541 * cbMtdParam._m0[21u].z);
    float _3602 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _544 = isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0));
    float _559 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_541 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3613 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _560 = isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0));
    float _564 = ((_544 * ((_404.x * cbMtdParam._m0[18u].x) - _383)) * _560) + _383;
    float _565 = ((_544 * ((_404.y * cbMtdParam._m0[18u].y) - _384)) * _560) + _384;
    float _566 = ((_544 * ((_404.z * cbMtdParam._m0[18u].z) - _385)) * _560) + _385;
    vec4 _578 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _592 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _594 = _592.x;
    float _612 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _258) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _259) + cbTextureTilingScale._m0[9u].w)).x - _594) * _376) + _594;
    float _616 = ((_578.x - _612) * cbMtdParam._m0[19u].z) + _612;
    float _619 = _616 - ((_560 * _544) * _616);
    float _623 = (cbMtdParam._m0[19u].w * (_481.z - _454)) + _454;
    vec4 _636 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _258) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _259) + cbTextureTilingScale._m0[15u].w));
    float _643 = (_636.x * 2.0) + (-1.0);
    float _644 = (_636.y * 2.0) + (-1.0);
    float _645 = dot(vec2(_643, _644), vec2(_643, _644));
    float _3624 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _654 = (((_636.z - _623) * _544) * _560) + _623;
    float _669 = (((cbMtdParam._m0[21u].x * _493) + ((_643 - _493) * _544)) * _560) + _493;
    float _670 = (((cbMtdParam._m0[21u].x * _494) + ((_644 - _494) * _544)) * _560) + _494;
    float _671 = (((sqrt(1.0 - (isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0)))) - _465) * _544) * _560) + _465;
    float _676 = cbMtdParam._m0[22u].x + _481.w;
    float _679 = fma(_671, _226, fma(_670, _233, _669 * _219));
    float _682 = fma(_671, _227, fma(_670, _234, _669 * _220));
    float _685 = fma(_671, _228, fma(_670, _235, _669 * _221));
    float _689 = inversesqrt(dot(vec3(_679, _682, _685), vec3(_679, _682, _685)));
    float _690 = _689 * _679;
    float _691 = _689 * _682;
    float _692 = _689 * _685;
    float _3635 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _693 = isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0));
    float _3646 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
    float _3657 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _3668 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _3679 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _3690 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _698 = isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0));
    float _712 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _753 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _763 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _753);
    float _764 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _753);
    float _765 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _753);
    float _769 = inversesqrt(dot(vec3(_763, _764, _765), vec3(_763, _764, _765)));
    float _770 = _763 * _769;
    float _771 = _764 * _769;
    float _772 = _765 * _769;
    float _778 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _779 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _797 = fma(_692, cbSceneParam._m0[5u].z, fma(_691, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _690));
    float _800 = fma(_692, cbSceneParam._m0[6u].z, fma(_691, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _690));
    float _803 = fma(_692, cbSceneParam._m0[7u].z, fma(_691, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _690));
    uint _817 = (_238 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _823 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0)))) * cbInstanceData._m0[_817].x;
    float _824 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0)))) * cbInstanceData._m0[_817].y;
    float _825 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0)))) * cbInstanceData._m0[_817].z;
    float _3701 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
    float _826 = isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0));
    float _3712 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
    float _827 = isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0));
    float _3723 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
    float _828 = isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0));
    float _829 = 1.0 - _698;
    float _830 = _826 * _829;
    float _831 = _827 * _829;
    float _832 = _828 * _829;
    float _837 = (_826 + (-0.039999999105930328369140625)) * _698;
    float _838 = (_827 + (-0.039999999105930328369140625)) * _698;
    float _839 = (_828 + (-0.039999999105930328369140625)) * _698;
    float _840 = _837 + 0.039999999105930328369140625;
    float _842 = _838 + 0.039999999105930328369140625;
    float _843 = _839 + 0.039999999105930328369140625;
    vec4 _852 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _778, cbSceneParam._m0[86u].y * _779));
    float _856 = ((isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0))) * TEXCOORD_5.w) * _852.x;
    float _857 = dot(vec3(_690, _691, _692), vec3(_770, _771, _772));
    float _860 = _857 * 2.0;
    float _864 = (_860 * _690) - _770;
    float _865 = (_860 * _691) - _771;
    float _866 = (_860 * _692) - _772;
    float _870 = abs(dot(vec3(_770, _771, _772), vec3(_690, _691, _692)));
    float _3734 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
    float _872 = sqrt(_693);
    float _885 = exp2((_872 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_872 * 3.0));
    float _891 = (1.0 - _885) * ((_872 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _892 = _885 * _872;
    float _920 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _924 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _928 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1229;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _954 = fma(_928, cbModelParam._m0[26u].z, fma(_924, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _920));
        float _958 = fma(_928, cbModelParam._m0[27u].z, fma(_924, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _920));
        float _962 = fma(_928, cbModelParam._m0[28u].z, fma(_924, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _920));
        float _987 = _920 + _690;
        float _988 = _924 + _691;
        float _989 = _928 + _692;
        float _999 = fma(_989, cbModelParam._m0[26u].z, fma(_988, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _987)) - _954;
        float _1000 = fma(_989, cbModelParam._m0[27u].z, fma(_988, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _987)) - _958;
        float _1001 = fma(_989, cbModelParam._m0[28u].z, fma(_988, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _987)) - _962;
        float _1005 = inversesqrt(dot(vec3(_999, _1000, _1001), vec3(_999, _1000, _1001)));
        float _1018 = ((_1005 * _999) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_954 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1019 = ((_1005 * _1000) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_958 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1020 = ((_1005 * _1001) / cbModelParam._m0[34u].z) + ((((((_962 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1023 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1018, _1019, _1020), 0.0);
        vec4 _1030 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1018, _1019, _1020), 0.0);
        vec4 _1037 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1018, _1019, _1020), 0.0);
        vec4 _1044 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1018, _1019, _1020), 0.0);
        float _1057 = exp2((_1023.w + (-0.5)) * 20.0) * 2.0;
        float _1058 = _1057 * (_1023.x + (-0.5));
        float _1059 = _1057 * (_1023.y + (-0.5));
        float _1060 = _1057 * (_1023.z + (-0.5));
        float _1067 = exp2((_1030.w + (-0.5)) * 20.0) * 2.0;
        float _1068 = _1067 * (_1030.x + (-0.5));
        float _1069 = _1067 * (_1030.y + (-0.5));
        float _1070 = _1067 * (_1030.z + (-0.5));
        float _1077 = exp2((_1037.w + (-0.5)) * 20.0) * 2.0;
        float _1078 = _1077 * (_1037.x + (-0.5));
        float _1079 = _1077 * (_1037.y + (-0.5));
        float _1080 = _1077 * (_1037.z + (-0.5));
        float _1087 = exp2((_1044.w + (-0.5)) * 20.0) * 2.0;
        float _1088 = _1087 * (_1044.x + (-0.5));
        float _1089 = _1087 * (_1044.y + (-0.5));
        float _1090 = _1087 * (_1044.z + (-0.5));
        float _1091 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1092 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1093 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1094 = _1058 * 0.5;
        float _1095 = _1068 * 0.5;
        float _1096 = _1078 * 0.5;
        float _1097 = dot(vec3(_1094, _1095, _1096), vec3(_1094, _1095, _1096));
        float _1102 = (_1097 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1097);
        float _1111 = (dot(vec3(_690, _691, _692), vec3(_1102 * _1094, _1102 * _1095, _1102 * _1096)) + 1.0) * 0.5;
        float _3760 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1121 = sqrt(((_1095 * _1095) + (_1094 * _1094)) + (_1096 * _1096)) / (_1091 + 9.9999997473787516355514526367188e-06);
        float _3771 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1122 = isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0));
        float _1123 = _1122 * 2.0;
        float _1127 = (1.0 - _1122) / (_1122 + 1.0);
        float _3782 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1128 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
        float _1137 = ((((1.0 - _1128) * (_1123 + 2.0)) * exp2(log2(isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0))) * (_1123 + 1.0))) + _1128) * _1091;
        float _1138 = _1059 * 0.5;
        float _1139 = _1069 * 0.5;
        float _1140 = _1079 * 0.5;
        float _1141 = dot(vec3(_1138, _1139, _1140), vec3(_1138, _1139, _1140));
        float _1146 = (_1141 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1141);
        float _1154 = (dot(vec3(_690, _691, _692), vec3(_1146 * _1138, _1146 * _1139, _1146 * _1140)) + 1.0) * 0.5;
        float _3793 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1163 = sqrt(((_1139 * _1139) + (_1138 * _1138)) + (_1140 * _1140)) / (_1092 + 9.9999997473787516355514526367188e-06);
        float _3804 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1164 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
        float _1165 = _1164 * 2.0;
        float _1169 = (1.0 - _1164) / (_1164 + 1.0);
        float _3815 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1170 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
        float _1179 = ((((1.0 - _1170) * (_1165 + 2.0)) * exp2(log2(isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0))) * (_1165 + 1.0))) + _1170) * _1092;
        float _1180 = _1060 * 0.5;
        float _1181 = _1070 * 0.5;
        float _1182 = _1080 * 0.5;
        float _1183 = dot(vec3(_1180, _1181, _1182), vec3(_1180, _1181, _1182));
        float _1188 = (_1183 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1183);
        float _1196 = (dot(vec3(_690, _691, _692), vec3(_1188 * _1180, _1188 * _1181, _1188 * _1182)) + 1.0) * 0.5;
        float _3826 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1205 = sqrt(((_1181 * _1181) + (_1180 * _1180)) + (_1182 * _1182)) / (_1093 + 9.9999997473787516355514526367188e-06);
        float _3837 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1206 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
        float _1207 = _1206 * 2.0;
        float _1211 = (1.0 - _1206) / (_1206 + 1.0);
        float _3848 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1212 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
        float _1221 = ((((1.0 - _1212) * (_1207 + 2.0)) * exp2(log2(isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0))) * (_1207 + 1.0))) + _1212) * _1093;
        _1229 = _1060;
        _1231 = _1059;
        _1232 = _1058;
        _1233 = _1070;
        _1234 = _1069;
        _1235 = _1068;
        _1236 = _1080;
        _1237 = _1079;
        _1238 = _1078;
        _1239 = _1093;
        _1240 = _1092;
        _1241 = _1091;
        _1242 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0)));
        _1243 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0)));
        _1244 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0)));
    }
    else
    {
        _1229 = _1230;
        _1231 = _1230;
        _1232 = _1230;
        _1233 = _1230;
        _1234 = _1230;
        _1235 = _1230;
        _1236 = _1230;
        _1237 = _1230;
        _1238 = _1230;
        _1239 = _1230;
        _1240 = _1230;
        _1241 = _1230;
        _1242 = 0.0;
        _1243 = 0.0;
        _1244 = 0.0;
    }
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    float _1548;
    float _1549;
    float _1550;
    float _1551;
    float _1552;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1269 = fma(_928, cbModelParam._m0[30u].z, fma(_924, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _920));
        float _1273 = fma(_928, cbModelParam._m0[31u].z, fma(_924, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _920));
        float _1277 = fma(_928, cbModelParam._m0[32u].z, fma(_924, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _920));
        float _1300 = _920 + _690;
        float _1301 = _924 + _691;
        float _1302 = _928 + _692;
        float _1312 = fma(_1302, cbModelParam._m0[30u].z, fma(_1301, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1300)) - _1269;
        float _1313 = fma(_1302, cbModelParam._m0[31u].z, fma(_1301, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1300)) - _1273;
        float _1314 = fma(_1302, cbModelParam._m0[32u].z, fma(_1301, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1300)) - _1277;
        float _1318 = inversesqrt(dot(vec3(_1312, _1313, _1314), vec3(_1312, _1313, _1314)));
        float _1331 = ((_1318 * _1312) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1269 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1332 = ((_1318 * _1313) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1273 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1333 = ((_1318 * _1314) / cbModelParam._m0[35u].z) + ((((((_1277 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1335 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1331, _1332, _1333), 0.0);
        vec4 _1342 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1331, _1332, _1333), 0.0);
        vec4 _1349 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1331, _1332, _1333), 0.0);
        vec4 _1356 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1331, _1332, _1333), 0.0);
        float _1368 = exp2((_1335.w + (-0.5)) * 20.0) * 2.0;
        float _1369 = _1368 * (_1335.x + (-0.5));
        float _1370 = _1368 * (_1335.y + (-0.5));
        float _1371 = _1368 * (_1335.z + (-0.5));
        float _1378 = exp2((_1342.w + (-0.5)) * 20.0) * 2.0;
        float _1379 = _1378 * (_1342.x + (-0.5));
        float _1380 = _1378 * (_1342.y + (-0.5));
        float _1381 = _1378 * (_1342.z + (-0.5));
        float _1388 = exp2((_1349.w + (-0.5)) * 20.0) * 2.0;
        float _1389 = _1388 * (_1349.x + (-0.5));
        float _1390 = _1388 * (_1349.y + (-0.5));
        float _1391 = _1388 * (_1349.z + (-0.5));
        float _1398 = exp2((_1356.w + (-0.5)) * 20.0) * 2.0;
        float _1399 = _1398 * (_1356.x + (-0.5));
        float _1400 = _1398 * (_1356.y + (-0.5));
        float _1401 = _1398 * (_1356.z + (-0.5));
        float _1402 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1403 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1404 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1405 = _1369 * 0.5;
        float _1406 = _1379 * 0.5;
        float _1407 = _1389 * 0.5;
        float _1408 = dot(vec3(_1405, _1406, _1407), vec3(_1405, _1406, _1407));
        float _1413 = (_1408 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1408);
        float _1421 = (dot(vec3(_690, _691, _692), vec3(_1413 * _1405, _1413 * _1406, _1413 * _1407)) + 1.0) * 0.5;
        float _3889 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1430 = sqrt(((_1406 * _1406) + (_1405 * _1405)) + (_1407 * _1407)) / (_1402 + 9.9999997473787516355514526367188e-06);
        float _3900 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1431 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
        float _1432 = _1431 * 2.0;
        float _1436 = (1.0 - _1431) / (_1431 + 1.0);
        float _3911 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1437 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
        float _1446 = ((((1.0 - _1437) * (_1432 + 2.0)) * exp2(log2(isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0))) * (_1432 + 1.0))) + _1437) * _1402;
        float _1447 = _1370 * 0.5;
        float _1448 = _1380 * 0.5;
        float _1449 = _1390 * 0.5;
        float _1450 = dot(vec3(_1447, _1448, _1449), vec3(_1447, _1448, _1449));
        float _1455 = (_1450 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1450);
        float _1463 = (dot(vec3(_690, _691, _692), vec3(_1455 * _1447, _1455 * _1448, _1455 * _1449)) + 1.0) * 0.5;
        float _3922 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1472 = sqrt(((_1448 * _1448) + (_1447 * _1447)) + (_1449 * _1449)) / (_1403 + 9.9999997473787516355514526367188e-06);
        float _3933 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1473 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
        float _1474 = _1473 * 2.0;
        float _1478 = (1.0 - _1473) / (_1473 + 1.0);
        float _3944 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1479 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
        float _1488 = ((((1.0 - _1479) * (_1474 + 2.0)) * exp2(log2(isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0))) * (_1474 + 1.0))) + _1479) * _1403;
        float _1489 = _1371 * 0.5;
        float _1490 = _1381 * 0.5;
        float _1491 = _1391 * 0.5;
        float _1492 = dot(vec3(_1489, _1490, _1491), vec3(_1489, _1490, _1491));
        float _1497 = (_1492 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1492);
        float _1505 = (dot(vec3(_690, _691, _692), vec3(_1497 * _1489, _1497 * _1490, _1497 * _1491)) + 1.0) * 0.5;
        float _3955 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1514 = sqrt(((_1490 * _1490) + (_1489 * _1489)) + (_1491 * _1491)) / (_1404 + 9.9999997473787516355514526367188e-06);
        float _3966 = isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0));
        float _1515 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
        float _1516 = _1515 * 2.0;
        float _1520 = (1.0 - _1515) / (_1515 + 1.0);
        float _3977 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
        float _1521 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
        float _1530 = ((((1.0 - _1521) * (_1516 + 2.0)) * exp2(log2(isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0))) * (_1516 + 1.0))) + _1521) * _1404;
        _1538 = _1371;
        _1539 = _1370;
        _1540 = _1369;
        _1541 = _1381;
        _1542 = _1380;
        _1543 = _1379;
        _1544 = _1391;
        _1545 = _1390;
        _1546 = _1389;
        _1547 = _1404;
        _1548 = _1403;
        _1549 = _1402;
        _1550 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0)));
        _1551 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0)));
        _1552 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0)));
    }
    else
    {
        _1538 = _1230;
        _1539 = _1230;
        _1540 = _1230;
        _1541 = _1230;
        _1542 = _1230;
        _1543 = _1230;
        _1544 = _1230;
        _1545 = _1230;
        _1546 = _1230;
        _1547 = _1230;
        _1548 = _1230;
        _1549 = _1230;
        _1550 = 0.0;
        _1551 = 0.0;
        _1552 = 0.0;
    }
    float _1562 = (cbModelParam._m0[1u].x * (_1550 - _1242)) + _1242;
    float _1563 = (cbModelParam._m0[1u].x * (_1551 - _1243)) + _1243;
    float _1564 = (cbModelParam._m0[1u].x * (_1552 - _1244)) + _1244;
    float _1585 = fma(_1564, cbSceneParam._m0[89u].z, fma(_1563, cbSceneParam._m0[89u].y, _1562 * cbSceneParam._m0[89u].x));
    float _1588 = fma(_1564, cbSceneParam._m0[90u].z, fma(_1563, cbSceneParam._m0[90u].y, _1562 * cbSceneParam._m0[90u].x));
    float _1591 = fma(_1564, cbSceneParam._m0[91u].z, fma(_1563, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1562));
    float _1606 = _864 * 0.5;
    float _1607 = _865 * 0.5;
    float _1608 = _866 * 0.5;
    float _1609 = dot(vec4(_1606, _1607, _1608, 1.0), vec4(_1540, _1543, _1546, _1549));
    float _1612 = dot(vec4(_1606, _1607, _1608, 1.0), vec4(_1539, _1542, _1545, _1548));
    float _1615 = dot(vec4(_1606, _1607, _1608, 1.0), vec4(_1538, _1541, _1544, _1547));
    float _1649;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1622 = dot(vec4(_1606, _1607, _1608, 1.0), vec4(_1229, _1233, _1236, _1239));
        float _1626 = dot(vec4(_1606, _1607, _1608, 1.0), vec4(_1231, _1234, _1237, _1240));
        float _1630 = dot(vec4(_1606, _1607, _1608, 1.0), vec4(_1232, _1235, _1238, _1241));
        float _1637 = dot(vec4(cbModelParam._m0[39u]), vec4(_1606, _1607, _1608, 1.0));
        _1649 = dot(vec3(isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0)), isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0)), isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1637) ? 0.0 : (isnan(0.0) ? _1637 : max(0.0, _1637))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1649 = 1.0;
    }
    float _1660;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1651 = dot(vec4(cbModelParam._m0[40u]), vec4(_1606, _1607, _1608, 1.0));
        _1660 = dot(vec3(isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0)), isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0)), isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1651) ? 0.0 : (isnan(0.0) ? _1651 : max(0.0, _1651))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1660 = 1.0;
    }
    float _1664 = (_1660 * cbModelParam._m0[1u].x) + (_1649 * (1.0 - cbModelParam._m0[1u].x));
    float _1674 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _693);
    float _1675 = isnan(_1674) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1674 : min(cbModelParam._m0[25u].z, _1674));
    float _1755;
    float _1757;
    float _1759;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1722 = fma(_928, cbModelParam._m0[13u].z, fma(_924, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _920)) + cbModelParam._m0[13u].w;
        float _1726 = fma(_928, cbModelParam._m0[14u].z, fma(_924, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _920)) + cbModelParam._m0[14u].w;
        float _1730 = fma(_928, cbModelParam._m0[15u].z, fma(_924, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _920)) + cbModelParam._m0[15u].w;
        float _1733 = fma(_866, cbModelParam._m0[13u].z, fma(_865, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _864));
        float _1736 = fma(_866, cbModelParam._m0[14u].z, fma(_865, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _864));
        float _1739 = fma(_866, cbModelParam._m0[15u].z, fma(_865, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _864));
        float _1767;
        if (_1733 > 0.0)
        {
            _1767 = abs((1.0 - _1722) / _1733);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1733 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1722 + 1.0) / _1733);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1767 = frontier_phi_14_12_ladder;
        }
        float _1990;
        if (_1736 > 0.0)
        {
            _1990 = abs((1.0 - _1726) / _1736);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1736 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1726 + 1.0) / _1736);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1990 = frontier_phi_23_19_ladder;
        }
        float _2247;
        if (_1739 > 0.0)
        {
            _2247 = abs((1.0 - _1730) / _1739);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1739 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1730 + 1.0) / _1739);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2247 = frontier_phi_35_30_ladder;
        }
        float _2249 = isnan(_1990) ? _1767 : (isnan(_1767) ? _1990 : min(_1767, _1990));
        float _2250 = isnan(_2247) ? _2249 : (isnan(_2249) ? _2247 : min(_2249, _2247));
        float _2254 = (_2250 * _1733) + _1722;
        float _2255 = (_2250 * _1736) + _1726;
        float _2256 = (_2250 * _1739) + _1730;
        float _2257 = _2250 * 9.9999997473787516355514526367188e-05;
        float _2259 = (-1.0) - _2257;
        float _2261 = _2257 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2256 > _2261) || ((_2256 < _2259) || ((_2255 > _2261) || ((_2255 < _2259) || ((_2254 < _2259) || (_2254 > _2261))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2384 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2256, cbModelParam._m0[9u].z, fma(_2255, cbModelParam._m0[9u].y, _2254 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2256, cbModelParam._m0[10u].z, fma(_2255, cbModelParam._m0[10u].y, _2254 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2256, cbModelParam._m0[11u].z, fma(_2255, cbModelParam._m0[11u].y, _2254 * cbModelParam._m0[11u].x))), _1675);
            frontier_phi_13_35_ladder = _2384.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2384.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2384.x * cbModelParam._m0[1u].y;
        }
        _1755 = frontier_phi_13_35_ladder_2;
        _1757 = frontier_phi_13_35_ladder_1;
        _1759 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1743 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_864, _865, _866), _1675);
        _1755 = _1743.x * cbModelParam._m0[1u].y;
        _1757 = _1743.y * cbModelParam._m0[1u].y;
        _1759 = _1743.z * cbModelParam._m0[1u].y;
    }
    float _1763 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _693);
    float _1764 = isnan(_1763) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1763 : min(cbModelParam._m0[25u].w, _1763));
    float _1853;
    float _1855;
    float _1857;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1817 = fma(_928, cbModelParam._m0[21u].z, fma(_924, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _920)) + cbModelParam._m0[21u].w;
        float _1821 = fma(_928, cbModelParam._m0[22u].z, fma(_924, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _920)) + cbModelParam._m0[22u].w;
        float _1825 = fma(_928, cbModelParam._m0[23u].z, fma(_924, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _920)) + cbModelParam._m0[23u].w;
        float _1828 = fma(_866, cbModelParam._m0[21u].z, fma(_865, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _864));
        float _1831 = fma(_866, cbModelParam._m0[22u].z, fma(_865, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _864));
        float _1834 = fma(_866, cbModelParam._m0[23u].z, fma(_865, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _864));
        float _1995;
        if (_1828 > 0.0)
        {
            _1995 = abs((1.0 - _1817) / _1828);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1828 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1817 + 1.0) / _1828);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1995 = frontier_phi_25_21_ladder;
        }
        float _2274;
        if (_1831 > 0.0)
        {
            _2274 = abs((1.0 - _1821) / _1831);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1831 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1821 + 1.0) / _1831);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2274 = frontier_phi_37_32_ladder;
        }
        float _2487;
        if (_1834 > 0.0)
        {
            _2487 = abs((1.0 - _1825) / _1834);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1834 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1825 + 1.0) / _1834);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2487 = frontier_phi_46_43_ladder;
        }
        float _2489 = isnan(_2274) ? _1995 : (isnan(_1995) ? _2274 : min(_1995, _2274));
        float _2490 = isnan(_2487) ? _2489 : (isnan(_2489) ? _2487 : min(_2489, _2487));
        float _2494 = (_2490 * _1828) + _1817;
        float _2495 = (_2490 * _1831) + _1821;
        float _2496 = (_2490 * _1834) + _1825;
        float _2497 = _2490 * 9.9999997473787516355514526367188e-05;
        float _2498 = (-1.0) - _2497;
        float _2500 = _2497 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2496 > _2500) || ((_2496 < _2498) || ((_2495 > _2500) || ((_2495 < _2498) || ((_2494 < _2498) || (_2494 > _2500))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2695 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2496, cbModelParam._m0[17u].z, fma(_2495, cbModelParam._m0[17u].y, _2494 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2496, cbModelParam._m0[18u].z, fma(_2495, cbModelParam._m0[18u].y, _2494 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2496, cbModelParam._m0[19u].z, fma(_2495, cbModelParam._m0[19u].y, _2494 * cbModelParam._m0[19u].x))), _1764);
            frontier_phi_22_46_ladder = _2695.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2695.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2695.x * cbModelParam._m0[1u].z;
        }
        _1853 = frontier_phi_22_46_ladder_2;
        _1855 = frontier_phi_22_46_ladder_1;
        _1857 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1837 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_864, _865, _866), _1764);
        _1853 = _1837.x * cbModelParam._m0[1u].z;
        _1855 = _1837.y * cbModelParam._m0[1u].z;
        _1857 = _1837.z * cbModelParam._m0[1u].z;
    }
    float _1870 = (((_891 * _840) + _892) * _856) * ((cbModelParam._m0[1u].w * (_1853 - _1755)) + _1755);
    float _1872 = (((_891 * _842) + _892) * _856) * ((cbModelParam._m0[1u].w * (_1855 - _1757)) + _1757);
    float _1874 = (((_891 * _843) + _892) * _856) * ((cbModelParam._m0[1u].w * (_1857 - _1759)) + _1759);
    float _1877 = fma(_1874, cbSceneParam._m0[89u].z, fma(_1872, cbSceneParam._m0[89u].y, _1870 * cbSceneParam._m0[89u].x));
    float _1880 = fma(_1874, cbSceneParam._m0[90u].z, fma(_1872, cbSceneParam._m0[90u].y, _1870 * cbSceneParam._m0[90u].x));
    float _1883 = fma(_1874, cbSceneParam._m0[91u].z, fma(_1872, cbSceneParam._m0[91u].y, _1870 * cbSceneParam._m0[91u].x));
    vec4 _1891 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_778, _779));
    float _1893 = _1891.w;
    float _1905 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1893);
    float _1906 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1893);
    float _1907 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1893);
    uvec4 _1911 = floatBitsToUint(cbInstanceData._m0[_238 + 5u]);
    uint _1913 = _1911.x * 14u;
    uint _1914 = _1913 + 13u;
    float _1921 = _856 + (-1.0);
    float _1926 = (cbLight._m0[_1914].x * _1921) + 1.0;
    float _1927 = (cbLight._m0[_1914].y * _1921) + 1.0;
    float _1928 = (cbLight._m0[_1914].z * _1921) + 1.0;
    float _1929 = (cbLight._m0[_1914].w * _1921) + 1.0;
    uint _1930 = _1913 + 5u;
    float _1936 = isnan(1.0) ? _1927 : (isnan(_1927) ? 1.0 : min(_1927, 1.0));
    uint _1940 = _1913 + 4u;
    float _1949 = isnan(1.0) ? _1926 : (isnan(_1926) ? 1.0 : min(_1926, 1.0));
    uint _1953 = _1913 | 1u;
    float _1964 = dot(vec3(cbLight._m0[_1913].xyz), vec3(_690, _691, _692));
    float _1967 = dot(vec3(cbLight._m0[_1953].xyz), vec3(_690, _691, _692));
    float _4113 = isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0));
    float _4124 = isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0));
    float _1972 = (isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0))) * 0.3183098733425140380859375;
    float _1974 = (isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0))) * 0.3183098733425140380859375;
    float _1981 = ((cbLight._m0[_1930].x * _1936) * _1974) + (((cbLight._m0[_1940].x * _1905) * _1949) * _1972);
    float _1982 = ((_1936 * cbLight._m0[_1930].y) * _1974) + (((cbLight._m0[_1940].y * _1906) * _1949) * _1972);
    float _1983 = ((_1936 * cbLight._m0[_1930].z) * _1974) + (((cbLight._m0[_1940].z * _1907) * _1949) * _1972);
    uvec4 _1987 = floatBitsToUint(cbLight._m0[_1913 + 12u]);
    bool _1989 = _1987.x == 0u;
    float _2000;
    float _2002;
    float _2004;
    if (_1989)
    {
        _2000 = _1981;
        _2002 = _1982;
        _2004 = _1983;
    }
    else
    {
        uint _2008 = _1913 + 6u;
        float _2024 = (dot(vec3(cbLight._m0[_1913 + 2u].xyz), vec3(_690, _691, _692)) * 0.5) + 0.5;
        float _2025 = _2024 * _2024;
        float _4135 = isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0));
        float _2026 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
        float _2027 = isnan(1.0) ? _1928 : (isnan(_1928) ? 1.0 : min(_1928, 1.0));
        _2000 = (((cbLight._m0[_2008].x * 0.3183098733425140380859375) * _2026) * _2027) + _1981;
        _2002 = (((cbLight._m0[_2008].y * 0.3183098733425140380859375) * _2026) * _2027) + _1982;
        _2004 = (((cbLight._m0[_2008].z * 0.3183098733425140380859375) * _2026) * _2027) + _1983;
    }
    bool _2007 = _1987.y == 0u;
    float _2045;
    float _2047;
    float _2049;
    if (_2007)
    {
        _2045 = _2000;
        _2047 = _2002;
        _2049 = _2004;
    }
    else
    {
        uint _2218 = _1913 + 7u;
        float _2234 = (dot(vec3(cbLight._m0[_1913 + 3u].xyz), vec3(_690, _691, _692)) * 0.5) + 0.5;
        float _2235 = _2234 * _2234;
        float _4151 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
        float _2236 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
        float _2237 = isnan(1.0) ? _1929 : (isnan(_1929) ? 1.0 : min(_1929, 1.0));
        _2045 = (((cbLight._m0[_2218].x * 0.3183098733425140380859375) * _2236) * _2237) + _2000;
        _2047 = (((cbLight._m0[_2218].y * 0.3183098733425140380859375) * _2236) * _2237) + _2002;
        _2049 = (((cbLight._m0[_2218].z * 0.3183098733425140380859375) * _2236) * _2237) + _2004;
    }
    uint _2052 = _1913 + 8u;
    float _2065 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1913].w)) * _693) * 0.949999988079071044921875);
    float _2066 = _2065 * _2065;
    float _2067 = cbLight._m0[_1913].x + _770;
    float _2068 = cbLight._m0[_1913].y + _771;
    float _2069 = cbLight._m0[_1913].z + _772;
    float _2073 = inversesqrt(dot(vec3(_2067, _2068, _2069), vec3(_2067, _2068, _2069)));
    float _2074 = _2073 * _2067;
    float _2075 = _2073 * _2068;
    float _2076 = _2073 * _2069;
    float _2077 = dot(vec3(_690, _691, _692), vec3(cbLight._m0[_1913].xyz));
    float _4167 = isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0));
    float _2080 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
    float _4178 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
    float _2081 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
    float _2082 = dot(vec3(_690, _691, _692), vec3(_2074, _2075, _2076));
    float _4189 = isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0));
    float _2085 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
    float _2086 = dot(vec3(cbLight._m0[_1913].xyz), vec3(_2074, _2075, _2076));
    float _4200 = isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0));
    float _2090 = _2066 * _2066;
    float _2094 = ((_2085 * _2085) * (_2090 + (-1.0))) + 1.0;
    float _2102 = exp2(log2(1.0 - (isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0)))) * 5.0);
    float _2103 = 0.959999978542327880859375 - _837;
    float _2105 = 0.959999978542327880859375 - _838;
    float _2106 = 0.959999978542327880859375 - _839;
    float _2113 = 1.0 - _2066;
    float _2124 = (0.5 / (((_2081 * ((_2080 * _2113) + _2066)) + 9.9999999392252902907785028219223e-09) + (((_2081 * _2113) + _2066) * _2080))) * _2080;
    float _4211 = isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0));
    float _2126 = (isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0))) * (_2090 / ((_2094 * _2094) * 3.141590118408203125));
    uint _2140 = _1913 + 9u;
    float _2151 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1953].w)) * _693) * 0.949999988079071044921875);
    float _2152 = _2151 * _2151;
    float _2153 = cbLight._m0[_1953].x + _770;
    float _2154 = cbLight._m0[_1953].y + _771;
    float _2155 = cbLight._m0[_1953].z + _772;
    float _2159 = inversesqrt(dot(vec3(_2153, _2154, _2155), vec3(_2153, _2154, _2155)));
    float _2160 = _2159 * _2153;
    float _2161 = _2159 * _2154;
    float _2162 = _2159 * _2155;
    float _2163 = dot(vec3(_690, _691, _692), vec3(cbLight._m0[_1953].xyz));
    float _4222 = isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0));
    float _2166 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
    float _2167 = dot(vec3(_690, _691, _692), vec3(_2160, _2161, _2162));
    float _4233 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
    float _2170 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
    float _2171 = dot(vec3(cbLight._m0[_1953].xyz), vec3(_2160, _2161, _2162));
    float _4244 = isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0));
    float _2175 = _2152 * _2152;
    float _2179 = ((_2170 * _2170) * (_2175 + (-1.0))) + 1.0;
    float _2186 = exp2(log2(1.0 - (isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0)))) * 5.0);
    float _2193 = 1.0 - _2152;
    float _2203 = (0.5 / (((_2081 * ((_2166 * _2193) + _2152)) + 9.9999999392252902907785028219223e-09) + (((_2081 * _2193) + _2152) * _2166))) * _2166;
    float _4255 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
    float _2205 = (isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0))) * (_2175 / ((_2179 * _2179) * 3.141590118408203125));
    float _2215 = (((((_2186 * _2103) + _840) * cbLight._m0[_2140].x) * _2205) * _1936) + ((((cbLight._m0[_2052].x * _1905) * ((_2102 * _2103) + _840)) * _2126) * _1949);
    float _2216 = (((((_2186 * _2105) + _842) * cbLight._m0[_2140].y) * _2205) * _1936) + ((((cbLight._m0[_2052].y * _1906) * ((_2102 * _2105) + _842)) * _2126) * _1949);
    float _2217 = (((((_2186 * _2106) + _843) * cbLight._m0[_2140].z) * _2205) * _1936) + ((((cbLight._m0[_2052].z * _1907) * ((_2102 * _2106) + _843)) * _2126) * _1949);
    float _2279;
    float _2281;
    float _2283;
    if (_1989)
    {
        _2279 = _2215;
        _2281 = _2216;
        _2283 = _2217;
    }
    else
    {
        uint _2285 = _1913 + 2u;
        uint _2289 = _1913 + 10u;
        float _2303 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2285].w)) * _693) * 0.949999988079071044921875);
        float _2304 = _2303 * _2303;
        float _2305 = cbLight._m0[_2285].x + _770;
        float _2306 = cbLight._m0[_2285].y + _771;
        float _2307 = cbLight._m0[_2285].z + _772;
        float _2311 = inversesqrt(dot(vec3(_2305, _2306, _2307), vec3(_2305, _2306, _2307)));
        float _2312 = _2311 * _2305;
        float _2313 = _2311 * _2306;
        float _2314 = _2311 * _2307;
        float _2315 = dot(vec3(_690, _691, _692), vec3(cbLight._m0[_2285].xyz));
        float _4266 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
        float _2318 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
        float _2319 = dot(vec3(_690, _691, _692), vec3(_2312, _2313, _2314));
        float _4277 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
        float _2322 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
        float _2323 = dot(vec3(cbLight._m0[_2285].xyz), vec3(_2312, _2313, _2314));
        float _4288 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
        float _2327 = _2304 * _2304;
        float _2331 = ((_2322 * _2322) * (_2327 + (-1.0))) + 1.0;
        float _2338 = exp2(log2(1.0 - (isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0)))) * 5.0);
        float _2345 = 1.0 - _2304;
        float _2355 = (0.5 / (((_2081 * ((_2318 * _2345) + _2304)) + 9.9999999392252902907785028219223e-09) + (((_2081 * _2345) + _2304) * _2318))) * _2318;
        float _4299 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
        float _2357 = (isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0))) * (_2327 / ((_2331 * _2331) * 3.141590118408203125));
        float _2358 = isnan(1.0) ? _1928 : (isnan(_1928) ? 1.0 : min(_1928, 1.0));
        _2279 = (((((_2338 * _2103) + _840) * cbLight._m0[_2289].x) * _2357) * _2358) + _2215;
        _2281 = (((((_2338 * _2105) + _842) * cbLight._m0[_2289].y) * _2357) * _2358) + _2216;
        _2283 = (((((_2338 * _2106) + _843) * cbLight._m0[_2289].z) * _2357) * _2358) + _2217;
    }
    float _2393;
    float _2395;
    float _2397;
    if (_2007)
    {
        _2393 = _2279;
        _2395 = _2281;
        _2397 = _2283;
    }
    else
    {
        uint _2404 = _1913 + 3u;
        uint _2408 = _1913 + 11u;
        float _2422 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2404].w)) * _693) * 0.949999988079071044921875);
        float _2423 = _2422 * _2422;
        float _2424 = cbLight._m0[_2404].x + _770;
        float _2425 = cbLight._m0[_2404].y + _771;
        float _2426 = cbLight._m0[_2404].z + _772;
        float _2430 = inversesqrt(dot(vec3(_2424, _2425, _2426), vec3(_2424, _2425, _2426)));
        float _2431 = _2430 * _2424;
        float _2432 = _2430 * _2425;
        float _2433 = _2430 * _2426;
        float _2434 = dot(vec3(_690, _691, _692), vec3(cbLight._m0[_2404].xyz));
        float _4315 = isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0));
        float _2437 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
        float _2438 = dot(vec3(_690, _691, _692), vec3(_2431, _2432, _2433));
        float _4326 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
        float _2441 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
        float _2442 = dot(vec3(cbLight._m0[_2404].xyz), vec3(_2431, _2432, _2433));
        float _4337 = isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0));
        float _2446 = _2423 * _2423;
        float _2450 = ((_2441 * _2441) * (_2446 + (-1.0))) + 1.0;
        float _2457 = exp2(log2(1.0 - (isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0)))) * 5.0);
        float _2464 = 1.0 - _2423;
        float _2474 = (0.5 / (((_2081 * ((_2437 * _2464) + _2423)) + 9.9999999392252902907785028219223e-09) + (((_2081 * _2464) + _2423) * _2437))) * _2437;
        float _4348 = isnan(0.0) ? _2474 : (isnan(_2474) ? 0.0 : max(_2474, 0.0));
        float _2476 = (isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0))) * (_2446 / ((_2450 * _2450) * 3.141590118408203125));
        float _2477 = isnan(1.0) ? _1929 : (isnan(_1929) ? 1.0 : min(_1929, 1.0));
        _2393 = (((((_2457 * _2103) + _840) * cbLight._m0[_2408].x) * _2476) * _2477) + _2279;
        _2395 = (((((_2457 * _2105) + _842) * cbLight._m0[_2408].y) * _2476) * _2477) + _2281;
        _2397 = (((((_2457 * _2106) + _843) * cbLight._m0[_2408].z) * _2476) * _2477) + _2283;
    }
    float _2612;
    float _2614;
    float _2616;
    float _2618;
    float _2620;
    float _2622;
    if (_1911.y == 0u)
    {
        float _2552 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2553 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2552;
        float _2554 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2552;
        float _2555 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2552;
        uvec4 _2567 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2568 = _2567.x;
        uint _2579 = uint((float(_2567.y) * floor(float(uint(cbSceneParam._m0[85u].y * _779) / _2568))) + floor(float(uint(cbSceneParam._m0[85u].x * _778) / _2568)));
        float _2589 = (log2(_2555 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2590 = isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0));
        uint _2593 = uint(isnan(14.0) ? _2590 : (isnan(_2590) ? 14.0 : min(_2590, 14.0)));
        uvec4 _2598 = texelFetch(g_lightClusterGridBuffer, int(((_2593 << 2u) + (_2579 << 6u)) >> 2u));
        uint _2599 = _2598.x;
        uint _2600 = _2567.z;
        float _2700;
        float _2702;
        float _2704;
        float _2706;
        float _2708;
        float _2710;
        if (((((1u << ((_2600 >> 4u) & 15u)) + 4294967295u) & _2599) == 0u) || ((_2600 & 240u) == 0u))
        {
            _2700 = 0.0;
            _2702 = 0.0;
            _2704 = 0.0;
            _2706 = 0.0;
            _2708 = 0.0;
            _2710 = 0.0;
        }
        else
        {
            float _2701;
            float _2703;
            float _2705;
            float _2707;
            float _2709;
            float _2711;
            float _2845 = 0.0;
            float _2846 = 0.0;
            float _2847 = 0.0;
            float _2848 = 0.0;
            float _2849 = 0.0;
            float _2850 = 0.0;
            uint _2851 = 0u;
            uint _2860;
            bool _2861;
            for (;;)
            {
                _2860 = texelFetch(g_lightClassification, int((((_2593 << 5u) + (_2579 << 9u)) + (_2851 << 2u)) >> 2u)).x;
                _2861 = _2860 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2861)
                {
                    frontier_phi_61_pred = _2845;
                    frontier_phi_61_pred_1 = _2850;
                    frontier_phi_61_pred_2 = _2849;
                    frontier_phi_61_pred_3 = _2848;
                    frontier_phi_61_pred_4 = _2847;
                    frontier_phi_61_pred_5 = _2846;
                }
                else
                {
                    float _2969;
                    float _2970;
                    float _2971;
                    float _2972;
                    float _2973;
                    float _2974;
                    uint _2975;
                    _2969 = _2845;
                    _2970 = _2846;
                    _2971 = _2847;
                    _2972 = _2848;
                    _2973 = _2849;
                    _2974 = _2850;
                    _2975 = _2860;
                    float _2901;
                    float _2902;
                    float _2903;
                    float _2904;
                    float _2905;
                    float _2906;
                    for (;;)
                    {
                        uint _2979 = uint(findLSB(_2975)) + (_2851 << 5u);
                        uint _2976 = (_2975 + 4294967295u) & _2975;
                        uint _2981 = _2979 * 48u;
                        vec4 _2995 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2981)).x, texelFetch(g_PointLightRenderingBuffer, int(_2981 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2981 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2981 + 3u)).x));
                        uint _3001 = (_2979 * 48u) + 4u;
                        vec4 _3014 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3001)).x, texelFetch(g_PointLightRenderingBuffer, int(_3001 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3001 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3001 + 3u)).x));
                        uint _3020 = (_2979 * 48u) + 8u;
                        vec3 _3031 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3020)).x, texelFetch(g_PointLightRenderingBuffer, int(_3020 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3020 + 2u)).x));
                        float _3035 = _2995.x - _2553;
                        float _3036 = _2995.y - _2554;
                        float _3037 = _2995.z - _2555;
                        float _3038 = dot(vec3(_3035, _3036, _3037), vec3(_3035, _3036, _3037));
                        float _3041 = inversesqrt(_3038);
                        float _3042 = _3041 * _3035;
                        float _3043 = _3041 * _3036;
                        float _3044 = _3041 * _3037;
                        float _3045 = dot(vec3(_797, _800, _803), vec3(_3042, _3043, _3044));
                        float _3050 = 1.0 - (_3038 * _2995.w);
                        float _4374 = isnan(0.0) ? _3050 : (isnan(_3050) ? 0.0 : max(_3050, 0.0));
                        float _3051 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
                        float _3052 = sqrt(_3038) * _3014.w;
                        float _3055 = 1.39999997615814208984375 / (_3052 + 1.39999997615814208984375);
                        float _3056 = _3055 * _3055;
                        float _3059 = ((1.0 - _3056) * _3045) + _3056;
                        float _3062 = _3052 * _3052;
                        float _3066 = ((isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : max(_3059, 0.0))) * _3051) / ((_3062 * 0.699999988079071044921875) + 1.0);
                        float _3070 = (-0.0) - _2553;
                        float _3071 = (-0.0) - _2554;
                        float _3072 = (-0.0) - _2555;
                        float _3076 = inversesqrt(dot(vec3(_3070, _3071, _3072), vec3(_3070, _3071, _3072)));
                        float _3077 = _3076 * _3070;
                        float _3078 = _3076 * _3071;
                        float _3079 = _3076 * _3072;
                        float _3087 = exp2(log2(1.0 / ((_3062 * 3.5) + 5.0)) * 0.25);
                        float _3088 = 1.0 - _872;
                        float _3095 = sqrt(1.0 - ((1.0 - (_3088 * _3088)) * (1.0 - (_3087 * _3087))));
                        float _3096 = _3095 * _3095;
                        float _3097 = _3096 * _3096;
                        float _3098 = _3077 + _3042;
                        float _3099 = _3078 + _3043;
                        float _3100 = _3079 + _3044;
                        float _3104 = inversesqrt(dot(vec3(_3098, _3099, _3100), vec3(_3098, _3099, _3100)));
                        float _3108 = dot(vec3(_797, _800, _803), vec3(_3077, _3078, _3079));
                        float _4390 = isnan(0.0) ? _3108 : (isnan(_3108) ? 0.0 : max(_3108, 0.0));
                        float _3111 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
                        float _3112 = dot(vec3(_797, _800, _803), vec3(_3104 * _3098, _3104 * _3099, _3104 * _3100));
                        float _4401 = isnan(0.0) ? _3112 : (isnan(_3112) ? 0.0 : max(_3112, 0.0));
                        float _3115 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
                        float _3119 = ((_3115 * _3115) * (_3097 + (-1.0))) + 1.0;
                        float _3120 = _3055 * _3096;
                        float _3121 = _3120 * _3120;
                        float _3124 = ((1.0 - _3121) * _3045) + _3121;
                        float _4412 = isnan(0.0) ? _3124 : (isnan(_3124) ? 0.0 : max(_3124, 0.0));
                        float _3125 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
                        float _3126 = 1.0 - _3096;
                        float _3136 = (0.5 / (((_3125 * ((_3111 * _3126) + _3096)) + 9.9999999392252902907785028219223e-09) + (((_3125 * _3126) + _3096) * _3111))) * _3125;
                        float _4423 = isnan(0.0) ? _3136 : (isnan(_3136) ? 0.0 : max(_3136, 0.0));
                        float _3147 = (((_3097 * 3.1415927410125732421875) * (isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0)))) / ((_3119 * _3119) * ((_3062 * 2.1991131305694580078125) + 3.141590118408203125))) * _3051;
                        _2904 = (_3066 * _3014.x) + _2972;
                        _2905 = (_3066 * _3014.y) + _2973;
                        _2906 = (_3066 * _3014.z) + _2974;
                        _2901 = (_3147 * _3031.x) + _2969;
                        _2902 = (_3147 * _3031.y) + _2970;
                        _2903 = (_3147 * _3031.z) + _2971;
                        if (_2976 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2969 = _2901;
                            _2970 = _2902;
                            _2971 = _2903;
                            _2972 = _2904;
                            _2973 = _2905;
                            _2974 = _2906;
                            _2975 = _2976;
                        }
                    }
                    frontier_phi_61_pred = _2901;
                    frontier_phi_61_pred_1 = _2906;
                    frontier_phi_61_pred_2 = _2905;
                    frontier_phi_61_pred_3 = _2904;
                    frontier_phi_61_pred_4 = _2903;
                    frontier_phi_61_pred_5 = _2902;
                }
                _2701 = frontier_phi_61_pred;
                _2711 = frontier_phi_61_pred_1;
                _2709 = frontier_phi_61_pred_2;
                _2707 = frontier_phi_61_pred_3;
                _2705 = frontier_phi_61_pred_4;
                _2703 = frontier_phi_61_pred_5;
                uint _2852 = _2851 + 1u;
                if (_2852 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2845 = _2701;
                    _2846 = _2703;
                    _2847 = _2705;
                    _2848 = _2707;
                    _2849 = _2709;
                    _2850 = _2711;
                    _2851 = _2852;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2700 = _2701;
            _2702 = _2703;
            _2704 = _2705;
            _2706 = _2707;
            _2708 = _2709;
            _2710 = _2711;
        }
        uvec4 _2714 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2715 = _2714.z;
        uint _2717 = (_2715 >> 8u) & 15u;
        float _2813;
        float _2815;
        float _2817;
        float _2819;
        float _2821;
        float _2823;
        if (((4294967295u << _2717) & _2599) == 0u)
        {
            _2813 = _2700;
            _2815 = _2702;
            _2817 = _2704;
            _2819 = _2706;
            _2821 = _2708;
            _2823 = _2710;
        }
        else
        {
            float _2838 = inversesqrt(dot(vec3(_2553, _2554, _2555), vec3(_2553, _2554, _2555)));
            float _2839 = _2838 * _2553;
            float _2840 = _2838 * _2554;
            float _2841 = _2838 * _2555;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2717 < ((_2715 >> 12u) & 15u))
            {
                float _2814;
                float _2816;
                float _2818;
                float _2820;
                float _2822;
                float _2824;
                float _2952 = _2700;
                float _2953 = _2702;
                float _2954 = _2704;
                float _2955 = _2706;
                float _2956 = _2708;
                float _2957 = _2710;
                uint _2958 = _2717;
                uint _2967;
                bool _2968;
                for (;;)
                {
                    _2967 = texelFetch(g_lightClassification, int((((_2593 << 5u) + (_2579 << 9u)) + (_2958 << 2u)) >> 2u)).x;
                    _2968 = _2967 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2968)
                    {
                        frontier_phi_67_pred = _2955;
                        frontier_phi_67_pred_1 = _2956;
                        frontier_phi_67_pred_2 = _2957;
                        frontier_phi_67_pred_3 = _2954;
                        frontier_phi_67_pred_4 = _2953;
                        frontier_phi_67_pred_5 = _2952;
                    }
                    else
                    {
                        float _3152;
                        float _3153;
                        float _3154;
                        float _3155;
                        float _3156;
                        float _3157;
                        float _3446;
                        float _3447;
                        float _3448;
                        float _3449;
                        float _3450;
                        float _3451;
                        float _3165 = _2952;
                        float _3166 = _2953;
                        float _3167 = _2954;
                        float _3168 = _2955;
                        float _3169 = _2956;
                        float _3170 = _2957;
                        uint _3171 = _2967;
                        uint _3172;
                        vec4 _3197;
                        float _3198;
                        vec4 _3213;
                        vec3 _3225;
                        vec4 _3240;
                        vec4 _3256;
                        float _3302;
                        bool _3303;
                        for (;;)
                        {
                            uint _3182 = ((_2958 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3171));
                            _3172 = (_3171 + 4294967295u) & _3171;
                            uint _3184 = _3182 * 40u;
                            _3197 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3184)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 3u)).x));
                            _3198 = _3197.w;
                            uint _3200 = (_3182 * 40u) + 4u;
                            _3213 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3200)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3200 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3200 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3200 + 3u)).x));
                            uint _3215 = (_3182 * 40u) + 8u;
                            _3225 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3215)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3215 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3215 + 2u)).x));
                            uint _3227 = (_3182 * 40u) + 16u;
                            _3240 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3227)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 3u)).x));
                            uint _3243 = (_3182 * 40u) + 20u;
                            _3256 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3243)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 3u)).x));
                            uint _3258 = (_3182 * 40u) + 24u;
                            vec4 _3271 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3258)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3258 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3258 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3258 + 3u)).x));
                            uint _3277 = (_3182 * 40u) + 28u;
                            vec4 _3290 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3277)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3277 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3277 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3277 + 3u)).x));
                            _3302 = fma(_2555, _3290.z, fma(_2554, _3290.y, _3290.x * _2553)) + _3290.w;
                            _3303 = !((fma(_2555, _3271.z, fma(_2554, _3271.y, _3271.x * _2553)) + _3271.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3303)
                            {
                                float _3330 = _3197.x - _2553;
                                float _3331 = _3197.y - _2554;
                                float _3332 = _3197.z - _2555;
                                float _3333 = dot(vec3(_3330, _3331, _3332), vec3(_3330, _3331, _3332));
                                float _3336 = inversesqrt(_3333);
                                float _3337 = _3336 * _3330;
                                float _3338 = _3336 * _3331;
                                float _3339 = _3336 * _3332;
                                float _3343 = 1.0 - (_3333 / (_3198 * _3198));
                                float _4434 = isnan(0.0) ? _3343 : (isnan(_3343) ? 0.0 : max(_3343, 0.0));
                                float _3344 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
                                float _3348 = sqrt(_3333) * _3213.w;
                                float _3350 = 1.39999997615814208984375 / (_3348 + 1.39999997615814208984375);
                                float _3351 = _3350 * _3350;
                                float _3354 = ((1.0 - _3351) * dot(vec3(_3337, _3338, _3339), vec3(_797, _800, _803))) + _3351;
                                float _3357 = _3348 * _3348;
                                float _3361 = (fma(_2555, _3240.z, fma(_2554, _3240.y, _3240.x * _2553)) + _3240.w) / _3302;
                                float _3362 = (fma(_2555, _3256.z, fma(_2554, _3256.y, _3256.x * _2553)) + _3256.w) / _3302;
                                float _3366 = 1.0 - dot(vec2(_3361, _3362), vec2(_3361, _3362));
                                float _4450 = isnan(0.0) ? _3366 : (isnan(_3366) ? 0.0 : max(_3366, 0.0));
                                float _3367 = isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0));
                                float _3368 = _3367 * (((isnan(0.0) ? _3354 : (isnan(_3354) ? 0.0 : max(_3354, 0.0))) * _3344) / ((_3357 * 0.699999988079071044921875) + 1.0));
                                float _3380 = exp2(log2(1.0 / ((_3357 * 3.5) + 5.0)) * 0.25);
                                float _3381 = 1.0 - _872;
                                float _3388 = sqrt(1.0 - ((1.0 - (_3381 * _3381)) * (1.0 - (_3380 * _3380))));
                                float _3389 = _3388 * _3388;
                                float _3390 = _3389 * _3389;
                                float _3391 = _3337 - _2839;
                                float _3392 = _3338 - _2840;
                                float _3393 = _3339 - _2841;
                                float _3397 = inversesqrt(dot(vec3(_3391, _3392, _3393), vec3(_3391, _3392, _3393)));
                                float _3401 = dot(vec3(_797, _800, _803), vec3((-0.0) - _2839, (-0.0) - _2840, (-0.0) - _2841));
                                float _4461 = isnan(0.0) ? _3401 : (isnan(_3401) ? 0.0 : max(_3401, 0.0));
                                float _3404 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
                                float _3405 = dot(vec3(_797, _800, _803), vec3(_3397 * _3391, _3397 * _3392, _3397 * _3393));
                                float _4472 = isnan(0.0) ? _3405 : (isnan(_3405) ? 0.0 : max(_3405, 0.0));
                                float _3408 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
                                float _3412 = ((_3408 * _3408) * (_3390 + (-1.0))) + 1.0;
                                float _3413 = _3350 * _3389;
                                float _3414 = _3413 * _3413;
                                float _3420 = ((1.0 - _3414) * dot(vec3(_797, _800, _803), vec3(_3337, _3338, _3339))) + _3414;
                                float _4483 = isnan(0.0) ? _3420 : (isnan(_3420) ? 0.0 : max(_3420, 0.0));
                                float _3421 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
                                float _3422 = 1.0 - _3389;
                                float _3432 = (0.5 / (((_3421 * ((_3404 * _3422) + _3389)) + 9.9999999392252902907785028219223e-09) + (((_3421 * _3422) + _3389) * _3404))) * _3421;
                                float _4494 = isnan(0.0) ? _3432 : (isnan(_3432) ? 0.0 : max(_3432, 0.0));
                                float _3442 = (_3367 * _3344) * (((_3390 * 3.1415927410125732421875) * (isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0)))) / ((_3412 * _3412) * ((_3357 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3442 * _3225.x;
                                frontier_phi_73_pred_1 = _3442 * _3225.y;
                                frontier_phi_73_pred_2 = _3368 * _3213.z;
                                frontier_phi_73_pred_3 = _3368 * _3213.y;
                                frontier_phi_73_pred_4 = _3368 * _3213.x;
                                frontier_phi_73_pred_5 = _3442 * _3225.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3446 = frontier_phi_73_pred;
                            _3447 = frontier_phi_73_pred_1;
                            _3451 = frontier_phi_73_pred_2;
                            _3450 = frontier_phi_73_pred_3;
                            _3449 = frontier_phi_73_pred_4;
                            _3448 = frontier_phi_73_pred_5;
                            _3155 = _3449 + _3168;
                            _3156 = _3450 + _3169;
                            _3157 = _3451 + _3170;
                            _3152 = _3446 + _3165;
                            _3153 = _3447 + _3166;
                            _3154 = _3448 + _3167;
                            if (_3172 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3165 = _3152;
                                _3166 = _3153;
                                _3167 = _3154;
                                _3168 = _3155;
                                _3169 = _3156;
                                _3170 = _3157;
                                _3171 = _3172;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3155;
                        frontier_phi_67_pred_1 = _3156;
                        frontier_phi_67_pred_2 = _3157;
                        frontier_phi_67_pred_3 = _3154;
                        frontier_phi_67_pred_4 = _3153;
                        frontier_phi_67_pred_5 = _3152;
                    }
                    _2820 = frontier_phi_67_pred;
                    _2822 = frontier_phi_67_pred_1;
                    _2824 = frontier_phi_67_pred_2;
                    _2818 = frontier_phi_67_pred_3;
                    _2816 = frontier_phi_67_pred_4;
                    _2814 = frontier_phi_67_pred_5;
                    uint _2959 = _2958 + 1u;
                    if (_2959 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2952 = _2814;
                        _2953 = _2816;
                        _2954 = _2818;
                        _2955 = _2820;
                        _2956 = _2822;
                        _2957 = _2824;
                        _2958 = _2959;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2822;
                frontier_phi_55_56_ladder_1 = _2824;
                frontier_phi_55_56_ladder_2 = _2820;
                frontier_phi_55_56_ladder_3 = _2818;
                frontier_phi_55_56_ladder_4 = _2816;
                frontier_phi_55_56_ladder_5 = _2814;
            }
            else
            {
                frontier_phi_55_56_ladder = _2708;
                frontier_phi_55_56_ladder_1 = _2710;
                frontier_phi_55_56_ladder_2 = _2706;
                frontier_phi_55_56_ladder_3 = _2704;
                frontier_phi_55_56_ladder_4 = _2702;
                frontier_phi_55_56_ladder_5 = _2700;
            }
            _2813 = frontier_phi_55_56_ladder_5;
            _2815 = frontier_phi_55_56_ladder_4;
            _2817 = frontier_phi_55_56_ladder_3;
            _2819 = frontier_phi_55_56_ladder_2;
            _2821 = frontier_phi_55_56_ladder;
            _2823 = frontier_phi_55_56_ladder_1;
        }
        float _2828 = isnan(1.0) ? _856 : (isnan(_856) ? 1.0 : min(_856, 1.0));
        _2612 = (_2828 * _2819) + _2045;
        _2614 = (_2828 * _2821) + _2047;
        _2616 = (_2828 * _2823) + _2049;
        _2618 = ((_2813 * _840) * _2828) + _2393;
        _2620 = ((_2815 * _842) * _2828) + _2395;
        _2622 = ((_2817 * _843) * _2828) + _2397;
    }
    else
    {
        _2612 = _2045;
        _2614 = _2047;
        _2616 = _2049;
        _2618 = _2393;
        _2620 = _2395;
        _2622 = _2397;
    }
    float _4510 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
    float _4521 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
    float _4532 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
    uint _2642 = _238 + 6u;
    float _2650 = _778 / cbSceneParam._m0[86u].x;
    float _2651 = _779 / cbSceneParam._m0[86u].y;
    vec4 _2665 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2650, _2651, (log2((isnan(cbSceneParam._m0[77u].w) ? _712 : (isnan(_712) ? cbSceneParam._m0[77u].w : min(_712, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2667 = _2665.x;
    float _2668 = _2665.y;
    float _2669 = _2665.z;
    float _2670 = _2665.w;
    float _2763;
    float _2765;
    float _2767;
    float _2769;
    if (_712 > cbSceneParam._m0[78u].w)
    {
        float _2725 = isnan(_712) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _712 : min(cbSceneParam._m0[80u].w, _712));
        float _2726 = _2725 / _712;
        float _2737 = _2726 * _763;
        float _2738 = _764 * _2726;
        float _2739 = (-0.0) - _2738;
        float _2741 = _2726 * _765;
        float _2743 = (cbSceneParam._m0[77u].w * _2739) / _2725;
        float _2744 = _2743 + cbSceneParam._m0[79u].w;
        float _2745 = cbSceneParam._m0[79u].w - _2738;
        float _2751 = sqrt(((_2737 * _2737) + (_2738 * _2738)) + (_2741 * _2741));
        float _2754 = (1.0 - (cbSceneParam._m0[77u].w / _2725)) * _2751;
        float _2759 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2761 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2914;
        if (abs((_2739 - _2743) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2914 = ((((_2744 > 0.0) ? exp2(_2759 * _2744) : (2.0 - exp2(_2761 * _2744))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2754;
        }
        else
        {
            float _2874 = 1.0 / cbSceneParam._m0[80u].x;
            float _2875 = isnan(_2745) ? _2744 : (isnan(_2744) ? _2745 : max(_2744, _2745));
            float _2876 = isnan(_2745) ? _2744 : (isnan(_2744) ? _2745 : min(_2744, _2745));
            float _2885 = isnan(0.0) ? _2875 : (isnan(_2875) ? 0.0 : min(_2875, 0.0));
            float _2886 = isnan(0.0) ? _2876 : (isnan(_2876) ? 0.0 : min(_2876, 0.0));
            _2914 = ((abs(_2751 / _2739) * cbSceneParam._m0[80u].y) * ((((_2885 - _2886) * 2.0) - ((exp2(_2759 * (isnan(0.0) ? _2875 : (isnan(_2875) ? 0.0 : max(_2875, 0.0)))) - exp2(_2759 * (isnan(0.0) ? _2876 : (isnan(_2876) ? 0.0 : max(_2876, 0.0))))) * _2874)) - ((exp2(_2761 * _2885) - exp2(_2761 * _2886)) * _2874))) + (_2754 * cbSceneParam._m0[80u].z);
        }
        vec4 _2916 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2650, _2651, 1.0), 0.0);
        float _2925 = exp2((_2914 * (-1.44269502162933349609375)) * (1.0 - _2916.w));
        float _2926 = log2(_2925);
        float _2942 = log2(_2670);
        _2763 = (exp2(_2942 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2926 * cbSceneParam._m0[78u].x)) * _2916.x) / cbSceneParam._m0[78u].x)) + _2667;
        _2765 = (exp2(_2942 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2926 * cbSceneParam._m0[78u].y)) * _2916.y) / cbSceneParam._m0[78u].y)) + _2668;
        _2767 = (exp2(_2942 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2926 * cbSceneParam._m0[78u].z)) * _2916.z) / cbSceneParam._m0[78u].z)) + _2669;
        _2769 = _2925 * _2670;
    }
    else
    {
        _2763 = _2667;
        _2765 = _2668;
        _2767 = _2669;
        _2769 = _2670;
    }
    float _2781 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2782 = _2781 == 3.0;
    float _2783 = log2(_2769);
    float _2790 = exp2(_2783 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0))) * (_2612 + ((isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0))) * _856))) + ((_2618 + ((isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0))) * _1664)) * cbPerFrame._m0[3u].x));
    float _2791 = exp2(_2783 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0))) * (_2614 + ((isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0))) * _856))) + ((_2620 + ((isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0))) * _1664)) * cbPerFrame._m0[3u].x));
    float _2792 = exp2(_2783 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0))) * (_2616 + ((isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0))) * _856))) + ((_2622 + ((isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0))) * _1664)) * cbPerFrame._m0[3u].x));
    float _2801 = (_2781 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2801 * (_2782 ? _2790 : (_2790 + (cbSceneParam._m0[72u].w * _2763)));
    SV_Target.y = _2801 * (_2782 ? _2791 : (_2791 + (cbSceneParam._m0[72u].w * _2765)));
    SV_Target.z = _2801 * (_2782 ? _2792 : (_2792 + (cbSceneParam._m0[72u].w * _2767)));
    SV_Target.w = cbInstanceData._m0[_2642].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2642].w;
}


