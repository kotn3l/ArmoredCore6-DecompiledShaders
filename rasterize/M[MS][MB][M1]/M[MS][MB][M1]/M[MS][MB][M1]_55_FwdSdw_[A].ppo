#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1184;
float _3847;
float _3848;
float _3849;
float _3850;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _213 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _214 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _215 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _221 = inversesqrt(dot(vec3(_213, _214, _215), vec3(_213, _214, _215)));
    float _222 = _221 * _213;
    float _223 = _221 * _214;
    float _224 = _221 * _215;
    float _228 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _229 = _228 * NORMAL.x;
    float _230 = _228 * NORMAL.y;
    float _231 = _228 * NORMAL.z;
    float _235 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _236 = _235 * TANGENT.x;
    float _237 = _235 * TANGENT.y;
    float _238 = _235 * TANGENT.z;
    float _249 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _251 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _252 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3859 = isnan(0.0) ? _249 : (isnan(_249) ? 0.0 : max(_249, 0.0));
    float _3870 = isnan(0.0) ? _251 : (isnan(_251) ? 0.0 : max(_251, 0.0));
    float _3881 = isnan(0.0) ? _252 : (isnan(_252) ? 0.0 : max(_252, 0.0));
    uint _262 = uint(roundEven(NORMAL.w)) * 13u;
    uint _267 = _262 + 1u;
    uint _271 = _262 + 2u;
    float _280 = sqrt(((cbInstanceData._m0[_267].x * cbInstanceData._m0[_267].x) + (cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x)) + (cbInstanceData._m0[_271].x * cbInstanceData._m0[_271].x));
    float _281 = _280 * TEXCOORD.z;
    float _282 = _280 * TEXCOORD.w;
    vec4 _295 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _281) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _282) + cbTextureTilingScale._m0[13u].w));
    vec4 _318 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _323 = _318.x * cbMtdParam._m0[9u].x;
    float _324 = _318.y * cbMtdParam._m0[9u].y;
    float _325 = _318.z * cbMtdParam._m0[9u].z;
    float _329 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _295.x) * _323;
    float _332 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _295.y) * _324;
    float _335 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _295.z) * _325;
    float _342 = ((_323 - _329) * (isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0)))) + _329;
    float _343 = ((_324 - _332) * (isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0)))) + _332;
    float _344 = ((_325 - _335) * (isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0)))) + _335;
    vec4 _363 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _281) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _282) + cbTextureTilingScale._m0[14u].w));
    vec4 _383 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _281) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _282) + cbTextureTilingScale._m0[20u].w));
    vec4 _409 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _413 = _409.z;
    float _417 = (_409.x * 2.0) + (-1.0);
    float _418 = (_409.y * 2.0) + (-1.0);
    float _419 = dot(vec2(_417, _418), vec2(_417, _418));
    float _3892 = isnan(0.0) ? _419 : (isnan(_419) ? 0.0 : max(_419, 0.0));
    float _424 = sqrt(1.0 - (isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0))));
    float _429 = _417 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_383.x * 2.0) + (-1.0)));
    float _430 = _418 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_383.y * 2.0) + (-1.0)));
    float _433 = fma(_424, _229, fma(_430, _236, _429 * _222));
    float _436 = fma(_424, _230, fma(_430, _237, _429 * _223));
    float _439 = fma(_424, _231, fma(_430, _238, _429 * _224));
    float _443 = inversesqrt(dot(vec3(_433, _436, _439), vec3(_433, _436, _439)));
    vec4 _479 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _281) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _282) + cbTextureTilingScale._m0[11u].w));
    float _481 = _479.x;
    float _482 = 1.0 - _481;
    float _489 = ((_481 - _482) * cbMtdParam._m0[24u].z) + _482;
    float _491 = (cbMtdParam._m0[19u].x + dot(vec4(_443 * _433, _443 * _436, _443 * _439, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_489 * cbMtdParam._m0[21u].z);
    float _3903 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _492 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
    float _507 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_489 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3914 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _508 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
    float _512 = ((_492 * ((_363.x * cbMtdParam._m0[18u].x) - _342)) * _508) + _342;
    float _513 = ((_492 * ((_363.y * cbMtdParam._m0[18u].y) - _343)) * _508) + _343;
    float _514 = ((_492 * ((_363.z * cbMtdParam._m0[18u].z) - _344)) * _508) + _344;
    vec4 _527 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _529 = _527.x;
    float _532 = _529 - ((_529 * _492) * _508);
    float _537 = (((_383.z - _413) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _413;
    vec4 _550 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _281) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _282) + cbTextureTilingScale._m0[15u].w));
    float _557 = (_550.x * 2.0) + (-1.0);
    float _558 = (_550.y * 2.0) + (-1.0);
    float _559 = dot(vec2(_557, _558), vec2(_557, _558));
    float _3925 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _568 = (((_550.z - _537) * _492) * _508) + _537;
    float _583 = (((cbMtdParam._m0[21u].x * _429) + ((_557 - _429) * _492)) * _508) + _429;
    float _584 = (((cbMtdParam._m0[21u].x * _430) + ((_558 - _430) * _492)) * _508) + _430;
    float _585 = (((sqrt(1.0 - (isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0)))) - _424) * _492) * _508) + _424;
    float _587 = cbMtdParam._m0[22u].x + _409.w;
    float _590 = fma(_585, _229, fma(_584, _236, _583 * _222));
    float _593 = fma(_585, _230, fma(_584, _237, _583 * _223));
    float _596 = fma(_585, _231, fma(_584, _238, _583 * _224));
    float _600 = inversesqrt(dot(vec3(_590, _593, _596), vec3(_590, _593, _596)));
    float _601 = _600 * _590;
    float _602 = _600 * _593;
    float _603 = _600 * _596;
    float _3936 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _604 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
    float _3947 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
    float _3958 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _3969 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _3980 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _3991 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    float _609 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
    float _623 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _664 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _674 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _664);
    float _675 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _664);
    float _676 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _664);
    float _680 = inversesqrt(dot(vec3(_674, _675, _676), vec3(_674, _675, _676)));
    float _681 = _674 * _680;
    float _682 = _675 * _680;
    float _683 = _676 * _680;
    vec4 _688 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _690 = _688.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _865 = sqrt(((_674 * _674) + (_675 * _675)) + (_676 * _676));
        float _871 = (cbMatDynParam._m0[5u].x * _865) + cbMatDynParam._m0[5u].y;
        float _4002 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
        float _872 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
        float _876 = (cbMatDynParam._m0[5u].z * _865) + cbMatDynParam._m0[5u].w;
        float _4013 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0))) - _872)) + _872) < ((_690 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _702 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _703 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _723 = fma(_603, cbSceneParam._m0[5u].z, fma(_602, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _601));
    float _726 = fma(_603, cbSceneParam._m0[6u].z, fma(_602, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _601));
    float _729 = fma(_603, cbSceneParam._m0[7u].z, fma(_602, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _601));
    uint _742 = _262 + 9u;
    uint _743 = _742 + uint(cbMatDynParam._m0[0u].w);
    float _749 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0)))) * cbInstanceData._m0[_743].x;
    float _750 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0)))) * cbInstanceData._m0[_743].y;
    float _751 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0)))) * cbInstanceData._m0[_743].z;
    float _4024 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _752 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
    float _4035 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
    float _753 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
    float _4046 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
    float _754 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
    float _755 = 1.0 - _609;
    float _756 = _752 * _755;
    float _757 = _753 * _755;
    float _758 = _754 * _755;
    float _763 = (_752 + (-0.039999999105930328369140625)) * _609;
    float _764 = (_753 + (-0.039999999105930328369140625)) * _609;
    float _765 = (_754 + (-0.039999999105930328369140625)) * _609;
    float _766 = _763 + 0.039999999105930328369140625;
    float _768 = _764 + 0.039999999105930328369140625;
    float _769 = _765 + 0.039999999105930328369140625;
    vec4 _778 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _702, cbSceneParam._m0[86u].y * _703));
    float _782 = ((isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0))) * TEXCOORD_5.w) * _778.x;
    float _783 = dot(vec3(_601, _602, _603), vec3(_681, _682, _683));
    float _786 = _783 * 2.0;
    float _790 = (_786 * _601) - _681;
    float _791 = (_786 * _602) - _682;
    float _792 = (_786 * _603) - _683;
    float _796 = abs(dot(vec3(_681, _682, _683), vec3(_601, _602, _603)));
    float _4057 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
    float _798 = sqrt(_604);
    float _811 = exp2((_798 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_798 * 3.0));
    float _817 = (1.0 - _811) * ((_798 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _818 = _811 * _798;
    float _846 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _850 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _854 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1183;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _908 = fma(_854, cbModelParam._m0[26u].z, fma(_850, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _846));
        float _912 = fma(_854, cbModelParam._m0[27u].z, fma(_850, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _846));
        float _916 = fma(_854, cbModelParam._m0[28u].z, fma(_850, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _846));
        float _941 = _846 + _601;
        float _942 = _850 + _602;
        float _943 = _854 + _603;
        float _953 = fma(_943, cbModelParam._m0[26u].z, fma(_942, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _941)) - _908;
        float _954 = fma(_943, cbModelParam._m0[27u].z, fma(_942, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _941)) - _912;
        float _955 = fma(_943, cbModelParam._m0[28u].z, fma(_942, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _941)) - _916;
        float _959 = inversesqrt(dot(vec3(_953, _954, _955), vec3(_953, _954, _955)));
        float _972 = ((_959 * _953) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_908 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _973 = ((_959 * _954) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_912 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _974 = ((_959 * _955) / cbModelParam._m0[34u].z) + ((((((_916 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _977 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_972, _973, _974), 0.0);
        vec4 _984 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_972, _973, _974), 0.0);
        vec4 _991 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_972, _973, _974), 0.0);
        vec4 _998 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_972, _973, _974), 0.0);
        float _1011 = exp2((_977.w + (-0.5)) * 20.0) * 2.0;
        float _1012 = _1011 * (_977.x + (-0.5));
        float _1013 = _1011 * (_977.y + (-0.5));
        float _1014 = _1011 * (_977.z + (-0.5));
        float _1021 = exp2((_984.w + (-0.5)) * 20.0) * 2.0;
        float _1022 = _1021 * (_984.x + (-0.5));
        float _1023 = _1021 * (_984.y + (-0.5));
        float _1024 = _1021 * (_984.z + (-0.5));
        float _1031 = exp2((_991.w + (-0.5)) * 20.0) * 2.0;
        float _1032 = _1031 * (_991.x + (-0.5));
        float _1033 = _1031 * (_991.y + (-0.5));
        float _1034 = _1031 * (_991.z + (-0.5));
        float _1041 = exp2((_998.w + (-0.5)) * 20.0) * 2.0;
        float _1042 = _1041 * (_998.x + (-0.5));
        float _1043 = _1041 * (_998.y + (-0.5));
        float _1044 = _1041 * (_998.z + (-0.5));
        float _1045 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1046 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1047 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1048 = _1012 * 0.5;
        float _1049 = _1022 * 0.5;
        float _1050 = _1032 * 0.5;
        float _1051 = dot(vec3(_1048, _1049, _1050), vec3(_1048, _1049, _1050));
        float _1056 = (_1051 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1051);
        float _1065 = (dot(vec3(_601, _602, _603), vec3(_1056 * _1048, _1056 * _1049, _1056 * _1050)) + 1.0) * 0.5;
        float _4083 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1075 = sqrt(((_1049 * _1049) + (_1048 * _1048)) + (_1050 * _1050)) / (_1045 + 9.9999997473787516355514526367188e-06);
        float _4094 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1076 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
        float _1077 = _1076 * 2.0;
        float _1081 = (1.0 - _1076) / (_1076 + 1.0);
        float _4105 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1082 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
        float _1091 = ((((1.0 - _1082) * (_1077 + 2.0)) * exp2(log2(isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0))) * (_1077 + 1.0))) + _1082) * _1045;
        float _1092 = _1013 * 0.5;
        float _1093 = _1023 * 0.5;
        float _1094 = _1033 * 0.5;
        float _1095 = dot(vec3(_1092, _1093, _1094), vec3(_1092, _1093, _1094));
        float _1100 = (_1095 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1095);
        float _1108 = (dot(vec3(_601, _602, _603), vec3(_1100 * _1092, _1100 * _1093, _1100 * _1094)) + 1.0) * 0.5;
        float _4116 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1117 = sqrt(((_1093 * _1093) + (_1092 * _1092)) + (_1094 * _1094)) / (_1046 + 9.9999997473787516355514526367188e-06);
        float _4127 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1118 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
        float _1119 = _1118 * 2.0;
        float _1123 = (1.0 - _1118) / (_1118 + 1.0);
        float _4138 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1124 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
        float _1133 = ((((1.0 - _1124) * (_1119 + 2.0)) * exp2(log2(isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0))) * (_1119 + 1.0))) + _1124) * _1046;
        float _1134 = _1014 * 0.5;
        float _1135 = _1024 * 0.5;
        float _1136 = _1034 * 0.5;
        float _1137 = dot(vec3(_1134, _1135, _1136), vec3(_1134, _1135, _1136));
        float _1142 = (_1137 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1137);
        float _1150 = (dot(vec3(_601, _602, _603), vec3(_1142 * _1134, _1142 * _1135, _1142 * _1136)) + 1.0) * 0.5;
        float _4149 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1159 = sqrt(((_1135 * _1135) + (_1134 * _1134)) + (_1136 * _1136)) / (_1047 + 9.9999997473787516355514526367188e-06);
        float _4160 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1160 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
        float _1161 = _1160 * 2.0;
        float _1165 = (1.0 - _1160) / (_1160 + 1.0);
        float _4171 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1166 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
        float _1175 = ((((1.0 - _1166) * (_1161 + 2.0)) * exp2(log2(isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0))) * (_1161 + 1.0))) + _1166) * _1047;
        _1183 = _1014;
        _1185 = _1013;
        _1186 = _1012;
        _1187 = _1024;
        _1188 = _1023;
        _1189 = _1022;
        _1190 = _1034;
        _1191 = _1033;
        _1192 = _1032;
        _1193 = _1047;
        _1194 = _1046;
        _1195 = _1045;
        _1196 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0)));
        _1197 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0)));
        _1198 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0)));
    }
    else
    {
        _1183 = _1184;
        _1185 = _1184;
        _1186 = _1184;
        _1187 = _1184;
        _1188 = _1184;
        _1189 = _1184;
        _1190 = _1184;
        _1191 = _1184;
        _1192 = _1184;
        _1193 = _1184;
        _1194 = _1184;
        _1195 = _1184;
        _1196 = 0.0;
        _1197 = 0.0;
        _1198 = 0.0;
    }
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1226 = fma(_854, cbModelParam._m0[30u].z, fma(_850, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _846));
        float _1230 = fma(_854, cbModelParam._m0[31u].z, fma(_850, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _846));
        float _1234 = fma(_854, cbModelParam._m0[32u].z, fma(_850, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _846));
        float _1257 = _846 + _601;
        float _1258 = _850 + _602;
        float _1259 = _854 + _603;
        float _1269 = fma(_1259, cbModelParam._m0[30u].z, fma(_1258, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1257)) - _1226;
        float _1270 = fma(_1259, cbModelParam._m0[31u].z, fma(_1258, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1257)) - _1230;
        float _1271 = fma(_1259, cbModelParam._m0[32u].z, fma(_1258, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1257)) - _1234;
        float _1275 = inversesqrt(dot(vec3(_1269, _1270, _1271), vec3(_1269, _1270, _1271)));
        float _1288 = ((_1275 * _1269) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1226 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1289 = ((_1275 * _1270) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1230 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1290 = ((_1275 * _1271) / cbModelParam._m0[35u].z) + ((((((_1234 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1292 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1288, _1289, _1290), 0.0);
        vec4 _1299 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1288, _1289, _1290), 0.0);
        vec4 _1306 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1288, _1289, _1290), 0.0);
        vec4 _1313 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1288, _1289, _1290), 0.0);
        float _1325 = exp2((_1292.w + (-0.5)) * 20.0) * 2.0;
        float _1326 = _1325 * (_1292.x + (-0.5));
        float _1327 = _1325 * (_1292.y + (-0.5));
        float _1328 = _1325 * (_1292.z + (-0.5));
        float _1335 = exp2((_1299.w + (-0.5)) * 20.0) * 2.0;
        float _1336 = _1335 * (_1299.x + (-0.5));
        float _1337 = _1335 * (_1299.y + (-0.5));
        float _1338 = _1335 * (_1299.z + (-0.5));
        float _1345 = exp2((_1306.w + (-0.5)) * 20.0) * 2.0;
        float _1346 = _1345 * (_1306.x + (-0.5));
        float _1347 = _1345 * (_1306.y + (-0.5));
        float _1348 = _1345 * (_1306.z + (-0.5));
        float _1355 = exp2((_1313.w + (-0.5)) * 20.0) * 2.0;
        float _1356 = _1355 * (_1313.x + (-0.5));
        float _1357 = _1355 * (_1313.y + (-0.5));
        float _1358 = _1355 * (_1313.z + (-0.5));
        float _1359 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1360 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1361 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1362 = _1326 * 0.5;
        float _1363 = _1336 * 0.5;
        float _1364 = _1346 * 0.5;
        float _1365 = dot(vec3(_1362, _1363, _1364), vec3(_1362, _1363, _1364));
        float _1370 = (_1365 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1365);
        float _1378 = (dot(vec3(_601, _602, _603), vec3(_1370 * _1362, _1370 * _1363, _1370 * _1364)) + 1.0) * 0.5;
        float _4212 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1387 = sqrt(((_1363 * _1363) + (_1362 * _1362)) + (_1364 * _1364)) / (_1359 + 9.9999997473787516355514526367188e-06);
        float _4223 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1388 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
        float _1389 = _1388 * 2.0;
        float _1393 = (1.0 - _1388) / (_1388 + 1.0);
        float _4234 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1394 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
        float _1403 = ((((1.0 - _1394) * (_1389 + 2.0)) * exp2(log2(isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0))) * (_1389 + 1.0))) + _1394) * _1359;
        float _1404 = _1327 * 0.5;
        float _1405 = _1337 * 0.5;
        float _1406 = _1347 * 0.5;
        float _1407 = dot(vec3(_1404, _1405, _1406), vec3(_1404, _1405, _1406));
        float _1412 = (_1407 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1407);
        float _1420 = (dot(vec3(_601, _602, _603), vec3(_1412 * _1404, _1412 * _1405, _1412 * _1406)) + 1.0) * 0.5;
        float _4245 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1429 = sqrt(((_1405 * _1405) + (_1404 * _1404)) + (_1406 * _1406)) / (_1360 + 9.9999997473787516355514526367188e-06);
        float _4256 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1430 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
        float _1431 = _1430 * 2.0;
        float _1435 = (1.0 - _1430) / (_1430 + 1.0);
        float _4267 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1436 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
        float _1445 = ((((1.0 - _1436) * (_1431 + 2.0)) * exp2(log2(isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0))) * (_1431 + 1.0))) + _1436) * _1360;
        float _1446 = _1328 * 0.5;
        float _1447 = _1338 * 0.5;
        float _1448 = _1348 * 0.5;
        float _1449 = dot(vec3(_1446, _1447, _1448), vec3(_1446, _1447, _1448));
        float _1454 = (_1449 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1449);
        float _1462 = (dot(vec3(_601, _602, _603), vec3(_1454 * _1446, _1454 * _1447, _1454 * _1448)) + 1.0) * 0.5;
        float _4278 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1471 = sqrt(((_1447 * _1447) + (_1446 * _1446)) + (_1448 * _1448)) / (_1361 + 9.9999997473787516355514526367188e-06);
        float _4289 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1472 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
        float _1473 = _1472 * 2.0;
        float _1477 = (1.0 - _1472) / (_1472 + 1.0);
        float _4300 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1478 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
        float _1487 = ((((1.0 - _1478) * (_1473 + 2.0)) * exp2(log2(isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0))) * (_1473 + 1.0))) + _1478) * _1361;
        _1495 = _1328;
        _1496 = _1327;
        _1497 = _1326;
        _1498 = _1338;
        _1499 = _1337;
        _1500 = _1336;
        _1501 = _1348;
        _1502 = _1347;
        _1503 = _1346;
        _1504 = _1361;
        _1505 = _1360;
        _1506 = _1359;
        _1507 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0)));
        _1508 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0)));
        _1509 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0)));
    }
    else
    {
        _1495 = _1184;
        _1496 = _1184;
        _1497 = _1184;
        _1498 = _1184;
        _1499 = _1184;
        _1500 = _1184;
        _1501 = _1184;
        _1502 = _1184;
        _1503 = _1184;
        _1504 = _1184;
        _1505 = _1184;
        _1506 = _1184;
        _1507 = 0.0;
        _1508 = 0.0;
        _1509 = 0.0;
    }
    float _1519 = (cbModelParam._m0[1u].x * (_1507 - _1196)) + _1196;
    float _1520 = (cbModelParam._m0[1u].x * (_1508 - _1197)) + _1197;
    float _1521 = (cbModelParam._m0[1u].x * (_1509 - _1198)) + _1198;
    float _1542 = fma(_1521, cbSceneParam._m0[89u].z, fma(_1520, cbSceneParam._m0[89u].y, _1519 * cbSceneParam._m0[89u].x));
    float _1545 = fma(_1521, cbSceneParam._m0[90u].z, fma(_1520, cbSceneParam._m0[90u].y, _1519 * cbSceneParam._m0[90u].x));
    float _1548 = fma(_1521, cbSceneParam._m0[91u].z, fma(_1520, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1519));
    float _1563 = _790 * 0.5;
    float _1564 = _791 * 0.5;
    float _1565 = _792 * 0.5;
    float _1566 = dot(vec4(_1563, _1564, _1565, 1.0), vec4(_1497, _1500, _1503, _1506));
    float _1569 = dot(vec4(_1563, _1564, _1565, 1.0), vec4(_1496, _1499, _1502, _1505));
    float _1572 = dot(vec4(_1563, _1564, _1565, 1.0), vec4(_1495, _1498, _1501, _1504));
    float _1606;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1579 = dot(vec4(_1563, _1564, _1565, 1.0), vec4(_1183, _1187, _1190, _1193));
        float _1583 = dot(vec4(_1563, _1564, _1565, 1.0), vec4(_1185, _1188, _1191, _1194));
        float _1587 = dot(vec4(_1563, _1564, _1565, 1.0), vec4(_1186, _1189, _1192, _1195));
        float _1594 = dot(vec4(cbModelParam._m0[39u]), vec4(_1563, _1564, _1565, 1.0));
        _1606 = dot(vec3(isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0)), isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0)), isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1594) ? 0.0 : (isnan(0.0) ? _1594 : max(0.0, _1594))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1606 = 1.0;
    }
    float _1617;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1608 = dot(vec4(cbModelParam._m0[40u]), vec4(_1563, _1564, _1565, 1.0));
        _1617 = dot(vec3(isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0)), isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0)), isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1608) ? 0.0 : (isnan(0.0) ? _1608 : max(0.0, _1608))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1617 = 1.0;
    }
    float _1621 = (_1617 * cbModelParam._m0[1u].x) + (_1606 * (1.0 - cbModelParam._m0[1u].x));
    float _1631 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _604);
    float _1632 = isnan(_1631) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1631 : min(cbModelParam._m0[25u].z, _1631));
    float _1712;
    float _1714;
    float _1716;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1679 = fma(_854, cbModelParam._m0[13u].z, fma(_850, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _846)) + cbModelParam._m0[13u].w;
        float _1683 = fma(_854, cbModelParam._m0[14u].z, fma(_850, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _846)) + cbModelParam._m0[14u].w;
        float _1687 = fma(_854, cbModelParam._m0[15u].z, fma(_850, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _846)) + cbModelParam._m0[15u].w;
        float _1690 = fma(_792, cbModelParam._m0[13u].z, fma(_791, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _790));
        float _1693 = fma(_792, cbModelParam._m0[14u].z, fma(_791, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _790));
        float _1696 = fma(_792, cbModelParam._m0[15u].z, fma(_791, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _790));
        float _1724;
        if (_1690 > 0.0)
        {
            _1724 = abs((1.0 - _1679) / _1690);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1690 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1679 + 1.0) / _1690);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1724 = frontier_phi_17_15_ladder;
        }
        float _1895;
        if (_1693 > 0.0)
        {
            _1895 = abs((1.0 - _1683) / _1693);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1693 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1683 + 1.0) / _1693);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1895 = frontier_phi_26_22_ladder;
        }
        float _2191;
        if (_1696 > 0.0)
        {
            _2191 = abs((1.0 - _1687) / _1696);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1696 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1687 + 1.0) / _1696);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2191 = frontier_phi_38_33_ladder;
        }
        float _2193 = isnan(_1895) ? _1724 : (isnan(_1724) ? _1895 : min(_1724, _1895));
        float _2194 = isnan(_2191) ? _2193 : (isnan(_2193) ? _2191 : min(_2193, _2191));
        float _2198 = (_2194 * _1690) + _1679;
        float _2199 = (_2194 * _1693) + _1683;
        float _2200 = (_2194 * _1696) + _1687;
        float _2201 = _2194 * 9.9999997473787516355514526367188e-05;
        float _2203 = (-1.0) - _2201;
        float _2205 = _2201 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2200 > _2205) || ((_2200 < _2203) || ((_2199 > _2205) || ((_2199 < _2203) || ((_2198 < _2203) || (_2198 > _2205))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2345 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2200, cbModelParam._m0[9u].z, fma(_2199, cbModelParam._m0[9u].y, _2198 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2200, cbModelParam._m0[10u].z, fma(_2199, cbModelParam._m0[10u].y, _2198 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2200, cbModelParam._m0[11u].z, fma(_2199, cbModelParam._m0[11u].y, _2198 * cbModelParam._m0[11u].x))), _1632);
            frontier_phi_16_38_ladder = _2345.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2345.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2345.x * cbModelParam._m0[1u].y;
        }
        _1712 = frontier_phi_16_38_ladder_2;
        _1714 = frontier_phi_16_38_ladder_1;
        _1716 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1700 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_790, _791, _792), _1632);
        _1712 = _1700.x * cbModelParam._m0[1u].y;
        _1714 = _1700.y * cbModelParam._m0[1u].y;
        _1716 = _1700.z * cbModelParam._m0[1u].y;
    }
    float _1720 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _604);
    float _1721 = isnan(_1720) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1720 : min(cbModelParam._m0[25u].w, _1720));
    float _1810;
    float _1812;
    float _1814;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1774 = fma(_854, cbModelParam._m0[21u].z, fma(_850, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _846)) + cbModelParam._m0[21u].w;
        float _1778 = fma(_854, cbModelParam._m0[22u].z, fma(_850, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _846)) + cbModelParam._m0[22u].w;
        float _1782 = fma(_854, cbModelParam._m0[23u].z, fma(_850, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _846)) + cbModelParam._m0[23u].w;
        float _1785 = fma(_792, cbModelParam._m0[21u].z, fma(_791, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _790));
        float _1788 = fma(_792, cbModelParam._m0[22u].z, fma(_791, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _790));
        float _1791 = fma(_792, cbModelParam._m0[23u].z, fma(_791, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _790));
        float _1900;
        if (_1785 > 0.0)
        {
            _1900 = abs((1.0 - _1774) / _1785);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1785 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1774 + 1.0) / _1785);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1900 = frontier_phi_28_24_ladder;
        }
        float _2218;
        if (_1788 > 0.0)
        {
            _2218 = abs((1.0 - _1778) / _1788);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1788 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1778 + 1.0) / _1788);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2218 = frontier_phi_40_35_ladder;
        }
        float _2556;
        if (_1791 > 0.0)
        {
            _2556 = abs((1.0 - _1782) / _1791);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1791 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1782 + 1.0) / _1791);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2556 = frontier_phi_50_47_ladder;
        }
        float _2558 = isnan(_2218) ? _1900 : (isnan(_1900) ? _2218 : min(_1900, _2218));
        float _2559 = isnan(_2556) ? _2558 : (isnan(_2558) ? _2556 : min(_2558, _2556));
        float _2563 = (_2559 * _1785) + _1774;
        float _2564 = (_2559 * _1788) + _1778;
        float _2565 = (_2559 * _1791) + _1782;
        float _2566 = _2559 * 9.9999997473787516355514526367188e-05;
        float _2567 = (-1.0) - _2566;
        float _2569 = _2566 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2565 > _2569) || ((_2565 < _2567) || ((_2564 > _2569) || ((_2564 < _2567) || ((_2563 < _2567) || (_2563 > _2569))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2687 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2565, cbModelParam._m0[17u].z, fma(_2564, cbModelParam._m0[17u].y, _2563 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2565, cbModelParam._m0[18u].z, fma(_2564, cbModelParam._m0[18u].y, _2563 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2565, cbModelParam._m0[19u].z, fma(_2564, cbModelParam._m0[19u].y, _2563 * cbModelParam._m0[19u].x))), _1721);
            frontier_phi_25_50_ladder = _2687.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2687.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2687.x * cbModelParam._m0[1u].z;
        }
        _1810 = frontier_phi_25_50_ladder_2;
        _1812 = frontier_phi_25_50_ladder_1;
        _1814 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1794 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_790, _791, _792), _1721);
        _1810 = _1794.x * cbModelParam._m0[1u].z;
        _1812 = _1794.y * cbModelParam._m0[1u].z;
        _1814 = _1794.z * cbModelParam._m0[1u].z;
    }
    float _1827 = (((_817 * _766) + _818) * _782) * ((cbModelParam._m0[1u].w * (_1810 - _1712)) + _1712);
    float _1829 = (((_817 * _768) + _818) * _782) * ((cbModelParam._m0[1u].w * (_1812 - _1714)) + _1714);
    float _1831 = (((_817 * _769) + _818) * _782) * ((cbModelParam._m0[1u].w * (_1814 - _1716)) + _1716);
    float _1834 = fma(_1831, cbSceneParam._m0[89u].z, fma(_1829, cbSceneParam._m0[89u].y, _1827 * cbSceneParam._m0[89u].x));
    float _1837 = fma(_1831, cbSceneParam._m0[90u].z, fma(_1829, cbSceneParam._m0[90u].y, _1827 * cbSceneParam._m0[90u].x));
    float _1840 = fma(_1831, cbSceneParam._m0[91u].z, fma(_1829, cbSceneParam._m0[91u].y, _1827 * cbSceneParam._m0[91u].x));
    float _1874 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1878 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1882 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1886 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1887 = _1874 / _1886;
    float _1888 = _1878 / _1886;
    float _1889 = _1882 / _1886;
    float _2036;
    float _2037;
    float _2038;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1916 = ((uint(_1889 > cbSceneParam._m0[59u].y) + uint(_1889 > cbSceneParam._m0[59u].x)) + uint(_1889 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1917 = _1916 + 43u;
        uint _1925 = _1916 + 44u;
        uint _1933 = _1916 + 45u;
        uint _1941 = _1916 + 46u;
        float _1952 = fma(_1886, cbSceneParam._m0[_1917].w, fma(_1882, cbSceneParam._m0[_1917].z, fma(_1878, cbSceneParam._m0[_1917].y, _1874 * cbSceneParam._m0[_1917].x)));
        float _1956 = fma(_1886, cbSceneParam._m0[_1925].w, fma(_1882, cbSceneParam._m0[_1925].z, fma(_1878, cbSceneParam._m0[_1925].y, _1874 * cbSceneParam._m0[_1925].x)));
        float _1964 = fma(_1886, cbSceneParam._m0[_1941].w, fma(_1882, cbSceneParam._m0[_1941].z, fma(_1878, cbSceneParam._m0[_1941].y, _1874 * cbSceneParam._m0[_1941].x)));
        float _1969 = cbSceneParam._m0[33u].z * _1964;
        float _1971 = cbSceneParam._m0[33u].w * _1964;
        float _1974 = fma(_1886, cbSceneParam._m0[_1933].w, fma(_1882, cbSceneParam._m0[_1933].z, fma(_1878, cbSceneParam._m0[_1933].y, _1874 * cbSceneParam._m0[_1933].x))) / _1964;
        float _2022 = (cbSceneParam._m0[33u].x - sqrt(((_1888 * _1888) + (_1887 * _1887)) + (_1889 * _1889))) * cbSceneParam._m0[33u].y;
        float _4426 = isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0));
        float _2029 = (isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1969 + _1952) / _1964, (_1971 + _1956) / _1964), _1974), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1971 + _1952) / _1964, (_1956 - _1969) / _1964), _1974), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1952 - _1969) / _1964, (_1956 - _1971) / _1964), _1974), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1952 - _1971) / _1964, (_1969 + _1956) / _1964), _1974), 0.0)).x), vec4(0.25)));
        _2036 = 1.0 - (_2029 * cbSceneParam._m0[34u].x);
        _2037 = 1.0 - (_2029 * cbSceneParam._m0[34u].y);
        _2038 = 1.0 - (_2029 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2036 = 1.0;
        _2037 = 1.0;
        _2038 = 1.0;
    }
    float _2102;
    float _2104;
    float _2106;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2090 = fma(_1886, cbSceneParam._m0[63u].w, fma(_1882, cbSceneParam._m0[63u].z, fma(_1878, cbSceneParam._m0[63u].y, _1874 * cbSceneParam._m0[63u].x)));
        float _2091 = fma(_1886, cbSceneParam._m0[60u].w, fma(_1882, cbSceneParam._m0[60u].z, fma(_1878, cbSceneParam._m0[60u].y, _1874 * cbSceneParam._m0[60u].x))) / _2090;
        float _2092 = fma(_1886, cbSceneParam._m0[61u].w, fma(_1882, cbSceneParam._m0[61u].z, fma(_1878, cbSceneParam._m0[61u].y, _1874 * cbSceneParam._m0[61u].x))) / _2090;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2091 >= cbSceneParam._m0[64u].x) && (_2092 >= cbSceneParam._m0[64u].y)) && (_2091 <= cbSceneParam._m0[64u].z)) && (_2092 <= cbSceneParam._m0[64u].w))
        {
            float _2231 = fma(_1886, cbSceneParam._m0[62u].w, fma(_1882, cbSceneParam._m0[62u].z, fma(_1878, cbSceneParam._m0[62u].y, _1874 * cbSceneParam._m0[62u].x))) / _2090;
            float _2235 = isnan(cbSceneParam._m0[41u].w) ? _2231 : (isnan(_2231) ? cbSceneParam._m0[41u].w : max(_2231, cbSceneParam._m0[41u].w));
            float _2278 = (cbSceneParam._m0[33u].x - sqrt(((_1888 * _1888) + (_1887 * _1887)) + (_1889 * _1889))) * cbSceneParam._m0[33u].y;
            float _4442 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
            float _2285 = (isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2091, cbSceneParam._m0[33u].w + _2092), _2235), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2091, _2092 - cbSceneParam._m0[33u].z), _2235), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2091 - cbSceneParam._m0[33u].z, _2092 - cbSceneParam._m0[33u].w), _2235), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2091 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2092), _2235), 0.0)).x), vec4(0.25)));
            float _2289 = 1.0 - (_2285 * cbSceneParam._m0[34u].x);
            float _2290 = 1.0 - (_2285 * cbSceneParam._m0[34u].y);
            float _2291 = 1.0 - (_2285 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2291) ? _2038 : (isnan(_2038) ? _2291 : min(_2038, _2291));
            frontier_phi_37_36_ladder_1 = isnan(_2290) ? _2037 : (isnan(_2037) ? _2290 : min(_2037, _2290));
            frontier_phi_37_36_ladder_2 = isnan(_2289) ? _2036 : (isnan(_2036) ? _2289 : min(_2036, _2289));
        }
        else
        {
            frontier_phi_37_36_ladder = _2038;
            frontier_phi_37_36_ladder_1 = _2037;
            frontier_phi_37_36_ladder_2 = _2036;
        }
        _2102 = frontier_phi_37_36_ladder_2;
        _2104 = frontier_phi_37_36_ladder_1;
        _2106 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2102 = _2036;
        _2104 = _2037;
        _2106 = _2038;
    }
    uvec4 _2111 = floatBitsToUint(cbInstanceData._m0[_262 + 5u]);
    uint _2113 = _2111.x * 14u;
    uint _2114 = _2113 + 13u;
    float _2121 = _782 + (-1.0);
    float _2126 = (cbLight._m0[_2114].x * _2121) + 1.0;
    float _2127 = (cbLight._m0[_2114].y * _2121) + 1.0;
    float _2128 = (cbLight._m0[_2114].z * _2121) + 1.0;
    float _2129 = (cbLight._m0[_2114].w * _2121) + 1.0;
    uint _2130 = _2113 + 5u;
    float _2136 = isnan(1.0) ? _2127 : (isnan(_2127) ? 1.0 : min(_2127, 1.0));
    uint _2140 = _2113 + 4u;
    float _2150 = isnan(1.0) ? _2126 : (isnan(_2126) ? 1.0 : min(_2126, 1.0));
    uint _2154 = _2113 | 1u;
    float _2165 = dot(vec3(cbLight._m0[_2113].xyz), vec3(_601, _602, _603));
    float _2168 = dot(vec3(cbLight._m0[_2154].xyz), vec3(_601, _602, _603));
    float _4478 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
    float _4489 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
    float _2173 = (isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0))) * 0.3183098733425140380859375;
    float _2175 = (isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0))) * 0.3183098733425140380859375;
    float _2182 = ((cbLight._m0[_2130].x * _2136) * _2175) + (((cbLight._m0[_2140].x * _2102) * _2150) * _2173);
    float _2183 = ((_2136 * cbLight._m0[_2130].y) * _2175) + (((cbLight._m0[_2140].y * _2104) * _2150) * _2173);
    float _2184 = ((_2136 * cbLight._m0[_2130].z) * _2175) + (((cbLight._m0[_2140].z * _2106) * _2150) * _2173);
    uvec4 _2188 = floatBitsToUint(cbLight._m0[_2113 + 12u]);
    bool _2190 = _2188.x == 0u;
    float _2292;
    float _2294;
    float _2296;
    if (_2190)
    {
        _2292 = _2182;
        _2294 = _2183;
        _2296 = _2184;
    }
    else
    {
        uint _2300 = _2113 + 6u;
        float _2316 = (dot(vec3(cbLight._m0[_2113 + 2u].xyz), vec3(_601, _602, _603)) * 0.5) + 0.5;
        float _2317 = _2316 * _2316;
        float _4500 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
        float _2318 = isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0));
        float _2319 = isnan(1.0) ? _2128 : (isnan(_2128) ? 1.0 : min(_2128, 1.0));
        _2292 = (((cbLight._m0[_2300].x * 0.3183098733425140380859375) * _2318) * _2319) + _2182;
        _2294 = (((cbLight._m0[_2300].y * 0.3183098733425140380859375) * _2318) * _2319) + _2183;
        _2296 = (((cbLight._m0[_2300].z * 0.3183098733425140380859375) * _2318) * _2319) + _2184;
    }
    bool _2299 = _2188.y == 0u;
    float _2354;
    float _2356;
    float _2358;
    if (_2299)
    {
        _2354 = _2292;
        _2356 = _2294;
        _2358 = _2296;
    }
    else
    {
        uint _2527 = _2113 + 7u;
        float _2543 = (dot(vec3(cbLight._m0[_2113 + 3u].xyz), vec3(_601, _602, _603)) * 0.5) + 0.5;
        float _2544 = _2543 * _2543;
        float _4516 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
        float _2545 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
        float _2546 = isnan(1.0) ? _2129 : (isnan(_2129) ? 1.0 : min(_2129, 1.0));
        _2354 = (((cbLight._m0[_2527].x * 0.3183098733425140380859375) * _2545) * _2546) + _2292;
        _2356 = (((cbLight._m0[_2527].y * 0.3183098733425140380859375) * _2545) * _2546) + _2294;
        _2358 = (((cbLight._m0[_2527].z * 0.3183098733425140380859375) * _2545) * _2546) + _2296;
    }
    uint _2361 = _2113 + 8u;
    float _2374 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2113].w)) * _604) * 0.949999988079071044921875);
    float _2375 = _2374 * _2374;
    float _2376 = cbLight._m0[_2113].x + _681;
    float _2377 = cbLight._m0[_2113].y + _682;
    float _2378 = cbLight._m0[_2113].z + _683;
    float _2382 = inversesqrt(dot(vec3(_2376, _2377, _2378), vec3(_2376, _2377, _2378)));
    float _2383 = _2382 * _2376;
    float _2384 = _2382 * _2377;
    float _2385 = _2382 * _2378;
    float _2386 = dot(vec3(_601, _602, _603), vec3(cbLight._m0[_2113].xyz));
    float _4532 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
    float _2389 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
    float _4543 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
    float _2390 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
    float _2391 = dot(vec3(_601, _602, _603), vec3(_2383, _2384, _2385));
    float _4554 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
    float _2394 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
    float _2395 = dot(vec3(cbLight._m0[_2113].xyz), vec3(_2383, _2384, _2385));
    float _4565 = isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : max(_2395, 0.0));
    float _2399 = _2375 * _2375;
    float _2403 = ((_2394 * _2394) * (_2399 + (-1.0))) + 1.0;
    float _2411 = exp2(log2(1.0 - (isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0)))) * 5.0);
    float _2412 = 0.959999978542327880859375 - _763;
    float _2414 = 0.959999978542327880859375 - _764;
    float _2415 = 0.959999978542327880859375 - _765;
    float _2422 = 1.0 - _2375;
    float _2433 = (0.5 / (((_2390 * ((_2389 * _2422) + _2375)) + 9.9999999392252902907785028219223e-09) + (((_2390 * _2422) + _2375) * _2389))) * _2389;
    float _4576 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
    float _2435 = (isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0))) * (_2399 / ((_2403 * _2403) * 3.141590118408203125));
    uint _2449 = _2113 + 9u;
    float _2460 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2154].w)) * _604) * 0.949999988079071044921875);
    float _2461 = _2460 * _2460;
    float _2462 = cbLight._m0[_2154].x + _681;
    float _2463 = cbLight._m0[_2154].y + _682;
    float _2464 = cbLight._m0[_2154].z + _683;
    float _2468 = inversesqrt(dot(vec3(_2462, _2463, _2464), vec3(_2462, _2463, _2464)));
    float _2469 = _2468 * _2462;
    float _2470 = _2468 * _2463;
    float _2471 = _2468 * _2464;
    float _2472 = dot(vec3(_601, _602, _603), vec3(cbLight._m0[_2154].xyz));
    float _4587 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
    float _2475 = isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0));
    float _2476 = dot(vec3(_601, _602, _603), vec3(_2469, _2470, _2471));
    float _4598 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
    float _2479 = isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0));
    float _2480 = dot(vec3(cbLight._m0[_2154].xyz), vec3(_2469, _2470, _2471));
    float _4609 = isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0));
    float _2484 = _2461 * _2461;
    float _2488 = ((_2479 * _2479) * (_2484 + (-1.0))) + 1.0;
    float _2495 = exp2(log2(1.0 - (isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0)))) * 5.0);
    float _2502 = 1.0 - _2461;
    float _2512 = (0.5 / (((_2390 * ((_2475 * _2502) + _2461)) + 9.9999999392252902907785028219223e-09) + (((_2390 * _2502) + _2461) * _2475))) * _2475;
    float _4620 = isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0));
    float _2514 = (isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0))) * (_2484 / ((_2488 * _2488) * 3.141590118408203125));
    float _2524 = (((((_2495 * _2412) + _766) * cbLight._m0[_2449].x) * _2514) * _2136) + ((((cbLight._m0[_2361].x * _2102) * ((_2411 * _2412) + _766)) * _2435) * _2150);
    float _2525 = (((((_2495 * _2414) + _768) * cbLight._m0[_2449].y) * _2514) * _2136) + ((((cbLight._m0[_2361].y * _2104) * ((_2411 * _2414) + _768)) * _2435) * _2150);
    float _2526 = (((((_2495 * _2415) + _769) * cbLight._m0[_2449].z) * _2514) * _2136) + ((((cbLight._m0[_2361].z * _2106) * ((_2411 * _2415) + _769)) * _2435) * _2150);
    float _2582;
    float _2584;
    float _2586;
    if (_2190)
    {
        _2582 = _2524;
        _2584 = _2525;
        _2586 = _2526;
    }
    else
    {
        uint _2588 = _2113 + 2u;
        uint _2592 = _2113 + 10u;
        float _2606 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2588].w)) * _604) * 0.949999988079071044921875);
        float _2607 = _2606 * _2606;
        float _2608 = cbLight._m0[_2588].x + _681;
        float _2609 = cbLight._m0[_2588].y + _682;
        float _2610 = cbLight._m0[_2588].z + _683;
        float _2614 = inversesqrt(dot(vec3(_2608, _2609, _2610), vec3(_2608, _2609, _2610)));
        float _2615 = _2614 * _2608;
        float _2616 = _2614 * _2609;
        float _2617 = _2614 * _2610;
        float _2618 = dot(vec3(_601, _602, _603), vec3(cbLight._m0[_2588].xyz));
        float _4631 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0));
        float _2621 = isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0));
        float _2622 = dot(vec3(_601, _602, _603), vec3(_2615, _2616, _2617));
        float _4642 = isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : max(_2622, 0.0));
        float _2625 = isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0));
        float _2626 = dot(vec3(cbLight._m0[_2588].xyz), vec3(_2615, _2616, _2617));
        float _4653 = isnan(0.0) ? _2626 : (isnan(_2626) ? 0.0 : max(_2626, 0.0));
        float _2630 = _2607 * _2607;
        float _2634 = ((_2625 * _2625) * (_2630 + (-1.0))) + 1.0;
        float _2641 = exp2(log2(1.0 - (isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0)))) * 5.0);
        float _2648 = 1.0 - _2607;
        float _2658 = (0.5 / (((_2390 * ((_2621 * _2648) + _2607)) + 9.9999999392252902907785028219223e-09) + (((_2390 * _2648) + _2607) * _2621))) * _2621;
        float _4664 = isnan(0.0) ? _2658 : (isnan(_2658) ? 0.0 : max(_2658, 0.0));
        float _2660 = (isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0))) * (_2630 / ((_2634 * _2634) * 3.141590118408203125));
        float _2661 = isnan(1.0) ? _2128 : (isnan(_2128) ? 1.0 : min(_2128, 1.0));
        _2582 = (((((_2641 * _2412) + _766) * cbLight._m0[_2592].x) * _2660) * _2661) + _2524;
        _2584 = (((((_2641 * _2414) + _768) * cbLight._m0[_2592].y) * _2660) * _2661) + _2525;
        _2586 = (((((_2641 * _2415) + _769) * cbLight._m0[_2592].z) * _2660) * _2661) + _2526;
    }
    float _2692;
    float _2694;
    float _2696;
    if (_2299)
    {
        _2692 = _2582;
        _2694 = _2584;
        _2696 = _2586;
    }
    else
    {
        uint _2703 = _2113 + 3u;
        uint _2707 = _2113 + 11u;
        float _2721 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2703].w)) * _604) * 0.949999988079071044921875);
        float _2722 = _2721 * _2721;
        float _2723 = cbLight._m0[_2703].x + _681;
        float _2724 = cbLight._m0[_2703].y + _682;
        float _2725 = cbLight._m0[_2703].z + _683;
        float _2729 = inversesqrt(dot(vec3(_2723, _2724, _2725), vec3(_2723, _2724, _2725)));
        float _2730 = _2729 * _2723;
        float _2731 = _2729 * _2724;
        float _2732 = _2729 * _2725;
        float _2733 = dot(vec3(_601, _602, _603), vec3(cbLight._m0[_2703].xyz));
        float _4680 = isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : max(_2733, 0.0));
        float _2736 = isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0));
        float _2737 = dot(vec3(_601, _602, _603), vec3(_2730, _2731, _2732));
        float _4691 = isnan(0.0) ? _2737 : (isnan(_2737) ? 0.0 : max(_2737, 0.0));
        float _2740 = isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0));
        float _2741 = dot(vec3(cbLight._m0[_2703].xyz), vec3(_2730, _2731, _2732));
        float _4702 = isnan(0.0) ? _2741 : (isnan(_2741) ? 0.0 : max(_2741, 0.0));
        float _2745 = _2722 * _2722;
        float _2749 = ((_2740 * _2740) * (_2745 + (-1.0))) + 1.0;
        float _2756 = exp2(log2(1.0 - (isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0)))) * 5.0);
        float _2763 = 1.0 - _2722;
        float _2773 = (0.5 / (((_2390 * ((_2736 * _2763) + _2722)) + 9.9999999392252902907785028219223e-09) + (((_2390 * _2763) + _2722) * _2736))) * _2736;
        float _4713 = isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : max(_2773, 0.0));
        float _2775 = (isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0))) * (_2745 / ((_2749 * _2749) * 3.141590118408203125));
        float _2776 = isnan(1.0) ? _2129 : (isnan(_2129) ? 1.0 : min(_2129, 1.0));
        _2692 = (((((_2756 * _2412) + _766) * cbLight._m0[_2707].x) * _2775) * _2776) + _2582;
        _2694 = (((((_2756 * _2414) + _768) * cbLight._m0[_2707].y) * _2775) * _2776) + _2584;
        _2696 = (((((_2756 * _2415) + _769) * cbLight._m0[_2707].z) * _2775) * _2776) + _2586;
    }
    float _2842;
    float _2844;
    float _2846;
    float _2848;
    float _2850;
    float _2852;
    if (_2111.y == 0u)
    {
        uvec4 _2797 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2798 = _2797.x;
        uint _2809 = uint((float(_2797.y) * floor(float(uint(cbSceneParam._m0[85u].y * _703) / _2798))) + floor(float(uint(cbSceneParam._m0[85u].x * _702) / _2798)));
        float _2819 = (log2(_1889 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2820 = isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : max(_2819, 0.0));
        uint _2823 = uint(isnan(14.0) ? _2820 : (isnan(_2820) ? 14.0 : min(_2820, 14.0)));
        uvec4 _2828 = texelFetch(g_lightClusterGridBuffer, int(((_2823 << 2u) + (_2809 << 6u)) >> 2u));
        uint _2829 = _2828.x;
        uint _2830 = _2797.z;
        float _2909;
        float _2911;
        float _2913;
        float _2915;
        float _2917;
        float _2919;
        if (((((1u << ((_2830 >> 4u) & 15u)) + 4294967295u) & _2829) == 0u) || ((_2830 & 240u) == 0u))
        {
            _2909 = 0.0;
            _2911 = 0.0;
            _2913 = 0.0;
            _2915 = 0.0;
            _2917 = 0.0;
            _2919 = 0.0;
        }
        else
        {
            float _2910;
            float _2912;
            float _2914;
            float _2916;
            float _2918;
            float _2920;
            float _3062 = 0.0;
            float _3063 = 0.0;
            float _3064 = 0.0;
            float _3065 = 0.0;
            float _3066 = 0.0;
            float _3067 = 0.0;
            uint _3068 = 0u;
            uint _3077;
            bool _3078;
            for (;;)
            {
                _3077 = texelFetch(g_lightClassification, int((((_2823 << 5u) + (_2809 << 9u)) + (_3068 << 2u)) >> 2u)).x;
                _3078 = _3077 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3078)
                {
                    frontier_phi_71_pred = _3067;
                    frontier_phi_71_pred_1 = _3066;
                    frontier_phi_71_pred_2 = _3065;
                    frontier_phi_71_pred_3 = _3064;
                    frontier_phi_71_pred_4 = _3063;
                    frontier_phi_71_pred_5 = _3062;
                }
                else
                {
                    float _3207;
                    float _3208;
                    float _3209;
                    float _3210;
                    float _3211;
                    float _3212;
                    uint _3213;
                    _3207 = _3062;
                    _3208 = _3063;
                    _3209 = _3064;
                    _3210 = _3065;
                    _3211 = _3066;
                    _3212 = _3067;
                    _3213 = _3077;
                    float _3134;
                    float _3135;
                    float _3136;
                    float _3137;
                    float _3138;
                    float _3139;
                    for (;;)
                    {
                        uint _3217 = uint(findLSB(_3213)) + (_3068 << 5u);
                        uint _3214 = (_3213 + 4294967295u) & _3213;
                        uint _3219 = _3217 * 48u;
                        vec4 _3233 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3219)).x, texelFetch(g_PointLightRenderingBuffer, int(_3219 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3219 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3219 + 3u)).x));
                        uint _3239 = (_3217 * 48u) + 4u;
                        vec4 _3252 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3239)).x, texelFetch(g_PointLightRenderingBuffer, int(_3239 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3239 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3239 + 3u)).x));
                        uint _3258 = (_3217 * 48u) + 8u;
                        vec3 _3269 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3258)).x, texelFetch(g_PointLightRenderingBuffer, int(_3258 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3258 + 2u)).x));
                        float _3273 = _3233.x - _1887;
                        float _3274 = _3233.y - _1888;
                        float _3275 = _3233.z - _1889;
                        float _3276 = dot(vec3(_3273, _3274, _3275), vec3(_3273, _3274, _3275));
                        float _3279 = inversesqrt(_3276);
                        float _3280 = _3279 * _3273;
                        float _3281 = _3279 * _3274;
                        float _3282 = _3279 * _3275;
                        float _3283 = dot(vec3(_723, _726, _729), vec3(_3280, _3281, _3282));
                        float _3288 = 1.0 - (_3276 * _3233.w);
                        float _4739 = isnan(0.0) ? _3288 : (isnan(_3288) ? 0.0 : max(_3288, 0.0));
                        float _3289 = isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0));
                        float _3290 = sqrt(_3276) * _3252.w;
                        float _3293 = 1.39999997615814208984375 / (_3290 + 1.39999997615814208984375);
                        float _3294 = _3293 * _3293;
                        float _3297 = ((1.0 - _3294) * _3283) + _3294;
                        float _3300 = _3290 * _3290;
                        float _3304 = ((isnan(0.0) ? _3297 : (isnan(_3297) ? 0.0 : max(_3297, 0.0))) * _3289) / ((_3300 * 0.699999988079071044921875) + 1.0);
                        float _3308 = (-0.0) - _1887;
                        float _3309 = (-0.0) - _1888;
                        float _3310 = (-0.0) - _1889;
                        float _3314 = inversesqrt(dot(vec3(_3308, _3309, _3310), vec3(_3308, _3309, _3310)));
                        float _3315 = _3314 * _3308;
                        float _3316 = _3314 * _3309;
                        float _3317 = _3314 * _3310;
                        float _3324 = exp2(log2(1.0 / ((_3300 * 3.5) + 5.0)) * 0.25);
                        float _3325 = 1.0 - _798;
                        float _3332 = sqrt(1.0 - ((1.0 - (_3325 * _3325)) * (1.0 - (_3324 * _3324))));
                        float _3333 = _3332 * _3332;
                        float _3334 = _3333 * _3333;
                        float _3335 = _3315 + _3280;
                        float _3336 = _3316 + _3281;
                        float _3337 = _3317 + _3282;
                        float _3341 = inversesqrt(dot(vec3(_3335, _3336, _3337), vec3(_3335, _3336, _3337)));
                        float _3345 = dot(vec3(_723, _726, _729), vec3(_3315, _3316, _3317));
                        float _4755 = isnan(0.0) ? _3345 : (isnan(_3345) ? 0.0 : max(_3345, 0.0));
                        float _3348 = isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0));
                        float _3349 = dot(vec3(_723, _726, _729), vec3(_3341 * _3335, _3341 * _3336, _3341 * _3337));
                        float _4766 = isnan(0.0) ? _3349 : (isnan(_3349) ? 0.0 : max(_3349, 0.0));
                        float _3352 = isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0));
                        float _3356 = ((_3352 * _3352) * (_3334 + (-1.0))) + 1.0;
                        float _3357 = _3293 * _3333;
                        float _3358 = _3357 * _3357;
                        float _3361 = ((1.0 - _3358) * _3283) + _3358;
                        float _4777 = isnan(0.0) ? _3361 : (isnan(_3361) ? 0.0 : max(_3361, 0.0));
                        float _3362 = isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0));
                        float _3363 = 1.0 - _3333;
                        float _3373 = (0.5 / (((_3362 * ((_3348 * _3363) + _3333)) + 9.9999999392252902907785028219223e-09) + (((_3362 * _3363) + _3333) * _3348))) * _3362;
                        float _4788 = isnan(0.0) ? _3373 : (isnan(_3373) ? 0.0 : max(_3373, 0.0));
                        float _3384 = (((_3334 * 3.1415927410125732421875) * (isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0)))) / ((_3356 * _3356) * ((_3300 * 2.1991131305694580078125) + 3.141590118408203125))) * _3289;
                        _3137 = (_3304 * _3252.x) + _3210;
                        _3138 = (_3304 * _3252.y) + _3211;
                        _3139 = (_3304 * _3252.z) + _3212;
                        _3134 = (_3384 * _3269.x) + _3207;
                        _3135 = (_3384 * _3269.y) + _3208;
                        _3136 = (_3384 * _3269.z) + _3209;
                        if (_3214 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3207 = _3134;
                            _3208 = _3135;
                            _3209 = _3136;
                            _3210 = _3137;
                            _3211 = _3138;
                            _3212 = _3139;
                            _3213 = _3214;
                        }
                    }
                    frontier_phi_71_pred = _3139;
                    frontier_phi_71_pred_1 = _3138;
                    frontier_phi_71_pred_2 = _3137;
                    frontier_phi_71_pred_3 = _3136;
                    frontier_phi_71_pred_4 = _3135;
                    frontier_phi_71_pred_5 = _3134;
                }
                _2920 = frontier_phi_71_pred;
                _2918 = frontier_phi_71_pred_1;
                _2916 = frontier_phi_71_pred_2;
                _2914 = frontier_phi_71_pred_3;
                _2912 = frontier_phi_71_pred_4;
                _2910 = frontier_phi_71_pred_5;
                uint _3069 = _3068 + 1u;
                if (_3069 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3062 = _2910;
                    _3063 = _2912;
                    _3064 = _2914;
                    _3065 = _2916;
                    _3066 = _2918;
                    _3067 = _2920;
                    _3068 = _3069;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2909 = _2910;
            _2911 = _2912;
            _2913 = _2914;
            _2915 = _2916;
            _2917 = _2918;
            _2919 = _2920;
        }
        uvec4 _2923 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2924 = _2923.z;
        uint _2926 = (_2924 >> 8u) & 15u;
        float _3030;
        float _3032;
        float _3034;
        float _3036;
        float _3038;
        float _3040;
        if (((4294967295u << _2926) & _2829) == 0u)
        {
            _3030 = _2909;
            _3032 = _2911;
            _3034 = _2913;
            _3036 = _2915;
            _3038 = _2917;
            _3040 = _2919;
        }
        else
        {
            float _3055 = inversesqrt(dot(vec3(_1887, _1888, _1889), vec3(_1887, _1888, _1889)));
            float _3056 = _3055 * _1887;
            float _3057 = _3055 * _1888;
            float _3058 = _3055 * _1889;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2926 < ((_2924 >> 12u) & 15u))
            {
                float _3031;
                float _3033;
                float _3035;
                float _3037;
                float _3039;
                float _3041;
                float _3190 = _2909;
                float _3191 = _2911;
                float _3192 = _2913;
                float _3193 = _2915;
                float _3194 = _2917;
                float _3195 = _2919;
                uint _3196 = _2926;
                uint _3205;
                bool _3206;
                for (;;)
                {
                    _3205 = texelFetch(g_lightClassification, int((((_2823 << 5u) + (_2809 << 9u)) + (_3196 << 2u)) >> 2u)).x;
                    _3206 = _3205 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3206)
                    {
                        frontier_phi_82_pred = _3195;
                        frontier_phi_82_pred_1 = _3194;
                        frontier_phi_82_pred_2 = _3193;
                        frontier_phi_82_pred_3 = _3192;
                        frontier_phi_82_pred_4 = _3191;
                        frontier_phi_82_pred_5 = _3190;
                    }
                    else
                    {
                        float _3398;
                        float _3399;
                        float _3400;
                        float _3401;
                        float _3402;
                        float _3403;
                        float _3691;
                        float _3692;
                        float _3693;
                        float _3694;
                        float _3695;
                        float _3696;
                        float _3411 = _3190;
                        float _3412 = _3191;
                        float _3413 = _3192;
                        float _3414 = _3193;
                        float _3415 = _3194;
                        float _3416 = _3195;
                        uint _3417 = _3205;
                        uint _3418;
                        vec4 _3443;
                        float _3444;
                        vec4 _3459;
                        vec3 _3471;
                        vec4 _3486;
                        vec4 _3501;
                        float _3547;
                        bool _3548;
                        for (;;)
                        {
                            uint _3428 = ((_3196 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3417));
                            _3418 = (_3417 + 4294967295u) & _3417;
                            uint _3430 = _3428 * 40u;
                            _3443 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3430)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 3u)).x));
                            _3444 = _3443.w;
                            uint _3446 = (_3428 * 40u) + 4u;
                            _3459 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3446)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 3u)).x));
                            uint _3461 = (_3428 * 40u) + 8u;
                            _3471 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3461)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3461 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3461 + 2u)).x));
                            uint _3473 = (_3428 * 40u) + 16u;
                            _3486 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3473)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 3u)).x));
                            uint _3488 = (_3428 * 40u) + 20u;
                            _3501 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3488)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3488 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3488 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3488 + 3u)).x));
                            uint _3503 = (_3428 * 40u) + 24u;
                            vec4 _3516 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3503)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3503 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3503 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3503 + 3u)).x));
                            uint _3522 = (_3428 * 40u) + 28u;
                            vec4 _3535 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3522)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 3u)).x));
                            _3547 = fma(_1889, _3535.z, fma(_1888, _3535.y, _3535.x * _1887)) + _3535.w;
                            _3548 = !((fma(_1889, _3516.z, fma(_1888, _3516.y, _3516.x * _1887)) + _3516.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3548)
                            {
                                float _3575 = _3443.x - _1887;
                                float _3576 = _3443.y - _1888;
                                float _3577 = _3443.z - _1889;
                                float _3578 = dot(vec3(_3575, _3576, _3577), vec3(_3575, _3576, _3577));
                                float _3581 = inversesqrt(_3578);
                                float _3582 = _3581 * _3575;
                                float _3583 = _3581 * _3576;
                                float _3584 = _3581 * _3577;
                                float _3588 = 1.0 - (_3578 / (_3444 * _3444));
                                float _4799 = isnan(0.0) ? _3588 : (isnan(_3588) ? 0.0 : max(_3588, 0.0));
                                float _3589 = isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0));
                                float _3593 = sqrt(_3578) * _3459.w;
                                float _3595 = 1.39999997615814208984375 / (_3593 + 1.39999997615814208984375);
                                float _3596 = _3595 * _3595;
                                float _3599 = ((1.0 - _3596) * dot(vec3(_3582, _3583, _3584), vec3(_723, _726, _729))) + _3596;
                                float _3602 = _3593 * _3593;
                                float _3606 = (fma(_1889, _3486.z, fma(_1888, _3486.y, _3486.x * _1887)) + _3486.w) / _3547;
                                float _3607 = (fma(_1889, _3501.z, fma(_1888, _3501.y, _3501.x * _1887)) + _3501.w) / _3547;
                                float _3611 = 1.0 - dot(vec2(_3606, _3607), vec2(_3606, _3607));
                                float _4815 = isnan(0.0) ? _3611 : (isnan(_3611) ? 0.0 : max(_3611, 0.0));
                                float _3612 = isnan(1.0) ? _4815 : (isnan(_4815) ? 1.0 : min(_4815, 1.0));
                                float _3613 = _3612 * (((isnan(0.0) ? _3599 : (isnan(_3599) ? 0.0 : max(_3599, 0.0))) * _3589) / ((_3602 * 0.699999988079071044921875) + 1.0));
                                float _3625 = exp2(log2(1.0 / ((_3602 * 3.5) + 5.0)) * 0.25);
                                float _3626 = 1.0 - _798;
                                float _3633 = sqrt(1.0 - ((1.0 - (_3626 * _3626)) * (1.0 - (_3625 * _3625))));
                                float _3634 = _3633 * _3633;
                                float _3635 = _3634 * _3634;
                                float _3636 = _3582 - _3056;
                                float _3637 = _3583 - _3057;
                                float _3638 = _3584 - _3058;
                                float _3642 = inversesqrt(dot(vec3(_3636, _3637, _3638), vec3(_3636, _3637, _3638)));
                                float _3646 = dot(vec3(_723, _726, _729), vec3((-0.0) - _3056, (-0.0) - _3057, (-0.0) - _3058));
                                float _4826 = isnan(0.0) ? _3646 : (isnan(_3646) ? 0.0 : max(_3646, 0.0));
                                float _3649 = isnan(1.0) ? _4826 : (isnan(_4826) ? 1.0 : min(_4826, 1.0));
                                float _3650 = dot(vec3(_723, _726, _729), vec3(_3642 * _3636, _3642 * _3637, _3642 * _3638));
                                float _4837 = isnan(0.0) ? _3650 : (isnan(_3650) ? 0.0 : max(_3650, 0.0));
                                float _3653 = isnan(1.0) ? _4837 : (isnan(_4837) ? 1.0 : min(_4837, 1.0));
                                float _3657 = ((_3653 * _3653) * (_3635 + (-1.0))) + 1.0;
                                float _3658 = _3595 * _3634;
                                float _3659 = _3658 * _3658;
                                float _3665 = ((1.0 - _3659) * dot(vec3(_723, _726, _729), vec3(_3582, _3583, _3584))) + _3659;
                                float _4848 = isnan(0.0) ? _3665 : (isnan(_3665) ? 0.0 : max(_3665, 0.0));
                                float _3666 = isnan(1.0) ? _4848 : (isnan(_4848) ? 1.0 : min(_4848, 1.0));
                                float _3667 = 1.0 - _3634;
                                float _3677 = (0.5 / (((_3666 * ((_3649 * _3667) + _3634)) + 9.9999999392252902907785028219223e-09) + (((_3666 * _3667) + _3634) * _3649))) * _3666;
                                float _4859 = isnan(0.0) ? _3677 : (isnan(_3677) ? 0.0 : max(_3677, 0.0));
                                float _3687 = (_3612 * _3589) * (((_3635 * 3.1415927410125732421875) * (isnan(1.0) ? _4859 : (isnan(_4859) ? 1.0 : min(_4859, 1.0)))) / ((_3657 * _3657) * ((_3602 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3613 * _3459.z;
                                frontier_phi_88_pred_1 = _3613 * _3459.y;
                                frontier_phi_88_pred_2 = _3613 * _3459.x;
                                frontier_phi_88_pred_3 = _3687 * _3471.z;
                                frontier_phi_88_pred_4 = _3687 * _3471.y;
                                frontier_phi_88_pred_5 = _3687 * _3471.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3696 = frontier_phi_88_pred;
                            _3695 = frontier_phi_88_pred_1;
                            _3694 = frontier_phi_88_pred_2;
                            _3693 = frontier_phi_88_pred_3;
                            _3692 = frontier_phi_88_pred_4;
                            _3691 = frontier_phi_88_pred_5;
                            _3401 = _3694 + _3414;
                            _3402 = _3695 + _3415;
                            _3403 = _3696 + _3416;
                            _3398 = _3691 + _3411;
                            _3399 = _3692 + _3412;
                            _3400 = _3693 + _3413;
                            if (_3418 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3411 = _3398;
                                _3412 = _3399;
                                _3413 = _3400;
                                _3414 = _3401;
                                _3415 = _3402;
                                _3416 = _3403;
                                _3417 = _3418;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3403;
                        frontier_phi_82_pred_1 = _3402;
                        frontier_phi_82_pred_2 = _3401;
                        frontier_phi_82_pred_3 = _3400;
                        frontier_phi_82_pred_4 = _3399;
                        frontier_phi_82_pred_5 = _3398;
                    }
                    _3041 = frontier_phi_82_pred;
                    _3039 = frontier_phi_82_pred_1;
                    _3037 = frontier_phi_82_pred_2;
                    _3035 = frontier_phi_82_pred_3;
                    _3033 = frontier_phi_82_pred_4;
                    _3031 = frontier_phi_82_pred_5;
                    uint _3197 = _3196 + 1u;
                    if (_3197 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3190 = _3031;
                        _3191 = _3033;
                        _3192 = _3035;
                        _3193 = _3037;
                        _3194 = _3039;
                        _3195 = _3041;
                        _3196 = _3197;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3037;
                frontier_phi_63_64_ladder_1 = _3041;
                frontier_phi_63_64_ladder_2 = _3039;
                frontier_phi_63_64_ladder_3 = _3035;
                frontier_phi_63_64_ladder_4 = _3033;
                frontier_phi_63_64_ladder_5 = _3031;
            }
            else
            {
                frontier_phi_63_64_ladder = _2915;
                frontier_phi_63_64_ladder_1 = _2919;
                frontier_phi_63_64_ladder_2 = _2917;
                frontier_phi_63_64_ladder_3 = _2913;
                frontier_phi_63_64_ladder_4 = _2911;
                frontier_phi_63_64_ladder_5 = _2909;
            }
            _3030 = frontier_phi_63_64_ladder_5;
            _3032 = frontier_phi_63_64_ladder_4;
            _3034 = frontier_phi_63_64_ladder_3;
            _3036 = frontier_phi_63_64_ladder;
            _3038 = frontier_phi_63_64_ladder_2;
            _3040 = frontier_phi_63_64_ladder_1;
        }
        float _3045 = isnan(1.0) ? _782 : (isnan(_782) ? 1.0 : min(_782, 1.0));
        _2842 = (_3045 * _3036) + _2354;
        _2844 = (_3045 * _3038) + _2356;
        _2846 = (_3045 * _3040) + _2358;
        _2848 = ((_3030 * _766) * _3045) + _2692;
        _2850 = ((_3032 * _768) * _3045) + _2694;
        _2852 = ((_3034 * _769) * _3045) + _2696;
    }
    else
    {
        _2842 = _2354;
        _2844 = _2356;
        _2846 = _2358;
        _2848 = _2692;
        _2850 = _2694;
        _2852 = _2696;
    }
    float _4875 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _4886 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
    float _4897 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _2869 = ((isnan(1.0) ? _4875 : (isnan(_4875) ? 1.0 : min(_4875, 1.0))) * (_2842 + ((isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0))) * _782))) + ((_2848 + ((isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0))) * _1621)) * cbPerFrame._m0[3u].x);
    float _2870 = ((isnan(1.0) ? _4886 : (isnan(_4886) ? 1.0 : min(_4886, 1.0))) * (_2844 + ((isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0))) * _782))) + ((_2850 + ((isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0))) * _1621)) * cbPerFrame._m0[3u].x);
    float _2871 = ((isnan(1.0) ? _4897 : (isnan(_4897) ? 1.0 : min(_4897, 1.0))) * (_2846 + ((isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0))) * _782))) + ((_2852 + ((isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0))) * _1621)) * cbPerFrame._m0[3u].x);
    uint _2872 = _262 + 6u;
    float _2880 = _702 / cbSceneParam._m0[86u].x;
    float _2881 = _703 / cbSceneParam._m0[86u].y;
    vec4 _2895 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2880, _2881, (log2((isnan(cbSceneParam._m0[77u].w) ? _623 : (isnan(_623) ? cbSceneParam._m0[77u].w : min(_623, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2897 = _2895.x;
    float _2898 = _2895.y;
    float _2899 = _2895.z;
    float _2900 = _2895.w;
    float _2972;
    float _2974;
    float _2976;
    float _2978;
    if (_623 > cbSceneParam._m0[78u].w)
    {
        float _2934 = isnan(_623) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _623 : min(cbSceneParam._m0[80u].w, _623));
        float _2935 = _2934 / _623;
        float _2946 = _2935 * _674;
        float _2947 = _675 * _2935;
        float _2948 = (-0.0) - _2947;
        float _2950 = _2935 * _676;
        float _2952 = (cbSceneParam._m0[77u].w * _2948) / _2934;
        float _2953 = _2952 + cbSceneParam._m0[79u].w;
        float _2954 = cbSceneParam._m0[79u].w - _2947;
        float _2960 = sqrt(((_2946 * _2946) + (_2947 * _2947)) + (_2950 * _2950));
        float _2963 = (1.0 - (cbSceneParam._m0[77u].w / _2934)) * _2960;
        float _2968 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2970 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3147;
        if (abs((_2948 - _2952) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3147 = ((((_2953 > 0.0) ? exp2(_2968 * _2953) : (2.0 - exp2(_2970 * _2953))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2963;
        }
        else
        {
            float _3091 = 1.0 / cbSceneParam._m0[80u].x;
            float _3092 = isnan(_2954) ? _2953 : (isnan(_2953) ? _2954 : max(_2953, _2954));
            float _3093 = isnan(_2954) ? _2953 : (isnan(_2953) ? _2954 : min(_2953, _2954));
            float _3102 = isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : min(_3092, 0.0));
            float _3103 = isnan(0.0) ? _3093 : (isnan(_3093) ? 0.0 : min(_3093, 0.0));
            _3147 = ((abs(_2960 / _2948) * cbSceneParam._m0[80u].y) * ((((_3102 - _3103) * 2.0) - ((exp2(_2968 * (isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : max(_3092, 0.0)))) - exp2(_2968 * (isnan(0.0) ? _3093 : (isnan(_3093) ? 0.0 : max(_3093, 0.0))))) * _3091)) - ((exp2(_2970 * _3102) - exp2(_2970 * _3103)) * _3091))) + (_2963 * cbSceneParam._m0[80u].z);
        }
        vec4 _3149 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2880, _2881, 1.0), 0.0);
        float _3158 = exp2((_3147 * (-1.44269502162933349609375)) * (1.0 - _3149.w));
        float _3159 = log2(_3158);
        float _3175 = log2(_2900);
        _2972 = (exp2(_3175 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3159 * cbSceneParam._m0[78u].x)) * _3149.x) / cbSceneParam._m0[78u].x)) + _2897;
        _2974 = (exp2(_3175 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3159 * cbSceneParam._m0[78u].y)) * _3149.y) / cbSceneParam._m0[78u].y)) + _2898;
        _2976 = (exp2(_3175 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3159 * cbSceneParam._m0[78u].z)) * _3149.z) / cbSceneParam._m0[78u].z)) + _2899;
        _2978 = _3158 * _2900;
    }
    else
    {
        _2972 = _2897;
        _2974 = _2898;
        _2976 = _2899;
        _2978 = _2900;
    }
    bool _3185;
    vec4 _2988;
    vec4 _3010;
    float _3012;
    float _3016;
    float _3017;
    float _3018;
    float _3019;
    bool _3029;
    for (;;)
    {
        _2988 = cbMatDynParam._m0[0u];
        float _2990 = roundEven(_2988.y);
        bool _2991 = _2990 == 3.0;
        float _2992 = log2(_2978);
        float _2999 = exp2(_2992 * cbSceneParam._m0[78u].x) * _2869;
        float _3000 = exp2(_2992 * cbSceneParam._m0[78u].y) * _2870;
        float _3001 = exp2(_2992 * cbSceneParam._m0[78u].z) * _2871;
        float _3008 = _690 + (-0.5);
        _3010 = cbMtdParam._m0[1u];
        _3012 = _3010.y * _3008;
        float _3015 = (_2990 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3016 = _3015 * (_2991 ? _2999 : (_2999 + (cbSceneParam._m0[72u].w * _2972)));
        _3017 = _3015 * (_2991 ? _3000 : (_3000 + (cbSceneParam._m0[72u].w * _2974)));
        _3018 = _3015 * (_2991 ? _3001 : (_3001 + (cbSceneParam._m0[72u].w * _2976)));
        _3019 = _3008 * 0.999000012874603271484375;
        _3029 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3029)
        {
            if ((cbInstanceData._m0[_262 + 7u].x + _3019) < 0.5)
            {
                _3185 = true;
                break;
            }
        }
        uint _3126 = _742 + uint(_2988.w);
        if ((cbInstanceData._m0[_3126].w < 1.0) && ((cbInstanceData._m0[_3126].w + _3019) < 0.5))
        {
            _3185 = true;
            break;
        }
        if ((_3012 + 1.0) < _3010.x)
        {
            _3185 = true;
            break;
        }
        _3185 = false;
        break;
    }
    float _3389;
    if (_3185)
    {
        discard_state = true;
        _3389 = 0.0;
    }
    else
    {
        _3389 = cbInstanceData._m0[_2872].w;
    }
    SV_Target.x = _3016;
    SV_Target.y = _3017;
    SV_Target.z = _3018;
    SV_Target.w = _3389;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2872].w;
    discard_exit();
}


