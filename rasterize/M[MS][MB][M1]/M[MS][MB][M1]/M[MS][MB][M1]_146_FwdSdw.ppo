#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1364;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _231 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _232 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _233 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _239 = inversesqrt(dot(vec3(_231, _232, _233), vec3(_231, _232, _233)));
    float _240 = _239 * _231;
    float _241 = _239 * _232;
    float _242 = _239 * _233;
    float _246 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _247 = _246 * NORMAL.x;
    float _248 = _246 * NORMAL.y;
    float _249 = _246 * NORMAL.z;
    float _253 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _254 = _253 * TANGENT.x;
    float _255 = _253 * TANGENT.y;
    float _256 = _253 * TANGENT.z;
    uint _259 = uint(roundEven(NORMAL.w)) * 13u;
    uint _264 = _259 + 1u;
    uint _268 = _259 + 2u;
    float _277 = sqrt(((cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x) + (cbInstanceData._m0[_259].x * cbInstanceData._m0[_259].x)) + (cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x));
    float _278 = _277 * TEXCOORD.z;
    float _279 = _277 * TEXCOORD.w;
    vec4 _299 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _305 = _299.x * cbMtdParam._m0[11u].x;
    float _306 = _299.y * cbMtdParam._m0[11u].y;
    float _307 = _299.z * cbMtdParam._m0[11u].z;
    vec4 _326 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _278) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _279) + cbTextureTilingScale._m0[5u].w));
    vec4 _364 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _366 = _364.x;
    float _378 = dot(vec4(_366, _364.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _395 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_366 - _378) * cbMtdParam._m0[24u].y) + _378) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3971 = isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0));
    float _396 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
    float _403 = (_396 * ((_326.x * cbMtdParam._m0[12u].x) - _305)) + _305;
    float _404 = (_396 * ((_326.y * cbMtdParam._m0[12u].y) - _306)) + _306;
    float _405 = (_396 * ((_326.z * cbMtdParam._m0[12u].z) - _307)) + _307;
    vec4 _424 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _278) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _279) + cbTextureTilingScale._m0[14u].w));
    vec4 _444 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _278) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _279) + cbTextureTilingScale._m0[20u].w));
    vec4 _471 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _278) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _279) + cbTextureTilingScale._m0[4u].w));
    vec4 _488 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _490 = _488.x;
    float _491 = _488.y;
    float _492 = _488.z;
    float _501 = ((_471.z - _492) * _396) + _492;
    float _504 = ((((_471.x - _490) * _396) + _490) * 2.0) + (-1.0);
    float _505 = ((((_471.y - _491) * _396) + _491) * 2.0) + (-1.0);
    float _506 = dot(vec2(_504, _505), vec2(_504, _505));
    float _3982 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _511 = sqrt(1.0 - (isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0))));
    float _514 = _504 + ((((_444.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x);
    float _515 = _505 + ((((_444.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x);
    float _518 = fma(_511, _247, fma(_515, _254, _514 * _240));
    float _521 = fma(_511, _248, fma(_515, _255, _514 * _241));
    float _524 = fma(_511, _249, fma(_515, _256, _514 * _242));
    float _528 = inversesqrt(dot(vec3(_518, _521, _524), vec3(_518, _521, _524)));
    vec4 _544 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _570 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _278) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _279) + cbTextureTilingScale._m0[11u].w));
    float _572 = _570.x;
    float _573 = 1.0 - _572;
    float _579 = (cbMtdParam._m0[19u].x + dot(vec4(_528 * _518, _528 * _521, _528 * _524, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_572 - _573) * cbMtdParam._m0[24u].z) + _573) * cbMtdParam._m0[21u].z);
    float _3993 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _580 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
    float _582 = (-0.0) - cbMtdParam._m0[24u].x;
    float _584 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
    float _585 = isnan(1.0) ? _584 : (isnan(_584) ? 1.0 : min(_584, 1.0));
    float _592 = _580 - ((_580 * TEXCOORD_8.x) * _585);
    float _593 = _580 - ((_580 * TEXCOORD_8.y) * _585);
    float _594 = _580 - ((_580 * TEXCOORD_8.z) * _585);
    float _601 = (_592 * ((_424.x * cbMtdParam._m0[18u].x) - _403)) + _403;
    float _602 = (_593 * ((_424.y * cbMtdParam._m0[18u].y) - _404)) + _404;
    float _603 = (_594 * ((_424.z * cbMtdParam._m0[18u].z) - _405)) + _405;
    vec4 _615 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _278) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _279) + cbTextureTilingScale._m0[19u].w));
    float _617 = _615.x;
    float _618 = 1.0 - _617;
    float _646 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_617 - _618) * cbMtdParam._m0[24u].w) + _618) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4014 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _647 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
    float _655 = ((((cbMtdParam._m0[10u].x - _601) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _647) + _601;
    float _656 = ((((cbMtdParam._m0[10u].y - _602) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _647) + _602;
    float _657 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _603)) * _647) + _603;
    vec4 _683 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _685 = _683.x;
    float _703 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _278) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _279) + cbTextureTilingScale._m0[9u].w)).x - _685) * _396) + _685;
    float _707 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _703) * cbMtdParam._m0[19u].z) + _703;
    float _709 = _707 - (_707 * _592);
    float _711 = _709 - (_709 * _647);
    float _716 = (((_444.z - _501) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _501;
    vec4 _730 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _278) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _279) + cbTextureTilingScale._m0[15u].w));
    float _737 = (_730.x * 2.0) + (-1.0);
    float _738 = (_730.y * 2.0) + (-1.0);
    float _739 = dot(vec2(_737, _738), vec2(_737, _738));
    float _4025 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _747 = ((_730.z - _716) * _592) + _716;
    float _750 = ((cbMtdParam._m0[23u].y - _747) * _647) + _747;
    vec4 _769 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _278) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _279) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _775 = (_769.x * 2.0) + (-1.0);
    float _776 = (_769.y * 2.0) + (-1.0);
    float _777 = dot(vec2(_775, _776), vec2(_775, _776));
    float _4036 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
    float _792 = ((sqrt(1.0 - (isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0)))) - _511) * _594) + _511;
    float _795 = (((_737 - _514) * _592) + _514) + (cbMtdParam._m0[21u].x * _514);
    float _796 = (((_738 - _515) * _593) + _515) + (cbMtdParam._m0[21u].x * _515);
    float _807 = (((_775 - _795) + (_795 * cbMtdParam._m0[22u].z)) * _647) + _795;
    float _808 = (((_776 - _796) + (_796 * cbMtdParam._m0[22u].z)) * _647) + _796;
    float _809 = (_647 * (sqrt(1.0 - (isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0)))) - _792)) + _792;
    float _811 = cbMtdParam._m0[22u].x + _544.w;
    float _814 = fma(_809, _247, fma(_808, _254, _807 * _240));
    float _817 = fma(_809, _248, fma(_808, _255, _807 * _241));
    float _820 = fma(_809, _249, fma(_808, _256, _807 * _242));
    float _824 = inversesqrt(dot(vec3(_814, _817, _820), vec3(_814, _817, _820)));
    float _825 = _824 * _814;
    float _826 = _824 * _817;
    float _827 = _824 * _820;
    float _4047 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
    float _828 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
    float _4058 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
    float _4069 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    float _4080 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _4091 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _4102 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _833 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
    float _847 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _887 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _897 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _887);
    float _898 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _887);
    float _899 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _887);
    float _903 = inversesqrt(dot(vec3(_897, _898, _899), vec3(_897, _898, _899)));
    float _904 = _897 * _903;
    float _905 = _898 * _903;
    float _906 = _899 * _903;
    float _912 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _913 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _931 = fma(_827, cbSceneParam._m0[5u].z, fma(_826, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _825));
    float _934 = fma(_827, cbSceneParam._m0[6u].z, fma(_826, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _825));
    float _937 = fma(_827, cbSceneParam._m0[7u].z, fma(_826, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _825));
    uint _951 = (_259 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _957 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0)))) * cbInstanceData._m0[_951].x;
    float _958 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0)))) * cbInstanceData._m0[_951].y;
    float _959 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0)))) * cbInstanceData._m0[_951].z;
    float _4113 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
    float _960 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
    float _4124 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
    float _961 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
    float _4135 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
    float _962 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
    float _963 = 1.0 - _833;
    float _964 = _960 * _963;
    float _965 = _961 * _963;
    float _966 = _962 * _963;
    float _971 = (_960 + (-0.039999999105930328369140625)) * _833;
    float _972 = (_961 + (-0.039999999105930328369140625)) * _833;
    float _973 = (_962 + (-0.039999999105930328369140625)) * _833;
    float _974 = _971 + 0.039999999105930328369140625;
    float _976 = _972 + 0.039999999105930328369140625;
    float _977 = _973 + 0.039999999105930328369140625;
    vec4 _986 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _912, cbSceneParam._m0[86u].y * _913));
    float _990 = ((isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0))) * TEXCOORD_5.w) * _986.x;
    float _991 = dot(vec3(_825, _826, _827), vec3(_904, _905, _906));
    float _994 = _991 * 2.0;
    float _998 = (_994 * _825) - _904;
    float _999 = (_994 * _826) - _905;
    float _1000 = (_994 * _827) - _906;
    float _1004 = abs(dot(vec3(_904, _905, _906), vec3(_825, _826, _827)));
    float _4146 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
    float _1006 = sqrt(_828);
    float _1019 = exp2((_1006 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1006 * 3.0));
    float _1025 = (1.0 - _1019) * ((_1006 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1026 = _1019 * _1006;
    float _1054 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1058 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1062 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1363;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1088 = fma(_1062, cbModelParam._m0[26u].z, fma(_1058, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1054));
        float _1092 = fma(_1062, cbModelParam._m0[27u].z, fma(_1058, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1054));
        float _1096 = fma(_1062, cbModelParam._m0[28u].z, fma(_1058, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1054));
        float _1121 = _1054 + _825;
        float _1122 = _1058 + _826;
        float _1123 = _1062 + _827;
        float _1133 = fma(_1123, cbModelParam._m0[26u].z, fma(_1122, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1121)) - _1088;
        float _1134 = fma(_1123, cbModelParam._m0[27u].z, fma(_1122, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1121)) - _1092;
        float _1135 = fma(_1123, cbModelParam._m0[28u].z, fma(_1122, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1121)) - _1096;
        float _1139 = inversesqrt(dot(vec3(_1133, _1134, _1135), vec3(_1133, _1134, _1135)));
        float _1152 = ((_1139 * _1133) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1088 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1153 = ((_1139 * _1134) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1092 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1154 = ((_1139 * _1135) / cbModelParam._m0[34u].z) + ((((((_1096 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1157 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1152, _1153, _1154), 0.0);
        vec4 _1164 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1152, _1153, _1154), 0.0);
        vec4 _1171 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1152, _1153, _1154), 0.0);
        vec4 _1178 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1152, _1153, _1154), 0.0);
        float _1191 = exp2((_1157.w + (-0.5)) * 20.0) * 2.0;
        float _1192 = _1191 * (_1157.x + (-0.5));
        float _1193 = _1191 * (_1157.y + (-0.5));
        float _1194 = _1191 * (_1157.z + (-0.5));
        float _1201 = exp2((_1164.w + (-0.5)) * 20.0) * 2.0;
        float _1202 = _1201 * (_1164.x + (-0.5));
        float _1203 = _1201 * (_1164.y + (-0.5));
        float _1204 = _1201 * (_1164.z + (-0.5));
        float _1211 = exp2((_1171.w + (-0.5)) * 20.0) * 2.0;
        float _1212 = _1211 * (_1171.x + (-0.5));
        float _1213 = _1211 * (_1171.y + (-0.5));
        float _1214 = _1211 * (_1171.z + (-0.5));
        float _1221 = exp2((_1178.w + (-0.5)) * 20.0) * 2.0;
        float _1222 = _1221 * (_1178.x + (-0.5));
        float _1223 = _1221 * (_1178.y + (-0.5));
        float _1224 = _1221 * (_1178.z + (-0.5));
        float _1225 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1226 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1227 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1228 = _1192 * 0.5;
        float _1229 = _1202 * 0.5;
        float _1230 = _1212 * 0.5;
        float _1231 = dot(vec3(_1228, _1229, _1230), vec3(_1228, _1229, _1230));
        float _1236 = (_1231 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1231);
        float _1245 = (dot(vec3(_825, _826, _827), vec3(_1236 * _1228, _1236 * _1229, _1236 * _1230)) + 1.0) * 0.5;
        float _4172 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1255 = sqrt(((_1229 * _1229) + (_1228 * _1228)) + (_1230 * _1230)) / (_1225 + 9.9999997473787516355514526367188e-06);
        float _4183 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1256 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
        float _1257 = _1256 * 2.0;
        float _1261 = (1.0 - _1256) / (_1256 + 1.0);
        float _4194 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1262 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
        float _1271 = ((((1.0 - _1262) * (_1257 + 2.0)) * exp2(log2(isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0))) * (_1257 + 1.0))) + _1262) * _1225;
        float _1272 = _1193 * 0.5;
        float _1273 = _1203 * 0.5;
        float _1274 = _1213 * 0.5;
        float _1275 = dot(vec3(_1272, _1273, _1274), vec3(_1272, _1273, _1274));
        float _1280 = (_1275 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1275);
        float _1288 = (dot(vec3(_825, _826, _827), vec3(_1280 * _1272, _1280 * _1273, _1280 * _1274)) + 1.0) * 0.5;
        float _4205 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1297 = sqrt(((_1273 * _1273) + (_1272 * _1272)) + (_1274 * _1274)) / (_1226 + 9.9999997473787516355514526367188e-06);
        float _4216 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1298 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
        float _1299 = _1298 * 2.0;
        float _1303 = (1.0 - _1298) / (_1298 + 1.0);
        float _4227 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1304 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
        float _1313 = ((((1.0 - _1304) * (_1299 + 2.0)) * exp2(log2(isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0))) * (_1299 + 1.0))) + _1304) * _1226;
        float _1314 = _1194 * 0.5;
        float _1315 = _1204 * 0.5;
        float _1316 = _1214 * 0.5;
        float _1317 = dot(vec3(_1314, _1315, _1316), vec3(_1314, _1315, _1316));
        float _1322 = (_1317 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1317);
        float _1330 = (dot(vec3(_825, _826, _827), vec3(_1322 * _1314, _1322 * _1315, _1322 * _1316)) + 1.0) * 0.5;
        float _4238 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1339 = sqrt(((_1315 * _1315) + (_1314 * _1314)) + (_1316 * _1316)) / (_1227 + 9.9999997473787516355514526367188e-06);
        float _4249 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1340 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
        float _1341 = _1340 * 2.0;
        float _1345 = (1.0 - _1340) / (_1340 + 1.0);
        float _4260 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1346 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
        float _1355 = ((((1.0 - _1346) * (_1341 + 2.0)) * exp2(log2(isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0))) * (_1341 + 1.0))) + _1346) * _1227;
        _1363 = _1194;
        _1365 = _1193;
        _1366 = _1192;
        _1367 = _1204;
        _1368 = _1203;
        _1369 = _1202;
        _1370 = _1214;
        _1371 = _1213;
        _1372 = _1212;
        _1373 = _1227;
        _1374 = _1226;
        _1375 = _1225;
        _1376 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0)));
        _1377 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0)));
        _1378 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0)));
    }
    else
    {
        _1363 = _1364;
        _1365 = _1364;
        _1366 = _1364;
        _1367 = _1364;
        _1368 = _1364;
        _1369 = _1364;
        _1370 = _1364;
        _1371 = _1364;
        _1372 = _1364;
        _1373 = _1364;
        _1374 = _1364;
        _1375 = _1364;
        _1376 = 0.0;
        _1377 = 0.0;
        _1378 = 0.0;
    }
    float _1672;
    float _1673;
    float _1674;
    float _1675;
    float _1676;
    float _1677;
    float _1678;
    float _1679;
    float _1680;
    float _1681;
    float _1682;
    float _1683;
    float _1684;
    float _1685;
    float _1686;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1403 = fma(_1062, cbModelParam._m0[30u].z, fma(_1058, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1054));
        float _1407 = fma(_1062, cbModelParam._m0[31u].z, fma(_1058, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1054));
        float _1411 = fma(_1062, cbModelParam._m0[32u].z, fma(_1058, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1054));
        float _1434 = _1054 + _825;
        float _1435 = _1058 + _826;
        float _1436 = _1062 + _827;
        float _1446 = fma(_1436, cbModelParam._m0[30u].z, fma(_1435, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1434)) - _1403;
        float _1447 = fma(_1436, cbModelParam._m0[31u].z, fma(_1435, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1434)) - _1407;
        float _1448 = fma(_1436, cbModelParam._m0[32u].z, fma(_1435, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1434)) - _1411;
        float _1452 = inversesqrt(dot(vec3(_1446, _1447, _1448), vec3(_1446, _1447, _1448)));
        float _1465 = ((_1452 * _1446) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1403 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1466 = ((_1452 * _1447) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1407 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1467 = ((_1452 * _1448) / cbModelParam._m0[35u].z) + ((((((_1411 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1469 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1465, _1466, _1467), 0.0);
        vec4 _1476 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1465, _1466, _1467), 0.0);
        vec4 _1483 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1465, _1466, _1467), 0.0);
        vec4 _1490 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1465, _1466, _1467), 0.0);
        float _1502 = exp2((_1469.w + (-0.5)) * 20.0) * 2.0;
        float _1503 = _1502 * (_1469.x + (-0.5));
        float _1504 = _1502 * (_1469.y + (-0.5));
        float _1505 = _1502 * (_1469.z + (-0.5));
        float _1512 = exp2((_1476.w + (-0.5)) * 20.0) * 2.0;
        float _1513 = _1512 * (_1476.x + (-0.5));
        float _1514 = _1512 * (_1476.y + (-0.5));
        float _1515 = _1512 * (_1476.z + (-0.5));
        float _1522 = exp2((_1483.w + (-0.5)) * 20.0) * 2.0;
        float _1523 = _1522 * (_1483.x + (-0.5));
        float _1524 = _1522 * (_1483.y + (-0.5));
        float _1525 = _1522 * (_1483.z + (-0.5));
        float _1532 = exp2((_1490.w + (-0.5)) * 20.0) * 2.0;
        float _1533 = _1532 * (_1490.x + (-0.5));
        float _1534 = _1532 * (_1490.y + (-0.5));
        float _1535 = _1532 * (_1490.z + (-0.5));
        float _1536 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1537 = isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0));
        float _1538 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1539 = _1503 * 0.5;
        float _1540 = _1513 * 0.5;
        float _1541 = _1523 * 0.5;
        float _1542 = dot(vec3(_1539, _1540, _1541), vec3(_1539, _1540, _1541));
        float _1547 = (_1542 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1542);
        float _1555 = (dot(vec3(_825, _826, _827), vec3(_1547 * _1539, _1547 * _1540, _1547 * _1541)) + 1.0) * 0.5;
        float _4301 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
        float _1564 = sqrt(((_1540 * _1540) + (_1539 * _1539)) + (_1541 * _1541)) / (_1536 + 9.9999997473787516355514526367188e-06);
        float _4312 = isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0));
        float _1565 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
        float _1566 = _1565 * 2.0;
        float _1570 = (1.0 - _1565) / (_1565 + 1.0);
        float _4323 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1571 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
        float _1580 = ((((1.0 - _1571) * (_1566 + 2.0)) * exp2(log2(isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0))) * (_1566 + 1.0))) + _1571) * _1536;
        float _1581 = _1504 * 0.5;
        float _1582 = _1514 * 0.5;
        float _1583 = _1524 * 0.5;
        float _1584 = dot(vec3(_1581, _1582, _1583), vec3(_1581, _1582, _1583));
        float _1589 = (_1584 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1584);
        float _1597 = (dot(vec3(_825, _826, _827), vec3(_1589 * _1581, _1589 * _1582, _1589 * _1583)) + 1.0) * 0.5;
        float _4334 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
        float _1606 = sqrt(((_1582 * _1582) + (_1581 * _1581)) + (_1583 * _1583)) / (_1537 + 9.9999997473787516355514526367188e-06);
        float _4345 = isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0));
        float _1607 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
        float _1608 = _1607 * 2.0;
        float _1612 = (1.0 - _1607) / (_1607 + 1.0);
        float _4356 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
        float _1613 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
        float _1622 = ((((1.0 - _1613) * (_1608 + 2.0)) * exp2(log2(isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0))) * (_1608 + 1.0))) + _1613) * _1537;
        float _1623 = _1505 * 0.5;
        float _1624 = _1515 * 0.5;
        float _1625 = _1525 * 0.5;
        float _1626 = dot(vec3(_1623, _1624, _1625), vec3(_1623, _1624, _1625));
        float _1631 = (_1626 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1626);
        float _1639 = (dot(vec3(_825, _826, _827), vec3(_1631 * _1623, _1631 * _1624, _1631 * _1625)) + 1.0) * 0.5;
        float _4367 = isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0));
        float _1648 = sqrt(((_1624 * _1624) + (_1623 * _1623)) + (_1625 * _1625)) / (_1538 + 9.9999997473787516355514526367188e-06);
        float _4378 = isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0));
        float _1649 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
        float _1650 = _1649 * 2.0;
        float _1654 = (1.0 - _1649) / (_1649 + 1.0);
        float _4389 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
        float _1655 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
        float _1664 = ((((1.0 - _1655) * (_1650 + 2.0)) * exp2(log2(isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0))) * (_1650 + 1.0))) + _1655) * _1538;
        _1672 = _1505;
        _1673 = _1504;
        _1674 = _1503;
        _1675 = _1515;
        _1676 = _1514;
        _1677 = _1513;
        _1678 = _1525;
        _1679 = _1524;
        _1680 = _1523;
        _1681 = _1538;
        _1682 = _1537;
        _1683 = _1536;
        _1684 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0)));
        _1685 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0)));
        _1686 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0)));
    }
    else
    {
        _1672 = _1364;
        _1673 = _1364;
        _1674 = _1364;
        _1675 = _1364;
        _1676 = _1364;
        _1677 = _1364;
        _1678 = _1364;
        _1679 = _1364;
        _1680 = _1364;
        _1681 = _1364;
        _1682 = _1364;
        _1683 = _1364;
        _1684 = 0.0;
        _1685 = 0.0;
        _1686 = 0.0;
    }
    float _1696 = (cbModelParam._m0[1u].x * (_1684 - _1376)) + _1376;
    float _1697 = (cbModelParam._m0[1u].x * (_1685 - _1377)) + _1377;
    float _1698 = (cbModelParam._m0[1u].x * (_1686 - _1378)) + _1378;
    float _1719 = fma(_1698, cbSceneParam._m0[89u].z, fma(_1697, cbSceneParam._m0[89u].y, _1696 * cbSceneParam._m0[89u].x));
    float _1722 = fma(_1698, cbSceneParam._m0[90u].z, fma(_1697, cbSceneParam._m0[90u].y, _1696 * cbSceneParam._m0[90u].x));
    float _1725 = fma(_1698, cbSceneParam._m0[91u].z, fma(_1697, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1696));
    float _1740 = _998 * 0.5;
    float _1741 = _999 * 0.5;
    float _1742 = _1000 * 0.5;
    float _1743 = dot(vec4(_1740, _1741, _1742, 1.0), vec4(_1674, _1677, _1680, _1683));
    float _1746 = dot(vec4(_1740, _1741, _1742, 1.0), vec4(_1673, _1676, _1679, _1682));
    float _1749 = dot(vec4(_1740, _1741, _1742, 1.0), vec4(_1672, _1675, _1678, _1681));
    float _1783;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1756 = dot(vec4(_1740, _1741, _1742, 1.0), vec4(_1363, _1367, _1370, _1373));
        float _1760 = dot(vec4(_1740, _1741, _1742, 1.0), vec4(_1365, _1368, _1371, _1374));
        float _1764 = dot(vec4(_1740, _1741, _1742, 1.0), vec4(_1366, _1369, _1372, _1375));
        float _1771 = dot(vec4(cbModelParam._m0[39u]), vec4(_1740, _1741, _1742, 1.0));
        _1783 = dot(vec3(isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0)), isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0)), isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1771) ? 0.0 : (isnan(0.0) ? _1771 : max(0.0, _1771))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1783 = 1.0;
    }
    float _1794;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1785 = dot(vec4(cbModelParam._m0[40u]), vec4(_1740, _1741, _1742, 1.0));
        _1794 = dot(vec3(isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0)), isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0)), isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1785) ? 0.0 : (isnan(0.0) ? _1785 : max(0.0, _1785))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1794 = 1.0;
    }
    float _1798 = (_1794 * cbModelParam._m0[1u].x) + (_1783 * (1.0 - cbModelParam._m0[1u].x));
    float _1808 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _828);
    float _1809 = isnan(_1808) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1808 : min(cbModelParam._m0[25u].z, _1808));
    float _1889;
    float _1891;
    float _1893;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1856 = fma(_1062, cbModelParam._m0[13u].z, fma(_1058, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1054)) + cbModelParam._m0[13u].w;
        float _1860 = fma(_1062, cbModelParam._m0[14u].z, fma(_1058, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1054)) + cbModelParam._m0[14u].w;
        float _1864 = fma(_1062, cbModelParam._m0[15u].z, fma(_1058, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1054)) + cbModelParam._m0[15u].w;
        float _1867 = fma(_1000, cbModelParam._m0[13u].z, fma(_999, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _998));
        float _1870 = fma(_1000, cbModelParam._m0[14u].z, fma(_999, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _998));
        float _1873 = fma(_1000, cbModelParam._m0[15u].z, fma(_999, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _998));
        float _1901;
        if (_1867 > 0.0)
        {
            _1901 = abs((1.0 - _1856) / _1867);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1867 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1856 + 1.0) / _1867);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1901 = frontier_phi_14_12_ladder;
        }
        float _2072;
        if (_1870 > 0.0)
        {
            _2072 = abs((1.0 - _1860) / _1870);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1870 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1860 + 1.0) / _1870);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2072 = frontier_phi_23_19_ladder;
        }
        float _2367;
        if (_1873 > 0.0)
        {
            _2367 = abs((1.0 - _1864) / _1873);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1873 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1864 + 1.0) / _1873);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2367 = frontier_phi_35_30_ladder;
        }
        float _2369 = isnan(_2072) ? _1901 : (isnan(_1901) ? _2072 : min(_1901, _2072));
        float _2370 = isnan(_2367) ? _2369 : (isnan(_2369) ? _2367 : min(_2369, _2367));
        float _2374 = (_2370 * _1867) + _1856;
        float _2375 = (_2370 * _1870) + _1860;
        float _2376 = (_2370 * _1873) + _1864;
        float _2377 = _2370 * 9.9999997473787516355514526367188e-05;
        float _2379 = (-1.0) - _2377;
        float _2381 = _2377 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2376 > _2381) || ((_2376 < _2379) || ((_2375 > _2381) || ((_2375 < _2379) || ((_2374 < _2379) || (_2374 > _2381))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2521 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2376, cbModelParam._m0[9u].z, fma(_2375, cbModelParam._m0[9u].y, _2374 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2376, cbModelParam._m0[10u].z, fma(_2375, cbModelParam._m0[10u].y, _2374 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2376, cbModelParam._m0[11u].z, fma(_2375, cbModelParam._m0[11u].y, _2374 * cbModelParam._m0[11u].x))), _1809);
            frontier_phi_13_35_ladder = _2521.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2521.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2521.x * cbModelParam._m0[1u].y;
        }
        _1889 = frontier_phi_13_35_ladder_2;
        _1891 = frontier_phi_13_35_ladder_1;
        _1893 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1877 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_998, _999, _1000), _1809);
        _1889 = _1877.x * cbModelParam._m0[1u].y;
        _1891 = _1877.y * cbModelParam._m0[1u].y;
        _1893 = _1877.z * cbModelParam._m0[1u].y;
    }
    float _1897 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _828);
    float _1898 = isnan(_1897) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1897 : min(cbModelParam._m0[25u].w, _1897));
    float _1987;
    float _1989;
    float _1991;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1951 = fma(_1062, cbModelParam._m0[21u].z, fma(_1058, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1054)) + cbModelParam._m0[21u].w;
        float _1955 = fma(_1062, cbModelParam._m0[22u].z, fma(_1058, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1054)) + cbModelParam._m0[22u].w;
        float _1959 = fma(_1062, cbModelParam._m0[23u].z, fma(_1058, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1054)) + cbModelParam._m0[23u].w;
        float _1962 = fma(_1000, cbModelParam._m0[21u].z, fma(_999, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _998));
        float _1965 = fma(_1000, cbModelParam._m0[22u].z, fma(_999, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _998));
        float _1968 = fma(_1000, cbModelParam._m0[23u].z, fma(_999, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _998));
        float _2077;
        if (_1962 > 0.0)
        {
            _2077 = abs((1.0 - _1951) / _1962);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1962 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1951 + 1.0) / _1962);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2077 = frontier_phi_25_21_ladder;
        }
        float _2394;
        if (_1965 > 0.0)
        {
            _2394 = abs((1.0 - _1955) / _1965);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1965 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1955 + 1.0) / _1965);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2394 = frontier_phi_37_32_ladder;
        }
        float _2732;
        if (_1968 > 0.0)
        {
            _2732 = abs((1.0 - _1959) / _1968);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1968 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1959 + 1.0) / _1968);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2732 = frontier_phi_47_44_ladder;
        }
        float _2734 = isnan(_2394) ? _2077 : (isnan(_2077) ? _2394 : min(_2077, _2394));
        float _2735 = isnan(_2732) ? _2734 : (isnan(_2734) ? _2732 : min(_2734, _2732));
        float _2739 = (_2735 * _1962) + _1951;
        float _2740 = (_2735 * _1965) + _1955;
        float _2741 = (_2735 * _1968) + _1959;
        float _2742 = _2735 * 9.9999997473787516355514526367188e-05;
        float _2743 = (-1.0) - _2742;
        float _2745 = _2742 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2741 > _2745) || ((_2741 < _2743) || ((_2740 > _2745) || ((_2740 < _2743) || ((_2739 < _2743) || (_2739 > _2745))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2863 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2741, cbModelParam._m0[17u].z, fma(_2740, cbModelParam._m0[17u].y, _2739 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2741, cbModelParam._m0[18u].z, fma(_2740, cbModelParam._m0[18u].y, _2739 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2741, cbModelParam._m0[19u].z, fma(_2740, cbModelParam._m0[19u].y, _2739 * cbModelParam._m0[19u].x))), _1898);
            frontier_phi_22_47_ladder = _2863.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2863.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2863.x * cbModelParam._m0[1u].z;
        }
        _1987 = frontier_phi_22_47_ladder_2;
        _1989 = frontier_phi_22_47_ladder_1;
        _1991 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1971 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_998, _999, _1000), _1898);
        _1987 = _1971.x * cbModelParam._m0[1u].z;
        _1989 = _1971.y * cbModelParam._m0[1u].z;
        _1991 = _1971.z * cbModelParam._m0[1u].z;
    }
    float _2004 = (((_1025 * _974) + _1026) * _990) * ((cbModelParam._m0[1u].w * (_1987 - _1889)) + _1889);
    float _2006 = (((_1025 * _976) + _1026) * _990) * ((cbModelParam._m0[1u].w * (_1989 - _1891)) + _1891);
    float _2008 = (((_1025 * _977) + _1026) * _990) * ((cbModelParam._m0[1u].w * (_1991 - _1893)) + _1893);
    float _2011 = fma(_2008, cbSceneParam._m0[89u].z, fma(_2006, cbSceneParam._m0[89u].y, _2004 * cbSceneParam._m0[89u].x));
    float _2014 = fma(_2008, cbSceneParam._m0[90u].z, fma(_2006, cbSceneParam._m0[90u].y, _2004 * cbSceneParam._m0[90u].x));
    float _2017 = fma(_2008, cbSceneParam._m0[91u].z, fma(_2006, cbSceneParam._m0[91u].y, _2004 * cbSceneParam._m0[91u].x));
    float _2051 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2055 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2059 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2063 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2064 = _2051 / _2063;
    float _2065 = _2055 / _2063;
    float _2066 = _2059 / _2063;
    float _2213;
    float _2214;
    float _2215;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2093 = ((uint(_2066 > cbSceneParam._m0[59u].y) + uint(_2066 > cbSceneParam._m0[59u].x)) + uint(_2066 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2094 = _2093 + 43u;
        uint _2102 = _2093 + 44u;
        uint _2110 = _2093 + 45u;
        uint _2118 = _2093 + 46u;
        float _2129 = fma(_2063, cbSceneParam._m0[_2094].w, fma(_2059, cbSceneParam._m0[_2094].z, fma(_2055, cbSceneParam._m0[_2094].y, _2051 * cbSceneParam._m0[_2094].x)));
        float _2133 = fma(_2063, cbSceneParam._m0[_2102].w, fma(_2059, cbSceneParam._m0[_2102].z, fma(_2055, cbSceneParam._m0[_2102].y, _2051 * cbSceneParam._m0[_2102].x)));
        float _2141 = fma(_2063, cbSceneParam._m0[_2118].w, fma(_2059, cbSceneParam._m0[_2118].z, fma(_2055, cbSceneParam._m0[_2118].y, _2051 * cbSceneParam._m0[_2118].x)));
        float _2146 = cbSceneParam._m0[33u].z * _2141;
        float _2148 = cbSceneParam._m0[33u].w * _2141;
        float _2151 = fma(_2063, cbSceneParam._m0[_2110].w, fma(_2059, cbSceneParam._m0[_2110].z, fma(_2055, cbSceneParam._m0[_2110].y, _2051 * cbSceneParam._m0[_2110].x))) / _2141;
        float _2199 = (cbSceneParam._m0[33u].x - sqrt(((_2065 * _2065) + (_2064 * _2064)) + (_2066 * _2066))) * cbSceneParam._m0[33u].y;
        float _4515 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
        float _2206 = (isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2146 + _2129) / _2141, (_2148 + _2133) / _2141), _2151), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2148 + _2129) / _2141, (_2133 - _2146) / _2141), _2151), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2129 - _2146) / _2141, (_2133 - _2148) / _2141), _2151), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2129 - _2148) / _2141, (_2146 + _2133) / _2141), _2151), 0.0)).x), vec4(0.25)));
        _2213 = 1.0 - (_2206 * cbSceneParam._m0[34u].x);
        _2214 = 1.0 - (_2206 * cbSceneParam._m0[34u].y);
        _2215 = 1.0 - (_2206 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2213 = 1.0;
        _2214 = 1.0;
        _2215 = 1.0;
    }
    float _2279;
    float _2281;
    float _2283;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2267 = fma(_2063, cbSceneParam._m0[63u].w, fma(_2059, cbSceneParam._m0[63u].z, fma(_2055, cbSceneParam._m0[63u].y, _2051 * cbSceneParam._m0[63u].x)));
        float _2268 = fma(_2063, cbSceneParam._m0[60u].w, fma(_2059, cbSceneParam._m0[60u].z, fma(_2055, cbSceneParam._m0[60u].y, _2051 * cbSceneParam._m0[60u].x))) / _2267;
        float _2269 = fma(_2063, cbSceneParam._m0[61u].w, fma(_2059, cbSceneParam._m0[61u].z, fma(_2055, cbSceneParam._m0[61u].y, _2051 * cbSceneParam._m0[61u].x))) / _2267;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2268 >= cbSceneParam._m0[64u].x) && (_2269 >= cbSceneParam._m0[64u].y)) && (_2268 <= cbSceneParam._m0[64u].z)) && (_2269 <= cbSceneParam._m0[64u].w))
        {
            float _2407 = fma(_2063, cbSceneParam._m0[62u].w, fma(_2059, cbSceneParam._m0[62u].z, fma(_2055, cbSceneParam._m0[62u].y, _2051 * cbSceneParam._m0[62u].x))) / _2267;
            float _2411 = isnan(cbSceneParam._m0[41u].w) ? _2407 : (isnan(_2407) ? cbSceneParam._m0[41u].w : max(_2407, cbSceneParam._m0[41u].w));
            float _2454 = (cbSceneParam._m0[33u].x - sqrt(((_2065 * _2065) + (_2064 * _2064)) + (_2066 * _2066))) * cbSceneParam._m0[33u].y;
            float _4531 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
            float _2461 = (isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2268, cbSceneParam._m0[33u].w + _2269), _2411), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2268, _2269 - cbSceneParam._m0[33u].z), _2411), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2268 - cbSceneParam._m0[33u].z, _2269 - cbSceneParam._m0[33u].w), _2411), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2268 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2269), _2411), 0.0)).x), vec4(0.25)));
            float _2465 = 1.0 - (_2461 * cbSceneParam._m0[34u].x);
            float _2466 = 1.0 - (_2461 * cbSceneParam._m0[34u].y);
            float _2467 = 1.0 - (_2461 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2467) ? _2215 : (isnan(_2215) ? _2467 : min(_2215, _2467));
            frontier_phi_34_33_ladder_1 = isnan(_2466) ? _2214 : (isnan(_2214) ? _2466 : min(_2214, _2466));
            frontier_phi_34_33_ladder_2 = isnan(_2465) ? _2213 : (isnan(_2213) ? _2465 : min(_2213, _2465));
        }
        else
        {
            frontier_phi_34_33_ladder = _2215;
            frontier_phi_34_33_ladder_1 = _2214;
            frontier_phi_34_33_ladder_2 = _2213;
        }
        _2279 = frontier_phi_34_33_ladder_2;
        _2281 = frontier_phi_34_33_ladder_1;
        _2283 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2279 = _2213;
        _2281 = _2214;
        _2283 = _2215;
    }
    uvec4 _2288 = floatBitsToUint(cbInstanceData._m0[_259 + 5u]);
    uint _2290 = _2288.x * 14u;
    uint _2291 = _2290 + 13u;
    float _2298 = _990 + (-1.0);
    float _2303 = (cbLight._m0[_2291].x * _2298) + 1.0;
    float _2304 = (cbLight._m0[_2291].y * _2298) + 1.0;
    float _2305 = (cbLight._m0[_2291].z * _2298) + 1.0;
    float _2306 = (cbLight._m0[_2291].w * _2298) + 1.0;
    uint _2307 = _2290 + 5u;
    float _2313 = isnan(1.0) ? _2304 : (isnan(_2304) ? 1.0 : min(_2304, 1.0));
    uint _2317 = _2290 + 4u;
    float _2326 = isnan(1.0) ? _2303 : (isnan(_2303) ? 1.0 : min(_2303, 1.0));
    uint _2330 = _2290 | 1u;
    float _2341 = dot(vec3(cbLight._m0[_2290].xyz), vec3(_825, _826, _827));
    float _2344 = dot(vec3(cbLight._m0[_2330].xyz), vec3(_825, _826, _827));
    float _4567 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0));
    float _4578 = isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0));
    float _2349 = (isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0))) * 0.3183098733425140380859375;
    float _2351 = (isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0))) * 0.3183098733425140380859375;
    float _2358 = ((cbLight._m0[_2307].x * _2313) * _2351) + (((cbLight._m0[_2317].x * _2279) * _2326) * _2349);
    float _2359 = ((_2313 * cbLight._m0[_2307].y) * _2351) + (((cbLight._m0[_2317].y * _2281) * _2326) * _2349);
    float _2360 = ((_2313 * cbLight._m0[_2307].z) * _2351) + (((cbLight._m0[_2317].z * _2283) * _2326) * _2349);
    uvec4 _2364 = floatBitsToUint(cbLight._m0[_2290 + 12u]);
    bool _2366 = _2364.x == 0u;
    float _2468;
    float _2470;
    float _2472;
    if (_2366)
    {
        _2468 = _2358;
        _2470 = _2359;
        _2472 = _2360;
    }
    else
    {
        uint _2476 = _2290 + 6u;
        float _2492 = (dot(vec3(cbLight._m0[_2290 + 2u].xyz), vec3(_825, _826, _827)) * 0.5) + 0.5;
        float _2493 = _2492 * _2492;
        float _4589 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
        float _2494 = isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0));
        float _2495 = isnan(1.0) ? _2305 : (isnan(_2305) ? 1.0 : min(_2305, 1.0));
        _2468 = (((cbLight._m0[_2476].x * 0.3183098733425140380859375) * _2494) * _2495) + _2358;
        _2470 = (((cbLight._m0[_2476].y * 0.3183098733425140380859375) * _2494) * _2495) + _2359;
        _2472 = (((cbLight._m0[_2476].z * 0.3183098733425140380859375) * _2494) * _2495) + _2360;
    }
    bool _2475 = _2364.y == 0u;
    float _2530;
    float _2532;
    float _2534;
    if (_2475)
    {
        _2530 = _2468;
        _2532 = _2470;
        _2534 = _2472;
    }
    else
    {
        uint _2703 = _2290 + 7u;
        float _2719 = (dot(vec3(cbLight._m0[_2290 + 3u].xyz), vec3(_825, _826, _827)) * 0.5) + 0.5;
        float _2720 = _2719 * _2719;
        float _4605 = isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : max(_2720, 0.0));
        float _2721 = isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0));
        float _2722 = isnan(1.0) ? _2306 : (isnan(_2306) ? 1.0 : min(_2306, 1.0));
        _2530 = (((cbLight._m0[_2703].x * 0.3183098733425140380859375) * _2721) * _2722) + _2468;
        _2532 = (((cbLight._m0[_2703].y * 0.3183098733425140380859375) * _2721) * _2722) + _2470;
        _2534 = (((cbLight._m0[_2703].z * 0.3183098733425140380859375) * _2721) * _2722) + _2472;
    }
    uint _2537 = _2290 + 8u;
    float _2550 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2290].w)) * _828) * 0.949999988079071044921875);
    float _2551 = _2550 * _2550;
    float _2552 = cbLight._m0[_2290].x + _904;
    float _2553 = cbLight._m0[_2290].y + _905;
    float _2554 = cbLight._m0[_2290].z + _906;
    float _2558 = inversesqrt(dot(vec3(_2552, _2553, _2554), vec3(_2552, _2553, _2554)));
    float _2559 = _2558 * _2552;
    float _2560 = _2558 * _2553;
    float _2561 = _2558 * _2554;
    float _2562 = dot(vec3(_825, _826, _827), vec3(cbLight._m0[_2290].xyz));
    float _4621 = isnan(0.0) ? _2562 : (isnan(_2562) ? 0.0 : max(_2562, 0.0));
    float _2565 = isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0));
    float _4632 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
    float _2566 = isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0));
    float _2567 = dot(vec3(_825, _826, _827), vec3(_2559, _2560, _2561));
    float _4643 = isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0));
    float _2570 = isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0));
    float _2571 = dot(vec3(cbLight._m0[_2290].xyz), vec3(_2559, _2560, _2561));
    float _4654 = isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0));
    float _2575 = _2551 * _2551;
    float _2579 = ((_2570 * _2570) * (_2575 + (-1.0))) + 1.0;
    float _2587 = exp2(log2(1.0 - (isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0)))) * 5.0);
    float _2588 = 0.959999978542327880859375 - _971;
    float _2590 = 0.959999978542327880859375 - _972;
    float _2591 = 0.959999978542327880859375 - _973;
    float _2598 = 1.0 - _2551;
    float _2609 = (0.5 / (((_2566 * ((_2565 * _2598) + _2551)) + 9.9999999392252902907785028219223e-09) + (((_2566 * _2598) + _2551) * _2565))) * _2565;
    float _4665 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0));
    float _2611 = (isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0))) * (_2575 / ((_2579 * _2579) * 3.141590118408203125));
    uint _2625 = _2290 + 9u;
    float _2636 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2330].w)) * _828) * 0.949999988079071044921875);
    float _2637 = _2636 * _2636;
    float _2638 = cbLight._m0[_2330].x + _904;
    float _2639 = cbLight._m0[_2330].y + _905;
    float _2640 = cbLight._m0[_2330].z + _906;
    float _2644 = inversesqrt(dot(vec3(_2638, _2639, _2640), vec3(_2638, _2639, _2640)));
    float _2645 = _2644 * _2638;
    float _2646 = _2644 * _2639;
    float _2647 = _2644 * _2640;
    float _2648 = dot(vec3(_825, _826, _827), vec3(cbLight._m0[_2330].xyz));
    float _4676 = isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0));
    float _2651 = isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0));
    float _2652 = dot(vec3(_825, _826, _827), vec3(_2645, _2646, _2647));
    float _4687 = isnan(0.0) ? _2652 : (isnan(_2652) ? 0.0 : max(_2652, 0.0));
    float _2655 = isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0));
    float _2656 = dot(vec3(cbLight._m0[_2330].xyz), vec3(_2645, _2646, _2647));
    float _4698 = isnan(0.0) ? _2656 : (isnan(_2656) ? 0.0 : max(_2656, 0.0));
    float _2660 = _2637 * _2637;
    float _2664 = ((_2655 * _2655) * (_2660 + (-1.0))) + 1.0;
    float _2671 = exp2(log2(1.0 - (isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0)))) * 5.0);
    float _2678 = 1.0 - _2637;
    float _2688 = (0.5 / (((_2566 * ((_2651 * _2678) + _2637)) + 9.9999999392252902907785028219223e-09) + (((_2566 * _2678) + _2637) * _2651))) * _2651;
    float _4709 = isnan(0.0) ? _2688 : (isnan(_2688) ? 0.0 : max(_2688, 0.0));
    float _2690 = (isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0))) * (_2660 / ((_2664 * _2664) * 3.141590118408203125));
    float _2700 = (((((_2671 * _2588) + _974) * cbLight._m0[_2625].x) * _2690) * _2313) + ((((cbLight._m0[_2537].x * _2279) * ((_2587 * _2588) + _974)) * _2611) * _2326);
    float _2701 = (((((_2671 * _2590) + _976) * cbLight._m0[_2625].y) * _2690) * _2313) + ((((cbLight._m0[_2537].y * _2281) * ((_2587 * _2590) + _976)) * _2611) * _2326);
    float _2702 = (((((_2671 * _2591) + _977) * cbLight._m0[_2625].z) * _2690) * _2313) + ((((cbLight._m0[_2537].z * _2283) * ((_2587 * _2591) + _977)) * _2611) * _2326);
    float _2758;
    float _2760;
    float _2762;
    if (_2366)
    {
        _2758 = _2700;
        _2760 = _2701;
        _2762 = _2702;
    }
    else
    {
        uint _2764 = _2290 + 2u;
        uint _2768 = _2290 + 10u;
        float _2782 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2764].w)) * _828) * 0.949999988079071044921875);
        float _2783 = _2782 * _2782;
        float _2784 = cbLight._m0[_2764].x + _904;
        float _2785 = cbLight._m0[_2764].y + _905;
        float _2786 = cbLight._m0[_2764].z + _906;
        float _2790 = inversesqrt(dot(vec3(_2784, _2785, _2786), vec3(_2784, _2785, _2786)));
        float _2791 = _2790 * _2784;
        float _2792 = _2790 * _2785;
        float _2793 = _2790 * _2786;
        float _2794 = dot(vec3(_825, _826, _827), vec3(cbLight._m0[_2764].xyz));
        float _4720 = isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0));
        float _2797 = isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0));
        float _2798 = dot(vec3(_825, _826, _827), vec3(_2791, _2792, _2793));
        float _4731 = isnan(0.0) ? _2798 : (isnan(_2798) ? 0.0 : max(_2798, 0.0));
        float _2801 = isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0));
        float _2802 = dot(vec3(cbLight._m0[_2764].xyz), vec3(_2791, _2792, _2793));
        float _4742 = isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : max(_2802, 0.0));
        float _2806 = _2783 * _2783;
        float _2810 = ((_2801 * _2801) * (_2806 + (-1.0))) + 1.0;
        float _2817 = exp2(log2(1.0 - (isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0)))) * 5.0);
        float _2824 = 1.0 - _2783;
        float _2834 = (0.5 / (((_2566 * ((_2797 * _2824) + _2783)) + 9.9999999392252902907785028219223e-09) + (((_2566 * _2824) + _2783) * _2797))) * _2797;
        float _4753 = isnan(0.0) ? _2834 : (isnan(_2834) ? 0.0 : max(_2834, 0.0));
        float _2836 = (isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0))) * (_2806 / ((_2810 * _2810) * 3.141590118408203125));
        float _2837 = isnan(1.0) ? _2305 : (isnan(_2305) ? 1.0 : min(_2305, 1.0));
        _2758 = (((((_2817 * _2588) + _974) * cbLight._m0[_2768].x) * _2836) * _2837) + _2700;
        _2760 = (((((_2817 * _2590) + _976) * cbLight._m0[_2768].y) * _2836) * _2837) + _2701;
        _2762 = (((((_2817 * _2591) + _977) * cbLight._m0[_2768].z) * _2836) * _2837) + _2702;
    }
    float _2868;
    float _2870;
    float _2872;
    if (_2475)
    {
        _2868 = _2758;
        _2870 = _2760;
        _2872 = _2762;
    }
    else
    {
        uint _2879 = _2290 + 3u;
        uint _2883 = _2290 + 11u;
        float _2897 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2879].w)) * _828) * 0.949999988079071044921875);
        float _2898 = _2897 * _2897;
        float _2899 = cbLight._m0[_2879].x + _904;
        float _2900 = cbLight._m0[_2879].y + _905;
        float _2901 = cbLight._m0[_2879].z + _906;
        float _2905 = inversesqrt(dot(vec3(_2899, _2900, _2901), vec3(_2899, _2900, _2901)));
        float _2906 = _2905 * _2899;
        float _2907 = _2905 * _2900;
        float _2908 = _2905 * _2901;
        float _2909 = dot(vec3(_825, _826, _827), vec3(cbLight._m0[_2879].xyz));
        float _4769 = isnan(0.0) ? _2909 : (isnan(_2909) ? 0.0 : max(_2909, 0.0));
        float _2912 = isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0));
        float _2913 = dot(vec3(_825, _826, _827), vec3(_2906, _2907, _2908));
        float _4780 = isnan(0.0) ? _2913 : (isnan(_2913) ? 0.0 : max(_2913, 0.0));
        float _2916 = isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0));
        float _2917 = dot(vec3(cbLight._m0[_2879].xyz), vec3(_2906, _2907, _2908));
        float _4791 = isnan(0.0) ? _2917 : (isnan(_2917) ? 0.0 : max(_2917, 0.0));
        float _2921 = _2898 * _2898;
        float _2925 = ((_2916 * _2916) * (_2921 + (-1.0))) + 1.0;
        float _2932 = exp2(log2(1.0 - (isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0)))) * 5.0);
        float _2939 = 1.0 - _2898;
        float _2949 = (0.5 / (((_2566 * ((_2912 * _2939) + _2898)) + 9.9999999392252902907785028219223e-09) + (((_2566 * _2939) + _2898) * _2912))) * _2912;
        float _4802 = isnan(0.0) ? _2949 : (isnan(_2949) ? 0.0 : max(_2949, 0.0));
        float _2951 = (isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0))) * (_2921 / ((_2925 * _2925) * 3.141590118408203125));
        float _2952 = isnan(1.0) ? _2306 : (isnan(_2306) ? 1.0 : min(_2306, 1.0));
        _2868 = (((((_2932 * _2588) + _974) * cbLight._m0[_2883].x) * _2951) * _2952) + _2758;
        _2870 = (((((_2932 * _2590) + _976) * cbLight._m0[_2883].y) * _2951) * _2952) + _2760;
        _2872 = (((((_2932 * _2591) + _977) * cbLight._m0[_2883].z) * _2951) * _2952) + _2762;
    }
    float _3018;
    float _3020;
    float _3022;
    float _3024;
    float _3026;
    float _3028;
    if (_2288.y == 0u)
    {
        uvec4 _2973 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2974 = _2973.x;
        uint _2985 = uint((float(_2973.y) * floor(float(uint(cbSceneParam._m0[85u].y * _913) / _2974))) + floor(float(uint(cbSceneParam._m0[85u].x * _912) / _2974)));
        float _2995 = (log2(_2066 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2996 = isnan(0.0) ? _2995 : (isnan(_2995) ? 0.0 : max(_2995, 0.0));
        uint _2999 = uint(isnan(14.0) ? _2996 : (isnan(_2996) ? 14.0 : min(_2996, 14.0)));
        uvec4 _3004 = texelFetch(g_lightClusterGridBuffer, int(((_2999 << 2u) + (_2985 << 6u)) >> 2u));
        uint _3005 = _3004.x;
        uint _3006 = _2973.z;
        float _3085;
        float _3087;
        float _3089;
        float _3091;
        float _3093;
        float _3095;
        if (((((1u << ((_3006 >> 4u) & 15u)) + 4294967295u) & _3005) == 0u) || ((_3006 & 240u) == 0u))
        {
            _3085 = 0.0;
            _3087 = 0.0;
            _3089 = 0.0;
            _3091 = 0.0;
            _3093 = 0.0;
            _3095 = 0.0;
        }
        else
        {
            float _3086;
            float _3088;
            float _3090;
            float _3092;
            float _3094;
            float _3096;
            float _3229 = 0.0;
            float _3230 = 0.0;
            float _3231 = 0.0;
            float _3232 = 0.0;
            float _3233 = 0.0;
            float _3234 = 0.0;
            uint _3235 = 0u;
            uint _3244;
            bool _3245;
            for (;;)
            {
                _3244 = texelFetch(g_lightClassification, int((((_2999 << 5u) + (_2985 << 9u)) + (_3235 << 2u)) >> 2u)).x;
                _3245 = _3244 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3245)
                {
                    frontier_phi_66_pred = _3234;
                    frontier_phi_66_pred_1 = _3233;
                    frontier_phi_66_pred_2 = _3232;
                    frontier_phi_66_pred_3 = _3231;
                    frontier_phi_66_pred_4 = _3230;
                    frontier_phi_66_pred_5 = _3229;
                }
                else
                {
                    float _3353;
                    float _3354;
                    float _3355;
                    float _3356;
                    float _3357;
                    float _3358;
                    uint _3359;
                    _3353 = _3229;
                    _3354 = _3230;
                    _3355 = _3231;
                    _3356 = _3232;
                    _3357 = _3233;
                    _3358 = _3234;
                    _3359 = _3244;
                    float _3285;
                    float _3286;
                    float _3287;
                    float _3288;
                    float _3289;
                    float _3290;
                    for (;;)
                    {
                        uint _3363 = uint(findLSB(_3359)) + (_3235 << 5u);
                        uint _3360 = (_3359 + 4294967295u) & _3359;
                        uint _3365 = _3363 * 48u;
                        vec4 _3379 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3365)).x, texelFetch(g_PointLightRenderingBuffer, int(_3365 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3365 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3365 + 3u)).x));
                        uint _3385 = (_3363 * 48u) + 4u;
                        vec4 _3398 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3385)).x, texelFetch(g_PointLightRenderingBuffer, int(_3385 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3385 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3385 + 3u)).x));
                        uint _3404 = (_3363 * 48u) + 8u;
                        vec3 _3415 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3404)).x, texelFetch(g_PointLightRenderingBuffer, int(_3404 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3404 + 2u)).x));
                        float _3419 = _3379.x - _2064;
                        float _3420 = _3379.y - _2065;
                        float _3421 = _3379.z - _2066;
                        float _3422 = dot(vec3(_3419, _3420, _3421), vec3(_3419, _3420, _3421));
                        float _3425 = inversesqrt(_3422);
                        float _3426 = _3425 * _3419;
                        float _3427 = _3425 * _3420;
                        float _3428 = _3425 * _3421;
                        float _3429 = dot(vec3(_931, _934, _937), vec3(_3426, _3427, _3428));
                        float _3434 = 1.0 - (_3422 * _3379.w);
                        float _4828 = isnan(0.0) ? _3434 : (isnan(_3434) ? 0.0 : max(_3434, 0.0));
                        float _3435 = isnan(1.0) ? _4828 : (isnan(_4828) ? 1.0 : min(_4828, 1.0));
                        float _3436 = sqrt(_3422) * _3398.w;
                        float _3439 = 1.39999997615814208984375 / (_3436 + 1.39999997615814208984375);
                        float _3440 = _3439 * _3439;
                        float _3443 = ((1.0 - _3440) * _3429) + _3440;
                        float _3446 = _3436 * _3436;
                        float _3450 = ((isnan(0.0) ? _3443 : (isnan(_3443) ? 0.0 : max(_3443, 0.0))) * _3435) / ((_3446 * 0.699999988079071044921875) + 1.0);
                        float _3454 = (-0.0) - _2064;
                        float _3455 = (-0.0) - _2065;
                        float _3456 = (-0.0) - _2066;
                        float _3460 = inversesqrt(dot(vec3(_3454, _3455, _3456), vec3(_3454, _3455, _3456)));
                        float _3461 = _3460 * _3454;
                        float _3462 = _3460 * _3455;
                        float _3463 = _3460 * _3456;
                        float _3470 = exp2(log2(1.0 / ((_3446 * 3.5) + 5.0)) * 0.25);
                        float _3471 = 1.0 - _1006;
                        float _3478 = sqrt(1.0 - ((1.0 - (_3471 * _3471)) * (1.0 - (_3470 * _3470))));
                        float _3479 = _3478 * _3478;
                        float _3480 = _3479 * _3479;
                        float _3481 = _3461 + _3426;
                        float _3482 = _3462 + _3427;
                        float _3483 = _3463 + _3428;
                        float _3487 = inversesqrt(dot(vec3(_3481, _3482, _3483), vec3(_3481, _3482, _3483)));
                        float _3491 = dot(vec3(_931, _934, _937), vec3(_3461, _3462, _3463));
                        float _4844 = isnan(0.0) ? _3491 : (isnan(_3491) ? 0.0 : max(_3491, 0.0));
                        float _3494 = isnan(1.0) ? _4844 : (isnan(_4844) ? 1.0 : min(_4844, 1.0));
                        float _3495 = dot(vec3(_931, _934, _937), vec3(_3487 * _3481, _3487 * _3482, _3487 * _3483));
                        float _4855 = isnan(0.0) ? _3495 : (isnan(_3495) ? 0.0 : max(_3495, 0.0));
                        float _3498 = isnan(1.0) ? _4855 : (isnan(_4855) ? 1.0 : min(_4855, 1.0));
                        float _3502 = ((_3498 * _3498) * (_3480 + (-1.0))) + 1.0;
                        float _3503 = _3439 * _3479;
                        float _3504 = _3503 * _3503;
                        float _3507 = ((1.0 - _3504) * _3429) + _3504;
                        float _4866 = isnan(0.0) ? _3507 : (isnan(_3507) ? 0.0 : max(_3507, 0.0));
                        float _3508 = isnan(1.0) ? _4866 : (isnan(_4866) ? 1.0 : min(_4866, 1.0));
                        float _3509 = 1.0 - _3479;
                        float _3519 = (0.5 / (((_3508 * ((_3494 * _3509) + _3479)) + 9.9999999392252902907785028219223e-09) + (((_3508 * _3509) + _3479) * _3494))) * _3508;
                        float _4877 = isnan(0.0) ? _3519 : (isnan(_3519) ? 0.0 : max(_3519, 0.0));
                        float _3530 = (((_3480 * 3.1415927410125732421875) * (isnan(1.0) ? _4877 : (isnan(_4877) ? 1.0 : min(_4877, 1.0)))) / ((_3502 * _3502) * ((_3446 * 2.1991131305694580078125) + 3.141590118408203125))) * _3435;
                        _3288 = (_3450 * _3398.x) + _3356;
                        _3289 = (_3450 * _3398.y) + _3357;
                        _3290 = (_3450 * _3398.z) + _3358;
                        _3285 = (_3530 * _3415.x) + _3353;
                        _3286 = (_3530 * _3415.y) + _3354;
                        _3287 = (_3530 * _3415.z) + _3355;
                        if (_3360 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3353 = _3285;
                            _3354 = _3286;
                            _3355 = _3287;
                            _3356 = _3288;
                            _3357 = _3289;
                            _3358 = _3290;
                            _3359 = _3360;
                        }
                    }
                    frontier_phi_66_pred = _3290;
                    frontier_phi_66_pred_1 = _3289;
                    frontier_phi_66_pred_2 = _3288;
                    frontier_phi_66_pred_3 = _3287;
                    frontier_phi_66_pred_4 = _3286;
                    frontier_phi_66_pred_5 = _3285;
                }
                _3096 = frontier_phi_66_pred;
                _3094 = frontier_phi_66_pred_1;
                _3092 = frontier_phi_66_pred_2;
                _3090 = frontier_phi_66_pred_3;
                _3088 = frontier_phi_66_pred_4;
                _3086 = frontier_phi_66_pred_5;
                uint _3236 = _3235 + 1u;
                if (_3236 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3229 = _3086;
                    _3230 = _3088;
                    _3231 = _3090;
                    _3232 = _3092;
                    _3233 = _3094;
                    _3234 = _3096;
                    _3235 = _3236;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3085 = _3086;
            _3087 = _3088;
            _3089 = _3090;
            _3091 = _3092;
            _3093 = _3094;
            _3095 = _3096;
        }
        uvec4 _3099 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3100 = _3099.z;
        uint _3102 = (_3100 >> 8u) & 15u;
        float _3197;
        float _3199;
        float _3201;
        float _3203;
        float _3205;
        float _3207;
        if (((4294967295u << _3102) & _3005) == 0u)
        {
            _3197 = _3085;
            _3199 = _3087;
            _3201 = _3089;
            _3203 = _3091;
            _3205 = _3093;
            _3207 = _3095;
        }
        else
        {
            float _3222 = inversesqrt(dot(vec3(_2064, _2065, _2066), vec3(_2064, _2065, _2066)));
            float _3223 = _3222 * _2064;
            float _3224 = _3222 * _2065;
            float _3225 = _3222 * _2066;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3102 < ((_3100 >> 12u) & 15u))
            {
                float _3198;
                float _3200;
                float _3202;
                float _3204;
                float _3206;
                float _3208;
                float _3336 = _3085;
                float _3337 = _3087;
                float _3338 = _3089;
                float _3339 = _3091;
                float _3340 = _3093;
                float _3341 = _3095;
                uint _3342 = _3102;
                uint _3351;
                bool _3352;
                for (;;)
                {
                    _3351 = texelFetch(g_lightClassification, int((((_2999 << 5u) + (_2985 << 9u)) + (_3342 << 2u)) >> 2u)).x;
                    _3352 = _3351 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3352)
                    {
                        frontier_phi_72_pred = _3341;
                        frontier_phi_72_pred_1 = _3340;
                        frontier_phi_72_pred_2 = _3339;
                        frontier_phi_72_pred_3 = _3338;
                        frontier_phi_72_pred_4 = _3337;
                        frontier_phi_72_pred_5 = _3336;
                    }
                    else
                    {
                        float _3535;
                        float _3536;
                        float _3537;
                        float _3538;
                        float _3539;
                        float _3540;
                        float _3828;
                        float _3829;
                        float _3830;
                        float _3831;
                        float _3832;
                        float _3833;
                        float _3548 = _3336;
                        float _3549 = _3337;
                        float _3550 = _3338;
                        float _3551 = _3339;
                        float _3552 = _3340;
                        float _3553 = _3341;
                        uint _3554 = _3351;
                        uint _3555;
                        vec4 _3580;
                        float _3581;
                        vec4 _3596;
                        vec3 _3608;
                        vec4 _3623;
                        vec4 _3638;
                        float _3684;
                        bool _3685;
                        for (;;)
                        {
                            uint _3565 = ((_3342 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3554));
                            _3555 = (_3554 + 4294967295u) & _3554;
                            uint _3567 = _3565 * 40u;
                            _3580 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3567)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3567 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3567 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3567 + 3u)).x));
                            _3581 = _3580.w;
                            uint _3583 = (_3565 * 40u) + 4u;
                            _3596 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3583)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3583 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3583 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3583 + 3u)).x));
                            uint _3598 = (_3565 * 40u) + 8u;
                            _3608 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3598)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3598 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3598 + 2u)).x));
                            uint _3610 = (_3565 * 40u) + 16u;
                            _3623 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3610)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3610 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3610 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3610 + 3u)).x));
                            uint _3625 = (_3565 * 40u) + 20u;
                            _3638 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3625)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3625 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3625 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3625 + 3u)).x));
                            uint _3640 = (_3565 * 40u) + 24u;
                            vec4 _3653 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3640)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3640 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3640 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3640 + 3u)).x));
                            uint _3659 = (_3565 * 40u) + 28u;
                            vec4 _3672 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3659)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3659 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3659 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3659 + 3u)).x));
                            _3684 = fma(_2066, _3672.z, fma(_2065, _3672.y, _3672.x * _2064)) + _3672.w;
                            _3685 = !((fma(_2066, _3653.z, fma(_2065, _3653.y, _3653.x * _2064)) + _3653.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3685)
                            {
                                float _3712 = _3580.x - _2064;
                                float _3713 = _3580.y - _2065;
                                float _3714 = _3580.z - _2066;
                                float _3715 = dot(vec3(_3712, _3713, _3714), vec3(_3712, _3713, _3714));
                                float _3718 = inversesqrt(_3715);
                                float _3719 = _3718 * _3712;
                                float _3720 = _3718 * _3713;
                                float _3721 = _3718 * _3714;
                                float _3725 = 1.0 - (_3715 / (_3581 * _3581));
                                float _4888 = isnan(0.0) ? _3725 : (isnan(_3725) ? 0.0 : max(_3725, 0.0));
                                float _3726 = isnan(1.0) ? _4888 : (isnan(_4888) ? 1.0 : min(_4888, 1.0));
                                float _3730 = sqrt(_3715) * _3596.w;
                                float _3732 = 1.39999997615814208984375 / (_3730 + 1.39999997615814208984375);
                                float _3733 = _3732 * _3732;
                                float _3736 = ((1.0 - _3733) * dot(vec3(_3719, _3720, _3721), vec3(_931, _934, _937))) + _3733;
                                float _3739 = _3730 * _3730;
                                float _3743 = (fma(_2066, _3623.z, fma(_2065, _3623.y, _3623.x * _2064)) + _3623.w) / _3684;
                                float _3744 = (fma(_2066, _3638.z, fma(_2065, _3638.y, _3638.x * _2064)) + _3638.w) / _3684;
                                float _3748 = 1.0 - dot(vec2(_3743, _3744), vec2(_3743, _3744));
                                float _4904 = isnan(0.0) ? _3748 : (isnan(_3748) ? 0.0 : max(_3748, 0.0));
                                float _3749 = isnan(1.0) ? _4904 : (isnan(_4904) ? 1.0 : min(_4904, 1.0));
                                float _3750 = _3749 * (((isnan(0.0) ? _3736 : (isnan(_3736) ? 0.0 : max(_3736, 0.0))) * _3726) / ((_3739 * 0.699999988079071044921875) + 1.0));
                                float _3762 = exp2(log2(1.0 / ((_3739 * 3.5) + 5.0)) * 0.25);
                                float _3763 = 1.0 - _1006;
                                float _3770 = sqrt(1.0 - ((1.0 - (_3763 * _3763)) * (1.0 - (_3762 * _3762))));
                                float _3771 = _3770 * _3770;
                                float _3772 = _3771 * _3771;
                                float _3773 = _3719 - _3223;
                                float _3774 = _3720 - _3224;
                                float _3775 = _3721 - _3225;
                                float _3779 = inversesqrt(dot(vec3(_3773, _3774, _3775), vec3(_3773, _3774, _3775)));
                                float _3783 = dot(vec3(_931, _934, _937), vec3((-0.0) - _3223, (-0.0) - _3224, (-0.0) - _3225));
                                float _4915 = isnan(0.0) ? _3783 : (isnan(_3783) ? 0.0 : max(_3783, 0.0));
                                float _3786 = isnan(1.0) ? _4915 : (isnan(_4915) ? 1.0 : min(_4915, 1.0));
                                float _3787 = dot(vec3(_931, _934, _937), vec3(_3779 * _3773, _3779 * _3774, _3779 * _3775));
                                float _4926 = isnan(0.0) ? _3787 : (isnan(_3787) ? 0.0 : max(_3787, 0.0));
                                float _3790 = isnan(1.0) ? _4926 : (isnan(_4926) ? 1.0 : min(_4926, 1.0));
                                float _3794 = ((_3790 * _3790) * (_3772 + (-1.0))) + 1.0;
                                float _3795 = _3732 * _3771;
                                float _3796 = _3795 * _3795;
                                float _3802 = ((1.0 - _3796) * dot(vec3(_931, _934, _937), vec3(_3719, _3720, _3721))) + _3796;
                                float _4937 = isnan(0.0) ? _3802 : (isnan(_3802) ? 0.0 : max(_3802, 0.0));
                                float _3803 = isnan(1.0) ? _4937 : (isnan(_4937) ? 1.0 : min(_4937, 1.0));
                                float _3804 = 1.0 - _3771;
                                float _3814 = (0.5 / (((_3803 * ((_3786 * _3804) + _3771)) + 9.9999999392252902907785028219223e-09) + (((_3803 * _3804) + _3771) * _3786))) * _3803;
                                float _4948 = isnan(0.0) ? _3814 : (isnan(_3814) ? 0.0 : max(_3814, 0.0));
                                float _3824 = (_3749 * _3726) * (((_3772 * 3.1415927410125732421875) * (isnan(1.0) ? _4948 : (isnan(_4948) ? 1.0 : min(_4948, 1.0)))) / ((_3794 * _3794) * ((_3739 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3750 * _3596.y;
                                frontier_phi_78_pred_1 = _3750 * _3596.x;
                                frontier_phi_78_pred_2 = _3824 * _3608.z;
                                frontier_phi_78_pred_3 = _3824 * _3608.y;
                                frontier_phi_78_pred_4 = _3824 * _3608.x;
                                frontier_phi_78_pred_5 = _3750 * _3596.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3832 = frontier_phi_78_pred;
                            _3831 = frontier_phi_78_pred_1;
                            _3830 = frontier_phi_78_pred_2;
                            _3829 = frontier_phi_78_pred_3;
                            _3828 = frontier_phi_78_pred_4;
                            _3833 = frontier_phi_78_pred_5;
                            _3538 = _3831 + _3551;
                            _3539 = _3832 + _3552;
                            _3540 = _3833 + _3553;
                            _3535 = _3828 + _3548;
                            _3536 = _3829 + _3549;
                            _3537 = _3830 + _3550;
                            if (_3555 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3548 = _3535;
                                _3549 = _3536;
                                _3550 = _3537;
                                _3551 = _3538;
                                _3552 = _3539;
                                _3553 = _3540;
                                _3554 = _3555;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3540;
                        frontier_phi_72_pred_1 = _3539;
                        frontier_phi_72_pred_2 = _3538;
                        frontier_phi_72_pred_3 = _3537;
                        frontier_phi_72_pred_4 = _3536;
                        frontier_phi_72_pred_5 = _3535;
                    }
                    _3208 = frontier_phi_72_pred;
                    _3206 = frontier_phi_72_pred_1;
                    _3204 = frontier_phi_72_pred_2;
                    _3202 = frontier_phi_72_pred_3;
                    _3200 = frontier_phi_72_pred_4;
                    _3198 = frontier_phi_72_pred_5;
                    uint _3343 = _3342 + 1u;
                    if (_3343 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3336 = _3198;
                        _3337 = _3200;
                        _3338 = _3202;
                        _3339 = _3204;
                        _3340 = _3206;
                        _3341 = _3208;
                        _3342 = _3343;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3208;
                frontier_phi_60_61_ladder_1 = _3206;
                frontier_phi_60_61_ladder_2 = _3202;
                frontier_phi_60_61_ladder_3 = _3200;
                frontier_phi_60_61_ladder_4 = _3198;
                frontier_phi_60_61_ladder_5 = _3204;
            }
            else
            {
                frontier_phi_60_61_ladder = _3095;
                frontier_phi_60_61_ladder_1 = _3093;
                frontier_phi_60_61_ladder_2 = _3089;
                frontier_phi_60_61_ladder_3 = _3087;
                frontier_phi_60_61_ladder_4 = _3085;
                frontier_phi_60_61_ladder_5 = _3091;
            }
            _3197 = frontier_phi_60_61_ladder_4;
            _3199 = frontier_phi_60_61_ladder_3;
            _3201 = frontier_phi_60_61_ladder_2;
            _3203 = frontier_phi_60_61_ladder_5;
            _3205 = frontier_phi_60_61_ladder_1;
            _3207 = frontier_phi_60_61_ladder;
        }
        float _3212 = isnan(1.0) ? _990 : (isnan(_990) ? 1.0 : min(_990, 1.0));
        _3018 = (_3212 * _3203) + _2530;
        _3020 = (_3212 * _3205) + _2532;
        _3022 = (_3212 * _3207) + _2534;
        _3024 = ((_3197 * _974) * _3212) + _2868;
        _3026 = ((_3199 * _976) * _3212) + _2870;
        _3028 = ((_3201 * _977) * _3212) + _2872;
    }
    else
    {
        _3018 = _2530;
        _3020 = _2532;
        _3022 = _2534;
        _3024 = _2868;
        _3026 = _2870;
        _3028 = _2872;
    }
    float _4964 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
    float _4975 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
    float _4986 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
    uint _3048 = _259 + 6u;
    float _3056 = _912 / cbSceneParam._m0[86u].x;
    float _3057 = _913 / cbSceneParam._m0[86u].y;
    vec4 _3071 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3056, _3057, (log2((isnan(cbSceneParam._m0[77u].w) ? _847 : (isnan(_847) ? cbSceneParam._m0[77u].w : min(_847, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3073 = _3071.x;
    float _3074 = _3071.y;
    float _3075 = _3071.z;
    float _3076 = _3071.w;
    float _3147;
    float _3149;
    float _3151;
    float _3153;
    if (_847 > cbSceneParam._m0[78u].w)
    {
        float _3110 = isnan(_847) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _847 : min(cbSceneParam._m0[80u].w, _847));
        float _3111 = _3110 / _847;
        float _3122 = _3111 * _897;
        float _3123 = _898 * _3111;
        float _3124 = (-0.0) - _3123;
        float _3125 = _3111 * _899;
        float _3127 = (cbSceneParam._m0[77u].w * _3124) / _3110;
        float _3128 = _3127 + cbSceneParam._m0[79u].w;
        float _3129 = cbSceneParam._m0[79u].w - _3123;
        float _3135 = sqrt(((_3122 * _3122) + (_3123 * _3123)) + (_3125 * _3125));
        float _3138 = (1.0 - (cbSceneParam._m0[77u].w / _3110)) * _3135;
        float _3143 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3145 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3298;
        if (abs((_3124 - _3127) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3298 = ((((_3128 > 0.0) ? exp2(_3143 * _3128) : (2.0 - exp2(_3145 * _3128))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3138;
        }
        else
        {
            float _3258 = 1.0 / cbSceneParam._m0[80u].x;
            float _3259 = isnan(_3129) ? _3128 : (isnan(_3128) ? _3129 : max(_3128, _3129));
            float _3260 = isnan(_3129) ? _3128 : (isnan(_3128) ? _3129 : min(_3128, _3129));
            float _3269 = isnan(0.0) ? _3259 : (isnan(_3259) ? 0.0 : min(_3259, 0.0));
            float _3270 = isnan(0.0) ? _3260 : (isnan(_3260) ? 0.0 : min(_3260, 0.0));
            _3298 = ((abs(_3135 / _3124) * cbSceneParam._m0[80u].y) * ((((_3269 - _3270) * 2.0) - ((exp2(_3143 * (isnan(0.0) ? _3259 : (isnan(_3259) ? 0.0 : max(_3259, 0.0)))) - exp2(_3143 * (isnan(0.0) ? _3260 : (isnan(_3260) ? 0.0 : max(_3260, 0.0))))) * _3258)) - ((exp2(_3145 * _3269) - exp2(_3145 * _3270)) * _3258))) + (_3138 * cbSceneParam._m0[80u].z);
        }
        vec4 _3300 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3056, _3057, 1.0), 0.0);
        float _3309 = exp2((_3298 * (-1.44269502162933349609375)) * (1.0 - _3300.w));
        float _3310 = log2(_3309);
        float _3326 = log2(_3076);
        _3147 = (exp2(_3326 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3310 * cbSceneParam._m0[78u].x)) * _3300.x) / cbSceneParam._m0[78u].x)) + _3073;
        _3149 = (exp2(_3326 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3310 * cbSceneParam._m0[78u].y)) * _3300.y) / cbSceneParam._m0[78u].y)) + _3074;
        _3151 = (exp2(_3326 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3310 * cbSceneParam._m0[78u].z)) * _3300.z) / cbSceneParam._m0[78u].z)) + _3075;
        _3153 = _3309 * _3076;
    }
    else
    {
        _3147 = _3073;
        _3149 = _3074;
        _3151 = _3075;
        _3153 = _3076;
    }
    float _3165 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3166 = _3165 == 3.0;
    float _3167 = log2(_3153);
    float _3174 = exp2(_3167 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4964 : (isnan(_4964) ? 1.0 : min(_4964, 1.0))) * (_3018 + ((isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0))) * _990))) + ((_3024 + ((isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0))) * _1798)) * cbPerFrame._m0[3u].x));
    float _3175 = exp2(_3167 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4975 : (isnan(_4975) ? 1.0 : min(_4975, 1.0))) * (_3020 + ((isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0))) * _990))) + ((_3026 + ((isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0))) * _1798)) * cbPerFrame._m0[3u].x));
    float _3176 = exp2(_3167 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4986 : (isnan(_4986) ? 1.0 : min(_4986, 1.0))) * (_3022 + ((isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0))) * _990))) + ((_3028 + ((isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0))) * _1798)) * cbPerFrame._m0[3u].x));
    float _3185 = (_3165 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3185 * (_3166 ? _3174 : (_3174 + (cbSceneParam._m0[72u].w * _3147)));
    SV_Target.y = _3185 * (_3166 ? _3175 : (_3175 + (cbSceneParam._m0[72u].w * _3149)));
    SV_Target.z = _3185 * (_3166 ? _3176 : (_3176 + (cbSceneParam._m0[72u].w * _3151)));
    SV_Target.w = cbInstanceData._m0[_3048].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3048].w;
}


