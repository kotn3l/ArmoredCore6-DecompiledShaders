#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1064;
float _3731;
float _3732;
float _3733;
float _3734;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _200 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _201 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _202 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _208 = inversesqrt(dot(vec3(_200, _201, _202), vec3(_200, _201, _202)));
    float _209 = _208 * _200;
    float _210 = _208 * _201;
    float _211 = _208 * _202;
    float _215 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _216 = _215 * NORMAL.x;
    float _217 = _215 * NORMAL.y;
    float _218 = _215 * NORMAL.z;
    float _222 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _223 = _222 * TANGENT.x;
    float _224 = _222 * TANGENT.y;
    float _225 = _222 * TANGENT.z;
    uint _228 = uint(roundEven(NORMAL.w)) * 13u;
    uint _234 = _228 + 1u;
    uint _238 = _228 + 2u;
    float _247 = sqrt(((cbInstanceData._m0[_234].x * cbInstanceData._m0[_234].x) + (cbInstanceData._m0[_228].x * cbInstanceData._m0[_228].x)) + (cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x));
    float _248 = _247 * TEXCOORD.z;
    float _249 = _247 * TEXCOORD.w;
    vec4 _268 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _274 = _268.x * cbMtdParam._m0[9u].x;
    float _275 = _268.y * cbMtdParam._m0[9u].y;
    float _276 = _268.z * cbMtdParam._m0[9u].z;
    vec4 _294 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _298 = _294.z;
    float _303 = (_294.x * 2.0) + (-1.0);
    float _305 = (_294.y * 2.0) + (-1.0);
    float _306 = dot(vec2(_303, _305), vec2(_303, _305));
    float _3743 = isnan(0.0) ? _306 : (isnan(_306) ? 0.0 : max(_306, 0.0));
    float _312 = sqrt(1.0 - (isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0))));
    float _315 = fma(_312, _216, fma(_305, _223, _303 * _209));
    float _318 = fma(_312, _217, fma(_305, _224, _303 * _210));
    float _321 = fma(_312, _218, fma(_305, _225, _303 * _211));
    float _325 = inversesqrt(dot(vec3(_315, _318, _321), vec3(_315, _318, _321)));
    vec4 _361 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _248) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _249) + cbTextureTilingScale._m0[11u].w));
    float _363 = _361.x;
    float _364 = 1.0 - _363;
    float _371 = ((_363 - _364) * cbMtdParam._m0[24u].z) + _364;
    float _373 = (cbMtdParam._m0[19u].x + dot(vec4(_325 * _315, _325 * _318, _325 * _321, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_371 * cbMtdParam._m0[21u].z);
    float _3754 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _374 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
    float _389 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_371 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3765 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    float _390 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
    float _394 = ((_374 * (cbMtdParam._m0[17u].x - _274)) * _390) + _274;
    float _395 = ((_374 * (cbMtdParam._m0[17u].y - _275)) * _390) + _275;
    float _396 = ((_374 * (cbMtdParam._m0[17u].z - _276)) * _390) + _276;
    vec4 _409 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _411 = _409.x;
    float _414 = _411 - ((_411 * _374) * _390);
    vec4 _427 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _248) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _249) + cbTextureTilingScale._m0[15u].w));
    float _434 = (_427.x * 2.0) + (-1.0);
    float _435 = (_427.y * 2.0) + (-1.0);
    float _436 = dot(vec2(_434, _435), vec2(_434, _435));
    float _3776 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _445 = (((_427.z - _298) * _374) * _390) + _298;
    float _460 = (((cbMtdParam._m0[21u].x * _303) + ((_434 - _303) * _374)) * _390) + _303;
    float _461 = (((cbMtdParam._m0[21u].x * _305) + ((_435 - _305) * _374)) * _390) + _305;
    float _462 = (((sqrt(1.0 - (isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0)))) - _312) * _374) * _390) + _312;
    float _467 = cbMtdParam._m0[22u].x + _294.w;
    float _470 = fma(_462, _216, fma(_461, _223, _460 * _209));
    float _473 = fma(_462, _217, fma(_461, _224, _460 * _210));
    float _476 = fma(_462, _218, fma(_461, _225, _460 * _211));
    float _480 = inversesqrt(dot(vec3(_470, _473, _476), vec3(_470, _473, _476)));
    float _481 = _480 * _470;
    float _482 = _480 * _473;
    float _483 = _480 * _476;
    float _3787 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _484 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
    float _3798 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _3809 = isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0));
    float _3820 = isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0));
    float _3831 = isnan(0.0) ? _396 : (isnan(_396) ? 0.0 : max(_396, 0.0));
    float _3842 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    float _489 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
    float _503 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _544 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _554 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _544);
    float _555 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _544);
    float _556 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _544);
    float _560 = inversesqrt(dot(vec3(_554, _555, _556), vec3(_554, _555, _556)));
    float _561 = _554 * _560;
    float _562 = _555 * _560;
    float _563 = _556 * _560;
    vec4 _568 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _570 = _568.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _745 = sqrt(((_554 * _554) + (_555 * _555)) + (_556 * _556));
        float _751 = (cbMatDynParam._m0[5u].x * _745) + cbMatDynParam._m0[5u].y;
        float _3853 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
        float _752 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
        float _756 = (cbMatDynParam._m0[5u].z * _745) + cbMatDynParam._m0[5u].w;
        float _3864 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0))) - _752)) + _752) < ((_570 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _582 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _583 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _603 = fma(_483, cbSceneParam._m0[5u].z, fma(_482, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _481));
    float _606 = fma(_483, cbSceneParam._m0[6u].z, fma(_482, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _481));
    float _609 = fma(_483, cbSceneParam._m0[7u].z, fma(_482, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _481));
    uint _622 = _228 + 9u;
    uint _623 = _622 + uint(cbMatDynParam._m0[0u].w);
    float _629 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0)))) * cbInstanceData._m0[_623].x;
    float _630 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0)))) * cbInstanceData._m0[_623].y;
    float _631 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0)))) * cbInstanceData._m0[_623].z;
    float _3875 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _632 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
    float _3886 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _633 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
    float _3897 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _634 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
    float _635 = 1.0 - _489;
    float _636 = _632 * _635;
    float _637 = _633 * _635;
    float _638 = _634 * _635;
    float _643 = (_632 + (-0.039999999105930328369140625)) * _489;
    float _644 = (_633 + (-0.039999999105930328369140625)) * _489;
    float _645 = (_634 + (-0.039999999105930328369140625)) * _489;
    float _646 = _643 + 0.039999999105930328369140625;
    float _648 = _644 + 0.039999999105930328369140625;
    float _649 = _645 + 0.039999999105930328369140625;
    vec4 _658 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _582, cbSceneParam._m0[86u].y * _583));
    float _662 = ((isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0))) * TEXCOORD_5.w) * _658.x;
    float _663 = dot(vec3(_481, _482, _483), vec3(_561, _562, _563));
    float _666 = _663 * 2.0;
    float _670 = (_666 * _481) - _561;
    float _671 = (_666 * _482) - _562;
    float _672 = (_666 * _483) - _563;
    float _676 = abs(dot(vec3(_561, _562, _563), vec3(_481, _482, _483)));
    float _3908 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
    float _678 = sqrt(_484);
    float _691 = exp2((_678 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_678 * 3.0));
    float _697 = (1.0 - _691) * ((_678 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _698 = _691 * _678;
    float _726 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _730 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _734 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1063;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    float _1076;
    float _1077;
    float _1078;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _788 = fma(_734, cbModelParam._m0[26u].z, fma(_730, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _726));
        float _792 = fma(_734, cbModelParam._m0[27u].z, fma(_730, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _726));
        float _796 = fma(_734, cbModelParam._m0[28u].z, fma(_730, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _726));
        float _821 = _726 + _481;
        float _822 = _730 + _482;
        float _823 = _734 + _483;
        float _833 = fma(_823, cbModelParam._m0[26u].z, fma(_822, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _821)) - _788;
        float _834 = fma(_823, cbModelParam._m0[27u].z, fma(_822, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _821)) - _792;
        float _835 = fma(_823, cbModelParam._m0[28u].z, fma(_822, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _821)) - _796;
        float _839 = inversesqrt(dot(vec3(_833, _834, _835), vec3(_833, _834, _835)));
        float _852 = ((_839 * _833) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_788 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _853 = ((_839 * _834) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_792 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _854 = ((_839 * _835) / cbModelParam._m0[34u].z) + ((((((_796 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _857 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_852, _853, _854), 0.0);
        vec4 _864 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_852, _853, _854), 0.0);
        vec4 _871 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_852, _853, _854), 0.0);
        vec4 _878 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_852, _853, _854), 0.0);
        float _891 = exp2((_857.w + (-0.5)) * 20.0) * 2.0;
        float _892 = _891 * (_857.x + (-0.5));
        float _893 = _891 * (_857.y + (-0.5));
        float _894 = _891 * (_857.z + (-0.5));
        float _901 = exp2((_864.w + (-0.5)) * 20.0) * 2.0;
        float _902 = _901 * (_864.x + (-0.5));
        float _903 = _901 * (_864.y + (-0.5));
        float _904 = _901 * (_864.z + (-0.5));
        float _911 = exp2((_871.w + (-0.5)) * 20.0) * 2.0;
        float _912 = _911 * (_871.x + (-0.5));
        float _913 = _911 * (_871.y + (-0.5));
        float _914 = _911 * (_871.z + (-0.5));
        float _921 = exp2((_878.w + (-0.5)) * 20.0) * 2.0;
        float _922 = _921 * (_878.x + (-0.5));
        float _923 = _921 * (_878.y + (-0.5));
        float _924 = _921 * (_878.z + (-0.5));
        float _925 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
        float _926 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
        float _927 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
        float _928 = _892 * 0.5;
        float _929 = _902 * 0.5;
        float _930 = _912 * 0.5;
        float _931 = dot(vec3(_928, _929, _930), vec3(_928, _929, _930));
        float _936 = (_931 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_931);
        float _945 = (dot(vec3(_481, _482, _483), vec3(_936 * _928, _936 * _929, _936 * _930)) + 1.0) * 0.5;
        float _3934 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
        float _955 = sqrt(((_929 * _929) + (_928 * _928)) + (_930 * _930)) / (_925 + 9.9999997473787516355514526367188e-06);
        float _3945 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
        float _956 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
        float _957 = _956 * 2.0;
        float _961 = (1.0 - _956) / (_956 + 1.0);
        float _3956 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
        float _962 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
        float _971 = ((((1.0 - _962) * (_957 + 2.0)) * exp2(log2(isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0))) * (_957 + 1.0))) + _962) * _925;
        float _972 = _893 * 0.5;
        float _973 = _903 * 0.5;
        float _974 = _913 * 0.5;
        float _975 = dot(vec3(_972, _973, _974), vec3(_972, _973, _974));
        float _980 = (_975 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_975);
        float _988 = (dot(vec3(_481, _482, _483), vec3(_980 * _972, _980 * _973, _980 * _974)) + 1.0) * 0.5;
        float _3967 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _997 = sqrt(((_973 * _973) + (_972 * _972)) + (_974 * _974)) / (_926 + 9.9999997473787516355514526367188e-06);
        float _3978 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _998 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
        float _999 = _998 * 2.0;
        float _1003 = (1.0 - _998) / (_998 + 1.0);
        float _3989 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1004 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
        float _1013 = ((((1.0 - _1004) * (_999 + 2.0)) * exp2(log2(isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0))) * (_999 + 1.0))) + _1004) * _926;
        float _1014 = _894 * 0.5;
        float _1015 = _904 * 0.5;
        float _1016 = _914 * 0.5;
        float _1017 = dot(vec3(_1014, _1015, _1016), vec3(_1014, _1015, _1016));
        float _1022 = (_1017 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1017);
        float _1030 = (dot(vec3(_481, _482, _483), vec3(_1022 * _1014, _1022 * _1015, _1022 * _1016)) + 1.0) * 0.5;
        float _4000 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1039 = sqrt(((_1015 * _1015) + (_1014 * _1014)) + (_1016 * _1016)) / (_927 + 9.9999997473787516355514526367188e-06);
        float _4011 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1040 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
        float _1041 = _1040 * 2.0;
        float _1045 = (1.0 - _1040) / (_1040 + 1.0);
        float _4022 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1046 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
        float _1055 = ((((1.0 - _1046) * (_1041 + 2.0)) * exp2(log2(isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0))) * (_1041 + 1.0))) + _1046) * _927;
        _1063 = _894;
        _1065 = _893;
        _1066 = _892;
        _1067 = _904;
        _1068 = _903;
        _1069 = _902;
        _1070 = _914;
        _1071 = _913;
        _1072 = _912;
        _1073 = _927;
        _1074 = _926;
        _1075 = _925;
        _1076 = cbModelParam._m0[36u].z * (isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0)));
        _1077 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0)));
        _1078 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0)));
    }
    else
    {
        _1063 = _1064;
        _1065 = _1064;
        _1066 = _1064;
        _1067 = _1064;
        _1068 = _1064;
        _1069 = _1064;
        _1070 = _1064;
        _1071 = _1064;
        _1072 = _1064;
        _1073 = _1064;
        _1074 = _1064;
        _1075 = _1064;
        _1076 = 0.0;
        _1077 = 0.0;
        _1078 = 0.0;
    }
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1106 = fma(_734, cbModelParam._m0[30u].z, fma(_730, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _726));
        float _1110 = fma(_734, cbModelParam._m0[31u].z, fma(_730, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _726));
        float _1114 = fma(_734, cbModelParam._m0[32u].z, fma(_730, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _726));
        float _1137 = _726 + _481;
        float _1138 = _730 + _482;
        float _1139 = _734 + _483;
        float _1149 = fma(_1139, cbModelParam._m0[30u].z, fma(_1138, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1137)) - _1106;
        float _1150 = fma(_1139, cbModelParam._m0[31u].z, fma(_1138, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1137)) - _1110;
        float _1151 = fma(_1139, cbModelParam._m0[32u].z, fma(_1138, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1137)) - _1114;
        float _1155 = inversesqrt(dot(vec3(_1149, _1150, _1151), vec3(_1149, _1150, _1151)));
        float _1168 = ((_1155 * _1149) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1106 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1169 = ((_1155 * _1150) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1110 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1170 = ((_1155 * _1151) / cbModelParam._m0[35u].z) + ((((((_1114 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1172 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1168, _1169, _1170), 0.0);
        vec4 _1179 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1168, _1169, _1170), 0.0);
        vec4 _1186 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1168, _1169, _1170), 0.0);
        vec4 _1193 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1168, _1169, _1170), 0.0);
        float _1205 = exp2((_1172.w + (-0.5)) * 20.0) * 2.0;
        float _1206 = _1205 * (_1172.x + (-0.5));
        float _1207 = _1205 * (_1172.y + (-0.5));
        float _1208 = _1205 * (_1172.z + (-0.5));
        float _1215 = exp2((_1179.w + (-0.5)) * 20.0) * 2.0;
        float _1216 = _1215 * (_1179.x + (-0.5));
        float _1217 = _1215 * (_1179.y + (-0.5));
        float _1218 = _1215 * (_1179.z + (-0.5));
        float _1225 = exp2((_1186.w + (-0.5)) * 20.0) * 2.0;
        float _1226 = _1225 * (_1186.x + (-0.5));
        float _1227 = _1225 * (_1186.y + (-0.5));
        float _1228 = _1225 * (_1186.z + (-0.5));
        float _1235 = exp2((_1193.w + (-0.5)) * 20.0) * 2.0;
        float _1236 = _1235 * (_1193.x + (-0.5));
        float _1237 = _1235 * (_1193.y + (-0.5));
        float _1238 = _1235 * (_1193.z + (-0.5));
        float _1239 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1240 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1241 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1242 = _1206 * 0.5;
        float _1243 = _1216 * 0.5;
        float _1244 = _1226 * 0.5;
        float _1245 = dot(vec3(_1242, _1243, _1244), vec3(_1242, _1243, _1244));
        float _1250 = (_1245 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1245);
        float _1258 = (dot(vec3(_481, _482, _483), vec3(_1250 * _1242, _1250 * _1243, _1250 * _1244)) + 1.0) * 0.5;
        float _4063 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1267 = sqrt(((_1243 * _1243) + (_1242 * _1242)) + (_1244 * _1244)) / (_1239 + 9.9999997473787516355514526367188e-06);
        float _4074 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1268 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
        float _1269 = _1268 * 2.0;
        float _1273 = (1.0 - _1268) / (_1268 + 1.0);
        float _4085 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1274 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
        float _1283 = ((((1.0 - _1274) * (_1269 + 2.0)) * exp2(log2(isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0))) * (_1269 + 1.0))) + _1274) * _1239;
        float _1284 = _1207 * 0.5;
        float _1285 = _1217 * 0.5;
        float _1286 = _1227 * 0.5;
        float _1287 = dot(vec3(_1284, _1285, _1286), vec3(_1284, _1285, _1286));
        float _1292 = (_1287 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1287);
        float _1300 = (dot(vec3(_481, _482, _483), vec3(_1292 * _1284, _1292 * _1285, _1292 * _1286)) + 1.0) * 0.5;
        float _4096 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1309 = sqrt(((_1285 * _1285) + (_1284 * _1284)) + (_1286 * _1286)) / (_1240 + 9.9999997473787516355514526367188e-06);
        float _4107 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1310 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
        float _1311 = _1310 * 2.0;
        float _1315 = (1.0 - _1310) / (_1310 + 1.0);
        float _4118 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1316 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
        float _1325 = ((((1.0 - _1316) * (_1311 + 2.0)) * exp2(log2(isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0))) * (_1311 + 1.0))) + _1316) * _1240;
        float _1326 = _1208 * 0.5;
        float _1327 = _1218 * 0.5;
        float _1328 = _1228 * 0.5;
        float _1329 = dot(vec3(_1326, _1327, _1328), vec3(_1326, _1327, _1328));
        float _1334 = (_1329 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1329);
        float _1342 = (dot(vec3(_481, _482, _483), vec3(_1334 * _1326, _1334 * _1327, _1334 * _1328)) + 1.0) * 0.5;
        float _4129 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1351 = sqrt(((_1327 * _1327) + (_1326 * _1326)) + (_1328 * _1328)) / (_1241 + 9.9999997473787516355514526367188e-06);
        float _4140 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1352 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
        float _1353 = _1352 * 2.0;
        float _1357 = (1.0 - _1352) / (_1352 + 1.0);
        float _4151 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1358 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
        float _1367 = ((((1.0 - _1358) * (_1353 + 2.0)) * exp2(log2(isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0))) * (_1353 + 1.0))) + _1358) * _1241;
        _1375 = _1208;
        _1376 = _1207;
        _1377 = _1206;
        _1378 = _1218;
        _1379 = _1217;
        _1380 = _1216;
        _1381 = _1228;
        _1382 = _1227;
        _1383 = _1226;
        _1384 = _1241;
        _1385 = _1240;
        _1386 = _1239;
        _1387 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0)));
        _1388 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0)));
        _1389 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0)));
    }
    else
    {
        _1375 = _1064;
        _1376 = _1064;
        _1377 = _1064;
        _1378 = _1064;
        _1379 = _1064;
        _1380 = _1064;
        _1381 = _1064;
        _1382 = _1064;
        _1383 = _1064;
        _1384 = _1064;
        _1385 = _1064;
        _1386 = _1064;
        _1387 = 0.0;
        _1388 = 0.0;
        _1389 = 0.0;
    }
    float _1399 = (cbModelParam._m0[1u].x * (_1387 - _1076)) + _1076;
    float _1400 = (cbModelParam._m0[1u].x * (_1388 - _1077)) + _1077;
    float _1401 = (cbModelParam._m0[1u].x * (_1389 - _1078)) + _1078;
    float _1422 = fma(_1401, cbSceneParam._m0[89u].z, fma(_1400, cbSceneParam._m0[89u].y, _1399 * cbSceneParam._m0[89u].x));
    float _1425 = fma(_1401, cbSceneParam._m0[90u].z, fma(_1400, cbSceneParam._m0[90u].y, _1399 * cbSceneParam._m0[90u].x));
    float _1428 = fma(_1401, cbSceneParam._m0[91u].z, fma(_1400, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1399));
    float _1443 = _670 * 0.5;
    float _1444 = _671 * 0.5;
    float _1445 = _672 * 0.5;
    float _1446 = dot(vec4(_1443, _1444, _1445, 1.0), vec4(_1377, _1380, _1383, _1386));
    float _1449 = dot(vec4(_1443, _1444, _1445, 1.0), vec4(_1376, _1379, _1382, _1385));
    float _1452 = dot(vec4(_1443, _1444, _1445, 1.0), vec4(_1375, _1378, _1381, _1384));
    float _1486;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1459 = dot(vec4(_1443, _1444, _1445, 1.0), vec4(_1063, _1067, _1070, _1073));
        float _1463 = dot(vec4(_1443, _1444, _1445, 1.0), vec4(_1065, _1068, _1071, _1074));
        float _1467 = dot(vec4(_1443, _1444, _1445, 1.0), vec4(_1066, _1069, _1072, _1075));
        float _1474 = dot(vec4(cbModelParam._m0[39u]), vec4(_1443, _1444, _1445, 1.0));
        _1486 = dot(vec3(isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0)), isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0)), isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1474) ? 0.0 : (isnan(0.0) ? _1474 : max(0.0, _1474))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1486 = 1.0;
    }
    float _1497;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1488 = dot(vec4(cbModelParam._m0[40u]), vec4(_1443, _1444, _1445, 1.0));
        _1497 = dot(vec3(isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0)), isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0)), isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1488) ? 0.0 : (isnan(0.0) ? _1488 : max(0.0, _1488))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1497 = 1.0;
    }
    float _1501 = (_1497 * cbModelParam._m0[1u].x) + (_1486 * (1.0 - cbModelParam._m0[1u].x));
    float _1511 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _484);
    float _1512 = isnan(_1511) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1511 : min(cbModelParam._m0[25u].z, _1511));
    float _1593;
    float _1595;
    float _1597;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1560 = fma(_734, cbModelParam._m0[13u].z, fma(_730, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _726)) + cbModelParam._m0[13u].w;
        float _1564 = fma(_734, cbModelParam._m0[14u].z, fma(_730, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _726)) + cbModelParam._m0[14u].w;
        float _1568 = fma(_734, cbModelParam._m0[15u].z, fma(_730, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _726)) + cbModelParam._m0[15u].w;
        float _1571 = fma(_672, cbModelParam._m0[13u].z, fma(_671, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _670));
        float _1574 = fma(_672, cbModelParam._m0[14u].z, fma(_671, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _670));
        float _1577 = fma(_672, cbModelParam._m0[15u].z, fma(_671, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _670));
        float _1605;
        if (_1571 > 0.0)
        {
            _1605 = abs((1.0 - _1560) / _1571);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1571 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1560 + 1.0) / _1571);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1605 = frontier_phi_17_15_ladder;
        }
        float _1777;
        if (_1574 > 0.0)
        {
            _1777 = abs((1.0 - _1564) / _1574);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1574 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1564 + 1.0) / _1574);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1777 = frontier_phi_26_22_ladder;
        }
        float _2073;
        if (_1577 > 0.0)
        {
            _2073 = abs((1.0 - _1568) / _1577);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1577 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1568 + 1.0) / _1577);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2073 = frontier_phi_38_33_ladder;
        }
        float _2075 = isnan(_1777) ? _1605 : (isnan(_1605) ? _1777 : min(_1605, _1777));
        float _2076 = isnan(_2073) ? _2075 : (isnan(_2075) ? _2073 : min(_2075, _2073));
        float _2080 = (_2076 * _1571) + _1560;
        float _2081 = (_2076 * _1574) + _1564;
        float _2082 = (_2076 * _1577) + _1568;
        float _2083 = _2076 * 9.9999997473787516355514526367188e-05;
        float _2085 = (-1.0) - _2083;
        float _2087 = _2083 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2082 > _2087) || ((_2082 < _2085) || ((_2081 > _2087) || ((_2081 < _2085) || ((_2080 < _2085) || (_2080 > _2087))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2227 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2082, cbModelParam._m0[9u].z, fma(_2081, cbModelParam._m0[9u].y, _2080 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2082, cbModelParam._m0[10u].z, fma(_2081, cbModelParam._m0[10u].y, _2080 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2082, cbModelParam._m0[11u].z, fma(_2081, cbModelParam._m0[11u].y, _2080 * cbModelParam._m0[11u].x))), _1512);
            frontier_phi_16_38_ladder = _2227.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2227.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2227.x * cbModelParam._m0[1u].y;
        }
        _1593 = frontier_phi_16_38_ladder_2;
        _1595 = frontier_phi_16_38_ladder_1;
        _1597 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1581 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_670, _671, _672), _1512);
        _1593 = _1581.x * cbModelParam._m0[1u].y;
        _1595 = _1581.y * cbModelParam._m0[1u].y;
        _1597 = _1581.z * cbModelParam._m0[1u].y;
    }
    float _1601 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _484);
    float _1602 = isnan(_1601) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1601 : min(cbModelParam._m0[25u].w, _1601));
    float _1692;
    float _1694;
    float _1696;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1656 = fma(_734, cbModelParam._m0[21u].z, fma(_730, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _726)) + cbModelParam._m0[21u].w;
        float _1660 = fma(_734, cbModelParam._m0[22u].z, fma(_730, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _726)) + cbModelParam._m0[22u].w;
        float _1664 = fma(_734, cbModelParam._m0[23u].z, fma(_730, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _726)) + cbModelParam._m0[23u].w;
        float _1667 = fma(_672, cbModelParam._m0[21u].z, fma(_671, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _670));
        float _1670 = fma(_672, cbModelParam._m0[22u].z, fma(_671, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _670));
        float _1673 = fma(_672, cbModelParam._m0[23u].z, fma(_671, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _670));
        float _1782;
        if (_1667 > 0.0)
        {
            _1782 = abs((1.0 - _1656) / _1667);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1667 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1656 + 1.0) / _1667);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1782 = frontier_phi_28_24_ladder;
        }
        float _2100;
        if (_1670 > 0.0)
        {
            _2100 = abs((1.0 - _1660) / _1670);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1670 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1660 + 1.0) / _1670);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2100 = frontier_phi_40_35_ladder;
        }
        float _2438;
        if (_1673 > 0.0)
        {
            _2438 = abs((1.0 - _1664) / _1673);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1673 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1664 + 1.0) / _1673);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2438 = frontier_phi_50_47_ladder;
        }
        float _2440 = isnan(_2100) ? _1782 : (isnan(_1782) ? _2100 : min(_1782, _2100));
        float _2441 = isnan(_2438) ? _2440 : (isnan(_2440) ? _2438 : min(_2440, _2438));
        float _2445 = (_2441 * _1667) + _1656;
        float _2446 = (_2441 * _1670) + _1660;
        float _2447 = (_2441 * _1673) + _1664;
        float _2448 = _2441 * 9.9999997473787516355514526367188e-05;
        float _2449 = (-1.0) - _2448;
        float _2451 = _2448 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2447 > _2451) || ((_2447 < _2449) || ((_2446 > _2451) || ((_2446 < _2449) || ((_2445 < _2449) || (_2445 > _2451))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2569 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2447, cbModelParam._m0[17u].z, fma(_2446, cbModelParam._m0[17u].y, _2445 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2447, cbModelParam._m0[18u].z, fma(_2446, cbModelParam._m0[18u].y, _2445 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2447, cbModelParam._m0[19u].z, fma(_2446, cbModelParam._m0[19u].y, _2445 * cbModelParam._m0[19u].x))), _1602);
            frontier_phi_25_50_ladder = _2569.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2569.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2569.x * cbModelParam._m0[1u].z;
        }
        _1692 = frontier_phi_25_50_ladder_2;
        _1694 = frontier_phi_25_50_ladder_1;
        _1696 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1676 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_670, _671, _672), _1602);
        _1692 = _1676.x * cbModelParam._m0[1u].z;
        _1694 = _1676.y * cbModelParam._m0[1u].z;
        _1696 = _1676.z * cbModelParam._m0[1u].z;
    }
    float _1709 = (((_697 * _646) + _698) * _662) * ((cbModelParam._m0[1u].w * (_1692 - _1593)) + _1593);
    float _1711 = (((_697 * _648) + _698) * _662) * ((cbModelParam._m0[1u].w * (_1694 - _1595)) + _1595);
    float _1713 = (((_697 * _649) + _698) * _662) * ((cbModelParam._m0[1u].w * (_1696 - _1597)) + _1597);
    float _1716 = fma(_1713, cbSceneParam._m0[89u].z, fma(_1711, cbSceneParam._m0[89u].y, _1709 * cbSceneParam._m0[89u].x));
    float _1719 = fma(_1713, cbSceneParam._m0[90u].z, fma(_1711, cbSceneParam._m0[90u].y, _1709 * cbSceneParam._m0[90u].x));
    float _1722 = fma(_1713, cbSceneParam._m0[91u].z, fma(_1711, cbSceneParam._m0[91u].y, _1709 * cbSceneParam._m0[91u].x));
    float _1756 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1760 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1764 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1768 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1769 = _1756 / _1768;
    float _1770 = _1760 / _1768;
    float _1771 = _1764 / _1768;
    float _1918;
    float _1919;
    float _1920;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1798 = ((uint(_1771 > cbSceneParam._m0[59u].y) + uint(_1771 > cbSceneParam._m0[59u].x)) + uint(_1771 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1799 = _1798 + 43u;
        uint _1807 = _1798 + 44u;
        uint _1815 = _1798 + 45u;
        uint _1823 = _1798 + 46u;
        float _1834 = fma(_1768, cbSceneParam._m0[_1799].w, fma(_1764, cbSceneParam._m0[_1799].z, fma(_1760, cbSceneParam._m0[_1799].y, _1756 * cbSceneParam._m0[_1799].x)));
        float _1838 = fma(_1768, cbSceneParam._m0[_1807].w, fma(_1764, cbSceneParam._m0[_1807].z, fma(_1760, cbSceneParam._m0[_1807].y, _1756 * cbSceneParam._m0[_1807].x)));
        float _1846 = fma(_1768, cbSceneParam._m0[_1823].w, fma(_1764, cbSceneParam._m0[_1823].z, fma(_1760, cbSceneParam._m0[_1823].y, _1756 * cbSceneParam._m0[_1823].x)));
        float _1851 = cbSceneParam._m0[33u].z * _1846;
        float _1853 = cbSceneParam._m0[33u].w * _1846;
        float _1856 = fma(_1768, cbSceneParam._m0[_1815].w, fma(_1764, cbSceneParam._m0[_1815].z, fma(_1760, cbSceneParam._m0[_1815].y, _1756 * cbSceneParam._m0[_1815].x))) / _1846;
        float _1904 = (cbSceneParam._m0[33u].x - sqrt(((_1770 * _1770) + (_1769 * _1769)) + (_1771 * _1771))) * cbSceneParam._m0[33u].y;
        float _4277 = isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0));
        float _1911 = (isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1851 + _1834) / _1846, (_1853 + _1838) / _1846), _1856), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1853 + _1834) / _1846, (_1838 - _1851) / _1846), _1856), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1834 - _1851) / _1846, (_1838 - _1853) / _1846), _1856), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1834 - _1853) / _1846, (_1851 + _1838) / _1846), _1856), 0.0)).x), vec4(0.25)));
        _1918 = 1.0 - (_1911 * cbSceneParam._m0[34u].x);
        _1919 = 1.0 - (_1911 * cbSceneParam._m0[34u].y);
        _1920 = 1.0 - (_1911 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1918 = 1.0;
        _1919 = 1.0;
        _1920 = 1.0;
    }
    float _1984;
    float _1986;
    float _1988;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1972 = fma(_1768, cbSceneParam._m0[63u].w, fma(_1764, cbSceneParam._m0[63u].z, fma(_1760, cbSceneParam._m0[63u].y, _1756 * cbSceneParam._m0[63u].x)));
        float _1973 = fma(_1768, cbSceneParam._m0[60u].w, fma(_1764, cbSceneParam._m0[60u].z, fma(_1760, cbSceneParam._m0[60u].y, _1756 * cbSceneParam._m0[60u].x))) / _1972;
        float _1974 = fma(_1768, cbSceneParam._m0[61u].w, fma(_1764, cbSceneParam._m0[61u].z, fma(_1760, cbSceneParam._m0[61u].y, _1756 * cbSceneParam._m0[61u].x))) / _1972;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1973 >= cbSceneParam._m0[64u].x) && (_1974 >= cbSceneParam._m0[64u].y)) && (_1973 <= cbSceneParam._m0[64u].z)) && (_1974 <= cbSceneParam._m0[64u].w))
        {
            float _2113 = fma(_1768, cbSceneParam._m0[62u].w, fma(_1764, cbSceneParam._m0[62u].z, fma(_1760, cbSceneParam._m0[62u].y, _1756 * cbSceneParam._m0[62u].x))) / _1972;
            float _2117 = isnan(cbSceneParam._m0[41u].w) ? _2113 : (isnan(_2113) ? cbSceneParam._m0[41u].w : max(_2113, cbSceneParam._m0[41u].w));
            float _2160 = (cbSceneParam._m0[33u].x - sqrt(((_1770 * _1770) + (_1769 * _1769)) + (_1771 * _1771))) * cbSceneParam._m0[33u].y;
            float _4293 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
            float _2167 = (isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1973, cbSceneParam._m0[33u].w + _1974), _2117), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1973, _1974 - cbSceneParam._m0[33u].z), _2117), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1973 - cbSceneParam._m0[33u].z, _1974 - cbSceneParam._m0[33u].w), _2117), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1973 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1974), _2117), 0.0)).x), vec4(0.25)));
            float _2171 = 1.0 - (_2167 * cbSceneParam._m0[34u].x);
            float _2172 = 1.0 - (_2167 * cbSceneParam._m0[34u].y);
            float _2173 = 1.0 - (_2167 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2173) ? _1920 : (isnan(_1920) ? _2173 : min(_1920, _2173));
            frontier_phi_37_36_ladder_1 = isnan(_2172) ? _1919 : (isnan(_1919) ? _2172 : min(_1919, _2172));
            frontier_phi_37_36_ladder_2 = isnan(_2171) ? _1918 : (isnan(_1918) ? _2171 : min(_1918, _2171));
        }
        else
        {
            frontier_phi_37_36_ladder = _1920;
            frontier_phi_37_36_ladder_1 = _1919;
            frontier_phi_37_36_ladder_2 = _1918;
        }
        _1984 = frontier_phi_37_36_ladder_2;
        _1986 = frontier_phi_37_36_ladder_1;
        _1988 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1984 = _1918;
        _1986 = _1919;
        _1988 = _1920;
    }
    uvec4 _1993 = floatBitsToUint(cbInstanceData._m0[_228 + 5u]);
    uint _1995 = _1993.x * 14u;
    uint _1996 = _1995 + 13u;
    float _2003 = _662 + (-1.0);
    float _2008 = (cbLight._m0[_1996].x * _2003) + 1.0;
    float _2009 = (cbLight._m0[_1996].y * _2003) + 1.0;
    float _2010 = (cbLight._m0[_1996].z * _2003) + 1.0;
    float _2011 = (cbLight._m0[_1996].w * _2003) + 1.0;
    uint _2012 = _1995 + 5u;
    float _2018 = isnan(1.0) ? _2009 : (isnan(_2009) ? 1.0 : min(_2009, 1.0));
    uint _2022 = _1995 + 4u;
    float _2032 = isnan(1.0) ? _2008 : (isnan(_2008) ? 1.0 : min(_2008, 1.0));
    uint _2036 = _1995 | 1u;
    float _2047 = dot(vec3(cbLight._m0[_1995].xyz), vec3(_481, _482, _483));
    float _2050 = dot(vec3(cbLight._m0[_2036].xyz), vec3(_481, _482, _483));
    float _4329 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
    float _4340 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
    float _2055 = (isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0))) * 0.3183098733425140380859375;
    float _2057 = (isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0))) * 0.3183098733425140380859375;
    float _2064 = ((cbLight._m0[_2012].x * _2018) * _2057) + (((cbLight._m0[_2022].x * _1984) * _2032) * _2055);
    float _2065 = ((_2018 * cbLight._m0[_2012].y) * _2057) + (((cbLight._m0[_2022].y * _1986) * _2032) * _2055);
    float _2066 = ((_2018 * cbLight._m0[_2012].z) * _2057) + (((cbLight._m0[_2022].z * _1988) * _2032) * _2055);
    uvec4 _2070 = floatBitsToUint(cbLight._m0[_1995 + 12u]);
    bool _2072 = _2070.x == 0u;
    float _2174;
    float _2176;
    float _2178;
    if (_2072)
    {
        _2174 = _2064;
        _2176 = _2065;
        _2178 = _2066;
    }
    else
    {
        uint _2182 = _1995 + 6u;
        float _2198 = (dot(vec3(cbLight._m0[_1995 + 2u].xyz), vec3(_481, _482, _483)) * 0.5) + 0.5;
        float _2199 = _2198 * _2198;
        float _4351 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
        float _2200 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
        float _2201 = isnan(1.0) ? _2010 : (isnan(_2010) ? 1.0 : min(_2010, 1.0));
        _2174 = (((cbLight._m0[_2182].x * 0.3183098733425140380859375) * _2200) * _2201) + _2064;
        _2176 = (((cbLight._m0[_2182].y * 0.3183098733425140380859375) * _2200) * _2201) + _2065;
        _2178 = (((cbLight._m0[_2182].z * 0.3183098733425140380859375) * _2200) * _2201) + _2066;
    }
    bool _2181 = _2070.y == 0u;
    float _2236;
    float _2238;
    float _2240;
    if (_2181)
    {
        _2236 = _2174;
        _2238 = _2176;
        _2240 = _2178;
    }
    else
    {
        uint _2409 = _1995 + 7u;
        float _2425 = (dot(vec3(cbLight._m0[_1995 + 3u].xyz), vec3(_481, _482, _483)) * 0.5) + 0.5;
        float _2426 = _2425 * _2425;
        float _4367 = isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0));
        float _2427 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
        float _2428 = isnan(1.0) ? _2011 : (isnan(_2011) ? 1.0 : min(_2011, 1.0));
        _2236 = (((cbLight._m0[_2409].x * 0.3183098733425140380859375) * _2427) * _2428) + _2174;
        _2238 = (((cbLight._m0[_2409].y * 0.3183098733425140380859375) * _2427) * _2428) + _2176;
        _2240 = (((cbLight._m0[_2409].z * 0.3183098733425140380859375) * _2427) * _2428) + _2178;
    }
    uint _2243 = _1995 + 8u;
    float _2256 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1995].w)) * _484) * 0.949999988079071044921875);
    float _2257 = _2256 * _2256;
    float _2258 = cbLight._m0[_1995].x + _561;
    float _2259 = cbLight._m0[_1995].y + _562;
    float _2260 = cbLight._m0[_1995].z + _563;
    float _2264 = inversesqrt(dot(vec3(_2258, _2259, _2260), vec3(_2258, _2259, _2260)));
    float _2265 = _2264 * _2258;
    float _2266 = _2264 * _2259;
    float _2267 = _2264 * _2260;
    float _2268 = dot(vec3(_481, _482, _483), vec3(cbLight._m0[_1995].xyz));
    float _4383 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
    float _2271 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
    float _4394 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _2272 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
    float _2273 = dot(vec3(_481, _482, _483), vec3(_2265, _2266, _2267));
    float _4405 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
    float _2276 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
    float _2277 = dot(vec3(cbLight._m0[_1995].xyz), vec3(_2265, _2266, _2267));
    float _4416 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
    float _2281 = _2257 * _2257;
    float _2285 = ((_2276 * _2276) * (_2281 + (-1.0))) + 1.0;
    float _2293 = exp2(log2(1.0 - (isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0)))) * 5.0);
    float _2294 = 0.959999978542327880859375 - _643;
    float _2296 = 0.959999978542327880859375 - _644;
    float _2297 = 0.959999978542327880859375 - _645;
    float _2304 = 1.0 - _2257;
    float _2315 = (0.5 / (((_2272 * ((_2271 * _2304) + _2257)) + 9.9999999392252902907785028219223e-09) + (((_2272 * _2304) + _2257) * _2271))) * _2271;
    float _4427 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
    float _2317 = (isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0))) * (_2281 / ((_2285 * _2285) * 3.141590118408203125));
    uint _2331 = _1995 + 9u;
    float _2342 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2036].w)) * _484) * 0.949999988079071044921875);
    float _2343 = _2342 * _2342;
    float _2344 = cbLight._m0[_2036].x + _561;
    float _2345 = cbLight._m0[_2036].y + _562;
    float _2346 = cbLight._m0[_2036].z + _563;
    float _2350 = inversesqrt(dot(vec3(_2344, _2345, _2346), vec3(_2344, _2345, _2346)));
    float _2351 = _2350 * _2344;
    float _2352 = _2350 * _2345;
    float _2353 = _2350 * _2346;
    float _2354 = dot(vec3(_481, _482, _483), vec3(cbLight._m0[_2036].xyz));
    float _4438 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
    float _2357 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
    float _2358 = dot(vec3(_481, _482, _483), vec3(_2351, _2352, _2353));
    float _4449 = isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : max(_2358, 0.0));
    float _2361 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
    float _2362 = dot(vec3(cbLight._m0[_2036].xyz), vec3(_2351, _2352, _2353));
    float _4460 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
    float _2366 = _2343 * _2343;
    float _2370 = ((_2361 * _2361) * (_2366 + (-1.0))) + 1.0;
    float _2377 = exp2(log2(1.0 - (isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0)))) * 5.0);
    float _2384 = 1.0 - _2343;
    float _2394 = (0.5 / (((_2272 * ((_2357 * _2384) + _2343)) + 9.9999999392252902907785028219223e-09) + (((_2272 * _2384) + _2343) * _2357))) * _2357;
    float _4471 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
    float _2396 = (isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0))) * (_2366 / ((_2370 * _2370) * 3.141590118408203125));
    float _2406 = (((((_2377 * _2294) + _646) * cbLight._m0[_2331].x) * _2396) * _2018) + ((((cbLight._m0[_2243].x * _1984) * ((_2293 * _2294) + _646)) * _2317) * _2032);
    float _2407 = (((((_2377 * _2296) + _648) * cbLight._m0[_2331].y) * _2396) * _2018) + ((((cbLight._m0[_2243].y * _1986) * ((_2293 * _2296) + _648)) * _2317) * _2032);
    float _2408 = (((((_2377 * _2297) + _649) * cbLight._m0[_2331].z) * _2396) * _2018) + ((((cbLight._m0[_2243].z * _1988) * ((_2293 * _2297) + _649)) * _2317) * _2032);
    float _2464;
    float _2466;
    float _2468;
    if (_2072)
    {
        _2464 = _2406;
        _2466 = _2407;
        _2468 = _2408;
    }
    else
    {
        uint _2470 = _1995 + 2u;
        uint _2474 = _1995 + 10u;
        float _2488 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2470].w)) * _484) * 0.949999988079071044921875);
        float _2489 = _2488 * _2488;
        float _2490 = cbLight._m0[_2470].x + _561;
        float _2491 = cbLight._m0[_2470].y + _562;
        float _2492 = cbLight._m0[_2470].z + _563;
        float _2496 = inversesqrt(dot(vec3(_2490, _2491, _2492), vec3(_2490, _2491, _2492)));
        float _2497 = _2496 * _2490;
        float _2498 = _2496 * _2491;
        float _2499 = _2496 * _2492;
        float _2500 = dot(vec3(_481, _482, _483), vec3(cbLight._m0[_2470].xyz));
        float _4482 = isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : max(_2500, 0.0));
        float _2503 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
        float _2504 = dot(vec3(_481, _482, _483), vec3(_2497, _2498, _2499));
        float _4493 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
        float _2507 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
        float _2508 = dot(vec3(cbLight._m0[_2470].xyz), vec3(_2497, _2498, _2499));
        float _4504 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
        float _2512 = _2489 * _2489;
        float _2516 = ((_2507 * _2507) * (_2512 + (-1.0))) + 1.0;
        float _2523 = exp2(log2(1.0 - (isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0)))) * 5.0);
        float _2530 = 1.0 - _2489;
        float _2540 = (0.5 / (((_2272 * ((_2503 * _2530) + _2489)) + 9.9999999392252902907785028219223e-09) + (((_2272 * _2530) + _2489) * _2503))) * _2503;
        float _4515 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
        float _2542 = (isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0))) * (_2512 / ((_2516 * _2516) * 3.141590118408203125));
        float _2543 = isnan(1.0) ? _2010 : (isnan(_2010) ? 1.0 : min(_2010, 1.0));
        _2464 = (((((_2523 * _2294) + _646) * cbLight._m0[_2474].x) * _2542) * _2543) + _2406;
        _2466 = (((((_2523 * _2296) + _648) * cbLight._m0[_2474].y) * _2542) * _2543) + _2407;
        _2468 = (((((_2523 * _2297) + _649) * cbLight._m0[_2474].z) * _2542) * _2543) + _2408;
    }
    float _2574;
    float _2576;
    float _2578;
    if (_2181)
    {
        _2574 = _2464;
        _2576 = _2466;
        _2578 = _2468;
    }
    else
    {
        uint _2585 = _1995 + 3u;
        uint _2589 = _1995 + 11u;
        float _2603 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2585].w)) * _484) * 0.949999988079071044921875);
        float _2604 = _2603 * _2603;
        float _2605 = cbLight._m0[_2585].x + _561;
        float _2606 = cbLight._m0[_2585].y + _562;
        float _2607 = cbLight._m0[_2585].z + _563;
        float _2611 = inversesqrt(dot(vec3(_2605, _2606, _2607), vec3(_2605, _2606, _2607)));
        float _2612 = _2611 * _2605;
        float _2613 = _2611 * _2606;
        float _2614 = _2611 * _2607;
        float _2615 = dot(vec3(_481, _482, _483), vec3(cbLight._m0[_2585].xyz));
        float _4531 = isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : max(_2615, 0.0));
        float _2618 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
        float _2619 = dot(vec3(_481, _482, _483), vec3(_2612, _2613, _2614));
        float _4542 = isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : max(_2619, 0.0));
        float _2622 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
        float _2623 = dot(vec3(cbLight._m0[_2585].xyz), vec3(_2612, _2613, _2614));
        float _4553 = isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0));
        float _2627 = _2604 * _2604;
        float _2631 = ((_2622 * _2622) * (_2627 + (-1.0))) + 1.0;
        float _2638 = exp2(log2(1.0 - (isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0)))) * 5.0);
        float _2645 = 1.0 - _2604;
        float _2655 = (0.5 / (((_2272 * ((_2618 * _2645) + _2604)) + 9.9999999392252902907785028219223e-09) + (((_2272 * _2645) + _2604) * _2618))) * _2618;
        float _4564 = isnan(0.0) ? _2655 : (isnan(_2655) ? 0.0 : max(_2655, 0.0));
        float _2657 = (isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0))) * (_2627 / ((_2631 * _2631) * 3.141590118408203125));
        float _2658 = isnan(1.0) ? _2011 : (isnan(_2011) ? 1.0 : min(_2011, 1.0));
        _2574 = (((((_2638 * _2294) + _646) * cbLight._m0[_2589].x) * _2657) * _2658) + _2464;
        _2576 = (((((_2638 * _2296) + _648) * cbLight._m0[_2589].y) * _2657) * _2658) + _2466;
        _2578 = (((((_2638 * _2297) + _649) * cbLight._m0[_2589].z) * _2657) * _2658) + _2468;
    }
    float _2724;
    float _2726;
    float _2728;
    float _2730;
    float _2732;
    float _2734;
    if (_1993.y == 0u)
    {
        uvec4 _2679 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2680 = _2679.x;
        uint _2691 = uint((float(_2679.y) * floor(float(uint(cbSceneParam._m0[85u].y * _583) / _2680))) + floor(float(uint(cbSceneParam._m0[85u].x * _582) / _2680)));
        float _2701 = (log2(_1771 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2702 = isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : max(_2701, 0.0));
        uint _2705 = uint(isnan(14.0) ? _2702 : (isnan(_2702) ? 14.0 : min(_2702, 14.0)));
        uvec4 _2710 = texelFetch(g_lightClusterGridBuffer, int(((_2705 << 2u) + (_2691 << 6u)) >> 2u));
        uint _2711 = _2710.x;
        uint _2712 = _2679.z;
        float _2791;
        float _2793;
        float _2795;
        float _2797;
        float _2799;
        float _2801;
        if (((((1u << ((_2712 >> 4u) & 15u)) + 4294967295u) & _2711) == 0u) || ((_2712 & 240u) == 0u))
        {
            _2791 = 0.0;
            _2793 = 0.0;
            _2795 = 0.0;
            _2797 = 0.0;
            _2799 = 0.0;
            _2801 = 0.0;
        }
        else
        {
            float _2792;
            float _2794;
            float _2796;
            float _2798;
            float _2800;
            float _2802;
            float _2944 = 0.0;
            float _2945 = 0.0;
            float _2946 = 0.0;
            float _2947 = 0.0;
            float _2948 = 0.0;
            float _2949 = 0.0;
            uint _2950 = 0u;
            uint _2959;
            bool _2960;
            for (;;)
            {
                _2959 = texelFetch(g_lightClassification, int((((_2705 << 5u) + (_2691 << 9u)) + (_2950 << 2u)) >> 2u)).x;
                _2960 = _2959 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2960)
                {
                    frontier_phi_71_pred = _2949;
                    frontier_phi_71_pred_1 = _2948;
                    frontier_phi_71_pred_2 = _2947;
                    frontier_phi_71_pred_3 = _2946;
                    frontier_phi_71_pred_4 = _2945;
                    frontier_phi_71_pred_5 = _2944;
                }
                else
                {
                    float _3089;
                    float _3090;
                    float _3091;
                    float _3092;
                    float _3093;
                    float _3094;
                    uint _3095;
                    _3089 = _2944;
                    _3090 = _2945;
                    _3091 = _2946;
                    _3092 = _2947;
                    _3093 = _2948;
                    _3094 = _2949;
                    _3095 = _2959;
                    float _3016;
                    float _3017;
                    float _3018;
                    float _3019;
                    float _3020;
                    float _3021;
                    for (;;)
                    {
                        uint _3099 = uint(findLSB(_3095)) + (_2950 << 5u);
                        uint _3096 = (_3095 + 4294967295u) & _3095;
                        uint _3101 = _3099 * 48u;
                        vec4 _3115 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3101)).x, texelFetch(g_PointLightRenderingBuffer, int(_3101 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3101 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3101 + 3u)).x));
                        uint _3121 = (_3099 * 48u) + 4u;
                        vec4 _3134 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3121)).x, texelFetch(g_PointLightRenderingBuffer, int(_3121 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3121 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3121 + 3u)).x));
                        uint _3140 = (_3099 * 48u) + 8u;
                        vec3 _3151 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3140)).x, texelFetch(g_PointLightRenderingBuffer, int(_3140 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3140 + 2u)).x));
                        float _3155 = _3115.x - _1769;
                        float _3156 = _3115.y - _1770;
                        float _3157 = _3115.z - _1771;
                        float _3158 = dot(vec3(_3155, _3156, _3157), vec3(_3155, _3156, _3157));
                        float _3161 = inversesqrt(_3158);
                        float _3162 = _3161 * _3155;
                        float _3163 = _3161 * _3156;
                        float _3164 = _3161 * _3157;
                        float _3165 = dot(vec3(_603, _606, _609), vec3(_3162, _3163, _3164));
                        float _3170 = 1.0 - (_3158 * _3115.w);
                        float _4590 = isnan(0.0) ? _3170 : (isnan(_3170) ? 0.0 : max(_3170, 0.0));
                        float _3171 = isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0));
                        float _3172 = sqrt(_3158) * _3134.w;
                        float _3175 = 1.39999997615814208984375 / (_3172 + 1.39999997615814208984375);
                        float _3176 = _3175 * _3175;
                        float _3179 = ((1.0 - _3176) * _3165) + _3176;
                        float _3182 = _3172 * _3172;
                        float _3186 = ((isnan(0.0) ? _3179 : (isnan(_3179) ? 0.0 : max(_3179, 0.0))) * _3171) / ((_3182 * 0.699999988079071044921875) + 1.0);
                        float _3190 = (-0.0) - _1769;
                        float _3191 = (-0.0) - _1770;
                        float _3192 = (-0.0) - _1771;
                        float _3196 = inversesqrt(dot(vec3(_3190, _3191, _3192), vec3(_3190, _3191, _3192)));
                        float _3197 = _3196 * _3190;
                        float _3198 = _3196 * _3191;
                        float _3199 = _3196 * _3192;
                        float _3206 = exp2(log2(1.0 / ((_3182 * 3.5) + 5.0)) * 0.25);
                        float _3207 = 1.0 - _678;
                        float _3214 = sqrt(1.0 - ((1.0 - (_3207 * _3207)) * (1.0 - (_3206 * _3206))));
                        float _3215 = _3214 * _3214;
                        float _3216 = _3215 * _3215;
                        float _3217 = _3197 + _3162;
                        float _3218 = _3198 + _3163;
                        float _3219 = _3199 + _3164;
                        float _3223 = inversesqrt(dot(vec3(_3217, _3218, _3219), vec3(_3217, _3218, _3219)));
                        float _3227 = dot(vec3(_603, _606, _609), vec3(_3197, _3198, _3199));
                        float _4606 = isnan(0.0) ? _3227 : (isnan(_3227) ? 0.0 : max(_3227, 0.0));
                        float _3230 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
                        float _3231 = dot(vec3(_603, _606, _609), vec3(_3223 * _3217, _3223 * _3218, _3223 * _3219));
                        float _4617 = isnan(0.0) ? _3231 : (isnan(_3231) ? 0.0 : max(_3231, 0.0));
                        float _3234 = isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0));
                        float _3238 = ((_3234 * _3234) * (_3216 + (-1.0))) + 1.0;
                        float _3239 = _3175 * _3215;
                        float _3240 = _3239 * _3239;
                        float _3243 = ((1.0 - _3240) * _3165) + _3240;
                        float _4628 = isnan(0.0) ? _3243 : (isnan(_3243) ? 0.0 : max(_3243, 0.0));
                        float _3244 = isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0));
                        float _3245 = 1.0 - _3215;
                        float _3255 = (0.5 / (((_3244 * ((_3230 * _3245) + _3215)) + 9.9999999392252902907785028219223e-09) + (((_3244 * _3245) + _3215) * _3230))) * _3244;
                        float _4639 = isnan(0.0) ? _3255 : (isnan(_3255) ? 0.0 : max(_3255, 0.0));
                        float _3266 = (((_3216 * 3.1415927410125732421875) * (isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0)))) / ((_3238 * _3238) * ((_3182 * 2.1991131305694580078125) + 3.141590118408203125))) * _3171;
                        _3019 = (_3186 * _3134.x) + _3092;
                        _3020 = (_3186 * _3134.y) + _3093;
                        _3021 = (_3186 * _3134.z) + _3094;
                        _3016 = (_3266 * _3151.x) + _3089;
                        _3017 = (_3266 * _3151.y) + _3090;
                        _3018 = (_3266 * _3151.z) + _3091;
                        if (_3096 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3089 = _3016;
                            _3090 = _3017;
                            _3091 = _3018;
                            _3092 = _3019;
                            _3093 = _3020;
                            _3094 = _3021;
                            _3095 = _3096;
                        }
                    }
                    frontier_phi_71_pred = _3021;
                    frontier_phi_71_pred_1 = _3020;
                    frontier_phi_71_pred_2 = _3019;
                    frontier_phi_71_pred_3 = _3018;
                    frontier_phi_71_pred_4 = _3017;
                    frontier_phi_71_pred_5 = _3016;
                }
                _2802 = frontier_phi_71_pred;
                _2800 = frontier_phi_71_pred_1;
                _2798 = frontier_phi_71_pred_2;
                _2796 = frontier_phi_71_pred_3;
                _2794 = frontier_phi_71_pred_4;
                _2792 = frontier_phi_71_pred_5;
                uint _2951 = _2950 + 1u;
                if (_2951 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2944 = _2792;
                    _2945 = _2794;
                    _2946 = _2796;
                    _2947 = _2798;
                    _2948 = _2800;
                    _2949 = _2802;
                    _2950 = _2951;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2791 = _2792;
            _2793 = _2794;
            _2795 = _2796;
            _2797 = _2798;
            _2799 = _2800;
            _2801 = _2802;
        }
        uvec4 _2805 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2806 = _2805.z;
        uint _2808 = (_2806 >> 8u) & 15u;
        float _2912;
        float _2914;
        float _2916;
        float _2918;
        float _2920;
        float _2922;
        if (((4294967295u << _2808) & _2711) == 0u)
        {
            _2912 = _2791;
            _2914 = _2793;
            _2916 = _2795;
            _2918 = _2797;
            _2920 = _2799;
            _2922 = _2801;
        }
        else
        {
            float _2937 = inversesqrt(dot(vec3(_1769, _1770, _1771), vec3(_1769, _1770, _1771)));
            float _2938 = _2937 * _1769;
            float _2939 = _2937 * _1770;
            float _2940 = _2937 * _1771;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2808 < ((_2806 >> 12u) & 15u))
            {
                float _2913;
                float _2915;
                float _2917;
                float _2919;
                float _2921;
                float _2923;
                float _3072 = _2791;
                float _3073 = _2793;
                float _3074 = _2795;
                float _3075 = _2797;
                float _3076 = _2799;
                float _3077 = _2801;
                uint _3078 = _2808;
                uint _3087;
                bool _3088;
                for (;;)
                {
                    _3087 = texelFetch(g_lightClassification, int((((_2705 << 5u) + (_2691 << 9u)) + (_3078 << 2u)) >> 2u)).x;
                    _3088 = _3087 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3088)
                    {
                        frontier_phi_82_pred = _3077;
                        frontier_phi_82_pred_1 = _3076;
                        frontier_phi_82_pred_2 = _3075;
                        frontier_phi_82_pred_3 = _3074;
                        frontier_phi_82_pred_4 = _3073;
                        frontier_phi_82_pred_5 = _3072;
                    }
                    else
                    {
                        float _3280;
                        float _3281;
                        float _3282;
                        float _3283;
                        float _3284;
                        float _3285;
                        float _3575;
                        float _3576;
                        float _3577;
                        float _3578;
                        float _3579;
                        float _3580;
                        float _3293 = _3072;
                        float _3294 = _3073;
                        float _3295 = _3074;
                        float _3296 = _3075;
                        float _3297 = _3076;
                        float _3298 = _3077;
                        uint _3299 = _3087;
                        uint _3300;
                        vec4 _3325;
                        float _3326;
                        vec4 _3341;
                        vec3 _3353;
                        vec4 _3369;
                        vec4 _3385;
                        float _3431;
                        bool _3432;
                        for (;;)
                        {
                            uint _3310 = ((_3078 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3299));
                            _3300 = (_3299 + 4294967295u) & _3299;
                            uint _3312 = _3310 * 40u;
                            _3325 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3312)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3312 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3312 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3312 + 3u)).x));
                            _3326 = _3325.w;
                            uint _3328 = (_3310 * 40u) + 4u;
                            _3341 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3328)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 3u)).x));
                            uint _3343 = (_3310 * 40u) + 8u;
                            _3353 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3343)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 2u)).x));
                            uint _3356 = (_3310 * 40u) + 16u;
                            _3369 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3356)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 3u)).x));
                            uint _3372 = (_3310 * 40u) + 20u;
                            _3385 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3372)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3372 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3372 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3372 + 3u)).x));
                            uint _3387 = (_3310 * 40u) + 24u;
                            vec4 _3400 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3387)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 3u)).x));
                            uint _3406 = (_3310 * 40u) + 28u;
                            vec4 _3419 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3406)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 3u)).x));
                            _3431 = fma(_1771, _3419.z, fma(_1770, _3419.y, _3419.x * _1769)) + _3419.w;
                            _3432 = !((fma(_1771, _3400.z, fma(_1770, _3400.y, _3400.x * _1769)) + _3400.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3432)
                            {
                                float _3459 = _3325.x - _1769;
                                float _3460 = _3325.y - _1770;
                                float _3461 = _3325.z - _1771;
                                float _3462 = dot(vec3(_3459, _3460, _3461), vec3(_3459, _3460, _3461));
                                float _3465 = inversesqrt(_3462);
                                float _3466 = _3465 * _3459;
                                float _3467 = _3465 * _3460;
                                float _3468 = _3465 * _3461;
                                float _3472 = 1.0 - (_3462 / (_3326 * _3326));
                                float _4650 = isnan(0.0) ? _3472 : (isnan(_3472) ? 0.0 : max(_3472, 0.0));
                                float _3473 = isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0));
                                float _3477 = sqrt(_3462) * _3341.w;
                                float _3479 = 1.39999997615814208984375 / (_3477 + 1.39999997615814208984375);
                                float _3480 = _3479 * _3479;
                                float _3483 = ((1.0 - _3480) * dot(vec3(_3466, _3467, _3468), vec3(_603, _606, _609))) + _3480;
                                float _3486 = _3477 * _3477;
                                float _3490 = (fma(_1771, _3369.z, fma(_1770, _3369.y, _3369.x * _1769)) + _3369.w) / _3431;
                                float _3491 = (fma(_1771, _3385.z, fma(_1770, _3385.y, _3385.x * _1769)) + _3385.w) / _3431;
                                float _3495 = 1.0 - dot(vec2(_3490, _3491), vec2(_3490, _3491));
                                float _4666 = isnan(0.0) ? _3495 : (isnan(_3495) ? 0.0 : max(_3495, 0.0));
                                float _3496 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
                                float _3497 = _3496 * (((isnan(0.0) ? _3483 : (isnan(_3483) ? 0.0 : max(_3483, 0.0))) * _3473) / ((_3486 * 0.699999988079071044921875) + 1.0));
                                float _3509 = exp2(log2(1.0 / ((_3486 * 3.5) + 5.0)) * 0.25);
                                float _3510 = 1.0 - _678;
                                float _3517 = sqrt(1.0 - ((1.0 - (_3510 * _3510)) * (1.0 - (_3509 * _3509))));
                                float _3518 = _3517 * _3517;
                                float _3519 = _3518 * _3518;
                                float _3520 = _3466 - _2938;
                                float _3521 = _3467 - _2939;
                                float _3522 = _3468 - _2940;
                                float _3526 = inversesqrt(dot(vec3(_3520, _3521, _3522), vec3(_3520, _3521, _3522)));
                                float _3530 = dot(vec3(_603, _606, _609), vec3((-0.0) - _2938, (-0.0) - _2939, (-0.0) - _2940));
                                float _4677 = isnan(0.0) ? _3530 : (isnan(_3530) ? 0.0 : max(_3530, 0.0));
                                float _3533 = isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0));
                                float _3534 = dot(vec3(_603, _606, _609), vec3(_3526 * _3520, _3526 * _3521, _3526 * _3522));
                                float _4688 = isnan(0.0) ? _3534 : (isnan(_3534) ? 0.0 : max(_3534, 0.0));
                                float _3537 = isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0));
                                float _3541 = ((_3537 * _3537) * (_3519 + (-1.0))) + 1.0;
                                float _3542 = _3479 * _3518;
                                float _3543 = _3542 * _3542;
                                float _3549 = ((1.0 - _3543) * dot(vec3(_603, _606, _609), vec3(_3466, _3467, _3468))) + _3543;
                                float _4699 = isnan(0.0) ? _3549 : (isnan(_3549) ? 0.0 : max(_3549, 0.0));
                                float _3550 = isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0));
                                float _3551 = 1.0 - _3518;
                                float _3561 = (0.5 / (((_3550 * ((_3533 * _3551) + _3518)) + 9.9999999392252902907785028219223e-09) + (((_3550 * _3551) + _3518) * _3533))) * _3550;
                                float _4710 = isnan(0.0) ? _3561 : (isnan(_3561) ? 0.0 : max(_3561, 0.0));
                                float _3571 = (_3496 * _3473) * (((_3519 * 3.1415927410125732421875) * (isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0)))) / ((_3541 * _3541) * ((_3486 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3497 * _3341.z;
                                frontier_phi_88_pred_1 = _3497 * _3341.y;
                                frontier_phi_88_pred_2 = _3497 * _3341.x;
                                frontier_phi_88_pred_3 = _3571 * _3353.z;
                                frontier_phi_88_pred_4 = _3571 * _3353.y;
                                frontier_phi_88_pred_5 = _3571 * _3353.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3580 = frontier_phi_88_pred;
                            _3579 = frontier_phi_88_pred_1;
                            _3578 = frontier_phi_88_pred_2;
                            _3577 = frontier_phi_88_pred_3;
                            _3576 = frontier_phi_88_pred_4;
                            _3575 = frontier_phi_88_pred_5;
                            _3283 = _3578 + _3296;
                            _3284 = _3579 + _3297;
                            _3285 = _3580 + _3298;
                            _3280 = _3575 + _3293;
                            _3281 = _3576 + _3294;
                            _3282 = _3577 + _3295;
                            if (_3300 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3293 = _3280;
                                _3294 = _3281;
                                _3295 = _3282;
                                _3296 = _3283;
                                _3297 = _3284;
                                _3298 = _3285;
                                _3299 = _3300;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3285;
                        frontier_phi_82_pred_1 = _3284;
                        frontier_phi_82_pred_2 = _3283;
                        frontier_phi_82_pred_3 = _3282;
                        frontier_phi_82_pred_4 = _3281;
                        frontier_phi_82_pred_5 = _3280;
                    }
                    _2923 = frontier_phi_82_pred;
                    _2921 = frontier_phi_82_pred_1;
                    _2919 = frontier_phi_82_pred_2;
                    _2917 = frontier_phi_82_pred_3;
                    _2915 = frontier_phi_82_pred_4;
                    _2913 = frontier_phi_82_pred_5;
                    uint _3079 = _3078 + 1u;
                    if (_3079 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3072 = _2913;
                        _3073 = _2915;
                        _3074 = _2917;
                        _3075 = _2919;
                        _3076 = _2921;
                        _3077 = _2923;
                        _3078 = _3079;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2919;
                frontier_phi_63_64_ladder_1 = _2923;
                frontier_phi_63_64_ladder_2 = _2921;
                frontier_phi_63_64_ladder_3 = _2917;
                frontier_phi_63_64_ladder_4 = _2915;
                frontier_phi_63_64_ladder_5 = _2913;
            }
            else
            {
                frontier_phi_63_64_ladder = _2797;
                frontier_phi_63_64_ladder_1 = _2801;
                frontier_phi_63_64_ladder_2 = _2799;
                frontier_phi_63_64_ladder_3 = _2795;
                frontier_phi_63_64_ladder_4 = _2793;
                frontier_phi_63_64_ladder_5 = _2791;
            }
            _2912 = frontier_phi_63_64_ladder_5;
            _2914 = frontier_phi_63_64_ladder_4;
            _2916 = frontier_phi_63_64_ladder_3;
            _2918 = frontier_phi_63_64_ladder;
            _2920 = frontier_phi_63_64_ladder_2;
            _2922 = frontier_phi_63_64_ladder_1;
        }
        float _2927 = isnan(1.0) ? _662 : (isnan(_662) ? 1.0 : min(_662, 1.0));
        _2724 = (_2927 * _2918) + _2236;
        _2726 = (_2927 * _2920) + _2238;
        _2728 = (_2927 * _2922) + _2240;
        _2730 = ((_2912 * _646) * _2927) + _2574;
        _2732 = ((_2914 * _648) * _2927) + _2576;
        _2734 = ((_2916 * _649) * _2927) + _2578;
    }
    else
    {
        _2724 = _2236;
        _2726 = _2238;
        _2728 = _2240;
        _2730 = _2574;
        _2732 = _2576;
        _2734 = _2578;
    }
    float _4726 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _4737 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _4748 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _2751 = ((isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0))) * (_2724 + ((isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0))) * _662))) + ((_2730 + ((isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0))) * _1501)) * cbPerFrame._m0[3u].x);
    float _2752 = ((isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0))) * (_2726 + ((isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0))) * _662))) + ((_2732 + ((isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0))) * _1501)) * cbPerFrame._m0[3u].x);
    float _2753 = ((isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0))) * (_2728 + ((isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0))) * _662))) + ((_2734 + ((isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0))) * _1501)) * cbPerFrame._m0[3u].x);
    uint _2754 = _228 + 6u;
    float _2762 = _582 / cbSceneParam._m0[86u].x;
    float _2763 = _583 / cbSceneParam._m0[86u].y;
    vec4 _2777 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2762, _2763, (log2((isnan(cbSceneParam._m0[77u].w) ? _503 : (isnan(_503) ? cbSceneParam._m0[77u].w : min(_503, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2779 = _2777.x;
    float _2780 = _2777.y;
    float _2781 = _2777.z;
    float _2782 = _2777.w;
    float _2854;
    float _2856;
    float _2858;
    float _2860;
    if (_503 > cbSceneParam._m0[78u].w)
    {
        float _2816 = isnan(_503) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _503 : min(cbSceneParam._m0[80u].w, _503));
        float _2817 = _2816 / _503;
        float _2828 = _2817 * _554;
        float _2829 = _555 * _2817;
        float _2830 = (-0.0) - _2829;
        float _2832 = _2817 * _556;
        float _2834 = (cbSceneParam._m0[77u].w * _2830) / _2816;
        float _2835 = _2834 + cbSceneParam._m0[79u].w;
        float _2836 = cbSceneParam._m0[79u].w - _2829;
        float _2842 = sqrt(((_2828 * _2828) + (_2829 * _2829)) + (_2832 * _2832));
        float _2845 = (1.0 - (cbSceneParam._m0[77u].w / _2816)) * _2842;
        float _2850 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2852 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3029;
        if (abs((_2830 - _2834) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3029 = ((((_2835 > 0.0) ? exp2(_2850 * _2835) : (2.0 - exp2(_2852 * _2835))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2845;
        }
        else
        {
            float _2973 = 1.0 / cbSceneParam._m0[80u].x;
            float _2974 = isnan(_2836) ? _2835 : (isnan(_2835) ? _2836 : max(_2835, _2836));
            float _2975 = isnan(_2836) ? _2835 : (isnan(_2835) ? _2836 : min(_2835, _2836));
            float _2984 = isnan(0.0) ? _2974 : (isnan(_2974) ? 0.0 : min(_2974, 0.0));
            float _2985 = isnan(0.0) ? _2975 : (isnan(_2975) ? 0.0 : min(_2975, 0.0));
            _3029 = ((abs(_2842 / _2830) * cbSceneParam._m0[80u].y) * ((((_2984 - _2985) * 2.0) - ((exp2(_2850 * (isnan(0.0) ? _2974 : (isnan(_2974) ? 0.0 : max(_2974, 0.0)))) - exp2(_2850 * (isnan(0.0) ? _2975 : (isnan(_2975) ? 0.0 : max(_2975, 0.0))))) * _2973)) - ((exp2(_2852 * _2984) - exp2(_2852 * _2985)) * _2973))) + (_2845 * cbSceneParam._m0[80u].z);
        }
        vec4 _3031 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2762, _2763, 1.0), 0.0);
        float _3040 = exp2((_3029 * (-1.44269502162933349609375)) * (1.0 - _3031.w));
        float _3041 = log2(_3040);
        float _3057 = log2(_2782);
        _2854 = (exp2(_3057 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3041 * cbSceneParam._m0[78u].x)) * _3031.x) / cbSceneParam._m0[78u].x)) + _2779;
        _2856 = (exp2(_3057 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3041 * cbSceneParam._m0[78u].y)) * _3031.y) / cbSceneParam._m0[78u].y)) + _2780;
        _2858 = (exp2(_3057 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3041 * cbSceneParam._m0[78u].z)) * _3031.z) / cbSceneParam._m0[78u].z)) + _2781;
        _2860 = _3040 * _2782;
    }
    else
    {
        _2854 = _2779;
        _2856 = _2780;
        _2858 = _2781;
        _2860 = _2782;
    }
    bool _3067;
    vec4 _2870;
    vec4 _2892;
    float _2894;
    float _2898;
    float _2899;
    float _2900;
    float _2901;
    bool _2911;
    for (;;)
    {
        _2870 = cbMatDynParam._m0[0u];
        float _2872 = roundEven(_2870.y);
        bool _2873 = _2872 == 3.0;
        float _2874 = log2(_2860);
        float _2881 = exp2(_2874 * cbSceneParam._m0[78u].x) * _2751;
        float _2882 = exp2(_2874 * cbSceneParam._m0[78u].y) * _2752;
        float _2883 = exp2(_2874 * cbSceneParam._m0[78u].z) * _2753;
        float _2890 = _570 + (-0.5);
        _2892 = cbMtdParam._m0[1u];
        _2894 = _2892.y * _2890;
        float _2897 = (_2872 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2898 = _2897 * (_2873 ? _2881 : (_2881 + (cbSceneParam._m0[72u].w * _2854)));
        _2899 = _2897 * (_2873 ? _2882 : (_2882 + (cbSceneParam._m0[72u].w * _2856)));
        _2900 = _2897 * (_2873 ? _2883 : (_2883 + (cbSceneParam._m0[72u].w * _2858)));
        _2901 = _2890 * 0.999000012874603271484375;
        _2911 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2911)
        {
            if ((cbInstanceData._m0[_228 + 7u].x + _2901) < 0.5)
            {
                _3067 = true;
                break;
            }
        }
        uint _3008 = _622 + uint(_2870.w);
        if ((cbInstanceData._m0[_3008].w < 1.0) && ((cbInstanceData._m0[_3008].w + _2901) < 0.5))
        {
            _3067 = true;
            break;
        }
        if ((_2894 + 1.0) < _2892.x)
        {
            _3067 = true;
            break;
        }
        _3067 = false;
        break;
    }
    float _3271;
    if (_3067)
    {
        discard_state = true;
        _3271 = 0.0;
    }
    else
    {
        _3271 = cbInstanceData._m0[_2754].w;
    }
    SV_Target.x = _2898;
    SV_Target.y = _2899;
    SV_Target.z = _2900;
    SV_Target.w = _3271;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2754].w;
    discard_exit();
}


