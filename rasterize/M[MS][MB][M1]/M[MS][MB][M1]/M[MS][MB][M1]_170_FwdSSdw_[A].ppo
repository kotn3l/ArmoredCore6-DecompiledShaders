#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1279;
float _3684;
float _3685;
float _3686;
float _3687;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _220 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _221 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _222 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _228 = inversesqrt(dot(vec3(_220, _221, _222), vec3(_220, _221, _222)));
    float _235 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _242 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _248 = uint(roundEven(NORMAL.w)) * 13u;
    uint _254 = _248 + 1u;
    uint _258 = _248 + 2u;
    float _267 = sqrt(((cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x) + (cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x)) + (cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x));
    float _268 = _267 * TEXCOORD.z;
    float _269 = _267 * TEXCOORD.w;
    vec4 _289 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _295 = _289.x * cbMtdParam._m0[11u].x;
    float _296 = _289.y * cbMtdParam._m0[11u].y;
    float _297 = _289.z * cbMtdParam._m0[11u].z;
    vec4 _316 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _268) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _269) + cbTextureTilingScale._m0[5u].w));
    vec4 _355 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _357 = _355.x;
    float _369 = dot(vec4(_357, _355.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _386 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_357 - _369) * cbMtdParam._m0[24u].y) + _369) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3696 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _387 = isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0));
    float _394 = (_387 * ((_316.x * cbMtdParam._m0[12u].x) - _295)) + _295;
    float _395 = (_387 * ((_316.y * cbMtdParam._m0[12u].y) - _296)) + _296;
    float _396 = (_387 * ((_316.z * cbMtdParam._m0[12u].z) - _297)) + _297;
    vec4 _413 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _268) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _269) + cbTextureTilingScale._m0[3u].w));
    vec4 _433 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _435 = _433.x;
    float _445 = dot(vec4(_435, _433.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _459 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_435 - _445) * cbMtdParam._m0[24u].y) + _445) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3707 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _460 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
    float _467 = (_460 * ((_413.x * cbMtdParam._m0[13u].x) - _394)) + _394;
    float _468 = (_460 * ((_413.y * cbMtdParam._m0[13u].y) - _395)) + _395;
    float _469 = (_460 * ((_413.z * cbMtdParam._m0[13u].z) - _396)) + _396;
    vec4 _481 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _268) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _269) + cbTextureTilingScale._m0[20u].w));
    vec4 _504 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _268) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _269) + cbTextureTilingScale._m0[4u].w));
    vec4 _521 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _523 = _521.x;
    float _524 = _521.y;
    float _525 = _521.z;
    float _532 = ((_504.x - _523) * _387) + _523;
    float _533 = ((_504.y - _524) * _387) + _524;
    float _534 = ((_504.z - _525) * _387) + _525;
    vec4 _546 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _268) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _269) + cbTextureTilingScale._m0[2u].w));
    float _559 = ((_546.z - _534) * _460) + _534;
    float _562 = ((((_546.x - _532) * _460) + _532) * 2.0) + (-1.0);
    float _563 = ((((_546.y - _533) * _460) + _533) * 2.0) + (-1.0);
    float _564 = dot(vec2(_562, _563), vec2(_562, _563));
    float _3718 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _569 = sqrt(1.0 - (isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0))));
    vec4 _589 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _601 = (_562 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_481.x * 2.0) + (-1.0)))) + (((_589.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _602 = (_563 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_481.y * 2.0) + (-1.0)))) + (((_589.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _614 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _628 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _630 = _628.x;
    float _648 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _268) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _269) + cbTextureTilingScale._m0[9u].w)).x - _630) * _387) + _630;
    float _666 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _268) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _269) + cbTextureTilingScale._m0[21u].w)).x - _648) * _460) + _648;
    float _670 = ((_614.x - _666) * cbMtdParam._m0[19u].z) + _666;
    float _675 = (((_481.z - _559) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _559;
    float _679 = ((_589.z - _675) * cbMtdParam._m0[19u].w) + _675;
    float _684 = cbMtdParam._m0[22u].x + _589.w;
    float _687 = fma(_569, _235 * NORMAL.x, fma(_602, _242 * TANGENT.x, (_228 * _220) * _601));
    float _690 = fma(_569, _235 * NORMAL.y, fma(_602, _242 * TANGENT.y, (_228 * _221) * _601));
    float _693 = fma(_569, _235 * NORMAL.z, fma(_602, _242 * TANGENT.z, (_228 * _222) * _601));
    float _697 = inversesqrt(dot(vec3(_687, _690, _693), vec3(_687, _690, _693)));
    float _698 = _697 * _687;
    float _699 = _697 * _690;
    float _700 = _697 * _693;
    float _3729 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
    float _701 = isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0));
    float _3740 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _3751 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _3762 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _3773 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _3784 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _706 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
    float _720 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _761 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _771 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _761);
    float _772 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _761);
    float _773 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _761);
    float _777 = inversesqrt(dot(vec3(_771, _772, _773), vec3(_771, _772, _773)));
    float _778 = _771 * _777;
    float _779 = _772 * _777;
    float _780 = _773 * _777;
    vec4 _785 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _787 = _785.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _959 = sqrt(((_771 * _771) + (_772 * _772)) + (_773 * _773));
        float _965 = (cbMatDynParam._m0[5u].x * _959) + cbMatDynParam._m0[5u].y;
        float _3795 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
        float _966 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
        float _970 = (cbMatDynParam._m0[5u].z * _959) + cbMatDynParam._m0[5u].w;
        float _3806 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0))) - _966)) + _966) < ((_787 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _798 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _799 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _817 = fma(_700, cbSceneParam._m0[5u].z, fma(_699, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _698));
    float _820 = fma(_700, cbSceneParam._m0[6u].z, fma(_699, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _698));
    float _823 = fma(_700, cbSceneParam._m0[7u].z, fma(_699, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _698));
    uint _836 = _248 + 9u;
    uint _837 = _836 + uint(cbMatDynParam._m0[0u].w);
    float _843 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0)))) * cbInstanceData._m0[_837].x;
    float _844 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0)))) * cbInstanceData._m0[_837].y;
    float _845 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0)))) * cbInstanceData._m0[_837].z;
    float _3817 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
    float _846 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
    float _3828 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
    float _847 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
    float _3839 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
    float _848 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
    float _849 = 1.0 - _706;
    float _850 = _846 * _849;
    float _851 = _847 * _849;
    float _852 = _848 * _849;
    float _857 = (_846 + (-0.039999999105930328369140625)) * _706;
    float _858 = (_847 + (-0.039999999105930328369140625)) * _706;
    float _859 = (_848 + (-0.039999999105930328369140625)) * _706;
    float _860 = _857 + 0.039999999105930328369140625;
    float _862 = _858 + 0.039999999105930328369140625;
    float _863 = _859 + 0.039999999105930328369140625;
    vec4 _872 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _798, cbSceneParam._m0[86u].y * _799));
    float _876 = ((isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0))) * TEXCOORD_5.w) * _872.x;
    float _877 = dot(vec3(_698, _699, _700), vec3(_778, _779, _780));
    float _880 = _877 * 2.0;
    float _884 = (_880 * _698) - _778;
    float _885 = (_880 * _699) - _779;
    float _886 = (_880 * _700) - _780;
    float _890 = abs(dot(vec3(_778, _779, _780), vec3(_698, _699, _700)));
    float _3850 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
    float _892 = sqrt(_701);
    float _905 = exp2((_892 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_892 * 3.0));
    float _911 = (1.0 - _905) * ((_892 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _912 = _905 * _892;
    float _940 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _944 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _948 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1278;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1003 = fma(_948, cbModelParam._m0[26u].z, fma(_944, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _940));
        float _1007 = fma(_948, cbModelParam._m0[27u].z, fma(_944, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _940));
        float _1011 = fma(_948, cbModelParam._m0[28u].z, fma(_944, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _940));
        float _1036 = _940 + _698;
        float _1037 = _944 + _699;
        float _1038 = _948 + _700;
        float _1048 = fma(_1038, cbModelParam._m0[26u].z, fma(_1037, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1036)) - _1003;
        float _1049 = fma(_1038, cbModelParam._m0[27u].z, fma(_1037, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1036)) - _1007;
        float _1050 = fma(_1038, cbModelParam._m0[28u].z, fma(_1037, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1036)) - _1011;
        float _1054 = inversesqrt(dot(vec3(_1048, _1049, _1050), vec3(_1048, _1049, _1050)));
        float _1067 = ((_1054 * _1048) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1003 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1068 = ((_1054 * _1049) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1007 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1069 = ((_1054 * _1050) / cbModelParam._m0[34u].z) + ((((((_1011 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1072 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1067, _1068, _1069), 0.0);
        vec4 _1079 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1067, _1068, _1069), 0.0);
        vec4 _1086 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1067, _1068, _1069), 0.0);
        vec4 _1093 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1067, _1068, _1069), 0.0);
        float _1106 = exp2((_1072.w + (-0.5)) * 20.0) * 2.0;
        float _1107 = _1106 * (_1072.x + (-0.5));
        float _1108 = _1106 * (_1072.y + (-0.5));
        float _1109 = _1106 * (_1072.z + (-0.5));
        float _1116 = exp2((_1079.w + (-0.5)) * 20.0) * 2.0;
        float _1117 = _1116 * (_1079.x + (-0.5));
        float _1118 = _1116 * (_1079.y + (-0.5));
        float _1119 = _1116 * (_1079.z + (-0.5));
        float _1126 = exp2((_1086.w + (-0.5)) * 20.0) * 2.0;
        float _1127 = _1126 * (_1086.x + (-0.5));
        float _1128 = _1126 * (_1086.y + (-0.5));
        float _1129 = _1126 * (_1086.z + (-0.5));
        float _1136 = exp2((_1093.w + (-0.5)) * 20.0) * 2.0;
        float _1137 = _1136 * (_1093.x + (-0.5));
        float _1138 = _1136 * (_1093.y + (-0.5));
        float _1139 = _1136 * (_1093.z + (-0.5));
        float _1140 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1141 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1142 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1143 = _1107 * 0.5;
        float _1144 = _1117 * 0.5;
        float _1145 = _1127 * 0.5;
        float _1146 = dot(vec3(_1143, _1144, _1145), vec3(_1143, _1144, _1145));
        float _1151 = (_1146 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1146);
        float _1160 = (dot(vec3(_698, _699, _700), vec3(_1151 * _1143, _1151 * _1144, _1151 * _1145)) + 1.0) * 0.5;
        float _3876 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1170 = sqrt(((_1144 * _1144) + (_1143 * _1143)) + (_1145 * _1145)) / (_1140 + 9.9999997473787516355514526367188e-06);
        float _3887 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1171 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
        float _1172 = _1171 * 2.0;
        float _1176 = (1.0 - _1171) / (_1171 + 1.0);
        float _3898 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1177 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
        float _1186 = ((((1.0 - _1177) * (_1172 + 2.0)) * exp2(log2(isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0))) * (_1172 + 1.0))) + _1177) * _1140;
        float _1187 = _1108 * 0.5;
        float _1188 = _1118 * 0.5;
        float _1189 = _1128 * 0.5;
        float _1190 = dot(vec3(_1187, _1188, _1189), vec3(_1187, _1188, _1189));
        float _1195 = (_1190 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1190);
        float _1203 = (dot(vec3(_698, _699, _700), vec3(_1195 * _1187, _1195 * _1188, _1195 * _1189)) + 1.0) * 0.5;
        float _3909 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1212 = sqrt(((_1188 * _1188) + (_1187 * _1187)) + (_1189 * _1189)) / (_1141 + 9.9999997473787516355514526367188e-06);
        float _3920 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1213 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
        float _1214 = _1213 * 2.0;
        float _1218 = (1.0 - _1213) / (_1213 + 1.0);
        float _3931 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1219 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
        float _1228 = ((((1.0 - _1219) * (_1214 + 2.0)) * exp2(log2(isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0))) * (_1214 + 1.0))) + _1219) * _1141;
        float _1229 = _1109 * 0.5;
        float _1230 = _1119 * 0.5;
        float _1231 = _1129 * 0.5;
        float _1232 = dot(vec3(_1229, _1230, _1231), vec3(_1229, _1230, _1231));
        float _1237 = (_1232 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1232);
        float _1245 = (dot(vec3(_698, _699, _700), vec3(_1237 * _1229, _1237 * _1230, _1237 * _1231)) + 1.0) * 0.5;
        float _3942 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1254 = sqrt(((_1230 * _1230) + (_1229 * _1229)) + (_1231 * _1231)) / (_1142 + 9.9999997473787516355514526367188e-06);
        float _3953 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1255 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
        float _1256 = _1255 * 2.0;
        float _1260 = (1.0 - _1255) / (_1255 + 1.0);
        float _3964 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1261 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
        float _1270 = ((((1.0 - _1261) * (_1256 + 2.0)) * exp2(log2(isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0))) * (_1256 + 1.0))) + _1261) * _1142;
        _1278 = _1109;
        _1280 = _1108;
        _1281 = _1107;
        _1282 = _1119;
        _1283 = _1118;
        _1284 = _1117;
        _1285 = _1129;
        _1286 = _1128;
        _1287 = _1127;
        _1288 = _1142;
        _1289 = _1141;
        _1290 = _1140;
        _1291 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0)));
        _1292 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0)));
        _1293 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0)));
    }
    else
    {
        _1278 = _1279;
        _1280 = _1279;
        _1281 = _1279;
        _1282 = _1279;
        _1283 = _1279;
        _1284 = _1279;
        _1285 = _1279;
        _1286 = _1279;
        _1287 = _1279;
        _1288 = _1279;
        _1289 = _1279;
        _1290 = _1279;
        _1291 = 0.0;
        _1292 = 0.0;
        _1293 = 0.0;
    }
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    float _1602;
    float _1603;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1320 = fma(_948, cbModelParam._m0[30u].z, fma(_944, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _940));
        float _1324 = fma(_948, cbModelParam._m0[31u].z, fma(_944, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _940));
        float _1328 = fma(_948, cbModelParam._m0[32u].z, fma(_944, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _940));
        float _1351 = _940 + _698;
        float _1352 = _944 + _699;
        float _1353 = _948 + _700;
        float _1363 = fma(_1353, cbModelParam._m0[30u].z, fma(_1352, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1351)) - _1320;
        float _1364 = fma(_1353, cbModelParam._m0[31u].z, fma(_1352, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1351)) - _1324;
        float _1365 = fma(_1353, cbModelParam._m0[32u].z, fma(_1352, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1351)) - _1328;
        float _1369 = inversesqrt(dot(vec3(_1363, _1364, _1365), vec3(_1363, _1364, _1365)));
        float _1382 = ((_1369 * _1363) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1320 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1383 = ((_1369 * _1364) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1324 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1384 = ((_1369 * _1365) / cbModelParam._m0[35u].z) + ((((((_1328 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1386 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1382, _1383, _1384), 0.0);
        vec4 _1393 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1382, _1383, _1384), 0.0);
        vec4 _1400 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1382, _1383, _1384), 0.0);
        vec4 _1407 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1382, _1383, _1384), 0.0);
        float _1419 = exp2((_1386.w + (-0.5)) * 20.0) * 2.0;
        float _1420 = _1419 * (_1386.x + (-0.5));
        float _1421 = _1419 * (_1386.y + (-0.5));
        float _1422 = _1419 * (_1386.z + (-0.5));
        float _1429 = exp2((_1393.w + (-0.5)) * 20.0) * 2.0;
        float _1430 = _1429 * (_1393.x + (-0.5));
        float _1431 = _1429 * (_1393.y + (-0.5));
        float _1432 = _1429 * (_1393.z + (-0.5));
        float _1439 = exp2((_1400.w + (-0.5)) * 20.0) * 2.0;
        float _1440 = _1439 * (_1400.x + (-0.5));
        float _1441 = _1439 * (_1400.y + (-0.5));
        float _1442 = _1439 * (_1400.z + (-0.5));
        float _1449 = exp2((_1407.w + (-0.5)) * 20.0) * 2.0;
        float _1450 = _1449 * (_1407.x + (-0.5));
        float _1451 = _1449 * (_1407.y + (-0.5));
        float _1452 = _1449 * (_1407.z + (-0.5));
        float _1453 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1454 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1455 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1456 = _1420 * 0.5;
        float _1457 = _1430 * 0.5;
        float _1458 = _1440 * 0.5;
        float _1459 = dot(vec3(_1456, _1457, _1458), vec3(_1456, _1457, _1458));
        float _1464 = (_1459 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1459);
        float _1472 = (dot(vec3(_698, _699, _700), vec3(_1464 * _1456, _1464 * _1457, _1464 * _1458)) + 1.0) * 0.5;
        float _4005 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1481 = sqrt(((_1457 * _1457) + (_1456 * _1456)) + (_1458 * _1458)) / (_1453 + 9.9999997473787516355514526367188e-06);
        float _4016 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1482 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
        float _1483 = _1482 * 2.0;
        float _1487 = (1.0 - _1482) / (_1482 + 1.0);
        float _4027 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1488 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
        float _1497 = ((((1.0 - _1488) * (_1483 + 2.0)) * exp2(log2(isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0))) * (_1483 + 1.0))) + _1488) * _1453;
        float _1498 = _1421 * 0.5;
        float _1499 = _1431 * 0.5;
        float _1500 = _1441 * 0.5;
        float _1501 = dot(vec3(_1498, _1499, _1500), vec3(_1498, _1499, _1500));
        float _1506 = (_1501 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1501);
        float _1514 = (dot(vec3(_698, _699, _700), vec3(_1506 * _1498, _1506 * _1499, _1506 * _1500)) + 1.0) * 0.5;
        float _4038 = isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0));
        float _1523 = sqrt(((_1499 * _1499) + (_1498 * _1498)) + (_1500 * _1500)) / (_1454 + 9.9999997473787516355514526367188e-06);
        float _4049 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
        float _1524 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
        float _1525 = _1524 * 2.0;
        float _1529 = (1.0 - _1524) / (_1524 + 1.0);
        float _4060 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
        float _1530 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
        float _1539 = ((((1.0 - _1530) * (_1525 + 2.0)) * exp2(log2(isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0))) * (_1525 + 1.0))) + _1530) * _1454;
        float _1540 = _1422 * 0.5;
        float _1541 = _1432 * 0.5;
        float _1542 = _1442 * 0.5;
        float _1543 = dot(vec3(_1540, _1541, _1542), vec3(_1540, _1541, _1542));
        float _1548 = (_1543 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1543);
        float _1556 = (dot(vec3(_698, _699, _700), vec3(_1548 * _1540, _1548 * _1541, _1548 * _1542)) + 1.0) * 0.5;
        float _4071 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
        float _1565 = sqrt(((_1541 * _1541) + (_1540 * _1540)) + (_1542 * _1542)) / (_1455 + 9.9999997473787516355514526367188e-06);
        float _4082 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
        float _1566 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
        float _1567 = _1566 * 2.0;
        float _1571 = (1.0 - _1566) / (_1566 + 1.0);
        float _4093 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
        float _1572 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
        float _1581 = ((((1.0 - _1572) * (_1567 + 2.0)) * exp2(log2(isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0))) * (_1567 + 1.0))) + _1572) * _1455;
        _1589 = _1422;
        _1590 = _1421;
        _1591 = _1420;
        _1592 = _1432;
        _1593 = _1431;
        _1594 = _1430;
        _1595 = _1442;
        _1596 = _1441;
        _1597 = _1440;
        _1598 = _1455;
        _1599 = _1454;
        _1600 = _1453;
        _1601 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0)));
        _1602 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0)));
        _1603 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0)));
    }
    else
    {
        _1589 = _1279;
        _1590 = _1279;
        _1591 = _1279;
        _1592 = _1279;
        _1593 = _1279;
        _1594 = _1279;
        _1595 = _1279;
        _1596 = _1279;
        _1597 = _1279;
        _1598 = _1279;
        _1599 = _1279;
        _1600 = _1279;
        _1601 = 0.0;
        _1602 = 0.0;
        _1603 = 0.0;
    }
    float _1613 = (cbModelParam._m0[1u].x * (_1601 - _1291)) + _1291;
    float _1614 = (cbModelParam._m0[1u].x * (_1602 - _1292)) + _1292;
    float _1615 = (cbModelParam._m0[1u].x * (_1603 - _1293)) + _1293;
    float _1636 = fma(_1615, cbSceneParam._m0[89u].z, fma(_1614, cbSceneParam._m0[89u].y, _1613 * cbSceneParam._m0[89u].x));
    float _1639 = fma(_1615, cbSceneParam._m0[90u].z, fma(_1614, cbSceneParam._m0[90u].y, _1613 * cbSceneParam._m0[90u].x));
    float _1642 = fma(_1615, cbSceneParam._m0[91u].z, fma(_1614, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1613));
    float _1657 = _884 * 0.5;
    float _1658 = _885 * 0.5;
    float _1659 = _886 * 0.5;
    float _1660 = dot(vec4(_1657, _1658, _1659, 1.0), vec4(_1591, _1594, _1597, _1600));
    float _1663 = dot(vec4(_1657, _1658, _1659, 1.0), vec4(_1590, _1593, _1596, _1599));
    float _1666 = dot(vec4(_1657, _1658, _1659, 1.0), vec4(_1589, _1592, _1595, _1598));
    float _1700;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1673 = dot(vec4(_1657, _1658, _1659, 1.0), vec4(_1278, _1282, _1285, _1288));
        float _1677 = dot(vec4(_1657, _1658, _1659, 1.0), vec4(_1280, _1283, _1286, _1289));
        float _1681 = dot(vec4(_1657, _1658, _1659, 1.0), vec4(_1281, _1284, _1287, _1290));
        float _1688 = dot(vec4(cbModelParam._m0[39u]), vec4(_1657, _1658, _1659, 1.0));
        _1700 = dot(vec3(isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0)), isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0)), isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1688) ? 0.0 : (isnan(0.0) ? _1688 : max(0.0, _1688))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1700 = 1.0;
    }
    float _1711;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1702 = dot(vec4(cbModelParam._m0[40u]), vec4(_1657, _1658, _1659, 1.0));
        _1711 = dot(vec3(isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0)), isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0)), isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1702) ? 0.0 : (isnan(0.0) ? _1702 : max(0.0, _1702))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1711 = 1.0;
    }
    float _1715 = (_1711 * cbModelParam._m0[1u].x) + (_1700 * (1.0 - cbModelParam._m0[1u].x));
    float _1725 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _701);
    float _1726 = isnan(_1725) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1725 : min(cbModelParam._m0[25u].z, _1725));
    float _1808;
    float _1810;
    float _1812;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1775 = fma(_948, cbModelParam._m0[13u].z, fma(_944, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _940)) + cbModelParam._m0[13u].w;
        float _1779 = fma(_948, cbModelParam._m0[14u].z, fma(_944, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _940)) + cbModelParam._m0[14u].w;
        float _1783 = fma(_948, cbModelParam._m0[15u].z, fma(_944, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _940)) + cbModelParam._m0[15u].w;
        float _1786 = fma(_886, cbModelParam._m0[13u].z, fma(_885, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _884));
        float _1789 = fma(_886, cbModelParam._m0[14u].z, fma(_885, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _884));
        float _1792 = fma(_886, cbModelParam._m0[15u].z, fma(_885, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _884));
        float _1820;
        if (_1786 > 0.0)
        {
            _1820 = abs((1.0 - _1775) / _1786);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1786 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1775 + 1.0) / _1786);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1820 = frontier_phi_17_15_ladder;
        }
        float _2044;
        if (_1789 > 0.0)
        {
            _2044 = abs((1.0 - _1779) / _1789);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1789 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1779 + 1.0) / _1789);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2044 = frontier_phi_26_22_ladder;
        }
        float _2301;
        if (_1792 > 0.0)
        {
            _2301 = abs((1.0 - _1783) / _1792);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1792 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1783 + 1.0) / _1792);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2301 = frontier_phi_38_33_ladder;
        }
        float _2303 = isnan(_2044) ? _1820 : (isnan(_1820) ? _2044 : min(_1820, _2044));
        float _2304 = isnan(_2301) ? _2303 : (isnan(_2303) ? _2301 : min(_2303, _2301));
        float _2308 = (_2304 * _1786) + _1775;
        float _2309 = (_2304 * _1789) + _1779;
        float _2310 = (_2304 * _1792) + _1783;
        float _2311 = _2304 * 9.9999997473787516355514526367188e-05;
        float _2313 = (-1.0) - _2311;
        float _2315 = _2311 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2310 > _2315) || ((_2310 < _2313) || ((_2309 > _2315) || ((_2309 < _2313) || ((_2308 < _2313) || (_2308 > _2315))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2438 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2310, cbModelParam._m0[9u].z, fma(_2309, cbModelParam._m0[9u].y, _2308 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2310, cbModelParam._m0[10u].z, fma(_2309, cbModelParam._m0[10u].y, _2308 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2310, cbModelParam._m0[11u].z, fma(_2309, cbModelParam._m0[11u].y, _2308 * cbModelParam._m0[11u].x))), _1726);
            frontier_phi_16_38_ladder = _2438.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2438.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2438.x * cbModelParam._m0[1u].y;
        }
        _1808 = frontier_phi_16_38_ladder_2;
        _1810 = frontier_phi_16_38_ladder_1;
        _1812 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1796 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_884, _885, _886), _1726);
        _1808 = _1796.x * cbModelParam._m0[1u].y;
        _1810 = _1796.y * cbModelParam._m0[1u].y;
        _1812 = _1796.z * cbModelParam._m0[1u].y;
    }
    float _1816 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _701);
    float _1817 = isnan(_1816) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1816 : min(cbModelParam._m0[25u].w, _1816));
    float _1907;
    float _1909;
    float _1911;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1871 = fma(_948, cbModelParam._m0[21u].z, fma(_944, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _940)) + cbModelParam._m0[21u].w;
        float _1875 = fma(_948, cbModelParam._m0[22u].z, fma(_944, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _940)) + cbModelParam._m0[22u].w;
        float _1879 = fma(_948, cbModelParam._m0[23u].z, fma(_944, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _940)) + cbModelParam._m0[23u].w;
        float _1882 = fma(_886, cbModelParam._m0[21u].z, fma(_885, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _884));
        float _1885 = fma(_886, cbModelParam._m0[22u].z, fma(_885, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _884));
        float _1888 = fma(_886, cbModelParam._m0[23u].z, fma(_885, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _884));
        float _2049;
        if (_1882 > 0.0)
        {
            _2049 = abs((1.0 - _1871) / _1882);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1882 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1871 + 1.0) / _1882);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2049 = frontier_phi_28_24_ladder;
        }
        float _2328;
        if (_1885 > 0.0)
        {
            _2328 = abs((1.0 - _1875) / _1885);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1885 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1875 + 1.0) / _1885);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2328 = frontier_phi_40_35_ladder;
        }
        float _2541;
        if (_1888 > 0.0)
        {
            _2541 = abs((1.0 - _1879) / _1888);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1888 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1879 + 1.0) / _1888);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2541 = frontier_phi_49_46_ladder;
        }
        float _2543 = isnan(_2328) ? _2049 : (isnan(_2049) ? _2328 : min(_2049, _2328));
        float _2544 = isnan(_2541) ? _2543 : (isnan(_2543) ? _2541 : min(_2543, _2541));
        float _2548 = (_2544 * _1882) + _1871;
        float _2549 = (_2544 * _1885) + _1875;
        float _2550 = (_2544 * _1888) + _1879;
        float _2551 = _2544 * 9.9999997473787516355514526367188e-05;
        float _2552 = (-1.0) - _2551;
        float _2554 = _2551 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2550 > _2554) || ((_2550 < _2552) || ((_2549 > _2554) || ((_2549 < _2552) || ((_2548 < _2552) || (_2548 > _2554))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2749 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2550, cbModelParam._m0[17u].z, fma(_2549, cbModelParam._m0[17u].y, _2548 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2550, cbModelParam._m0[18u].z, fma(_2549, cbModelParam._m0[18u].y, _2548 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2550, cbModelParam._m0[19u].z, fma(_2549, cbModelParam._m0[19u].y, _2548 * cbModelParam._m0[19u].x))), _1817);
            frontier_phi_25_49_ladder = _2749.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2749.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2749.x * cbModelParam._m0[1u].z;
        }
        _1907 = frontier_phi_25_49_ladder_2;
        _1909 = frontier_phi_25_49_ladder_1;
        _1911 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1891 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_884, _885, _886), _1817);
        _1907 = _1891.x * cbModelParam._m0[1u].z;
        _1909 = _1891.y * cbModelParam._m0[1u].z;
        _1911 = _1891.z * cbModelParam._m0[1u].z;
    }
    float _1924 = (((_911 * _860) + _912) * _876) * ((cbModelParam._m0[1u].w * (_1907 - _1808)) + _1808);
    float _1926 = (((_911 * _862) + _912) * _876) * ((cbModelParam._m0[1u].w * (_1909 - _1810)) + _1810);
    float _1928 = (((_911 * _863) + _912) * _876) * ((cbModelParam._m0[1u].w * (_1911 - _1812)) + _1812);
    float _1931 = fma(_1928, cbSceneParam._m0[89u].z, fma(_1926, cbSceneParam._m0[89u].y, _1924 * cbSceneParam._m0[89u].x));
    float _1934 = fma(_1928, cbSceneParam._m0[90u].z, fma(_1926, cbSceneParam._m0[90u].y, _1924 * cbSceneParam._m0[90u].x));
    float _1937 = fma(_1928, cbSceneParam._m0[91u].z, fma(_1926, cbSceneParam._m0[91u].y, _1924 * cbSceneParam._m0[91u].x));
    vec4 _1945 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_798, _799));
    float _1947 = _1945.w;
    float _1959 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1947);
    float _1960 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1947);
    float _1961 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1947);
    uvec4 _1965 = floatBitsToUint(cbInstanceData._m0[_248 + 5u]);
    uint _1967 = _1965.x * 14u;
    uint _1968 = _1967 + 13u;
    float _1975 = _876 + (-1.0);
    float _1980 = (cbLight._m0[_1968].x * _1975) + 1.0;
    float _1981 = (cbLight._m0[_1968].y * _1975) + 1.0;
    float _1982 = (cbLight._m0[_1968].z * _1975) + 1.0;
    float _1983 = (cbLight._m0[_1968].w * _1975) + 1.0;
    uint _1984 = _1967 + 5u;
    float _1990 = isnan(1.0) ? _1981 : (isnan(_1981) ? 1.0 : min(_1981, 1.0));
    uint _1994 = _1967 + 4u;
    float _2003 = isnan(1.0) ? _1980 : (isnan(_1980) ? 1.0 : min(_1980, 1.0));
    uint _2007 = _1967 | 1u;
    float _2018 = dot(vec3(cbLight._m0[_1967].xyz), vec3(_698, _699, _700));
    float _2021 = dot(vec3(cbLight._m0[_2007].xyz), vec3(_698, _699, _700));
    float _4229 = isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0));
    float _4240 = isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0));
    float _2026 = (isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0))) * 0.3183098733425140380859375;
    float _2028 = (isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0))) * 0.3183098733425140380859375;
    float _2035 = ((cbLight._m0[_1984].x * _1990) * _2028) + (((cbLight._m0[_1994].x * _1959) * _2003) * _2026);
    float _2036 = ((_1990 * cbLight._m0[_1984].y) * _2028) + (((cbLight._m0[_1994].y * _1960) * _2003) * _2026);
    float _2037 = ((_1990 * cbLight._m0[_1984].z) * _2028) + (((cbLight._m0[_1994].z * _1961) * _2003) * _2026);
    uvec4 _2041 = floatBitsToUint(cbLight._m0[_1967 + 12u]);
    bool _2043 = _2041.x == 0u;
    float _2054;
    float _2056;
    float _2058;
    if (_2043)
    {
        _2054 = _2035;
        _2056 = _2036;
        _2058 = _2037;
    }
    else
    {
        uint _2062 = _1967 + 6u;
        float _2078 = (dot(vec3(cbLight._m0[_1967 + 2u].xyz), vec3(_698, _699, _700)) * 0.5) + 0.5;
        float _2079 = _2078 * _2078;
        float _4251 = isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0));
        float _2080 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
        float _2081 = isnan(1.0) ? _1982 : (isnan(_1982) ? 1.0 : min(_1982, 1.0));
        _2054 = (((cbLight._m0[_2062].x * 0.3183098733425140380859375) * _2080) * _2081) + _2035;
        _2056 = (((cbLight._m0[_2062].y * 0.3183098733425140380859375) * _2080) * _2081) + _2036;
        _2058 = (((cbLight._m0[_2062].z * 0.3183098733425140380859375) * _2080) * _2081) + _2037;
    }
    bool _2061 = _2041.y == 0u;
    float _2099;
    float _2101;
    float _2103;
    if (_2061)
    {
        _2099 = _2054;
        _2101 = _2056;
        _2103 = _2058;
    }
    else
    {
        uint _2272 = _1967 + 7u;
        float _2288 = (dot(vec3(cbLight._m0[_1967 + 3u].xyz), vec3(_698, _699, _700)) * 0.5) + 0.5;
        float _2289 = _2288 * _2288;
        float _4267 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
        float _2290 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
        float _2291 = isnan(1.0) ? _1983 : (isnan(_1983) ? 1.0 : min(_1983, 1.0));
        _2099 = (((cbLight._m0[_2272].x * 0.3183098733425140380859375) * _2290) * _2291) + _2054;
        _2101 = (((cbLight._m0[_2272].y * 0.3183098733425140380859375) * _2290) * _2291) + _2056;
        _2103 = (((cbLight._m0[_2272].z * 0.3183098733425140380859375) * _2290) * _2291) + _2058;
    }
    uint _2106 = _1967 + 8u;
    float _2119 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1967].w)) * _701) * 0.949999988079071044921875);
    float _2120 = _2119 * _2119;
    float _2121 = cbLight._m0[_1967].x + _778;
    float _2122 = cbLight._m0[_1967].y + _779;
    float _2123 = cbLight._m0[_1967].z + _780;
    float _2127 = inversesqrt(dot(vec3(_2121, _2122, _2123), vec3(_2121, _2122, _2123)));
    float _2128 = _2127 * _2121;
    float _2129 = _2127 * _2122;
    float _2130 = _2127 * _2123;
    float _2131 = dot(vec3(_698, _699, _700), vec3(cbLight._m0[_1967].xyz));
    float _4283 = isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0));
    float _2134 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
    float _4294 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
    float _2135 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
    float _2136 = dot(vec3(_698, _699, _700), vec3(_2128, _2129, _2130));
    float _4305 = isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0));
    float _2139 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
    float _2140 = dot(vec3(cbLight._m0[_1967].xyz), vec3(_2128, _2129, _2130));
    float _4316 = isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0));
    float _2144 = _2120 * _2120;
    float _2148 = ((_2139 * _2139) * (_2144 + (-1.0))) + 1.0;
    float _2156 = exp2(log2(1.0 - (isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0)))) * 5.0);
    float _2157 = 0.959999978542327880859375 - _857;
    float _2159 = 0.959999978542327880859375 - _858;
    float _2160 = 0.959999978542327880859375 - _859;
    float _2167 = 1.0 - _2120;
    float _2178 = (0.5 / (((_2135 * ((_2134 * _2167) + _2120)) + 9.9999999392252902907785028219223e-09) + (((_2135 * _2167) + _2120) * _2134))) * _2134;
    float _4327 = isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : max(_2178, 0.0));
    float _2180 = (isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0))) * (_2144 / ((_2148 * _2148) * 3.141590118408203125));
    uint _2194 = _1967 + 9u;
    float _2205 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2007].w)) * _701) * 0.949999988079071044921875);
    float _2206 = _2205 * _2205;
    float _2207 = cbLight._m0[_2007].x + _778;
    float _2208 = cbLight._m0[_2007].y + _779;
    float _2209 = cbLight._m0[_2007].z + _780;
    float _2213 = inversesqrt(dot(vec3(_2207, _2208, _2209), vec3(_2207, _2208, _2209)));
    float _2214 = _2213 * _2207;
    float _2215 = _2213 * _2208;
    float _2216 = _2213 * _2209;
    float _2217 = dot(vec3(_698, _699, _700), vec3(cbLight._m0[_2007].xyz));
    float _4338 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
    float _2220 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
    float _2221 = dot(vec3(_698, _699, _700), vec3(_2214, _2215, _2216));
    float _4349 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
    float _2224 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
    float _2225 = dot(vec3(cbLight._m0[_2007].xyz), vec3(_2214, _2215, _2216));
    float _4360 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
    float _2229 = _2206 * _2206;
    float _2233 = ((_2224 * _2224) * (_2229 + (-1.0))) + 1.0;
    float _2240 = exp2(log2(1.0 - (isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0)))) * 5.0);
    float _2247 = 1.0 - _2206;
    float _2257 = (0.5 / (((_2135 * ((_2220 * _2247) + _2206)) + 9.9999999392252902907785028219223e-09) + (((_2135 * _2247) + _2206) * _2220))) * _2220;
    float _4371 = isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0));
    float _2259 = (isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0))) * (_2229 / ((_2233 * _2233) * 3.141590118408203125));
    float _2269 = (((((_2240 * _2157) + _860) * cbLight._m0[_2194].x) * _2259) * _1990) + ((((cbLight._m0[_2106].x * _1959) * ((_2156 * _2157) + _860)) * _2180) * _2003);
    float _2270 = (((((_2240 * _2159) + _862) * cbLight._m0[_2194].y) * _2259) * _1990) + ((((cbLight._m0[_2106].y * _1960) * ((_2156 * _2159) + _862)) * _2180) * _2003);
    float _2271 = (((((_2240 * _2160) + _863) * cbLight._m0[_2194].z) * _2259) * _1990) + ((((cbLight._m0[_2106].z * _1961) * ((_2156 * _2160) + _863)) * _2180) * _2003);
    float _2333;
    float _2335;
    float _2337;
    if (_2043)
    {
        _2333 = _2269;
        _2335 = _2270;
        _2337 = _2271;
    }
    else
    {
        uint _2339 = _1967 + 2u;
        uint _2343 = _1967 + 10u;
        float _2357 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2339].w)) * _701) * 0.949999988079071044921875);
        float _2358 = _2357 * _2357;
        float _2359 = cbLight._m0[_2339].x + _778;
        float _2360 = cbLight._m0[_2339].y + _779;
        float _2361 = cbLight._m0[_2339].z + _780;
        float _2365 = inversesqrt(dot(vec3(_2359, _2360, _2361), vec3(_2359, _2360, _2361)));
        float _2366 = _2365 * _2359;
        float _2367 = _2365 * _2360;
        float _2368 = _2365 * _2361;
        float _2369 = dot(vec3(_698, _699, _700), vec3(cbLight._m0[_2339].xyz));
        float _4382 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
        float _2372 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
        float _2373 = dot(vec3(_698, _699, _700), vec3(_2366, _2367, _2368));
        float _4393 = isnan(0.0) ? _2373 : (isnan(_2373) ? 0.0 : max(_2373, 0.0));
        float _2376 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
        float _2377 = dot(vec3(cbLight._m0[_2339].xyz), vec3(_2366, _2367, _2368));
        float _4404 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
        float _2381 = _2358 * _2358;
        float _2385 = ((_2376 * _2376) * (_2381 + (-1.0))) + 1.0;
        float _2392 = exp2(log2(1.0 - (isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0)))) * 5.0);
        float _2399 = 1.0 - _2358;
        float _2409 = (0.5 / (((_2135 * ((_2372 * _2399) + _2358)) + 9.9999999392252902907785028219223e-09) + (((_2135 * _2399) + _2358) * _2372))) * _2372;
        float _4415 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
        float _2411 = (isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0))) * (_2381 / ((_2385 * _2385) * 3.141590118408203125));
        float _2412 = isnan(1.0) ? _1982 : (isnan(_1982) ? 1.0 : min(_1982, 1.0));
        _2333 = (((((_2392 * _2157) + _860) * cbLight._m0[_2343].x) * _2411) * _2412) + _2269;
        _2335 = (((((_2392 * _2159) + _862) * cbLight._m0[_2343].y) * _2411) * _2412) + _2270;
        _2337 = (((((_2392 * _2160) + _863) * cbLight._m0[_2343].z) * _2411) * _2412) + _2271;
    }
    float _2447;
    float _2449;
    float _2451;
    if (_2061)
    {
        _2447 = _2333;
        _2449 = _2335;
        _2451 = _2337;
    }
    else
    {
        uint _2458 = _1967 + 3u;
        uint _2462 = _1967 + 11u;
        float _2476 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2458].w)) * _701) * 0.949999988079071044921875);
        float _2477 = _2476 * _2476;
        float _2478 = cbLight._m0[_2458].x + _778;
        float _2479 = cbLight._m0[_2458].y + _779;
        float _2480 = cbLight._m0[_2458].z + _780;
        float _2484 = inversesqrt(dot(vec3(_2478, _2479, _2480), vec3(_2478, _2479, _2480)));
        float _2485 = _2484 * _2478;
        float _2486 = _2484 * _2479;
        float _2487 = _2484 * _2480;
        float _2488 = dot(vec3(_698, _699, _700), vec3(cbLight._m0[_2458].xyz));
        float _4431 = isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : max(_2488, 0.0));
        float _2491 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
        float _2492 = dot(vec3(_698, _699, _700), vec3(_2485, _2486, _2487));
        float _4442 = isnan(0.0) ? _2492 : (isnan(_2492) ? 0.0 : max(_2492, 0.0));
        float _2495 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
        float _2496 = dot(vec3(cbLight._m0[_2458].xyz), vec3(_2485, _2486, _2487));
        float _4453 = isnan(0.0) ? _2496 : (isnan(_2496) ? 0.0 : max(_2496, 0.0));
        float _2500 = _2477 * _2477;
        float _2504 = ((_2495 * _2495) * (_2500 + (-1.0))) + 1.0;
        float _2511 = exp2(log2(1.0 - (isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0)))) * 5.0);
        float _2518 = 1.0 - _2477;
        float _2528 = (0.5 / (((_2135 * ((_2491 * _2518) + _2477)) + 9.9999999392252902907785028219223e-09) + (((_2135 * _2518) + _2477) * _2491))) * _2491;
        float _4464 = isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : max(_2528, 0.0));
        float _2530 = (isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0))) * (_2500 / ((_2504 * _2504) * 3.141590118408203125));
        float _2531 = isnan(1.0) ? _1983 : (isnan(_1983) ? 1.0 : min(_1983, 1.0));
        _2447 = (((((_2511 * _2157) + _860) * cbLight._m0[_2462].x) * _2530) * _2531) + _2333;
        _2449 = (((((_2511 * _2159) + _862) * cbLight._m0[_2462].y) * _2530) * _2531) + _2335;
        _2451 = (((((_2511 * _2160) + _863) * cbLight._m0[_2462].z) * _2530) * _2531) + _2337;
    }
    float _2666;
    float _2668;
    float _2670;
    float _2672;
    float _2674;
    float _2676;
    if (_1965.y == 0u)
    {
        float _2606 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2607 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2606;
        float _2608 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2606;
        float _2609 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2606;
        uvec4 _2621 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2622 = _2621.x;
        uint _2633 = uint((float(_2621.y) * floor(float(uint(cbSceneParam._m0[85u].y * _799) / _2622))) + floor(float(uint(cbSceneParam._m0[85u].x * _798) / _2622)));
        float _2643 = (log2(_2609 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2644 = isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : max(_2643, 0.0));
        uint _2647 = uint(isnan(14.0) ? _2644 : (isnan(_2644) ? 14.0 : min(_2644, 14.0)));
        uvec4 _2652 = texelFetch(g_lightClusterGridBuffer, int(((_2647 << 2u) + (_2633 << 6u)) >> 2u));
        uint _2653 = _2652.x;
        uint _2654 = _2621.z;
        float _2754;
        float _2756;
        float _2758;
        float _2760;
        float _2762;
        float _2764;
        if (((((1u << ((_2654 >> 4u) & 15u)) + 4294967295u) & _2653) == 0u) || ((_2654 & 240u) == 0u))
        {
            _2754 = 0.0;
            _2756 = 0.0;
            _2758 = 0.0;
            _2760 = 0.0;
            _2762 = 0.0;
            _2764 = 0.0;
        }
        else
        {
            float _2755;
            float _2757;
            float _2759;
            float _2761;
            float _2763;
            float _2765;
            float _2907 = 0.0;
            float _2908 = 0.0;
            float _2909 = 0.0;
            float _2910 = 0.0;
            float _2911 = 0.0;
            float _2912 = 0.0;
            uint _2913 = 0u;
            uint _2922;
            bool _2923;
            for (;;)
            {
                _2922 = texelFetch(g_lightClassification, int((((_2647 << 5u) + (_2633 << 9u)) + (_2913 << 2u)) >> 2u)).x;
                _2923 = _2922 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2923)
                {
                    frontier_phi_66_pred = _2907;
                    frontier_phi_66_pred_1 = _2912;
                    frontier_phi_66_pred_2 = _2911;
                    frontier_phi_66_pred_3 = _2910;
                    frontier_phi_66_pred_4 = _2909;
                    frontier_phi_66_pred_5 = _2908;
                }
                else
                {
                    float _3052;
                    float _3053;
                    float _3054;
                    float _3055;
                    float _3056;
                    float _3057;
                    uint _3058;
                    _3052 = _2907;
                    _3053 = _2908;
                    _3054 = _2909;
                    _3055 = _2910;
                    _3056 = _2911;
                    _3057 = _2912;
                    _3058 = _2922;
                    float _2979;
                    float _2980;
                    float _2981;
                    float _2982;
                    float _2983;
                    float _2984;
                    for (;;)
                    {
                        uint _3062 = uint(findLSB(_3058)) + (_2913 << 5u);
                        uint _3059 = (_3058 + 4294967295u) & _3058;
                        uint _3064 = _3062 * 48u;
                        vec4 _3078 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3064)).x, texelFetch(g_PointLightRenderingBuffer, int(_3064 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3064 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3064 + 3u)).x));
                        uint _3084 = (_3062 * 48u) + 4u;
                        vec4 _3097 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3084)).x, texelFetch(g_PointLightRenderingBuffer, int(_3084 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3084 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3084 + 3u)).x));
                        uint _3103 = (_3062 * 48u) + 8u;
                        vec3 _3114 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3103)).x, texelFetch(g_PointLightRenderingBuffer, int(_3103 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3103 + 2u)).x));
                        float _3118 = _3078.x - _2607;
                        float _3119 = _3078.y - _2608;
                        float _3120 = _3078.z - _2609;
                        float _3121 = dot(vec3(_3118, _3119, _3120), vec3(_3118, _3119, _3120));
                        float _3124 = inversesqrt(_3121);
                        float _3125 = _3124 * _3118;
                        float _3126 = _3124 * _3119;
                        float _3127 = _3124 * _3120;
                        float _3128 = dot(vec3(_817, _820, _823), vec3(_3125, _3126, _3127));
                        float _3133 = 1.0 - (_3121 * _3078.w);
                        float _4490 = isnan(0.0) ? _3133 : (isnan(_3133) ? 0.0 : max(_3133, 0.0));
                        float _3134 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
                        float _3135 = sqrt(_3121) * _3097.w;
                        float _3138 = 1.39999997615814208984375 / (_3135 + 1.39999997615814208984375);
                        float _3139 = _3138 * _3138;
                        float _3142 = ((1.0 - _3139) * _3128) + _3139;
                        float _3145 = _3135 * _3135;
                        float _3149 = ((isnan(0.0) ? _3142 : (isnan(_3142) ? 0.0 : max(_3142, 0.0))) * _3134) / ((_3145 * 0.699999988079071044921875) + 1.0);
                        float _3153 = (-0.0) - _2607;
                        float _3154 = (-0.0) - _2608;
                        float _3155 = (-0.0) - _2609;
                        float _3159 = inversesqrt(dot(vec3(_3153, _3154, _3155), vec3(_3153, _3154, _3155)));
                        float _3160 = _3159 * _3153;
                        float _3161 = _3159 * _3154;
                        float _3162 = _3159 * _3155;
                        float _3170 = exp2(log2(1.0 / ((_3145 * 3.5) + 5.0)) * 0.25);
                        float _3171 = 1.0 - _892;
                        float _3178 = sqrt(1.0 - ((1.0 - (_3171 * _3171)) * (1.0 - (_3170 * _3170))));
                        float _3179 = _3178 * _3178;
                        float _3180 = _3179 * _3179;
                        float _3181 = _3160 + _3125;
                        float _3182 = _3161 + _3126;
                        float _3183 = _3162 + _3127;
                        float _3187 = inversesqrt(dot(vec3(_3181, _3182, _3183), vec3(_3181, _3182, _3183)));
                        float _3191 = dot(vec3(_817, _820, _823), vec3(_3160, _3161, _3162));
                        float _4506 = isnan(0.0) ? _3191 : (isnan(_3191) ? 0.0 : max(_3191, 0.0));
                        float _3194 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
                        float _3195 = dot(vec3(_817, _820, _823), vec3(_3187 * _3181, _3187 * _3182, _3187 * _3183));
                        float _4517 = isnan(0.0) ? _3195 : (isnan(_3195) ? 0.0 : max(_3195, 0.0));
                        float _3198 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
                        float _3202 = ((_3198 * _3198) * (_3180 + (-1.0))) + 1.0;
                        float _3203 = _3138 * _3179;
                        float _3204 = _3203 * _3203;
                        float _3207 = ((1.0 - _3204) * _3128) + _3204;
                        float _4528 = isnan(0.0) ? _3207 : (isnan(_3207) ? 0.0 : max(_3207, 0.0));
                        float _3208 = isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0));
                        float _3209 = 1.0 - _3179;
                        float _3219 = (0.5 / (((_3208 * ((_3194 * _3209) + _3179)) + 9.9999999392252902907785028219223e-09) + (((_3208 * _3209) + _3179) * _3194))) * _3208;
                        float _4539 = isnan(0.0) ? _3219 : (isnan(_3219) ? 0.0 : max(_3219, 0.0));
                        float _3230 = (((_3180 * 3.1415927410125732421875) * (isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0)))) / ((_3202 * _3202) * ((_3145 * 2.1991131305694580078125) + 3.141590118408203125))) * _3134;
                        _2982 = (_3149 * _3097.x) + _3055;
                        _2983 = (_3149 * _3097.y) + _3056;
                        _2984 = (_3149 * _3097.z) + _3057;
                        _2979 = (_3230 * _3114.x) + _3052;
                        _2980 = (_3230 * _3114.y) + _3053;
                        _2981 = (_3230 * _3114.z) + _3054;
                        if (_3059 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3052 = _2979;
                            _3053 = _2980;
                            _3054 = _2981;
                            _3055 = _2982;
                            _3056 = _2983;
                            _3057 = _2984;
                            _3058 = _3059;
                        }
                    }
                    frontier_phi_66_pred = _2979;
                    frontier_phi_66_pred_1 = _2984;
                    frontier_phi_66_pred_2 = _2983;
                    frontier_phi_66_pred_3 = _2982;
                    frontier_phi_66_pred_4 = _2981;
                    frontier_phi_66_pred_5 = _2980;
                }
                _2755 = frontier_phi_66_pred;
                _2765 = frontier_phi_66_pred_1;
                _2763 = frontier_phi_66_pred_2;
                _2761 = frontier_phi_66_pred_3;
                _2759 = frontier_phi_66_pred_4;
                _2757 = frontier_phi_66_pred_5;
                uint _2914 = _2913 + 1u;
                if (_2914 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2907 = _2755;
                    _2908 = _2757;
                    _2909 = _2759;
                    _2910 = _2761;
                    _2911 = _2763;
                    _2912 = _2765;
                    _2913 = _2914;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2754 = _2755;
            _2756 = _2757;
            _2758 = _2759;
            _2760 = _2761;
            _2762 = _2763;
            _2764 = _2765;
        }
        uvec4 _2768 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2769 = _2768.z;
        uint _2771 = (_2769 >> 8u) & 15u;
        float _2875;
        float _2877;
        float _2879;
        float _2881;
        float _2883;
        float _2885;
        if (((4294967295u << _2771) & _2653) == 0u)
        {
            _2875 = _2754;
            _2877 = _2756;
            _2879 = _2758;
            _2881 = _2760;
            _2883 = _2762;
            _2885 = _2764;
        }
        else
        {
            float _2900 = inversesqrt(dot(vec3(_2607, _2608, _2609), vec3(_2607, _2608, _2609)));
            float _2901 = _2900 * _2607;
            float _2902 = _2900 * _2608;
            float _2903 = _2900 * _2609;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2771 < ((_2769 >> 12u) & 15u))
            {
                float _2876;
                float _2878;
                float _2880;
                float _2882;
                float _2884;
                float _2886;
                float _3035 = _2754;
                float _3036 = _2756;
                float _3037 = _2758;
                float _3038 = _2760;
                float _3039 = _2762;
                float _3040 = _2764;
                uint _3041 = _2771;
                uint _3050;
                bool _3051;
                for (;;)
                {
                    _3050 = texelFetch(g_lightClassification, int((((_2647 << 5u) + (_2633 << 9u)) + (_3041 << 2u)) >> 2u)).x;
                    _3051 = _3050 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3051)
                    {
                        frontier_phi_77_pred = _3040;
                        frontier_phi_77_pred_1 = _3039;
                        frontier_phi_77_pred_2 = _3038;
                        frontier_phi_77_pred_3 = _3037;
                        frontier_phi_77_pred_4 = _3036;
                        frontier_phi_77_pred_5 = _3035;
                    }
                    else
                    {
                        float _3244;
                        float _3245;
                        float _3246;
                        float _3247;
                        float _3248;
                        float _3249;
                        float _3537;
                        float _3538;
                        float _3539;
                        float _3540;
                        float _3541;
                        float _3542;
                        float _3257 = _3035;
                        float _3258 = _3036;
                        float _3259 = _3037;
                        float _3260 = _3038;
                        float _3261 = _3039;
                        float _3262 = _3040;
                        uint _3263 = _3050;
                        uint _3264;
                        vec4 _3289;
                        float _3290;
                        vec4 _3305;
                        vec3 _3317;
                        vec4 _3332;
                        vec4 _3347;
                        float _3393;
                        bool _3394;
                        for (;;)
                        {
                            uint _3274 = ((_3041 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3263));
                            _3264 = (_3263 + 4294967295u) & _3263;
                            uint _3276 = _3274 * 40u;
                            _3289 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3276)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 3u)).x));
                            _3290 = _3289.w;
                            uint _3292 = (_3274 * 40u) + 4u;
                            _3305 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3292)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 3u)).x));
                            uint _3307 = (_3274 * 40u) + 8u;
                            _3317 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3307)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 2u)).x));
                            uint _3319 = (_3274 * 40u) + 16u;
                            _3332 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3319)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 3u)).x));
                            uint _3334 = (_3274 * 40u) + 20u;
                            _3347 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3334)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3334 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3334 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3334 + 3u)).x));
                            uint _3349 = (_3274 * 40u) + 24u;
                            vec4 _3362 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3349)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3349 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3349 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3349 + 3u)).x));
                            uint _3368 = (_3274 * 40u) + 28u;
                            vec4 _3381 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3368)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 3u)).x));
                            _3393 = fma(_2609, _3381.z, fma(_2608, _3381.y, _3381.x * _2607)) + _3381.w;
                            _3394 = !((fma(_2609, _3362.z, fma(_2608, _3362.y, _3362.x * _2607)) + _3362.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3394)
                            {
                                float _3421 = _3289.x - _2607;
                                float _3422 = _3289.y - _2608;
                                float _3423 = _3289.z - _2609;
                                float _3424 = dot(vec3(_3421, _3422, _3423), vec3(_3421, _3422, _3423));
                                float _3427 = inversesqrt(_3424);
                                float _3428 = _3427 * _3421;
                                float _3429 = _3427 * _3422;
                                float _3430 = _3427 * _3423;
                                float _3434 = 1.0 - (_3424 / (_3290 * _3290));
                                float _4550 = isnan(0.0) ? _3434 : (isnan(_3434) ? 0.0 : max(_3434, 0.0));
                                float _3435 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
                                float _3439 = sqrt(_3424) * _3305.w;
                                float _3441 = 1.39999997615814208984375 / (_3439 + 1.39999997615814208984375);
                                float _3442 = _3441 * _3441;
                                float _3445 = ((1.0 - _3442) * dot(vec3(_3428, _3429, _3430), vec3(_817, _820, _823))) + _3442;
                                float _3448 = _3439 * _3439;
                                float _3452 = (fma(_2609, _3332.z, fma(_2608, _3332.y, _3332.x * _2607)) + _3332.w) / _3393;
                                float _3453 = (fma(_2609, _3347.z, fma(_2608, _3347.y, _3347.x * _2607)) + _3347.w) / _3393;
                                float _3457 = 1.0 - dot(vec2(_3452, _3453), vec2(_3452, _3453));
                                float _4566 = isnan(0.0) ? _3457 : (isnan(_3457) ? 0.0 : max(_3457, 0.0));
                                float _3458 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
                                float _3459 = _3458 * (((isnan(0.0) ? _3445 : (isnan(_3445) ? 0.0 : max(_3445, 0.0))) * _3435) / ((_3448 * 0.699999988079071044921875) + 1.0));
                                float _3471 = exp2(log2(1.0 / ((_3448 * 3.5) + 5.0)) * 0.25);
                                float _3472 = 1.0 - _892;
                                float _3479 = sqrt(1.0 - ((1.0 - (_3472 * _3472)) * (1.0 - (_3471 * _3471))));
                                float _3480 = _3479 * _3479;
                                float _3481 = _3480 * _3480;
                                float _3482 = _3428 - _2901;
                                float _3483 = _3429 - _2902;
                                float _3484 = _3430 - _2903;
                                float _3488 = inversesqrt(dot(vec3(_3482, _3483, _3484), vec3(_3482, _3483, _3484)));
                                float _3492 = dot(vec3(_817, _820, _823), vec3((-0.0) - _2901, (-0.0) - _2902, (-0.0) - _2903));
                                float _4577 = isnan(0.0) ? _3492 : (isnan(_3492) ? 0.0 : max(_3492, 0.0));
                                float _3495 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
                                float _3496 = dot(vec3(_817, _820, _823), vec3(_3488 * _3482, _3488 * _3483, _3488 * _3484));
                                float _4588 = isnan(0.0) ? _3496 : (isnan(_3496) ? 0.0 : max(_3496, 0.0));
                                float _3499 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
                                float _3503 = ((_3499 * _3499) * (_3481 + (-1.0))) + 1.0;
                                float _3504 = _3441 * _3480;
                                float _3505 = _3504 * _3504;
                                float _3511 = ((1.0 - _3505) * dot(vec3(_817, _820, _823), vec3(_3428, _3429, _3430))) + _3505;
                                float _4599 = isnan(0.0) ? _3511 : (isnan(_3511) ? 0.0 : max(_3511, 0.0));
                                float _3512 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
                                float _3513 = 1.0 - _3480;
                                float _3523 = (0.5 / (((_3512 * ((_3495 * _3513) + _3480)) + 9.9999999392252902907785028219223e-09) + (((_3512 * _3513) + _3480) * _3495))) * _3512;
                                float _4610 = isnan(0.0) ? _3523 : (isnan(_3523) ? 0.0 : max(_3523, 0.0));
                                float _3533 = (_3458 * _3435) * (((_3481 * 3.1415927410125732421875) * (isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0)))) / ((_3503 * _3503) * ((_3448 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3459 * _3305.y;
                                frontier_phi_83_pred_1 = _3459 * _3305.x;
                                frontier_phi_83_pred_2 = _3533 * _3317.z;
                                frontier_phi_83_pred_3 = _3533 * _3317.y;
                                frontier_phi_83_pred_4 = _3533 * _3317.x;
                                frontier_phi_83_pred_5 = _3459 * _3305.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3541 = frontier_phi_83_pred;
                            _3540 = frontier_phi_83_pred_1;
                            _3539 = frontier_phi_83_pred_2;
                            _3538 = frontier_phi_83_pred_3;
                            _3537 = frontier_phi_83_pred_4;
                            _3542 = frontier_phi_83_pred_5;
                            _3247 = _3540 + _3260;
                            _3248 = _3541 + _3261;
                            _3249 = _3542 + _3262;
                            _3244 = _3537 + _3257;
                            _3245 = _3538 + _3258;
                            _3246 = _3539 + _3259;
                            if (_3264 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3257 = _3244;
                                _3258 = _3245;
                                _3259 = _3246;
                                _3260 = _3247;
                                _3261 = _3248;
                                _3262 = _3249;
                                _3263 = _3264;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3249;
                        frontier_phi_77_pred_1 = _3248;
                        frontier_phi_77_pred_2 = _3247;
                        frontier_phi_77_pred_3 = _3246;
                        frontier_phi_77_pred_4 = _3245;
                        frontier_phi_77_pred_5 = _3244;
                    }
                    _2886 = frontier_phi_77_pred;
                    _2884 = frontier_phi_77_pred_1;
                    _2882 = frontier_phi_77_pred_2;
                    _2880 = frontier_phi_77_pred_3;
                    _2878 = frontier_phi_77_pred_4;
                    _2876 = frontier_phi_77_pred_5;
                    uint _3042 = _3041 + 1u;
                    if (_3042 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3035 = _2876;
                        _3036 = _2878;
                        _3037 = _2880;
                        _3038 = _2882;
                        _3039 = _2884;
                        _3040 = _2886;
                        _3041 = _3042;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2880;
                frontier_phi_58_59_ladder_1 = _2886;
                frontier_phi_58_59_ladder_2 = _2884;
                frontier_phi_58_59_ladder_3 = _2882;
                frontier_phi_58_59_ladder_4 = _2878;
                frontier_phi_58_59_ladder_5 = _2876;
            }
            else
            {
                frontier_phi_58_59_ladder = _2758;
                frontier_phi_58_59_ladder_1 = _2764;
                frontier_phi_58_59_ladder_2 = _2762;
                frontier_phi_58_59_ladder_3 = _2760;
                frontier_phi_58_59_ladder_4 = _2756;
                frontier_phi_58_59_ladder_5 = _2754;
            }
            _2875 = frontier_phi_58_59_ladder_5;
            _2877 = frontier_phi_58_59_ladder_4;
            _2879 = frontier_phi_58_59_ladder;
            _2881 = frontier_phi_58_59_ladder_3;
            _2883 = frontier_phi_58_59_ladder_2;
            _2885 = frontier_phi_58_59_ladder_1;
        }
        float _2890 = isnan(1.0) ? _876 : (isnan(_876) ? 1.0 : min(_876, 1.0));
        _2666 = (_2890 * _2881) + _2099;
        _2668 = (_2890 * _2883) + _2101;
        _2670 = (_2890 * _2885) + _2103;
        _2672 = ((_2875 * _860) * _2890) + _2447;
        _2674 = ((_2877 * _862) * _2890) + _2449;
        _2676 = ((_2879 * _863) * _2890) + _2451;
    }
    else
    {
        _2666 = _2099;
        _2668 = _2101;
        _2670 = _2103;
        _2672 = _2447;
        _2674 = _2449;
        _2676 = _2451;
    }
    float _4626 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
    float _4637 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
    float _4648 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
    float _2693 = ((isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0))) * (_2666 + ((isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0))) * _876))) + ((_2672 + ((isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0))) * _1715)) * cbPerFrame._m0[3u].x);
    float _2694 = ((isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0))) * (_2668 + ((isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0))) * _876))) + ((_2674 + ((isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0))) * _1715)) * cbPerFrame._m0[3u].x);
    float _2695 = ((isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0))) * (_2670 + ((isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0))) * _876))) + ((_2676 + ((isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0))) * _1715)) * cbPerFrame._m0[3u].x);
    uint _2696 = _248 + 6u;
    float _2704 = _798 / cbSceneParam._m0[86u].x;
    float _2705 = _799 / cbSceneParam._m0[86u].y;
    vec4 _2719 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2704, _2705, (log2((isnan(cbSceneParam._m0[77u].w) ? _720 : (isnan(_720) ? cbSceneParam._m0[77u].w : min(_720, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2721 = _2719.x;
    float _2722 = _2719.y;
    float _2723 = _2719.z;
    float _2724 = _2719.w;
    float _2817;
    float _2819;
    float _2821;
    float _2823;
    if (_720 > cbSceneParam._m0[78u].w)
    {
        float _2779 = isnan(_720) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _720 : min(cbSceneParam._m0[80u].w, _720));
        float _2780 = _2779 / _720;
        float _2791 = _2780 * _771;
        float _2792 = _772 * _2780;
        float _2793 = (-0.0) - _2792;
        float _2795 = _2780 * _773;
        float _2797 = (cbSceneParam._m0[77u].w * _2793) / _2779;
        float _2798 = _2797 + cbSceneParam._m0[79u].w;
        float _2799 = cbSceneParam._m0[79u].w - _2792;
        float _2805 = sqrt(((_2791 * _2791) + (_2792 * _2792)) + (_2795 * _2795));
        float _2808 = (1.0 - (cbSceneParam._m0[77u].w / _2779)) * _2805;
        float _2813 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2815 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2992;
        if (abs((_2793 - _2797) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2992 = ((((_2798 > 0.0) ? exp2(_2813 * _2798) : (2.0 - exp2(_2815 * _2798))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2808;
        }
        else
        {
            float _2936 = 1.0 / cbSceneParam._m0[80u].x;
            float _2937 = isnan(_2799) ? _2798 : (isnan(_2798) ? _2799 : max(_2798, _2799));
            float _2938 = isnan(_2799) ? _2798 : (isnan(_2798) ? _2799 : min(_2798, _2799));
            float _2947 = isnan(0.0) ? _2937 : (isnan(_2937) ? 0.0 : min(_2937, 0.0));
            float _2948 = isnan(0.0) ? _2938 : (isnan(_2938) ? 0.0 : min(_2938, 0.0));
            _2992 = ((abs(_2805 / _2793) * cbSceneParam._m0[80u].y) * ((((_2947 - _2948) * 2.0) - ((exp2(_2813 * (isnan(0.0) ? _2937 : (isnan(_2937) ? 0.0 : max(_2937, 0.0)))) - exp2(_2813 * (isnan(0.0) ? _2938 : (isnan(_2938) ? 0.0 : max(_2938, 0.0))))) * _2936)) - ((exp2(_2815 * _2947) - exp2(_2815 * _2948)) * _2936))) + (_2808 * cbSceneParam._m0[80u].z);
        }
        vec4 _2994 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2704, _2705, 1.0), 0.0);
        float _3003 = exp2((_2992 * (-1.44269502162933349609375)) * (1.0 - _2994.w));
        float _3004 = log2(_3003);
        float _3020 = log2(_2724);
        _2817 = (exp2(_3020 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3004 * cbSceneParam._m0[78u].x)) * _2994.x) / cbSceneParam._m0[78u].x)) + _2721;
        _2819 = (exp2(_3020 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3004 * cbSceneParam._m0[78u].y)) * _2994.y) / cbSceneParam._m0[78u].y)) + _2722;
        _2821 = (exp2(_3020 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3004 * cbSceneParam._m0[78u].z)) * _2994.z) / cbSceneParam._m0[78u].z)) + _2723;
        _2823 = _3003 * _2724;
    }
    else
    {
        _2817 = _2721;
        _2819 = _2722;
        _2821 = _2723;
        _2823 = _2724;
    }
    bool _3030;
    vec4 _2833;
    vec4 _2855;
    float _2857;
    float _2861;
    float _2862;
    float _2863;
    float _2864;
    bool _2874;
    for (;;)
    {
        _2833 = cbMatDynParam._m0[0u];
        float _2835 = roundEven(_2833.y);
        bool _2836 = _2835 == 3.0;
        float _2837 = log2(_2823);
        float _2844 = exp2(_2837 * cbSceneParam._m0[78u].x) * _2693;
        float _2845 = exp2(_2837 * cbSceneParam._m0[78u].y) * _2694;
        float _2846 = exp2(_2837 * cbSceneParam._m0[78u].z) * _2695;
        float _2853 = _787 + (-0.5);
        _2855 = cbMtdParam._m0[1u];
        _2857 = _2855.y * _2853;
        float _2860 = (_2835 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2861 = _2860 * (_2836 ? _2844 : (_2844 + (cbSceneParam._m0[72u].w * _2817)));
        _2862 = _2860 * (_2836 ? _2845 : (_2845 + (cbSceneParam._m0[72u].w * _2819)));
        _2863 = _2860 * (_2836 ? _2846 : (_2846 + (cbSceneParam._m0[72u].w * _2821)));
        _2864 = _2853 * 0.999000012874603271484375;
        _2874 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2874)
        {
            if ((cbInstanceData._m0[_248 + 7u].x + _2864) < 0.5)
            {
                _3030 = true;
                break;
            }
        }
        uint _2971 = _836 + uint(_2833.w);
        if ((cbInstanceData._m0[_2971].w < 1.0) && ((cbInstanceData._m0[_2971].w + _2864) < 0.5))
        {
            _3030 = true;
            break;
        }
        if ((_2857 + 1.0) < _2855.x)
        {
            _3030 = true;
            break;
        }
        _3030 = false;
        break;
    }
    float _3235;
    if (_3030)
    {
        discard_state = true;
        _3235 = 0.0;
    }
    else
    {
        _3235 = cbInstanceData._m0[_2696].w;
    }
    SV_Target.x = _2861;
    SV_Target.y = _2862;
    SV_Target.z = _2863;
    SV_Target.w = _3235;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2696].w;
    discard_exit();
}


