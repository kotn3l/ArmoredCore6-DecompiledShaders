#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1120;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _207 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _208 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _209 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _215 = inversesqrt(dot(vec3(_207, _208, _209), vec3(_207, _208, _209)));
    float _216 = _215 * _207;
    float _217 = _215 * _208;
    float _218 = _215 * _209;
    float _222 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _223 = _222 * NORMAL.x;
    float _224 = _222 * NORMAL.y;
    float _225 = _222 * NORMAL.z;
    float _229 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _230 = _229 * TANGENT.x;
    float _231 = _229 * TANGENT.y;
    float _232 = _229 * TANGENT.z;
    float _243 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _245 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _246 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3729 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _3740 = isnan(0.0) ? _245 : (isnan(_245) ? 0.0 : max(_245, 0.0));
    float _3751 = isnan(0.0) ? _246 : (isnan(_246) ? 0.0 : max(_246, 0.0));
    uint _256 = uint(roundEven(NORMAL.w)) * 13u;
    uint _261 = _256 + 1u;
    uint _265 = _256 + 2u;
    float _274 = sqrt(((cbInstanceData._m0[_261].x * cbInstanceData._m0[_261].x) + (cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x)) + (cbInstanceData._m0[_265].x * cbInstanceData._m0[_265].x));
    float _275 = _274 * TEXCOORD.z;
    float _276 = _274 * TEXCOORD.w;
    vec4 _289 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _275) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _276) + cbTextureTilingScale._m0[13u].w));
    vec4 _312 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _317 = _312.x * cbMtdParam._m0[9u].x;
    float _318 = _312.y * cbMtdParam._m0[9u].y;
    float _319 = _312.z * cbMtdParam._m0[9u].z;
    float _323 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _289.x) * _317;
    float _326 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _289.y) * _318;
    float _329 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _289.z) * _319;
    float _336 = ((_317 - _323) * (isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0)))) + _323;
    float _337 = ((_318 - _326) * (isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0)))) + _326;
    float _338 = ((_319 - _329) * (isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0)))) + _329;
    vec4 _357 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _275) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _276) + cbTextureTilingScale._m0[14u].w));
    vec4 _377 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _275) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _276) + cbTextureTilingScale._m0[20u].w));
    vec4 _403 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _407 = _403.z;
    float _411 = (_403.x * 2.0) + (-1.0);
    float _412 = (_403.y * 2.0) + (-1.0);
    float _413 = dot(vec2(_411, _412), vec2(_411, _412));
    float _3762 = isnan(0.0) ? _413 : (isnan(_413) ? 0.0 : max(_413, 0.0));
    float _418 = sqrt(1.0 - (isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0))));
    float _423 = _411 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_377.x * 2.0) + (-1.0)));
    float _424 = _412 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_377.y * 2.0) + (-1.0)));
    float _427 = fma(_418, _223, fma(_424, _230, _423 * _216));
    float _430 = fma(_418, _224, fma(_424, _231, _423 * _217));
    float _433 = fma(_418, _225, fma(_424, _232, _423 * _218));
    float _437 = inversesqrt(dot(vec3(_427, _430, _433), vec3(_427, _430, _433)));
    vec4 _473 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _275) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _276) + cbTextureTilingScale._m0[11u].w));
    float _475 = _473.x;
    float _476 = 1.0 - _475;
    float _485 = (cbMtdParam._m0[19u].x + dot(vec4(_437 * _427, _437 * _430, _437 * _433, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_475 - _476) * cbMtdParam._m0[24u].z) + _476) * cbMtdParam._m0[21u].z);
    float _3773 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _486 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
    float _493 = (_486 * ((_357.x * cbMtdParam._m0[18u].x) - _336)) + _336;
    float _494 = (_486 * ((_357.y * cbMtdParam._m0[18u].y) - _337)) + _337;
    float _495 = (_486 * ((_357.z * cbMtdParam._m0[18u].z) - _338)) + _338;
    vec4 _508 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _510 = _508.x;
    float _512 = _510 - (_510 * _486);
    float _517 = (((_377.z - _407) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _407;
    vec4 _530 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _275) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _276) + cbTextureTilingScale._m0[15u].w));
    float _537 = (_530.x * 2.0) + (-1.0);
    float _538 = (_530.y * 2.0) + (-1.0);
    float _539 = dot(vec2(_537, _538), vec2(_537, _538));
    float _3784 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _547 = ((_530.z - _517) * _486) + _517;
    float _557 = ((sqrt(1.0 - (isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0)))) - _418) * _486) + _418;
    float _560 = (((_537 - _423) * _486) + _423) + (cbMtdParam._m0[21u].x * _423);
    float _561 = (((_538 - _424) * _486) + _424) + (cbMtdParam._m0[21u].x * _424);
    float _563 = cbMtdParam._m0[22u].x + _403.w;
    float _566 = fma(_557, _223, fma(_561, _230, _560 * _216));
    float _569 = fma(_557, _224, fma(_561, _231, _560 * _217));
    float _572 = fma(_557, _225, fma(_561, _232, _560 * _218));
    float _576 = inversesqrt(dot(vec3(_566, _569, _572), vec3(_566, _569, _572)));
    float _577 = _576 * _566;
    float _578 = _576 * _569;
    float _579 = _576 * _572;
    float _3795 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _580 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
    float _3806 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _3817 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _3828 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
    float _3839 = isnan(0.0) ? _495 : (isnan(_495) ? 0.0 : max(_495, 0.0));
    float _3850 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _585 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
    float _599 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _640 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _650 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _640);
    float _651 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _640);
    float _652 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _640);
    float _656 = inversesqrt(dot(vec3(_650, _651, _652), vec3(_650, _651, _652)));
    float _657 = _650 * _656;
    float _658 = _651 * _656;
    float _659 = _652 * _656;
    float _665 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _666 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _687 = fma(_579, cbSceneParam._m0[5u].z, fma(_578, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _577));
    float _690 = fma(_579, cbSceneParam._m0[6u].z, fma(_578, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _577));
    float _693 = fma(_579, cbSceneParam._m0[7u].z, fma(_578, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _577));
    uint _707 = (_256 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _713 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0)))) * cbInstanceData._m0[_707].x;
    float _714 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0)))) * cbInstanceData._m0[_707].y;
    float _715 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0)))) * cbInstanceData._m0[_707].z;
    float _3861 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _716 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
    float _3872 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
    float _717 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
    float _3883 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _718 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
    float _719 = 1.0 - _585;
    float _720 = _716 * _719;
    float _721 = _717 * _719;
    float _722 = _718 * _719;
    float _727 = (_716 + (-0.039999999105930328369140625)) * _585;
    float _728 = (_717 + (-0.039999999105930328369140625)) * _585;
    float _729 = (_718 + (-0.039999999105930328369140625)) * _585;
    float _730 = _727 + 0.039999999105930328369140625;
    float _732 = _728 + 0.039999999105930328369140625;
    float _733 = _729 + 0.039999999105930328369140625;
    vec4 _742 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _665, cbSceneParam._m0[86u].y * _666));
    float _746 = ((isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0))) * TEXCOORD_5.w) * _742.x;
    float _747 = dot(vec3(_577, _578, _579), vec3(_657, _658, _659));
    float _750 = _747 * 2.0;
    float _754 = (_750 * _577) - _657;
    float _755 = (_750 * _578) - _658;
    float _756 = (_750 * _579) - _659;
    float _760 = abs(dot(vec3(_657, _658, _659), vec3(_577, _578, _579)));
    float _3894 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    float _762 = sqrt(_580);
    float _775 = exp2((_762 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_762 * 3.0));
    float _781 = (1.0 - _775) * ((_762 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _782 = _775 * _762;
    float _810 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _814 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _818 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1119;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    float _1133;
    float _1134;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _844 = fma(_818, cbModelParam._m0[26u].z, fma(_814, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _810));
        float _848 = fma(_818, cbModelParam._m0[27u].z, fma(_814, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _810));
        float _852 = fma(_818, cbModelParam._m0[28u].z, fma(_814, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _810));
        float _877 = _810 + _577;
        float _878 = _814 + _578;
        float _879 = _818 + _579;
        float _889 = fma(_879, cbModelParam._m0[26u].z, fma(_878, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _877)) - _844;
        float _890 = fma(_879, cbModelParam._m0[27u].z, fma(_878, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _877)) - _848;
        float _891 = fma(_879, cbModelParam._m0[28u].z, fma(_878, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _877)) - _852;
        float _895 = inversesqrt(dot(vec3(_889, _890, _891), vec3(_889, _890, _891)));
        float _908 = ((_895 * _889) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_844 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _909 = ((_895 * _890) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_848 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _910 = ((_895 * _891) / cbModelParam._m0[34u].z) + ((((((_852 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _913 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_908, _909, _910), 0.0);
        vec4 _920 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_908, _909, _910), 0.0);
        vec4 _927 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_908, _909, _910), 0.0);
        vec4 _934 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_908, _909, _910), 0.0);
        float _947 = exp2((_913.w + (-0.5)) * 20.0) * 2.0;
        float _948 = _947 * (_913.x + (-0.5));
        float _949 = _947 * (_913.y + (-0.5));
        float _950 = _947 * (_913.z + (-0.5));
        float _957 = exp2((_920.w + (-0.5)) * 20.0) * 2.0;
        float _958 = _957 * (_920.x + (-0.5));
        float _959 = _957 * (_920.y + (-0.5));
        float _960 = _957 * (_920.z + (-0.5));
        float _967 = exp2((_927.w + (-0.5)) * 20.0) * 2.0;
        float _968 = _967 * (_927.x + (-0.5));
        float _969 = _967 * (_927.y + (-0.5));
        float _970 = _967 * (_927.z + (-0.5));
        float _977 = exp2((_934.w + (-0.5)) * 20.0) * 2.0;
        float _978 = _977 * (_934.x + (-0.5));
        float _979 = _977 * (_934.y + (-0.5));
        float _980 = _977 * (_934.z + (-0.5));
        float _981 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _982 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _983 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _984 = _948 * 0.5;
        float _985 = _958 * 0.5;
        float _986 = _968 * 0.5;
        float _987 = dot(vec3(_984, _985, _986), vec3(_984, _985, _986));
        float _992 = (_987 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_987);
        float _1001 = (dot(vec3(_577, _578, _579), vec3(_992 * _984, _992 * _985, _992 * _986)) + 1.0) * 0.5;
        float _3920 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        float _1011 = sqrt(((_985 * _985) + (_984 * _984)) + (_986 * _986)) / (_981 + 9.9999997473787516355514526367188e-06);
        float _3931 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1012 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
        float _1013 = _1012 * 2.0;
        float _1017 = (1.0 - _1012) / (_1012 + 1.0);
        float _3942 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1018 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
        float _1027 = ((((1.0 - _1018) * (_1013 + 2.0)) * exp2(log2(isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0))) * (_1013 + 1.0))) + _1018) * _981;
        float _1028 = _949 * 0.5;
        float _1029 = _959 * 0.5;
        float _1030 = _969 * 0.5;
        float _1031 = dot(vec3(_1028, _1029, _1030), vec3(_1028, _1029, _1030));
        float _1036 = (_1031 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1031);
        float _1044 = (dot(vec3(_577, _578, _579), vec3(_1036 * _1028, _1036 * _1029, _1036 * _1030)) + 1.0) * 0.5;
        float _3953 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1053 = sqrt(((_1029 * _1029) + (_1028 * _1028)) + (_1030 * _1030)) / (_982 + 9.9999997473787516355514526367188e-06);
        float _3964 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1054 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
        float _1055 = _1054 * 2.0;
        float _1059 = (1.0 - _1054) / (_1054 + 1.0);
        float _3975 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1060 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
        float _1069 = ((((1.0 - _1060) * (_1055 + 2.0)) * exp2(log2(isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0))) * (_1055 + 1.0))) + _1060) * _982;
        float _1070 = _950 * 0.5;
        float _1071 = _960 * 0.5;
        float _1072 = _970 * 0.5;
        float _1073 = dot(vec3(_1070, _1071, _1072), vec3(_1070, _1071, _1072));
        float _1078 = (_1073 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1073);
        float _1086 = (dot(vec3(_577, _578, _579), vec3(_1078 * _1070, _1078 * _1071, _1078 * _1072)) + 1.0) * 0.5;
        float _3986 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1095 = sqrt(((_1071 * _1071) + (_1070 * _1070)) + (_1072 * _1072)) / (_983 + 9.9999997473787516355514526367188e-06);
        float _3997 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1096 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
        float _1097 = _1096 * 2.0;
        float _1101 = (1.0 - _1096) / (_1096 + 1.0);
        float _4008 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1102 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
        float _1111 = ((((1.0 - _1102) * (_1097 + 2.0)) * exp2(log2(isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0))) * (_1097 + 1.0))) + _1102) * _983;
        _1119 = _950;
        _1121 = _949;
        _1122 = _948;
        _1123 = _960;
        _1124 = _959;
        _1125 = _958;
        _1126 = _970;
        _1127 = _969;
        _1128 = _968;
        _1129 = _983;
        _1130 = _982;
        _1131 = _981;
        _1132 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0)));
        _1133 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0)));
        _1134 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0)));
    }
    else
    {
        _1119 = _1120;
        _1121 = _1120;
        _1122 = _1120;
        _1123 = _1120;
        _1124 = _1120;
        _1125 = _1120;
        _1126 = _1120;
        _1127 = _1120;
        _1128 = _1120;
        _1129 = _1120;
        _1130 = _1120;
        _1131 = _1120;
        _1132 = 0.0;
        _1133 = 0.0;
        _1134 = 0.0;
    }
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1159 = fma(_818, cbModelParam._m0[30u].z, fma(_814, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _810));
        float _1163 = fma(_818, cbModelParam._m0[31u].z, fma(_814, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _810));
        float _1167 = fma(_818, cbModelParam._m0[32u].z, fma(_814, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _810));
        float _1190 = _810 + _577;
        float _1191 = _814 + _578;
        float _1192 = _818 + _579;
        float _1202 = fma(_1192, cbModelParam._m0[30u].z, fma(_1191, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1190)) - _1159;
        float _1203 = fma(_1192, cbModelParam._m0[31u].z, fma(_1191, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1190)) - _1163;
        float _1204 = fma(_1192, cbModelParam._m0[32u].z, fma(_1191, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1190)) - _1167;
        float _1208 = inversesqrt(dot(vec3(_1202, _1203, _1204), vec3(_1202, _1203, _1204)));
        float _1221 = ((_1208 * _1202) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1159 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1222 = ((_1208 * _1203) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1163 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1223 = ((_1208 * _1204) / cbModelParam._m0[35u].z) + ((((((_1167 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1225 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1221, _1222, _1223), 0.0);
        vec4 _1232 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1221, _1222, _1223), 0.0);
        vec4 _1239 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1221, _1222, _1223), 0.0);
        vec4 _1246 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1221, _1222, _1223), 0.0);
        float _1258 = exp2((_1225.w + (-0.5)) * 20.0) * 2.0;
        float _1259 = _1258 * (_1225.x + (-0.5));
        float _1260 = _1258 * (_1225.y + (-0.5));
        float _1261 = _1258 * (_1225.z + (-0.5));
        float _1268 = exp2((_1232.w + (-0.5)) * 20.0) * 2.0;
        float _1269 = _1268 * (_1232.x + (-0.5));
        float _1270 = _1268 * (_1232.y + (-0.5));
        float _1271 = _1268 * (_1232.z + (-0.5));
        float _1278 = exp2((_1239.w + (-0.5)) * 20.0) * 2.0;
        float _1279 = _1278 * (_1239.x + (-0.5));
        float _1280 = _1278 * (_1239.y + (-0.5));
        float _1281 = _1278 * (_1239.z + (-0.5));
        float _1288 = exp2((_1246.w + (-0.5)) * 20.0) * 2.0;
        float _1289 = _1288 * (_1246.x + (-0.5));
        float _1290 = _1288 * (_1246.y + (-0.5));
        float _1291 = _1288 * (_1246.z + (-0.5));
        float _1292 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1293 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1294 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1295 = _1259 * 0.5;
        float _1296 = _1269 * 0.5;
        float _1297 = _1279 * 0.5;
        float _1298 = dot(vec3(_1295, _1296, _1297), vec3(_1295, _1296, _1297));
        float _1303 = (_1298 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1298);
        float _1311 = (dot(vec3(_577, _578, _579), vec3(_1303 * _1295, _1303 * _1296, _1303 * _1297)) + 1.0) * 0.5;
        float _4049 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1320 = sqrt(((_1296 * _1296) + (_1295 * _1295)) + (_1297 * _1297)) / (_1292 + 9.9999997473787516355514526367188e-06);
        float _4060 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1321 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
        float _1322 = _1321 * 2.0;
        float _1326 = (1.0 - _1321) / (_1321 + 1.0);
        float _4071 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1327 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
        float _1336 = ((((1.0 - _1327) * (_1322 + 2.0)) * exp2(log2(isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0))) * (_1322 + 1.0))) + _1327) * _1292;
        float _1337 = _1260 * 0.5;
        float _1338 = _1270 * 0.5;
        float _1339 = _1280 * 0.5;
        float _1340 = dot(vec3(_1337, _1338, _1339), vec3(_1337, _1338, _1339));
        float _1345 = (_1340 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1340);
        float _1353 = (dot(vec3(_577, _578, _579), vec3(_1345 * _1337, _1345 * _1338, _1345 * _1339)) + 1.0) * 0.5;
        float _4082 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1362 = sqrt(((_1338 * _1338) + (_1337 * _1337)) + (_1339 * _1339)) / (_1293 + 9.9999997473787516355514526367188e-06);
        float _4093 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1363 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
        float _1364 = _1363 * 2.0;
        float _1368 = (1.0 - _1363) / (_1363 + 1.0);
        float _4104 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1369 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
        float _1378 = ((((1.0 - _1369) * (_1364 + 2.0)) * exp2(log2(isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0))) * (_1364 + 1.0))) + _1369) * _1293;
        float _1379 = _1261 * 0.5;
        float _1380 = _1271 * 0.5;
        float _1381 = _1281 * 0.5;
        float _1382 = dot(vec3(_1379, _1380, _1381), vec3(_1379, _1380, _1381));
        float _1387 = (_1382 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1382);
        float _1395 = (dot(vec3(_577, _578, _579), vec3(_1387 * _1379, _1387 * _1380, _1387 * _1381)) + 1.0) * 0.5;
        float _4115 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1404 = sqrt(((_1380 * _1380) + (_1379 * _1379)) + (_1381 * _1381)) / (_1294 + 9.9999997473787516355514526367188e-06);
        float _4126 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1405 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
        float _1406 = _1405 * 2.0;
        float _1410 = (1.0 - _1405) / (_1405 + 1.0);
        float _4137 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1411 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
        float _1420 = ((((1.0 - _1411) * (_1406 + 2.0)) * exp2(log2(isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0))) * (_1406 + 1.0))) + _1411) * _1294;
        _1428 = _1261;
        _1429 = _1260;
        _1430 = _1259;
        _1431 = _1271;
        _1432 = _1270;
        _1433 = _1269;
        _1434 = _1281;
        _1435 = _1280;
        _1436 = _1279;
        _1437 = _1294;
        _1438 = _1293;
        _1439 = _1292;
        _1440 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0)));
        _1441 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0)));
        _1442 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0)));
    }
    else
    {
        _1428 = _1120;
        _1429 = _1120;
        _1430 = _1120;
        _1431 = _1120;
        _1432 = _1120;
        _1433 = _1120;
        _1434 = _1120;
        _1435 = _1120;
        _1436 = _1120;
        _1437 = _1120;
        _1438 = _1120;
        _1439 = _1120;
        _1440 = 0.0;
        _1441 = 0.0;
        _1442 = 0.0;
    }
    float _1452 = (cbModelParam._m0[1u].x * (_1440 - _1132)) + _1132;
    float _1453 = (cbModelParam._m0[1u].x * (_1441 - _1133)) + _1133;
    float _1454 = (cbModelParam._m0[1u].x * (_1442 - _1134)) + _1134;
    float _1475 = fma(_1454, cbSceneParam._m0[89u].z, fma(_1453, cbSceneParam._m0[89u].y, _1452 * cbSceneParam._m0[89u].x));
    float _1478 = fma(_1454, cbSceneParam._m0[90u].z, fma(_1453, cbSceneParam._m0[90u].y, _1452 * cbSceneParam._m0[90u].x));
    float _1481 = fma(_1454, cbSceneParam._m0[91u].z, fma(_1453, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1452));
    float _1496 = _754 * 0.5;
    float _1497 = _755 * 0.5;
    float _1498 = _756 * 0.5;
    float _1499 = dot(vec4(_1496, _1497, _1498, 1.0), vec4(_1430, _1433, _1436, _1439));
    float _1502 = dot(vec4(_1496, _1497, _1498, 1.0), vec4(_1429, _1432, _1435, _1438));
    float _1505 = dot(vec4(_1496, _1497, _1498, 1.0), vec4(_1428, _1431, _1434, _1437));
    float _1539;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1512 = dot(vec4(_1496, _1497, _1498, 1.0), vec4(_1119, _1123, _1126, _1129));
        float _1516 = dot(vec4(_1496, _1497, _1498, 1.0), vec4(_1121, _1124, _1127, _1130));
        float _1520 = dot(vec4(_1496, _1497, _1498, 1.0), vec4(_1122, _1125, _1128, _1131));
        float _1527 = dot(vec4(cbModelParam._m0[39u]), vec4(_1496, _1497, _1498, 1.0));
        _1539 = dot(vec3(isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0)), isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0)), isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1527) ? 0.0 : (isnan(0.0) ? _1527 : max(0.0, _1527))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1539 = 1.0;
    }
    float _1550;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1541 = dot(vec4(cbModelParam._m0[40u]), vec4(_1496, _1497, _1498, 1.0));
        _1550 = dot(vec3(isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0)), isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0)), isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1541) ? 0.0 : (isnan(0.0) ? _1541 : max(0.0, _1541))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1550 = 1.0;
    }
    float _1554 = (_1550 * cbModelParam._m0[1u].x) + (_1539 * (1.0 - cbModelParam._m0[1u].x));
    float _1564 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _580);
    float _1565 = isnan(_1564) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1564 : min(cbModelParam._m0[25u].z, _1564));
    float _1645;
    float _1647;
    float _1649;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1612 = fma(_818, cbModelParam._m0[13u].z, fma(_814, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _810)) + cbModelParam._m0[13u].w;
        float _1616 = fma(_818, cbModelParam._m0[14u].z, fma(_814, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _810)) + cbModelParam._m0[14u].w;
        float _1620 = fma(_818, cbModelParam._m0[15u].z, fma(_814, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _810)) + cbModelParam._m0[15u].w;
        float _1623 = fma(_756, cbModelParam._m0[13u].z, fma(_755, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _754));
        float _1626 = fma(_756, cbModelParam._m0[14u].z, fma(_755, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _754));
        float _1629 = fma(_756, cbModelParam._m0[15u].z, fma(_755, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _754));
        float _1657;
        if (_1623 > 0.0)
        {
            _1657 = abs((1.0 - _1612) / _1623);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1623 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1612 + 1.0) / _1623);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1657 = frontier_phi_14_12_ladder;
        }
        float _1828;
        if (_1626 > 0.0)
        {
            _1828 = abs((1.0 - _1616) / _1626);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1626 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1616 + 1.0) / _1626);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1828 = frontier_phi_23_19_ladder;
        }
        float _2124;
        if (_1629 > 0.0)
        {
            _2124 = abs((1.0 - _1620) / _1629);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1629 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1620 + 1.0) / _1629);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2124 = frontier_phi_35_30_ladder;
        }
        float _2126 = isnan(_1828) ? _1657 : (isnan(_1657) ? _1828 : min(_1657, _1828));
        float _2127 = isnan(_2124) ? _2126 : (isnan(_2126) ? _2124 : min(_2126, _2124));
        float _2131 = (_2127 * _1623) + _1612;
        float _2132 = (_2127 * _1626) + _1616;
        float _2133 = (_2127 * _1629) + _1620;
        float _2134 = _2127 * 9.9999997473787516355514526367188e-05;
        float _2136 = (-1.0) - _2134;
        float _2138 = _2134 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2133 > _2138) || ((_2133 < _2136) || ((_2132 > _2138) || ((_2132 < _2136) || ((_2131 < _2136) || (_2131 > _2138))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2278 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2133, cbModelParam._m0[9u].z, fma(_2132, cbModelParam._m0[9u].y, _2131 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2133, cbModelParam._m0[10u].z, fma(_2132, cbModelParam._m0[10u].y, _2131 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2133, cbModelParam._m0[11u].z, fma(_2132, cbModelParam._m0[11u].y, _2131 * cbModelParam._m0[11u].x))), _1565);
            frontier_phi_13_35_ladder = _2278.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2278.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2278.x * cbModelParam._m0[1u].y;
        }
        _1645 = frontier_phi_13_35_ladder_2;
        _1647 = frontier_phi_13_35_ladder_1;
        _1649 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1633 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_754, _755, _756), _1565);
        _1645 = _1633.x * cbModelParam._m0[1u].y;
        _1647 = _1633.y * cbModelParam._m0[1u].y;
        _1649 = _1633.z * cbModelParam._m0[1u].y;
    }
    float _1653 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _580);
    float _1654 = isnan(_1653) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1653 : min(cbModelParam._m0[25u].w, _1653));
    float _1743;
    float _1745;
    float _1747;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1707 = fma(_818, cbModelParam._m0[21u].z, fma(_814, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _810)) + cbModelParam._m0[21u].w;
        float _1711 = fma(_818, cbModelParam._m0[22u].z, fma(_814, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _810)) + cbModelParam._m0[22u].w;
        float _1715 = fma(_818, cbModelParam._m0[23u].z, fma(_814, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _810)) + cbModelParam._m0[23u].w;
        float _1718 = fma(_756, cbModelParam._m0[21u].z, fma(_755, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _754));
        float _1721 = fma(_756, cbModelParam._m0[22u].z, fma(_755, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _754));
        float _1724 = fma(_756, cbModelParam._m0[23u].z, fma(_755, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _754));
        float _1833;
        if (_1718 > 0.0)
        {
            _1833 = abs((1.0 - _1707) / _1718);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1718 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1707 + 1.0) / _1718);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1833 = frontier_phi_25_21_ladder;
        }
        float _2151;
        if (_1721 > 0.0)
        {
            _2151 = abs((1.0 - _1711) / _1721);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1721 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1711 + 1.0) / _1721);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2151 = frontier_phi_37_32_ladder;
        }
        float _2489;
        if (_1724 > 0.0)
        {
            _2489 = abs((1.0 - _1715) / _1724);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1724 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1715 + 1.0) / _1724);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2489 = frontier_phi_47_44_ladder;
        }
        float _2491 = isnan(_2151) ? _1833 : (isnan(_1833) ? _2151 : min(_1833, _2151));
        float _2492 = isnan(_2489) ? _2491 : (isnan(_2491) ? _2489 : min(_2491, _2489));
        float _2496 = (_2492 * _1718) + _1707;
        float _2497 = (_2492 * _1721) + _1711;
        float _2498 = (_2492 * _1724) + _1715;
        float _2499 = _2492 * 9.9999997473787516355514526367188e-05;
        float _2500 = (-1.0) - _2499;
        float _2502 = _2499 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2498 > _2502) || ((_2498 < _2500) || ((_2497 > _2502) || ((_2497 < _2500) || ((_2496 < _2500) || (_2496 > _2502))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2620 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2498, cbModelParam._m0[17u].z, fma(_2497, cbModelParam._m0[17u].y, _2496 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2498, cbModelParam._m0[18u].z, fma(_2497, cbModelParam._m0[18u].y, _2496 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2498, cbModelParam._m0[19u].z, fma(_2497, cbModelParam._m0[19u].y, _2496 * cbModelParam._m0[19u].x))), _1654);
            frontier_phi_22_47_ladder = _2620.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2620.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2620.x * cbModelParam._m0[1u].z;
        }
        _1743 = frontier_phi_22_47_ladder_2;
        _1745 = frontier_phi_22_47_ladder_1;
        _1747 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1727 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_754, _755, _756), _1654);
        _1743 = _1727.x * cbModelParam._m0[1u].z;
        _1745 = _1727.y * cbModelParam._m0[1u].z;
        _1747 = _1727.z * cbModelParam._m0[1u].z;
    }
    float _1760 = (((_781 * _730) + _782) * _746) * ((cbModelParam._m0[1u].w * (_1743 - _1645)) + _1645);
    float _1762 = (((_781 * _732) + _782) * _746) * ((cbModelParam._m0[1u].w * (_1745 - _1647)) + _1647);
    float _1764 = (((_781 * _733) + _782) * _746) * ((cbModelParam._m0[1u].w * (_1747 - _1649)) + _1649);
    float _1767 = fma(_1764, cbSceneParam._m0[89u].z, fma(_1762, cbSceneParam._m0[89u].y, _1760 * cbSceneParam._m0[89u].x));
    float _1770 = fma(_1764, cbSceneParam._m0[90u].z, fma(_1762, cbSceneParam._m0[90u].y, _1760 * cbSceneParam._m0[90u].x));
    float _1773 = fma(_1764, cbSceneParam._m0[91u].z, fma(_1762, cbSceneParam._m0[91u].y, _1760 * cbSceneParam._m0[91u].x));
    float _1807 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1811 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1815 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1819 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1820 = _1807 / _1819;
    float _1821 = _1811 / _1819;
    float _1822 = _1815 / _1819;
    float _1969;
    float _1970;
    float _1971;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1849 = ((uint(_1822 > cbSceneParam._m0[59u].y) + uint(_1822 > cbSceneParam._m0[59u].x)) + uint(_1822 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1850 = _1849 + 43u;
        uint _1858 = _1849 + 44u;
        uint _1866 = _1849 + 45u;
        uint _1874 = _1849 + 46u;
        float _1885 = fma(_1819, cbSceneParam._m0[_1850].w, fma(_1815, cbSceneParam._m0[_1850].z, fma(_1811, cbSceneParam._m0[_1850].y, _1807 * cbSceneParam._m0[_1850].x)));
        float _1889 = fma(_1819, cbSceneParam._m0[_1858].w, fma(_1815, cbSceneParam._m0[_1858].z, fma(_1811, cbSceneParam._m0[_1858].y, _1807 * cbSceneParam._m0[_1858].x)));
        float _1897 = fma(_1819, cbSceneParam._m0[_1874].w, fma(_1815, cbSceneParam._m0[_1874].z, fma(_1811, cbSceneParam._m0[_1874].y, _1807 * cbSceneParam._m0[_1874].x)));
        float _1902 = cbSceneParam._m0[33u].z * _1897;
        float _1904 = cbSceneParam._m0[33u].w * _1897;
        float _1907 = fma(_1819, cbSceneParam._m0[_1866].w, fma(_1815, cbSceneParam._m0[_1866].z, fma(_1811, cbSceneParam._m0[_1866].y, _1807 * cbSceneParam._m0[_1866].x))) / _1897;
        float _1955 = (cbSceneParam._m0[33u].x - sqrt(((_1821 * _1821) + (_1820 * _1820)) + (_1822 * _1822))) * cbSceneParam._m0[33u].y;
        float _4263 = isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0));
        float _1962 = (isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1902 + _1885) / _1897, (_1904 + _1889) / _1897), _1907), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1904 + _1885) / _1897, (_1889 - _1902) / _1897), _1907), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1885 - _1902) / _1897, (_1889 - _1904) / _1897), _1907), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1885 - _1904) / _1897, (_1902 + _1889) / _1897), _1907), 0.0)).x), vec4(0.25)));
        _1969 = 1.0 - (_1962 * cbSceneParam._m0[34u].x);
        _1970 = 1.0 - (_1962 * cbSceneParam._m0[34u].y);
        _1971 = 1.0 - (_1962 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1969 = 1.0;
        _1970 = 1.0;
        _1971 = 1.0;
    }
    float _2035;
    float _2037;
    float _2039;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2023 = fma(_1819, cbSceneParam._m0[63u].w, fma(_1815, cbSceneParam._m0[63u].z, fma(_1811, cbSceneParam._m0[63u].y, _1807 * cbSceneParam._m0[63u].x)));
        float _2024 = fma(_1819, cbSceneParam._m0[60u].w, fma(_1815, cbSceneParam._m0[60u].z, fma(_1811, cbSceneParam._m0[60u].y, _1807 * cbSceneParam._m0[60u].x))) / _2023;
        float _2025 = fma(_1819, cbSceneParam._m0[61u].w, fma(_1815, cbSceneParam._m0[61u].z, fma(_1811, cbSceneParam._m0[61u].y, _1807 * cbSceneParam._m0[61u].x))) / _2023;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2024 >= cbSceneParam._m0[64u].x) && (_2025 >= cbSceneParam._m0[64u].y)) && (_2024 <= cbSceneParam._m0[64u].z)) && (_2025 <= cbSceneParam._m0[64u].w))
        {
            float _2164 = fma(_1819, cbSceneParam._m0[62u].w, fma(_1815, cbSceneParam._m0[62u].z, fma(_1811, cbSceneParam._m0[62u].y, _1807 * cbSceneParam._m0[62u].x))) / _2023;
            float _2168 = isnan(cbSceneParam._m0[41u].w) ? _2164 : (isnan(_2164) ? cbSceneParam._m0[41u].w : max(_2164, cbSceneParam._m0[41u].w));
            float _2211 = (cbSceneParam._m0[33u].x - sqrt(((_1821 * _1821) + (_1820 * _1820)) + (_1822 * _1822))) * cbSceneParam._m0[33u].y;
            float _4279 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
            float _2218 = (isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2024, cbSceneParam._m0[33u].w + _2025), _2168), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2024, _2025 - cbSceneParam._m0[33u].z), _2168), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2024 - cbSceneParam._m0[33u].z, _2025 - cbSceneParam._m0[33u].w), _2168), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2024 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2025), _2168), 0.0)).x), vec4(0.25)));
            float _2222 = 1.0 - (_2218 * cbSceneParam._m0[34u].x);
            float _2223 = 1.0 - (_2218 * cbSceneParam._m0[34u].y);
            float _2224 = 1.0 - (_2218 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2224) ? _1971 : (isnan(_1971) ? _2224 : min(_1971, _2224));
            frontier_phi_34_33_ladder_1 = isnan(_2223) ? _1970 : (isnan(_1970) ? _2223 : min(_1970, _2223));
            frontier_phi_34_33_ladder_2 = isnan(_2222) ? _1969 : (isnan(_1969) ? _2222 : min(_1969, _2222));
        }
        else
        {
            frontier_phi_34_33_ladder = _1971;
            frontier_phi_34_33_ladder_1 = _1970;
            frontier_phi_34_33_ladder_2 = _1969;
        }
        _2035 = frontier_phi_34_33_ladder_2;
        _2037 = frontier_phi_34_33_ladder_1;
        _2039 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2035 = _1969;
        _2037 = _1970;
        _2039 = _1971;
    }
    uvec4 _2044 = floatBitsToUint(cbInstanceData._m0[_256 + 5u]);
    uint _2046 = _2044.x * 14u;
    uint _2047 = _2046 + 13u;
    float _2054 = _746 + (-1.0);
    float _2059 = (cbLight._m0[_2047].x * _2054) + 1.0;
    float _2060 = (cbLight._m0[_2047].y * _2054) + 1.0;
    float _2061 = (cbLight._m0[_2047].z * _2054) + 1.0;
    float _2062 = (cbLight._m0[_2047].w * _2054) + 1.0;
    uint _2063 = _2046 + 5u;
    float _2069 = isnan(1.0) ? _2060 : (isnan(_2060) ? 1.0 : min(_2060, 1.0));
    uint _2073 = _2046 + 4u;
    float _2083 = isnan(1.0) ? _2059 : (isnan(_2059) ? 1.0 : min(_2059, 1.0));
    uint _2087 = _2046 | 1u;
    float _2098 = dot(vec3(cbLight._m0[_2046].xyz), vec3(_577, _578, _579));
    float _2101 = dot(vec3(cbLight._m0[_2087].xyz), vec3(_577, _578, _579));
    float _4315 = isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0));
    float _4326 = isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0));
    float _2106 = (isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0))) * 0.3183098733425140380859375;
    float _2108 = (isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0))) * 0.3183098733425140380859375;
    float _2115 = ((cbLight._m0[_2063].x * _2069) * _2108) + (((cbLight._m0[_2073].x * _2035) * _2083) * _2106);
    float _2116 = ((_2069 * cbLight._m0[_2063].y) * _2108) + (((cbLight._m0[_2073].y * _2037) * _2083) * _2106);
    float _2117 = ((_2069 * cbLight._m0[_2063].z) * _2108) + (((cbLight._m0[_2073].z * _2039) * _2083) * _2106);
    uvec4 _2121 = floatBitsToUint(cbLight._m0[_2046 + 12u]);
    bool _2123 = _2121.x == 0u;
    float _2225;
    float _2227;
    float _2229;
    if (_2123)
    {
        _2225 = _2115;
        _2227 = _2116;
        _2229 = _2117;
    }
    else
    {
        uint _2233 = _2046 + 6u;
        float _2249 = (dot(vec3(cbLight._m0[_2046 + 2u].xyz), vec3(_577, _578, _579)) * 0.5) + 0.5;
        float _2250 = _2249 * _2249;
        float _4337 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
        float _2251 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
        float _2252 = isnan(1.0) ? _2061 : (isnan(_2061) ? 1.0 : min(_2061, 1.0));
        _2225 = (((cbLight._m0[_2233].x * 0.3183098733425140380859375) * _2251) * _2252) + _2115;
        _2227 = (((cbLight._m0[_2233].y * 0.3183098733425140380859375) * _2251) * _2252) + _2116;
        _2229 = (((cbLight._m0[_2233].z * 0.3183098733425140380859375) * _2251) * _2252) + _2117;
    }
    bool _2232 = _2121.y == 0u;
    float _2287;
    float _2289;
    float _2291;
    if (_2232)
    {
        _2287 = _2225;
        _2289 = _2227;
        _2291 = _2229;
    }
    else
    {
        uint _2460 = _2046 + 7u;
        float _2476 = (dot(vec3(cbLight._m0[_2046 + 3u].xyz), vec3(_577, _578, _579)) * 0.5) + 0.5;
        float _2477 = _2476 * _2476;
        float _4353 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
        float _2478 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
        float _2479 = isnan(1.0) ? _2062 : (isnan(_2062) ? 1.0 : min(_2062, 1.0));
        _2287 = (((cbLight._m0[_2460].x * 0.3183098733425140380859375) * _2478) * _2479) + _2225;
        _2289 = (((cbLight._m0[_2460].y * 0.3183098733425140380859375) * _2478) * _2479) + _2227;
        _2291 = (((cbLight._m0[_2460].z * 0.3183098733425140380859375) * _2478) * _2479) + _2229;
    }
    uint _2294 = _2046 + 8u;
    float _2307 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2046].w)) * _580) * 0.949999988079071044921875);
    float _2308 = _2307 * _2307;
    float _2309 = cbLight._m0[_2046].x + _657;
    float _2310 = cbLight._m0[_2046].y + _658;
    float _2311 = cbLight._m0[_2046].z + _659;
    float _2315 = inversesqrt(dot(vec3(_2309, _2310, _2311), vec3(_2309, _2310, _2311)));
    float _2316 = _2315 * _2309;
    float _2317 = _2315 * _2310;
    float _2318 = _2315 * _2311;
    float _2319 = dot(vec3(_577, _578, _579), vec3(cbLight._m0[_2046].xyz));
    float _4369 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
    float _2322 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
    float _4380 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _2323 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
    float _2324 = dot(vec3(_577, _578, _579), vec3(_2316, _2317, _2318));
    float _4391 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
    float _2327 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
    float _2328 = dot(vec3(cbLight._m0[_2046].xyz), vec3(_2316, _2317, _2318));
    float _4402 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
    float _2332 = _2308 * _2308;
    float _2336 = ((_2327 * _2327) * (_2332 + (-1.0))) + 1.0;
    float _2344 = exp2(log2(1.0 - (isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0)))) * 5.0);
    float _2345 = 0.959999978542327880859375 - _727;
    float _2347 = 0.959999978542327880859375 - _728;
    float _2348 = 0.959999978542327880859375 - _729;
    float _2355 = 1.0 - _2308;
    float _2366 = (0.5 / (((_2323 * ((_2322 * _2355) + _2308)) + 9.9999999392252902907785028219223e-09) + (((_2323 * _2355) + _2308) * _2322))) * _2322;
    float _4413 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
    float _2368 = (isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0))) * (_2332 / ((_2336 * _2336) * 3.141590118408203125));
    uint _2382 = _2046 + 9u;
    float _2393 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2087].w)) * _580) * 0.949999988079071044921875);
    float _2394 = _2393 * _2393;
    float _2395 = cbLight._m0[_2087].x + _657;
    float _2396 = cbLight._m0[_2087].y + _658;
    float _2397 = cbLight._m0[_2087].z + _659;
    float _2401 = inversesqrt(dot(vec3(_2395, _2396, _2397), vec3(_2395, _2396, _2397)));
    float _2402 = _2401 * _2395;
    float _2403 = _2401 * _2396;
    float _2404 = _2401 * _2397;
    float _2405 = dot(vec3(_577, _578, _579), vec3(cbLight._m0[_2087].xyz));
    float _4424 = isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : max(_2405, 0.0));
    float _2408 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
    float _2409 = dot(vec3(_577, _578, _579), vec3(_2402, _2403, _2404));
    float _4435 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
    float _2412 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
    float _2413 = dot(vec3(cbLight._m0[_2087].xyz), vec3(_2402, _2403, _2404));
    float _4446 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0));
    float _2417 = _2394 * _2394;
    float _2421 = ((_2412 * _2412) * (_2417 + (-1.0))) + 1.0;
    float _2428 = exp2(log2(1.0 - (isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0)))) * 5.0);
    float _2435 = 1.0 - _2394;
    float _2445 = (0.5 / (((_2323 * ((_2408 * _2435) + _2394)) + 9.9999999392252902907785028219223e-09) + (((_2323 * _2435) + _2394) * _2408))) * _2408;
    float _4457 = isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0));
    float _2447 = (isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0))) * (_2417 / ((_2421 * _2421) * 3.141590118408203125));
    float _2457 = (((((_2428 * _2345) + _730) * cbLight._m0[_2382].x) * _2447) * _2069) + ((((cbLight._m0[_2294].x * _2035) * ((_2344 * _2345) + _730)) * _2368) * _2083);
    float _2458 = (((((_2428 * _2347) + _732) * cbLight._m0[_2382].y) * _2447) * _2069) + ((((cbLight._m0[_2294].y * _2037) * ((_2344 * _2347) + _732)) * _2368) * _2083);
    float _2459 = (((((_2428 * _2348) + _733) * cbLight._m0[_2382].z) * _2447) * _2069) + ((((cbLight._m0[_2294].z * _2039) * ((_2344 * _2348) + _733)) * _2368) * _2083);
    float _2515;
    float _2517;
    float _2519;
    if (_2123)
    {
        _2515 = _2457;
        _2517 = _2458;
        _2519 = _2459;
    }
    else
    {
        uint _2521 = _2046 + 2u;
        uint _2525 = _2046 + 10u;
        float _2539 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2521].w)) * _580) * 0.949999988079071044921875);
        float _2540 = _2539 * _2539;
        float _2541 = cbLight._m0[_2521].x + _657;
        float _2542 = cbLight._m0[_2521].y + _658;
        float _2543 = cbLight._m0[_2521].z + _659;
        float _2547 = inversesqrt(dot(vec3(_2541, _2542, _2543), vec3(_2541, _2542, _2543)));
        float _2548 = _2547 * _2541;
        float _2549 = _2547 * _2542;
        float _2550 = _2547 * _2543;
        float _2551 = dot(vec3(_577, _578, _579), vec3(cbLight._m0[_2521].xyz));
        float _4468 = isnan(0.0) ? _2551 : (isnan(_2551) ? 0.0 : max(_2551, 0.0));
        float _2554 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
        float _2555 = dot(vec3(_577, _578, _579), vec3(_2548, _2549, _2550));
        float _4479 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0));
        float _2558 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
        float _2559 = dot(vec3(cbLight._m0[_2521].xyz), vec3(_2548, _2549, _2550));
        float _4490 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0));
        float _2563 = _2540 * _2540;
        float _2567 = ((_2558 * _2558) * (_2563 + (-1.0))) + 1.0;
        float _2574 = exp2(log2(1.0 - (isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0)))) * 5.0);
        float _2581 = 1.0 - _2540;
        float _2591 = (0.5 / (((_2323 * ((_2554 * _2581) + _2540)) + 9.9999999392252902907785028219223e-09) + (((_2323 * _2581) + _2540) * _2554))) * _2554;
        float _4501 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0));
        float _2593 = (isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0))) * (_2563 / ((_2567 * _2567) * 3.141590118408203125));
        float _2594 = isnan(1.0) ? _2061 : (isnan(_2061) ? 1.0 : min(_2061, 1.0));
        _2515 = (((((_2574 * _2345) + _730) * cbLight._m0[_2525].x) * _2593) * _2594) + _2457;
        _2517 = (((((_2574 * _2347) + _732) * cbLight._m0[_2525].y) * _2593) * _2594) + _2458;
        _2519 = (((((_2574 * _2348) + _733) * cbLight._m0[_2525].z) * _2593) * _2594) + _2459;
    }
    float _2625;
    float _2627;
    float _2629;
    if (_2232)
    {
        _2625 = _2515;
        _2627 = _2517;
        _2629 = _2519;
    }
    else
    {
        uint _2636 = _2046 + 3u;
        uint _2640 = _2046 + 11u;
        float _2654 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2636].w)) * _580) * 0.949999988079071044921875);
        float _2655 = _2654 * _2654;
        float _2656 = cbLight._m0[_2636].x + _657;
        float _2657 = cbLight._m0[_2636].y + _658;
        float _2658 = cbLight._m0[_2636].z + _659;
        float _2662 = inversesqrt(dot(vec3(_2656, _2657, _2658), vec3(_2656, _2657, _2658)));
        float _2663 = _2662 * _2656;
        float _2664 = _2662 * _2657;
        float _2665 = _2662 * _2658;
        float _2666 = dot(vec3(_577, _578, _579), vec3(cbLight._m0[_2636].xyz));
        float _4517 = isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : max(_2666, 0.0));
        float _2669 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
        float _2670 = dot(vec3(_577, _578, _579), vec3(_2663, _2664, _2665));
        float _4528 = isnan(0.0) ? _2670 : (isnan(_2670) ? 0.0 : max(_2670, 0.0));
        float _2673 = isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0));
        float _2674 = dot(vec3(cbLight._m0[_2636].xyz), vec3(_2663, _2664, _2665));
        float _4539 = isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : max(_2674, 0.0));
        float _2678 = _2655 * _2655;
        float _2682 = ((_2673 * _2673) * (_2678 + (-1.0))) + 1.0;
        float _2689 = exp2(log2(1.0 - (isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0)))) * 5.0);
        float _2696 = 1.0 - _2655;
        float _2706 = (0.5 / (((_2323 * ((_2669 * _2696) + _2655)) + 9.9999999392252902907785028219223e-09) + (((_2323 * _2696) + _2655) * _2669))) * _2669;
        float _4550 = isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : max(_2706, 0.0));
        float _2708 = (isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0))) * (_2678 / ((_2682 * _2682) * 3.141590118408203125));
        float _2709 = isnan(1.0) ? _2062 : (isnan(_2062) ? 1.0 : min(_2062, 1.0));
        _2625 = (((((_2689 * _2345) + _730) * cbLight._m0[_2640].x) * _2708) * _2709) + _2515;
        _2627 = (((((_2689 * _2347) + _732) * cbLight._m0[_2640].y) * _2708) * _2709) + _2517;
        _2629 = (((((_2689 * _2348) + _733) * cbLight._m0[_2640].z) * _2708) * _2709) + _2519;
    }
    float _2775;
    float _2777;
    float _2779;
    float _2781;
    float _2783;
    float _2785;
    if (_2044.y == 0u)
    {
        uvec4 _2730 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2731 = _2730.x;
        uint _2742 = uint((float(_2730.y) * floor(float(uint(cbSceneParam._m0[85u].y * _666) / _2731))) + floor(float(uint(cbSceneParam._m0[85u].x * _665) / _2731)));
        float _2752 = (log2(_1822 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2753 = isnan(0.0) ? _2752 : (isnan(_2752) ? 0.0 : max(_2752, 0.0));
        uint _2756 = uint(isnan(14.0) ? _2753 : (isnan(_2753) ? 14.0 : min(_2753, 14.0)));
        uvec4 _2761 = texelFetch(g_lightClusterGridBuffer, int(((_2756 << 2u) + (_2742 << 6u)) >> 2u));
        uint _2762 = _2761.x;
        uint _2763 = _2730.z;
        float _2842;
        float _2844;
        float _2846;
        float _2848;
        float _2850;
        float _2852;
        if (((((1u << ((_2763 >> 4u) & 15u)) + 4294967295u) & _2762) == 0u) || ((_2763 & 240u) == 0u))
        {
            _2842 = 0.0;
            _2844 = 0.0;
            _2846 = 0.0;
            _2848 = 0.0;
            _2850 = 0.0;
            _2852 = 0.0;
        }
        else
        {
            float _2843;
            float _2845;
            float _2847;
            float _2849;
            float _2851;
            float _2853;
            float _2987 = 0.0;
            float _2988 = 0.0;
            float _2989 = 0.0;
            float _2990 = 0.0;
            float _2991 = 0.0;
            float _2992 = 0.0;
            uint _2993 = 0u;
            uint _3002;
            bool _3003;
            for (;;)
            {
                _3002 = texelFetch(g_lightClassification, int((((_2756 << 5u) + (_2742 << 9u)) + (_2993 << 2u)) >> 2u)).x;
                _3003 = _3002 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3003)
                {
                    frontier_phi_66_pred = _2992;
                    frontier_phi_66_pred_1 = _2991;
                    frontier_phi_66_pred_2 = _2990;
                    frontier_phi_66_pred_3 = _2989;
                    frontier_phi_66_pred_4 = _2988;
                    frontier_phi_66_pred_5 = _2987;
                }
                else
                {
                    float _3111;
                    float _3112;
                    float _3113;
                    float _3114;
                    float _3115;
                    float _3116;
                    uint _3117;
                    _3111 = _2987;
                    _3112 = _2988;
                    _3113 = _2989;
                    _3114 = _2990;
                    _3115 = _2991;
                    _3116 = _2992;
                    _3117 = _3002;
                    float _3043;
                    float _3044;
                    float _3045;
                    float _3046;
                    float _3047;
                    float _3048;
                    for (;;)
                    {
                        uint _3121 = uint(findLSB(_3117)) + (_2993 << 5u);
                        uint _3118 = (_3117 + 4294967295u) & _3117;
                        uint _3123 = _3121 * 48u;
                        vec4 _3137 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3123)).x, texelFetch(g_PointLightRenderingBuffer, int(_3123 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3123 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3123 + 3u)).x));
                        uint _3143 = (_3121 * 48u) + 4u;
                        vec4 _3156 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3143)).x, texelFetch(g_PointLightRenderingBuffer, int(_3143 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3143 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3143 + 3u)).x));
                        uint _3162 = (_3121 * 48u) + 8u;
                        vec3 _3173 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3162)).x, texelFetch(g_PointLightRenderingBuffer, int(_3162 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3162 + 2u)).x));
                        float _3177 = _3137.x - _1820;
                        float _3178 = _3137.y - _1821;
                        float _3179 = _3137.z - _1822;
                        float _3180 = dot(vec3(_3177, _3178, _3179), vec3(_3177, _3178, _3179));
                        float _3183 = inversesqrt(_3180);
                        float _3184 = _3183 * _3177;
                        float _3185 = _3183 * _3178;
                        float _3186 = _3183 * _3179;
                        float _3187 = dot(vec3(_687, _690, _693), vec3(_3184, _3185, _3186));
                        float _3192 = 1.0 - (_3180 * _3137.w);
                        float _4576 = isnan(0.0) ? _3192 : (isnan(_3192) ? 0.0 : max(_3192, 0.0));
                        float _3193 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
                        float _3194 = sqrt(_3180) * _3156.w;
                        float _3197 = 1.39999997615814208984375 / (_3194 + 1.39999997615814208984375);
                        float _3198 = _3197 * _3197;
                        float _3201 = ((1.0 - _3198) * _3187) + _3198;
                        float _3204 = _3194 * _3194;
                        float _3208 = ((isnan(0.0) ? _3201 : (isnan(_3201) ? 0.0 : max(_3201, 0.0))) * _3193) / ((_3204 * 0.699999988079071044921875) + 1.0);
                        float _3212 = (-0.0) - _1820;
                        float _3213 = (-0.0) - _1821;
                        float _3214 = (-0.0) - _1822;
                        float _3218 = inversesqrt(dot(vec3(_3212, _3213, _3214), vec3(_3212, _3213, _3214)));
                        float _3219 = _3218 * _3212;
                        float _3220 = _3218 * _3213;
                        float _3221 = _3218 * _3214;
                        float _3228 = exp2(log2(1.0 / ((_3204 * 3.5) + 5.0)) * 0.25);
                        float _3229 = 1.0 - _762;
                        float _3236 = sqrt(1.0 - ((1.0 - (_3229 * _3229)) * (1.0 - (_3228 * _3228))));
                        float _3237 = _3236 * _3236;
                        float _3238 = _3237 * _3237;
                        float _3239 = _3219 + _3184;
                        float _3240 = _3220 + _3185;
                        float _3241 = _3221 + _3186;
                        float _3245 = inversesqrt(dot(vec3(_3239, _3240, _3241), vec3(_3239, _3240, _3241)));
                        float _3249 = dot(vec3(_687, _690, _693), vec3(_3219, _3220, _3221));
                        float _4592 = isnan(0.0) ? _3249 : (isnan(_3249) ? 0.0 : max(_3249, 0.0));
                        float _3252 = isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0));
                        float _3253 = dot(vec3(_687, _690, _693), vec3(_3245 * _3239, _3245 * _3240, _3245 * _3241));
                        float _4603 = isnan(0.0) ? _3253 : (isnan(_3253) ? 0.0 : max(_3253, 0.0));
                        float _3256 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
                        float _3260 = ((_3256 * _3256) * (_3238 + (-1.0))) + 1.0;
                        float _3261 = _3197 * _3237;
                        float _3262 = _3261 * _3261;
                        float _3265 = ((1.0 - _3262) * _3187) + _3262;
                        float _4614 = isnan(0.0) ? _3265 : (isnan(_3265) ? 0.0 : max(_3265, 0.0));
                        float _3266 = isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0));
                        float _3267 = 1.0 - _3237;
                        float _3277 = (0.5 / (((_3266 * ((_3252 * _3267) + _3237)) + 9.9999999392252902907785028219223e-09) + (((_3266 * _3267) + _3237) * _3252))) * _3266;
                        float _4625 = isnan(0.0) ? _3277 : (isnan(_3277) ? 0.0 : max(_3277, 0.0));
                        float _3288 = (((_3238 * 3.1415927410125732421875) * (isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0)))) / ((_3260 * _3260) * ((_3204 * 2.1991131305694580078125) + 3.141590118408203125))) * _3193;
                        _3046 = (_3208 * _3156.x) + _3114;
                        _3047 = (_3208 * _3156.y) + _3115;
                        _3048 = (_3208 * _3156.z) + _3116;
                        _3043 = (_3288 * _3173.x) + _3111;
                        _3044 = (_3288 * _3173.y) + _3112;
                        _3045 = (_3288 * _3173.z) + _3113;
                        if (_3118 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3111 = _3043;
                            _3112 = _3044;
                            _3113 = _3045;
                            _3114 = _3046;
                            _3115 = _3047;
                            _3116 = _3048;
                            _3117 = _3118;
                        }
                    }
                    frontier_phi_66_pred = _3048;
                    frontier_phi_66_pred_1 = _3047;
                    frontier_phi_66_pred_2 = _3046;
                    frontier_phi_66_pred_3 = _3045;
                    frontier_phi_66_pred_4 = _3044;
                    frontier_phi_66_pred_5 = _3043;
                }
                _2853 = frontier_phi_66_pred;
                _2851 = frontier_phi_66_pred_1;
                _2849 = frontier_phi_66_pred_2;
                _2847 = frontier_phi_66_pred_3;
                _2845 = frontier_phi_66_pred_4;
                _2843 = frontier_phi_66_pred_5;
                uint _2994 = _2993 + 1u;
                if (_2994 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2987 = _2843;
                    _2988 = _2845;
                    _2989 = _2847;
                    _2990 = _2849;
                    _2991 = _2851;
                    _2992 = _2853;
                    _2993 = _2994;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2842 = _2843;
            _2844 = _2845;
            _2846 = _2847;
            _2848 = _2849;
            _2850 = _2851;
            _2852 = _2853;
        }
        uvec4 _2856 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2857 = _2856.z;
        uint _2859 = (_2857 >> 8u) & 15u;
        float _2955;
        float _2957;
        float _2959;
        float _2961;
        float _2963;
        float _2965;
        if (((4294967295u << _2859) & _2762) == 0u)
        {
            _2955 = _2842;
            _2957 = _2844;
            _2959 = _2846;
            _2961 = _2848;
            _2963 = _2850;
            _2965 = _2852;
        }
        else
        {
            float _2980 = inversesqrt(dot(vec3(_1820, _1821, _1822), vec3(_1820, _1821, _1822)));
            float _2981 = _2980 * _1820;
            float _2982 = _2980 * _1821;
            float _2983 = _2980 * _1822;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2859 < ((_2857 >> 12u) & 15u))
            {
                float _2956;
                float _2958;
                float _2960;
                float _2962;
                float _2964;
                float _2966;
                float _3094 = _2842;
                float _3095 = _2844;
                float _3096 = _2846;
                float _3097 = _2848;
                float _3098 = _2850;
                float _3099 = _2852;
                uint _3100 = _2859;
                uint _3109;
                bool _3110;
                for (;;)
                {
                    _3109 = texelFetch(g_lightClassification, int((((_2756 << 5u) + (_2742 << 9u)) + (_3100 << 2u)) >> 2u)).x;
                    _3110 = _3109 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3110)
                    {
                        frontier_phi_72_pred = _3099;
                        frontier_phi_72_pred_1 = _3098;
                        frontier_phi_72_pred_2 = _3097;
                        frontier_phi_72_pred_3 = _3096;
                        frontier_phi_72_pred_4 = _3095;
                        frontier_phi_72_pred_5 = _3094;
                    }
                    else
                    {
                        float _3293;
                        float _3294;
                        float _3295;
                        float _3296;
                        float _3297;
                        float _3298;
                        float _3586;
                        float _3587;
                        float _3588;
                        float _3589;
                        float _3590;
                        float _3591;
                        float _3306 = _3094;
                        float _3307 = _3095;
                        float _3308 = _3096;
                        float _3309 = _3097;
                        float _3310 = _3098;
                        float _3311 = _3099;
                        uint _3312 = _3109;
                        uint _3313;
                        vec4 _3338;
                        float _3339;
                        vec4 _3354;
                        vec3 _3366;
                        vec4 _3381;
                        vec4 _3396;
                        float _3442;
                        bool _3443;
                        for (;;)
                        {
                            uint _3323 = ((_3100 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3312));
                            _3313 = (_3312 + 4294967295u) & _3312;
                            uint _3325 = _3323 * 40u;
                            _3338 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3325)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3325 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3325 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3325 + 3u)).x));
                            _3339 = _3338.w;
                            uint _3341 = (_3323 * 40u) + 4u;
                            _3354 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3341)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3341 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3341 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3341 + 3u)).x));
                            uint _3356 = (_3323 * 40u) + 8u;
                            _3366 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3356)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 2u)).x));
                            uint _3368 = (_3323 * 40u) + 16u;
                            _3381 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3368)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 3u)).x));
                            uint _3383 = (_3323 * 40u) + 20u;
                            _3396 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3383)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 3u)).x));
                            uint _3398 = (_3323 * 40u) + 24u;
                            vec4 _3411 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3398)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3398 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3398 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3398 + 3u)).x));
                            uint _3417 = (_3323 * 40u) + 28u;
                            vec4 _3430 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3417)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 3u)).x));
                            _3442 = fma(_1822, _3430.z, fma(_1821, _3430.y, _3430.x * _1820)) + _3430.w;
                            _3443 = !((fma(_1822, _3411.z, fma(_1821, _3411.y, _3411.x * _1820)) + _3411.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3443)
                            {
                                float _3470 = _3338.x - _1820;
                                float _3471 = _3338.y - _1821;
                                float _3472 = _3338.z - _1822;
                                float _3473 = dot(vec3(_3470, _3471, _3472), vec3(_3470, _3471, _3472));
                                float _3476 = inversesqrt(_3473);
                                float _3477 = _3476 * _3470;
                                float _3478 = _3476 * _3471;
                                float _3479 = _3476 * _3472;
                                float _3483 = 1.0 - (_3473 / (_3339 * _3339));
                                float _4636 = isnan(0.0) ? _3483 : (isnan(_3483) ? 0.0 : max(_3483, 0.0));
                                float _3484 = isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0));
                                float _3488 = sqrt(_3473) * _3354.w;
                                float _3490 = 1.39999997615814208984375 / (_3488 + 1.39999997615814208984375);
                                float _3491 = _3490 * _3490;
                                float _3494 = ((1.0 - _3491) * dot(vec3(_3477, _3478, _3479), vec3(_687, _690, _693))) + _3491;
                                float _3497 = _3488 * _3488;
                                float _3501 = (fma(_1822, _3381.z, fma(_1821, _3381.y, _3381.x * _1820)) + _3381.w) / _3442;
                                float _3502 = (fma(_1822, _3396.z, fma(_1821, _3396.y, _3396.x * _1820)) + _3396.w) / _3442;
                                float _3506 = 1.0 - dot(vec2(_3501, _3502), vec2(_3501, _3502));
                                float _4652 = isnan(0.0) ? _3506 : (isnan(_3506) ? 0.0 : max(_3506, 0.0));
                                float _3507 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
                                float _3508 = _3507 * (((isnan(0.0) ? _3494 : (isnan(_3494) ? 0.0 : max(_3494, 0.0))) * _3484) / ((_3497 * 0.699999988079071044921875) + 1.0));
                                float _3520 = exp2(log2(1.0 / ((_3497 * 3.5) + 5.0)) * 0.25);
                                float _3521 = 1.0 - _762;
                                float _3528 = sqrt(1.0 - ((1.0 - (_3521 * _3521)) * (1.0 - (_3520 * _3520))));
                                float _3529 = _3528 * _3528;
                                float _3530 = _3529 * _3529;
                                float _3531 = _3477 - _2981;
                                float _3532 = _3478 - _2982;
                                float _3533 = _3479 - _2983;
                                float _3537 = inversesqrt(dot(vec3(_3531, _3532, _3533), vec3(_3531, _3532, _3533)));
                                float _3541 = dot(vec3(_687, _690, _693), vec3((-0.0) - _2981, (-0.0) - _2982, (-0.0) - _2983));
                                float _4663 = isnan(0.0) ? _3541 : (isnan(_3541) ? 0.0 : max(_3541, 0.0));
                                float _3544 = isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0));
                                float _3545 = dot(vec3(_687, _690, _693), vec3(_3537 * _3531, _3537 * _3532, _3537 * _3533));
                                float _4674 = isnan(0.0) ? _3545 : (isnan(_3545) ? 0.0 : max(_3545, 0.0));
                                float _3548 = isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0));
                                float _3552 = ((_3548 * _3548) * (_3530 + (-1.0))) + 1.0;
                                float _3553 = _3490 * _3529;
                                float _3554 = _3553 * _3553;
                                float _3560 = ((1.0 - _3554) * dot(vec3(_687, _690, _693), vec3(_3477, _3478, _3479))) + _3554;
                                float _4685 = isnan(0.0) ? _3560 : (isnan(_3560) ? 0.0 : max(_3560, 0.0));
                                float _3561 = isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0));
                                float _3562 = 1.0 - _3529;
                                float _3572 = (0.5 / (((_3561 * ((_3544 * _3562) + _3529)) + 9.9999999392252902907785028219223e-09) + (((_3561 * _3562) + _3529) * _3544))) * _3561;
                                float _4696 = isnan(0.0) ? _3572 : (isnan(_3572) ? 0.0 : max(_3572, 0.0));
                                float _3582 = (_3507 * _3484) * (((_3530 * 3.1415927410125732421875) * (isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0)))) / ((_3552 * _3552) * ((_3497 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3508 * _3354.y;
                                frontier_phi_78_pred_1 = _3508 * _3354.x;
                                frontier_phi_78_pred_2 = _3582 * _3366.z;
                                frontier_phi_78_pred_3 = _3582 * _3366.y;
                                frontier_phi_78_pred_4 = _3582 * _3366.x;
                                frontier_phi_78_pred_5 = _3508 * _3354.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3590 = frontier_phi_78_pred;
                            _3589 = frontier_phi_78_pred_1;
                            _3588 = frontier_phi_78_pred_2;
                            _3587 = frontier_phi_78_pred_3;
                            _3586 = frontier_phi_78_pred_4;
                            _3591 = frontier_phi_78_pred_5;
                            _3296 = _3589 + _3309;
                            _3297 = _3590 + _3310;
                            _3298 = _3591 + _3311;
                            _3293 = _3586 + _3306;
                            _3294 = _3587 + _3307;
                            _3295 = _3588 + _3308;
                            if (_3313 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3306 = _3293;
                                _3307 = _3294;
                                _3308 = _3295;
                                _3309 = _3296;
                                _3310 = _3297;
                                _3311 = _3298;
                                _3312 = _3313;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3298;
                        frontier_phi_72_pred_1 = _3297;
                        frontier_phi_72_pred_2 = _3296;
                        frontier_phi_72_pred_3 = _3295;
                        frontier_phi_72_pred_4 = _3294;
                        frontier_phi_72_pred_5 = _3293;
                    }
                    _2966 = frontier_phi_72_pred;
                    _2964 = frontier_phi_72_pred_1;
                    _2962 = frontier_phi_72_pred_2;
                    _2960 = frontier_phi_72_pred_3;
                    _2958 = frontier_phi_72_pred_4;
                    _2956 = frontier_phi_72_pred_5;
                    uint _3101 = _3100 + 1u;
                    if (_3101 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3094 = _2956;
                        _3095 = _2958;
                        _3096 = _2960;
                        _3097 = _2962;
                        _3098 = _2964;
                        _3099 = _2966;
                        _3100 = _3101;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2966;
                frontier_phi_60_61_ladder_1 = _2964;
                frontier_phi_60_61_ladder_2 = _2960;
                frontier_phi_60_61_ladder_3 = _2958;
                frontier_phi_60_61_ladder_4 = _2956;
                frontier_phi_60_61_ladder_5 = _2962;
            }
            else
            {
                frontier_phi_60_61_ladder = _2852;
                frontier_phi_60_61_ladder_1 = _2850;
                frontier_phi_60_61_ladder_2 = _2846;
                frontier_phi_60_61_ladder_3 = _2844;
                frontier_phi_60_61_ladder_4 = _2842;
                frontier_phi_60_61_ladder_5 = _2848;
            }
            _2955 = frontier_phi_60_61_ladder_4;
            _2957 = frontier_phi_60_61_ladder_3;
            _2959 = frontier_phi_60_61_ladder_2;
            _2961 = frontier_phi_60_61_ladder_5;
            _2963 = frontier_phi_60_61_ladder_1;
            _2965 = frontier_phi_60_61_ladder;
        }
        float _2970 = isnan(1.0) ? _746 : (isnan(_746) ? 1.0 : min(_746, 1.0));
        _2775 = (_2970 * _2961) + _2287;
        _2777 = (_2970 * _2963) + _2289;
        _2779 = (_2970 * _2965) + _2291;
        _2781 = ((_2955 * _730) * _2970) + _2625;
        _2783 = ((_2957 * _732) * _2970) + _2627;
        _2785 = ((_2959 * _733) * _2970) + _2629;
    }
    else
    {
        _2775 = _2287;
        _2777 = _2289;
        _2779 = _2291;
        _2781 = _2625;
        _2783 = _2627;
        _2785 = _2629;
    }
    float _4712 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
    float _4723 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
    float _4734 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
    uint _2805 = _256 + 6u;
    float _2813 = _665 / cbSceneParam._m0[86u].x;
    float _2814 = _666 / cbSceneParam._m0[86u].y;
    vec4 _2828 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2813, _2814, (log2((isnan(cbSceneParam._m0[77u].w) ? _599 : (isnan(_599) ? cbSceneParam._m0[77u].w : min(_599, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2830 = _2828.x;
    float _2831 = _2828.y;
    float _2832 = _2828.z;
    float _2833 = _2828.w;
    float _2905;
    float _2907;
    float _2909;
    float _2911;
    if (_599 > cbSceneParam._m0[78u].w)
    {
        float _2867 = isnan(_599) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _599 : min(cbSceneParam._m0[80u].w, _599));
        float _2868 = _2867 / _599;
        float _2879 = _2868 * _650;
        float _2880 = _651 * _2868;
        float _2881 = (-0.0) - _2880;
        float _2883 = _2868 * _652;
        float _2885 = (cbSceneParam._m0[77u].w * _2881) / _2867;
        float _2886 = _2885 + cbSceneParam._m0[79u].w;
        float _2887 = cbSceneParam._m0[79u].w - _2880;
        float _2893 = sqrt(((_2879 * _2879) + (_2880 * _2880)) + (_2883 * _2883));
        float _2896 = (1.0 - (cbSceneParam._m0[77u].w / _2867)) * _2893;
        float _2901 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2903 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3056;
        if (abs((_2881 - _2885) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3056 = ((((_2886 > 0.0) ? exp2(_2901 * _2886) : (2.0 - exp2(_2903 * _2886))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2896;
        }
        else
        {
            float _3016 = 1.0 / cbSceneParam._m0[80u].x;
            float _3017 = isnan(_2887) ? _2886 : (isnan(_2886) ? _2887 : max(_2886, _2887));
            float _3018 = isnan(_2887) ? _2886 : (isnan(_2886) ? _2887 : min(_2886, _2887));
            float _3027 = isnan(0.0) ? _3017 : (isnan(_3017) ? 0.0 : min(_3017, 0.0));
            float _3028 = isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : min(_3018, 0.0));
            _3056 = ((abs(_2893 / _2881) * cbSceneParam._m0[80u].y) * ((((_3027 - _3028) * 2.0) - ((exp2(_2901 * (isnan(0.0) ? _3017 : (isnan(_3017) ? 0.0 : max(_3017, 0.0)))) - exp2(_2901 * (isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : max(_3018, 0.0))))) * _3016)) - ((exp2(_2903 * _3027) - exp2(_2903 * _3028)) * _3016))) + (_2896 * cbSceneParam._m0[80u].z);
        }
        vec4 _3058 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2813, _2814, 1.0), 0.0);
        float _3067 = exp2((_3056 * (-1.44269502162933349609375)) * (1.0 - _3058.w));
        float _3068 = log2(_3067);
        float _3084 = log2(_2833);
        _2905 = (exp2(_3084 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3068 * cbSceneParam._m0[78u].x)) * _3058.x) / cbSceneParam._m0[78u].x)) + _2830;
        _2907 = (exp2(_3084 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3068 * cbSceneParam._m0[78u].y)) * _3058.y) / cbSceneParam._m0[78u].y)) + _2831;
        _2909 = (exp2(_3084 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3068 * cbSceneParam._m0[78u].z)) * _3058.z) / cbSceneParam._m0[78u].z)) + _2832;
        _2911 = _3067 * _2833;
    }
    else
    {
        _2905 = _2830;
        _2907 = _2831;
        _2909 = _2832;
        _2911 = _2833;
    }
    float _2923 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2924 = _2923 == 3.0;
    float _2925 = log2(_2911);
    float _2932 = exp2(_2925 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0))) * (_2775 + ((isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0))) * _746))) + ((_2781 + ((isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0))) * _1554)) * cbPerFrame._m0[3u].x));
    float _2933 = exp2(_2925 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0))) * (_2777 + ((isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0))) * _746))) + ((_2783 + ((isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0))) * _1554)) * cbPerFrame._m0[3u].x));
    float _2934 = exp2(_2925 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0))) * (_2779 + ((isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0))) * _746))) + ((_2785 + ((isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0))) * _1554)) * cbPerFrame._m0[3u].x));
    float _2943 = (_2923 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2943 * (_2924 ? _2932 : (_2932 + (cbSceneParam._m0[72u].w * _2905)));
    SV_Target.y = _2943 * (_2924 ? _2933 : (_2933 + (cbSceneParam._m0[72u].w * _2907)));
    SV_Target.z = _2943 * (_2924 ? _2934 : (_2934 + (cbSceneParam._m0[72u].w * _2909)));
    SV_Target.w = cbInstanceData._m0[_2805].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2805].w;
}


