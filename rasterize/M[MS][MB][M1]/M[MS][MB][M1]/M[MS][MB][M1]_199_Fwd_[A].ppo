#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1454;
float _3832;
float _3833;
float _3834;
float _3835;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _231 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _232 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _233 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _239 = inversesqrt(dot(vec3(_231, _232, _233), vec3(_231, _232, _233)));
    float _246 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _253 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _267 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _269 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3844 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    float _3855 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _3866 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    uint _280 = uint(roundEven(NORMAL.w)) * 13u;
    uint _285 = _280 + 1u;
    uint _289 = _280 + 2u;
    float _298 = sqrt(((cbInstanceData._m0[_285].x * cbInstanceData._m0[_285].x) + (cbInstanceData._m0[_280].x * cbInstanceData._m0[_280].x)) + (cbInstanceData._m0[_289].x * cbInstanceData._m0[_289].x));
    float _299 = _298 * TEXCOORD.z;
    float _300 = _298 * TEXCOORD.w;
    vec4 _313 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _299) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _300) + cbTextureTilingScale._m0[13u].w));
    vec4 _337 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _342 = _337.x * cbMtdParam._m0[11u].x;
    float _343 = _337.y * cbMtdParam._m0[11u].y;
    float _344 = _337.z * cbMtdParam._m0[11u].z;
    vec4 _363 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _299) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _300) + cbTextureTilingScale._m0[5u].w));
    vec4 _400 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _402 = _400.x;
    float _414 = dot(vec4(_402, _400.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _431 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_402 - _414) * cbMtdParam._m0[24u].y) + _414) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3877 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _432 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
    float _439 = (_432 * ((_363.x * cbMtdParam._m0[12u].x) - _342)) + _342;
    float _440 = (_432 * ((_363.y * cbMtdParam._m0[12u].y) - _343)) + _343;
    float _441 = (_432 * ((_363.z * cbMtdParam._m0[12u].z) - _344)) + _344;
    vec4 _458 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _299) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _300) + cbTextureTilingScale._m0[3u].w));
    vec4 _478 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _480 = _478.x;
    float _490 = dot(vec4(_480, _478.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _504 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_480 - _490) * cbMtdParam._m0[24u].y) + _490) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3888 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _505 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
    float _512 = (_505 * ((_458.x * cbMtdParam._m0[13u].x) - _439)) + _439;
    float _513 = (_505 * ((_458.y * cbMtdParam._m0[13u].y) - _440)) + _440;
    float _514 = (_505 * ((_458.z * cbMtdParam._m0[13u].z) - _441)) + _441;
    float _518 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _313.x) * _512;
    float _521 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _313.y) * _513;
    float _524 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _313.z) * _514;
    float _531 = ((_512 - _518) * (isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0)))) + _518;
    float _532 = ((_513 - _521) * (isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0)))) + _521;
    float _533 = ((_514 - _524) * (isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0)))) + _524;
    vec4 _552 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _299) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _300) + cbTextureTilingScale._m0[14u].w));
    vec4 _571 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _299) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _300) + cbTextureTilingScale._m0[20u].w));
    vec4 _594 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _299) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _300) + cbTextureTilingScale._m0[4u].w));
    vec4 _611 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _613 = _611.x;
    float _614 = _611.y;
    float _615 = _611.z;
    float _622 = ((_594.x - _613) * _432) + _613;
    float _623 = ((_594.y - _614) * _432) + _614;
    float _624 = ((_594.z - _615) * _432) + _615;
    vec4 _636 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _299) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _300) + cbTextureTilingScale._m0[2u].w));
    float _649 = ((_636.z - _624) * _505) + _624;
    float _652 = ((((_636.x - _622) * _505) + _622) * 2.0) + (-1.0);
    float _653 = ((((_636.y - _623) * _505) + _623) * 2.0) + (-1.0);
    float _654 = dot(vec2(_652, _653), vec2(_652, _653));
    float _3899 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _659 = sqrt(1.0 - (isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0))));
    vec4 _673 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _698 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _299) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _300) + cbTextureTilingScale._m0[11u].w));
    float _700 = _698.x;
    float _701 = 1.0 - _700;
    float _714 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_700 - _701) * cbMtdParam._m0[24u].z) + _701) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3910 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
    float _715 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
    float _722 = (_715 * ((_552.x * cbMtdParam._m0[18u].x) - _531)) + _531;
    float _723 = (_715 * ((_552.y * cbMtdParam._m0[18u].y) - _532)) + _532;
    float _724 = (_715 * ((_552.z * cbMtdParam._m0[18u].z) - _533)) + _533;
    vec4 _736 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _750 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _752 = _750.x;
    float _770 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _299) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _300) + cbTextureTilingScale._m0[9u].w)).x - _752) * _432) + _752;
    float _787 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _299) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _300) + cbTextureTilingScale._m0[21u].w)).x - _770) * _505) + _770;
    float _791 = ((_736.x - _787) * cbMtdParam._m0[19u].z) + _787;
    float _793 = _791 - (_791 * _715);
    float _798 = (((_571.z - _649) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _649;
    float _802 = ((_673.z - _798) * cbMtdParam._m0[19u].w) + _798;
    vec4 _815 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _299) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _300) + cbTextureTilingScale._m0[15u].w));
    float _822 = (_815.x * 2.0) + (-1.0);
    float _823 = (_815.y * 2.0) + (-1.0);
    float _824 = dot(vec2(_822, _823), vec2(_822, _823));
    float _3921 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
    float _832 = (_715 * (_815.z - _802)) + _802;
    float _841 = (_652 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_571.x * 2.0) + (-1.0)))) + (((_673.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _842 = (_653 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_571.y * 2.0) + (-1.0)))) + (((_673.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _854 = (((_822 - _841) + (cbMtdParam._m0[21u].x * _841)) * _715) + _841;
    float _855 = (((_823 - _842) + (cbMtdParam._m0[21u].x * _842)) * _715) + _842;
    float _856 = (_715 * (sqrt(1.0 - (isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0)))) - _659)) + _659;
    float _860 = cbMtdParam._m0[22u].x + _673.w;
    float _863 = fma(_856, _246 * NORMAL.x, fma(_855, _253 * TANGENT.x, (_239 * _231) * _854));
    float _866 = fma(_856, _246 * NORMAL.y, fma(_855, _253 * TANGENT.y, (_239 * _232) * _854));
    float _869 = fma(_856, _246 * NORMAL.z, fma(_855, _253 * TANGENT.z, (_239 * _233) * _854));
    float _873 = inversesqrt(dot(vec3(_863, _866, _869), vec3(_863, _866, _869)));
    float _874 = _873 * _863;
    float _875 = _873 * _866;
    float _876 = _873 * _869;
    float _3932 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
    float _877 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
    float _3943 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
    float _3954 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
    float _3965 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    float _3976 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
    float _3987 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
    float _882 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
    float _896 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _937 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _947 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _937);
    float _948 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _937);
    float _949 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _937);
    float _953 = inversesqrt(dot(vec3(_947, _948, _949), vec3(_947, _948, _949)));
    float _954 = _947 * _953;
    float _955 = _948 * _953;
    float _956 = _949 * _953;
    vec4 _961 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _963 = _961.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1135 = sqrt(((_947 * _947) + (_948 * _948)) + (_949 * _949));
        float _1141 = (cbMatDynParam._m0[5u].x * _1135) + cbMatDynParam._m0[5u].y;
        float _3998 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1142 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
        float _1146 = (cbMatDynParam._m0[5u].z * _1135) + cbMatDynParam._m0[5u].w;
        float _4009 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0))) - _1142)) + _1142) < ((_963 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _974 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _975 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _993 = fma(_876, cbSceneParam._m0[5u].z, fma(_875, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _874));
    float _996 = fma(_876, cbSceneParam._m0[6u].z, fma(_875, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _874));
    float _999 = fma(_876, cbSceneParam._m0[7u].z, fma(_875, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _874));
    uint _1012 = _280 + 9u;
    uint _1013 = _1012 + uint(cbMatDynParam._m0[0u].w);
    float _1019 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0)))) * cbInstanceData._m0[_1013].x;
    float _1020 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0)))) * cbInstanceData._m0[_1013].y;
    float _1021 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0)))) * cbInstanceData._m0[_1013].z;
    float _4020 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
    float _1022 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
    float _4031 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
    float _1023 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
    float _4042 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
    float _1024 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
    float _1025 = 1.0 - _882;
    float _1026 = _1022 * _1025;
    float _1027 = _1023 * _1025;
    float _1028 = _1024 * _1025;
    float _1033 = (_1022 + (-0.039999999105930328369140625)) * _882;
    float _1034 = (_1023 + (-0.039999999105930328369140625)) * _882;
    float _1035 = (_1024 + (-0.039999999105930328369140625)) * _882;
    float _1036 = _1033 + 0.039999999105930328369140625;
    float _1038 = _1034 + 0.039999999105930328369140625;
    float _1039 = _1035 + 0.039999999105930328369140625;
    vec4 _1048 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _974, cbSceneParam._m0[86u].y * _975));
    float _1052 = ((isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0))) * TEXCOORD_5.w) * _1048.x;
    float _1053 = dot(vec3(_874, _875, _876), vec3(_954, _955, _956));
    float _1056 = _1053 * 2.0;
    float _1060 = (_1056 * _874) - _954;
    float _1061 = (_1056 * _875) - _955;
    float _1062 = (_1056 * _876) - _956;
    float _1066 = abs(dot(vec3(_954, _955, _956), vec3(_874, _875, _876)));
    float _4053 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
    float _1068 = sqrt(_877);
    float _1081 = exp2((_1068 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1068 * 3.0));
    float _1087 = (1.0 - _1081) * ((_1068 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1088 = _1081 * _1068;
    float _1116 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1120 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1124 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1453;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1178 = fma(_1124, cbModelParam._m0[26u].z, fma(_1120, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1116));
        float _1182 = fma(_1124, cbModelParam._m0[27u].z, fma(_1120, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1116));
        float _1186 = fma(_1124, cbModelParam._m0[28u].z, fma(_1120, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1116));
        float _1211 = _1116 + _874;
        float _1212 = _1120 + _875;
        float _1213 = _1124 + _876;
        float _1223 = fma(_1213, cbModelParam._m0[26u].z, fma(_1212, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1211)) - _1178;
        float _1224 = fma(_1213, cbModelParam._m0[27u].z, fma(_1212, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1211)) - _1182;
        float _1225 = fma(_1213, cbModelParam._m0[28u].z, fma(_1212, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1211)) - _1186;
        float _1229 = inversesqrt(dot(vec3(_1223, _1224, _1225), vec3(_1223, _1224, _1225)));
        float _1242 = ((_1229 * _1223) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1178 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1243 = ((_1229 * _1224) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1182 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1244 = ((_1229 * _1225) / cbModelParam._m0[34u].z) + ((((((_1186 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1247 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1242, _1243, _1244), 0.0);
        vec4 _1254 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1242, _1243, _1244), 0.0);
        vec4 _1261 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1242, _1243, _1244), 0.0);
        vec4 _1268 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1242, _1243, _1244), 0.0);
        float _1281 = exp2((_1247.w + (-0.5)) * 20.0) * 2.0;
        float _1282 = _1281 * (_1247.x + (-0.5));
        float _1283 = _1281 * (_1247.y + (-0.5));
        float _1284 = _1281 * (_1247.z + (-0.5));
        float _1291 = exp2((_1254.w + (-0.5)) * 20.0) * 2.0;
        float _1292 = _1291 * (_1254.x + (-0.5));
        float _1293 = _1291 * (_1254.y + (-0.5));
        float _1294 = _1291 * (_1254.z + (-0.5));
        float _1301 = exp2((_1261.w + (-0.5)) * 20.0) * 2.0;
        float _1302 = _1301 * (_1261.x + (-0.5));
        float _1303 = _1301 * (_1261.y + (-0.5));
        float _1304 = _1301 * (_1261.z + (-0.5));
        float _1311 = exp2((_1268.w + (-0.5)) * 20.0) * 2.0;
        float _1312 = _1311 * (_1268.x + (-0.5));
        float _1313 = _1311 * (_1268.y + (-0.5));
        float _1314 = _1311 * (_1268.z + (-0.5));
        float _1315 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1316 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1317 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1318 = _1282 * 0.5;
        float _1319 = _1292 * 0.5;
        float _1320 = _1302 * 0.5;
        float _1321 = dot(vec3(_1318, _1319, _1320), vec3(_1318, _1319, _1320));
        float _1326 = (_1321 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1321);
        float _1335 = (dot(vec3(_874, _875, _876), vec3(_1326 * _1318, _1326 * _1319, _1326 * _1320)) + 1.0) * 0.5;
        float _4079 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1345 = sqrt(((_1319 * _1319) + (_1318 * _1318)) + (_1320 * _1320)) / (_1315 + 9.9999997473787516355514526367188e-06);
        float _4090 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1346 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
        float _1347 = _1346 * 2.0;
        float _1351 = (1.0 - _1346) / (_1346 + 1.0);
        float _4101 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1352 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
        float _1361 = ((((1.0 - _1352) * (_1347 + 2.0)) * exp2(log2(isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0))) * (_1347 + 1.0))) + _1352) * _1315;
        float _1362 = _1283 * 0.5;
        float _1363 = _1293 * 0.5;
        float _1364 = _1303 * 0.5;
        float _1365 = dot(vec3(_1362, _1363, _1364), vec3(_1362, _1363, _1364));
        float _1370 = (_1365 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1365);
        float _1378 = (dot(vec3(_874, _875, _876), vec3(_1370 * _1362, _1370 * _1363, _1370 * _1364)) + 1.0) * 0.5;
        float _4112 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1387 = sqrt(((_1363 * _1363) + (_1362 * _1362)) + (_1364 * _1364)) / (_1316 + 9.9999997473787516355514526367188e-06);
        float _4123 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1388 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
        float _1389 = _1388 * 2.0;
        float _1393 = (1.0 - _1388) / (_1388 + 1.0);
        float _4134 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1394 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
        float _1403 = ((((1.0 - _1394) * (_1389 + 2.0)) * exp2(log2(isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0))) * (_1389 + 1.0))) + _1394) * _1316;
        float _1404 = _1284 * 0.5;
        float _1405 = _1294 * 0.5;
        float _1406 = _1304 * 0.5;
        float _1407 = dot(vec3(_1404, _1405, _1406), vec3(_1404, _1405, _1406));
        float _1412 = (_1407 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1407);
        float _1420 = (dot(vec3(_874, _875, _876), vec3(_1412 * _1404, _1412 * _1405, _1412 * _1406)) + 1.0) * 0.5;
        float _4145 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1429 = sqrt(((_1405 * _1405) + (_1404 * _1404)) + (_1406 * _1406)) / (_1317 + 9.9999997473787516355514526367188e-06);
        float _4156 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1430 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
        float _1431 = _1430 * 2.0;
        float _1435 = (1.0 - _1430) / (_1430 + 1.0);
        float _4167 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1436 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
        float _1445 = ((((1.0 - _1436) * (_1431 + 2.0)) * exp2(log2(isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0))) * (_1431 + 1.0))) + _1436) * _1317;
        _1453 = _1284;
        _1455 = _1283;
        _1456 = _1282;
        _1457 = _1294;
        _1458 = _1293;
        _1459 = _1292;
        _1460 = _1304;
        _1461 = _1303;
        _1462 = _1302;
        _1463 = _1317;
        _1464 = _1316;
        _1465 = _1315;
        _1466 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0)));
        _1467 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0)));
        _1468 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0)));
    }
    else
    {
        _1453 = _1454;
        _1455 = _1454;
        _1456 = _1454;
        _1457 = _1454;
        _1458 = _1454;
        _1459 = _1454;
        _1460 = _1454;
        _1461 = _1454;
        _1462 = _1454;
        _1463 = _1454;
        _1464 = _1454;
        _1465 = _1454;
        _1466 = 0.0;
        _1467 = 0.0;
        _1468 = 0.0;
    }
    float _1764;
    float _1765;
    float _1766;
    float _1767;
    float _1768;
    float _1769;
    float _1770;
    float _1771;
    float _1772;
    float _1773;
    float _1774;
    float _1775;
    float _1776;
    float _1777;
    float _1778;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1495 = fma(_1124, cbModelParam._m0[30u].z, fma(_1120, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1116));
        float _1499 = fma(_1124, cbModelParam._m0[31u].z, fma(_1120, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1116));
        float _1503 = fma(_1124, cbModelParam._m0[32u].z, fma(_1120, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1116));
        float _1526 = _1116 + _874;
        float _1527 = _1120 + _875;
        float _1528 = _1124 + _876;
        float _1538 = fma(_1528, cbModelParam._m0[30u].z, fma(_1527, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1526)) - _1495;
        float _1539 = fma(_1528, cbModelParam._m0[31u].z, fma(_1527, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1526)) - _1499;
        float _1540 = fma(_1528, cbModelParam._m0[32u].z, fma(_1527, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1526)) - _1503;
        float _1544 = inversesqrt(dot(vec3(_1538, _1539, _1540), vec3(_1538, _1539, _1540)));
        float _1557 = ((_1544 * _1538) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1495 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1558 = ((_1544 * _1539) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1499 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1559 = ((_1544 * _1540) / cbModelParam._m0[35u].z) + ((((((_1503 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1561 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1557, _1558, _1559), 0.0);
        vec4 _1568 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1557, _1558, _1559), 0.0);
        vec4 _1575 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1557, _1558, _1559), 0.0);
        vec4 _1582 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1557, _1558, _1559), 0.0);
        float _1594 = exp2((_1561.w + (-0.5)) * 20.0) * 2.0;
        float _1595 = _1594 * (_1561.x + (-0.5));
        float _1596 = _1594 * (_1561.y + (-0.5));
        float _1597 = _1594 * (_1561.z + (-0.5));
        float _1604 = exp2((_1568.w + (-0.5)) * 20.0) * 2.0;
        float _1605 = _1604 * (_1568.x + (-0.5));
        float _1606 = _1604 * (_1568.y + (-0.5));
        float _1607 = _1604 * (_1568.z + (-0.5));
        float _1614 = exp2((_1575.w + (-0.5)) * 20.0) * 2.0;
        float _1615 = _1614 * (_1575.x + (-0.5));
        float _1616 = _1614 * (_1575.y + (-0.5));
        float _1617 = _1614 * (_1575.z + (-0.5));
        float _1624 = exp2((_1582.w + (-0.5)) * 20.0) * 2.0;
        float _1625 = _1624 * (_1582.x + (-0.5));
        float _1626 = _1624 * (_1582.y + (-0.5));
        float _1627 = _1624 * (_1582.z + (-0.5));
        float _1628 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
        float _1629 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
        float _1630 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
        float _1631 = _1595 * 0.5;
        float _1632 = _1605 * 0.5;
        float _1633 = _1615 * 0.5;
        float _1634 = dot(vec3(_1631, _1632, _1633), vec3(_1631, _1632, _1633));
        float _1639 = (_1634 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1634);
        float _1647 = (dot(vec3(_874, _875, _876), vec3(_1639 * _1631, _1639 * _1632, _1639 * _1633)) + 1.0) * 0.5;
        float _4208 = isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0));
        float _1656 = sqrt(((_1632 * _1632) + (_1631 * _1631)) + (_1633 * _1633)) / (_1628 + 9.9999997473787516355514526367188e-06);
        float _4219 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
        float _1657 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
        float _1658 = _1657 * 2.0;
        float _1662 = (1.0 - _1657) / (_1657 + 1.0);
        float _4230 = isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0));
        float _1663 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
        float _1672 = ((((1.0 - _1663) * (_1658 + 2.0)) * exp2(log2(isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0))) * (_1658 + 1.0))) + _1663) * _1628;
        float _1673 = _1596 * 0.5;
        float _1674 = _1606 * 0.5;
        float _1675 = _1616 * 0.5;
        float _1676 = dot(vec3(_1673, _1674, _1675), vec3(_1673, _1674, _1675));
        float _1681 = (_1676 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1676);
        float _1689 = (dot(vec3(_874, _875, _876), vec3(_1681 * _1673, _1681 * _1674, _1681 * _1675)) + 1.0) * 0.5;
        float _4241 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
        float _1698 = sqrt(((_1674 * _1674) + (_1673 * _1673)) + (_1675 * _1675)) / (_1629 + 9.9999997473787516355514526367188e-06);
        float _4252 = isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0));
        float _1699 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
        float _1700 = _1699 * 2.0;
        float _1704 = (1.0 - _1699) / (_1699 + 1.0);
        float _4263 = isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0));
        float _1705 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
        float _1714 = ((((1.0 - _1705) * (_1700 + 2.0)) * exp2(log2(isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0))) * (_1700 + 1.0))) + _1705) * _1629;
        float _1715 = _1597 * 0.5;
        float _1716 = _1607 * 0.5;
        float _1717 = _1617 * 0.5;
        float _1718 = dot(vec3(_1715, _1716, _1717), vec3(_1715, _1716, _1717));
        float _1723 = (_1718 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1718);
        float _1731 = (dot(vec3(_874, _875, _876), vec3(_1723 * _1715, _1723 * _1716, _1723 * _1717)) + 1.0) * 0.5;
        float _4274 = isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0));
        float _1740 = sqrt(((_1716 * _1716) + (_1715 * _1715)) + (_1717 * _1717)) / (_1630 + 9.9999997473787516355514526367188e-06);
        float _4285 = isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0));
        float _1741 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
        float _1742 = _1741 * 2.0;
        float _1746 = (1.0 - _1741) / (_1741 + 1.0);
        float _4296 = isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0));
        float _1747 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
        float _1756 = ((((1.0 - _1747) * (_1742 + 2.0)) * exp2(log2(isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0))) * (_1742 + 1.0))) + _1747) * _1630;
        _1764 = _1597;
        _1765 = _1596;
        _1766 = _1595;
        _1767 = _1607;
        _1768 = _1606;
        _1769 = _1605;
        _1770 = _1617;
        _1771 = _1616;
        _1772 = _1615;
        _1773 = _1630;
        _1774 = _1629;
        _1775 = _1628;
        _1776 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0)));
        _1777 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0)));
        _1778 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0)));
    }
    else
    {
        _1764 = _1454;
        _1765 = _1454;
        _1766 = _1454;
        _1767 = _1454;
        _1768 = _1454;
        _1769 = _1454;
        _1770 = _1454;
        _1771 = _1454;
        _1772 = _1454;
        _1773 = _1454;
        _1774 = _1454;
        _1775 = _1454;
        _1776 = 0.0;
        _1777 = 0.0;
        _1778 = 0.0;
    }
    float _1788 = (cbModelParam._m0[1u].x * (_1776 - _1466)) + _1466;
    float _1789 = (cbModelParam._m0[1u].x * (_1777 - _1467)) + _1467;
    float _1790 = (cbModelParam._m0[1u].x * (_1778 - _1468)) + _1468;
    float _1811 = fma(_1790, cbSceneParam._m0[89u].z, fma(_1789, cbSceneParam._m0[89u].y, _1788 * cbSceneParam._m0[89u].x));
    float _1814 = fma(_1790, cbSceneParam._m0[90u].z, fma(_1789, cbSceneParam._m0[90u].y, _1788 * cbSceneParam._m0[90u].x));
    float _1817 = fma(_1790, cbSceneParam._m0[91u].z, fma(_1789, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1788));
    float _1832 = _1060 * 0.5;
    float _1833 = _1061 * 0.5;
    float _1834 = _1062 * 0.5;
    float _1835 = dot(vec4(_1832, _1833, _1834, 1.0), vec4(_1766, _1769, _1772, _1775));
    float _1838 = dot(vec4(_1832, _1833, _1834, 1.0), vec4(_1765, _1768, _1771, _1774));
    float _1841 = dot(vec4(_1832, _1833, _1834, 1.0), vec4(_1764, _1767, _1770, _1773));
    float _1875;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1848 = dot(vec4(_1832, _1833, _1834, 1.0), vec4(_1453, _1457, _1460, _1463));
        float _1852 = dot(vec4(_1832, _1833, _1834, 1.0), vec4(_1455, _1458, _1461, _1464));
        float _1856 = dot(vec4(_1832, _1833, _1834, 1.0), vec4(_1456, _1459, _1462, _1465));
        float _1863 = dot(vec4(cbModelParam._m0[39u]), vec4(_1832, _1833, _1834, 1.0));
        _1875 = dot(vec3(isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0)), isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0)), isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1863) ? 0.0 : (isnan(0.0) ? _1863 : max(0.0, _1863))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1875 = 1.0;
    }
    float _1886;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1877 = dot(vec4(cbModelParam._m0[40u]), vec4(_1832, _1833, _1834, 1.0));
        _1886 = dot(vec3(isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0)), isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0)), isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1877) ? 0.0 : (isnan(0.0) ? _1877 : max(0.0, _1877))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1886 = 1.0;
    }
    float _1890 = (_1886 * cbModelParam._m0[1u].x) + (_1875 * (1.0 - cbModelParam._m0[1u].x));
    float _1900 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _877);
    float _1901 = isnan(_1900) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1900 : min(cbModelParam._m0[25u].z, _1900));
    float _1981;
    float _1983;
    float _1985;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1948 = fma(_1124, cbModelParam._m0[13u].z, fma(_1120, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1116)) + cbModelParam._m0[13u].w;
        float _1952 = fma(_1124, cbModelParam._m0[14u].z, fma(_1120, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1116)) + cbModelParam._m0[14u].w;
        float _1956 = fma(_1124, cbModelParam._m0[15u].z, fma(_1120, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1116)) + cbModelParam._m0[15u].w;
        float _1959 = fma(_1062, cbModelParam._m0[13u].z, fma(_1061, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1060));
        float _1962 = fma(_1062, cbModelParam._m0[14u].z, fma(_1061, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1060));
        float _1965 = fma(_1062, cbModelParam._m0[15u].z, fma(_1061, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1060));
        float _1993;
        if (_1959 > 0.0)
        {
            _1993 = abs((1.0 - _1948) / _1959);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1959 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1948 + 1.0) / _1959);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1993 = frontier_phi_17_15_ladder;
        }
        float _2195;
        if (_1962 > 0.0)
        {
            _2195 = abs((1.0 - _1952) / _1962);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1962 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1952 + 1.0) / _1962);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2195 = frontier_phi_26_22_ladder;
        }
        float _2449;
        if (_1965 > 0.0)
        {
            _2449 = abs((1.0 - _1956) / _1965);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1965 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1956 + 1.0) / _1965);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2449 = frontier_phi_38_33_ladder;
        }
        float _2451 = isnan(_2195) ? _1993 : (isnan(_1993) ? _2195 : min(_1993, _2195));
        float _2452 = isnan(_2449) ? _2451 : (isnan(_2451) ? _2449 : min(_2451, _2449));
        float _2456 = (_2452 * _1959) + _1948;
        float _2457 = (_2452 * _1962) + _1952;
        float _2458 = (_2452 * _1965) + _1956;
        float _2459 = _2452 * 9.9999997473787516355514526367188e-05;
        float _2461 = (-1.0) - _2459;
        float _2463 = _2459 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2458 > _2463) || ((_2458 < _2461) || ((_2457 > _2463) || ((_2457 < _2461) || ((_2456 < _2461) || (_2456 > _2463))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2586 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2458, cbModelParam._m0[9u].z, fma(_2457, cbModelParam._m0[9u].y, _2456 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2458, cbModelParam._m0[10u].z, fma(_2457, cbModelParam._m0[10u].y, _2456 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2458, cbModelParam._m0[11u].z, fma(_2457, cbModelParam._m0[11u].y, _2456 * cbModelParam._m0[11u].x))), _1901);
            frontier_phi_16_38_ladder = _2586.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2586.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2586.x * cbModelParam._m0[1u].y;
        }
        _1981 = frontier_phi_16_38_ladder_2;
        _1983 = frontier_phi_16_38_ladder_1;
        _1985 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1969 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1060, _1061, _1062), _1901);
        _1981 = _1969.x * cbModelParam._m0[1u].y;
        _1983 = _1969.y * cbModelParam._m0[1u].y;
        _1985 = _1969.z * cbModelParam._m0[1u].y;
    }
    float _1989 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _877);
    float _1990 = isnan(_1989) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1989 : min(cbModelParam._m0[25u].w, _1989));
    float _2079;
    float _2081;
    float _2083;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2043 = fma(_1124, cbModelParam._m0[21u].z, fma(_1120, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1116)) + cbModelParam._m0[21u].w;
        float _2047 = fma(_1124, cbModelParam._m0[22u].z, fma(_1120, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1116)) + cbModelParam._m0[22u].w;
        float _2051 = fma(_1124, cbModelParam._m0[23u].z, fma(_1120, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1116)) + cbModelParam._m0[23u].w;
        float _2054 = fma(_1062, cbModelParam._m0[21u].z, fma(_1061, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1060));
        float _2057 = fma(_1062, cbModelParam._m0[22u].z, fma(_1061, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1060));
        float _2060 = fma(_1062, cbModelParam._m0[23u].z, fma(_1061, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1060));
        float _2200;
        if (_2054 > 0.0)
        {
            _2200 = abs((1.0 - _2043) / _2054);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2054 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2043 + 1.0) / _2054);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2200 = frontier_phi_28_24_ladder;
        }
        float _2476;
        if (_2057 > 0.0)
        {
            _2476 = abs((1.0 - _2047) / _2057);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2057 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2047 + 1.0) / _2057);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2476 = frontier_phi_40_35_ladder;
        }
        float _2689;
        if (_2060 > 0.0)
        {
            _2689 = abs((1.0 - _2051) / _2060);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2060 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2051 + 1.0) / _2060);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2689 = frontier_phi_49_46_ladder;
        }
        float _2691 = isnan(_2476) ? _2200 : (isnan(_2200) ? _2476 : min(_2200, _2476));
        float _2692 = isnan(_2689) ? _2691 : (isnan(_2691) ? _2689 : min(_2691, _2689));
        float _2696 = (_2692 * _2054) + _2043;
        float _2697 = (_2692 * _2057) + _2047;
        float _2698 = (_2692 * _2060) + _2051;
        float _2699 = _2692 * 9.9999997473787516355514526367188e-05;
        float _2700 = (-1.0) - _2699;
        float _2702 = _2699 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2698 > _2702) || ((_2698 < _2700) || ((_2697 > _2702) || ((_2697 < _2700) || ((_2696 < _2700) || (_2696 > _2702))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2897 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2698, cbModelParam._m0[17u].z, fma(_2697, cbModelParam._m0[17u].y, _2696 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2698, cbModelParam._m0[18u].z, fma(_2697, cbModelParam._m0[18u].y, _2696 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2698, cbModelParam._m0[19u].z, fma(_2697, cbModelParam._m0[19u].y, _2696 * cbModelParam._m0[19u].x))), _1990);
            frontier_phi_25_49_ladder = _2897.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2897.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2897.x * cbModelParam._m0[1u].z;
        }
        _2079 = frontier_phi_25_49_ladder_2;
        _2081 = frontier_phi_25_49_ladder_1;
        _2083 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2063 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1060, _1061, _1062), _1990);
        _2079 = _2063.x * cbModelParam._m0[1u].z;
        _2081 = _2063.y * cbModelParam._m0[1u].z;
        _2083 = _2063.z * cbModelParam._m0[1u].z;
    }
    float _2096 = (((_1087 * _1036) + _1088) * _1052) * ((cbModelParam._m0[1u].w * (_2079 - _1981)) + _1981);
    float _2098 = (((_1087 * _1038) + _1088) * _1052) * ((cbModelParam._m0[1u].w * (_2081 - _1983)) + _1983);
    float _2100 = (((_1087 * _1039) + _1088) * _1052) * ((cbModelParam._m0[1u].w * (_2083 - _1985)) + _1985);
    float _2103 = fma(_2100, cbSceneParam._m0[89u].z, fma(_2098, cbSceneParam._m0[89u].y, _2096 * cbSceneParam._m0[89u].x));
    float _2106 = fma(_2100, cbSceneParam._m0[90u].z, fma(_2098, cbSceneParam._m0[90u].y, _2096 * cbSceneParam._m0[90u].x));
    float _2109 = fma(_2100, cbSceneParam._m0[91u].z, fma(_2098, cbSceneParam._m0[91u].y, _2096 * cbSceneParam._m0[91u].x));
    uvec4 _2119 = floatBitsToUint(cbInstanceData._m0[_280 + 5u]);
    uint _2121 = _2119.x * 14u;
    uint _2122 = _2121 + 13u;
    float _2129 = _1052 + (-1.0);
    float _2134 = (cbLight._m0[_2122].x * _2129) + 1.0;
    float _2135 = (cbLight._m0[_2122].y * _2129) + 1.0;
    float _2136 = (cbLight._m0[_2122].z * _2129) + 1.0;
    float _2137 = (cbLight._m0[_2122].w * _2129) + 1.0;
    uint _2138 = _2121 + 5u;
    float _2144 = isnan(1.0) ? _2135 : (isnan(_2135) ? 1.0 : min(_2135, 1.0));
    uint _2148 = _2121 + 4u;
    float _2154 = isnan(1.0) ? _2134 : (isnan(_2134) ? 1.0 : min(_2134, 1.0));
    uint _2158 = _2121 | 1u;
    float _2169 = dot(vec3(cbLight._m0[_2121].xyz), vec3(_874, _875, _876));
    float _2172 = dot(vec3(cbLight._m0[_2158].xyz), vec3(_874, _875, _876));
    float _4432 = isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0));
    float _4443 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
    float _2177 = (isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0))) * 0.3183098733425140380859375;
    float _2179 = (isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0))) * 0.3183098733425140380859375;
    float _2186 = ((cbLight._m0[_2138].x * _2144) * _2179) + ((cbLight._m0[_2148].x * _2154) * _2177);
    float _2187 = ((_2144 * cbLight._m0[_2138].y) * _2179) + ((_2154 * cbLight._m0[_2148].y) * _2177);
    float _2188 = ((_2144 * cbLight._m0[_2138].z) * _2179) + ((_2154 * cbLight._m0[_2148].z) * _2177);
    uvec4 _2192 = floatBitsToUint(cbLight._m0[_2121 + 12u]);
    bool _2194 = _2192.x == 0u;
    float _2205;
    float _2207;
    float _2209;
    if (_2194)
    {
        _2205 = _2186;
        _2207 = _2187;
        _2209 = _2188;
    }
    else
    {
        uint _2213 = _2121 + 6u;
        float _2229 = (dot(vec3(cbLight._m0[_2121 + 2u].xyz), vec3(_874, _875, _876)) * 0.5) + 0.5;
        float _2230 = _2229 * _2229;
        float _4454 = isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0));
        float _2231 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
        float _2232 = isnan(1.0) ? _2136 : (isnan(_2136) ? 1.0 : min(_2136, 1.0));
        _2205 = (((cbLight._m0[_2213].x * 0.3183098733425140380859375) * _2231) * _2232) + _2186;
        _2207 = (((cbLight._m0[_2213].y * 0.3183098733425140380859375) * _2231) * _2232) + _2187;
        _2209 = (((cbLight._m0[_2213].z * 0.3183098733425140380859375) * _2231) * _2232) + _2188;
    }
    bool _2212 = _2192.y == 0u;
    float _2250;
    float _2252;
    float _2254;
    if (_2212)
    {
        _2250 = _2205;
        _2252 = _2207;
        _2254 = _2209;
    }
    else
    {
        uint _2420 = _2121 + 7u;
        float _2436 = (dot(vec3(cbLight._m0[_2121 + 3u].xyz), vec3(_874, _875, _876)) * 0.5) + 0.5;
        float _2437 = _2436 * _2436;
        float _4470 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
        float _2438 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
        float _2439 = isnan(1.0) ? _2137 : (isnan(_2137) ? 1.0 : min(_2137, 1.0));
        _2250 = (((cbLight._m0[_2420].x * 0.3183098733425140380859375) * _2438) * _2439) + _2205;
        _2252 = (((cbLight._m0[_2420].y * 0.3183098733425140380859375) * _2438) * _2439) + _2207;
        _2254 = (((cbLight._m0[_2420].z * 0.3183098733425140380859375) * _2438) * _2439) + _2209;
    }
    uint _2257 = _2121 + 8u;
    float _2270 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2121].w)) * _877) * 0.949999988079071044921875);
    float _2271 = _2270 * _2270;
    float _2272 = cbLight._m0[_2121].x + _954;
    float _2273 = cbLight._m0[_2121].y + _955;
    float _2274 = cbLight._m0[_2121].z + _956;
    float _2278 = inversesqrt(dot(vec3(_2272, _2273, _2274), vec3(_2272, _2273, _2274)));
    float _2279 = _2278 * _2272;
    float _2280 = _2278 * _2273;
    float _2281 = _2278 * _2274;
    float _2282 = dot(vec3(_874, _875, _876), vec3(cbLight._m0[_2121].xyz));
    float _4486 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
    float _2285 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
    float _4497 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
    float _2286 = isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0));
    float _2287 = dot(vec3(_874, _875, _876), vec3(_2279, _2280, _2281));
    float _4508 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
    float _2290 = isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0));
    float _2291 = dot(vec3(cbLight._m0[_2121].xyz), vec3(_2279, _2280, _2281));
    float _4519 = isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0));
    float _2295 = _2271 * _2271;
    float _2299 = ((_2290 * _2290) * (_2295 + (-1.0))) + 1.0;
    float _2307 = exp2(log2(1.0 - (isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0)))) * 5.0);
    float _2308 = 0.959999978542327880859375 - _1033;
    float _2310 = 0.959999978542327880859375 - _1034;
    float _2311 = 0.959999978542327880859375 - _1035;
    float _2318 = 1.0 - _2271;
    float _2329 = (0.5 / (((_2286 * ((_2285 * _2318) + _2271)) + 9.9999999392252902907785028219223e-09) + (((_2286 * _2318) + _2271) * _2285))) * _2285;
    float _4530 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
    float _2331 = (isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0))) * (_2295 / ((_2299 * _2299) * 3.141590118408203125));
    uint _2342 = _2121 + 9u;
    float _2353 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2158].w)) * _877) * 0.949999988079071044921875);
    float _2354 = _2353 * _2353;
    float _2355 = cbLight._m0[_2158].x + _954;
    float _2356 = cbLight._m0[_2158].y + _955;
    float _2357 = cbLight._m0[_2158].z + _956;
    float _2361 = inversesqrt(dot(vec3(_2355, _2356, _2357), vec3(_2355, _2356, _2357)));
    float _2362 = _2361 * _2355;
    float _2363 = _2361 * _2356;
    float _2364 = _2361 * _2357;
    float _2365 = dot(vec3(_874, _875, _876), vec3(cbLight._m0[_2158].xyz));
    float _4541 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
    float _2368 = isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0));
    float _2369 = dot(vec3(_874, _875, _876), vec3(_2362, _2363, _2364));
    float _4552 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
    float _2372 = isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0));
    float _2373 = dot(vec3(cbLight._m0[_2158].xyz), vec3(_2362, _2363, _2364));
    float _4563 = isnan(0.0) ? _2373 : (isnan(_2373) ? 0.0 : max(_2373, 0.0));
    float _2377 = _2354 * _2354;
    float _2381 = ((_2372 * _2372) * (_2377 + (-1.0))) + 1.0;
    float _2388 = exp2(log2(1.0 - (isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0)))) * 5.0);
    float _2395 = 1.0 - _2354;
    float _2405 = (0.5 / (((_2286 * ((_2368 * _2395) + _2354)) + 9.9999999392252902907785028219223e-09) + (((_2286 * _2395) + _2354) * _2368))) * _2368;
    float _4574 = isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : max(_2405, 0.0));
    float _2407 = (isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0))) * (_2377 / ((_2381 * _2381) * 3.141590118408203125));
    float _2417 = (((((_2388 * _2308) + _1036) * cbLight._m0[_2342].x) * _2407) * _2144) + (((((_2307 * _2308) + _1036) * cbLight._m0[_2257].x) * _2331) * _2154);
    float _2418 = (((((_2388 * _2310) + _1038) * cbLight._m0[_2342].y) * _2407) * _2144) + (((((_2307 * _2310) + _1038) * cbLight._m0[_2257].y) * _2331) * _2154);
    float _2419 = (((((_2388 * _2311) + _1039) * cbLight._m0[_2342].z) * _2407) * _2144) + (((((_2307 * _2311) + _1039) * cbLight._m0[_2257].z) * _2331) * _2154);
    float _2481;
    float _2483;
    float _2485;
    if (_2194)
    {
        _2481 = _2417;
        _2483 = _2418;
        _2485 = _2419;
    }
    else
    {
        uint _2487 = _2121 + 2u;
        uint _2491 = _2121 + 10u;
        float _2505 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2487].w)) * _877) * 0.949999988079071044921875);
        float _2506 = _2505 * _2505;
        float _2507 = cbLight._m0[_2487].x + _954;
        float _2508 = cbLight._m0[_2487].y + _955;
        float _2509 = cbLight._m0[_2487].z + _956;
        float _2513 = inversesqrt(dot(vec3(_2507, _2508, _2509), vec3(_2507, _2508, _2509)));
        float _2514 = _2513 * _2507;
        float _2515 = _2513 * _2508;
        float _2516 = _2513 * _2509;
        float _2517 = dot(vec3(_874, _875, _876), vec3(cbLight._m0[_2487].xyz));
        float _4585 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0));
        float _2520 = isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0));
        float _2521 = dot(vec3(_874, _875, _876), vec3(_2514, _2515, _2516));
        float _4596 = isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : max(_2521, 0.0));
        float _2524 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
        float _2525 = dot(vec3(cbLight._m0[_2487].xyz), vec3(_2514, _2515, _2516));
        float _4607 = isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : max(_2525, 0.0));
        float _2529 = _2506 * _2506;
        float _2533 = ((_2524 * _2524) * (_2529 + (-1.0))) + 1.0;
        float _2540 = exp2(log2(1.0 - (isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0)))) * 5.0);
        float _2547 = 1.0 - _2506;
        float _2557 = (0.5 / (((_2286 * ((_2520 * _2547) + _2506)) + 9.9999999392252902907785028219223e-09) + (((_2286 * _2547) + _2506) * _2520))) * _2520;
        float _4618 = isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : max(_2557, 0.0));
        float _2559 = (isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0))) * (_2529 / ((_2533 * _2533) * 3.141590118408203125));
        float _2560 = isnan(1.0) ? _2136 : (isnan(_2136) ? 1.0 : min(_2136, 1.0));
        _2481 = (((((_2540 * _2308) + _1036) * cbLight._m0[_2491].x) * _2559) * _2560) + _2417;
        _2483 = (((((_2540 * _2310) + _1038) * cbLight._m0[_2491].y) * _2559) * _2560) + _2418;
        _2485 = (((((_2540 * _2311) + _1039) * cbLight._m0[_2491].z) * _2559) * _2560) + _2419;
    }
    float _2595;
    float _2597;
    float _2599;
    if (_2212)
    {
        _2595 = _2481;
        _2597 = _2483;
        _2599 = _2485;
    }
    else
    {
        uint _2606 = _2121 + 3u;
        uint _2610 = _2121 + 11u;
        float _2624 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2606].w)) * _877) * 0.949999988079071044921875);
        float _2625 = _2624 * _2624;
        float _2626 = cbLight._m0[_2606].x + _954;
        float _2627 = cbLight._m0[_2606].y + _955;
        float _2628 = cbLight._m0[_2606].z + _956;
        float _2632 = inversesqrt(dot(vec3(_2626, _2627, _2628), vec3(_2626, _2627, _2628)));
        float _2633 = _2632 * _2626;
        float _2634 = _2632 * _2627;
        float _2635 = _2632 * _2628;
        float _2636 = dot(vec3(_874, _875, _876), vec3(cbLight._m0[_2606].xyz));
        float _4634 = isnan(0.0) ? _2636 : (isnan(_2636) ? 0.0 : max(_2636, 0.0));
        float _2639 = isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0));
        float _2640 = dot(vec3(_874, _875, _876), vec3(_2633, _2634, _2635));
        float _4645 = isnan(0.0) ? _2640 : (isnan(_2640) ? 0.0 : max(_2640, 0.0));
        float _2643 = isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0));
        float _2644 = dot(vec3(cbLight._m0[_2606].xyz), vec3(_2633, _2634, _2635));
        float _4656 = isnan(0.0) ? _2644 : (isnan(_2644) ? 0.0 : max(_2644, 0.0));
        float _2648 = _2625 * _2625;
        float _2652 = ((_2643 * _2643) * (_2648 + (-1.0))) + 1.0;
        float _2659 = exp2(log2(1.0 - (isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0)))) * 5.0);
        float _2666 = 1.0 - _2625;
        float _2676 = (0.5 / (((_2286 * ((_2639 * _2666) + _2625)) + 9.9999999392252902907785028219223e-09) + (((_2286 * _2666) + _2625) * _2639))) * _2639;
        float _4667 = isnan(0.0) ? _2676 : (isnan(_2676) ? 0.0 : max(_2676, 0.0));
        float _2678 = (isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0))) * (_2648 / ((_2652 * _2652) * 3.141590118408203125));
        float _2679 = isnan(1.0) ? _2137 : (isnan(_2137) ? 1.0 : min(_2137, 1.0));
        _2595 = (((((_2659 * _2308) + _1036) * cbLight._m0[_2610].x) * _2678) * _2679) + _2481;
        _2597 = (((((_2659 * _2310) + _1038) * cbLight._m0[_2610].y) * _2678) * _2679) + _2483;
        _2599 = (((((_2659 * _2311) + _1039) * cbLight._m0[_2610].z) * _2678) * _2679) + _2485;
    }
    float _2814;
    float _2816;
    float _2818;
    float _2820;
    float _2822;
    float _2824;
    if (_2119.y == 0u)
    {
        float _2754 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2755 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2754;
        float _2756 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2754;
        float _2757 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2754;
        uvec4 _2769 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2770 = _2769.x;
        uint _2781 = uint((float(_2769.y) * floor(float(uint(cbSceneParam._m0[85u].y * _975) / _2770))) + floor(float(uint(cbSceneParam._m0[85u].x * _974) / _2770)));
        float _2791 = (log2(_2757 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2792 = isnan(0.0) ? _2791 : (isnan(_2791) ? 0.0 : max(_2791, 0.0));
        uint _2795 = uint(isnan(14.0) ? _2792 : (isnan(_2792) ? 14.0 : min(_2792, 14.0)));
        uvec4 _2800 = texelFetch(g_lightClusterGridBuffer, int(((_2795 << 2u) + (_2781 << 6u)) >> 2u));
        uint _2801 = _2800.x;
        uint _2802 = _2769.z;
        float _2902;
        float _2904;
        float _2906;
        float _2908;
        float _2910;
        float _2912;
        if (((((1u << ((_2802 >> 4u) & 15u)) + 4294967295u) & _2801) == 0u) || ((_2802 & 240u) == 0u))
        {
            _2902 = 0.0;
            _2904 = 0.0;
            _2906 = 0.0;
            _2908 = 0.0;
            _2910 = 0.0;
            _2912 = 0.0;
        }
        else
        {
            float _2903;
            float _2905;
            float _2907;
            float _2909;
            float _2911;
            float _2913;
            float _3055 = 0.0;
            float _3056 = 0.0;
            float _3057 = 0.0;
            float _3058 = 0.0;
            float _3059 = 0.0;
            float _3060 = 0.0;
            uint _3061 = 0u;
            uint _3070;
            bool _3071;
            for (;;)
            {
                _3070 = texelFetch(g_lightClassification, int((((_2795 << 5u) + (_2781 << 9u)) + (_3061 << 2u)) >> 2u)).x;
                _3071 = _3070 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3071)
                {
                    frontier_phi_66_pred = _3055;
                    frontier_phi_66_pred_1 = _3060;
                    frontier_phi_66_pred_2 = _3059;
                    frontier_phi_66_pred_3 = _3058;
                    frontier_phi_66_pred_4 = _3057;
                    frontier_phi_66_pred_5 = _3056;
                }
                else
                {
                    float _3200;
                    float _3201;
                    float _3202;
                    float _3203;
                    float _3204;
                    float _3205;
                    uint _3206;
                    _3200 = _3055;
                    _3201 = _3056;
                    _3202 = _3057;
                    _3203 = _3058;
                    _3204 = _3059;
                    _3205 = _3060;
                    _3206 = _3070;
                    float _3127;
                    float _3128;
                    float _3129;
                    float _3130;
                    float _3131;
                    float _3132;
                    for (;;)
                    {
                        uint _3210 = uint(findLSB(_3206)) + (_3061 << 5u);
                        uint _3207 = (_3206 + 4294967295u) & _3206;
                        uint _3212 = _3210 * 48u;
                        vec4 _3226 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3212)).x, texelFetch(g_PointLightRenderingBuffer, int(_3212 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3212 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3212 + 3u)).x));
                        uint _3232 = (_3210 * 48u) + 4u;
                        vec4 _3245 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3232)).x, texelFetch(g_PointLightRenderingBuffer, int(_3232 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3232 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3232 + 3u)).x));
                        uint _3251 = (_3210 * 48u) + 8u;
                        vec3 _3262 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3251)).x, texelFetch(g_PointLightRenderingBuffer, int(_3251 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3251 + 2u)).x));
                        float _3266 = _3226.x - _2755;
                        float _3267 = _3226.y - _2756;
                        float _3268 = _3226.z - _2757;
                        float _3269 = dot(vec3(_3266, _3267, _3268), vec3(_3266, _3267, _3268));
                        float _3272 = inversesqrt(_3269);
                        float _3273 = _3272 * _3266;
                        float _3274 = _3272 * _3267;
                        float _3275 = _3272 * _3268;
                        float _3276 = dot(vec3(_993, _996, _999), vec3(_3273, _3274, _3275));
                        float _3281 = 1.0 - (_3269 * _3226.w);
                        float _4693 = isnan(0.0) ? _3281 : (isnan(_3281) ? 0.0 : max(_3281, 0.0));
                        float _3282 = isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0));
                        float _3283 = sqrt(_3269) * _3245.w;
                        float _3286 = 1.39999997615814208984375 / (_3283 + 1.39999997615814208984375);
                        float _3287 = _3286 * _3286;
                        float _3290 = ((1.0 - _3287) * _3276) + _3287;
                        float _3293 = _3283 * _3283;
                        float _3297 = ((isnan(0.0) ? _3290 : (isnan(_3290) ? 0.0 : max(_3290, 0.0))) * _3282) / ((_3293 * 0.699999988079071044921875) + 1.0);
                        float _3301 = (-0.0) - _2755;
                        float _3302 = (-0.0) - _2756;
                        float _3303 = (-0.0) - _2757;
                        float _3307 = inversesqrt(dot(vec3(_3301, _3302, _3303), vec3(_3301, _3302, _3303)));
                        float _3308 = _3307 * _3301;
                        float _3309 = _3307 * _3302;
                        float _3310 = _3307 * _3303;
                        float _3318 = exp2(log2(1.0 / ((_3293 * 3.5) + 5.0)) * 0.25);
                        float _3319 = 1.0 - _1068;
                        float _3326 = sqrt(1.0 - ((1.0 - (_3319 * _3319)) * (1.0 - (_3318 * _3318))));
                        float _3327 = _3326 * _3326;
                        float _3328 = _3327 * _3327;
                        float _3329 = _3308 + _3273;
                        float _3330 = _3309 + _3274;
                        float _3331 = _3310 + _3275;
                        float _3335 = inversesqrt(dot(vec3(_3329, _3330, _3331), vec3(_3329, _3330, _3331)));
                        float _3339 = dot(vec3(_993, _996, _999), vec3(_3308, _3309, _3310));
                        float _4709 = isnan(0.0) ? _3339 : (isnan(_3339) ? 0.0 : max(_3339, 0.0));
                        float _3342 = isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0));
                        float _3343 = dot(vec3(_993, _996, _999), vec3(_3335 * _3329, _3335 * _3330, _3335 * _3331));
                        float _4720 = isnan(0.0) ? _3343 : (isnan(_3343) ? 0.0 : max(_3343, 0.0));
                        float _3346 = isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0));
                        float _3350 = ((_3346 * _3346) * (_3328 + (-1.0))) + 1.0;
                        float _3351 = _3286 * _3327;
                        float _3352 = _3351 * _3351;
                        float _3355 = ((1.0 - _3352) * _3276) + _3352;
                        float _4731 = isnan(0.0) ? _3355 : (isnan(_3355) ? 0.0 : max(_3355, 0.0));
                        float _3356 = isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0));
                        float _3357 = 1.0 - _3327;
                        float _3367 = (0.5 / (((_3356 * ((_3342 * _3357) + _3327)) + 9.9999999392252902907785028219223e-09) + (((_3356 * _3357) + _3327) * _3342))) * _3356;
                        float _4742 = isnan(0.0) ? _3367 : (isnan(_3367) ? 0.0 : max(_3367, 0.0));
                        float _3378 = (((_3328 * 3.1415927410125732421875) * (isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0)))) / ((_3350 * _3350) * ((_3293 * 2.1991131305694580078125) + 3.141590118408203125))) * _3282;
                        _3130 = (_3297 * _3245.x) + _3203;
                        _3131 = (_3297 * _3245.y) + _3204;
                        _3132 = (_3297 * _3245.z) + _3205;
                        _3127 = (_3378 * _3262.x) + _3200;
                        _3128 = (_3378 * _3262.y) + _3201;
                        _3129 = (_3378 * _3262.z) + _3202;
                        if (_3207 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3200 = _3127;
                            _3201 = _3128;
                            _3202 = _3129;
                            _3203 = _3130;
                            _3204 = _3131;
                            _3205 = _3132;
                            _3206 = _3207;
                        }
                    }
                    frontier_phi_66_pred = _3127;
                    frontier_phi_66_pred_1 = _3132;
                    frontier_phi_66_pred_2 = _3131;
                    frontier_phi_66_pred_3 = _3130;
                    frontier_phi_66_pred_4 = _3129;
                    frontier_phi_66_pred_5 = _3128;
                }
                _2903 = frontier_phi_66_pred;
                _2913 = frontier_phi_66_pred_1;
                _2911 = frontier_phi_66_pred_2;
                _2909 = frontier_phi_66_pred_3;
                _2907 = frontier_phi_66_pred_4;
                _2905 = frontier_phi_66_pred_5;
                uint _3062 = _3061 + 1u;
                if (_3062 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3055 = _2903;
                    _3056 = _2905;
                    _3057 = _2907;
                    _3058 = _2909;
                    _3059 = _2911;
                    _3060 = _2913;
                    _3061 = _3062;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2902 = _2903;
            _2904 = _2905;
            _2906 = _2907;
            _2908 = _2909;
            _2910 = _2911;
            _2912 = _2913;
        }
        uvec4 _2916 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2917 = _2916.z;
        uint _2919 = (_2917 >> 8u) & 15u;
        float _3023;
        float _3025;
        float _3027;
        float _3029;
        float _3031;
        float _3033;
        if (((4294967295u << _2919) & _2801) == 0u)
        {
            _3023 = _2902;
            _3025 = _2904;
            _3027 = _2906;
            _3029 = _2908;
            _3031 = _2910;
            _3033 = _2912;
        }
        else
        {
            float _3048 = inversesqrt(dot(vec3(_2755, _2756, _2757), vec3(_2755, _2756, _2757)));
            float _3049 = _3048 * _2755;
            float _3050 = _3048 * _2756;
            float _3051 = _3048 * _2757;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2919 < ((_2917 >> 12u) & 15u))
            {
                float _3024;
                float _3026;
                float _3028;
                float _3030;
                float _3032;
                float _3034;
                float _3183 = _2902;
                float _3184 = _2904;
                float _3185 = _2906;
                float _3186 = _2908;
                float _3187 = _2910;
                float _3188 = _2912;
                uint _3189 = _2919;
                uint _3198;
                bool _3199;
                for (;;)
                {
                    _3198 = texelFetch(g_lightClassification, int((((_2795 << 5u) + (_2781 << 9u)) + (_3189 << 2u)) >> 2u)).x;
                    _3199 = _3198 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3199)
                    {
                        frontier_phi_77_pred = _3188;
                        frontier_phi_77_pred_1 = _3187;
                        frontier_phi_77_pred_2 = _3186;
                        frontier_phi_77_pred_3 = _3185;
                        frontier_phi_77_pred_4 = _3184;
                        frontier_phi_77_pred_5 = _3183;
                    }
                    else
                    {
                        float _3392;
                        float _3393;
                        float _3394;
                        float _3395;
                        float _3396;
                        float _3397;
                        float _3685;
                        float _3686;
                        float _3687;
                        float _3688;
                        float _3689;
                        float _3690;
                        float _3405 = _3183;
                        float _3406 = _3184;
                        float _3407 = _3185;
                        float _3408 = _3186;
                        float _3409 = _3187;
                        float _3410 = _3188;
                        uint _3411 = _3198;
                        uint _3412;
                        vec4 _3437;
                        float _3438;
                        vec4 _3453;
                        vec3 _3465;
                        vec4 _3480;
                        vec4 _3495;
                        float _3541;
                        bool _3542;
                        for (;;)
                        {
                            uint _3422 = ((_3189 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3411));
                            _3412 = (_3411 + 4294967295u) & _3411;
                            uint _3424 = _3422 * 40u;
                            _3437 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3424)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 3u)).x));
                            _3438 = _3437.w;
                            uint _3440 = (_3422 * 40u) + 4u;
                            _3453 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3440)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 3u)).x));
                            uint _3455 = (_3422 * 40u) + 8u;
                            _3465 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3455)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 2u)).x));
                            uint _3467 = (_3422 * 40u) + 16u;
                            _3480 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3467)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 3u)).x));
                            uint _3482 = (_3422 * 40u) + 20u;
                            _3495 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3482)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3482 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3482 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3482 + 3u)).x));
                            uint _3497 = (_3422 * 40u) + 24u;
                            vec4 _3510 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3497)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3497 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3497 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3497 + 3u)).x));
                            uint _3516 = (_3422 * 40u) + 28u;
                            vec4 _3529 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3516)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3516 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3516 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3516 + 3u)).x));
                            _3541 = fma(_2757, _3529.z, fma(_2756, _3529.y, _3529.x * _2755)) + _3529.w;
                            _3542 = !((fma(_2757, _3510.z, fma(_2756, _3510.y, _3510.x * _2755)) + _3510.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3542)
                            {
                                float _3569 = _3437.x - _2755;
                                float _3570 = _3437.y - _2756;
                                float _3571 = _3437.z - _2757;
                                float _3572 = dot(vec3(_3569, _3570, _3571), vec3(_3569, _3570, _3571));
                                float _3575 = inversesqrt(_3572);
                                float _3576 = _3575 * _3569;
                                float _3577 = _3575 * _3570;
                                float _3578 = _3575 * _3571;
                                float _3582 = 1.0 - (_3572 / (_3438 * _3438));
                                float _4753 = isnan(0.0) ? _3582 : (isnan(_3582) ? 0.0 : max(_3582, 0.0));
                                float _3583 = isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0));
                                float _3587 = sqrt(_3572) * _3453.w;
                                float _3589 = 1.39999997615814208984375 / (_3587 + 1.39999997615814208984375);
                                float _3590 = _3589 * _3589;
                                float _3593 = ((1.0 - _3590) * dot(vec3(_3576, _3577, _3578), vec3(_993, _996, _999))) + _3590;
                                float _3596 = _3587 * _3587;
                                float _3600 = (fma(_2757, _3480.z, fma(_2756, _3480.y, _3480.x * _2755)) + _3480.w) / _3541;
                                float _3601 = (fma(_2757, _3495.z, fma(_2756, _3495.y, _3495.x * _2755)) + _3495.w) / _3541;
                                float _3605 = 1.0 - dot(vec2(_3600, _3601), vec2(_3600, _3601));
                                float _4769 = isnan(0.0) ? _3605 : (isnan(_3605) ? 0.0 : max(_3605, 0.0));
                                float _3606 = isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0));
                                float _3607 = _3606 * (((isnan(0.0) ? _3593 : (isnan(_3593) ? 0.0 : max(_3593, 0.0))) * _3583) / ((_3596 * 0.699999988079071044921875) + 1.0));
                                float _3619 = exp2(log2(1.0 / ((_3596 * 3.5) + 5.0)) * 0.25);
                                float _3620 = 1.0 - _1068;
                                float _3627 = sqrt(1.0 - ((1.0 - (_3620 * _3620)) * (1.0 - (_3619 * _3619))));
                                float _3628 = _3627 * _3627;
                                float _3629 = _3628 * _3628;
                                float _3630 = _3576 - _3049;
                                float _3631 = _3577 - _3050;
                                float _3632 = _3578 - _3051;
                                float _3636 = inversesqrt(dot(vec3(_3630, _3631, _3632), vec3(_3630, _3631, _3632)));
                                float _3640 = dot(vec3(_993, _996, _999), vec3((-0.0) - _3049, (-0.0) - _3050, (-0.0) - _3051));
                                float _4780 = isnan(0.0) ? _3640 : (isnan(_3640) ? 0.0 : max(_3640, 0.0));
                                float _3643 = isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0));
                                float _3644 = dot(vec3(_993, _996, _999), vec3(_3636 * _3630, _3636 * _3631, _3636 * _3632));
                                float _4791 = isnan(0.0) ? _3644 : (isnan(_3644) ? 0.0 : max(_3644, 0.0));
                                float _3647 = isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0));
                                float _3651 = ((_3647 * _3647) * (_3629 + (-1.0))) + 1.0;
                                float _3652 = _3589 * _3628;
                                float _3653 = _3652 * _3652;
                                float _3659 = ((1.0 - _3653) * dot(vec3(_993, _996, _999), vec3(_3576, _3577, _3578))) + _3653;
                                float _4802 = isnan(0.0) ? _3659 : (isnan(_3659) ? 0.0 : max(_3659, 0.0));
                                float _3660 = isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0));
                                float _3661 = 1.0 - _3628;
                                float _3671 = (0.5 / (((_3660 * ((_3643 * _3661) + _3628)) + 9.9999999392252902907785028219223e-09) + (((_3660 * _3661) + _3628) * _3643))) * _3660;
                                float _4813 = isnan(0.0) ? _3671 : (isnan(_3671) ? 0.0 : max(_3671, 0.0));
                                float _3681 = (_3606 * _3583) * (((_3629 * 3.1415927410125732421875) * (isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0)))) / ((_3651 * _3651) * ((_3596 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3607 * _3453.y;
                                frontier_phi_83_pred_1 = _3607 * _3453.x;
                                frontier_phi_83_pred_2 = _3681 * _3465.z;
                                frontier_phi_83_pred_3 = _3681 * _3465.y;
                                frontier_phi_83_pred_4 = _3681 * _3465.x;
                                frontier_phi_83_pred_5 = _3607 * _3453.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3689 = frontier_phi_83_pred;
                            _3688 = frontier_phi_83_pred_1;
                            _3687 = frontier_phi_83_pred_2;
                            _3686 = frontier_phi_83_pred_3;
                            _3685 = frontier_phi_83_pred_4;
                            _3690 = frontier_phi_83_pred_5;
                            _3395 = _3688 + _3408;
                            _3396 = _3689 + _3409;
                            _3397 = _3690 + _3410;
                            _3392 = _3685 + _3405;
                            _3393 = _3686 + _3406;
                            _3394 = _3687 + _3407;
                            if (_3412 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3405 = _3392;
                                _3406 = _3393;
                                _3407 = _3394;
                                _3408 = _3395;
                                _3409 = _3396;
                                _3410 = _3397;
                                _3411 = _3412;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3397;
                        frontier_phi_77_pred_1 = _3396;
                        frontier_phi_77_pred_2 = _3395;
                        frontier_phi_77_pred_3 = _3394;
                        frontier_phi_77_pred_4 = _3393;
                        frontier_phi_77_pred_5 = _3392;
                    }
                    _3034 = frontier_phi_77_pred;
                    _3032 = frontier_phi_77_pred_1;
                    _3030 = frontier_phi_77_pred_2;
                    _3028 = frontier_phi_77_pred_3;
                    _3026 = frontier_phi_77_pred_4;
                    _3024 = frontier_phi_77_pred_5;
                    uint _3190 = _3189 + 1u;
                    if (_3190 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3183 = _3024;
                        _3184 = _3026;
                        _3185 = _3028;
                        _3186 = _3030;
                        _3187 = _3032;
                        _3188 = _3034;
                        _3189 = _3190;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3028;
                frontier_phi_58_59_ladder_1 = _3034;
                frontier_phi_58_59_ladder_2 = _3032;
                frontier_phi_58_59_ladder_3 = _3030;
                frontier_phi_58_59_ladder_4 = _3026;
                frontier_phi_58_59_ladder_5 = _3024;
            }
            else
            {
                frontier_phi_58_59_ladder = _2906;
                frontier_phi_58_59_ladder_1 = _2912;
                frontier_phi_58_59_ladder_2 = _2910;
                frontier_phi_58_59_ladder_3 = _2908;
                frontier_phi_58_59_ladder_4 = _2904;
                frontier_phi_58_59_ladder_5 = _2902;
            }
            _3023 = frontier_phi_58_59_ladder_5;
            _3025 = frontier_phi_58_59_ladder_4;
            _3027 = frontier_phi_58_59_ladder;
            _3029 = frontier_phi_58_59_ladder_3;
            _3031 = frontier_phi_58_59_ladder_2;
            _3033 = frontier_phi_58_59_ladder_1;
        }
        float _3038 = isnan(1.0) ? _1052 : (isnan(_1052) ? 1.0 : min(_1052, 1.0));
        _2814 = (_3038 * _3029) + _2250;
        _2816 = (_3038 * _3031) + _2252;
        _2818 = (_3038 * _3033) + _2254;
        _2820 = ((_3023 * _1036) * _3038) + _2595;
        _2822 = ((_3025 * _1038) * _3038) + _2597;
        _2824 = ((_3027 * _1039) * _3038) + _2599;
    }
    else
    {
        _2814 = _2250;
        _2816 = _2252;
        _2818 = _2254;
        _2820 = _2595;
        _2822 = _2597;
        _2824 = _2599;
    }
    float _4829 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
    float _4840 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
    float _4851 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
    float _2841 = ((isnan(1.0) ? _4829 : (isnan(_4829) ? 1.0 : min(_4829, 1.0))) * (_2814 + ((isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0))) * _1052))) + ((_2820 + ((isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0))) * _1890)) * cbPerFrame._m0[3u].x);
    float _2842 = ((isnan(1.0) ? _4840 : (isnan(_4840) ? 1.0 : min(_4840, 1.0))) * (_2816 + ((isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0))) * _1052))) + ((_2822 + ((isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0))) * _1890)) * cbPerFrame._m0[3u].x);
    float _2843 = ((isnan(1.0) ? _4851 : (isnan(_4851) ? 1.0 : min(_4851, 1.0))) * (_2818 + ((isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0))) * _1052))) + ((_2824 + ((isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0))) * _1890)) * cbPerFrame._m0[3u].x);
    uint _2844 = _280 + 6u;
    float _2852 = _974 / cbSceneParam._m0[86u].x;
    float _2853 = _975 / cbSceneParam._m0[86u].y;
    vec4 _2867 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2852, _2853, (log2((isnan(cbSceneParam._m0[77u].w) ? _896 : (isnan(_896) ? cbSceneParam._m0[77u].w : min(_896, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2869 = _2867.x;
    float _2870 = _2867.y;
    float _2871 = _2867.z;
    float _2872 = _2867.w;
    float _2965;
    float _2967;
    float _2969;
    float _2971;
    if (_896 > cbSceneParam._m0[78u].w)
    {
        float _2927 = isnan(_896) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _896 : min(cbSceneParam._m0[80u].w, _896));
        float _2928 = _2927 / _896;
        float _2939 = _2928 * _947;
        float _2940 = _948 * _2928;
        float _2941 = (-0.0) - _2940;
        float _2943 = _2928 * _949;
        float _2945 = (cbSceneParam._m0[77u].w * _2941) / _2927;
        float _2946 = _2945 + cbSceneParam._m0[79u].w;
        float _2947 = cbSceneParam._m0[79u].w - _2940;
        float _2953 = sqrt(((_2939 * _2939) + (_2940 * _2940)) + (_2943 * _2943));
        float _2956 = (1.0 - (cbSceneParam._m0[77u].w / _2927)) * _2953;
        float _2961 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2963 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3140;
        if (abs((_2941 - _2945) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3140 = ((((_2946 > 0.0) ? exp2(_2961 * _2946) : (2.0 - exp2(_2963 * _2946))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2956;
        }
        else
        {
            float _3084 = 1.0 / cbSceneParam._m0[80u].x;
            float _3085 = isnan(_2947) ? _2946 : (isnan(_2946) ? _2947 : max(_2946, _2947));
            float _3086 = isnan(_2947) ? _2946 : (isnan(_2946) ? _2947 : min(_2946, _2947));
            float _3095 = isnan(0.0) ? _3085 : (isnan(_3085) ? 0.0 : min(_3085, 0.0));
            float _3096 = isnan(0.0) ? _3086 : (isnan(_3086) ? 0.0 : min(_3086, 0.0));
            _3140 = ((abs(_2953 / _2941) * cbSceneParam._m0[80u].y) * ((((_3095 - _3096) * 2.0) - ((exp2(_2961 * (isnan(0.0) ? _3085 : (isnan(_3085) ? 0.0 : max(_3085, 0.0)))) - exp2(_2961 * (isnan(0.0) ? _3086 : (isnan(_3086) ? 0.0 : max(_3086, 0.0))))) * _3084)) - ((exp2(_2963 * _3095) - exp2(_2963 * _3096)) * _3084))) + (_2956 * cbSceneParam._m0[80u].z);
        }
        vec4 _3142 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2852, _2853, 1.0), 0.0);
        float _3151 = exp2((_3140 * (-1.44269502162933349609375)) * (1.0 - _3142.w));
        float _3152 = log2(_3151);
        float _3168 = log2(_2872);
        _2965 = (exp2(_3168 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3152 * cbSceneParam._m0[78u].x)) * _3142.x) / cbSceneParam._m0[78u].x)) + _2869;
        _2967 = (exp2(_3168 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3152 * cbSceneParam._m0[78u].y)) * _3142.y) / cbSceneParam._m0[78u].y)) + _2870;
        _2969 = (exp2(_3168 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3152 * cbSceneParam._m0[78u].z)) * _3142.z) / cbSceneParam._m0[78u].z)) + _2871;
        _2971 = _3151 * _2872;
    }
    else
    {
        _2965 = _2869;
        _2967 = _2870;
        _2969 = _2871;
        _2971 = _2872;
    }
    bool _3178;
    vec4 _2981;
    vec4 _3003;
    float _3005;
    float _3009;
    float _3010;
    float _3011;
    float _3012;
    bool _3022;
    for (;;)
    {
        _2981 = cbMatDynParam._m0[0u];
        float _2983 = roundEven(_2981.y);
        bool _2984 = _2983 == 3.0;
        float _2985 = log2(_2971);
        float _2992 = exp2(_2985 * cbSceneParam._m0[78u].x) * _2841;
        float _2993 = exp2(_2985 * cbSceneParam._m0[78u].y) * _2842;
        float _2994 = exp2(_2985 * cbSceneParam._m0[78u].z) * _2843;
        float _3001 = _963 + (-0.5);
        _3003 = cbMtdParam._m0[1u];
        _3005 = _3003.y * _3001;
        float _3008 = (_2983 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3009 = _3008 * (_2984 ? _2992 : (_2992 + (cbSceneParam._m0[72u].w * _2965)));
        _3010 = _3008 * (_2984 ? _2993 : (_2993 + (cbSceneParam._m0[72u].w * _2967)));
        _3011 = _3008 * (_2984 ? _2994 : (_2994 + (cbSceneParam._m0[72u].w * _2969)));
        _3012 = _3001 * 0.999000012874603271484375;
        _3022 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3022)
        {
            if ((cbInstanceData._m0[_280 + 7u].x + _3012) < 0.5)
            {
                _3178 = true;
                break;
            }
        }
        uint _3119 = _1012 + uint(_2981.w);
        if ((cbInstanceData._m0[_3119].w < 1.0) && ((cbInstanceData._m0[_3119].w + _3012) < 0.5))
        {
            _3178 = true;
            break;
        }
        if ((_3005 + 1.0) < _3003.x)
        {
            _3178 = true;
            break;
        }
        _3178 = false;
        break;
    }
    float _3383;
    if (_3178)
    {
        discard_state = true;
        _3383 = 0.0;
    }
    else
    {
        _3383 = cbInstanceData._m0[_2844].w;
    }
    SV_Target.x = _3009;
    SV_Target.y = _3010;
    SV_Target.z = _3011;
    SV_Target.w = _3383;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2844].w;
    discard_exit();
}


