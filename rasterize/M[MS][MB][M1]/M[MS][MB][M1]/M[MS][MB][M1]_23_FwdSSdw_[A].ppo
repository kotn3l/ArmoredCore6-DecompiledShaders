#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1140;
float _3546;
float _3547;
float _3548;
float _3549;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _207 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _208 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _209 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _215 = inversesqrt(dot(vec3(_207, _208, _209), vec3(_207, _208, _209)));
    float _216 = _215 * _207;
    float _217 = _215 * _208;
    float _218 = _215 * _209;
    float _222 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _223 = _222 * NORMAL.x;
    float _224 = _222 * NORMAL.y;
    float _225 = _222 * NORMAL.z;
    float _229 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _230 = _229 * TANGENT.x;
    float _231 = _229 * TANGENT.y;
    float _232 = _229 * TANGENT.z;
    float _243 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _245 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _246 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3558 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _3569 = isnan(0.0) ? _245 : (isnan(_245) ? 0.0 : max(_245, 0.0));
    float _3580 = isnan(0.0) ? _246 : (isnan(_246) ? 0.0 : max(_246, 0.0));
    uint _256 = uint(roundEven(NORMAL.w)) * 13u;
    uint _261 = _256 + 1u;
    uint _265 = _256 + 2u;
    float _274 = sqrt(((cbInstanceData._m0[_261].x * cbInstanceData._m0[_261].x) + (cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x)) + (cbInstanceData._m0[_265].x * cbInstanceData._m0[_265].x));
    float _275 = _274 * TEXCOORD.z;
    float _276 = _274 * TEXCOORD.w;
    vec4 _289 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _275) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _276) + cbTextureTilingScale._m0[13u].w));
    vec4 _312 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _317 = _312.x * cbMtdParam._m0[9u].x;
    float _318 = _312.y * cbMtdParam._m0[9u].y;
    float _319 = _312.z * cbMtdParam._m0[9u].z;
    float _323 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _289.x) * _317;
    float _326 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _289.y) * _318;
    float _329 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _289.z) * _319;
    float _336 = ((_317 - _323) * (isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0)))) + _323;
    float _337 = ((_318 - _326) * (isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0)))) + _326;
    float _338 = ((_319 - _329) * (isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0)))) + _329;
    vec4 _356 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _275) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _276) + cbTextureTilingScale._m0[20u].w));
    vec4 _382 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _386 = _382.z;
    float _390 = (_382.x * 2.0) + (-1.0);
    float _391 = (_382.y * 2.0) + (-1.0);
    float _392 = dot(vec2(_390, _391), vec2(_390, _391));
    float _3591 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _397 = sqrt(1.0 - (isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0))));
    float _402 = _390 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_356.x * 2.0) + (-1.0)));
    float _403 = _391 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_356.y * 2.0) + (-1.0)));
    float _406 = fma(_397, _223, fma(_403, _230, _402 * _216));
    float _409 = fma(_397, _224, fma(_403, _231, _402 * _217));
    float _412 = fma(_397, _225, fma(_403, _232, _402 * _218));
    float _416 = inversesqrt(dot(vec3(_406, _409, _412), vec3(_406, _409, _412)));
    vec4 _452 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _275) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _276) + cbTextureTilingScale._m0[11u].w));
    float _454 = _452.x;
    float _455 = 1.0 - _454;
    float _464 = (cbMtdParam._m0[19u].x + dot(vec4(_416 * _406, _416 * _409, _416 * _412, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_454 - _455) * cbMtdParam._m0[24u].z) + _455) * cbMtdParam._m0[21u].z);
    float _3602 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _465 = isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0));
    float _472 = (_465 * (cbMtdParam._m0[17u].x - _336)) + _336;
    float _473 = (_465 * (cbMtdParam._m0[17u].y - _337)) + _337;
    float _474 = (_465 * (cbMtdParam._m0[17u].z - _338)) + _338;
    vec4 _487 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _489 = _487.x;
    float _491 = _489 - (_489 * _465);
    float _496 = (((_356.z - _386) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _386;
    vec4 _509 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _275) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _276) + cbTextureTilingScale._m0[15u].w));
    float _516 = (_509.x * 2.0) + (-1.0);
    float _517 = (_509.y * 2.0) + (-1.0);
    float _518 = dot(vec2(_516, _517), vec2(_516, _517));
    float _3613 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _526 = ((_509.z - _496) * _465) + _496;
    float _536 = ((sqrt(1.0 - (isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0)))) - _397) * _465) + _397;
    float _539 = (((_516 - _402) * _465) + _402) + (cbMtdParam._m0[21u].x * _402);
    float _540 = (((_517 - _403) * _465) + _403) + (cbMtdParam._m0[21u].x * _403);
    float _542 = cbMtdParam._m0[22u].x + _382.w;
    float _545 = fma(_536, _223, fma(_540, _230, _539 * _216));
    float _548 = fma(_536, _224, fma(_540, _231, _539 * _217));
    float _551 = fma(_536, _225, fma(_540, _232, _539 * _218));
    float _555 = inversesqrt(dot(vec3(_545, _548, _551), vec3(_545, _548, _551)));
    float _556 = _555 * _545;
    float _557 = _555 * _548;
    float _558 = _555 * _551;
    float _3624 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _559 = isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0));
    float _3635 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _3646 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _3657 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _3668 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _3679 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _564 = isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0));
    float _578 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _619 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _629 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _619);
    float _630 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _619);
    float _631 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _619);
    float _635 = inversesqrt(dot(vec3(_629, _630, _631), vec3(_629, _630, _631)));
    float _636 = _629 * _635;
    float _637 = _630 * _635;
    float _638 = _631 * _635;
    vec4 _643 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _645 = _643.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _820 = sqrt(((_629 * _629) + (_630 * _630)) + (_631 * _631));
        float _826 = (cbMatDynParam._m0[5u].x * _820) + cbMatDynParam._m0[5u].y;
        float _3690 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
        float _827 = isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0));
        float _831 = (cbMatDynParam._m0[5u].z * _820) + cbMatDynParam._m0[5u].w;
        float _3701 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0))) - _827)) + _827) < ((_645 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _657 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _658 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _678 = fma(_558, cbSceneParam._m0[5u].z, fma(_557, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _556));
    float _681 = fma(_558, cbSceneParam._m0[6u].z, fma(_557, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _556));
    float _684 = fma(_558, cbSceneParam._m0[7u].z, fma(_557, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _556));
    uint _697 = _256 + 9u;
    uint _698 = _697 + uint(cbMatDynParam._m0[0u].w);
    float _704 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0)))) * cbInstanceData._m0[_698].x;
    float _705 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0)))) * cbInstanceData._m0[_698].y;
    float _706 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0)))) * cbInstanceData._m0[_698].z;
    float _3712 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
    float _707 = isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0));
    float _3723 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _708 = isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0));
    float _3734 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _709 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
    float _710 = 1.0 - _564;
    float _711 = _707 * _710;
    float _712 = _708 * _710;
    float _713 = _709 * _710;
    float _718 = (_707 + (-0.039999999105930328369140625)) * _564;
    float _719 = (_708 + (-0.039999999105930328369140625)) * _564;
    float _720 = (_709 + (-0.039999999105930328369140625)) * _564;
    float _721 = _718 + 0.039999999105930328369140625;
    float _723 = _719 + 0.039999999105930328369140625;
    float _724 = _720 + 0.039999999105930328369140625;
    vec4 _733 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _657, cbSceneParam._m0[86u].y * _658));
    float _737 = ((isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0))) * TEXCOORD_5.w) * _733.x;
    float _738 = dot(vec3(_556, _557, _558), vec3(_636, _637, _638));
    float _741 = _738 * 2.0;
    float _745 = (_741 * _556) - _636;
    float _746 = (_741 * _557) - _637;
    float _747 = (_741 * _558) - _638;
    float _751 = abs(dot(vec3(_636, _637, _638), vec3(_556, _557, _558)));
    float _3745 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
    float _753 = sqrt(_559);
    float _766 = exp2((_753 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_753 * 3.0));
    float _772 = (1.0 - _766) * ((_753 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _773 = _766 * _753;
    float _801 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _805 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _809 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1139;
    float _1141;
    float _1142;
    float _1143;
    float _1144;
    float _1145;
    float _1146;
    float _1147;
    float _1148;
    float _1149;
    float _1150;
    float _1151;
    float _1152;
    float _1153;
    float _1154;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _864 = fma(_809, cbModelParam._m0[26u].z, fma(_805, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _801));
        float _868 = fma(_809, cbModelParam._m0[27u].z, fma(_805, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _801));
        float _872 = fma(_809, cbModelParam._m0[28u].z, fma(_805, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _801));
        float _897 = _801 + _556;
        float _898 = _805 + _557;
        float _899 = _809 + _558;
        float _909 = fma(_899, cbModelParam._m0[26u].z, fma(_898, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _897)) - _864;
        float _910 = fma(_899, cbModelParam._m0[27u].z, fma(_898, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _897)) - _868;
        float _911 = fma(_899, cbModelParam._m0[28u].z, fma(_898, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _897)) - _872;
        float _915 = inversesqrt(dot(vec3(_909, _910, _911), vec3(_909, _910, _911)));
        float _928 = ((_915 * _909) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_864 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _929 = ((_915 * _910) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_868 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _930 = ((_915 * _911) / cbModelParam._m0[34u].z) + ((((((_872 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _933 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_928, _929, _930), 0.0);
        vec4 _940 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_928, _929, _930), 0.0);
        vec4 _947 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_928, _929, _930), 0.0);
        vec4 _954 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_928, _929, _930), 0.0);
        float _967 = exp2((_933.w + (-0.5)) * 20.0) * 2.0;
        float _968 = _967 * (_933.x + (-0.5));
        float _969 = _967 * (_933.y + (-0.5));
        float _970 = _967 * (_933.z + (-0.5));
        float _977 = exp2((_940.w + (-0.5)) * 20.0) * 2.0;
        float _978 = _977 * (_940.x + (-0.5));
        float _979 = _977 * (_940.y + (-0.5));
        float _980 = _977 * (_940.z + (-0.5));
        float _987 = exp2((_947.w + (-0.5)) * 20.0) * 2.0;
        float _988 = _987 * (_947.x + (-0.5));
        float _989 = _987 * (_947.y + (-0.5));
        float _990 = _987 * (_947.z + (-0.5));
        float _997 = exp2((_954.w + (-0.5)) * 20.0) * 2.0;
        float _998 = _997 * (_954.x + (-0.5));
        float _999 = _997 * (_954.y + (-0.5));
        float _1000 = _997 * (_954.z + (-0.5));
        float _1001 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
        float _1002 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1003 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
        float _1004 = _968 * 0.5;
        float _1005 = _978 * 0.5;
        float _1006 = _988 * 0.5;
        float _1007 = dot(vec3(_1004, _1005, _1006), vec3(_1004, _1005, _1006));
        float _1012 = (_1007 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1007);
        float _1021 = (dot(vec3(_556, _557, _558), vec3(_1012 * _1004, _1012 * _1005, _1012 * _1006)) + 1.0) * 0.5;
        float _3771 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1031 = sqrt(((_1005 * _1005) + (_1004 * _1004)) + (_1006 * _1006)) / (_1001 + 9.9999997473787516355514526367188e-06);
        float _3782 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1032 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
        float _1033 = _1032 * 2.0;
        float _1037 = (1.0 - _1032) / (_1032 + 1.0);
        float _3793 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1038 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
        float _1047 = ((((1.0 - _1038) * (_1033 + 2.0)) * exp2(log2(isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0))) * (_1033 + 1.0))) + _1038) * _1001;
        float _1048 = _969 * 0.5;
        float _1049 = _979 * 0.5;
        float _1050 = _989 * 0.5;
        float _1051 = dot(vec3(_1048, _1049, _1050), vec3(_1048, _1049, _1050));
        float _1056 = (_1051 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1051);
        float _1064 = (dot(vec3(_556, _557, _558), vec3(_1056 * _1048, _1056 * _1049, _1056 * _1050)) + 1.0) * 0.5;
        float _3804 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1073 = sqrt(((_1049 * _1049) + (_1048 * _1048)) + (_1050 * _1050)) / (_1002 + 9.9999997473787516355514526367188e-06);
        float _3815 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1074 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
        float _1075 = _1074 * 2.0;
        float _1079 = (1.0 - _1074) / (_1074 + 1.0);
        float _3826 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1080 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
        float _1089 = ((((1.0 - _1080) * (_1075 + 2.0)) * exp2(log2(isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0))) * (_1075 + 1.0))) + _1080) * _1002;
        float _1090 = _970 * 0.5;
        float _1091 = _980 * 0.5;
        float _1092 = _990 * 0.5;
        float _1093 = dot(vec3(_1090, _1091, _1092), vec3(_1090, _1091, _1092));
        float _1098 = (_1093 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1093);
        float _1106 = (dot(vec3(_556, _557, _558), vec3(_1098 * _1090, _1098 * _1091, _1098 * _1092)) + 1.0) * 0.5;
        float _3837 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1115 = sqrt(((_1091 * _1091) + (_1090 * _1090)) + (_1092 * _1092)) / (_1003 + 9.9999997473787516355514526367188e-06);
        float _3848 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1116 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
        float _1117 = _1116 * 2.0;
        float _1121 = (1.0 - _1116) / (_1116 + 1.0);
        float _3859 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1122 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
        float _1131 = ((((1.0 - _1122) * (_1117 + 2.0)) * exp2(log2(isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0))) * (_1117 + 1.0))) + _1122) * _1003;
        _1139 = _970;
        _1141 = _969;
        _1142 = _968;
        _1143 = _980;
        _1144 = _979;
        _1145 = _978;
        _1146 = _990;
        _1147 = _989;
        _1148 = _988;
        _1149 = _1003;
        _1150 = _1002;
        _1151 = _1001;
        _1152 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0)));
        _1153 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0)));
        _1154 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0)));
    }
    else
    {
        _1139 = _1140;
        _1141 = _1140;
        _1142 = _1140;
        _1143 = _1140;
        _1144 = _1140;
        _1145 = _1140;
        _1146 = _1140;
        _1147 = _1140;
        _1148 = _1140;
        _1149 = _1140;
        _1150 = _1140;
        _1151 = _1140;
        _1152 = 0.0;
        _1153 = 0.0;
        _1154 = 0.0;
    }
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1182 = fma(_809, cbModelParam._m0[30u].z, fma(_805, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _801));
        float _1186 = fma(_809, cbModelParam._m0[31u].z, fma(_805, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _801));
        float _1190 = fma(_809, cbModelParam._m0[32u].z, fma(_805, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _801));
        float _1213 = _801 + _556;
        float _1214 = _805 + _557;
        float _1215 = _809 + _558;
        float _1225 = fma(_1215, cbModelParam._m0[30u].z, fma(_1214, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1213)) - _1182;
        float _1226 = fma(_1215, cbModelParam._m0[31u].z, fma(_1214, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1213)) - _1186;
        float _1227 = fma(_1215, cbModelParam._m0[32u].z, fma(_1214, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1213)) - _1190;
        float _1231 = inversesqrt(dot(vec3(_1225, _1226, _1227), vec3(_1225, _1226, _1227)));
        float _1244 = ((_1231 * _1225) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1182 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1245 = ((_1231 * _1226) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1186 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1246 = ((_1231 * _1227) / cbModelParam._m0[35u].z) + ((((((_1190 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1248 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1244, _1245, _1246), 0.0);
        vec4 _1255 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1244, _1245, _1246), 0.0);
        vec4 _1262 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1244, _1245, _1246), 0.0);
        vec4 _1269 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1244, _1245, _1246), 0.0);
        float _1281 = exp2((_1248.w + (-0.5)) * 20.0) * 2.0;
        float _1282 = _1281 * (_1248.x + (-0.5));
        float _1283 = _1281 * (_1248.y + (-0.5));
        float _1284 = _1281 * (_1248.z + (-0.5));
        float _1291 = exp2((_1255.w + (-0.5)) * 20.0) * 2.0;
        float _1292 = _1291 * (_1255.x + (-0.5));
        float _1293 = _1291 * (_1255.y + (-0.5));
        float _1294 = _1291 * (_1255.z + (-0.5));
        float _1301 = exp2((_1262.w + (-0.5)) * 20.0) * 2.0;
        float _1302 = _1301 * (_1262.x + (-0.5));
        float _1303 = _1301 * (_1262.y + (-0.5));
        float _1304 = _1301 * (_1262.z + (-0.5));
        float _1311 = exp2((_1269.w + (-0.5)) * 20.0) * 2.0;
        float _1312 = _1311 * (_1269.x + (-0.5));
        float _1313 = _1311 * (_1269.y + (-0.5));
        float _1314 = _1311 * (_1269.z + (-0.5));
        float _1315 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1316 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1317 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1318 = _1282 * 0.5;
        float _1319 = _1292 * 0.5;
        float _1320 = _1302 * 0.5;
        float _1321 = dot(vec3(_1318, _1319, _1320), vec3(_1318, _1319, _1320));
        float _1326 = (_1321 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1321);
        float _1334 = (dot(vec3(_556, _557, _558), vec3(_1326 * _1318, _1326 * _1319, _1326 * _1320)) + 1.0) * 0.5;
        float _3900 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1343 = sqrt(((_1319 * _1319) + (_1318 * _1318)) + (_1320 * _1320)) / (_1315 + 9.9999997473787516355514526367188e-06);
        float _3911 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1344 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
        float _1345 = _1344 * 2.0;
        float _1349 = (1.0 - _1344) / (_1344 + 1.0);
        float _3922 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1350 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
        float _1359 = ((((1.0 - _1350) * (_1345 + 2.0)) * exp2(log2(isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0))) * (_1345 + 1.0))) + _1350) * _1315;
        float _1360 = _1283 * 0.5;
        float _1361 = _1293 * 0.5;
        float _1362 = _1303 * 0.5;
        float _1363 = dot(vec3(_1360, _1361, _1362), vec3(_1360, _1361, _1362));
        float _1368 = (_1363 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1363);
        float _1376 = (dot(vec3(_556, _557, _558), vec3(_1368 * _1360, _1368 * _1361, _1368 * _1362)) + 1.0) * 0.5;
        float _3933 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1385 = sqrt(((_1361 * _1361) + (_1360 * _1360)) + (_1362 * _1362)) / (_1316 + 9.9999997473787516355514526367188e-06);
        float _3944 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1386 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
        float _1387 = _1386 * 2.0;
        float _1391 = (1.0 - _1386) / (_1386 + 1.0);
        float _3955 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1392 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
        float _1401 = ((((1.0 - _1392) * (_1387 + 2.0)) * exp2(log2(isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0))) * (_1387 + 1.0))) + _1392) * _1316;
        float _1402 = _1284 * 0.5;
        float _1403 = _1294 * 0.5;
        float _1404 = _1304 * 0.5;
        float _1405 = dot(vec3(_1402, _1403, _1404), vec3(_1402, _1403, _1404));
        float _1410 = (_1405 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1405);
        float _1418 = (dot(vec3(_556, _557, _558), vec3(_1410 * _1402, _1410 * _1403, _1410 * _1404)) + 1.0) * 0.5;
        float _3966 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1427 = sqrt(((_1403 * _1403) + (_1402 * _1402)) + (_1404 * _1404)) / (_1317 + 9.9999997473787516355514526367188e-06);
        float _3977 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1428 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
        float _1429 = _1428 * 2.0;
        float _1433 = (1.0 - _1428) / (_1428 + 1.0);
        float _3988 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1434 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
        float _1443 = ((((1.0 - _1434) * (_1429 + 2.0)) * exp2(log2(isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0))) * (_1429 + 1.0))) + _1434) * _1317;
        _1451 = _1284;
        _1452 = _1283;
        _1453 = _1282;
        _1454 = _1294;
        _1455 = _1293;
        _1456 = _1292;
        _1457 = _1304;
        _1458 = _1303;
        _1459 = _1302;
        _1460 = _1317;
        _1461 = _1316;
        _1462 = _1315;
        _1463 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0)));
        _1464 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0)));
        _1465 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0)));
    }
    else
    {
        _1451 = _1140;
        _1452 = _1140;
        _1453 = _1140;
        _1454 = _1140;
        _1455 = _1140;
        _1456 = _1140;
        _1457 = _1140;
        _1458 = _1140;
        _1459 = _1140;
        _1460 = _1140;
        _1461 = _1140;
        _1462 = _1140;
        _1463 = 0.0;
        _1464 = 0.0;
        _1465 = 0.0;
    }
    float _1475 = (cbModelParam._m0[1u].x * (_1463 - _1152)) + _1152;
    float _1476 = (cbModelParam._m0[1u].x * (_1464 - _1153)) + _1153;
    float _1477 = (cbModelParam._m0[1u].x * (_1465 - _1154)) + _1154;
    float _1498 = fma(_1477, cbSceneParam._m0[89u].z, fma(_1476, cbSceneParam._m0[89u].y, _1475 * cbSceneParam._m0[89u].x));
    float _1501 = fma(_1477, cbSceneParam._m0[90u].z, fma(_1476, cbSceneParam._m0[90u].y, _1475 * cbSceneParam._m0[90u].x));
    float _1504 = fma(_1477, cbSceneParam._m0[91u].z, fma(_1476, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1475));
    float _1519 = _745 * 0.5;
    float _1520 = _746 * 0.5;
    float _1521 = _747 * 0.5;
    float _1522 = dot(vec4(_1519, _1520, _1521, 1.0), vec4(_1453, _1456, _1459, _1462));
    float _1525 = dot(vec4(_1519, _1520, _1521, 1.0), vec4(_1452, _1455, _1458, _1461));
    float _1528 = dot(vec4(_1519, _1520, _1521, 1.0), vec4(_1451, _1454, _1457, _1460));
    float _1562;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1535 = dot(vec4(_1519, _1520, _1521, 1.0), vec4(_1139, _1143, _1146, _1149));
        float _1539 = dot(vec4(_1519, _1520, _1521, 1.0), vec4(_1141, _1144, _1147, _1150));
        float _1543 = dot(vec4(_1519, _1520, _1521, 1.0), vec4(_1142, _1145, _1148, _1151));
        float _1550 = dot(vec4(cbModelParam._m0[39u]), vec4(_1519, _1520, _1521, 1.0));
        _1562 = dot(vec3(isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0)), isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0)), isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1550) ? 0.0 : (isnan(0.0) ? _1550 : max(0.0, _1550))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1562 = 1.0;
    }
    float _1573;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1564 = dot(vec4(cbModelParam._m0[40u]), vec4(_1519, _1520, _1521, 1.0));
        _1573 = dot(vec3(isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0)), isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0)), isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1564) ? 0.0 : (isnan(0.0) ? _1564 : max(0.0, _1564))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1573 = 1.0;
    }
    float _1577 = (_1573 * cbModelParam._m0[1u].x) + (_1562 * (1.0 - cbModelParam._m0[1u].x));
    float _1587 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _559);
    float _1588 = isnan(_1587) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1587 : min(cbModelParam._m0[25u].z, _1587));
    float _1669;
    float _1671;
    float _1673;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1636 = fma(_809, cbModelParam._m0[13u].z, fma(_805, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _801)) + cbModelParam._m0[13u].w;
        float _1640 = fma(_809, cbModelParam._m0[14u].z, fma(_805, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _801)) + cbModelParam._m0[14u].w;
        float _1644 = fma(_809, cbModelParam._m0[15u].z, fma(_805, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _801)) + cbModelParam._m0[15u].w;
        float _1647 = fma(_747, cbModelParam._m0[13u].z, fma(_746, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _745));
        float _1650 = fma(_747, cbModelParam._m0[14u].z, fma(_746, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _745));
        float _1653 = fma(_747, cbModelParam._m0[15u].z, fma(_746, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _745));
        float _1681;
        if (_1647 > 0.0)
        {
            _1681 = abs((1.0 - _1636) / _1647);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1647 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1636 + 1.0) / _1647);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1681 = frontier_phi_17_15_ladder;
        }
        float _1906;
        if (_1650 > 0.0)
        {
            _1906 = abs((1.0 - _1640) / _1650);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1650 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1640 + 1.0) / _1650);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1906 = frontier_phi_26_22_ladder;
        }
        float _2163;
        if (_1653 > 0.0)
        {
            _2163 = abs((1.0 - _1644) / _1653);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1653 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1644 + 1.0) / _1653);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2163 = frontier_phi_38_33_ladder;
        }
        float _2165 = isnan(_1906) ? _1681 : (isnan(_1681) ? _1906 : min(_1681, _1906));
        float _2166 = isnan(_2163) ? _2165 : (isnan(_2165) ? _2163 : min(_2165, _2163));
        float _2170 = (_2166 * _1647) + _1636;
        float _2171 = (_2166 * _1650) + _1640;
        float _2172 = (_2166 * _1653) + _1644;
        float _2173 = _2166 * 9.9999997473787516355514526367188e-05;
        float _2175 = (-1.0) - _2173;
        float _2177 = _2173 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2172 > _2177) || ((_2172 < _2175) || ((_2171 > _2177) || ((_2171 < _2175) || ((_2170 < _2175) || (_2170 > _2177))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2300 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2172, cbModelParam._m0[9u].z, fma(_2171, cbModelParam._m0[9u].y, _2170 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2172, cbModelParam._m0[10u].z, fma(_2171, cbModelParam._m0[10u].y, _2170 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2172, cbModelParam._m0[11u].z, fma(_2171, cbModelParam._m0[11u].y, _2170 * cbModelParam._m0[11u].x))), _1588);
            frontier_phi_16_38_ladder = _2300.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2300.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2300.x * cbModelParam._m0[1u].y;
        }
        _1669 = frontier_phi_16_38_ladder_2;
        _1671 = frontier_phi_16_38_ladder_1;
        _1673 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1657 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_745, _746, _747), _1588);
        _1669 = _1657.x * cbModelParam._m0[1u].y;
        _1671 = _1657.y * cbModelParam._m0[1u].y;
        _1673 = _1657.z * cbModelParam._m0[1u].y;
    }
    float _1677 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _559);
    float _1678 = isnan(_1677) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1677 : min(cbModelParam._m0[25u].w, _1677));
    float _1768;
    float _1770;
    float _1772;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1732 = fma(_809, cbModelParam._m0[21u].z, fma(_805, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _801)) + cbModelParam._m0[21u].w;
        float _1736 = fma(_809, cbModelParam._m0[22u].z, fma(_805, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _801)) + cbModelParam._m0[22u].w;
        float _1740 = fma(_809, cbModelParam._m0[23u].z, fma(_805, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _801)) + cbModelParam._m0[23u].w;
        float _1743 = fma(_747, cbModelParam._m0[21u].z, fma(_746, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _745));
        float _1746 = fma(_747, cbModelParam._m0[22u].z, fma(_746, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _745));
        float _1749 = fma(_747, cbModelParam._m0[23u].z, fma(_746, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _745));
        float _1911;
        if (_1743 > 0.0)
        {
            _1911 = abs((1.0 - _1732) / _1743);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1743 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1732 + 1.0) / _1743);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1911 = frontier_phi_28_24_ladder;
        }
        float _2190;
        if (_1746 > 0.0)
        {
            _2190 = abs((1.0 - _1736) / _1746);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1746 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1736 + 1.0) / _1746);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2190 = frontier_phi_40_35_ladder;
        }
        float _2403;
        if (_1749 > 0.0)
        {
            _2403 = abs((1.0 - _1740) / _1749);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1749 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1740 + 1.0) / _1749);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2403 = frontier_phi_49_46_ladder;
        }
        float _2405 = isnan(_2190) ? _1911 : (isnan(_1911) ? _2190 : min(_1911, _2190));
        float _2406 = isnan(_2403) ? _2405 : (isnan(_2405) ? _2403 : min(_2405, _2403));
        float _2410 = (_2406 * _1743) + _1732;
        float _2411 = (_2406 * _1746) + _1736;
        float _2412 = (_2406 * _1749) + _1740;
        float _2413 = _2406 * 9.9999997473787516355514526367188e-05;
        float _2414 = (-1.0) - _2413;
        float _2416 = _2413 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2412 > _2416) || ((_2412 < _2414) || ((_2411 > _2416) || ((_2411 < _2414) || ((_2410 < _2414) || (_2410 > _2416))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2611 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2412, cbModelParam._m0[17u].z, fma(_2411, cbModelParam._m0[17u].y, _2410 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2412, cbModelParam._m0[18u].z, fma(_2411, cbModelParam._m0[18u].y, _2410 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2412, cbModelParam._m0[19u].z, fma(_2411, cbModelParam._m0[19u].y, _2410 * cbModelParam._m0[19u].x))), _1678);
            frontier_phi_25_49_ladder = _2611.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2611.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2611.x * cbModelParam._m0[1u].z;
        }
        _1768 = frontier_phi_25_49_ladder_2;
        _1770 = frontier_phi_25_49_ladder_1;
        _1772 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1752 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_745, _746, _747), _1678);
        _1768 = _1752.x * cbModelParam._m0[1u].z;
        _1770 = _1752.y * cbModelParam._m0[1u].z;
        _1772 = _1752.z * cbModelParam._m0[1u].z;
    }
    float _1785 = (((_772 * _721) + _773) * _737) * ((cbModelParam._m0[1u].w * (_1768 - _1669)) + _1669);
    float _1787 = (((_772 * _723) + _773) * _737) * ((cbModelParam._m0[1u].w * (_1770 - _1671)) + _1671);
    float _1789 = (((_772 * _724) + _773) * _737) * ((cbModelParam._m0[1u].w * (_1772 - _1673)) + _1673);
    float _1792 = fma(_1789, cbSceneParam._m0[89u].z, fma(_1787, cbSceneParam._m0[89u].y, _1785 * cbSceneParam._m0[89u].x));
    float _1795 = fma(_1789, cbSceneParam._m0[90u].z, fma(_1787, cbSceneParam._m0[90u].y, _1785 * cbSceneParam._m0[90u].x));
    float _1798 = fma(_1789, cbSceneParam._m0[91u].z, fma(_1787, cbSceneParam._m0[91u].y, _1785 * cbSceneParam._m0[91u].x));
    vec4 _1806 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_657, _658));
    float _1808 = _1806.w;
    float _1820 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1808);
    float _1821 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1808);
    float _1822 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1808);
    uvec4 _1826 = floatBitsToUint(cbInstanceData._m0[_256 + 5u]);
    uint _1828 = _1826.x * 14u;
    uint _1829 = _1828 + 13u;
    float _1836 = _737 + (-1.0);
    float _1841 = (cbLight._m0[_1829].x * _1836) + 1.0;
    float _1842 = (cbLight._m0[_1829].y * _1836) + 1.0;
    float _1843 = (cbLight._m0[_1829].z * _1836) + 1.0;
    float _1844 = (cbLight._m0[_1829].w * _1836) + 1.0;
    uint _1845 = _1828 + 5u;
    float _1851 = isnan(1.0) ? _1842 : (isnan(_1842) ? 1.0 : min(_1842, 1.0));
    uint _1855 = _1828 + 4u;
    float _1865 = isnan(1.0) ? _1841 : (isnan(_1841) ? 1.0 : min(_1841, 1.0));
    uint _1869 = _1828 | 1u;
    float _1880 = dot(vec3(cbLight._m0[_1828].xyz), vec3(_556, _557, _558));
    float _1883 = dot(vec3(cbLight._m0[_1869].xyz), vec3(_556, _557, _558));
    float _4124 = isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0));
    float _4135 = isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0));
    float _1888 = (isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0))) * 0.3183098733425140380859375;
    float _1890 = (isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0))) * 0.3183098733425140380859375;
    float _1897 = ((cbLight._m0[_1845].x * _1851) * _1890) + (((cbLight._m0[_1855].x * _1820) * _1865) * _1888);
    float _1898 = ((_1851 * cbLight._m0[_1845].y) * _1890) + (((cbLight._m0[_1855].y * _1821) * _1865) * _1888);
    float _1899 = ((_1851 * cbLight._m0[_1845].z) * _1890) + (((cbLight._m0[_1855].z * _1822) * _1865) * _1888);
    uvec4 _1903 = floatBitsToUint(cbLight._m0[_1828 + 12u]);
    bool _1905 = _1903.x == 0u;
    float _1916;
    float _1918;
    float _1920;
    if (_1905)
    {
        _1916 = _1897;
        _1918 = _1898;
        _1920 = _1899;
    }
    else
    {
        uint _1924 = _1828 + 6u;
        float _1940 = (dot(vec3(cbLight._m0[_1828 + 2u].xyz), vec3(_556, _557, _558)) * 0.5) + 0.5;
        float _1941 = _1940 * _1940;
        float _4146 = isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0));
        float _1942 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
        float _1943 = isnan(1.0) ? _1843 : (isnan(_1843) ? 1.0 : min(_1843, 1.0));
        _1916 = (((cbLight._m0[_1924].x * 0.3183098733425140380859375) * _1942) * _1943) + _1897;
        _1918 = (((cbLight._m0[_1924].y * 0.3183098733425140380859375) * _1942) * _1943) + _1898;
        _1920 = (((cbLight._m0[_1924].z * 0.3183098733425140380859375) * _1942) * _1943) + _1899;
    }
    bool _1923 = _1903.y == 0u;
    float _1961;
    float _1963;
    float _1965;
    if (_1923)
    {
        _1961 = _1916;
        _1963 = _1918;
        _1965 = _1920;
    }
    else
    {
        uint _2134 = _1828 + 7u;
        float _2150 = (dot(vec3(cbLight._m0[_1828 + 3u].xyz), vec3(_556, _557, _558)) * 0.5) + 0.5;
        float _2151 = _2150 * _2150;
        float _4162 = isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0));
        float _2152 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
        float _2153 = isnan(1.0) ? _1844 : (isnan(_1844) ? 1.0 : min(_1844, 1.0));
        _1961 = (((cbLight._m0[_2134].x * 0.3183098733425140380859375) * _2152) * _2153) + _1916;
        _1963 = (((cbLight._m0[_2134].y * 0.3183098733425140380859375) * _2152) * _2153) + _1918;
        _1965 = (((cbLight._m0[_2134].z * 0.3183098733425140380859375) * _2152) * _2153) + _1920;
    }
    uint _1968 = _1828 + 8u;
    float _1981 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1828].w)) * _559) * 0.949999988079071044921875);
    float _1982 = _1981 * _1981;
    float _1983 = cbLight._m0[_1828].x + _636;
    float _1984 = cbLight._m0[_1828].y + _637;
    float _1985 = cbLight._m0[_1828].z + _638;
    float _1989 = inversesqrt(dot(vec3(_1983, _1984, _1985), vec3(_1983, _1984, _1985)));
    float _1990 = _1989 * _1983;
    float _1991 = _1989 * _1984;
    float _1992 = _1989 * _1985;
    float _1993 = dot(vec3(_556, _557, _558), vec3(cbLight._m0[_1828].xyz));
    float _4178 = isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0));
    float _1996 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
    float _4189 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
    float _1997 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
    float _1998 = dot(vec3(_556, _557, _558), vec3(_1990, _1991, _1992));
    float _4200 = isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0));
    float _2001 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
    float _2002 = dot(vec3(cbLight._m0[_1828].xyz), vec3(_1990, _1991, _1992));
    float _4211 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0));
    float _2006 = _1982 * _1982;
    float _2010 = ((_2001 * _2001) * (_2006 + (-1.0))) + 1.0;
    float _2018 = exp2(log2(1.0 - (isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0)))) * 5.0);
    float _2019 = 0.959999978542327880859375 - _718;
    float _2021 = 0.959999978542327880859375 - _719;
    float _2022 = 0.959999978542327880859375 - _720;
    float _2029 = 1.0 - _1982;
    float _2040 = (0.5 / (((_1997 * ((_1996 * _2029) + _1982)) + 9.9999999392252902907785028219223e-09) + (((_1997 * _2029) + _1982) * _1996))) * _1996;
    float _4222 = isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0));
    float _2042 = (isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0))) * (_2006 / ((_2010 * _2010) * 3.141590118408203125));
    uint _2056 = _1828 + 9u;
    float _2067 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1869].w)) * _559) * 0.949999988079071044921875);
    float _2068 = _2067 * _2067;
    float _2069 = cbLight._m0[_1869].x + _636;
    float _2070 = cbLight._m0[_1869].y + _637;
    float _2071 = cbLight._m0[_1869].z + _638;
    float _2075 = inversesqrt(dot(vec3(_2069, _2070, _2071), vec3(_2069, _2070, _2071)));
    float _2076 = _2075 * _2069;
    float _2077 = _2075 * _2070;
    float _2078 = _2075 * _2071;
    float _2079 = dot(vec3(_556, _557, _558), vec3(cbLight._m0[_1869].xyz));
    float _4233 = isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0));
    float _2082 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
    float _2083 = dot(vec3(_556, _557, _558), vec3(_2076, _2077, _2078));
    float _4244 = isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0));
    float _2086 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
    float _2087 = dot(vec3(cbLight._m0[_1869].xyz), vec3(_2076, _2077, _2078));
    float _4255 = isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0));
    float _2091 = _2068 * _2068;
    float _2095 = ((_2086 * _2086) * (_2091 + (-1.0))) + 1.0;
    float _2102 = exp2(log2(1.0 - (isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0)))) * 5.0);
    float _2109 = 1.0 - _2068;
    float _2119 = (0.5 / (((_1997 * ((_2082 * _2109) + _2068)) + 9.9999999392252902907785028219223e-09) + (((_1997 * _2109) + _2068) * _2082))) * _2082;
    float _4266 = isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0));
    float _2121 = (isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0))) * (_2091 / ((_2095 * _2095) * 3.141590118408203125));
    float _2131 = (((((_2102 * _2019) + _721) * cbLight._m0[_2056].x) * _2121) * _1851) + ((((cbLight._m0[_1968].x * _1820) * ((_2018 * _2019) + _721)) * _2042) * _1865);
    float _2132 = (((((_2102 * _2021) + _723) * cbLight._m0[_2056].y) * _2121) * _1851) + ((((cbLight._m0[_1968].y * _1821) * ((_2018 * _2021) + _723)) * _2042) * _1865);
    float _2133 = (((((_2102 * _2022) + _724) * cbLight._m0[_2056].z) * _2121) * _1851) + ((((cbLight._m0[_1968].z * _1822) * ((_2018 * _2022) + _724)) * _2042) * _1865);
    float _2195;
    float _2197;
    float _2199;
    if (_1905)
    {
        _2195 = _2131;
        _2197 = _2132;
        _2199 = _2133;
    }
    else
    {
        uint _2201 = _1828 + 2u;
        uint _2205 = _1828 + 10u;
        float _2219 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2201].w)) * _559) * 0.949999988079071044921875);
        float _2220 = _2219 * _2219;
        float _2221 = cbLight._m0[_2201].x + _636;
        float _2222 = cbLight._m0[_2201].y + _637;
        float _2223 = cbLight._m0[_2201].z + _638;
        float _2227 = inversesqrt(dot(vec3(_2221, _2222, _2223), vec3(_2221, _2222, _2223)));
        float _2228 = _2227 * _2221;
        float _2229 = _2227 * _2222;
        float _2230 = _2227 * _2223;
        float _2231 = dot(vec3(_556, _557, _558), vec3(cbLight._m0[_2201].xyz));
        float _4277 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
        float _2234 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
        float _2235 = dot(vec3(_556, _557, _558), vec3(_2228, _2229, _2230));
        float _4288 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
        float _2238 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
        float _2239 = dot(vec3(cbLight._m0[_2201].xyz), vec3(_2228, _2229, _2230));
        float _4299 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
        float _2243 = _2220 * _2220;
        float _2247 = ((_2238 * _2238) * (_2243 + (-1.0))) + 1.0;
        float _2254 = exp2(log2(1.0 - (isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0)))) * 5.0);
        float _2261 = 1.0 - _2220;
        float _2271 = (0.5 / (((_1997 * ((_2234 * _2261) + _2220)) + 9.9999999392252902907785028219223e-09) + (((_1997 * _2261) + _2220) * _2234))) * _2234;
        float _4310 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0));
        float _2273 = (isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0))) * (_2243 / ((_2247 * _2247) * 3.141590118408203125));
        float _2274 = isnan(1.0) ? _1843 : (isnan(_1843) ? 1.0 : min(_1843, 1.0));
        _2195 = (((((_2254 * _2019) + _721) * cbLight._m0[_2205].x) * _2273) * _2274) + _2131;
        _2197 = (((((_2254 * _2021) + _723) * cbLight._m0[_2205].y) * _2273) * _2274) + _2132;
        _2199 = (((((_2254 * _2022) + _724) * cbLight._m0[_2205].z) * _2273) * _2274) + _2133;
    }
    float _2309;
    float _2311;
    float _2313;
    if (_1923)
    {
        _2309 = _2195;
        _2311 = _2197;
        _2313 = _2199;
    }
    else
    {
        uint _2320 = _1828 + 3u;
        uint _2324 = _1828 + 11u;
        float _2338 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2320].w)) * _559) * 0.949999988079071044921875);
        float _2339 = _2338 * _2338;
        float _2340 = cbLight._m0[_2320].x + _636;
        float _2341 = cbLight._m0[_2320].y + _637;
        float _2342 = cbLight._m0[_2320].z + _638;
        float _2346 = inversesqrt(dot(vec3(_2340, _2341, _2342), vec3(_2340, _2341, _2342)));
        float _2347 = _2346 * _2340;
        float _2348 = _2346 * _2341;
        float _2349 = _2346 * _2342;
        float _2350 = dot(vec3(_556, _557, _558), vec3(cbLight._m0[_2320].xyz));
        float _4326 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
        float _2353 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
        float _2354 = dot(vec3(_556, _557, _558), vec3(_2347, _2348, _2349));
        float _4337 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
        float _2357 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
        float _2358 = dot(vec3(cbLight._m0[_2320].xyz), vec3(_2347, _2348, _2349));
        float _4348 = isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : max(_2358, 0.0));
        float _2362 = _2339 * _2339;
        float _2366 = ((_2357 * _2357) * (_2362 + (-1.0))) + 1.0;
        float _2373 = exp2(log2(1.0 - (isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0)))) * 5.0);
        float _2380 = 1.0 - _2339;
        float _2390 = (0.5 / (((_1997 * ((_2353 * _2380) + _2339)) + 9.9999999392252902907785028219223e-09) + (((_1997 * _2380) + _2339) * _2353))) * _2353;
        float _4359 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0));
        float _2392 = (isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0))) * (_2362 / ((_2366 * _2366) * 3.141590118408203125));
        float _2393 = isnan(1.0) ? _1844 : (isnan(_1844) ? 1.0 : min(_1844, 1.0));
        _2309 = (((((_2373 * _2019) + _721) * cbLight._m0[_2324].x) * _2392) * _2393) + _2195;
        _2311 = (((((_2373 * _2021) + _723) * cbLight._m0[_2324].y) * _2392) * _2393) + _2197;
        _2313 = (((((_2373 * _2022) + _724) * cbLight._m0[_2324].z) * _2392) * _2393) + _2199;
    }
    float _2528;
    float _2530;
    float _2532;
    float _2534;
    float _2536;
    float _2538;
    if (_1826.y == 0u)
    {
        float _2468 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2469 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2468;
        float _2470 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2468;
        float _2471 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2468;
        uvec4 _2483 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2484 = _2483.x;
        uint _2495 = uint((float(_2483.y) * floor(float(uint(cbSceneParam._m0[85u].y * _658) / _2484))) + floor(float(uint(cbSceneParam._m0[85u].x * _657) / _2484)));
        float _2505 = (log2(_2471 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2506 = isnan(0.0) ? _2505 : (isnan(_2505) ? 0.0 : max(_2505, 0.0));
        uint _2509 = uint(isnan(14.0) ? _2506 : (isnan(_2506) ? 14.0 : min(_2506, 14.0)));
        uvec4 _2514 = texelFetch(g_lightClusterGridBuffer, int(((_2509 << 2u) + (_2495 << 6u)) >> 2u));
        uint _2515 = _2514.x;
        uint _2516 = _2483.z;
        float _2616;
        float _2618;
        float _2620;
        float _2622;
        float _2624;
        float _2626;
        if (((((1u << ((_2516 >> 4u) & 15u)) + 4294967295u) & _2515) == 0u) || ((_2516 & 240u) == 0u))
        {
            _2616 = 0.0;
            _2618 = 0.0;
            _2620 = 0.0;
            _2622 = 0.0;
            _2624 = 0.0;
            _2626 = 0.0;
        }
        else
        {
            float _2617;
            float _2619;
            float _2621;
            float _2623;
            float _2625;
            float _2627;
            float _2769 = 0.0;
            float _2770 = 0.0;
            float _2771 = 0.0;
            float _2772 = 0.0;
            float _2773 = 0.0;
            float _2774 = 0.0;
            uint _2775 = 0u;
            uint _2784;
            bool _2785;
            for (;;)
            {
                _2784 = texelFetch(g_lightClassification, int((((_2509 << 5u) + (_2495 << 9u)) + (_2775 << 2u)) >> 2u)).x;
                _2785 = _2784 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2785)
                {
                    frontier_phi_66_pred = _2769;
                    frontier_phi_66_pred_1 = _2774;
                    frontier_phi_66_pred_2 = _2773;
                    frontier_phi_66_pred_3 = _2772;
                    frontier_phi_66_pred_4 = _2771;
                    frontier_phi_66_pred_5 = _2770;
                }
                else
                {
                    float _2914;
                    float _2915;
                    float _2916;
                    float _2917;
                    float _2918;
                    float _2919;
                    uint _2920;
                    _2914 = _2769;
                    _2915 = _2770;
                    _2916 = _2771;
                    _2917 = _2772;
                    _2918 = _2773;
                    _2919 = _2774;
                    _2920 = _2784;
                    float _2841;
                    float _2842;
                    float _2843;
                    float _2844;
                    float _2845;
                    float _2846;
                    for (;;)
                    {
                        uint _2924 = uint(findLSB(_2920)) + (_2775 << 5u);
                        uint _2921 = (_2920 + 4294967295u) & _2920;
                        uint _2926 = _2924 * 48u;
                        vec4 _2940 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2926)).x, texelFetch(g_PointLightRenderingBuffer, int(_2926 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2926 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2926 + 3u)).x));
                        uint _2946 = (_2924 * 48u) + 4u;
                        vec4 _2959 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2946)).x, texelFetch(g_PointLightRenderingBuffer, int(_2946 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2946 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2946 + 3u)).x));
                        uint _2965 = (_2924 * 48u) + 8u;
                        vec3 _2976 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2965)).x, texelFetch(g_PointLightRenderingBuffer, int(_2965 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2965 + 2u)).x));
                        float _2980 = _2940.x - _2469;
                        float _2981 = _2940.y - _2470;
                        float _2982 = _2940.z - _2471;
                        float _2983 = dot(vec3(_2980, _2981, _2982), vec3(_2980, _2981, _2982));
                        float _2986 = inversesqrt(_2983);
                        float _2987 = _2986 * _2980;
                        float _2988 = _2986 * _2981;
                        float _2989 = _2986 * _2982;
                        float _2990 = dot(vec3(_678, _681, _684), vec3(_2987, _2988, _2989));
                        float _2995 = 1.0 - (_2983 * _2940.w);
                        float _4385 = isnan(0.0) ? _2995 : (isnan(_2995) ? 0.0 : max(_2995, 0.0));
                        float _2996 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
                        float _2997 = sqrt(_2983) * _2959.w;
                        float _3000 = 1.39999997615814208984375 / (_2997 + 1.39999997615814208984375);
                        float _3001 = _3000 * _3000;
                        float _3004 = ((1.0 - _3001) * _2990) + _3001;
                        float _3007 = _2997 * _2997;
                        float _3011 = ((isnan(0.0) ? _3004 : (isnan(_3004) ? 0.0 : max(_3004, 0.0))) * _2996) / ((_3007 * 0.699999988079071044921875) + 1.0);
                        float _3015 = (-0.0) - _2469;
                        float _3016 = (-0.0) - _2470;
                        float _3017 = (-0.0) - _2471;
                        float _3021 = inversesqrt(dot(vec3(_3015, _3016, _3017), vec3(_3015, _3016, _3017)));
                        float _3022 = _3021 * _3015;
                        float _3023 = _3021 * _3016;
                        float _3024 = _3021 * _3017;
                        float _3032 = exp2(log2(1.0 / ((_3007 * 3.5) + 5.0)) * 0.25);
                        float _3033 = 1.0 - _753;
                        float _3040 = sqrt(1.0 - ((1.0 - (_3033 * _3033)) * (1.0 - (_3032 * _3032))));
                        float _3041 = _3040 * _3040;
                        float _3042 = _3041 * _3041;
                        float _3043 = _3022 + _2987;
                        float _3044 = _3023 + _2988;
                        float _3045 = _3024 + _2989;
                        float _3049 = inversesqrt(dot(vec3(_3043, _3044, _3045), vec3(_3043, _3044, _3045)));
                        float _3053 = dot(vec3(_678, _681, _684), vec3(_3022, _3023, _3024));
                        float _4401 = isnan(0.0) ? _3053 : (isnan(_3053) ? 0.0 : max(_3053, 0.0));
                        float _3056 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
                        float _3057 = dot(vec3(_678, _681, _684), vec3(_3049 * _3043, _3049 * _3044, _3049 * _3045));
                        float _4412 = isnan(0.0) ? _3057 : (isnan(_3057) ? 0.0 : max(_3057, 0.0));
                        float _3060 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
                        float _3064 = ((_3060 * _3060) * (_3042 + (-1.0))) + 1.0;
                        float _3065 = _3000 * _3041;
                        float _3066 = _3065 * _3065;
                        float _3069 = ((1.0 - _3066) * _2990) + _3066;
                        float _4423 = isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : max(_3069, 0.0));
                        float _3070 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
                        float _3071 = 1.0 - _3041;
                        float _3081 = (0.5 / (((_3070 * ((_3056 * _3071) + _3041)) + 9.9999999392252902907785028219223e-09) + (((_3070 * _3071) + _3041) * _3056))) * _3070;
                        float _4434 = isnan(0.0) ? _3081 : (isnan(_3081) ? 0.0 : max(_3081, 0.0));
                        float _3092 = (((_3042 * 3.1415927410125732421875) * (isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0)))) / ((_3064 * _3064) * ((_3007 * 2.1991131305694580078125) + 3.141590118408203125))) * _2996;
                        _2844 = (_3011 * _2959.x) + _2917;
                        _2845 = (_3011 * _2959.y) + _2918;
                        _2846 = (_3011 * _2959.z) + _2919;
                        _2841 = (_3092 * _2976.x) + _2914;
                        _2842 = (_3092 * _2976.y) + _2915;
                        _2843 = (_3092 * _2976.z) + _2916;
                        if (_2921 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2914 = _2841;
                            _2915 = _2842;
                            _2916 = _2843;
                            _2917 = _2844;
                            _2918 = _2845;
                            _2919 = _2846;
                            _2920 = _2921;
                        }
                    }
                    frontier_phi_66_pred = _2841;
                    frontier_phi_66_pred_1 = _2846;
                    frontier_phi_66_pred_2 = _2845;
                    frontier_phi_66_pred_3 = _2844;
                    frontier_phi_66_pred_4 = _2843;
                    frontier_phi_66_pred_5 = _2842;
                }
                _2617 = frontier_phi_66_pred;
                _2627 = frontier_phi_66_pred_1;
                _2625 = frontier_phi_66_pred_2;
                _2623 = frontier_phi_66_pred_3;
                _2621 = frontier_phi_66_pred_4;
                _2619 = frontier_phi_66_pred_5;
                uint _2776 = _2775 + 1u;
                if (_2776 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2769 = _2617;
                    _2770 = _2619;
                    _2771 = _2621;
                    _2772 = _2623;
                    _2773 = _2625;
                    _2774 = _2627;
                    _2775 = _2776;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2616 = _2617;
            _2618 = _2619;
            _2620 = _2621;
            _2622 = _2623;
            _2624 = _2625;
            _2626 = _2627;
        }
        uvec4 _2630 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2631 = _2630.z;
        uint _2633 = (_2631 >> 8u) & 15u;
        float _2737;
        float _2739;
        float _2741;
        float _2743;
        float _2745;
        float _2747;
        if (((4294967295u << _2633) & _2515) == 0u)
        {
            _2737 = _2616;
            _2739 = _2618;
            _2741 = _2620;
            _2743 = _2622;
            _2745 = _2624;
            _2747 = _2626;
        }
        else
        {
            float _2762 = inversesqrt(dot(vec3(_2469, _2470, _2471), vec3(_2469, _2470, _2471)));
            float _2763 = _2762 * _2469;
            float _2764 = _2762 * _2470;
            float _2765 = _2762 * _2471;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2633 < ((_2631 >> 12u) & 15u))
            {
                float _2738;
                float _2740;
                float _2742;
                float _2744;
                float _2746;
                float _2748;
                float _2897 = _2616;
                float _2898 = _2618;
                float _2899 = _2620;
                float _2900 = _2622;
                float _2901 = _2624;
                float _2902 = _2626;
                uint _2903 = _2633;
                uint _2912;
                bool _2913;
                for (;;)
                {
                    _2912 = texelFetch(g_lightClassification, int((((_2509 << 5u) + (_2495 << 9u)) + (_2903 << 2u)) >> 2u)).x;
                    _2913 = _2912 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2913)
                    {
                        frontier_phi_77_pred = _2902;
                        frontier_phi_77_pred_1 = _2901;
                        frontier_phi_77_pred_2 = _2900;
                        frontier_phi_77_pred_3 = _2899;
                        frontier_phi_77_pred_4 = _2898;
                        frontier_phi_77_pred_5 = _2897;
                    }
                    else
                    {
                        float _3106;
                        float _3107;
                        float _3108;
                        float _3109;
                        float _3110;
                        float _3111;
                        float _3399;
                        float _3400;
                        float _3401;
                        float _3402;
                        float _3403;
                        float _3404;
                        float _3119 = _2897;
                        float _3120 = _2898;
                        float _3121 = _2899;
                        float _3122 = _2900;
                        float _3123 = _2901;
                        float _3124 = _2902;
                        uint _3125 = _2912;
                        uint _3126;
                        vec4 _3151;
                        float _3152;
                        vec4 _3167;
                        vec3 _3179;
                        vec4 _3194;
                        vec4 _3209;
                        float _3255;
                        bool _3256;
                        for (;;)
                        {
                            uint _3136 = ((_2903 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3125));
                            _3126 = (_3125 + 4294967295u) & _3125;
                            uint _3138 = _3136 * 40u;
                            _3151 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3138)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3138 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3138 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3138 + 3u)).x));
                            _3152 = _3151.w;
                            uint _3154 = (_3136 * 40u) + 4u;
                            _3167 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3154)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3154 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3154 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3154 + 3u)).x));
                            uint _3169 = (_3136 * 40u) + 8u;
                            _3179 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3169)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 2u)).x));
                            uint _3181 = (_3136 * 40u) + 16u;
                            _3194 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3181)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 3u)).x));
                            uint _3196 = (_3136 * 40u) + 20u;
                            _3209 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3196)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3196 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3196 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3196 + 3u)).x));
                            uint _3211 = (_3136 * 40u) + 24u;
                            vec4 _3224 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3211)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 3u)).x));
                            uint _3230 = (_3136 * 40u) + 28u;
                            vec4 _3243 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3230)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 3u)).x));
                            _3255 = fma(_2471, _3243.z, fma(_2470, _3243.y, _3243.x * _2469)) + _3243.w;
                            _3256 = !((fma(_2471, _3224.z, fma(_2470, _3224.y, _3224.x * _2469)) + _3224.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3256)
                            {
                                float _3283 = _3151.x - _2469;
                                float _3284 = _3151.y - _2470;
                                float _3285 = _3151.z - _2471;
                                float _3286 = dot(vec3(_3283, _3284, _3285), vec3(_3283, _3284, _3285));
                                float _3289 = inversesqrt(_3286);
                                float _3290 = _3289 * _3283;
                                float _3291 = _3289 * _3284;
                                float _3292 = _3289 * _3285;
                                float _3296 = 1.0 - (_3286 / (_3152 * _3152));
                                float _4445 = isnan(0.0) ? _3296 : (isnan(_3296) ? 0.0 : max(_3296, 0.0));
                                float _3297 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
                                float _3301 = sqrt(_3286) * _3167.w;
                                float _3303 = 1.39999997615814208984375 / (_3301 + 1.39999997615814208984375);
                                float _3304 = _3303 * _3303;
                                float _3307 = ((1.0 - _3304) * dot(vec3(_3290, _3291, _3292), vec3(_678, _681, _684))) + _3304;
                                float _3310 = _3301 * _3301;
                                float _3314 = (fma(_2471, _3194.z, fma(_2470, _3194.y, _3194.x * _2469)) + _3194.w) / _3255;
                                float _3315 = (fma(_2471, _3209.z, fma(_2470, _3209.y, _3209.x * _2469)) + _3209.w) / _3255;
                                float _3319 = 1.0 - dot(vec2(_3314, _3315), vec2(_3314, _3315));
                                float _4461 = isnan(0.0) ? _3319 : (isnan(_3319) ? 0.0 : max(_3319, 0.0));
                                float _3320 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
                                float _3321 = _3320 * (((isnan(0.0) ? _3307 : (isnan(_3307) ? 0.0 : max(_3307, 0.0))) * _3297) / ((_3310 * 0.699999988079071044921875) + 1.0));
                                float _3333 = exp2(log2(1.0 / ((_3310 * 3.5) + 5.0)) * 0.25);
                                float _3334 = 1.0 - _753;
                                float _3341 = sqrt(1.0 - ((1.0 - (_3334 * _3334)) * (1.0 - (_3333 * _3333))));
                                float _3342 = _3341 * _3341;
                                float _3343 = _3342 * _3342;
                                float _3344 = _3290 - _2763;
                                float _3345 = _3291 - _2764;
                                float _3346 = _3292 - _2765;
                                float _3350 = inversesqrt(dot(vec3(_3344, _3345, _3346), vec3(_3344, _3345, _3346)));
                                float _3354 = dot(vec3(_678, _681, _684), vec3((-0.0) - _2763, (-0.0) - _2764, (-0.0) - _2765));
                                float _4472 = isnan(0.0) ? _3354 : (isnan(_3354) ? 0.0 : max(_3354, 0.0));
                                float _3357 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
                                float _3358 = dot(vec3(_678, _681, _684), vec3(_3350 * _3344, _3350 * _3345, _3350 * _3346));
                                float _4483 = isnan(0.0) ? _3358 : (isnan(_3358) ? 0.0 : max(_3358, 0.0));
                                float _3361 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
                                float _3365 = ((_3361 * _3361) * (_3343 + (-1.0))) + 1.0;
                                float _3366 = _3303 * _3342;
                                float _3367 = _3366 * _3366;
                                float _3373 = ((1.0 - _3367) * dot(vec3(_678, _681, _684), vec3(_3290, _3291, _3292))) + _3367;
                                float _4494 = isnan(0.0) ? _3373 : (isnan(_3373) ? 0.0 : max(_3373, 0.0));
                                float _3374 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
                                float _3375 = 1.0 - _3342;
                                float _3385 = (0.5 / (((_3374 * ((_3357 * _3375) + _3342)) + 9.9999999392252902907785028219223e-09) + (((_3374 * _3375) + _3342) * _3357))) * _3374;
                                float _4505 = isnan(0.0) ? _3385 : (isnan(_3385) ? 0.0 : max(_3385, 0.0));
                                float _3395 = (_3320 * _3297) * (((_3343 * 3.1415927410125732421875) * (isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0)))) / ((_3365 * _3365) * ((_3310 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3321 * _3167.y;
                                frontier_phi_83_pred_1 = _3321 * _3167.x;
                                frontier_phi_83_pred_2 = _3395 * _3179.z;
                                frontier_phi_83_pred_3 = _3395 * _3179.y;
                                frontier_phi_83_pred_4 = _3395 * _3179.x;
                                frontier_phi_83_pred_5 = _3321 * _3167.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3403 = frontier_phi_83_pred;
                            _3402 = frontier_phi_83_pred_1;
                            _3401 = frontier_phi_83_pred_2;
                            _3400 = frontier_phi_83_pred_3;
                            _3399 = frontier_phi_83_pred_4;
                            _3404 = frontier_phi_83_pred_5;
                            _3109 = _3402 + _3122;
                            _3110 = _3403 + _3123;
                            _3111 = _3404 + _3124;
                            _3106 = _3399 + _3119;
                            _3107 = _3400 + _3120;
                            _3108 = _3401 + _3121;
                            if (_3126 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3119 = _3106;
                                _3120 = _3107;
                                _3121 = _3108;
                                _3122 = _3109;
                                _3123 = _3110;
                                _3124 = _3111;
                                _3125 = _3126;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3111;
                        frontier_phi_77_pred_1 = _3110;
                        frontier_phi_77_pred_2 = _3109;
                        frontier_phi_77_pred_3 = _3108;
                        frontier_phi_77_pred_4 = _3107;
                        frontier_phi_77_pred_5 = _3106;
                    }
                    _2748 = frontier_phi_77_pred;
                    _2746 = frontier_phi_77_pred_1;
                    _2744 = frontier_phi_77_pred_2;
                    _2742 = frontier_phi_77_pred_3;
                    _2740 = frontier_phi_77_pred_4;
                    _2738 = frontier_phi_77_pred_5;
                    uint _2904 = _2903 + 1u;
                    if (_2904 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2897 = _2738;
                        _2898 = _2740;
                        _2899 = _2742;
                        _2900 = _2744;
                        _2901 = _2746;
                        _2902 = _2748;
                        _2903 = _2904;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2742;
                frontier_phi_58_59_ladder_1 = _2748;
                frontier_phi_58_59_ladder_2 = _2746;
                frontier_phi_58_59_ladder_3 = _2744;
                frontier_phi_58_59_ladder_4 = _2740;
                frontier_phi_58_59_ladder_5 = _2738;
            }
            else
            {
                frontier_phi_58_59_ladder = _2620;
                frontier_phi_58_59_ladder_1 = _2626;
                frontier_phi_58_59_ladder_2 = _2624;
                frontier_phi_58_59_ladder_3 = _2622;
                frontier_phi_58_59_ladder_4 = _2618;
                frontier_phi_58_59_ladder_5 = _2616;
            }
            _2737 = frontier_phi_58_59_ladder_5;
            _2739 = frontier_phi_58_59_ladder_4;
            _2741 = frontier_phi_58_59_ladder;
            _2743 = frontier_phi_58_59_ladder_3;
            _2745 = frontier_phi_58_59_ladder_2;
            _2747 = frontier_phi_58_59_ladder_1;
        }
        float _2752 = isnan(1.0) ? _737 : (isnan(_737) ? 1.0 : min(_737, 1.0));
        _2528 = (_2752 * _2743) + _1961;
        _2530 = (_2752 * _2745) + _1963;
        _2532 = (_2752 * _2747) + _1965;
        _2534 = ((_2737 * _721) * _2752) + _2309;
        _2536 = ((_2739 * _723) * _2752) + _2311;
        _2538 = ((_2741 * _724) * _2752) + _2313;
    }
    else
    {
        _2528 = _1961;
        _2530 = _1963;
        _2532 = _1965;
        _2534 = _2309;
        _2536 = _2311;
        _2538 = _2313;
    }
    float _4521 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _4532 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _4543 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _2555 = ((isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0))) * (_2528 + ((isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0))) * _737))) + ((_2534 + ((isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0))) * _1577)) * cbPerFrame._m0[3u].x);
    float _2556 = ((isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0))) * (_2530 + ((isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0))) * _737))) + ((_2536 + ((isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0))) * _1577)) * cbPerFrame._m0[3u].x);
    float _2557 = ((isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0))) * (_2532 + ((isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0))) * _737))) + ((_2538 + ((isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0))) * _1577)) * cbPerFrame._m0[3u].x);
    uint _2558 = _256 + 6u;
    float _2566 = _657 / cbSceneParam._m0[86u].x;
    float _2567 = _658 / cbSceneParam._m0[86u].y;
    vec4 _2581 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2566, _2567, (log2((isnan(cbSceneParam._m0[77u].w) ? _578 : (isnan(_578) ? cbSceneParam._m0[77u].w : min(_578, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2583 = _2581.x;
    float _2584 = _2581.y;
    float _2585 = _2581.z;
    float _2586 = _2581.w;
    float _2679;
    float _2681;
    float _2683;
    float _2685;
    if (_578 > cbSceneParam._m0[78u].w)
    {
        float _2641 = isnan(_578) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _578 : min(cbSceneParam._m0[80u].w, _578));
        float _2642 = _2641 / _578;
        float _2653 = _2642 * _629;
        float _2654 = _630 * _2642;
        float _2655 = (-0.0) - _2654;
        float _2657 = _2642 * _631;
        float _2659 = (cbSceneParam._m0[77u].w * _2655) / _2641;
        float _2660 = _2659 + cbSceneParam._m0[79u].w;
        float _2661 = cbSceneParam._m0[79u].w - _2654;
        float _2667 = sqrt(((_2653 * _2653) + (_2654 * _2654)) + (_2657 * _2657));
        float _2670 = (1.0 - (cbSceneParam._m0[77u].w / _2641)) * _2667;
        float _2675 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2677 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2854;
        if (abs((_2655 - _2659) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2854 = ((((_2660 > 0.0) ? exp2(_2675 * _2660) : (2.0 - exp2(_2677 * _2660))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2670;
        }
        else
        {
            float _2798 = 1.0 / cbSceneParam._m0[80u].x;
            float _2799 = isnan(_2661) ? _2660 : (isnan(_2660) ? _2661 : max(_2660, _2661));
            float _2800 = isnan(_2661) ? _2660 : (isnan(_2660) ? _2661 : min(_2660, _2661));
            float _2809 = isnan(0.0) ? _2799 : (isnan(_2799) ? 0.0 : min(_2799, 0.0));
            float _2810 = isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : min(_2800, 0.0));
            _2854 = ((abs(_2667 / _2655) * cbSceneParam._m0[80u].y) * ((((_2809 - _2810) * 2.0) - ((exp2(_2675 * (isnan(0.0) ? _2799 : (isnan(_2799) ? 0.0 : max(_2799, 0.0)))) - exp2(_2675 * (isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : max(_2800, 0.0))))) * _2798)) - ((exp2(_2677 * _2809) - exp2(_2677 * _2810)) * _2798))) + (_2670 * cbSceneParam._m0[80u].z);
        }
        vec4 _2856 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2566, _2567, 1.0), 0.0);
        float _2865 = exp2((_2854 * (-1.44269502162933349609375)) * (1.0 - _2856.w));
        float _2866 = log2(_2865);
        float _2882 = log2(_2586);
        _2679 = (exp2(_2882 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2866 * cbSceneParam._m0[78u].x)) * _2856.x) / cbSceneParam._m0[78u].x)) + _2583;
        _2681 = (exp2(_2882 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2866 * cbSceneParam._m0[78u].y)) * _2856.y) / cbSceneParam._m0[78u].y)) + _2584;
        _2683 = (exp2(_2882 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2866 * cbSceneParam._m0[78u].z)) * _2856.z) / cbSceneParam._m0[78u].z)) + _2585;
        _2685 = _2865 * _2586;
    }
    else
    {
        _2679 = _2583;
        _2681 = _2584;
        _2683 = _2585;
        _2685 = _2586;
    }
    bool _2892;
    vec4 _2695;
    vec4 _2717;
    float _2719;
    float _2723;
    float _2724;
    float _2725;
    float _2726;
    bool _2736;
    for (;;)
    {
        _2695 = cbMatDynParam._m0[0u];
        float _2697 = roundEven(_2695.y);
        bool _2698 = _2697 == 3.0;
        float _2699 = log2(_2685);
        float _2706 = exp2(_2699 * cbSceneParam._m0[78u].x) * _2555;
        float _2707 = exp2(_2699 * cbSceneParam._m0[78u].y) * _2556;
        float _2708 = exp2(_2699 * cbSceneParam._m0[78u].z) * _2557;
        float _2715 = _645 + (-0.5);
        _2717 = cbMtdParam._m0[1u];
        _2719 = _2717.y * _2715;
        float _2722 = (_2697 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2723 = _2722 * (_2698 ? _2706 : (_2706 + (cbSceneParam._m0[72u].w * _2679)));
        _2724 = _2722 * (_2698 ? _2707 : (_2707 + (cbSceneParam._m0[72u].w * _2681)));
        _2725 = _2722 * (_2698 ? _2708 : (_2708 + (cbSceneParam._m0[72u].w * _2683)));
        _2726 = _2715 * 0.999000012874603271484375;
        _2736 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2736)
        {
            if ((cbInstanceData._m0[_256 + 7u].x + _2726) < 0.5)
            {
                _2892 = true;
                break;
            }
        }
        uint _2833 = _697 + uint(_2695.w);
        if ((cbInstanceData._m0[_2833].w < 1.0) && ((cbInstanceData._m0[_2833].w + _2726) < 0.5))
        {
            _2892 = true;
            break;
        }
        if ((_2719 + 1.0) < _2717.x)
        {
            _2892 = true;
            break;
        }
        _2892 = false;
        break;
    }
    float _3097;
    if (_2892)
    {
        discard_state = true;
        _3097 = 0.0;
    }
    else
    {
        _3097 = cbInstanceData._m0[_2558].w;
    }
    SV_Target.x = _2723;
    SV_Target.y = _2724;
    SV_Target.z = _2725;
    SV_Target.w = _3097;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2558].w;
    discard_exit();
}


