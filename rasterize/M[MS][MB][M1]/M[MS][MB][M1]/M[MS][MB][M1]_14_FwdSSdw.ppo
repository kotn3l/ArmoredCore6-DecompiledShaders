#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1017;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _200 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _201 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _202 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _208 = inversesqrt(dot(vec3(_200, _201, _202), vec3(_200, _201, _202)));
    float _215 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _222 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _228 = uint(roundEven(NORMAL.w)) * 13u;
    uint _234 = _228 + 1u;
    uint _238 = _228 + 2u;
    float _247 = sqrt(((cbInstanceData._m0[_234].x * cbInstanceData._m0[_234].x) + (cbInstanceData._m0[_228].x * cbInstanceData._m0[_228].x)) + (cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x));
    float _248 = _247 * TEXCOORD.z;
    float _249 = _247 * TEXCOORD.w;
    vec4 _268 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _274 = _268.x * cbMtdParam._m0[9u].x;
    float _275 = _268.y * cbMtdParam._m0[9u].y;
    float _276 = _268.z * cbMtdParam._m0[9u].z;
    vec4 _294 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _248) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _249) + cbTextureTilingScale._m0[20u].w));
    vec4 _320 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _324 = _320.z;
    float _328 = (_320.x * 2.0) + (-1.0);
    float _329 = (_320.y * 2.0) + (-1.0);
    float _330 = dot(vec2(_328, _329), vec2(_328, _329));
    float _3371 = isnan(0.0) ? _330 : (isnan(_330) ? 0.0 : max(_330, 0.0));
    float _336 = sqrt(1.0 - (isnan(1.0) ? _3371 : (isnan(_3371) ? 1.0 : min(_3371, 1.0))));
    float _341 = _328 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_294.x * 2.0) + (-1.0)));
    float _342 = _329 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_294.y * 2.0) + (-1.0)));
    vec4 _359 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _248) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _249) + cbTextureTilingScale._m0[11u].w));
    float _361 = _359.x;
    float _362 = 1.0 - _361;
    float _378 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_361 - _362) * cbMtdParam._m0[24u].z) + _362) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3382 = isnan(0.0) ? _378 : (isnan(_378) ? 0.0 : max(_378, 0.0));
    float _379 = isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0));
    float _386 = (_379 * (cbMtdParam._m0[17u].x - _274)) + _274;
    float _387 = (_379 * (cbMtdParam._m0[17u].y - _275)) + _275;
    float _388 = (_379 * (cbMtdParam._m0[17u].z - _276)) + _276;
    vec4 _401 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _403 = _401.x;
    float _405 = _403 - (_403 * _379);
    float _410 = (((_294.z - _324) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _324;
    vec4 _423 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _248) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _249) + cbTextureTilingScale._m0[15u].w));
    float _430 = (_423.x * 2.0) + (-1.0);
    float _431 = (_423.y * 2.0) + (-1.0);
    float _432 = dot(vec2(_430, _431), vec2(_430, _431));
    float _3393 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _440 = (_379 * (_423.z - _410)) + _410;
    float _452 = (((_430 - _341) + (cbMtdParam._m0[21u].x * _341)) * _379) + _341;
    float _453 = (((_431 - _342) + (cbMtdParam._m0[21u].x * _342)) * _379) + _342;
    float _454 = (_379 * (sqrt(1.0 - (isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0)))) - _336)) + _336;
    float _459 = cbMtdParam._m0[22u].x + _320.w;
    float _462 = fma(_454, _215 * NORMAL.x, fma(_453, _222 * TANGENT.x, (_208 * _200) * _452));
    float _465 = fma(_454, _215 * NORMAL.y, fma(_453, _222 * TANGENT.y, (_208 * _201) * _452));
    float _468 = fma(_454, _215 * NORMAL.z, fma(_453, _222 * TANGENT.z, (_208 * _202) * _452));
    float _472 = inversesqrt(dot(vec3(_462, _465, _468), vec3(_462, _465, _468)));
    float _473 = _472 * _462;
    float _474 = _472 * _465;
    float _475 = _472 * _468;
    float _3404 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _476 = isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0));
    float _3415 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _3426 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _3437 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _3448 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
    float _3459 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _481 = isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0));
    float _495 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _536 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _546 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _536);
    float _547 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _536);
    float _548 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _536);
    float _552 = inversesqrt(dot(vec3(_546, _547, _548), vec3(_546, _547, _548)));
    float _553 = _546 * _552;
    float _554 = _547 * _552;
    float _555 = _548 * _552;
    float _561 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _562 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _583 = fma(_475, cbSceneParam._m0[5u].z, fma(_474, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _473));
    float _586 = fma(_475, cbSceneParam._m0[6u].z, fma(_474, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _473));
    float _589 = fma(_475, cbSceneParam._m0[7u].z, fma(_474, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _473));
    uint _603 = (_228 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _609 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0)))) * cbInstanceData._m0[_603].x;
    float _610 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0)))) * cbInstanceData._m0[_603].y;
    float _611 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0)))) * cbInstanceData._m0[_603].z;
    float _3470 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
    float _612 = isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0));
    float _3481 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _613 = isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0));
    float _3492 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _614 = isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0));
    float _615 = 1.0 - _481;
    float _616 = _612 * _615;
    float _617 = _613 * _615;
    float _618 = _614 * _615;
    float _623 = (_612 + (-0.039999999105930328369140625)) * _481;
    float _624 = (_613 + (-0.039999999105930328369140625)) * _481;
    float _625 = (_614 + (-0.039999999105930328369140625)) * _481;
    float _626 = _623 + 0.039999999105930328369140625;
    float _628 = _624 + 0.039999999105930328369140625;
    float _629 = _625 + 0.039999999105930328369140625;
    vec4 _638 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _561, cbSceneParam._m0[86u].y * _562));
    float _642 = ((isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0))) * TEXCOORD_5.w) * _638.x;
    float _643 = dot(vec3(_473, _474, _475), vec3(_553, _554, _555));
    float _646 = _643 * 2.0;
    float _650 = (_646 * _473) - _553;
    float _651 = (_646 * _474) - _554;
    float _652 = (_646 * _475) - _555;
    float _656 = abs(dot(vec3(_553, _554, _555), vec3(_473, _474, _475)));
    float _3503 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _658 = sqrt(_476);
    float _671 = exp2((_658 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_658 * 3.0));
    float _677 = (1.0 - _671) * ((_658 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _678 = _671 * _658;
    float _706 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _710 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _714 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1016;
    float _1018;
    float _1019;
    float _1020;
    float _1021;
    float _1022;
    float _1023;
    float _1024;
    float _1025;
    float _1026;
    float _1027;
    float _1028;
    float _1029;
    float _1030;
    float _1031;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _741 = fma(_714, cbModelParam._m0[26u].z, fma(_710, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _706));
        float _745 = fma(_714, cbModelParam._m0[27u].z, fma(_710, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _706));
        float _749 = fma(_714, cbModelParam._m0[28u].z, fma(_710, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _706));
        float _774 = _706 + _473;
        float _775 = _710 + _474;
        float _776 = _714 + _475;
        float _786 = fma(_776, cbModelParam._m0[26u].z, fma(_775, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _774)) - _741;
        float _787 = fma(_776, cbModelParam._m0[27u].z, fma(_775, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _774)) - _745;
        float _788 = fma(_776, cbModelParam._m0[28u].z, fma(_775, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _774)) - _749;
        float _792 = inversesqrt(dot(vec3(_786, _787, _788), vec3(_786, _787, _788)));
        float _805 = ((_792 * _786) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_741 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _806 = ((_792 * _787) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_745 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _807 = ((_792 * _788) / cbModelParam._m0[34u].z) + ((((((_749 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _810 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_805, _806, _807), 0.0);
        vec4 _817 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_805, _806, _807), 0.0);
        vec4 _824 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_805, _806, _807), 0.0);
        vec4 _831 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_805, _806, _807), 0.0);
        float _844 = exp2((_810.w + (-0.5)) * 20.0) * 2.0;
        float _845 = _844 * (_810.x + (-0.5));
        float _846 = _844 * (_810.y + (-0.5));
        float _847 = _844 * (_810.z + (-0.5));
        float _854 = exp2((_817.w + (-0.5)) * 20.0) * 2.0;
        float _855 = _854 * (_817.x + (-0.5));
        float _856 = _854 * (_817.y + (-0.5));
        float _857 = _854 * (_817.z + (-0.5));
        float _864 = exp2((_824.w + (-0.5)) * 20.0) * 2.0;
        float _865 = _864 * (_824.x + (-0.5));
        float _866 = _864 * (_824.y + (-0.5));
        float _867 = _864 * (_824.z + (-0.5));
        float _874 = exp2((_831.w + (-0.5)) * 20.0) * 2.0;
        float _875 = _874 * (_831.x + (-0.5));
        float _876 = _874 * (_831.y + (-0.5));
        float _877 = _874 * (_831.z + (-0.5));
        float _878 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
        float _879 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
        float _880 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
        float _881 = _845 * 0.5;
        float _882 = _855 * 0.5;
        float _883 = _865 * 0.5;
        float _884 = dot(vec3(_881, _882, _883), vec3(_881, _882, _883));
        float _889 = (_884 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_884);
        float _898 = (dot(vec3(_473, _474, _475), vec3(_889 * _881, _889 * _882, _889 * _883)) + 1.0) * 0.5;
        float _3529 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
        float _908 = sqrt(((_882 * _882) + (_881 * _881)) + (_883 * _883)) / (_878 + 9.9999997473787516355514526367188e-06);
        float _3540 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
        float _909 = isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0));
        float _910 = _909 * 2.0;
        float _914 = (1.0 - _909) / (_909 + 1.0);
        float _3551 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
        float _915 = isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0));
        float _924 = ((((1.0 - _915) * (_910 + 2.0)) * exp2(log2(isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0))) * (_910 + 1.0))) + _915) * _878;
        float _925 = _846 * 0.5;
        float _926 = _856 * 0.5;
        float _927 = _866 * 0.5;
        float _928 = dot(vec3(_925, _926, _927), vec3(_925, _926, _927));
        float _933 = (_928 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_928);
        float _941 = (dot(vec3(_473, _474, _475), vec3(_933 * _925, _933 * _926, _933 * _927)) + 1.0) * 0.5;
        float _3562 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
        float _950 = sqrt(((_926 * _926) + (_925 * _925)) + (_927 * _927)) / (_879 + 9.9999997473787516355514526367188e-06);
        float _3573 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
        float _951 = isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0));
        float _952 = _951 * 2.0;
        float _956 = (1.0 - _951) / (_951 + 1.0);
        float _3584 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
        float _957 = isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0));
        float _966 = ((((1.0 - _957) * (_952 + 2.0)) * exp2(log2(isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0))) * (_952 + 1.0))) + _957) * _879;
        float _967 = _847 * 0.5;
        float _968 = _857 * 0.5;
        float _969 = _867 * 0.5;
        float _970 = dot(vec3(_967, _968, _969), vec3(_967, _968, _969));
        float _975 = (_970 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_970);
        float _983 = (dot(vec3(_473, _474, _475), vec3(_975 * _967, _975 * _968, _975 * _969)) + 1.0) * 0.5;
        float _3595 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _992 = sqrt(((_968 * _968) + (_967 * _967)) + (_969 * _969)) / (_880 + 9.9999997473787516355514526367188e-06);
        float _3606 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
        float _993 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
        float _994 = _993 * 2.0;
        float _998 = (1.0 - _993) / (_993 + 1.0);
        float _3617 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
        float _999 = isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0));
        float _1008 = ((((1.0 - _999) * (_994 + 2.0)) * exp2(log2(isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0))) * (_994 + 1.0))) + _999) * _880;
        _1016 = _847;
        _1018 = _846;
        _1019 = _845;
        _1020 = _857;
        _1021 = _856;
        _1022 = _855;
        _1023 = _867;
        _1024 = _866;
        _1025 = _865;
        _1026 = _880;
        _1027 = _879;
        _1028 = _878;
        _1029 = cbModelParam._m0[36u].z * (isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0)));
        _1030 = cbModelParam._m0[36u].z * (isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0)));
        _1031 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0)));
    }
    else
    {
        _1016 = _1017;
        _1018 = _1017;
        _1019 = _1017;
        _1020 = _1017;
        _1021 = _1017;
        _1022 = _1017;
        _1023 = _1017;
        _1024 = _1017;
        _1025 = _1017;
        _1026 = _1017;
        _1027 = _1017;
        _1028 = _1017;
        _1029 = 0.0;
        _1030 = 0.0;
        _1031 = 0.0;
    }
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1056 = fma(_714, cbModelParam._m0[30u].z, fma(_710, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _706));
        float _1060 = fma(_714, cbModelParam._m0[31u].z, fma(_710, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _706));
        float _1064 = fma(_714, cbModelParam._m0[32u].z, fma(_710, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _706));
        float _1087 = _706 + _473;
        float _1088 = _710 + _474;
        float _1089 = _714 + _475;
        float _1099 = fma(_1089, cbModelParam._m0[30u].z, fma(_1088, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1087)) - _1056;
        float _1100 = fma(_1089, cbModelParam._m0[31u].z, fma(_1088, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1087)) - _1060;
        float _1101 = fma(_1089, cbModelParam._m0[32u].z, fma(_1088, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1087)) - _1064;
        float _1105 = inversesqrt(dot(vec3(_1099, _1100, _1101), vec3(_1099, _1100, _1101)));
        float _1118 = ((_1105 * _1099) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1056 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1119 = ((_1105 * _1100) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1060 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1120 = ((_1105 * _1101) / cbModelParam._m0[35u].z) + ((((((_1064 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1122 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1118, _1119, _1120), 0.0);
        vec4 _1129 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1118, _1119, _1120), 0.0);
        vec4 _1136 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1118, _1119, _1120), 0.0);
        vec4 _1143 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1118, _1119, _1120), 0.0);
        float _1155 = exp2((_1122.w + (-0.5)) * 20.0) * 2.0;
        float _1156 = _1155 * (_1122.x + (-0.5));
        float _1157 = _1155 * (_1122.y + (-0.5));
        float _1158 = _1155 * (_1122.z + (-0.5));
        float _1165 = exp2((_1129.w + (-0.5)) * 20.0) * 2.0;
        float _1166 = _1165 * (_1129.x + (-0.5));
        float _1167 = _1165 * (_1129.y + (-0.5));
        float _1168 = _1165 * (_1129.z + (-0.5));
        float _1175 = exp2((_1136.w + (-0.5)) * 20.0) * 2.0;
        float _1176 = _1175 * (_1136.x + (-0.5));
        float _1177 = _1175 * (_1136.y + (-0.5));
        float _1178 = _1175 * (_1136.z + (-0.5));
        float _1185 = exp2((_1143.w + (-0.5)) * 20.0) * 2.0;
        float _1186 = _1185 * (_1143.x + (-0.5));
        float _1187 = _1185 * (_1143.y + (-0.5));
        float _1188 = _1185 * (_1143.z + (-0.5));
        float _1189 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1190 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1191 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1192 = _1156 * 0.5;
        float _1193 = _1166 * 0.5;
        float _1194 = _1176 * 0.5;
        float _1195 = dot(vec3(_1192, _1193, _1194), vec3(_1192, _1193, _1194));
        float _1200 = (_1195 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1195);
        float _1208 = (dot(vec3(_473, _474, _475), vec3(_1200 * _1192, _1200 * _1193, _1200 * _1194)) + 1.0) * 0.5;
        float _3658 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1217 = sqrt(((_1193 * _1193) + (_1192 * _1192)) + (_1194 * _1194)) / (_1189 + 9.9999997473787516355514526367188e-06);
        float _3669 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1218 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
        float _1219 = _1218 * 2.0;
        float _1223 = (1.0 - _1218) / (_1218 + 1.0);
        float _3680 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1224 = isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0));
        float _1233 = ((((1.0 - _1224) * (_1219 + 2.0)) * exp2(log2(isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0))) * (_1219 + 1.0))) + _1224) * _1189;
        float _1234 = _1157 * 0.5;
        float _1235 = _1167 * 0.5;
        float _1236 = _1177 * 0.5;
        float _1237 = dot(vec3(_1234, _1235, _1236), vec3(_1234, _1235, _1236));
        float _1242 = (_1237 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1237);
        float _1250 = (dot(vec3(_473, _474, _475), vec3(_1242 * _1234, _1242 * _1235, _1242 * _1236)) + 1.0) * 0.5;
        float _3691 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1259 = sqrt(((_1235 * _1235) + (_1234 * _1234)) + (_1236 * _1236)) / (_1190 + 9.9999997473787516355514526367188e-06);
        float _3702 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1260 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
        float _1261 = _1260 * 2.0;
        float _1265 = (1.0 - _1260) / (_1260 + 1.0);
        float _3713 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1266 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
        float _1275 = ((((1.0 - _1266) * (_1261 + 2.0)) * exp2(log2(isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0))) * (_1261 + 1.0))) + _1266) * _1190;
        float _1276 = _1158 * 0.5;
        float _1277 = _1168 * 0.5;
        float _1278 = _1178 * 0.5;
        float _1279 = dot(vec3(_1276, _1277, _1278), vec3(_1276, _1277, _1278));
        float _1284 = (_1279 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1279);
        float _1292 = (dot(vec3(_473, _474, _475), vec3(_1284 * _1276, _1284 * _1277, _1284 * _1278)) + 1.0) * 0.5;
        float _3724 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1301 = sqrt(((_1277 * _1277) + (_1276 * _1276)) + (_1278 * _1278)) / (_1191 + 9.9999997473787516355514526367188e-06);
        float _3735 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1302 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
        float _1303 = _1302 * 2.0;
        float _1307 = (1.0 - _1302) / (_1302 + 1.0);
        float _3746 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1308 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
        float _1317 = ((((1.0 - _1308) * (_1303 + 2.0)) * exp2(log2(isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0))) * (_1303 + 1.0))) + _1308) * _1191;
        _1325 = _1158;
        _1326 = _1157;
        _1327 = _1156;
        _1328 = _1168;
        _1329 = _1167;
        _1330 = _1166;
        _1331 = _1178;
        _1332 = _1177;
        _1333 = _1176;
        _1334 = _1191;
        _1335 = _1190;
        _1336 = _1189;
        _1337 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0)));
        _1338 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0)));
        _1339 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0)));
    }
    else
    {
        _1325 = _1017;
        _1326 = _1017;
        _1327 = _1017;
        _1328 = _1017;
        _1329 = _1017;
        _1330 = _1017;
        _1331 = _1017;
        _1332 = _1017;
        _1333 = _1017;
        _1334 = _1017;
        _1335 = _1017;
        _1336 = _1017;
        _1337 = 0.0;
        _1338 = 0.0;
        _1339 = 0.0;
    }
    float _1349 = (cbModelParam._m0[1u].x * (_1337 - _1029)) + _1029;
    float _1350 = (cbModelParam._m0[1u].x * (_1338 - _1030)) + _1030;
    float _1351 = (cbModelParam._m0[1u].x * (_1339 - _1031)) + _1031;
    float _1372 = fma(_1351, cbSceneParam._m0[89u].z, fma(_1350, cbSceneParam._m0[89u].y, _1349 * cbSceneParam._m0[89u].x));
    float _1375 = fma(_1351, cbSceneParam._m0[90u].z, fma(_1350, cbSceneParam._m0[90u].y, _1349 * cbSceneParam._m0[90u].x));
    float _1378 = fma(_1351, cbSceneParam._m0[91u].z, fma(_1350, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1349));
    float _1393 = _650 * 0.5;
    float _1394 = _651 * 0.5;
    float _1395 = _652 * 0.5;
    float _1396 = dot(vec4(_1393, _1394, _1395, 1.0), vec4(_1327, _1330, _1333, _1336));
    float _1399 = dot(vec4(_1393, _1394, _1395, 1.0), vec4(_1326, _1329, _1332, _1335));
    float _1402 = dot(vec4(_1393, _1394, _1395, 1.0), vec4(_1325, _1328, _1331, _1334));
    float _1436;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1409 = dot(vec4(_1393, _1394, _1395, 1.0), vec4(_1016, _1020, _1023, _1026));
        float _1413 = dot(vec4(_1393, _1394, _1395, 1.0), vec4(_1018, _1021, _1024, _1027));
        float _1417 = dot(vec4(_1393, _1394, _1395, 1.0), vec4(_1019, _1022, _1025, _1028));
        float _1424 = dot(vec4(cbModelParam._m0[39u]), vec4(_1393, _1394, _1395, 1.0));
        _1436 = dot(vec3(isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0)), isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0)), isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1424) ? 0.0 : (isnan(0.0) ? _1424 : max(0.0, _1424))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1436 = 1.0;
    }
    float _1447;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1438 = dot(vec4(cbModelParam._m0[40u]), vec4(_1393, _1394, _1395, 1.0));
        _1447 = dot(vec3(isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0)), isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0)), isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1438) ? 0.0 : (isnan(0.0) ? _1438 : max(0.0, _1438))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1447 = 1.0;
    }
    float _1451 = (_1447 * cbModelParam._m0[1u].x) + (_1436 * (1.0 - cbModelParam._m0[1u].x));
    float _1461 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _476);
    float _1462 = isnan(_1461) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1461 : min(cbModelParam._m0[25u].z, _1461));
    float _1543;
    float _1545;
    float _1547;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1510 = fma(_714, cbModelParam._m0[13u].z, fma(_710, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _706)) + cbModelParam._m0[13u].w;
        float _1514 = fma(_714, cbModelParam._m0[14u].z, fma(_710, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _706)) + cbModelParam._m0[14u].w;
        float _1518 = fma(_714, cbModelParam._m0[15u].z, fma(_710, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _706)) + cbModelParam._m0[15u].w;
        float _1521 = fma(_652, cbModelParam._m0[13u].z, fma(_651, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _650));
        float _1524 = fma(_652, cbModelParam._m0[14u].z, fma(_651, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _650));
        float _1527 = fma(_652, cbModelParam._m0[15u].z, fma(_651, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _650));
        float _1555;
        if (_1521 > 0.0)
        {
            _1555 = abs((1.0 - _1510) / _1521);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1521 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1510 + 1.0) / _1521);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1555 = frontier_phi_14_12_ladder;
        }
        float _1781;
        if (_1524 > 0.0)
        {
            _1781 = abs((1.0 - _1514) / _1524);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1524 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1514 + 1.0) / _1524);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1781 = frontier_phi_23_19_ladder;
        }
        float _2038;
        if (_1527 > 0.0)
        {
            _2038 = abs((1.0 - _1518) / _1527);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1527 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1518 + 1.0) / _1527);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2038 = frontier_phi_35_30_ladder;
        }
        float _2040 = isnan(_1781) ? _1555 : (isnan(_1555) ? _1781 : min(_1555, _1781));
        float _2041 = isnan(_2038) ? _2040 : (isnan(_2040) ? _2038 : min(_2040, _2038));
        float _2045 = (_2041 * _1521) + _1510;
        float _2046 = (_2041 * _1524) + _1514;
        float _2047 = (_2041 * _1527) + _1518;
        float _2048 = _2041 * 9.9999997473787516355514526367188e-05;
        float _2050 = (-1.0) - _2048;
        float _2052 = _2048 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2047 > _2052) || ((_2047 < _2050) || ((_2046 > _2052) || ((_2046 < _2050) || ((_2045 < _2050) || (_2045 > _2052))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2175 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2047, cbModelParam._m0[9u].z, fma(_2046, cbModelParam._m0[9u].y, _2045 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2047, cbModelParam._m0[10u].z, fma(_2046, cbModelParam._m0[10u].y, _2045 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2047, cbModelParam._m0[11u].z, fma(_2046, cbModelParam._m0[11u].y, _2045 * cbModelParam._m0[11u].x))), _1462);
            frontier_phi_13_35_ladder = _2175.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2175.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2175.x * cbModelParam._m0[1u].y;
        }
        _1543 = frontier_phi_13_35_ladder_2;
        _1545 = frontier_phi_13_35_ladder_1;
        _1547 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1531 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_650, _651, _652), _1462);
        _1543 = _1531.x * cbModelParam._m0[1u].y;
        _1545 = _1531.y * cbModelParam._m0[1u].y;
        _1547 = _1531.z * cbModelParam._m0[1u].y;
    }
    float _1551 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _476);
    float _1552 = isnan(_1551) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1551 : min(cbModelParam._m0[25u].w, _1551));
    float _1643;
    float _1645;
    float _1647;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1607 = fma(_714, cbModelParam._m0[21u].z, fma(_710, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _706)) + cbModelParam._m0[21u].w;
        float _1611 = fma(_714, cbModelParam._m0[22u].z, fma(_710, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _706)) + cbModelParam._m0[22u].w;
        float _1615 = fma(_714, cbModelParam._m0[23u].z, fma(_710, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _706)) + cbModelParam._m0[23u].w;
        float _1618 = fma(_652, cbModelParam._m0[21u].z, fma(_651, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _650));
        float _1621 = fma(_652, cbModelParam._m0[22u].z, fma(_651, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _650));
        float _1624 = fma(_652, cbModelParam._m0[23u].z, fma(_651, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _650));
        float _1786;
        if (_1618 > 0.0)
        {
            _1786 = abs((1.0 - _1607) / _1618);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1618 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1607 + 1.0) / _1618);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1786 = frontier_phi_25_21_ladder;
        }
        float _2065;
        if (_1621 > 0.0)
        {
            _2065 = abs((1.0 - _1611) / _1621);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1621 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1611 + 1.0) / _1621);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2065 = frontier_phi_37_32_ladder;
        }
        float _2278;
        if (_1624 > 0.0)
        {
            _2278 = abs((1.0 - _1615) / _1624);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1624 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1615 + 1.0) / _1624);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2278 = frontier_phi_46_43_ladder;
        }
        float _2280 = isnan(_2065) ? _1786 : (isnan(_1786) ? _2065 : min(_1786, _2065));
        float _2281 = isnan(_2278) ? _2280 : (isnan(_2280) ? _2278 : min(_2280, _2278));
        float _2285 = (_2281 * _1618) + _1607;
        float _2286 = (_2281 * _1621) + _1611;
        float _2287 = (_2281 * _1624) + _1615;
        float _2288 = _2281 * 9.9999997473787516355514526367188e-05;
        float _2289 = (-1.0) - _2288;
        float _2291 = _2288 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2287 > _2291) || ((_2287 < _2289) || ((_2286 > _2291) || ((_2286 < _2289) || ((_2285 < _2289) || (_2285 > _2291))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2486 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2287, cbModelParam._m0[17u].z, fma(_2286, cbModelParam._m0[17u].y, _2285 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2287, cbModelParam._m0[18u].z, fma(_2286, cbModelParam._m0[18u].y, _2285 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2287, cbModelParam._m0[19u].z, fma(_2286, cbModelParam._m0[19u].y, _2285 * cbModelParam._m0[19u].x))), _1552);
            frontier_phi_22_46_ladder = _2486.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2486.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2486.x * cbModelParam._m0[1u].z;
        }
        _1643 = frontier_phi_22_46_ladder_2;
        _1645 = frontier_phi_22_46_ladder_1;
        _1647 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1627 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_650, _651, _652), _1552);
        _1643 = _1627.x * cbModelParam._m0[1u].z;
        _1645 = _1627.y * cbModelParam._m0[1u].z;
        _1647 = _1627.z * cbModelParam._m0[1u].z;
    }
    float _1660 = (((_677 * _626) + _678) * _642) * ((cbModelParam._m0[1u].w * (_1643 - _1543)) + _1543);
    float _1662 = (((_677 * _628) + _678) * _642) * ((cbModelParam._m0[1u].w * (_1645 - _1545)) + _1545);
    float _1664 = (((_677 * _629) + _678) * _642) * ((cbModelParam._m0[1u].w * (_1647 - _1547)) + _1547);
    float _1667 = fma(_1664, cbSceneParam._m0[89u].z, fma(_1662, cbSceneParam._m0[89u].y, _1660 * cbSceneParam._m0[89u].x));
    float _1670 = fma(_1664, cbSceneParam._m0[90u].z, fma(_1662, cbSceneParam._m0[90u].y, _1660 * cbSceneParam._m0[90u].x));
    float _1673 = fma(_1664, cbSceneParam._m0[91u].z, fma(_1662, cbSceneParam._m0[91u].y, _1660 * cbSceneParam._m0[91u].x));
    vec4 _1681 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_561, _562));
    float _1683 = _1681.w;
    float _1695 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1683);
    float _1696 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1683);
    float _1697 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1683);
    uvec4 _1701 = floatBitsToUint(cbInstanceData._m0[_228 + 5u]);
    uint _1703 = _1701.x * 14u;
    uint _1704 = _1703 + 13u;
    float _1711 = _642 + (-1.0);
    float _1716 = (cbLight._m0[_1704].x * _1711) + 1.0;
    float _1717 = (cbLight._m0[_1704].y * _1711) + 1.0;
    float _1718 = (cbLight._m0[_1704].z * _1711) + 1.0;
    float _1719 = (cbLight._m0[_1704].w * _1711) + 1.0;
    uint _1720 = _1703 + 5u;
    float _1726 = isnan(1.0) ? _1717 : (isnan(_1717) ? 1.0 : min(_1717, 1.0));
    uint _1730 = _1703 + 4u;
    float _1740 = isnan(1.0) ? _1716 : (isnan(_1716) ? 1.0 : min(_1716, 1.0));
    uint _1744 = _1703 | 1u;
    float _1755 = dot(vec3(cbLight._m0[_1703].xyz), vec3(_473, _474, _475));
    float _1758 = dot(vec3(cbLight._m0[_1744].xyz), vec3(_473, _474, _475));
    float _3882 = isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0));
    float _3893 = isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0));
    float _1763 = (isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0))) * 0.3183098733425140380859375;
    float _1765 = (isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0))) * 0.3183098733425140380859375;
    float _1772 = ((cbLight._m0[_1720].x * _1726) * _1765) + (((cbLight._m0[_1730].x * _1695) * _1740) * _1763);
    float _1773 = ((_1726 * cbLight._m0[_1720].y) * _1765) + (((cbLight._m0[_1730].y * _1696) * _1740) * _1763);
    float _1774 = ((_1726 * cbLight._m0[_1720].z) * _1765) + (((cbLight._m0[_1730].z * _1697) * _1740) * _1763);
    uvec4 _1778 = floatBitsToUint(cbLight._m0[_1703 + 12u]);
    bool _1780 = _1778.x == 0u;
    float _1791;
    float _1793;
    float _1795;
    if (_1780)
    {
        _1791 = _1772;
        _1793 = _1773;
        _1795 = _1774;
    }
    else
    {
        uint _1799 = _1703 + 6u;
        float _1815 = (dot(vec3(cbLight._m0[_1703 + 2u].xyz), vec3(_473, _474, _475)) * 0.5) + 0.5;
        float _1816 = _1815 * _1815;
        float _3904 = isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0));
        float _1817 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
        float _1818 = isnan(1.0) ? _1718 : (isnan(_1718) ? 1.0 : min(_1718, 1.0));
        _1791 = (((cbLight._m0[_1799].x * 0.3183098733425140380859375) * _1817) * _1818) + _1772;
        _1793 = (((cbLight._m0[_1799].y * 0.3183098733425140380859375) * _1817) * _1818) + _1773;
        _1795 = (((cbLight._m0[_1799].z * 0.3183098733425140380859375) * _1817) * _1818) + _1774;
    }
    bool _1798 = _1778.y == 0u;
    float _1836;
    float _1838;
    float _1840;
    if (_1798)
    {
        _1836 = _1791;
        _1838 = _1793;
        _1840 = _1795;
    }
    else
    {
        uint _2009 = _1703 + 7u;
        float _2025 = (dot(vec3(cbLight._m0[_1703 + 3u].xyz), vec3(_473, _474, _475)) * 0.5) + 0.5;
        float _2026 = _2025 * _2025;
        float _3920 = isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0));
        float _2027 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
        float _2028 = isnan(1.0) ? _1719 : (isnan(_1719) ? 1.0 : min(_1719, 1.0));
        _1836 = (((cbLight._m0[_2009].x * 0.3183098733425140380859375) * _2027) * _2028) + _1791;
        _1838 = (((cbLight._m0[_2009].y * 0.3183098733425140380859375) * _2027) * _2028) + _1793;
        _1840 = (((cbLight._m0[_2009].z * 0.3183098733425140380859375) * _2027) * _2028) + _1795;
    }
    uint _1843 = _1703 + 8u;
    float _1856 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1703].w)) * _476) * 0.949999988079071044921875);
    float _1857 = _1856 * _1856;
    float _1858 = cbLight._m0[_1703].x + _553;
    float _1859 = cbLight._m0[_1703].y + _554;
    float _1860 = cbLight._m0[_1703].z + _555;
    float _1864 = inversesqrt(dot(vec3(_1858, _1859, _1860), vec3(_1858, _1859, _1860)));
    float _1865 = _1864 * _1858;
    float _1866 = _1864 * _1859;
    float _1867 = _1864 * _1860;
    float _1868 = dot(vec3(_473, _474, _475), vec3(cbLight._m0[_1703].xyz));
    float _3936 = isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0));
    float _1871 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
    float _3947 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _1872 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
    float _1873 = dot(vec3(_473, _474, _475), vec3(_1865, _1866, _1867));
    float _3958 = isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0));
    float _1876 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
    float _1877 = dot(vec3(cbLight._m0[_1703].xyz), vec3(_1865, _1866, _1867));
    float _3969 = isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0));
    float _1881 = _1857 * _1857;
    float _1885 = ((_1876 * _1876) * (_1881 + (-1.0))) + 1.0;
    float _1893 = exp2(log2(1.0 - (isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0)))) * 5.0);
    float _1894 = 0.959999978542327880859375 - _623;
    float _1896 = 0.959999978542327880859375 - _624;
    float _1897 = 0.959999978542327880859375 - _625;
    float _1904 = 1.0 - _1857;
    float _1915 = (0.5 / (((_1872 * ((_1871 * _1904) + _1857)) + 9.9999999392252902907785028219223e-09) + (((_1872 * _1904) + _1857) * _1871))) * _1871;
    float _3980 = isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0));
    float _1917 = (isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0))) * (_1881 / ((_1885 * _1885) * 3.141590118408203125));
    uint _1931 = _1703 + 9u;
    float _1942 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1744].w)) * _476) * 0.949999988079071044921875);
    float _1943 = _1942 * _1942;
    float _1944 = cbLight._m0[_1744].x + _553;
    float _1945 = cbLight._m0[_1744].y + _554;
    float _1946 = cbLight._m0[_1744].z + _555;
    float _1950 = inversesqrt(dot(vec3(_1944, _1945, _1946), vec3(_1944, _1945, _1946)));
    float _1951 = _1950 * _1944;
    float _1952 = _1950 * _1945;
    float _1953 = _1950 * _1946;
    float _1954 = dot(vec3(_473, _474, _475), vec3(cbLight._m0[_1744].xyz));
    float _3991 = isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0));
    float _1957 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
    float _1958 = dot(vec3(_473, _474, _475), vec3(_1951, _1952, _1953));
    float _4002 = isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0));
    float _1961 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
    float _1962 = dot(vec3(cbLight._m0[_1744].xyz), vec3(_1951, _1952, _1953));
    float _4013 = isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0));
    float _1966 = _1943 * _1943;
    float _1970 = ((_1961 * _1961) * (_1966 + (-1.0))) + 1.0;
    float _1977 = exp2(log2(1.0 - (isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0)))) * 5.0);
    float _1984 = 1.0 - _1943;
    float _1994 = (0.5 / (((_1872 * ((_1957 * _1984) + _1943)) + 9.9999999392252902907785028219223e-09) + (((_1872 * _1984) + _1943) * _1957))) * _1957;
    float _4024 = isnan(0.0) ? _1994 : (isnan(_1994) ? 0.0 : max(_1994, 0.0));
    float _1996 = (isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0))) * (_1966 / ((_1970 * _1970) * 3.141590118408203125));
    float _2006 = (((((_1977 * _1894) + _626) * cbLight._m0[_1931].x) * _1996) * _1726) + ((((cbLight._m0[_1843].x * _1695) * ((_1893 * _1894) + _626)) * _1917) * _1740);
    float _2007 = (((((_1977 * _1896) + _628) * cbLight._m0[_1931].y) * _1996) * _1726) + ((((cbLight._m0[_1843].y * _1696) * ((_1893 * _1896) + _628)) * _1917) * _1740);
    float _2008 = (((((_1977 * _1897) + _629) * cbLight._m0[_1931].z) * _1996) * _1726) + ((((cbLight._m0[_1843].z * _1697) * ((_1893 * _1897) + _629)) * _1917) * _1740);
    float _2070;
    float _2072;
    float _2074;
    if (_1780)
    {
        _2070 = _2006;
        _2072 = _2007;
        _2074 = _2008;
    }
    else
    {
        uint _2076 = _1703 + 2u;
        uint _2080 = _1703 + 10u;
        float _2094 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2076].w)) * _476) * 0.949999988079071044921875);
        float _2095 = _2094 * _2094;
        float _2096 = cbLight._m0[_2076].x + _553;
        float _2097 = cbLight._m0[_2076].y + _554;
        float _2098 = cbLight._m0[_2076].z + _555;
        float _2102 = inversesqrt(dot(vec3(_2096, _2097, _2098), vec3(_2096, _2097, _2098)));
        float _2103 = _2102 * _2096;
        float _2104 = _2102 * _2097;
        float _2105 = _2102 * _2098;
        float _2106 = dot(vec3(_473, _474, _475), vec3(cbLight._m0[_2076].xyz));
        float _4035 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
        float _2109 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
        float _2110 = dot(vec3(_473, _474, _475), vec3(_2103, _2104, _2105));
        float _4046 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
        float _2113 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
        float _2114 = dot(vec3(cbLight._m0[_2076].xyz), vec3(_2103, _2104, _2105));
        float _4057 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
        float _2118 = _2095 * _2095;
        float _2122 = ((_2113 * _2113) * (_2118 + (-1.0))) + 1.0;
        float _2129 = exp2(log2(1.0 - (isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0)))) * 5.0);
        float _2136 = 1.0 - _2095;
        float _2146 = (0.5 / (((_1872 * ((_2109 * _2136) + _2095)) + 9.9999999392252902907785028219223e-09) + (((_1872 * _2136) + _2095) * _2109))) * _2109;
        float _4068 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
        float _2148 = (isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0))) * (_2118 / ((_2122 * _2122) * 3.141590118408203125));
        float _2149 = isnan(1.0) ? _1718 : (isnan(_1718) ? 1.0 : min(_1718, 1.0));
        _2070 = (((((_2129 * _1894) + _626) * cbLight._m0[_2080].x) * _2148) * _2149) + _2006;
        _2072 = (((((_2129 * _1896) + _628) * cbLight._m0[_2080].y) * _2148) * _2149) + _2007;
        _2074 = (((((_2129 * _1897) + _629) * cbLight._m0[_2080].z) * _2148) * _2149) + _2008;
    }
    float _2184;
    float _2186;
    float _2188;
    if (_1798)
    {
        _2184 = _2070;
        _2186 = _2072;
        _2188 = _2074;
    }
    else
    {
        uint _2195 = _1703 + 3u;
        uint _2199 = _1703 + 11u;
        float _2213 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2195].w)) * _476) * 0.949999988079071044921875);
        float _2214 = _2213 * _2213;
        float _2215 = cbLight._m0[_2195].x + _553;
        float _2216 = cbLight._m0[_2195].y + _554;
        float _2217 = cbLight._m0[_2195].z + _555;
        float _2221 = inversesqrt(dot(vec3(_2215, _2216, _2217), vec3(_2215, _2216, _2217)));
        float _2222 = _2221 * _2215;
        float _2223 = _2221 * _2216;
        float _2224 = _2221 * _2217;
        float _2225 = dot(vec3(_473, _474, _475), vec3(cbLight._m0[_2195].xyz));
        float _4084 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
        float _2228 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
        float _2229 = dot(vec3(_473, _474, _475), vec3(_2222, _2223, _2224));
        float _4095 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
        float _2232 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
        float _2233 = dot(vec3(cbLight._m0[_2195].xyz), vec3(_2222, _2223, _2224));
        float _4106 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
        float _2237 = _2214 * _2214;
        float _2241 = ((_2232 * _2232) * (_2237 + (-1.0))) + 1.0;
        float _2248 = exp2(log2(1.0 - (isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0)))) * 5.0);
        float _2255 = 1.0 - _2214;
        float _2265 = (0.5 / (((_1872 * ((_2228 * _2255) + _2214)) + 9.9999999392252902907785028219223e-09) + (((_1872 * _2255) + _2214) * _2228))) * _2228;
        float _4117 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
        float _2267 = (isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0))) * (_2237 / ((_2241 * _2241) * 3.141590118408203125));
        float _2268 = isnan(1.0) ? _1719 : (isnan(_1719) ? 1.0 : min(_1719, 1.0));
        _2184 = (((((_2248 * _1894) + _626) * cbLight._m0[_2199].x) * _2267) * _2268) + _2070;
        _2186 = (((((_2248 * _1896) + _628) * cbLight._m0[_2199].y) * _2267) * _2268) + _2072;
        _2188 = (((((_2248 * _1897) + _629) * cbLight._m0[_2199].z) * _2267) * _2268) + _2074;
    }
    float _2403;
    float _2405;
    float _2407;
    float _2409;
    float _2411;
    float _2413;
    if (_1701.y == 0u)
    {
        float _2343 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2344 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2343;
        float _2345 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2343;
        float _2346 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2343;
        uvec4 _2358 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2359 = _2358.x;
        uint _2370 = uint((float(_2358.y) * floor(float(uint(cbSceneParam._m0[85u].y * _562) / _2359))) + floor(float(uint(cbSceneParam._m0[85u].x * _561) / _2359)));
        float _2380 = (log2(_2346 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2381 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
        uint _2384 = uint(isnan(14.0) ? _2381 : (isnan(_2381) ? 14.0 : min(_2381, 14.0)));
        uvec4 _2389 = texelFetch(g_lightClusterGridBuffer, int(((_2384 << 2u) + (_2370 << 6u)) >> 2u));
        uint _2390 = _2389.x;
        uint _2391 = _2358.z;
        float _2491;
        float _2493;
        float _2495;
        float _2497;
        float _2499;
        float _2501;
        if (((((1u << ((_2391 >> 4u) & 15u)) + 4294967295u) & _2390) == 0u) || ((_2391 & 240u) == 0u))
        {
            _2491 = 0.0;
            _2493 = 0.0;
            _2495 = 0.0;
            _2497 = 0.0;
            _2499 = 0.0;
            _2501 = 0.0;
        }
        else
        {
            float _2492;
            float _2494;
            float _2496;
            float _2498;
            float _2500;
            float _2502;
            float _2636 = 0.0;
            float _2637 = 0.0;
            float _2638 = 0.0;
            float _2639 = 0.0;
            float _2640 = 0.0;
            float _2641 = 0.0;
            uint _2642 = 0u;
            uint _2651;
            bool _2652;
            for (;;)
            {
                _2651 = texelFetch(g_lightClassification, int((((_2384 << 5u) + (_2370 << 9u)) + (_2642 << 2u)) >> 2u)).x;
                _2652 = _2651 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2652)
                {
                    frontier_phi_61_pred = _2636;
                    frontier_phi_61_pred_1 = _2641;
                    frontier_phi_61_pred_2 = _2640;
                    frontier_phi_61_pred_3 = _2639;
                    frontier_phi_61_pred_4 = _2638;
                    frontier_phi_61_pred_5 = _2637;
                }
                else
                {
                    float _2760;
                    float _2761;
                    float _2762;
                    float _2763;
                    float _2764;
                    float _2765;
                    uint _2766;
                    _2760 = _2636;
                    _2761 = _2637;
                    _2762 = _2638;
                    _2763 = _2639;
                    _2764 = _2640;
                    _2765 = _2641;
                    _2766 = _2651;
                    float _2692;
                    float _2693;
                    float _2694;
                    float _2695;
                    float _2696;
                    float _2697;
                    for (;;)
                    {
                        uint _2770 = uint(findLSB(_2766)) + (_2642 << 5u);
                        uint _2767 = (_2766 + 4294967295u) & _2766;
                        uint _2772 = _2770 * 48u;
                        vec4 _2786 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2772)).x, texelFetch(g_PointLightRenderingBuffer, int(_2772 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2772 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2772 + 3u)).x));
                        uint _2792 = (_2770 * 48u) + 4u;
                        vec4 _2805 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2792)).x, texelFetch(g_PointLightRenderingBuffer, int(_2792 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2792 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2792 + 3u)).x));
                        uint _2811 = (_2770 * 48u) + 8u;
                        vec3 _2822 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2811)).x, texelFetch(g_PointLightRenderingBuffer, int(_2811 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2811 + 2u)).x));
                        float _2826 = _2786.x - _2344;
                        float _2827 = _2786.y - _2345;
                        float _2828 = _2786.z - _2346;
                        float _2829 = dot(vec3(_2826, _2827, _2828), vec3(_2826, _2827, _2828));
                        float _2832 = inversesqrt(_2829);
                        float _2833 = _2832 * _2826;
                        float _2834 = _2832 * _2827;
                        float _2835 = _2832 * _2828;
                        float _2836 = dot(vec3(_583, _586, _589), vec3(_2833, _2834, _2835));
                        float _2841 = 1.0 - (_2829 * _2786.w);
                        float _4143 = isnan(0.0) ? _2841 : (isnan(_2841) ? 0.0 : max(_2841, 0.0));
                        float _2842 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
                        float _2843 = sqrt(_2829) * _2805.w;
                        float _2846 = 1.39999997615814208984375 / (_2843 + 1.39999997615814208984375);
                        float _2847 = _2846 * _2846;
                        float _2850 = ((1.0 - _2847) * _2836) + _2847;
                        float _2853 = _2843 * _2843;
                        float _2857 = ((isnan(0.0) ? _2850 : (isnan(_2850) ? 0.0 : max(_2850, 0.0))) * _2842) / ((_2853 * 0.699999988079071044921875) + 1.0);
                        float _2861 = (-0.0) - _2344;
                        float _2862 = (-0.0) - _2345;
                        float _2863 = (-0.0) - _2346;
                        float _2867 = inversesqrt(dot(vec3(_2861, _2862, _2863), vec3(_2861, _2862, _2863)));
                        float _2868 = _2867 * _2861;
                        float _2869 = _2867 * _2862;
                        float _2870 = _2867 * _2863;
                        float _2878 = exp2(log2(1.0 / ((_2853 * 3.5) + 5.0)) * 0.25);
                        float _2879 = 1.0 - _658;
                        float _2886 = sqrt(1.0 - ((1.0 - (_2879 * _2879)) * (1.0 - (_2878 * _2878))));
                        float _2887 = _2886 * _2886;
                        float _2888 = _2887 * _2887;
                        float _2889 = _2868 + _2833;
                        float _2890 = _2869 + _2834;
                        float _2891 = _2870 + _2835;
                        float _2895 = inversesqrt(dot(vec3(_2889, _2890, _2891), vec3(_2889, _2890, _2891)));
                        float _2899 = dot(vec3(_583, _586, _589), vec3(_2868, _2869, _2870));
                        float _4159 = isnan(0.0) ? _2899 : (isnan(_2899) ? 0.0 : max(_2899, 0.0));
                        float _2902 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
                        float _2903 = dot(vec3(_583, _586, _589), vec3(_2895 * _2889, _2895 * _2890, _2895 * _2891));
                        float _4170 = isnan(0.0) ? _2903 : (isnan(_2903) ? 0.0 : max(_2903, 0.0));
                        float _2906 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
                        float _2910 = ((_2906 * _2906) * (_2888 + (-1.0))) + 1.0;
                        float _2911 = _2846 * _2887;
                        float _2912 = _2911 * _2911;
                        float _2915 = ((1.0 - _2912) * _2836) + _2912;
                        float _4181 = isnan(0.0) ? _2915 : (isnan(_2915) ? 0.0 : max(_2915, 0.0));
                        float _2916 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
                        float _2917 = 1.0 - _2887;
                        float _2927 = (0.5 / (((_2916 * ((_2902 * _2917) + _2887)) + 9.9999999392252902907785028219223e-09) + (((_2916 * _2917) + _2887) * _2902))) * _2916;
                        float _4192 = isnan(0.0) ? _2927 : (isnan(_2927) ? 0.0 : max(_2927, 0.0));
                        float _2938 = (((_2888 * 3.1415927410125732421875) * (isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0)))) / ((_2910 * _2910) * ((_2853 * 2.1991131305694580078125) + 3.141590118408203125))) * _2842;
                        _2695 = (_2857 * _2805.x) + _2763;
                        _2696 = (_2857 * _2805.y) + _2764;
                        _2697 = (_2857 * _2805.z) + _2765;
                        _2692 = (_2938 * _2822.x) + _2760;
                        _2693 = (_2938 * _2822.y) + _2761;
                        _2694 = (_2938 * _2822.z) + _2762;
                        if (_2767 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2760 = _2692;
                            _2761 = _2693;
                            _2762 = _2694;
                            _2763 = _2695;
                            _2764 = _2696;
                            _2765 = _2697;
                            _2766 = _2767;
                        }
                    }
                    frontier_phi_61_pred = _2692;
                    frontier_phi_61_pred_1 = _2697;
                    frontier_phi_61_pred_2 = _2696;
                    frontier_phi_61_pred_3 = _2695;
                    frontier_phi_61_pred_4 = _2694;
                    frontier_phi_61_pred_5 = _2693;
                }
                _2492 = frontier_phi_61_pred;
                _2502 = frontier_phi_61_pred_1;
                _2500 = frontier_phi_61_pred_2;
                _2498 = frontier_phi_61_pred_3;
                _2496 = frontier_phi_61_pred_4;
                _2494 = frontier_phi_61_pred_5;
                uint _2643 = _2642 + 1u;
                if (_2643 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2636 = _2492;
                    _2637 = _2494;
                    _2638 = _2496;
                    _2639 = _2498;
                    _2640 = _2500;
                    _2641 = _2502;
                    _2642 = _2643;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2491 = _2492;
            _2493 = _2494;
            _2495 = _2496;
            _2497 = _2498;
            _2499 = _2500;
            _2501 = _2502;
        }
        uvec4 _2505 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2506 = _2505.z;
        uint _2508 = (_2506 >> 8u) & 15u;
        float _2604;
        float _2606;
        float _2608;
        float _2610;
        float _2612;
        float _2614;
        if (((4294967295u << _2508) & _2390) == 0u)
        {
            _2604 = _2491;
            _2606 = _2493;
            _2608 = _2495;
            _2610 = _2497;
            _2612 = _2499;
            _2614 = _2501;
        }
        else
        {
            float _2629 = inversesqrt(dot(vec3(_2344, _2345, _2346), vec3(_2344, _2345, _2346)));
            float _2630 = _2629 * _2344;
            float _2631 = _2629 * _2345;
            float _2632 = _2629 * _2346;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2508 < ((_2506 >> 12u) & 15u))
            {
                float _2605;
                float _2607;
                float _2609;
                float _2611;
                float _2613;
                float _2615;
                float _2743 = _2491;
                float _2744 = _2493;
                float _2745 = _2495;
                float _2746 = _2497;
                float _2747 = _2499;
                float _2748 = _2501;
                uint _2749 = _2508;
                uint _2758;
                bool _2759;
                for (;;)
                {
                    _2758 = texelFetch(g_lightClassification, int((((_2384 << 5u) + (_2370 << 9u)) + (_2749 << 2u)) >> 2u)).x;
                    _2759 = _2758 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2759)
                    {
                        frontier_phi_67_pred = _2746;
                        frontier_phi_67_pred_1 = _2747;
                        frontier_phi_67_pred_2 = _2748;
                        frontier_phi_67_pred_3 = _2745;
                        frontier_phi_67_pred_4 = _2744;
                        frontier_phi_67_pred_5 = _2743;
                    }
                    else
                    {
                        float _2943;
                        float _2944;
                        float _2945;
                        float _2946;
                        float _2947;
                        float _2948;
                        float _3237;
                        float _3238;
                        float _3239;
                        float _3240;
                        float _3241;
                        float _3242;
                        float _2956 = _2743;
                        float _2957 = _2744;
                        float _2958 = _2745;
                        float _2959 = _2746;
                        float _2960 = _2747;
                        float _2961 = _2748;
                        uint _2962 = _2758;
                        uint _2963;
                        vec4 _2988;
                        float _2989;
                        vec4 _3004;
                        vec3 _3016;
                        vec4 _3032;
                        vec4 _3047;
                        float _3093;
                        bool _3094;
                        for (;;)
                        {
                            uint _2973 = ((_2749 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2962));
                            _2963 = (_2962 + 4294967295u) & _2962;
                            uint _2975 = _2973 * 40u;
                            _2988 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2975)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2975 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2975 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2975 + 3u)).x));
                            _2989 = _2988.w;
                            uint _2991 = (_2973 * 40u) + 4u;
                            _3004 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2991)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 3u)).x));
                            uint _3006 = (_2973 * 40u) + 8u;
                            _3016 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3006)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3006 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3006 + 2u)).x));
                            uint _3019 = (_2973 * 40u) + 16u;
                            _3032 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3019)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3019 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3019 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3019 + 3u)).x));
                            uint _3034 = (_2973 * 40u) + 20u;
                            _3047 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3034)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3034 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3034 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3034 + 3u)).x));
                            uint _3049 = (_2973 * 40u) + 24u;
                            vec4 _3062 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3049)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3049 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3049 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3049 + 3u)).x));
                            uint _3068 = (_2973 * 40u) + 28u;
                            vec4 _3081 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3068)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3068 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3068 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3068 + 3u)).x));
                            _3093 = fma(_2346, _3081.z, fma(_2345, _3081.y, _3081.x * _2344)) + _3081.w;
                            _3094 = !((fma(_2346, _3062.z, fma(_2345, _3062.y, _3062.x * _2344)) + _3062.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3094)
                            {
                                float _3121 = _2988.x - _2344;
                                float _3122 = _2988.y - _2345;
                                float _3123 = _2988.z - _2346;
                                float _3124 = dot(vec3(_3121, _3122, _3123), vec3(_3121, _3122, _3123));
                                float _3127 = inversesqrt(_3124);
                                float _3128 = _3127 * _3121;
                                float _3129 = _3127 * _3122;
                                float _3130 = _3127 * _3123;
                                float _3134 = 1.0 - (_3124 / (_2989 * _2989));
                                float _4203 = isnan(0.0) ? _3134 : (isnan(_3134) ? 0.0 : max(_3134, 0.0));
                                float _3135 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
                                float _3139 = sqrt(_3124) * _3004.w;
                                float _3141 = 1.39999997615814208984375 / (_3139 + 1.39999997615814208984375);
                                float _3142 = _3141 * _3141;
                                float _3145 = ((1.0 - _3142) * dot(vec3(_3128, _3129, _3130), vec3(_583, _586, _589))) + _3142;
                                float _3148 = _3139 * _3139;
                                float _3152 = (fma(_2346, _3032.z, fma(_2345, _3032.y, _3032.x * _2344)) + _3032.w) / _3093;
                                float _3153 = (fma(_2346, _3047.z, fma(_2345, _3047.y, _3047.x * _2344)) + _3047.w) / _3093;
                                float _3157 = 1.0 - dot(vec2(_3152, _3153), vec2(_3152, _3153));
                                float _4219 = isnan(0.0) ? _3157 : (isnan(_3157) ? 0.0 : max(_3157, 0.0));
                                float _3158 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
                                float _3159 = _3158 * (((isnan(0.0) ? _3145 : (isnan(_3145) ? 0.0 : max(_3145, 0.0))) * _3135) / ((_3148 * 0.699999988079071044921875) + 1.0));
                                float _3171 = exp2(log2(1.0 / ((_3148 * 3.5) + 5.0)) * 0.25);
                                float _3172 = 1.0 - _658;
                                float _3179 = sqrt(1.0 - ((1.0 - (_3172 * _3172)) * (1.0 - (_3171 * _3171))));
                                float _3180 = _3179 * _3179;
                                float _3181 = _3180 * _3180;
                                float _3182 = _3128 - _2630;
                                float _3183 = _3129 - _2631;
                                float _3184 = _3130 - _2632;
                                float _3188 = inversesqrt(dot(vec3(_3182, _3183, _3184), vec3(_3182, _3183, _3184)));
                                float _3192 = dot(vec3(_583, _586, _589), vec3((-0.0) - _2630, (-0.0) - _2631, (-0.0) - _2632));
                                float _4230 = isnan(0.0) ? _3192 : (isnan(_3192) ? 0.0 : max(_3192, 0.0));
                                float _3195 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
                                float _3196 = dot(vec3(_583, _586, _589), vec3(_3188 * _3182, _3188 * _3183, _3188 * _3184));
                                float _4241 = isnan(0.0) ? _3196 : (isnan(_3196) ? 0.0 : max(_3196, 0.0));
                                float _3199 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
                                float _3203 = ((_3199 * _3199) * (_3181 + (-1.0))) + 1.0;
                                float _3204 = _3141 * _3180;
                                float _3205 = _3204 * _3204;
                                float _3211 = ((1.0 - _3205) * dot(vec3(_583, _586, _589), vec3(_3128, _3129, _3130))) + _3205;
                                float _4252 = isnan(0.0) ? _3211 : (isnan(_3211) ? 0.0 : max(_3211, 0.0));
                                float _3212 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
                                float _3213 = 1.0 - _3180;
                                float _3223 = (0.5 / (((_3212 * ((_3195 * _3213) + _3180)) + 9.9999999392252902907785028219223e-09) + (((_3212 * _3213) + _3180) * _3195))) * _3212;
                                float _4263 = isnan(0.0) ? _3223 : (isnan(_3223) ? 0.0 : max(_3223, 0.0));
                                float _3233 = (_3158 * _3135) * (((_3181 * 3.1415927410125732421875) * (isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0)))) / ((_3203 * _3203) * ((_3148 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3233 * _3016.x;
                                frontier_phi_73_pred_1 = _3233 * _3016.y;
                                frontier_phi_73_pred_2 = _3159 * _3004.z;
                                frontier_phi_73_pred_3 = _3159 * _3004.y;
                                frontier_phi_73_pred_4 = _3159 * _3004.x;
                                frontier_phi_73_pred_5 = _3233 * _3016.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3237 = frontier_phi_73_pred;
                            _3238 = frontier_phi_73_pred_1;
                            _3242 = frontier_phi_73_pred_2;
                            _3241 = frontier_phi_73_pred_3;
                            _3240 = frontier_phi_73_pred_4;
                            _3239 = frontier_phi_73_pred_5;
                            _2946 = _3240 + _2959;
                            _2947 = _3241 + _2960;
                            _2948 = _3242 + _2961;
                            _2943 = _3237 + _2956;
                            _2944 = _3238 + _2957;
                            _2945 = _3239 + _2958;
                            if (_2963 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2956 = _2943;
                                _2957 = _2944;
                                _2958 = _2945;
                                _2959 = _2946;
                                _2960 = _2947;
                                _2961 = _2948;
                                _2962 = _2963;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2946;
                        frontier_phi_67_pred_1 = _2947;
                        frontier_phi_67_pred_2 = _2948;
                        frontier_phi_67_pred_3 = _2945;
                        frontier_phi_67_pred_4 = _2944;
                        frontier_phi_67_pred_5 = _2943;
                    }
                    _2611 = frontier_phi_67_pred;
                    _2613 = frontier_phi_67_pred_1;
                    _2615 = frontier_phi_67_pred_2;
                    _2609 = frontier_phi_67_pred_3;
                    _2607 = frontier_phi_67_pred_4;
                    _2605 = frontier_phi_67_pred_5;
                    uint _2750 = _2749 + 1u;
                    if (_2750 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2743 = _2605;
                        _2744 = _2607;
                        _2745 = _2609;
                        _2746 = _2611;
                        _2747 = _2613;
                        _2748 = _2615;
                        _2749 = _2750;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2613;
                frontier_phi_55_56_ladder_1 = _2615;
                frontier_phi_55_56_ladder_2 = _2611;
                frontier_phi_55_56_ladder_3 = _2609;
                frontier_phi_55_56_ladder_4 = _2607;
                frontier_phi_55_56_ladder_5 = _2605;
            }
            else
            {
                frontier_phi_55_56_ladder = _2499;
                frontier_phi_55_56_ladder_1 = _2501;
                frontier_phi_55_56_ladder_2 = _2497;
                frontier_phi_55_56_ladder_3 = _2495;
                frontier_phi_55_56_ladder_4 = _2493;
                frontier_phi_55_56_ladder_5 = _2491;
            }
            _2604 = frontier_phi_55_56_ladder_5;
            _2606 = frontier_phi_55_56_ladder_4;
            _2608 = frontier_phi_55_56_ladder_3;
            _2610 = frontier_phi_55_56_ladder_2;
            _2612 = frontier_phi_55_56_ladder;
            _2614 = frontier_phi_55_56_ladder_1;
        }
        float _2619 = isnan(1.0) ? _642 : (isnan(_642) ? 1.0 : min(_642, 1.0));
        _2403 = (_2619 * _2610) + _1836;
        _2405 = (_2619 * _2612) + _1838;
        _2407 = (_2619 * _2614) + _1840;
        _2409 = ((_2604 * _626) * _2619) + _2184;
        _2411 = ((_2606 * _628) * _2619) + _2186;
        _2413 = ((_2608 * _629) * _2619) + _2188;
    }
    else
    {
        _2403 = _1836;
        _2405 = _1838;
        _2407 = _1840;
        _2409 = _2184;
        _2411 = _2186;
        _2413 = _2188;
    }
    float _4279 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _4290 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _4301 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    uint _2433 = _228 + 6u;
    float _2441 = _561 / cbSceneParam._m0[86u].x;
    float _2442 = _562 / cbSceneParam._m0[86u].y;
    vec4 _2456 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2441, _2442, (log2((isnan(cbSceneParam._m0[77u].w) ? _495 : (isnan(_495) ? cbSceneParam._m0[77u].w : min(_495, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2458 = _2456.x;
    float _2459 = _2456.y;
    float _2460 = _2456.z;
    float _2461 = _2456.w;
    float _2554;
    float _2556;
    float _2558;
    float _2560;
    if (_495 > cbSceneParam._m0[78u].w)
    {
        float _2516 = isnan(_495) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _495 : min(cbSceneParam._m0[80u].w, _495));
        float _2517 = _2516 / _495;
        float _2528 = _2517 * _546;
        float _2529 = _547 * _2517;
        float _2530 = (-0.0) - _2529;
        float _2532 = _2517 * _548;
        float _2534 = (cbSceneParam._m0[77u].w * _2530) / _2516;
        float _2535 = _2534 + cbSceneParam._m0[79u].w;
        float _2536 = cbSceneParam._m0[79u].w - _2529;
        float _2542 = sqrt(((_2528 * _2528) + (_2529 * _2529)) + (_2532 * _2532));
        float _2545 = (1.0 - (cbSceneParam._m0[77u].w / _2516)) * _2542;
        float _2550 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2552 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2705;
        if (abs((_2530 - _2534) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2705 = ((((_2535 > 0.0) ? exp2(_2550 * _2535) : (2.0 - exp2(_2552 * _2535))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2545;
        }
        else
        {
            float _2665 = 1.0 / cbSceneParam._m0[80u].x;
            float _2666 = isnan(_2536) ? _2535 : (isnan(_2535) ? _2536 : max(_2535, _2536));
            float _2667 = isnan(_2536) ? _2535 : (isnan(_2535) ? _2536 : min(_2535, _2536));
            float _2676 = isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : min(_2666, 0.0));
            float _2677 = isnan(0.0) ? _2667 : (isnan(_2667) ? 0.0 : min(_2667, 0.0));
            _2705 = ((abs(_2542 / _2530) * cbSceneParam._m0[80u].y) * ((((_2676 - _2677) * 2.0) - ((exp2(_2550 * (isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : max(_2666, 0.0)))) - exp2(_2550 * (isnan(0.0) ? _2667 : (isnan(_2667) ? 0.0 : max(_2667, 0.0))))) * _2665)) - ((exp2(_2552 * _2676) - exp2(_2552 * _2677)) * _2665))) + (_2545 * cbSceneParam._m0[80u].z);
        }
        vec4 _2707 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2441, _2442, 1.0), 0.0);
        float _2716 = exp2((_2705 * (-1.44269502162933349609375)) * (1.0 - _2707.w));
        float _2717 = log2(_2716);
        float _2733 = log2(_2461);
        _2554 = (exp2(_2733 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2717 * cbSceneParam._m0[78u].x)) * _2707.x) / cbSceneParam._m0[78u].x)) + _2458;
        _2556 = (exp2(_2733 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2717 * cbSceneParam._m0[78u].y)) * _2707.y) / cbSceneParam._m0[78u].y)) + _2459;
        _2558 = (exp2(_2733 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2717 * cbSceneParam._m0[78u].z)) * _2707.z) / cbSceneParam._m0[78u].z)) + _2460;
        _2560 = _2716 * _2461;
    }
    else
    {
        _2554 = _2458;
        _2556 = _2459;
        _2558 = _2460;
        _2560 = _2461;
    }
    float _2572 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2573 = _2572 == 3.0;
    float _2574 = log2(_2560);
    float _2581 = exp2(_2574 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0))) * (_2403 + ((isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0))) * _642))) + ((_2409 + ((isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0))) * _1451)) * cbPerFrame._m0[3u].x));
    float _2582 = exp2(_2574 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0))) * (_2405 + ((isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0))) * _642))) + ((_2411 + ((isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0))) * _1451)) * cbPerFrame._m0[3u].x));
    float _2583 = exp2(_2574 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0))) * (_2407 + ((isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0))) * _642))) + ((_2413 + ((isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0))) * _1451)) * cbPerFrame._m0[3u].x));
    float _2592 = (_2572 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2592 * (_2573 ? _2581 : (_2581 + (cbSceneParam._m0[72u].w * _2554)));
    SV_Target.y = _2592 * (_2573 ? _2582 : (_2582 + (cbSceneParam._m0[72u].w * _2556)));
    SV_Target.z = _2592 * (_2573 ? _2583 : (_2583 + (cbSceneParam._m0[72u].w * _2558)));
    SV_Target.w = cbInstanceData._m0[_2433].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2433].w;
}


