#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1235;
float _3615;
float _3616;
float _3617;
float _3618;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _210 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _211 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _212 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _218 = inversesqrt(dot(vec3(_210, _211, _212), vec3(_210, _211, _212)));
    float _219 = _218 * _210;
    float _220 = _218 * _211;
    float _221 = _218 * _212;
    float _225 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _226 = _225 * NORMAL.x;
    float _227 = _225 * NORMAL.y;
    float _228 = _225 * NORMAL.z;
    float _232 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _233 = _232 * TANGENT.x;
    float _234 = _232 * TANGENT.y;
    float _235 = _232 * TANGENT.z;
    uint _238 = uint(roundEven(NORMAL.w)) * 13u;
    uint _244 = _238 + 1u;
    uint _248 = _238 + 2u;
    float _257 = sqrt(((cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x) + (cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x)) + (cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x));
    float _258 = _257 * TEXCOORD.z;
    float _259 = _257 * TEXCOORD.w;
    vec4 _279 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _285 = _279.x * cbMtdParam._m0[11u].x;
    float _286 = _279.y * cbMtdParam._m0[11u].y;
    float _287 = _279.z * cbMtdParam._m0[11u].z;
    vec4 _306 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _258) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _259) + cbTextureTilingScale._m0[5u].w));
    vec4 _344 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _346 = _344.x;
    float _358 = dot(vec4(_346, _344.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _375 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_346 - _358) * cbMtdParam._m0[24u].y) + _358) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3627 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _376 = isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0));
    float _383 = (_376 * ((_306.x * cbMtdParam._m0[12u].x) - _285)) + _285;
    float _384 = (_376 * ((_306.y * cbMtdParam._m0[12u].y) - _286)) + _286;
    float _385 = (_376 * ((_306.z * cbMtdParam._m0[12u].z) - _287)) + _287;
    vec4 _404 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _258) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _259) + cbTextureTilingScale._m0[14u].w));
    vec4 _424 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _258) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _259) + cbTextureTilingScale._m0[4u].w));
    vec4 _441 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _443 = _441.x;
    float _444 = _441.y;
    float _445 = _441.z;
    float _454 = ((_424.z - _445) * _376) + _445;
    float _457 = ((((_424.x - _443) * _376) + _443) * 2.0) + (-1.0);
    float _459 = ((((_424.y - _444) * _376) + _444) * 2.0) + (-1.0);
    float _460 = dot(vec2(_457, _459), vec2(_457, _459));
    float _3638 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _465 = sqrt(1.0 - (isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0))));
    float _468 = fma(_465, _226, fma(_459, _233, _457 * _219));
    float _471 = fma(_465, _227, fma(_459, _234, _457 * _220));
    float _474 = fma(_465, _228, fma(_459, _235, _457 * _221));
    float _478 = inversesqrt(dot(vec3(_468, _471, _474), vec3(_468, _471, _474)));
    vec4 _494 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _520 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _258) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _259) + cbTextureTilingScale._m0[11u].w));
    float _522 = _520.x;
    float _523 = 1.0 - _522;
    float _529 = (cbMtdParam._m0[19u].x + dot(vec4(_478 * _468, _478 * _471, _478 * _474, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_522 - _523) * cbMtdParam._m0[24u].z) + _523) * cbMtdParam._m0[21u].z);
    float _3649 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _530 = isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0));
    float _537 = (_530 * ((_404.x * cbMtdParam._m0[18u].x) - _383)) + _383;
    float _538 = (_530 * ((_404.y * cbMtdParam._m0[18u].y) - _384)) + _384;
    float _539 = (_530 * ((_404.z * cbMtdParam._m0[18u].z) - _385)) + _385;
    vec4 _551 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _565 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _567 = _565.x;
    float _585 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _258) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _259) + cbTextureTilingScale._m0[9u].w)).x - _567) * _376) + _567;
    float _589 = ((_551.x - _585) * cbMtdParam._m0[19u].z) + _585;
    float _591 = _589 - (_589 * _530);
    vec4 _604 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _258) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _259) + cbTextureTilingScale._m0[15u].w));
    float _611 = (_604.x * 2.0) + (-1.0);
    float _612 = (_604.y * 2.0) + (-1.0);
    float _613 = dot(vec2(_611, _612), vec2(_611, _612));
    float _3660 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _621 = ((_604.z - _454) * _530) + _454;
    float _631 = ((sqrt(1.0 - (isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0)))) - _465) * _530) + _465;
    float _634 = (((_611 - _457) * _530) + _457) + (cbMtdParam._m0[21u].x * _457);
    float _635 = (((_612 - _459) * _530) + _459) + (cbMtdParam._m0[21u].x * _459);
    float _640 = cbMtdParam._m0[22u].x + _494.w;
    float _643 = fma(_631, _226, fma(_635, _233, _634 * _219));
    float _646 = fma(_631, _227, fma(_635, _234, _634 * _220));
    float _649 = fma(_631, _228, fma(_635, _235, _634 * _221));
    float _653 = inversesqrt(dot(vec3(_643, _646, _649), vec3(_643, _646, _649)));
    float _654 = _653 * _643;
    float _655 = _653 * _646;
    float _656 = _653 * _649;
    float _3671 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _657 = isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0));
    float _3682 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _3693 = isnan(0.0) ? _537 : (isnan(_537) ? 0.0 : max(_537, 0.0));
    float _3704 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _3715 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _3726 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _662 = isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0));
    float _676 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _717 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _727 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _717);
    float _728 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _717);
    float _729 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _717);
    float _733 = inversesqrt(dot(vec3(_727, _728, _729), vec3(_727, _728, _729)));
    float _734 = _727 * _733;
    float _735 = _728 * _733;
    float _736 = _729 * _733;
    vec4 _741 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _743 = _741.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _915 = sqrt(((_727 * _727) + (_728 * _728)) + (_729 * _729));
        float _921 = (cbMatDynParam._m0[5u].x * _915) + cbMatDynParam._m0[5u].y;
        float _3737 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
        float _922 = isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0));
        float _926 = (cbMatDynParam._m0[5u].z * _915) + cbMatDynParam._m0[5u].w;
        float _3748 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0))) - _922)) + _922) < ((_743 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _754 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _755 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _773 = fma(_656, cbSceneParam._m0[5u].z, fma(_655, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _654));
    float _776 = fma(_656, cbSceneParam._m0[6u].z, fma(_655, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _654));
    float _779 = fma(_656, cbSceneParam._m0[7u].z, fma(_655, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _654));
    uint _792 = _238 + 9u;
    uint _793 = _792 + uint(cbMatDynParam._m0[0u].w);
    float _799 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0)))) * cbInstanceData._m0[_793].x;
    float _800 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0)))) * cbInstanceData._m0[_793].y;
    float _801 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0)))) * cbInstanceData._m0[_793].z;
    float _3759 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
    float _802 = isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0));
    float _3770 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
    float _803 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
    float _3781 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
    float _804 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
    float _805 = 1.0 - _662;
    float _806 = _802 * _805;
    float _807 = _803 * _805;
    float _808 = _804 * _805;
    float _813 = (_802 + (-0.039999999105930328369140625)) * _662;
    float _814 = (_803 + (-0.039999999105930328369140625)) * _662;
    float _815 = (_804 + (-0.039999999105930328369140625)) * _662;
    float _816 = _813 + 0.039999999105930328369140625;
    float _818 = _814 + 0.039999999105930328369140625;
    float _819 = _815 + 0.039999999105930328369140625;
    vec4 _828 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _754, cbSceneParam._m0[86u].y * _755));
    float _832 = ((isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0))) * TEXCOORD_5.w) * _828.x;
    float _833 = dot(vec3(_654, _655, _656), vec3(_734, _735, _736));
    float _836 = _833 * 2.0;
    float _840 = (_836 * _654) - _734;
    float _841 = (_836 * _655) - _735;
    float _842 = (_836 * _656) - _736;
    float _846 = abs(dot(vec3(_734, _735, _736), vec3(_654, _655, _656)));
    float _3792 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
    float _848 = sqrt(_657);
    float _861 = exp2((_848 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_848 * 3.0));
    float _867 = (1.0 - _861) * ((_848 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _868 = _861 * _848;
    float _896 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _900 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _904 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1234;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _959 = fma(_904, cbModelParam._m0[26u].z, fma(_900, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _896));
        float _963 = fma(_904, cbModelParam._m0[27u].z, fma(_900, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _896));
        float _967 = fma(_904, cbModelParam._m0[28u].z, fma(_900, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _896));
        float _992 = _896 + _654;
        float _993 = _900 + _655;
        float _994 = _904 + _656;
        float _1004 = fma(_994, cbModelParam._m0[26u].z, fma(_993, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _992)) - _959;
        float _1005 = fma(_994, cbModelParam._m0[27u].z, fma(_993, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _992)) - _963;
        float _1006 = fma(_994, cbModelParam._m0[28u].z, fma(_993, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _992)) - _967;
        float _1010 = inversesqrt(dot(vec3(_1004, _1005, _1006), vec3(_1004, _1005, _1006)));
        float _1023 = ((_1010 * _1004) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_959 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1024 = ((_1010 * _1005) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_963 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1025 = ((_1010 * _1006) / cbModelParam._m0[34u].z) + ((((((_967 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1028 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1023, _1024, _1025), 0.0);
        vec4 _1035 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1023, _1024, _1025), 0.0);
        vec4 _1042 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1023, _1024, _1025), 0.0);
        vec4 _1049 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1023, _1024, _1025), 0.0);
        float _1062 = exp2((_1028.w + (-0.5)) * 20.0) * 2.0;
        float _1063 = _1062 * (_1028.x + (-0.5));
        float _1064 = _1062 * (_1028.y + (-0.5));
        float _1065 = _1062 * (_1028.z + (-0.5));
        float _1072 = exp2((_1035.w + (-0.5)) * 20.0) * 2.0;
        float _1073 = _1072 * (_1035.x + (-0.5));
        float _1074 = _1072 * (_1035.y + (-0.5));
        float _1075 = _1072 * (_1035.z + (-0.5));
        float _1082 = exp2((_1042.w + (-0.5)) * 20.0) * 2.0;
        float _1083 = _1082 * (_1042.x + (-0.5));
        float _1084 = _1082 * (_1042.y + (-0.5));
        float _1085 = _1082 * (_1042.z + (-0.5));
        float _1092 = exp2((_1049.w + (-0.5)) * 20.0) * 2.0;
        float _1093 = _1092 * (_1049.x + (-0.5));
        float _1094 = _1092 * (_1049.y + (-0.5));
        float _1095 = _1092 * (_1049.z + (-0.5));
        float _1096 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1097 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1098 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1099 = _1063 * 0.5;
        float _1100 = _1073 * 0.5;
        float _1101 = _1083 * 0.5;
        float _1102 = dot(vec3(_1099, _1100, _1101), vec3(_1099, _1100, _1101));
        float _1107 = (_1102 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1102);
        float _1116 = (dot(vec3(_654, _655, _656), vec3(_1107 * _1099, _1107 * _1100, _1107 * _1101)) + 1.0) * 0.5;
        float _3818 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1126 = sqrt(((_1100 * _1100) + (_1099 * _1099)) + (_1101 * _1101)) / (_1096 + 9.9999997473787516355514526367188e-06);
        float _3829 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1127 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
        float _1128 = _1127 * 2.0;
        float _1132 = (1.0 - _1127) / (_1127 + 1.0);
        float _3840 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1133 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
        float _1142 = ((((1.0 - _1133) * (_1128 + 2.0)) * exp2(log2(isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0))) * (_1128 + 1.0))) + _1133) * _1096;
        float _1143 = _1064 * 0.5;
        float _1144 = _1074 * 0.5;
        float _1145 = _1084 * 0.5;
        float _1146 = dot(vec3(_1143, _1144, _1145), vec3(_1143, _1144, _1145));
        float _1151 = (_1146 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1146);
        float _1159 = (dot(vec3(_654, _655, _656), vec3(_1151 * _1143, _1151 * _1144, _1151 * _1145)) + 1.0) * 0.5;
        float _3851 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1168 = sqrt(((_1144 * _1144) + (_1143 * _1143)) + (_1145 * _1145)) / (_1097 + 9.9999997473787516355514526367188e-06);
        float _3862 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1169 = isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0));
        float _1170 = _1169 * 2.0;
        float _1174 = (1.0 - _1169) / (_1169 + 1.0);
        float _3873 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1175 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
        float _1184 = ((((1.0 - _1175) * (_1170 + 2.0)) * exp2(log2(isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0))) * (_1170 + 1.0))) + _1175) * _1097;
        float _1185 = _1065 * 0.5;
        float _1186 = _1075 * 0.5;
        float _1187 = _1085 * 0.5;
        float _1188 = dot(vec3(_1185, _1186, _1187), vec3(_1185, _1186, _1187));
        float _1193 = (_1188 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1188);
        float _1201 = (dot(vec3(_654, _655, _656), vec3(_1193 * _1185, _1193 * _1186, _1193 * _1187)) + 1.0) * 0.5;
        float _3884 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1210 = sqrt(((_1186 * _1186) + (_1185 * _1185)) + (_1187 * _1187)) / (_1098 + 9.9999997473787516355514526367188e-06);
        float _3895 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1211 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
        float _1212 = _1211 * 2.0;
        float _1216 = (1.0 - _1211) / (_1211 + 1.0);
        float _3906 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1217 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
        float _1226 = ((((1.0 - _1217) * (_1212 + 2.0)) * exp2(log2(isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0))) * (_1212 + 1.0))) + _1217) * _1098;
        _1234 = _1065;
        _1236 = _1064;
        _1237 = _1063;
        _1238 = _1075;
        _1239 = _1074;
        _1240 = _1073;
        _1241 = _1085;
        _1242 = _1084;
        _1243 = _1083;
        _1244 = _1098;
        _1245 = _1097;
        _1246 = _1096;
        _1247 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0)));
        _1248 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0)));
        _1249 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0)));
    }
    else
    {
        _1234 = _1235;
        _1236 = _1235;
        _1237 = _1235;
        _1238 = _1235;
        _1239 = _1235;
        _1240 = _1235;
        _1241 = _1235;
        _1242 = _1235;
        _1243 = _1235;
        _1244 = _1235;
        _1245 = _1235;
        _1246 = _1235;
        _1247 = 0.0;
        _1248 = 0.0;
        _1249 = 0.0;
    }
    float _1546;
    float _1547;
    float _1548;
    float _1549;
    float _1550;
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1277 = fma(_904, cbModelParam._m0[30u].z, fma(_900, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _896));
        float _1281 = fma(_904, cbModelParam._m0[31u].z, fma(_900, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _896));
        float _1285 = fma(_904, cbModelParam._m0[32u].z, fma(_900, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _896));
        float _1308 = _896 + _654;
        float _1309 = _900 + _655;
        float _1310 = _904 + _656;
        float _1320 = fma(_1310, cbModelParam._m0[30u].z, fma(_1309, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1308)) - _1277;
        float _1321 = fma(_1310, cbModelParam._m0[31u].z, fma(_1309, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1308)) - _1281;
        float _1322 = fma(_1310, cbModelParam._m0[32u].z, fma(_1309, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1308)) - _1285;
        float _1326 = inversesqrt(dot(vec3(_1320, _1321, _1322), vec3(_1320, _1321, _1322)));
        float _1339 = ((_1326 * _1320) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1277 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1340 = ((_1326 * _1321) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1281 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1341 = ((_1326 * _1322) / cbModelParam._m0[35u].z) + ((((((_1285 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1343 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1339, _1340, _1341), 0.0);
        vec4 _1350 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1339, _1340, _1341), 0.0);
        vec4 _1357 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1339, _1340, _1341), 0.0);
        vec4 _1364 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1339, _1340, _1341), 0.0);
        float _1376 = exp2((_1343.w + (-0.5)) * 20.0) * 2.0;
        float _1377 = _1376 * (_1343.x + (-0.5));
        float _1378 = _1376 * (_1343.y + (-0.5));
        float _1379 = _1376 * (_1343.z + (-0.5));
        float _1386 = exp2((_1350.w + (-0.5)) * 20.0) * 2.0;
        float _1387 = _1386 * (_1350.x + (-0.5));
        float _1388 = _1386 * (_1350.y + (-0.5));
        float _1389 = _1386 * (_1350.z + (-0.5));
        float _1396 = exp2((_1357.w + (-0.5)) * 20.0) * 2.0;
        float _1397 = _1396 * (_1357.x + (-0.5));
        float _1398 = _1396 * (_1357.y + (-0.5));
        float _1399 = _1396 * (_1357.z + (-0.5));
        float _1406 = exp2((_1364.w + (-0.5)) * 20.0) * 2.0;
        float _1407 = _1406 * (_1364.x + (-0.5));
        float _1408 = _1406 * (_1364.y + (-0.5));
        float _1409 = _1406 * (_1364.z + (-0.5));
        float _1410 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1411 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1412 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1413 = _1377 * 0.5;
        float _1414 = _1387 * 0.5;
        float _1415 = _1397 * 0.5;
        float _1416 = dot(vec3(_1413, _1414, _1415), vec3(_1413, _1414, _1415));
        float _1421 = (_1416 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1416);
        float _1429 = (dot(vec3(_654, _655, _656), vec3(_1421 * _1413, _1421 * _1414, _1421 * _1415)) + 1.0) * 0.5;
        float _3947 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1438 = sqrt(((_1414 * _1414) + (_1413 * _1413)) + (_1415 * _1415)) / (_1410 + 9.9999997473787516355514526367188e-06);
        float _3958 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1439 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
        float _1440 = _1439 * 2.0;
        float _1444 = (1.0 - _1439) / (_1439 + 1.0);
        float _3969 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1445 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
        float _1454 = ((((1.0 - _1445) * (_1440 + 2.0)) * exp2(log2(isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0))) * (_1440 + 1.0))) + _1445) * _1410;
        float _1455 = _1378 * 0.5;
        float _1456 = _1388 * 0.5;
        float _1457 = _1398 * 0.5;
        float _1458 = dot(vec3(_1455, _1456, _1457), vec3(_1455, _1456, _1457));
        float _1463 = (_1458 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1458);
        float _1471 = (dot(vec3(_654, _655, _656), vec3(_1463 * _1455, _1463 * _1456, _1463 * _1457)) + 1.0) * 0.5;
        float _3980 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1480 = sqrt(((_1456 * _1456) + (_1455 * _1455)) + (_1457 * _1457)) / (_1411 + 9.9999997473787516355514526367188e-06);
        float _3991 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1481 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
        float _1482 = _1481 * 2.0;
        float _1486 = (1.0 - _1481) / (_1481 + 1.0);
        float _4002 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1487 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
        float _1496 = ((((1.0 - _1487) * (_1482 + 2.0)) * exp2(log2(isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0))) * (_1482 + 1.0))) + _1487) * _1411;
        float _1497 = _1379 * 0.5;
        float _1498 = _1389 * 0.5;
        float _1499 = _1399 * 0.5;
        float _1500 = dot(vec3(_1497, _1498, _1499), vec3(_1497, _1498, _1499));
        float _1505 = (_1500 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1500);
        float _1513 = (dot(vec3(_654, _655, _656), vec3(_1505 * _1497, _1505 * _1498, _1505 * _1499)) + 1.0) * 0.5;
        float _4013 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1522 = sqrt(((_1498 * _1498) + (_1497 * _1497)) + (_1499 * _1499)) / (_1412 + 9.9999997473787516355514526367188e-06);
        float _4024 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1523 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
        float _1524 = _1523 * 2.0;
        float _1528 = (1.0 - _1523) / (_1523 + 1.0);
        float _4035 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1529 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
        float _1538 = ((((1.0 - _1529) * (_1524 + 2.0)) * exp2(log2(isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0))) * (_1524 + 1.0))) + _1529) * _1412;
        _1546 = _1379;
        _1547 = _1378;
        _1548 = _1377;
        _1549 = _1389;
        _1550 = _1388;
        _1551 = _1387;
        _1552 = _1399;
        _1553 = _1398;
        _1554 = _1397;
        _1555 = _1412;
        _1556 = _1411;
        _1557 = _1410;
        _1558 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0)));
        _1559 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0)));
        _1560 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0)));
    }
    else
    {
        _1546 = _1235;
        _1547 = _1235;
        _1548 = _1235;
        _1549 = _1235;
        _1550 = _1235;
        _1551 = _1235;
        _1552 = _1235;
        _1553 = _1235;
        _1554 = _1235;
        _1555 = _1235;
        _1556 = _1235;
        _1557 = _1235;
        _1558 = 0.0;
        _1559 = 0.0;
        _1560 = 0.0;
    }
    float _1570 = (cbModelParam._m0[1u].x * (_1558 - _1247)) + _1247;
    float _1571 = (cbModelParam._m0[1u].x * (_1559 - _1248)) + _1248;
    float _1572 = (cbModelParam._m0[1u].x * (_1560 - _1249)) + _1249;
    float _1593 = fma(_1572, cbSceneParam._m0[89u].z, fma(_1571, cbSceneParam._m0[89u].y, _1570 * cbSceneParam._m0[89u].x));
    float _1596 = fma(_1572, cbSceneParam._m0[90u].z, fma(_1571, cbSceneParam._m0[90u].y, _1570 * cbSceneParam._m0[90u].x));
    float _1599 = fma(_1572, cbSceneParam._m0[91u].z, fma(_1571, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1570));
    float _1614 = _840 * 0.5;
    float _1615 = _841 * 0.5;
    float _1616 = _842 * 0.5;
    float _1617 = dot(vec4(_1614, _1615, _1616, 1.0), vec4(_1548, _1551, _1554, _1557));
    float _1620 = dot(vec4(_1614, _1615, _1616, 1.0), vec4(_1547, _1550, _1553, _1556));
    float _1623 = dot(vec4(_1614, _1615, _1616, 1.0), vec4(_1546, _1549, _1552, _1555));
    float _1657;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1630 = dot(vec4(_1614, _1615, _1616, 1.0), vec4(_1234, _1238, _1241, _1244));
        float _1634 = dot(vec4(_1614, _1615, _1616, 1.0), vec4(_1236, _1239, _1242, _1245));
        float _1638 = dot(vec4(_1614, _1615, _1616, 1.0), vec4(_1237, _1240, _1243, _1246));
        float _1645 = dot(vec4(cbModelParam._m0[39u]), vec4(_1614, _1615, _1616, 1.0));
        _1657 = dot(vec3(isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0)), isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0)), isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1645) ? 0.0 : (isnan(0.0) ? _1645 : max(0.0, _1645))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1657 = 1.0;
    }
    float _1668;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1659 = dot(vec4(cbModelParam._m0[40u]), vec4(_1614, _1615, _1616, 1.0));
        _1668 = dot(vec3(isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0)), isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0)), isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1659) ? 0.0 : (isnan(0.0) ? _1659 : max(0.0, _1659))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1668 = 1.0;
    }
    float _1672 = (_1668 * cbModelParam._m0[1u].x) + (_1657 * (1.0 - cbModelParam._m0[1u].x));
    float _1682 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _657);
    float _1683 = isnan(_1682) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1682 : min(cbModelParam._m0[25u].z, _1682));
    float _1763;
    float _1765;
    float _1767;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1730 = fma(_904, cbModelParam._m0[13u].z, fma(_900, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _896)) + cbModelParam._m0[13u].w;
        float _1734 = fma(_904, cbModelParam._m0[14u].z, fma(_900, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _896)) + cbModelParam._m0[14u].w;
        float _1738 = fma(_904, cbModelParam._m0[15u].z, fma(_900, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _896)) + cbModelParam._m0[15u].w;
        float _1741 = fma(_842, cbModelParam._m0[13u].z, fma(_841, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _840));
        float _1744 = fma(_842, cbModelParam._m0[14u].z, fma(_841, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _840));
        float _1747 = fma(_842, cbModelParam._m0[15u].z, fma(_841, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _840));
        float _1775;
        if (_1741 > 0.0)
        {
            _1775 = abs((1.0 - _1730) / _1741);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1741 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1730 + 1.0) / _1741);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1775 = frontier_phi_17_15_ladder;
        }
        float _1977;
        if (_1744 > 0.0)
        {
            _1977 = abs((1.0 - _1734) / _1744);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1744 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1734 + 1.0) / _1744);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1977 = frontier_phi_26_22_ladder;
        }
        float _2231;
        if (_1747 > 0.0)
        {
            _2231 = abs((1.0 - _1738) / _1747);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1747 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1738 + 1.0) / _1747);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2231 = frontier_phi_38_33_ladder;
        }
        float _2233 = isnan(_1977) ? _1775 : (isnan(_1775) ? _1977 : min(_1775, _1977));
        float _2234 = isnan(_2231) ? _2233 : (isnan(_2233) ? _2231 : min(_2233, _2231));
        float _2238 = (_2234 * _1741) + _1730;
        float _2239 = (_2234 * _1744) + _1734;
        float _2240 = (_2234 * _1747) + _1738;
        float _2241 = _2234 * 9.9999997473787516355514526367188e-05;
        float _2243 = (-1.0) - _2241;
        float _2245 = _2241 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2240 > _2245) || ((_2240 < _2243) || ((_2239 > _2245) || ((_2239 < _2243) || ((_2238 < _2243) || (_2238 > _2245))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2368 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2240, cbModelParam._m0[9u].z, fma(_2239, cbModelParam._m0[9u].y, _2238 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2240, cbModelParam._m0[10u].z, fma(_2239, cbModelParam._m0[10u].y, _2238 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2240, cbModelParam._m0[11u].z, fma(_2239, cbModelParam._m0[11u].y, _2238 * cbModelParam._m0[11u].x))), _1683);
            frontier_phi_16_38_ladder = _2368.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2368.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2368.x * cbModelParam._m0[1u].y;
        }
        _1763 = frontier_phi_16_38_ladder_2;
        _1765 = frontier_phi_16_38_ladder_1;
        _1767 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1751 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_840, _841, _842), _1683);
        _1763 = _1751.x * cbModelParam._m0[1u].y;
        _1765 = _1751.y * cbModelParam._m0[1u].y;
        _1767 = _1751.z * cbModelParam._m0[1u].y;
    }
    float _1771 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _657);
    float _1772 = isnan(_1771) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1771 : min(cbModelParam._m0[25u].w, _1771));
    float _1861;
    float _1863;
    float _1865;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1825 = fma(_904, cbModelParam._m0[21u].z, fma(_900, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _896)) + cbModelParam._m0[21u].w;
        float _1829 = fma(_904, cbModelParam._m0[22u].z, fma(_900, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _896)) + cbModelParam._m0[22u].w;
        float _1833 = fma(_904, cbModelParam._m0[23u].z, fma(_900, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _896)) + cbModelParam._m0[23u].w;
        float _1836 = fma(_842, cbModelParam._m0[21u].z, fma(_841, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _840));
        float _1839 = fma(_842, cbModelParam._m0[22u].z, fma(_841, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _840));
        float _1842 = fma(_842, cbModelParam._m0[23u].z, fma(_841, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _840));
        float _1982;
        if (_1836 > 0.0)
        {
            _1982 = abs((1.0 - _1825) / _1836);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1836 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1825 + 1.0) / _1836);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1982 = frontier_phi_28_24_ladder;
        }
        float _2258;
        if (_1839 > 0.0)
        {
            _2258 = abs((1.0 - _1829) / _1839);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1839 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1829 + 1.0) / _1839);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2258 = frontier_phi_40_35_ladder;
        }
        float _2471;
        if (_1842 > 0.0)
        {
            _2471 = abs((1.0 - _1833) / _1842);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1842 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1833 + 1.0) / _1842);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2471 = frontier_phi_49_46_ladder;
        }
        float _2473 = isnan(_2258) ? _1982 : (isnan(_1982) ? _2258 : min(_1982, _2258));
        float _2474 = isnan(_2471) ? _2473 : (isnan(_2473) ? _2471 : min(_2473, _2471));
        float _2478 = (_2474 * _1836) + _1825;
        float _2479 = (_2474 * _1839) + _1829;
        float _2480 = (_2474 * _1842) + _1833;
        float _2481 = _2474 * 9.9999997473787516355514526367188e-05;
        float _2482 = (-1.0) - _2481;
        float _2484 = _2481 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2480 > _2484) || ((_2480 < _2482) || ((_2479 > _2484) || ((_2479 < _2482) || ((_2478 < _2482) || (_2478 > _2484))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2679 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2480, cbModelParam._m0[17u].z, fma(_2479, cbModelParam._m0[17u].y, _2478 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2480, cbModelParam._m0[18u].z, fma(_2479, cbModelParam._m0[18u].y, _2478 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2480, cbModelParam._m0[19u].z, fma(_2479, cbModelParam._m0[19u].y, _2478 * cbModelParam._m0[19u].x))), _1772);
            frontier_phi_25_49_ladder = _2679.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2679.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2679.x * cbModelParam._m0[1u].z;
        }
        _1861 = frontier_phi_25_49_ladder_2;
        _1863 = frontier_phi_25_49_ladder_1;
        _1865 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1845 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_840, _841, _842), _1772);
        _1861 = _1845.x * cbModelParam._m0[1u].z;
        _1863 = _1845.y * cbModelParam._m0[1u].z;
        _1865 = _1845.z * cbModelParam._m0[1u].z;
    }
    float _1878 = (((_867 * _816) + _868) * _832) * ((cbModelParam._m0[1u].w * (_1861 - _1763)) + _1763);
    float _1880 = (((_867 * _818) + _868) * _832) * ((cbModelParam._m0[1u].w * (_1863 - _1765)) + _1765);
    float _1882 = (((_867 * _819) + _868) * _832) * ((cbModelParam._m0[1u].w * (_1865 - _1767)) + _1767);
    float _1885 = fma(_1882, cbSceneParam._m0[89u].z, fma(_1880, cbSceneParam._m0[89u].y, _1878 * cbSceneParam._m0[89u].x));
    float _1888 = fma(_1882, cbSceneParam._m0[90u].z, fma(_1880, cbSceneParam._m0[90u].y, _1878 * cbSceneParam._m0[90u].x));
    float _1891 = fma(_1882, cbSceneParam._m0[91u].z, fma(_1880, cbSceneParam._m0[91u].y, _1878 * cbSceneParam._m0[91u].x));
    uvec4 _1901 = floatBitsToUint(cbInstanceData._m0[_238 + 5u]);
    uint _1903 = _1901.x * 14u;
    uint _1904 = _1903 + 13u;
    float _1911 = _832 + (-1.0);
    float _1916 = (cbLight._m0[_1904].x * _1911) + 1.0;
    float _1917 = (cbLight._m0[_1904].y * _1911) + 1.0;
    float _1918 = (cbLight._m0[_1904].z * _1911) + 1.0;
    float _1919 = (cbLight._m0[_1904].w * _1911) + 1.0;
    uint _1920 = _1903 + 5u;
    float _1926 = isnan(1.0) ? _1917 : (isnan(_1917) ? 1.0 : min(_1917, 1.0));
    uint _1930 = _1903 + 4u;
    float _1936 = isnan(1.0) ? _1916 : (isnan(_1916) ? 1.0 : min(_1916, 1.0));
    uint _1940 = _1903 | 1u;
    float _1951 = dot(vec3(cbLight._m0[_1903].xyz), vec3(_654, _655, _656));
    float _1954 = dot(vec3(cbLight._m0[_1940].xyz), vec3(_654, _655, _656));
    float _4171 = isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0));
    float _4182 = isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0));
    float _1959 = (isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0))) * 0.3183098733425140380859375;
    float _1961 = (isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0))) * 0.3183098733425140380859375;
    float _1968 = ((cbLight._m0[_1920].x * _1926) * _1961) + ((cbLight._m0[_1930].x * _1936) * _1959);
    float _1969 = ((_1926 * cbLight._m0[_1920].y) * _1961) + ((_1936 * cbLight._m0[_1930].y) * _1959);
    float _1970 = ((_1926 * cbLight._m0[_1920].z) * _1961) + ((_1936 * cbLight._m0[_1930].z) * _1959);
    uvec4 _1974 = floatBitsToUint(cbLight._m0[_1903 + 12u]);
    bool _1976 = _1974.x == 0u;
    float _1987;
    float _1989;
    float _1991;
    if (_1976)
    {
        _1987 = _1968;
        _1989 = _1969;
        _1991 = _1970;
    }
    else
    {
        uint _1995 = _1903 + 6u;
        float _2011 = (dot(vec3(cbLight._m0[_1903 + 2u].xyz), vec3(_654, _655, _656)) * 0.5) + 0.5;
        float _2012 = _2011 * _2011;
        float _4193 = isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0));
        float _2013 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
        float _2014 = isnan(1.0) ? _1918 : (isnan(_1918) ? 1.0 : min(_1918, 1.0));
        _1987 = (((cbLight._m0[_1995].x * 0.3183098733425140380859375) * _2013) * _2014) + _1968;
        _1989 = (((cbLight._m0[_1995].y * 0.3183098733425140380859375) * _2013) * _2014) + _1969;
        _1991 = (((cbLight._m0[_1995].z * 0.3183098733425140380859375) * _2013) * _2014) + _1970;
    }
    bool _1994 = _1974.y == 0u;
    float _2032;
    float _2034;
    float _2036;
    if (_1994)
    {
        _2032 = _1987;
        _2034 = _1989;
        _2036 = _1991;
    }
    else
    {
        uint _2202 = _1903 + 7u;
        float _2218 = (dot(vec3(cbLight._m0[_1903 + 3u].xyz), vec3(_654, _655, _656)) * 0.5) + 0.5;
        float _2219 = _2218 * _2218;
        float _4209 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
        float _2220 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
        float _2221 = isnan(1.0) ? _1919 : (isnan(_1919) ? 1.0 : min(_1919, 1.0));
        _2032 = (((cbLight._m0[_2202].x * 0.3183098733425140380859375) * _2220) * _2221) + _1987;
        _2034 = (((cbLight._m0[_2202].y * 0.3183098733425140380859375) * _2220) * _2221) + _1989;
        _2036 = (((cbLight._m0[_2202].z * 0.3183098733425140380859375) * _2220) * _2221) + _1991;
    }
    uint _2039 = _1903 + 8u;
    float _2052 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1903].w)) * _657) * 0.949999988079071044921875);
    float _2053 = _2052 * _2052;
    float _2054 = cbLight._m0[_1903].x + _734;
    float _2055 = cbLight._m0[_1903].y + _735;
    float _2056 = cbLight._m0[_1903].z + _736;
    float _2060 = inversesqrt(dot(vec3(_2054, _2055, _2056), vec3(_2054, _2055, _2056)));
    float _2061 = _2060 * _2054;
    float _2062 = _2060 * _2055;
    float _2063 = _2060 * _2056;
    float _2064 = dot(vec3(_654, _655, _656), vec3(cbLight._m0[_1903].xyz));
    float _4225 = isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0));
    float _2067 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
    float _4236 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
    float _2068 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
    float _2069 = dot(vec3(_654, _655, _656), vec3(_2061, _2062, _2063));
    float _4247 = isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0));
    float _2072 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
    float _2073 = dot(vec3(cbLight._m0[_1903].xyz), vec3(_2061, _2062, _2063));
    float _4258 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
    float _2077 = _2053 * _2053;
    float _2081 = ((_2072 * _2072) * (_2077 + (-1.0))) + 1.0;
    float _2089 = exp2(log2(1.0 - (isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0)))) * 5.0);
    float _2090 = 0.959999978542327880859375 - _813;
    float _2092 = 0.959999978542327880859375 - _814;
    float _2093 = 0.959999978542327880859375 - _815;
    float _2100 = 1.0 - _2053;
    float _2111 = (0.5 / (((_2068 * ((_2067 * _2100) + _2053)) + 9.9999999392252902907785028219223e-09) + (((_2068 * _2100) + _2053) * _2067))) * _2067;
    float _4269 = isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0));
    float _2113 = (isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0))) * (_2077 / ((_2081 * _2081) * 3.141590118408203125));
    uint _2124 = _1903 + 9u;
    float _2135 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1940].w)) * _657) * 0.949999988079071044921875);
    float _2136 = _2135 * _2135;
    float _2137 = cbLight._m0[_1940].x + _734;
    float _2138 = cbLight._m0[_1940].y + _735;
    float _2139 = cbLight._m0[_1940].z + _736;
    float _2143 = inversesqrt(dot(vec3(_2137, _2138, _2139), vec3(_2137, _2138, _2139)));
    float _2144 = _2143 * _2137;
    float _2145 = _2143 * _2138;
    float _2146 = _2143 * _2139;
    float _2147 = dot(vec3(_654, _655, _656), vec3(cbLight._m0[_1940].xyz));
    float _4280 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
    float _2150 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
    float _2151 = dot(vec3(_654, _655, _656), vec3(_2144, _2145, _2146));
    float _4291 = isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0));
    float _2154 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
    float _2155 = dot(vec3(cbLight._m0[_1940].xyz), vec3(_2144, _2145, _2146));
    float _4302 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
    float _2159 = _2136 * _2136;
    float _2163 = ((_2154 * _2154) * (_2159 + (-1.0))) + 1.0;
    float _2170 = exp2(log2(1.0 - (isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0)))) * 5.0);
    float _2177 = 1.0 - _2136;
    float _2187 = (0.5 / (((_2068 * ((_2150 * _2177) + _2136)) + 9.9999999392252902907785028219223e-09) + (((_2068 * _2177) + _2136) * _2150))) * _2150;
    float _4313 = isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0));
    float _2189 = (isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0))) * (_2159 / ((_2163 * _2163) * 3.141590118408203125));
    float _2199 = (((((_2170 * _2090) + _816) * cbLight._m0[_2124].x) * _2189) * _1926) + (((((_2089 * _2090) + _816) * cbLight._m0[_2039].x) * _2113) * _1936);
    float _2200 = (((((_2170 * _2092) + _818) * cbLight._m0[_2124].y) * _2189) * _1926) + (((((_2089 * _2092) + _818) * cbLight._m0[_2039].y) * _2113) * _1936);
    float _2201 = (((((_2170 * _2093) + _819) * cbLight._m0[_2124].z) * _2189) * _1926) + (((((_2089 * _2093) + _819) * cbLight._m0[_2039].z) * _2113) * _1936);
    float _2263;
    float _2265;
    float _2267;
    if (_1976)
    {
        _2263 = _2199;
        _2265 = _2200;
        _2267 = _2201;
    }
    else
    {
        uint _2269 = _1903 + 2u;
        uint _2273 = _1903 + 10u;
        float _2287 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2269].w)) * _657) * 0.949999988079071044921875);
        float _2288 = _2287 * _2287;
        float _2289 = cbLight._m0[_2269].x + _734;
        float _2290 = cbLight._m0[_2269].y + _735;
        float _2291 = cbLight._m0[_2269].z + _736;
        float _2295 = inversesqrt(dot(vec3(_2289, _2290, _2291), vec3(_2289, _2290, _2291)));
        float _2296 = _2295 * _2289;
        float _2297 = _2295 * _2290;
        float _2298 = _2295 * _2291;
        float _2299 = dot(vec3(_654, _655, _656), vec3(cbLight._m0[_2269].xyz));
        float _4324 = isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0));
        float _2302 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
        float _2303 = dot(vec3(_654, _655, _656), vec3(_2296, _2297, _2298));
        float _4335 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
        float _2306 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
        float _2307 = dot(vec3(cbLight._m0[_2269].xyz), vec3(_2296, _2297, _2298));
        float _4346 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
        float _2311 = _2288 * _2288;
        float _2315 = ((_2306 * _2306) * (_2311 + (-1.0))) + 1.0;
        float _2322 = exp2(log2(1.0 - (isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0)))) * 5.0);
        float _2329 = 1.0 - _2288;
        float _2339 = (0.5 / (((_2068 * ((_2302 * _2329) + _2288)) + 9.9999999392252902907785028219223e-09) + (((_2068 * _2329) + _2288) * _2302))) * _2302;
        float _4357 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
        float _2341 = (isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0))) * (_2311 / ((_2315 * _2315) * 3.141590118408203125));
        float _2342 = isnan(1.0) ? _1918 : (isnan(_1918) ? 1.0 : min(_1918, 1.0));
        _2263 = (((((_2322 * _2090) + _816) * cbLight._m0[_2273].x) * _2341) * _2342) + _2199;
        _2265 = (((((_2322 * _2092) + _818) * cbLight._m0[_2273].y) * _2341) * _2342) + _2200;
        _2267 = (((((_2322 * _2093) + _819) * cbLight._m0[_2273].z) * _2341) * _2342) + _2201;
    }
    float _2377;
    float _2379;
    float _2381;
    if (_1994)
    {
        _2377 = _2263;
        _2379 = _2265;
        _2381 = _2267;
    }
    else
    {
        uint _2388 = _1903 + 3u;
        uint _2392 = _1903 + 11u;
        float _2406 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2388].w)) * _657) * 0.949999988079071044921875);
        float _2407 = _2406 * _2406;
        float _2408 = cbLight._m0[_2388].x + _734;
        float _2409 = cbLight._m0[_2388].y + _735;
        float _2410 = cbLight._m0[_2388].z + _736;
        float _2414 = inversesqrt(dot(vec3(_2408, _2409, _2410), vec3(_2408, _2409, _2410)));
        float _2415 = _2414 * _2408;
        float _2416 = _2414 * _2409;
        float _2417 = _2414 * _2410;
        float _2418 = dot(vec3(_654, _655, _656), vec3(cbLight._m0[_2388].xyz));
        float _4373 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
        float _2421 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
        float _2422 = dot(vec3(_654, _655, _656), vec3(_2415, _2416, _2417));
        float _4384 = isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : max(_2422, 0.0));
        float _2425 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
        float _2426 = dot(vec3(cbLight._m0[_2388].xyz), vec3(_2415, _2416, _2417));
        float _4395 = isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0));
        float _2430 = _2407 * _2407;
        float _2434 = ((_2425 * _2425) * (_2430 + (-1.0))) + 1.0;
        float _2441 = exp2(log2(1.0 - (isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0)))) * 5.0);
        float _2448 = 1.0 - _2407;
        float _2458 = (0.5 / (((_2068 * ((_2421 * _2448) + _2407)) + 9.9999999392252902907785028219223e-09) + (((_2068 * _2448) + _2407) * _2421))) * _2421;
        float _4406 = isnan(0.0) ? _2458 : (isnan(_2458) ? 0.0 : max(_2458, 0.0));
        float _2460 = (isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0))) * (_2430 / ((_2434 * _2434) * 3.141590118408203125));
        float _2461 = isnan(1.0) ? _1919 : (isnan(_1919) ? 1.0 : min(_1919, 1.0));
        _2377 = (((((_2441 * _2090) + _816) * cbLight._m0[_2392].x) * _2460) * _2461) + _2263;
        _2379 = (((((_2441 * _2092) + _818) * cbLight._m0[_2392].y) * _2460) * _2461) + _2265;
        _2381 = (((((_2441 * _2093) + _819) * cbLight._m0[_2392].z) * _2460) * _2461) + _2267;
    }
    float _2596;
    float _2598;
    float _2600;
    float _2602;
    float _2604;
    float _2606;
    if (_1901.y == 0u)
    {
        float _2536 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2537 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2536;
        float _2538 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2536;
        float _2539 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2536;
        uvec4 _2551 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2552 = _2551.x;
        uint _2563 = uint((float(_2551.y) * floor(float(uint(cbSceneParam._m0[85u].y * _755) / _2552))) + floor(float(uint(cbSceneParam._m0[85u].x * _754) / _2552)));
        float _2573 = (log2(_2539 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2574 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0));
        uint _2577 = uint(isnan(14.0) ? _2574 : (isnan(_2574) ? 14.0 : min(_2574, 14.0)));
        uvec4 _2582 = texelFetch(g_lightClusterGridBuffer, int(((_2577 << 2u) + (_2563 << 6u)) >> 2u));
        uint _2583 = _2582.x;
        uint _2584 = _2551.z;
        float _2684;
        float _2686;
        float _2688;
        float _2690;
        float _2692;
        float _2694;
        if (((((1u << ((_2584 >> 4u) & 15u)) + 4294967295u) & _2583) == 0u) || ((_2584 & 240u) == 0u))
        {
            _2684 = 0.0;
            _2686 = 0.0;
            _2688 = 0.0;
            _2690 = 0.0;
            _2692 = 0.0;
            _2694 = 0.0;
        }
        else
        {
            float _2685;
            float _2687;
            float _2689;
            float _2691;
            float _2693;
            float _2695;
            float _2837 = 0.0;
            float _2838 = 0.0;
            float _2839 = 0.0;
            float _2840 = 0.0;
            float _2841 = 0.0;
            float _2842 = 0.0;
            uint _2843 = 0u;
            uint _2852;
            bool _2853;
            for (;;)
            {
                _2852 = texelFetch(g_lightClassification, int((((_2577 << 5u) + (_2563 << 9u)) + (_2843 << 2u)) >> 2u)).x;
                _2853 = _2852 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2853)
                {
                    frontier_phi_66_pred = _2837;
                    frontier_phi_66_pred_1 = _2842;
                    frontier_phi_66_pred_2 = _2841;
                    frontier_phi_66_pred_3 = _2840;
                    frontier_phi_66_pred_4 = _2839;
                    frontier_phi_66_pred_5 = _2838;
                }
                else
                {
                    float _2982;
                    float _2983;
                    float _2984;
                    float _2985;
                    float _2986;
                    float _2987;
                    uint _2988;
                    _2982 = _2837;
                    _2983 = _2838;
                    _2984 = _2839;
                    _2985 = _2840;
                    _2986 = _2841;
                    _2987 = _2842;
                    _2988 = _2852;
                    float _2909;
                    float _2910;
                    float _2911;
                    float _2912;
                    float _2913;
                    float _2914;
                    for (;;)
                    {
                        uint _2992 = uint(findLSB(_2988)) + (_2843 << 5u);
                        uint _2989 = (_2988 + 4294967295u) & _2988;
                        uint _2994 = _2992 * 48u;
                        vec4 _3008 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2994)).x, texelFetch(g_PointLightRenderingBuffer, int(_2994 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2994 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2994 + 3u)).x));
                        uint _3014 = (_2992 * 48u) + 4u;
                        vec4 _3027 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3014)).x, texelFetch(g_PointLightRenderingBuffer, int(_3014 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3014 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3014 + 3u)).x));
                        uint _3033 = (_2992 * 48u) + 8u;
                        vec3 _3044 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3033)).x, texelFetch(g_PointLightRenderingBuffer, int(_3033 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3033 + 2u)).x));
                        float _3048 = _3008.x - _2537;
                        float _3049 = _3008.y - _2538;
                        float _3050 = _3008.z - _2539;
                        float _3051 = dot(vec3(_3048, _3049, _3050), vec3(_3048, _3049, _3050));
                        float _3054 = inversesqrt(_3051);
                        float _3055 = _3054 * _3048;
                        float _3056 = _3054 * _3049;
                        float _3057 = _3054 * _3050;
                        float _3058 = dot(vec3(_773, _776, _779), vec3(_3055, _3056, _3057));
                        float _3063 = 1.0 - (_3051 * _3008.w);
                        float _4432 = isnan(0.0) ? _3063 : (isnan(_3063) ? 0.0 : max(_3063, 0.0));
                        float _3064 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
                        float _3065 = sqrt(_3051) * _3027.w;
                        float _3068 = 1.39999997615814208984375 / (_3065 + 1.39999997615814208984375);
                        float _3069 = _3068 * _3068;
                        float _3072 = ((1.0 - _3069) * _3058) + _3069;
                        float _3075 = _3065 * _3065;
                        float _3079 = ((isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : max(_3072, 0.0))) * _3064) / ((_3075 * 0.699999988079071044921875) + 1.0);
                        float _3083 = (-0.0) - _2537;
                        float _3084 = (-0.0) - _2538;
                        float _3085 = (-0.0) - _2539;
                        float _3089 = inversesqrt(dot(vec3(_3083, _3084, _3085), vec3(_3083, _3084, _3085)));
                        float _3090 = _3089 * _3083;
                        float _3091 = _3089 * _3084;
                        float _3092 = _3089 * _3085;
                        float _3100 = exp2(log2(1.0 / ((_3075 * 3.5) + 5.0)) * 0.25);
                        float _3101 = 1.0 - _848;
                        float _3108 = sqrt(1.0 - ((1.0 - (_3101 * _3101)) * (1.0 - (_3100 * _3100))));
                        float _3109 = _3108 * _3108;
                        float _3110 = _3109 * _3109;
                        float _3111 = _3090 + _3055;
                        float _3112 = _3091 + _3056;
                        float _3113 = _3092 + _3057;
                        float _3117 = inversesqrt(dot(vec3(_3111, _3112, _3113), vec3(_3111, _3112, _3113)));
                        float _3121 = dot(vec3(_773, _776, _779), vec3(_3090, _3091, _3092));
                        float _4448 = isnan(0.0) ? _3121 : (isnan(_3121) ? 0.0 : max(_3121, 0.0));
                        float _3124 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
                        float _3125 = dot(vec3(_773, _776, _779), vec3(_3117 * _3111, _3117 * _3112, _3117 * _3113));
                        float _4459 = isnan(0.0) ? _3125 : (isnan(_3125) ? 0.0 : max(_3125, 0.0));
                        float _3128 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
                        float _3132 = ((_3128 * _3128) * (_3110 + (-1.0))) + 1.0;
                        float _3133 = _3068 * _3109;
                        float _3134 = _3133 * _3133;
                        float _3137 = ((1.0 - _3134) * _3058) + _3134;
                        float _4470 = isnan(0.0) ? _3137 : (isnan(_3137) ? 0.0 : max(_3137, 0.0));
                        float _3138 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
                        float _3139 = 1.0 - _3109;
                        float _3149 = (0.5 / (((_3138 * ((_3124 * _3139) + _3109)) + 9.9999999392252902907785028219223e-09) + (((_3138 * _3139) + _3109) * _3124))) * _3138;
                        float _4481 = isnan(0.0) ? _3149 : (isnan(_3149) ? 0.0 : max(_3149, 0.0));
                        float _3160 = (((_3110 * 3.1415927410125732421875) * (isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0)))) / ((_3132 * _3132) * ((_3075 * 2.1991131305694580078125) + 3.141590118408203125))) * _3064;
                        _2912 = (_3079 * _3027.x) + _2985;
                        _2913 = (_3079 * _3027.y) + _2986;
                        _2914 = (_3079 * _3027.z) + _2987;
                        _2909 = (_3160 * _3044.x) + _2982;
                        _2910 = (_3160 * _3044.y) + _2983;
                        _2911 = (_3160 * _3044.z) + _2984;
                        if (_2989 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2982 = _2909;
                            _2983 = _2910;
                            _2984 = _2911;
                            _2985 = _2912;
                            _2986 = _2913;
                            _2987 = _2914;
                            _2988 = _2989;
                        }
                    }
                    frontier_phi_66_pred = _2909;
                    frontier_phi_66_pred_1 = _2914;
                    frontier_phi_66_pred_2 = _2913;
                    frontier_phi_66_pred_3 = _2912;
                    frontier_phi_66_pred_4 = _2911;
                    frontier_phi_66_pred_5 = _2910;
                }
                _2685 = frontier_phi_66_pred;
                _2695 = frontier_phi_66_pred_1;
                _2693 = frontier_phi_66_pred_2;
                _2691 = frontier_phi_66_pred_3;
                _2689 = frontier_phi_66_pred_4;
                _2687 = frontier_phi_66_pred_5;
                uint _2844 = _2843 + 1u;
                if (_2844 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2837 = _2685;
                    _2838 = _2687;
                    _2839 = _2689;
                    _2840 = _2691;
                    _2841 = _2693;
                    _2842 = _2695;
                    _2843 = _2844;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2684 = _2685;
            _2686 = _2687;
            _2688 = _2689;
            _2690 = _2691;
            _2692 = _2693;
            _2694 = _2695;
        }
        uvec4 _2698 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2699 = _2698.z;
        uint _2701 = (_2699 >> 8u) & 15u;
        float _2805;
        float _2807;
        float _2809;
        float _2811;
        float _2813;
        float _2815;
        if (((4294967295u << _2701) & _2583) == 0u)
        {
            _2805 = _2684;
            _2807 = _2686;
            _2809 = _2688;
            _2811 = _2690;
            _2813 = _2692;
            _2815 = _2694;
        }
        else
        {
            float _2830 = inversesqrt(dot(vec3(_2537, _2538, _2539), vec3(_2537, _2538, _2539)));
            float _2831 = _2830 * _2537;
            float _2832 = _2830 * _2538;
            float _2833 = _2830 * _2539;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2701 < ((_2699 >> 12u) & 15u))
            {
                float _2806;
                float _2808;
                float _2810;
                float _2812;
                float _2814;
                float _2816;
                float _2965 = _2684;
                float _2966 = _2686;
                float _2967 = _2688;
                float _2968 = _2690;
                float _2969 = _2692;
                float _2970 = _2694;
                uint _2971 = _2701;
                uint _2980;
                bool _2981;
                for (;;)
                {
                    _2980 = texelFetch(g_lightClassification, int((((_2577 << 5u) + (_2563 << 9u)) + (_2971 << 2u)) >> 2u)).x;
                    _2981 = _2980 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2981)
                    {
                        frontier_phi_77_pred = _2970;
                        frontier_phi_77_pred_1 = _2969;
                        frontier_phi_77_pred_2 = _2968;
                        frontier_phi_77_pred_3 = _2967;
                        frontier_phi_77_pred_4 = _2966;
                        frontier_phi_77_pred_5 = _2965;
                    }
                    else
                    {
                        float _3174;
                        float _3175;
                        float _3176;
                        float _3177;
                        float _3178;
                        float _3179;
                        float _3468;
                        float _3469;
                        float _3470;
                        float _3471;
                        float _3472;
                        float _3473;
                        float _3187 = _2965;
                        float _3188 = _2966;
                        float _3189 = _2967;
                        float _3190 = _2968;
                        float _3191 = _2969;
                        float _3192 = _2970;
                        uint _3193 = _2980;
                        uint _3194;
                        vec4 _3219;
                        float _3220;
                        vec4 _3235;
                        vec3 _3247;
                        vec4 _3262;
                        vec4 _3278;
                        float _3324;
                        bool _3325;
                        for (;;)
                        {
                            uint _3204 = ((_2971 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3193));
                            _3194 = (_3193 + 4294967295u) & _3193;
                            uint _3206 = _3204 * 40u;
                            _3219 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3206)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 3u)).x));
                            _3220 = _3219.w;
                            uint _3222 = (_3204 * 40u) + 4u;
                            _3235 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3222)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3222 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3222 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3222 + 3u)).x));
                            uint _3237 = (_3204 * 40u) + 8u;
                            _3247 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3237)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 2u)).x));
                            uint _3249 = (_3204 * 40u) + 16u;
                            _3262 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3249)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 3u)).x));
                            uint _3265 = (_3204 * 40u) + 20u;
                            _3278 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3265)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 3u)).x));
                            uint _3280 = (_3204 * 40u) + 24u;
                            vec4 _3293 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3280)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 3u)).x));
                            uint _3299 = (_3204 * 40u) + 28u;
                            vec4 _3312 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3299)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 3u)).x));
                            _3324 = fma(_2539, _3312.z, fma(_2538, _3312.y, _3312.x * _2537)) + _3312.w;
                            _3325 = !((fma(_2539, _3293.z, fma(_2538, _3293.y, _3293.x * _2537)) + _3293.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3325)
                            {
                                float _3352 = _3219.x - _2537;
                                float _3353 = _3219.y - _2538;
                                float _3354 = _3219.z - _2539;
                                float _3355 = dot(vec3(_3352, _3353, _3354), vec3(_3352, _3353, _3354));
                                float _3358 = inversesqrt(_3355);
                                float _3359 = _3358 * _3352;
                                float _3360 = _3358 * _3353;
                                float _3361 = _3358 * _3354;
                                float _3365 = 1.0 - (_3355 / (_3220 * _3220));
                                float _4492 = isnan(0.0) ? _3365 : (isnan(_3365) ? 0.0 : max(_3365, 0.0));
                                float _3366 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
                                float _3370 = sqrt(_3355) * _3235.w;
                                float _3372 = 1.39999997615814208984375 / (_3370 + 1.39999997615814208984375);
                                float _3373 = _3372 * _3372;
                                float _3376 = ((1.0 - _3373) * dot(vec3(_3359, _3360, _3361), vec3(_773, _776, _779))) + _3373;
                                float _3379 = _3370 * _3370;
                                float _3383 = (fma(_2539, _3262.z, fma(_2538, _3262.y, _3262.x * _2537)) + _3262.w) / _3324;
                                float _3384 = (fma(_2539, _3278.z, fma(_2538, _3278.y, _3278.x * _2537)) + _3278.w) / _3324;
                                float _3388 = 1.0 - dot(vec2(_3383, _3384), vec2(_3383, _3384));
                                float _4508 = isnan(0.0) ? _3388 : (isnan(_3388) ? 0.0 : max(_3388, 0.0));
                                float _3389 = isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0));
                                float _3390 = _3389 * (((isnan(0.0) ? _3376 : (isnan(_3376) ? 0.0 : max(_3376, 0.0))) * _3366) / ((_3379 * 0.699999988079071044921875) + 1.0));
                                float _3402 = exp2(log2(1.0 / ((_3379 * 3.5) + 5.0)) * 0.25);
                                float _3403 = 1.0 - _848;
                                float _3410 = sqrt(1.0 - ((1.0 - (_3403 * _3403)) * (1.0 - (_3402 * _3402))));
                                float _3411 = _3410 * _3410;
                                float _3412 = _3411 * _3411;
                                float _3413 = _3359 - _2831;
                                float _3414 = _3360 - _2832;
                                float _3415 = _3361 - _2833;
                                float _3419 = inversesqrt(dot(vec3(_3413, _3414, _3415), vec3(_3413, _3414, _3415)));
                                float _3423 = dot(vec3(_773, _776, _779), vec3((-0.0) - _2831, (-0.0) - _2832, (-0.0) - _2833));
                                float _4519 = isnan(0.0) ? _3423 : (isnan(_3423) ? 0.0 : max(_3423, 0.0));
                                float _3426 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
                                float _3427 = dot(vec3(_773, _776, _779), vec3(_3419 * _3413, _3419 * _3414, _3419 * _3415));
                                float _4530 = isnan(0.0) ? _3427 : (isnan(_3427) ? 0.0 : max(_3427, 0.0));
                                float _3430 = isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0));
                                float _3434 = ((_3430 * _3430) * (_3412 + (-1.0))) + 1.0;
                                float _3435 = _3372 * _3411;
                                float _3436 = _3435 * _3435;
                                float _3442 = ((1.0 - _3436) * dot(vec3(_773, _776, _779), vec3(_3359, _3360, _3361))) + _3436;
                                float _4541 = isnan(0.0) ? _3442 : (isnan(_3442) ? 0.0 : max(_3442, 0.0));
                                float _3443 = isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0));
                                float _3444 = 1.0 - _3411;
                                float _3454 = (0.5 / (((_3443 * ((_3426 * _3444) + _3411)) + 9.9999999392252902907785028219223e-09) + (((_3443 * _3444) + _3411) * _3426))) * _3443;
                                float _4552 = isnan(0.0) ? _3454 : (isnan(_3454) ? 0.0 : max(_3454, 0.0));
                                float _3464 = (_3389 * _3366) * (((_3412 * 3.1415927410125732421875) * (isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0)))) / ((_3434 * _3434) * ((_3379 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3390 * _3235.y;
                                frontier_phi_83_pred_1 = _3390 * _3235.x;
                                frontier_phi_83_pred_2 = _3464 * _3247.z;
                                frontier_phi_83_pred_3 = _3464 * _3247.y;
                                frontier_phi_83_pred_4 = _3464 * _3247.x;
                                frontier_phi_83_pred_5 = _3390 * _3235.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3472 = frontier_phi_83_pred;
                            _3471 = frontier_phi_83_pred_1;
                            _3470 = frontier_phi_83_pred_2;
                            _3469 = frontier_phi_83_pred_3;
                            _3468 = frontier_phi_83_pred_4;
                            _3473 = frontier_phi_83_pred_5;
                            _3177 = _3471 + _3190;
                            _3178 = _3472 + _3191;
                            _3179 = _3473 + _3192;
                            _3174 = _3468 + _3187;
                            _3175 = _3469 + _3188;
                            _3176 = _3470 + _3189;
                            if (_3194 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3187 = _3174;
                                _3188 = _3175;
                                _3189 = _3176;
                                _3190 = _3177;
                                _3191 = _3178;
                                _3192 = _3179;
                                _3193 = _3194;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3179;
                        frontier_phi_77_pred_1 = _3178;
                        frontier_phi_77_pred_2 = _3177;
                        frontier_phi_77_pred_3 = _3176;
                        frontier_phi_77_pred_4 = _3175;
                        frontier_phi_77_pred_5 = _3174;
                    }
                    _2816 = frontier_phi_77_pred;
                    _2814 = frontier_phi_77_pred_1;
                    _2812 = frontier_phi_77_pred_2;
                    _2810 = frontier_phi_77_pred_3;
                    _2808 = frontier_phi_77_pred_4;
                    _2806 = frontier_phi_77_pred_5;
                    uint _2972 = _2971 + 1u;
                    if (_2972 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2965 = _2806;
                        _2966 = _2808;
                        _2967 = _2810;
                        _2968 = _2812;
                        _2969 = _2814;
                        _2970 = _2816;
                        _2971 = _2972;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2810;
                frontier_phi_58_59_ladder_1 = _2816;
                frontier_phi_58_59_ladder_2 = _2814;
                frontier_phi_58_59_ladder_3 = _2812;
                frontier_phi_58_59_ladder_4 = _2808;
                frontier_phi_58_59_ladder_5 = _2806;
            }
            else
            {
                frontier_phi_58_59_ladder = _2688;
                frontier_phi_58_59_ladder_1 = _2694;
                frontier_phi_58_59_ladder_2 = _2692;
                frontier_phi_58_59_ladder_3 = _2690;
                frontier_phi_58_59_ladder_4 = _2686;
                frontier_phi_58_59_ladder_5 = _2684;
            }
            _2805 = frontier_phi_58_59_ladder_5;
            _2807 = frontier_phi_58_59_ladder_4;
            _2809 = frontier_phi_58_59_ladder;
            _2811 = frontier_phi_58_59_ladder_3;
            _2813 = frontier_phi_58_59_ladder_2;
            _2815 = frontier_phi_58_59_ladder_1;
        }
        float _2820 = isnan(1.0) ? _832 : (isnan(_832) ? 1.0 : min(_832, 1.0));
        _2596 = (_2820 * _2811) + _2032;
        _2598 = (_2820 * _2813) + _2034;
        _2600 = (_2820 * _2815) + _2036;
        _2602 = ((_2805 * _816) * _2820) + _2377;
        _2604 = ((_2807 * _818) * _2820) + _2379;
        _2606 = ((_2809 * _819) * _2820) + _2381;
    }
    else
    {
        _2596 = _2032;
        _2598 = _2034;
        _2600 = _2036;
        _2602 = _2377;
        _2604 = _2379;
        _2606 = _2381;
    }
    float _4568 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
    float _4579 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
    float _4590 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
    float _2623 = ((isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0))) * (_2596 + ((isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0))) * _832))) + ((_2602 + ((isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0))) * _1672)) * cbPerFrame._m0[3u].x);
    float _2624 = ((isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0))) * (_2598 + ((isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0))) * _832))) + ((_2604 + ((isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0))) * _1672)) * cbPerFrame._m0[3u].x);
    float _2625 = ((isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0))) * (_2600 + ((isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0))) * _832))) + ((_2606 + ((isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0))) * _1672)) * cbPerFrame._m0[3u].x);
    uint _2626 = _238 + 6u;
    float _2634 = _754 / cbSceneParam._m0[86u].x;
    float _2635 = _755 / cbSceneParam._m0[86u].y;
    vec4 _2649 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2634, _2635, (log2((isnan(cbSceneParam._m0[77u].w) ? _676 : (isnan(_676) ? cbSceneParam._m0[77u].w : min(_676, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2651 = _2649.x;
    float _2652 = _2649.y;
    float _2653 = _2649.z;
    float _2654 = _2649.w;
    float _2747;
    float _2749;
    float _2751;
    float _2753;
    if (_676 > cbSceneParam._m0[78u].w)
    {
        float _2709 = isnan(_676) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _676 : min(cbSceneParam._m0[80u].w, _676));
        float _2710 = _2709 / _676;
        float _2721 = _2710 * _727;
        float _2722 = _728 * _2710;
        float _2723 = (-0.0) - _2722;
        float _2725 = _2710 * _729;
        float _2727 = (cbSceneParam._m0[77u].w * _2723) / _2709;
        float _2728 = _2727 + cbSceneParam._m0[79u].w;
        float _2729 = cbSceneParam._m0[79u].w - _2722;
        float _2735 = sqrt(((_2721 * _2721) + (_2722 * _2722)) + (_2725 * _2725));
        float _2738 = (1.0 - (cbSceneParam._m0[77u].w / _2709)) * _2735;
        float _2743 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2745 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2922;
        if (abs((_2723 - _2727) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2922 = ((((_2728 > 0.0) ? exp2(_2743 * _2728) : (2.0 - exp2(_2745 * _2728))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2738;
        }
        else
        {
            float _2866 = 1.0 / cbSceneParam._m0[80u].x;
            float _2867 = isnan(_2729) ? _2728 : (isnan(_2728) ? _2729 : max(_2728, _2729));
            float _2868 = isnan(_2729) ? _2728 : (isnan(_2728) ? _2729 : min(_2728, _2729));
            float _2877 = isnan(0.0) ? _2867 : (isnan(_2867) ? 0.0 : min(_2867, 0.0));
            float _2878 = isnan(0.0) ? _2868 : (isnan(_2868) ? 0.0 : min(_2868, 0.0));
            _2922 = ((abs(_2735 / _2723) * cbSceneParam._m0[80u].y) * ((((_2877 - _2878) * 2.0) - ((exp2(_2743 * (isnan(0.0) ? _2867 : (isnan(_2867) ? 0.0 : max(_2867, 0.0)))) - exp2(_2743 * (isnan(0.0) ? _2868 : (isnan(_2868) ? 0.0 : max(_2868, 0.0))))) * _2866)) - ((exp2(_2745 * _2877) - exp2(_2745 * _2878)) * _2866))) + (_2738 * cbSceneParam._m0[80u].z);
        }
        vec4 _2924 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2634, _2635, 1.0), 0.0);
        float _2933 = exp2((_2922 * (-1.44269502162933349609375)) * (1.0 - _2924.w));
        float _2934 = log2(_2933);
        float _2950 = log2(_2654);
        _2747 = (exp2(_2950 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2934 * cbSceneParam._m0[78u].x)) * _2924.x) / cbSceneParam._m0[78u].x)) + _2651;
        _2749 = (exp2(_2950 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2934 * cbSceneParam._m0[78u].y)) * _2924.y) / cbSceneParam._m0[78u].y)) + _2652;
        _2751 = (exp2(_2950 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2934 * cbSceneParam._m0[78u].z)) * _2924.z) / cbSceneParam._m0[78u].z)) + _2653;
        _2753 = _2933 * _2654;
    }
    else
    {
        _2747 = _2651;
        _2749 = _2652;
        _2751 = _2653;
        _2753 = _2654;
    }
    bool _2960;
    vec4 _2763;
    vec4 _2785;
    float _2787;
    float _2791;
    float _2792;
    float _2793;
    float _2794;
    bool _2804;
    for (;;)
    {
        _2763 = cbMatDynParam._m0[0u];
        float _2765 = roundEven(_2763.y);
        bool _2766 = _2765 == 3.0;
        float _2767 = log2(_2753);
        float _2774 = exp2(_2767 * cbSceneParam._m0[78u].x) * _2623;
        float _2775 = exp2(_2767 * cbSceneParam._m0[78u].y) * _2624;
        float _2776 = exp2(_2767 * cbSceneParam._m0[78u].z) * _2625;
        float _2783 = _743 + (-0.5);
        _2785 = cbMtdParam._m0[1u];
        _2787 = _2785.y * _2783;
        float _2790 = (_2765 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2791 = _2790 * (_2766 ? _2774 : (_2774 + (cbSceneParam._m0[72u].w * _2747)));
        _2792 = _2790 * (_2766 ? _2775 : (_2775 + (cbSceneParam._m0[72u].w * _2749)));
        _2793 = _2790 * (_2766 ? _2776 : (_2776 + (cbSceneParam._m0[72u].w * _2751)));
        _2794 = _2783 * 0.999000012874603271484375;
        _2804 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2804)
        {
            if ((cbInstanceData._m0[_238 + 7u].x + _2794) < 0.5)
            {
                _2960 = true;
                break;
            }
        }
        uint _2901 = _792 + uint(_2763.w);
        if ((cbInstanceData._m0[_2901].w < 1.0) && ((cbInstanceData._m0[_2901].w + _2794) < 0.5))
        {
            _2960 = true;
            break;
        }
        if ((_2787 + 1.0) < _2785.x)
        {
            _2960 = true;
            break;
        }
        _2960 = false;
        break;
    }
    float _3165;
    if (_2960)
    {
        discard_state = true;
        _3165 = 0.0;
    }
    else
    {
        _3165 = cbInstanceData._m0[_2626].w;
    }
    SV_Target.x = _2791;
    SV_Target.y = _2792;
    SV_Target.z = _2793;
    SV_Target.w = _3165;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2626].w;
    discard_exit();
}


