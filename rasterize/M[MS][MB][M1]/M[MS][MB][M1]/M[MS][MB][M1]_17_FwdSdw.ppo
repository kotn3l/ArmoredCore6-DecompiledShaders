#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1102;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _211 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _212 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _213 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _219 = inversesqrt(dot(vec3(_211, _212, _213), vec3(_211, _212, _213)));
    float _226 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _233 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _239 = uint(roundEven(NORMAL.w)) * 13u;
    uint _244 = _239 + 1u;
    uint _248 = _239 + 2u;
    float _257 = sqrt(((cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x) + (cbInstanceData._m0[_239].x * cbInstanceData._m0[_239].x)) + (cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x));
    float _258 = _257 * TEXCOORD.z;
    float _259 = _257 * TEXCOORD.w;
    vec4 _278 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _284 = _278.x * cbMtdParam._m0[9u].x;
    float _285 = _278.y * cbMtdParam._m0[9u].y;
    float _286 = _278.z * cbMtdParam._m0[9u].z;
    vec4 _304 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _308 = _304.z;
    float _313 = (_304.x * 2.0) + (-1.0);
    float _315 = (_304.y * 2.0) + (-1.0);
    float _316 = dot(vec2(_313, _315), vec2(_313, _315));
    float _3715 = isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0));
    float _322 = sqrt(1.0 - (isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0))));
    vec4 _339 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _258) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _259) + cbTextureTilingScale._m0[11u].w));
    float _341 = _339.x;
    float _342 = 1.0 - _341;
    float _351 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _354 = ((isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : min(_351, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _363 = (_354 - ((((((_341 - _342) * cbMtdParam._m0[24u].z) + _342) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _354))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3736 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
    float _364 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
    float _371 = (_364 * (cbMtdParam._m0[17u].x - _284)) + _284;
    float _372 = (_364 * (cbMtdParam._m0[17u].y - _285)) + _285;
    float _373 = (_364 * (cbMtdParam._m0[17u].z - _286)) + _286;
    vec4 _386 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _258) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _259) + cbTextureTilingScale._m0[19u].w));
    float _388 = _386.x;
    float _389 = 1.0 - _388;
    float _418 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_388 - _389) * cbMtdParam._m0[24u].w) + _389) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3747 = isnan(0.0) ? _418 : (isnan(_418) ? 0.0 : max(_418, 0.0));
    float _419 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
    float _427 = ((((cbMtdParam._m0[10u].x - _371) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _419) + _371;
    float _428 = ((((cbMtdParam._m0[10u].y - _372) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _419) + _372;
    float _429 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _373)) * _419) + _373;
    vec4 _442 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _444 = _442.x;
    float _446 = _444 - (_444 * _364);
    float _448 = _446 - (_446 * _419);
    vec4 _462 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _258) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _259) + cbTextureTilingScale._m0[15u].w));
    float _469 = (_462.x * 2.0) + (-1.0);
    float _470 = (_462.y * 2.0) + (-1.0);
    float _471 = dot(vec2(_469, _470), vec2(_469, _470));
    float _3758 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _479 = (_364 * (_462.z - _308)) + _308;
    float _482 = ((cbMtdParam._m0[23u].y - _479) * _419) + _479;
    vec4 _504 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _258) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _259) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _510 = (_504.x * 2.0) + (-1.0);
    float _511 = (_504.y * 2.0) + (-1.0);
    float _512 = dot(vec2(_510, _511), vec2(_510, _511));
    float _3769 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _529 = (((_469 - _313) + (cbMtdParam._m0[21u].x * _313)) * _364) + _313;
    float _530 = (((_470 - _315) + (cbMtdParam._m0[21u].x * _315)) * _364) + _315;
    float _531 = (_364 * (sqrt(1.0 - (isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0)))) - _322)) + _322;
    float _542 = (((_510 - _529) + (_529 * cbMtdParam._m0[22u].z)) * _419) + _529;
    float _543 = (((_511 - _530) + (_530 * cbMtdParam._m0[22u].z)) * _419) + _530;
    float _544 = ((sqrt(1.0 - (isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0)))) - _531) * _419) + _531;
    float _546 = cbMtdParam._m0[22u].x + _304.w;
    float _549 = fma(_544, _226 * NORMAL.x, fma(_543, _233 * TANGENT.x, (_219 * _211) * _542));
    float _552 = fma(_544, _226 * NORMAL.y, fma(_543, _233 * TANGENT.y, (_219 * _212) * _542));
    float _555 = fma(_544, _226 * NORMAL.z, fma(_543, _233 * TANGENT.z, (_219 * _213) * _542));
    float _559 = inversesqrt(dot(vec3(_549, _552, _555), vec3(_549, _552, _555)));
    float _560 = _559 * _549;
    float _561 = _559 * _552;
    float _562 = _559 * _555;
    float _3780 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _563 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
    float _3791 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _3802 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _3813 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _3824 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _3835 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _568 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
    float _582 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _622 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _632 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _622);
    float _633 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _622);
    float _634 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _622);
    float _638 = inversesqrt(dot(vec3(_632, _633, _634), vec3(_632, _633, _634)));
    float _639 = _632 * _638;
    float _640 = _633 * _638;
    float _641 = _634 * _638;
    float _647 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _648 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _669 = fma(_562, cbSceneParam._m0[5u].z, fma(_561, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _560));
    float _672 = fma(_562, cbSceneParam._m0[6u].z, fma(_561, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _560));
    float _675 = fma(_562, cbSceneParam._m0[7u].z, fma(_561, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _560));
    uint _689 = (_239 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _695 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0)))) * cbInstanceData._m0[_689].x;
    float _696 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0)))) * cbInstanceData._m0[_689].y;
    float _697 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0)))) * cbInstanceData._m0[_689].z;
    float _3846 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
    float _698 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
    float _3857 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
    float _699 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
    float _3868 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _700 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
    float _701 = 1.0 - _568;
    float _702 = _698 * _701;
    float _703 = _699 * _701;
    float _704 = _700 * _701;
    float _709 = (_698 + (-0.039999999105930328369140625)) * _568;
    float _710 = (_699 + (-0.039999999105930328369140625)) * _568;
    float _711 = (_700 + (-0.039999999105930328369140625)) * _568;
    float _712 = _709 + 0.039999999105930328369140625;
    float _714 = _710 + 0.039999999105930328369140625;
    float _715 = _711 + 0.039999999105930328369140625;
    vec4 _724 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _647, cbSceneParam._m0[86u].y * _648));
    float _728 = ((isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0))) * TEXCOORD_5.w) * _724.x;
    float _729 = dot(vec3(_560, _561, _562), vec3(_639, _640, _641));
    float _732 = _729 * 2.0;
    float _736 = (_732 * _560) - _639;
    float _737 = (_732 * _561) - _640;
    float _738 = (_732 * _562) - _641;
    float _742 = abs(dot(vec3(_639, _640, _641), vec3(_560, _561, _562)));
    float _3879 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _744 = sqrt(_563);
    float _757 = exp2((_744 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_744 * 3.0));
    float _763 = (1.0 - _757) * ((_744 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _764 = _757 * _744;
    float _792 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _796 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _800 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1101;
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    float _1107;
    float _1108;
    float _1109;
    float _1110;
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _826 = fma(_800, cbModelParam._m0[26u].z, fma(_796, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _792));
        float _830 = fma(_800, cbModelParam._m0[27u].z, fma(_796, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _792));
        float _834 = fma(_800, cbModelParam._m0[28u].z, fma(_796, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _792));
        float _859 = _792 + _560;
        float _860 = _796 + _561;
        float _861 = _800 + _562;
        float _871 = fma(_861, cbModelParam._m0[26u].z, fma(_860, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _859)) - _826;
        float _872 = fma(_861, cbModelParam._m0[27u].z, fma(_860, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _859)) - _830;
        float _873 = fma(_861, cbModelParam._m0[28u].z, fma(_860, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _859)) - _834;
        float _877 = inversesqrt(dot(vec3(_871, _872, _873), vec3(_871, _872, _873)));
        float _890 = ((_877 * _871) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_826 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _891 = ((_877 * _872) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_830 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _892 = ((_877 * _873) / cbModelParam._m0[34u].z) + ((((((_834 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _895 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_890, _891, _892), 0.0);
        vec4 _902 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_890, _891, _892), 0.0);
        vec4 _909 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_890, _891, _892), 0.0);
        vec4 _916 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_890, _891, _892), 0.0);
        float _929 = exp2((_895.w + (-0.5)) * 20.0) * 2.0;
        float _930 = _929 * (_895.x + (-0.5));
        float _931 = _929 * (_895.y + (-0.5));
        float _932 = _929 * (_895.z + (-0.5));
        float _939 = exp2((_902.w + (-0.5)) * 20.0) * 2.0;
        float _940 = _939 * (_902.x + (-0.5));
        float _941 = _939 * (_902.y + (-0.5));
        float _942 = _939 * (_902.z + (-0.5));
        float _949 = exp2((_909.w + (-0.5)) * 20.0) * 2.0;
        float _950 = _949 * (_909.x + (-0.5));
        float _951 = _949 * (_909.y + (-0.5));
        float _952 = _949 * (_909.z + (-0.5));
        float _959 = exp2((_916.w + (-0.5)) * 20.0) * 2.0;
        float _960 = _959 * (_916.x + (-0.5));
        float _961 = _959 * (_916.y + (-0.5));
        float _962 = _959 * (_916.z + (-0.5));
        float _963 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
        float _964 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
        float _965 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
        float _966 = _930 * 0.5;
        float _967 = _940 * 0.5;
        float _968 = _950 * 0.5;
        float _969 = dot(vec3(_966, _967, _968), vec3(_966, _967, _968));
        float _974 = (_969 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_969);
        float _983 = (dot(vec3(_560, _561, _562), vec3(_974 * _966, _974 * _967, _974 * _968)) + 1.0) * 0.5;
        float _3905 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _993 = sqrt(((_967 * _967) + (_966 * _966)) + (_968 * _968)) / (_963 + 9.9999997473787516355514526367188e-06);
        float _3916 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _994 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
        float _995 = _994 * 2.0;
        float _999 = (1.0 - _994) / (_994 + 1.0);
        float _3927 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1000 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
        float _1009 = ((((1.0 - _1000) * (_995 + 2.0)) * exp2(log2(isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0))) * (_995 + 1.0))) + _1000) * _963;
        float _1010 = _931 * 0.5;
        float _1011 = _941 * 0.5;
        float _1012 = _951 * 0.5;
        float _1013 = dot(vec3(_1010, _1011, _1012), vec3(_1010, _1011, _1012));
        float _1018 = (_1013 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1013);
        float _1026 = (dot(vec3(_560, _561, _562), vec3(_1018 * _1010, _1018 * _1011, _1018 * _1012)) + 1.0) * 0.5;
        float _3938 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1035 = sqrt(((_1011 * _1011) + (_1010 * _1010)) + (_1012 * _1012)) / (_964 + 9.9999997473787516355514526367188e-06);
        float _3949 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1036 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
        float _1037 = _1036 * 2.0;
        float _1041 = (1.0 - _1036) / (_1036 + 1.0);
        float _3960 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1042 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
        float _1051 = ((((1.0 - _1042) * (_1037 + 2.0)) * exp2(log2(isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0))) * (_1037 + 1.0))) + _1042) * _964;
        float _1052 = _932 * 0.5;
        float _1053 = _942 * 0.5;
        float _1054 = _952 * 0.5;
        float _1055 = dot(vec3(_1052, _1053, _1054), vec3(_1052, _1053, _1054));
        float _1060 = (_1055 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1055);
        float _1068 = (dot(vec3(_560, _561, _562), vec3(_1060 * _1052, _1060 * _1053, _1060 * _1054)) + 1.0) * 0.5;
        float _3971 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1077 = sqrt(((_1053 * _1053) + (_1052 * _1052)) + (_1054 * _1054)) / (_965 + 9.9999997473787516355514526367188e-06);
        float _3982 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1078 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
        float _1079 = _1078 * 2.0;
        float _1083 = (1.0 - _1078) / (_1078 + 1.0);
        float _3993 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1084 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
        float _1093 = ((((1.0 - _1084) * (_1079 + 2.0)) * exp2(log2(isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0))) * (_1079 + 1.0))) + _1084) * _965;
        _1101 = _932;
        _1103 = _931;
        _1104 = _930;
        _1105 = _942;
        _1106 = _941;
        _1107 = _940;
        _1108 = _952;
        _1109 = _951;
        _1110 = _950;
        _1111 = _965;
        _1112 = _964;
        _1113 = _963;
        _1114 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0)));
        _1115 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0)));
        _1116 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0)));
    }
    else
    {
        _1101 = _1102;
        _1103 = _1102;
        _1104 = _1102;
        _1105 = _1102;
        _1106 = _1102;
        _1107 = _1102;
        _1108 = _1102;
        _1109 = _1102;
        _1110 = _1102;
        _1111 = _1102;
        _1112 = _1102;
        _1113 = _1102;
        _1114 = 0.0;
        _1115 = 0.0;
        _1116 = 0.0;
    }
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1141 = fma(_800, cbModelParam._m0[30u].z, fma(_796, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _792));
        float _1145 = fma(_800, cbModelParam._m0[31u].z, fma(_796, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _792));
        float _1149 = fma(_800, cbModelParam._m0[32u].z, fma(_796, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _792));
        float _1172 = _792 + _560;
        float _1173 = _796 + _561;
        float _1174 = _800 + _562;
        float _1184 = fma(_1174, cbModelParam._m0[30u].z, fma(_1173, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1172)) - _1141;
        float _1185 = fma(_1174, cbModelParam._m0[31u].z, fma(_1173, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1172)) - _1145;
        float _1186 = fma(_1174, cbModelParam._m0[32u].z, fma(_1173, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1172)) - _1149;
        float _1190 = inversesqrt(dot(vec3(_1184, _1185, _1186), vec3(_1184, _1185, _1186)));
        float _1203 = ((_1190 * _1184) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1141 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1204 = ((_1190 * _1185) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1145 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1205 = ((_1190 * _1186) / cbModelParam._m0[35u].z) + ((((((_1149 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1207 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1203, _1204, _1205), 0.0);
        vec4 _1214 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1203, _1204, _1205), 0.0);
        vec4 _1221 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1203, _1204, _1205), 0.0);
        vec4 _1228 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1203, _1204, _1205), 0.0);
        float _1240 = exp2((_1207.w + (-0.5)) * 20.0) * 2.0;
        float _1241 = _1240 * (_1207.x + (-0.5));
        float _1242 = _1240 * (_1207.y + (-0.5));
        float _1243 = _1240 * (_1207.z + (-0.5));
        float _1250 = exp2((_1214.w + (-0.5)) * 20.0) * 2.0;
        float _1251 = _1250 * (_1214.x + (-0.5));
        float _1252 = _1250 * (_1214.y + (-0.5));
        float _1253 = _1250 * (_1214.z + (-0.5));
        float _1260 = exp2((_1221.w + (-0.5)) * 20.0) * 2.0;
        float _1261 = _1260 * (_1221.x + (-0.5));
        float _1262 = _1260 * (_1221.y + (-0.5));
        float _1263 = _1260 * (_1221.z + (-0.5));
        float _1270 = exp2((_1228.w + (-0.5)) * 20.0) * 2.0;
        float _1271 = _1270 * (_1228.x + (-0.5));
        float _1272 = _1270 * (_1228.y + (-0.5));
        float _1273 = _1270 * (_1228.z + (-0.5));
        float _1274 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1275 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1276 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1277 = _1241 * 0.5;
        float _1278 = _1251 * 0.5;
        float _1279 = _1261 * 0.5;
        float _1280 = dot(vec3(_1277, _1278, _1279), vec3(_1277, _1278, _1279));
        float _1285 = (_1280 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1280);
        float _1293 = (dot(vec3(_560, _561, _562), vec3(_1285 * _1277, _1285 * _1278, _1285 * _1279)) + 1.0) * 0.5;
        float _4034 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1302 = sqrt(((_1278 * _1278) + (_1277 * _1277)) + (_1279 * _1279)) / (_1274 + 9.9999997473787516355514526367188e-06);
        float _4045 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1303 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
        float _1304 = _1303 * 2.0;
        float _1308 = (1.0 - _1303) / (_1303 + 1.0);
        float _4056 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1309 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
        float _1318 = ((((1.0 - _1309) * (_1304 + 2.0)) * exp2(log2(isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0))) * (_1304 + 1.0))) + _1309) * _1274;
        float _1319 = _1242 * 0.5;
        float _1320 = _1252 * 0.5;
        float _1321 = _1262 * 0.5;
        float _1322 = dot(vec3(_1319, _1320, _1321), vec3(_1319, _1320, _1321));
        float _1327 = (_1322 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1322);
        float _1335 = (dot(vec3(_560, _561, _562), vec3(_1327 * _1319, _1327 * _1320, _1327 * _1321)) + 1.0) * 0.5;
        float _4067 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1344 = sqrt(((_1320 * _1320) + (_1319 * _1319)) + (_1321 * _1321)) / (_1275 + 9.9999997473787516355514526367188e-06);
        float _4078 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1345 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
        float _1346 = _1345 * 2.0;
        float _1350 = (1.0 - _1345) / (_1345 + 1.0);
        float _4089 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1351 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
        float _1360 = ((((1.0 - _1351) * (_1346 + 2.0)) * exp2(log2(isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0))) * (_1346 + 1.0))) + _1351) * _1275;
        float _1361 = _1243 * 0.5;
        float _1362 = _1253 * 0.5;
        float _1363 = _1263 * 0.5;
        float _1364 = dot(vec3(_1361, _1362, _1363), vec3(_1361, _1362, _1363));
        float _1369 = (_1364 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1364);
        float _1377 = (dot(vec3(_560, _561, _562), vec3(_1369 * _1361, _1369 * _1362, _1369 * _1363)) + 1.0) * 0.5;
        float _4100 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1386 = sqrt(((_1362 * _1362) + (_1361 * _1361)) + (_1363 * _1363)) / (_1276 + 9.9999997473787516355514526367188e-06);
        float _4111 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1387 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
        float _1388 = _1387 * 2.0;
        float _1392 = (1.0 - _1387) / (_1387 + 1.0);
        float _4122 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1393 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
        float _1402 = ((((1.0 - _1393) * (_1388 + 2.0)) * exp2(log2(isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0))) * (_1388 + 1.0))) + _1393) * _1276;
        _1410 = _1243;
        _1411 = _1242;
        _1412 = _1241;
        _1413 = _1253;
        _1414 = _1252;
        _1415 = _1251;
        _1416 = _1263;
        _1417 = _1262;
        _1418 = _1261;
        _1419 = _1276;
        _1420 = _1275;
        _1421 = _1274;
        _1422 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0)));
        _1423 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0)));
        _1424 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0)));
    }
    else
    {
        _1410 = _1102;
        _1411 = _1102;
        _1412 = _1102;
        _1413 = _1102;
        _1414 = _1102;
        _1415 = _1102;
        _1416 = _1102;
        _1417 = _1102;
        _1418 = _1102;
        _1419 = _1102;
        _1420 = _1102;
        _1421 = _1102;
        _1422 = 0.0;
        _1423 = 0.0;
        _1424 = 0.0;
    }
    float _1434 = (cbModelParam._m0[1u].x * (_1422 - _1114)) + _1114;
    float _1435 = (cbModelParam._m0[1u].x * (_1423 - _1115)) + _1115;
    float _1436 = (cbModelParam._m0[1u].x * (_1424 - _1116)) + _1116;
    float _1457 = fma(_1436, cbSceneParam._m0[89u].z, fma(_1435, cbSceneParam._m0[89u].y, _1434 * cbSceneParam._m0[89u].x));
    float _1460 = fma(_1436, cbSceneParam._m0[90u].z, fma(_1435, cbSceneParam._m0[90u].y, _1434 * cbSceneParam._m0[90u].x));
    float _1463 = fma(_1436, cbSceneParam._m0[91u].z, fma(_1435, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1434));
    float _1478 = _736 * 0.5;
    float _1479 = _737 * 0.5;
    float _1480 = _738 * 0.5;
    float _1481 = dot(vec4(_1478, _1479, _1480, 1.0), vec4(_1412, _1415, _1418, _1421));
    float _1484 = dot(vec4(_1478, _1479, _1480, 1.0), vec4(_1411, _1414, _1417, _1420));
    float _1487 = dot(vec4(_1478, _1479, _1480, 1.0), vec4(_1410, _1413, _1416, _1419));
    float _1521;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1494 = dot(vec4(_1478, _1479, _1480, 1.0), vec4(_1101, _1105, _1108, _1111));
        float _1498 = dot(vec4(_1478, _1479, _1480, 1.0), vec4(_1103, _1106, _1109, _1112));
        float _1502 = dot(vec4(_1478, _1479, _1480, 1.0), vec4(_1104, _1107, _1110, _1113));
        float _1509 = dot(vec4(cbModelParam._m0[39u]), vec4(_1478, _1479, _1480, 1.0));
        _1521 = dot(vec3(isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0)), isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0)), isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1509) ? 0.0 : (isnan(0.0) ? _1509 : max(0.0, _1509))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1521 = 1.0;
    }
    float _1532;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1523 = dot(vec4(cbModelParam._m0[40u]), vec4(_1478, _1479, _1480, 1.0));
        _1532 = dot(vec3(isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0)), isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0)), isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1523) ? 0.0 : (isnan(0.0) ? _1523 : max(0.0, _1523))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1532 = 1.0;
    }
    float _1536 = (_1532 * cbModelParam._m0[1u].x) + (_1521 * (1.0 - cbModelParam._m0[1u].x));
    float _1546 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _563);
    float _1547 = isnan(_1546) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1546 : min(cbModelParam._m0[25u].z, _1546));
    float _1628;
    float _1630;
    float _1632;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1595 = fma(_800, cbModelParam._m0[13u].z, fma(_796, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _792)) + cbModelParam._m0[13u].w;
        float _1599 = fma(_800, cbModelParam._m0[14u].z, fma(_796, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _792)) + cbModelParam._m0[14u].w;
        float _1603 = fma(_800, cbModelParam._m0[15u].z, fma(_796, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _792)) + cbModelParam._m0[15u].w;
        float _1606 = fma(_738, cbModelParam._m0[13u].z, fma(_737, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _736));
        float _1609 = fma(_738, cbModelParam._m0[14u].z, fma(_737, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _736));
        float _1612 = fma(_738, cbModelParam._m0[15u].z, fma(_737, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _736));
        float _1640;
        if (_1606 > 0.0)
        {
            _1640 = abs((1.0 - _1595) / _1606);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1606 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1595 + 1.0) / _1606);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1640 = frontier_phi_14_12_ladder;
        }
        float _1812;
        if (_1609 > 0.0)
        {
            _1812 = abs((1.0 - _1599) / _1609);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1609 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1599 + 1.0) / _1609);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1812 = frontier_phi_23_19_ladder;
        }
        float _2108;
        if (_1612 > 0.0)
        {
            _2108 = abs((1.0 - _1603) / _1612);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1612 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1603 + 1.0) / _1612);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2108 = frontier_phi_35_30_ladder;
        }
        float _2110 = isnan(_1812) ? _1640 : (isnan(_1640) ? _1812 : min(_1640, _1812));
        float _2111 = isnan(_2108) ? _2110 : (isnan(_2110) ? _2108 : min(_2110, _2108));
        float _2115 = (_2111 * _1606) + _1595;
        float _2116 = (_2111 * _1609) + _1599;
        float _2117 = (_2111 * _1612) + _1603;
        float _2118 = _2111 * 9.9999997473787516355514526367188e-05;
        float _2120 = (-1.0) - _2118;
        float _2122 = _2118 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2117 > _2122) || ((_2117 < _2120) || ((_2116 > _2122) || ((_2116 < _2120) || ((_2115 < _2120) || (_2115 > _2122))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2262 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2117, cbModelParam._m0[9u].z, fma(_2116, cbModelParam._m0[9u].y, _2115 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2117, cbModelParam._m0[10u].z, fma(_2116, cbModelParam._m0[10u].y, _2115 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2117, cbModelParam._m0[11u].z, fma(_2116, cbModelParam._m0[11u].y, _2115 * cbModelParam._m0[11u].x))), _1547);
            frontier_phi_13_35_ladder = _2262.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2262.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2262.x * cbModelParam._m0[1u].y;
        }
        _1628 = frontier_phi_13_35_ladder_2;
        _1630 = frontier_phi_13_35_ladder_1;
        _1632 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1616 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_736, _737, _738), _1547);
        _1628 = _1616.x * cbModelParam._m0[1u].y;
        _1630 = _1616.y * cbModelParam._m0[1u].y;
        _1632 = _1616.z * cbModelParam._m0[1u].y;
    }
    float _1636 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _563);
    float _1637 = isnan(_1636) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1636 : min(cbModelParam._m0[25u].w, _1636));
    float _1727;
    float _1729;
    float _1731;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1691 = fma(_800, cbModelParam._m0[21u].z, fma(_796, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _792)) + cbModelParam._m0[21u].w;
        float _1695 = fma(_800, cbModelParam._m0[22u].z, fma(_796, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _792)) + cbModelParam._m0[22u].w;
        float _1699 = fma(_800, cbModelParam._m0[23u].z, fma(_796, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _792)) + cbModelParam._m0[23u].w;
        float _1702 = fma(_738, cbModelParam._m0[21u].z, fma(_737, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _736));
        float _1705 = fma(_738, cbModelParam._m0[22u].z, fma(_737, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _736));
        float _1708 = fma(_738, cbModelParam._m0[23u].z, fma(_737, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _736));
        float _1817;
        if (_1702 > 0.0)
        {
            _1817 = abs((1.0 - _1691) / _1702);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1702 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1691 + 1.0) / _1702);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1817 = frontier_phi_25_21_ladder;
        }
        float _2135;
        if (_1705 > 0.0)
        {
            _2135 = abs((1.0 - _1695) / _1705);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1705 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1695 + 1.0) / _1705);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2135 = frontier_phi_37_32_ladder;
        }
        float _2473;
        if (_1708 > 0.0)
        {
            _2473 = abs((1.0 - _1699) / _1708);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1708 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1699 + 1.0) / _1708);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2473 = frontier_phi_47_44_ladder;
        }
        float _2475 = isnan(_2135) ? _1817 : (isnan(_1817) ? _2135 : min(_1817, _2135));
        float _2476 = isnan(_2473) ? _2475 : (isnan(_2475) ? _2473 : min(_2475, _2473));
        float _2480 = (_2476 * _1702) + _1691;
        float _2481 = (_2476 * _1705) + _1695;
        float _2482 = (_2476 * _1708) + _1699;
        float _2483 = _2476 * 9.9999997473787516355514526367188e-05;
        float _2484 = (-1.0) - _2483;
        float _2486 = _2483 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2482 > _2486) || ((_2482 < _2484) || ((_2481 > _2486) || ((_2481 < _2484) || ((_2480 < _2484) || (_2480 > _2486))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2604 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2482, cbModelParam._m0[17u].z, fma(_2481, cbModelParam._m0[17u].y, _2480 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2482, cbModelParam._m0[18u].z, fma(_2481, cbModelParam._m0[18u].y, _2480 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2482, cbModelParam._m0[19u].z, fma(_2481, cbModelParam._m0[19u].y, _2480 * cbModelParam._m0[19u].x))), _1637);
            frontier_phi_22_47_ladder = _2604.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2604.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2604.x * cbModelParam._m0[1u].z;
        }
        _1727 = frontier_phi_22_47_ladder_2;
        _1729 = frontier_phi_22_47_ladder_1;
        _1731 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1711 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_736, _737, _738), _1637);
        _1727 = _1711.x * cbModelParam._m0[1u].z;
        _1729 = _1711.y * cbModelParam._m0[1u].z;
        _1731 = _1711.z * cbModelParam._m0[1u].z;
    }
    float _1744 = (((_763 * _712) + _764) * _728) * ((cbModelParam._m0[1u].w * (_1727 - _1628)) + _1628);
    float _1746 = (((_763 * _714) + _764) * _728) * ((cbModelParam._m0[1u].w * (_1729 - _1630)) + _1630);
    float _1748 = (((_763 * _715) + _764) * _728) * ((cbModelParam._m0[1u].w * (_1731 - _1632)) + _1632);
    float _1751 = fma(_1748, cbSceneParam._m0[89u].z, fma(_1746, cbSceneParam._m0[89u].y, _1744 * cbSceneParam._m0[89u].x));
    float _1754 = fma(_1748, cbSceneParam._m0[90u].z, fma(_1746, cbSceneParam._m0[90u].y, _1744 * cbSceneParam._m0[90u].x));
    float _1757 = fma(_1748, cbSceneParam._m0[91u].z, fma(_1746, cbSceneParam._m0[91u].y, _1744 * cbSceneParam._m0[91u].x));
    float _1791 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1795 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1799 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1803 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1804 = _1791 / _1803;
    float _1805 = _1795 / _1803;
    float _1806 = _1799 / _1803;
    float _1953;
    float _1954;
    float _1955;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1833 = ((uint(_1806 > cbSceneParam._m0[59u].y) + uint(_1806 > cbSceneParam._m0[59u].x)) + uint(_1806 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1834 = _1833 + 43u;
        uint _1842 = _1833 + 44u;
        uint _1850 = _1833 + 45u;
        uint _1858 = _1833 + 46u;
        float _1869 = fma(_1803, cbSceneParam._m0[_1834].w, fma(_1799, cbSceneParam._m0[_1834].z, fma(_1795, cbSceneParam._m0[_1834].y, _1791 * cbSceneParam._m0[_1834].x)));
        float _1873 = fma(_1803, cbSceneParam._m0[_1842].w, fma(_1799, cbSceneParam._m0[_1842].z, fma(_1795, cbSceneParam._m0[_1842].y, _1791 * cbSceneParam._m0[_1842].x)));
        float _1881 = fma(_1803, cbSceneParam._m0[_1858].w, fma(_1799, cbSceneParam._m0[_1858].z, fma(_1795, cbSceneParam._m0[_1858].y, _1791 * cbSceneParam._m0[_1858].x)));
        float _1886 = cbSceneParam._m0[33u].z * _1881;
        float _1888 = cbSceneParam._m0[33u].w * _1881;
        float _1891 = fma(_1803, cbSceneParam._m0[_1850].w, fma(_1799, cbSceneParam._m0[_1850].z, fma(_1795, cbSceneParam._m0[_1850].y, _1791 * cbSceneParam._m0[_1850].x))) / _1881;
        float _1939 = (cbSceneParam._m0[33u].x - sqrt(((_1805 * _1805) + (_1804 * _1804)) + (_1806 * _1806))) * cbSceneParam._m0[33u].y;
        float _4248 = isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0));
        float _1946 = (isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1886 + _1869) / _1881, (_1888 + _1873) / _1881), _1891), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1888 + _1869) / _1881, (_1873 - _1886) / _1881), _1891), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1869 - _1886) / _1881, (_1873 - _1888) / _1881), _1891), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1869 - _1888) / _1881, (_1886 + _1873) / _1881), _1891), 0.0)).x), vec4(0.25)));
        _1953 = 1.0 - (_1946 * cbSceneParam._m0[34u].x);
        _1954 = 1.0 - (_1946 * cbSceneParam._m0[34u].y);
        _1955 = 1.0 - (_1946 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1953 = 1.0;
        _1954 = 1.0;
        _1955 = 1.0;
    }
    float _2019;
    float _2021;
    float _2023;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2007 = fma(_1803, cbSceneParam._m0[63u].w, fma(_1799, cbSceneParam._m0[63u].z, fma(_1795, cbSceneParam._m0[63u].y, _1791 * cbSceneParam._m0[63u].x)));
        float _2008 = fma(_1803, cbSceneParam._m0[60u].w, fma(_1799, cbSceneParam._m0[60u].z, fma(_1795, cbSceneParam._m0[60u].y, _1791 * cbSceneParam._m0[60u].x))) / _2007;
        float _2009 = fma(_1803, cbSceneParam._m0[61u].w, fma(_1799, cbSceneParam._m0[61u].z, fma(_1795, cbSceneParam._m0[61u].y, _1791 * cbSceneParam._m0[61u].x))) / _2007;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2008 >= cbSceneParam._m0[64u].x) && (_2009 >= cbSceneParam._m0[64u].y)) && (_2008 <= cbSceneParam._m0[64u].z)) && (_2009 <= cbSceneParam._m0[64u].w))
        {
            float _2148 = fma(_1803, cbSceneParam._m0[62u].w, fma(_1799, cbSceneParam._m0[62u].z, fma(_1795, cbSceneParam._m0[62u].y, _1791 * cbSceneParam._m0[62u].x))) / _2007;
            float _2152 = isnan(cbSceneParam._m0[41u].w) ? _2148 : (isnan(_2148) ? cbSceneParam._m0[41u].w : max(_2148, cbSceneParam._m0[41u].w));
            float _2195 = (cbSceneParam._m0[33u].x - sqrt(((_1805 * _1805) + (_1804 * _1804)) + (_1806 * _1806))) * cbSceneParam._m0[33u].y;
            float _4264 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
            float _2202 = (isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2008, cbSceneParam._m0[33u].w + _2009), _2152), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2008, _2009 - cbSceneParam._m0[33u].z), _2152), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2008 - cbSceneParam._m0[33u].z, _2009 - cbSceneParam._m0[33u].w), _2152), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2008 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2009), _2152), 0.0)).x), vec4(0.25)));
            float _2206 = 1.0 - (_2202 * cbSceneParam._m0[34u].x);
            float _2207 = 1.0 - (_2202 * cbSceneParam._m0[34u].y);
            float _2208 = 1.0 - (_2202 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2208) ? _1955 : (isnan(_1955) ? _2208 : min(_1955, _2208));
            frontier_phi_34_33_ladder_1 = isnan(_2207) ? _1954 : (isnan(_1954) ? _2207 : min(_1954, _2207));
            frontier_phi_34_33_ladder_2 = isnan(_2206) ? _1953 : (isnan(_1953) ? _2206 : min(_1953, _2206));
        }
        else
        {
            frontier_phi_34_33_ladder = _1955;
            frontier_phi_34_33_ladder_1 = _1954;
            frontier_phi_34_33_ladder_2 = _1953;
        }
        _2019 = frontier_phi_34_33_ladder_2;
        _2021 = frontier_phi_34_33_ladder_1;
        _2023 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2019 = _1953;
        _2021 = _1954;
        _2023 = _1955;
    }
    uvec4 _2028 = floatBitsToUint(cbInstanceData._m0[_239 + 5u]);
    uint _2030 = _2028.x * 14u;
    uint _2031 = _2030 + 13u;
    float _2038 = _728 + (-1.0);
    float _2043 = (cbLight._m0[_2031].x * _2038) + 1.0;
    float _2044 = (cbLight._m0[_2031].y * _2038) + 1.0;
    float _2045 = (cbLight._m0[_2031].z * _2038) + 1.0;
    float _2046 = (cbLight._m0[_2031].w * _2038) + 1.0;
    uint _2047 = _2030 + 5u;
    float _2053 = isnan(1.0) ? _2044 : (isnan(_2044) ? 1.0 : min(_2044, 1.0));
    uint _2057 = _2030 + 4u;
    float _2067 = isnan(1.0) ? _2043 : (isnan(_2043) ? 1.0 : min(_2043, 1.0));
    uint _2071 = _2030 | 1u;
    float _2082 = dot(vec3(cbLight._m0[_2030].xyz), vec3(_560, _561, _562));
    float _2085 = dot(vec3(cbLight._m0[_2071].xyz), vec3(_560, _561, _562));
    float _4300 = isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0));
    float _4311 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
    float _2090 = (isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0))) * 0.3183098733425140380859375;
    float _2092 = (isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0))) * 0.3183098733425140380859375;
    float _2099 = ((cbLight._m0[_2047].x * _2053) * _2092) + (((cbLight._m0[_2057].x * _2019) * _2067) * _2090);
    float _2100 = ((_2053 * cbLight._m0[_2047].y) * _2092) + (((cbLight._m0[_2057].y * _2021) * _2067) * _2090);
    float _2101 = ((_2053 * cbLight._m0[_2047].z) * _2092) + (((cbLight._m0[_2057].z * _2023) * _2067) * _2090);
    uvec4 _2105 = floatBitsToUint(cbLight._m0[_2030 + 12u]);
    bool _2107 = _2105.x == 0u;
    float _2209;
    float _2211;
    float _2213;
    if (_2107)
    {
        _2209 = _2099;
        _2211 = _2100;
        _2213 = _2101;
    }
    else
    {
        uint _2217 = _2030 + 6u;
        float _2233 = (dot(vec3(cbLight._m0[_2030 + 2u].xyz), vec3(_560, _561, _562)) * 0.5) + 0.5;
        float _2234 = _2233 * _2233;
        float _4322 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
        float _2235 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
        float _2236 = isnan(1.0) ? _2045 : (isnan(_2045) ? 1.0 : min(_2045, 1.0));
        _2209 = (((cbLight._m0[_2217].x * 0.3183098733425140380859375) * _2235) * _2236) + _2099;
        _2211 = (((cbLight._m0[_2217].y * 0.3183098733425140380859375) * _2235) * _2236) + _2100;
        _2213 = (((cbLight._m0[_2217].z * 0.3183098733425140380859375) * _2235) * _2236) + _2101;
    }
    bool _2216 = _2105.y == 0u;
    float _2271;
    float _2273;
    float _2275;
    if (_2216)
    {
        _2271 = _2209;
        _2273 = _2211;
        _2275 = _2213;
    }
    else
    {
        uint _2444 = _2030 + 7u;
        float _2460 = (dot(vec3(cbLight._m0[_2030 + 3u].xyz), vec3(_560, _561, _562)) * 0.5) + 0.5;
        float _2461 = _2460 * _2460;
        float _4338 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
        float _2462 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
        float _2463 = isnan(1.0) ? _2046 : (isnan(_2046) ? 1.0 : min(_2046, 1.0));
        _2271 = (((cbLight._m0[_2444].x * 0.3183098733425140380859375) * _2462) * _2463) + _2209;
        _2273 = (((cbLight._m0[_2444].y * 0.3183098733425140380859375) * _2462) * _2463) + _2211;
        _2275 = (((cbLight._m0[_2444].z * 0.3183098733425140380859375) * _2462) * _2463) + _2213;
    }
    uint _2278 = _2030 + 8u;
    float _2291 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2030].w)) * _563) * 0.949999988079071044921875);
    float _2292 = _2291 * _2291;
    float _2293 = cbLight._m0[_2030].x + _639;
    float _2294 = cbLight._m0[_2030].y + _640;
    float _2295 = cbLight._m0[_2030].z + _641;
    float _2299 = inversesqrt(dot(vec3(_2293, _2294, _2295), vec3(_2293, _2294, _2295)));
    float _2300 = _2299 * _2293;
    float _2301 = _2299 * _2294;
    float _2302 = _2299 * _2295;
    float _2303 = dot(vec3(_560, _561, _562), vec3(cbLight._m0[_2030].xyz));
    float _4354 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
    float _2306 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
    float _4365 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _2307 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
    float _2308 = dot(vec3(_560, _561, _562), vec3(_2300, _2301, _2302));
    float _4376 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
    float _2311 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
    float _2312 = dot(vec3(cbLight._m0[_2030].xyz), vec3(_2300, _2301, _2302));
    float _4387 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
    float _2316 = _2292 * _2292;
    float _2320 = ((_2311 * _2311) * (_2316 + (-1.0))) + 1.0;
    float _2328 = exp2(log2(1.0 - (isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0)))) * 5.0);
    float _2329 = 0.959999978542327880859375 - _709;
    float _2331 = 0.959999978542327880859375 - _710;
    float _2332 = 0.959999978542327880859375 - _711;
    float _2339 = 1.0 - _2292;
    float _2350 = (0.5 / (((_2307 * ((_2306 * _2339) + _2292)) + 9.9999999392252902907785028219223e-09) + (((_2307 * _2339) + _2292) * _2306))) * _2306;
    float _4398 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
    float _2352 = (isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0))) * (_2316 / ((_2320 * _2320) * 3.141590118408203125));
    uint _2366 = _2030 + 9u;
    float _2377 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2071].w)) * _563) * 0.949999988079071044921875);
    float _2378 = _2377 * _2377;
    float _2379 = cbLight._m0[_2071].x + _639;
    float _2380 = cbLight._m0[_2071].y + _640;
    float _2381 = cbLight._m0[_2071].z + _641;
    float _2385 = inversesqrt(dot(vec3(_2379, _2380, _2381), vec3(_2379, _2380, _2381)));
    float _2386 = _2385 * _2379;
    float _2387 = _2385 * _2380;
    float _2388 = _2385 * _2381;
    float _2389 = dot(vec3(_560, _561, _562), vec3(cbLight._m0[_2071].xyz));
    float _4409 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
    float _2392 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
    float _2393 = dot(vec3(_560, _561, _562), vec3(_2386, _2387, _2388));
    float _4420 = isnan(0.0) ? _2393 : (isnan(_2393) ? 0.0 : max(_2393, 0.0));
    float _2396 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
    float _2397 = dot(vec3(cbLight._m0[_2071].xyz), vec3(_2386, _2387, _2388));
    float _4431 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
    float _2401 = _2378 * _2378;
    float _2405 = ((_2396 * _2396) * (_2401 + (-1.0))) + 1.0;
    float _2412 = exp2(log2(1.0 - (isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0)))) * 5.0);
    float _2419 = 1.0 - _2378;
    float _2429 = (0.5 / (((_2307 * ((_2392 * _2419) + _2378)) + 9.9999999392252902907785028219223e-09) + (((_2307 * _2419) + _2378) * _2392))) * _2392;
    float _4442 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
    float _2431 = (isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0))) * (_2401 / ((_2405 * _2405) * 3.141590118408203125));
    float _2441 = (((((_2412 * _2329) + _712) * cbLight._m0[_2366].x) * _2431) * _2053) + ((((cbLight._m0[_2278].x * _2019) * ((_2328 * _2329) + _712)) * _2352) * _2067);
    float _2442 = (((((_2412 * _2331) + _714) * cbLight._m0[_2366].y) * _2431) * _2053) + ((((cbLight._m0[_2278].y * _2021) * ((_2328 * _2331) + _714)) * _2352) * _2067);
    float _2443 = (((((_2412 * _2332) + _715) * cbLight._m0[_2366].z) * _2431) * _2053) + ((((cbLight._m0[_2278].z * _2023) * ((_2328 * _2332) + _715)) * _2352) * _2067);
    float _2499;
    float _2501;
    float _2503;
    if (_2107)
    {
        _2499 = _2441;
        _2501 = _2442;
        _2503 = _2443;
    }
    else
    {
        uint _2505 = _2030 + 2u;
        uint _2509 = _2030 + 10u;
        float _2523 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2505].w)) * _563) * 0.949999988079071044921875);
        float _2524 = _2523 * _2523;
        float _2525 = cbLight._m0[_2505].x + _639;
        float _2526 = cbLight._m0[_2505].y + _640;
        float _2527 = cbLight._m0[_2505].z + _641;
        float _2531 = inversesqrt(dot(vec3(_2525, _2526, _2527), vec3(_2525, _2526, _2527)));
        float _2532 = _2531 * _2525;
        float _2533 = _2531 * _2526;
        float _2534 = _2531 * _2527;
        float _2535 = dot(vec3(_560, _561, _562), vec3(cbLight._m0[_2505].xyz));
        float _4453 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0));
        float _2538 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
        float _2539 = dot(vec3(_560, _561, _562), vec3(_2532, _2533, _2534));
        float _4464 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0));
        float _2542 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
        float _2543 = dot(vec3(cbLight._m0[_2505].xyz), vec3(_2532, _2533, _2534));
        float _4475 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0));
        float _2547 = _2524 * _2524;
        float _2551 = ((_2542 * _2542) * (_2547 + (-1.0))) + 1.0;
        float _2558 = exp2(log2(1.0 - (isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0)))) * 5.0);
        float _2565 = 1.0 - _2524;
        float _2575 = (0.5 / (((_2307 * ((_2538 * _2565) + _2524)) + 9.9999999392252902907785028219223e-09) + (((_2307 * _2565) + _2524) * _2538))) * _2538;
        float _4486 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0));
        float _2577 = (isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0))) * (_2547 / ((_2551 * _2551) * 3.141590118408203125));
        float _2578 = isnan(1.0) ? _2045 : (isnan(_2045) ? 1.0 : min(_2045, 1.0));
        _2499 = (((((_2558 * _2329) + _712) * cbLight._m0[_2509].x) * _2577) * _2578) + _2441;
        _2501 = (((((_2558 * _2331) + _714) * cbLight._m0[_2509].y) * _2577) * _2578) + _2442;
        _2503 = (((((_2558 * _2332) + _715) * cbLight._m0[_2509].z) * _2577) * _2578) + _2443;
    }
    float _2609;
    float _2611;
    float _2613;
    if (_2216)
    {
        _2609 = _2499;
        _2611 = _2501;
        _2613 = _2503;
    }
    else
    {
        uint _2620 = _2030 + 3u;
        uint _2624 = _2030 + 11u;
        float _2638 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2620].w)) * _563) * 0.949999988079071044921875);
        float _2639 = _2638 * _2638;
        float _2640 = cbLight._m0[_2620].x + _639;
        float _2641 = cbLight._m0[_2620].y + _640;
        float _2642 = cbLight._m0[_2620].z + _641;
        float _2646 = inversesqrt(dot(vec3(_2640, _2641, _2642), vec3(_2640, _2641, _2642)));
        float _2647 = _2646 * _2640;
        float _2648 = _2646 * _2641;
        float _2649 = _2646 * _2642;
        float _2650 = dot(vec3(_560, _561, _562), vec3(cbLight._m0[_2620].xyz));
        float _4502 = isnan(0.0) ? _2650 : (isnan(_2650) ? 0.0 : max(_2650, 0.0));
        float _2653 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
        float _2654 = dot(vec3(_560, _561, _562), vec3(_2647, _2648, _2649));
        float _4513 = isnan(0.0) ? _2654 : (isnan(_2654) ? 0.0 : max(_2654, 0.0));
        float _2657 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
        float _2658 = dot(vec3(cbLight._m0[_2620].xyz), vec3(_2647, _2648, _2649));
        float _4524 = isnan(0.0) ? _2658 : (isnan(_2658) ? 0.0 : max(_2658, 0.0));
        float _2662 = _2639 * _2639;
        float _2666 = ((_2657 * _2657) * (_2662 + (-1.0))) + 1.0;
        float _2673 = exp2(log2(1.0 - (isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0)))) * 5.0);
        float _2680 = 1.0 - _2639;
        float _2690 = (0.5 / (((_2307 * ((_2653 * _2680) + _2639)) + 9.9999999392252902907785028219223e-09) + (((_2307 * _2680) + _2639) * _2653))) * _2653;
        float _4535 = isnan(0.0) ? _2690 : (isnan(_2690) ? 0.0 : max(_2690, 0.0));
        float _2692 = (isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0))) * (_2662 / ((_2666 * _2666) * 3.141590118408203125));
        float _2693 = isnan(1.0) ? _2046 : (isnan(_2046) ? 1.0 : min(_2046, 1.0));
        _2609 = (((((_2673 * _2329) + _712) * cbLight._m0[_2624].x) * _2692) * _2693) + _2499;
        _2611 = (((((_2673 * _2331) + _714) * cbLight._m0[_2624].y) * _2692) * _2693) + _2501;
        _2613 = (((((_2673 * _2332) + _715) * cbLight._m0[_2624].z) * _2692) * _2693) + _2503;
    }
    float _2759;
    float _2761;
    float _2763;
    float _2765;
    float _2767;
    float _2769;
    if (_2028.y == 0u)
    {
        uvec4 _2714 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2715 = _2714.x;
        uint _2726 = uint((float(_2714.y) * floor(float(uint(cbSceneParam._m0[85u].y * _648) / _2715))) + floor(float(uint(cbSceneParam._m0[85u].x * _647) / _2715)));
        float _2736 = (log2(_1806 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2737 = isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : max(_2736, 0.0));
        uint _2740 = uint(isnan(14.0) ? _2737 : (isnan(_2737) ? 14.0 : min(_2737, 14.0)));
        uvec4 _2745 = texelFetch(g_lightClusterGridBuffer, int(((_2740 << 2u) + (_2726 << 6u)) >> 2u));
        uint _2746 = _2745.x;
        uint _2747 = _2714.z;
        float _2826;
        float _2828;
        float _2830;
        float _2832;
        float _2834;
        float _2836;
        if (((((1u << ((_2747 >> 4u) & 15u)) + 4294967295u) & _2746) == 0u) || ((_2747 & 240u) == 0u))
        {
            _2826 = 0.0;
            _2828 = 0.0;
            _2830 = 0.0;
            _2832 = 0.0;
            _2834 = 0.0;
            _2836 = 0.0;
        }
        else
        {
            float _2827;
            float _2829;
            float _2831;
            float _2833;
            float _2835;
            float _2837;
            float _2971 = 0.0;
            float _2972 = 0.0;
            float _2973 = 0.0;
            float _2974 = 0.0;
            float _2975 = 0.0;
            float _2976 = 0.0;
            uint _2977 = 0u;
            uint _2986;
            bool _2987;
            for (;;)
            {
                _2986 = texelFetch(g_lightClassification, int((((_2740 << 5u) + (_2726 << 9u)) + (_2977 << 2u)) >> 2u)).x;
                _2987 = _2986 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2987)
                {
                    frontier_phi_66_pred = _2976;
                    frontier_phi_66_pred_1 = _2975;
                    frontier_phi_66_pred_2 = _2974;
                    frontier_phi_66_pred_3 = _2973;
                    frontier_phi_66_pred_4 = _2972;
                    frontier_phi_66_pred_5 = _2971;
                }
                else
                {
                    float _3095;
                    float _3096;
                    float _3097;
                    float _3098;
                    float _3099;
                    float _3100;
                    uint _3101;
                    _3095 = _2971;
                    _3096 = _2972;
                    _3097 = _2973;
                    _3098 = _2974;
                    _3099 = _2975;
                    _3100 = _2976;
                    _3101 = _2986;
                    float _3027;
                    float _3028;
                    float _3029;
                    float _3030;
                    float _3031;
                    float _3032;
                    for (;;)
                    {
                        uint _3105 = uint(findLSB(_3101)) + (_2977 << 5u);
                        uint _3102 = (_3101 + 4294967295u) & _3101;
                        uint _3107 = _3105 * 48u;
                        vec4 _3121 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3107)).x, texelFetch(g_PointLightRenderingBuffer, int(_3107 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3107 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3107 + 3u)).x));
                        uint _3127 = (_3105 * 48u) + 4u;
                        vec4 _3140 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3127)).x, texelFetch(g_PointLightRenderingBuffer, int(_3127 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3127 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3127 + 3u)).x));
                        uint _3146 = (_3105 * 48u) + 8u;
                        vec3 _3157 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3146)).x, texelFetch(g_PointLightRenderingBuffer, int(_3146 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3146 + 2u)).x));
                        float _3161 = _3121.x - _1804;
                        float _3162 = _3121.y - _1805;
                        float _3163 = _3121.z - _1806;
                        float _3164 = dot(vec3(_3161, _3162, _3163), vec3(_3161, _3162, _3163));
                        float _3167 = inversesqrt(_3164);
                        float _3168 = _3167 * _3161;
                        float _3169 = _3167 * _3162;
                        float _3170 = _3167 * _3163;
                        float _3171 = dot(vec3(_669, _672, _675), vec3(_3168, _3169, _3170));
                        float _3176 = 1.0 - (_3164 * _3121.w);
                        float _4561 = isnan(0.0) ? _3176 : (isnan(_3176) ? 0.0 : max(_3176, 0.0));
                        float _3177 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
                        float _3178 = sqrt(_3164) * _3140.w;
                        float _3181 = 1.39999997615814208984375 / (_3178 + 1.39999997615814208984375);
                        float _3182 = _3181 * _3181;
                        float _3185 = ((1.0 - _3182) * _3171) + _3182;
                        float _3188 = _3178 * _3178;
                        float _3192 = ((isnan(0.0) ? _3185 : (isnan(_3185) ? 0.0 : max(_3185, 0.0))) * _3177) / ((_3188 * 0.699999988079071044921875) + 1.0);
                        float _3196 = (-0.0) - _1804;
                        float _3197 = (-0.0) - _1805;
                        float _3198 = (-0.0) - _1806;
                        float _3202 = inversesqrt(dot(vec3(_3196, _3197, _3198), vec3(_3196, _3197, _3198)));
                        float _3203 = _3202 * _3196;
                        float _3204 = _3202 * _3197;
                        float _3205 = _3202 * _3198;
                        float _3212 = exp2(log2(1.0 / ((_3188 * 3.5) + 5.0)) * 0.25);
                        float _3213 = 1.0 - _744;
                        float _3220 = sqrt(1.0 - ((1.0 - (_3213 * _3213)) * (1.0 - (_3212 * _3212))));
                        float _3221 = _3220 * _3220;
                        float _3222 = _3221 * _3221;
                        float _3223 = _3203 + _3168;
                        float _3224 = _3204 + _3169;
                        float _3225 = _3205 + _3170;
                        float _3229 = inversesqrt(dot(vec3(_3223, _3224, _3225), vec3(_3223, _3224, _3225)));
                        float _3233 = dot(vec3(_669, _672, _675), vec3(_3203, _3204, _3205));
                        float _4577 = isnan(0.0) ? _3233 : (isnan(_3233) ? 0.0 : max(_3233, 0.0));
                        float _3236 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
                        float _3237 = dot(vec3(_669, _672, _675), vec3(_3229 * _3223, _3229 * _3224, _3229 * _3225));
                        float _4588 = isnan(0.0) ? _3237 : (isnan(_3237) ? 0.0 : max(_3237, 0.0));
                        float _3240 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
                        float _3244 = ((_3240 * _3240) * (_3222 + (-1.0))) + 1.0;
                        float _3245 = _3181 * _3221;
                        float _3246 = _3245 * _3245;
                        float _3249 = ((1.0 - _3246) * _3171) + _3246;
                        float _4599 = isnan(0.0) ? _3249 : (isnan(_3249) ? 0.0 : max(_3249, 0.0));
                        float _3250 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
                        float _3251 = 1.0 - _3221;
                        float _3261 = (0.5 / (((_3250 * ((_3236 * _3251) + _3221)) + 9.9999999392252902907785028219223e-09) + (((_3250 * _3251) + _3221) * _3236))) * _3250;
                        float _4610 = isnan(0.0) ? _3261 : (isnan(_3261) ? 0.0 : max(_3261, 0.0));
                        float _3272 = (((_3222 * 3.1415927410125732421875) * (isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0)))) / ((_3244 * _3244) * ((_3188 * 2.1991131305694580078125) + 3.141590118408203125))) * _3177;
                        _3030 = (_3192 * _3140.x) + _3098;
                        _3031 = (_3192 * _3140.y) + _3099;
                        _3032 = (_3192 * _3140.z) + _3100;
                        _3027 = (_3272 * _3157.x) + _3095;
                        _3028 = (_3272 * _3157.y) + _3096;
                        _3029 = (_3272 * _3157.z) + _3097;
                        if (_3102 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3095 = _3027;
                            _3096 = _3028;
                            _3097 = _3029;
                            _3098 = _3030;
                            _3099 = _3031;
                            _3100 = _3032;
                            _3101 = _3102;
                        }
                    }
                    frontier_phi_66_pred = _3032;
                    frontier_phi_66_pred_1 = _3031;
                    frontier_phi_66_pred_2 = _3030;
                    frontier_phi_66_pred_3 = _3029;
                    frontier_phi_66_pred_4 = _3028;
                    frontier_phi_66_pred_5 = _3027;
                }
                _2837 = frontier_phi_66_pred;
                _2835 = frontier_phi_66_pred_1;
                _2833 = frontier_phi_66_pred_2;
                _2831 = frontier_phi_66_pred_3;
                _2829 = frontier_phi_66_pred_4;
                _2827 = frontier_phi_66_pred_5;
                uint _2978 = _2977 + 1u;
                if (_2978 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2971 = _2827;
                    _2972 = _2829;
                    _2973 = _2831;
                    _2974 = _2833;
                    _2975 = _2835;
                    _2976 = _2837;
                    _2977 = _2978;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2826 = _2827;
            _2828 = _2829;
            _2830 = _2831;
            _2832 = _2833;
            _2834 = _2835;
            _2836 = _2837;
        }
        uvec4 _2840 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2841 = _2840.z;
        uint _2843 = (_2841 >> 8u) & 15u;
        float _2939;
        float _2941;
        float _2943;
        float _2945;
        float _2947;
        float _2949;
        if (((4294967295u << _2843) & _2746) == 0u)
        {
            _2939 = _2826;
            _2941 = _2828;
            _2943 = _2830;
            _2945 = _2832;
            _2947 = _2834;
            _2949 = _2836;
        }
        else
        {
            float _2964 = inversesqrt(dot(vec3(_1804, _1805, _1806), vec3(_1804, _1805, _1806)));
            float _2965 = _2964 * _1804;
            float _2966 = _2964 * _1805;
            float _2967 = _2964 * _1806;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2843 < ((_2841 >> 12u) & 15u))
            {
                float _2940;
                float _2942;
                float _2944;
                float _2946;
                float _2948;
                float _2950;
                float _3078 = _2826;
                float _3079 = _2828;
                float _3080 = _2830;
                float _3081 = _2832;
                float _3082 = _2834;
                float _3083 = _2836;
                uint _3084 = _2843;
                uint _3093;
                bool _3094;
                for (;;)
                {
                    _3093 = texelFetch(g_lightClassification, int((((_2740 << 5u) + (_2726 << 9u)) + (_3084 << 2u)) >> 2u)).x;
                    _3094 = _3093 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3094)
                    {
                        frontier_phi_72_pred = _3083;
                        frontier_phi_72_pred_1 = _3082;
                        frontier_phi_72_pred_2 = _3081;
                        frontier_phi_72_pred_3 = _3080;
                        frontier_phi_72_pred_4 = _3079;
                        frontier_phi_72_pred_5 = _3078;
                    }
                    else
                    {
                        float _3277;
                        float _3278;
                        float _3279;
                        float _3280;
                        float _3281;
                        float _3282;
                        float _3572;
                        float _3573;
                        float _3574;
                        float _3575;
                        float _3576;
                        float _3577;
                        float _3290 = _3078;
                        float _3291 = _3079;
                        float _3292 = _3080;
                        float _3293 = _3081;
                        float _3294 = _3082;
                        float _3295 = _3083;
                        uint _3296 = _3093;
                        uint _3297;
                        vec4 _3322;
                        float _3323;
                        vec4 _3338;
                        vec3 _3350;
                        vec4 _3366;
                        vec4 _3382;
                        float _3428;
                        bool _3429;
                        for (;;)
                        {
                            uint _3307 = ((_3084 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3296));
                            _3297 = (_3296 + 4294967295u) & _3296;
                            uint _3309 = _3307 * 40u;
                            _3322 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3309)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 3u)).x));
                            _3323 = _3322.w;
                            uint _3325 = (_3307 * 40u) + 4u;
                            _3338 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3325)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3325 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3325 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3325 + 3u)).x));
                            uint _3340 = (_3307 * 40u) + 8u;
                            _3350 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3340)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 2u)).x));
                            uint _3353 = (_3307 * 40u) + 16u;
                            _3366 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3353)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 3u)).x));
                            uint _3369 = (_3307 * 40u) + 20u;
                            _3382 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3369)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 3u)).x));
                            uint _3384 = (_3307 * 40u) + 24u;
                            vec4 _3397 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3384)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 3u)).x));
                            uint _3403 = (_3307 * 40u) + 28u;
                            vec4 _3416 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3403)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 3u)).x));
                            _3428 = fma(_1806, _3416.z, fma(_1805, _3416.y, _3416.x * _1804)) + _3416.w;
                            _3429 = !((fma(_1806, _3397.z, fma(_1805, _3397.y, _3397.x * _1804)) + _3397.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3429)
                            {
                                float _3456 = _3322.x - _1804;
                                float _3457 = _3322.y - _1805;
                                float _3458 = _3322.z - _1806;
                                float _3459 = dot(vec3(_3456, _3457, _3458), vec3(_3456, _3457, _3458));
                                float _3462 = inversesqrt(_3459);
                                float _3463 = _3462 * _3456;
                                float _3464 = _3462 * _3457;
                                float _3465 = _3462 * _3458;
                                float _3469 = 1.0 - (_3459 / (_3323 * _3323));
                                float _4621 = isnan(0.0) ? _3469 : (isnan(_3469) ? 0.0 : max(_3469, 0.0));
                                float _3470 = isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0));
                                float _3474 = sqrt(_3459) * _3338.w;
                                float _3476 = 1.39999997615814208984375 / (_3474 + 1.39999997615814208984375);
                                float _3477 = _3476 * _3476;
                                float _3480 = ((1.0 - _3477) * dot(vec3(_3463, _3464, _3465), vec3(_669, _672, _675))) + _3477;
                                float _3483 = _3474 * _3474;
                                float _3487 = (fma(_1806, _3366.z, fma(_1805, _3366.y, _3366.x * _1804)) + _3366.w) / _3428;
                                float _3488 = (fma(_1806, _3382.z, fma(_1805, _3382.y, _3382.x * _1804)) + _3382.w) / _3428;
                                float _3492 = 1.0 - dot(vec2(_3487, _3488), vec2(_3487, _3488));
                                float _4637 = isnan(0.0) ? _3492 : (isnan(_3492) ? 0.0 : max(_3492, 0.0));
                                float _3493 = isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0));
                                float _3494 = _3493 * (((isnan(0.0) ? _3480 : (isnan(_3480) ? 0.0 : max(_3480, 0.0))) * _3470) / ((_3483 * 0.699999988079071044921875) + 1.0));
                                float _3506 = exp2(log2(1.0 / ((_3483 * 3.5) + 5.0)) * 0.25);
                                float _3507 = 1.0 - _744;
                                float _3514 = sqrt(1.0 - ((1.0 - (_3507 * _3507)) * (1.0 - (_3506 * _3506))));
                                float _3515 = _3514 * _3514;
                                float _3516 = _3515 * _3515;
                                float _3517 = _3463 - _2965;
                                float _3518 = _3464 - _2966;
                                float _3519 = _3465 - _2967;
                                float _3523 = inversesqrt(dot(vec3(_3517, _3518, _3519), vec3(_3517, _3518, _3519)));
                                float _3527 = dot(vec3(_669, _672, _675), vec3((-0.0) - _2965, (-0.0) - _2966, (-0.0) - _2967));
                                float _4648 = isnan(0.0) ? _3527 : (isnan(_3527) ? 0.0 : max(_3527, 0.0));
                                float _3530 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
                                float _3531 = dot(vec3(_669, _672, _675), vec3(_3523 * _3517, _3523 * _3518, _3523 * _3519));
                                float _4659 = isnan(0.0) ? _3531 : (isnan(_3531) ? 0.0 : max(_3531, 0.0));
                                float _3534 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
                                float _3538 = ((_3534 * _3534) * (_3516 + (-1.0))) + 1.0;
                                float _3539 = _3476 * _3515;
                                float _3540 = _3539 * _3539;
                                float _3546 = ((1.0 - _3540) * dot(vec3(_669, _672, _675), vec3(_3463, _3464, _3465))) + _3540;
                                float _4670 = isnan(0.0) ? _3546 : (isnan(_3546) ? 0.0 : max(_3546, 0.0));
                                float _3547 = isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0));
                                float _3548 = 1.0 - _3515;
                                float _3558 = (0.5 / (((_3547 * ((_3530 * _3548) + _3515)) + 9.9999999392252902907785028219223e-09) + (((_3547 * _3548) + _3515) * _3530))) * _3547;
                                float _4681 = isnan(0.0) ? _3558 : (isnan(_3558) ? 0.0 : max(_3558, 0.0));
                                float _3568 = (_3493 * _3470) * (((_3516 * 3.1415927410125732421875) * (isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0)))) / ((_3538 * _3538) * ((_3483 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3494 * _3338.y;
                                frontier_phi_78_pred_1 = _3494 * _3338.x;
                                frontier_phi_78_pred_2 = _3568 * _3350.z;
                                frontier_phi_78_pred_3 = _3568 * _3350.y;
                                frontier_phi_78_pred_4 = _3568 * _3350.x;
                                frontier_phi_78_pred_5 = _3494 * _3338.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3576 = frontier_phi_78_pred;
                            _3575 = frontier_phi_78_pred_1;
                            _3574 = frontier_phi_78_pred_2;
                            _3573 = frontier_phi_78_pred_3;
                            _3572 = frontier_phi_78_pred_4;
                            _3577 = frontier_phi_78_pred_5;
                            _3280 = _3575 + _3293;
                            _3281 = _3576 + _3294;
                            _3282 = _3577 + _3295;
                            _3277 = _3572 + _3290;
                            _3278 = _3573 + _3291;
                            _3279 = _3574 + _3292;
                            if (_3297 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3290 = _3277;
                                _3291 = _3278;
                                _3292 = _3279;
                                _3293 = _3280;
                                _3294 = _3281;
                                _3295 = _3282;
                                _3296 = _3297;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3282;
                        frontier_phi_72_pred_1 = _3281;
                        frontier_phi_72_pred_2 = _3280;
                        frontier_phi_72_pred_3 = _3279;
                        frontier_phi_72_pred_4 = _3278;
                        frontier_phi_72_pred_5 = _3277;
                    }
                    _2950 = frontier_phi_72_pred;
                    _2948 = frontier_phi_72_pred_1;
                    _2946 = frontier_phi_72_pred_2;
                    _2944 = frontier_phi_72_pred_3;
                    _2942 = frontier_phi_72_pred_4;
                    _2940 = frontier_phi_72_pred_5;
                    uint _3085 = _3084 + 1u;
                    if (_3085 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3078 = _2940;
                        _3079 = _2942;
                        _3080 = _2944;
                        _3081 = _2946;
                        _3082 = _2948;
                        _3083 = _2950;
                        _3084 = _3085;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2950;
                frontier_phi_60_61_ladder_1 = _2948;
                frontier_phi_60_61_ladder_2 = _2944;
                frontier_phi_60_61_ladder_3 = _2942;
                frontier_phi_60_61_ladder_4 = _2940;
                frontier_phi_60_61_ladder_5 = _2946;
            }
            else
            {
                frontier_phi_60_61_ladder = _2836;
                frontier_phi_60_61_ladder_1 = _2834;
                frontier_phi_60_61_ladder_2 = _2830;
                frontier_phi_60_61_ladder_3 = _2828;
                frontier_phi_60_61_ladder_4 = _2826;
                frontier_phi_60_61_ladder_5 = _2832;
            }
            _2939 = frontier_phi_60_61_ladder_4;
            _2941 = frontier_phi_60_61_ladder_3;
            _2943 = frontier_phi_60_61_ladder_2;
            _2945 = frontier_phi_60_61_ladder_5;
            _2947 = frontier_phi_60_61_ladder_1;
            _2949 = frontier_phi_60_61_ladder;
        }
        float _2954 = isnan(1.0) ? _728 : (isnan(_728) ? 1.0 : min(_728, 1.0));
        _2759 = (_2954 * _2945) + _2271;
        _2761 = (_2954 * _2947) + _2273;
        _2763 = (_2954 * _2949) + _2275;
        _2765 = ((_2939 * _712) * _2954) + _2609;
        _2767 = ((_2941 * _714) * _2954) + _2611;
        _2769 = ((_2943 * _715) * _2954) + _2613;
    }
    else
    {
        _2759 = _2271;
        _2761 = _2273;
        _2763 = _2275;
        _2765 = _2609;
        _2767 = _2611;
        _2769 = _2613;
    }
    float _4697 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
    float _4708 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
    float _4719 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
    uint _2789 = _239 + 6u;
    float _2797 = _647 / cbSceneParam._m0[86u].x;
    float _2798 = _648 / cbSceneParam._m0[86u].y;
    vec4 _2812 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2797, _2798, (log2((isnan(cbSceneParam._m0[77u].w) ? _582 : (isnan(_582) ? cbSceneParam._m0[77u].w : min(_582, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2814 = _2812.x;
    float _2815 = _2812.y;
    float _2816 = _2812.z;
    float _2817 = _2812.w;
    float _2889;
    float _2891;
    float _2893;
    float _2895;
    if (_582 > cbSceneParam._m0[78u].w)
    {
        float _2851 = isnan(_582) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _582 : min(cbSceneParam._m0[80u].w, _582));
        float _2852 = _2851 / _582;
        float _2863 = _2852 * _632;
        float _2864 = _633 * _2852;
        float _2865 = (-0.0) - _2864;
        float _2867 = _2852 * _634;
        float _2869 = (cbSceneParam._m0[77u].w * _2865) / _2851;
        float _2870 = _2869 + cbSceneParam._m0[79u].w;
        float _2871 = cbSceneParam._m0[79u].w - _2864;
        float _2877 = sqrt(((_2863 * _2863) + (_2864 * _2864)) + (_2867 * _2867));
        float _2880 = (1.0 - (cbSceneParam._m0[77u].w / _2851)) * _2877;
        float _2885 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2887 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3040;
        if (abs((_2865 - _2869) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3040 = ((((_2870 > 0.0) ? exp2(_2885 * _2870) : (2.0 - exp2(_2887 * _2870))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2880;
        }
        else
        {
            float _3000 = 1.0 / cbSceneParam._m0[80u].x;
            float _3001 = isnan(_2871) ? _2870 : (isnan(_2870) ? _2871 : max(_2870, _2871));
            float _3002 = isnan(_2871) ? _2870 : (isnan(_2870) ? _2871 : min(_2870, _2871));
            float _3011 = isnan(0.0) ? _3001 : (isnan(_3001) ? 0.0 : min(_3001, 0.0));
            float _3012 = isnan(0.0) ? _3002 : (isnan(_3002) ? 0.0 : min(_3002, 0.0));
            _3040 = ((abs(_2877 / _2865) * cbSceneParam._m0[80u].y) * ((((_3011 - _3012) * 2.0) - ((exp2(_2885 * (isnan(0.0) ? _3001 : (isnan(_3001) ? 0.0 : max(_3001, 0.0)))) - exp2(_2885 * (isnan(0.0) ? _3002 : (isnan(_3002) ? 0.0 : max(_3002, 0.0))))) * _3000)) - ((exp2(_2887 * _3011) - exp2(_2887 * _3012)) * _3000))) + (_2880 * cbSceneParam._m0[80u].z);
        }
        vec4 _3042 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2797, _2798, 1.0), 0.0);
        float _3051 = exp2((_3040 * (-1.44269502162933349609375)) * (1.0 - _3042.w));
        float _3052 = log2(_3051);
        float _3068 = log2(_2817);
        _2889 = (exp2(_3068 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3052 * cbSceneParam._m0[78u].x)) * _3042.x) / cbSceneParam._m0[78u].x)) + _2814;
        _2891 = (exp2(_3068 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3052 * cbSceneParam._m0[78u].y)) * _3042.y) / cbSceneParam._m0[78u].y)) + _2815;
        _2893 = (exp2(_3068 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3052 * cbSceneParam._m0[78u].z)) * _3042.z) / cbSceneParam._m0[78u].z)) + _2816;
        _2895 = _3051 * _2817;
    }
    else
    {
        _2889 = _2814;
        _2891 = _2815;
        _2893 = _2816;
        _2895 = _2817;
    }
    float _2907 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2908 = _2907 == 3.0;
    float _2909 = log2(_2895);
    float _2916 = exp2(_2909 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0))) * (_2759 + ((isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0))) * _728))) + ((_2765 + ((isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0))) * _1536)) * cbPerFrame._m0[3u].x));
    float _2917 = exp2(_2909 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0))) * (_2761 + ((isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0))) * _728))) + ((_2767 + ((isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0))) * _1536)) * cbPerFrame._m0[3u].x));
    float _2918 = exp2(_2909 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0))) * (_2763 + ((isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0))) * _728))) + ((_2769 + ((isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0))) * _1536)) * cbPerFrame._m0[3u].x));
    float _2927 = (_2907 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2927 * (_2908 ? _2916 : (_2916 + (cbSceneParam._m0[72u].w * _2889)));
    SV_Target.y = _2927 * (_2908 ? _2917 : (_2917 + (cbSceneParam._m0[72u].w * _2891)));
    SV_Target.z = _2927 * (_2908 ? _2918 : (_2918 + (cbSceneParam._m0[72u].w * _2893)));
    SV_Target.w = cbInstanceData._m0[_2789].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2789].w;
}


