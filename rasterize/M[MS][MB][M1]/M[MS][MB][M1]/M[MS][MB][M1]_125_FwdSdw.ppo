#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1220;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _218 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _219 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _220 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _226 = inversesqrt(dot(vec3(_218, _219, _220), vec3(_218, _219, _220)));
    float _233 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _240 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _246 = uint(roundEven(NORMAL.w)) * 13u;
    uint _252 = _246 + 1u;
    uint _256 = _246 + 2u;
    float _265 = sqrt(((cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x) + (cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x)) + (cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x));
    float _266 = _265 * TEXCOORD.z;
    float _267 = _265 * TEXCOORD.w;
    vec4 _287 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _293 = _287.x * cbMtdParam._m0[11u].x;
    float _294 = _287.y * cbMtdParam._m0[11u].y;
    float _295 = _287.z * cbMtdParam._m0[11u].z;
    vec4 _314 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _266) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _267) + cbTextureTilingScale._m0[5u].w));
    vec4 _352 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _354 = _352.x;
    float _366 = dot(vec4(_354, _352.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _383 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_354 - _366) * cbMtdParam._m0[24u].y) + _366) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3828 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _384 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
    float _391 = (_384 * ((_314.x * cbMtdParam._m0[12u].x) - _293)) + _293;
    float _392 = (_384 * ((_314.y * cbMtdParam._m0[12u].y) - _294)) + _294;
    float _393 = (_384 * ((_314.z * cbMtdParam._m0[12u].z) - _295)) + _295;
    vec4 _412 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _266) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _267) + cbTextureTilingScale._m0[14u].w));
    vec4 _432 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _266) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _267) + cbTextureTilingScale._m0[20u].w));
    vec4 _457 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _266) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _267) + cbTextureTilingScale._m0[4u].w));
    vec4 _474 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _476 = _474.x;
    float _477 = _474.y;
    float _478 = _474.z;
    float _487 = ((_457.z - _478) * _384) + _478;
    float _490 = ((((_457.x - _476) * _384) + _476) * 2.0) + (-1.0);
    float _491 = ((((_457.y - _477) * _384) + _477) * 2.0) + (-1.0);
    float _492 = dot(vec2(_490, _491), vec2(_490, _491));
    float _3839 = isnan(0.0) ? _492 : (isnan(_492) ? 0.0 : max(_492, 0.0));
    float _497 = sqrt(1.0 - (isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0))));
    vec4 _510 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _528 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _266) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _267) + cbTextureTilingScale._m0[11u].w));
    float _530 = _528.x;
    float _531 = 1.0 - _530;
    float _544 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_530 - _531) * cbMtdParam._m0[24u].z) + _531) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3850 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _545 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
    float _552 = (_545 * ((_412.x * cbMtdParam._m0[18u].x) - _391)) + _391;
    float _553 = (_545 * ((_412.y * cbMtdParam._m0[18u].y) - _392)) + _392;
    float _554 = (_545 * ((_412.z * cbMtdParam._m0[18u].z) - _393)) + _393;
    vec4 _566 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _580 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _582 = _580.x;
    float _600 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _266) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _267) + cbTextureTilingScale._m0[9u].w)).x - _582) * _384) + _582;
    float _604 = ((_566.x - _600) * cbMtdParam._m0[19u].z) + _600;
    float _606 = _604 - (_604 * _545);
    float _611 = (((_432.z - _487) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _487;
    vec4 _624 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _266) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _267) + cbTextureTilingScale._m0[15u].w));
    float _631 = (_624.x * 2.0) + (-1.0);
    float _632 = (_624.y * 2.0) + (-1.0);
    float _633 = dot(vec2(_631, _632), vec2(_631, _632));
    float _3861 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _641 = (_545 * (_624.z - _611)) + _611;
    float _646 = _490 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_432.x * 2.0) + (-1.0)));
    float _647 = _491 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_432.y * 2.0) + (-1.0)));
    float _659 = (((_631 - _646) + (cbMtdParam._m0[21u].x * _646)) * _545) + _646;
    float _660 = (((_632 - _647) + (cbMtdParam._m0[21u].x * _647)) * _545) + _647;
    float _661 = (_545 * (sqrt(1.0 - (isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0)))) - _497)) + _497;
    float _666 = cbMtdParam._m0[22u].x + _510.w;
    float _669 = fma(_661, _233 * NORMAL.x, fma(_660, _240 * TANGENT.x, (_226 * _218) * _659));
    float _672 = fma(_661, _233 * NORMAL.y, fma(_660, _240 * TANGENT.y, (_226 * _219) * _659));
    float _675 = fma(_661, _233 * NORMAL.z, fma(_660, _240 * TANGENT.z, (_226 * _220) * _659));
    float _679 = inversesqrt(dot(vec3(_669, _672, _675), vec3(_669, _672, _675)));
    float _680 = _679 * _669;
    float _681 = _679 * _672;
    float _682 = _679 * _675;
    float _3872 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _683 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
    float _3883 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _3894 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
    float _3905 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
    float _3916 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _3927 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _688 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
    float _702 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _743 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _753 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _743);
    float _754 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _743);
    float _755 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _743);
    float _759 = inversesqrt(dot(vec3(_753, _754, _755), vec3(_753, _754, _755)));
    float _760 = _753 * _759;
    float _761 = _754 * _759;
    float _762 = _755 * _759;
    float _768 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _769 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _787 = fma(_682, cbSceneParam._m0[5u].z, fma(_681, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _680));
    float _790 = fma(_682, cbSceneParam._m0[6u].z, fma(_681, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _680));
    float _793 = fma(_682, cbSceneParam._m0[7u].z, fma(_681, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _680));
    uint _807 = (_246 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _813 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0)))) * cbInstanceData._m0[_807].x;
    float _814 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0)))) * cbInstanceData._m0[_807].y;
    float _815 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0)))) * cbInstanceData._m0[_807].z;
    float _3938 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
    float _816 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
    float _3949 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
    float _817 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
    float _3960 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
    float _818 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
    float _819 = 1.0 - _688;
    float _820 = _816 * _819;
    float _821 = _817 * _819;
    float _822 = _818 * _819;
    float _827 = (_816 + (-0.039999999105930328369140625)) * _688;
    float _828 = (_817 + (-0.039999999105930328369140625)) * _688;
    float _829 = (_818 + (-0.039999999105930328369140625)) * _688;
    float _830 = _827 + 0.039999999105930328369140625;
    float _832 = _828 + 0.039999999105930328369140625;
    float _833 = _829 + 0.039999999105930328369140625;
    vec4 _842 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _768, cbSceneParam._m0[86u].y * _769));
    float _846 = ((isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0))) * TEXCOORD_5.w) * _842.x;
    float _847 = dot(vec3(_680, _681, _682), vec3(_760, _761, _762));
    float _850 = _847 * 2.0;
    float _854 = (_850 * _680) - _760;
    float _855 = (_850 * _681) - _761;
    float _856 = (_850 * _682) - _762;
    float _860 = abs(dot(vec3(_760, _761, _762), vec3(_680, _681, _682)));
    float _3971 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
    float _862 = sqrt(_683);
    float _875 = exp2((_862 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_862 * 3.0));
    float _881 = (1.0 - _875) * ((_862 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _882 = _875 * _862;
    float _910 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _914 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _918 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1219;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _944 = fma(_918, cbModelParam._m0[26u].z, fma(_914, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _910));
        float _948 = fma(_918, cbModelParam._m0[27u].z, fma(_914, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _910));
        float _952 = fma(_918, cbModelParam._m0[28u].z, fma(_914, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _910));
        float _977 = _910 + _680;
        float _978 = _914 + _681;
        float _979 = _918 + _682;
        float _989 = fma(_979, cbModelParam._m0[26u].z, fma(_978, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _977)) - _944;
        float _990 = fma(_979, cbModelParam._m0[27u].z, fma(_978, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _977)) - _948;
        float _991 = fma(_979, cbModelParam._m0[28u].z, fma(_978, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _977)) - _952;
        float _995 = inversesqrt(dot(vec3(_989, _990, _991), vec3(_989, _990, _991)));
        float _1008 = ((_995 * _989) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_944 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1009 = ((_995 * _990) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_948 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1010 = ((_995 * _991) / cbModelParam._m0[34u].z) + ((((((_952 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1013 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1008, _1009, _1010), 0.0);
        vec4 _1020 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1008, _1009, _1010), 0.0);
        vec4 _1027 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1008, _1009, _1010), 0.0);
        vec4 _1034 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1008, _1009, _1010), 0.0);
        float _1047 = exp2((_1013.w + (-0.5)) * 20.0) * 2.0;
        float _1048 = _1047 * (_1013.x + (-0.5));
        float _1049 = _1047 * (_1013.y + (-0.5));
        float _1050 = _1047 * (_1013.z + (-0.5));
        float _1057 = exp2((_1020.w + (-0.5)) * 20.0) * 2.0;
        float _1058 = _1057 * (_1020.x + (-0.5));
        float _1059 = _1057 * (_1020.y + (-0.5));
        float _1060 = _1057 * (_1020.z + (-0.5));
        float _1067 = exp2((_1027.w + (-0.5)) * 20.0) * 2.0;
        float _1068 = _1067 * (_1027.x + (-0.5));
        float _1069 = _1067 * (_1027.y + (-0.5));
        float _1070 = _1067 * (_1027.z + (-0.5));
        float _1077 = exp2((_1034.w + (-0.5)) * 20.0) * 2.0;
        float _1078 = _1077 * (_1034.x + (-0.5));
        float _1079 = _1077 * (_1034.y + (-0.5));
        float _1080 = _1077 * (_1034.z + (-0.5));
        float _1081 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1082 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1083 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1084 = _1048 * 0.5;
        float _1085 = _1058 * 0.5;
        float _1086 = _1068 * 0.5;
        float _1087 = dot(vec3(_1084, _1085, _1086), vec3(_1084, _1085, _1086));
        float _1092 = (_1087 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1087);
        float _1101 = (dot(vec3(_680, _681, _682), vec3(_1092 * _1084, _1092 * _1085, _1092 * _1086)) + 1.0) * 0.5;
        float _3997 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1111 = sqrt(((_1085 * _1085) + (_1084 * _1084)) + (_1086 * _1086)) / (_1081 + 9.9999997473787516355514526367188e-06);
        float _4008 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1112 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
        float _1113 = _1112 * 2.0;
        float _1117 = (1.0 - _1112) / (_1112 + 1.0);
        float _4019 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1118 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
        float _1127 = ((((1.0 - _1118) * (_1113 + 2.0)) * exp2(log2(isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0))) * (_1113 + 1.0))) + _1118) * _1081;
        float _1128 = _1049 * 0.5;
        float _1129 = _1059 * 0.5;
        float _1130 = _1069 * 0.5;
        float _1131 = dot(vec3(_1128, _1129, _1130), vec3(_1128, _1129, _1130));
        float _1136 = (_1131 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1131);
        float _1144 = (dot(vec3(_680, _681, _682), vec3(_1136 * _1128, _1136 * _1129, _1136 * _1130)) + 1.0) * 0.5;
        float _4030 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1153 = sqrt(((_1129 * _1129) + (_1128 * _1128)) + (_1130 * _1130)) / (_1082 + 9.9999997473787516355514526367188e-06);
        float _4041 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1154 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
        float _1155 = _1154 * 2.0;
        float _1159 = (1.0 - _1154) / (_1154 + 1.0);
        float _4052 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1160 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
        float _1169 = ((((1.0 - _1160) * (_1155 + 2.0)) * exp2(log2(isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0))) * (_1155 + 1.0))) + _1160) * _1082;
        float _1170 = _1050 * 0.5;
        float _1171 = _1060 * 0.5;
        float _1172 = _1070 * 0.5;
        float _1173 = dot(vec3(_1170, _1171, _1172), vec3(_1170, _1171, _1172));
        float _1178 = (_1173 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1173);
        float _1186 = (dot(vec3(_680, _681, _682), vec3(_1178 * _1170, _1178 * _1171, _1178 * _1172)) + 1.0) * 0.5;
        float _4063 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1195 = sqrt(((_1171 * _1171) + (_1170 * _1170)) + (_1172 * _1172)) / (_1083 + 9.9999997473787516355514526367188e-06);
        float _4074 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1196 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
        float _1197 = _1196 * 2.0;
        float _1201 = (1.0 - _1196) / (_1196 + 1.0);
        float _4085 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1202 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
        float _1211 = ((((1.0 - _1202) * (_1197 + 2.0)) * exp2(log2(isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0))) * (_1197 + 1.0))) + _1202) * _1083;
        _1219 = _1050;
        _1221 = _1049;
        _1222 = _1048;
        _1223 = _1060;
        _1224 = _1059;
        _1225 = _1058;
        _1226 = _1070;
        _1227 = _1069;
        _1228 = _1068;
        _1229 = _1083;
        _1230 = _1082;
        _1231 = _1081;
        _1232 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0)));
        _1233 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0)));
        _1234 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0)));
    }
    else
    {
        _1219 = _1220;
        _1221 = _1220;
        _1222 = _1220;
        _1223 = _1220;
        _1224 = _1220;
        _1225 = _1220;
        _1226 = _1220;
        _1227 = _1220;
        _1228 = _1220;
        _1229 = _1220;
        _1230 = _1220;
        _1231 = _1220;
        _1232 = 0.0;
        _1233 = 0.0;
        _1234 = 0.0;
    }
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1259 = fma(_918, cbModelParam._m0[30u].z, fma(_914, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _910));
        float _1263 = fma(_918, cbModelParam._m0[31u].z, fma(_914, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _910));
        float _1267 = fma(_918, cbModelParam._m0[32u].z, fma(_914, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _910));
        float _1290 = _910 + _680;
        float _1291 = _914 + _681;
        float _1292 = _918 + _682;
        float _1302 = fma(_1292, cbModelParam._m0[30u].z, fma(_1291, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1290)) - _1259;
        float _1303 = fma(_1292, cbModelParam._m0[31u].z, fma(_1291, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1290)) - _1263;
        float _1304 = fma(_1292, cbModelParam._m0[32u].z, fma(_1291, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1290)) - _1267;
        float _1308 = inversesqrt(dot(vec3(_1302, _1303, _1304), vec3(_1302, _1303, _1304)));
        float _1321 = ((_1308 * _1302) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1259 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1322 = ((_1308 * _1303) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1263 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1323 = ((_1308 * _1304) / cbModelParam._m0[35u].z) + ((((((_1267 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1325 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1321, _1322, _1323), 0.0);
        vec4 _1332 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1321, _1322, _1323), 0.0);
        vec4 _1339 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1321, _1322, _1323), 0.0);
        vec4 _1346 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1321, _1322, _1323), 0.0);
        float _1358 = exp2((_1325.w + (-0.5)) * 20.0) * 2.0;
        float _1359 = _1358 * (_1325.x + (-0.5));
        float _1360 = _1358 * (_1325.y + (-0.5));
        float _1361 = _1358 * (_1325.z + (-0.5));
        float _1368 = exp2((_1332.w + (-0.5)) * 20.0) * 2.0;
        float _1369 = _1368 * (_1332.x + (-0.5));
        float _1370 = _1368 * (_1332.y + (-0.5));
        float _1371 = _1368 * (_1332.z + (-0.5));
        float _1378 = exp2((_1339.w + (-0.5)) * 20.0) * 2.0;
        float _1379 = _1378 * (_1339.x + (-0.5));
        float _1380 = _1378 * (_1339.y + (-0.5));
        float _1381 = _1378 * (_1339.z + (-0.5));
        float _1388 = exp2((_1346.w + (-0.5)) * 20.0) * 2.0;
        float _1389 = _1388 * (_1346.x + (-0.5));
        float _1390 = _1388 * (_1346.y + (-0.5));
        float _1391 = _1388 * (_1346.z + (-0.5));
        float _1392 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1393 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1394 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1395 = _1359 * 0.5;
        float _1396 = _1369 * 0.5;
        float _1397 = _1379 * 0.5;
        float _1398 = dot(vec3(_1395, _1396, _1397), vec3(_1395, _1396, _1397));
        float _1403 = (_1398 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1398);
        float _1411 = (dot(vec3(_680, _681, _682), vec3(_1403 * _1395, _1403 * _1396, _1403 * _1397)) + 1.0) * 0.5;
        float _4126 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1420 = sqrt(((_1396 * _1396) + (_1395 * _1395)) + (_1397 * _1397)) / (_1392 + 9.9999997473787516355514526367188e-06);
        float _4137 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1421 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
        float _1422 = _1421 * 2.0;
        float _1426 = (1.0 - _1421) / (_1421 + 1.0);
        float _4148 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1427 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
        float _1436 = ((((1.0 - _1427) * (_1422 + 2.0)) * exp2(log2(isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0))) * (_1422 + 1.0))) + _1427) * _1392;
        float _1437 = _1360 * 0.5;
        float _1438 = _1370 * 0.5;
        float _1439 = _1380 * 0.5;
        float _1440 = dot(vec3(_1437, _1438, _1439), vec3(_1437, _1438, _1439));
        float _1445 = (_1440 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1440);
        float _1453 = (dot(vec3(_680, _681, _682), vec3(_1445 * _1437, _1445 * _1438, _1445 * _1439)) + 1.0) * 0.5;
        float _4159 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1462 = sqrt(((_1438 * _1438) + (_1437 * _1437)) + (_1439 * _1439)) / (_1393 + 9.9999997473787516355514526367188e-06);
        float _4170 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1463 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
        float _1464 = _1463 * 2.0;
        float _1468 = (1.0 - _1463) / (_1463 + 1.0);
        float _4181 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1469 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
        float _1478 = ((((1.0 - _1469) * (_1464 + 2.0)) * exp2(log2(isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0))) * (_1464 + 1.0))) + _1469) * _1393;
        float _1479 = _1361 * 0.5;
        float _1480 = _1371 * 0.5;
        float _1481 = _1381 * 0.5;
        float _1482 = dot(vec3(_1479, _1480, _1481), vec3(_1479, _1480, _1481));
        float _1487 = (_1482 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1482);
        float _1495 = (dot(vec3(_680, _681, _682), vec3(_1487 * _1479, _1487 * _1480, _1487 * _1481)) + 1.0) * 0.5;
        float _4192 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1504 = sqrt(((_1480 * _1480) + (_1479 * _1479)) + (_1481 * _1481)) / (_1394 + 9.9999997473787516355514526367188e-06);
        float _4203 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1505 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
        float _1506 = _1505 * 2.0;
        float _1510 = (1.0 - _1505) / (_1505 + 1.0);
        float _4214 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1511 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
        float _1520 = ((((1.0 - _1511) * (_1506 + 2.0)) * exp2(log2(isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0))) * (_1506 + 1.0))) + _1511) * _1394;
        _1528 = _1361;
        _1529 = _1360;
        _1530 = _1359;
        _1531 = _1371;
        _1532 = _1370;
        _1533 = _1369;
        _1534 = _1381;
        _1535 = _1380;
        _1536 = _1379;
        _1537 = _1394;
        _1538 = _1393;
        _1539 = _1392;
        _1540 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0)));
        _1541 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0)));
        _1542 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0)));
    }
    else
    {
        _1528 = _1220;
        _1529 = _1220;
        _1530 = _1220;
        _1531 = _1220;
        _1532 = _1220;
        _1533 = _1220;
        _1534 = _1220;
        _1535 = _1220;
        _1536 = _1220;
        _1537 = _1220;
        _1538 = _1220;
        _1539 = _1220;
        _1540 = 0.0;
        _1541 = 0.0;
        _1542 = 0.0;
    }
    float _1552 = (cbModelParam._m0[1u].x * (_1540 - _1232)) + _1232;
    float _1553 = (cbModelParam._m0[1u].x * (_1541 - _1233)) + _1233;
    float _1554 = (cbModelParam._m0[1u].x * (_1542 - _1234)) + _1234;
    float _1575 = fma(_1554, cbSceneParam._m0[89u].z, fma(_1553, cbSceneParam._m0[89u].y, _1552 * cbSceneParam._m0[89u].x));
    float _1578 = fma(_1554, cbSceneParam._m0[90u].z, fma(_1553, cbSceneParam._m0[90u].y, _1552 * cbSceneParam._m0[90u].x));
    float _1581 = fma(_1554, cbSceneParam._m0[91u].z, fma(_1553, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1552));
    float _1596 = _854 * 0.5;
    float _1597 = _855 * 0.5;
    float _1598 = _856 * 0.5;
    float _1599 = dot(vec4(_1596, _1597, _1598, 1.0), vec4(_1530, _1533, _1536, _1539));
    float _1602 = dot(vec4(_1596, _1597, _1598, 1.0), vec4(_1529, _1532, _1535, _1538));
    float _1605 = dot(vec4(_1596, _1597, _1598, 1.0), vec4(_1528, _1531, _1534, _1537));
    float _1639;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1612 = dot(vec4(_1596, _1597, _1598, 1.0), vec4(_1219, _1223, _1226, _1229));
        float _1616 = dot(vec4(_1596, _1597, _1598, 1.0), vec4(_1221, _1224, _1227, _1230));
        float _1620 = dot(vec4(_1596, _1597, _1598, 1.0), vec4(_1222, _1225, _1228, _1231));
        float _1627 = dot(vec4(cbModelParam._m0[39u]), vec4(_1596, _1597, _1598, 1.0));
        _1639 = dot(vec3(isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0)), isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0)), isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1627) ? 0.0 : (isnan(0.0) ? _1627 : max(0.0, _1627))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1639 = 1.0;
    }
    float _1650;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1641 = dot(vec4(cbModelParam._m0[40u]), vec4(_1596, _1597, _1598, 1.0));
        _1650 = dot(vec3(isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0)), isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0)), isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1641) ? 0.0 : (isnan(0.0) ? _1641 : max(0.0, _1641))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1650 = 1.0;
    }
    float _1654 = (_1650 * cbModelParam._m0[1u].x) + (_1639 * (1.0 - cbModelParam._m0[1u].x));
    float _1664 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _683);
    float _1665 = isnan(_1664) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1664 : min(cbModelParam._m0[25u].z, _1664));
    float _1745;
    float _1747;
    float _1749;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1712 = fma(_918, cbModelParam._m0[13u].z, fma(_914, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _910)) + cbModelParam._m0[13u].w;
        float _1716 = fma(_918, cbModelParam._m0[14u].z, fma(_914, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _910)) + cbModelParam._m0[14u].w;
        float _1720 = fma(_918, cbModelParam._m0[15u].z, fma(_914, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _910)) + cbModelParam._m0[15u].w;
        float _1723 = fma(_856, cbModelParam._m0[13u].z, fma(_855, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _854));
        float _1726 = fma(_856, cbModelParam._m0[14u].z, fma(_855, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _854));
        float _1729 = fma(_856, cbModelParam._m0[15u].z, fma(_855, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _854));
        float _1757;
        if (_1723 > 0.0)
        {
            _1757 = abs((1.0 - _1712) / _1723);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1723 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1712 + 1.0) / _1723);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1757 = frontier_phi_14_12_ladder;
        }
        float _1928;
        if (_1726 > 0.0)
        {
            _1928 = abs((1.0 - _1716) / _1726);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1726 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1716 + 1.0) / _1726);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1928 = frontier_phi_23_19_ladder;
        }
        float _2223;
        if (_1729 > 0.0)
        {
            _2223 = abs((1.0 - _1720) / _1729);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1729 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1720 + 1.0) / _1729);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2223 = frontier_phi_35_30_ladder;
        }
        float _2225 = isnan(_1928) ? _1757 : (isnan(_1757) ? _1928 : min(_1757, _1928));
        float _2226 = isnan(_2223) ? _2225 : (isnan(_2225) ? _2223 : min(_2225, _2223));
        float _2230 = (_2226 * _1723) + _1712;
        float _2231 = (_2226 * _1726) + _1716;
        float _2232 = (_2226 * _1729) + _1720;
        float _2233 = _2226 * 9.9999997473787516355514526367188e-05;
        float _2235 = (-1.0) - _2233;
        float _2237 = _2233 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2232 > _2237) || ((_2232 < _2235) || ((_2231 > _2237) || ((_2231 < _2235) || ((_2230 < _2235) || (_2230 > _2237))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2377 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2232, cbModelParam._m0[9u].z, fma(_2231, cbModelParam._m0[9u].y, _2230 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2232, cbModelParam._m0[10u].z, fma(_2231, cbModelParam._m0[10u].y, _2230 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2232, cbModelParam._m0[11u].z, fma(_2231, cbModelParam._m0[11u].y, _2230 * cbModelParam._m0[11u].x))), _1665);
            frontier_phi_13_35_ladder = _2377.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2377.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2377.x * cbModelParam._m0[1u].y;
        }
        _1745 = frontier_phi_13_35_ladder_2;
        _1747 = frontier_phi_13_35_ladder_1;
        _1749 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1733 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_854, _855, _856), _1665);
        _1745 = _1733.x * cbModelParam._m0[1u].y;
        _1747 = _1733.y * cbModelParam._m0[1u].y;
        _1749 = _1733.z * cbModelParam._m0[1u].y;
    }
    float _1753 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _683);
    float _1754 = isnan(_1753) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1753 : min(cbModelParam._m0[25u].w, _1753));
    float _1843;
    float _1845;
    float _1847;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1807 = fma(_918, cbModelParam._m0[21u].z, fma(_914, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _910)) + cbModelParam._m0[21u].w;
        float _1811 = fma(_918, cbModelParam._m0[22u].z, fma(_914, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _910)) + cbModelParam._m0[22u].w;
        float _1815 = fma(_918, cbModelParam._m0[23u].z, fma(_914, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _910)) + cbModelParam._m0[23u].w;
        float _1818 = fma(_856, cbModelParam._m0[21u].z, fma(_855, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _854));
        float _1821 = fma(_856, cbModelParam._m0[22u].z, fma(_855, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _854));
        float _1824 = fma(_856, cbModelParam._m0[23u].z, fma(_855, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _854));
        float _1933;
        if (_1818 > 0.0)
        {
            _1933 = abs((1.0 - _1807) / _1818);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1818 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1807 + 1.0) / _1818);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1933 = frontier_phi_25_21_ladder;
        }
        float _2250;
        if (_1821 > 0.0)
        {
            _2250 = abs((1.0 - _1811) / _1821);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1821 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1811 + 1.0) / _1821);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2250 = frontier_phi_37_32_ladder;
        }
        float _2588;
        if (_1824 > 0.0)
        {
            _2588 = abs((1.0 - _1815) / _1824);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1824 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1815 + 1.0) / _1824);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2588 = frontier_phi_47_44_ladder;
        }
        float _2590 = isnan(_2250) ? _1933 : (isnan(_1933) ? _2250 : min(_1933, _2250));
        float _2591 = isnan(_2588) ? _2590 : (isnan(_2590) ? _2588 : min(_2590, _2588));
        float _2595 = (_2591 * _1818) + _1807;
        float _2596 = (_2591 * _1821) + _1811;
        float _2597 = (_2591 * _1824) + _1815;
        float _2598 = _2591 * 9.9999997473787516355514526367188e-05;
        float _2599 = (-1.0) - _2598;
        float _2601 = _2598 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2597 > _2601) || ((_2597 < _2599) || ((_2596 > _2601) || ((_2596 < _2599) || ((_2595 < _2599) || (_2595 > _2601))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2719 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2597, cbModelParam._m0[17u].z, fma(_2596, cbModelParam._m0[17u].y, _2595 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2597, cbModelParam._m0[18u].z, fma(_2596, cbModelParam._m0[18u].y, _2595 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2597, cbModelParam._m0[19u].z, fma(_2596, cbModelParam._m0[19u].y, _2595 * cbModelParam._m0[19u].x))), _1754);
            frontier_phi_22_47_ladder = _2719.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2719.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2719.x * cbModelParam._m0[1u].z;
        }
        _1843 = frontier_phi_22_47_ladder_2;
        _1845 = frontier_phi_22_47_ladder_1;
        _1847 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1827 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_854, _855, _856), _1754);
        _1843 = _1827.x * cbModelParam._m0[1u].z;
        _1845 = _1827.y * cbModelParam._m0[1u].z;
        _1847 = _1827.z * cbModelParam._m0[1u].z;
    }
    float _1860 = (((_881 * _830) + _882) * _846) * ((cbModelParam._m0[1u].w * (_1843 - _1745)) + _1745);
    float _1862 = (((_881 * _832) + _882) * _846) * ((cbModelParam._m0[1u].w * (_1845 - _1747)) + _1747);
    float _1864 = (((_881 * _833) + _882) * _846) * ((cbModelParam._m0[1u].w * (_1847 - _1749)) + _1749);
    float _1867 = fma(_1864, cbSceneParam._m0[89u].z, fma(_1862, cbSceneParam._m0[89u].y, _1860 * cbSceneParam._m0[89u].x));
    float _1870 = fma(_1864, cbSceneParam._m0[90u].z, fma(_1862, cbSceneParam._m0[90u].y, _1860 * cbSceneParam._m0[90u].x));
    float _1873 = fma(_1864, cbSceneParam._m0[91u].z, fma(_1862, cbSceneParam._m0[91u].y, _1860 * cbSceneParam._m0[91u].x));
    float _1907 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1911 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1915 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1919 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1920 = _1907 / _1919;
    float _1921 = _1911 / _1919;
    float _1922 = _1915 / _1919;
    float _2069;
    float _2070;
    float _2071;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1949 = ((uint(_1922 > cbSceneParam._m0[59u].y) + uint(_1922 > cbSceneParam._m0[59u].x)) + uint(_1922 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1950 = _1949 + 43u;
        uint _1958 = _1949 + 44u;
        uint _1966 = _1949 + 45u;
        uint _1974 = _1949 + 46u;
        float _1985 = fma(_1919, cbSceneParam._m0[_1950].w, fma(_1915, cbSceneParam._m0[_1950].z, fma(_1911, cbSceneParam._m0[_1950].y, _1907 * cbSceneParam._m0[_1950].x)));
        float _1989 = fma(_1919, cbSceneParam._m0[_1958].w, fma(_1915, cbSceneParam._m0[_1958].z, fma(_1911, cbSceneParam._m0[_1958].y, _1907 * cbSceneParam._m0[_1958].x)));
        float _1997 = fma(_1919, cbSceneParam._m0[_1974].w, fma(_1915, cbSceneParam._m0[_1974].z, fma(_1911, cbSceneParam._m0[_1974].y, _1907 * cbSceneParam._m0[_1974].x)));
        float _2002 = cbSceneParam._m0[33u].z * _1997;
        float _2004 = cbSceneParam._m0[33u].w * _1997;
        float _2007 = fma(_1919, cbSceneParam._m0[_1966].w, fma(_1915, cbSceneParam._m0[_1966].z, fma(_1911, cbSceneParam._m0[_1966].y, _1907 * cbSceneParam._m0[_1966].x))) / _1997;
        float _2055 = (cbSceneParam._m0[33u].x - sqrt(((_1921 * _1921) + (_1920 * _1920)) + (_1922 * _1922))) * cbSceneParam._m0[33u].y;
        float _4340 = isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0));
        float _2062 = (isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2002 + _1985) / _1997, (_2004 + _1989) / _1997), _2007), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2004 + _1985) / _1997, (_1989 - _2002) / _1997), _2007), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1985 - _2002) / _1997, (_1989 - _2004) / _1997), _2007), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1985 - _2004) / _1997, (_2002 + _1989) / _1997), _2007), 0.0)).x), vec4(0.25)));
        _2069 = 1.0 - (_2062 * cbSceneParam._m0[34u].x);
        _2070 = 1.0 - (_2062 * cbSceneParam._m0[34u].y);
        _2071 = 1.0 - (_2062 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2069 = 1.0;
        _2070 = 1.0;
        _2071 = 1.0;
    }
    float _2135;
    float _2137;
    float _2139;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2123 = fma(_1919, cbSceneParam._m0[63u].w, fma(_1915, cbSceneParam._m0[63u].z, fma(_1911, cbSceneParam._m0[63u].y, _1907 * cbSceneParam._m0[63u].x)));
        float _2124 = fma(_1919, cbSceneParam._m0[60u].w, fma(_1915, cbSceneParam._m0[60u].z, fma(_1911, cbSceneParam._m0[60u].y, _1907 * cbSceneParam._m0[60u].x))) / _2123;
        float _2125 = fma(_1919, cbSceneParam._m0[61u].w, fma(_1915, cbSceneParam._m0[61u].z, fma(_1911, cbSceneParam._m0[61u].y, _1907 * cbSceneParam._m0[61u].x))) / _2123;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2124 >= cbSceneParam._m0[64u].x) && (_2125 >= cbSceneParam._m0[64u].y)) && (_2124 <= cbSceneParam._m0[64u].z)) && (_2125 <= cbSceneParam._m0[64u].w))
        {
            float _2263 = fma(_1919, cbSceneParam._m0[62u].w, fma(_1915, cbSceneParam._m0[62u].z, fma(_1911, cbSceneParam._m0[62u].y, _1907 * cbSceneParam._m0[62u].x))) / _2123;
            float _2267 = isnan(cbSceneParam._m0[41u].w) ? _2263 : (isnan(_2263) ? cbSceneParam._m0[41u].w : max(_2263, cbSceneParam._m0[41u].w));
            float _2310 = (cbSceneParam._m0[33u].x - sqrt(((_1921 * _1921) + (_1920 * _1920)) + (_1922 * _1922))) * cbSceneParam._m0[33u].y;
            float _4356 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
            float _2317 = (isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2124, cbSceneParam._m0[33u].w + _2125), _2267), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2124, _2125 - cbSceneParam._m0[33u].z), _2267), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2124 - cbSceneParam._m0[33u].z, _2125 - cbSceneParam._m0[33u].w), _2267), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2124 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2125), _2267), 0.0)).x), vec4(0.25)));
            float _2321 = 1.0 - (_2317 * cbSceneParam._m0[34u].x);
            float _2322 = 1.0 - (_2317 * cbSceneParam._m0[34u].y);
            float _2323 = 1.0 - (_2317 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2323) ? _2071 : (isnan(_2071) ? _2323 : min(_2071, _2323));
            frontier_phi_34_33_ladder_1 = isnan(_2322) ? _2070 : (isnan(_2070) ? _2322 : min(_2070, _2322));
            frontier_phi_34_33_ladder_2 = isnan(_2321) ? _2069 : (isnan(_2069) ? _2321 : min(_2069, _2321));
        }
        else
        {
            frontier_phi_34_33_ladder = _2071;
            frontier_phi_34_33_ladder_1 = _2070;
            frontier_phi_34_33_ladder_2 = _2069;
        }
        _2135 = frontier_phi_34_33_ladder_2;
        _2137 = frontier_phi_34_33_ladder_1;
        _2139 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2135 = _2069;
        _2137 = _2070;
        _2139 = _2071;
    }
    uvec4 _2144 = floatBitsToUint(cbInstanceData._m0[_246 + 5u]);
    uint _2146 = _2144.x * 14u;
    uint _2147 = _2146 + 13u;
    float _2154 = _846 + (-1.0);
    float _2159 = (cbLight._m0[_2147].x * _2154) + 1.0;
    float _2160 = (cbLight._m0[_2147].y * _2154) + 1.0;
    float _2161 = (cbLight._m0[_2147].z * _2154) + 1.0;
    float _2162 = (cbLight._m0[_2147].w * _2154) + 1.0;
    uint _2163 = _2146 + 5u;
    float _2169 = isnan(1.0) ? _2160 : (isnan(_2160) ? 1.0 : min(_2160, 1.0));
    uint _2173 = _2146 + 4u;
    float _2182 = isnan(1.0) ? _2159 : (isnan(_2159) ? 1.0 : min(_2159, 1.0));
    uint _2186 = _2146 | 1u;
    float _2197 = dot(vec3(cbLight._m0[_2146].xyz), vec3(_680, _681, _682));
    float _2200 = dot(vec3(cbLight._m0[_2186].xyz), vec3(_680, _681, _682));
    float _4392 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
    float _4403 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
    float _2205 = (isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0))) * 0.3183098733425140380859375;
    float _2207 = (isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0))) * 0.3183098733425140380859375;
    float _2214 = ((cbLight._m0[_2163].x * _2169) * _2207) + (((cbLight._m0[_2173].x * _2135) * _2182) * _2205);
    float _2215 = ((_2169 * cbLight._m0[_2163].y) * _2207) + (((cbLight._m0[_2173].y * _2137) * _2182) * _2205);
    float _2216 = ((_2169 * cbLight._m0[_2163].z) * _2207) + (((cbLight._m0[_2173].z * _2139) * _2182) * _2205);
    uvec4 _2220 = floatBitsToUint(cbLight._m0[_2146 + 12u]);
    bool _2222 = _2220.x == 0u;
    float _2324;
    float _2326;
    float _2328;
    if (_2222)
    {
        _2324 = _2214;
        _2326 = _2215;
        _2328 = _2216;
    }
    else
    {
        uint _2332 = _2146 + 6u;
        float _2348 = (dot(vec3(cbLight._m0[_2146 + 2u].xyz), vec3(_680, _681, _682)) * 0.5) + 0.5;
        float _2349 = _2348 * _2348;
        float _4414 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
        float _2350 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
        float _2351 = isnan(1.0) ? _2161 : (isnan(_2161) ? 1.0 : min(_2161, 1.0));
        _2324 = (((cbLight._m0[_2332].x * 0.3183098733425140380859375) * _2350) * _2351) + _2214;
        _2326 = (((cbLight._m0[_2332].y * 0.3183098733425140380859375) * _2350) * _2351) + _2215;
        _2328 = (((cbLight._m0[_2332].z * 0.3183098733425140380859375) * _2350) * _2351) + _2216;
    }
    bool _2331 = _2220.y == 0u;
    float _2386;
    float _2388;
    float _2390;
    if (_2331)
    {
        _2386 = _2324;
        _2388 = _2326;
        _2390 = _2328;
    }
    else
    {
        uint _2559 = _2146 + 7u;
        float _2575 = (dot(vec3(cbLight._m0[_2146 + 3u].xyz), vec3(_680, _681, _682)) * 0.5) + 0.5;
        float _2576 = _2575 * _2575;
        float _4430 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0));
        float _2577 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
        float _2578 = isnan(1.0) ? _2162 : (isnan(_2162) ? 1.0 : min(_2162, 1.0));
        _2386 = (((cbLight._m0[_2559].x * 0.3183098733425140380859375) * _2577) * _2578) + _2324;
        _2388 = (((cbLight._m0[_2559].y * 0.3183098733425140380859375) * _2577) * _2578) + _2326;
        _2390 = (((cbLight._m0[_2559].z * 0.3183098733425140380859375) * _2577) * _2578) + _2328;
    }
    uint _2393 = _2146 + 8u;
    float _2406 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2146].w)) * _683) * 0.949999988079071044921875);
    float _2407 = _2406 * _2406;
    float _2408 = cbLight._m0[_2146].x + _760;
    float _2409 = cbLight._m0[_2146].y + _761;
    float _2410 = cbLight._m0[_2146].z + _762;
    float _2414 = inversesqrt(dot(vec3(_2408, _2409, _2410), vec3(_2408, _2409, _2410)));
    float _2415 = _2414 * _2408;
    float _2416 = _2414 * _2409;
    float _2417 = _2414 * _2410;
    float _2418 = dot(vec3(_680, _681, _682), vec3(cbLight._m0[_2146].xyz));
    float _4446 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
    float _2421 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
    float _4457 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
    float _2422 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
    float _2423 = dot(vec3(_680, _681, _682), vec3(_2415, _2416, _2417));
    float _4468 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
    float _2426 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
    float _2427 = dot(vec3(cbLight._m0[_2146].xyz), vec3(_2415, _2416, _2417));
    float _4479 = isnan(0.0) ? _2427 : (isnan(_2427) ? 0.0 : max(_2427, 0.0));
    float _2431 = _2407 * _2407;
    float _2435 = ((_2426 * _2426) * (_2431 + (-1.0))) + 1.0;
    float _2443 = exp2(log2(1.0 - (isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0)))) * 5.0);
    float _2444 = 0.959999978542327880859375 - _827;
    float _2446 = 0.959999978542327880859375 - _828;
    float _2447 = 0.959999978542327880859375 - _829;
    float _2454 = 1.0 - _2407;
    float _2465 = (0.5 / (((_2422 * ((_2421 * _2454) + _2407)) + 9.9999999392252902907785028219223e-09) + (((_2422 * _2454) + _2407) * _2421))) * _2421;
    float _4490 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
    float _2467 = (isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0))) * (_2431 / ((_2435 * _2435) * 3.141590118408203125));
    uint _2481 = _2146 + 9u;
    float _2492 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2186].w)) * _683) * 0.949999988079071044921875);
    float _2493 = _2492 * _2492;
    float _2494 = cbLight._m0[_2186].x + _760;
    float _2495 = cbLight._m0[_2186].y + _761;
    float _2496 = cbLight._m0[_2186].z + _762;
    float _2500 = inversesqrt(dot(vec3(_2494, _2495, _2496), vec3(_2494, _2495, _2496)));
    float _2501 = _2500 * _2494;
    float _2502 = _2500 * _2495;
    float _2503 = _2500 * _2496;
    float _2504 = dot(vec3(_680, _681, _682), vec3(cbLight._m0[_2186].xyz));
    float _4501 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
    float _2507 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
    float _2508 = dot(vec3(_680, _681, _682), vec3(_2501, _2502, _2503));
    float _4512 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
    float _2511 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
    float _2512 = dot(vec3(cbLight._m0[_2186].xyz), vec3(_2501, _2502, _2503));
    float _4523 = isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0));
    float _2516 = _2493 * _2493;
    float _2520 = ((_2511 * _2511) * (_2516 + (-1.0))) + 1.0;
    float _2527 = exp2(log2(1.0 - (isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0)))) * 5.0);
    float _2534 = 1.0 - _2493;
    float _2544 = (0.5 / (((_2422 * ((_2507 * _2534) + _2493)) + 9.9999999392252902907785028219223e-09) + (((_2422 * _2534) + _2493) * _2507))) * _2507;
    float _4534 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
    float _2546 = (isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0))) * (_2516 / ((_2520 * _2520) * 3.141590118408203125));
    float _2556 = (((((_2527 * _2444) + _830) * cbLight._m0[_2481].x) * _2546) * _2169) + ((((cbLight._m0[_2393].x * _2135) * ((_2443 * _2444) + _830)) * _2467) * _2182);
    float _2557 = (((((_2527 * _2446) + _832) * cbLight._m0[_2481].y) * _2546) * _2169) + ((((cbLight._m0[_2393].y * _2137) * ((_2443 * _2446) + _832)) * _2467) * _2182);
    float _2558 = (((((_2527 * _2447) + _833) * cbLight._m0[_2481].z) * _2546) * _2169) + ((((cbLight._m0[_2393].z * _2139) * ((_2443 * _2447) + _833)) * _2467) * _2182);
    float _2614;
    float _2616;
    float _2618;
    if (_2222)
    {
        _2614 = _2556;
        _2616 = _2557;
        _2618 = _2558;
    }
    else
    {
        uint _2620 = _2146 + 2u;
        uint _2624 = _2146 + 10u;
        float _2638 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2620].w)) * _683) * 0.949999988079071044921875);
        float _2639 = _2638 * _2638;
        float _2640 = cbLight._m0[_2620].x + _760;
        float _2641 = cbLight._m0[_2620].y + _761;
        float _2642 = cbLight._m0[_2620].z + _762;
        float _2646 = inversesqrt(dot(vec3(_2640, _2641, _2642), vec3(_2640, _2641, _2642)));
        float _2647 = _2646 * _2640;
        float _2648 = _2646 * _2641;
        float _2649 = _2646 * _2642;
        float _2650 = dot(vec3(_680, _681, _682), vec3(cbLight._m0[_2620].xyz));
        float _4545 = isnan(0.0) ? _2650 : (isnan(_2650) ? 0.0 : max(_2650, 0.0));
        float _2653 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
        float _2654 = dot(vec3(_680, _681, _682), vec3(_2647, _2648, _2649));
        float _4556 = isnan(0.0) ? _2654 : (isnan(_2654) ? 0.0 : max(_2654, 0.0));
        float _2657 = isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0));
        float _2658 = dot(vec3(cbLight._m0[_2620].xyz), vec3(_2647, _2648, _2649));
        float _4567 = isnan(0.0) ? _2658 : (isnan(_2658) ? 0.0 : max(_2658, 0.0));
        float _2662 = _2639 * _2639;
        float _2666 = ((_2657 * _2657) * (_2662 + (-1.0))) + 1.0;
        float _2673 = exp2(log2(1.0 - (isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0)))) * 5.0);
        float _2680 = 1.0 - _2639;
        float _2690 = (0.5 / (((_2422 * ((_2653 * _2680) + _2639)) + 9.9999999392252902907785028219223e-09) + (((_2422 * _2680) + _2639) * _2653))) * _2653;
        float _4578 = isnan(0.0) ? _2690 : (isnan(_2690) ? 0.0 : max(_2690, 0.0));
        float _2692 = (isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0))) * (_2662 / ((_2666 * _2666) * 3.141590118408203125));
        float _2693 = isnan(1.0) ? _2161 : (isnan(_2161) ? 1.0 : min(_2161, 1.0));
        _2614 = (((((_2673 * _2444) + _830) * cbLight._m0[_2624].x) * _2692) * _2693) + _2556;
        _2616 = (((((_2673 * _2446) + _832) * cbLight._m0[_2624].y) * _2692) * _2693) + _2557;
        _2618 = (((((_2673 * _2447) + _833) * cbLight._m0[_2624].z) * _2692) * _2693) + _2558;
    }
    float _2724;
    float _2726;
    float _2728;
    if (_2331)
    {
        _2724 = _2614;
        _2726 = _2616;
        _2728 = _2618;
    }
    else
    {
        uint _2735 = _2146 + 3u;
        uint _2739 = _2146 + 11u;
        float _2753 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2735].w)) * _683) * 0.949999988079071044921875);
        float _2754 = _2753 * _2753;
        float _2755 = cbLight._m0[_2735].x + _760;
        float _2756 = cbLight._m0[_2735].y + _761;
        float _2757 = cbLight._m0[_2735].z + _762;
        float _2761 = inversesqrt(dot(vec3(_2755, _2756, _2757), vec3(_2755, _2756, _2757)));
        float _2762 = _2761 * _2755;
        float _2763 = _2761 * _2756;
        float _2764 = _2761 * _2757;
        float _2765 = dot(vec3(_680, _681, _682), vec3(cbLight._m0[_2735].xyz));
        float _4594 = isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : max(_2765, 0.0));
        float _2768 = isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0));
        float _2769 = dot(vec3(_680, _681, _682), vec3(_2762, _2763, _2764));
        float _4605 = isnan(0.0) ? _2769 : (isnan(_2769) ? 0.0 : max(_2769, 0.0));
        float _2772 = isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0));
        float _2773 = dot(vec3(cbLight._m0[_2735].xyz), vec3(_2762, _2763, _2764));
        float _4616 = isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : max(_2773, 0.0));
        float _2777 = _2754 * _2754;
        float _2781 = ((_2772 * _2772) * (_2777 + (-1.0))) + 1.0;
        float _2788 = exp2(log2(1.0 - (isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0)))) * 5.0);
        float _2795 = 1.0 - _2754;
        float _2805 = (0.5 / (((_2422 * ((_2768 * _2795) + _2754)) + 9.9999999392252902907785028219223e-09) + (((_2422 * _2795) + _2754) * _2768))) * _2768;
        float _4627 = isnan(0.0) ? _2805 : (isnan(_2805) ? 0.0 : max(_2805, 0.0));
        float _2807 = (isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0))) * (_2777 / ((_2781 * _2781) * 3.141590118408203125));
        float _2808 = isnan(1.0) ? _2162 : (isnan(_2162) ? 1.0 : min(_2162, 1.0));
        _2724 = (((((_2788 * _2444) + _830) * cbLight._m0[_2739].x) * _2807) * _2808) + _2614;
        _2726 = (((((_2788 * _2446) + _832) * cbLight._m0[_2739].y) * _2807) * _2808) + _2616;
        _2728 = (((((_2788 * _2447) + _833) * cbLight._m0[_2739].z) * _2807) * _2808) + _2618;
    }
    float _2874;
    float _2876;
    float _2878;
    float _2880;
    float _2882;
    float _2884;
    if (_2144.y == 0u)
    {
        uvec4 _2829 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2830 = _2829.x;
        uint _2841 = uint((float(_2829.y) * floor(float(uint(cbSceneParam._m0[85u].y * _769) / _2830))) + floor(float(uint(cbSceneParam._m0[85u].x * _768) / _2830)));
        float _2851 = (log2(_1922 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2852 = isnan(0.0) ? _2851 : (isnan(_2851) ? 0.0 : max(_2851, 0.0));
        uint _2855 = uint(isnan(14.0) ? _2852 : (isnan(_2852) ? 14.0 : min(_2852, 14.0)));
        uvec4 _2860 = texelFetch(g_lightClusterGridBuffer, int(((_2855 << 2u) + (_2841 << 6u)) >> 2u));
        uint _2861 = _2860.x;
        uint _2862 = _2829.z;
        float _2941;
        float _2943;
        float _2945;
        float _2947;
        float _2949;
        float _2951;
        if (((((1u << ((_2862 >> 4u) & 15u)) + 4294967295u) & _2861) == 0u) || ((_2862 & 240u) == 0u))
        {
            _2941 = 0.0;
            _2943 = 0.0;
            _2945 = 0.0;
            _2947 = 0.0;
            _2949 = 0.0;
            _2951 = 0.0;
        }
        else
        {
            float _2942;
            float _2944;
            float _2946;
            float _2948;
            float _2950;
            float _2952;
            float _3086 = 0.0;
            float _3087 = 0.0;
            float _3088 = 0.0;
            float _3089 = 0.0;
            float _3090 = 0.0;
            float _3091 = 0.0;
            uint _3092 = 0u;
            uint _3101;
            bool _3102;
            for (;;)
            {
                _3101 = texelFetch(g_lightClassification, int((((_2855 << 5u) + (_2841 << 9u)) + (_3092 << 2u)) >> 2u)).x;
                _3102 = _3101 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3102)
                {
                    frontier_phi_66_pred = _3091;
                    frontier_phi_66_pred_1 = _3090;
                    frontier_phi_66_pred_2 = _3089;
                    frontier_phi_66_pred_3 = _3088;
                    frontier_phi_66_pred_4 = _3087;
                    frontier_phi_66_pred_5 = _3086;
                }
                else
                {
                    float _3210;
                    float _3211;
                    float _3212;
                    float _3213;
                    float _3214;
                    float _3215;
                    uint _3216;
                    _3210 = _3086;
                    _3211 = _3087;
                    _3212 = _3088;
                    _3213 = _3089;
                    _3214 = _3090;
                    _3215 = _3091;
                    _3216 = _3101;
                    float _3142;
                    float _3143;
                    float _3144;
                    float _3145;
                    float _3146;
                    float _3147;
                    for (;;)
                    {
                        uint _3220 = uint(findLSB(_3216)) + (_3092 << 5u);
                        uint _3217 = (_3216 + 4294967295u) & _3216;
                        uint _3222 = _3220 * 48u;
                        vec4 _3236 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3222)).x, texelFetch(g_PointLightRenderingBuffer, int(_3222 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3222 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3222 + 3u)).x));
                        uint _3242 = (_3220 * 48u) + 4u;
                        vec4 _3255 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3242)).x, texelFetch(g_PointLightRenderingBuffer, int(_3242 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3242 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3242 + 3u)).x));
                        uint _3261 = (_3220 * 48u) + 8u;
                        vec3 _3272 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3261)).x, texelFetch(g_PointLightRenderingBuffer, int(_3261 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3261 + 2u)).x));
                        float _3276 = _3236.x - _1920;
                        float _3277 = _3236.y - _1921;
                        float _3278 = _3236.z - _1922;
                        float _3279 = dot(vec3(_3276, _3277, _3278), vec3(_3276, _3277, _3278));
                        float _3282 = inversesqrt(_3279);
                        float _3283 = _3282 * _3276;
                        float _3284 = _3282 * _3277;
                        float _3285 = _3282 * _3278;
                        float _3286 = dot(vec3(_787, _790, _793), vec3(_3283, _3284, _3285));
                        float _3291 = 1.0 - (_3279 * _3236.w);
                        float _4653 = isnan(0.0) ? _3291 : (isnan(_3291) ? 0.0 : max(_3291, 0.0));
                        float _3292 = isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0));
                        float _3293 = sqrt(_3279) * _3255.w;
                        float _3296 = 1.39999997615814208984375 / (_3293 + 1.39999997615814208984375);
                        float _3297 = _3296 * _3296;
                        float _3300 = ((1.0 - _3297) * _3286) + _3297;
                        float _3303 = _3293 * _3293;
                        float _3307 = ((isnan(0.0) ? _3300 : (isnan(_3300) ? 0.0 : max(_3300, 0.0))) * _3292) / ((_3303 * 0.699999988079071044921875) + 1.0);
                        float _3311 = (-0.0) - _1920;
                        float _3312 = (-0.0) - _1921;
                        float _3313 = (-0.0) - _1922;
                        float _3317 = inversesqrt(dot(vec3(_3311, _3312, _3313), vec3(_3311, _3312, _3313)));
                        float _3318 = _3317 * _3311;
                        float _3319 = _3317 * _3312;
                        float _3320 = _3317 * _3313;
                        float _3327 = exp2(log2(1.0 / ((_3303 * 3.5) + 5.0)) * 0.25);
                        float _3328 = 1.0 - _862;
                        float _3335 = sqrt(1.0 - ((1.0 - (_3328 * _3328)) * (1.0 - (_3327 * _3327))));
                        float _3336 = _3335 * _3335;
                        float _3337 = _3336 * _3336;
                        float _3338 = _3318 + _3283;
                        float _3339 = _3319 + _3284;
                        float _3340 = _3320 + _3285;
                        float _3344 = inversesqrt(dot(vec3(_3338, _3339, _3340), vec3(_3338, _3339, _3340)));
                        float _3348 = dot(vec3(_787, _790, _793), vec3(_3318, _3319, _3320));
                        float _4669 = isnan(0.0) ? _3348 : (isnan(_3348) ? 0.0 : max(_3348, 0.0));
                        float _3351 = isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0));
                        float _3352 = dot(vec3(_787, _790, _793), vec3(_3344 * _3338, _3344 * _3339, _3344 * _3340));
                        float _4680 = isnan(0.0) ? _3352 : (isnan(_3352) ? 0.0 : max(_3352, 0.0));
                        float _3355 = isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0));
                        float _3359 = ((_3355 * _3355) * (_3337 + (-1.0))) + 1.0;
                        float _3360 = _3296 * _3336;
                        float _3361 = _3360 * _3360;
                        float _3364 = ((1.0 - _3361) * _3286) + _3361;
                        float _4691 = isnan(0.0) ? _3364 : (isnan(_3364) ? 0.0 : max(_3364, 0.0));
                        float _3365 = isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0));
                        float _3366 = 1.0 - _3336;
                        float _3376 = (0.5 / (((_3365 * ((_3351 * _3366) + _3336)) + 9.9999999392252902907785028219223e-09) + (((_3365 * _3366) + _3336) * _3351))) * _3365;
                        float _4702 = isnan(0.0) ? _3376 : (isnan(_3376) ? 0.0 : max(_3376, 0.0));
                        float _3387 = (((_3337 * 3.1415927410125732421875) * (isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0)))) / ((_3359 * _3359) * ((_3303 * 2.1991131305694580078125) + 3.141590118408203125))) * _3292;
                        _3145 = (_3307 * _3255.x) + _3213;
                        _3146 = (_3307 * _3255.y) + _3214;
                        _3147 = (_3307 * _3255.z) + _3215;
                        _3142 = (_3387 * _3272.x) + _3210;
                        _3143 = (_3387 * _3272.y) + _3211;
                        _3144 = (_3387 * _3272.z) + _3212;
                        if (_3217 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3210 = _3142;
                            _3211 = _3143;
                            _3212 = _3144;
                            _3213 = _3145;
                            _3214 = _3146;
                            _3215 = _3147;
                            _3216 = _3217;
                        }
                    }
                    frontier_phi_66_pred = _3147;
                    frontier_phi_66_pred_1 = _3146;
                    frontier_phi_66_pred_2 = _3145;
                    frontier_phi_66_pred_3 = _3144;
                    frontier_phi_66_pred_4 = _3143;
                    frontier_phi_66_pred_5 = _3142;
                }
                _2952 = frontier_phi_66_pred;
                _2950 = frontier_phi_66_pred_1;
                _2948 = frontier_phi_66_pred_2;
                _2946 = frontier_phi_66_pred_3;
                _2944 = frontier_phi_66_pred_4;
                _2942 = frontier_phi_66_pred_5;
                uint _3093 = _3092 + 1u;
                if (_3093 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3086 = _2942;
                    _3087 = _2944;
                    _3088 = _2946;
                    _3089 = _2948;
                    _3090 = _2950;
                    _3091 = _2952;
                    _3092 = _3093;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2941 = _2942;
            _2943 = _2944;
            _2945 = _2946;
            _2947 = _2948;
            _2949 = _2950;
            _2951 = _2952;
        }
        uvec4 _2955 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2956 = _2955.z;
        uint _2958 = (_2956 >> 8u) & 15u;
        float _3054;
        float _3056;
        float _3058;
        float _3060;
        float _3062;
        float _3064;
        if (((4294967295u << _2958) & _2861) == 0u)
        {
            _3054 = _2941;
            _3056 = _2943;
            _3058 = _2945;
            _3060 = _2947;
            _3062 = _2949;
            _3064 = _2951;
        }
        else
        {
            float _3079 = inversesqrt(dot(vec3(_1920, _1921, _1922), vec3(_1920, _1921, _1922)));
            float _3080 = _3079 * _1920;
            float _3081 = _3079 * _1921;
            float _3082 = _3079 * _1922;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2958 < ((_2956 >> 12u) & 15u))
            {
                float _3055;
                float _3057;
                float _3059;
                float _3061;
                float _3063;
                float _3065;
                float _3193 = _2941;
                float _3194 = _2943;
                float _3195 = _2945;
                float _3196 = _2947;
                float _3197 = _2949;
                float _3198 = _2951;
                uint _3199 = _2958;
                uint _3208;
                bool _3209;
                for (;;)
                {
                    _3208 = texelFetch(g_lightClassification, int((((_2855 << 5u) + (_2841 << 9u)) + (_3199 << 2u)) >> 2u)).x;
                    _3209 = _3208 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3209)
                    {
                        frontier_phi_72_pred = _3198;
                        frontier_phi_72_pred_1 = _3197;
                        frontier_phi_72_pred_2 = _3196;
                        frontier_phi_72_pred_3 = _3195;
                        frontier_phi_72_pred_4 = _3194;
                        frontier_phi_72_pred_5 = _3193;
                    }
                    else
                    {
                        float _3392;
                        float _3393;
                        float _3394;
                        float _3395;
                        float _3396;
                        float _3397;
                        float _3685;
                        float _3686;
                        float _3687;
                        float _3688;
                        float _3689;
                        float _3690;
                        float _3405 = _3193;
                        float _3406 = _3194;
                        float _3407 = _3195;
                        float _3408 = _3196;
                        float _3409 = _3197;
                        float _3410 = _3198;
                        uint _3411 = _3208;
                        uint _3412;
                        vec4 _3437;
                        float _3438;
                        vec4 _3453;
                        vec3 _3465;
                        vec4 _3480;
                        vec4 _3495;
                        float _3541;
                        bool _3542;
                        for (;;)
                        {
                            uint _3422 = ((_3199 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3411));
                            _3412 = (_3411 + 4294967295u) & _3411;
                            uint _3424 = _3422 * 40u;
                            _3437 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3424)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 3u)).x));
                            _3438 = _3437.w;
                            uint _3440 = (_3422 * 40u) + 4u;
                            _3453 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3440)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 3u)).x));
                            uint _3455 = (_3422 * 40u) + 8u;
                            _3465 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3455)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 2u)).x));
                            uint _3467 = (_3422 * 40u) + 16u;
                            _3480 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3467)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 3u)).x));
                            uint _3482 = (_3422 * 40u) + 20u;
                            _3495 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3482)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3482 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3482 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3482 + 3u)).x));
                            uint _3497 = (_3422 * 40u) + 24u;
                            vec4 _3510 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3497)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3497 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3497 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3497 + 3u)).x));
                            uint _3516 = (_3422 * 40u) + 28u;
                            vec4 _3529 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3516)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3516 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3516 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3516 + 3u)).x));
                            _3541 = fma(_1922, _3529.z, fma(_1921, _3529.y, _3529.x * _1920)) + _3529.w;
                            _3542 = !((fma(_1922, _3510.z, fma(_1921, _3510.y, _3510.x * _1920)) + _3510.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3542)
                            {
                                float _3569 = _3437.x - _1920;
                                float _3570 = _3437.y - _1921;
                                float _3571 = _3437.z - _1922;
                                float _3572 = dot(vec3(_3569, _3570, _3571), vec3(_3569, _3570, _3571));
                                float _3575 = inversesqrt(_3572);
                                float _3576 = _3575 * _3569;
                                float _3577 = _3575 * _3570;
                                float _3578 = _3575 * _3571;
                                float _3582 = 1.0 - (_3572 / (_3438 * _3438));
                                float _4713 = isnan(0.0) ? _3582 : (isnan(_3582) ? 0.0 : max(_3582, 0.0));
                                float _3583 = isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0));
                                float _3587 = sqrt(_3572) * _3453.w;
                                float _3589 = 1.39999997615814208984375 / (_3587 + 1.39999997615814208984375);
                                float _3590 = _3589 * _3589;
                                float _3593 = ((1.0 - _3590) * dot(vec3(_3576, _3577, _3578), vec3(_787, _790, _793))) + _3590;
                                float _3596 = _3587 * _3587;
                                float _3600 = (fma(_1922, _3480.z, fma(_1921, _3480.y, _3480.x * _1920)) + _3480.w) / _3541;
                                float _3601 = (fma(_1922, _3495.z, fma(_1921, _3495.y, _3495.x * _1920)) + _3495.w) / _3541;
                                float _3605 = 1.0 - dot(vec2(_3600, _3601), vec2(_3600, _3601));
                                float _4729 = isnan(0.0) ? _3605 : (isnan(_3605) ? 0.0 : max(_3605, 0.0));
                                float _3606 = isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0));
                                float _3607 = _3606 * (((isnan(0.0) ? _3593 : (isnan(_3593) ? 0.0 : max(_3593, 0.0))) * _3583) / ((_3596 * 0.699999988079071044921875) + 1.0));
                                float _3619 = exp2(log2(1.0 / ((_3596 * 3.5) + 5.0)) * 0.25);
                                float _3620 = 1.0 - _862;
                                float _3627 = sqrt(1.0 - ((1.0 - (_3620 * _3620)) * (1.0 - (_3619 * _3619))));
                                float _3628 = _3627 * _3627;
                                float _3629 = _3628 * _3628;
                                float _3630 = _3576 - _3080;
                                float _3631 = _3577 - _3081;
                                float _3632 = _3578 - _3082;
                                float _3636 = inversesqrt(dot(vec3(_3630, _3631, _3632), vec3(_3630, _3631, _3632)));
                                float _3640 = dot(vec3(_787, _790, _793), vec3((-0.0) - _3080, (-0.0) - _3081, (-0.0) - _3082));
                                float _4740 = isnan(0.0) ? _3640 : (isnan(_3640) ? 0.0 : max(_3640, 0.0));
                                float _3643 = isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0));
                                float _3644 = dot(vec3(_787, _790, _793), vec3(_3636 * _3630, _3636 * _3631, _3636 * _3632));
                                float _4751 = isnan(0.0) ? _3644 : (isnan(_3644) ? 0.0 : max(_3644, 0.0));
                                float _3647 = isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0));
                                float _3651 = ((_3647 * _3647) * (_3629 + (-1.0))) + 1.0;
                                float _3652 = _3589 * _3628;
                                float _3653 = _3652 * _3652;
                                float _3659 = ((1.0 - _3653) * dot(vec3(_787, _790, _793), vec3(_3576, _3577, _3578))) + _3653;
                                float _4762 = isnan(0.0) ? _3659 : (isnan(_3659) ? 0.0 : max(_3659, 0.0));
                                float _3660 = isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0));
                                float _3661 = 1.0 - _3628;
                                float _3671 = (0.5 / (((_3660 * ((_3643 * _3661) + _3628)) + 9.9999999392252902907785028219223e-09) + (((_3660 * _3661) + _3628) * _3643))) * _3660;
                                float _4773 = isnan(0.0) ? _3671 : (isnan(_3671) ? 0.0 : max(_3671, 0.0));
                                float _3681 = (_3606 * _3583) * (((_3629 * 3.1415927410125732421875) * (isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0)))) / ((_3651 * _3651) * ((_3596 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3607 * _3453.y;
                                frontier_phi_78_pred_1 = _3607 * _3453.x;
                                frontier_phi_78_pred_2 = _3681 * _3465.z;
                                frontier_phi_78_pred_3 = _3681 * _3465.y;
                                frontier_phi_78_pred_4 = _3681 * _3465.x;
                                frontier_phi_78_pred_5 = _3607 * _3453.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3689 = frontier_phi_78_pred;
                            _3688 = frontier_phi_78_pred_1;
                            _3687 = frontier_phi_78_pred_2;
                            _3686 = frontier_phi_78_pred_3;
                            _3685 = frontier_phi_78_pred_4;
                            _3690 = frontier_phi_78_pred_5;
                            _3395 = _3688 + _3408;
                            _3396 = _3689 + _3409;
                            _3397 = _3690 + _3410;
                            _3392 = _3685 + _3405;
                            _3393 = _3686 + _3406;
                            _3394 = _3687 + _3407;
                            if (_3412 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3405 = _3392;
                                _3406 = _3393;
                                _3407 = _3394;
                                _3408 = _3395;
                                _3409 = _3396;
                                _3410 = _3397;
                                _3411 = _3412;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3397;
                        frontier_phi_72_pred_1 = _3396;
                        frontier_phi_72_pred_2 = _3395;
                        frontier_phi_72_pred_3 = _3394;
                        frontier_phi_72_pred_4 = _3393;
                        frontier_phi_72_pred_5 = _3392;
                    }
                    _3065 = frontier_phi_72_pred;
                    _3063 = frontier_phi_72_pred_1;
                    _3061 = frontier_phi_72_pred_2;
                    _3059 = frontier_phi_72_pred_3;
                    _3057 = frontier_phi_72_pred_4;
                    _3055 = frontier_phi_72_pred_5;
                    uint _3200 = _3199 + 1u;
                    if (_3200 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3193 = _3055;
                        _3194 = _3057;
                        _3195 = _3059;
                        _3196 = _3061;
                        _3197 = _3063;
                        _3198 = _3065;
                        _3199 = _3200;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3065;
                frontier_phi_60_61_ladder_1 = _3063;
                frontier_phi_60_61_ladder_2 = _3059;
                frontier_phi_60_61_ladder_3 = _3057;
                frontier_phi_60_61_ladder_4 = _3055;
                frontier_phi_60_61_ladder_5 = _3061;
            }
            else
            {
                frontier_phi_60_61_ladder = _2951;
                frontier_phi_60_61_ladder_1 = _2949;
                frontier_phi_60_61_ladder_2 = _2945;
                frontier_phi_60_61_ladder_3 = _2943;
                frontier_phi_60_61_ladder_4 = _2941;
                frontier_phi_60_61_ladder_5 = _2947;
            }
            _3054 = frontier_phi_60_61_ladder_4;
            _3056 = frontier_phi_60_61_ladder_3;
            _3058 = frontier_phi_60_61_ladder_2;
            _3060 = frontier_phi_60_61_ladder_5;
            _3062 = frontier_phi_60_61_ladder_1;
            _3064 = frontier_phi_60_61_ladder;
        }
        float _3069 = isnan(1.0) ? _846 : (isnan(_846) ? 1.0 : min(_846, 1.0));
        _2874 = (_3069 * _3060) + _2386;
        _2876 = (_3069 * _3062) + _2388;
        _2878 = (_3069 * _3064) + _2390;
        _2880 = ((_3054 * _830) * _3069) + _2724;
        _2882 = ((_3056 * _832) * _3069) + _2726;
        _2884 = ((_3058 * _833) * _3069) + _2728;
    }
    else
    {
        _2874 = _2386;
        _2876 = _2388;
        _2878 = _2390;
        _2880 = _2724;
        _2882 = _2726;
        _2884 = _2728;
    }
    float _4789 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
    float _4800 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
    float _4811 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
    uint _2904 = _246 + 6u;
    float _2912 = _768 / cbSceneParam._m0[86u].x;
    float _2913 = _769 / cbSceneParam._m0[86u].y;
    vec4 _2927 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2912, _2913, (log2((isnan(cbSceneParam._m0[77u].w) ? _702 : (isnan(_702) ? cbSceneParam._m0[77u].w : min(_702, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2929 = _2927.x;
    float _2930 = _2927.y;
    float _2931 = _2927.z;
    float _2932 = _2927.w;
    float _3004;
    float _3006;
    float _3008;
    float _3010;
    if (_702 > cbSceneParam._m0[78u].w)
    {
        float _2966 = isnan(_702) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _702 : min(cbSceneParam._m0[80u].w, _702));
        float _2967 = _2966 / _702;
        float _2978 = _2967 * _753;
        float _2979 = _754 * _2967;
        float _2980 = (-0.0) - _2979;
        float _2982 = _2967 * _755;
        float _2984 = (cbSceneParam._m0[77u].w * _2980) / _2966;
        float _2985 = _2984 + cbSceneParam._m0[79u].w;
        float _2986 = cbSceneParam._m0[79u].w - _2979;
        float _2992 = sqrt(((_2978 * _2978) + (_2979 * _2979)) + (_2982 * _2982));
        float _2995 = (1.0 - (cbSceneParam._m0[77u].w / _2966)) * _2992;
        float _3000 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3002 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3155;
        if (abs((_2980 - _2984) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3155 = ((((_2985 > 0.0) ? exp2(_3000 * _2985) : (2.0 - exp2(_3002 * _2985))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2995;
        }
        else
        {
            float _3115 = 1.0 / cbSceneParam._m0[80u].x;
            float _3116 = isnan(_2986) ? _2985 : (isnan(_2985) ? _2986 : max(_2985, _2986));
            float _3117 = isnan(_2986) ? _2985 : (isnan(_2985) ? _2986 : min(_2985, _2986));
            float _3126 = isnan(0.0) ? _3116 : (isnan(_3116) ? 0.0 : min(_3116, 0.0));
            float _3127 = isnan(0.0) ? _3117 : (isnan(_3117) ? 0.0 : min(_3117, 0.0));
            _3155 = ((abs(_2992 / _2980) * cbSceneParam._m0[80u].y) * ((((_3126 - _3127) * 2.0) - ((exp2(_3000 * (isnan(0.0) ? _3116 : (isnan(_3116) ? 0.0 : max(_3116, 0.0)))) - exp2(_3000 * (isnan(0.0) ? _3117 : (isnan(_3117) ? 0.0 : max(_3117, 0.0))))) * _3115)) - ((exp2(_3002 * _3126) - exp2(_3002 * _3127)) * _3115))) + (_2995 * cbSceneParam._m0[80u].z);
        }
        vec4 _3157 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2912, _2913, 1.0), 0.0);
        float _3166 = exp2((_3155 * (-1.44269502162933349609375)) * (1.0 - _3157.w));
        float _3167 = log2(_3166);
        float _3183 = log2(_2932);
        _3004 = (exp2(_3183 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3167 * cbSceneParam._m0[78u].x)) * _3157.x) / cbSceneParam._m0[78u].x)) + _2929;
        _3006 = (exp2(_3183 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3167 * cbSceneParam._m0[78u].y)) * _3157.y) / cbSceneParam._m0[78u].y)) + _2930;
        _3008 = (exp2(_3183 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3167 * cbSceneParam._m0[78u].z)) * _3157.z) / cbSceneParam._m0[78u].z)) + _2931;
        _3010 = _3166 * _2932;
    }
    else
    {
        _3004 = _2929;
        _3006 = _2930;
        _3008 = _2931;
        _3010 = _2932;
    }
    float _3022 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3023 = _3022 == 3.0;
    float _3024 = log2(_3010);
    float _3031 = exp2(_3024 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0))) * (_2874 + ((isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0))) * _846))) + ((_2880 + ((isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0))) * _1654)) * cbPerFrame._m0[3u].x));
    float _3032 = exp2(_3024 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0))) * (_2876 + ((isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0))) * _846))) + ((_2882 + ((isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0))) * _1654)) * cbPerFrame._m0[3u].x));
    float _3033 = exp2(_3024 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0))) * (_2878 + ((isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0))) * _846))) + ((_2884 + ((isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0))) * _1654)) * cbPerFrame._m0[3u].x));
    float _3042 = (_3022 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3042 * (_3023 ? _3031 : (_3031 + (cbSceneParam._m0[72u].w * _3004)));
    SV_Target.y = _3042 * (_3023 ? _3032 : (_3032 + (cbSceneParam._m0[72u].w * _3006)));
    SV_Target.z = _3042 * (_3023 ? _3033 : (_3033 + (cbSceneParam._m0[72u].w * _3008)));
    SV_Target.w = cbInstanceData._m0[_2904].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2904].w;
}


