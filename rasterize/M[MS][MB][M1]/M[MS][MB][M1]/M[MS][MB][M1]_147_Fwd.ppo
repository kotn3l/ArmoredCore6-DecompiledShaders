#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1337;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _221 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _222 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _223 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _229 = inversesqrt(dot(vec3(_221, _222, _223), vec3(_221, _222, _223)));
    float _230 = _229 * _221;
    float _231 = _229 * _222;
    float _232 = _229 * _223;
    float _236 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _237 = _236 * NORMAL.x;
    float _238 = _236 * NORMAL.y;
    float _239 = _236 * NORMAL.z;
    float _243 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _244 = _243 * TANGENT.x;
    float _245 = _243 * TANGENT.y;
    float _246 = _243 * TANGENT.z;
    uint _249 = uint(roundEven(NORMAL.w)) * 13u;
    uint _254 = _249 + 1u;
    uint _258 = _249 + 2u;
    float _267 = sqrt(((cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x) + (cbInstanceData._m0[_249].x * cbInstanceData._m0[_249].x)) + (cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x));
    float _268 = _267 * TEXCOORD.z;
    float _269 = _267 * TEXCOORD.w;
    vec4 _289 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _295 = _289.x * cbMtdParam._m0[11u].x;
    float _296 = _289.y * cbMtdParam._m0[11u].y;
    float _297 = _289.z * cbMtdParam._m0[11u].z;
    vec4 _316 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _268) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _269) + cbTextureTilingScale._m0[5u].w));
    vec4 _354 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _356 = _354.x;
    float _368 = dot(vec4(_356, _354.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _385 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_356 - _368) * cbMtdParam._m0[24u].y) + _368) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3662 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _386 = isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0));
    float _393 = (_386 * ((_316.x * cbMtdParam._m0[12u].x) - _295)) + _295;
    float _394 = (_386 * ((_316.y * cbMtdParam._m0[12u].y) - _296)) + _296;
    float _395 = (_386 * ((_316.z * cbMtdParam._m0[12u].z) - _297)) + _297;
    vec4 _414 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _268) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _269) + cbTextureTilingScale._m0[14u].w));
    vec4 _434 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _268) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _269) + cbTextureTilingScale._m0[4u].w));
    vec4 _451 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _453 = _451.x;
    float _454 = _451.y;
    float _455 = _451.z;
    float _464 = ((_434.z - _455) * _386) + _455;
    float _467 = ((((_434.x - _453) * _386) + _453) * 2.0) + (-1.0);
    float _469 = ((((_434.y - _454) * _386) + _454) * 2.0) + (-1.0);
    float _470 = dot(vec2(_467, _469), vec2(_467, _469));
    float _3673 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _475 = sqrt(1.0 - (isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0))));
    vec4 _491 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _503 = (((_491.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _467;
    float _504 = (((_491.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _469;
    float _507 = fma(_475, _237, fma(_504, _244, _503 * _230));
    float _510 = fma(_475, _238, fma(_504, _245, _503 * _231));
    float _513 = fma(_475, _239, fma(_504, _246, _503 * _232));
    float _517 = inversesqrt(dot(vec3(_507, _510, _513), vec3(_507, _510, _513)));
    vec4 _544 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _268) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _269) + cbTextureTilingScale._m0[11u].w));
    float _546 = _544.x;
    float _547 = 1.0 - _546;
    float _553 = (cbMtdParam._m0[19u].x + dot(vec4(_517 * _507, _517 * _510, _517 * _513, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_546 - _547) * cbMtdParam._m0[24u].z) + _547) * cbMtdParam._m0[21u].z);
    float _3684 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
    float _554 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
    float _556 = (-0.0) - cbMtdParam._m0[24u].x;
    float _558 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _559 = isnan(1.0) ? _558 : (isnan(_558) ? 1.0 : min(_558, 1.0));
    float _566 = _554 - ((_554 * TEXCOORD_8.x) * _559);
    float _567 = _554 - ((_554 * TEXCOORD_8.y) * _559);
    float _568 = _554 - ((_554 * TEXCOORD_8.z) * _559);
    float _575 = (_566 * ((_414.x * cbMtdParam._m0[18u].x) - _393)) + _393;
    float _576 = (_567 * ((_414.y * cbMtdParam._m0[18u].y) - _394)) + _394;
    float _577 = (_568 * ((_414.z * cbMtdParam._m0[18u].z) - _395)) + _395;
    vec4 _589 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _268) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _269) + cbTextureTilingScale._m0[19u].w));
    float _591 = _589.x;
    float _592 = 1.0 - _591;
    float _620 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_591 - _592) * cbMtdParam._m0[24u].w) + _592) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3705 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _621 = isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0));
    float _629 = ((((cbMtdParam._m0[10u].x - _575) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _621) + _575;
    float _630 = ((((cbMtdParam._m0[10u].y - _576) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _621) + _576;
    float _631 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _577)) * _621) + _577;
    vec4 _657 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _659 = _657.x;
    float _677 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _268) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _269) + cbTextureTilingScale._m0[9u].w)).x - _659) * _386) + _659;
    float _681 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _677) * cbMtdParam._m0[19u].z) + _677;
    float _683 = _681 - (_681 * _566);
    float _685 = _683 - (_683 * _621);
    float _689 = (cbMtdParam._m0[19u].w * (_491.z - _464)) + _464;
    vec4 _703 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _268) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _269) + cbTextureTilingScale._m0[15u].w));
    float _710 = (_703.x * 2.0) + (-1.0);
    float _711 = (_703.y * 2.0) + (-1.0);
    float _712 = dot(vec2(_710, _711), vec2(_710, _711));
    float _3716 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _720 = ((_703.z - _689) * _566) + _689;
    float _723 = ((cbMtdParam._m0[23u].y - _720) * _621) + _720;
    vec4 _742 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _268) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _269) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _748 = (_742.x * 2.0) + (-1.0);
    float _749 = (_742.y * 2.0) + (-1.0);
    float _750 = dot(vec2(_748, _749), vec2(_748, _749));
    float _3727 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
    float _765 = ((sqrt(1.0 - (isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0)))) - _475) * _568) + _475;
    float _768 = (((_710 - _503) * _566) + _503) + (cbMtdParam._m0[21u].x * _503);
    float _769 = (((_711 - _504) * _567) + _504) + (cbMtdParam._m0[21u].x * _504);
    float _780 = (((_748 - _768) + (_768 * cbMtdParam._m0[22u].z)) * _621) + _768;
    float _781 = (((_749 - _769) + (_769 * cbMtdParam._m0[22u].z)) * _621) + _769;
    float _782 = (_621 * (sqrt(1.0 - (isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0)))) - _765)) + _765;
    float _784 = cbMtdParam._m0[22u].x + _491.w;
    float _787 = fma(_782, _237, fma(_781, _244, _780 * _230));
    float _790 = fma(_782, _238, fma(_781, _245, _780 * _231));
    float _793 = fma(_782, _239, fma(_781, _246, _780 * _232));
    float _797 = inversesqrt(dot(vec3(_787, _790, _793), vec3(_787, _790, _793)));
    float _798 = _797 * _787;
    float _799 = _797 * _790;
    float _800 = _797 * _793;
    float _3738 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    float _801 = isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0));
    float _3749 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _3760 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _3771 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _3782 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _3793 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    float _806 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
    float _820 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _860 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _870 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _860);
    float _871 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _860);
    float _872 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _860);
    float _876 = inversesqrt(dot(vec3(_870, _871, _872), vec3(_870, _871, _872)));
    float _877 = _870 * _876;
    float _878 = _871 * _876;
    float _879 = _872 * _876;
    float _885 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _886 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _904 = fma(_800, cbSceneParam._m0[5u].z, fma(_799, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _798));
    float _907 = fma(_800, cbSceneParam._m0[6u].z, fma(_799, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _798));
    float _910 = fma(_800, cbSceneParam._m0[7u].z, fma(_799, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _798));
    uint _924 = (_249 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _930 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0)))) * cbInstanceData._m0[_924].x;
    float _931 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0)))) * cbInstanceData._m0[_924].y;
    float _932 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0)))) * cbInstanceData._m0[_924].z;
    float _3804 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
    float _933 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
    float _3815 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
    float _934 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
    float _3826 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
    float _935 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
    float _936 = 1.0 - _806;
    float _937 = _933 * _936;
    float _938 = _934 * _936;
    float _939 = _935 * _936;
    float _944 = (_933 + (-0.039999999105930328369140625)) * _806;
    float _945 = (_934 + (-0.039999999105930328369140625)) * _806;
    float _946 = (_935 + (-0.039999999105930328369140625)) * _806;
    float _947 = _944 + 0.039999999105930328369140625;
    float _949 = _945 + 0.039999999105930328369140625;
    float _950 = _946 + 0.039999999105930328369140625;
    vec4 _959 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _885, cbSceneParam._m0[86u].y * _886));
    float _963 = ((isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0))) * TEXCOORD_5.w) * _959.x;
    float _964 = dot(vec3(_798, _799, _800), vec3(_877, _878, _879));
    float _967 = _964 * 2.0;
    float _971 = (_967 * _798) - _877;
    float _972 = (_967 * _799) - _878;
    float _973 = (_967 * _800) - _879;
    float _977 = abs(dot(vec3(_877, _878, _879), vec3(_798, _799, _800)));
    float _3837 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
    float _979 = sqrt(_801);
    float _992 = exp2((_979 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_979 * 3.0));
    float _998 = (1.0 - _992) * ((_979 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _999 = _992 * _979;
    float _1027 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1031 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1035 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1336;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1061 = fma(_1035, cbModelParam._m0[26u].z, fma(_1031, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1027));
        float _1065 = fma(_1035, cbModelParam._m0[27u].z, fma(_1031, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1027));
        float _1069 = fma(_1035, cbModelParam._m0[28u].z, fma(_1031, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1027));
        float _1094 = _1027 + _798;
        float _1095 = _1031 + _799;
        float _1096 = _1035 + _800;
        float _1106 = fma(_1096, cbModelParam._m0[26u].z, fma(_1095, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1094)) - _1061;
        float _1107 = fma(_1096, cbModelParam._m0[27u].z, fma(_1095, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1094)) - _1065;
        float _1108 = fma(_1096, cbModelParam._m0[28u].z, fma(_1095, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1094)) - _1069;
        float _1112 = inversesqrt(dot(vec3(_1106, _1107, _1108), vec3(_1106, _1107, _1108)));
        float _1125 = ((_1112 * _1106) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1061 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1126 = ((_1112 * _1107) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1065 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1127 = ((_1112 * _1108) / cbModelParam._m0[34u].z) + ((((((_1069 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1130 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1125, _1126, _1127), 0.0);
        vec4 _1137 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1125, _1126, _1127), 0.0);
        vec4 _1144 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1125, _1126, _1127), 0.0);
        vec4 _1151 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1125, _1126, _1127), 0.0);
        float _1164 = exp2((_1130.w + (-0.5)) * 20.0) * 2.0;
        float _1165 = _1164 * (_1130.x + (-0.5));
        float _1166 = _1164 * (_1130.y + (-0.5));
        float _1167 = _1164 * (_1130.z + (-0.5));
        float _1174 = exp2((_1137.w + (-0.5)) * 20.0) * 2.0;
        float _1175 = _1174 * (_1137.x + (-0.5));
        float _1176 = _1174 * (_1137.y + (-0.5));
        float _1177 = _1174 * (_1137.z + (-0.5));
        float _1184 = exp2((_1144.w + (-0.5)) * 20.0) * 2.0;
        float _1185 = _1184 * (_1144.x + (-0.5));
        float _1186 = _1184 * (_1144.y + (-0.5));
        float _1187 = _1184 * (_1144.z + (-0.5));
        float _1194 = exp2((_1151.w + (-0.5)) * 20.0) * 2.0;
        float _1195 = _1194 * (_1151.x + (-0.5));
        float _1196 = _1194 * (_1151.y + (-0.5));
        float _1197 = _1194 * (_1151.z + (-0.5));
        float _1198 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1199 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1200 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1201 = _1165 * 0.5;
        float _1202 = _1175 * 0.5;
        float _1203 = _1185 * 0.5;
        float _1204 = dot(vec3(_1201, _1202, _1203), vec3(_1201, _1202, _1203));
        float _1209 = (_1204 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1204);
        float _1218 = (dot(vec3(_798, _799, _800), vec3(_1209 * _1201, _1209 * _1202, _1209 * _1203)) + 1.0) * 0.5;
        float _3863 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1228 = sqrt(((_1202 * _1202) + (_1201 * _1201)) + (_1203 * _1203)) / (_1198 + 9.9999997473787516355514526367188e-06);
        float _3874 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1229 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
        float _1230 = _1229 * 2.0;
        float _1234 = (1.0 - _1229) / (_1229 + 1.0);
        float _3885 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1235 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
        float _1244 = ((((1.0 - _1235) * (_1230 + 2.0)) * exp2(log2(isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0))) * (_1230 + 1.0))) + _1235) * _1198;
        float _1245 = _1166 * 0.5;
        float _1246 = _1176 * 0.5;
        float _1247 = _1186 * 0.5;
        float _1248 = dot(vec3(_1245, _1246, _1247), vec3(_1245, _1246, _1247));
        float _1253 = (_1248 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1248);
        float _1261 = (dot(vec3(_798, _799, _800), vec3(_1253 * _1245, _1253 * _1246, _1253 * _1247)) + 1.0) * 0.5;
        float _3896 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1270 = sqrt(((_1246 * _1246) + (_1245 * _1245)) + (_1247 * _1247)) / (_1199 + 9.9999997473787516355514526367188e-06);
        float _3907 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1271 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
        float _1272 = _1271 * 2.0;
        float _1276 = (1.0 - _1271) / (_1271 + 1.0);
        float _3918 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1277 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
        float _1286 = ((((1.0 - _1277) * (_1272 + 2.0)) * exp2(log2(isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0))) * (_1272 + 1.0))) + _1277) * _1199;
        float _1287 = _1167 * 0.5;
        float _1288 = _1177 * 0.5;
        float _1289 = _1187 * 0.5;
        float _1290 = dot(vec3(_1287, _1288, _1289), vec3(_1287, _1288, _1289));
        float _1295 = (_1290 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1290);
        float _1303 = (dot(vec3(_798, _799, _800), vec3(_1295 * _1287, _1295 * _1288, _1295 * _1289)) + 1.0) * 0.5;
        float _3929 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1312 = sqrt(((_1288 * _1288) + (_1287 * _1287)) + (_1289 * _1289)) / (_1200 + 9.9999997473787516355514526367188e-06);
        float _3940 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1313 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
        float _1314 = _1313 * 2.0;
        float _1318 = (1.0 - _1313) / (_1313 + 1.0);
        float _3951 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1319 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
        float _1328 = ((((1.0 - _1319) * (_1314 + 2.0)) * exp2(log2(isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0))) * (_1314 + 1.0))) + _1319) * _1200;
        _1336 = _1167;
        _1338 = _1166;
        _1339 = _1165;
        _1340 = _1177;
        _1341 = _1176;
        _1342 = _1175;
        _1343 = _1187;
        _1344 = _1186;
        _1345 = _1185;
        _1346 = _1200;
        _1347 = _1199;
        _1348 = _1198;
        _1349 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0)));
        _1350 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0)));
        _1351 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0)));
    }
    else
    {
        _1336 = _1337;
        _1338 = _1337;
        _1339 = _1337;
        _1340 = _1337;
        _1341 = _1337;
        _1342 = _1337;
        _1343 = _1337;
        _1344 = _1337;
        _1345 = _1337;
        _1346 = _1337;
        _1347 = _1337;
        _1348 = _1337;
        _1349 = 0.0;
        _1350 = 0.0;
        _1351 = 0.0;
    }
    float _1645;
    float _1646;
    float _1647;
    float _1648;
    float _1649;
    float _1650;
    float _1651;
    float _1652;
    float _1653;
    float _1654;
    float _1655;
    float _1656;
    float _1657;
    float _1658;
    float _1659;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1376 = fma(_1035, cbModelParam._m0[30u].z, fma(_1031, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1027));
        float _1380 = fma(_1035, cbModelParam._m0[31u].z, fma(_1031, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1027));
        float _1384 = fma(_1035, cbModelParam._m0[32u].z, fma(_1031, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1027));
        float _1407 = _1027 + _798;
        float _1408 = _1031 + _799;
        float _1409 = _1035 + _800;
        float _1419 = fma(_1409, cbModelParam._m0[30u].z, fma(_1408, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1407)) - _1376;
        float _1420 = fma(_1409, cbModelParam._m0[31u].z, fma(_1408, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1407)) - _1380;
        float _1421 = fma(_1409, cbModelParam._m0[32u].z, fma(_1408, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1407)) - _1384;
        float _1425 = inversesqrt(dot(vec3(_1419, _1420, _1421), vec3(_1419, _1420, _1421)));
        float _1438 = ((_1425 * _1419) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1376 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1439 = ((_1425 * _1420) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1380 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1440 = ((_1425 * _1421) / cbModelParam._m0[35u].z) + ((((((_1384 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1442 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1438, _1439, _1440), 0.0);
        vec4 _1449 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1438, _1439, _1440), 0.0);
        vec4 _1456 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1438, _1439, _1440), 0.0);
        vec4 _1463 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1438, _1439, _1440), 0.0);
        float _1475 = exp2((_1442.w + (-0.5)) * 20.0) * 2.0;
        float _1476 = _1475 * (_1442.x + (-0.5));
        float _1477 = _1475 * (_1442.y + (-0.5));
        float _1478 = _1475 * (_1442.z + (-0.5));
        float _1485 = exp2((_1449.w + (-0.5)) * 20.0) * 2.0;
        float _1486 = _1485 * (_1449.x + (-0.5));
        float _1487 = _1485 * (_1449.y + (-0.5));
        float _1488 = _1485 * (_1449.z + (-0.5));
        float _1495 = exp2((_1456.w + (-0.5)) * 20.0) * 2.0;
        float _1496 = _1495 * (_1456.x + (-0.5));
        float _1497 = _1495 * (_1456.y + (-0.5));
        float _1498 = _1495 * (_1456.z + (-0.5));
        float _1505 = exp2((_1463.w + (-0.5)) * 20.0) * 2.0;
        float _1506 = _1505 * (_1463.x + (-0.5));
        float _1507 = _1505 * (_1463.y + (-0.5));
        float _1508 = _1505 * (_1463.z + (-0.5));
        float _1509 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1510 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1511 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1512 = _1476 * 0.5;
        float _1513 = _1486 * 0.5;
        float _1514 = _1496 * 0.5;
        float _1515 = dot(vec3(_1512, _1513, _1514), vec3(_1512, _1513, _1514));
        float _1520 = (_1515 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1515);
        float _1528 = (dot(vec3(_798, _799, _800), vec3(_1520 * _1512, _1520 * _1513, _1520 * _1514)) + 1.0) * 0.5;
        float _3992 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1537 = sqrt(((_1513 * _1513) + (_1512 * _1512)) + (_1514 * _1514)) / (_1509 + 9.9999997473787516355514526367188e-06);
        float _4003 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1538 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
        float _1539 = _1538 * 2.0;
        float _1543 = (1.0 - _1538) / (_1538 + 1.0);
        float _4014 = isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0));
        float _1544 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
        float _1553 = ((((1.0 - _1544) * (_1539 + 2.0)) * exp2(log2(isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0))) * (_1539 + 1.0))) + _1544) * _1509;
        float _1554 = _1477 * 0.5;
        float _1555 = _1487 * 0.5;
        float _1556 = _1497 * 0.5;
        float _1557 = dot(vec3(_1554, _1555, _1556), vec3(_1554, _1555, _1556));
        float _1562 = (_1557 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1557);
        float _1570 = (dot(vec3(_798, _799, _800), vec3(_1562 * _1554, _1562 * _1555, _1562 * _1556)) + 1.0) * 0.5;
        float _4025 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1579 = sqrt(((_1555 * _1555) + (_1554 * _1554)) + (_1556 * _1556)) / (_1510 + 9.9999997473787516355514526367188e-06);
        float _4036 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1580 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
        float _1581 = _1580 * 2.0;
        float _1585 = (1.0 - _1580) / (_1580 + 1.0);
        float _4047 = isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0));
        float _1586 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
        float _1595 = ((((1.0 - _1586) * (_1581 + 2.0)) * exp2(log2(isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0))) * (_1581 + 1.0))) + _1586) * _1510;
        float _1596 = _1478 * 0.5;
        float _1597 = _1488 * 0.5;
        float _1598 = _1498 * 0.5;
        float _1599 = dot(vec3(_1596, _1597, _1598), vec3(_1596, _1597, _1598));
        float _1604 = (_1599 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1599);
        float _1612 = (dot(vec3(_798, _799, _800), vec3(_1604 * _1596, _1604 * _1597, _1604 * _1598)) + 1.0) * 0.5;
        float _4058 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
        float _1621 = sqrt(((_1597 * _1597) + (_1596 * _1596)) + (_1598 * _1598)) / (_1511 + 9.9999997473787516355514526367188e-06);
        float _4069 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
        float _1622 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
        float _1623 = _1622 * 2.0;
        float _1627 = (1.0 - _1622) / (_1622 + 1.0);
        float _4080 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
        float _1628 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
        float _1637 = ((((1.0 - _1628) * (_1623 + 2.0)) * exp2(log2(isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0))) * (_1623 + 1.0))) + _1628) * _1511;
        _1645 = _1478;
        _1646 = _1477;
        _1647 = _1476;
        _1648 = _1488;
        _1649 = _1487;
        _1650 = _1486;
        _1651 = _1498;
        _1652 = _1497;
        _1653 = _1496;
        _1654 = _1511;
        _1655 = _1510;
        _1656 = _1509;
        _1657 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0)));
        _1658 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0)));
        _1659 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0)));
    }
    else
    {
        _1645 = _1337;
        _1646 = _1337;
        _1647 = _1337;
        _1648 = _1337;
        _1649 = _1337;
        _1650 = _1337;
        _1651 = _1337;
        _1652 = _1337;
        _1653 = _1337;
        _1654 = _1337;
        _1655 = _1337;
        _1656 = _1337;
        _1657 = 0.0;
        _1658 = 0.0;
        _1659 = 0.0;
    }
    float _1669 = (cbModelParam._m0[1u].x * (_1657 - _1349)) + _1349;
    float _1670 = (cbModelParam._m0[1u].x * (_1658 - _1350)) + _1350;
    float _1671 = (cbModelParam._m0[1u].x * (_1659 - _1351)) + _1351;
    float _1692 = fma(_1671, cbSceneParam._m0[89u].z, fma(_1670, cbSceneParam._m0[89u].y, _1669 * cbSceneParam._m0[89u].x));
    float _1695 = fma(_1671, cbSceneParam._m0[90u].z, fma(_1670, cbSceneParam._m0[90u].y, _1669 * cbSceneParam._m0[90u].x));
    float _1698 = fma(_1671, cbSceneParam._m0[91u].z, fma(_1670, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1669));
    float _1713 = _971 * 0.5;
    float _1714 = _972 * 0.5;
    float _1715 = _973 * 0.5;
    float _1716 = dot(vec4(_1713, _1714, _1715, 1.0), vec4(_1647, _1650, _1653, _1656));
    float _1719 = dot(vec4(_1713, _1714, _1715, 1.0), vec4(_1646, _1649, _1652, _1655));
    float _1722 = dot(vec4(_1713, _1714, _1715, 1.0), vec4(_1645, _1648, _1651, _1654));
    float _1756;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1729 = dot(vec4(_1713, _1714, _1715, 1.0), vec4(_1336, _1340, _1343, _1346));
        float _1733 = dot(vec4(_1713, _1714, _1715, 1.0), vec4(_1338, _1341, _1344, _1347));
        float _1737 = dot(vec4(_1713, _1714, _1715, 1.0), vec4(_1339, _1342, _1345, _1348));
        float _1744 = dot(vec4(cbModelParam._m0[39u]), vec4(_1713, _1714, _1715, 1.0));
        _1756 = dot(vec3(isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0)), isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0)), isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1744) ? 0.0 : (isnan(0.0) ? _1744 : max(0.0, _1744))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1756 = 1.0;
    }
    float _1767;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1758 = dot(vec4(cbModelParam._m0[40u]), vec4(_1713, _1714, _1715, 1.0));
        _1767 = dot(vec3(isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0)), isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0)), isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1758) ? 0.0 : (isnan(0.0) ? _1758 : max(0.0, _1758))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1767 = 1.0;
    }
    float _1771 = (_1767 * cbModelParam._m0[1u].x) + (_1756 * (1.0 - cbModelParam._m0[1u].x));
    float _1781 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _801);
    float _1782 = isnan(_1781) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1781 : min(cbModelParam._m0[25u].z, _1781));
    float _1862;
    float _1864;
    float _1866;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1829 = fma(_1035, cbModelParam._m0[13u].z, fma(_1031, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1027)) + cbModelParam._m0[13u].w;
        float _1833 = fma(_1035, cbModelParam._m0[14u].z, fma(_1031, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1027)) + cbModelParam._m0[14u].w;
        float _1837 = fma(_1035, cbModelParam._m0[15u].z, fma(_1031, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1027)) + cbModelParam._m0[15u].w;
        float _1840 = fma(_973, cbModelParam._m0[13u].z, fma(_972, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _971));
        float _1843 = fma(_973, cbModelParam._m0[14u].z, fma(_972, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _971));
        float _1846 = fma(_973, cbModelParam._m0[15u].z, fma(_972, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _971));
        float _1874;
        if (_1840 > 0.0)
        {
            _1874 = abs((1.0 - _1829) / _1840);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1840 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1829 + 1.0) / _1840);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1874 = frontier_phi_14_12_ladder;
        }
        float _2076;
        if (_1843 > 0.0)
        {
            _2076 = abs((1.0 - _1833) / _1843);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1843 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1833 + 1.0) / _1843);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2076 = frontier_phi_23_19_ladder;
        }
        float _2330;
        if (_1846 > 0.0)
        {
            _2330 = abs((1.0 - _1837) / _1846);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1846 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1837 + 1.0) / _1846);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2330 = frontier_phi_35_30_ladder;
        }
        float _2332 = isnan(_2076) ? _1874 : (isnan(_1874) ? _2076 : min(_1874, _2076));
        float _2333 = isnan(_2330) ? _2332 : (isnan(_2332) ? _2330 : min(_2332, _2330));
        float _2337 = (_2333 * _1840) + _1829;
        float _2338 = (_2333 * _1843) + _1833;
        float _2339 = (_2333 * _1846) + _1837;
        float _2340 = _2333 * 9.9999997473787516355514526367188e-05;
        float _2342 = (-1.0) - _2340;
        float _2344 = _2340 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2339 > _2344) || ((_2339 < _2342) || ((_2338 > _2344) || ((_2338 < _2342) || ((_2337 < _2342) || (_2337 > _2344))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2467 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2339, cbModelParam._m0[9u].z, fma(_2338, cbModelParam._m0[9u].y, _2337 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2339, cbModelParam._m0[10u].z, fma(_2338, cbModelParam._m0[10u].y, _2337 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2339, cbModelParam._m0[11u].z, fma(_2338, cbModelParam._m0[11u].y, _2337 * cbModelParam._m0[11u].x))), _1782);
            frontier_phi_13_35_ladder = _2467.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2467.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2467.x * cbModelParam._m0[1u].y;
        }
        _1862 = frontier_phi_13_35_ladder_2;
        _1864 = frontier_phi_13_35_ladder_1;
        _1866 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1850 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_971, _972, _973), _1782);
        _1862 = _1850.x * cbModelParam._m0[1u].y;
        _1864 = _1850.y * cbModelParam._m0[1u].y;
        _1866 = _1850.z * cbModelParam._m0[1u].y;
    }
    float _1870 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _801);
    float _1871 = isnan(_1870) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1870 : min(cbModelParam._m0[25u].w, _1870));
    float _1960;
    float _1962;
    float _1964;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1924 = fma(_1035, cbModelParam._m0[21u].z, fma(_1031, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1027)) + cbModelParam._m0[21u].w;
        float _1928 = fma(_1035, cbModelParam._m0[22u].z, fma(_1031, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1027)) + cbModelParam._m0[22u].w;
        float _1932 = fma(_1035, cbModelParam._m0[23u].z, fma(_1031, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1027)) + cbModelParam._m0[23u].w;
        float _1935 = fma(_973, cbModelParam._m0[21u].z, fma(_972, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _971));
        float _1938 = fma(_973, cbModelParam._m0[22u].z, fma(_972, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _971));
        float _1941 = fma(_973, cbModelParam._m0[23u].z, fma(_972, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _971));
        float _2081;
        if (_1935 > 0.0)
        {
            _2081 = abs((1.0 - _1924) / _1935);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1935 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1924 + 1.0) / _1935);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2081 = frontier_phi_25_21_ladder;
        }
        float _2357;
        if (_1938 > 0.0)
        {
            _2357 = abs((1.0 - _1928) / _1938);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1938 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1928 + 1.0) / _1938);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2357 = frontier_phi_37_32_ladder;
        }
        float _2570;
        if (_1941 > 0.0)
        {
            _2570 = abs((1.0 - _1932) / _1941);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1941 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1932 + 1.0) / _1941);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2570 = frontier_phi_46_43_ladder;
        }
        float _2572 = isnan(_2357) ? _2081 : (isnan(_2081) ? _2357 : min(_2081, _2357));
        float _2573 = isnan(_2570) ? _2572 : (isnan(_2572) ? _2570 : min(_2572, _2570));
        float _2577 = (_2573 * _1935) + _1924;
        float _2578 = (_2573 * _1938) + _1928;
        float _2579 = (_2573 * _1941) + _1932;
        float _2580 = _2573 * 9.9999997473787516355514526367188e-05;
        float _2581 = (-1.0) - _2580;
        float _2583 = _2580 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2579 > _2583) || ((_2579 < _2581) || ((_2578 > _2583) || ((_2578 < _2581) || ((_2577 < _2581) || (_2577 > _2583))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2778 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2579, cbModelParam._m0[17u].z, fma(_2578, cbModelParam._m0[17u].y, _2577 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2579, cbModelParam._m0[18u].z, fma(_2578, cbModelParam._m0[18u].y, _2577 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2579, cbModelParam._m0[19u].z, fma(_2578, cbModelParam._m0[19u].y, _2577 * cbModelParam._m0[19u].x))), _1871);
            frontier_phi_22_46_ladder = _2778.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2778.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2778.x * cbModelParam._m0[1u].z;
        }
        _1960 = frontier_phi_22_46_ladder_2;
        _1962 = frontier_phi_22_46_ladder_1;
        _1964 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1944 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_971, _972, _973), _1871);
        _1960 = _1944.x * cbModelParam._m0[1u].z;
        _1962 = _1944.y * cbModelParam._m0[1u].z;
        _1964 = _1944.z * cbModelParam._m0[1u].z;
    }
    float _1977 = (((_998 * _947) + _999) * _963) * ((cbModelParam._m0[1u].w * (_1960 - _1862)) + _1862);
    float _1979 = (((_998 * _949) + _999) * _963) * ((cbModelParam._m0[1u].w * (_1962 - _1864)) + _1864);
    float _1981 = (((_998 * _950) + _999) * _963) * ((cbModelParam._m0[1u].w * (_1964 - _1866)) + _1866);
    float _1984 = fma(_1981, cbSceneParam._m0[89u].z, fma(_1979, cbSceneParam._m0[89u].y, _1977 * cbSceneParam._m0[89u].x));
    float _1987 = fma(_1981, cbSceneParam._m0[90u].z, fma(_1979, cbSceneParam._m0[90u].y, _1977 * cbSceneParam._m0[90u].x));
    float _1990 = fma(_1981, cbSceneParam._m0[91u].z, fma(_1979, cbSceneParam._m0[91u].y, _1977 * cbSceneParam._m0[91u].x));
    uvec4 _2000 = floatBitsToUint(cbInstanceData._m0[_249 + 5u]);
    uint _2002 = _2000.x * 14u;
    uint _2003 = _2002 + 13u;
    float _2010 = _963 + (-1.0);
    float _2015 = (cbLight._m0[_2003].x * _2010) + 1.0;
    float _2016 = (cbLight._m0[_2003].y * _2010) + 1.0;
    float _2017 = (cbLight._m0[_2003].z * _2010) + 1.0;
    float _2018 = (cbLight._m0[_2003].w * _2010) + 1.0;
    uint _2019 = _2002 + 5u;
    float _2025 = isnan(1.0) ? _2016 : (isnan(_2016) ? 1.0 : min(_2016, 1.0));
    uint _2029 = _2002 + 4u;
    float _2035 = isnan(1.0) ? _2015 : (isnan(_2015) ? 1.0 : min(_2015, 1.0));
    uint _2039 = _2002 | 1u;
    float _2050 = dot(vec3(cbLight._m0[_2002].xyz), vec3(_798, _799, _800));
    float _2053 = dot(vec3(cbLight._m0[_2039].xyz), vec3(_798, _799, _800));
    float _4216 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
    float _4227 = isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0));
    float _2058 = (isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0))) * 0.3183098733425140380859375;
    float _2060 = (isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0))) * 0.3183098733425140380859375;
    float _2067 = ((cbLight._m0[_2019].x * _2025) * _2060) + ((cbLight._m0[_2029].x * _2035) * _2058);
    float _2068 = ((_2025 * cbLight._m0[_2019].y) * _2060) + ((_2035 * cbLight._m0[_2029].y) * _2058);
    float _2069 = ((_2025 * cbLight._m0[_2019].z) * _2060) + ((_2035 * cbLight._m0[_2029].z) * _2058);
    uvec4 _2073 = floatBitsToUint(cbLight._m0[_2002 + 12u]);
    bool _2075 = _2073.x == 0u;
    float _2086;
    float _2088;
    float _2090;
    if (_2075)
    {
        _2086 = _2067;
        _2088 = _2068;
        _2090 = _2069;
    }
    else
    {
        uint _2094 = _2002 + 6u;
        float _2110 = (dot(vec3(cbLight._m0[_2002 + 2u].xyz), vec3(_798, _799, _800)) * 0.5) + 0.5;
        float _2111 = _2110 * _2110;
        float _4238 = isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0));
        float _2112 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
        float _2113 = isnan(1.0) ? _2017 : (isnan(_2017) ? 1.0 : min(_2017, 1.0));
        _2086 = (((cbLight._m0[_2094].x * 0.3183098733425140380859375) * _2112) * _2113) + _2067;
        _2088 = (((cbLight._m0[_2094].y * 0.3183098733425140380859375) * _2112) * _2113) + _2068;
        _2090 = (((cbLight._m0[_2094].z * 0.3183098733425140380859375) * _2112) * _2113) + _2069;
    }
    bool _2093 = _2073.y == 0u;
    float _2131;
    float _2133;
    float _2135;
    if (_2093)
    {
        _2131 = _2086;
        _2133 = _2088;
        _2135 = _2090;
    }
    else
    {
        uint _2301 = _2002 + 7u;
        float _2317 = (dot(vec3(cbLight._m0[_2002 + 3u].xyz), vec3(_798, _799, _800)) * 0.5) + 0.5;
        float _2318 = _2317 * _2317;
        float _4254 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
        float _2319 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
        float _2320 = isnan(1.0) ? _2018 : (isnan(_2018) ? 1.0 : min(_2018, 1.0));
        _2131 = (((cbLight._m0[_2301].x * 0.3183098733425140380859375) * _2319) * _2320) + _2086;
        _2133 = (((cbLight._m0[_2301].y * 0.3183098733425140380859375) * _2319) * _2320) + _2088;
        _2135 = (((cbLight._m0[_2301].z * 0.3183098733425140380859375) * _2319) * _2320) + _2090;
    }
    uint _2138 = _2002 + 8u;
    float _2151 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2002].w)) * _801) * 0.949999988079071044921875);
    float _2152 = _2151 * _2151;
    float _2153 = cbLight._m0[_2002].x + _877;
    float _2154 = cbLight._m0[_2002].y + _878;
    float _2155 = cbLight._m0[_2002].z + _879;
    float _2159 = inversesqrt(dot(vec3(_2153, _2154, _2155), vec3(_2153, _2154, _2155)));
    float _2160 = _2159 * _2153;
    float _2161 = _2159 * _2154;
    float _2162 = _2159 * _2155;
    float _2163 = dot(vec3(_798, _799, _800), vec3(cbLight._m0[_2002].xyz));
    float _4270 = isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0));
    float _2166 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
    float _4281 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
    float _2167 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
    float _2168 = dot(vec3(_798, _799, _800), vec3(_2160, _2161, _2162));
    float _4292 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
    float _2171 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
    float _2172 = dot(vec3(cbLight._m0[_2002].xyz), vec3(_2160, _2161, _2162));
    float _4303 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
    float _2176 = _2152 * _2152;
    float _2180 = ((_2171 * _2171) * (_2176 + (-1.0))) + 1.0;
    float _2188 = exp2(log2(1.0 - (isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0)))) * 5.0);
    float _2189 = 0.959999978542327880859375 - _944;
    float _2191 = 0.959999978542327880859375 - _945;
    float _2192 = 0.959999978542327880859375 - _946;
    float _2199 = 1.0 - _2152;
    float _2210 = (0.5 / (((_2167 * ((_2166 * _2199) + _2152)) + 9.9999999392252902907785028219223e-09) + (((_2167 * _2199) + _2152) * _2166))) * _2166;
    float _4314 = isnan(0.0) ? _2210 : (isnan(_2210) ? 0.0 : max(_2210, 0.0));
    float _2212 = (isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0))) * (_2176 / ((_2180 * _2180) * 3.141590118408203125));
    uint _2223 = _2002 + 9u;
    float _2234 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2039].w)) * _801) * 0.949999988079071044921875);
    float _2235 = _2234 * _2234;
    float _2236 = cbLight._m0[_2039].x + _877;
    float _2237 = cbLight._m0[_2039].y + _878;
    float _2238 = cbLight._m0[_2039].z + _879;
    float _2242 = inversesqrt(dot(vec3(_2236, _2237, _2238), vec3(_2236, _2237, _2238)));
    float _2243 = _2242 * _2236;
    float _2244 = _2242 * _2237;
    float _2245 = _2242 * _2238;
    float _2246 = dot(vec3(_798, _799, _800), vec3(cbLight._m0[_2039].xyz));
    float _4325 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
    float _2249 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
    float _2250 = dot(vec3(_798, _799, _800), vec3(_2243, _2244, _2245));
    float _4336 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
    float _2253 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
    float _2254 = dot(vec3(cbLight._m0[_2039].xyz), vec3(_2243, _2244, _2245));
    float _4347 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
    float _2258 = _2235 * _2235;
    float _2262 = ((_2253 * _2253) * (_2258 + (-1.0))) + 1.0;
    float _2269 = exp2(log2(1.0 - (isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0)))) * 5.0);
    float _2276 = 1.0 - _2235;
    float _2286 = (0.5 / (((_2167 * ((_2249 * _2276) + _2235)) + 9.9999999392252902907785028219223e-09) + (((_2167 * _2276) + _2235) * _2249))) * _2249;
    float _4358 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
    float _2288 = (isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0))) * (_2258 / ((_2262 * _2262) * 3.141590118408203125));
    float _2298 = (((((_2269 * _2189) + _947) * cbLight._m0[_2223].x) * _2288) * _2025) + (((((_2188 * _2189) + _947) * cbLight._m0[_2138].x) * _2212) * _2035);
    float _2299 = (((((_2269 * _2191) + _949) * cbLight._m0[_2223].y) * _2288) * _2025) + (((((_2188 * _2191) + _949) * cbLight._m0[_2138].y) * _2212) * _2035);
    float _2300 = (((((_2269 * _2192) + _950) * cbLight._m0[_2223].z) * _2288) * _2025) + (((((_2188 * _2192) + _950) * cbLight._m0[_2138].z) * _2212) * _2035);
    float _2362;
    float _2364;
    float _2366;
    if (_2075)
    {
        _2362 = _2298;
        _2364 = _2299;
        _2366 = _2300;
    }
    else
    {
        uint _2368 = _2002 + 2u;
        uint _2372 = _2002 + 10u;
        float _2386 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2368].w)) * _801) * 0.949999988079071044921875);
        float _2387 = _2386 * _2386;
        float _2388 = cbLight._m0[_2368].x + _877;
        float _2389 = cbLight._m0[_2368].y + _878;
        float _2390 = cbLight._m0[_2368].z + _879;
        float _2394 = inversesqrt(dot(vec3(_2388, _2389, _2390), vec3(_2388, _2389, _2390)));
        float _2395 = _2394 * _2388;
        float _2396 = _2394 * _2389;
        float _2397 = _2394 * _2390;
        float _2398 = dot(vec3(_798, _799, _800), vec3(cbLight._m0[_2368].xyz));
        float _4369 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
        float _2401 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
        float _2402 = dot(vec3(_798, _799, _800), vec3(_2395, _2396, _2397));
        float _4380 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
        float _2405 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
        float _2406 = dot(vec3(cbLight._m0[_2368].xyz), vec3(_2395, _2396, _2397));
        float _4391 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0));
        float _2410 = _2387 * _2387;
        float _2414 = ((_2405 * _2405) * (_2410 + (-1.0))) + 1.0;
        float _2421 = exp2(log2(1.0 - (isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0)))) * 5.0);
        float _2428 = 1.0 - _2387;
        float _2438 = (0.5 / (((_2167 * ((_2401 * _2428) + _2387)) + 9.9999999392252902907785028219223e-09) + (((_2167 * _2428) + _2387) * _2401))) * _2401;
        float _4402 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
        float _2440 = (isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0))) * (_2410 / ((_2414 * _2414) * 3.141590118408203125));
        float _2441 = isnan(1.0) ? _2017 : (isnan(_2017) ? 1.0 : min(_2017, 1.0));
        _2362 = (((((_2421 * _2189) + _947) * cbLight._m0[_2372].x) * _2440) * _2441) + _2298;
        _2364 = (((((_2421 * _2191) + _949) * cbLight._m0[_2372].y) * _2440) * _2441) + _2299;
        _2366 = (((((_2421 * _2192) + _950) * cbLight._m0[_2372].z) * _2440) * _2441) + _2300;
    }
    float _2476;
    float _2478;
    float _2480;
    if (_2093)
    {
        _2476 = _2362;
        _2478 = _2364;
        _2480 = _2366;
    }
    else
    {
        uint _2487 = _2002 + 3u;
        uint _2491 = _2002 + 11u;
        float _2505 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2487].w)) * _801) * 0.949999988079071044921875);
        float _2506 = _2505 * _2505;
        float _2507 = cbLight._m0[_2487].x + _877;
        float _2508 = cbLight._m0[_2487].y + _878;
        float _2509 = cbLight._m0[_2487].z + _879;
        float _2513 = inversesqrt(dot(vec3(_2507, _2508, _2509), vec3(_2507, _2508, _2509)));
        float _2514 = _2513 * _2507;
        float _2515 = _2513 * _2508;
        float _2516 = _2513 * _2509;
        float _2517 = dot(vec3(_798, _799, _800), vec3(cbLight._m0[_2487].xyz));
        float _4418 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0));
        float _2520 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
        float _2521 = dot(vec3(_798, _799, _800), vec3(_2514, _2515, _2516));
        float _4429 = isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : max(_2521, 0.0));
        float _2524 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
        float _2525 = dot(vec3(cbLight._m0[_2487].xyz), vec3(_2514, _2515, _2516));
        float _4440 = isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : max(_2525, 0.0));
        float _2529 = _2506 * _2506;
        float _2533 = ((_2524 * _2524) * (_2529 + (-1.0))) + 1.0;
        float _2540 = exp2(log2(1.0 - (isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0)))) * 5.0);
        float _2547 = 1.0 - _2506;
        float _2557 = (0.5 / (((_2167 * ((_2520 * _2547) + _2506)) + 9.9999999392252902907785028219223e-09) + (((_2167 * _2547) + _2506) * _2520))) * _2520;
        float _4451 = isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : max(_2557, 0.0));
        float _2559 = (isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0))) * (_2529 / ((_2533 * _2533) * 3.141590118408203125));
        float _2560 = isnan(1.0) ? _2018 : (isnan(_2018) ? 1.0 : min(_2018, 1.0));
        _2476 = (((((_2540 * _2189) + _947) * cbLight._m0[_2491].x) * _2559) * _2560) + _2362;
        _2478 = (((((_2540 * _2191) + _949) * cbLight._m0[_2491].y) * _2559) * _2560) + _2364;
        _2480 = (((((_2540 * _2192) + _950) * cbLight._m0[_2491].z) * _2559) * _2560) + _2366;
    }
    float _2695;
    float _2697;
    float _2699;
    float _2701;
    float _2703;
    float _2705;
    if (_2000.y == 0u)
    {
        float _2635 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2636 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2635;
        float _2637 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2635;
        float _2638 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2635;
        uvec4 _2650 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2651 = _2650.x;
        uint _2662 = uint((float(_2650.y) * floor(float(uint(cbSceneParam._m0[85u].y * _886) / _2651))) + floor(float(uint(cbSceneParam._m0[85u].x * _885) / _2651)));
        float _2672 = (log2(_2638 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2673 = isnan(0.0) ? _2672 : (isnan(_2672) ? 0.0 : max(_2672, 0.0));
        uint _2676 = uint(isnan(14.0) ? _2673 : (isnan(_2673) ? 14.0 : min(_2673, 14.0)));
        uvec4 _2681 = texelFetch(g_lightClusterGridBuffer, int(((_2676 << 2u) + (_2662 << 6u)) >> 2u));
        uint _2682 = _2681.x;
        uint _2683 = _2650.z;
        float _2783;
        float _2785;
        float _2787;
        float _2789;
        float _2791;
        float _2793;
        if (((((1u << ((_2683 >> 4u) & 15u)) + 4294967295u) & _2682) == 0u) || ((_2683 & 240u) == 0u))
        {
            _2783 = 0.0;
            _2785 = 0.0;
            _2787 = 0.0;
            _2789 = 0.0;
            _2791 = 0.0;
            _2793 = 0.0;
        }
        else
        {
            float _2784;
            float _2786;
            float _2788;
            float _2790;
            float _2792;
            float _2794;
            float _2927 = 0.0;
            float _2928 = 0.0;
            float _2929 = 0.0;
            float _2930 = 0.0;
            float _2931 = 0.0;
            float _2932 = 0.0;
            uint _2933 = 0u;
            uint _2942;
            bool _2943;
            for (;;)
            {
                _2942 = texelFetch(g_lightClassification, int((((_2676 << 5u) + (_2662 << 9u)) + (_2933 << 2u)) >> 2u)).x;
                _2943 = _2942 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2943)
                {
                    frontier_phi_61_pred = _2927;
                    frontier_phi_61_pred_1 = _2932;
                    frontier_phi_61_pred_2 = _2931;
                    frontier_phi_61_pred_3 = _2930;
                    frontier_phi_61_pred_4 = _2929;
                    frontier_phi_61_pred_5 = _2928;
                }
                else
                {
                    float _3051;
                    float _3052;
                    float _3053;
                    float _3054;
                    float _3055;
                    float _3056;
                    uint _3057;
                    _3051 = _2927;
                    _3052 = _2928;
                    _3053 = _2929;
                    _3054 = _2930;
                    _3055 = _2931;
                    _3056 = _2932;
                    _3057 = _2942;
                    float _2983;
                    float _2984;
                    float _2985;
                    float _2986;
                    float _2987;
                    float _2988;
                    for (;;)
                    {
                        uint _3061 = uint(findLSB(_3057)) + (_2933 << 5u);
                        uint _3058 = (_3057 + 4294967295u) & _3057;
                        uint _3063 = _3061 * 48u;
                        vec4 _3077 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3063)).x, texelFetch(g_PointLightRenderingBuffer, int(_3063 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3063 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3063 + 3u)).x));
                        uint _3083 = (_3061 * 48u) + 4u;
                        vec4 _3096 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3083)).x, texelFetch(g_PointLightRenderingBuffer, int(_3083 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3083 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3083 + 3u)).x));
                        uint _3102 = (_3061 * 48u) + 8u;
                        vec3 _3113 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3102)).x, texelFetch(g_PointLightRenderingBuffer, int(_3102 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3102 + 2u)).x));
                        float _3117 = _3077.x - _2636;
                        float _3118 = _3077.y - _2637;
                        float _3119 = _3077.z - _2638;
                        float _3120 = dot(vec3(_3117, _3118, _3119), vec3(_3117, _3118, _3119));
                        float _3123 = inversesqrt(_3120);
                        float _3124 = _3123 * _3117;
                        float _3125 = _3123 * _3118;
                        float _3126 = _3123 * _3119;
                        float _3127 = dot(vec3(_904, _907, _910), vec3(_3124, _3125, _3126));
                        float _3132 = 1.0 - (_3120 * _3077.w);
                        float _4477 = isnan(0.0) ? _3132 : (isnan(_3132) ? 0.0 : max(_3132, 0.0));
                        float _3133 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
                        float _3134 = sqrt(_3120) * _3096.w;
                        float _3137 = 1.39999997615814208984375 / (_3134 + 1.39999997615814208984375);
                        float _3138 = _3137 * _3137;
                        float _3141 = ((1.0 - _3138) * _3127) + _3138;
                        float _3144 = _3134 * _3134;
                        float _3148 = ((isnan(0.0) ? _3141 : (isnan(_3141) ? 0.0 : max(_3141, 0.0))) * _3133) / ((_3144 * 0.699999988079071044921875) + 1.0);
                        float _3152 = (-0.0) - _2636;
                        float _3153 = (-0.0) - _2637;
                        float _3154 = (-0.0) - _2638;
                        float _3158 = inversesqrt(dot(vec3(_3152, _3153, _3154), vec3(_3152, _3153, _3154)));
                        float _3159 = _3158 * _3152;
                        float _3160 = _3158 * _3153;
                        float _3161 = _3158 * _3154;
                        float _3169 = exp2(log2(1.0 / ((_3144 * 3.5) + 5.0)) * 0.25);
                        float _3170 = 1.0 - _979;
                        float _3177 = sqrt(1.0 - ((1.0 - (_3170 * _3170)) * (1.0 - (_3169 * _3169))));
                        float _3178 = _3177 * _3177;
                        float _3179 = _3178 * _3178;
                        float _3180 = _3159 + _3124;
                        float _3181 = _3160 + _3125;
                        float _3182 = _3161 + _3126;
                        float _3186 = inversesqrt(dot(vec3(_3180, _3181, _3182), vec3(_3180, _3181, _3182)));
                        float _3190 = dot(vec3(_904, _907, _910), vec3(_3159, _3160, _3161));
                        float _4493 = isnan(0.0) ? _3190 : (isnan(_3190) ? 0.0 : max(_3190, 0.0));
                        float _3193 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
                        float _3194 = dot(vec3(_904, _907, _910), vec3(_3186 * _3180, _3186 * _3181, _3186 * _3182));
                        float _4504 = isnan(0.0) ? _3194 : (isnan(_3194) ? 0.0 : max(_3194, 0.0));
                        float _3197 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
                        float _3201 = ((_3197 * _3197) * (_3179 + (-1.0))) + 1.0;
                        float _3202 = _3137 * _3178;
                        float _3203 = _3202 * _3202;
                        float _3206 = ((1.0 - _3203) * _3127) + _3203;
                        float _4515 = isnan(0.0) ? _3206 : (isnan(_3206) ? 0.0 : max(_3206, 0.0));
                        float _3207 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
                        float _3208 = 1.0 - _3178;
                        float _3218 = (0.5 / (((_3207 * ((_3193 * _3208) + _3178)) + 9.9999999392252902907785028219223e-09) + (((_3207 * _3208) + _3178) * _3193))) * _3207;
                        float _4526 = isnan(0.0) ? _3218 : (isnan(_3218) ? 0.0 : max(_3218, 0.0));
                        float _3229 = (((_3179 * 3.1415927410125732421875) * (isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0)))) / ((_3201 * _3201) * ((_3144 * 2.1991131305694580078125) + 3.141590118408203125))) * _3133;
                        _2986 = (_3148 * _3096.x) + _3054;
                        _2987 = (_3148 * _3096.y) + _3055;
                        _2988 = (_3148 * _3096.z) + _3056;
                        _2983 = (_3229 * _3113.x) + _3051;
                        _2984 = (_3229 * _3113.y) + _3052;
                        _2985 = (_3229 * _3113.z) + _3053;
                        if (_3058 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3051 = _2983;
                            _3052 = _2984;
                            _3053 = _2985;
                            _3054 = _2986;
                            _3055 = _2987;
                            _3056 = _2988;
                            _3057 = _3058;
                        }
                    }
                    frontier_phi_61_pred = _2983;
                    frontier_phi_61_pred_1 = _2988;
                    frontier_phi_61_pred_2 = _2987;
                    frontier_phi_61_pred_3 = _2986;
                    frontier_phi_61_pred_4 = _2985;
                    frontier_phi_61_pred_5 = _2984;
                }
                _2784 = frontier_phi_61_pred;
                _2794 = frontier_phi_61_pred_1;
                _2792 = frontier_phi_61_pred_2;
                _2790 = frontier_phi_61_pred_3;
                _2788 = frontier_phi_61_pred_4;
                _2786 = frontier_phi_61_pred_5;
                uint _2934 = _2933 + 1u;
                if (_2934 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2927 = _2784;
                    _2928 = _2786;
                    _2929 = _2788;
                    _2930 = _2790;
                    _2931 = _2792;
                    _2932 = _2794;
                    _2933 = _2934;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2783 = _2784;
            _2785 = _2786;
            _2787 = _2788;
            _2789 = _2790;
            _2791 = _2792;
            _2793 = _2794;
        }
        uvec4 _2797 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2798 = _2797.z;
        uint _2800 = (_2798 >> 8u) & 15u;
        float _2895;
        float _2897;
        float _2899;
        float _2901;
        float _2903;
        float _2905;
        if (((4294967295u << _2800) & _2682) == 0u)
        {
            _2895 = _2783;
            _2897 = _2785;
            _2899 = _2787;
            _2901 = _2789;
            _2903 = _2791;
            _2905 = _2793;
        }
        else
        {
            float _2920 = inversesqrt(dot(vec3(_2636, _2637, _2638), vec3(_2636, _2637, _2638)));
            float _2921 = _2920 * _2636;
            float _2922 = _2920 * _2637;
            float _2923 = _2920 * _2638;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2800 < ((_2798 >> 12u) & 15u))
            {
                float _2896;
                float _2898;
                float _2900;
                float _2902;
                float _2904;
                float _2906;
                float _3034 = _2783;
                float _3035 = _2785;
                float _3036 = _2787;
                float _3037 = _2789;
                float _3038 = _2791;
                float _3039 = _2793;
                uint _3040 = _2800;
                uint _3049;
                bool _3050;
                for (;;)
                {
                    _3049 = texelFetch(g_lightClassification, int((((_2676 << 5u) + (_2662 << 9u)) + (_3040 << 2u)) >> 2u)).x;
                    _3050 = _3049 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3050)
                    {
                        frontier_phi_67_pred = _3037;
                        frontier_phi_67_pred_1 = _3038;
                        frontier_phi_67_pred_2 = _3039;
                        frontier_phi_67_pred_3 = _3036;
                        frontier_phi_67_pred_4 = _3035;
                        frontier_phi_67_pred_5 = _3034;
                    }
                    else
                    {
                        float _3234;
                        float _3235;
                        float _3236;
                        float _3237;
                        float _3238;
                        float _3239;
                        float _3528;
                        float _3529;
                        float _3530;
                        float _3531;
                        float _3532;
                        float _3533;
                        float _3247 = _3034;
                        float _3248 = _3035;
                        float _3249 = _3036;
                        float _3250 = _3037;
                        float _3251 = _3038;
                        float _3252 = _3039;
                        uint _3253 = _3049;
                        uint _3254;
                        vec4 _3279;
                        float _3280;
                        vec4 _3295;
                        vec3 _3307;
                        vec4 _3322;
                        vec4 _3338;
                        float _3384;
                        bool _3385;
                        for (;;)
                        {
                            uint _3264 = ((_3040 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3253));
                            _3254 = (_3253 + 4294967295u) & _3253;
                            uint _3266 = _3264 * 40u;
                            _3279 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3266)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 3u)).x));
                            _3280 = _3279.w;
                            uint _3282 = (_3264 * 40u) + 4u;
                            _3295 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3282)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 3u)).x));
                            uint _3297 = (_3264 * 40u) + 8u;
                            _3307 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3297)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 2u)).x));
                            uint _3309 = (_3264 * 40u) + 16u;
                            _3322 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3309)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 3u)).x));
                            uint _3325 = (_3264 * 40u) + 20u;
                            _3338 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3325)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3325 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3325 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3325 + 3u)).x));
                            uint _3340 = (_3264 * 40u) + 24u;
                            vec4 _3353 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3340)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 3u)).x));
                            uint _3359 = (_3264 * 40u) + 28u;
                            vec4 _3372 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3359)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 3u)).x));
                            _3384 = fma(_2638, _3372.z, fma(_2637, _3372.y, _3372.x * _2636)) + _3372.w;
                            _3385 = !((fma(_2638, _3353.z, fma(_2637, _3353.y, _3353.x * _2636)) + _3353.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3385)
                            {
                                float _3412 = _3279.x - _2636;
                                float _3413 = _3279.y - _2637;
                                float _3414 = _3279.z - _2638;
                                float _3415 = dot(vec3(_3412, _3413, _3414), vec3(_3412, _3413, _3414));
                                float _3418 = inversesqrt(_3415);
                                float _3419 = _3418 * _3412;
                                float _3420 = _3418 * _3413;
                                float _3421 = _3418 * _3414;
                                float _3425 = 1.0 - (_3415 / (_3280 * _3280));
                                float _4537 = isnan(0.0) ? _3425 : (isnan(_3425) ? 0.0 : max(_3425, 0.0));
                                float _3426 = isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0));
                                float _3430 = sqrt(_3415) * _3295.w;
                                float _3432 = 1.39999997615814208984375 / (_3430 + 1.39999997615814208984375);
                                float _3433 = _3432 * _3432;
                                float _3436 = ((1.0 - _3433) * dot(vec3(_3419, _3420, _3421), vec3(_904, _907, _910))) + _3433;
                                float _3439 = _3430 * _3430;
                                float _3443 = (fma(_2638, _3322.z, fma(_2637, _3322.y, _3322.x * _2636)) + _3322.w) / _3384;
                                float _3444 = (fma(_2638, _3338.z, fma(_2637, _3338.y, _3338.x * _2636)) + _3338.w) / _3384;
                                float _3448 = 1.0 - dot(vec2(_3443, _3444), vec2(_3443, _3444));
                                float _4553 = isnan(0.0) ? _3448 : (isnan(_3448) ? 0.0 : max(_3448, 0.0));
                                float _3449 = isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0));
                                float _3450 = _3449 * (((isnan(0.0) ? _3436 : (isnan(_3436) ? 0.0 : max(_3436, 0.0))) * _3426) / ((_3439 * 0.699999988079071044921875) + 1.0));
                                float _3462 = exp2(log2(1.0 / ((_3439 * 3.5) + 5.0)) * 0.25);
                                float _3463 = 1.0 - _979;
                                float _3470 = sqrt(1.0 - ((1.0 - (_3463 * _3463)) * (1.0 - (_3462 * _3462))));
                                float _3471 = _3470 * _3470;
                                float _3472 = _3471 * _3471;
                                float _3473 = _3419 - _2921;
                                float _3474 = _3420 - _2922;
                                float _3475 = _3421 - _2923;
                                float _3479 = inversesqrt(dot(vec3(_3473, _3474, _3475), vec3(_3473, _3474, _3475)));
                                float _3483 = dot(vec3(_904, _907, _910), vec3((-0.0) - _2921, (-0.0) - _2922, (-0.0) - _2923));
                                float _4564 = isnan(0.0) ? _3483 : (isnan(_3483) ? 0.0 : max(_3483, 0.0));
                                float _3486 = isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0));
                                float _3487 = dot(vec3(_904, _907, _910), vec3(_3479 * _3473, _3479 * _3474, _3479 * _3475));
                                float _4575 = isnan(0.0) ? _3487 : (isnan(_3487) ? 0.0 : max(_3487, 0.0));
                                float _3490 = isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0));
                                float _3494 = ((_3490 * _3490) * (_3472 + (-1.0))) + 1.0;
                                float _3495 = _3432 * _3471;
                                float _3496 = _3495 * _3495;
                                float _3502 = ((1.0 - _3496) * dot(vec3(_904, _907, _910), vec3(_3419, _3420, _3421))) + _3496;
                                float _4586 = isnan(0.0) ? _3502 : (isnan(_3502) ? 0.0 : max(_3502, 0.0));
                                float _3503 = isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0));
                                float _3504 = 1.0 - _3471;
                                float _3514 = (0.5 / (((_3503 * ((_3486 * _3504) + _3471)) + 9.9999999392252902907785028219223e-09) + (((_3503 * _3504) + _3471) * _3486))) * _3503;
                                float _4597 = isnan(0.0) ? _3514 : (isnan(_3514) ? 0.0 : max(_3514, 0.0));
                                float _3524 = (_3449 * _3426) * (((_3472 * 3.1415927410125732421875) * (isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0)))) / ((_3494 * _3494) * ((_3439 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3524 * _3307.x;
                                frontier_phi_73_pred_1 = _3524 * _3307.y;
                                frontier_phi_73_pred_2 = _3450 * _3295.z;
                                frontier_phi_73_pred_3 = _3450 * _3295.y;
                                frontier_phi_73_pred_4 = _3450 * _3295.x;
                                frontier_phi_73_pred_5 = _3524 * _3307.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3528 = frontier_phi_73_pred;
                            _3529 = frontier_phi_73_pred_1;
                            _3533 = frontier_phi_73_pred_2;
                            _3532 = frontier_phi_73_pred_3;
                            _3531 = frontier_phi_73_pred_4;
                            _3530 = frontier_phi_73_pred_5;
                            _3237 = _3531 + _3250;
                            _3238 = _3532 + _3251;
                            _3239 = _3533 + _3252;
                            _3234 = _3528 + _3247;
                            _3235 = _3529 + _3248;
                            _3236 = _3530 + _3249;
                            if (_3254 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3247 = _3234;
                                _3248 = _3235;
                                _3249 = _3236;
                                _3250 = _3237;
                                _3251 = _3238;
                                _3252 = _3239;
                                _3253 = _3254;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3237;
                        frontier_phi_67_pred_1 = _3238;
                        frontier_phi_67_pred_2 = _3239;
                        frontier_phi_67_pred_3 = _3236;
                        frontier_phi_67_pred_4 = _3235;
                        frontier_phi_67_pred_5 = _3234;
                    }
                    _2902 = frontier_phi_67_pred;
                    _2904 = frontier_phi_67_pred_1;
                    _2906 = frontier_phi_67_pred_2;
                    _2900 = frontier_phi_67_pred_3;
                    _2898 = frontier_phi_67_pred_4;
                    _2896 = frontier_phi_67_pred_5;
                    uint _3041 = _3040 + 1u;
                    if (_3041 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3034 = _2896;
                        _3035 = _2898;
                        _3036 = _2900;
                        _3037 = _2902;
                        _3038 = _2904;
                        _3039 = _2906;
                        _3040 = _3041;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2904;
                frontier_phi_55_56_ladder_1 = _2906;
                frontier_phi_55_56_ladder_2 = _2902;
                frontier_phi_55_56_ladder_3 = _2900;
                frontier_phi_55_56_ladder_4 = _2898;
                frontier_phi_55_56_ladder_5 = _2896;
            }
            else
            {
                frontier_phi_55_56_ladder = _2791;
                frontier_phi_55_56_ladder_1 = _2793;
                frontier_phi_55_56_ladder_2 = _2789;
                frontier_phi_55_56_ladder_3 = _2787;
                frontier_phi_55_56_ladder_4 = _2785;
                frontier_phi_55_56_ladder_5 = _2783;
            }
            _2895 = frontier_phi_55_56_ladder_5;
            _2897 = frontier_phi_55_56_ladder_4;
            _2899 = frontier_phi_55_56_ladder_3;
            _2901 = frontier_phi_55_56_ladder_2;
            _2903 = frontier_phi_55_56_ladder;
            _2905 = frontier_phi_55_56_ladder_1;
        }
        float _2910 = isnan(1.0) ? _963 : (isnan(_963) ? 1.0 : min(_963, 1.0));
        _2695 = (_2910 * _2901) + _2131;
        _2697 = (_2910 * _2903) + _2133;
        _2699 = (_2910 * _2905) + _2135;
        _2701 = ((_2895 * _947) * _2910) + _2476;
        _2703 = ((_2897 * _949) * _2910) + _2478;
        _2705 = ((_2899 * _950) * _2910) + _2480;
    }
    else
    {
        _2695 = _2131;
        _2697 = _2133;
        _2699 = _2135;
        _2701 = _2476;
        _2703 = _2478;
        _2705 = _2480;
    }
    float _4613 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
    float _4624 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
    float _4635 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
    uint _2725 = _249 + 6u;
    float _2733 = _885 / cbSceneParam._m0[86u].x;
    float _2734 = _886 / cbSceneParam._m0[86u].y;
    vec4 _2748 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2733, _2734, (log2((isnan(cbSceneParam._m0[77u].w) ? _820 : (isnan(_820) ? cbSceneParam._m0[77u].w : min(_820, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2750 = _2748.x;
    float _2751 = _2748.y;
    float _2752 = _2748.z;
    float _2753 = _2748.w;
    float _2845;
    float _2847;
    float _2849;
    float _2851;
    if (_820 > cbSceneParam._m0[78u].w)
    {
        float _2808 = isnan(_820) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _820 : min(cbSceneParam._m0[80u].w, _820));
        float _2809 = _2808 / _820;
        float _2820 = _2809 * _870;
        float _2821 = _871 * _2809;
        float _2822 = (-0.0) - _2821;
        float _2823 = _2809 * _872;
        float _2825 = (cbSceneParam._m0[77u].w * _2822) / _2808;
        float _2826 = _2825 + cbSceneParam._m0[79u].w;
        float _2827 = cbSceneParam._m0[79u].w - _2821;
        float _2833 = sqrt(((_2820 * _2820) + (_2821 * _2821)) + (_2823 * _2823));
        float _2836 = (1.0 - (cbSceneParam._m0[77u].w / _2808)) * _2833;
        float _2841 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2843 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2996;
        if (abs((_2822 - _2825) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2996 = ((((_2826 > 0.0) ? exp2(_2841 * _2826) : (2.0 - exp2(_2843 * _2826))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2836;
        }
        else
        {
            float _2956 = 1.0 / cbSceneParam._m0[80u].x;
            float _2957 = isnan(_2827) ? _2826 : (isnan(_2826) ? _2827 : max(_2826, _2827));
            float _2958 = isnan(_2827) ? _2826 : (isnan(_2826) ? _2827 : min(_2826, _2827));
            float _2967 = isnan(0.0) ? _2957 : (isnan(_2957) ? 0.0 : min(_2957, 0.0));
            float _2968 = isnan(0.0) ? _2958 : (isnan(_2958) ? 0.0 : min(_2958, 0.0));
            _2996 = ((abs(_2833 / _2822) * cbSceneParam._m0[80u].y) * ((((_2967 - _2968) * 2.0) - ((exp2(_2841 * (isnan(0.0) ? _2957 : (isnan(_2957) ? 0.0 : max(_2957, 0.0)))) - exp2(_2841 * (isnan(0.0) ? _2958 : (isnan(_2958) ? 0.0 : max(_2958, 0.0))))) * _2956)) - ((exp2(_2843 * _2967) - exp2(_2843 * _2968)) * _2956))) + (_2836 * cbSceneParam._m0[80u].z);
        }
        vec4 _2998 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2733, _2734, 1.0), 0.0);
        float _3007 = exp2((_2996 * (-1.44269502162933349609375)) * (1.0 - _2998.w));
        float _3008 = log2(_3007);
        float _3024 = log2(_2753);
        _2845 = (exp2(_3024 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3008 * cbSceneParam._m0[78u].x)) * _2998.x) / cbSceneParam._m0[78u].x)) + _2750;
        _2847 = (exp2(_3024 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3008 * cbSceneParam._m0[78u].y)) * _2998.y) / cbSceneParam._m0[78u].y)) + _2751;
        _2849 = (exp2(_3024 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3008 * cbSceneParam._m0[78u].z)) * _2998.z) / cbSceneParam._m0[78u].z)) + _2752;
        _2851 = _3007 * _2753;
    }
    else
    {
        _2845 = _2750;
        _2847 = _2751;
        _2849 = _2752;
        _2851 = _2753;
    }
    float _2863 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2864 = _2863 == 3.0;
    float _2865 = log2(_2851);
    float _2872 = exp2(_2865 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0))) * (_2695 + ((isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0))) * _963))) + ((_2701 + ((isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0))) * _1771)) * cbPerFrame._m0[3u].x));
    float _2873 = exp2(_2865 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0))) * (_2697 + ((isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0))) * _963))) + ((_2703 + ((isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0))) * _1771)) * cbPerFrame._m0[3u].x));
    float _2874 = exp2(_2865 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0))) * (_2699 + ((isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0))) * _963))) + ((_2705 + ((isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0))) * _1771)) * cbPerFrame._m0[3u].x));
    float _2883 = (_2863 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2883 * (_2864 ? _2872 : (_2872 + (cbSceneParam._m0[72u].w * _2845)));
    SV_Target.y = _2883 * (_2864 ? _2873 : (_2873 + (cbSceneParam._m0[72u].w * _2847)));
    SV_Target.z = _2883 * (_2864 ? _2874 : (_2874 + (cbSceneParam._m0[72u].w * _2849)));
    SV_Target.w = cbInstanceData._m0[_2725].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2725].w;
}


