#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _915;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _194 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _195 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _196 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _202 = inversesqrt(dot(vec3(_194, _195, _196), vec3(_194, _195, _196)));
    float _209 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _216 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _222 = uint(roundEven(NORMAL.w)) * 13u;
    uint _228 = _222 + 1u;
    uint _232 = _222 + 2u;
    float _241 = sqrt(((cbInstanceData._m0[_228].x * cbInstanceData._m0[_228].x) + (cbInstanceData._m0[_222].x * cbInstanceData._m0[_222].x)) + (cbInstanceData._m0[_232].x * cbInstanceData._m0[_232].x));
    vec4 _262 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _268 = _262.x * cbMtdParam._m0[9u].x;
    float _269 = _262.y * cbMtdParam._m0[9u].y;
    float _270 = _262.z * cbMtdParam._m0[9u].z;
    vec4 _283 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2(((_241 * TEXCOORD.z) * cbTextureTilingScale._m0[20u].x) + cbTextureTilingScale._m0[20u].z, ((_241 * TEXCOORD.w) * cbTextureTilingScale._m0[20u].y) + cbTextureTilingScale._m0[20u].w));
    vec4 _309 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _313 = _309.z;
    float _317 = (_309.x * 2.0) + (-1.0);
    float _318 = (_309.y * 2.0) + (-1.0);
    float _319 = dot(vec2(_317, _318), vec2(_317, _318));
    float _3272 = isnan(0.0) ? _319 : (isnan(_319) ? 0.0 : max(_319, 0.0));
    float _325 = sqrt(1.0 - (isnan(1.0) ? _3272 : (isnan(_3272) ? 1.0 : min(_3272, 1.0))));
    float _330 = _317 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_283.x * 2.0) + (-1.0)));
    float _331 = _318 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_283.y * 2.0) + (-1.0)));
    vec4 _344 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _346 = _344.x;
    float _351 = (((_283.z - _313) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _313;
    float _356 = cbMtdParam._m0[22u].x + _309.w;
    float _359 = fma(_325, _209 * NORMAL.x, fma(_331, _216 * TANGENT.x, (_202 * _194) * _330));
    float _362 = fma(_325, _209 * NORMAL.y, fma(_331, _216 * TANGENT.y, (_202 * _195) * _330));
    float _365 = fma(_325, _209 * NORMAL.z, fma(_331, _216 * TANGENT.z, (_202 * _196) * _330));
    float _369 = inversesqrt(dot(vec3(_359, _362, _365), vec3(_359, _362, _365)));
    float _370 = _369 * _359;
    float _371 = _369 * _362;
    float _372 = _369 * _365;
    float _3283 = isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : max(_351, 0.0));
    float _373 = isnan(1.0) ? _3283 : (isnan(_3283) ? 1.0 : min(_3283, 1.0));
    float _3294 = isnan(0.0) ? _356 : (isnan(_356) ? 0.0 : max(_356, 0.0));
    float _3305 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _3316 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _3327 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _3338 = isnan(0.0) ? _346 : (isnan(_346) ? 0.0 : max(_346, 0.0));
    float _378 = isnan(1.0) ? _3338 : (isnan(_3338) ? 1.0 : min(_3338, 1.0));
    float _392 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _434 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _444 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _434);
    float _445 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _434);
    float _446 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _434);
    float _450 = inversesqrt(dot(vec3(_444, _445, _446), vec3(_444, _445, _446)));
    float _451 = _444 * _450;
    float _452 = _445 * _450;
    float _453 = _446 * _450;
    float _459 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _460 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _481 = fma(_372, cbSceneParam._m0[5u].z, fma(_371, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _370));
    float _484 = fma(_372, cbSceneParam._m0[6u].z, fma(_371, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _370));
    float _487 = fma(_372, cbSceneParam._m0[7u].z, fma(_371, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _370));
    uint _501 = (_222 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _507 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3305 : (isnan(_3305) ? 1.0 : min(_3305, 1.0)))) * cbInstanceData._m0[_501].x;
    float _508 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3316 : (isnan(_3316) ? 1.0 : min(_3316, 1.0)))) * cbInstanceData._m0[_501].y;
    float _509 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3327 : (isnan(_3327) ? 1.0 : min(_3327, 1.0)))) * cbInstanceData._m0[_501].z;
    float _3349 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _510 = isnan(1.0) ? _3349 : (isnan(_3349) ? 1.0 : min(_3349, 1.0));
    float _3360 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _511 = isnan(1.0) ? _3360 : (isnan(_3360) ? 1.0 : min(_3360, 1.0));
    float _3371 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    float _512 = isnan(1.0) ? _3371 : (isnan(_3371) ? 1.0 : min(_3371, 1.0));
    float _513 = 1.0 - _378;
    float _514 = _510 * _513;
    float _515 = _511 * _513;
    float _516 = _512 * _513;
    float _521 = (_510 + (-0.039999999105930328369140625)) * _378;
    float _522 = (_511 + (-0.039999999105930328369140625)) * _378;
    float _523 = (_512 + (-0.039999999105930328369140625)) * _378;
    float _524 = _521 + 0.039999999105930328369140625;
    float _526 = _522 + 0.039999999105930328369140625;
    float _527 = _523 + 0.039999999105930328369140625;
    vec4 _536 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _459, cbSceneParam._m0[86u].y * _460));
    float _540 = ((isnan(1.0) ? _3294 : (isnan(_3294) ? 1.0 : min(_3294, 1.0))) * TEXCOORD_5.w) * _536.x;
    float _541 = dot(vec3(_370, _371, _372), vec3(_451, _452, _453));
    float _544 = _541 * 2.0;
    float _548 = (_544 * _370) - _451;
    float _549 = (_544 * _371) - _452;
    float _550 = (_544 * _372) - _453;
    float _554 = abs(dot(vec3(_451, _452, _453), vec3(_370, _371, _372)));
    float _3382 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _556 = sqrt(_373);
    float _569 = exp2((_556 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_556 * 3.0));
    float _575 = (1.0 - _569) * ((_556 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _576 = _569 * _556;
    float _604 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _608 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _612 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _914;
    float _916;
    float _917;
    float _918;
    float _919;
    float _920;
    float _921;
    float _922;
    float _923;
    float _924;
    float _925;
    float _926;
    float _927;
    float _928;
    float _929;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _639 = fma(_612, cbModelParam._m0[26u].z, fma(_608, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _604));
        float _643 = fma(_612, cbModelParam._m0[27u].z, fma(_608, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _604));
        float _647 = fma(_612, cbModelParam._m0[28u].z, fma(_608, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _604));
        float _672 = _604 + _370;
        float _673 = _608 + _371;
        float _674 = _612 + _372;
        float _684 = fma(_674, cbModelParam._m0[26u].z, fma(_673, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _672)) - _639;
        float _685 = fma(_674, cbModelParam._m0[27u].z, fma(_673, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _672)) - _643;
        float _686 = fma(_674, cbModelParam._m0[28u].z, fma(_673, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _672)) - _647;
        float _690 = inversesqrt(dot(vec3(_684, _685, _686), vec3(_684, _685, _686)));
        float _703 = ((_690 * _684) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_639 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _704 = ((_690 * _685) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_643 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _705 = ((_690 * _686) / cbModelParam._m0[34u].z) + ((((((_647 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _708 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_703, _704, _705), 0.0);
        vec4 _715 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_703, _704, _705), 0.0);
        vec4 _722 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_703, _704, _705), 0.0);
        vec4 _729 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_703, _704, _705), 0.0);
        float _742 = exp2((_708.w + (-0.5)) * 20.0) * 2.0;
        float _743 = _742 * (_708.x + (-0.5));
        float _744 = _742 * (_708.y + (-0.5));
        float _745 = _742 * (_708.z + (-0.5));
        float _752 = exp2((_715.w + (-0.5)) * 20.0) * 2.0;
        float _753 = _752 * (_715.x + (-0.5));
        float _754 = _752 * (_715.y + (-0.5));
        float _755 = _752 * (_715.z + (-0.5));
        float _762 = exp2((_722.w + (-0.5)) * 20.0) * 2.0;
        float _763 = _762 * (_722.x + (-0.5));
        float _764 = _762 * (_722.y + (-0.5));
        float _765 = _762 * (_722.z + (-0.5));
        float _772 = exp2((_729.w + (-0.5)) * 20.0) * 2.0;
        float _773 = _772 * (_729.x + (-0.5));
        float _774 = _772 * (_729.y + (-0.5));
        float _775 = _772 * (_729.z + (-0.5));
        float _776 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
        float _777 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
        float _778 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
        float _779 = _743 * 0.5;
        float _780 = _753 * 0.5;
        float _781 = _763 * 0.5;
        float _782 = dot(vec3(_779, _780, _781), vec3(_779, _780, _781));
        float _787 = (_782 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_782);
        float _796 = (dot(vec3(_370, _371, _372), vec3(_787 * _779, _787 * _780, _787 * _781)) + 1.0) * 0.5;
        float _3408 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
        float _806 = sqrt(((_780 * _780) + (_779 * _779)) + (_781 * _781)) / (_776 + 9.9999997473787516355514526367188e-06);
        float _3419 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
        float _807 = isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0));
        float _808 = _807 * 2.0;
        float _812 = (1.0 - _807) / (_807 + 1.0);
        float _3430 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
        float _813 = isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0));
        float _822 = ((((1.0 - _813) * (_808 + 2.0)) * exp2(log2(isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0))) * (_808 + 1.0))) + _813) * _776;
        float _823 = _744 * 0.5;
        float _824 = _754 * 0.5;
        float _825 = _764 * 0.5;
        float _826 = dot(vec3(_823, _824, _825), vec3(_823, _824, _825));
        float _831 = (_826 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_826);
        float _839 = (dot(vec3(_370, _371, _372), vec3(_831 * _823, _831 * _824, _831 * _825)) + 1.0) * 0.5;
        float _3441 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
        float _848 = sqrt(((_824 * _824) + (_823 * _823)) + (_825 * _825)) / (_777 + 9.9999997473787516355514526367188e-06);
        float _3452 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
        float _849 = isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0));
        float _850 = _849 * 2.0;
        float _854 = (1.0 - _849) / (_849 + 1.0);
        float _3463 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
        float _855 = isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0));
        float _864 = ((((1.0 - _855) * (_850 + 2.0)) * exp2(log2(isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0))) * (_850 + 1.0))) + _855) * _777;
        float _865 = _745 * 0.5;
        float _866 = _755 * 0.5;
        float _867 = _765 * 0.5;
        float _868 = dot(vec3(_865, _866, _867), vec3(_865, _866, _867));
        float _873 = (_868 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_868);
        float _881 = (dot(vec3(_370, _371, _372), vec3(_873 * _865, _873 * _866, _873 * _867)) + 1.0) * 0.5;
        float _3474 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
        float _890 = sqrt(((_866 * _866) + (_865 * _865)) + (_867 * _867)) / (_778 + 9.9999997473787516355514526367188e-06);
        float _3485 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
        float _891 = isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0));
        float _892 = _891 * 2.0;
        float _896 = (1.0 - _891) / (_891 + 1.0);
        float _3496 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
        float _897 = isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0));
        float _906 = ((((1.0 - _897) * (_892 + 2.0)) * exp2(log2(isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0))) * (_892 + 1.0))) + _897) * _778;
        _914 = _745;
        _916 = _744;
        _917 = _743;
        _918 = _755;
        _919 = _754;
        _920 = _753;
        _921 = _765;
        _922 = _764;
        _923 = _763;
        _924 = _778;
        _925 = _777;
        _926 = _776;
        _927 = cbModelParam._m0[36u].z * (isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0)));
        _928 = cbModelParam._m0[36u].z * (isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0)));
        _929 = cbModelParam._m0[36u].z * (isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0)));
    }
    else
    {
        _914 = _915;
        _916 = _915;
        _917 = _915;
        _918 = _915;
        _919 = _915;
        _920 = _915;
        _921 = _915;
        _922 = _915;
        _923 = _915;
        _924 = _915;
        _925 = _915;
        _926 = _915;
        _927 = 0.0;
        _928 = 0.0;
        _929 = 0.0;
    }
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _954 = fma(_612, cbModelParam._m0[30u].z, fma(_608, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _604));
        float _958 = fma(_612, cbModelParam._m0[31u].z, fma(_608, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _604));
        float _962 = fma(_612, cbModelParam._m0[32u].z, fma(_608, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _604));
        float _985 = _604 + _370;
        float _986 = _608 + _371;
        float _987 = _612 + _372;
        float _997 = fma(_987, cbModelParam._m0[30u].z, fma(_986, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _985)) - _954;
        float _998 = fma(_987, cbModelParam._m0[31u].z, fma(_986, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _985)) - _958;
        float _999 = fma(_987, cbModelParam._m0[32u].z, fma(_986, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _985)) - _962;
        float _1003 = inversesqrt(dot(vec3(_997, _998, _999), vec3(_997, _998, _999)));
        float _1016 = ((_1003 * _997) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_954 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1017 = ((_1003 * _998) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_958 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1018 = ((_1003 * _999) / cbModelParam._m0[35u].z) + ((((((_962 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1020 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1016, _1017, _1018), 0.0);
        vec4 _1027 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1016, _1017, _1018), 0.0);
        vec4 _1034 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1016, _1017, _1018), 0.0);
        vec4 _1041 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1016, _1017, _1018), 0.0);
        float _1053 = exp2((_1020.w + (-0.5)) * 20.0) * 2.0;
        float _1054 = _1053 * (_1020.x + (-0.5));
        float _1055 = _1053 * (_1020.y + (-0.5));
        float _1056 = _1053 * (_1020.z + (-0.5));
        float _1063 = exp2((_1027.w + (-0.5)) * 20.0) * 2.0;
        float _1064 = _1063 * (_1027.x + (-0.5));
        float _1065 = _1063 * (_1027.y + (-0.5));
        float _1066 = _1063 * (_1027.z + (-0.5));
        float _1073 = exp2((_1034.w + (-0.5)) * 20.0) * 2.0;
        float _1074 = _1073 * (_1034.x + (-0.5));
        float _1075 = _1073 * (_1034.y + (-0.5));
        float _1076 = _1073 * (_1034.z + (-0.5));
        float _1083 = exp2((_1041.w + (-0.5)) * 20.0) * 2.0;
        float _1084 = _1083 * (_1041.x + (-0.5));
        float _1085 = _1083 * (_1041.y + (-0.5));
        float _1086 = _1083 * (_1041.z + (-0.5));
        float _1087 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1088 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1089 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1090 = _1054 * 0.5;
        float _1091 = _1064 * 0.5;
        float _1092 = _1074 * 0.5;
        float _1093 = dot(vec3(_1090, _1091, _1092), vec3(_1090, _1091, _1092));
        float _1098 = (_1093 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1093);
        float _1106 = (dot(vec3(_370, _371, _372), vec3(_1098 * _1090, _1098 * _1091, _1098 * _1092)) + 1.0) * 0.5;
        float _3537 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1115 = sqrt(((_1091 * _1091) + (_1090 * _1090)) + (_1092 * _1092)) / (_1087 + 9.9999997473787516355514526367188e-06);
        float _3548 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1116 = isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0));
        float _1117 = _1116 * 2.0;
        float _1121 = (1.0 - _1116) / (_1116 + 1.0);
        float _3559 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1122 = isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0));
        float _1131 = ((((1.0 - _1122) * (_1117 + 2.0)) * exp2(log2(isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0))) * (_1117 + 1.0))) + _1122) * _1087;
        float _1132 = _1055 * 0.5;
        float _1133 = _1065 * 0.5;
        float _1134 = _1075 * 0.5;
        float _1135 = dot(vec3(_1132, _1133, _1134), vec3(_1132, _1133, _1134));
        float _1140 = (_1135 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1135);
        float _1148 = (dot(vec3(_370, _371, _372), vec3(_1140 * _1132, _1140 * _1133, _1140 * _1134)) + 1.0) * 0.5;
        float _3570 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1157 = sqrt(((_1133 * _1133) + (_1132 * _1132)) + (_1134 * _1134)) / (_1088 + 9.9999997473787516355514526367188e-06);
        float _3581 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1158 = isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0));
        float _1159 = _1158 * 2.0;
        float _1163 = (1.0 - _1158) / (_1158 + 1.0);
        float _3592 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1164 = isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0));
        float _1173 = ((((1.0 - _1164) * (_1159 + 2.0)) * exp2(log2(isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0))) * (_1159 + 1.0))) + _1164) * _1088;
        float _1174 = _1056 * 0.5;
        float _1175 = _1066 * 0.5;
        float _1176 = _1076 * 0.5;
        float _1177 = dot(vec3(_1174, _1175, _1176), vec3(_1174, _1175, _1176));
        float _1182 = (_1177 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1177);
        float _1190 = (dot(vec3(_370, _371, _372), vec3(_1182 * _1174, _1182 * _1175, _1182 * _1176)) + 1.0) * 0.5;
        float _3603 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1199 = sqrt(((_1175 * _1175) + (_1174 * _1174)) + (_1176 * _1176)) / (_1089 + 9.9999997473787516355514526367188e-06);
        float _3614 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1200 = isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0));
        float _1201 = _1200 * 2.0;
        float _1205 = (1.0 - _1200) / (_1200 + 1.0);
        float _3625 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1206 = isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0));
        float _1215 = ((((1.0 - _1206) * (_1201 + 2.0)) * exp2(log2(isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0))) * (_1201 + 1.0))) + _1206) * _1089;
        _1223 = _1056;
        _1224 = _1055;
        _1225 = _1054;
        _1226 = _1066;
        _1227 = _1065;
        _1228 = _1064;
        _1229 = _1076;
        _1230 = _1075;
        _1231 = _1074;
        _1232 = _1089;
        _1233 = _1088;
        _1234 = _1087;
        _1235 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0)));
        _1236 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0)));
        _1237 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0)));
    }
    else
    {
        _1223 = _915;
        _1224 = _915;
        _1225 = _915;
        _1226 = _915;
        _1227 = _915;
        _1228 = _915;
        _1229 = _915;
        _1230 = _915;
        _1231 = _915;
        _1232 = _915;
        _1233 = _915;
        _1234 = _915;
        _1235 = 0.0;
        _1236 = 0.0;
        _1237 = 0.0;
    }
    float _1247 = (cbModelParam._m0[1u].x * (_1235 - _927)) + _927;
    float _1248 = (cbModelParam._m0[1u].x * (_1236 - _928)) + _928;
    float _1249 = (cbModelParam._m0[1u].x * (_1237 - _929)) + _929;
    float _1270 = fma(_1249, cbSceneParam._m0[89u].z, fma(_1248, cbSceneParam._m0[89u].y, _1247 * cbSceneParam._m0[89u].x));
    float _1273 = fma(_1249, cbSceneParam._m0[90u].z, fma(_1248, cbSceneParam._m0[90u].y, _1247 * cbSceneParam._m0[90u].x));
    float _1276 = fma(_1249, cbSceneParam._m0[91u].z, fma(_1248, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1247));
    float _1291 = _548 * 0.5;
    float _1292 = _549 * 0.5;
    float _1293 = _550 * 0.5;
    float _1294 = dot(vec4(_1291, _1292, _1293, 1.0), vec4(_1225, _1228, _1231, _1234));
    float _1297 = dot(vec4(_1291, _1292, _1293, 1.0), vec4(_1224, _1227, _1230, _1233));
    float _1300 = dot(vec4(_1291, _1292, _1293, 1.0), vec4(_1223, _1226, _1229, _1232));
    float _1334;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1307 = dot(vec4(_1291, _1292, _1293, 1.0), vec4(_914, _918, _921, _924));
        float _1311 = dot(vec4(_1291, _1292, _1293, 1.0), vec4(_916, _919, _922, _925));
        float _1315 = dot(vec4(_1291, _1292, _1293, 1.0), vec4(_917, _920, _923, _926));
        float _1322 = dot(vec4(cbModelParam._m0[39u]), vec4(_1291, _1292, _1293, 1.0));
        _1334 = dot(vec3(isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0)), isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0)), isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1322) ? 0.0 : (isnan(0.0) ? _1322 : max(0.0, _1322))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1334 = 1.0;
    }
    float _1345;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1336 = dot(vec4(cbModelParam._m0[40u]), vec4(_1291, _1292, _1293, 1.0));
        _1345 = dot(vec3(isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0)), isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0)), isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1336) ? 0.0 : (isnan(0.0) ? _1336 : max(0.0, _1336))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1345 = 1.0;
    }
    float _1349 = (_1345 * cbModelParam._m0[1u].x) + (_1334 * (1.0 - cbModelParam._m0[1u].x));
    float _1359 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _373);
    float _1360 = isnan(_1359) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1359 : min(cbModelParam._m0[25u].z, _1359));
    float _1442;
    float _1444;
    float _1446;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1409 = fma(_612, cbModelParam._m0[13u].z, fma(_608, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _604)) + cbModelParam._m0[13u].w;
        float _1413 = fma(_612, cbModelParam._m0[14u].z, fma(_608, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _604)) + cbModelParam._m0[14u].w;
        float _1417 = fma(_612, cbModelParam._m0[15u].z, fma(_608, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _604)) + cbModelParam._m0[15u].w;
        float _1420 = fma(_550, cbModelParam._m0[13u].z, fma(_549, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _548));
        float _1423 = fma(_550, cbModelParam._m0[14u].z, fma(_549, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _548));
        float _1426 = fma(_550, cbModelParam._m0[15u].z, fma(_549, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _548));
        float _1454;
        if (_1420 > 0.0)
        {
            _1454 = abs((1.0 - _1409) / _1420);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1420 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1409 + 1.0) / _1420);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1454 = frontier_phi_14_12_ladder;
        }
        float _1681;
        if (_1423 > 0.0)
        {
            _1681 = abs((1.0 - _1413) / _1423);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1423 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1413 + 1.0) / _1423);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1681 = frontier_phi_23_19_ladder;
        }
        float _1938;
        if (_1426 > 0.0)
        {
            _1938 = abs((1.0 - _1417) / _1426);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1426 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1417 + 1.0) / _1426);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1938 = frontier_phi_35_30_ladder;
        }
        float _1940 = isnan(_1681) ? _1454 : (isnan(_1454) ? _1681 : min(_1454, _1681));
        float _1941 = isnan(_1938) ? _1940 : (isnan(_1940) ? _1938 : min(_1940, _1938));
        float _1945 = (_1941 * _1420) + _1409;
        float _1946 = (_1941 * _1423) + _1413;
        float _1947 = (_1941 * _1426) + _1417;
        float _1948 = _1941 * 9.9999997473787516355514526367188e-05;
        float _1950 = (-1.0) - _1948;
        float _1952 = _1948 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1947 > _1952) || ((_1947 < _1950) || ((_1946 > _1952) || ((_1946 < _1950) || ((_1945 < _1950) || (_1945 > _1952))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2075 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1947, cbModelParam._m0[9u].z, fma(_1946, cbModelParam._m0[9u].y, _1945 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1947, cbModelParam._m0[10u].z, fma(_1946, cbModelParam._m0[10u].y, _1945 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1947, cbModelParam._m0[11u].z, fma(_1946, cbModelParam._m0[11u].y, _1945 * cbModelParam._m0[11u].x))), _1360);
            frontier_phi_13_35_ladder = _2075.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2075.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2075.x * cbModelParam._m0[1u].y;
        }
        _1442 = frontier_phi_13_35_ladder_2;
        _1444 = frontier_phi_13_35_ladder_1;
        _1446 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1430 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_548, _549, _550), _1360);
        _1442 = _1430.x * cbModelParam._m0[1u].y;
        _1444 = _1430.y * cbModelParam._m0[1u].y;
        _1446 = _1430.z * cbModelParam._m0[1u].y;
    }
    float _1450 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _373);
    float _1451 = isnan(_1450) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1450 : min(cbModelParam._m0[25u].w, _1450));
    float _1543;
    float _1545;
    float _1547;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1507 = fma(_612, cbModelParam._m0[21u].z, fma(_608, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _604)) + cbModelParam._m0[21u].w;
        float _1511 = fma(_612, cbModelParam._m0[22u].z, fma(_608, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _604)) + cbModelParam._m0[22u].w;
        float _1515 = fma(_612, cbModelParam._m0[23u].z, fma(_608, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _604)) + cbModelParam._m0[23u].w;
        float _1518 = fma(_550, cbModelParam._m0[21u].z, fma(_549, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _548));
        float _1521 = fma(_550, cbModelParam._m0[22u].z, fma(_549, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _548));
        float _1524 = fma(_550, cbModelParam._m0[23u].z, fma(_549, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _548));
        float _1686;
        if (_1518 > 0.0)
        {
            _1686 = abs((1.0 - _1507) / _1518);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1518 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1507 + 1.0) / _1518);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1686 = frontier_phi_25_21_ladder;
        }
        float _1965;
        if (_1521 > 0.0)
        {
            _1965 = abs((1.0 - _1511) / _1521);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1521 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1511 + 1.0) / _1521);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1965 = frontier_phi_37_32_ladder;
        }
        float _2178;
        if (_1524 > 0.0)
        {
            _2178 = abs((1.0 - _1515) / _1524);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1524 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1515 + 1.0) / _1524);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2178 = frontier_phi_46_43_ladder;
        }
        float _2180 = isnan(_1965) ? _1686 : (isnan(_1686) ? _1965 : min(_1686, _1965));
        float _2181 = isnan(_2178) ? _2180 : (isnan(_2180) ? _2178 : min(_2180, _2178));
        float _2185 = (_2181 * _1518) + _1507;
        float _2186 = (_2181 * _1521) + _1511;
        float _2187 = (_2181 * _1524) + _1515;
        float _2188 = _2181 * 9.9999997473787516355514526367188e-05;
        float _2189 = (-1.0) - _2188;
        float _2191 = _2188 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2187 > _2191) || ((_2187 < _2189) || ((_2186 > _2191) || ((_2186 < _2189) || ((_2185 < _2189) || (_2185 > _2191))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2386 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2187, cbModelParam._m0[17u].z, fma(_2186, cbModelParam._m0[17u].y, _2185 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2187, cbModelParam._m0[18u].z, fma(_2186, cbModelParam._m0[18u].y, _2185 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2187, cbModelParam._m0[19u].z, fma(_2186, cbModelParam._m0[19u].y, _2185 * cbModelParam._m0[19u].x))), _1451);
            frontier_phi_22_46_ladder = _2386.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2386.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2386.x * cbModelParam._m0[1u].z;
        }
        _1543 = frontier_phi_22_46_ladder_2;
        _1545 = frontier_phi_22_46_ladder_1;
        _1547 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1527 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_548, _549, _550), _1451);
        _1543 = _1527.x * cbModelParam._m0[1u].z;
        _1545 = _1527.y * cbModelParam._m0[1u].z;
        _1547 = _1527.z * cbModelParam._m0[1u].z;
    }
    float _1560 = (((_575 * _524) + _576) * _540) * ((cbModelParam._m0[1u].w * (_1543 - _1442)) + _1442);
    float _1562 = (((_575 * _526) + _576) * _540) * ((cbModelParam._m0[1u].w * (_1545 - _1444)) + _1444);
    float _1564 = (((_575 * _527) + _576) * _540) * ((cbModelParam._m0[1u].w * (_1547 - _1446)) + _1446);
    float _1567 = fma(_1564, cbSceneParam._m0[89u].z, fma(_1562, cbSceneParam._m0[89u].y, _1560 * cbSceneParam._m0[89u].x));
    float _1570 = fma(_1564, cbSceneParam._m0[90u].z, fma(_1562, cbSceneParam._m0[90u].y, _1560 * cbSceneParam._m0[90u].x));
    float _1573 = fma(_1564, cbSceneParam._m0[91u].z, fma(_1562, cbSceneParam._m0[91u].y, _1560 * cbSceneParam._m0[91u].x));
    vec4 _1581 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_459, _460));
    float _1583 = _1581.w;
    float _1595 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1583);
    float _1596 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1583);
    float _1597 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1583);
    uvec4 _1601 = floatBitsToUint(cbInstanceData._m0[_222 + 5u]);
    uint _1603 = _1601.x * 14u;
    uint _1604 = _1603 + 13u;
    float _1611 = _540 + (-1.0);
    float _1616 = (cbLight._m0[_1604].x * _1611) + 1.0;
    float _1617 = (cbLight._m0[_1604].y * _1611) + 1.0;
    float _1618 = (cbLight._m0[_1604].z * _1611) + 1.0;
    float _1619 = (cbLight._m0[_1604].w * _1611) + 1.0;
    uint _1620 = _1603 + 5u;
    float _1626 = isnan(1.0) ? _1617 : (isnan(_1617) ? 1.0 : min(_1617, 1.0));
    uint _1630 = _1603 + 4u;
    float _1640 = isnan(1.0) ? _1616 : (isnan(_1616) ? 1.0 : min(_1616, 1.0));
    uint _1644 = _1603 | 1u;
    float _1655 = dot(vec3(cbLight._m0[_1603].xyz), vec3(_370, _371, _372));
    float _1658 = dot(vec3(cbLight._m0[_1644].xyz), vec3(_370, _371, _372));
    float _3761 = isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0));
    float _3772 = isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0));
    float _1663 = (isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0))) * 0.3183098733425140380859375;
    float _1665 = (isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0))) * 0.3183098733425140380859375;
    float _1672 = ((cbLight._m0[_1620].x * _1626) * _1665) + (((cbLight._m0[_1630].x * _1595) * _1640) * _1663);
    float _1673 = ((_1626 * cbLight._m0[_1620].y) * _1665) + (((cbLight._m0[_1630].y * _1596) * _1640) * _1663);
    float _1674 = ((_1626 * cbLight._m0[_1620].z) * _1665) + (((cbLight._m0[_1630].z * _1597) * _1640) * _1663);
    uvec4 _1678 = floatBitsToUint(cbLight._m0[_1603 + 12u]);
    bool _1680 = _1678.x == 0u;
    float _1691;
    float _1693;
    float _1695;
    if (_1680)
    {
        _1691 = _1672;
        _1693 = _1673;
        _1695 = _1674;
    }
    else
    {
        uint _1699 = _1603 + 6u;
        float _1715 = (dot(vec3(cbLight._m0[_1603 + 2u].xyz), vec3(_370, _371, _372)) * 0.5) + 0.5;
        float _1716 = _1715 * _1715;
        float _3783 = isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0));
        float _1717 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
        float _1718 = isnan(1.0) ? _1618 : (isnan(_1618) ? 1.0 : min(_1618, 1.0));
        _1691 = (((cbLight._m0[_1699].x * 0.3183098733425140380859375) * _1717) * _1718) + _1672;
        _1693 = (((cbLight._m0[_1699].y * 0.3183098733425140380859375) * _1717) * _1718) + _1673;
        _1695 = (((cbLight._m0[_1699].z * 0.3183098733425140380859375) * _1717) * _1718) + _1674;
    }
    bool _1698 = _1678.y == 0u;
    float _1736;
    float _1738;
    float _1740;
    if (_1698)
    {
        _1736 = _1691;
        _1738 = _1693;
        _1740 = _1695;
    }
    else
    {
        uint _1909 = _1603 + 7u;
        float _1925 = (dot(vec3(cbLight._m0[_1603 + 3u].xyz), vec3(_370, _371, _372)) * 0.5) + 0.5;
        float _1926 = _1925 * _1925;
        float _3799 = isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0));
        float _1927 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
        float _1928 = isnan(1.0) ? _1619 : (isnan(_1619) ? 1.0 : min(_1619, 1.0));
        _1736 = (((cbLight._m0[_1909].x * 0.3183098733425140380859375) * _1927) * _1928) + _1691;
        _1738 = (((cbLight._m0[_1909].y * 0.3183098733425140380859375) * _1927) * _1928) + _1693;
        _1740 = (((cbLight._m0[_1909].z * 0.3183098733425140380859375) * _1927) * _1928) + _1695;
    }
    uint _1743 = _1603 + 8u;
    float _1756 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1603].w)) * _373) * 0.949999988079071044921875);
    float _1757 = _1756 * _1756;
    float _1758 = cbLight._m0[_1603].x + _451;
    float _1759 = cbLight._m0[_1603].y + _452;
    float _1760 = cbLight._m0[_1603].z + _453;
    float _1764 = inversesqrt(dot(vec3(_1758, _1759, _1760), vec3(_1758, _1759, _1760)));
    float _1765 = _1764 * _1758;
    float _1766 = _1764 * _1759;
    float _1767 = _1764 * _1760;
    float _1768 = dot(vec3(_370, _371, _372), vec3(cbLight._m0[_1603].xyz));
    float _3815 = isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0));
    float _1771 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
    float _3826 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _1772 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
    float _1773 = dot(vec3(_370, _371, _372), vec3(_1765, _1766, _1767));
    float _3837 = isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0));
    float _1776 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
    float _1777 = dot(vec3(cbLight._m0[_1603].xyz), vec3(_1765, _1766, _1767));
    float _3848 = isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0));
    float _1781 = _1757 * _1757;
    float _1785 = ((_1776 * _1776) * (_1781 + (-1.0))) + 1.0;
    float _1793 = exp2(log2(1.0 - (isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0)))) * 5.0);
    float _1794 = 0.959999978542327880859375 - _521;
    float _1796 = 0.959999978542327880859375 - _522;
    float _1797 = 0.959999978542327880859375 - _523;
    float _1804 = 1.0 - _1757;
    float _1815 = (0.5 / (((_1772 * ((_1771 * _1804) + _1757)) + 9.9999999392252902907785028219223e-09) + (((_1772 * _1804) + _1757) * _1771))) * _1771;
    float _3859 = isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0));
    float _1817 = (isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0))) * (_1781 / ((_1785 * _1785) * 3.141590118408203125));
    uint _1831 = _1603 + 9u;
    float _1842 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1644].w)) * _373) * 0.949999988079071044921875);
    float _1843 = _1842 * _1842;
    float _1844 = cbLight._m0[_1644].x + _451;
    float _1845 = cbLight._m0[_1644].y + _452;
    float _1846 = cbLight._m0[_1644].z + _453;
    float _1850 = inversesqrt(dot(vec3(_1844, _1845, _1846), vec3(_1844, _1845, _1846)));
    float _1851 = _1850 * _1844;
    float _1852 = _1850 * _1845;
    float _1853 = _1850 * _1846;
    float _1854 = dot(vec3(_370, _371, _372), vec3(cbLight._m0[_1644].xyz));
    float _3870 = isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0));
    float _1857 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
    float _1858 = dot(vec3(_370, _371, _372), vec3(_1851, _1852, _1853));
    float _3881 = isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0));
    float _1861 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
    float _1862 = dot(vec3(cbLight._m0[_1644].xyz), vec3(_1851, _1852, _1853));
    float _3892 = isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0));
    float _1866 = _1843 * _1843;
    float _1870 = ((_1861 * _1861) * (_1866 + (-1.0))) + 1.0;
    float _1877 = exp2(log2(1.0 - (isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0)))) * 5.0);
    float _1884 = 1.0 - _1843;
    float _1894 = (0.5 / (((_1772 * ((_1857 * _1884) + _1843)) + 9.9999999392252902907785028219223e-09) + (((_1772 * _1884) + _1843) * _1857))) * _1857;
    float _3903 = isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0));
    float _1896 = (isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0))) * (_1866 / ((_1870 * _1870) * 3.141590118408203125));
    float _1906 = (((((_1877 * _1794) + _524) * cbLight._m0[_1831].x) * _1896) * _1626) + ((((cbLight._m0[_1743].x * _1595) * ((_1793 * _1794) + _524)) * _1817) * _1640);
    float _1907 = (((((_1877 * _1796) + _526) * cbLight._m0[_1831].y) * _1896) * _1626) + ((((cbLight._m0[_1743].y * _1596) * ((_1793 * _1796) + _526)) * _1817) * _1640);
    float _1908 = (((((_1877 * _1797) + _527) * cbLight._m0[_1831].z) * _1896) * _1626) + ((((cbLight._m0[_1743].z * _1597) * ((_1793 * _1797) + _527)) * _1817) * _1640);
    float _1970;
    float _1972;
    float _1974;
    if (_1680)
    {
        _1970 = _1906;
        _1972 = _1907;
        _1974 = _1908;
    }
    else
    {
        uint _1976 = _1603 + 2u;
        uint _1980 = _1603 + 10u;
        float _1994 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1976].w)) * _373) * 0.949999988079071044921875);
        float _1995 = _1994 * _1994;
        float _1996 = cbLight._m0[_1976].x + _451;
        float _1997 = cbLight._m0[_1976].y + _452;
        float _1998 = cbLight._m0[_1976].z + _453;
        float _2002 = inversesqrt(dot(vec3(_1996, _1997, _1998), vec3(_1996, _1997, _1998)));
        float _2003 = _2002 * _1996;
        float _2004 = _2002 * _1997;
        float _2005 = _2002 * _1998;
        float _2006 = dot(vec3(_370, _371, _372), vec3(cbLight._m0[_1976].xyz));
        float _3914 = isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0));
        float _2009 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
        float _2010 = dot(vec3(_370, _371, _372), vec3(_2003, _2004, _2005));
        float _3925 = isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0));
        float _2013 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
        float _2014 = dot(vec3(cbLight._m0[_1976].xyz), vec3(_2003, _2004, _2005));
        float _3936 = isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0));
        float _2018 = _1995 * _1995;
        float _2022 = ((_2013 * _2013) * (_2018 + (-1.0))) + 1.0;
        float _2029 = exp2(log2(1.0 - (isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0)))) * 5.0);
        float _2036 = 1.0 - _1995;
        float _2046 = (0.5 / (((_1772 * ((_2009 * _2036) + _1995)) + 9.9999999392252902907785028219223e-09) + (((_1772 * _2036) + _1995) * _2009))) * _2009;
        float _3947 = isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0));
        float _2048 = (isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0))) * (_2018 / ((_2022 * _2022) * 3.141590118408203125));
        float _2049 = isnan(1.0) ? _1618 : (isnan(_1618) ? 1.0 : min(_1618, 1.0));
        _1970 = (((((_2029 * _1794) + _524) * cbLight._m0[_1980].x) * _2048) * _2049) + _1906;
        _1972 = (((((_2029 * _1796) + _526) * cbLight._m0[_1980].y) * _2048) * _2049) + _1907;
        _1974 = (((((_2029 * _1797) + _527) * cbLight._m0[_1980].z) * _2048) * _2049) + _1908;
    }
    float _2084;
    float _2086;
    float _2088;
    if (_1698)
    {
        _2084 = _1970;
        _2086 = _1972;
        _2088 = _1974;
    }
    else
    {
        uint _2095 = _1603 + 3u;
        uint _2099 = _1603 + 11u;
        float _2113 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2095].w)) * _373) * 0.949999988079071044921875);
        float _2114 = _2113 * _2113;
        float _2115 = cbLight._m0[_2095].x + _451;
        float _2116 = cbLight._m0[_2095].y + _452;
        float _2117 = cbLight._m0[_2095].z + _453;
        float _2121 = inversesqrt(dot(vec3(_2115, _2116, _2117), vec3(_2115, _2116, _2117)));
        float _2122 = _2121 * _2115;
        float _2123 = _2121 * _2116;
        float _2124 = _2121 * _2117;
        float _2125 = dot(vec3(_370, _371, _372), vec3(cbLight._m0[_2095].xyz));
        float _3963 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
        float _2128 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
        float _2129 = dot(vec3(_370, _371, _372), vec3(_2122, _2123, _2124));
        float _3974 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
        float _2132 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
        float _2133 = dot(vec3(cbLight._m0[_2095].xyz), vec3(_2122, _2123, _2124));
        float _3985 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
        float _2137 = _2114 * _2114;
        float _2141 = ((_2132 * _2132) * (_2137 + (-1.0))) + 1.0;
        float _2148 = exp2(log2(1.0 - (isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0)))) * 5.0);
        float _2155 = 1.0 - _2114;
        float _2165 = (0.5 / (((_1772 * ((_2128 * _2155) + _2114)) + 9.9999999392252902907785028219223e-09) + (((_1772 * _2155) + _2114) * _2128))) * _2128;
        float _3996 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
        float _2167 = (isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0))) * (_2137 / ((_2141 * _2141) * 3.141590118408203125));
        float _2168 = isnan(1.0) ? _1619 : (isnan(_1619) ? 1.0 : min(_1619, 1.0));
        _2084 = (((((_2148 * _1794) + _524) * cbLight._m0[_2099].x) * _2167) * _2168) + _1970;
        _2086 = (((((_2148 * _1796) + _526) * cbLight._m0[_2099].y) * _2167) * _2168) + _1972;
        _2088 = (((((_2148 * _1797) + _527) * cbLight._m0[_2099].z) * _2167) * _2168) + _1974;
    }
    float _2303;
    float _2305;
    float _2307;
    float _2309;
    float _2311;
    float _2313;
    if (_1601.y == 0u)
    {
        float _2243 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2244 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2243;
        float _2245 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2243;
        float _2246 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2243;
        uvec4 _2258 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2259 = _2258.x;
        uint _2270 = uint((float(_2258.y) * floor(float(uint(cbSceneParam._m0[85u].y * _460) / _2259))) + floor(float(uint(cbSceneParam._m0[85u].x * _459) / _2259)));
        float _2280 = (log2(_2246 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2281 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
        uint _2284 = uint(isnan(14.0) ? _2281 : (isnan(_2281) ? 14.0 : min(_2281, 14.0)));
        uvec4 _2289 = texelFetch(g_lightClusterGridBuffer, int(((_2284 << 2u) + (_2270 << 6u)) >> 2u));
        uint _2290 = _2289.x;
        uint _2291 = _2258.z;
        float _2391;
        float _2393;
        float _2395;
        float _2397;
        float _2399;
        float _2401;
        if (((((1u << ((_2291 >> 4u) & 15u)) + 4294967295u) & _2290) == 0u) || ((_2291 & 240u) == 0u))
        {
            _2391 = 0.0;
            _2393 = 0.0;
            _2395 = 0.0;
            _2397 = 0.0;
            _2399 = 0.0;
            _2401 = 0.0;
        }
        else
        {
            float _2392;
            float _2394;
            float _2396;
            float _2398;
            float _2400;
            float _2402;
            float _2536 = 0.0;
            float _2537 = 0.0;
            float _2538 = 0.0;
            float _2539 = 0.0;
            float _2540 = 0.0;
            float _2541 = 0.0;
            uint _2542 = 0u;
            uint _2551;
            bool _2552;
            for (;;)
            {
                _2551 = texelFetch(g_lightClassification, int((((_2284 << 5u) + (_2270 << 9u)) + (_2542 << 2u)) >> 2u)).x;
                _2552 = _2551 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2552)
                {
                    frontier_phi_61_pred = _2536;
                    frontier_phi_61_pred_1 = _2541;
                    frontier_phi_61_pred_2 = _2540;
                    frontier_phi_61_pred_3 = _2539;
                    frontier_phi_61_pred_4 = _2538;
                    frontier_phi_61_pred_5 = _2537;
                }
                else
                {
                    float _2660;
                    float _2661;
                    float _2662;
                    float _2663;
                    float _2664;
                    float _2665;
                    uint _2666;
                    _2660 = _2536;
                    _2661 = _2537;
                    _2662 = _2538;
                    _2663 = _2539;
                    _2664 = _2540;
                    _2665 = _2541;
                    _2666 = _2551;
                    float _2592;
                    float _2593;
                    float _2594;
                    float _2595;
                    float _2596;
                    float _2597;
                    for (;;)
                    {
                        uint _2670 = uint(findLSB(_2666)) + (_2542 << 5u);
                        uint _2667 = (_2666 + 4294967295u) & _2666;
                        uint _2672 = _2670 * 48u;
                        vec4 _2686 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2672)).x, texelFetch(g_PointLightRenderingBuffer, int(_2672 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2672 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2672 + 3u)).x));
                        uint _2692 = (_2670 * 48u) + 4u;
                        vec4 _2705 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2692)).x, texelFetch(g_PointLightRenderingBuffer, int(_2692 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2692 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2692 + 3u)).x));
                        uint _2711 = (_2670 * 48u) + 8u;
                        vec3 _2722 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2711)).x, texelFetch(g_PointLightRenderingBuffer, int(_2711 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2711 + 2u)).x));
                        float _2726 = _2686.x - _2244;
                        float _2727 = _2686.y - _2245;
                        float _2728 = _2686.z - _2246;
                        float _2729 = dot(vec3(_2726, _2727, _2728), vec3(_2726, _2727, _2728));
                        float _2732 = inversesqrt(_2729);
                        float _2733 = _2732 * _2726;
                        float _2734 = _2732 * _2727;
                        float _2735 = _2732 * _2728;
                        float _2736 = dot(vec3(_481, _484, _487), vec3(_2733, _2734, _2735));
                        float _2741 = 1.0 - (_2729 * _2686.w);
                        float _4022 = isnan(0.0) ? _2741 : (isnan(_2741) ? 0.0 : max(_2741, 0.0));
                        float _2742 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
                        float _2743 = sqrt(_2729) * _2705.w;
                        float _2746 = 1.39999997615814208984375 / (_2743 + 1.39999997615814208984375);
                        float _2747 = _2746 * _2746;
                        float _2750 = ((1.0 - _2747) * _2736) + _2747;
                        float _2753 = _2743 * _2743;
                        float _2757 = ((isnan(0.0) ? _2750 : (isnan(_2750) ? 0.0 : max(_2750, 0.0))) * _2742) / ((_2753 * 0.699999988079071044921875) + 1.0);
                        float _2761 = (-0.0) - _2244;
                        float _2762 = (-0.0) - _2245;
                        float _2763 = (-0.0) - _2246;
                        float _2767 = inversesqrt(dot(vec3(_2761, _2762, _2763), vec3(_2761, _2762, _2763)));
                        float _2768 = _2767 * _2761;
                        float _2769 = _2767 * _2762;
                        float _2770 = _2767 * _2763;
                        float _2778 = exp2(log2(1.0 / ((_2753 * 3.5) + 5.0)) * 0.25);
                        float _2779 = 1.0 - _556;
                        float _2786 = sqrt(1.0 - ((1.0 - (_2779 * _2779)) * (1.0 - (_2778 * _2778))));
                        float _2787 = _2786 * _2786;
                        float _2788 = _2787 * _2787;
                        float _2789 = _2768 + _2733;
                        float _2790 = _2769 + _2734;
                        float _2791 = _2770 + _2735;
                        float _2795 = inversesqrt(dot(vec3(_2789, _2790, _2791), vec3(_2789, _2790, _2791)));
                        float _2799 = dot(vec3(_481, _484, _487), vec3(_2768, _2769, _2770));
                        float _4038 = isnan(0.0) ? _2799 : (isnan(_2799) ? 0.0 : max(_2799, 0.0));
                        float _2802 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
                        float _2803 = dot(vec3(_481, _484, _487), vec3(_2795 * _2789, _2795 * _2790, _2795 * _2791));
                        float _4049 = isnan(0.0) ? _2803 : (isnan(_2803) ? 0.0 : max(_2803, 0.0));
                        float _2806 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
                        float _2810 = ((_2806 * _2806) * (_2788 + (-1.0))) + 1.0;
                        float _2811 = _2746 * _2787;
                        float _2812 = _2811 * _2811;
                        float _2815 = ((1.0 - _2812) * _2736) + _2812;
                        float _4060 = isnan(0.0) ? _2815 : (isnan(_2815) ? 0.0 : max(_2815, 0.0));
                        float _2816 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
                        float _2817 = 1.0 - _2787;
                        float _2827 = (0.5 / (((_2816 * ((_2802 * _2817) + _2787)) + 9.9999999392252902907785028219223e-09) + (((_2816 * _2817) + _2787) * _2802))) * _2816;
                        float _4071 = isnan(0.0) ? _2827 : (isnan(_2827) ? 0.0 : max(_2827, 0.0));
                        float _2838 = (((_2788 * 3.1415927410125732421875) * (isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0)))) / ((_2810 * _2810) * ((_2753 * 2.1991131305694580078125) + 3.141590118408203125))) * _2742;
                        _2595 = (_2757 * _2705.x) + _2663;
                        _2596 = (_2757 * _2705.y) + _2664;
                        _2597 = (_2757 * _2705.z) + _2665;
                        _2592 = (_2838 * _2722.x) + _2660;
                        _2593 = (_2838 * _2722.y) + _2661;
                        _2594 = (_2838 * _2722.z) + _2662;
                        if (_2667 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2660 = _2592;
                            _2661 = _2593;
                            _2662 = _2594;
                            _2663 = _2595;
                            _2664 = _2596;
                            _2665 = _2597;
                            _2666 = _2667;
                        }
                    }
                    frontier_phi_61_pred = _2592;
                    frontier_phi_61_pred_1 = _2597;
                    frontier_phi_61_pred_2 = _2596;
                    frontier_phi_61_pred_3 = _2595;
                    frontier_phi_61_pred_4 = _2594;
                    frontier_phi_61_pred_5 = _2593;
                }
                _2392 = frontier_phi_61_pred;
                _2402 = frontier_phi_61_pred_1;
                _2400 = frontier_phi_61_pred_2;
                _2398 = frontier_phi_61_pred_3;
                _2396 = frontier_phi_61_pred_4;
                _2394 = frontier_phi_61_pred_5;
                uint _2543 = _2542 + 1u;
                if (_2543 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2536 = _2392;
                    _2537 = _2394;
                    _2538 = _2396;
                    _2539 = _2398;
                    _2540 = _2400;
                    _2541 = _2402;
                    _2542 = _2543;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2391 = _2392;
            _2393 = _2394;
            _2395 = _2396;
            _2397 = _2398;
            _2399 = _2400;
            _2401 = _2402;
        }
        uvec4 _2405 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2406 = _2405.z;
        uint _2408 = (_2406 >> 8u) & 15u;
        float _2504;
        float _2506;
        float _2508;
        float _2510;
        float _2512;
        float _2514;
        if (((4294967295u << _2408) & _2290) == 0u)
        {
            _2504 = _2391;
            _2506 = _2393;
            _2508 = _2395;
            _2510 = _2397;
            _2512 = _2399;
            _2514 = _2401;
        }
        else
        {
            float _2529 = inversesqrt(dot(vec3(_2244, _2245, _2246), vec3(_2244, _2245, _2246)));
            float _2530 = _2529 * _2244;
            float _2531 = _2529 * _2245;
            float _2532 = _2529 * _2246;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2408 < ((_2406 >> 12u) & 15u))
            {
                float _2505;
                float _2507;
                float _2509;
                float _2511;
                float _2513;
                float _2515;
                float _2643 = _2391;
                float _2644 = _2393;
                float _2645 = _2395;
                float _2646 = _2397;
                float _2647 = _2399;
                float _2648 = _2401;
                uint _2649 = _2408;
                uint _2658;
                bool _2659;
                for (;;)
                {
                    _2658 = texelFetch(g_lightClassification, int((((_2284 << 5u) + (_2270 << 9u)) + (_2649 << 2u)) >> 2u)).x;
                    _2659 = _2658 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2659)
                    {
                        frontier_phi_67_pred = _2646;
                        frontier_phi_67_pred_1 = _2647;
                        frontier_phi_67_pred_2 = _2648;
                        frontier_phi_67_pred_3 = _2645;
                        frontier_phi_67_pred_4 = _2644;
                        frontier_phi_67_pred_5 = _2643;
                    }
                    else
                    {
                        float _2843;
                        float _2844;
                        float _2845;
                        float _2846;
                        float _2847;
                        float _2848;
                        float _3138;
                        float _3139;
                        float _3140;
                        float _3141;
                        float _3142;
                        float _3143;
                        float _2856 = _2643;
                        float _2857 = _2644;
                        float _2858 = _2645;
                        float _2859 = _2646;
                        float _2860 = _2647;
                        float _2861 = _2648;
                        uint _2862 = _2658;
                        uint _2863;
                        vec4 _2888;
                        float _2889;
                        vec4 _2904;
                        vec3 _2916;
                        vec4 _2932;
                        vec4 _2947;
                        float _2994;
                        bool _2995;
                        for (;;)
                        {
                            uint _2873 = ((_2649 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2862));
                            _2863 = (_2862 + 4294967295u) & _2862;
                            uint _2875 = _2873 * 40u;
                            _2888 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2875)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2875 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2875 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2875 + 3u)).x));
                            _2889 = _2888.w;
                            uint _2891 = (_2873 * 40u) + 4u;
                            _2904 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2891)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2891 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2891 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2891 + 3u)).x));
                            uint _2906 = (_2873 * 40u) + 8u;
                            _2916 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2906)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2906 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2906 + 2u)).x));
                            uint _2919 = (_2873 * 40u) + 16u;
                            _2932 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2919)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2919 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2919 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2919 + 3u)).x));
                            uint _2934 = (_2873 * 40u) + 20u;
                            _2947 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2934)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2934 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2934 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2934 + 3u)).x));
                            uint _2950 = (_2873 * 40u) + 24u;
                            vec4 _2963 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2950)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2950 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2950 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2950 + 3u)).x));
                            uint _2969 = (_2873 * 40u) + 28u;
                            vec4 _2982 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2969)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2969 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2969 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2969 + 3u)).x));
                            _2994 = fma(_2246, _2982.z, fma(_2245, _2982.y, _2982.x * _2244)) + _2982.w;
                            _2995 = !((fma(_2246, _2963.z, fma(_2245, _2963.y, _2963.x * _2244)) + _2963.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2995)
                            {
                                float _3022 = _2888.x - _2244;
                                float _3023 = _2888.y - _2245;
                                float _3024 = _2888.z - _2246;
                                float _3025 = dot(vec3(_3022, _3023, _3024), vec3(_3022, _3023, _3024));
                                float _3028 = inversesqrt(_3025);
                                float _3029 = _3028 * _3022;
                                float _3030 = _3028 * _3023;
                                float _3031 = _3028 * _3024;
                                float _3035 = 1.0 - (_3025 / (_2889 * _2889));
                                float _4082 = isnan(0.0) ? _3035 : (isnan(_3035) ? 0.0 : max(_3035, 0.0));
                                float _3036 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
                                float _3040 = sqrt(_3025) * _2904.w;
                                float _3042 = 1.39999997615814208984375 / (_3040 + 1.39999997615814208984375);
                                float _3043 = _3042 * _3042;
                                float _3046 = ((1.0 - _3043) * dot(vec3(_3029, _3030, _3031), vec3(_481, _484, _487))) + _3043;
                                float _3049 = _3040 * _3040;
                                float _3053 = (fma(_2246, _2932.z, fma(_2245, _2932.y, _2932.x * _2244)) + _2932.w) / _2994;
                                float _3054 = (fma(_2246, _2947.z, fma(_2245, _2947.y, _2947.x * _2244)) + _2947.w) / _2994;
                                float _3058 = 1.0 - dot(vec2(_3053, _3054), vec2(_3053, _3054));
                                float _4098 = isnan(0.0) ? _3058 : (isnan(_3058) ? 0.0 : max(_3058, 0.0));
                                float _3059 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
                                float _3060 = _3059 * (((isnan(0.0) ? _3046 : (isnan(_3046) ? 0.0 : max(_3046, 0.0))) * _3036) / ((_3049 * 0.699999988079071044921875) + 1.0));
                                float _3072 = exp2(log2(1.0 / ((_3049 * 3.5) + 5.0)) * 0.25);
                                float _3073 = 1.0 - _556;
                                float _3080 = sqrt(1.0 - ((1.0 - (_3073 * _3073)) * (1.0 - (_3072 * _3072))));
                                float _3081 = _3080 * _3080;
                                float _3082 = _3081 * _3081;
                                float _3083 = _3029 - _2530;
                                float _3084 = _3030 - _2531;
                                float _3085 = _3031 - _2532;
                                float _3089 = inversesqrt(dot(vec3(_3083, _3084, _3085), vec3(_3083, _3084, _3085)));
                                float _3093 = dot(vec3(_481, _484, _487), vec3((-0.0) - _2530, (-0.0) - _2531, (-0.0) - _2532));
                                float _4109 = isnan(0.0) ? _3093 : (isnan(_3093) ? 0.0 : max(_3093, 0.0));
                                float _3096 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
                                float _3097 = dot(vec3(_481, _484, _487), vec3(_3089 * _3083, _3089 * _3084, _3089 * _3085));
                                float _4120 = isnan(0.0) ? _3097 : (isnan(_3097) ? 0.0 : max(_3097, 0.0));
                                float _3100 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
                                float _3104 = ((_3100 * _3100) * (_3082 + (-1.0))) + 1.0;
                                float _3105 = _3042 * _3081;
                                float _3106 = _3105 * _3105;
                                float _3112 = ((1.0 - _3106) * dot(vec3(_481, _484, _487), vec3(_3029, _3030, _3031))) + _3106;
                                float _4131 = isnan(0.0) ? _3112 : (isnan(_3112) ? 0.0 : max(_3112, 0.0));
                                float _3113 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
                                float _3114 = 1.0 - _3081;
                                float _3124 = (0.5 / (((_3113 * ((_3096 * _3114) + _3081)) + 9.9999999392252902907785028219223e-09) + (((_3113 * _3114) + _3081) * _3096))) * _3113;
                                float _4142 = isnan(0.0) ? _3124 : (isnan(_3124) ? 0.0 : max(_3124, 0.0));
                                float _3134 = (_3059 * _3036) * (((_3082 * 3.1415927410125732421875) * (isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0)))) / ((_3104 * _3104) * ((_3049 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3134 * _2916.x;
                                frontier_phi_73_pred_1 = _3134 * _2916.y;
                                frontier_phi_73_pred_2 = _3060 * _2904.z;
                                frontier_phi_73_pred_3 = _3060 * _2904.y;
                                frontier_phi_73_pred_4 = _3060 * _2904.x;
                                frontier_phi_73_pred_5 = _3134 * _2916.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3138 = frontier_phi_73_pred;
                            _3139 = frontier_phi_73_pred_1;
                            _3143 = frontier_phi_73_pred_2;
                            _3142 = frontier_phi_73_pred_3;
                            _3141 = frontier_phi_73_pred_4;
                            _3140 = frontier_phi_73_pred_5;
                            _2846 = _3141 + _2859;
                            _2847 = _3142 + _2860;
                            _2848 = _3143 + _2861;
                            _2843 = _3138 + _2856;
                            _2844 = _3139 + _2857;
                            _2845 = _3140 + _2858;
                            if (_2863 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2856 = _2843;
                                _2857 = _2844;
                                _2858 = _2845;
                                _2859 = _2846;
                                _2860 = _2847;
                                _2861 = _2848;
                                _2862 = _2863;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2846;
                        frontier_phi_67_pred_1 = _2847;
                        frontier_phi_67_pred_2 = _2848;
                        frontier_phi_67_pred_3 = _2845;
                        frontier_phi_67_pred_4 = _2844;
                        frontier_phi_67_pred_5 = _2843;
                    }
                    _2511 = frontier_phi_67_pred;
                    _2513 = frontier_phi_67_pred_1;
                    _2515 = frontier_phi_67_pred_2;
                    _2509 = frontier_phi_67_pred_3;
                    _2507 = frontier_phi_67_pred_4;
                    _2505 = frontier_phi_67_pred_5;
                    uint _2650 = _2649 + 1u;
                    if (_2650 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2643 = _2505;
                        _2644 = _2507;
                        _2645 = _2509;
                        _2646 = _2511;
                        _2647 = _2513;
                        _2648 = _2515;
                        _2649 = _2650;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2513;
                frontier_phi_55_56_ladder_1 = _2515;
                frontier_phi_55_56_ladder_2 = _2511;
                frontier_phi_55_56_ladder_3 = _2509;
                frontier_phi_55_56_ladder_4 = _2507;
                frontier_phi_55_56_ladder_5 = _2505;
            }
            else
            {
                frontier_phi_55_56_ladder = _2399;
                frontier_phi_55_56_ladder_1 = _2401;
                frontier_phi_55_56_ladder_2 = _2397;
                frontier_phi_55_56_ladder_3 = _2395;
                frontier_phi_55_56_ladder_4 = _2393;
                frontier_phi_55_56_ladder_5 = _2391;
            }
            _2504 = frontier_phi_55_56_ladder_5;
            _2506 = frontier_phi_55_56_ladder_4;
            _2508 = frontier_phi_55_56_ladder_3;
            _2510 = frontier_phi_55_56_ladder_2;
            _2512 = frontier_phi_55_56_ladder;
            _2514 = frontier_phi_55_56_ladder_1;
        }
        float _2519 = isnan(1.0) ? _540 : (isnan(_540) ? 1.0 : min(_540, 1.0));
        _2303 = (_2519 * _2510) + _1736;
        _2305 = (_2519 * _2512) + _1738;
        _2307 = (_2519 * _2514) + _1740;
        _2309 = ((_2504 * _524) * _2519) + _2084;
        _2311 = ((_2506 * _526) * _2519) + _2086;
        _2313 = ((_2508 * _527) * _2519) + _2088;
    }
    else
    {
        _2303 = _1736;
        _2305 = _1738;
        _2307 = _1740;
        _2309 = _2084;
        _2311 = _2086;
        _2313 = _2088;
    }
    float _4158 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _4169 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _4180 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    uint _2333 = _222 + 6u;
    float _2341 = _459 / cbSceneParam._m0[86u].x;
    float _2342 = _460 / cbSceneParam._m0[86u].y;
    vec4 _2356 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2341, _2342, (log2((isnan(cbSceneParam._m0[77u].w) ? _392 : (isnan(_392) ? cbSceneParam._m0[77u].w : min(_392, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2358 = _2356.x;
    float _2359 = _2356.y;
    float _2360 = _2356.z;
    float _2361 = _2356.w;
    float _2454;
    float _2456;
    float _2458;
    float _2460;
    if (_392 > cbSceneParam._m0[78u].w)
    {
        float _2416 = isnan(_392) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _392 : min(cbSceneParam._m0[80u].w, _392));
        float _2417 = _2416 / _392;
        float _2428 = _2417 * _444;
        float _2429 = _445 * _2417;
        float _2430 = (-0.0) - _2429;
        float _2432 = _2417 * _446;
        float _2434 = (cbSceneParam._m0[77u].w * _2430) / _2416;
        float _2435 = _2434 + cbSceneParam._m0[79u].w;
        float _2436 = cbSceneParam._m0[79u].w - _2429;
        float _2442 = sqrt(((_2428 * _2428) + (_2429 * _2429)) + (_2432 * _2432));
        float _2445 = (1.0 - (cbSceneParam._m0[77u].w / _2416)) * _2442;
        float _2450 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2452 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2605;
        if (abs((_2430 - _2434) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2605 = ((((_2435 > 0.0) ? exp2(_2450 * _2435) : (2.0 - exp2(_2452 * _2435))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2445;
        }
        else
        {
            float _2565 = 1.0 / cbSceneParam._m0[80u].x;
            float _2566 = isnan(_2436) ? _2435 : (isnan(_2435) ? _2436 : max(_2435, _2436));
            float _2567 = isnan(_2436) ? _2435 : (isnan(_2435) ? _2436 : min(_2435, _2436));
            float _2576 = isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : min(_2566, 0.0));
            float _2577 = isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : min(_2567, 0.0));
            _2605 = ((abs(_2442 / _2430) * cbSceneParam._m0[80u].y) * ((((_2576 - _2577) * 2.0) - ((exp2(_2450 * (isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : max(_2566, 0.0)))) - exp2(_2450 * (isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0))))) * _2565)) - ((exp2(_2452 * _2576) - exp2(_2452 * _2577)) * _2565))) + (_2445 * cbSceneParam._m0[80u].z);
        }
        vec4 _2607 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2341, _2342, 1.0), 0.0);
        float _2616 = exp2((_2605 * (-1.44269502162933349609375)) * (1.0 - _2607.w));
        float _2617 = log2(_2616);
        float _2633 = log2(_2361);
        _2454 = (exp2(_2633 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2617 * cbSceneParam._m0[78u].x)) * _2607.x) / cbSceneParam._m0[78u].x)) + _2358;
        _2456 = (exp2(_2633 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2617 * cbSceneParam._m0[78u].y)) * _2607.y) / cbSceneParam._m0[78u].y)) + _2359;
        _2458 = (exp2(_2633 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2617 * cbSceneParam._m0[78u].z)) * _2607.z) / cbSceneParam._m0[78u].z)) + _2360;
        _2460 = _2616 * _2361;
    }
    else
    {
        _2454 = _2358;
        _2456 = _2359;
        _2458 = _2360;
        _2460 = _2361;
    }
    float _2472 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2473 = _2472 == 3.0;
    float _2474 = log2(_2460);
    float _2481 = exp2(_2474 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0))) * (_2303 + ((isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0))) * _540))) + ((_2309 + ((isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0))) * _1349)) * cbPerFrame._m0[3u].x));
    float _2482 = exp2(_2474 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0))) * (_2305 + ((isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0))) * _540))) + ((_2311 + ((isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0))) * _1349)) * cbPerFrame._m0[3u].x));
    float _2483 = exp2(_2474 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0))) * (_2307 + ((isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0))) * _540))) + ((_2313 + ((isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0))) * _1349)) * cbPerFrame._m0[3u].x));
    float _2492 = (_2472 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2492 * (_2473 ? _2481 : (_2481 + (cbSceneParam._m0[72u].w * _2454)));
    SV_Target.y = _2492 * (_2473 ? _2482 : (_2482 + (cbSceneParam._m0[72u].w * _2456)));
    SV_Target.z = _2492 * (_2473 ? _2483 : (_2483 + (cbSceneParam._m0[72u].w * _2458)));
    SV_Target.w = cbInstanceData._m0[_2333].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2333].w;
}


