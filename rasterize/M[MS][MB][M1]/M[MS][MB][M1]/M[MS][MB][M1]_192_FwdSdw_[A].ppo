#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1554;
float _4217;
float _4218;
float _4219;
float _4220;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _248 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _249 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _250 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _256 = inversesqrt(dot(vec3(_248, _249, _250), vec3(_248, _249, _250)));
    float _263 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _270 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _282 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _284 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _285 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4229 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    float _4240 = isnan(0.0) ? _284 : (isnan(_284) ? 0.0 : max(_284, 0.0));
    float _4251 = isnan(0.0) ? _285 : (isnan(_285) ? 0.0 : max(_285, 0.0));
    uint _295 = uint(roundEven(NORMAL.w)) * 13u;
    uint _300 = _295 + 1u;
    uint _304 = _295 + 2u;
    float _313 = sqrt(((cbInstanceData._m0[_300].x * cbInstanceData._m0[_300].x) + (cbInstanceData._m0[_295].x * cbInstanceData._m0[_295].x)) + (cbInstanceData._m0[_304].x * cbInstanceData._m0[_304].x));
    float _314 = _313 * TEXCOORD.z;
    float _315 = _313 * TEXCOORD.w;
    vec4 _328 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _314) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _315) + cbTextureTilingScale._m0[13u].w));
    vec4 _352 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _357 = _352.x * cbMtdParam._m0[11u].x;
    float _358 = _352.y * cbMtdParam._m0[11u].y;
    float _359 = _352.z * cbMtdParam._m0[11u].z;
    vec4 _378 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _314) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _315) + cbTextureTilingScale._m0[5u].w));
    vec4 _415 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _417 = _415.x;
    float _429 = dot(vec4(_417, _415.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _446 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_417 - _429) * cbMtdParam._m0[24u].y) + _429) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4262 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _447 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
    float _454 = (_447 * ((_378.x * cbMtdParam._m0[12u].x) - _357)) + _357;
    float _455 = (_447 * ((_378.y * cbMtdParam._m0[12u].y) - _358)) + _358;
    float _456 = (_447 * ((_378.z * cbMtdParam._m0[12u].z) - _359)) + _359;
    vec4 _473 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _314) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _315) + cbTextureTilingScale._m0[3u].w));
    vec4 _493 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _495 = _493.x;
    float _505 = dot(vec4(_495, _493.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _519 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_495 - _505) * cbMtdParam._m0[24u].y) + _505) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4273 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _520 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
    float _527 = (_520 * ((_473.x * cbMtdParam._m0[13u].x) - _454)) + _454;
    float _528 = (_520 * ((_473.y * cbMtdParam._m0[13u].y) - _455)) + _455;
    float _529 = (_520 * ((_473.z * cbMtdParam._m0[13u].z) - _456)) + _456;
    float _533 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _328.x) * _527;
    float _536 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _328.y) * _528;
    float _539 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _328.z) * _529;
    float _546 = ((_527 - _533) * (isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0)))) + _533;
    float _547 = ((_528 - _536) * (isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0)))) + _536;
    float _548 = ((_529 - _539) * (isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0)))) + _539;
    vec4 _565 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _314) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _315) + cbTextureTilingScale._m0[20u].w));
    vec4 _588 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _314) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _315) + cbTextureTilingScale._m0[4u].w));
    vec4 _605 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _607 = _605.x;
    float _608 = _605.y;
    float _609 = _605.z;
    float _616 = ((_588.x - _607) * _447) + _607;
    float _617 = ((_588.y - _608) * _447) + _608;
    float _618 = ((_588.z - _609) * _447) + _609;
    vec4 _630 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _314) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _315) + cbTextureTilingScale._m0[2u].w));
    float _643 = ((_630.z - _618) * _520) + _618;
    float _646 = ((((_630.x - _616) * _520) + _616) * 2.0) + (-1.0);
    float _647 = ((((_630.y - _617) * _520) + _617) * 2.0) + (-1.0);
    float _648 = dot(vec2(_646, _647), vec2(_646, _647));
    float _4284 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _653 = sqrt(1.0 - (isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0))));
    vec4 _667 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _692 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _314) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _315) + cbTextureTilingScale._m0[11u].w));
    float _694 = _692.x;
    float _695 = 1.0 - _694;
    float _701 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _704 = ((isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : min(_701, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _713 = (_704 - ((((((_694 - _695) * cbMtdParam._m0[24u].z) + _695) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _704))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4305 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _714 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
    float _721 = (_714 * (cbMtdParam._m0[17u].x - _546)) + _546;
    float _722 = (_714 * (cbMtdParam._m0[17u].y - _547)) + _547;
    float _723 = (_714 * (cbMtdParam._m0[17u].z - _548)) + _548;
    vec4 _735 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _314) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _315) + cbTextureTilingScale._m0[19u].w));
    float _737 = _735.x;
    float _738 = 1.0 - _737;
    float _763 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_737 - _738) * cbMtdParam._m0[24u].w) + _738) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4316 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
    float _764 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
    float _772 = ((((cbMtdParam._m0[10u].x - _721) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _764) + _721;
    float _773 = ((((cbMtdParam._m0[10u].y - _722) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _764) + _722;
    float _774 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _723)) * _764) + _723;
    vec4 _800 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _802 = _800.x;
    float _820 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _314) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _315) + cbTextureTilingScale._m0[9u].w)).x - _802) * _447) + _802;
    float _837 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _314) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _315) + cbTextureTilingScale._m0[21u].w)).x - _820) * _520) + _820;
    float _841 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _837) * cbMtdParam._m0[19u].z) + _837;
    float _843 = _841 - (_841 * _714);
    float _845 = _843 - (_843 * _764);
    float _850 = (((_565.z - _643) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _643;
    float _854 = ((_667.z - _850) * cbMtdParam._m0[19u].w) + _850;
    vec4 _868 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _314) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _315) + cbTextureTilingScale._m0[15u].w));
    float _875 = (_868.x * 2.0) + (-1.0);
    float _876 = (_868.y * 2.0) + (-1.0);
    float _877 = dot(vec2(_875, _876), vec2(_875, _876));
    float _4327 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
    float _885 = (_714 * (_868.z - _854)) + _854;
    float _888 = ((cbMtdParam._m0[23u].y - _885) * _764) + _885;
    vec4 _909 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _314) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _315) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _915 = (_909.x * 2.0) + (-1.0);
    float _916 = (_909.y * 2.0) + (-1.0);
    float _917 = dot(vec2(_915, _916), vec2(_915, _916));
    float _4338 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
    float _931 = (_646 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_565.x * 2.0) + (-1.0)))) + (((_667.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _932 = (_647 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_565.y * 2.0) + (-1.0)))) + (((_667.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _944 = (((_875 - _931) + (cbMtdParam._m0[21u].x * _931)) * _714) + _931;
    float _945 = (((_876 - _932) + (cbMtdParam._m0[21u].x * _932)) * _714) + _932;
    float _946 = (_714 * (sqrt(1.0 - (isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0)))) - _653)) + _653;
    float _957 = (((_915 - _944) + (_944 * cbMtdParam._m0[22u].z)) * _764) + _944;
    float _958 = (((_916 - _945) + (_945 * cbMtdParam._m0[22u].z)) * _764) + _945;
    float _959 = ((sqrt(1.0 - (isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0)))) - _946) * _764) + _946;
    float _961 = cbMtdParam._m0[22u].x + _667.w;
    float _964 = fma(_959, _263 * NORMAL.x, fma(_958, _270 * TANGENT.x, (_256 * _248) * _957));
    float _967 = fma(_959, _263 * NORMAL.y, fma(_958, _270 * TANGENT.y, (_256 * _249) * _957));
    float _970 = fma(_959, _263 * NORMAL.z, fma(_958, _270 * TANGENT.z, (_256 * _250) * _957));
    float _974 = inversesqrt(dot(vec3(_964, _967, _970), vec3(_964, _967, _970)));
    float _975 = _974 * _964;
    float _976 = _974 * _967;
    float _977 = _974 * _970;
    float _4349 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
    float _978 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
    float _4360 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
    float _4371 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _4382 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
    float _4393 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
    float _4404 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
    float _983 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
    float _997 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1037 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1047 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1037);
    float _1048 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1037);
    float _1049 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1037);
    float _1053 = inversesqrt(dot(vec3(_1047, _1048, _1049), vec3(_1047, _1048, _1049)));
    float _1054 = _1047 * _1053;
    float _1055 = _1048 * _1053;
    float _1056 = _1049 * _1053;
    vec4 _1061 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1063 = _1061.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1235 = sqrt(((_1047 * _1047) + (_1048 * _1048)) + (_1049 * _1049));
        float _1241 = (cbMatDynParam._m0[5u].x * _1235) + cbMatDynParam._m0[5u].y;
        float _4415 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1242 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
        float _1246 = (cbMatDynParam._m0[5u].z * _1235) + cbMatDynParam._m0[5u].w;
        float _4426 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0))) - _1242)) + _1242) < ((_1063 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1074 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1075 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1093 = fma(_977, cbSceneParam._m0[5u].z, fma(_976, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _975));
    float _1096 = fma(_977, cbSceneParam._m0[6u].z, fma(_976, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _975));
    float _1099 = fma(_977, cbSceneParam._m0[7u].z, fma(_976, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _975));
    uint _1112 = _295 + 9u;
    uint _1113 = _1112 + uint(cbMatDynParam._m0[0u].w);
    float _1119 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0)))) * cbInstanceData._m0[_1113].x;
    float _1120 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0)))) * cbInstanceData._m0[_1113].y;
    float _1121 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0)))) * cbInstanceData._m0[_1113].z;
    float _4437 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
    float _1122 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
    float _4448 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
    float _1123 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
    float _4459 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
    float _1124 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
    float _1125 = 1.0 - _983;
    float _1126 = _1122 * _1125;
    float _1127 = _1123 * _1125;
    float _1128 = _1124 * _1125;
    float _1133 = (_1122 + (-0.039999999105930328369140625)) * _983;
    float _1134 = (_1123 + (-0.039999999105930328369140625)) * _983;
    float _1135 = (_1124 + (-0.039999999105930328369140625)) * _983;
    float _1136 = _1133 + 0.039999999105930328369140625;
    float _1138 = _1134 + 0.039999999105930328369140625;
    float _1139 = _1135 + 0.039999999105930328369140625;
    vec4 _1148 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1074, cbSceneParam._m0[86u].y * _1075));
    float _1152 = ((isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0))) * TEXCOORD_5.w) * _1148.x;
    float _1153 = dot(vec3(_975, _976, _977), vec3(_1054, _1055, _1056));
    float _1156 = _1153 * 2.0;
    float _1160 = (_1156 * _975) - _1054;
    float _1161 = (_1156 * _976) - _1055;
    float _1162 = (_1156 * _977) - _1056;
    float _1166 = abs(dot(vec3(_1054, _1055, _1056), vec3(_975, _976, _977)));
    float _4470 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
    float _1168 = sqrt(_978);
    float _1181 = exp2((_1168 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1168 * 3.0));
    float _1187 = (1.0 - _1181) * ((_1168 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1188 = _1181 * _1168;
    float _1216 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1220 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1224 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1553;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1278 = fma(_1224, cbModelParam._m0[26u].z, fma(_1220, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1216));
        float _1282 = fma(_1224, cbModelParam._m0[27u].z, fma(_1220, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1216));
        float _1286 = fma(_1224, cbModelParam._m0[28u].z, fma(_1220, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1216));
        float _1311 = _1216 + _975;
        float _1312 = _1220 + _976;
        float _1313 = _1224 + _977;
        float _1323 = fma(_1313, cbModelParam._m0[26u].z, fma(_1312, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1311)) - _1278;
        float _1324 = fma(_1313, cbModelParam._m0[27u].z, fma(_1312, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1311)) - _1282;
        float _1325 = fma(_1313, cbModelParam._m0[28u].z, fma(_1312, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1311)) - _1286;
        float _1329 = inversesqrt(dot(vec3(_1323, _1324, _1325), vec3(_1323, _1324, _1325)));
        float _1342 = ((_1329 * _1323) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1278 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1343 = ((_1329 * _1324) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1282 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1344 = ((_1329 * _1325) / cbModelParam._m0[34u].z) + ((((((_1286 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1347 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1342, _1343, _1344), 0.0);
        vec4 _1354 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1342, _1343, _1344), 0.0);
        vec4 _1361 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1342, _1343, _1344), 0.0);
        vec4 _1368 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1342, _1343, _1344), 0.0);
        float _1381 = exp2((_1347.w + (-0.5)) * 20.0) * 2.0;
        float _1382 = _1381 * (_1347.x + (-0.5));
        float _1383 = _1381 * (_1347.y + (-0.5));
        float _1384 = _1381 * (_1347.z + (-0.5));
        float _1391 = exp2((_1354.w + (-0.5)) * 20.0) * 2.0;
        float _1392 = _1391 * (_1354.x + (-0.5));
        float _1393 = _1391 * (_1354.y + (-0.5));
        float _1394 = _1391 * (_1354.z + (-0.5));
        float _1401 = exp2((_1361.w + (-0.5)) * 20.0) * 2.0;
        float _1402 = _1401 * (_1361.x + (-0.5));
        float _1403 = _1401 * (_1361.y + (-0.5));
        float _1404 = _1401 * (_1361.z + (-0.5));
        float _1411 = exp2((_1368.w + (-0.5)) * 20.0) * 2.0;
        float _1412 = _1411 * (_1368.x + (-0.5));
        float _1413 = _1411 * (_1368.y + (-0.5));
        float _1414 = _1411 * (_1368.z + (-0.5));
        float _1415 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1416 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1417 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1418 = _1382 * 0.5;
        float _1419 = _1392 * 0.5;
        float _1420 = _1402 * 0.5;
        float _1421 = dot(vec3(_1418, _1419, _1420), vec3(_1418, _1419, _1420));
        float _1426 = (_1421 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1421);
        float _1435 = (dot(vec3(_975, _976, _977), vec3(_1426 * _1418, _1426 * _1419, _1426 * _1420)) + 1.0) * 0.5;
        float _4496 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1445 = sqrt(((_1419 * _1419) + (_1418 * _1418)) + (_1420 * _1420)) / (_1415 + 9.9999997473787516355514526367188e-06);
        float _4507 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1446 = isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0));
        float _1447 = _1446 * 2.0;
        float _1451 = (1.0 - _1446) / (_1446 + 1.0);
        float _4518 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1452 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
        float _1461 = ((((1.0 - _1452) * (_1447 + 2.0)) * exp2(log2(isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0))) * (_1447 + 1.0))) + _1452) * _1415;
        float _1462 = _1383 * 0.5;
        float _1463 = _1393 * 0.5;
        float _1464 = _1403 * 0.5;
        float _1465 = dot(vec3(_1462, _1463, _1464), vec3(_1462, _1463, _1464));
        float _1470 = (_1465 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1465);
        float _1478 = (dot(vec3(_975, _976, _977), vec3(_1470 * _1462, _1470 * _1463, _1470 * _1464)) + 1.0) * 0.5;
        float _4529 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1487 = sqrt(((_1463 * _1463) + (_1462 * _1462)) + (_1464 * _1464)) / (_1416 + 9.9999997473787516355514526367188e-06);
        float _4540 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1488 = isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0));
        float _1489 = _1488 * 2.0;
        float _1493 = (1.0 - _1488) / (_1488 + 1.0);
        float _4551 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1494 = isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0));
        float _1503 = ((((1.0 - _1494) * (_1489 + 2.0)) * exp2(log2(isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0))) * (_1489 + 1.0))) + _1494) * _1416;
        float _1504 = _1384 * 0.5;
        float _1505 = _1394 * 0.5;
        float _1506 = _1404 * 0.5;
        float _1507 = dot(vec3(_1504, _1505, _1506), vec3(_1504, _1505, _1506));
        float _1512 = (_1507 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1507);
        float _1520 = (dot(vec3(_975, _976, _977), vec3(_1512 * _1504, _1512 * _1505, _1512 * _1506)) + 1.0) * 0.5;
        float _4562 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
        float _1529 = sqrt(((_1505 * _1505) + (_1504 * _1504)) + (_1506 * _1506)) / (_1417 + 9.9999997473787516355514526367188e-06);
        float _4573 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
        float _1530 = isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0));
        float _1531 = _1530 * 2.0;
        float _1535 = (1.0 - _1530) / (_1530 + 1.0);
        float _4584 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1536 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
        float _1545 = ((((1.0 - _1536) * (_1531 + 2.0)) * exp2(log2(isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0))) * (_1531 + 1.0))) + _1536) * _1417;
        _1553 = _1384;
        _1555 = _1383;
        _1556 = _1382;
        _1557 = _1394;
        _1558 = _1393;
        _1559 = _1392;
        _1560 = _1404;
        _1561 = _1403;
        _1562 = _1402;
        _1563 = _1417;
        _1564 = _1416;
        _1565 = _1415;
        _1566 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0)));
        _1567 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0)));
        _1568 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0)));
    }
    else
    {
        _1553 = _1554;
        _1555 = _1554;
        _1556 = _1554;
        _1557 = _1554;
        _1558 = _1554;
        _1559 = _1554;
        _1560 = _1554;
        _1561 = _1554;
        _1562 = _1554;
        _1563 = _1554;
        _1564 = _1554;
        _1565 = _1554;
        _1566 = 0.0;
        _1567 = 0.0;
        _1568 = 0.0;
    }
    float _1864;
    float _1865;
    float _1866;
    float _1867;
    float _1868;
    float _1869;
    float _1870;
    float _1871;
    float _1872;
    float _1873;
    float _1874;
    float _1875;
    float _1876;
    float _1877;
    float _1878;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1595 = fma(_1224, cbModelParam._m0[30u].z, fma(_1220, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1216));
        float _1599 = fma(_1224, cbModelParam._m0[31u].z, fma(_1220, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1216));
        float _1603 = fma(_1224, cbModelParam._m0[32u].z, fma(_1220, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1216));
        float _1626 = _1216 + _975;
        float _1627 = _1220 + _976;
        float _1628 = _1224 + _977;
        float _1638 = fma(_1628, cbModelParam._m0[30u].z, fma(_1627, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1626)) - _1595;
        float _1639 = fma(_1628, cbModelParam._m0[31u].z, fma(_1627, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1626)) - _1599;
        float _1640 = fma(_1628, cbModelParam._m0[32u].z, fma(_1627, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1626)) - _1603;
        float _1644 = inversesqrt(dot(vec3(_1638, _1639, _1640), vec3(_1638, _1639, _1640)));
        float _1657 = ((_1644 * _1638) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1595 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1658 = ((_1644 * _1639) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1599 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1659 = ((_1644 * _1640) / cbModelParam._m0[35u].z) + ((((((_1603 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1661 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1657, _1658, _1659), 0.0);
        vec4 _1668 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1657, _1658, _1659), 0.0);
        vec4 _1675 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1657, _1658, _1659), 0.0);
        vec4 _1682 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1657, _1658, _1659), 0.0);
        float _1694 = exp2((_1661.w + (-0.5)) * 20.0) * 2.0;
        float _1695 = _1694 * (_1661.x + (-0.5));
        float _1696 = _1694 * (_1661.y + (-0.5));
        float _1697 = _1694 * (_1661.z + (-0.5));
        float _1704 = exp2((_1668.w + (-0.5)) * 20.0) * 2.0;
        float _1705 = _1704 * (_1668.x + (-0.5));
        float _1706 = _1704 * (_1668.y + (-0.5));
        float _1707 = _1704 * (_1668.z + (-0.5));
        float _1714 = exp2((_1675.w + (-0.5)) * 20.0) * 2.0;
        float _1715 = _1714 * (_1675.x + (-0.5));
        float _1716 = _1714 * (_1675.y + (-0.5));
        float _1717 = _1714 * (_1675.z + (-0.5));
        float _1724 = exp2((_1682.w + (-0.5)) * 20.0) * 2.0;
        float _1725 = _1724 * (_1682.x + (-0.5));
        float _1726 = _1724 * (_1682.y + (-0.5));
        float _1727 = _1724 * (_1682.z + (-0.5));
        float _1728 = isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0));
        float _1729 = isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0));
        float _1730 = isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0));
        float _1731 = _1695 * 0.5;
        float _1732 = _1705 * 0.5;
        float _1733 = _1715 * 0.5;
        float _1734 = dot(vec3(_1731, _1732, _1733), vec3(_1731, _1732, _1733));
        float _1739 = (_1734 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1734);
        float _1747 = (dot(vec3(_975, _976, _977), vec3(_1739 * _1731, _1739 * _1732, _1739 * _1733)) + 1.0) * 0.5;
        float _4625 = isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0));
        float _1756 = sqrt(((_1732 * _1732) + (_1731 * _1731)) + (_1733 * _1733)) / (_1728 + 9.9999997473787516355514526367188e-06);
        float _4636 = isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0));
        float _1757 = isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0));
        float _1758 = _1757 * 2.0;
        float _1762 = (1.0 - _1757) / (_1757 + 1.0);
        float _4647 = isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0));
        float _1763 = isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0));
        float _1772 = ((((1.0 - _1763) * (_1758 + 2.0)) * exp2(log2(isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0))) * (_1758 + 1.0))) + _1763) * _1728;
        float _1773 = _1696 * 0.5;
        float _1774 = _1706 * 0.5;
        float _1775 = _1716 * 0.5;
        float _1776 = dot(vec3(_1773, _1774, _1775), vec3(_1773, _1774, _1775));
        float _1781 = (_1776 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1776);
        float _1789 = (dot(vec3(_975, _976, _977), vec3(_1781 * _1773, _1781 * _1774, _1781 * _1775)) + 1.0) * 0.5;
        float _4658 = isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0));
        float _1798 = sqrt(((_1774 * _1774) + (_1773 * _1773)) + (_1775 * _1775)) / (_1729 + 9.9999997473787516355514526367188e-06);
        float _4669 = isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0));
        float _1799 = isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0));
        float _1800 = _1799 * 2.0;
        float _1804 = (1.0 - _1799) / (_1799 + 1.0);
        float _4680 = isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0));
        float _1805 = isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0));
        float _1814 = ((((1.0 - _1805) * (_1800 + 2.0)) * exp2(log2(isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0))) * (_1800 + 1.0))) + _1805) * _1729;
        float _1815 = _1697 * 0.5;
        float _1816 = _1707 * 0.5;
        float _1817 = _1717 * 0.5;
        float _1818 = dot(vec3(_1815, _1816, _1817), vec3(_1815, _1816, _1817));
        float _1823 = (_1818 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1818);
        float _1831 = (dot(vec3(_975, _976, _977), vec3(_1823 * _1815, _1823 * _1816, _1823 * _1817)) + 1.0) * 0.5;
        float _4691 = isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0));
        float _1840 = sqrt(((_1816 * _1816) + (_1815 * _1815)) + (_1817 * _1817)) / (_1730 + 9.9999997473787516355514526367188e-06);
        float _4702 = isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0));
        float _1841 = isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0));
        float _1842 = _1841 * 2.0;
        float _1846 = (1.0 - _1841) / (_1841 + 1.0);
        float _4713 = isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0));
        float _1847 = isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0));
        float _1856 = ((((1.0 - _1847) * (_1842 + 2.0)) * exp2(log2(isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0))) * (_1842 + 1.0))) + _1847) * _1730;
        _1864 = _1697;
        _1865 = _1696;
        _1866 = _1695;
        _1867 = _1707;
        _1868 = _1706;
        _1869 = _1705;
        _1870 = _1717;
        _1871 = _1716;
        _1872 = _1715;
        _1873 = _1730;
        _1874 = _1729;
        _1875 = _1728;
        _1876 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0)));
        _1877 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0)));
        _1878 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0)));
    }
    else
    {
        _1864 = _1554;
        _1865 = _1554;
        _1866 = _1554;
        _1867 = _1554;
        _1868 = _1554;
        _1869 = _1554;
        _1870 = _1554;
        _1871 = _1554;
        _1872 = _1554;
        _1873 = _1554;
        _1874 = _1554;
        _1875 = _1554;
        _1876 = 0.0;
        _1877 = 0.0;
        _1878 = 0.0;
    }
    float _1888 = (cbModelParam._m0[1u].x * (_1876 - _1566)) + _1566;
    float _1889 = (cbModelParam._m0[1u].x * (_1877 - _1567)) + _1567;
    float _1890 = (cbModelParam._m0[1u].x * (_1878 - _1568)) + _1568;
    float _1911 = fma(_1890, cbSceneParam._m0[89u].z, fma(_1889, cbSceneParam._m0[89u].y, _1888 * cbSceneParam._m0[89u].x));
    float _1914 = fma(_1890, cbSceneParam._m0[90u].z, fma(_1889, cbSceneParam._m0[90u].y, _1888 * cbSceneParam._m0[90u].x));
    float _1917 = fma(_1890, cbSceneParam._m0[91u].z, fma(_1889, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1888));
    float _1932 = _1160 * 0.5;
    float _1933 = _1161 * 0.5;
    float _1934 = _1162 * 0.5;
    float _1935 = dot(vec4(_1932, _1933, _1934, 1.0), vec4(_1866, _1869, _1872, _1875));
    float _1938 = dot(vec4(_1932, _1933, _1934, 1.0), vec4(_1865, _1868, _1871, _1874));
    float _1941 = dot(vec4(_1932, _1933, _1934, 1.0), vec4(_1864, _1867, _1870, _1873));
    float _1975;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1948 = dot(vec4(_1932, _1933, _1934, 1.0), vec4(_1553, _1557, _1560, _1563));
        float _1952 = dot(vec4(_1932, _1933, _1934, 1.0), vec4(_1555, _1558, _1561, _1564));
        float _1956 = dot(vec4(_1932, _1933, _1934, 1.0), vec4(_1556, _1559, _1562, _1565));
        float _1963 = dot(vec4(cbModelParam._m0[39u]), vec4(_1932, _1933, _1934, 1.0));
        _1975 = dot(vec3(isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0)), isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0)), isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1963) ? 0.0 : (isnan(0.0) ? _1963 : max(0.0, _1963))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1975 = 1.0;
    }
    float _1986;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1977 = dot(vec4(cbModelParam._m0[40u]), vec4(_1932, _1933, _1934, 1.0));
        _1986 = dot(vec3(isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0)), isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0)), isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1977) ? 0.0 : (isnan(0.0) ? _1977 : max(0.0, _1977))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1986 = 1.0;
    }
    float _1990 = (_1986 * cbModelParam._m0[1u].x) + (_1975 * (1.0 - cbModelParam._m0[1u].x));
    float _2000 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _978);
    float _2001 = isnan(_2000) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2000 : min(cbModelParam._m0[25u].z, _2000));
    float _2082;
    float _2084;
    float _2086;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2049 = fma(_1224, cbModelParam._m0[13u].z, fma(_1220, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1216)) + cbModelParam._m0[13u].w;
        float _2053 = fma(_1224, cbModelParam._m0[14u].z, fma(_1220, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1216)) + cbModelParam._m0[14u].w;
        float _2057 = fma(_1224, cbModelParam._m0[15u].z, fma(_1220, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1216)) + cbModelParam._m0[15u].w;
        float _2060 = fma(_1162, cbModelParam._m0[13u].z, fma(_1161, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1160));
        float _2063 = fma(_1162, cbModelParam._m0[14u].z, fma(_1161, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1160));
        float _2066 = fma(_1162, cbModelParam._m0[15u].z, fma(_1161, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1160));
        float _2094;
        if (_2060 > 0.0)
        {
            _2094 = abs((1.0 - _2049) / _2060);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2060 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2049 + 1.0) / _2060);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2094 = frontier_phi_17_15_ladder;
        }
        float _2266;
        if (_2063 > 0.0)
        {
            _2266 = abs((1.0 - _2053) / _2063);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2063 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2053 + 1.0) / _2063);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2266 = frontier_phi_26_22_ladder;
        }
        float _2561;
        if (_2066 > 0.0)
        {
            _2561 = abs((1.0 - _2057) / _2066);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2066 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2057 + 1.0) / _2066);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2561 = frontier_phi_38_33_ladder;
        }
        float _2563 = isnan(_2266) ? _2094 : (isnan(_2094) ? _2266 : min(_2094, _2266));
        float _2564 = isnan(_2561) ? _2563 : (isnan(_2563) ? _2561 : min(_2563, _2561));
        float _2568 = (_2564 * _2060) + _2049;
        float _2569 = (_2564 * _2063) + _2053;
        float _2570 = (_2564 * _2066) + _2057;
        float _2571 = _2564 * 9.9999997473787516355514526367188e-05;
        float _2573 = (-1.0) - _2571;
        float _2575 = _2571 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2570 > _2575) || ((_2570 < _2573) || ((_2569 > _2575) || ((_2569 < _2573) || ((_2568 < _2573) || (_2568 > _2575))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2715 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2570, cbModelParam._m0[9u].z, fma(_2569, cbModelParam._m0[9u].y, _2568 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2570, cbModelParam._m0[10u].z, fma(_2569, cbModelParam._m0[10u].y, _2568 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2570, cbModelParam._m0[11u].z, fma(_2569, cbModelParam._m0[11u].y, _2568 * cbModelParam._m0[11u].x))), _2001);
            frontier_phi_16_38_ladder = _2715.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2715.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2715.x * cbModelParam._m0[1u].y;
        }
        _2082 = frontier_phi_16_38_ladder_2;
        _2084 = frontier_phi_16_38_ladder_1;
        _2086 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2070 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1160, _1161, _1162), _2001);
        _2082 = _2070.x * cbModelParam._m0[1u].y;
        _2084 = _2070.y * cbModelParam._m0[1u].y;
        _2086 = _2070.z * cbModelParam._m0[1u].y;
    }
    float _2090 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _978);
    float _2091 = isnan(_2090) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2090 : min(cbModelParam._m0[25u].w, _2090));
    float _2181;
    float _2183;
    float _2185;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2145 = fma(_1224, cbModelParam._m0[21u].z, fma(_1220, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1216)) + cbModelParam._m0[21u].w;
        float _2149 = fma(_1224, cbModelParam._m0[22u].z, fma(_1220, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1216)) + cbModelParam._m0[22u].w;
        float _2153 = fma(_1224, cbModelParam._m0[23u].z, fma(_1220, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1216)) + cbModelParam._m0[23u].w;
        float _2156 = fma(_1162, cbModelParam._m0[21u].z, fma(_1161, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1160));
        float _2159 = fma(_1162, cbModelParam._m0[22u].z, fma(_1161, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1160));
        float _2162 = fma(_1162, cbModelParam._m0[23u].z, fma(_1161, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1160));
        float _2271;
        if (_2156 > 0.0)
        {
            _2271 = abs((1.0 - _2145) / _2156);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2156 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2145 + 1.0) / _2156);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2271 = frontier_phi_28_24_ladder;
        }
        float _2588;
        if (_2159 > 0.0)
        {
            _2588 = abs((1.0 - _2149) / _2159);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2159 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2149 + 1.0) / _2159);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2588 = frontier_phi_40_35_ladder;
        }
        float _2926;
        if (_2162 > 0.0)
        {
            _2926 = abs((1.0 - _2153) / _2162);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2162 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2153 + 1.0) / _2162);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2926 = frontier_phi_50_47_ladder;
        }
        float _2928 = isnan(_2588) ? _2271 : (isnan(_2271) ? _2588 : min(_2271, _2588));
        float _2929 = isnan(_2926) ? _2928 : (isnan(_2928) ? _2926 : min(_2928, _2926));
        float _2933 = (_2929 * _2156) + _2145;
        float _2934 = (_2929 * _2159) + _2149;
        float _2935 = (_2929 * _2162) + _2153;
        float _2936 = _2929 * 9.9999997473787516355514526367188e-05;
        float _2937 = (-1.0) - _2936;
        float _2939 = _2936 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2935 > _2939) || ((_2935 < _2937) || ((_2934 > _2939) || ((_2934 < _2937) || ((_2933 < _2937) || (_2933 > _2939))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3057 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2935, cbModelParam._m0[17u].z, fma(_2934, cbModelParam._m0[17u].y, _2933 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2935, cbModelParam._m0[18u].z, fma(_2934, cbModelParam._m0[18u].y, _2933 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2935, cbModelParam._m0[19u].z, fma(_2934, cbModelParam._m0[19u].y, _2933 * cbModelParam._m0[19u].x))), _2091);
            frontier_phi_25_50_ladder = _3057.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _3057.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _3057.x * cbModelParam._m0[1u].z;
        }
        _2181 = frontier_phi_25_50_ladder_2;
        _2183 = frontier_phi_25_50_ladder_1;
        _2185 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2165 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1160, _1161, _1162), _2091);
        _2181 = _2165.x * cbModelParam._m0[1u].z;
        _2183 = _2165.y * cbModelParam._m0[1u].z;
        _2185 = _2165.z * cbModelParam._m0[1u].z;
    }
    float _2198 = (((_1187 * _1136) + _1188) * _1152) * ((cbModelParam._m0[1u].w * (_2181 - _2082)) + _2082);
    float _2200 = (((_1187 * _1138) + _1188) * _1152) * ((cbModelParam._m0[1u].w * (_2183 - _2084)) + _2084);
    float _2202 = (((_1187 * _1139) + _1188) * _1152) * ((cbModelParam._m0[1u].w * (_2185 - _2086)) + _2086);
    float _2205 = fma(_2202, cbSceneParam._m0[89u].z, fma(_2200, cbSceneParam._m0[89u].y, _2198 * cbSceneParam._m0[89u].x));
    float _2208 = fma(_2202, cbSceneParam._m0[90u].z, fma(_2200, cbSceneParam._m0[90u].y, _2198 * cbSceneParam._m0[90u].x));
    float _2211 = fma(_2202, cbSceneParam._m0[91u].z, fma(_2200, cbSceneParam._m0[91u].y, _2198 * cbSceneParam._m0[91u].x));
    float _2245 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2249 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2253 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2257 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2258 = _2245 / _2257;
    float _2259 = _2249 / _2257;
    float _2260 = _2253 / _2257;
    float _2407;
    float _2408;
    float _2409;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2287 = ((uint(_2260 > cbSceneParam._m0[59u].y) + uint(_2260 > cbSceneParam._m0[59u].x)) + uint(_2260 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2288 = _2287 + 43u;
        uint _2296 = _2287 + 44u;
        uint _2304 = _2287 + 45u;
        uint _2312 = _2287 + 46u;
        float _2323 = fma(_2257, cbSceneParam._m0[_2288].w, fma(_2253, cbSceneParam._m0[_2288].z, fma(_2249, cbSceneParam._m0[_2288].y, _2245 * cbSceneParam._m0[_2288].x)));
        float _2327 = fma(_2257, cbSceneParam._m0[_2296].w, fma(_2253, cbSceneParam._m0[_2296].z, fma(_2249, cbSceneParam._m0[_2296].y, _2245 * cbSceneParam._m0[_2296].x)));
        float _2335 = fma(_2257, cbSceneParam._m0[_2312].w, fma(_2253, cbSceneParam._m0[_2312].z, fma(_2249, cbSceneParam._m0[_2312].y, _2245 * cbSceneParam._m0[_2312].x)));
        float _2340 = cbSceneParam._m0[33u].z * _2335;
        float _2342 = cbSceneParam._m0[33u].w * _2335;
        float _2345 = fma(_2257, cbSceneParam._m0[_2304].w, fma(_2253, cbSceneParam._m0[_2304].z, fma(_2249, cbSceneParam._m0[_2304].y, _2245 * cbSceneParam._m0[_2304].x))) / _2335;
        float _2393 = (cbSceneParam._m0[33u].x - sqrt(((_2259 * _2259) + (_2258 * _2258)) + (_2260 * _2260))) * cbSceneParam._m0[33u].y;
        float _4839 = isnan(0.0) ? _2393 : (isnan(_2393) ? 0.0 : max(_2393, 0.0));
        float _2400 = (isnan(1.0) ? _4839 : (isnan(_4839) ? 1.0 : min(_4839, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2340 + _2323) / _2335, (_2342 + _2327) / _2335), _2345), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2342 + _2323) / _2335, (_2327 - _2340) / _2335), _2345), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2323 - _2340) / _2335, (_2327 - _2342) / _2335), _2345), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2323 - _2342) / _2335, (_2340 + _2327) / _2335), _2345), 0.0)).x), vec4(0.25)));
        _2407 = 1.0 - (_2400 * cbSceneParam._m0[34u].x);
        _2408 = 1.0 - (_2400 * cbSceneParam._m0[34u].y);
        _2409 = 1.0 - (_2400 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2407 = 1.0;
        _2408 = 1.0;
        _2409 = 1.0;
    }
    float _2473;
    float _2475;
    float _2477;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2461 = fma(_2257, cbSceneParam._m0[63u].w, fma(_2253, cbSceneParam._m0[63u].z, fma(_2249, cbSceneParam._m0[63u].y, _2245 * cbSceneParam._m0[63u].x)));
        float _2462 = fma(_2257, cbSceneParam._m0[60u].w, fma(_2253, cbSceneParam._m0[60u].z, fma(_2249, cbSceneParam._m0[60u].y, _2245 * cbSceneParam._m0[60u].x))) / _2461;
        float _2463 = fma(_2257, cbSceneParam._m0[61u].w, fma(_2253, cbSceneParam._m0[61u].z, fma(_2249, cbSceneParam._m0[61u].y, _2245 * cbSceneParam._m0[61u].x))) / _2461;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2462 >= cbSceneParam._m0[64u].x) && (_2463 >= cbSceneParam._m0[64u].y)) && (_2462 <= cbSceneParam._m0[64u].z)) && (_2463 <= cbSceneParam._m0[64u].w))
        {
            float _2601 = fma(_2257, cbSceneParam._m0[62u].w, fma(_2253, cbSceneParam._m0[62u].z, fma(_2249, cbSceneParam._m0[62u].y, _2245 * cbSceneParam._m0[62u].x))) / _2461;
            float _2605 = isnan(cbSceneParam._m0[41u].w) ? _2601 : (isnan(_2601) ? cbSceneParam._m0[41u].w : max(_2601, cbSceneParam._m0[41u].w));
            float _2648 = (cbSceneParam._m0[33u].x - sqrt(((_2259 * _2259) + (_2258 * _2258)) + (_2260 * _2260))) * cbSceneParam._m0[33u].y;
            float _4855 = isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0));
            float _2655 = (isnan(1.0) ? _4855 : (isnan(_4855) ? 1.0 : min(_4855, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2462, cbSceneParam._m0[33u].w + _2463), _2605), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2462, _2463 - cbSceneParam._m0[33u].z), _2605), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2462 - cbSceneParam._m0[33u].z, _2463 - cbSceneParam._m0[33u].w), _2605), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2462 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2463), _2605), 0.0)).x), vec4(0.25)));
            float _2659 = 1.0 - (_2655 * cbSceneParam._m0[34u].x);
            float _2660 = 1.0 - (_2655 * cbSceneParam._m0[34u].y);
            float _2661 = 1.0 - (_2655 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2661) ? _2409 : (isnan(_2409) ? _2661 : min(_2409, _2661));
            frontier_phi_37_36_ladder_1 = isnan(_2660) ? _2408 : (isnan(_2408) ? _2660 : min(_2408, _2660));
            frontier_phi_37_36_ladder_2 = isnan(_2659) ? _2407 : (isnan(_2407) ? _2659 : min(_2407, _2659));
        }
        else
        {
            frontier_phi_37_36_ladder = _2409;
            frontier_phi_37_36_ladder_1 = _2408;
            frontier_phi_37_36_ladder_2 = _2407;
        }
        _2473 = frontier_phi_37_36_ladder_2;
        _2475 = frontier_phi_37_36_ladder_1;
        _2477 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2473 = _2407;
        _2475 = _2408;
        _2477 = _2409;
    }
    uvec4 _2482 = floatBitsToUint(cbInstanceData._m0[_295 + 5u]);
    uint _2484 = _2482.x * 14u;
    uint _2485 = _2484 + 13u;
    float _2492 = _1152 + (-1.0);
    float _2497 = (cbLight._m0[_2485].x * _2492) + 1.0;
    float _2498 = (cbLight._m0[_2485].y * _2492) + 1.0;
    float _2499 = (cbLight._m0[_2485].z * _2492) + 1.0;
    float _2500 = (cbLight._m0[_2485].w * _2492) + 1.0;
    uint _2501 = _2484 + 5u;
    float _2507 = isnan(1.0) ? _2498 : (isnan(_2498) ? 1.0 : min(_2498, 1.0));
    uint _2511 = _2484 + 4u;
    float _2520 = isnan(1.0) ? _2497 : (isnan(_2497) ? 1.0 : min(_2497, 1.0));
    uint _2524 = _2484 | 1u;
    float _2535 = dot(vec3(cbLight._m0[_2484].xyz), vec3(_975, _976, _977));
    float _2538 = dot(vec3(cbLight._m0[_2524].xyz), vec3(_975, _976, _977));
    float _4891 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0));
    float _4902 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0));
    float _2543 = (isnan(1.0) ? _4891 : (isnan(_4891) ? 1.0 : min(_4891, 1.0))) * 0.3183098733425140380859375;
    float _2545 = (isnan(1.0) ? _4902 : (isnan(_4902) ? 1.0 : min(_4902, 1.0))) * 0.3183098733425140380859375;
    float _2552 = ((cbLight._m0[_2501].x * _2507) * _2545) + (((cbLight._m0[_2511].x * _2473) * _2520) * _2543);
    float _2553 = ((_2507 * cbLight._m0[_2501].y) * _2545) + (((cbLight._m0[_2511].y * _2475) * _2520) * _2543);
    float _2554 = ((_2507 * cbLight._m0[_2501].z) * _2545) + (((cbLight._m0[_2511].z * _2477) * _2520) * _2543);
    uvec4 _2558 = floatBitsToUint(cbLight._m0[_2484 + 12u]);
    bool _2560 = _2558.x == 0u;
    float _2662;
    float _2664;
    float _2666;
    if (_2560)
    {
        _2662 = _2552;
        _2664 = _2553;
        _2666 = _2554;
    }
    else
    {
        uint _2670 = _2484 + 6u;
        float _2686 = (dot(vec3(cbLight._m0[_2484 + 2u].xyz), vec3(_975, _976, _977)) * 0.5) + 0.5;
        float _2687 = _2686 * _2686;
        float _4913 = isnan(0.0) ? _2687 : (isnan(_2687) ? 0.0 : max(_2687, 0.0));
        float _2688 = isnan(1.0) ? _4913 : (isnan(_4913) ? 1.0 : min(_4913, 1.0));
        float _2689 = isnan(1.0) ? _2499 : (isnan(_2499) ? 1.0 : min(_2499, 1.0));
        _2662 = (((cbLight._m0[_2670].x * 0.3183098733425140380859375) * _2688) * _2689) + _2552;
        _2664 = (((cbLight._m0[_2670].y * 0.3183098733425140380859375) * _2688) * _2689) + _2553;
        _2666 = (((cbLight._m0[_2670].z * 0.3183098733425140380859375) * _2688) * _2689) + _2554;
    }
    bool _2669 = _2558.y == 0u;
    float _2724;
    float _2726;
    float _2728;
    if (_2669)
    {
        _2724 = _2662;
        _2726 = _2664;
        _2728 = _2666;
    }
    else
    {
        uint _2897 = _2484 + 7u;
        float _2913 = (dot(vec3(cbLight._m0[_2484 + 3u].xyz), vec3(_975, _976, _977)) * 0.5) + 0.5;
        float _2914 = _2913 * _2913;
        float _4929 = isnan(0.0) ? _2914 : (isnan(_2914) ? 0.0 : max(_2914, 0.0));
        float _2915 = isnan(1.0) ? _4929 : (isnan(_4929) ? 1.0 : min(_4929, 1.0));
        float _2916 = isnan(1.0) ? _2500 : (isnan(_2500) ? 1.0 : min(_2500, 1.0));
        _2724 = (((cbLight._m0[_2897].x * 0.3183098733425140380859375) * _2915) * _2916) + _2662;
        _2726 = (((cbLight._m0[_2897].y * 0.3183098733425140380859375) * _2915) * _2916) + _2664;
        _2728 = (((cbLight._m0[_2897].z * 0.3183098733425140380859375) * _2915) * _2916) + _2666;
    }
    uint _2731 = _2484 + 8u;
    float _2744 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2484].w)) * _978) * 0.949999988079071044921875);
    float _2745 = _2744 * _2744;
    float _2746 = cbLight._m0[_2484].x + _1054;
    float _2747 = cbLight._m0[_2484].y + _1055;
    float _2748 = cbLight._m0[_2484].z + _1056;
    float _2752 = inversesqrt(dot(vec3(_2746, _2747, _2748), vec3(_2746, _2747, _2748)));
    float _2753 = _2752 * _2746;
    float _2754 = _2752 * _2747;
    float _2755 = _2752 * _2748;
    float _2756 = dot(vec3(_975, _976, _977), vec3(cbLight._m0[_2484].xyz));
    float _4945 = isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : max(_2756, 0.0));
    float _2759 = isnan(1.0) ? _4945 : (isnan(_4945) ? 1.0 : min(_4945, 1.0));
    float _4956 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
    float _2760 = isnan(1.0) ? _4956 : (isnan(_4956) ? 1.0 : min(_4956, 1.0));
    float _2761 = dot(vec3(_975, _976, _977), vec3(_2753, _2754, _2755));
    float _4967 = isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : max(_2761, 0.0));
    float _2764 = isnan(1.0) ? _4967 : (isnan(_4967) ? 1.0 : min(_4967, 1.0));
    float _2765 = dot(vec3(cbLight._m0[_2484].xyz), vec3(_2753, _2754, _2755));
    float _4978 = isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : max(_2765, 0.0));
    float _2769 = _2745 * _2745;
    float _2773 = ((_2764 * _2764) * (_2769 + (-1.0))) + 1.0;
    float _2781 = exp2(log2(1.0 - (isnan(1.0) ? _4978 : (isnan(_4978) ? 1.0 : min(_4978, 1.0)))) * 5.0);
    float _2782 = 0.959999978542327880859375 - _1133;
    float _2784 = 0.959999978542327880859375 - _1134;
    float _2785 = 0.959999978542327880859375 - _1135;
    float _2792 = 1.0 - _2745;
    float _2803 = (0.5 / (((_2760 * ((_2759 * _2792) + _2745)) + 9.9999999392252902907785028219223e-09) + (((_2760 * _2792) + _2745) * _2759))) * _2759;
    float _4989 = isnan(0.0) ? _2803 : (isnan(_2803) ? 0.0 : max(_2803, 0.0));
    float _2805 = (isnan(1.0) ? _4989 : (isnan(_4989) ? 1.0 : min(_4989, 1.0))) * (_2769 / ((_2773 * _2773) * 3.141590118408203125));
    uint _2819 = _2484 + 9u;
    float _2830 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2524].w)) * _978) * 0.949999988079071044921875);
    float _2831 = _2830 * _2830;
    float _2832 = cbLight._m0[_2524].x + _1054;
    float _2833 = cbLight._m0[_2524].y + _1055;
    float _2834 = cbLight._m0[_2524].z + _1056;
    float _2838 = inversesqrt(dot(vec3(_2832, _2833, _2834), vec3(_2832, _2833, _2834)));
    float _2839 = _2838 * _2832;
    float _2840 = _2838 * _2833;
    float _2841 = _2838 * _2834;
    float _2842 = dot(vec3(_975, _976, _977), vec3(cbLight._m0[_2524].xyz));
    float _5000 = isnan(0.0) ? _2842 : (isnan(_2842) ? 0.0 : max(_2842, 0.0));
    float _2845 = isnan(1.0) ? _5000 : (isnan(_5000) ? 1.0 : min(_5000, 1.0));
    float _2846 = dot(vec3(_975, _976, _977), vec3(_2839, _2840, _2841));
    float _5011 = isnan(0.0) ? _2846 : (isnan(_2846) ? 0.0 : max(_2846, 0.0));
    float _2849 = isnan(1.0) ? _5011 : (isnan(_5011) ? 1.0 : min(_5011, 1.0));
    float _2850 = dot(vec3(cbLight._m0[_2524].xyz), vec3(_2839, _2840, _2841));
    float _5022 = isnan(0.0) ? _2850 : (isnan(_2850) ? 0.0 : max(_2850, 0.0));
    float _2854 = _2831 * _2831;
    float _2858 = ((_2849 * _2849) * (_2854 + (-1.0))) + 1.0;
    float _2865 = exp2(log2(1.0 - (isnan(1.0) ? _5022 : (isnan(_5022) ? 1.0 : min(_5022, 1.0)))) * 5.0);
    float _2872 = 1.0 - _2831;
    float _2882 = (0.5 / (((_2760 * ((_2845 * _2872) + _2831)) + 9.9999999392252902907785028219223e-09) + (((_2760 * _2872) + _2831) * _2845))) * _2845;
    float _5033 = isnan(0.0) ? _2882 : (isnan(_2882) ? 0.0 : max(_2882, 0.0));
    float _2884 = (isnan(1.0) ? _5033 : (isnan(_5033) ? 1.0 : min(_5033, 1.0))) * (_2854 / ((_2858 * _2858) * 3.141590118408203125));
    float _2894 = (((((_2865 * _2782) + _1136) * cbLight._m0[_2819].x) * _2884) * _2507) + ((((cbLight._m0[_2731].x * _2473) * ((_2781 * _2782) + _1136)) * _2805) * _2520);
    float _2895 = (((((_2865 * _2784) + _1138) * cbLight._m0[_2819].y) * _2884) * _2507) + ((((cbLight._m0[_2731].y * _2475) * ((_2781 * _2784) + _1138)) * _2805) * _2520);
    float _2896 = (((((_2865 * _2785) + _1139) * cbLight._m0[_2819].z) * _2884) * _2507) + ((((cbLight._m0[_2731].z * _2477) * ((_2781 * _2785) + _1139)) * _2805) * _2520);
    float _2952;
    float _2954;
    float _2956;
    if (_2560)
    {
        _2952 = _2894;
        _2954 = _2895;
        _2956 = _2896;
    }
    else
    {
        uint _2958 = _2484 + 2u;
        uint _2962 = _2484 + 10u;
        float _2976 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2958].w)) * _978) * 0.949999988079071044921875);
        float _2977 = _2976 * _2976;
        float _2978 = cbLight._m0[_2958].x + _1054;
        float _2979 = cbLight._m0[_2958].y + _1055;
        float _2980 = cbLight._m0[_2958].z + _1056;
        float _2984 = inversesqrt(dot(vec3(_2978, _2979, _2980), vec3(_2978, _2979, _2980)));
        float _2985 = _2984 * _2978;
        float _2986 = _2984 * _2979;
        float _2987 = _2984 * _2980;
        float _2988 = dot(vec3(_975, _976, _977), vec3(cbLight._m0[_2958].xyz));
        float _5044 = isnan(0.0) ? _2988 : (isnan(_2988) ? 0.0 : max(_2988, 0.0));
        float _2991 = isnan(1.0) ? _5044 : (isnan(_5044) ? 1.0 : min(_5044, 1.0));
        float _2992 = dot(vec3(_975, _976, _977), vec3(_2985, _2986, _2987));
        float _5055 = isnan(0.0) ? _2992 : (isnan(_2992) ? 0.0 : max(_2992, 0.0));
        float _2995 = isnan(1.0) ? _5055 : (isnan(_5055) ? 1.0 : min(_5055, 1.0));
        float _2996 = dot(vec3(cbLight._m0[_2958].xyz), vec3(_2985, _2986, _2987));
        float _5066 = isnan(0.0) ? _2996 : (isnan(_2996) ? 0.0 : max(_2996, 0.0));
        float _3000 = _2977 * _2977;
        float _3004 = ((_2995 * _2995) * (_3000 + (-1.0))) + 1.0;
        float _3011 = exp2(log2(1.0 - (isnan(1.0) ? _5066 : (isnan(_5066) ? 1.0 : min(_5066, 1.0)))) * 5.0);
        float _3018 = 1.0 - _2977;
        float _3028 = (0.5 / (((_2760 * ((_2991 * _3018) + _2977)) + 9.9999999392252902907785028219223e-09) + (((_2760 * _3018) + _2977) * _2991))) * _2991;
        float _5077 = isnan(0.0) ? _3028 : (isnan(_3028) ? 0.0 : max(_3028, 0.0));
        float _3030 = (isnan(1.0) ? _5077 : (isnan(_5077) ? 1.0 : min(_5077, 1.0))) * (_3000 / ((_3004 * _3004) * 3.141590118408203125));
        float _3031 = isnan(1.0) ? _2499 : (isnan(_2499) ? 1.0 : min(_2499, 1.0));
        _2952 = (((((_3011 * _2782) + _1136) * cbLight._m0[_2962].x) * _3030) * _3031) + _2894;
        _2954 = (((((_3011 * _2784) + _1138) * cbLight._m0[_2962].y) * _3030) * _3031) + _2895;
        _2956 = (((((_3011 * _2785) + _1139) * cbLight._m0[_2962].z) * _3030) * _3031) + _2896;
    }
    float _3062;
    float _3064;
    float _3066;
    if (_2669)
    {
        _3062 = _2952;
        _3064 = _2954;
        _3066 = _2956;
    }
    else
    {
        uint _3073 = _2484 + 3u;
        uint _3077 = _2484 + 11u;
        float _3091 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3073].w)) * _978) * 0.949999988079071044921875);
        float _3092 = _3091 * _3091;
        float _3093 = cbLight._m0[_3073].x + _1054;
        float _3094 = cbLight._m0[_3073].y + _1055;
        float _3095 = cbLight._m0[_3073].z + _1056;
        float _3099 = inversesqrt(dot(vec3(_3093, _3094, _3095), vec3(_3093, _3094, _3095)));
        float _3100 = _3099 * _3093;
        float _3101 = _3099 * _3094;
        float _3102 = _3099 * _3095;
        float _3103 = dot(vec3(_975, _976, _977), vec3(cbLight._m0[_3073].xyz));
        float _5093 = isnan(0.0) ? _3103 : (isnan(_3103) ? 0.0 : max(_3103, 0.0));
        float _3106 = isnan(1.0) ? _5093 : (isnan(_5093) ? 1.0 : min(_5093, 1.0));
        float _3107 = dot(vec3(_975, _976, _977), vec3(_3100, _3101, _3102));
        float _5104 = isnan(0.0) ? _3107 : (isnan(_3107) ? 0.0 : max(_3107, 0.0));
        float _3110 = isnan(1.0) ? _5104 : (isnan(_5104) ? 1.0 : min(_5104, 1.0));
        float _3111 = dot(vec3(cbLight._m0[_3073].xyz), vec3(_3100, _3101, _3102));
        float _5115 = isnan(0.0) ? _3111 : (isnan(_3111) ? 0.0 : max(_3111, 0.0));
        float _3115 = _3092 * _3092;
        float _3119 = ((_3110 * _3110) * (_3115 + (-1.0))) + 1.0;
        float _3126 = exp2(log2(1.0 - (isnan(1.0) ? _5115 : (isnan(_5115) ? 1.0 : min(_5115, 1.0)))) * 5.0);
        float _3133 = 1.0 - _3092;
        float _3143 = (0.5 / (((_2760 * ((_3106 * _3133) + _3092)) + 9.9999999392252902907785028219223e-09) + (((_2760 * _3133) + _3092) * _3106))) * _3106;
        float _5126 = isnan(0.0) ? _3143 : (isnan(_3143) ? 0.0 : max(_3143, 0.0));
        float _3145 = (isnan(1.0) ? _5126 : (isnan(_5126) ? 1.0 : min(_5126, 1.0))) * (_3115 / ((_3119 * _3119) * 3.141590118408203125));
        float _3146 = isnan(1.0) ? _2500 : (isnan(_2500) ? 1.0 : min(_2500, 1.0));
        _3062 = (((((_3126 * _2782) + _1136) * cbLight._m0[_3077].x) * _3145) * _3146) + _2952;
        _3064 = (((((_3126 * _2784) + _1138) * cbLight._m0[_3077].y) * _3145) * _3146) + _2954;
        _3066 = (((((_3126 * _2785) + _1139) * cbLight._m0[_3077].z) * _3145) * _3146) + _2956;
    }
    float _3212;
    float _3214;
    float _3216;
    float _3218;
    float _3220;
    float _3222;
    if (_2482.y == 0u)
    {
        uvec4 _3167 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3168 = _3167.x;
        uint _3179 = uint((float(_3167.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1075) / _3168))) + floor(float(uint(cbSceneParam._m0[85u].x * _1074) / _3168)));
        float _3189 = (log2(_2260 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3190 = isnan(0.0) ? _3189 : (isnan(_3189) ? 0.0 : max(_3189, 0.0));
        uint _3193 = uint(isnan(14.0) ? _3190 : (isnan(_3190) ? 14.0 : min(_3190, 14.0)));
        uvec4 _3198 = texelFetch(g_lightClusterGridBuffer, int(((_3193 << 2u) + (_3179 << 6u)) >> 2u));
        uint _3199 = _3198.x;
        uint _3200 = _3167.z;
        float _3279;
        float _3281;
        float _3283;
        float _3285;
        float _3287;
        float _3289;
        if (((((1u << ((_3200 >> 4u) & 15u)) + 4294967295u) & _3199) == 0u) || ((_3200 & 240u) == 0u))
        {
            _3279 = 0.0;
            _3281 = 0.0;
            _3283 = 0.0;
            _3285 = 0.0;
            _3287 = 0.0;
            _3289 = 0.0;
        }
        else
        {
            float _3280;
            float _3282;
            float _3284;
            float _3286;
            float _3288;
            float _3290;
            float _3432 = 0.0;
            float _3433 = 0.0;
            float _3434 = 0.0;
            float _3435 = 0.0;
            float _3436 = 0.0;
            float _3437 = 0.0;
            uint _3438 = 0u;
            uint _3447;
            bool _3448;
            for (;;)
            {
                _3447 = texelFetch(g_lightClassification, int((((_3193 << 5u) + (_3179 << 9u)) + (_3438 << 2u)) >> 2u)).x;
                _3448 = _3447 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3448)
                {
                    frontier_phi_71_pred = _3437;
                    frontier_phi_71_pred_1 = _3436;
                    frontier_phi_71_pred_2 = _3435;
                    frontier_phi_71_pred_3 = _3434;
                    frontier_phi_71_pred_4 = _3433;
                    frontier_phi_71_pred_5 = _3432;
                }
                else
                {
                    float _3577;
                    float _3578;
                    float _3579;
                    float _3580;
                    float _3581;
                    float _3582;
                    uint _3583;
                    _3577 = _3432;
                    _3578 = _3433;
                    _3579 = _3434;
                    _3580 = _3435;
                    _3581 = _3436;
                    _3582 = _3437;
                    _3583 = _3447;
                    float _3504;
                    float _3505;
                    float _3506;
                    float _3507;
                    float _3508;
                    float _3509;
                    for (;;)
                    {
                        uint _3587 = uint(findLSB(_3583)) + (_3438 << 5u);
                        uint _3584 = (_3583 + 4294967295u) & _3583;
                        uint _3589 = _3587 * 48u;
                        vec4 _3603 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3589)).x, texelFetch(g_PointLightRenderingBuffer, int(_3589 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3589 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3589 + 3u)).x));
                        uint _3609 = (_3587 * 48u) + 4u;
                        vec4 _3622 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3609)).x, texelFetch(g_PointLightRenderingBuffer, int(_3609 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3609 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3609 + 3u)).x));
                        uint _3628 = (_3587 * 48u) + 8u;
                        vec3 _3639 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3628)).x, texelFetch(g_PointLightRenderingBuffer, int(_3628 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3628 + 2u)).x));
                        float _3643 = _3603.x - _2258;
                        float _3644 = _3603.y - _2259;
                        float _3645 = _3603.z - _2260;
                        float _3646 = dot(vec3(_3643, _3644, _3645), vec3(_3643, _3644, _3645));
                        float _3649 = inversesqrt(_3646);
                        float _3650 = _3649 * _3643;
                        float _3651 = _3649 * _3644;
                        float _3652 = _3649 * _3645;
                        float _3653 = dot(vec3(_1093, _1096, _1099), vec3(_3650, _3651, _3652));
                        float _3658 = 1.0 - (_3646 * _3603.w);
                        float _5152 = isnan(0.0) ? _3658 : (isnan(_3658) ? 0.0 : max(_3658, 0.0));
                        float _3659 = isnan(1.0) ? _5152 : (isnan(_5152) ? 1.0 : min(_5152, 1.0));
                        float _3660 = sqrt(_3646) * _3622.w;
                        float _3663 = 1.39999997615814208984375 / (_3660 + 1.39999997615814208984375);
                        float _3664 = _3663 * _3663;
                        float _3667 = ((1.0 - _3664) * _3653) + _3664;
                        float _3670 = _3660 * _3660;
                        float _3674 = ((isnan(0.0) ? _3667 : (isnan(_3667) ? 0.0 : max(_3667, 0.0))) * _3659) / ((_3670 * 0.699999988079071044921875) + 1.0);
                        float _3678 = (-0.0) - _2258;
                        float _3679 = (-0.0) - _2259;
                        float _3680 = (-0.0) - _2260;
                        float _3684 = inversesqrt(dot(vec3(_3678, _3679, _3680), vec3(_3678, _3679, _3680)));
                        float _3685 = _3684 * _3678;
                        float _3686 = _3684 * _3679;
                        float _3687 = _3684 * _3680;
                        float _3694 = exp2(log2(1.0 / ((_3670 * 3.5) + 5.0)) * 0.25);
                        float _3695 = 1.0 - _1168;
                        float _3702 = sqrt(1.0 - ((1.0 - (_3695 * _3695)) * (1.0 - (_3694 * _3694))));
                        float _3703 = _3702 * _3702;
                        float _3704 = _3703 * _3703;
                        float _3705 = _3685 + _3650;
                        float _3706 = _3686 + _3651;
                        float _3707 = _3687 + _3652;
                        float _3711 = inversesqrt(dot(vec3(_3705, _3706, _3707), vec3(_3705, _3706, _3707)));
                        float _3715 = dot(vec3(_1093, _1096, _1099), vec3(_3685, _3686, _3687));
                        float _5168 = isnan(0.0) ? _3715 : (isnan(_3715) ? 0.0 : max(_3715, 0.0));
                        float _3718 = isnan(1.0) ? _5168 : (isnan(_5168) ? 1.0 : min(_5168, 1.0));
                        float _3719 = dot(vec3(_1093, _1096, _1099), vec3(_3711 * _3705, _3711 * _3706, _3711 * _3707));
                        float _5179 = isnan(0.0) ? _3719 : (isnan(_3719) ? 0.0 : max(_3719, 0.0));
                        float _3722 = isnan(1.0) ? _5179 : (isnan(_5179) ? 1.0 : min(_5179, 1.0));
                        float _3726 = ((_3722 * _3722) * (_3704 + (-1.0))) + 1.0;
                        float _3727 = _3663 * _3703;
                        float _3728 = _3727 * _3727;
                        float _3731 = ((1.0 - _3728) * _3653) + _3728;
                        float _5190 = isnan(0.0) ? _3731 : (isnan(_3731) ? 0.0 : max(_3731, 0.0));
                        float _3732 = isnan(1.0) ? _5190 : (isnan(_5190) ? 1.0 : min(_5190, 1.0));
                        float _3733 = 1.0 - _3703;
                        float _3743 = (0.5 / (((_3732 * ((_3718 * _3733) + _3703)) + 9.9999999392252902907785028219223e-09) + (((_3732 * _3733) + _3703) * _3718))) * _3732;
                        float _5201 = isnan(0.0) ? _3743 : (isnan(_3743) ? 0.0 : max(_3743, 0.0));
                        float _3754 = (((_3704 * 3.1415927410125732421875) * (isnan(1.0) ? _5201 : (isnan(_5201) ? 1.0 : min(_5201, 1.0)))) / ((_3726 * _3726) * ((_3670 * 2.1991131305694580078125) + 3.141590118408203125))) * _3659;
                        _3507 = (_3674 * _3622.x) + _3580;
                        _3508 = (_3674 * _3622.y) + _3581;
                        _3509 = (_3674 * _3622.z) + _3582;
                        _3504 = (_3754 * _3639.x) + _3577;
                        _3505 = (_3754 * _3639.y) + _3578;
                        _3506 = (_3754 * _3639.z) + _3579;
                        if (_3584 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3577 = _3504;
                            _3578 = _3505;
                            _3579 = _3506;
                            _3580 = _3507;
                            _3581 = _3508;
                            _3582 = _3509;
                            _3583 = _3584;
                        }
                    }
                    frontier_phi_71_pred = _3509;
                    frontier_phi_71_pred_1 = _3508;
                    frontier_phi_71_pred_2 = _3507;
                    frontier_phi_71_pred_3 = _3506;
                    frontier_phi_71_pred_4 = _3505;
                    frontier_phi_71_pred_5 = _3504;
                }
                _3290 = frontier_phi_71_pred;
                _3288 = frontier_phi_71_pred_1;
                _3286 = frontier_phi_71_pred_2;
                _3284 = frontier_phi_71_pred_3;
                _3282 = frontier_phi_71_pred_4;
                _3280 = frontier_phi_71_pred_5;
                uint _3439 = _3438 + 1u;
                if (_3439 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3432 = _3280;
                    _3433 = _3282;
                    _3434 = _3284;
                    _3435 = _3286;
                    _3436 = _3288;
                    _3437 = _3290;
                    _3438 = _3439;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3279 = _3280;
            _3281 = _3282;
            _3283 = _3284;
            _3285 = _3286;
            _3287 = _3288;
            _3289 = _3290;
        }
        uvec4 _3293 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3294 = _3293.z;
        uint _3296 = (_3294 >> 8u) & 15u;
        float _3400;
        float _3402;
        float _3404;
        float _3406;
        float _3408;
        float _3410;
        if (((4294967295u << _3296) & _3199) == 0u)
        {
            _3400 = _3279;
            _3402 = _3281;
            _3404 = _3283;
            _3406 = _3285;
            _3408 = _3287;
            _3410 = _3289;
        }
        else
        {
            float _3425 = inversesqrt(dot(vec3(_2258, _2259, _2260), vec3(_2258, _2259, _2260)));
            float _3426 = _3425 * _2258;
            float _3427 = _3425 * _2259;
            float _3428 = _3425 * _2260;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3296 < ((_3294 >> 12u) & 15u))
            {
                float _3401;
                float _3403;
                float _3405;
                float _3407;
                float _3409;
                float _3411;
                float _3560 = _3279;
                float _3561 = _3281;
                float _3562 = _3283;
                float _3563 = _3285;
                float _3564 = _3287;
                float _3565 = _3289;
                uint _3566 = _3296;
                uint _3575;
                bool _3576;
                for (;;)
                {
                    _3575 = texelFetch(g_lightClassification, int((((_3193 << 5u) + (_3179 << 9u)) + (_3566 << 2u)) >> 2u)).x;
                    _3576 = _3575 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3576)
                    {
                        frontier_phi_82_pred = _3565;
                        frontier_phi_82_pred_1 = _3564;
                        frontier_phi_82_pred_2 = _3563;
                        frontier_phi_82_pred_3 = _3562;
                        frontier_phi_82_pred_4 = _3561;
                        frontier_phi_82_pred_5 = _3560;
                    }
                    else
                    {
                        float _3768;
                        float _3769;
                        float _3770;
                        float _3771;
                        float _3772;
                        float _3773;
                        float _4061;
                        float _4062;
                        float _4063;
                        float _4064;
                        float _4065;
                        float _4066;
                        float _3781 = _3560;
                        float _3782 = _3561;
                        float _3783 = _3562;
                        float _3784 = _3563;
                        float _3785 = _3564;
                        float _3786 = _3565;
                        uint _3787 = _3575;
                        uint _3788;
                        vec4 _3813;
                        float _3814;
                        vec4 _3829;
                        vec3 _3841;
                        vec4 _3856;
                        vec4 _3871;
                        float _3917;
                        bool _3918;
                        for (;;)
                        {
                            uint _3798 = ((_3566 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3787));
                            _3788 = (_3787 + 4294967295u) & _3787;
                            uint _3800 = _3798 * 40u;
                            _3813 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3800)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3800 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3800 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3800 + 3u)).x));
                            _3814 = _3813.w;
                            uint _3816 = (_3798 * 40u) + 4u;
                            _3829 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3816)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3816 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3816 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3816 + 3u)).x));
                            uint _3831 = (_3798 * 40u) + 8u;
                            _3841 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3831)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3831 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3831 + 2u)).x));
                            uint _3843 = (_3798 * 40u) + 16u;
                            _3856 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3843)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3843 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3843 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3843 + 3u)).x));
                            uint _3858 = (_3798 * 40u) + 20u;
                            _3871 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3858)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3858 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3858 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3858 + 3u)).x));
                            uint _3873 = (_3798 * 40u) + 24u;
                            vec4 _3886 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3873)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3873 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3873 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3873 + 3u)).x));
                            uint _3892 = (_3798 * 40u) + 28u;
                            vec4 _3905 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3892)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3892 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3892 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3892 + 3u)).x));
                            _3917 = fma(_2260, _3905.z, fma(_2259, _3905.y, _3905.x * _2258)) + _3905.w;
                            _3918 = !((fma(_2260, _3886.z, fma(_2259, _3886.y, _3886.x * _2258)) + _3886.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3918)
                            {
                                float _3945 = _3813.x - _2258;
                                float _3946 = _3813.y - _2259;
                                float _3947 = _3813.z - _2260;
                                float _3948 = dot(vec3(_3945, _3946, _3947), vec3(_3945, _3946, _3947));
                                float _3951 = inversesqrt(_3948);
                                float _3952 = _3951 * _3945;
                                float _3953 = _3951 * _3946;
                                float _3954 = _3951 * _3947;
                                float _3958 = 1.0 - (_3948 / (_3814 * _3814));
                                float _5212 = isnan(0.0) ? _3958 : (isnan(_3958) ? 0.0 : max(_3958, 0.0));
                                float _3959 = isnan(1.0) ? _5212 : (isnan(_5212) ? 1.0 : min(_5212, 1.0));
                                float _3963 = sqrt(_3948) * _3829.w;
                                float _3965 = 1.39999997615814208984375 / (_3963 + 1.39999997615814208984375);
                                float _3966 = _3965 * _3965;
                                float _3969 = ((1.0 - _3966) * dot(vec3(_3952, _3953, _3954), vec3(_1093, _1096, _1099))) + _3966;
                                float _3972 = _3963 * _3963;
                                float _3976 = (fma(_2260, _3856.z, fma(_2259, _3856.y, _3856.x * _2258)) + _3856.w) / _3917;
                                float _3977 = (fma(_2260, _3871.z, fma(_2259, _3871.y, _3871.x * _2258)) + _3871.w) / _3917;
                                float _3981 = 1.0 - dot(vec2(_3976, _3977), vec2(_3976, _3977));
                                float _5228 = isnan(0.0) ? _3981 : (isnan(_3981) ? 0.0 : max(_3981, 0.0));
                                float _3982 = isnan(1.0) ? _5228 : (isnan(_5228) ? 1.0 : min(_5228, 1.0));
                                float _3983 = _3982 * (((isnan(0.0) ? _3969 : (isnan(_3969) ? 0.0 : max(_3969, 0.0))) * _3959) / ((_3972 * 0.699999988079071044921875) + 1.0));
                                float _3995 = exp2(log2(1.0 / ((_3972 * 3.5) + 5.0)) * 0.25);
                                float _3996 = 1.0 - _1168;
                                float _4003 = sqrt(1.0 - ((1.0 - (_3996 * _3996)) * (1.0 - (_3995 * _3995))));
                                float _4004 = _4003 * _4003;
                                float _4005 = _4004 * _4004;
                                float _4006 = _3952 - _3426;
                                float _4007 = _3953 - _3427;
                                float _4008 = _3954 - _3428;
                                float _4012 = inversesqrt(dot(vec3(_4006, _4007, _4008), vec3(_4006, _4007, _4008)));
                                float _4016 = dot(vec3(_1093, _1096, _1099), vec3((-0.0) - _3426, (-0.0) - _3427, (-0.0) - _3428));
                                float _5239 = isnan(0.0) ? _4016 : (isnan(_4016) ? 0.0 : max(_4016, 0.0));
                                float _4019 = isnan(1.0) ? _5239 : (isnan(_5239) ? 1.0 : min(_5239, 1.0));
                                float _4020 = dot(vec3(_1093, _1096, _1099), vec3(_4012 * _4006, _4012 * _4007, _4012 * _4008));
                                float _5250 = isnan(0.0) ? _4020 : (isnan(_4020) ? 0.0 : max(_4020, 0.0));
                                float _4023 = isnan(1.0) ? _5250 : (isnan(_5250) ? 1.0 : min(_5250, 1.0));
                                float _4027 = ((_4023 * _4023) * (_4005 + (-1.0))) + 1.0;
                                float _4028 = _3965 * _4004;
                                float _4029 = _4028 * _4028;
                                float _4035 = ((1.0 - _4029) * dot(vec3(_1093, _1096, _1099), vec3(_3952, _3953, _3954))) + _4029;
                                float _5261 = isnan(0.0) ? _4035 : (isnan(_4035) ? 0.0 : max(_4035, 0.0));
                                float _4036 = isnan(1.0) ? _5261 : (isnan(_5261) ? 1.0 : min(_5261, 1.0));
                                float _4037 = 1.0 - _4004;
                                float _4047 = (0.5 / (((_4036 * ((_4019 * _4037) + _4004)) + 9.9999999392252902907785028219223e-09) + (((_4036 * _4037) + _4004) * _4019))) * _4036;
                                float _5272 = isnan(0.0) ? _4047 : (isnan(_4047) ? 0.0 : max(_4047, 0.0));
                                float _4057 = (_3982 * _3959) * (((_4005 * 3.1415927410125732421875) * (isnan(1.0) ? _5272 : (isnan(_5272) ? 1.0 : min(_5272, 1.0)))) / ((_4027 * _4027) * ((_3972 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3983 * _3829.z;
                                frontier_phi_88_pred_1 = _3983 * _3829.y;
                                frontier_phi_88_pred_2 = _3983 * _3829.x;
                                frontier_phi_88_pred_3 = _4057 * _3841.z;
                                frontier_phi_88_pred_4 = _4057 * _3841.y;
                                frontier_phi_88_pred_5 = _4057 * _3841.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _4066 = frontier_phi_88_pred;
                            _4065 = frontier_phi_88_pred_1;
                            _4064 = frontier_phi_88_pred_2;
                            _4063 = frontier_phi_88_pred_3;
                            _4062 = frontier_phi_88_pred_4;
                            _4061 = frontier_phi_88_pred_5;
                            _3771 = _4064 + _3784;
                            _3772 = _4065 + _3785;
                            _3773 = _4066 + _3786;
                            _3768 = _4061 + _3781;
                            _3769 = _4062 + _3782;
                            _3770 = _4063 + _3783;
                            if (_3788 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3781 = _3768;
                                _3782 = _3769;
                                _3783 = _3770;
                                _3784 = _3771;
                                _3785 = _3772;
                                _3786 = _3773;
                                _3787 = _3788;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3773;
                        frontier_phi_82_pred_1 = _3772;
                        frontier_phi_82_pred_2 = _3771;
                        frontier_phi_82_pred_3 = _3770;
                        frontier_phi_82_pred_4 = _3769;
                        frontier_phi_82_pred_5 = _3768;
                    }
                    _3411 = frontier_phi_82_pred;
                    _3409 = frontier_phi_82_pred_1;
                    _3407 = frontier_phi_82_pred_2;
                    _3405 = frontier_phi_82_pred_3;
                    _3403 = frontier_phi_82_pred_4;
                    _3401 = frontier_phi_82_pred_5;
                    uint _3567 = _3566 + 1u;
                    if (_3567 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3560 = _3401;
                        _3561 = _3403;
                        _3562 = _3405;
                        _3563 = _3407;
                        _3564 = _3409;
                        _3565 = _3411;
                        _3566 = _3567;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3407;
                frontier_phi_63_64_ladder_1 = _3411;
                frontier_phi_63_64_ladder_2 = _3409;
                frontier_phi_63_64_ladder_3 = _3405;
                frontier_phi_63_64_ladder_4 = _3403;
                frontier_phi_63_64_ladder_5 = _3401;
            }
            else
            {
                frontier_phi_63_64_ladder = _3285;
                frontier_phi_63_64_ladder_1 = _3289;
                frontier_phi_63_64_ladder_2 = _3287;
                frontier_phi_63_64_ladder_3 = _3283;
                frontier_phi_63_64_ladder_4 = _3281;
                frontier_phi_63_64_ladder_5 = _3279;
            }
            _3400 = frontier_phi_63_64_ladder_5;
            _3402 = frontier_phi_63_64_ladder_4;
            _3404 = frontier_phi_63_64_ladder_3;
            _3406 = frontier_phi_63_64_ladder;
            _3408 = frontier_phi_63_64_ladder_2;
            _3410 = frontier_phi_63_64_ladder_1;
        }
        float _3415 = isnan(1.0) ? _1152 : (isnan(_1152) ? 1.0 : min(_1152, 1.0));
        _3212 = (_3415 * _3406) + _2724;
        _3214 = (_3415 * _3408) + _2726;
        _3216 = (_3415 * _3410) + _2728;
        _3218 = ((_3400 * _1136) * _3415) + _3062;
        _3220 = ((_3402 * _1138) * _3415) + _3064;
        _3222 = ((_3404 * _1139) * _3415) + _3066;
    }
    else
    {
        _3212 = _2724;
        _3214 = _2726;
        _3216 = _2728;
        _3218 = _3062;
        _3220 = _3064;
        _3222 = _3066;
    }
    float _5288 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
    float _5299 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
    float _5310 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
    float _3239 = ((isnan(1.0) ? _5288 : (isnan(_5288) ? 1.0 : min(_5288, 1.0))) * (_3212 + ((isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0))) * _1152))) + ((_3218 + ((isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0))) * _1990)) * cbPerFrame._m0[3u].x);
    float _3240 = ((isnan(1.0) ? _5299 : (isnan(_5299) ? 1.0 : min(_5299, 1.0))) * (_3214 + ((isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0))) * _1152))) + ((_3220 + ((isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0))) * _1990)) * cbPerFrame._m0[3u].x);
    float _3241 = ((isnan(1.0) ? _5310 : (isnan(_5310) ? 1.0 : min(_5310, 1.0))) * (_3216 + ((isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0))) * _1152))) + ((_3222 + ((isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0))) * _1990)) * cbPerFrame._m0[3u].x);
    uint _3242 = _295 + 6u;
    float _3250 = _1074 / cbSceneParam._m0[86u].x;
    float _3251 = _1075 / cbSceneParam._m0[86u].y;
    vec4 _3265 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3250, _3251, (log2((isnan(cbSceneParam._m0[77u].w) ? _997 : (isnan(_997) ? cbSceneParam._m0[77u].w : min(_997, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3267 = _3265.x;
    float _3268 = _3265.y;
    float _3269 = _3265.z;
    float _3270 = _3265.w;
    float _3342;
    float _3344;
    float _3346;
    float _3348;
    if (_997 > cbSceneParam._m0[78u].w)
    {
        float _3304 = isnan(_997) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _997 : min(cbSceneParam._m0[80u].w, _997));
        float _3305 = _3304 / _997;
        float _3316 = _3305 * _1047;
        float _3317 = _1048 * _3305;
        float _3318 = (-0.0) - _3317;
        float _3320 = _3305 * _1049;
        float _3322 = (cbSceneParam._m0[77u].w * _3318) / _3304;
        float _3323 = _3322 + cbSceneParam._m0[79u].w;
        float _3324 = cbSceneParam._m0[79u].w - _3317;
        float _3330 = sqrt(((_3316 * _3316) + (_3317 * _3317)) + (_3320 * _3320));
        float _3333 = (1.0 - (cbSceneParam._m0[77u].w / _3304)) * _3330;
        float _3338 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3340 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3517;
        if (abs((_3318 - _3322) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3517 = ((((_3323 > 0.0) ? exp2(_3338 * _3323) : (2.0 - exp2(_3340 * _3323))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3333;
        }
        else
        {
            float _3461 = 1.0 / cbSceneParam._m0[80u].x;
            float _3462 = isnan(_3324) ? _3323 : (isnan(_3323) ? _3324 : max(_3323, _3324));
            float _3463 = isnan(_3324) ? _3323 : (isnan(_3323) ? _3324 : min(_3323, _3324));
            float _3472 = isnan(0.0) ? _3462 : (isnan(_3462) ? 0.0 : min(_3462, 0.0));
            float _3473 = isnan(0.0) ? _3463 : (isnan(_3463) ? 0.0 : min(_3463, 0.0));
            _3517 = ((abs(_3330 / _3318) * cbSceneParam._m0[80u].y) * ((((_3472 - _3473) * 2.0) - ((exp2(_3338 * (isnan(0.0) ? _3462 : (isnan(_3462) ? 0.0 : max(_3462, 0.0)))) - exp2(_3338 * (isnan(0.0) ? _3463 : (isnan(_3463) ? 0.0 : max(_3463, 0.0))))) * _3461)) - ((exp2(_3340 * _3472) - exp2(_3340 * _3473)) * _3461))) + (_3333 * cbSceneParam._m0[80u].z);
        }
        vec4 _3519 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3250, _3251, 1.0), 0.0);
        float _3528 = exp2((_3517 * (-1.44269502162933349609375)) * (1.0 - _3519.w));
        float _3529 = log2(_3528);
        float _3545 = log2(_3270);
        _3342 = (exp2(_3545 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3529 * cbSceneParam._m0[78u].x)) * _3519.x) / cbSceneParam._m0[78u].x)) + _3267;
        _3344 = (exp2(_3545 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3529 * cbSceneParam._m0[78u].y)) * _3519.y) / cbSceneParam._m0[78u].y)) + _3268;
        _3346 = (exp2(_3545 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3529 * cbSceneParam._m0[78u].z)) * _3519.z) / cbSceneParam._m0[78u].z)) + _3269;
        _3348 = _3528 * _3270;
    }
    else
    {
        _3342 = _3267;
        _3344 = _3268;
        _3346 = _3269;
        _3348 = _3270;
    }
    bool _3555;
    vec4 _3358;
    vec4 _3380;
    float _3382;
    float _3386;
    float _3387;
    float _3388;
    float _3389;
    bool _3399;
    for (;;)
    {
        _3358 = cbMatDynParam._m0[0u];
        float _3360 = roundEven(_3358.y);
        bool _3361 = _3360 == 3.0;
        float _3362 = log2(_3348);
        float _3369 = exp2(_3362 * cbSceneParam._m0[78u].x) * _3239;
        float _3370 = exp2(_3362 * cbSceneParam._m0[78u].y) * _3240;
        float _3371 = exp2(_3362 * cbSceneParam._m0[78u].z) * _3241;
        float _3378 = _1063 + (-0.5);
        _3380 = cbMtdParam._m0[1u];
        _3382 = _3380.y * _3378;
        float _3385 = (_3360 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3386 = _3385 * (_3361 ? _3369 : (_3369 + (cbSceneParam._m0[72u].w * _3342)));
        _3387 = _3385 * (_3361 ? _3370 : (_3370 + (cbSceneParam._m0[72u].w * _3344)));
        _3388 = _3385 * (_3361 ? _3371 : (_3371 + (cbSceneParam._m0[72u].w * _3346)));
        _3389 = _3378 * 0.999000012874603271484375;
        _3399 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3399)
        {
            if ((cbInstanceData._m0[_295 + 7u].x + _3389) < 0.5)
            {
                _3555 = true;
                break;
            }
        }
        uint _3496 = _1112 + uint(_3358.w);
        if ((cbInstanceData._m0[_3496].w < 1.0) && ((cbInstanceData._m0[_3496].w + _3389) < 0.5))
        {
            _3555 = true;
            break;
        }
        if ((_3382 + 1.0) < _3380.x)
        {
            _3555 = true;
            break;
        }
        _3555 = false;
        break;
    }
    float _3759;
    if (_3555)
    {
        discard_state = true;
        _3759 = 0.0;
    }
    else
    {
        _3759 = cbInstanceData._m0[_3242].w;
    }
    SV_Target.x = _3386;
    SV_Target.y = _3387;
    SV_Target.z = _3388;
    SV_Target.w = _3759;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3242].w;
    discard_exit();
}


