#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1334;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _224 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _225 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _226 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _232 = inversesqrt(dot(vec3(_224, _225, _226), vec3(_224, _225, _226)));
    float _239 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _246 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _252 = uint(roundEven(NORMAL.w)) * 13u;
    uint _258 = _252 + 1u;
    uint _262 = _252 + 2u;
    float _271 = sqrt(((cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x) + (cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x)) + (cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x));
    float _272 = _271 * TEXCOORD.z;
    float _273 = _271 * TEXCOORD.w;
    vec4 _293 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _299 = _293.x * cbMtdParam._m0[11u].x;
    float _300 = _293.y * cbMtdParam._m0[11u].y;
    float _301 = _293.z * cbMtdParam._m0[11u].z;
    vec4 _320 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _272) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _273) + cbTextureTilingScale._m0[5u].w));
    vec4 _359 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _361 = _359.x;
    float _373 = dot(vec4(_361, _359.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _390 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_361 - _373) * cbMtdParam._m0[24u].y) + _373) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3943 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _391 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
    float _398 = (_391 * ((_320.x * cbMtdParam._m0[12u].x) - _299)) + _299;
    float _399 = (_391 * ((_320.y * cbMtdParam._m0[12u].y) - _300)) + _300;
    float _400 = (_391 * ((_320.z * cbMtdParam._m0[12u].z) - _301)) + _301;
    vec4 _417 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _272) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _273) + cbTextureTilingScale._m0[3u].w));
    vec4 _437 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _439 = _437.x;
    float _449 = dot(vec4(_439, _437.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _463 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_439 - _449) * cbMtdParam._m0[24u].y) + _449) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3954 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _464 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
    float _471 = (_464 * ((_417.x * cbMtdParam._m0[13u].x) - _398)) + _398;
    float _472 = (_464 * ((_417.y * cbMtdParam._m0[13u].y) - _399)) + _399;
    float _473 = (_464 * ((_417.z * cbMtdParam._m0[13u].z) - _400)) + _400;
    vec4 _490 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _272) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _273) + cbTextureTilingScale._m0[20u].w));
    vec4 _513 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _272) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _273) + cbTextureTilingScale._m0[4u].w));
    vec4 _530 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _532 = _530.x;
    float _533 = _530.y;
    float _534 = _530.z;
    float _541 = ((_513.x - _532) * _391) + _532;
    float _542 = ((_513.y - _533) * _391) + _533;
    float _543 = ((_513.z - _534) * _391) + _534;
    vec4 _555 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _272) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _273) + cbTextureTilingScale._m0[2u].w));
    float _568 = ((_555.z - _543) * _464) + _543;
    float _571 = ((((_555.x - _541) * _464) + _541) * 2.0) + (-1.0);
    float _572 = ((((_555.y - _542) * _464) + _542) * 2.0) + (-1.0);
    float _573 = dot(vec2(_571, _572), vec2(_571, _572));
    float _3965 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _578 = sqrt(1.0 - (isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0))));
    vec4 _592 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _617 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _272) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _273) + cbTextureTilingScale._m0[11u].w));
    float _619 = _617.x;
    float _620 = 1.0 - _619;
    float _633 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_619 - _620) * cbMtdParam._m0[24u].z) + _620) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3976 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _634 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
    float _641 = (_634 * (cbMtdParam._m0[17u].x - _471)) + _471;
    float _642 = (_634 * (cbMtdParam._m0[17u].y - _472)) + _472;
    float _643 = (_634 * (cbMtdParam._m0[17u].z - _473)) + _473;
    vec4 _655 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _669 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _671 = _669.x;
    float _689 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _272) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _273) + cbTextureTilingScale._m0[9u].w)).x - _671) * _391) + _671;
    float _706 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _272) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _273) + cbTextureTilingScale._m0[21u].w)).x - _689) * _464) + _689;
    float _710 = ((_655.x - _706) * cbMtdParam._m0[19u].z) + _706;
    float _712 = _710 - (_710 * _634);
    float _717 = (((_490.z - _568) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _568;
    float _721 = ((_592.z - _717) * cbMtdParam._m0[19u].w) + _717;
    vec4 _734 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _272) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _273) + cbTextureTilingScale._m0[15u].w));
    float _741 = (_734.x * 2.0) + (-1.0);
    float _742 = (_734.y * 2.0) + (-1.0);
    float _743 = dot(vec2(_741, _742), vec2(_741, _742));
    float _3987 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _751 = (_634 * (_734.z - _721)) + _721;
    float _760 = (_571 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_490.x * 2.0) + (-1.0)))) + (((_592.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _761 = (_572 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_490.y * 2.0) + (-1.0)))) + (((_592.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _773 = (((_741 - _760) + (cbMtdParam._m0[21u].x * _760)) * _634) + _760;
    float _774 = (((_742 - _761) + (cbMtdParam._m0[21u].x * _761)) * _634) + _761;
    float _775 = (_634 * (sqrt(1.0 - (isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0)))) - _578)) + _578;
    float _780 = cbMtdParam._m0[22u].x + _592.w;
    float _783 = fma(_775, _239 * NORMAL.x, fma(_774, _246 * TANGENT.x, (_232 * _224) * _773));
    float _786 = fma(_775, _239 * NORMAL.y, fma(_774, _246 * TANGENT.y, (_232 * _225) * _773));
    float _789 = fma(_775, _239 * NORMAL.z, fma(_774, _246 * TANGENT.z, (_232 * _226) * _773));
    float _793 = inversesqrt(dot(vec3(_783, _786, _789), vec3(_783, _786, _789)));
    float _794 = _793 * _783;
    float _795 = _793 * _786;
    float _796 = _793 * _789;
    float _3998 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
    float _797 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
    float _4009 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _4020 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _4031 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _4042 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _4053 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _802 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
    float _816 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _857 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _867 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _857);
    float _868 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _857);
    float _869 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _857);
    float _873 = inversesqrt(dot(vec3(_867, _868, _869), vec3(_867, _868, _869)));
    float _874 = _867 * _873;
    float _875 = _868 * _873;
    float _876 = _869 * _873;
    float _882 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _883 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _901 = fma(_796, cbSceneParam._m0[5u].z, fma(_795, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _794));
    float _904 = fma(_796, cbSceneParam._m0[6u].z, fma(_795, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _794));
    float _907 = fma(_796, cbSceneParam._m0[7u].z, fma(_795, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _794));
    uint _921 = (_252 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _927 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0)))) * cbInstanceData._m0[_921].x;
    float _928 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0)))) * cbInstanceData._m0[_921].y;
    float _929 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0)))) * cbInstanceData._m0[_921].z;
    float _4064 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
    float _930 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
    float _4075 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
    float _931 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
    float _4086 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
    float _932 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
    float _933 = 1.0 - _802;
    float _934 = _930 * _933;
    float _935 = _931 * _933;
    float _936 = _932 * _933;
    float _941 = (_930 + (-0.039999999105930328369140625)) * _802;
    float _942 = (_931 + (-0.039999999105930328369140625)) * _802;
    float _943 = (_932 + (-0.039999999105930328369140625)) * _802;
    float _944 = _941 + 0.039999999105930328369140625;
    float _946 = _942 + 0.039999999105930328369140625;
    float _947 = _943 + 0.039999999105930328369140625;
    vec4 _956 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _882, cbSceneParam._m0[86u].y * _883));
    float _960 = ((isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0))) * TEXCOORD_5.w) * _956.x;
    float _961 = dot(vec3(_794, _795, _796), vec3(_874, _875, _876));
    float _964 = _961 * 2.0;
    float _968 = (_964 * _794) - _874;
    float _969 = (_964 * _795) - _875;
    float _970 = (_964 * _796) - _876;
    float _974 = abs(dot(vec3(_874, _875, _876), vec3(_794, _795, _796)));
    float _4097 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
    float _976 = sqrt(_797);
    float _989 = exp2((_976 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_976 * 3.0));
    float _995 = (1.0 - _989) * ((_976 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _996 = _989 * _976;
    float _1024 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1028 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1032 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1333;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1058 = fma(_1032, cbModelParam._m0[26u].z, fma(_1028, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1024));
        float _1062 = fma(_1032, cbModelParam._m0[27u].z, fma(_1028, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1024));
        float _1066 = fma(_1032, cbModelParam._m0[28u].z, fma(_1028, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1024));
        float _1091 = _1024 + _794;
        float _1092 = _1028 + _795;
        float _1093 = _1032 + _796;
        float _1103 = fma(_1093, cbModelParam._m0[26u].z, fma(_1092, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1091)) - _1058;
        float _1104 = fma(_1093, cbModelParam._m0[27u].z, fma(_1092, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1091)) - _1062;
        float _1105 = fma(_1093, cbModelParam._m0[28u].z, fma(_1092, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1091)) - _1066;
        float _1109 = inversesqrt(dot(vec3(_1103, _1104, _1105), vec3(_1103, _1104, _1105)));
        float _1122 = ((_1109 * _1103) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1058 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1123 = ((_1109 * _1104) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1062 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1124 = ((_1109 * _1105) / cbModelParam._m0[34u].z) + ((((((_1066 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1127 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1122, _1123, _1124), 0.0);
        vec4 _1134 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1122, _1123, _1124), 0.0);
        vec4 _1141 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1122, _1123, _1124), 0.0);
        vec4 _1148 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1122, _1123, _1124), 0.0);
        float _1161 = exp2((_1127.w + (-0.5)) * 20.0) * 2.0;
        float _1162 = _1161 * (_1127.x + (-0.5));
        float _1163 = _1161 * (_1127.y + (-0.5));
        float _1164 = _1161 * (_1127.z + (-0.5));
        float _1171 = exp2((_1134.w + (-0.5)) * 20.0) * 2.0;
        float _1172 = _1171 * (_1134.x + (-0.5));
        float _1173 = _1171 * (_1134.y + (-0.5));
        float _1174 = _1171 * (_1134.z + (-0.5));
        float _1181 = exp2((_1141.w + (-0.5)) * 20.0) * 2.0;
        float _1182 = _1181 * (_1141.x + (-0.5));
        float _1183 = _1181 * (_1141.y + (-0.5));
        float _1184 = _1181 * (_1141.z + (-0.5));
        float _1191 = exp2((_1148.w + (-0.5)) * 20.0) * 2.0;
        float _1192 = _1191 * (_1148.x + (-0.5));
        float _1193 = _1191 * (_1148.y + (-0.5));
        float _1194 = _1191 * (_1148.z + (-0.5));
        float _1195 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1196 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1197 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1198 = _1162 * 0.5;
        float _1199 = _1172 * 0.5;
        float _1200 = _1182 * 0.5;
        float _1201 = dot(vec3(_1198, _1199, _1200), vec3(_1198, _1199, _1200));
        float _1206 = (_1201 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1201);
        float _1215 = (dot(vec3(_794, _795, _796), vec3(_1206 * _1198, _1206 * _1199, _1206 * _1200)) + 1.0) * 0.5;
        float _4123 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1225 = sqrt(((_1199 * _1199) + (_1198 * _1198)) + (_1200 * _1200)) / (_1195 + 9.9999997473787516355514526367188e-06);
        float _4134 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1226 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
        float _1227 = _1226 * 2.0;
        float _1231 = (1.0 - _1226) / (_1226 + 1.0);
        float _4145 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1232 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
        float _1241 = ((((1.0 - _1232) * (_1227 + 2.0)) * exp2(log2(isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0))) * (_1227 + 1.0))) + _1232) * _1195;
        float _1242 = _1163 * 0.5;
        float _1243 = _1173 * 0.5;
        float _1244 = _1183 * 0.5;
        float _1245 = dot(vec3(_1242, _1243, _1244), vec3(_1242, _1243, _1244));
        float _1250 = (_1245 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1245);
        float _1258 = (dot(vec3(_794, _795, _796), vec3(_1250 * _1242, _1250 * _1243, _1250 * _1244)) + 1.0) * 0.5;
        float _4156 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1267 = sqrt(((_1243 * _1243) + (_1242 * _1242)) + (_1244 * _1244)) / (_1196 + 9.9999997473787516355514526367188e-06);
        float _4167 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1268 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
        float _1269 = _1268 * 2.0;
        float _1273 = (1.0 - _1268) / (_1268 + 1.0);
        float _4178 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1274 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
        float _1283 = ((((1.0 - _1274) * (_1269 + 2.0)) * exp2(log2(isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0))) * (_1269 + 1.0))) + _1274) * _1196;
        float _1284 = _1164 * 0.5;
        float _1285 = _1174 * 0.5;
        float _1286 = _1184 * 0.5;
        float _1287 = dot(vec3(_1284, _1285, _1286), vec3(_1284, _1285, _1286));
        float _1292 = (_1287 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1287);
        float _1300 = (dot(vec3(_794, _795, _796), vec3(_1292 * _1284, _1292 * _1285, _1292 * _1286)) + 1.0) * 0.5;
        float _4189 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1309 = sqrt(((_1285 * _1285) + (_1284 * _1284)) + (_1286 * _1286)) / (_1197 + 9.9999997473787516355514526367188e-06);
        float _4200 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1310 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
        float _1311 = _1310 * 2.0;
        float _1315 = (1.0 - _1310) / (_1310 + 1.0);
        float _4211 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1316 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
        float _1325 = ((((1.0 - _1316) * (_1311 + 2.0)) * exp2(log2(isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0))) * (_1311 + 1.0))) + _1316) * _1197;
        _1333 = _1164;
        _1335 = _1163;
        _1336 = _1162;
        _1337 = _1174;
        _1338 = _1173;
        _1339 = _1172;
        _1340 = _1184;
        _1341 = _1183;
        _1342 = _1182;
        _1343 = _1197;
        _1344 = _1196;
        _1345 = _1195;
        _1346 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0)));
        _1347 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0)));
        _1348 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0)));
    }
    else
    {
        _1333 = _1334;
        _1335 = _1334;
        _1336 = _1334;
        _1337 = _1334;
        _1338 = _1334;
        _1339 = _1334;
        _1340 = _1334;
        _1341 = _1334;
        _1342 = _1334;
        _1343 = _1334;
        _1344 = _1334;
        _1345 = _1334;
        _1346 = 0.0;
        _1347 = 0.0;
        _1348 = 0.0;
    }
    float _1641;
    float _1642;
    float _1643;
    float _1644;
    float _1645;
    float _1646;
    float _1647;
    float _1648;
    float _1649;
    float _1650;
    float _1651;
    float _1652;
    float _1653;
    float _1654;
    float _1655;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1372 = fma(_1032, cbModelParam._m0[30u].z, fma(_1028, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1024));
        float _1376 = fma(_1032, cbModelParam._m0[31u].z, fma(_1028, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1024));
        float _1380 = fma(_1032, cbModelParam._m0[32u].z, fma(_1028, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1024));
        float _1403 = _1024 + _794;
        float _1404 = _1028 + _795;
        float _1405 = _1032 + _796;
        float _1415 = fma(_1405, cbModelParam._m0[30u].z, fma(_1404, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1403)) - _1372;
        float _1416 = fma(_1405, cbModelParam._m0[31u].z, fma(_1404, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1403)) - _1376;
        float _1417 = fma(_1405, cbModelParam._m0[32u].z, fma(_1404, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1403)) - _1380;
        float _1421 = inversesqrt(dot(vec3(_1415, _1416, _1417), vec3(_1415, _1416, _1417)));
        float _1434 = ((_1421 * _1415) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1372 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1435 = ((_1421 * _1416) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1376 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1436 = ((_1421 * _1417) / cbModelParam._m0[35u].z) + ((((((_1380 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1438 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1434, _1435, _1436), 0.0);
        vec4 _1445 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1434, _1435, _1436), 0.0);
        vec4 _1452 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1434, _1435, _1436), 0.0);
        vec4 _1459 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1434, _1435, _1436), 0.0);
        float _1471 = exp2((_1438.w + (-0.5)) * 20.0) * 2.0;
        float _1472 = _1471 * (_1438.x + (-0.5));
        float _1473 = _1471 * (_1438.y + (-0.5));
        float _1474 = _1471 * (_1438.z + (-0.5));
        float _1481 = exp2((_1445.w + (-0.5)) * 20.0) * 2.0;
        float _1482 = _1481 * (_1445.x + (-0.5));
        float _1483 = _1481 * (_1445.y + (-0.5));
        float _1484 = _1481 * (_1445.z + (-0.5));
        float _1491 = exp2((_1452.w + (-0.5)) * 20.0) * 2.0;
        float _1492 = _1491 * (_1452.x + (-0.5));
        float _1493 = _1491 * (_1452.y + (-0.5));
        float _1494 = _1491 * (_1452.z + (-0.5));
        float _1501 = exp2((_1459.w + (-0.5)) * 20.0) * 2.0;
        float _1502 = _1501 * (_1459.x + (-0.5));
        float _1503 = _1501 * (_1459.y + (-0.5));
        float _1504 = _1501 * (_1459.z + (-0.5));
        float _1505 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1506 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1507 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1508 = _1472 * 0.5;
        float _1509 = _1482 * 0.5;
        float _1510 = _1492 * 0.5;
        float _1511 = dot(vec3(_1508, _1509, _1510), vec3(_1508, _1509, _1510));
        float _1516 = (_1511 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1511);
        float _1524 = (dot(vec3(_794, _795, _796), vec3(_1516 * _1508, _1516 * _1509, _1516 * _1510)) + 1.0) * 0.5;
        float _4252 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
        float _1533 = sqrt(((_1509 * _1509) + (_1508 * _1508)) + (_1510 * _1510)) / (_1505 + 9.9999997473787516355514526367188e-06);
        float _4263 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1534 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
        float _1535 = _1534 * 2.0;
        float _1539 = (1.0 - _1534) / (_1534 + 1.0);
        float _4274 = isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0));
        float _1540 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
        float _1549 = ((((1.0 - _1540) * (_1535 + 2.0)) * exp2(log2(isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0))) * (_1535 + 1.0))) + _1540) * _1505;
        float _1550 = _1473 * 0.5;
        float _1551 = _1483 * 0.5;
        float _1552 = _1493 * 0.5;
        float _1553 = dot(vec3(_1550, _1551, _1552), vec3(_1550, _1551, _1552));
        float _1558 = (_1553 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1553);
        float _1566 = (dot(vec3(_794, _795, _796), vec3(_1558 * _1550, _1558 * _1551, _1558 * _1552)) + 1.0) * 0.5;
        float _4285 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
        float _1575 = sqrt(((_1551 * _1551) + (_1550 * _1550)) + (_1552 * _1552)) / (_1506 + 9.9999997473787516355514526367188e-06);
        float _4296 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1576 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
        float _1577 = _1576 * 2.0;
        float _1581 = (1.0 - _1576) / (_1576 + 1.0);
        float _4307 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1582 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
        float _1591 = ((((1.0 - _1582) * (_1577 + 2.0)) * exp2(log2(isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0))) * (_1577 + 1.0))) + _1582) * _1506;
        float _1592 = _1474 * 0.5;
        float _1593 = _1484 * 0.5;
        float _1594 = _1494 * 0.5;
        float _1595 = dot(vec3(_1592, _1593, _1594), vec3(_1592, _1593, _1594));
        float _1600 = (_1595 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1595);
        float _1608 = (dot(vec3(_794, _795, _796), vec3(_1600 * _1592, _1600 * _1593, _1600 * _1594)) + 1.0) * 0.5;
        float _4318 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
        float _1617 = sqrt(((_1593 * _1593) + (_1592 * _1592)) + (_1594 * _1594)) / (_1507 + 9.9999997473787516355514526367188e-06);
        float _4329 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
        float _1618 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
        float _1619 = _1618 * 2.0;
        float _1623 = (1.0 - _1618) / (_1618 + 1.0);
        float _4340 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
        float _1624 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
        float _1633 = ((((1.0 - _1624) * (_1619 + 2.0)) * exp2(log2(isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0))) * (_1619 + 1.0))) + _1624) * _1507;
        _1641 = _1474;
        _1642 = _1473;
        _1643 = _1472;
        _1644 = _1484;
        _1645 = _1483;
        _1646 = _1482;
        _1647 = _1494;
        _1648 = _1493;
        _1649 = _1492;
        _1650 = _1507;
        _1651 = _1506;
        _1652 = _1505;
        _1653 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0)));
        _1654 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0)));
        _1655 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0)));
    }
    else
    {
        _1641 = _1334;
        _1642 = _1334;
        _1643 = _1334;
        _1644 = _1334;
        _1645 = _1334;
        _1646 = _1334;
        _1647 = _1334;
        _1648 = _1334;
        _1649 = _1334;
        _1650 = _1334;
        _1651 = _1334;
        _1652 = _1334;
        _1653 = 0.0;
        _1654 = 0.0;
        _1655 = 0.0;
    }
    float _1665 = (cbModelParam._m0[1u].x * (_1653 - _1346)) + _1346;
    float _1666 = (cbModelParam._m0[1u].x * (_1654 - _1347)) + _1347;
    float _1667 = (cbModelParam._m0[1u].x * (_1655 - _1348)) + _1348;
    float _1688 = fma(_1667, cbSceneParam._m0[89u].z, fma(_1666, cbSceneParam._m0[89u].y, _1665 * cbSceneParam._m0[89u].x));
    float _1691 = fma(_1667, cbSceneParam._m0[90u].z, fma(_1666, cbSceneParam._m0[90u].y, _1665 * cbSceneParam._m0[90u].x));
    float _1694 = fma(_1667, cbSceneParam._m0[91u].z, fma(_1666, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1665));
    float _1709 = _968 * 0.5;
    float _1710 = _969 * 0.5;
    float _1711 = _970 * 0.5;
    float _1712 = dot(vec4(_1709, _1710, _1711, 1.0), vec4(_1643, _1646, _1649, _1652));
    float _1715 = dot(vec4(_1709, _1710, _1711, 1.0), vec4(_1642, _1645, _1648, _1651));
    float _1718 = dot(vec4(_1709, _1710, _1711, 1.0), vec4(_1641, _1644, _1647, _1650));
    float _1752;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1725 = dot(vec4(_1709, _1710, _1711, 1.0), vec4(_1333, _1337, _1340, _1343));
        float _1729 = dot(vec4(_1709, _1710, _1711, 1.0), vec4(_1335, _1338, _1341, _1344));
        float _1733 = dot(vec4(_1709, _1710, _1711, 1.0), vec4(_1336, _1339, _1342, _1345));
        float _1740 = dot(vec4(cbModelParam._m0[39u]), vec4(_1709, _1710, _1711, 1.0));
        _1752 = dot(vec3(isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0)), isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0)), isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1740) ? 0.0 : (isnan(0.0) ? _1740 : max(0.0, _1740))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1752 = 1.0;
    }
    float _1763;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1754 = dot(vec4(cbModelParam._m0[40u]), vec4(_1709, _1710, _1711, 1.0));
        _1763 = dot(vec3(isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0)), isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0)), isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1754) ? 0.0 : (isnan(0.0) ? _1754 : max(0.0, _1754))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1763 = 1.0;
    }
    float _1767 = (_1763 * cbModelParam._m0[1u].x) + (_1752 * (1.0 - cbModelParam._m0[1u].x));
    float _1777 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _797);
    float _1778 = isnan(_1777) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1777 : min(cbModelParam._m0[25u].z, _1777));
    float _1859;
    float _1861;
    float _1863;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1826 = fma(_1032, cbModelParam._m0[13u].z, fma(_1028, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1024)) + cbModelParam._m0[13u].w;
        float _1830 = fma(_1032, cbModelParam._m0[14u].z, fma(_1028, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1024)) + cbModelParam._m0[14u].w;
        float _1834 = fma(_1032, cbModelParam._m0[15u].z, fma(_1028, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1024)) + cbModelParam._m0[15u].w;
        float _1837 = fma(_970, cbModelParam._m0[13u].z, fma(_969, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _968));
        float _1840 = fma(_970, cbModelParam._m0[14u].z, fma(_969, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _968));
        float _1843 = fma(_970, cbModelParam._m0[15u].z, fma(_969, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _968));
        float _1871;
        if (_1837 > 0.0)
        {
            _1871 = abs((1.0 - _1826) / _1837);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1837 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1826 + 1.0) / _1837);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1871 = frontier_phi_14_12_ladder;
        }
        float _2043;
        if (_1840 > 0.0)
        {
            _2043 = abs((1.0 - _1830) / _1840);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1840 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1830 + 1.0) / _1840);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2043 = frontier_phi_23_19_ladder;
        }
        float _2338;
        if (_1843 > 0.0)
        {
            _2338 = abs((1.0 - _1834) / _1843);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1843 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1834 + 1.0) / _1843);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2338 = frontier_phi_35_30_ladder;
        }
        float _2340 = isnan(_2043) ? _1871 : (isnan(_1871) ? _2043 : min(_1871, _2043));
        float _2341 = isnan(_2338) ? _2340 : (isnan(_2340) ? _2338 : min(_2340, _2338));
        float _2345 = (_2341 * _1837) + _1826;
        float _2346 = (_2341 * _1840) + _1830;
        float _2347 = (_2341 * _1843) + _1834;
        float _2348 = _2341 * 9.9999997473787516355514526367188e-05;
        float _2350 = (-1.0) - _2348;
        float _2352 = _2348 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2347 > _2352) || ((_2347 < _2350) || ((_2346 > _2352) || ((_2346 < _2350) || ((_2345 < _2350) || (_2345 > _2352))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2492 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2347, cbModelParam._m0[9u].z, fma(_2346, cbModelParam._m0[9u].y, _2345 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2347, cbModelParam._m0[10u].z, fma(_2346, cbModelParam._m0[10u].y, _2345 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2347, cbModelParam._m0[11u].z, fma(_2346, cbModelParam._m0[11u].y, _2345 * cbModelParam._m0[11u].x))), _1778);
            frontier_phi_13_35_ladder = _2492.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2492.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2492.x * cbModelParam._m0[1u].y;
        }
        _1859 = frontier_phi_13_35_ladder_2;
        _1861 = frontier_phi_13_35_ladder_1;
        _1863 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1847 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_968, _969, _970), _1778);
        _1859 = _1847.x * cbModelParam._m0[1u].y;
        _1861 = _1847.y * cbModelParam._m0[1u].y;
        _1863 = _1847.z * cbModelParam._m0[1u].y;
    }
    float _1867 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _797);
    float _1868 = isnan(_1867) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1867 : min(cbModelParam._m0[25u].w, _1867));
    float _1958;
    float _1960;
    float _1962;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1922 = fma(_1032, cbModelParam._m0[21u].z, fma(_1028, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1024)) + cbModelParam._m0[21u].w;
        float _1926 = fma(_1032, cbModelParam._m0[22u].z, fma(_1028, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1024)) + cbModelParam._m0[22u].w;
        float _1930 = fma(_1032, cbModelParam._m0[23u].z, fma(_1028, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1024)) + cbModelParam._m0[23u].w;
        float _1933 = fma(_970, cbModelParam._m0[21u].z, fma(_969, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _968));
        float _1936 = fma(_970, cbModelParam._m0[22u].z, fma(_969, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _968));
        float _1939 = fma(_970, cbModelParam._m0[23u].z, fma(_969, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _968));
        float _2048;
        if (_1933 > 0.0)
        {
            _2048 = abs((1.0 - _1922) / _1933);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1933 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1922 + 1.0) / _1933);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2048 = frontier_phi_25_21_ladder;
        }
        float _2365;
        if (_1936 > 0.0)
        {
            _2365 = abs((1.0 - _1926) / _1936);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1936 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1926 + 1.0) / _1936);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2365 = frontier_phi_37_32_ladder;
        }
        float _2703;
        if (_1939 > 0.0)
        {
            _2703 = abs((1.0 - _1930) / _1939);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1939 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1930 + 1.0) / _1939);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2703 = frontier_phi_47_44_ladder;
        }
        float _2705 = isnan(_2365) ? _2048 : (isnan(_2048) ? _2365 : min(_2048, _2365));
        float _2706 = isnan(_2703) ? _2705 : (isnan(_2705) ? _2703 : min(_2705, _2703));
        float _2710 = (_2706 * _1933) + _1922;
        float _2711 = (_2706 * _1936) + _1926;
        float _2712 = (_2706 * _1939) + _1930;
        float _2713 = _2706 * 9.9999997473787516355514526367188e-05;
        float _2714 = (-1.0) - _2713;
        float _2716 = _2713 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2712 > _2716) || ((_2712 < _2714) || ((_2711 > _2716) || ((_2711 < _2714) || ((_2710 < _2714) || (_2710 > _2716))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2834 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2712, cbModelParam._m0[17u].z, fma(_2711, cbModelParam._m0[17u].y, _2710 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2712, cbModelParam._m0[18u].z, fma(_2711, cbModelParam._m0[18u].y, _2710 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2712, cbModelParam._m0[19u].z, fma(_2711, cbModelParam._m0[19u].y, _2710 * cbModelParam._m0[19u].x))), _1868);
            frontier_phi_22_47_ladder = _2834.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2834.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2834.x * cbModelParam._m0[1u].z;
        }
        _1958 = frontier_phi_22_47_ladder_2;
        _1960 = frontier_phi_22_47_ladder_1;
        _1962 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1942 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_968, _969, _970), _1868);
        _1958 = _1942.x * cbModelParam._m0[1u].z;
        _1960 = _1942.y * cbModelParam._m0[1u].z;
        _1962 = _1942.z * cbModelParam._m0[1u].z;
    }
    float _1975 = (((_995 * _944) + _996) * _960) * ((cbModelParam._m0[1u].w * (_1958 - _1859)) + _1859);
    float _1977 = (((_995 * _946) + _996) * _960) * ((cbModelParam._m0[1u].w * (_1960 - _1861)) + _1861);
    float _1979 = (((_995 * _947) + _996) * _960) * ((cbModelParam._m0[1u].w * (_1962 - _1863)) + _1863);
    float _1982 = fma(_1979, cbSceneParam._m0[89u].z, fma(_1977, cbSceneParam._m0[89u].y, _1975 * cbSceneParam._m0[89u].x));
    float _1985 = fma(_1979, cbSceneParam._m0[90u].z, fma(_1977, cbSceneParam._m0[90u].y, _1975 * cbSceneParam._m0[90u].x));
    float _1988 = fma(_1979, cbSceneParam._m0[91u].z, fma(_1977, cbSceneParam._m0[91u].y, _1975 * cbSceneParam._m0[91u].x));
    float _2022 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2026 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2030 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2034 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2035 = _2022 / _2034;
    float _2036 = _2026 / _2034;
    float _2037 = _2030 / _2034;
    float _2184;
    float _2185;
    float _2186;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2064 = ((uint(_2037 > cbSceneParam._m0[59u].y) + uint(_2037 > cbSceneParam._m0[59u].x)) + uint(_2037 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2065 = _2064 + 43u;
        uint _2073 = _2064 + 44u;
        uint _2081 = _2064 + 45u;
        uint _2089 = _2064 + 46u;
        float _2100 = fma(_2034, cbSceneParam._m0[_2065].w, fma(_2030, cbSceneParam._m0[_2065].z, fma(_2026, cbSceneParam._m0[_2065].y, _2022 * cbSceneParam._m0[_2065].x)));
        float _2104 = fma(_2034, cbSceneParam._m0[_2073].w, fma(_2030, cbSceneParam._m0[_2073].z, fma(_2026, cbSceneParam._m0[_2073].y, _2022 * cbSceneParam._m0[_2073].x)));
        float _2112 = fma(_2034, cbSceneParam._m0[_2089].w, fma(_2030, cbSceneParam._m0[_2089].z, fma(_2026, cbSceneParam._m0[_2089].y, _2022 * cbSceneParam._m0[_2089].x)));
        float _2117 = cbSceneParam._m0[33u].z * _2112;
        float _2119 = cbSceneParam._m0[33u].w * _2112;
        float _2122 = fma(_2034, cbSceneParam._m0[_2081].w, fma(_2030, cbSceneParam._m0[_2081].z, fma(_2026, cbSceneParam._m0[_2081].y, _2022 * cbSceneParam._m0[_2081].x))) / _2112;
        float _2170 = (cbSceneParam._m0[33u].x - sqrt(((_2036 * _2036) + (_2035 * _2035)) + (_2037 * _2037))) * cbSceneParam._m0[33u].y;
        float _4466 = isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0));
        float _2177 = (isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2117 + _2100) / _2112, (_2119 + _2104) / _2112), _2122), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2119 + _2100) / _2112, (_2104 - _2117) / _2112), _2122), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2100 - _2117) / _2112, (_2104 - _2119) / _2112), _2122), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2100 - _2119) / _2112, (_2117 + _2104) / _2112), _2122), 0.0)).x), vec4(0.25)));
        _2184 = 1.0 - (_2177 * cbSceneParam._m0[34u].x);
        _2185 = 1.0 - (_2177 * cbSceneParam._m0[34u].y);
        _2186 = 1.0 - (_2177 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2184 = 1.0;
        _2185 = 1.0;
        _2186 = 1.0;
    }
    float _2250;
    float _2252;
    float _2254;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2238 = fma(_2034, cbSceneParam._m0[63u].w, fma(_2030, cbSceneParam._m0[63u].z, fma(_2026, cbSceneParam._m0[63u].y, _2022 * cbSceneParam._m0[63u].x)));
        float _2239 = fma(_2034, cbSceneParam._m0[60u].w, fma(_2030, cbSceneParam._m0[60u].z, fma(_2026, cbSceneParam._m0[60u].y, _2022 * cbSceneParam._m0[60u].x))) / _2238;
        float _2240 = fma(_2034, cbSceneParam._m0[61u].w, fma(_2030, cbSceneParam._m0[61u].z, fma(_2026, cbSceneParam._m0[61u].y, _2022 * cbSceneParam._m0[61u].x))) / _2238;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2239 >= cbSceneParam._m0[64u].x) && (_2240 >= cbSceneParam._m0[64u].y)) && (_2239 <= cbSceneParam._m0[64u].z)) && (_2240 <= cbSceneParam._m0[64u].w))
        {
            float _2378 = fma(_2034, cbSceneParam._m0[62u].w, fma(_2030, cbSceneParam._m0[62u].z, fma(_2026, cbSceneParam._m0[62u].y, _2022 * cbSceneParam._m0[62u].x))) / _2238;
            float _2382 = isnan(cbSceneParam._m0[41u].w) ? _2378 : (isnan(_2378) ? cbSceneParam._m0[41u].w : max(_2378, cbSceneParam._m0[41u].w));
            float _2425 = (cbSceneParam._m0[33u].x - sqrt(((_2036 * _2036) + (_2035 * _2035)) + (_2037 * _2037))) * cbSceneParam._m0[33u].y;
            float _4482 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
            float _2432 = (isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2239, cbSceneParam._m0[33u].w + _2240), _2382), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2239, _2240 - cbSceneParam._m0[33u].z), _2382), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2239 - cbSceneParam._m0[33u].z, _2240 - cbSceneParam._m0[33u].w), _2382), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2239 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2240), _2382), 0.0)).x), vec4(0.25)));
            float _2436 = 1.0 - (_2432 * cbSceneParam._m0[34u].x);
            float _2437 = 1.0 - (_2432 * cbSceneParam._m0[34u].y);
            float _2438 = 1.0 - (_2432 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2438) ? _2186 : (isnan(_2186) ? _2438 : min(_2186, _2438));
            frontier_phi_34_33_ladder_1 = isnan(_2437) ? _2185 : (isnan(_2185) ? _2437 : min(_2185, _2437));
            frontier_phi_34_33_ladder_2 = isnan(_2436) ? _2184 : (isnan(_2184) ? _2436 : min(_2184, _2436));
        }
        else
        {
            frontier_phi_34_33_ladder = _2186;
            frontier_phi_34_33_ladder_1 = _2185;
            frontier_phi_34_33_ladder_2 = _2184;
        }
        _2250 = frontier_phi_34_33_ladder_2;
        _2252 = frontier_phi_34_33_ladder_1;
        _2254 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2250 = _2184;
        _2252 = _2185;
        _2254 = _2186;
    }
    uvec4 _2259 = floatBitsToUint(cbInstanceData._m0[_252 + 5u]);
    uint _2261 = _2259.x * 14u;
    uint _2262 = _2261 + 13u;
    float _2269 = _960 + (-1.0);
    float _2274 = (cbLight._m0[_2262].x * _2269) + 1.0;
    float _2275 = (cbLight._m0[_2262].y * _2269) + 1.0;
    float _2276 = (cbLight._m0[_2262].z * _2269) + 1.0;
    float _2277 = (cbLight._m0[_2262].w * _2269) + 1.0;
    uint _2278 = _2261 + 5u;
    float _2284 = isnan(1.0) ? _2275 : (isnan(_2275) ? 1.0 : min(_2275, 1.0));
    uint _2288 = _2261 + 4u;
    float _2297 = isnan(1.0) ? _2274 : (isnan(_2274) ? 1.0 : min(_2274, 1.0));
    uint _2301 = _2261 | 1u;
    float _2312 = dot(vec3(cbLight._m0[_2261].xyz), vec3(_794, _795, _796));
    float _2315 = dot(vec3(cbLight._m0[_2301].xyz), vec3(_794, _795, _796));
    float _4518 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
    float _4529 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
    float _2320 = (isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0))) * 0.3183098733425140380859375;
    float _2322 = (isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0))) * 0.3183098733425140380859375;
    float _2329 = ((cbLight._m0[_2278].x * _2284) * _2322) + (((cbLight._m0[_2288].x * _2250) * _2297) * _2320);
    float _2330 = ((_2284 * cbLight._m0[_2278].y) * _2322) + (((cbLight._m0[_2288].y * _2252) * _2297) * _2320);
    float _2331 = ((_2284 * cbLight._m0[_2278].z) * _2322) + (((cbLight._m0[_2288].z * _2254) * _2297) * _2320);
    uvec4 _2335 = floatBitsToUint(cbLight._m0[_2261 + 12u]);
    bool _2337 = _2335.x == 0u;
    float _2439;
    float _2441;
    float _2443;
    if (_2337)
    {
        _2439 = _2329;
        _2441 = _2330;
        _2443 = _2331;
    }
    else
    {
        uint _2447 = _2261 + 6u;
        float _2463 = (dot(vec3(cbLight._m0[_2261 + 2u].xyz), vec3(_794, _795, _796)) * 0.5) + 0.5;
        float _2464 = _2463 * _2463;
        float _4540 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
        float _2465 = isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0));
        float _2466 = isnan(1.0) ? _2276 : (isnan(_2276) ? 1.0 : min(_2276, 1.0));
        _2439 = (((cbLight._m0[_2447].x * 0.3183098733425140380859375) * _2465) * _2466) + _2329;
        _2441 = (((cbLight._m0[_2447].y * 0.3183098733425140380859375) * _2465) * _2466) + _2330;
        _2443 = (((cbLight._m0[_2447].z * 0.3183098733425140380859375) * _2465) * _2466) + _2331;
    }
    bool _2446 = _2335.y == 0u;
    float _2501;
    float _2503;
    float _2505;
    if (_2446)
    {
        _2501 = _2439;
        _2503 = _2441;
        _2505 = _2443;
    }
    else
    {
        uint _2674 = _2261 + 7u;
        float _2690 = (dot(vec3(cbLight._m0[_2261 + 3u].xyz), vec3(_794, _795, _796)) * 0.5) + 0.5;
        float _2691 = _2690 * _2690;
        float _4556 = isnan(0.0) ? _2691 : (isnan(_2691) ? 0.0 : max(_2691, 0.0));
        float _2692 = isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0));
        float _2693 = isnan(1.0) ? _2277 : (isnan(_2277) ? 1.0 : min(_2277, 1.0));
        _2501 = (((cbLight._m0[_2674].x * 0.3183098733425140380859375) * _2692) * _2693) + _2439;
        _2503 = (((cbLight._m0[_2674].y * 0.3183098733425140380859375) * _2692) * _2693) + _2441;
        _2505 = (((cbLight._m0[_2674].z * 0.3183098733425140380859375) * _2692) * _2693) + _2443;
    }
    uint _2508 = _2261 + 8u;
    float _2521 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2261].w)) * _797) * 0.949999988079071044921875);
    float _2522 = _2521 * _2521;
    float _2523 = cbLight._m0[_2261].x + _874;
    float _2524 = cbLight._m0[_2261].y + _875;
    float _2525 = cbLight._m0[_2261].z + _876;
    float _2529 = inversesqrt(dot(vec3(_2523, _2524, _2525), vec3(_2523, _2524, _2525)));
    float _2530 = _2529 * _2523;
    float _2531 = _2529 * _2524;
    float _2532 = _2529 * _2525;
    float _2533 = dot(vec3(_794, _795, _796), vec3(cbLight._m0[_2261].xyz));
    float _4572 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
    float _2536 = isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0));
    float _4583 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
    float _2537 = isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0));
    float _2538 = dot(vec3(_794, _795, _796), vec3(_2530, _2531, _2532));
    float _4594 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0));
    float _2541 = isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0));
    float _2542 = dot(vec3(cbLight._m0[_2261].xyz), vec3(_2530, _2531, _2532));
    float _4605 = isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : max(_2542, 0.0));
    float _2546 = _2522 * _2522;
    float _2550 = ((_2541 * _2541) * (_2546 + (-1.0))) + 1.0;
    float _2558 = exp2(log2(1.0 - (isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0)))) * 5.0);
    float _2559 = 0.959999978542327880859375 - _941;
    float _2561 = 0.959999978542327880859375 - _942;
    float _2562 = 0.959999978542327880859375 - _943;
    float _2569 = 1.0 - _2522;
    float _2580 = (0.5 / (((_2537 * ((_2536 * _2569) + _2522)) + 9.9999999392252902907785028219223e-09) + (((_2537 * _2569) + _2522) * _2536))) * _2536;
    float _4616 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0));
    float _2582 = (isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0))) * (_2546 / ((_2550 * _2550) * 3.141590118408203125));
    uint _2596 = _2261 + 9u;
    float _2607 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2301].w)) * _797) * 0.949999988079071044921875);
    float _2608 = _2607 * _2607;
    float _2609 = cbLight._m0[_2301].x + _874;
    float _2610 = cbLight._m0[_2301].y + _875;
    float _2611 = cbLight._m0[_2301].z + _876;
    float _2615 = inversesqrt(dot(vec3(_2609, _2610, _2611), vec3(_2609, _2610, _2611)));
    float _2616 = _2615 * _2609;
    float _2617 = _2615 * _2610;
    float _2618 = _2615 * _2611;
    float _2619 = dot(vec3(_794, _795, _796), vec3(cbLight._m0[_2301].xyz));
    float _4627 = isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : max(_2619, 0.0));
    float _2622 = isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0));
    float _2623 = dot(vec3(_794, _795, _796), vec3(_2616, _2617, _2618));
    float _4638 = isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0));
    float _2626 = isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0));
    float _2627 = dot(vec3(cbLight._m0[_2301].xyz), vec3(_2616, _2617, _2618));
    float _4649 = isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : max(_2627, 0.0));
    float _2631 = _2608 * _2608;
    float _2635 = ((_2626 * _2626) * (_2631 + (-1.0))) + 1.0;
    float _2642 = exp2(log2(1.0 - (isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0)))) * 5.0);
    float _2649 = 1.0 - _2608;
    float _2659 = (0.5 / (((_2537 * ((_2622 * _2649) + _2608)) + 9.9999999392252902907785028219223e-09) + (((_2537 * _2649) + _2608) * _2622))) * _2622;
    float _4660 = isnan(0.0) ? _2659 : (isnan(_2659) ? 0.0 : max(_2659, 0.0));
    float _2661 = (isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0))) * (_2631 / ((_2635 * _2635) * 3.141590118408203125));
    float _2671 = (((((_2642 * _2559) + _944) * cbLight._m0[_2596].x) * _2661) * _2284) + ((((cbLight._m0[_2508].x * _2250) * ((_2558 * _2559) + _944)) * _2582) * _2297);
    float _2672 = (((((_2642 * _2561) + _946) * cbLight._m0[_2596].y) * _2661) * _2284) + ((((cbLight._m0[_2508].y * _2252) * ((_2558 * _2561) + _946)) * _2582) * _2297);
    float _2673 = (((((_2642 * _2562) + _947) * cbLight._m0[_2596].z) * _2661) * _2284) + ((((cbLight._m0[_2508].z * _2254) * ((_2558 * _2562) + _947)) * _2582) * _2297);
    float _2729;
    float _2731;
    float _2733;
    if (_2337)
    {
        _2729 = _2671;
        _2731 = _2672;
        _2733 = _2673;
    }
    else
    {
        uint _2735 = _2261 + 2u;
        uint _2739 = _2261 + 10u;
        float _2753 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2735].w)) * _797) * 0.949999988079071044921875);
        float _2754 = _2753 * _2753;
        float _2755 = cbLight._m0[_2735].x + _874;
        float _2756 = cbLight._m0[_2735].y + _875;
        float _2757 = cbLight._m0[_2735].z + _876;
        float _2761 = inversesqrt(dot(vec3(_2755, _2756, _2757), vec3(_2755, _2756, _2757)));
        float _2762 = _2761 * _2755;
        float _2763 = _2761 * _2756;
        float _2764 = _2761 * _2757;
        float _2765 = dot(vec3(_794, _795, _796), vec3(cbLight._m0[_2735].xyz));
        float _4671 = isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : max(_2765, 0.0));
        float _2768 = isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0));
        float _2769 = dot(vec3(_794, _795, _796), vec3(_2762, _2763, _2764));
        float _4682 = isnan(0.0) ? _2769 : (isnan(_2769) ? 0.0 : max(_2769, 0.0));
        float _2772 = isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0));
        float _2773 = dot(vec3(cbLight._m0[_2735].xyz), vec3(_2762, _2763, _2764));
        float _4693 = isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : max(_2773, 0.0));
        float _2777 = _2754 * _2754;
        float _2781 = ((_2772 * _2772) * (_2777 + (-1.0))) + 1.0;
        float _2788 = exp2(log2(1.0 - (isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0)))) * 5.0);
        float _2795 = 1.0 - _2754;
        float _2805 = (0.5 / (((_2537 * ((_2768 * _2795) + _2754)) + 9.9999999392252902907785028219223e-09) + (((_2537 * _2795) + _2754) * _2768))) * _2768;
        float _4704 = isnan(0.0) ? _2805 : (isnan(_2805) ? 0.0 : max(_2805, 0.0));
        float _2807 = (isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0))) * (_2777 / ((_2781 * _2781) * 3.141590118408203125));
        float _2808 = isnan(1.0) ? _2276 : (isnan(_2276) ? 1.0 : min(_2276, 1.0));
        _2729 = (((((_2788 * _2559) + _944) * cbLight._m0[_2739].x) * _2807) * _2808) + _2671;
        _2731 = (((((_2788 * _2561) + _946) * cbLight._m0[_2739].y) * _2807) * _2808) + _2672;
        _2733 = (((((_2788 * _2562) + _947) * cbLight._m0[_2739].z) * _2807) * _2808) + _2673;
    }
    float _2839;
    float _2841;
    float _2843;
    if (_2446)
    {
        _2839 = _2729;
        _2841 = _2731;
        _2843 = _2733;
    }
    else
    {
        uint _2850 = _2261 + 3u;
        uint _2854 = _2261 + 11u;
        float _2868 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2850].w)) * _797) * 0.949999988079071044921875);
        float _2869 = _2868 * _2868;
        float _2870 = cbLight._m0[_2850].x + _874;
        float _2871 = cbLight._m0[_2850].y + _875;
        float _2872 = cbLight._m0[_2850].z + _876;
        float _2876 = inversesqrt(dot(vec3(_2870, _2871, _2872), vec3(_2870, _2871, _2872)));
        float _2877 = _2876 * _2870;
        float _2878 = _2876 * _2871;
        float _2879 = _2876 * _2872;
        float _2880 = dot(vec3(_794, _795, _796), vec3(cbLight._m0[_2850].xyz));
        float _4720 = isnan(0.0) ? _2880 : (isnan(_2880) ? 0.0 : max(_2880, 0.0));
        float _2883 = isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0));
        float _2884 = dot(vec3(_794, _795, _796), vec3(_2877, _2878, _2879));
        float _4731 = isnan(0.0) ? _2884 : (isnan(_2884) ? 0.0 : max(_2884, 0.0));
        float _2887 = isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0));
        float _2888 = dot(vec3(cbLight._m0[_2850].xyz), vec3(_2877, _2878, _2879));
        float _4742 = isnan(0.0) ? _2888 : (isnan(_2888) ? 0.0 : max(_2888, 0.0));
        float _2892 = _2869 * _2869;
        float _2896 = ((_2887 * _2887) * (_2892 + (-1.0))) + 1.0;
        float _2903 = exp2(log2(1.0 - (isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0)))) * 5.0);
        float _2910 = 1.0 - _2869;
        float _2920 = (0.5 / (((_2537 * ((_2883 * _2910) + _2869)) + 9.9999999392252902907785028219223e-09) + (((_2537 * _2910) + _2869) * _2883))) * _2883;
        float _4753 = isnan(0.0) ? _2920 : (isnan(_2920) ? 0.0 : max(_2920, 0.0));
        float _2922 = (isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0))) * (_2892 / ((_2896 * _2896) * 3.141590118408203125));
        float _2923 = isnan(1.0) ? _2277 : (isnan(_2277) ? 1.0 : min(_2277, 1.0));
        _2839 = (((((_2903 * _2559) + _944) * cbLight._m0[_2854].x) * _2922) * _2923) + _2729;
        _2841 = (((((_2903 * _2561) + _946) * cbLight._m0[_2854].y) * _2922) * _2923) + _2731;
        _2843 = (((((_2903 * _2562) + _947) * cbLight._m0[_2854].z) * _2922) * _2923) + _2733;
    }
    float _2989;
    float _2991;
    float _2993;
    float _2995;
    float _2997;
    float _2999;
    if (_2259.y == 0u)
    {
        uvec4 _2944 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2945 = _2944.x;
        uint _2956 = uint((float(_2944.y) * floor(float(uint(cbSceneParam._m0[85u].y * _883) / _2945))) + floor(float(uint(cbSceneParam._m0[85u].x * _882) / _2945)));
        float _2966 = (log2(_2037 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2967 = isnan(0.0) ? _2966 : (isnan(_2966) ? 0.0 : max(_2966, 0.0));
        uint _2970 = uint(isnan(14.0) ? _2967 : (isnan(_2967) ? 14.0 : min(_2967, 14.0)));
        uvec4 _2975 = texelFetch(g_lightClusterGridBuffer, int(((_2970 << 2u) + (_2956 << 6u)) >> 2u));
        uint _2976 = _2975.x;
        uint _2977 = _2944.z;
        float _3056;
        float _3058;
        float _3060;
        float _3062;
        float _3064;
        float _3066;
        if (((((1u << ((_2977 >> 4u) & 15u)) + 4294967295u) & _2976) == 0u) || ((_2977 & 240u) == 0u))
        {
            _3056 = 0.0;
            _3058 = 0.0;
            _3060 = 0.0;
            _3062 = 0.0;
            _3064 = 0.0;
            _3066 = 0.0;
        }
        else
        {
            float _3057;
            float _3059;
            float _3061;
            float _3063;
            float _3065;
            float _3067;
            float _3201 = 0.0;
            float _3202 = 0.0;
            float _3203 = 0.0;
            float _3204 = 0.0;
            float _3205 = 0.0;
            float _3206 = 0.0;
            uint _3207 = 0u;
            uint _3216;
            bool _3217;
            for (;;)
            {
                _3216 = texelFetch(g_lightClassification, int((((_2970 << 5u) + (_2956 << 9u)) + (_3207 << 2u)) >> 2u)).x;
                _3217 = _3216 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3217)
                {
                    frontier_phi_66_pred = _3206;
                    frontier_phi_66_pred_1 = _3205;
                    frontier_phi_66_pred_2 = _3204;
                    frontier_phi_66_pred_3 = _3203;
                    frontier_phi_66_pred_4 = _3202;
                    frontier_phi_66_pred_5 = _3201;
                }
                else
                {
                    float _3325;
                    float _3326;
                    float _3327;
                    float _3328;
                    float _3329;
                    float _3330;
                    uint _3331;
                    _3325 = _3201;
                    _3326 = _3202;
                    _3327 = _3203;
                    _3328 = _3204;
                    _3329 = _3205;
                    _3330 = _3206;
                    _3331 = _3216;
                    float _3257;
                    float _3258;
                    float _3259;
                    float _3260;
                    float _3261;
                    float _3262;
                    for (;;)
                    {
                        uint _3335 = uint(findLSB(_3331)) + (_3207 << 5u);
                        uint _3332 = (_3331 + 4294967295u) & _3331;
                        uint _3337 = _3335 * 48u;
                        vec4 _3351 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3337)).x, texelFetch(g_PointLightRenderingBuffer, int(_3337 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3337 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3337 + 3u)).x));
                        uint _3357 = (_3335 * 48u) + 4u;
                        vec4 _3370 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3357)).x, texelFetch(g_PointLightRenderingBuffer, int(_3357 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3357 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3357 + 3u)).x));
                        uint _3376 = (_3335 * 48u) + 8u;
                        vec3 _3387 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3376)).x, texelFetch(g_PointLightRenderingBuffer, int(_3376 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3376 + 2u)).x));
                        float _3391 = _3351.x - _2035;
                        float _3392 = _3351.y - _2036;
                        float _3393 = _3351.z - _2037;
                        float _3394 = dot(vec3(_3391, _3392, _3393), vec3(_3391, _3392, _3393));
                        float _3397 = inversesqrt(_3394);
                        float _3398 = _3397 * _3391;
                        float _3399 = _3397 * _3392;
                        float _3400 = _3397 * _3393;
                        float _3401 = dot(vec3(_901, _904, _907), vec3(_3398, _3399, _3400));
                        float _3406 = 1.0 - (_3394 * _3351.w);
                        float _4779 = isnan(0.0) ? _3406 : (isnan(_3406) ? 0.0 : max(_3406, 0.0));
                        float _3407 = isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0));
                        float _3408 = sqrt(_3394) * _3370.w;
                        float _3411 = 1.39999997615814208984375 / (_3408 + 1.39999997615814208984375);
                        float _3412 = _3411 * _3411;
                        float _3415 = ((1.0 - _3412) * _3401) + _3412;
                        float _3418 = _3408 * _3408;
                        float _3422 = ((isnan(0.0) ? _3415 : (isnan(_3415) ? 0.0 : max(_3415, 0.0))) * _3407) / ((_3418 * 0.699999988079071044921875) + 1.0);
                        float _3426 = (-0.0) - _2035;
                        float _3427 = (-0.0) - _2036;
                        float _3428 = (-0.0) - _2037;
                        float _3432 = inversesqrt(dot(vec3(_3426, _3427, _3428), vec3(_3426, _3427, _3428)));
                        float _3433 = _3432 * _3426;
                        float _3434 = _3432 * _3427;
                        float _3435 = _3432 * _3428;
                        float _3442 = exp2(log2(1.0 / ((_3418 * 3.5) + 5.0)) * 0.25);
                        float _3443 = 1.0 - _976;
                        float _3450 = sqrt(1.0 - ((1.0 - (_3443 * _3443)) * (1.0 - (_3442 * _3442))));
                        float _3451 = _3450 * _3450;
                        float _3452 = _3451 * _3451;
                        float _3453 = _3433 + _3398;
                        float _3454 = _3434 + _3399;
                        float _3455 = _3435 + _3400;
                        float _3459 = inversesqrt(dot(vec3(_3453, _3454, _3455), vec3(_3453, _3454, _3455)));
                        float _3463 = dot(vec3(_901, _904, _907), vec3(_3433, _3434, _3435));
                        float _4795 = isnan(0.0) ? _3463 : (isnan(_3463) ? 0.0 : max(_3463, 0.0));
                        float _3466 = isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0));
                        float _3467 = dot(vec3(_901, _904, _907), vec3(_3459 * _3453, _3459 * _3454, _3459 * _3455));
                        float _4806 = isnan(0.0) ? _3467 : (isnan(_3467) ? 0.0 : max(_3467, 0.0));
                        float _3470 = isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0));
                        float _3474 = ((_3470 * _3470) * (_3452 + (-1.0))) + 1.0;
                        float _3475 = _3411 * _3451;
                        float _3476 = _3475 * _3475;
                        float _3479 = ((1.0 - _3476) * _3401) + _3476;
                        float _4817 = isnan(0.0) ? _3479 : (isnan(_3479) ? 0.0 : max(_3479, 0.0));
                        float _3480 = isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0));
                        float _3481 = 1.0 - _3451;
                        float _3491 = (0.5 / (((_3480 * ((_3466 * _3481) + _3451)) + 9.9999999392252902907785028219223e-09) + (((_3480 * _3481) + _3451) * _3466))) * _3480;
                        float _4828 = isnan(0.0) ? _3491 : (isnan(_3491) ? 0.0 : max(_3491, 0.0));
                        float _3502 = (((_3452 * 3.1415927410125732421875) * (isnan(1.0) ? _4828 : (isnan(_4828) ? 1.0 : min(_4828, 1.0)))) / ((_3474 * _3474) * ((_3418 * 2.1991131305694580078125) + 3.141590118408203125))) * _3407;
                        _3260 = (_3422 * _3370.x) + _3328;
                        _3261 = (_3422 * _3370.y) + _3329;
                        _3262 = (_3422 * _3370.z) + _3330;
                        _3257 = (_3502 * _3387.x) + _3325;
                        _3258 = (_3502 * _3387.y) + _3326;
                        _3259 = (_3502 * _3387.z) + _3327;
                        if (_3332 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3325 = _3257;
                            _3326 = _3258;
                            _3327 = _3259;
                            _3328 = _3260;
                            _3329 = _3261;
                            _3330 = _3262;
                            _3331 = _3332;
                        }
                    }
                    frontier_phi_66_pred = _3262;
                    frontier_phi_66_pred_1 = _3261;
                    frontier_phi_66_pred_2 = _3260;
                    frontier_phi_66_pred_3 = _3259;
                    frontier_phi_66_pred_4 = _3258;
                    frontier_phi_66_pred_5 = _3257;
                }
                _3067 = frontier_phi_66_pred;
                _3065 = frontier_phi_66_pred_1;
                _3063 = frontier_phi_66_pred_2;
                _3061 = frontier_phi_66_pred_3;
                _3059 = frontier_phi_66_pred_4;
                _3057 = frontier_phi_66_pred_5;
                uint _3208 = _3207 + 1u;
                if (_3208 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3201 = _3057;
                    _3202 = _3059;
                    _3203 = _3061;
                    _3204 = _3063;
                    _3205 = _3065;
                    _3206 = _3067;
                    _3207 = _3208;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3056 = _3057;
            _3058 = _3059;
            _3060 = _3061;
            _3062 = _3063;
            _3064 = _3065;
            _3066 = _3067;
        }
        uvec4 _3070 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3071 = _3070.z;
        uint _3073 = (_3071 >> 8u) & 15u;
        float _3169;
        float _3171;
        float _3173;
        float _3175;
        float _3177;
        float _3179;
        if (((4294967295u << _3073) & _2976) == 0u)
        {
            _3169 = _3056;
            _3171 = _3058;
            _3173 = _3060;
            _3175 = _3062;
            _3177 = _3064;
            _3179 = _3066;
        }
        else
        {
            float _3194 = inversesqrt(dot(vec3(_2035, _2036, _2037), vec3(_2035, _2036, _2037)));
            float _3195 = _3194 * _2035;
            float _3196 = _3194 * _2036;
            float _3197 = _3194 * _2037;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3073 < ((_3071 >> 12u) & 15u))
            {
                float _3170;
                float _3172;
                float _3174;
                float _3176;
                float _3178;
                float _3180;
                float _3308 = _3056;
                float _3309 = _3058;
                float _3310 = _3060;
                float _3311 = _3062;
                float _3312 = _3064;
                float _3313 = _3066;
                uint _3314 = _3073;
                uint _3323;
                bool _3324;
                for (;;)
                {
                    _3323 = texelFetch(g_lightClassification, int((((_2970 << 5u) + (_2956 << 9u)) + (_3314 << 2u)) >> 2u)).x;
                    _3324 = _3323 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3324)
                    {
                        frontier_phi_72_pred = _3313;
                        frontier_phi_72_pred_1 = _3312;
                        frontier_phi_72_pred_2 = _3311;
                        frontier_phi_72_pred_3 = _3310;
                        frontier_phi_72_pred_4 = _3309;
                        frontier_phi_72_pred_5 = _3308;
                    }
                    else
                    {
                        float _3507;
                        float _3508;
                        float _3509;
                        float _3510;
                        float _3511;
                        float _3512;
                        float _3800;
                        float _3801;
                        float _3802;
                        float _3803;
                        float _3804;
                        float _3805;
                        float _3520 = _3308;
                        float _3521 = _3309;
                        float _3522 = _3310;
                        float _3523 = _3311;
                        float _3524 = _3312;
                        float _3525 = _3313;
                        uint _3526 = _3323;
                        uint _3527;
                        vec4 _3552;
                        float _3553;
                        vec4 _3568;
                        vec3 _3580;
                        vec4 _3595;
                        vec4 _3610;
                        float _3656;
                        bool _3657;
                        for (;;)
                        {
                            uint _3537 = ((_3314 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3526));
                            _3527 = (_3526 + 4294967295u) & _3526;
                            uint _3539 = _3537 * 40u;
                            _3552 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3539)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3539 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3539 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3539 + 3u)).x));
                            _3553 = _3552.w;
                            uint _3555 = (_3537 * 40u) + 4u;
                            _3568 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3555)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3555 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3555 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3555 + 3u)).x));
                            uint _3570 = (_3537 * 40u) + 8u;
                            _3580 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3570)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3570 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3570 + 2u)).x));
                            uint _3582 = (_3537 * 40u) + 16u;
                            _3595 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3582)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3582 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3582 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3582 + 3u)).x));
                            uint _3597 = (_3537 * 40u) + 20u;
                            _3610 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3597)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3597 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3597 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3597 + 3u)).x));
                            uint _3612 = (_3537 * 40u) + 24u;
                            vec4 _3625 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3612)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3612 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3612 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3612 + 3u)).x));
                            uint _3631 = (_3537 * 40u) + 28u;
                            vec4 _3644 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3631)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3631 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3631 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3631 + 3u)).x));
                            _3656 = fma(_2037, _3644.z, fma(_2036, _3644.y, _3644.x * _2035)) + _3644.w;
                            _3657 = !((fma(_2037, _3625.z, fma(_2036, _3625.y, _3625.x * _2035)) + _3625.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3657)
                            {
                                float _3684 = _3552.x - _2035;
                                float _3685 = _3552.y - _2036;
                                float _3686 = _3552.z - _2037;
                                float _3687 = dot(vec3(_3684, _3685, _3686), vec3(_3684, _3685, _3686));
                                float _3690 = inversesqrt(_3687);
                                float _3691 = _3690 * _3684;
                                float _3692 = _3690 * _3685;
                                float _3693 = _3690 * _3686;
                                float _3697 = 1.0 - (_3687 / (_3553 * _3553));
                                float _4839 = isnan(0.0) ? _3697 : (isnan(_3697) ? 0.0 : max(_3697, 0.0));
                                float _3698 = isnan(1.0) ? _4839 : (isnan(_4839) ? 1.0 : min(_4839, 1.0));
                                float _3702 = sqrt(_3687) * _3568.w;
                                float _3704 = 1.39999997615814208984375 / (_3702 + 1.39999997615814208984375);
                                float _3705 = _3704 * _3704;
                                float _3708 = ((1.0 - _3705) * dot(vec3(_3691, _3692, _3693), vec3(_901, _904, _907))) + _3705;
                                float _3711 = _3702 * _3702;
                                float _3715 = (fma(_2037, _3595.z, fma(_2036, _3595.y, _3595.x * _2035)) + _3595.w) / _3656;
                                float _3716 = (fma(_2037, _3610.z, fma(_2036, _3610.y, _3610.x * _2035)) + _3610.w) / _3656;
                                float _3720 = 1.0 - dot(vec2(_3715, _3716), vec2(_3715, _3716));
                                float _4855 = isnan(0.0) ? _3720 : (isnan(_3720) ? 0.0 : max(_3720, 0.0));
                                float _3721 = isnan(1.0) ? _4855 : (isnan(_4855) ? 1.0 : min(_4855, 1.0));
                                float _3722 = _3721 * (((isnan(0.0) ? _3708 : (isnan(_3708) ? 0.0 : max(_3708, 0.0))) * _3698) / ((_3711 * 0.699999988079071044921875) + 1.0));
                                float _3734 = exp2(log2(1.0 / ((_3711 * 3.5) + 5.0)) * 0.25);
                                float _3735 = 1.0 - _976;
                                float _3742 = sqrt(1.0 - ((1.0 - (_3735 * _3735)) * (1.0 - (_3734 * _3734))));
                                float _3743 = _3742 * _3742;
                                float _3744 = _3743 * _3743;
                                float _3745 = _3691 - _3195;
                                float _3746 = _3692 - _3196;
                                float _3747 = _3693 - _3197;
                                float _3751 = inversesqrt(dot(vec3(_3745, _3746, _3747), vec3(_3745, _3746, _3747)));
                                float _3755 = dot(vec3(_901, _904, _907), vec3((-0.0) - _3195, (-0.0) - _3196, (-0.0) - _3197));
                                float _4866 = isnan(0.0) ? _3755 : (isnan(_3755) ? 0.0 : max(_3755, 0.0));
                                float _3758 = isnan(1.0) ? _4866 : (isnan(_4866) ? 1.0 : min(_4866, 1.0));
                                float _3759 = dot(vec3(_901, _904, _907), vec3(_3751 * _3745, _3751 * _3746, _3751 * _3747));
                                float _4877 = isnan(0.0) ? _3759 : (isnan(_3759) ? 0.0 : max(_3759, 0.0));
                                float _3762 = isnan(1.0) ? _4877 : (isnan(_4877) ? 1.0 : min(_4877, 1.0));
                                float _3766 = ((_3762 * _3762) * (_3744 + (-1.0))) + 1.0;
                                float _3767 = _3704 * _3743;
                                float _3768 = _3767 * _3767;
                                float _3774 = ((1.0 - _3768) * dot(vec3(_901, _904, _907), vec3(_3691, _3692, _3693))) + _3768;
                                float _4888 = isnan(0.0) ? _3774 : (isnan(_3774) ? 0.0 : max(_3774, 0.0));
                                float _3775 = isnan(1.0) ? _4888 : (isnan(_4888) ? 1.0 : min(_4888, 1.0));
                                float _3776 = 1.0 - _3743;
                                float _3786 = (0.5 / (((_3775 * ((_3758 * _3776) + _3743)) + 9.9999999392252902907785028219223e-09) + (((_3775 * _3776) + _3743) * _3758))) * _3775;
                                float _4899 = isnan(0.0) ? _3786 : (isnan(_3786) ? 0.0 : max(_3786, 0.0));
                                float _3796 = (_3721 * _3698) * (((_3744 * 3.1415927410125732421875) * (isnan(1.0) ? _4899 : (isnan(_4899) ? 1.0 : min(_4899, 1.0)))) / ((_3766 * _3766) * ((_3711 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3722 * _3568.y;
                                frontier_phi_78_pred_1 = _3722 * _3568.x;
                                frontier_phi_78_pred_2 = _3796 * _3580.z;
                                frontier_phi_78_pred_3 = _3796 * _3580.y;
                                frontier_phi_78_pred_4 = _3796 * _3580.x;
                                frontier_phi_78_pred_5 = _3722 * _3568.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3804 = frontier_phi_78_pred;
                            _3803 = frontier_phi_78_pred_1;
                            _3802 = frontier_phi_78_pred_2;
                            _3801 = frontier_phi_78_pred_3;
                            _3800 = frontier_phi_78_pred_4;
                            _3805 = frontier_phi_78_pred_5;
                            _3510 = _3803 + _3523;
                            _3511 = _3804 + _3524;
                            _3512 = _3805 + _3525;
                            _3507 = _3800 + _3520;
                            _3508 = _3801 + _3521;
                            _3509 = _3802 + _3522;
                            if (_3527 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3520 = _3507;
                                _3521 = _3508;
                                _3522 = _3509;
                                _3523 = _3510;
                                _3524 = _3511;
                                _3525 = _3512;
                                _3526 = _3527;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3512;
                        frontier_phi_72_pred_1 = _3511;
                        frontier_phi_72_pred_2 = _3510;
                        frontier_phi_72_pred_3 = _3509;
                        frontier_phi_72_pred_4 = _3508;
                        frontier_phi_72_pred_5 = _3507;
                    }
                    _3180 = frontier_phi_72_pred;
                    _3178 = frontier_phi_72_pred_1;
                    _3176 = frontier_phi_72_pred_2;
                    _3174 = frontier_phi_72_pred_3;
                    _3172 = frontier_phi_72_pred_4;
                    _3170 = frontier_phi_72_pred_5;
                    uint _3315 = _3314 + 1u;
                    if (_3315 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3308 = _3170;
                        _3309 = _3172;
                        _3310 = _3174;
                        _3311 = _3176;
                        _3312 = _3178;
                        _3313 = _3180;
                        _3314 = _3315;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3180;
                frontier_phi_60_61_ladder_1 = _3178;
                frontier_phi_60_61_ladder_2 = _3174;
                frontier_phi_60_61_ladder_3 = _3172;
                frontier_phi_60_61_ladder_4 = _3170;
                frontier_phi_60_61_ladder_5 = _3176;
            }
            else
            {
                frontier_phi_60_61_ladder = _3066;
                frontier_phi_60_61_ladder_1 = _3064;
                frontier_phi_60_61_ladder_2 = _3060;
                frontier_phi_60_61_ladder_3 = _3058;
                frontier_phi_60_61_ladder_4 = _3056;
                frontier_phi_60_61_ladder_5 = _3062;
            }
            _3169 = frontier_phi_60_61_ladder_4;
            _3171 = frontier_phi_60_61_ladder_3;
            _3173 = frontier_phi_60_61_ladder_2;
            _3175 = frontier_phi_60_61_ladder_5;
            _3177 = frontier_phi_60_61_ladder_1;
            _3179 = frontier_phi_60_61_ladder;
        }
        float _3184 = isnan(1.0) ? _960 : (isnan(_960) ? 1.0 : min(_960, 1.0));
        _2989 = (_3184 * _3175) + _2501;
        _2991 = (_3184 * _3177) + _2503;
        _2993 = (_3184 * _3179) + _2505;
        _2995 = ((_3169 * _944) * _3184) + _2839;
        _2997 = ((_3171 * _946) * _3184) + _2841;
        _2999 = ((_3173 * _947) * _3184) + _2843;
    }
    else
    {
        _2989 = _2501;
        _2991 = _2503;
        _2993 = _2505;
        _2995 = _2839;
        _2997 = _2841;
        _2999 = _2843;
    }
    float _4915 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
    float _4926 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
    float _4937 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
    uint _3019 = _252 + 6u;
    float _3027 = _882 / cbSceneParam._m0[86u].x;
    float _3028 = _883 / cbSceneParam._m0[86u].y;
    vec4 _3042 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3027, _3028, (log2((isnan(cbSceneParam._m0[77u].w) ? _816 : (isnan(_816) ? cbSceneParam._m0[77u].w : min(_816, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3044 = _3042.x;
    float _3045 = _3042.y;
    float _3046 = _3042.z;
    float _3047 = _3042.w;
    float _3119;
    float _3121;
    float _3123;
    float _3125;
    if (_816 > cbSceneParam._m0[78u].w)
    {
        float _3081 = isnan(_816) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _816 : min(cbSceneParam._m0[80u].w, _816));
        float _3082 = _3081 / _816;
        float _3093 = _3082 * _867;
        float _3094 = _868 * _3082;
        float _3095 = (-0.0) - _3094;
        float _3097 = _3082 * _869;
        float _3099 = (cbSceneParam._m0[77u].w * _3095) / _3081;
        float _3100 = _3099 + cbSceneParam._m0[79u].w;
        float _3101 = cbSceneParam._m0[79u].w - _3094;
        float _3107 = sqrt(((_3093 * _3093) + (_3094 * _3094)) + (_3097 * _3097));
        float _3110 = (1.0 - (cbSceneParam._m0[77u].w / _3081)) * _3107;
        float _3115 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3117 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3270;
        if (abs((_3095 - _3099) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3270 = ((((_3100 > 0.0) ? exp2(_3115 * _3100) : (2.0 - exp2(_3117 * _3100))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3110;
        }
        else
        {
            float _3230 = 1.0 / cbSceneParam._m0[80u].x;
            float _3231 = isnan(_3101) ? _3100 : (isnan(_3100) ? _3101 : max(_3100, _3101));
            float _3232 = isnan(_3101) ? _3100 : (isnan(_3100) ? _3101 : min(_3100, _3101));
            float _3241 = isnan(0.0) ? _3231 : (isnan(_3231) ? 0.0 : min(_3231, 0.0));
            float _3242 = isnan(0.0) ? _3232 : (isnan(_3232) ? 0.0 : min(_3232, 0.0));
            _3270 = ((abs(_3107 / _3095) * cbSceneParam._m0[80u].y) * ((((_3241 - _3242) * 2.0) - ((exp2(_3115 * (isnan(0.0) ? _3231 : (isnan(_3231) ? 0.0 : max(_3231, 0.0)))) - exp2(_3115 * (isnan(0.0) ? _3232 : (isnan(_3232) ? 0.0 : max(_3232, 0.0))))) * _3230)) - ((exp2(_3117 * _3241) - exp2(_3117 * _3242)) * _3230))) + (_3110 * cbSceneParam._m0[80u].z);
        }
        vec4 _3272 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3027, _3028, 1.0), 0.0);
        float _3281 = exp2((_3270 * (-1.44269502162933349609375)) * (1.0 - _3272.w));
        float _3282 = log2(_3281);
        float _3298 = log2(_3047);
        _3119 = (exp2(_3298 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3282 * cbSceneParam._m0[78u].x)) * _3272.x) / cbSceneParam._m0[78u].x)) + _3044;
        _3121 = (exp2(_3298 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3282 * cbSceneParam._m0[78u].y)) * _3272.y) / cbSceneParam._m0[78u].y)) + _3045;
        _3123 = (exp2(_3298 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3282 * cbSceneParam._m0[78u].z)) * _3272.z) / cbSceneParam._m0[78u].z)) + _3046;
        _3125 = _3281 * _3047;
    }
    else
    {
        _3119 = _3044;
        _3121 = _3045;
        _3123 = _3046;
        _3125 = _3047;
    }
    float _3137 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3138 = _3137 == 3.0;
    float _3139 = log2(_3125);
    float _3146 = exp2(_3139 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4915 : (isnan(_4915) ? 1.0 : min(_4915, 1.0))) * (_2989 + ((isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0))) * _960))) + ((_2995 + ((isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0))) * _1767)) * cbPerFrame._m0[3u].x));
    float _3147 = exp2(_3139 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4926 : (isnan(_4926) ? 1.0 : min(_4926, 1.0))) * (_2991 + ((isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0))) * _960))) + ((_2997 + ((isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0))) * _1767)) * cbPerFrame._m0[3u].x));
    float _3148 = exp2(_3139 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4937 : (isnan(_4937) ? 1.0 : min(_4937, 1.0))) * (_2993 + ((isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0))) * _960))) + ((_2999 + ((isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0))) * _1767)) * cbPerFrame._m0[3u].x));
    float _3157 = (_3137 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3157 * (_3138 ? _3146 : (_3146 + (cbSceneParam._m0[72u].w * _3119)));
    SV_Target.y = _3157 * (_3138 ? _3147 : (_3147 + (cbSceneParam._m0[72u].w * _3121)));
    SV_Target.z = _3157 * (_3138 ? _3148 : (_3148 + (cbSceneParam._m0[72u].w * _3123)));
    SV_Target.w = cbInstanceData._m0[_3019].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3019].w;
}


