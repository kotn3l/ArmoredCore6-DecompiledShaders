#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1273;
float _3678;
float _3679;
float _3680;
float _3681;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _216 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _217 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _218 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _224 = inversesqrt(dot(vec3(_216, _217, _218), vec3(_216, _217, _218)));
    float _225 = _224 * _216;
    float _226 = _224 * _217;
    float _227 = _224 * _218;
    float _231 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _232 = _231 * NORMAL.x;
    float _233 = _231 * NORMAL.y;
    float _234 = _231 * NORMAL.z;
    float _238 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _239 = _238 * TANGENT.x;
    float _240 = _238 * TANGENT.y;
    float _241 = _238 * TANGENT.z;
    uint _244 = uint(roundEven(NORMAL.w)) * 13u;
    uint _250 = _244 + 1u;
    uint _254 = _244 + 2u;
    float _263 = sqrt(((cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x) + (cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x)) + (cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x));
    float _264 = _263 * TEXCOORD.z;
    float _265 = _263 * TEXCOORD.w;
    vec4 _285 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _291 = _285.x * cbMtdParam._m0[11u].x;
    float _292 = _285.y * cbMtdParam._m0[11u].y;
    float _293 = _285.z * cbMtdParam._m0[11u].z;
    vec4 _312 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _264) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _265) + cbTextureTilingScale._m0[5u].w));
    vec4 _350 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _352 = _350.x;
    float _364 = dot(vec4(_352, _350.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _381 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_352 - _364) * cbMtdParam._m0[24u].y) + _364) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3690 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _382 = isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0));
    float _389 = (_382 * ((_312.x * cbMtdParam._m0[12u].x) - _291)) + _291;
    float _390 = (_382 * ((_312.y * cbMtdParam._m0[12u].y) - _292)) + _292;
    float _391 = (_382 * ((_312.z * cbMtdParam._m0[12u].z) - _293)) + _293;
    vec4 _409 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _264) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _265) + cbTextureTilingScale._m0[20u].w));
    vec4 _436 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _264) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _265) + cbTextureTilingScale._m0[4u].w));
    vec4 _453 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _455 = _453.x;
    float _456 = _453.y;
    float _457 = _453.z;
    float _466 = ((_436.z - _457) * _382) + _457;
    float _469 = ((((_436.x - _455) * _382) + _455) * 2.0) + (-1.0);
    float _470 = ((((_436.y - _456) * _382) + _456) * 2.0) + (-1.0);
    float _471 = dot(vec2(_469, _470), vec2(_469, _470));
    float _3701 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _476 = sqrt(1.0 - (isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0))));
    vec4 _496 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _508 = (_469 + ((((_409.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_496.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _509 = (_470 + ((((_409.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_496.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _512 = fma(_476, _232, fma(_509, _239, _508 * _225));
    float _515 = fma(_476, _233, fma(_509, _240, _508 * _226));
    float _518 = fma(_476, _234, fma(_509, _241, _508 * _227));
    float _522 = inversesqrt(dot(vec3(_512, _515, _518), vec3(_512, _515, _518)));
    vec4 _549 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _264) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _265) + cbTextureTilingScale._m0[11u].w));
    float _551 = _549.x;
    float _552 = 1.0 - _551;
    float _558 = (cbMtdParam._m0[19u].x + dot(vec4(_522 * _512, _522 * _515, _522 * _518, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_551 - _552) * cbMtdParam._m0[24u].z) + _552) * cbMtdParam._m0[21u].z);
    float _3712 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _559 = isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0));
    float _566 = (_559 * (cbMtdParam._m0[17u].x - _389)) + _389;
    float _567 = (_559 * (cbMtdParam._m0[17u].y - _390)) + _390;
    float _568 = (_559 * (cbMtdParam._m0[17u].z - _391)) + _391;
    vec4 _580 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _594 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _596 = _594.x;
    float _614 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _264) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _265) + cbTextureTilingScale._m0[9u].w)).x - _596) * _382) + _596;
    float _618 = ((_580.x - _614) * cbMtdParam._m0[19u].z) + _614;
    float _620 = _618 - (_618 * _559);
    float _625 = (((_409.z - _466) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _466;
    float _629 = ((_496.z - _625) * cbMtdParam._m0[19u].w) + _625;
    vec4 _642 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _264) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _265) + cbTextureTilingScale._m0[15u].w));
    float _649 = (_642.x * 2.0) + (-1.0);
    float _650 = (_642.y * 2.0) + (-1.0);
    float _651 = dot(vec2(_649, _650), vec2(_649, _650));
    float _3723 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _659 = ((_642.z - _629) * _559) + _629;
    float _669 = ((sqrt(1.0 - (isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0)))) - _476) * _559) + _476;
    float _672 = (((_649 - _508) * _559) + _508) + (cbMtdParam._m0[21u].x * _508);
    float _673 = (((_650 - _509) * _559) + _509) + (cbMtdParam._m0[21u].x * _509);
    float _678 = cbMtdParam._m0[22u].x + _496.w;
    float _681 = fma(_669, _232, fma(_673, _239, _672 * _225));
    float _684 = fma(_669, _233, fma(_673, _240, _672 * _226));
    float _687 = fma(_669, _234, fma(_673, _241, _672 * _227));
    float _691 = inversesqrt(dot(vec3(_681, _684, _687), vec3(_681, _684, _687)));
    float _692 = _691 * _681;
    float _693 = _691 * _684;
    float _694 = _691 * _687;
    float _3734 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _695 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
    float _3745 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
    float _3756 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _3767 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _3778 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _3789 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _700 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
    float _714 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _755 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _765 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _755);
    float _766 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _755);
    float _767 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _755);
    float _771 = inversesqrt(dot(vec3(_765, _766, _767), vec3(_765, _766, _767)));
    float _772 = _765 * _771;
    float _773 = _766 * _771;
    float _774 = _767 * _771;
    vec4 _779 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _781 = _779.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _953 = sqrt(((_765 * _765) + (_766 * _766)) + (_767 * _767));
        float _959 = (cbMatDynParam._m0[5u].x * _953) + cbMatDynParam._m0[5u].y;
        float _3800 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
        float _960 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
        float _964 = (cbMatDynParam._m0[5u].z * _953) + cbMatDynParam._m0[5u].w;
        float _3811 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0))) - _960)) + _960) < ((_781 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _792 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _793 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _811 = fma(_694, cbSceneParam._m0[5u].z, fma(_693, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _692));
    float _814 = fma(_694, cbSceneParam._m0[6u].z, fma(_693, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _692));
    float _817 = fma(_694, cbSceneParam._m0[7u].z, fma(_693, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _692));
    uint _830 = _244 + 9u;
    uint _831 = _830 + uint(cbMatDynParam._m0[0u].w);
    float _837 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0)))) * cbInstanceData._m0[_831].x;
    float _838 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0)))) * cbInstanceData._m0[_831].y;
    float _839 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0)))) * cbInstanceData._m0[_831].z;
    float _3822 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
    float _840 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
    float _3833 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
    float _841 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
    float _3844 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
    float _842 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
    float _843 = 1.0 - _700;
    float _844 = _840 * _843;
    float _845 = _841 * _843;
    float _846 = _842 * _843;
    float _851 = (_840 + (-0.039999999105930328369140625)) * _700;
    float _852 = (_841 + (-0.039999999105930328369140625)) * _700;
    float _853 = (_842 + (-0.039999999105930328369140625)) * _700;
    float _854 = _851 + 0.039999999105930328369140625;
    float _856 = _852 + 0.039999999105930328369140625;
    float _857 = _853 + 0.039999999105930328369140625;
    vec4 _866 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _792, cbSceneParam._m0[86u].y * _793));
    float _870 = ((isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0))) * TEXCOORD_5.w) * _866.x;
    float _871 = dot(vec3(_692, _693, _694), vec3(_772, _773, _774));
    float _874 = _871 * 2.0;
    float _878 = (_874 * _692) - _772;
    float _879 = (_874 * _693) - _773;
    float _880 = (_874 * _694) - _774;
    float _884 = abs(dot(vec3(_772, _773, _774), vec3(_692, _693, _694)));
    float _3855 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
    float _886 = sqrt(_695);
    float _899 = exp2((_886 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_886 * 3.0));
    float _905 = (1.0 - _899) * ((_886 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _906 = _899 * _886;
    float _934 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _938 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _942 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1272;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _997 = fma(_942, cbModelParam._m0[26u].z, fma(_938, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _934));
        float _1001 = fma(_942, cbModelParam._m0[27u].z, fma(_938, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _934));
        float _1005 = fma(_942, cbModelParam._m0[28u].z, fma(_938, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _934));
        float _1030 = _934 + _692;
        float _1031 = _938 + _693;
        float _1032 = _942 + _694;
        float _1042 = fma(_1032, cbModelParam._m0[26u].z, fma(_1031, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1030)) - _997;
        float _1043 = fma(_1032, cbModelParam._m0[27u].z, fma(_1031, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1030)) - _1001;
        float _1044 = fma(_1032, cbModelParam._m0[28u].z, fma(_1031, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1030)) - _1005;
        float _1048 = inversesqrt(dot(vec3(_1042, _1043, _1044), vec3(_1042, _1043, _1044)));
        float _1061 = ((_1048 * _1042) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_997 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1062 = ((_1048 * _1043) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1001 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1063 = ((_1048 * _1044) / cbModelParam._m0[34u].z) + ((((((_1005 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1066 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1061, _1062, _1063), 0.0);
        vec4 _1073 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1061, _1062, _1063), 0.0);
        vec4 _1080 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1061, _1062, _1063), 0.0);
        vec4 _1087 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1061, _1062, _1063), 0.0);
        float _1100 = exp2((_1066.w + (-0.5)) * 20.0) * 2.0;
        float _1101 = _1100 * (_1066.x + (-0.5));
        float _1102 = _1100 * (_1066.y + (-0.5));
        float _1103 = _1100 * (_1066.z + (-0.5));
        float _1110 = exp2((_1073.w + (-0.5)) * 20.0) * 2.0;
        float _1111 = _1110 * (_1073.x + (-0.5));
        float _1112 = _1110 * (_1073.y + (-0.5));
        float _1113 = _1110 * (_1073.z + (-0.5));
        float _1120 = exp2((_1080.w + (-0.5)) * 20.0) * 2.0;
        float _1121 = _1120 * (_1080.x + (-0.5));
        float _1122 = _1120 * (_1080.y + (-0.5));
        float _1123 = _1120 * (_1080.z + (-0.5));
        float _1130 = exp2((_1087.w + (-0.5)) * 20.0) * 2.0;
        float _1131 = _1130 * (_1087.x + (-0.5));
        float _1132 = _1130 * (_1087.y + (-0.5));
        float _1133 = _1130 * (_1087.z + (-0.5));
        float _1134 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1135 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1136 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1137 = _1101 * 0.5;
        float _1138 = _1111 * 0.5;
        float _1139 = _1121 * 0.5;
        float _1140 = dot(vec3(_1137, _1138, _1139), vec3(_1137, _1138, _1139));
        float _1145 = (_1140 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1140);
        float _1154 = (dot(vec3(_692, _693, _694), vec3(_1145 * _1137, _1145 * _1138, _1145 * _1139)) + 1.0) * 0.5;
        float _3881 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1164 = sqrt(((_1138 * _1138) + (_1137 * _1137)) + (_1139 * _1139)) / (_1134 + 9.9999997473787516355514526367188e-06);
        float _3892 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1165 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
        float _1166 = _1165 * 2.0;
        float _1170 = (1.0 - _1165) / (_1165 + 1.0);
        float _3903 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1171 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
        float _1180 = ((((1.0 - _1171) * (_1166 + 2.0)) * exp2(log2(isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0))) * (_1166 + 1.0))) + _1171) * _1134;
        float _1181 = _1102 * 0.5;
        float _1182 = _1112 * 0.5;
        float _1183 = _1122 * 0.5;
        float _1184 = dot(vec3(_1181, _1182, _1183), vec3(_1181, _1182, _1183));
        float _1189 = (_1184 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1184);
        float _1197 = (dot(vec3(_692, _693, _694), vec3(_1189 * _1181, _1189 * _1182, _1189 * _1183)) + 1.0) * 0.5;
        float _3914 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1206 = sqrt(((_1182 * _1182) + (_1181 * _1181)) + (_1183 * _1183)) / (_1135 + 9.9999997473787516355514526367188e-06);
        float _3925 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1207 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
        float _1208 = _1207 * 2.0;
        float _1212 = (1.0 - _1207) / (_1207 + 1.0);
        float _3936 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1213 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
        float _1222 = ((((1.0 - _1213) * (_1208 + 2.0)) * exp2(log2(isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0))) * (_1208 + 1.0))) + _1213) * _1135;
        float _1223 = _1103 * 0.5;
        float _1224 = _1113 * 0.5;
        float _1225 = _1123 * 0.5;
        float _1226 = dot(vec3(_1223, _1224, _1225), vec3(_1223, _1224, _1225));
        float _1231 = (_1226 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1226);
        float _1239 = (dot(vec3(_692, _693, _694), vec3(_1231 * _1223, _1231 * _1224, _1231 * _1225)) + 1.0) * 0.5;
        float _3947 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1248 = sqrt(((_1224 * _1224) + (_1223 * _1223)) + (_1225 * _1225)) / (_1136 + 9.9999997473787516355514526367188e-06);
        float _3958 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1249 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
        float _1250 = _1249 * 2.0;
        float _1254 = (1.0 - _1249) / (_1249 + 1.0);
        float _3969 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1255 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
        float _1264 = ((((1.0 - _1255) * (_1250 + 2.0)) * exp2(log2(isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0))) * (_1250 + 1.0))) + _1255) * _1136;
        _1272 = _1103;
        _1274 = _1102;
        _1275 = _1101;
        _1276 = _1113;
        _1277 = _1112;
        _1278 = _1111;
        _1279 = _1123;
        _1280 = _1122;
        _1281 = _1121;
        _1282 = _1136;
        _1283 = _1135;
        _1284 = _1134;
        _1285 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0)));
        _1286 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0)));
        _1287 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0)));
    }
    else
    {
        _1272 = _1273;
        _1274 = _1273;
        _1275 = _1273;
        _1276 = _1273;
        _1277 = _1273;
        _1278 = _1273;
        _1279 = _1273;
        _1280 = _1273;
        _1281 = _1273;
        _1282 = _1273;
        _1283 = _1273;
        _1284 = _1273;
        _1285 = 0.0;
        _1286 = 0.0;
        _1287 = 0.0;
    }
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1315 = fma(_942, cbModelParam._m0[30u].z, fma(_938, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _934));
        float _1319 = fma(_942, cbModelParam._m0[31u].z, fma(_938, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _934));
        float _1323 = fma(_942, cbModelParam._m0[32u].z, fma(_938, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _934));
        float _1346 = _934 + _692;
        float _1347 = _938 + _693;
        float _1348 = _942 + _694;
        float _1358 = fma(_1348, cbModelParam._m0[30u].z, fma(_1347, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1346)) - _1315;
        float _1359 = fma(_1348, cbModelParam._m0[31u].z, fma(_1347, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1346)) - _1319;
        float _1360 = fma(_1348, cbModelParam._m0[32u].z, fma(_1347, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1346)) - _1323;
        float _1364 = inversesqrt(dot(vec3(_1358, _1359, _1360), vec3(_1358, _1359, _1360)));
        float _1377 = ((_1364 * _1358) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1315 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1378 = ((_1364 * _1359) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1319 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1379 = ((_1364 * _1360) / cbModelParam._m0[35u].z) + ((((((_1323 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1381 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1377, _1378, _1379), 0.0);
        vec4 _1388 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1377, _1378, _1379), 0.0);
        vec4 _1395 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1377, _1378, _1379), 0.0);
        vec4 _1402 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1377, _1378, _1379), 0.0);
        float _1414 = exp2((_1381.w + (-0.5)) * 20.0) * 2.0;
        float _1415 = _1414 * (_1381.x + (-0.5));
        float _1416 = _1414 * (_1381.y + (-0.5));
        float _1417 = _1414 * (_1381.z + (-0.5));
        float _1424 = exp2((_1388.w + (-0.5)) * 20.0) * 2.0;
        float _1425 = _1424 * (_1388.x + (-0.5));
        float _1426 = _1424 * (_1388.y + (-0.5));
        float _1427 = _1424 * (_1388.z + (-0.5));
        float _1434 = exp2((_1395.w + (-0.5)) * 20.0) * 2.0;
        float _1435 = _1434 * (_1395.x + (-0.5));
        float _1436 = _1434 * (_1395.y + (-0.5));
        float _1437 = _1434 * (_1395.z + (-0.5));
        float _1444 = exp2((_1402.w + (-0.5)) * 20.0) * 2.0;
        float _1445 = _1444 * (_1402.x + (-0.5));
        float _1446 = _1444 * (_1402.y + (-0.5));
        float _1447 = _1444 * (_1402.z + (-0.5));
        float _1448 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1449 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1450 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1451 = _1415 * 0.5;
        float _1452 = _1425 * 0.5;
        float _1453 = _1435 * 0.5;
        float _1454 = dot(vec3(_1451, _1452, _1453), vec3(_1451, _1452, _1453));
        float _1459 = (_1454 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1454);
        float _1467 = (dot(vec3(_692, _693, _694), vec3(_1459 * _1451, _1459 * _1452, _1459 * _1453)) + 1.0) * 0.5;
        float _4010 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1476 = sqrt(((_1452 * _1452) + (_1451 * _1451)) + (_1453 * _1453)) / (_1448 + 9.9999997473787516355514526367188e-06);
        float _4021 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1477 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
        float _1478 = _1477 * 2.0;
        float _1482 = (1.0 - _1477) / (_1477 + 1.0);
        float _4032 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1483 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
        float _1492 = ((((1.0 - _1483) * (_1478 + 2.0)) * exp2(log2(isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0))) * (_1478 + 1.0))) + _1483) * _1448;
        float _1493 = _1416 * 0.5;
        float _1494 = _1426 * 0.5;
        float _1495 = _1436 * 0.5;
        float _1496 = dot(vec3(_1493, _1494, _1495), vec3(_1493, _1494, _1495));
        float _1501 = (_1496 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1496);
        float _1509 = (dot(vec3(_692, _693, _694), vec3(_1501 * _1493, _1501 * _1494, _1501 * _1495)) + 1.0) * 0.5;
        float _4043 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1518 = sqrt(((_1494 * _1494) + (_1493 * _1493)) + (_1495 * _1495)) / (_1449 + 9.9999997473787516355514526367188e-06);
        float _4054 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1519 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
        float _1520 = _1519 * 2.0;
        float _1524 = (1.0 - _1519) / (_1519 + 1.0);
        float _4065 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
        float _1525 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
        float _1534 = ((((1.0 - _1525) * (_1520 + 2.0)) * exp2(log2(isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0))) * (_1520 + 1.0))) + _1525) * _1449;
        float _1535 = _1417 * 0.5;
        float _1536 = _1427 * 0.5;
        float _1537 = _1437 * 0.5;
        float _1538 = dot(vec3(_1535, _1536, _1537), vec3(_1535, _1536, _1537));
        float _1543 = (_1538 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1538);
        float _1551 = (dot(vec3(_692, _693, _694), vec3(_1543 * _1535, _1543 * _1536, _1543 * _1537)) + 1.0) * 0.5;
        float _4076 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1560 = sqrt(((_1536 * _1536) + (_1535 * _1535)) + (_1537 * _1537)) / (_1450 + 9.9999997473787516355514526367188e-06);
        float _4087 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
        float _1561 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
        float _1562 = _1561 * 2.0;
        float _1566 = (1.0 - _1561) / (_1561 + 1.0);
        float _4098 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
        float _1567 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
        float _1576 = ((((1.0 - _1567) * (_1562 + 2.0)) * exp2(log2(isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0))) * (_1562 + 1.0))) + _1567) * _1450;
        _1584 = _1417;
        _1585 = _1416;
        _1586 = _1415;
        _1587 = _1427;
        _1588 = _1426;
        _1589 = _1425;
        _1590 = _1437;
        _1591 = _1436;
        _1592 = _1435;
        _1593 = _1450;
        _1594 = _1449;
        _1595 = _1448;
        _1596 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0)));
        _1597 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0)));
        _1598 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0)));
    }
    else
    {
        _1584 = _1273;
        _1585 = _1273;
        _1586 = _1273;
        _1587 = _1273;
        _1588 = _1273;
        _1589 = _1273;
        _1590 = _1273;
        _1591 = _1273;
        _1592 = _1273;
        _1593 = _1273;
        _1594 = _1273;
        _1595 = _1273;
        _1596 = 0.0;
        _1597 = 0.0;
        _1598 = 0.0;
    }
    float _1608 = (cbModelParam._m0[1u].x * (_1596 - _1285)) + _1285;
    float _1609 = (cbModelParam._m0[1u].x * (_1597 - _1286)) + _1286;
    float _1610 = (cbModelParam._m0[1u].x * (_1598 - _1287)) + _1287;
    float _1631 = fma(_1610, cbSceneParam._m0[89u].z, fma(_1609, cbSceneParam._m0[89u].y, _1608 * cbSceneParam._m0[89u].x));
    float _1634 = fma(_1610, cbSceneParam._m0[90u].z, fma(_1609, cbSceneParam._m0[90u].y, _1608 * cbSceneParam._m0[90u].x));
    float _1637 = fma(_1610, cbSceneParam._m0[91u].z, fma(_1609, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1608));
    float _1652 = _878 * 0.5;
    float _1653 = _879 * 0.5;
    float _1654 = _880 * 0.5;
    float _1655 = dot(vec4(_1652, _1653, _1654, 1.0), vec4(_1586, _1589, _1592, _1595));
    float _1658 = dot(vec4(_1652, _1653, _1654, 1.0), vec4(_1585, _1588, _1591, _1594));
    float _1661 = dot(vec4(_1652, _1653, _1654, 1.0), vec4(_1584, _1587, _1590, _1593));
    float _1695;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1668 = dot(vec4(_1652, _1653, _1654, 1.0), vec4(_1272, _1276, _1279, _1282));
        float _1672 = dot(vec4(_1652, _1653, _1654, 1.0), vec4(_1274, _1277, _1280, _1283));
        float _1676 = dot(vec4(_1652, _1653, _1654, 1.0), vec4(_1275, _1278, _1281, _1284));
        float _1683 = dot(vec4(cbModelParam._m0[39u]), vec4(_1652, _1653, _1654, 1.0));
        _1695 = dot(vec3(isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0)), isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0)), isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1683) ? 0.0 : (isnan(0.0) ? _1683 : max(0.0, _1683))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1695 = 1.0;
    }
    float _1706;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1697 = dot(vec4(cbModelParam._m0[40u]), vec4(_1652, _1653, _1654, 1.0));
        _1706 = dot(vec3(isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0)), isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0)), isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1697) ? 0.0 : (isnan(0.0) ? _1697 : max(0.0, _1697))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1706 = 1.0;
    }
    float _1710 = (_1706 * cbModelParam._m0[1u].x) + (_1695 * (1.0 - cbModelParam._m0[1u].x));
    float _1720 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _695);
    float _1721 = isnan(_1720) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1720 : min(cbModelParam._m0[25u].z, _1720));
    float _1802;
    float _1804;
    float _1806;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1769 = fma(_942, cbModelParam._m0[13u].z, fma(_938, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _934)) + cbModelParam._m0[13u].w;
        float _1773 = fma(_942, cbModelParam._m0[14u].z, fma(_938, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _934)) + cbModelParam._m0[14u].w;
        float _1777 = fma(_942, cbModelParam._m0[15u].z, fma(_938, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _934)) + cbModelParam._m0[15u].w;
        float _1780 = fma(_880, cbModelParam._m0[13u].z, fma(_879, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _878));
        float _1783 = fma(_880, cbModelParam._m0[14u].z, fma(_879, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _878));
        float _1786 = fma(_880, cbModelParam._m0[15u].z, fma(_879, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _878));
        float _1814;
        if (_1780 > 0.0)
        {
            _1814 = abs((1.0 - _1769) / _1780);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1780 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1769 + 1.0) / _1780);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1814 = frontier_phi_17_15_ladder;
        }
        float _2038;
        if (_1783 > 0.0)
        {
            _2038 = abs((1.0 - _1773) / _1783);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1783 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1773 + 1.0) / _1783);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2038 = frontier_phi_26_22_ladder;
        }
        float _2295;
        if (_1786 > 0.0)
        {
            _2295 = abs((1.0 - _1777) / _1786);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1786 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1777 + 1.0) / _1786);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2295 = frontier_phi_38_33_ladder;
        }
        float _2297 = isnan(_2038) ? _1814 : (isnan(_1814) ? _2038 : min(_1814, _2038));
        float _2298 = isnan(_2295) ? _2297 : (isnan(_2297) ? _2295 : min(_2297, _2295));
        float _2302 = (_2298 * _1780) + _1769;
        float _2303 = (_2298 * _1783) + _1773;
        float _2304 = (_2298 * _1786) + _1777;
        float _2305 = _2298 * 9.9999997473787516355514526367188e-05;
        float _2307 = (-1.0) - _2305;
        float _2309 = _2305 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2304 > _2309) || ((_2304 < _2307) || ((_2303 > _2309) || ((_2303 < _2307) || ((_2302 < _2307) || (_2302 > _2309))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2432 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2304, cbModelParam._m0[9u].z, fma(_2303, cbModelParam._m0[9u].y, _2302 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2304, cbModelParam._m0[10u].z, fma(_2303, cbModelParam._m0[10u].y, _2302 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2304, cbModelParam._m0[11u].z, fma(_2303, cbModelParam._m0[11u].y, _2302 * cbModelParam._m0[11u].x))), _1721);
            frontier_phi_16_38_ladder = _2432.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2432.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2432.x * cbModelParam._m0[1u].y;
        }
        _1802 = frontier_phi_16_38_ladder_2;
        _1804 = frontier_phi_16_38_ladder_1;
        _1806 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1790 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_878, _879, _880), _1721);
        _1802 = _1790.x * cbModelParam._m0[1u].y;
        _1804 = _1790.y * cbModelParam._m0[1u].y;
        _1806 = _1790.z * cbModelParam._m0[1u].y;
    }
    float _1810 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _695);
    float _1811 = isnan(_1810) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1810 : min(cbModelParam._m0[25u].w, _1810));
    float _1901;
    float _1903;
    float _1905;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1865 = fma(_942, cbModelParam._m0[21u].z, fma(_938, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _934)) + cbModelParam._m0[21u].w;
        float _1869 = fma(_942, cbModelParam._m0[22u].z, fma(_938, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _934)) + cbModelParam._m0[22u].w;
        float _1873 = fma(_942, cbModelParam._m0[23u].z, fma(_938, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _934)) + cbModelParam._m0[23u].w;
        float _1876 = fma(_880, cbModelParam._m0[21u].z, fma(_879, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _878));
        float _1879 = fma(_880, cbModelParam._m0[22u].z, fma(_879, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _878));
        float _1882 = fma(_880, cbModelParam._m0[23u].z, fma(_879, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _878));
        float _2043;
        if (_1876 > 0.0)
        {
            _2043 = abs((1.0 - _1865) / _1876);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1876 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1865 + 1.0) / _1876);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2043 = frontier_phi_28_24_ladder;
        }
        float _2322;
        if (_1879 > 0.0)
        {
            _2322 = abs((1.0 - _1869) / _1879);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1879 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1869 + 1.0) / _1879);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2322 = frontier_phi_40_35_ladder;
        }
        float _2535;
        if (_1882 > 0.0)
        {
            _2535 = abs((1.0 - _1873) / _1882);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1882 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1873 + 1.0) / _1882);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2535 = frontier_phi_49_46_ladder;
        }
        float _2537 = isnan(_2322) ? _2043 : (isnan(_2043) ? _2322 : min(_2043, _2322));
        float _2538 = isnan(_2535) ? _2537 : (isnan(_2537) ? _2535 : min(_2537, _2535));
        float _2542 = (_2538 * _1876) + _1865;
        float _2543 = (_2538 * _1879) + _1869;
        float _2544 = (_2538 * _1882) + _1873;
        float _2545 = _2538 * 9.9999997473787516355514526367188e-05;
        float _2546 = (-1.0) - _2545;
        float _2548 = _2545 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2544 > _2548) || ((_2544 < _2546) || ((_2543 > _2548) || ((_2543 < _2546) || ((_2542 < _2546) || (_2542 > _2548))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2743 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2544, cbModelParam._m0[17u].z, fma(_2543, cbModelParam._m0[17u].y, _2542 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2544, cbModelParam._m0[18u].z, fma(_2543, cbModelParam._m0[18u].y, _2542 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2544, cbModelParam._m0[19u].z, fma(_2543, cbModelParam._m0[19u].y, _2542 * cbModelParam._m0[19u].x))), _1811);
            frontier_phi_25_49_ladder = _2743.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2743.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2743.x * cbModelParam._m0[1u].z;
        }
        _1901 = frontier_phi_25_49_ladder_2;
        _1903 = frontier_phi_25_49_ladder_1;
        _1905 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1885 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_878, _879, _880), _1811);
        _1901 = _1885.x * cbModelParam._m0[1u].z;
        _1903 = _1885.y * cbModelParam._m0[1u].z;
        _1905 = _1885.z * cbModelParam._m0[1u].z;
    }
    float _1918 = (((_905 * _854) + _906) * _870) * ((cbModelParam._m0[1u].w * (_1901 - _1802)) + _1802);
    float _1920 = (((_905 * _856) + _906) * _870) * ((cbModelParam._m0[1u].w * (_1903 - _1804)) + _1804);
    float _1922 = (((_905 * _857) + _906) * _870) * ((cbModelParam._m0[1u].w * (_1905 - _1806)) + _1806);
    float _1925 = fma(_1922, cbSceneParam._m0[89u].z, fma(_1920, cbSceneParam._m0[89u].y, _1918 * cbSceneParam._m0[89u].x));
    float _1928 = fma(_1922, cbSceneParam._m0[90u].z, fma(_1920, cbSceneParam._m0[90u].y, _1918 * cbSceneParam._m0[90u].x));
    float _1931 = fma(_1922, cbSceneParam._m0[91u].z, fma(_1920, cbSceneParam._m0[91u].y, _1918 * cbSceneParam._m0[91u].x));
    vec4 _1939 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_792, _793));
    float _1941 = _1939.w;
    float _1953 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1941);
    float _1954 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1941);
    float _1955 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1941);
    uvec4 _1959 = floatBitsToUint(cbInstanceData._m0[_244 + 5u]);
    uint _1961 = _1959.x * 14u;
    uint _1962 = _1961 + 13u;
    float _1969 = _870 + (-1.0);
    float _1974 = (cbLight._m0[_1962].x * _1969) + 1.0;
    float _1975 = (cbLight._m0[_1962].y * _1969) + 1.0;
    float _1976 = (cbLight._m0[_1962].z * _1969) + 1.0;
    float _1977 = (cbLight._m0[_1962].w * _1969) + 1.0;
    uint _1978 = _1961 + 5u;
    float _1984 = isnan(1.0) ? _1975 : (isnan(_1975) ? 1.0 : min(_1975, 1.0));
    uint _1988 = _1961 + 4u;
    float _1997 = isnan(1.0) ? _1974 : (isnan(_1974) ? 1.0 : min(_1974, 1.0));
    uint _2001 = _1961 | 1u;
    float _2012 = dot(vec3(cbLight._m0[_1961].xyz), vec3(_692, _693, _694));
    float _2015 = dot(vec3(cbLight._m0[_2001].xyz), vec3(_692, _693, _694));
    float _4234 = isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0));
    float _4245 = isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0));
    float _2020 = (isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0))) * 0.3183098733425140380859375;
    float _2022 = (isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0))) * 0.3183098733425140380859375;
    float _2029 = ((cbLight._m0[_1978].x * _1984) * _2022) + (((cbLight._m0[_1988].x * _1953) * _1997) * _2020);
    float _2030 = ((_1984 * cbLight._m0[_1978].y) * _2022) + (((cbLight._m0[_1988].y * _1954) * _1997) * _2020);
    float _2031 = ((_1984 * cbLight._m0[_1978].z) * _2022) + (((cbLight._m0[_1988].z * _1955) * _1997) * _2020);
    uvec4 _2035 = floatBitsToUint(cbLight._m0[_1961 + 12u]);
    bool _2037 = _2035.x == 0u;
    float _2048;
    float _2050;
    float _2052;
    if (_2037)
    {
        _2048 = _2029;
        _2050 = _2030;
        _2052 = _2031;
    }
    else
    {
        uint _2056 = _1961 + 6u;
        float _2072 = (dot(vec3(cbLight._m0[_1961 + 2u].xyz), vec3(_692, _693, _694)) * 0.5) + 0.5;
        float _2073 = _2072 * _2072;
        float _4256 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
        float _2074 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
        float _2075 = isnan(1.0) ? _1976 : (isnan(_1976) ? 1.0 : min(_1976, 1.0));
        _2048 = (((cbLight._m0[_2056].x * 0.3183098733425140380859375) * _2074) * _2075) + _2029;
        _2050 = (((cbLight._m0[_2056].y * 0.3183098733425140380859375) * _2074) * _2075) + _2030;
        _2052 = (((cbLight._m0[_2056].z * 0.3183098733425140380859375) * _2074) * _2075) + _2031;
    }
    bool _2055 = _2035.y == 0u;
    float _2093;
    float _2095;
    float _2097;
    if (_2055)
    {
        _2093 = _2048;
        _2095 = _2050;
        _2097 = _2052;
    }
    else
    {
        uint _2266 = _1961 + 7u;
        float _2282 = (dot(vec3(cbLight._m0[_1961 + 3u].xyz), vec3(_692, _693, _694)) * 0.5) + 0.5;
        float _2283 = _2282 * _2282;
        float _4272 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0));
        float _2284 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
        float _2285 = isnan(1.0) ? _1977 : (isnan(_1977) ? 1.0 : min(_1977, 1.0));
        _2093 = (((cbLight._m0[_2266].x * 0.3183098733425140380859375) * _2284) * _2285) + _2048;
        _2095 = (((cbLight._m0[_2266].y * 0.3183098733425140380859375) * _2284) * _2285) + _2050;
        _2097 = (((cbLight._m0[_2266].z * 0.3183098733425140380859375) * _2284) * _2285) + _2052;
    }
    uint _2100 = _1961 + 8u;
    float _2113 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1961].w)) * _695) * 0.949999988079071044921875);
    float _2114 = _2113 * _2113;
    float _2115 = cbLight._m0[_1961].x + _772;
    float _2116 = cbLight._m0[_1961].y + _773;
    float _2117 = cbLight._m0[_1961].z + _774;
    float _2121 = inversesqrt(dot(vec3(_2115, _2116, _2117), vec3(_2115, _2116, _2117)));
    float _2122 = _2121 * _2115;
    float _2123 = _2121 * _2116;
    float _2124 = _2121 * _2117;
    float _2125 = dot(vec3(_692, _693, _694), vec3(cbLight._m0[_1961].xyz));
    float _4288 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
    float _2128 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
    float _4299 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
    float _2129 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
    float _2130 = dot(vec3(_692, _693, _694), vec3(_2122, _2123, _2124));
    float _4310 = isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0));
    float _2133 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
    float _2134 = dot(vec3(cbLight._m0[_1961].xyz), vec3(_2122, _2123, _2124));
    float _4321 = isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0));
    float _2138 = _2114 * _2114;
    float _2142 = ((_2133 * _2133) * (_2138 + (-1.0))) + 1.0;
    float _2150 = exp2(log2(1.0 - (isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0)))) * 5.0);
    float _2151 = 0.959999978542327880859375 - _851;
    float _2153 = 0.959999978542327880859375 - _852;
    float _2154 = 0.959999978542327880859375 - _853;
    float _2161 = 1.0 - _2114;
    float _2172 = (0.5 / (((_2129 * ((_2128 * _2161) + _2114)) + 9.9999999392252902907785028219223e-09) + (((_2129 * _2161) + _2114) * _2128))) * _2128;
    float _4332 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
    float _2174 = (isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0))) * (_2138 / ((_2142 * _2142) * 3.141590118408203125));
    uint _2188 = _1961 + 9u;
    float _2199 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2001].w)) * _695) * 0.949999988079071044921875);
    float _2200 = _2199 * _2199;
    float _2201 = cbLight._m0[_2001].x + _772;
    float _2202 = cbLight._m0[_2001].y + _773;
    float _2203 = cbLight._m0[_2001].z + _774;
    float _2207 = inversesqrt(dot(vec3(_2201, _2202, _2203), vec3(_2201, _2202, _2203)));
    float _2208 = _2207 * _2201;
    float _2209 = _2207 * _2202;
    float _2210 = _2207 * _2203;
    float _2211 = dot(vec3(_692, _693, _694), vec3(cbLight._m0[_2001].xyz));
    float _4343 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
    float _2214 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
    float _2215 = dot(vec3(_692, _693, _694), vec3(_2208, _2209, _2210));
    float _4354 = isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0));
    float _2218 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
    float _2219 = dot(vec3(cbLight._m0[_2001].xyz), vec3(_2208, _2209, _2210));
    float _4365 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
    float _2223 = _2200 * _2200;
    float _2227 = ((_2218 * _2218) * (_2223 + (-1.0))) + 1.0;
    float _2234 = exp2(log2(1.0 - (isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0)))) * 5.0);
    float _2241 = 1.0 - _2200;
    float _2251 = (0.5 / (((_2129 * ((_2214 * _2241) + _2200)) + 9.9999999392252902907785028219223e-09) + (((_2129 * _2241) + _2200) * _2214))) * _2214;
    float _4376 = isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0));
    float _2253 = (isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0))) * (_2223 / ((_2227 * _2227) * 3.141590118408203125));
    float _2263 = (((((_2234 * _2151) + _854) * cbLight._m0[_2188].x) * _2253) * _1984) + ((((cbLight._m0[_2100].x * _1953) * ((_2150 * _2151) + _854)) * _2174) * _1997);
    float _2264 = (((((_2234 * _2153) + _856) * cbLight._m0[_2188].y) * _2253) * _1984) + ((((cbLight._m0[_2100].y * _1954) * ((_2150 * _2153) + _856)) * _2174) * _1997);
    float _2265 = (((((_2234 * _2154) + _857) * cbLight._m0[_2188].z) * _2253) * _1984) + ((((cbLight._m0[_2100].z * _1955) * ((_2150 * _2154) + _857)) * _2174) * _1997);
    float _2327;
    float _2329;
    float _2331;
    if (_2037)
    {
        _2327 = _2263;
        _2329 = _2264;
        _2331 = _2265;
    }
    else
    {
        uint _2333 = _1961 + 2u;
        uint _2337 = _1961 + 10u;
        float _2351 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2333].w)) * _695) * 0.949999988079071044921875);
        float _2352 = _2351 * _2351;
        float _2353 = cbLight._m0[_2333].x + _772;
        float _2354 = cbLight._m0[_2333].y + _773;
        float _2355 = cbLight._m0[_2333].z + _774;
        float _2359 = inversesqrt(dot(vec3(_2353, _2354, _2355), vec3(_2353, _2354, _2355)));
        float _2360 = _2359 * _2353;
        float _2361 = _2359 * _2354;
        float _2362 = _2359 * _2355;
        float _2363 = dot(vec3(_692, _693, _694), vec3(cbLight._m0[_2333].xyz));
        float _4387 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
        float _2366 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
        float _2367 = dot(vec3(_692, _693, _694), vec3(_2360, _2361, _2362));
        float _4398 = isnan(0.0) ? _2367 : (isnan(_2367) ? 0.0 : max(_2367, 0.0));
        float _2370 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
        float _2371 = dot(vec3(cbLight._m0[_2333].xyz), vec3(_2360, _2361, _2362));
        float _4409 = isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0));
        float _2375 = _2352 * _2352;
        float _2379 = ((_2370 * _2370) * (_2375 + (-1.0))) + 1.0;
        float _2386 = exp2(log2(1.0 - (isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0)))) * 5.0);
        float _2393 = 1.0 - _2352;
        float _2403 = (0.5 / (((_2129 * ((_2366 * _2393) + _2352)) + 9.9999999392252902907785028219223e-09) + (((_2129 * _2393) + _2352) * _2366))) * _2366;
        float _4420 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
        float _2405 = (isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0))) * (_2375 / ((_2379 * _2379) * 3.141590118408203125));
        float _2406 = isnan(1.0) ? _1976 : (isnan(_1976) ? 1.0 : min(_1976, 1.0));
        _2327 = (((((_2386 * _2151) + _854) * cbLight._m0[_2337].x) * _2405) * _2406) + _2263;
        _2329 = (((((_2386 * _2153) + _856) * cbLight._m0[_2337].y) * _2405) * _2406) + _2264;
        _2331 = (((((_2386 * _2154) + _857) * cbLight._m0[_2337].z) * _2405) * _2406) + _2265;
    }
    float _2441;
    float _2443;
    float _2445;
    if (_2055)
    {
        _2441 = _2327;
        _2443 = _2329;
        _2445 = _2331;
    }
    else
    {
        uint _2452 = _1961 + 3u;
        uint _2456 = _1961 + 11u;
        float _2470 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2452].w)) * _695) * 0.949999988079071044921875);
        float _2471 = _2470 * _2470;
        float _2472 = cbLight._m0[_2452].x + _772;
        float _2473 = cbLight._m0[_2452].y + _773;
        float _2474 = cbLight._m0[_2452].z + _774;
        float _2478 = inversesqrt(dot(vec3(_2472, _2473, _2474), vec3(_2472, _2473, _2474)));
        float _2479 = _2478 * _2472;
        float _2480 = _2478 * _2473;
        float _2481 = _2478 * _2474;
        float _2482 = dot(vec3(_692, _693, _694), vec3(cbLight._m0[_2452].xyz));
        float _4436 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0));
        float _2485 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
        float _2486 = dot(vec3(_692, _693, _694), vec3(_2479, _2480, _2481));
        float _4447 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
        float _2489 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
        float _2490 = dot(vec3(cbLight._m0[_2452].xyz), vec3(_2479, _2480, _2481));
        float _4458 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
        float _2494 = _2471 * _2471;
        float _2498 = ((_2489 * _2489) * (_2494 + (-1.0))) + 1.0;
        float _2505 = exp2(log2(1.0 - (isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0)))) * 5.0);
        float _2512 = 1.0 - _2471;
        float _2522 = (0.5 / (((_2129 * ((_2485 * _2512) + _2471)) + 9.9999999392252902907785028219223e-09) + (((_2129 * _2512) + _2471) * _2485))) * _2485;
        float _4469 = isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : max(_2522, 0.0));
        float _2524 = (isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0))) * (_2494 / ((_2498 * _2498) * 3.141590118408203125));
        float _2525 = isnan(1.0) ? _1977 : (isnan(_1977) ? 1.0 : min(_1977, 1.0));
        _2441 = (((((_2505 * _2151) + _854) * cbLight._m0[_2456].x) * _2524) * _2525) + _2327;
        _2443 = (((((_2505 * _2153) + _856) * cbLight._m0[_2456].y) * _2524) * _2525) + _2329;
        _2445 = (((((_2505 * _2154) + _857) * cbLight._m0[_2456].z) * _2524) * _2525) + _2331;
    }
    float _2660;
    float _2662;
    float _2664;
    float _2666;
    float _2668;
    float _2670;
    if (_1959.y == 0u)
    {
        float _2600 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2601 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2600;
        float _2602 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2600;
        float _2603 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2600;
        uvec4 _2615 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2616 = _2615.x;
        uint _2627 = uint((float(_2615.y) * floor(float(uint(cbSceneParam._m0[85u].y * _793) / _2616))) + floor(float(uint(cbSceneParam._m0[85u].x * _792) / _2616)));
        float _2637 = (log2(_2603 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2638 = isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : max(_2637, 0.0));
        uint _2641 = uint(isnan(14.0) ? _2638 : (isnan(_2638) ? 14.0 : min(_2638, 14.0)));
        uvec4 _2646 = texelFetch(g_lightClusterGridBuffer, int(((_2641 << 2u) + (_2627 << 6u)) >> 2u));
        uint _2647 = _2646.x;
        uint _2648 = _2615.z;
        float _2748;
        float _2750;
        float _2752;
        float _2754;
        float _2756;
        float _2758;
        if (((((1u << ((_2648 >> 4u) & 15u)) + 4294967295u) & _2647) == 0u) || ((_2648 & 240u) == 0u))
        {
            _2748 = 0.0;
            _2750 = 0.0;
            _2752 = 0.0;
            _2754 = 0.0;
            _2756 = 0.0;
            _2758 = 0.0;
        }
        else
        {
            float _2749;
            float _2751;
            float _2753;
            float _2755;
            float _2757;
            float _2759;
            float _2901 = 0.0;
            float _2902 = 0.0;
            float _2903 = 0.0;
            float _2904 = 0.0;
            float _2905 = 0.0;
            float _2906 = 0.0;
            uint _2907 = 0u;
            uint _2916;
            bool _2917;
            for (;;)
            {
                _2916 = texelFetch(g_lightClassification, int((((_2641 << 5u) + (_2627 << 9u)) + (_2907 << 2u)) >> 2u)).x;
                _2917 = _2916 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2917)
                {
                    frontier_phi_66_pred = _2901;
                    frontier_phi_66_pred_1 = _2906;
                    frontier_phi_66_pred_2 = _2905;
                    frontier_phi_66_pred_3 = _2904;
                    frontier_phi_66_pred_4 = _2903;
                    frontier_phi_66_pred_5 = _2902;
                }
                else
                {
                    float _3046;
                    float _3047;
                    float _3048;
                    float _3049;
                    float _3050;
                    float _3051;
                    uint _3052;
                    _3046 = _2901;
                    _3047 = _2902;
                    _3048 = _2903;
                    _3049 = _2904;
                    _3050 = _2905;
                    _3051 = _2906;
                    _3052 = _2916;
                    float _2973;
                    float _2974;
                    float _2975;
                    float _2976;
                    float _2977;
                    float _2978;
                    for (;;)
                    {
                        uint _3056 = uint(findLSB(_3052)) + (_2907 << 5u);
                        uint _3053 = (_3052 + 4294967295u) & _3052;
                        uint _3058 = _3056 * 48u;
                        vec4 _3072 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3058)).x, texelFetch(g_PointLightRenderingBuffer, int(_3058 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3058 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3058 + 3u)).x));
                        uint _3078 = (_3056 * 48u) + 4u;
                        vec4 _3091 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3078)).x, texelFetch(g_PointLightRenderingBuffer, int(_3078 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3078 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3078 + 3u)).x));
                        uint _3097 = (_3056 * 48u) + 8u;
                        vec3 _3108 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3097)).x, texelFetch(g_PointLightRenderingBuffer, int(_3097 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3097 + 2u)).x));
                        float _3112 = _3072.x - _2601;
                        float _3113 = _3072.y - _2602;
                        float _3114 = _3072.z - _2603;
                        float _3115 = dot(vec3(_3112, _3113, _3114), vec3(_3112, _3113, _3114));
                        float _3118 = inversesqrt(_3115);
                        float _3119 = _3118 * _3112;
                        float _3120 = _3118 * _3113;
                        float _3121 = _3118 * _3114;
                        float _3122 = dot(vec3(_811, _814, _817), vec3(_3119, _3120, _3121));
                        float _3127 = 1.0 - (_3115 * _3072.w);
                        float _4495 = isnan(0.0) ? _3127 : (isnan(_3127) ? 0.0 : max(_3127, 0.0));
                        float _3128 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
                        float _3129 = sqrt(_3115) * _3091.w;
                        float _3132 = 1.39999997615814208984375 / (_3129 + 1.39999997615814208984375);
                        float _3133 = _3132 * _3132;
                        float _3136 = ((1.0 - _3133) * _3122) + _3133;
                        float _3139 = _3129 * _3129;
                        float _3143 = ((isnan(0.0) ? _3136 : (isnan(_3136) ? 0.0 : max(_3136, 0.0))) * _3128) / ((_3139 * 0.699999988079071044921875) + 1.0);
                        float _3147 = (-0.0) - _2601;
                        float _3148 = (-0.0) - _2602;
                        float _3149 = (-0.0) - _2603;
                        float _3153 = inversesqrt(dot(vec3(_3147, _3148, _3149), vec3(_3147, _3148, _3149)));
                        float _3154 = _3153 * _3147;
                        float _3155 = _3153 * _3148;
                        float _3156 = _3153 * _3149;
                        float _3164 = exp2(log2(1.0 / ((_3139 * 3.5) + 5.0)) * 0.25);
                        float _3165 = 1.0 - _886;
                        float _3172 = sqrt(1.0 - ((1.0 - (_3165 * _3165)) * (1.0 - (_3164 * _3164))));
                        float _3173 = _3172 * _3172;
                        float _3174 = _3173 * _3173;
                        float _3175 = _3154 + _3119;
                        float _3176 = _3155 + _3120;
                        float _3177 = _3156 + _3121;
                        float _3181 = inversesqrt(dot(vec3(_3175, _3176, _3177), vec3(_3175, _3176, _3177)));
                        float _3185 = dot(vec3(_811, _814, _817), vec3(_3154, _3155, _3156));
                        float _4511 = isnan(0.0) ? _3185 : (isnan(_3185) ? 0.0 : max(_3185, 0.0));
                        float _3188 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
                        float _3189 = dot(vec3(_811, _814, _817), vec3(_3181 * _3175, _3181 * _3176, _3181 * _3177));
                        float _4522 = isnan(0.0) ? _3189 : (isnan(_3189) ? 0.0 : max(_3189, 0.0));
                        float _3192 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
                        float _3196 = ((_3192 * _3192) * (_3174 + (-1.0))) + 1.0;
                        float _3197 = _3132 * _3173;
                        float _3198 = _3197 * _3197;
                        float _3201 = ((1.0 - _3198) * _3122) + _3198;
                        float _4533 = isnan(0.0) ? _3201 : (isnan(_3201) ? 0.0 : max(_3201, 0.0));
                        float _3202 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
                        float _3203 = 1.0 - _3173;
                        float _3213 = (0.5 / (((_3202 * ((_3188 * _3203) + _3173)) + 9.9999999392252902907785028219223e-09) + (((_3202 * _3203) + _3173) * _3188))) * _3202;
                        float _4544 = isnan(0.0) ? _3213 : (isnan(_3213) ? 0.0 : max(_3213, 0.0));
                        float _3224 = (((_3174 * 3.1415927410125732421875) * (isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0)))) / ((_3196 * _3196) * ((_3139 * 2.1991131305694580078125) + 3.141590118408203125))) * _3128;
                        _2976 = (_3143 * _3091.x) + _3049;
                        _2977 = (_3143 * _3091.y) + _3050;
                        _2978 = (_3143 * _3091.z) + _3051;
                        _2973 = (_3224 * _3108.x) + _3046;
                        _2974 = (_3224 * _3108.y) + _3047;
                        _2975 = (_3224 * _3108.z) + _3048;
                        if (_3053 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3046 = _2973;
                            _3047 = _2974;
                            _3048 = _2975;
                            _3049 = _2976;
                            _3050 = _2977;
                            _3051 = _2978;
                            _3052 = _3053;
                        }
                    }
                    frontier_phi_66_pred = _2973;
                    frontier_phi_66_pred_1 = _2978;
                    frontier_phi_66_pred_2 = _2977;
                    frontier_phi_66_pred_3 = _2976;
                    frontier_phi_66_pred_4 = _2975;
                    frontier_phi_66_pred_5 = _2974;
                }
                _2749 = frontier_phi_66_pred;
                _2759 = frontier_phi_66_pred_1;
                _2757 = frontier_phi_66_pred_2;
                _2755 = frontier_phi_66_pred_3;
                _2753 = frontier_phi_66_pred_4;
                _2751 = frontier_phi_66_pred_5;
                uint _2908 = _2907 + 1u;
                if (_2908 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2901 = _2749;
                    _2902 = _2751;
                    _2903 = _2753;
                    _2904 = _2755;
                    _2905 = _2757;
                    _2906 = _2759;
                    _2907 = _2908;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2748 = _2749;
            _2750 = _2751;
            _2752 = _2753;
            _2754 = _2755;
            _2756 = _2757;
            _2758 = _2759;
        }
        uvec4 _2762 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2763 = _2762.z;
        uint _2765 = (_2763 >> 8u) & 15u;
        float _2869;
        float _2871;
        float _2873;
        float _2875;
        float _2877;
        float _2879;
        if (((4294967295u << _2765) & _2647) == 0u)
        {
            _2869 = _2748;
            _2871 = _2750;
            _2873 = _2752;
            _2875 = _2754;
            _2877 = _2756;
            _2879 = _2758;
        }
        else
        {
            float _2894 = inversesqrt(dot(vec3(_2601, _2602, _2603), vec3(_2601, _2602, _2603)));
            float _2895 = _2894 * _2601;
            float _2896 = _2894 * _2602;
            float _2897 = _2894 * _2603;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2765 < ((_2763 >> 12u) & 15u))
            {
                float _2870;
                float _2872;
                float _2874;
                float _2876;
                float _2878;
                float _2880;
                float _3029 = _2748;
                float _3030 = _2750;
                float _3031 = _2752;
                float _3032 = _2754;
                float _3033 = _2756;
                float _3034 = _2758;
                uint _3035 = _2765;
                uint _3044;
                bool _3045;
                for (;;)
                {
                    _3044 = texelFetch(g_lightClassification, int((((_2641 << 5u) + (_2627 << 9u)) + (_3035 << 2u)) >> 2u)).x;
                    _3045 = _3044 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3045)
                    {
                        frontier_phi_77_pred = _3034;
                        frontier_phi_77_pred_1 = _3033;
                        frontier_phi_77_pred_2 = _3032;
                        frontier_phi_77_pred_3 = _3031;
                        frontier_phi_77_pred_4 = _3030;
                        frontier_phi_77_pred_5 = _3029;
                    }
                    else
                    {
                        float _3238;
                        float _3239;
                        float _3240;
                        float _3241;
                        float _3242;
                        float _3243;
                        float _3531;
                        float _3532;
                        float _3533;
                        float _3534;
                        float _3535;
                        float _3536;
                        float _3251 = _3029;
                        float _3252 = _3030;
                        float _3253 = _3031;
                        float _3254 = _3032;
                        float _3255 = _3033;
                        float _3256 = _3034;
                        uint _3257 = _3044;
                        uint _3258;
                        vec4 _3283;
                        float _3284;
                        vec4 _3299;
                        vec3 _3311;
                        vec4 _3326;
                        vec4 _3341;
                        float _3387;
                        bool _3388;
                        for (;;)
                        {
                            uint _3268 = ((_3035 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3257));
                            _3258 = (_3257 + 4294967295u) & _3257;
                            uint _3270 = _3268 * 40u;
                            _3283 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3270)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3270 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3270 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3270 + 3u)).x));
                            _3284 = _3283.w;
                            uint _3286 = (_3268 * 40u) + 4u;
                            _3299 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3286)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3286 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3286 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3286 + 3u)).x));
                            uint _3301 = (_3268 * 40u) + 8u;
                            _3311 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3301)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3301 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3301 + 2u)).x));
                            uint _3313 = (_3268 * 40u) + 16u;
                            _3326 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3313)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 3u)).x));
                            uint _3328 = (_3268 * 40u) + 20u;
                            _3341 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3328)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 3u)).x));
                            uint _3343 = (_3268 * 40u) + 24u;
                            vec4 _3356 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3343)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 3u)).x));
                            uint _3362 = (_3268 * 40u) + 28u;
                            vec4 _3375 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3362)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 3u)).x));
                            _3387 = fma(_2603, _3375.z, fma(_2602, _3375.y, _3375.x * _2601)) + _3375.w;
                            _3388 = !((fma(_2603, _3356.z, fma(_2602, _3356.y, _3356.x * _2601)) + _3356.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3388)
                            {
                                float _3415 = _3283.x - _2601;
                                float _3416 = _3283.y - _2602;
                                float _3417 = _3283.z - _2603;
                                float _3418 = dot(vec3(_3415, _3416, _3417), vec3(_3415, _3416, _3417));
                                float _3421 = inversesqrt(_3418);
                                float _3422 = _3421 * _3415;
                                float _3423 = _3421 * _3416;
                                float _3424 = _3421 * _3417;
                                float _3428 = 1.0 - (_3418 / (_3284 * _3284));
                                float _4555 = isnan(0.0) ? _3428 : (isnan(_3428) ? 0.0 : max(_3428, 0.0));
                                float _3429 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
                                float _3433 = sqrt(_3418) * _3299.w;
                                float _3435 = 1.39999997615814208984375 / (_3433 + 1.39999997615814208984375);
                                float _3436 = _3435 * _3435;
                                float _3439 = ((1.0 - _3436) * dot(vec3(_3422, _3423, _3424), vec3(_811, _814, _817))) + _3436;
                                float _3442 = _3433 * _3433;
                                float _3446 = (fma(_2603, _3326.z, fma(_2602, _3326.y, _3326.x * _2601)) + _3326.w) / _3387;
                                float _3447 = (fma(_2603, _3341.z, fma(_2602, _3341.y, _3341.x * _2601)) + _3341.w) / _3387;
                                float _3451 = 1.0 - dot(vec2(_3446, _3447), vec2(_3446, _3447));
                                float _4571 = isnan(0.0) ? _3451 : (isnan(_3451) ? 0.0 : max(_3451, 0.0));
                                float _3452 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
                                float _3453 = _3452 * (((isnan(0.0) ? _3439 : (isnan(_3439) ? 0.0 : max(_3439, 0.0))) * _3429) / ((_3442 * 0.699999988079071044921875) + 1.0));
                                float _3465 = exp2(log2(1.0 / ((_3442 * 3.5) + 5.0)) * 0.25);
                                float _3466 = 1.0 - _886;
                                float _3473 = sqrt(1.0 - ((1.0 - (_3466 * _3466)) * (1.0 - (_3465 * _3465))));
                                float _3474 = _3473 * _3473;
                                float _3475 = _3474 * _3474;
                                float _3476 = _3422 - _2895;
                                float _3477 = _3423 - _2896;
                                float _3478 = _3424 - _2897;
                                float _3482 = inversesqrt(dot(vec3(_3476, _3477, _3478), vec3(_3476, _3477, _3478)));
                                float _3486 = dot(vec3(_811, _814, _817), vec3((-0.0) - _2895, (-0.0) - _2896, (-0.0) - _2897));
                                float _4582 = isnan(0.0) ? _3486 : (isnan(_3486) ? 0.0 : max(_3486, 0.0));
                                float _3489 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
                                float _3490 = dot(vec3(_811, _814, _817), vec3(_3482 * _3476, _3482 * _3477, _3482 * _3478));
                                float _4593 = isnan(0.0) ? _3490 : (isnan(_3490) ? 0.0 : max(_3490, 0.0));
                                float _3493 = isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0));
                                float _3497 = ((_3493 * _3493) * (_3475 + (-1.0))) + 1.0;
                                float _3498 = _3435 * _3474;
                                float _3499 = _3498 * _3498;
                                float _3505 = ((1.0 - _3499) * dot(vec3(_811, _814, _817), vec3(_3422, _3423, _3424))) + _3499;
                                float _4604 = isnan(0.0) ? _3505 : (isnan(_3505) ? 0.0 : max(_3505, 0.0));
                                float _3506 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
                                float _3507 = 1.0 - _3474;
                                float _3517 = (0.5 / (((_3506 * ((_3489 * _3507) + _3474)) + 9.9999999392252902907785028219223e-09) + (((_3506 * _3507) + _3474) * _3489))) * _3506;
                                float _4615 = isnan(0.0) ? _3517 : (isnan(_3517) ? 0.0 : max(_3517, 0.0));
                                float _3527 = (_3452 * _3429) * (((_3475 * 3.1415927410125732421875) * (isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0)))) / ((_3497 * _3497) * ((_3442 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3453 * _3299.y;
                                frontier_phi_83_pred_1 = _3453 * _3299.x;
                                frontier_phi_83_pred_2 = _3527 * _3311.z;
                                frontier_phi_83_pred_3 = _3527 * _3311.y;
                                frontier_phi_83_pred_4 = _3527 * _3311.x;
                                frontier_phi_83_pred_5 = _3453 * _3299.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3535 = frontier_phi_83_pred;
                            _3534 = frontier_phi_83_pred_1;
                            _3533 = frontier_phi_83_pred_2;
                            _3532 = frontier_phi_83_pred_3;
                            _3531 = frontier_phi_83_pred_4;
                            _3536 = frontier_phi_83_pred_5;
                            _3241 = _3534 + _3254;
                            _3242 = _3535 + _3255;
                            _3243 = _3536 + _3256;
                            _3238 = _3531 + _3251;
                            _3239 = _3532 + _3252;
                            _3240 = _3533 + _3253;
                            if (_3258 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3251 = _3238;
                                _3252 = _3239;
                                _3253 = _3240;
                                _3254 = _3241;
                                _3255 = _3242;
                                _3256 = _3243;
                                _3257 = _3258;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3243;
                        frontier_phi_77_pred_1 = _3242;
                        frontier_phi_77_pred_2 = _3241;
                        frontier_phi_77_pred_3 = _3240;
                        frontier_phi_77_pred_4 = _3239;
                        frontier_phi_77_pred_5 = _3238;
                    }
                    _2880 = frontier_phi_77_pred;
                    _2878 = frontier_phi_77_pred_1;
                    _2876 = frontier_phi_77_pred_2;
                    _2874 = frontier_phi_77_pred_3;
                    _2872 = frontier_phi_77_pred_4;
                    _2870 = frontier_phi_77_pred_5;
                    uint _3036 = _3035 + 1u;
                    if (_3036 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3029 = _2870;
                        _3030 = _2872;
                        _3031 = _2874;
                        _3032 = _2876;
                        _3033 = _2878;
                        _3034 = _2880;
                        _3035 = _3036;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2874;
                frontier_phi_58_59_ladder_1 = _2880;
                frontier_phi_58_59_ladder_2 = _2878;
                frontier_phi_58_59_ladder_3 = _2876;
                frontier_phi_58_59_ladder_4 = _2872;
                frontier_phi_58_59_ladder_5 = _2870;
            }
            else
            {
                frontier_phi_58_59_ladder = _2752;
                frontier_phi_58_59_ladder_1 = _2758;
                frontier_phi_58_59_ladder_2 = _2756;
                frontier_phi_58_59_ladder_3 = _2754;
                frontier_phi_58_59_ladder_4 = _2750;
                frontier_phi_58_59_ladder_5 = _2748;
            }
            _2869 = frontier_phi_58_59_ladder_5;
            _2871 = frontier_phi_58_59_ladder_4;
            _2873 = frontier_phi_58_59_ladder;
            _2875 = frontier_phi_58_59_ladder_3;
            _2877 = frontier_phi_58_59_ladder_2;
            _2879 = frontier_phi_58_59_ladder_1;
        }
        float _2884 = isnan(1.0) ? _870 : (isnan(_870) ? 1.0 : min(_870, 1.0));
        _2660 = (_2884 * _2875) + _2093;
        _2662 = (_2884 * _2877) + _2095;
        _2664 = (_2884 * _2879) + _2097;
        _2666 = ((_2869 * _854) * _2884) + _2441;
        _2668 = ((_2871 * _856) * _2884) + _2443;
        _2670 = ((_2873 * _857) * _2884) + _2445;
    }
    else
    {
        _2660 = _2093;
        _2662 = _2095;
        _2664 = _2097;
        _2666 = _2441;
        _2668 = _2443;
        _2670 = _2445;
    }
    float _4631 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
    float _4642 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
    float _4653 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
    float _2687 = ((isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0))) * (_2660 + ((isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0))) * _870))) + ((_2666 + ((isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0))) * _1710)) * cbPerFrame._m0[3u].x);
    float _2688 = ((isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0))) * (_2662 + ((isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0))) * _870))) + ((_2668 + ((isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0))) * _1710)) * cbPerFrame._m0[3u].x);
    float _2689 = ((isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0))) * (_2664 + ((isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0))) * _870))) + ((_2670 + ((isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0))) * _1710)) * cbPerFrame._m0[3u].x);
    uint _2690 = _244 + 6u;
    float _2698 = _792 / cbSceneParam._m0[86u].x;
    float _2699 = _793 / cbSceneParam._m0[86u].y;
    vec4 _2713 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2698, _2699, (log2((isnan(cbSceneParam._m0[77u].w) ? _714 : (isnan(_714) ? cbSceneParam._m0[77u].w : min(_714, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2715 = _2713.x;
    float _2716 = _2713.y;
    float _2717 = _2713.z;
    float _2718 = _2713.w;
    float _2811;
    float _2813;
    float _2815;
    float _2817;
    if (_714 > cbSceneParam._m0[78u].w)
    {
        float _2773 = isnan(_714) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _714 : min(cbSceneParam._m0[80u].w, _714));
        float _2774 = _2773 / _714;
        float _2785 = _2774 * _765;
        float _2786 = _766 * _2774;
        float _2787 = (-0.0) - _2786;
        float _2789 = _2774 * _767;
        float _2791 = (cbSceneParam._m0[77u].w * _2787) / _2773;
        float _2792 = _2791 + cbSceneParam._m0[79u].w;
        float _2793 = cbSceneParam._m0[79u].w - _2786;
        float _2799 = sqrt(((_2785 * _2785) + (_2786 * _2786)) + (_2789 * _2789));
        float _2802 = (1.0 - (cbSceneParam._m0[77u].w / _2773)) * _2799;
        float _2807 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2809 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2986;
        if (abs((_2787 - _2791) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2986 = ((((_2792 > 0.0) ? exp2(_2807 * _2792) : (2.0 - exp2(_2809 * _2792))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2802;
        }
        else
        {
            float _2930 = 1.0 / cbSceneParam._m0[80u].x;
            float _2931 = isnan(_2793) ? _2792 : (isnan(_2792) ? _2793 : max(_2792, _2793));
            float _2932 = isnan(_2793) ? _2792 : (isnan(_2792) ? _2793 : min(_2792, _2793));
            float _2941 = isnan(0.0) ? _2931 : (isnan(_2931) ? 0.0 : min(_2931, 0.0));
            float _2942 = isnan(0.0) ? _2932 : (isnan(_2932) ? 0.0 : min(_2932, 0.0));
            _2986 = ((abs(_2799 / _2787) * cbSceneParam._m0[80u].y) * ((((_2941 - _2942) * 2.0) - ((exp2(_2807 * (isnan(0.0) ? _2931 : (isnan(_2931) ? 0.0 : max(_2931, 0.0)))) - exp2(_2807 * (isnan(0.0) ? _2932 : (isnan(_2932) ? 0.0 : max(_2932, 0.0))))) * _2930)) - ((exp2(_2809 * _2941) - exp2(_2809 * _2942)) * _2930))) + (_2802 * cbSceneParam._m0[80u].z);
        }
        vec4 _2988 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2698, _2699, 1.0), 0.0);
        float _2997 = exp2((_2986 * (-1.44269502162933349609375)) * (1.0 - _2988.w));
        float _2998 = log2(_2997);
        float _3014 = log2(_2718);
        _2811 = (exp2(_3014 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2998 * cbSceneParam._m0[78u].x)) * _2988.x) / cbSceneParam._m0[78u].x)) + _2715;
        _2813 = (exp2(_3014 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2998 * cbSceneParam._m0[78u].y)) * _2988.y) / cbSceneParam._m0[78u].y)) + _2716;
        _2815 = (exp2(_3014 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2998 * cbSceneParam._m0[78u].z)) * _2988.z) / cbSceneParam._m0[78u].z)) + _2717;
        _2817 = _2997 * _2718;
    }
    else
    {
        _2811 = _2715;
        _2813 = _2716;
        _2815 = _2717;
        _2817 = _2718;
    }
    bool _3024;
    vec4 _2827;
    vec4 _2849;
    float _2851;
    float _2855;
    float _2856;
    float _2857;
    float _2858;
    bool _2868;
    for (;;)
    {
        _2827 = cbMatDynParam._m0[0u];
        float _2829 = roundEven(_2827.y);
        bool _2830 = _2829 == 3.0;
        float _2831 = log2(_2817);
        float _2838 = exp2(_2831 * cbSceneParam._m0[78u].x) * _2687;
        float _2839 = exp2(_2831 * cbSceneParam._m0[78u].y) * _2688;
        float _2840 = exp2(_2831 * cbSceneParam._m0[78u].z) * _2689;
        float _2847 = _781 + (-0.5);
        _2849 = cbMtdParam._m0[1u];
        _2851 = _2849.y * _2847;
        float _2854 = (_2829 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2855 = _2854 * (_2830 ? _2838 : (_2838 + (cbSceneParam._m0[72u].w * _2811)));
        _2856 = _2854 * (_2830 ? _2839 : (_2839 + (cbSceneParam._m0[72u].w * _2813)));
        _2857 = _2854 * (_2830 ? _2840 : (_2840 + (cbSceneParam._m0[72u].w * _2815)));
        _2858 = _2847 * 0.999000012874603271484375;
        _2868 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2868)
        {
            if ((cbInstanceData._m0[_244 + 7u].x + _2858) < 0.5)
            {
                _3024 = true;
                break;
            }
        }
        uint _2965 = _830 + uint(_2827.w);
        if ((cbInstanceData._m0[_2965].w < 1.0) && ((cbInstanceData._m0[_2965].w + _2858) < 0.5))
        {
            _3024 = true;
            break;
        }
        if ((_2851 + 1.0) < _2849.x)
        {
            _3024 = true;
            break;
        }
        _3024 = false;
        break;
    }
    float _3229;
    if (_3024)
    {
        discard_state = true;
        _3229 = 0.0;
    }
    else
    {
        _3229 = cbInstanceData._m0[_2690].w;
    }
    SV_Target.x = _2855;
    SV_Target.y = _2856;
    SV_Target.z = _2857;
    SV_Target.w = _3229;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2690].w;
    discard_exit();
}


