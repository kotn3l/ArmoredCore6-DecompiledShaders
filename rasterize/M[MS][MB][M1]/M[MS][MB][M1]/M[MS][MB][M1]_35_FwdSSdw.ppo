#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1249;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _220 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _221 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _222 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _228 = inversesqrt(dot(vec3(_220, _221, _222), vec3(_220, _221, _222)));
    float _229 = _228 * _220;
    float _230 = _228 * _221;
    float _231 = _228 * _222;
    float _235 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _236 = _235 * NORMAL.x;
    float _237 = _235 * NORMAL.y;
    float _238 = _235 * NORMAL.z;
    float _242 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _243 = _242 * TANGENT.x;
    float _244 = _242 * TANGENT.y;
    float _245 = _242 * TANGENT.z;
    float _254 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _256 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _257 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3600 = isnan(0.0) ? _254 : (isnan(_254) ? 0.0 : max(_254, 0.0));
    float _3611 = isnan(0.0) ? _256 : (isnan(_256) ? 0.0 : max(_256, 0.0));
    float _3622 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    uint _267 = uint(roundEven(NORMAL.w)) * 13u;
    uint _272 = _267 + 1u;
    uint _276 = _267 + 2u;
    float _285 = sqrt(((cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x) + (cbInstanceData._m0[_267].x * cbInstanceData._m0[_267].x)) + (cbInstanceData._m0[_276].x * cbInstanceData._m0[_276].x));
    float _286 = _285 * TEXCOORD.z;
    float _287 = _285 * TEXCOORD.w;
    vec4 _300 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _286) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _287) + cbTextureTilingScale._m0[13u].w));
    vec4 _323 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _328 = _323.x * cbMtdParam._m0[9u].x;
    float _329 = _323.y * cbMtdParam._m0[9u].y;
    float _330 = _323.z * cbMtdParam._m0[9u].z;
    float _334 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _300.x) * _328;
    float _337 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _300.y) * _329;
    float _340 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _300.z) * _330;
    float _347 = ((_328 - _334) * (isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0)))) + _334;
    float _348 = ((_329 - _337) * (isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0)))) + _337;
    float _349 = ((_330 - _340) * (isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0)))) + _340;
    vec4 _367 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _286) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _287) + cbTextureTilingScale._m0[20u].w));
    vec4 _393 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _397 = _393.z;
    float _401 = (_393.x * 2.0) + (-1.0);
    float _402 = (_393.y * 2.0) + (-1.0);
    float _403 = dot(vec2(_401, _402), vec2(_401, _402));
    float _3633 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _408 = sqrt(1.0 - (isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0))));
    float _413 = _401 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_367.x * 2.0) + (-1.0)));
    float _414 = _402 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_367.y * 2.0) + (-1.0)));
    float _417 = fma(_408, _236, fma(_414, _243, _413 * _229));
    float _420 = fma(_408, _237, fma(_414, _244, _413 * _230));
    float _423 = fma(_408, _238, fma(_414, _245, _413 * _231));
    float _427 = inversesqrt(dot(vec3(_417, _420, _423), vec3(_417, _420, _423)));
    vec4 _463 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _286) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _287) + cbTextureTilingScale._m0[11u].w));
    float _465 = _463.x;
    float _466 = 1.0 - _465;
    float _473 = ((_465 - _466) * cbMtdParam._m0[24u].z) + _466;
    float _475 = (cbMtdParam._m0[19u].x + dot(vec4(_427 * _417, _427 * _420, _427 * _423, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_473 * cbMtdParam._m0[21u].z);
    float _3644 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _476 = isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0));
    float _478 = (-0.0) - cbMtdParam._m0[24u].x;
    float _480 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _481 = isnan(1.0) ? _480 : (isnan(_480) ? 1.0 : min(_480, 1.0));
    float _488 = _476 - ((_476 * TEXCOORD_8.x) * _481);
    float _489 = _476 - ((_476 * TEXCOORD_8.y) * _481);
    float _490 = _476 - ((_476 * TEXCOORD_8.z) * _481);
    float _497 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _501 = ((isnan(0.0) ? _497 : (isnan(_497) ? 0.0 : min(_497, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _509 = (_501 - (((_473 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _501))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3675 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    float _510 = isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0));
    float _514 = ((_488 * (cbMtdParam._m0[17u].x - _347)) * _510) + _347;
    float _515 = ((_489 * (cbMtdParam._m0[17u].y - _348)) * _510) + _348;
    float _516 = ((_490 * (cbMtdParam._m0[17u].z - _349)) * _510) + _349;
    vec4 _528 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _286) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _287) + cbTextureTilingScale._m0[19u].w));
    float _530 = _528.x;
    float _531 = 1.0 - _530;
    float _558 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_530 - _531) * cbMtdParam._m0[24u].w) + _531) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3686 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _559 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
    float _567 = ((((cbMtdParam._m0[10u].x - _514) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _559) + _514;
    float _568 = ((((cbMtdParam._m0[10u].y - _515) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _559) + _515;
    float _569 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _516)) * _559) + _516;
    vec4 _582 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _584 = _582.x;
    float _587 = _584 - ((_584 * _488) * _510);
    float _589 = _587 - (_587 * _559);
    float _594 = (((_367.z - _397) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _397;
    vec4 _608 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _286) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _287) + cbTextureTilingScale._m0[15u].w));
    float _615 = (_608.x * 2.0) + (-1.0);
    float _616 = (_608.y * 2.0) + (-1.0);
    float _617 = dot(vec2(_615, _616), vec2(_615, _616));
    float _3697 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _626 = (((_608.z - _594) * _488) * _510) + _594;
    float _629 = ((cbMtdParam._m0[23u].y - _626) * _559) + _626;
    vec4 _648 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _286) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _287) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _654 = (_648.x * 2.0) + (-1.0);
    float _655 = (_648.y * 2.0) + (-1.0);
    float _656 = dot(vec2(_654, _655), vec2(_654, _655));
    float _3708 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _676 = (((cbMtdParam._m0[21u].x * _413) + ((_615 - _413) * _488)) * _510) + _413;
    float _677 = (((cbMtdParam._m0[21u].x * _414) + ((_616 - _414) * _489)) * _510) + _414;
    float _678 = (((sqrt(1.0 - (isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0)))) - _408) * _490) * _510) + _408;
    float _689 = (((_654 - _676) + (_676 * cbMtdParam._m0[22u].z)) * _559) + _676;
    float _690 = (((_655 - _677) + (_677 * cbMtdParam._m0[22u].z)) * _559) + _677;
    float _691 = ((sqrt(1.0 - (isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0)))) - _678) * _559) + _678;
    float _693 = cbMtdParam._m0[22u].x + _393.w;
    float _696 = fma(_691, _236, fma(_690, _243, _689 * _229));
    float _699 = fma(_691, _237, fma(_690, _244, _689 * _230));
    float _702 = fma(_691, _238, fma(_690, _245, _689 * _231));
    float _706 = inversesqrt(dot(vec3(_696, _699, _702), vec3(_696, _699, _702)));
    float _707 = _706 * _696;
    float _708 = _706 * _699;
    float _709 = _706 * _702;
    float _3719 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _710 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
    float _3730 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _3741 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _3752 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _3763 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _3774 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
    float _715 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
    float _729 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _769 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _779 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _769);
    float _780 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _769);
    float _781 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _769);
    float _785 = inversesqrt(dot(vec3(_779, _780, _781), vec3(_779, _780, _781)));
    float _786 = _779 * _785;
    float _787 = _780 * _785;
    float _788 = _781 * _785;
    float _794 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _795 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _816 = fma(_709, cbSceneParam._m0[5u].z, fma(_708, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _707));
    float _819 = fma(_709, cbSceneParam._m0[6u].z, fma(_708, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _707));
    float _822 = fma(_709, cbSceneParam._m0[7u].z, fma(_708, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _707));
    uint _836 = (_267 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _842 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0)))) * cbInstanceData._m0[_836].x;
    float _843 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0)))) * cbInstanceData._m0[_836].y;
    float _844 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0)))) * cbInstanceData._m0[_836].z;
    float _3785 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
    float _845 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
    float _3796 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
    float _846 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
    float _3807 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
    float _847 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
    float _848 = 1.0 - _715;
    float _849 = _845 * _848;
    float _850 = _846 * _848;
    float _851 = _847 * _848;
    float _856 = (_845 + (-0.039999999105930328369140625)) * _715;
    float _857 = (_846 + (-0.039999999105930328369140625)) * _715;
    float _858 = (_847 + (-0.039999999105930328369140625)) * _715;
    float _859 = _856 + 0.039999999105930328369140625;
    float _861 = _857 + 0.039999999105930328369140625;
    float _862 = _858 + 0.039999999105930328369140625;
    vec4 _871 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _794, cbSceneParam._m0[86u].y * _795));
    float _875 = ((isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0))) * TEXCOORD_5.w) * _871.x;
    float _876 = dot(vec3(_707, _708, _709), vec3(_786, _787, _788));
    float _879 = _876 * 2.0;
    float _883 = (_879 * _707) - _786;
    float _884 = (_879 * _708) - _787;
    float _885 = (_879 * _709) - _788;
    float _889 = abs(dot(vec3(_786, _787, _788), vec3(_707, _708, _709)));
    float _3818 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
    float _891 = sqrt(_710);
    float _904 = exp2((_891 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_891 * 3.0));
    float _910 = (1.0 - _904) * ((_891 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _911 = _904 * _891;
    float _939 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _943 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _947 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1248;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _973 = fma(_947, cbModelParam._m0[26u].z, fma(_943, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _939));
        float _977 = fma(_947, cbModelParam._m0[27u].z, fma(_943, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _939));
        float _981 = fma(_947, cbModelParam._m0[28u].z, fma(_943, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _939));
        float _1006 = _939 + _707;
        float _1007 = _943 + _708;
        float _1008 = _947 + _709;
        float _1018 = fma(_1008, cbModelParam._m0[26u].z, fma(_1007, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1006)) - _973;
        float _1019 = fma(_1008, cbModelParam._m0[27u].z, fma(_1007, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1006)) - _977;
        float _1020 = fma(_1008, cbModelParam._m0[28u].z, fma(_1007, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1006)) - _981;
        float _1024 = inversesqrt(dot(vec3(_1018, _1019, _1020), vec3(_1018, _1019, _1020)));
        float _1037 = ((_1024 * _1018) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_973 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1038 = ((_1024 * _1019) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_977 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1039 = ((_1024 * _1020) / cbModelParam._m0[34u].z) + ((((((_981 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1042 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1037, _1038, _1039), 0.0);
        vec4 _1049 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1037, _1038, _1039), 0.0);
        vec4 _1056 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1037, _1038, _1039), 0.0);
        vec4 _1063 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1037, _1038, _1039), 0.0);
        float _1076 = exp2((_1042.w + (-0.5)) * 20.0) * 2.0;
        float _1077 = _1076 * (_1042.x + (-0.5));
        float _1078 = _1076 * (_1042.y + (-0.5));
        float _1079 = _1076 * (_1042.z + (-0.5));
        float _1086 = exp2((_1049.w + (-0.5)) * 20.0) * 2.0;
        float _1087 = _1086 * (_1049.x + (-0.5));
        float _1088 = _1086 * (_1049.y + (-0.5));
        float _1089 = _1086 * (_1049.z + (-0.5));
        float _1096 = exp2((_1056.w + (-0.5)) * 20.0) * 2.0;
        float _1097 = _1096 * (_1056.x + (-0.5));
        float _1098 = _1096 * (_1056.y + (-0.5));
        float _1099 = _1096 * (_1056.z + (-0.5));
        float _1106 = exp2((_1063.w + (-0.5)) * 20.0) * 2.0;
        float _1107 = _1106 * (_1063.x + (-0.5));
        float _1108 = _1106 * (_1063.y + (-0.5));
        float _1109 = _1106 * (_1063.z + (-0.5));
        float _1110 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1111 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1112 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1113 = _1077 * 0.5;
        float _1114 = _1087 * 0.5;
        float _1115 = _1097 * 0.5;
        float _1116 = dot(vec3(_1113, _1114, _1115), vec3(_1113, _1114, _1115));
        float _1121 = (_1116 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1116);
        float _1130 = (dot(vec3(_707, _708, _709), vec3(_1121 * _1113, _1121 * _1114, _1121 * _1115)) + 1.0) * 0.5;
        float _3844 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1140 = sqrt(((_1114 * _1114) + (_1113 * _1113)) + (_1115 * _1115)) / (_1110 + 9.9999997473787516355514526367188e-06);
        float _3855 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1141 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
        float _1142 = _1141 * 2.0;
        float _1146 = (1.0 - _1141) / (_1141 + 1.0);
        float _3866 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1147 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
        float _1156 = ((((1.0 - _1147) * (_1142 + 2.0)) * exp2(log2(isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0))) * (_1142 + 1.0))) + _1147) * _1110;
        float _1157 = _1078 * 0.5;
        float _1158 = _1088 * 0.5;
        float _1159 = _1098 * 0.5;
        float _1160 = dot(vec3(_1157, _1158, _1159), vec3(_1157, _1158, _1159));
        float _1165 = (_1160 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1160);
        float _1173 = (dot(vec3(_707, _708, _709), vec3(_1165 * _1157, _1165 * _1158, _1165 * _1159)) + 1.0) * 0.5;
        float _3877 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1182 = sqrt(((_1158 * _1158) + (_1157 * _1157)) + (_1159 * _1159)) / (_1111 + 9.9999997473787516355514526367188e-06);
        float _3888 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1183 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
        float _1184 = _1183 * 2.0;
        float _1188 = (1.0 - _1183) / (_1183 + 1.0);
        float _3899 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1189 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
        float _1198 = ((((1.0 - _1189) * (_1184 + 2.0)) * exp2(log2(isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0))) * (_1184 + 1.0))) + _1189) * _1111;
        float _1199 = _1079 * 0.5;
        float _1200 = _1089 * 0.5;
        float _1201 = _1099 * 0.5;
        float _1202 = dot(vec3(_1199, _1200, _1201), vec3(_1199, _1200, _1201));
        float _1207 = (_1202 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1202);
        float _1215 = (dot(vec3(_707, _708, _709), vec3(_1207 * _1199, _1207 * _1200, _1207 * _1201)) + 1.0) * 0.5;
        float _3910 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1224 = sqrt(((_1200 * _1200) + (_1199 * _1199)) + (_1201 * _1201)) / (_1112 + 9.9999997473787516355514526367188e-06);
        float _3921 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1225 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
        float _1226 = _1225 * 2.0;
        float _1230 = (1.0 - _1225) / (_1225 + 1.0);
        float _3932 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1231 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
        float _1240 = ((((1.0 - _1231) * (_1226 + 2.0)) * exp2(log2(isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0))) * (_1226 + 1.0))) + _1231) * _1112;
        _1248 = _1079;
        _1250 = _1078;
        _1251 = _1077;
        _1252 = _1089;
        _1253 = _1088;
        _1254 = _1087;
        _1255 = _1099;
        _1256 = _1098;
        _1257 = _1097;
        _1258 = _1112;
        _1259 = _1111;
        _1260 = _1110;
        _1261 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0)));
        _1262 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0)));
        _1263 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0)));
    }
    else
    {
        _1248 = _1249;
        _1250 = _1249;
        _1251 = _1249;
        _1252 = _1249;
        _1253 = _1249;
        _1254 = _1249;
        _1255 = _1249;
        _1256 = _1249;
        _1257 = _1249;
        _1258 = _1249;
        _1259 = _1249;
        _1260 = _1249;
        _1261 = 0.0;
        _1262 = 0.0;
        _1263 = 0.0;
    }
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1288 = fma(_947, cbModelParam._m0[30u].z, fma(_943, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _939));
        float _1292 = fma(_947, cbModelParam._m0[31u].z, fma(_943, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _939));
        float _1296 = fma(_947, cbModelParam._m0[32u].z, fma(_943, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _939));
        float _1319 = _939 + _707;
        float _1320 = _943 + _708;
        float _1321 = _947 + _709;
        float _1331 = fma(_1321, cbModelParam._m0[30u].z, fma(_1320, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1319)) - _1288;
        float _1332 = fma(_1321, cbModelParam._m0[31u].z, fma(_1320, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1319)) - _1292;
        float _1333 = fma(_1321, cbModelParam._m0[32u].z, fma(_1320, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1319)) - _1296;
        float _1337 = inversesqrt(dot(vec3(_1331, _1332, _1333), vec3(_1331, _1332, _1333)));
        float _1350 = ((_1337 * _1331) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1288 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1351 = ((_1337 * _1332) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1292 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1352 = ((_1337 * _1333) / cbModelParam._m0[35u].z) + ((((((_1296 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1354 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1350, _1351, _1352), 0.0);
        vec4 _1361 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1350, _1351, _1352), 0.0);
        vec4 _1368 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1350, _1351, _1352), 0.0);
        vec4 _1375 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1350, _1351, _1352), 0.0);
        float _1387 = exp2((_1354.w + (-0.5)) * 20.0) * 2.0;
        float _1388 = _1387 * (_1354.x + (-0.5));
        float _1389 = _1387 * (_1354.y + (-0.5));
        float _1390 = _1387 * (_1354.z + (-0.5));
        float _1397 = exp2((_1361.w + (-0.5)) * 20.0) * 2.0;
        float _1398 = _1397 * (_1361.x + (-0.5));
        float _1399 = _1397 * (_1361.y + (-0.5));
        float _1400 = _1397 * (_1361.z + (-0.5));
        float _1407 = exp2((_1368.w + (-0.5)) * 20.0) * 2.0;
        float _1408 = _1407 * (_1368.x + (-0.5));
        float _1409 = _1407 * (_1368.y + (-0.5));
        float _1410 = _1407 * (_1368.z + (-0.5));
        float _1417 = exp2((_1375.w + (-0.5)) * 20.0) * 2.0;
        float _1418 = _1417 * (_1375.x + (-0.5));
        float _1419 = _1417 * (_1375.y + (-0.5));
        float _1420 = _1417 * (_1375.z + (-0.5));
        float _1421 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1422 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1423 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1424 = _1388 * 0.5;
        float _1425 = _1398 * 0.5;
        float _1426 = _1408 * 0.5;
        float _1427 = dot(vec3(_1424, _1425, _1426), vec3(_1424, _1425, _1426));
        float _1432 = (_1427 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1427);
        float _1440 = (dot(vec3(_707, _708, _709), vec3(_1432 * _1424, _1432 * _1425, _1432 * _1426)) + 1.0) * 0.5;
        float _3973 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1449 = sqrt(((_1425 * _1425) + (_1424 * _1424)) + (_1426 * _1426)) / (_1421 + 9.9999997473787516355514526367188e-06);
        float _3984 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1450 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
        float _1451 = _1450 * 2.0;
        float _1455 = (1.0 - _1450) / (_1450 + 1.0);
        float _3995 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1456 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
        float _1465 = ((((1.0 - _1456) * (_1451 + 2.0)) * exp2(log2(isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0))) * (_1451 + 1.0))) + _1456) * _1421;
        float _1466 = _1389 * 0.5;
        float _1467 = _1399 * 0.5;
        float _1468 = _1409 * 0.5;
        float _1469 = dot(vec3(_1466, _1467, _1468), vec3(_1466, _1467, _1468));
        float _1474 = (_1469 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1469);
        float _1482 = (dot(vec3(_707, _708, _709), vec3(_1474 * _1466, _1474 * _1467, _1474 * _1468)) + 1.0) * 0.5;
        float _4006 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1491 = sqrt(((_1467 * _1467) + (_1466 * _1466)) + (_1468 * _1468)) / (_1422 + 9.9999997473787516355514526367188e-06);
        float _4017 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1492 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
        float _1493 = _1492 * 2.0;
        float _1497 = (1.0 - _1492) / (_1492 + 1.0);
        float _4028 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
        float _1498 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
        float _1507 = ((((1.0 - _1498) * (_1493 + 2.0)) * exp2(log2(isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0))) * (_1493 + 1.0))) + _1498) * _1422;
        float _1508 = _1390 * 0.5;
        float _1509 = _1400 * 0.5;
        float _1510 = _1410 * 0.5;
        float _1511 = dot(vec3(_1508, _1509, _1510), vec3(_1508, _1509, _1510));
        float _1516 = (_1511 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1511);
        float _1524 = (dot(vec3(_707, _708, _709), vec3(_1516 * _1508, _1516 * _1509, _1516 * _1510)) + 1.0) * 0.5;
        float _4039 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
        float _1533 = sqrt(((_1509 * _1509) + (_1508 * _1508)) + (_1510 * _1510)) / (_1423 + 9.9999997473787516355514526367188e-06);
        float _4050 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1534 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
        float _1535 = _1534 * 2.0;
        float _1539 = (1.0 - _1534) / (_1534 + 1.0);
        float _4061 = isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0));
        float _1540 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
        float _1549 = ((((1.0 - _1540) * (_1535 + 2.0)) * exp2(log2(isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0))) * (_1535 + 1.0))) + _1540) * _1423;
        _1557 = _1390;
        _1558 = _1389;
        _1559 = _1388;
        _1560 = _1400;
        _1561 = _1399;
        _1562 = _1398;
        _1563 = _1410;
        _1564 = _1409;
        _1565 = _1408;
        _1566 = _1423;
        _1567 = _1422;
        _1568 = _1421;
        _1569 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0)));
        _1570 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0)));
        _1571 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0)));
    }
    else
    {
        _1557 = _1249;
        _1558 = _1249;
        _1559 = _1249;
        _1560 = _1249;
        _1561 = _1249;
        _1562 = _1249;
        _1563 = _1249;
        _1564 = _1249;
        _1565 = _1249;
        _1566 = _1249;
        _1567 = _1249;
        _1568 = _1249;
        _1569 = 0.0;
        _1570 = 0.0;
        _1571 = 0.0;
    }
    float _1581 = (cbModelParam._m0[1u].x * (_1569 - _1261)) + _1261;
    float _1582 = (cbModelParam._m0[1u].x * (_1570 - _1262)) + _1262;
    float _1583 = (cbModelParam._m0[1u].x * (_1571 - _1263)) + _1263;
    float _1604 = fma(_1583, cbSceneParam._m0[89u].z, fma(_1582, cbSceneParam._m0[89u].y, _1581 * cbSceneParam._m0[89u].x));
    float _1607 = fma(_1583, cbSceneParam._m0[90u].z, fma(_1582, cbSceneParam._m0[90u].y, _1581 * cbSceneParam._m0[90u].x));
    float _1610 = fma(_1583, cbSceneParam._m0[91u].z, fma(_1582, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1581));
    float _1625 = _883 * 0.5;
    float _1626 = _884 * 0.5;
    float _1627 = _885 * 0.5;
    float _1628 = dot(vec4(_1625, _1626, _1627, 1.0), vec4(_1559, _1562, _1565, _1568));
    float _1631 = dot(vec4(_1625, _1626, _1627, 1.0), vec4(_1558, _1561, _1564, _1567));
    float _1634 = dot(vec4(_1625, _1626, _1627, 1.0), vec4(_1557, _1560, _1563, _1566));
    float _1668;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1641 = dot(vec4(_1625, _1626, _1627, 1.0), vec4(_1248, _1252, _1255, _1258));
        float _1645 = dot(vec4(_1625, _1626, _1627, 1.0), vec4(_1250, _1253, _1256, _1259));
        float _1649 = dot(vec4(_1625, _1626, _1627, 1.0), vec4(_1251, _1254, _1257, _1260));
        float _1656 = dot(vec4(cbModelParam._m0[39u]), vec4(_1625, _1626, _1627, 1.0));
        _1668 = dot(vec3(isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0)), isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0)), isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1656) ? 0.0 : (isnan(0.0) ? _1656 : max(0.0, _1656))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1668 = 1.0;
    }
    float _1679;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1670 = dot(vec4(cbModelParam._m0[40u]), vec4(_1625, _1626, _1627, 1.0));
        _1679 = dot(vec3(isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0)), isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0)), isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1670) ? 0.0 : (isnan(0.0) ? _1670 : max(0.0, _1670))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1679 = 1.0;
    }
    float _1683 = (_1679 * cbModelParam._m0[1u].x) + (_1668 * (1.0 - cbModelParam._m0[1u].x));
    float _1693 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _710);
    float _1694 = isnan(_1693) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1693 : min(cbModelParam._m0[25u].z, _1693));
    float _1775;
    float _1777;
    float _1779;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1742 = fma(_947, cbModelParam._m0[13u].z, fma(_943, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _939)) + cbModelParam._m0[13u].w;
        float _1746 = fma(_947, cbModelParam._m0[14u].z, fma(_943, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _939)) + cbModelParam._m0[14u].w;
        float _1750 = fma(_947, cbModelParam._m0[15u].z, fma(_943, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _939)) + cbModelParam._m0[15u].w;
        float _1753 = fma(_885, cbModelParam._m0[13u].z, fma(_884, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _883));
        float _1756 = fma(_885, cbModelParam._m0[14u].z, fma(_884, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _883));
        float _1759 = fma(_885, cbModelParam._m0[15u].z, fma(_884, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _883));
        float _1787;
        if (_1753 > 0.0)
        {
            _1787 = abs((1.0 - _1742) / _1753);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1753 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1742 + 1.0) / _1753);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1787 = frontier_phi_14_12_ladder;
        }
        float _2012;
        if (_1756 > 0.0)
        {
            _2012 = abs((1.0 - _1746) / _1756);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1756 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1746 + 1.0) / _1756);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2012 = frontier_phi_23_19_ladder;
        }
        float _2269;
        if (_1759 > 0.0)
        {
            _2269 = abs((1.0 - _1750) / _1759);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1759 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1750 + 1.0) / _1759);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2269 = frontier_phi_35_30_ladder;
        }
        float _2271 = isnan(_2012) ? _1787 : (isnan(_1787) ? _2012 : min(_1787, _2012));
        float _2272 = isnan(_2269) ? _2271 : (isnan(_2271) ? _2269 : min(_2271, _2269));
        float _2276 = (_2272 * _1753) + _1742;
        float _2277 = (_2272 * _1756) + _1746;
        float _2278 = (_2272 * _1759) + _1750;
        float _2279 = _2272 * 9.9999997473787516355514526367188e-05;
        float _2281 = (-1.0) - _2279;
        float _2283 = _2279 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2278 > _2283) || ((_2278 < _2281) || ((_2277 > _2283) || ((_2277 < _2281) || ((_2276 < _2281) || (_2276 > _2283))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2406 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2278, cbModelParam._m0[9u].z, fma(_2277, cbModelParam._m0[9u].y, _2276 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2278, cbModelParam._m0[10u].z, fma(_2277, cbModelParam._m0[10u].y, _2276 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2278, cbModelParam._m0[11u].z, fma(_2277, cbModelParam._m0[11u].y, _2276 * cbModelParam._m0[11u].x))), _1694);
            frontier_phi_13_35_ladder = _2406.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2406.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2406.x * cbModelParam._m0[1u].y;
        }
        _1775 = frontier_phi_13_35_ladder_2;
        _1777 = frontier_phi_13_35_ladder_1;
        _1779 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1763 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_883, _884, _885), _1694);
        _1775 = _1763.x * cbModelParam._m0[1u].y;
        _1777 = _1763.y * cbModelParam._m0[1u].y;
        _1779 = _1763.z * cbModelParam._m0[1u].y;
    }
    float _1783 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _710);
    float _1784 = isnan(_1783) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1783 : min(cbModelParam._m0[25u].w, _1783));
    float _1874;
    float _1876;
    float _1878;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1838 = fma(_947, cbModelParam._m0[21u].z, fma(_943, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _939)) + cbModelParam._m0[21u].w;
        float _1842 = fma(_947, cbModelParam._m0[22u].z, fma(_943, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _939)) + cbModelParam._m0[22u].w;
        float _1846 = fma(_947, cbModelParam._m0[23u].z, fma(_943, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _939)) + cbModelParam._m0[23u].w;
        float _1849 = fma(_885, cbModelParam._m0[21u].z, fma(_884, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _883));
        float _1852 = fma(_885, cbModelParam._m0[22u].z, fma(_884, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _883));
        float _1855 = fma(_885, cbModelParam._m0[23u].z, fma(_884, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _883));
        float _2017;
        if (_1849 > 0.0)
        {
            _2017 = abs((1.0 - _1838) / _1849);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1849 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1838 + 1.0) / _1849);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2017 = frontier_phi_25_21_ladder;
        }
        float _2296;
        if (_1852 > 0.0)
        {
            _2296 = abs((1.0 - _1842) / _1852);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1852 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1842 + 1.0) / _1852);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2296 = frontier_phi_37_32_ladder;
        }
        float _2509;
        if (_1855 > 0.0)
        {
            _2509 = abs((1.0 - _1846) / _1855);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1855 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1846 + 1.0) / _1855);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2509 = frontier_phi_46_43_ladder;
        }
        float _2511 = isnan(_2296) ? _2017 : (isnan(_2017) ? _2296 : min(_2017, _2296));
        float _2512 = isnan(_2509) ? _2511 : (isnan(_2511) ? _2509 : min(_2511, _2509));
        float _2516 = (_2512 * _1849) + _1838;
        float _2517 = (_2512 * _1852) + _1842;
        float _2518 = (_2512 * _1855) + _1846;
        float _2519 = _2512 * 9.9999997473787516355514526367188e-05;
        float _2520 = (-1.0) - _2519;
        float _2522 = _2519 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2518 > _2522) || ((_2518 < _2520) || ((_2517 > _2522) || ((_2517 < _2520) || ((_2516 < _2520) || (_2516 > _2522))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2717 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2518, cbModelParam._m0[17u].z, fma(_2517, cbModelParam._m0[17u].y, _2516 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2518, cbModelParam._m0[18u].z, fma(_2517, cbModelParam._m0[18u].y, _2516 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2518, cbModelParam._m0[19u].z, fma(_2517, cbModelParam._m0[19u].y, _2516 * cbModelParam._m0[19u].x))), _1784);
            frontier_phi_22_46_ladder = _2717.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2717.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2717.x * cbModelParam._m0[1u].z;
        }
        _1874 = frontier_phi_22_46_ladder_2;
        _1876 = frontier_phi_22_46_ladder_1;
        _1878 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1858 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_883, _884, _885), _1784);
        _1874 = _1858.x * cbModelParam._m0[1u].z;
        _1876 = _1858.y * cbModelParam._m0[1u].z;
        _1878 = _1858.z * cbModelParam._m0[1u].z;
    }
    float _1891 = (((_910 * _859) + _911) * _875) * ((cbModelParam._m0[1u].w * (_1874 - _1775)) + _1775);
    float _1893 = (((_910 * _861) + _911) * _875) * ((cbModelParam._m0[1u].w * (_1876 - _1777)) + _1777);
    float _1895 = (((_910 * _862) + _911) * _875) * ((cbModelParam._m0[1u].w * (_1878 - _1779)) + _1779);
    float _1898 = fma(_1895, cbSceneParam._m0[89u].z, fma(_1893, cbSceneParam._m0[89u].y, _1891 * cbSceneParam._m0[89u].x));
    float _1901 = fma(_1895, cbSceneParam._m0[90u].z, fma(_1893, cbSceneParam._m0[90u].y, _1891 * cbSceneParam._m0[90u].x));
    float _1904 = fma(_1895, cbSceneParam._m0[91u].z, fma(_1893, cbSceneParam._m0[91u].y, _1891 * cbSceneParam._m0[91u].x));
    vec4 _1912 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_794, _795));
    float _1914 = _1912.w;
    float _1926 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1914);
    float _1927 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1914);
    float _1928 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1914);
    uvec4 _1932 = floatBitsToUint(cbInstanceData._m0[_267 + 5u]);
    uint _1934 = _1932.x * 14u;
    uint _1935 = _1934 + 13u;
    float _1942 = _875 + (-1.0);
    float _1947 = (cbLight._m0[_1935].x * _1942) + 1.0;
    float _1948 = (cbLight._m0[_1935].y * _1942) + 1.0;
    float _1949 = (cbLight._m0[_1935].z * _1942) + 1.0;
    float _1950 = (cbLight._m0[_1935].w * _1942) + 1.0;
    uint _1951 = _1934 + 5u;
    float _1957 = isnan(1.0) ? _1948 : (isnan(_1948) ? 1.0 : min(_1948, 1.0));
    uint _1961 = _1934 + 4u;
    float _1971 = isnan(1.0) ? _1947 : (isnan(_1947) ? 1.0 : min(_1947, 1.0));
    uint _1975 = _1934 | 1u;
    float _1986 = dot(vec3(cbLight._m0[_1934].xyz), vec3(_707, _708, _709));
    float _1989 = dot(vec3(cbLight._m0[_1975].xyz), vec3(_707, _708, _709));
    float _4197 = isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0));
    float _4208 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
    float _1994 = (isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0))) * 0.3183098733425140380859375;
    float _1996 = (isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0))) * 0.3183098733425140380859375;
    float _2003 = ((cbLight._m0[_1951].x * _1957) * _1996) + (((cbLight._m0[_1961].x * _1926) * _1971) * _1994);
    float _2004 = ((_1957 * cbLight._m0[_1951].y) * _1996) + (((cbLight._m0[_1961].y * _1927) * _1971) * _1994);
    float _2005 = ((_1957 * cbLight._m0[_1951].z) * _1996) + (((cbLight._m0[_1961].z * _1928) * _1971) * _1994);
    uvec4 _2009 = floatBitsToUint(cbLight._m0[_1934 + 12u]);
    bool _2011 = _2009.x == 0u;
    float _2022;
    float _2024;
    float _2026;
    if (_2011)
    {
        _2022 = _2003;
        _2024 = _2004;
        _2026 = _2005;
    }
    else
    {
        uint _2030 = _1934 + 6u;
        float _2046 = (dot(vec3(cbLight._m0[_1934 + 2u].xyz), vec3(_707, _708, _709)) * 0.5) + 0.5;
        float _2047 = _2046 * _2046;
        float _4219 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
        float _2048 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
        float _2049 = isnan(1.0) ? _1949 : (isnan(_1949) ? 1.0 : min(_1949, 1.0));
        _2022 = (((cbLight._m0[_2030].x * 0.3183098733425140380859375) * _2048) * _2049) + _2003;
        _2024 = (((cbLight._m0[_2030].y * 0.3183098733425140380859375) * _2048) * _2049) + _2004;
        _2026 = (((cbLight._m0[_2030].z * 0.3183098733425140380859375) * _2048) * _2049) + _2005;
    }
    bool _2029 = _2009.y == 0u;
    float _2067;
    float _2069;
    float _2071;
    if (_2029)
    {
        _2067 = _2022;
        _2069 = _2024;
        _2071 = _2026;
    }
    else
    {
        uint _2240 = _1934 + 7u;
        float _2256 = (dot(vec3(cbLight._m0[_1934 + 3u].xyz), vec3(_707, _708, _709)) * 0.5) + 0.5;
        float _2257 = _2256 * _2256;
        float _4235 = isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0));
        float _2258 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
        float _2259 = isnan(1.0) ? _1950 : (isnan(_1950) ? 1.0 : min(_1950, 1.0));
        _2067 = (((cbLight._m0[_2240].x * 0.3183098733425140380859375) * _2258) * _2259) + _2022;
        _2069 = (((cbLight._m0[_2240].y * 0.3183098733425140380859375) * _2258) * _2259) + _2024;
        _2071 = (((cbLight._m0[_2240].z * 0.3183098733425140380859375) * _2258) * _2259) + _2026;
    }
    uint _2074 = _1934 + 8u;
    float _2087 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1934].w)) * _710) * 0.949999988079071044921875);
    float _2088 = _2087 * _2087;
    float _2089 = cbLight._m0[_1934].x + _786;
    float _2090 = cbLight._m0[_1934].y + _787;
    float _2091 = cbLight._m0[_1934].z + _788;
    float _2095 = inversesqrt(dot(vec3(_2089, _2090, _2091), vec3(_2089, _2090, _2091)));
    float _2096 = _2095 * _2089;
    float _2097 = _2095 * _2090;
    float _2098 = _2095 * _2091;
    float _2099 = dot(vec3(_707, _708, _709), vec3(cbLight._m0[_1934].xyz));
    float _4251 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
    float _2102 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
    float _4262 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
    float _2103 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
    float _2104 = dot(vec3(_707, _708, _709), vec3(_2096, _2097, _2098));
    float _4273 = isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0));
    float _2107 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
    float _2108 = dot(vec3(cbLight._m0[_1934].xyz), vec3(_2096, _2097, _2098));
    float _4284 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0));
    float _2112 = _2088 * _2088;
    float _2116 = ((_2107 * _2107) * (_2112 + (-1.0))) + 1.0;
    float _2124 = exp2(log2(1.0 - (isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0)))) * 5.0);
    float _2125 = 0.959999978542327880859375 - _856;
    float _2127 = 0.959999978542327880859375 - _857;
    float _2128 = 0.959999978542327880859375 - _858;
    float _2135 = 1.0 - _2088;
    float _2146 = (0.5 / (((_2103 * ((_2102 * _2135) + _2088)) + 9.9999999392252902907785028219223e-09) + (((_2103 * _2135) + _2088) * _2102))) * _2102;
    float _4295 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
    float _2148 = (isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0))) * (_2112 / ((_2116 * _2116) * 3.141590118408203125));
    uint _2162 = _1934 + 9u;
    float _2173 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1975].w)) * _710) * 0.949999988079071044921875);
    float _2174 = _2173 * _2173;
    float _2175 = cbLight._m0[_1975].x + _786;
    float _2176 = cbLight._m0[_1975].y + _787;
    float _2177 = cbLight._m0[_1975].z + _788;
    float _2181 = inversesqrt(dot(vec3(_2175, _2176, _2177), vec3(_2175, _2176, _2177)));
    float _2182 = _2181 * _2175;
    float _2183 = _2181 * _2176;
    float _2184 = _2181 * _2177;
    float _2185 = dot(vec3(_707, _708, _709), vec3(cbLight._m0[_1975].xyz));
    float _4306 = isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0));
    float _2188 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
    float _2189 = dot(vec3(_707, _708, _709), vec3(_2182, _2183, _2184));
    float _4317 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
    float _2192 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
    float _2193 = dot(vec3(cbLight._m0[_1975].xyz), vec3(_2182, _2183, _2184));
    float _4328 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
    float _2197 = _2174 * _2174;
    float _2201 = ((_2192 * _2192) * (_2197 + (-1.0))) + 1.0;
    float _2208 = exp2(log2(1.0 - (isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0)))) * 5.0);
    float _2215 = 1.0 - _2174;
    float _2225 = (0.5 / (((_2103 * ((_2188 * _2215) + _2174)) + 9.9999999392252902907785028219223e-09) + (((_2103 * _2215) + _2174) * _2188))) * _2188;
    float _4339 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
    float _2227 = (isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0))) * (_2197 / ((_2201 * _2201) * 3.141590118408203125));
    float _2237 = (((((_2208 * _2125) + _859) * cbLight._m0[_2162].x) * _2227) * _1957) + ((((cbLight._m0[_2074].x * _1926) * ((_2124 * _2125) + _859)) * _2148) * _1971);
    float _2238 = (((((_2208 * _2127) + _861) * cbLight._m0[_2162].y) * _2227) * _1957) + ((((cbLight._m0[_2074].y * _1927) * ((_2124 * _2127) + _861)) * _2148) * _1971);
    float _2239 = (((((_2208 * _2128) + _862) * cbLight._m0[_2162].z) * _2227) * _1957) + ((((cbLight._m0[_2074].z * _1928) * ((_2124 * _2128) + _862)) * _2148) * _1971);
    float _2301;
    float _2303;
    float _2305;
    if (_2011)
    {
        _2301 = _2237;
        _2303 = _2238;
        _2305 = _2239;
    }
    else
    {
        uint _2307 = _1934 + 2u;
        uint _2311 = _1934 + 10u;
        float _2325 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2307].w)) * _710) * 0.949999988079071044921875);
        float _2326 = _2325 * _2325;
        float _2327 = cbLight._m0[_2307].x + _786;
        float _2328 = cbLight._m0[_2307].y + _787;
        float _2329 = cbLight._m0[_2307].z + _788;
        float _2333 = inversesqrt(dot(vec3(_2327, _2328, _2329), vec3(_2327, _2328, _2329)));
        float _2334 = _2333 * _2327;
        float _2335 = _2333 * _2328;
        float _2336 = _2333 * _2329;
        float _2337 = dot(vec3(_707, _708, _709), vec3(cbLight._m0[_2307].xyz));
        float _4350 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
        float _2340 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
        float _2341 = dot(vec3(_707, _708, _709), vec3(_2334, _2335, _2336));
        float _4361 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0));
        float _2344 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
        float _2345 = dot(vec3(cbLight._m0[_2307].xyz), vec3(_2334, _2335, _2336));
        float _4372 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
        float _2349 = _2326 * _2326;
        float _2353 = ((_2344 * _2344) * (_2349 + (-1.0))) + 1.0;
        float _2360 = exp2(log2(1.0 - (isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0)))) * 5.0);
        float _2367 = 1.0 - _2326;
        float _2377 = (0.5 / (((_2103 * ((_2340 * _2367) + _2326)) + 9.9999999392252902907785028219223e-09) + (((_2103 * _2367) + _2326) * _2340))) * _2340;
        float _4383 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
        float _2379 = (isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0))) * (_2349 / ((_2353 * _2353) * 3.141590118408203125));
        float _2380 = isnan(1.0) ? _1949 : (isnan(_1949) ? 1.0 : min(_1949, 1.0));
        _2301 = (((((_2360 * _2125) + _859) * cbLight._m0[_2311].x) * _2379) * _2380) + _2237;
        _2303 = (((((_2360 * _2127) + _861) * cbLight._m0[_2311].y) * _2379) * _2380) + _2238;
        _2305 = (((((_2360 * _2128) + _862) * cbLight._m0[_2311].z) * _2379) * _2380) + _2239;
    }
    float _2415;
    float _2417;
    float _2419;
    if (_2029)
    {
        _2415 = _2301;
        _2417 = _2303;
        _2419 = _2305;
    }
    else
    {
        uint _2426 = _1934 + 3u;
        uint _2430 = _1934 + 11u;
        float _2444 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2426].w)) * _710) * 0.949999988079071044921875);
        float _2445 = _2444 * _2444;
        float _2446 = cbLight._m0[_2426].x + _786;
        float _2447 = cbLight._m0[_2426].y + _787;
        float _2448 = cbLight._m0[_2426].z + _788;
        float _2452 = inversesqrt(dot(vec3(_2446, _2447, _2448), vec3(_2446, _2447, _2448)));
        float _2453 = _2452 * _2446;
        float _2454 = _2452 * _2447;
        float _2455 = _2452 * _2448;
        float _2456 = dot(vec3(_707, _708, _709), vec3(cbLight._m0[_2426].xyz));
        float _4399 = isnan(0.0) ? _2456 : (isnan(_2456) ? 0.0 : max(_2456, 0.0));
        float _2459 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
        float _2460 = dot(vec3(_707, _708, _709), vec3(_2453, _2454, _2455));
        float _4410 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
        float _2463 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
        float _2464 = dot(vec3(cbLight._m0[_2426].xyz), vec3(_2453, _2454, _2455));
        float _4421 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
        float _2468 = _2445 * _2445;
        float _2472 = ((_2463 * _2463) * (_2468 + (-1.0))) + 1.0;
        float _2479 = exp2(log2(1.0 - (isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0)))) * 5.0);
        float _2486 = 1.0 - _2445;
        float _2496 = (0.5 / (((_2103 * ((_2459 * _2486) + _2445)) + 9.9999999392252902907785028219223e-09) + (((_2103 * _2486) + _2445) * _2459))) * _2459;
        float _4432 = isnan(0.0) ? _2496 : (isnan(_2496) ? 0.0 : max(_2496, 0.0));
        float _2498 = (isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0))) * (_2468 / ((_2472 * _2472) * 3.141590118408203125));
        float _2499 = isnan(1.0) ? _1950 : (isnan(_1950) ? 1.0 : min(_1950, 1.0));
        _2415 = (((((_2479 * _2125) + _859) * cbLight._m0[_2430].x) * _2498) * _2499) + _2301;
        _2417 = (((((_2479 * _2127) + _861) * cbLight._m0[_2430].y) * _2498) * _2499) + _2303;
        _2419 = (((((_2479 * _2128) + _862) * cbLight._m0[_2430].z) * _2498) * _2499) + _2305;
    }
    float _2634;
    float _2636;
    float _2638;
    float _2640;
    float _2642;
    float _2644;
    if (_1932.y == 0u)
    {
        float _2574 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2575 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2574;
        float _2576 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2574;
        float _2577 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2574;
        uvec4 _2589 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2590 = _2589.x;
        uint _2601 = uint((float(_2589.y) * floor(float(uint(cbSceneParam._m0[85u].y * _795) / _2590))) + floor(float(uint(cbSceneParam._m0[85u].x * _794) / _2590)));
        float _2611 = (log2(_2577 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2612 = isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0));
        uint _2615 = uint(isnan(14.0) ? _2612 : (isnan(_2612) ? 14.0 : min(_2612, 14.0)));
        uvec4 _2620 = texelFetch(g_lightClusterGridBuffer, int(((_2615 << 2u) + (_2601 << 6u)) >> 2u));
        uint _2621 = _2620.x;
        uint _2622 = _2589.z;
        float _2722;
        float _2724;
        float _2726;
        float _2728;
        float _2730;
        float _2732;
        if (((((1u << ((_2622 >> 4u) & 15u)) + 4294967295u) & _2621) == 0u) || ((_2622 & 240u) == 0u))
        {
            _2722 = 0.0;
            _2724 = 0.0;
            _2726 = 0.0;
            _2728 = 0.0;
            _2730 = 0.0;
            _2732 = 0.0;
        }
        else
        {
            float _2723;
            float _2725;
            float _2727;
            float _2729;
            float _2731;
            float _2733;
            float _2866 = 0.0;
            float _2867 = 0.0;
            float _2868 = 0.0;
            float _2869 = 0.0;
            float _2870 = 0.0;
            float _2871 = 0.0;
            uint _2872 = 0u;
            uint _2881;
            bool _2882;
            for (;;)
            {
                _2881 = texelFetch(g_lightClassification, int((((_2615 << 5u) + (_2601 << 9u)) + (_2872 << 2u)) >> 2u)).x;
                _2882 = _2881 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2882)
                {
                    frontier_phi_61_pred = _2866;
                    frontier_phi_61_pred_1 = _2871;
                    frontier_phi_61_pred_2 = _2870;
                    frontier_phi_61_pred_3 = _2869;
                    frontier_phi_61_pred_4 = _2868;
                    frontier_phi_61_pred_5 = _2867;
                }
                else
                {
                    float _2990;
                    float _2991;
                    float _2992;
                    float _2993;
                    float _2994;
                    float _2995;
                    uint _2996;
                    _2990 = _2866;
                    _2991 = _2867;
                    _2992 = _2868;
                    _2993 = _2869;
                    _2994 = _2870;
                    _2995 = _2871;
                    _2996 = _2881;
                    float _2922;
                    float _2923;
                    float _2924;
                    float _2925;
                    float _2926;
                    float _2927;
                    for (;;)
                    {
                        uint _3000 = uint(findLSB(_2996)) + (_2872 << 5u);
                        uint _2997 = (_2996 + 4294967295u) & _2996;
                        uint _3002 = _3000 * 48u;
                        vec4 _3016 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3002)).x, texelFetch(g_PointLightRenderingBuffer, int(_3002 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3002 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3002 + 3u)).x));
                        uint _3022 = (_3000 * 48u) + 4u;
                        vec4 _3035 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3022)).x, texelFetch(g_PointLightRenderingBuffer, int(_3022 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3022 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3022 + 3u)).x));
                        uint _3041 = (_3000 * 48u) + 8u;
                        vec3 _3052 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3041)).x, texelFetch(g_PointLightRenderingBuffer, int(_3041 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3041 + 2u)).x));
                        float _3056 = _3016.x - _2575;
                        float _3057 = _3016.y - _2576;
                        float _3058 = _3016.z - _2577;
                        float _3059 = dot(vec3(_3056, _3057, _3058), vec3(_3056, _3057, _3058));
                        float _3062 = inversesqrt(_3059);
                        float _3063 = _3062 * _3056;
                        float _3064 = _3062 * _3057;
                        float _3065 = _3062 * _3058;
                        float _3066 = dot(vec3(_816, _819, _822), vec3(_3063, _3064, _3065));
                        float _3071 = 1.0 - (_3059 * _3016.w);
                        float _4458 = isnan(0.0) ? _3071 : (isnan(_3071) ? 0.0 : max(_3071, 0.0));
                        float _3072 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
                        float _3073 = sqrt(_3059) * _3035.w;
                        float _3076 = 1.39999997615814208984375 / (_3073 + 1.39999997615814208984375);
                        float _3077 = _3076 * _3076;
                        float _3080 = ((1.0 - _3077) * _3066) + _3077;
                        float _3083 = _3073 * _3073;
                        float _3087 = ((isnan(0.0) ? _3080 : (isnan(_3080) ? 0.0 : max(_3080, 0.0))) * _3072) / ((_3083 * 0.699999988079071044921875) + 1.0);
                        float _3091 = (-0.0) - _2575;
                        float _3092 = (-0.0) - _2576;
                        float _3093 = (-0.0) - _2577;
                        float _3097 = inversesqrt(dot(vec3(_3091, _3092, _3093), vec3(_3091, _3092, _3093)));
                        float _3098 = _3097 * _3091;
                        float _3099 = _3097 * _3092;
                        float _3100 = _3097 * _3093;
                        float _3108 = exp2(log2(1.0 / ((_3083 * 3.5) + 5.0)) * 0.25);
                        float _3109 = 1.0 - _891;
                        float _3116 = sqrt(1.0 - ((1.0 - (_3109 * _3109)) * (1.0 - (_3108 * _3108))));
                        float _3117 = _3116 * _3116;
                        float _3118 = _3117 * _3117;
                        float _3119 = _3098 + _3063;
                        float _3120 = _3099 + _3064;
                        float _3121 = _3100 + _3065;
                        float _3125 = inversesqrt(dot(vec3(_3119, _3120, _3121), vec3(_3119, _3120, _3121)));
                        float _3129 = dot(vec3(_816, _819, _822), vec3(_3098, _3099, _3100));
                        float _4474 = isnan(0.0) ? _3129 : (isnan(_3129) ? 0.0 : max(_3129, 0.0));
                        float _3132 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
                        float _3133 = dot(vec3(_816, _819, _822), vec3(_3125 * _3119, _3125 * _3120, _3125 * _3121));
                        float _4485 = isnan(0.0) ? _3133 : (isnan(_3133) ? 0.0 : max(_3133, 0.0));
                        float _3136 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
                        float _3140 = ((_3136 * _3136) * (_3118 + (-1.0))) + 1.0;
                        float _3141 = _3076 * _3117;
                        float _3142 = _3141 * _3141;
                        float _3145 = ((1.0 - _3142) * _3066) + _3142;
                        float _4496 = isnan(0.0) ? _3145 : (isnan(_3145) ? 0.0 : max(_3145, 0.0));
                        float _3146 = isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0));
                        float _3147 = 1.0 - _3117;
                        float _3157 = (0.5 / (((_3146 * ((_3132 * _3147) + _3117)) + 9.9999999392252902907785028219223e-09) + (((_3146 * _3147) + _3117) * _3132))) * _3146;
                        float _4507 = isnan(0.0) ? _3157 : (isnan(_3157) ? 0.0 : max(_3157, 0.0));
                        float _3168 = (((_3118 * 3.1415927410125732421875) * (isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0)))) / ((_3140 * _3140) * ((_3083 * 2.1991131305694580078125) + 3.141590118408203125))) * _3072;
                        _2925 = (_3087 * _3035.x) + _2993;
                        _2926 = (_3087 * _3035.y) + _2994;
                        _2927 = (_3087 * _3035.z) + _2995;
                        _2922 = (_3168 * _3052.x) + _2990;
                        _2923 = (_3168 * _3052.y) + _2991;
                        _2924 = (_3168 * _3052.z) + _2992;
                        if (_2997 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2990 = _2922;
                            _2991 = _2923;
                            _2992 = _2924;
                            _2993 = _2925;
                            _2994 = _2926;
                            _2995 = _2927;
                            _2996 = _2997;
                        }
                    }
                    frontier_phi_61_pred = _2922;
                    frontier_phi_61_pred_1 = _2927;
                    frontier_phi_61_pred_2 = _2926;
                    frontier_phi_61_pred_3 = _2925;
                    frontier_phi_61_pred_4 = _2924;
                    frontier_phi_61_pred_5 = _2923;
                }
                _2723 = frontier_phi_61_pred;
                _2733 = frontier_phi_61_pred_1;
                _2731 = frontier_phi_61_pred_2;
                _2729 = frontier_phi_61_pred_3;
                _2727 = frontier_phi_61_pred_4;
                _2725 = frontier_phi_61_pred_5;
                uint _2873 = _2872 + 1u;
                if (_2873 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2866 = _2723;
                    _2867 = _2725;
                    _2868 = _2727;
                    _2869 = _2729;
                    _2870 = _2731;
                    _2871 = _2733;
                    _2872 = _2873;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2722 = _2723;
            _2724 = _2725;
            _2726 = _2727;
            _2728 = _2729;
            _2730 = _2731;
            _2732 = _2733;
        }
        uvec4 _2736 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2737 = _2736.z;
        uint _2739 = (_2737 >> 8u) & 15u;
        float _2834;
        float _2836;
        float _2838;
        float _2840;
        float _2842;
        float _2844;
        if (((4294967295u << _2739) & _2621) == 0u)
        {
            _2834 = _2722;
            _2836 = _2724;
            _2838 = _2726;
            _2840 = _2728;
            _2842 = _2730;
            _2844 = _2732;
        }
        else
        {
            float _2859 = inversesqrt(dot(vec3(_2575, _2576, _2577), vec3(_2575, _2576, _2577)));
            float _2860 = _2859 * _2575;
            float _2861 = _2859 * _2576;
            float _2862 = _2859 * _2577;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2739 < ((_2737 >> 12u) & 15u))
            {
                float _2835;
                float _2837;
                float _2839;
                float _2841;
                float _2843;
                float _2845;
                float _2973 = _2722;
                float _2974 = _2724;
                float _2975 = _2726;
                float _2976 = _2728;
                float _2977 = _2730;
                float _2978 = _2732;
                uint _2979 = _2739;
                uint _2988;
                bool _2989;
                for (;;)
                {
                    _2988 = texelFetch(g_lightClassification, int((((_2615 << 5u) + (_2601 << 9u)) + (_2979 << 2u)) >> 2u)).x;
                    _2989 = _2988 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2989)
                    {
                        frontier_phi_67_pred = _2976;
                        frontier_phi_67_pred_1 = _2977;
                        frontier_phi_67_pred_2 = _2978;
                        frontier_phi_67_pred_3 = _2975;
                        frontier_phi_67_pred_4 = _2974;
                        frontier_phi_67_pred_5 = _2973;
                    }
                    else
                    {
                        float _3173;
                        float _3174;
                        float _3175;
                        float _3176;
                        float _3177;
                        float _3178;
                        float _3466;
                        float _3467;
                        float _3468;
                        float _3469;
                        float _3470;
                        float _3471;
                        float _3186 = _2973;
                        float _3187 = _2974;
                        float _3188 = _2975;
                        float _3189 = _2976;
                        float _3190 = _2977;
                        float _3191 = _2978;
                        uint _3192 = _2988;
                        uint _3193;
                        vec4 _3218;
                        float _3219;
                        vec4 _3234;
                        vec3 _3246;
                        vec4 _3261;
                        vec4 _3276;
                        float _3322;
                        bool _3323;
                        for (;;)
                        {
                            uint _3203 = ((_2979 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3192));
                            _3193 = (_3192 + 4294967295u) & _3192;
                            uint _3205 = _3203 * 40u;
                            _3218 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3205)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3205 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3205 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3205 + 3u)).x));
                            _3219 = _3218.w;
                            uint _3221 = (_3203 * 40u) + 4u;
                            _3234 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3221)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 3u)).x));
                            uint _3236 = (_3203 * 40u) + 8u;
                            _3246 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3236)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3236 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3236 + 2u)).x));
                            uint _3248 = (_3203 * 40u) + 16u;
                            _3261 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3248)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 3u)).x));
                            uint _3263 = (_3203 * 40u) + 20u;
                            _3276 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3263)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 3u)).x));
                            uint _3278 = (_3203 * 40u) + 24u;
                            vec4 _3291 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3278)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3278 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3278 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3278 + 3u)).x));
                            uint _3297 = (_3203 * 40u) + 28u;
                            vec4 _3310 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3297)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 3u)).x));
                            _3322 = fma(_2577, _3310.z, fma(_2576, _3310.y, _3310.x * _2575)) + _3310.w;
                            _3323 = !((fma(_2577, _3291.z, fma(_2576, _3291.y, _3291.x * _2575)) + _3291.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3323)
                            {
                                float _3350 = _3218.x - _2575;
                                float _3351 = _3218.y - _2576;
                                float _3352 = _3218.z - _2577;
                                float _3353 = dot(vec3(_3350, _3351, _3352), vec3(_3350, _3351, _3352));
                                float _3356 = inversesqrt(_3353);
                                float _3357 = _3356 * _3350;
                                float _3358 = _3356 * _3351;
                                float _3359 = _3356 * _3352;
                                float _3363 = 1.0 - (_3353 / (_3219 * _3219));
                                float _4518 = isnan(0.0) ? _3363 : (isnan(_3363) ? 0.0 : max(_3363, 0.0));
                                float _3364 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
                                float _3368 = sqrt(_3353) * _3234.w;
                                float _3370 = 1.39999997615814208984375 / (_3368 + 1.39999997615814208984375);
                                float _3371 = _3370 * _3370;
                                float _3374 = ((1.0 - _3371) * dot(vec3(_3357, _3358, _3359), vec3(_816, _819, _822))) + _3371;
                                float _3377 = _3368 * _3368;
                                float _3381 = (fma(_2577, _3261.z, fma(_2576, _3261.y, _3261.x * _2575)) + _3261.w) / _3322;
                                float _3382 = (fma(_2577, _3276.z, fma(_2576, _3276.y, _3276.x * _2575)) + _3276.w) / _3322;
                                float _3386 = 1.0 - dot(vec2(_3381, _3382), vec2(_3381, _3382));
                                float _4534 = isnan(0.0) ? _3386 : (isnan(_3386) ? 0.0 : max(_3386, 0.0));
                                float _3387 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
                                float _3388 = _3387 * (((isnan(0.0) ? _3374 : (isnan(_3374) ? 0.0 : max(_3374, 0.0))) * _3364) / ((_3377 * 0.699999988079071044921875) + 1.0));
                                float _3400 = exp2(log2(1.0 / ((_3377 * 3.5) + 5.0)) * 0.25);
                                float _3401 = 1.0 - _891;
                                float _3408 = sqrt(1.0 - ((1.0 - (_3401 * _3401)) * (1.0 - (_3400 * _3400))));
                                float _3409 = _3408 * _3408;
                                float _3410 = _3409 * _3409;
                                float _3411 = _3357 - _2860;
                                float _3412 = _3358 - _2861;
                                float _3413 = _3359 - _2862;
                                float _3417 = inversesqrt(dot(vec3(_3411, _3412, _3413), vec3(_3411, _3412, _3413)));
                                float _3421 = dot(vec3(_816, _819, _822), vec3((-0.0) - _2860, (-0.0) - _2861, (-0.0) - _2862));
                                float _4545 = isnan(0.0) ? _3421 : (isnan(_3421) ? 0.0 : max(_3421, 0.0));
                                float _3424 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
                                float _3425 = dot(vec3(_816, _819, _822), vec3(_3417 * _3411, _3417 * _3412, _3417 * _3413));
                                float _4556 = isnan(0.0) ? _3425 : (isnan(_3425) ? 0.0 : max(_3425, 0.0));
                                float _3428 = isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0));
                                float _3432 = ((_3428 * _3428) * (_3410 + (-1.0))) + 1.0;
                                float _3433 = _3370 * _3409;
                                float _3434 = _3433 * _3433;
                                float _3440 = ((1.0 - _3434) * dot(vec3(_816, _819, _822), vec3(_3357, _3358, _3359))) + _3434;
                                float _4567 = isnan(0.0) ? _3440 : (isnan(_3440) ? 0.0 : max(_3440, 0.0));
                                float _3441 = isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0));
                                float _3442 = 1.0 - _3409;
                                float _3452 = (0.5 / (((_3441 * ((_3424 * _3442) + _3409)) + 9.9999999392252902907785028219223e-09) + (((_3441 * _3442) + _3409) * _3424))) * _3441;
                                float _4578 = isnan(0.0) ? _3452 : (isnan(_3452) ? 0.0 : max(_3452, 0.0));
                                float _3462 = (_3387 * _3364) * (((_3410 * 3.1415927410125732421875) * (isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0)))) / ((_3432 * _3432) * ((_3377 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3462 * _3246.x;
                                frontier_phi_73_pred_1 = _3462 * _3246.y;
                                frontier_phi_73_pred_2 = _3388 * _3234.z;
                                frontier_phi_73_pred_3 = _3388 * _3234.y;
                                frontier_phi_73_pred_4 = _3388 * _3234.x;
                                frontier_phi_73_pred_5 = _3462 * _3246.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3466 = frontier_phi_73_pred;
                            _3467 = frontier_phi_73_pred_1;
                            _3471 = frontier_phi_73_pred_2;
                            _3470 = frontier_phi_73_pred_3;
                            _3469 = frontier_phi_73_pred_4;
                            _3468 = frontier_phi_73_pred_5;
                            _3176 = _3469 + _3189;
                            _3177 = _3470 + _3190;
                            _3178 = _3471 + _3191;
                            _3173 = _3466 + _3186;
                            _3174 = _3467 + _3187;
                            _3175 = _3468 + _3188;
                            if (_3193 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3186 = _3173;
                                _3187 = _3174;
                                _3188 = _3175;
                                _3189 = _3176;
                                _3190 = _3177;
                                _3191 = _3178;
                                _3192 = _3193;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3176;
                        frontier_phi_67_pred_1 = _3177;
                        frontier_phi_67_pred_2 = _3178;
                        frontier_phi_67_pred_3 = _3175;
                        frontier_phi_67_pred_4 = _3174;
                        frontier_phi_67_pred_5 = _3173;
                    }
                    _2841 = frontier_phi_67_pred;
                    _2843 = frontier_phi_67_pred_1;
                    _2845 = frontier_phi_67_pred_2;
                    _2839 = frontier_phi_67_pred_3;
                    _2837 = frontier_phi_67_pred_4;
                    _2835 = frontier_phi_67_pred_5;
                    uint _2980 = _2979 + 1u;
                    if (_2980 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2973 = _2835;
                        _2974 = _2837;
                        _2975 = _2839;
                        _2976 = _2841;
                        _2977 = _2843;
                        _2978 = _2845;
                        _2979 = _2980;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2843;
                frontier_phi_55_56_ladder_1 = _2845;
                frontier_phi_55_56_ladder_2 = _2841;
                frontier_phi_55_56_ladder_3 = _2839;
                frontier_phi_55_56_ladder_4 = _2837;
                frontier_phi_55_56_ladder_5 = _2835;
            }
            else
            {
                frontier_phi_55_56_ladder = _2730;
                frontier_phi_55_56_ladder_1 = _2732;
                frontier_phi_55_56_ladder_2 = _2728;
                frontier_phi_55_56_ladder_3 = _2726;
                frontier_phi_55_56_ladder_4 = _2724;
                frontier_phi_55_56_ladder_5 = _2722;
            }
            _2834 = frontier_phi_55_56_ladder_5;
            _2836 = frontier_phi_55_56_ladder_4;
            _2838 = frontier_phi_55_56_ladder_3;
            _2840 = frontier_phi_55_56_ladder_2;
            _2842 = frontier_phi_55_56_ladder;
            _2844 = frontier_phi_55_56_ladder_1;
        }
        float _2849 = isnan(1.0) ? _875 : (isnan(_875) ? 1.0 : min(_875, 1.0));
        _2634 = (_2849 * _2840) + _2067;
        _2636 = (_2849 * _2842) + _2069;
        _2638 = (_2849 * _2844) + _2071;
        _2640 = ((_2834 * _859) * _2849) + _2415;
        _2642 = ((_2836 * _861) * _2849) + _2417;
        _2644 = ((_2838 * _862) * _2849) + _2419;
    }
    else
    {
        _2634 = _2067;
        _2636 = _2069;
        _2638 = _2071;
        _2640 = _2415;
        _2642 = _2417;
        _2644 = _2419;
    }
    float _4594 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
    float _4605 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
    float _4616 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
    uint _2664 = _267 + 6u;
    float _2672 = _794 / cbSceneParam._m0[86u].x;
    float _2673 = _795 / cbSceneParam._m0[86u].y;
    vec4 _2687 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2672, _2673, (log2((isnan(cbSceneParam._m0[77u].w) ? _729 : (isnan(_729) ? cbSceneParam._m0[77u].w : min(_729, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2689 = _2687.x;
    float _2690 = _2687.y;
    float _2691 = _2687.z;
    float _2692 = _2687.w;
    float _2784;
    float _2786;
    float _2788;
    float _2790;
    if (_729 > cbSceneParam._m0[78u].w)
    {
        float _2747 = isnan(_729) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _729 : min(cbSceneParam._m0[80u].w, _729));
        float _2748 = _2747 / _729;
        float _2759 = _2748 * _779;
        float _2760 = _780 * _2748;
        float _2761 = (-0.0) - _2760;
        float _2762 = _2748 * _781;
        float _2764 = (cbSceneParam._m0[77u].w * _2761) / _2747;
        float _2765 = _2764 + cbSceneParam._m0[79u].w;
        float _2766 = cbSceneParam._m0[79u].w - _2760;
        float _2772 = sqrt(((_2759 * _2759) + (_2760 * _2760)) + (_2762 * _2762));
        float _2775 = (1.0 - (cbSceneParam._m0[77u].w / _2747)) * _2772;
        float _2780 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2782 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2935;
        if (abs((_2761 - _2764) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2935 = ((((_2765 > 0.0) ? exp2(_2780 * _2765) : (2.0 - exp2(_2782 * _2765))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2775;
        }
        else
        {
            float _2895 = 1.0 / cbSceneParam._m0[80u].x;
            float _2896 = isnan(_2766) ? _2765 : (isnan(_2765) ? _2766 : max(_2765, _2766));
            float _2897 = isnan(_2766) ? _2765 : (isnan(_2765) ? _2766 : min(_2765, _2766));
            float _2906 = isnan(0.0) ? _2896 : (isnan(_2896) ? 0.0 : min(_2896, 0.0));
            float _2907 = isnan(0.0) ? _2897 : (isnan(_2897) ? 0.0 : min(_2897, 0.0));
            _2935 = ((abs(_2772 / _2761) * cbSceneParam._m0[80u].y) * ((((_2906 - _2907) * 2.0) - ((exp2(_2780 * (isnan(0.0) ? _2896 : (isnan(_2896) ? 0.0 : max(_2896, 0.0)))) - exp2(_2780 * (isnan(0.0) ? _2897 : (isnan(_2897) ? 0.0 : max(_2897, 0.0))))) * _2895)) - ((exp2(_2782 * _2906) - exp2(_2782 * _2907)) * _2895))) + (_2775 * cbSceneParam._m0[80u].z);
        }
        vec4 _2937 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2672, _2673, 1.0), 0.0);
        float _2946 = exp2((_2935 * (-1.44269502162933349609375)) * (1.0 - _2937.w));
        float _2947 = log2(_2946);
        float _2963 = log2(_2692);
        _2784 = (exp2(_2963 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2947 * cbSceneParam._m0[78u].x)) * _2937.x) / cbSceneParam._m0[78u].x)) + _2689;
        _2786 = (exp2(_2963 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2947 * cbSceneParam._m0[78u].y)) * _2937.y) / cbSceneParam._m0[78u].y)) + _2690;
        _2788 = (exp2(_2963 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2947 * cbSceneParam._m0[78u].z)) * _2937.z) / cbSceneParam._m0[78u].z)) + _2691;
        _2790 = _2946 * _2692;
    }
    else
    {
        _2784 = _2689;
        _2786 = _2690;
        _2788 = _2691;
        _2790 = _2692;
    }
    float _2802 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2803 = _2802 == 3.0;
    float _2804 = log2(_2790);
    float _2811 = exp2(_2804 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0))) * (_2634 + ((isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0))) * _875))) + ((_2640 + ((isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0))) * _1683)) * cbPerFrame._m0[3u].x));
    float _2812 = exp2(_2804 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0))) * (_2636 + ((isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0))) * _875))) + ((_2642 + ((isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0))) * _1683)) * cbPerFrame._m0[3u].x));
    float _2813 = exp2(_2804 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0))) * (_2638 + ((isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0))) * _875))) + ((_2644 + ((isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0))) * _1683)) * cbPerFrame._m0[3u].x));
    float _2822 = (_2802 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2822 * (_2803 ? _2811 : (_2811 + (cbSceneParam._m0[72u].w * _2784)));
    SV_Target.y = _2822 * (_2803 ? _2812 : (_2812 + (cbSceneParam._m0[72u].w * _2786)));
    SV_Target.z = _2822 * (_2803 ? _2813 : (_2813 + (cbSceneParam._m0[72u].w * _2788)));
    SV_Target.w = cbInstanceData._m0[_2664].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2664].w;
}


