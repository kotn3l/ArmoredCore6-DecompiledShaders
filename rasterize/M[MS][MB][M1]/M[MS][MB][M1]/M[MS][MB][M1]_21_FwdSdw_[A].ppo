#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1045;
float _3712;
float _3713;
float _3714;
float _3715;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _198 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _199 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _200 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _206 = inversesqrt(dot(vec3(_198, _199, _200), vec3(_198, _199, _200)));
    float _207 = _206 * _198;
    float _208 = _206 * _199;
    float _209 = _206 * _200;
    float _213 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _214 = _213 * NORMAL.x;
    float _215 = _213 * NORMAL.y;
    float _216 = _213 * NORMAL.z;
    float _220 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _221 = _220 * TANGENT.x;
    float _222 = _220 * TANGENT.y;
    float _223 = _220 * TANGENT.z;
    uint _226 = uint(roundEven(NORMAL.w)) * 13u;
    uint _232 = _226 + 1u;
    uint _236 = _226 + 2u;
    float _245 = sqrt(((cbInstanceData._m0[_232].x * cbInstanceData._m0[_232].x) + (cbInstanceData._m0[_226].x * cbInstanceData._m0[_226].x)) + (cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x));
    float _246 = _245 * TEXCOORD.z;
    float _247 = _245 * TEXCOORD.w;
    vec4 _266 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _272 = _266.x * cbMtdParam._m0[9u].x;
    float _273 = _266.y * cbMtdParam._m0[9u].y;
    float _274 = _266.z * cbMtdParam._m0[9u].z;
    vec4 _292 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _296 = _292.z;
    float _301 = (_292.x * 2.0) + (-1.0);
    float _303 = (_292.y * 2.0) + (-1.0);
    float _304 = dot(vec2(_301, _303), vec2(_301, _303));
    float _3724 = isnan(0.0) ? _304 : (isnan(_304) ? 0.0 : max(_304, 0.0));
    float _310 = sqrt(1.0 - (isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0))));
    float _313 = fma(_310, _214, fma(_303, _221, _301 * _207));
    float _316 = fma(_310, _215, fma(_303, _222, _301 * _208));
    float _319 = fma(_310, _216, fma(_303, _223, _301 * _209));
    float _323 = inversesqrt(dot(vec3(_313, _316, _319), vec3(_313, _316, _319)));
    vec4 _359 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _246) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _247) + cbTextureTilingScale._m0[11u].w));
    float _361 = _359.x;
    float _362 = 1.0 - _361;
    float _371 = (cbMtdParam._m0[19u].x + dot(vec4(_323 * _313, _323 * _316, _323 * _319, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_361 - _362) * cbMtdParam._m0[24u].z) + _362) * cbMtdParam._m0[21u].z);
    float _3735 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _372 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
    float _379 = (_372 * (cbMtdParam._m0[17u].x - _272)) + _272;
    float _380 = (_372 * (cbMtdParam._m0[17u].y - _273)) + _273;
    float _381 = (_372 * (cbMtdParam._m0[17u].z - _274)) + _274;
    vec4 _394 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _396 = _394.x;
    float _398 = _396 - (_396 * _372);
    vec4 _411 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _246) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _247) + cbTextureTilingScale._m0[15u].w));
    float _418 = (_411.x * 2.0) + (-1.0);
    float _419 = (_411.y * 2.0) + (-1.0);
    float _420 = dot(vec2(_418, _419), vec2(_418, _419));
    float _3746 = isnan(0.0) ? _420 : (isnan(_420) ? 0.0 : max(_420, 0.0));
    float _428 = ((_411.z - _296) * _372) + _296;
    float _438 = ((sqrt(1.0 - (isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0)))) - _310) * _372) + _310;
    float _441 = (((_418 - _301) * _372) + _301) + (cbMtdParam._m0[21u].x * _301);
    float _442 = (((_419 - _303) * _372) + _303) + (cbMtdParam._m0[21u].x * _303);
    float _447 = cbMtdParam._m0[22u].x + _292.w;
    float _450 = fma(_438, _214, fma(_442, _221, _441 * _207));
    float _453 = fma(_438, _215, fma(_442, _222, _441 * _208));
    float _456 = fma(_438, _216, fma(_442, _223, _441 * _209));
    float _460 = inversesqrt(dot(vec3(_450, _453, _456), vec3(_450, _453, _456)));
    float _461 = _460 * _450;
    float _462 = _460 * _453;
    float _463 = _460 * _456;
    float _3757 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _464 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
    float _3768 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _3779 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _3790 = isnan(0.0) ? _380 : (isnan(_380) ? 0.0 : max(_380, 0.0));
    float _3801 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _3812 = isnan(0.0) ? _398 : (isnan(_398) ? 0.0 : max(_398, 0.0));
    float _469 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
    float _483 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _524 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _534 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _524);
    float _535 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _524);
    float _536 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _524);
    float _540 = inversesqrt(dot(vec3(_534, _535, _536), vec3(_534, _535, _536)));
    float _541 = _534 * _540;
    float _542 = _535 * _540;
    float _543 = _536 * _540;
    vec4 _548 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _550 = _548.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _725 = sqrt(((_534 * _534) + (_535 * _535)) + (_536 * _536));
        float _731 = (cbMatDynParam._m0[5u].x * _725) + cbMatDynParam._m0[5u].y;
        float _3823 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
        float _732 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
        float _736 = (cbMatDynParam._m0[5u].z * _725) + cbMatDynParam._m0[5u].w;
        float _3834 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0))) - _732)) + _732) < ((_550 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _562 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _563 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _583 = fma(_463, cbSceneParam._m0[5u].z, fma(_462, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _461));
    float _586 = fma(_463, cbSceneParam._m0[6u].z, fma(_462, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _461));
    float _589 = fma(_463, cbSceneParam._m0[7u].z, fma(_462, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _461));
    uint _602 = _226 + 9u;
    uint _603 = _602 + uint(cbMatDynParam._m0[0u].w);
    float _609 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0)))) * cbInstanceData._m0[_603].x;
    float _610 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0)))) * cbInstanceData._m0[_603].y;
    float _611 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0)))) * cbInstanceData._m0[_603].z;
    float _3845 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
    float _612 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
    float _3856 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _613 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
    float _3867 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _614 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
    float _615 = 1.0 - _469;
    float _616 = _612 * _615;
    float _617 = _613 * _615;
    float _618 = _614 * _615;
    float _623 = (_612 + (-0.039999999105930328369140625)) * _469;
    float _624 = (_613 + (-0.039999999105930328369140625)) * _469;
    float _625 = (_614 + (-0.039999999105930328369140625)) * _469;
    float _626 = _623 + 0.039999999105930328369140625;
    float _628 = _624 + 0.039999999105930328369140625;
    float _629 = _625 + 0.039999999105930328369140625;
    vec4 _638 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _562, cbSceneParam._m0[86u].y * _563));
    float _642 = ((isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0))) * TEXCOORD_5.w) * _638.x;
    float _643 = dot(vec3(_461, _462, _463), vec3(_541, _542, _543));
    float _646 = _643 * 2.0;
    float _650 = (_646 * _461) - _541;
    float _651 = (_646 * _462) - _542;
    float _652 = (_646 * _463) - _543;
    float _656 = abs(dot(vec3(_541, _542, _543), vec3(_461, _462, _463)));
    float _3878 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _658 = sqrt(_464);
    float _671 = exp2((_658 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_658 * 3.0));
    float _677 = (1.0 - _671) * ((_658 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _678 = _671 * _658;
    float _706 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _710 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _714 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1044;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _769 = fma(_714, cbModelParam._m0[26u].z, fma(_710, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _706));
        float _773 = fma(_714, cbModelParam._m0[27u].z, fma(_710, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _706));
        float _777 = fma(_714, cbModelParam._m0[28u].z, fma(_710, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _706));
        float _802 = _706 + _461;
        float _803 = _710 + _462;
        float _804 = _714 + _463;
        float _814 = fma(_804, cbModelParam._m0[26u].z, fma(_803, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _802)) - _769;
        float _815 = fma(_804, cbModelParam._m0[27u].z, fma(_803, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _802)) - _773;
        float _816 = fma(_804, cbModelParam._m0[28u].z, fma(_803, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _802)) - _777;
        float _820 = inversesqrt(dot(vec3(_814, _815, _816), vec3(_814, _815, _816)));
        float _833 = ((_820 * _814) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_769 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _834 = ((_820 * _815) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_773 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _835 = ((_820 * _816) / cbModelParam._m0[34u].z) + ((((((_777 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _838 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_833, _834, _835), 0.0);
        vec4 _845 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_833, _834, _835), 0.0);
        vec4 _852 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_833, _834, _835), 0.0);
        vec4 _859 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_833, _834, _835), 0.0);
        float _872 = exp2((_838.w + (-0.5)) * 20.0) * 2.0;
        float _873 = _872 * (_838.x + (-0.5));
        float _874 = _872 * (_838.y + (-0.5));
        float _875 = _872 * (_838.z + (-0.5));
        float _882 = exp2((_845.w + (-0.5)) * 20.0) * 2.0;
        float _883 = _882 * (_845.x + (-0.5));
        float _884 = _882 * (_845.y + (-0.5));
        float _885 = _882 * (_845.z + (-0.5));
        float _892 = exp2((_852.w + (-0.5)) * 20.0) * 2.0;
        float _893 = _892 * (_852.x + (-0.5));
        float _894 = _892 * (_852.y + (-0.5));
        float _895 = _892 * (_852.z + (-0.5));
        float _902 = exp2((_859.w + (-0.5)) * 20.0) * 2.0;
        float _903 = _902 * (_859.x + (-0.5));
        float _904 = _902 * (_859.y + (-0.5));
        float _905 = _902 * (_859.z + (-0.5));
        float _906 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
        float _907 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
        float _908 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        float _909 = _873 * 0.5;
        float _910 = _883 * 0.5;
        float _911 = _893 * 0.5;
        float _912 = dot(vec3(_909, _910, _911), vec3(_909, _910, _911));
        float _917 = (_912 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_912);
        float _926 = (dot(vec3(_461, _462, _463), vec3(_917 * _909, _917 * _910, _917 * _911)) + 1.0) * 0.5;
        float _3904 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
        float _936 = sqrt(((_910 * _910) + (_909 * _909)) + (_911 * _911)) / (_906 + 9.9999997473787516355514526367188e-06);
        float _3915 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
        float _937 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
        float _938 = _937 * 2.0;
        float _942 = (1.0 - _937) / (_937 + 1.0);
        float _3926 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _943 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
        float _952 = ((((1.0 - _943) * (_938 + 2.0)) * exp2(log2(isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0))) * (_938 + 1.0))) + _943) * _906;
        float _953 = _874 * 0.5;
        float _954 = _884 * 0.5;
        float _955 = _894 * 0.5;
        float _956 = dot(vec3(_953, _954, _955), vec3(_953, _954, _955));
        float _961 = (_956 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_956);
        float _969 = (dot(vec3(_461, _462, _463), vec3(_961 * _953, _961 * _954, _961 * _955)) + 1.0) * 0.5;
        float _3937 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _978 = sqrt(((_954 * _954) + (_953 * _953)) + (_955 * _955)) / (_907 + 9.9999997473787516355514526367188e-06);
        float _3948 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _979 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
        float _980 = _979 * 2.0;
        float _984 = (1.0 - _979) / (_979 + 1.0);
        float _3959 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _985 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
        float _994 = ((((1.0 - _985) * (_980 + 2.0)) * exp2(log2(isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0))) * (_980 + 1.0))) + _985) * _907;
        float _995 = _875 * 0.5;
        float _996 = _885 * 0.5;
        float _997 = _895 * 0.5;
        float _998 = dot(vec3(_995, _996, _997), vec3(_995, _996, _997));
        float _1003 = (_998 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_998);
        float _1011 = (dot(vec3(_461, _462, _463), vec3(_1003 * _995, _1003 * _996, _1003 * _997)) + 1.0) * 0.5;
        float _3970 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1020 = sqrt(((_996 * _996) + (_995 * _995)) + (_997 * _997)) / (_908 + 9.9999997473787516355514526367188e-06);
        float _3981 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1021 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
        float _1022 = _1021 * 2.0;
        float _1026 = (1.0 - _1021) / (_1021 + 1.0);
        float _3992 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1027 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
        float _1036 = ((((1.0 - _1027) * (_1022 + 2.0)) * exp2(log2(isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0))) * (_1022 + 1.0))) + _1027) * _908;
        _1044 = _875;
        _1046 = _874;
        _1047 = _873;
        _1048 = _885;
        _1049 = _884;
        _1050 = _883;
        _1051 = _895;
        _1052 = _894;
        _1053 = _893;
        _1054 = _908;
        _1055 = _907;
        _1056 = _906;
        _1057 = cbModelParam._m0[36u].z * (isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0)));
        _1058 = cbModelParam._m0[36u].z * (isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0)));
        _1059 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0)));
    }
    else
    {
        _1044 = _1045;
        _1046 = _1045;
        _1047 = _1045;
        _1048 = _1045;
        _1049 = _1045;
        _1050 = _1045;
        _1051 = _1045;
        _1052 = _1045;
        _1053 = _1045;
        _1054 = _1045;
        _1055 = _1045;
        _1056 = _1045;
        _1057 = 0.0;
        _1058 = 0.0;
        _1059 = 0.0;
    }
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1087 = fma(_714, cbModelParam._m0[30u].z, fma(_710, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _706));
        float _1091 = fma(_714, cbModelParam._m0[31u].z, fma(_710, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _706));
        float _1095 = fma(_714, cbModelParam._m0[32u].z, fma(_710, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _706));
        float _1118 = _706 + _461;
        float _1119 = _710 + _462;
        float _1120 = _714 + _463;
        float _1130 = fma(_1120, cbModelParam._m0[30u].z, fma(_1119, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1118)) - _1087;
        float _1131 = fma(_1120, cbModelParam._m0[31u].z, fma(_1119, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1118)) - _1091;
        float _1132 = fma(_1120, cbModelParam._m0[32u].z, fma(_1119, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1118)) - _1095;
        float _1136 = inversesqrt(dot(vec3(_1130, _1131, _1132), vec3(_1130, _1131, _1132)));
        float _1149 = ((_1136 * _1130) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1087 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1150 = ((_1136 * _1131) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1091 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1151 = ((_1136 * _1132) / cbModelParam._m0[35u].z) + ((((((_1095 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1153 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1149, _1150, _1151), 0.0);
        vec4 _1160 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1149, _1150, _1151), 0.0);
        vec4 _1167 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1149, _1150, _1151), 0.0);
        vec4 _1174 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1149, _1150, _1151), 0.0);
        float _1186 = exp2((_1153.w + (-0.5)) * 20.0) * 2.0;
        float _1187 = _1186 * (_1153.x + (-0.5));
        float _1188 = _1186 * (_1153.y + (-0.5));
        float _1189 = _1186 * (_1153.z + (-0.5));
        float _1196 = exp2((_1160.w + (-0.5)) * 20.0) * 2.0;
        float _1197 = _1196 * (_1160.x + (-0.5));
        float _1198 = _1196 * (_1160.y + (-0.5));
        float _1199 = _1196 * (_1160.z + (-0.5));
        float _1206 = exp2((_1167.w + (-0.5)) * 20.0) * 2.0;
        float _1207 = _1206 * (_1167.x + (-0.5));
        float _1208 = _1206 * (_1167.y + (-0.5));
        float _1209 = _1206 * (_1167.z + (-0.5));
        float _1216 = exp2((_1174.w + (-0.5)) * 20.0) * 2.0;
        float _1217 = _1216 * (_1174.x + (-0.5));
        float _1218 = _1216 * (_1174.y + (-0.5));
        float _1219 = _1216 * (_1174.z + (-0.5));
        float _1220 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1221 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1222 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1223 = _1187 * 0.5;
        float _1224 = _1197 * 0.5;
        float _1225 = _1207 * 0.5;
        float _1226 = dot(vec3(_1223, _1224, _1225), vec3(_1223, _1224, _1225));
        float _1231 = (_1226 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1226);
        float _1239 = (dot(vec3(_461, _462, _463), vec3(_1231 * _1223, _1231 * _1224, _1231 * _1225)) + 1.0) * 0.5;
        float _4033 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1248 = sqrt(((_1224 * _1224) + (_1223 * _1223)) + (_1225 * _1225)) / (_1220 + 9.9999997473787516355514526367188e-06);
        float _4044 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1249 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
        float _1250 = _1249 * 2.0;
        float _1254 = (1.0 - _1249) / (_1249 + 1.0);
        float _4055 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1255 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
        float _1264 = ((((1.0 - _1255) * (_1250 + 2.0)) * exp2(log2(isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0))) * (_1250 + 1.0))) + _1255) * _1220;
        float _1265 = _1188 * 0.5;
        float _1266 = _1198 * 0.5;
        float _1267 = _1208 * 0.5;
        float _1268 = dot(vec3(_1265, _1266, _1267), vec3(_1265, _1266, _1267));
        float _1273 = (_1268 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1268);
        float _1281 = (dot(vec3(_461, _462, _463), vec3(_1273 * _1265, _1273 * _1266, _1273 * _1267)) + 1.0) * 0.5;
        float _4066 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1290 = sqrt(((_1266 * _1266) + (_1265 * _1265)) + (_1267 * _1267)) / (_1221 + 9.9999997473787516355514526367188e-06);
        float _4077 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1291 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
        float _1292 = _1291 * 2.0;
        float _1296 = (1.0 - _1291) / (_1291 + 1.0);
        float _4088 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1297 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
        float _1306 = ((((1.0 - _1297) * (_1292 + 2.0)) * exp2(log2(isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0))) * (_1292 + 1.0))) + _1297) * _1221;
        float _1307 = _1189 * 0.5;
        float _1308 = _1199 * 0.5;
        float _1309 = _1209 * 0.5;
        float _1310 = dot(vec3(_1307, _1308, _1309), vec3(_1307, _1308, _1309));
        float _1315 = (_1310 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1310);
        float _1323 = (dot(vec3(_461, _462, _463), vec3(_1315 * _1307, _1315 * _1308, _1315 * _1309)) + 1.0) * 0.5;
        float _4099 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1332 = sqrt(((_1308 * _1308) + (_1307 * _1307)) + (_1309 * _1309)) / (_1222 + 9.9999997473787516355514526367188e-06);
        float _4110 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1333 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
        float _1334 = _1333 * 2.0;
        float _1338 = (1.0 - _1333) / (_1333 + 1.0);
        float _4121 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1339 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
        float _1348 = ((((1.0 - _1339) * (_1334 + 2.0)) * exp2(log2(isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0))) * (_1334 + 1.0))) + _1339) * _1222;
        _1356 = _1189;
        _1357 = _1188;
        _1358 = _1187;
        _1359 = _1199;
        _1360 = _1198;
        _1361 = _1197;
        _1362 = _1209;
        _1363 = _1208;
        _1364 = _1207;
        _1365 = _1222;
        _1366 = _1221;
        _1367 = _1220;
        _1368 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0)));
        _1369 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0)));
        _1370 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0)));
    }
    else
    {
        _1356 = _1045;
        _1357 = _1045;
        _1358 = _1045;
        _1359 = _1045;
        _1360 = _1045;
        _1361 = _1045;
        _1362 = _1045;
        _1363 = _1045;
        _1364 = _1045;
        _1365 = _1045;
        _1366 = _1045;
        _1367 = _1045;
        _1368 = 0.0;
        _1369 = 0.0;
        _1370 = 0.0;
    }
    float _1380 = (cbModelParam._m0[1u].x * (_1368 - _1057)) + _1057;
    float _1381 = (cbModelParam._m0[1u].x * (_1369 - _1058)) + _1058;
    float _1382 = (cbModelParam._m0[1u].x * (_1370 - _1059)) + _1059;
    float _1403 = fma(_1382, cbSceneParam._m0[89u].z, fma(_1381, cbSceneParam._m0[89u].y, _1380 * cbSceneParam._m0[89u].x));
    float _1406 = fma(_1382, cbSceneParam._m0[90u].z, fma(_1381, cbSceneParam._m0[90u].y, _1380 * cbSceneParam._m0[90u].x));
    float _1409 = fma(_1382, cbSceneParam._m0[91u].z, fma(_1381, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1380));
    float _1424 = _650 * 0.5;
    float _1425 = _651 * 0.5;
    float _1426 = _652 * 0.5;
    float _1427 = dot(vec4(_1424, _1425, _1426, 1.0), vec4(_1358, _1361, _1364, _1367));
    float _1430 = dot(vec4(_1424, _1425, _1426, 1.0), vec4(_1357, _1360, _1363, _1366));
    float _1433 = dot(vec4(_1424, _1425, _1426, 1.0), vec4(_1356, _1359, _1362, _1365));
    float _1467;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1440 = dot(vec4(_1424, _1425, _1426, 1.0), vec4(_1044, _1048, _1051, _1054));
        float _1444 = dot(vec4(_1424, _1425, _1426, 1.0), vec4(_1046, _1049, _1052, _1055));
        float _1448 = dot(vec4(_1424, _1425, _1426, 1.0), vec4(_1047, _1050, _1053, _1056));
        float _1455 = dot(vec4(cbModelParam._m0[39u]), vec4(_1424, _1425, _1426, 1.0));
        _1467 = dot(vec3(isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0)), isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0)), isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1455) ? 0.0 : (isnan(0.0) ? _1455 : max(0.0, _1455))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1467 = 1.0;
    }
    float _1478;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1469 = dot(vec4(cbModelParam._m0[40u]), vec4(_1424, _1425, _1426, 1.0));
        _1478 = dot(vec3(isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0)), isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0)), isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1469) ? 0.0 : (isnan(0.0) ? _1469 : max(0.0, _1469))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1478 = 1.0;
    }
    float _1482 = (_1478 * cbModelParam._m0[1u].x) + (_1467 * (1.0 - cbModelParam._m0[1u].x));
    float _1492 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _464);
    float _1493 = isnan(_1492) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1492 : min(cbModelParam._m0[25u].z, _1492));
    float _1574;
    float _1576;
    float _1578;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1541 = fma(_714, cbModelParam._m0[13u].z, fma(_710, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _706)) + cbModelParam._m0[13u].w;
        float _1545 = fma(_714, cbModelParam._m0[14u].z, fma(_710, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _706)) + cbModelParam._m0[14u].w;
        float _1549 = fma(_714, cbModelParam._m0[15u].z, fma(_710, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _706)) + cbModelParam._m0[15u].w;
        float _1552 = fma(_652, cbModelParam._m0[13u].z, fma(_651, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _650));
        float _1555 = fma(_652, cbModelParam._m0[14u].z, fma(_651, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _650));
        float _1558 = fma(_652, cbModelParam._m0[15u].z, fma(_651, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _650));
        float _1586;
        if (_1552 > 0.0)
        {
            _1586 = abs((1.0 - _1541) / _1552);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1552 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1541 + 1.0) / _1552);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1586 = frontier_phi_17_15_ladder;
        }
        float _1758;
        if (_1555 > 0.0)
        {
            _1758 = abs((1.0 - _1545) / _1555);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1555 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1545 + 1.0) / _1555);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1758 = frontier_phi_26_22_ladder;
        }
        float _2054;
        if (_1558 > 0.0)
        {
            _2054 = abs((1.0 - _1549) / _1558);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1558 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1549 + 1.0) / _1558);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2054 = frontier_phi_38_33_ladder;
        }
        float _2056 = isnan(_1758) ? _1586 : (isnan(_1586) ? _1758 : min(_1586, _1758));
        float _2057 = isnan(_2054) ? _2056 : (isnan(_2056) ? _2054 : min(_2056, _2054));
        float _2061 = (_2057 * _1552) + _1541;
        float _2062 = (_2057 * _1555) + _1545;
        float _2063 = (_2057 * _1558) + _1549;
        float _2064 = _2057 * 9.9999997473787516355514526367188e-05;
        float _2066 = (-1.0) - _2064;
        float _2068 = _2064 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2063 > _2068) || ((_2063 < _2066) || ((_2062 > _2068) || ((_2062 < _2066) || ((_2061 < _2066) || (_2061 > _2068))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2208 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2063, cbModelParam._m0[9u].z, fma(_2062, cbModelParam._m0[9u].y, _2061 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2063, cbModelParam._m0[10u].z, fma(_2062, cbModelParam._m0[10u].y, _2061 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2063, cbModelParam._m0[11u].z, fma(_2062, cbModelParam._m0[11u].y, _2061 * cbModelParam._m0[11u].x))), _1493);
            frontier_phi_16_38_ladder = _2208.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2208.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2208.x * cbModelParam._m0[1u].y;
        }
        _1574 = frontier_phi_16_38_ladder_2;
        _1576 = frontier_phi_16_38_ladder_1;
        _1578 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1562 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_650, _651, _652), _1493);
        _1574 = _1562.x * cbModelParam._m0[1u].y;
        _1576 = _1562.y * cbModelParam._m0[1u].y;
        _1578 = _1562.z * cbModelParam._m0[1u].y;
    }
    float _1582 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _464);
    float _1583 = isnan(_1582) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1582 : min(cbModelParam._m0[25u].w, _1582));
    float _1673;
    float _1675;
    float _1677;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1637 = fma(_714, cbModelParam._m0[21u].z, fma(_710, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _706)) + cbModelParam._m0[21u].w;
        float _1641 = fma(_714, cbModelParam._m0[22u].z, fma(_710, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _706)) + cbModelParam._m0[22u].w;
        float _1645 = fma(_714, cbModelParam._m0[23u].z, fma(_710, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _706)) + cbModelParam._m0[23u].w;
        float _1648 = fma(_652, cbModelParam._m0[21u].z, fma(_651, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _650));
        float _1651 = fma(_652, cbModelParam._m0[22u].z, fma(_651, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _650));
        float _1654 = fma(_652, cbModelParam._m0[23u].z, fma(_651, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _650));
        float _1763;
        if (_1648 > 0.0)
        {
            _1763 = abs((1.0 - _1637) / _1648);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1648 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1637 + 1.0) / _1648);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1763 = frontier_phi_28_24_ladder;
        }
        float _2081;
        if (_1651 > 0.0)
        {
            _2081 = abs((1.0 - _1641) / _1651);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1651 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1641 + 1.0) / _1651);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2081 = frontier_phi_40_35_ladder;
        }
        float _2419;
        if (_1654 > 0.0)
        {
            _2419 = abs((1.0 - _1645) / _1654);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1654 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1645 + 1.0) / _1654);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2419 = frontier_phi_50_47_ladder;
        }
        float _2421 = isnan(_2081) ? _1763 : (isnan(_1763) ? _2081 : min(_1763, _2081));
        float _2422 = isnan(_2419) ? _2421 : (isnan(_2421) ? _2419 : min(_2421, _2419));
        float _2426 = (_2422 * _1648) + _1637;
        float _2427 = (_2422 * _1651) + _1641;
        float _2428 = (_2422 * _1654) + _1645;
        float _2429 = _2422 * 9.9999997473787516355514526367188e-05;
        float _2430 = (-1.0) - _2429;
        float _2432 = _2429 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2428 > _2432) || ((_2428 < _2430) || ((_2427 > _2432) || ((_2427 < _2430) || ((_2426 < _2430) || (_2426 > _2432))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2550 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2428, cbModelParam._m0[17u].z, fma(_2427, cbModelParam._m0[17u].y, _2426 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2428, cbModelParam._m0[18u].z, fma(_2427, cbModelParam._m0[18u].y, _2426 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2428, cbModelParam._m0[19u].z, fma(_2427, cbModelParam._m0[19u].y, _2426 * cbModelParam._m0[19u].x))), _1583);
            frontier_phi_25_50_ladder = _2550.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2550.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2550.x * cbModelParam._m0[1u].z;
        }
        _1673 = frontier_phi_25_50_ladder_2;
        _1675 = frontier_phi_25_50_ladder_1;
        _1677 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1657 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_650, _651, _652), _1583);
        _1673 = _1657.x * cbModelParam._m0[1u].z;
        _1675 = _1657.y * cbModelParam._m0[1u].z;
        _1677 = _1657.z * cbModelParam._m0[1u].z;
    }
    float _1690 = (((_677 * _626) + _678) * _642) * ((cbModelParam._m0[1u].w * (_1673 - _1574)) + _1574);
    float _1692 = (((_677 * _628) + _678) * _642) * ((cbModelParam._m0[1u].w * (_1675 - _1576)) + _1576);
    float _1694 = (((_677 * _629) + _678) * _642) * ((cbModelParam._m0[1u].w * (_1677 - _1578)) + _1578);
    float _1697 = fma(_1694, cbSceneParam._m0[89u].z, fma(_1692, cbSceneParam._m0[89u].y, _1690 * cbSceneParam._m0[89u].x));
    float _1700 = fma(_1694, cbSceneParam._m0[90u].z, fma(_1692, cbSceneParam._m0[90u].y, _1690 * cbSceneParam._m0[90u].x));
    float _1703 = fma(_1694, cbSceneParam._m0[91u].z, fma(_1692, cbSceneParam._m0[91u].y, _1690 * cbSceneParam._m0[91u].x));
    float _1737 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1741 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1745 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1749 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1750 = _1737 / _1749;
    float _1751 = _1741 / _1749;
    float _1752 = _1745 / _1749;
    float _1899;
    float _1900;
    float _1901;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1779 = ((uint(_1752 > cbSceneParam._m0[59u].y) + uint(_1752 > cbSceneParam._m0[59u].x)) + uint(_1752 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1780 = _1779 + 43u;
        uint _1788 = _1779 + 44u;
        uint _1796 = _1779 + 45u;
        uint _1804 = _1779 + 46u;
        float _1815 = fma(_1749, cbSceneParam._m0[_1780].w, fma(_1745, cbSceneParam._m0[_1780].z, fma(_1741, cbSceneParam._m0[_1780].y, _1737 * cbSceneParam._m0[_1780].x)));
        float _1819 = fma(_1749, cbSceneParam._m0[_1788].w, fma(_1745, cbSceneParam._m0[_1788].z, fma(_1741, cbSceneParam._m0[_1788].y, _1737 * cbSceneParam._m0[_1788].x)));
        float _1827 = fma(_1749, cbSceneParam._m0[_1804].w, fma(_1745, cbSceneParam._m0[_1804].z, fma(_1741, cbSceneParam._m0[_1804].y, _1737 * cbSceneParam._m0[_1804].x)));
        float _1832 = cbSceneParam._m0[33u].z * _1827;
        float _1834 = cbSceneParam._m0[33u].w * _1827;
        float _1837 = fma(_1749, cbSceneParam._m0[_1796].w, fma(_1745, cbSceneParam._m0[_1796].z, fma(_1741, cbSceneParam._m0[_1796].y, _1737 * cbSceneParam._m0[_1796].x))) / _1827;
        float _1885 = (cbSceneParam._m0[33u].x - sqrt(((_1751 * _1751) + (_1750 * _1750)) + (_1752 * _1752))) * cbSceneParam._m0[33u].y;
        float _4247 = isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0));
        float _1892 = (isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1832 + _1815) / _1827, (_1834 + _1819) / _1827), _1837), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1834 + _1815) / _1827, (_1819 - _1832) / _1827), _1837), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1815 - _1832) / _1827, (_1819 - _1834) / _1827), _1837), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1815 - _1834) / _1827, (_1832 + _1819) / _1827), _1837), 0.0)).x), vec4(0.25)));
        _1899 = 1.0 - (_1892 * cbSceneParam._m0[34u].x);
        _1900 = 1.0 - (_1892 * cbSceneParam._m0[34u].y);
        _1901 = 1.0 - (_1892 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1899 = 1.0;
        _1900 = 1.0;
        _1901 = 1.0;
    }
    float _1965;
    float _1967;
    float _1969;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1953 = fma(_1749, cbSceneParam._m0[63u].w, fma(_1745, cbSceneParam._m0[63u].z, fma(_1741, cbSceneParam._m0[63u].y, _1737 * cbSceneParam._m0[63u].x)));
        float _1954 = fma(_1749, cbSceneParam._m0[60u].w, fma(_1745, cbSceneParam._m0[60u].z, fma(_1741, cbSceneParam._m0[60u].y, _1737 * cbSceneParam._m0[60u].x))) / _1953;
        float _1955 = fma(_1749, cbSceneParam._m0[61u].w, fma(_1745, cbSceneParam._m0[61u].z, fma(_1741, cbSceneParam._m0[61u].y, _1737 * cbSceneParam._m0[61u].x))) / _1953;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1954 >= cbSceneParam._m0[64u].x) && (_1955 >= cbSceneParam._m0[64u].y)) && (_1954 <= cbSceneParam._m0[64u].z)) && (_1955 <= cbSceneParam._m0[64u].w))
        {
            float _2094 = fma(_1749, cbSceneParam._m0[62u].w, fma(_1745, cbSceneParam._m0[62u].z, fma(_1741, cbSceneParam._m0[62u].y, _1737 * cbSceneParam._m0[62u].x))) / _1953;
            float _2098 = isnan(cbSceneParam._m0[41u].w) ? _2094 : (isnan(_2094) ? cbSceneParam._m0[41u].w : max(_2094, cbSceneParam._m0[41u].w));
            float _2141 = (cbSceneParam._m0[33u].x - sqrt(((_1751 * _1751) + (_1750 * _1750)) + (_1752 * _1752))) * cbSceneParam._m0[33u].y;
            float _4263 = isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0));
            float _2148 = (isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1954, cbSceneParam._m0[33u].w + _1955), _2098), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1954, _1955 - cbSceneParam._m0[33u].z), _2098), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1954 - cbSceneParam._m0[33u].z, _1955 - cbSceneParam._m0[33u].w), _2098), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1954 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1955), _2098), 0.0)).x), vec4(0.25)));
            float _2152 = 1.0 - (_2148 * cbSceneParam._m0[34u].x);
            float _2153 = 1.0 - (_2148 * cbSceneParam._m0[34u].y);
            float _2154 = 1.0 - (_2148 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2154) ? _1901 : (isnan(_1901) ? _2154 : min(_1901, _2154));
            frontier_phi_37_36_ladder_1 = isnan(_2153) ? _1900 : (isnan(_1900) ? _2153 : min(_1900, _2153));
            frontier_phi_37_36_ladder_2 = isnan(_2152) ? _1899 : (isnan(_1899) ? _2152 : min(_1899, _2152));
        }
        else
        {
            frontier_phi_37_36_ladder = _1901;
            frontier_phi_37_36_ladder_1 = _1900;
            frontier_phi_37_36_ladder_2 = _1899;
        }
        _1965 = frontier_phi_37_36_ladder_2;
        _1967 = frontier_phi_37_36_ladder_1;
        _1969 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1965 = _1899;
        _1967 = _1900;
        _1969 = _1901;
    }
    uvec4 _1974 = floatBitsToUint(cbInstanceData._m0[_226 + 5u]);
    uint _1976 = _1974.x * 14u;
    uint _1977 = _1976 + 13u;
    float _1984 = _642 + (-1.0);
    float _1989 = (cbLight._m0[_1977].x * _1984) + 1.0;
    float _1990 = (cbLight._m0[_1977].y * _1984) + 1.0;
    float _1991 = (cbLight._m0[_1977].z * _1984) + 1.0;
    float _1992 = (cbLight._m0[_1977].w * _1984) + 1.0;
    uint _1993 = _1976 + 5u;
    float _1999 = isnan(1.0) ? _1990 : (isnan(_1990) ? 1.0 : min(_1990, 1.0));
    uint _2003 = _1976 + 4u;
    float _2013 = isnan(1.0) ? _1989 : (isnan(_1989) ? 1.0 : min(_1989, 1.0));
    uint _2017 = _1976 | 1u;
    float _2028 = dot(vec3(cbLight._m0[_1976].xyz), vec3(_461, _462, _463));
    float _2031 = dot(vec3(cbLight._m0[_2017].xyz), vec3(_461, _462, _463));
    float _4299 = isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0));
    float _4310 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
    float _2036 = (isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0))) * 0.3183098733425140380859375;
    float _2038 = (isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0))) * 0.3183098733425140380859375;
    float _2045 = ((cbLight._m0[_1993].x * _1999) * _2038) + (((cbLight._m0[_2003].x * _1965) * _2013) * _2036);
    float _2046 = ((_1999 * cbLight._m0[_1993].y) * _2038) + (((cbLight._m0[_2003].y * _1967) * _2013) * _2036);
    float _2047 = ((_1999 * cbLight._m0[_1993].z) * _2038) + (((cbLight._m0[_2003].z * _1969) * _2013) * _2036);
    uvec4 _2051 = floatBitsToUint(cbLight._m0[_1976 + 12u]);
    bool _2053 = _2051.x == 0u;
    float _2155;
    float _2157;
    float _2159;
    if (_2053)
    {
        _2155 = _2045;
        _2157 = _2046;
        _2159 = _2047;
    }
    else
    {
        uint _2163 = _1976 + 6u;
        float _2179 = (dot(vec3(cbLight._m0[_1976 + 2u].xyz), vec3(_461, _462, _463)) * 0.5) + 0.5;
        float _2180 = _2179 * _2179;
        float _4321 = isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0));
        float _2181 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
        float _2182 = isnan(1.0) ? _1991 : (isnan(_1991) ? 1.0 : min(_1991, 1.0));
        _2155 = (((cbLight._m0[_2163].x * 0.3183098733425140380859375) * _2181) * _2182) + _2045;
        _2157 = (((cbLight._m0[_2163].y * 0.3183098733425140380859375) * _2181) * _2182) + _2046;
        _2159 = (((cbLight._m0[_2163].z * 0.3183098733425140380859375) * _2181) * _2182) + _2047;
    }
    bool _2162 = _2051.y == 0u;
    float _2217;
    float _2219;
    float _2221;
    if (_2162)
    {
        _2217 = _2155;
        _2219 = _2157;
        _2221 = _2159;
    }
    else
    {
        uint _2390 = _1976 + 7u;
        float _2406 = (dot(vec3(cbLight._m0[_1976 + 3u].xyz), vec3(_461, _462, _463)) * 0.5) + 0.5;
        float _2407 = _2406 * _2406;
        float _4337 = isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0));
        float _2408 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
        float _2409 = isnan(1.0) ? _1992 : (isnan(_1992) ? 1.0 : min(_1992, 1.0));
        _2217 = (((cbLight._m0[_2390].x * 0.3183098733425140380859375) * _2408) * _2409) + _2155;
        _2219 = (((cbLight._m0[_2390].y * 0.3183098733425140380859375) * _2408) * _2409) + _2157;
        _2221 = (((cbLight._m0[_2390].z * 0.3183098733425140380859375) * _2408) * _2409) + _2159;
    }
    uint _2224 = _1976 + 8u;
    float _2237 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1976].w)) * _464) * 0.949999988079071044921875);
    float _2238 = _2237 * _2237;
    float _2239 = cbLight._m0[_1976].x + _541;
    float _2240 = cbLight._m0[_1976].y + _542;
    float _2241 = cbLight._m0[_1976].z + _543;
    float _2245 = inversesqrt(dot(vec3(_2239, _2240, _2241), vec3(_2239, _2240, _2241)));
    float _2246 = _2245 * _2239;
    float _2247 = _2245 * _2240;
    float _2248 = _2245 * _2241;
    float _2249 = dot(vec3(_461, _462, _463), vec3(cbLight._m0[_1976].xyz));
    float _4353 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0));
    float _2252 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
    float _4364 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _2253 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
    float _2254 = dot(vec3(_461, _462, _463), vec3(_2246, _2247, _2248));
    float _4375 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
    float _2257 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
    float _2258 = dot(vec3(cbLight._m0[_1976].xyz), vec3(_2246, _2247, _2248));
    float _4386 = isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0));
    float _2262 = _2238 * _2238;
    float _2266 = ((_2257 * _2257) * (_2262 + (-1.0))) + 1.0;
    float _2274 = exp2(log2(1.0 - (isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0)))) * 5.0);
    float _2275 = 0.959999978542327880859375 - _623;
    float _2277 = 0.959999978542327880859375 - _624;
    float _2278 = 0.959999978542327880859375 - _625;
    float _2285 = 1.0 - _2238;
    float _2296 = (0.5 / (((_2253 * ((_2252 * _2285) + _2238)) + 9.9999999392252902907785028219223e-09) + (((_2253 * _2285) + _2238) * _2252))) * _2252;
    float _4397 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
    float _2298 = (isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0))) * (_2262 / ((_2266 * _2266) * 3.141590118408203125));
    uint _2312 = _1976 + 9u;
    float _2323 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2017].w)) * _464) * 0.949999988079071044921875);
    float _2324 = _2323 * _2323;
    float _2325 = cbLight._m0[_2017].x + _541;
    float _2326 = cbLight._m0[_2017].y + _542;
    float _2327 = cbLight._m0[_2017].z + _543;
    float _2331 = inversesqrt(dot(vec3(_2325, _2326, _2327), vec3(_2325, _2326, _2327)));
    float _2332 = _2331 * _2325;
    float _2333 = _2331 * _2326;
    float _2334 = _2331 * _2327;
    float _2335 = dot(vec3(_461, _462, _463), vec3(cbLight._m0[_2017].xyz));
    float _4408 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
    float _2338 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
    float _2339 = dot(vec3(_461, _462, _463), vec3(_2332, _2333, _2334));
    float _4419 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
    float _2342 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
    float _2343 = dot(vec3(cbLight._m0[_2017].xyz), vec3(_2332, _2333, _2334));
    float _4430 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
    float _2347 = _2324 * _2324;
    float _2351 = ((_2342 * _2342) * (_2347 + (-1.0))) + 1.0;
    float _2358 = exp2(log2(1.0 - (isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0)))) * 5.0);
    float _2365 = 1.0 - _2324;
    float _2375 = (0.5 / (((_2253 * ((_2338 * _2365) + _2324)) + 9.9999999392252902907785028219223e-09) + (((_2253 * _2365) + _2324) * _2338))) * _2338;
    float _4441 = isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : max(_2375, 0.0));
    float _2377 = (isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0))) * (_2347 / ((_2351 * _2351) * 3.141590118408203125));
    float _2387 = (((((_2358 * _2275) + _626) * cbLight._m0[_2312].x) * _2377) * _1999) + ((((cbLight._m0[_2224].x * _1965) * ((_2274 * _2275) + _626)) * _2298) * _2013);
    float _2388 = (((((_2358 * _2277) + _628) * cbLight._m0[_2312].y) * _2377) * _1999) + ((((cbLight._m0[_2224].y * _1967) * ((_2274 * _2277) + _628)) * _2298) * _2013);
    float _2389 = (((((_2358 * _2278) + _629) * cbLight._m0[_2312].z) * _2377) * _1999) + ((((cbLight._m0[_2224].z * _1969) * ((_2274 * _2278) + _629)) * _2298) * _2013);
    float _2445;
    float _2447;
    float _2449;
    if (_2053)
    {
        _2445 = _2387;
        _2447 = _2388;
        _2449 = _2389;
    }
    else
    {
        uint _2451 = _1976 + 2u;
        uint _2455 = _1976 + 10u;
        float _2469 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2451].w)) * _464) * 0.949999988079071044921875);
        float _2470 = _2469 * _2469;
        float _2471 = cbLight._m0[_2451].x + _541;
        float _2472 = cbLight._m0[_2451].y + _542;
        float _2473 = cbLight._m0[_2451].z + _543;
        float _2477 = inversesqrt(dot(vec3(_2471, _2472, _2473), vec3(_2471, _2472, _2473)));
        float _2478 = _2477 * _2471;
        float _2479 = _2477 * _2472;
        float _2480 = _2477 * _2473;
        float _2481 = dot(vec3(_461, _462, _463), vec3(cbLight._m0[_2451].xyz));
        float _4452 = isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0));
        float _2484 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
        float _2485 = dot(vec3(_461, _462, _463), vec3(_2478, _2479, _2480));
        float _4463 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
        float _2488 = isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0));
        float _2489 = dot(vec3(cbLight._m0[_2451].xyz), vec3(_2478, _2479, _2480));
        float _4474 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
        float _2493 = _2470 * _2470;
        float _2497 = ((_2488 * _2488) * (_2493 + (-1.0))) + 1.0;
        float _2504 = exp2(log2(1.0 - (isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0)))) * 5.0);
        float _2511 = 1.0 - _2470;
        float _2521 = (0.5 / (((_2253 * ((_2484 * _2511) + _2470)) + 9.9999999392252902907785028219223e-09) + (((_2253 * _2511) + _2470) * _2484))) * _2484;
        float _4485 = isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : max(_2521, 0.0));
        float _2523 = (isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0))) * (_2493 / ((_2497 * _2497) * 3.141590118408203125));
        float _2524 = isnan(1.0) ? _1991 : (isnan(_1991) ? 1.0 : min(_1991, 1.0));
        _2445 = (((((_2504 * _2275) + _626) * cbLight._m0[_2455].x) * _2523) * _2524) + _2387;
        _2447 = (((((_2504 * _2277) + _628) * cbLight._m0[_2455].y) * _2523) * _2524) + _2388;
        _2449 = (((((_2504 * _2278) + _629) * cbLight._m0[_2455].z) * _2523) * _2524) + _2389;
    }
    float _2555;
    float _2557;
    float _2559;
    if (_2162)
    {
        _2555 = _2445;
        _2557 = _2447;
        _2559 = _2449;
    }
    else
    {
        uint _2566 = _1976 + 3u;
        uint _2570 = _1976 + 11u;
        float _2584 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2566].w)) * _464) * 0.949999988079071044921875);
        float _2585 = _2584 * _2584;
        float _2586 = cbLight._m0[_2566].x + _541;
        float _2587 = cbLight._m0[_2566].y + _542;
        float _2588 = cbLight._m0[_2566].z + _543;
        float _2592 = inversesqrt(dot(vec3(_2586, _2587, _2588), vec3(_2586, _2587, _2588)));
        float _2593 = _2592 * _2586;
        float _2594 = _2592 * _2587;
        float _2595 = _2592 * _2588;
        float _2596 = dot(vec3(_461, _462, _463), vec3(cbLight._m0[_2566].xyz));
        float _4501 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0));
        float _2599 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
        float _2600 = dot(vec3(_461, _462, _463), vec3(_2593, _2594, _2595));
        float _4512 = isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : max(_2600, 0.0));
        float _2603 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
        float _2604 = dot(vec3(cbLight._m0[_2566].xyz), vec3(_2593, _2594, _2595));
        float _4523 = isnan(0.0) ? _2604 : (isnan(_2604) ? 0.0 : max(_2604, 0.0));
        float _2608 = _2585 * _2585;
        float _2612 = ((_2603 * _2603) * (_2608 + (-1.0))) + 1.0;
        float _2619 = exp2(log2(1.0 - (isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0)))) * 5.0);
        float _2626 = 1.0 - _2585;
        float _2636 = (0.5 / (((_2253 * ((_2599 * _2626) + _2585)) + 9.9999999392252902907785028219223e-09) + (((_2253 * _2626) + _2585) * _2599))) * _2599;
        float _4534 = isnan(0.0) ? _2636 : (isnan(_2636) ? 0.0 : max(_2636, 0.0));
        float _2638 = (isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0))) * (_2608 / ((_2612 * _2612) * 3.141590118408203125));
        float _2639 = isnan(1.0) ? _1992 : (isnan(_1992) ? 1.0 : min(_1992, 1.0));
        _2555 = (((((_2619 * _2275) + _626) * cbLight._m0[_2570].x) * _2638) * _2639) + _2445;
        _2557 = (((((_2619 * _2277) + _628) * cbLight._m0[_2570].y) * _2638) * _2639) + _2447;
        _2559 = (((((_2619 * _2278) + _629) * cbLight._m0[_2570].z) * _2638) * _2639) + _2449;
    }
    float _2705;
    float _2707;
    float _2709;
    float _2711;
    float _2713;
    float _2715;
    if (_1974.y == 0u)
    {
        uvec4 _2660 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2661 = _2660.x;
        uint _2672 = uint((float(_2660.y) * floor(float(uint(cbSceneParam._m0[85u].y * _563) / _2661))) + floor(float(uint(cbSceneParam._m0[85u].x * _562) / _2661)));
        float _2682 = (log2(_1752 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2683 = isnan(0.0) ? _2682 : (isnan(_2682) ? 0.0 : max(_2682, 0.0));
        uint _2686 = uint(isnan(14.0) ? _2683 : (isnan(_2683) ? 14.0 : min(_2683, 14.0)));
        uvec4 _2691 = texelFetch(g_lightClusterGridBuffer, int(((_2686 << 2u) + (_2672 << 6u)) >> 2u));
        uint _2692 = _2691.x;
        uint _2693 = _2660.z;
        float _2772;
        float _2774;
        float _2776;
        float _2778;
        float _2780;
        float _2782;
        if (((((1u << ((_2693 >> 4u) & 15u)) + 4294967295u) & _2692) == 0u) || ((_2693 & 240u) == 0u))
        {
            _2772 = 0.0;
            _2774 = 0.0;
            _2776 = 0.0;
            _2778 = 0.0;
            _2780 = 0.0;
            _2782 = 0.0;
        }
        else
        {
            float _2773;
            float _2775;
            float _2777;
            float _2779;
            float _2781;
            float _2783;
            float _2925 = 0.0;
            float _2926 = 0.0;
            float _2927 = 0.0;
            float _2928 = 0.0;
            float _2929 = 0.0;
            float _2930 = 0.0;
            uint _2931 = 0u;
            uint _2940;
            bool _2941;
            for (;;)
            {
                _2940 = texelFetch(g_lightClassification, int((((_2686 << 5u) + (_2672 << 9u)) + (_2931 << 2u)) >> 2u)).x;
                _2941 = _2940 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2941)
                {
                    frontier_phi_71_pred = _2930;
                    frontier_phi_71_pred_1 = _2929;
                    frontier_phi_71_pred_2 = _2928;
                    frontier_phi_71_pred_3 = _2927;
                    frontier_phi_71_pred_4 = _2926;
                    frontier_phi_71_pred_5 = _2925;
                }
                else
                {
                    float _3070;
                    float _3071;
                    float _3072;
                    float _3073;
                    float _3074;
                    float _3075;
                    uint _3076;
                    _3070 = _2925;
                    _3071 = _2926;
                    _3072 = _2927;
                    _3073 = _2928;
                    _3074 = _2929;
                    _3075 = _2930;
                    _3076 = _2940;
                    float _2997;
                    float _2998;
                    float _2999;
                    float _3000;
                    float _3001;
                    float _3002;
                    for (;;)
                    {
                        uint _3080 = uint(findLSB(_3076)) + (_2931 << 5u);
                        uint _3077 = (_3076 + 4294967295u) & _3076;
                        uint _3082 = _3080 * 48u;
                        vec4 _3096 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3082)).x, texelFetch(g_PointLightRenderingBuffer, int(_3082 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3082 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3082 + 3u)).x));
                        uint _3102 = (_3080 * 48u) + 4u;
                        vec4 _3115 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3102)).x, texelFetch(g_PointLightRenderingBuffer, int(_3102 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3102 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3102 + 3u)).x));
                        uint _3121 = (_3080 * 48u) + 8u;
                        vec3 _3132 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3121)).x, texelFetch(g_PointLightRenderingBuffer, int(_3121 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3121 + 2u)).x));
                        float _3136 = _3096.x - _1750;
                        float _3137 = _3096.y - _1751;
                        float _3138 = _3096.z - _1752;
                        float _3139 = dot(vec3(_3136, _3137, _3138), vec3(_3136, _3137, _3138));
                        float _3142 = inversesqrt(_3139);
                        float _3143 = _3142 * _3136;
                        float _3144 = _3142 * _3137;
                        float _3145 = _3142 * _3138;
                        float _3146 = dot(vec3(_583, _586, _589), vec3(_3143, _3144, _3145));
                        float _3151 = 1.0 - (_3139 * _3096.w);
                        float _4560 = isnan(0.0) ? _3151 : (isnan(_3151) ? 0.0 : max(_3151, 0.0));
                        float _3152 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
                        float _3153 = sqrt(_3139) * _3115.w;
                        float _3156 = 1.39999997615814208984375 / (_3153 + 1.39999997615814208984375);
                        float _3157 = _3156 * _3156;
                        float _3160 = ((1.0 - _3157) * _3146) + _3157;
                        float _3163 = _3153 * _3153;
                        float _3167 = ((isnan(0.0) ? _3160 : (isnan(_3160) ? 0.0 : max(_3160, 0.0))) * _3152) / ((_3163 * 0.699999988079071044921875) + 1.0);
                        float _3171 = (-0.0) - _1750;
                        float _3172 = (-0.0) - _1751;
                        float _3173 = (-0.0) - _1752;
                        float _3177 = inversesqrt(dot(vec3(_3171, _3172, _3173), vec3(_3171, _3172, _3173)));
                        float _3178 = _3177 * _3171;
                        float _3179 = _3177 * _3172;
                        float _3180 = _3177 * _3173;
                        float _3187 = exp2(log2(1.0 / ((_3163 * 3.5) + 5.0)) * 0.25);
                        float _3188 = 1.0 - _658;
                        float _3195 = sqrt(1.0 - ((1.0 - (_3188 * _3188)) * (1.0 - (_3187 * _3187))));
                        float _3196 = _3195 * _3195;
                        float _3197 = _3196 * _3196;
                        float _3198 = _3178 + _3143;
                        float _3199 = _3179 + _3144;
                        float _3200 = _3180 + _3145;
                        float _3204 = inversesqrt(dot(vec3(_3198, _3199, _3200), vec3(_3198, _3199, _3200)));
                        float _3208 = dot(vec3(_583, _586, _589), vec3(_3178, _3179, _3180));
                        float _4576 = isnan(0.0) ? _3208 : (isnan(_3208) ? 0.0 : max(_3208, 0.0));
                        float _3211 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
                        float _3212 = dot(vec3(_583, _586, _589), vec3(_3204 * _3198, _3204 * _3199, _3204 * _3200));
                        float _4587 = isnan(0.0) ? _3212 : (isnan(_3212) ? 0.0 : max(_3212, 0.0));
                        float _3215 = isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0));
                        float _3219 = ((_3215 * _3215) * (_3197 + (-1.0))) + 1.0;
                        float _3220 = _3156 * _3196;
                        float _3221 = _3220 * _3220;
                        float _3224 = ((1.0 - _3221) * _3146) + _3221;
                        float _4598 = isnan(0.0) ? _3224 : (isnan(_3224) ? 0.0 : max(_3224, 0.0));
                        float _3225 = isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0));
                        float _3226 = 1.0 - _3196;
                        float _3236 = (0.5 / (((_3225 * ((_3211 * _3226) + _3196)) + 9.9999999392252902907785028219223e-09) + (((_3225 * _3226) + _3196) * _3211))) * _3225;
                        float _4609 = isnan(0.0) ? _3236 : (isnan(_3236) ? 0.0 : max(_3236, 0.0));
                        float _3247 = (((_3197 * 3.1415927410125732421875) * (isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0)))) / ((_3219 * _3219) * ((_3163 * 2.1991131305694580078125) + 3.141590118408203125))) * _3152;
                        _3000 = (_3167 * _3115.x) + _3073;
                        _3001 = (_3167 * _3115.y) + _3074;
                        _3002 = (_3167 * _3115.z) + _3075;
                        _2997 = (_3247 * _3132.x) + _3070;
                        _2998 = (_3247 * _3132.y) + _3071;
                        _2999 = (_3247 * _3132.z) + _3072;
                        if (_3077 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3070 = _2997;
                            _3071 = _2998;
                            _3072 = _2999;
                            _3073 = _3000;
                            _3074 = _3001;
                            _3075 = _3002;
                            _3076 = _3077;
                        }
                    }
                    frontier_phi_71_pred = _3002;
                    frontier_phi_71_pred_1 = _3001;
                    frontier_phi_71_pred_2 = _3000;
                    frontier_phi_71_pred_3 = _2999;
                    frontier_phi_71_pred_4 = _2998;
                    frontier_phi_71_pred_5 = _2997;
                }
                _2783 = frontier_phi_71_pred;
                _2781 = frontier_phi_71_pred_1;
                _2779 = frontier_phi_71_pred_2;
                _2777 = frontier_phi_71_pred_3;
                _2775 = frontier_phi_71_pred_4;
                _2773 = frontier_phi_71_pred_5;
                uint _2932 = _2931 + 1u;
                if (_2932 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2925 = _2773;
                    _2926 = _2775;
                    _2927 = _2777;
                    _2928 = _2779;
                    _2929 = _2781;
                    _2930 = _2783;
                    _2931 = _2932;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2772 = _2773;
            _2774 = _2775;
            _2776 = _2777;
            _2778 = _2779;
            _2780 = _2781;
            _2782 = _2783;
        }
        uvec4 _2786 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2787 = _2786.z;
        uint _2789 = (_2787 >> 8u) & 15u;
        float _2893;
        float _2895;
        float _2897;
        float _2899;
        float _2901;
        float _2903;
        if (((4294967295u << _2789) & _2692) == 0u)
        {
            _2893 = _2772;
            _2895 = _2774;
            _2897 = _2776;
            _2899 = _2778;
            _2901 = _2780;
            _2903 = _2782;
        }
        else
        {
            float _2918 = inversesqrt(dot(vec3(_1750, _1751, _1752), vec3(_1750, _1751, _1752)));
            float _2919 = _2918 * _1750;
            float _2920 = _2918 * _1751;
            float _2921 = _2918 * _1752;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2789 < ((_2787 >> 12u) & 15u))
            {
                float _2894;
                float _2896;
                float _2898;
                float _2900;
                float _2902;
                float _2904;
                float _3053 = _2772;
                float _3054 = _2774;
                float _3055 = _2776;
                float _3056 = _2778;
                float _3057 = _2780;
                float _3058 = _2782;
                uint _3059 = _2789;
                uint _3068;
                bool _3069;
                for (;;)
                {
                    _3068 = texelFetch(g_lightClassification, int((((_2686 << 5u) + (_2672 << 9u)) + (_3059 << 2u)) >> 2u)).x;
                    _3069 = _3068 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3069)
                    {
                        frontier_phi_82_pred = _3058;
                        frontier_phi_82_pred_1 = _3057;
                        frontier_phi_82_pred_2 = _3056;
                        frontier_phi_82_pred_3 = _3055;
                        frontier_phi_82_pred_4 = _3054;
                        frontier_phi_82_pred_5 = _3053;
                    }
                    else
                    {
                        float _3261;
                        float _3262;
                        float _3263;
                        float _3264;
                        float _3265;
                        float _3266;
                        float _3556;
                        float _3557;
                        float _3558;
                        float _3559;
                        float _3560;
                        float _3561;
                        float _3274 = _3053;
                        float _3275 = _3054;
                        float _3276 = _3055;
                        float _3277 = _3056;
                        float _3278 = _3057;
                        float _3279 = _3058;
                        uint _3280 = _3068;
                        uint _3281;
                        vec4 _3306;
                        float _3307;
                        vec4 _3322;
                        vec3 _3334;
                        vec4 _3350;
                        vec4 _3366;
                        float _3412;
                        bool _3413;
                        for (;;)
                        {
                            uint _3291 = ((_3059 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3280));
                            _3281 = (_3280 + 4294967295u) & _3280;
                            uint _3293 = _3291 * 40u;
                            _3306 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3293)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 3u)).x));
                            _3307 = _3306.w;
                            uint _3309 = (_3291 * 40u) + 4u;
                            _3322 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3309)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 3u)).x));
                            uint _3324 = (_3291 * 40u) + 8u;
                            _3334 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3324)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 2u)).x));
                            uint _3337 = (_3291 * 40u) + 16u;
                            _3350 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3337)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3337 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3337 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3337 + 3u)).x));
                            uint _3353 = (_3291 * 40u) + 20u;
                            _3366 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3353)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 3u)).x));
                            uint _3368 = (_3291 * 40u) + 24u;
                            vec4 _3381 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3368)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 3u)).x));
                            uint _3387 = (_3291 * 40u) + 28u;
                            vec4 _3400 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3387)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 3u)).x));
                            _3412 = fma(_1752, _3400.z, fma(_1751, _3400.y, _3400.x * _1750)) + _3400.w;
                            _3413 = !((fma(_1752, _3381.z, fma(_1751, _3381.y, _3381.x * _1750)) + _3381.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3413)
                            {
                                float _3440 = _3306.x - _1750;
                                float _3441 = _3306.y - _1751;
                                float _3442 = _3306.z - _1752;
                                float _3443 = dot(vec3(_3440, _3441, _3442), vec3(_3440, _3441, _3442));
                                float _3446 = inversesqrt(_3443);
                                float _3447 = _3446 * _3440;
                                float _3448 = _3446 * _3441;
                                float _3449 = _3446 * _3442;
                                float _3453 = 1.0 - (_3443 / (_3307 * _3307));
                                float _4620 = isnan(0.0) ? _3453 : (isnan(_3453) ? 0.0 : max(_3453, 0.0));
                                float _3454 = isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0));
                                float _3458 = sqrt(_3443) * _3322.w;
                                float _3460 = 1.39999997615814208984375 / (_3458 + 1.39999997615814208984375);
                                float _3461 = _3460 * _3460;
                                float _3464 = ((1.0 - _3461) * dot(vec3(_3447, _3448, _3449), vec3(_583, _586, _589))) + _3461;
                                float _3467 = _3458 * _3458;
                                float _3471 = (fma(_1752, _3350.z, fma(_1751, _3350.y, _3350.x * _1750)) + _3350.w) / _3412;
                                float _3472 = (fma(_1752, _3366.z, fma(_1751, _3366.y, _3366.x * _1750)) + _3366.w) / _3412;
                                float _3476 = 1.0 - dot(vec2(_3471, _3472), vec2(_3471, _3472));
                                float _4636 = isnan(0.0) ? _3476 : (isnan(_3476) ? 0.0 : max(_3476, 0.0));
                                float _3477 = isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0));
                                float _3478 = _3477 * (((isnan(0.0) ? _3464 : (isnan(_3464) ? 0.0 : max(_3464, 0.0))) * _3454) / ((_3467 * 0.699999988079071044921875) + 1.0));
                                float _3490 = exp2(log2(1.0 / ((_3467 * 3.5) + 5.0)) * 0.25);
                                float _3491 = 1.0 - _658;
                                float _3498 = sqrt(1.0 - ((1.0 - (_3491 * _3491)) * (1.0 - (_3490 * _3490))));
                                float _3499 = _3498 * _3498;
                                float _3500 = _3499 * _3499;
                                float _3501 = _3447 - _2919;
                                float _3502 = _3448 - _2920;
                                float _3503 = _3449 - _2921;
                                float _3507 = inversesqrt(dot(vec3(_3501, _3502, _3503), vec3(_3501, _3502, _3503)));
                                float _3511 = dot(vec3(_583, _586, _589), vec3((-0.0) - _2919, (-0.0) - _2920, (-0.0) - _2921));
                                float _4647 = isnan(0.0) ? _3511 : (isnan(_3511) ? 0.0 : max(_3511, 0.0));
                                float _3514 = isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0));
                                float _3515 = dot(vec3(_583, _586, _589), vec3(_3507 * _3501, _3507 * _3502, _3507 * _3503));
                                float _4658 = isnan(0.0) ? _3515 : (isnan(_3515) ? 0.0 : max(_3515, 0.0));
                                float _3518 = isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0));
                                float _3522 = ((_3518 * _3518) * (_3500 + (-1.0))) + 1.0;
                                float _3523 = _3460 * _3499;
                                float _3524 = _3523 * _3523;
                                float _3530 = ((1.0 - _3524) * dot(vec3(_583, _586, _589), vec3(_3447, _3448, _3449))) + _3524;
                                float _4669 = isnan(0.0) ? _3530 : (isnan(_3530) ? 0.0 : max(_3530, 0.0));
                                float _3531 = isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0));
                                float _3532 = 1.0 - _3499;
                                float _3542 = (0.5 / (((_3531 * ((_3514 * _3532) + _3499)) + 9.9999999392252902907785028219223e-09) + (((_3531 * _3532) + _3499) * _3514))) * _3531;
                                float _4680 = isnan(0.0) ? _3542 : (isnan(_3542) ? 0.0 : max(_3542, 0.0));
                                float _3552 = (_3477 * _3454) * (((_3500 * 3.1415927410125732421875) * (isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0)))) / ((_3522 * _3522) * ((_3467 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3478 * _3322.z;
                                frontier_phi_88_pred_1 = _3478 * _3322.y;
                                frontier_phi_88_pred_2 = _3478 * _3322.x;
                                frontier_phi_88_pred_3 = _3552 * _3334.z;
                                frontier_phi_88_pred_4 = _3552 * _3334.y;
                                frontier_phi_88_pred_5 = _3552 * _3334.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3561 = frontier_phi_88_pred;
                            _3560 = frontier_phi_88_pred_1;
                            _3559 = frontier_phi_88_pred_2;
                            _3558 = frontier_phi_88_pred_3;
                            _3557 = frontier_phi_88_pred_4;
                            _3556 = frontier_phi_88_pred_5;
                            _3264 = _3559 + _3277;
                            _3265 = _3560 + _3278;
                            _3266 = _3561 + _3279;
                            _3261 = _3556 + _3274;
                            _3262 = _3557 + _3275;
                            _3263 = _3558 + _3276;
                            if (_3281 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3274 = _3261;
                                _3275 = _3262;
                                _3276 = _3263;
                                _3277 = _3264;
                                _3278 = _3265;
                                _3279 = _3266;
                                _3280 = _3281;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3266;
                        frontier_phi_82_pred_1 = _3265;
                        frontier_phi_82_pred_2 = _3264;
                        frontier_phi_82_pred_3 = _3263;
                        frontier_phi_82_pred_4 = _3262;
                        frontier_phi_82_pred_5 = _3261;
                    }
                    _2904 = frontier_phi_82_pred;
                    _2902 = frontier_phi_82_pred_1;
                    _2900 = frontier_phi_82_pred_2;
                    _2898 = frontier_phi_82_pred_3;
                    _2896 = frontier_phi_82_pred_4;
                    _2894 = frontier_phi_82_pred_5;
                    uint _3060 = _3059 + 1u;
                    if (_3060 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3053 = _2894;
                        _3054 = _2896;
                        _3055 = _2898;
                        _3056 = _2900;
                        _3057 = _2902;
                        _3058 = _2904;
                        _3059 = _3060;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2900;
                frontier_phi_63_64_ladder_1 = _2904;
                frontier_phi_63_64_ladder_2 = _2902;
                frontier_phi_63_64_ladder_3 = _2898;
                frontier_phi_63_64_ladder_4 = _2896;
                frontier_phi_63_64_ladder_5 = _2894;
            }
            else
            {
                frontier_phi_63_64_ladder = _2778;
                frontier_phi_63_64_ladder_1 = _2782;
                frontier_phi_63_64_ladder_2 = _2780;
                frontier_phi_63_64_ladder_3 = _2776;
                frontier_phi_63_64_ladder_4 = _2774;
                frontier_phi_63_64_ladder_5 = _2772;
            }
            _2893 = frontier_phi_63_64_ladder_5;
            _2895 = frontier_phi_63_64_ladder_4;
            _2897 = frontier_phi_63_64_ladder_3;
            _2899 = frontier_phi_63_64_ladder;
            _2901 = frontier_phi_63_64_ladder_2;
            _2903 = frontier_phi_63_64_ladder_1;
        }
        float _2908 = isnan(1.0) ? _642 : (isnan(_642) ? 1.0 : min(_642, 1.0));
        _2705 = (_2908 * _2899) + _2217;
        _2707 = (_2908 * _2901) + _2219;
        _2709 = (_2908 * _2903) + _2221;
        _2711 = ((_2893 * _626) * _2908) + _2555;
        _2713 = ((_2895 * _628) * _2908) + _2557;
        _2715 = ((_2897 * _629) * _2908) + _2559;
    }
    else
    {
        _2705 = _2217;
        _2707 = _2219;
        _2709 = _2221;
        _2711 = _2555;
        _2713 = _2557;
        _2715 = _2559;
    }
    float _4696 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _4707 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _4718 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _2732 = ((isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0))) * (_2705 + ((isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0))) * _642))) + ((_2711 + ((isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0))) * _1482)) * cbPerFrame._m0[3u].x);
    float _2733 = ((isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0))) * (_2707 + ((isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0))) * _642))) + ((_2713 + ((isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0))) * _1482)) * cbPerFrame._m0[3u].x);
    float _2734 = ((isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0))) * (_2709 + ((isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0))) * _642))) + ((_2715 + ((isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0))) * _1482)) * cbPerFrame._m0[3u].x);
    uint _2735 = _226 + 6u;
    float _2743 = _562 / cbSceneParam._m0[86u].x;
    float _2744 = _563 / cbSceneParam._m0[86u].y;
    vec4 _2758 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2743, _2744, (log2((isnan(cbSceneParam._m0[77u].w) ? _483 : (isnan(_483) ? cbSceneParam._m0[77u].w : min(_483, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2760 = _2758.x;
    float _2761 = _2758.y;
    float _2762 = _2758.z;
    float _2763 = _2758.w;
    float _2835;
    float _2837;
    float _2839;
    float _2841;
    if (_483 > cbSceneParam._m0[78u].w)
    {
        float _2797 = isnan(_483) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _483 : min(cbSceneParam._m0[80u].w, _483));
        float _2798 = _2797 / _483;
        float _2809 = _2798 * _534;
        float _2810 = _535 * _2798;
        float _2811 = (-0.0) - _2810;
        float _2813 = _2798 * _536;
        float _2815 = (cbSceneParam._m0[77u].w * _2811) / _2797;
        float _2816 = _2815 + cbSceneParam._m0[79u].w;
        float _2817 = cbSceneParam._m0[79u].w - _2810;
        float _2823 = sqrt(((_2809 * _2809) + (_2810 * _2810)) + (_2813 * _2813));
        float _2826 = (1.0 - (cbSceneParam._m0[77u].w / _2797)) * _2823;
        float _2831 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2833 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3010;
        if (abs((_2811 - _2815) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3010 = ((((_2816 > 0.0) ? exp2(_2831 * _2816) : (2.0 - exp2(_2833 * _2816))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2826;
        }
        else
        {
            float _2954 = 1.0 / cbSceneParam._m0[80u].x;
            float _2955 = isnan(_2817) ? _2816 : (isnan(_2816) ? _2817 : max(_2816, _2817));
            float _2956 = isnan(_2817) ? _2816 : (isnan(_2816) ? _2817 : min(_2816, _2817));
            float _2965 = isnan(0.0) ? _2955 : (isnan(_2955) ? 0.0 : min(_2955, 0.0));
            float _2966 = isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : min(_2956, 0.0));
            _3010 = ((abs(_2823 / _2811) * cbSceneParam._m0[80u].y) * ((((_2965 - _2966) * 2.0) - ((exp2(_2831 * (isnan(0.0) ? _2955 : (isnan(_2955) ? 0.0 : max(_2955, 0.0)))) - exp2(_2831 * (isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : max(_2956, 0.0))))) * _2954)) - ((exp2(_2833 * _2965) - exp2(_2833 * _2966)) * _2954))) + (_2826 * cbSceneParam._m0[80u].z);
        }
        vec4 _3012 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2743, _2744, 1.0), 0.0);
        float _3021 = exp2((_3010 * (-1.44269502162933349609375)) * (1.0 - _3012.w));
        float _3022 = log2(_3021);
        float _3038 = log2(_2763);
        _2835 = (exp2(_3038 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3022 * cbSceneParam._m0[78u].x)) * _3012.x) / cbSceneParam._m0[78u].x)) + _2760;
        _2837 = (exp2(_3038 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3022 * cbSceneParam._m0[78u].y)) * _3012.y) / cbSceneParam._m0[78u].y)) + _2761;
        _2839 = (exp2(_3038 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3022 * cbSceneParam._m0[78u].z)) * _3012.z) / cbSceneParam._m0[78u].z)) + _2762;
        _2841 = _3021 * _2763;
    }
    else
    {
        _2835 = _2760;
        _2837 = _2761;
        _2839 = _2762;
        _2841 = _2763;
    }
    bool _3048;
    vec4 _2851;
    vec4 _2873;
    float _2875;
    float _2879;
    float _2880;
    float _2881;
    float _2882;
    bool _2892;
    for (;;)
    {
        _2851 = cbMatDynParam._m0[0u];
        float _2853 = roundEven(_2851.y);
        bool _2854 = _2853 == 3.0;
        float _2855 = log2(_2841);
        float _2862 = exp2(_2855 * cbSceneParam._m0[78u].x) * _2732;
        float _2863 = exp2(_2855 * cbSceneParam._m0[78u].y) * _2733;
        float _2864 = exp2(_2855 * cbSceneParam._m0[78u].z) * _2734;
        float _2871 = _550 + (-0.5);
        _2873 = cbMtdParam._m0[1u];
        _2875 = _2873.y * _2871;
        float _2878 = (_2853 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2879 = _2878 * (_2854 ? _2862 : (_2862 + (cbSceneParam._m0[72u].w * _2835)));
        _2880 = _2878 * (_2854 ? _2863 : (_2863 + (cbSceneParam._m0[72u].w * _2837)));
        _2881 = _2878 * (_2854 ? _2864 : (_2864 + (cbSceneParam._m0[72u].w * _2839)));
        _2882 = _2871 * 0.999000012874603271484375;
        _2892 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2892)
        {
            if ((cbInstanceData._m0[_226 + 7u].x + _2882) < 0.5)
            {
                _3048 = true;
                break;
            }
        }
        uint _2989 = _602 + uint(_2851.w);
        if ((cbInstanceData._m0[_2989].w < 1.0) && ((cbInstanceData._m0[_2989].w + _2882) < 0.5))
        {
            _3048 = true;
            break;
        }
        if ((_2875 + 1.0) < _2873.x)
        {
            _3048 = true;
            break;
        }
        _3048 = false;
        break;
    }
    float _3252;
    if (_3048)
    {
        discard_state = true;
        _3252 = 0.0;
    }
    else
    {
        _3252 = cbInstanceData._m0[_2735].w;
    }
    SV_Target.x = _2879;
    SV_Target.y = _2880;
    SV_Target.z = _2881;
    SV_Target.w = _3252;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2735].w;
    discard_exit();
}


