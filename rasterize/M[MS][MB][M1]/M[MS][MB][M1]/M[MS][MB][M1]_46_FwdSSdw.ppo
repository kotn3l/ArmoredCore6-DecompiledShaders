#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1062;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _200 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _201 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _202 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _208 = inversesqrt(dot(vec3(_200, _201, _202), vec3(_200, _201, _202)));
    float _209 = _208 * _200;
    float _210 = _208 * _201;
    float _211 = _208 * _202;
    float _215 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _216 = _215 * NORMAL.x;
    float _217 = _215 * NORMAL.y;
    float _218 = _215 * NORMAL.z;
    float _222 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _223 = _222 * TANGENT.x;
    float _224 = _222 * TANGENT.y;
    float _225 = _222 * TANGENT.z;
    uint _228 = uint(roundEven(NORMAL.w)) * 13u;
    uint _234 = _228 + 1u;
    uint _238 = _228 + 2u;
    float _247 = sqrt(((cbInstanceData._m0[_234].x * cbInstanceData._m0[_234].x) + (cbInstanceData._m0[_228].x * cbInstanceData._m0[_228].x)) + (cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x));
    float _248 = _247 * TEXCOORD.z;
    float _249 = _247 * TEXCOORD.w;
    vec4 _268 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _274 = _268.x * cbMtdParam._m0[9u].x;
    float _275 = _268.y * cbMtdParam._m0[9u].y;
    float _276 = _268.z * cbMtdParam._m0[9u].z;
    vec4 _295 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _248) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _249) + cbTextureTilingScale._m0[14u].w));
    vec4 _315 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _248) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _249) + cbTextureTilingScale._m0[20u].w));
    vec4 _341 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _345 = _341.z;
    float _349 = (_341.x * 2.0) + (-1.0);
    float _350 = (_341.y * 2.0) + (-1.0);
    float _351 = dot(vec2(_349, _350), vec2(_349, _350));
    float _3413 = isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : max(_351, 0.0));
    float _357 = sqrt(1.0 - (isnan(1.0) ? _3413 : (isnan(_3413) ? 1.0 : min(_3413, 1.0))));
    float _362 = _349 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_315.x * 2.0) + (-1.0)));
    float _363 = _350 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_315.y * 2.0) + (-1.0)));
    float _366 = fma(_357, _216, fma(_363, _223, _362 * _209));
    float _369 = fma(_357, _217, fma(_363, _224, _362 * _210));
    float _372 = fma(_357, _218, fma(_363, _225, _362 * _211));
    float _376 = inversesqrt(dot(vec3(_366, _369, _372), vec3(_366, _369, _372)));
    vec4 _412 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _248) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _249) + cbTextureTilingScale._m0[11u].w));
    float _414 = _412.x;
    float _415 = 1.0 - _414;
    float _424 = (cbMtdParam._m0[19u].x + dot(vec4(_376 * _366, _376 * _369, _376 * _372, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_414 - _415) * cbMtdParam._m0[24u].z) + _415) * cbMtdParam._m0[21u].z);
    float _3424 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _425 = isnan(1.0) ? _3424 : (isnan(_3424) ? 1.0 : min(_3424, 1.0));
    float _432 = (_425 * ((_295.x * cbMtdParam._m0[18u].x) - _274)) + _274;
    float _433 = (_425 * ((_295.y * cbMtdParam._m0[18u].y) - _275)) + _275;
    float _434 = (_425 * ((_295.z * cbMtdParam._m0[18u].z) - _276)) + _276;
    vec4 _447 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _449 = _447.x;
    float _451 = _449 - (_449 * _425);
    float _456 = (((_315.z - _345) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _345;
    vec4 _469 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _248) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _249) + cbTextureTilingScale._m0[15u].w));
    float _476 = (_469.x * 2.0) + (-1.0);
    float _477 = (_469.y * 2.0) + (-1.0);
    float _478 = dot(vec2(_476, _477), vec2(_476, _477));
    float _3435 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _486 = ((_469.z - _456) * _425) + _456;
    float _496 = ((sqrt(1.0 - (isnan(1.0) ? _3435 : (isnan(_3435) ? 1.0 : min(_3435, 1.0)))) - _357) * _425) + _357;
    float _499 = (((_476 - _362) * _425) + _362) + (cbMtdParam._m0[21u].x * _362);
    float _500 = (((_477 - _363) * _425) + _363) + (cbMtdParam._m0[21u].x * _363);
    float _505 = cbMtdParam._m0[22u].x + _341.w;
    float _508 = fma(_496, _216, fma(_500, _223, _499 * _209));
    float _511 = fma(_496, _217, fma(_500, _224, _499 * _210));
    float _514 = fma(_496, _218, fma(_500, _225, _499 * _211));
    float _518 = inversesqrt(dot(vec3(_508, _511, _514), vec3(_508, _511, _514)));
    float _519 = _518 * _508;
    float _520 = _518 * _511;
    float _521 = _518 * _514;
    float _3446 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _522 = isnan(1.0) ? _3446 : (isnan(_3446) ? 1.0 : min(_3446, 1.0));
    float _3457 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _3468 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _3479 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _3490 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _3501 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _527 = isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0));
    float _541 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _582 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _592 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _582);
    float _593 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _582);
    float _594 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _582);
    float _598 = inversesqrt(dot(vec3(_592, _593, _594), vec3(_592, _593, _594)));
    float _599 = _592 * _598;
    float _600 = _593 * _598;
    float _601 = _594 * _598;
    float _607 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _608 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _629 = fma(_521, cbSceneParam._m0[5u].z, fma(_520, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _519));
    float _632 = fma(_521, cbSceneParam._m0[6u].z, fma(_520, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _519));
    float _635 = fma(_521, cbSceneParam._m0[7u].z, fma(_520, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _519));
    uint _649 = (_228 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _655 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3468 : (isnan(_3468) ? 1.0 : min(_3468, 1.0)))) * cbInstanceData._m0[_649].x;
    float _656 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3479 : (isnan(_3479) ? 1.0 : min(_3479, 1.0)))) * cbInstanceData._m0[_649].y;
    float _657 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3490 : (isnan(_3490) ? 1.0 : min(_3490, 1.0)))) * cbInstanceData._m0[_649].z;
    float _3512 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    float _658 = isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0));
    float _3523 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _659 = isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0));
    float _3534 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _660 = isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0));
    float _661 = 1.0 - _527;
    float _662 = _658 * _661;
    float _663 = _659 * _661;
    float _664 = _660 * _661;
    float _669 = (_658 + (-0.039999999105930328369140625)) * _527;
    float _670 = (_659 + (-0.039999999105930328369140625)) * _527;
    float _671 = (_660 + (-0.039999999105930328369140625)) * _527;
    float _672 = _669 + 0.039999999105930328369140625;
    float _674 = _670 + 0.039999999105930328369140625;
    float _675 = _671 + 0.039999999105930328369140625;
    vec4 _684 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _607, cbSceneParam._m0[86u].y * _608));
    float _688 = ((isnan(1.0) ? _3457 : (isnan(_3457) ? 1.0 : min(_3457, 1.0))) * TEXCOORD_5.w) * _684.x;
    float _689 = dot(vec3(_519, _520, _521), vec3(_599, _600, _601));
    float _692 = _689 * 2.0;
    float _696 = (_692 * _519) - _599;
    float _697 = (_692 * _520) - _600;
    float _698 = (_692 * _521) - _601;
    float _702 = abs(dot(vec3(_599, _600, _601), vec3(_519, _520, _521)));
    float _3545 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
    float _704 = sqrt(_522);
    float _717 = exp2((_704 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_704 * 3.0));
    float _723 = (1.0 - _717) * ((_704 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _724 = _717 * _704;
    float _752 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _756 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _760 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1061;
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    float _1076;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _786 = fma(_760, cbModelParam._m0[26u].z, fma(_756, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _752));
        float _790 = fma(_760, cbModelParam._m0[27u].z, fma(_756, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _752));
        float _794 = fma(_760, cbModelParam._m0[28u].z, fma(_756, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _752));
        float _819 = _752 + _519;
        float _820 = _756 + _520;
        float _821 = _760 + _521;
        float _831 = fma(_821, cbModelParam._m0[26u].z, fma(_820, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _819)) - _786;
        float _832 = fma(_821, cbModelParam._m0[27u].z, fma(_820, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _819)) - _790;
        float _833 = fma(_821, cbModelParam._m0[28u].z, fma(_820, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _819)) - _794;
        float _837 = inversesqrt(dot(vec3(_831, _832, _833), vec3(_831, _832, _833)));
        float _850 = ((_837 * _831) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_786 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _851 = ((_837 * _832) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_790 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _852 = ((_837 * _833) / cbModelParam._m0[34u].z) + ((((((_794 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _855 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_850, _851, _852), 0.0);
        vec4 _862 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_850, _851, _852), 0.0);
        vec4 _869 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_850, _851, _852), 0.0);
        vec4 _876 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_850, _851, _852), 0.0);
        float _889 = exp2((_855.w + (-0.5)) * 20.0) * 2.0;
        float _890 = _889 * (_855.x + (-0.5));
        float _891 = _889 * (_855.y + (-0.5));
        float _892 = _889 * (_855.z + (-0.5));
        float _899 = exp2((_862.w + (-0.5)) * 20.0) * 2.0;
        float _900 = _899 * (_862.x + (-0.5));
        float _901 = _899 * (_862.y + (-0.5));
        float _902 = _899 * (_862.z + (-0.5));
        float _909 = exp2((_869.w + (-0.5)) * 20.0) * 2.0;
        float _910 = _909 * (_869.x + (-0.5));
        float _911 = _909 * (_869.y + (-0.5));
        float _912 = _909 * (_869.z + (-0.5));
        float _919 = exp2((_876.w + (-0.5)) * 20.0) * 2.0;
        float _920 = _919 * (_876.x + (-0.5));
        float _921 = _919 * (_876.y + (-0.5));
        float _922 = _919 * (_876.z + (-0.5));
        float _923 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
        float _924 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
        float _925 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
        float _926 = _890 * 0.5;
        float _927 = _900 * 0.5;
        float _928 = _910 * 0.5;
        float _929 = dot(vec3(_926, _927, _928), vec3(_926, _927, _928));
        float _934 = (_929 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_929);
        float _943 = (dot(vec3(_519, _520, _521), vec3(_934 * _926, _934 * _927, _934 * _928)) + 1.0) * 0.5;
        float _3571 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
        float _953 = sqrt(((_927 * _927) + (_926 * _926)) + (_928 * _928)) / (_923 + 9.9999997473787516355514526367188e-06);
        float _3582 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        float _954 = isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0));
        float _955 = _954 * 2.0;
        float _959 = (1.0 - _954) / (_954 + 1.0);
        float _3593 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
        float _960 = isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0));
        float _969 = ((((1.0 - _960) * (_955 + 2.0)) * exp2(log2(isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0))) * (_955 + 1.0))) + _960) * _923;
        float _970 = _891 * 0.5;
        float _971 = _901 * 0.5;
        float _972 = _911 * 0.5;
        float _973 = dot(vec3(_970, _971, _972), vec3(_970, _971, _972));
        float _978 = (_973 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_973);
        float _986 = (dot(vec3(_519, _520, _521), vec3(_978 * _970, _978 * _971, _978 * _972)) + 1.0) * 0.5;
        float _3604 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _995 = sqrt(((_971 * _971) + (_970 * _970)) + (_972 * _972)) / (_924 + 9.9999997473787516355514526367188e-06);
        float _3615 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _996 = isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0));
        float _997 = _996 * 2.0;
        float _1001 = (1.0 - _996) / (_996 + 1.0);
        float _3626 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        float _1002 = isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0));
        float _1011 = ((((1.0 - _1002) * (_997 + 2.0)) * exp2(log2(isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0))) * (_997 + 1.0))) + _1002) * _924;
        float _1012 = _892 * 0.5;
        float _1013 = _902 * 0.5;
        float _1014 = _912 * 0.5;
        float _1015 = dot(vec3(_1012, _1013, _1014), vec3(_1012, _1013, _1014));
        float _1020 = (_1015 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1015);
        float _1028 = (dot(vec3(_519, _520, _521), vec3(_1020 * _1012, _1020 * _1013, _1020 * _1014)) + 1.0) * 0.5;
        float _3637 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1037 = sqrt(((_1013 * _1013) + (_1012 * _1012)) + (_1014 * _1014)) / (_925 + 9.9999997473787516355514526367188e-06);
        float _3648 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1038 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
        float _1039 = _1038 * 2.0;
        float _1043 = (1.0 - _1038) / (_1038 + 1.0);
        float _3659 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1044 = isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0));
        float _1053 = ((((1.0 - _1044) * (_1039 + 2.0)) * exp2(log2(isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0))) * (_1039 + 1.0))) + _1044) * _925;
        _1061 = _892;
        _1063 = _891;
        _1064 = _890;
        _1065 = _902;
        _1066 = _901;
        _1067 = _900;
        _1068 = _912;
        _1069 = _911;
        _1070 = _910;
        _1071 = _925;
        _1072 = _924;
        _1073 = _923;
        _1074 = cbModelParam._m0[36u].z * (isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0)));
        _1075 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0)));
        _1076 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0)));
    }
    else
    {
        _1061 = _1062;
        _1063 = _1062;
        _1064 = _1062;
        _1065 = _1062;
        _1066 = _1062;
        _1067 = _1062;
        _1068 = _1062;
        _1069 = _1062;
        _1070 = _1062;
        _1071 = _1062;
        _1072 = _1062;
        _1073 = _1062;
        _1074 = 0.0;
        _1075 = 0.0;
        _1076 = 0.0;
    }
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1101 = fma(_760, cbModelParam._m0[30u].z, fma(_756, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _752));
        float _1105 = fma(_760, cbModelParam._m0[31u].z, fma(_756, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _752));
        float _1109 = fma(_760, cbModelParam._m0[32u].z, fma(_756, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _752));
        float _1132 = _752 + _519;
        float _1133 = _756 + _520;
        float _1134 = _760 + _521;
        float _1144 = fma(_1134, cbModelParam._m0[30u].z, fma(_1133, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1132)) - _1101;
        float _1145 = fma(_1134, cbModelParam._m0[31u].z, fma(_1133, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1132)) - _1105;
        float _1146 = fma(_1134, cbModelParam._m0[32u].z, fma(_1133, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1132)) - _1109;
        float _1150 = inversesqrt(dot(vec3(_1144, _1145, _1146), vec3(_1144, _1145, _1146)));
        float _1163 = ((_1150 * _1144) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1101 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1164 = ((_1150 * _1145) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1105 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1165 = ((_1150 * _1146) / cbModelParam._m0[35u].z) + ((((((_1109 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1167 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1163, _1164, _1165), 0.0);
        vec4 _1174 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1163, _1164, _1165), 0.0);
        vec4 _1181 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1163, _1164, _1165), 0.0);
        vec4 _1188 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1163, _1164, _1165), 0.0);
        float _1200 = exp2((_1167.w + (-0.5)) * 20.0) * 2.0;
        float _1201 = _1200 * (_1167.x + (-0.5));
        float _1202 = _1200 * (_1167.y + (-0.5));
        float _1203 = _1200 * (_1167.z + (-0.5));
        float _1210 = exp2((_1174.w + (-0.5)) * 20.0) * 2.0;
        float _1211 = _1210 * (_1174.x + (-0.5));
        float _1212 = _1210 * (_1174.y + (-0.5));
        float _1213 = _1210 * (_1174.z + (-0.5));
        float _1220 = exp2((_1181.w + (-0.5)) * 20.0) * 2.0;
        float _1221 = _1220 * (_1181.x + (-0.5));
        float _1222 = _1220 * (_1181.y + (-0.5));
        float _1223 = _1220 * (_1181.z + (-0.5));
        float _1230 = exp2((_1188.w + (-0.5)) * 20.0) * 2.0;
        float _1231 = _1230 * (_1188.x + (-0.5));
        float _1232 = _1230 * (_1188.y + (-0.5));
        float _1233 = _1230 * (_1188.z + (-0.5));
        float _1234 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1235 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1236 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1237 = _1201 * 0.5;
        float _1238 = _1211 * 0.5;
        float _1239 = _1221 * 0.5;
        float _1240 = dot(vec3(_1237, _1238, _1239), vec3(_1237, _1238, _1239));
        float _1245 = (_1240 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1240);
        float _1253 = (dot(vec3(_519, _520, _521), vec3(_1245 * _1237, _1245 * _1238, _1245 * _1239)) + 1.0) * 0.5;
        float _3700 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1262 = sqrt(((_1238 * _1238) + (_1237 * _1237)) + (_1239 * _1239)) / (_1234 + 9.9999997473787516355514526367188e-06);
        float _3711 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1263 = isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0));
        float _1264 = _1263 * 2.0;
        float _1268 = (1.0 - _1263) / (_1263 + 1.0);
        float _3722 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1269 = isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0));
        float _1278 = ((((1.0 - _1269) * (_1264 + 2.0)) * exp2(log2(isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0))) * (_1264 + 1.0))) + _1269) * _1234;
        float _1279 = _1202 * 0.5;
        float _1280 = _1212 * 0.5;
        float _1281 = _1222 * 0.5;
        float _1282 = dot(vec3(_1279, _1280, _1281), vec3(_1279, _1280, _1281));
        float _1287 = (_1282 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1282);
        float _1295 = (dot(vec3(_519, _520, _521), vec3(_1287 * _1279, _1287 * _1280, _1287 * _1281)) + 1.0) * 0.5;
        float _3733 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1304 = sqrt(((_1280 * _1280) + (_1279 * _1279)) + (_1281 * _1281)) / (_1235 + 9.9999997473787516355514526367188e-06);
        float _3744 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1305 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
        float _1306 = _1305 * 2.0;
        float _1310 = (1.0 - _1305) / (_1305 + 1.0);
        float _3755 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1311 = isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0));
        float _1320 = ((((1.0 - _1311) * (_1306 + 2.0)) * exp2(log2(isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0))) * (_1306 + 1.0))) + _1311) * _1235;
        float _1321 = _1203 * 0.5;
        float _1322 = _1213 * 0.5;
        float _1323 = _1223 * 0.5;
        float _1324 = dot(vec3(_1321, _1322, _1323), vec3(_1321, _1322, _1323));
        float _1329 = (_1324 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1324);
        float _1337 = (dot(vec3(_519, _520, _521), vec3(_1329 * _1321, _1329 * _1322, _1329 * _1323)) + 1.0) * 0.5;
        float _3766 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1346 = sqrt(((_1322 * _1322) + (_1321 * _1321)) + (_1323 * _1323)) / (_1236 + 9.9999997473787516355514526367188e-06);
        float _3777 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1347 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
        float _1348 = _1347 * 2.0;
        float _1352 = (1.0 - _1347) / (_1347 + 1.0);
        float _3788 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1353 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
        float _1362 = ((((1.0 - _1353) * (_1348 + 2.0)) * exp2(log2(isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0))) * (_1348 + 1.0))) + _1353) * _1236;
        _1370 = _1203;
        _1371 = _1202;
        _1372 = _1201;
        _1373 = _1213;
        _1374 = _1212;
        _1375 = _1211;
        _1376 = _1223;
        _1377 = _1222;
        _1378 = _1221;
        _1379 = _1236;
        _1380 = _1235;
        _1381 = _1234;
        _1382 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0)));
        _1383 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0)));
        _1384 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0)));
    }
    else
    {
        _1370 = _1062;
        _1371 = _1062;
        _1372 = _1062;
        _1373 = _1062;
        _1374 = _1062;
        _1375 = _1062;
        _1376 = _1062;
        _1377 = _1062;
        _1378 = _1062;
        _1379 = _1062;
        _1380 = _1062;
        _1381 = _1062;
        _1382 = 0.0;
        _1383 = 0.0;
        _1384 = 0.0;
    }
    float _1394 = (cbModelParam._m0[1u].x * (_1382 - _1074)) + _1074;
    float _1395 = (cbModelParam._m0[1u].x * (_1383 - _1075)) + _1075;
    float _1396 = (cbModelParam._m0[1u].x * (_1384 - _1076)) + _1076;
    float _1417 = fma(_1396, cbSceneParam._m0[89u].z, fma(_1395, cbSceneParam._m0[89u].y, _1394 * cbSceneParam._m0[89u].x));
    float _1420 = fma(_1396, cbSceneParam._m0[90u].z, fma(_1395, cbSceneParam._m0[90u].y, _1394 * cbSceneParam._m0[90u].x));
    float _1423 = fma(_1396, cbSceneParam._m0[91u].z, fma(_1395, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1394));
    float _1438 = _696 * 0.5;
    float _1439 = _697 * 0.5;
    float _1440 = _698 * 0.5;
    float _1441 = dot(vec4(_1438, _1439, _1440, 1.0), vec4(_1372, _1375, _1378, _1381));
    float _1444 = dot(vec4(_1438, _1439, _1440, 1.0), vec4(_1371, _1374, _1377, _1380));
    float _1447 = dot(vec4(_1438, _1439, _1440, 1.0), vec4(_1370, _1373, _1376, _1379));
    float _1481;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1454 = dot(vec4(_1438, _1439, _1440, 1.0), vec4(_1061, _1065, _1068, _1071));
        float _1458 = dot(vec4(_1438, _1439, _1440, 1.0), vec4(_1063, _1066, _1069, _1072));
        float _1462 = dot(vec4(_1438, _1439, _1440, 1.0), vec4(_1064, _1067, _1070, _1073));
        float _1469 = dot(vec4(cbModelParam._m0[39u]), vec4(_1438, _1439, _1440, 1.0));
        _1481 = dot(vec3(isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0)), isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0)), isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1469) ? 0.0 : (isnan(0.0) ? _1469 : max(0.0, _1469))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1481 = 1.0;
    }
    float _1492;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1483 = dot(vec4(cbModelParam._m0[40u]), vec4(_1438, _1439, _1440, 1.0));
        _1492 = dot(vec3(isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0)), isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0)), isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1483) ? 0.0 : (isnan(0.0) ? _1483 : max(0.0, _1483))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1492 = 1.0;
    }
    float _1496 = (_1492 * cbModelParam._m0[1u].x) + (_1481 * (1.0 - cbModelParam._m0[1u].x));
    float _1506 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _522);
    float _1507 = isnan(_1506) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1506 : min(cbModelParam._m0[25u].z, _1506));
    float _1587;
    float _1589;
    float _1591;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1554 = fma(_760, cbModelParam._m0[13u].z, fma(_756, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _752)) + cbModelParam._m0[13u].w;
        float _1558 = fma(_760, cbModelParam._m0[14u].z, fma(_756, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _752)) + cbModelParam._m0[14u].w;
        float _1562 = fma(_760, cbModelParam._m0[15u].z, fma(_756, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _752)) + cbModelParam._m0[15u].w;
        float _1565 = fma(_698, cbModelParam._m0[13u].z, fma(_697, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _696));
        float _1568 = fma(_698, cbModelParam._m0[14u].z, fma(_697, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _696));
        float _1571 = fma(_698, cbModelParam._m0[15u].z, fma(_697, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _696));
        float _1599;
        if (_1565 > 0.0)
        {
            _1599 = abs((1.0 - _1554) / _1565);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1565 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1554 + 1.0) / _1565);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1599 = frontier_phi_14_12_ladder;
        }
        float _1823;
        if (_1568 > 0.0)
        {
            _1823 = abs((1.0 - _1558) / _1568);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1568 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1558 + 1.0) / _1568);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1823 = frontier_phi_23_19_ladder;
        }
        float _2080;
        if (_1571 > 0.0)
        {
            _2080 = abs((1.0 - _1562) / _1571);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1571 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1562 + 1.0) / _1571);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2080 = frontier_phi_35_30_ladder;
        }
        float _2082 = isnan(_1823) ? _1599 : (isnan(_1599) ? _1823 : min(_1599, _1823));
        float _2083 = isnan(_2080) ? _2082 : (isnan(_2082) ? _2080 : min(_2082, _2080));
        float _2087 = (_2083 * _1565) + _1554;
        float _2088 = (_2083 * _1568) + _1558;
        float _2089 = (_2083 * _1571) + _1562;
        float _2090 = _2083 * 9.9999997473787516355514526367188e-05;
        float _2092 = (-1.0) - _2090;
        float _2094 = _2090 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2089 > _2094) || ((_2089 < _2092) || ((_2088 > _2094) || ((_2088 < _2092) || ((_2087 < _2092) || (_2087 > _2094))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2217 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2089, cbModelParam._m0[9u].z, fma(_2088, cbModelParam._m0[9u].y, _2087 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2089, cbModelParam._m0[10u].z, fma(_2088, cbModelParam._m0[10u].y, _2087 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2089, cbModelParam._m0[11u].z, fma(_2088, cbModelParam._m0[11u].y, _2087 * cbModelParam._m0[11u].x))), _1507);
            frontier_phi_13_35_ladder = _2217.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2217.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2217.x * cbModelParam._m0[1u].y;
        }
        _1587 = frontier_phi_13_35_ladder_2;
        _1589 = frontier_phi_13_35_ladder_1;
        _1591 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1575 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_696, _697, _698), _1507);
        _1587 = _1575.x * cbModelParam._m0[1u].y;
        _1589 = _1575.y * cbModelParam._m0[1u].y;
        _1591 = _1575.z * cbModelParam._m0[1u].y;
    }
    float _1595 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _522);
    float _1596 = isnan(_1595) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1595 : min(cbModelParam._m0[25u].w, _1595));
    float _1685;
    float _1687;
    float _1689;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1649 = fma(_760, cbModelParam._m0[21u].z, fma(_756, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _752)) + cbModelParam._m0[21u].w;
        float _1653 = fma(_760, cbModelParam._m0[22u].z, fma(_756, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _752)) + cbModelParam._m0[22u].w;
        float _1657 = fma(_760, cbModelParam._m0[23u].z, fma(_756, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _752)) + cbModelParam._m0[23u].w;
        float _1660 = fma(_698, cbModelParam._m0[21u].z, fma(_697, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _696));
        float _1663 = fma(_698, cbModelParam._m0[22u].z, fma(_697, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _696));
        float _1666 = fma(_698, cbModelParam._m0[23u].z, fma(_697, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _696));
        float _1828;
        if (_1660 > 0.0)
        {
            _1828 = abs((1.0 - _1649) / _1660);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1660 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1649 + 1.0) / _1660);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1828 = frontier_phi_25_21_ladder;
        }
        float _2107;
        if (_1663 > 0.0)
        {
            _2107 = abs((1.0 - _1653) / _1663);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1663 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1653 + 1.0) / _1663);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2107 = frontier_phi_37_32_ladder;
        }
        float _2320;
        if (_1666 > 0.0)
        {
            _2320 = abs((1.0 - _1657) / _1666);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1666 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1657 + 1.0) / _1666);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2320 = frontier_phi_46_43_ladder;
        }
        float _2322 = isnan(_2107) ? _1828 : (isnan(_1828) ? _2107 : min(_1828, _2107));
        float _2323 = isnan(_2320) ? _2322 : (isnan(_2322) ? _2320 : min(_2322, _2320));
        float _2327 = (_2323 * _1660) + _1649;
        float _2328 = (_2323 * _1663) + _1653;
        float _2329 = (_2323 * _1666) + _1657;
        float _2330 = _2323 * 9.9999997473787516355514526367188e-05;
        float _2331 = (-1.0) - _2330;
        float _2333 = _2330 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2329 > _2333) || ((_2329 < _2331) || ((_2328 > _2333) || ((_2328 < _2331) || ((_2327 < _2331) || (_2327 > _2333))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2528 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2329, cbModelParam._m0[17u].z, fma(_2328, cbModelParam._m0[17u].y, _2327 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2329, cbModelParam._m0[18u].z, fma(_2328, cbModelParam._m0[18u].y, _2327 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2329, cbModelParam._m0[19u].z, fma(_2328, cbModelParam._m0[19u].y, _2327 * cbModelParam._m0[19u].x))), _1596);
            frontier_phi_22_46_ladder = _2528.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2528.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2528.x * cbModelParam._m0[1u].z;
        }
        _1685 = frontier_phi_22_46_ladder_2;
        _1687 = frontier_phi_22_46_ladder_1;
        _1689 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1669 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_696, _697, _698), _1596);
        _1685 = _1669.x * cbModelParam._m0[1u].z;
        _1687 = _1669.y * cbModelParam._m0[1u].z;
        _1689 = _1669.z * cbModelParam._m0[1u].z;
    }
    float _1702 = (((_723 * _672) + _724) * _688) * ((cbModelParam._m0[1u].w * (_1685 - _1587)) + _1587);
    float _1704 = (((_723 * _674) + _724) * _688) * ((cbModelParam._m0[1u].w * (_1687 - _1589)) + _1589);
    float _1706 = (((_723 * _675) + _724) * _688) * ((cbModelParam._m0[1u].w * (_1689 - _1591)) + _1591);
    float _1709 = fma(_1706, cbSceneParam._m0[89u].z, fma(_1704, cbSceneParam._m0[89u].y, _1702 * cbSceneParam._m0[89u].x));
    float _1712 = fma(_1706, cbSceneParam._m0[90u].z, fma(_1704, cbSceneParam._m0[90u].y, _1702 * cbSceneParam._m0[90u].x));
    float _1715 = fma(_1706, cbSceneParam._m0[91u].z, fma(_1704, cbSceneParam._m0[91u].y, _1702 * cbSceneParam._m0[91u].x));
    vec4 _1723 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_607, _608));
    float _1725 = _1723.w;
    float _1737 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1725);
    float _1738 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1725);
    float _1739 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1725);
    uvec4 _1743 = floatBitsToUint(cbInstanceData._m0[_228 + 5u]);
    uint _1745 = _1743.x * 14u;
    uint _1746 = _1745 + 13u;
    float _1753 = _688 + (-1.0);
    float _1758 = (cbLight._m0[_1746].x * _1753) + 1.0;
    float _1759 = (cbLight._m0[_1746].y * _1753) + 1.0;
    float _1760 = (cbLight._m0[_1746].z * _1753) + 1.0;
    float _1761 = (cbLight._m0[_1746].w * _1753) + 1.0;
    uint _1762 = _1745 + 5u;
    float _1768 = isnan(1.0) ? _1759 : (isnan(_1759) ? 1.0 : min(_1759, 1.0));
    uint _1772 = _1745 + 4u;
    float _1782 = isnan(1.0) ? _1758 : (isnan(_1758) ? 1.0 : min(_1758, 1.0));
    uint _1786 = _1745 | 1u;
    float _1797 = dot(vec3(cbLight._m0[_1745].xyz), vec3(_519, _520, _521));
    float _1800 = dot(vec3(cbLight._m0[_1786].xyz), vec3(_519, _520, _521));
    float _3924 = isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0));
    float _3935 = isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0));
    float _1805 = (isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0))) * 0.3183098733425140380859375;
    float _1807 = (isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0))) * 0.3183098733425140380859375;
    float _1814 = ((cbLight._m0[_1762].x * _1768) * _1807) + (((cbLight._m0[_1772].x * _1737) * _1782) * _1805);
    float _1815 = ((_1768 * cbLight._m0[_1762].y) * _1807) + (((cbLight._m0[_1772].y * _1738) * _1782) * _1805);
    float _1816 = ((_1768 * cbLight._m0[_1762].z) * _1807) + (((cbLight._m0[_1772].z * _1739) * _1782) * _1805);
    uvec4 _1820 = floatBitsToUint(cbLight._m0[_1745 + 12u]);
    bool _1822 = _1820.x == 0u;
    float _1833;
    float _1835;
    float _1837;
    if (_1822)
    {
        _1833 = _1814;
        _1835 = _1815;
        _1837 = _1816;
    }
    else
    {
        uint _1841 = _1745 + 6u;
        float _1857 = (dot(vec3(cbLight._m0[_1745 + 2u].xyz), vec3(_519, _520, _521)) * 0.5) + 0.5;
        float _1858 = _1857 * _1857;
        float _3946 = isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0));
        float _1859 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
        float _1860 = isnan(1.0) ? _1760 : (isnan(_1760) ? 1.0 : min(_1760, 1.0));
        _1833 = (((cbLight._m0[_1841].x * 0.3183098733425140380859375) * _1859) * _1860) + _1814;
        _1835 = (((cbLight._m0[_1841].y * 0.3183098733425140380859375) * _1859) * _1860) + _1815;
        _1837 = (((cbLight._m0[_1841].z * 0.3183098733425140380859375) * _1859) * _1860) + _1816;
    }
    bool _1840 = _1820.y == 0u;
    float _1878;
    float _1880;
    float _1882;
    if (_1840)
    {
        _1878 = _1833;
        _1880 = _1835;
        _1882 = _1837;
    }
    else
    {
        uint _2051 = _1745 + 7u;
        float _2067 = (dot(vec3(cbLight._m0[_1745 + 3u].xyz), vec3(_519, _520, _521)) * 0.5) + 0.5;
        float _2068 = _2067 * _2067;
        float _3962 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
        float _2069 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
        float _2070 = isnan(1.0) ? _1761 : (isnan(_1761) ? 1.0 : min(_1761, 1.0));
        _1878 = (((cbLight._m0[_2051].x * 0.3183098733425140380859375) * _2069) * _2070) + _1833;
        _1880 = (((cbLight._m0[_2051].y * 0.3183098733425140380859375) * _2069) * _2070) + _1835;
        _1882 = (((cbLight._m0[_2051].z * 0.3183098733425140380859375) * _2069) * _2070) + _1837;
    }
    uint _1885 = _1745 + 8u;
    float _1898 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1745].w)) * _522) * 0.949999988079071044921875);
    float _1899 = _1898 * _1898;
    float _1900 = cbLight._m0[_1745].x + _599;
    float _1901 = cbLight._m0[_1745].y + _600;
    float _1902 = cbLight._m0[_1745].z + _601;
    float _1906 = inversesqrt(dot(vec3(_1900, _1901, _1902), vec3(_1900, _1901, _1902)));
    float _1907 = _1906 * _1900;
    float _1908 = _1906 * _1901;
    float _1909 = _1906 * _1902;
    float _1910 = dot(vec3(_519, _520, _521), vec3(cbLight._m0[_1745].xyz));
    float _3978 = isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0));
    float _1913 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
    float _3989 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _1914 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
    float _1915 = dot(vec3(_519, _520, _521), vec3(_1907, _1908, _1909));
    float _4000 = isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0));
    float _1918 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
    float _1919 = dot(vec3(cbLight._m0[_1745].xyz), vec3(_1907, _1908, _1909));
    float _4011 = isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0));
    float _1923 = _1899 * _1899;
    float _1927 = ((_1918 * _1918) * (_1923 + (-1.0))) + 1.0;
    float _1935 = exp2(log2(1.0 - (isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0)))) * 5.0);
    float _1936 = 0.959999978542327880859375 - _669;
    float _1938 = 0.959999978542327880859375 - _670;
    float _1939 = 0.959999978542327880859375 - _671;
    float _1946 = 1.0 - _1899;
    float _1957 = (0.5 / (((_1914 * ((_1913 * _1946) + _1899)) + 9.9999999392252902907785028219223e-09) + (((_1914 * _1946) + _1899) * _1913))) * _1913;
    float _4022 = isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0));
    float _1959 = (isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0))) * (_1923 / ((_1927 * _1927) * 3.141590118408203125));
    uint _1973 = _1745 + 9u;
    float _1984 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1786].w)) * _522) * 0.949999988079071044921875);
    float _1985 = _1984 * _1984;
    float _1986 = cbLight._m0[_1786].x + _599;
    float _1987 = cbLight._m0[_1786].y + _600;
    float _1988 = cbLight._m0[_1786].z + _601;
    float _1992 = inversesqrt(dot(vec3(_1986, _1987, _1988), vec3(_1986, _1987, _1988)));
    float _1993 = _1992 * _1986;
    float _1994 = _1992 * _1987;
    float _1995 = _1992 * _1988;
    float _1996 = dot(vec3(_519, _520, _521), vec3(cbLight._m0[_1786].xyz));
    float _4033 = isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0));
    float _1999 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
    float _2000 = dot(vec3(_519, _520, _521), vec3(_1993, _1994, _1995));
    float _4044 = isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0));
    float _2003 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
    float _2004 = dot(vec3(cbLight._m0[_1786].xyz), vec3(_1993, _1994, _1995));
    float _4055 = isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0));
    float _2008 = _1985 * _1985;
    float _2012 = ((_2003 * _2003) * (_2008 + (-1.0))) + 1.0;
    float _2019 = exp2(log2(1.0 - (isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0)))) * 5.0);
    float _2026 = 1.0 - _1985;
    float _2036 = (0.5 / (((_1914 * ((_1999 * _2026) + _1985)) + 9.9999999392252902907785028219223e-09) + (((_1914 * _2026) + _1985) * _1999))) * _1999;
    float _4066 = isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0));
    float _2038 = (isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0))) * (_2008 / ((_2012 * _2012) * 3.141590118408203125));
    float _2048 = (((((_2019 * _1936) + _672) * cbLight._m0[_1973].x) * _2038) * _1768) + ((((cbLight._m0[_1885].x * _1737) * ((_1935 * _1936) + _672)) * _1959) * _1782);
    float _2049 = (((((_2019 * _1938) + _674) * cbLight._m0[_1973].y) * _2038) * _1768) + ((((cbLight._m0[_1885].y * _1738) * ((_1935 * _1938) + _674)) * _1959) * _1782);
    float _2050 = (((((_2019 * _1939) + _675) * cbLight._m0[_1973].z) * _2038) * _1768) + ((((cbLight._m0[_1885].z * _1739) * ((_1935 * _1939) + _675)) * _1959) * _1782);
    float _2112;
    float _2114;
    float _2116;
    if (_1822)
    {
        _2112 = _2048;
        _2114 = _2049;
        _2116 = _2050;
    }
    else
    {
        uint _2118 = _1745 + 2u;
        uint _2122 = _1745 + 10u;
        float _2136 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2118].w)) * _522) * 0.949999988079071044921875);
        float _2137 = _2136 * _2136;
        float _2138 = cbLight._m0[_2118].x + _599;
        float _2139 = cbLight._m0[_2118].y + _600;
        float _2140 = cbLight._m0[_2118].z + _601;
        float _2144 = inversesqrt(dot(vec3(_2138, _2139, _2140), vec3(_2138, _2139, _2140)));
        float _2145 = _2144 * _2138;
        float _2146 = _2144 * _2139;
        float _2147 = _2144 * _2140;
        float _2148 = dot(vec3(_519, _520, _521), vec3(cbLight._m0[_2118].xyz));
        float _4077 = isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0));
        float _2151 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
        float _2152 = dot(vec3(_519, _520, _521), vec3(_2145, _2146, _2147));
        float _4088 = isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0));
        float _2155 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
        float _2156 = dot(vec3(cbLight._m0[_2118].xyz), vec3(_2145, _2146, _2147));
        float _4099 = isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0));
        float _2160 = _2137 * _2137;
        float _2164 = ((_2155 * _2155) * (_2160 + (-1.0))) + 1.0;
        float _2171 = exp2(log2(1.0 - (isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0)))) * 5.0);
        float _2178 = 1.0 - _2137;
        float _2188 = (0.5 / (((_1914 * ((_2151 * _2178) + _2137)) + 9.9999999392252902907785028219223e-09) + (((_1914 * _2178) + _2137) * _2151))) * _2151;
        float _4110 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
        float _2190 = (isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0))) * (_2160 / ((_2164 * _2164) * 3.141590118408203125));
        float _2191 = isnan(1.0) ? _1760 : (isnan(_1760) ? 1.0 : min(_1760, 1.0));
        _2112 = (((((_2171 * _1936) + _672) * cbLight._m0[_2122].x) * _2190) * _2191) + _2048;
        _2114 = (((((_2171 * _1938) + _674) * cbLight._m0[_2122].y) * _2190) * _2191) + _2049;
        _2116 = (((((_2171 * _1939) + _675) * cbLight._m0[_2122].z) * _2190) * _2191) + _2050;
    }
    float _2226;
    float _2228;
    float _2230;
    if (_1840)
    {
        _2226 = _2112;
        _2228 = _2114;
        _2230 = _2116;
    }
    else
    {
        uint _2237 = _1745 + 3u;
        uint _2241 = _1745 + 11u;
        float _2255 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2237].w)) * _522) * 0.949999988079071044921875);
        float _2256 = _2255 * _2255;
        float _2257 = cbLight._m0[_2237].x + _599;
        float _2258 = cbLight._m0[_2237].y + _600;
        float _2259 = cbLight._m0[_2237].z + _601;
        float _2263 = inversesqrt(dot(vec3(_2257, _2258, _2259), vec3(_2257, _2258, _2259)));
        float _2264 = _2263 * _2257;
        float _2265 = _2263 * _2258;
        float _2266 = _2263 * _2259;
        float _2267 = dot(vec3(_519, _520, _521), vec3(cbLight._m0[_2237].xyz));
        float _4126 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0));
        float _2270 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
        float _2271 = dot(vec3(_519, _520, _521), vec3(_2264, _2265, _2266));
        float _4137 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0));
        float _2274 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
        float _2275 = dot(vec3(cbLight._m0[_2237].xyz), vec3(_2264, _2265, _2266));
        float _4148 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
        float _2279 = _2256 * _2256;
        float _2283 = ((_2274 * _2274) * (_2279 + (-1.0))) + 1.0;
        float _2290 = exp2(log2(1.0 - (isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0)))) * 5.0);
        float _2297 = 1.0 - _2256;
        float _2307 = (0.5 / (((_1914 * ((_2270 * _2297) + _2256)) + 9.9999999392252902907785028219223e-09) + (((_1914 * _2297) + _2256) * _2270))) * _2270;
        float _4159 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
        float _2309 = (isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0))) * (_2279 / ((_2283 * _2283) * 3.141590118408203125));
        float _2310 = isnan(1.0) ? _1761 : (isnan(_1761) ? 1.0 : min(_1761, 1.0));
        _2226 = (((((_2290 * _1936) + _672) * cbLight._m0[_2241].x) * _2309) * _2310) + _2112;
        _2228 = (((((_2290 * _1938) + _674) * cbLight._m0[_2241].y) * _2309) * _2310) + _2114;
        _2230 = (((((_2290 * _1939) + _675) * cbLight._m0[_2241].z) * _2309) * _2310) + _2116;
    }
    float _2445;
    float _2447;
    float _2449;
    float _2451;
    float _2453;
    float _2455;
    if (_1743.y == 0u)
    {
        float _2385 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2386 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2385;
        float _2387 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2385;
        float _2388 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2385;
        uvec4 _2400 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2401 = _2400.x;
        uint _2412 = uint((float(_2400.y) * floor(float(uint(cbSceneParam._m0[85u].y * _608) / _2401))) + floor(float(uint(cbSceneParam._m0[85u].x * _607) / _2401)));
        float _2422 = (log2(_2388 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2423 = isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : max(_2422, 0.0));
        uint _2426 = uint(isnan(14.0) ? _2423 : (isnan(_2423) ? 14.0 : min(_2423, 14.0)));
        uvec4 _2431 = texelFetch(g_lightClusterGridBuffer, int(((_2426 << 2u) + (_2412 << 6u)) >> 2u));
        uint _2432 = _2431.x;
        uint _2433 = _2400.z;
        float _2533;
        float _2535;
        float _2537;
        float _2539;
        float _2541;
        float _2543;
        if (((((1u << ((_2433 >> 4u) & 15u)) + 4294967295u) & _2432) == 0u) || ((_2433 & 240u) == 0u))
        {
            _2533 = 0.0;
            _2535 = 0.0;
            _2537 = 0.0;
            _2539 = 0.0;
            _2541 = 0.0;
            _2543 = 0.0;
        }
        else
        {
            float _2534;
            float _2536;
            float _2538;
            float _2540;
            float _2542;
            float _2544;
            float _2678 = 0.0;
            float _2679 = 0.0;
            float _2680 = 0.0;
            float _2681 = 0.0;
            float _2682 = 0.0;
            float _2683 = 0.0;
            uint _2684 = 0u;
            uint _2693;
            bool _2694;
            for (;;)
            {
                _2693 = texelFetch(g_lightClassification, int((((_2426 << 5u) + (_2412 << 9u)) + (_2684 << 2u)) >> 2u)).x;
                _2694 = _2693 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2694)
                {
                    frontier_phi_61_pred = _2678;
                    frontier_phi_61_pred_1 = _2683;
                    frontier_phi_61_pred_2 = _2682;
                    frontier_phi_61_pred_3 = _2681;
                    frontier_phi_61_pred_4 = _2680;
                    frontier_phi_61_pred_5 = _2679;
                }
                else
                {
                    float _2802;
                    float _2803;
                    float _2804;
                    float _2805;
                    float _2806;
                    float _2807;
                    uint _2808;
                    _2802 = _2678;
                    _2803 = _2679;
                    _2804 = _2680;
                    _2805 = _2681;
                    _2806 = _2682;
                    _2807 = _2683;
                    _2808 = _2693;
                    float _2734;
                    float _2735;
                    float _2736;
                    float _2737;
                    float _2738;
                    float _2739;
                    for (;;)
                    {
                        uint _2812 = uint(findLSB(_2808)) + (_2684 << 5u);
                        uint _2809 = (_2808 + 4294967295u) & _2808;
                        uint _2814 = _2812 * 48u;
                        vec4 _2828 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2814)).x, texelFetch(g_PointLightRenderingBuffer, int(_2814 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2814 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2814 + 3u)).x));
                        uint _2834 = (_2812 * 48u) + 4u;
                        vec4 _2847 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2834)).x, texelFetch(g_PointLightRenderingBuffer, int(_2834 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2834 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2834 + 3u)).x));
                        uint _2853 = (_2812 * 48u) + 8u;
                        vec3 _2864 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2853)).x, texelFetch(g_PointLightRenderingBuffer, int(_2853 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2853 + 2u)).x));
                        float _2868 = _2828.x - _2386;
                        float _2869 = _2828.y - _2387;
                        float _2870 = _2828.z - _2388;
                        float _2871 = dot(vec3(_2868, _2869, _2870), vec3(_2868, _2869, _2870));
                        float _2874 = inversesqrt(_2871);
                        float _2875 = _2874 * _2868;
                        float _2876 = _2874 * _2869;
                        float _2877 = _2874 * _2870;
                        float _2878 = dot(vec3(_629, _632, _635), vec3(_2875, _2876, _2877));
                        float _2883 = 1.0 - (_2871 * _2828.w);
                        float _4185 = isnan(0.0) ? _2883 : (isnan(_2883) ? 0.0 : max(_2883, 0.0));
                        float _2884 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
                        float _2885 = sqrt(_2871) * _2847.w;
                        float _2888 = 1.39999997615814208984375 / (_2885 + 1.39999997615814208984375);
                        float _2889 = _2888 * _2888;
                        float _2892 = ((1.0 - _2889) * _2878) + _2889;
                        float _2895 = _2885 * _2885;
                        float _2899 = ((isnan(0.0) ? _2892 : (isnan(_2892) ? 0.0 : max(_2892, 0.0))) * _2884) / ((_2895 * 0.699999988079071044921875) + 1.0);
                        float _2903 = (-0.0) - _2386;
                        float _2904 = (-0.0) - _2387;
                        float _2905 = (-0.0) - _2388;
                        float _2909 = inversesqrt(dot(vec3(_2903, _2904, _2905), vec3(_2903, _2904, _2905)));
                        float _2910 = _2909 * _2903;
                        float _2911 = _2909 * _2904;
                        float _2912 = _2909 * _2905;
                        float _2920 = exp2(log2(1.0 / ((_2895 * 3.5) + 5.0)) * 0.25);
                        float _2921 = 1.0 - _704;
                        float _2928 = sqrt(1.0 - ((1.0 - (_2921 * _2921)) * (1.0 - (_2920 * _2920))));
                        float _2929 = _2928 * _2928;
                        float _2930 = _2929 * _2929;
                        float _2931 = _2910 + _2875;
                        float _2932 = _2911 + _2876;
                        float _2933 = _2912 + _2877;
                        float _2937 = inversesqrt(dot(vec3(_2931, _2932, _2933), vec3(_2931, _2932, _2933)));
                        float _2941 = dot(vec3(_629, _632, _635), vec3(_2910, _2911, _2912));
                        float _4201 = isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : max(_2941, 0.0));
                        float _2944 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
                        float _2945 = dot(vec3(_629, _632, _635), vec3(_2937 * _2931, _2937 * _2932, _2937 * _2933));
                        float _4212 = isnan(0.0) ? _2945 : (isnan(_2945) ? 0.0 : max(_2945, 0.0));
                        float _2948 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
                        float _2952 = ((_2948 * _2948) * (_2930 + (-1.0))) + 1.0;
                        float _2953 = _2888 * _2929;
                        float _2954 = _2953 * _2953;
                        float _2957 = ((1.0 - _2954) * _2878) + _2954;
                        float _4223 = isnan(0.0) ? _2957 : (isnan(_2957) ? 0.0 : max(_2957, 0.0));
                        float _2958 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
                        float _2959 = 1.0 - _2929;
                        float _2969 = (0.5 / (((_2958 * ((_2944 * _2959) + _2929)) + 9.9999999392252902907785028219223e-09) + (((_2958 * _2959) + _2929) * _2944))) * _2958;
                        float _4234 = isnan(0.0) ? _2969 : (isnan(_2969) ? 0.0 : max(_2969, 0.0));
                        float _2980 = (((_2930 * 3.1415927410125732421875) * (isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0)))) / ((_2952 * _2952) * ((_2895 * 2.1991131305694580078125) + 3.141590118408203125))) * _2884;
                        _2737 = (_2899 * _2847.x) + _2805;
                        _2738 = (_2899 * _2847.y) + _2806;
                        _2739 = (_2899 * _2847.z) + _2807;
                        _2734 = (_2980 * _2864.x) + _2802;
                        _2735 = (_2980 * _2864.y) + _2803;
                        _2736 = (_2980 * _2864.z) + _2804;
                        if (_2809 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2802 = _2734;
                            _2803 = _2735;
                            _2804 = _2736;
                            _2805 = _2737;
                            _2806 = _2738;
                            _2807 = _2739;
                            _2808 = _2809;
                        }
                    }
                    frontier_phi_61_pred = _2734;
                    frontier_phi_61_pred_1 = _2739;
                    frontier_phi_61_pred_2 = _2738;
                    frontier_phi_61_pred_3 = _2737;
                    frontier_phi_61_pred_4 = _2736;
                    frontier_phi_61_pred_5 = _2735;
                }
                _2534 = frontier_phi_61_pred;
                _2544 = frontier_phi_61_pred_1;
                _2542 = frontier_phi_61_pred_2;
                _2540 = frontier_phi_61_pred_3;
                _2538 = frontier_phi_61_pred_4;
                _2536 = frontier_phi_61_pred_5;
                uint _2685 = _2684 + 1u;
                if (_2685 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2678 = _2534;
                    _2679 = _2536;
                    _2680 = _2538;
                    _2681 = _2540;
                    _2682 = _2542;
                    _2683 = _2544;
                    _2684 = _2685;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2533 = _2534;
            _2535 = _2536;
            _2537 = _2538;
            _2539 = _2540;
            _2541 = _2542;
            _2543 = _2544;
        }
        uvec4 _2547 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2548 = _2547.z;
        uint _2550 = (_2548 >> 8u) & 15u;
        float _2646;
        float _2648;
        float _2650;
        float _2652;
        float _2654;
        float _2656;
        if (((4294967295u << _2550) & _2432) == 0u)
        {
            _2646 = _2533;
            _2648 = _2535;
            _2650 = _2537;
            _2652 = _2539;
            _2654 = _2541;
            _2656 = _2543;
        }
        else
        {
            float _2671 = inversesqrt(dot(vec3(_2386, _2387, _2388), vec3(_2386, _2387, _2388)));
            float _2672 = _2671 * _2386;
            float _2673 = _2671 * _2387;
            float _2674 = _2671 * _2388;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2550 < ((_2548 >> 12u) & 15u))
            {
                float _2647;
                float _2649;
                float _2651;
                float _2653;
                float _2655;
                float _2657;
                float _2785 = _2533;
                float _2786 = _2535;
                float _2787 = _2537;
                float _2788 = _2539;
                float _2789 = _2541;
                float _2790 = _2543;
                uint _2791 = _2550;
                uint _2800;
                bool _2801;
                for (;;)
                {
                    _2800 = texelFetch(g_lightClassification, int((((_2426 << 5u) + (_2412 << 9u)) + (_2791 << 2u)) >> 2u)).x;
                    _2801 = _2800 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2801)
                    {
                        frontier_phi_67_pred = _2788;
                        frontier_phi_67_pred_1 = _2789;
                        frontier_phi_67_pred_2 = _2790;
                        frontier_phi_67_pred_3 = _2787;
                        frontier_phi_67_pred_4 = _2786;
                        frontier_phi_67_pred_5 = _2785;
                    }
                    else
                    {
                        float _2985;
                        float _2986;
                        float _2987;
                        float _2988;
                        float _2989;
                        float _2990;
                        float _3279;
                        float _3280;
                        float _3281;
                        float _3282;
                        float _3283;
                        float _3284;
                        float _2998 = _2785;
                        float _2999 = _2786;
                        float _3000 = _2787;
                        float _3001 = _2788;
                        float _3002 = _2789;
                        float _3003 = _2790;
                        uint _3004 = _2800;
                        uint _3005;
                        vec4 _3030;
                        float _3031;
                        vec4 _3046;
                        vec3 _3058;
                        vec4 _3074;
                        vec4 _3089;
                        float _3135;
                        bool _3136;
                        for (;;)
                        {
                            uint _3015 = ((_2791 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3004));
                            _3005 = (_3004 + 4294967295u) & _3004;
                            uint _3017 = _3015 * 40u;
                            _3030 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3017)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3017 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3017 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3017 + 3u)).x));
                            _3031 = _3030.w;
                            uint _3033 = (_3015 * 40u) + 4u;
                            _3046 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3033)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 3u)).x));
                            uint _3048 = (_3015 * 40u) + 8u;
                            _3058 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3048)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3048 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3048 + 2u)).x));
                            uint _3061 = (_3015 * 40u) + 16u;
                            _3074 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3061)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3061 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3061 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3061 + 3u)).x));
                            uint _3076 = (_3015 * 40u) + 20u;
                            _3089 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3076)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3076 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3076 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3076 + 3u)).x));
                            uint _3091 = (_3015 * 40u) + 24u;
                            vec4 _3104 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3091)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3091 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3091 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3091 + 3u)).x));
                            uint _3110 = (_3015 * 40u) + 28u;
                            vec4 _3123 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3110)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3110 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3110 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3110 + 3u)).x));
                            _3135 = fma(_2388, _3123.z, fma(_2387, _3123.y, _3123.x * _2386)) + _3123.w;
                            _3136 = !((fma(_2388, _3104.z, fma(_2387, _3104.y, _3104.x * _2386)) + _3104.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3136)
                            {
                                float _3163 = _3030.x - _2386;
                                float _3164 = _3030.y - _2387;
                                float _3165 = _3030.z - _2388;
                                float _3166 = dot(vec3(_3163, _3164, _3165), vec3(_3163, _3164, _3165));
                                float _3169 = inversesqrt(_3166);
                                float _3170 = _3169 * _3163;
                                float _3171 = _3169 * _3164;
                                float _3172 = _3169 * _3165;
                                float _3176 = 1.0 - (_3166 / (_3031 * _3031));
                                float _4245 = isnan(0.0) ? _3176 : (isnan(_3176) ? 0.0 : max(_3176, 0.0));
                                float _3177 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
                                float _3181 = sqrt(_3166) * _3046.w;
                                float _3183 = 1.39999997615814208984375 / (_3181 + 1.39999997615814208984375);
                                float _3184 = _3183 * _3183;
                                float _3187 = ((1.0 - _3184) * dot(vec3(_3170, _3171, _3172), vec3(_629, _632, _635))) + _3184;
                                float _3190 = _3181 * _3181;
                                float _3194 = (fma(_2388, _3074.z, fma(_2387, _3074.y, _3074.x * _2386)) + _3074.w) / _3135;
                                float _3195 = (fma(_2388, _3089.z, fma(_2387, _3089.y, _3089.x * _2386)) + _3089.w) / _3135;
                                float _3199 = 1.0 - dot(vec2(_3194, _3195), vec2(_3194, _3195));
                                float _4261 = isnan(0.0) ? _3199 : (isnan(_3199) ? 0.0 : max(_3199, 0.0));
                                float _3200 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
                                float _3201 = _3200 * (((isnan(0.0) ? _3187 : (isnan(_3187) ? 0.0 : max(_3187, 0.0))) * _3177) / ((_3190 * 0.699999988079071044921875) + 1.0));
                                float _3213 = exp2(log2(1.0 / ((_3190 * 3.5) + 5.0)) * 0.25);
                                float _3214 = 1.0 - _704;
                                float _3221 = sqrt(1.0 - ((1.0 - (_3214 * _3214)) * (1.0 - (_3213 * _3213))));
                                float _3222 = _3221 * _3221;
                                float _3223 = _3222 * _3222;
                                float _3224 = _3170 - _2672;
                                float _3225 = _3171 - _2673;
                                float _3226 = _3172 - _2674;
                                float _3230 = inversesqrt(dot(vec3(_3224, _3225, _3226), vec3(_3224, _3225, _3226)));
                                float _3234 = dot(vec3(_629, _632, _635), vec3((-0.0) - _2672, (-0.0) - _2673, (-0.0) - _2674));
                                float _4272 = isnan(0.0) ? _3234 : (isnan(_3234) ? 0.0 : max(_3234, 0.0));
                                float _3237 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
                                float _3238 = dot(vec3(_629, _632, _635), vec3(_3230 * _3224, _3230 * _3225, _3230 * _3226));
                                float _4283 = isnan(0.0) ? _3238 : (isnan(_3238) ? 0.0 : max(_3238, 0.0));
                                float _3241 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
                                float _3245 = ((_3241 * _3241) * (_3223 + (-1.0))) + 1.0;
                                float _3246 = _3183 * _3222;
                                float _3247 = _3246 * _3246;
                                float _3253 = ((1.0 - _3247) * dot(vec3(_629, _632, _635), vec3(_3170, _3171, _3172))) + _3247;
                                float _4294 = isnan(0.0) ? _3253 : (isnan(_3253) ? 0.0 : max(_3253, 0.0));
                                float _3254 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
                                float _3255 = 1.0 - _3222;
                                float _3265 = (0.5 / (((_3254 * ((_3237 * _3255) + _3222)) + 9.9999999392252902907785028219223e-09) + (((_3254 * _3255) + _3222) * _3237))) * _3254;
                                float _4305 = isnan(0.0) ? _3265 : (isnan(_3265) ? 0.0 : max(_3265, 0.0));
                                float _3275 = (_3200 * _3177) * (((_3223 * 3.1415927410125732421875) * (isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0)))) / ((_3245 * _3245) * ((_3190 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3275 * _3058.x;
                                frontier_phi_73_pred_1 = _3275 * _3058.y;
                                frontier_phi_73_pred_2 = _3201 * _3046.z;
                                frontier_phi_73_pred_3 = _3201 * _3046.y;
                                frontier_phi_73_pred_4 = _3201 * _3046.x;
                                frontier_phi_73_pred_5 = _3275 * _3058.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3279 = frontier_phi_73_pred;
                            _3280 = frontier_phi_73_pred_1;
                            _3284 = frontier_phi_73_pred_2;
                            _3283 = frontier_phi_73_pred_3;
                            _3282 = frontier_phi_73_pred_4;
                            _3281 = frontier_phi_73_pred_5;
                            _2988 = _3282 + _3001;
                            _2989 = _3283 + _3002;
                            _2990 = _3284 + _3003;
                            _2985 = _3279 + _2998;
                            _2986 = _3280 + _2999;
                            _2987 = _3281 + _3000;
                            if (_3005 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2998 = _2985;
                                _2999 = _2986;
                                _3000 = _2987;
                                _3001 = _2988;
                                _3002 = _2989;
                                _3003 = _2990;
                                _3004 = _3005;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2988;
                        frontier_phi_67_pred_1 = _2989;
                        frontier_phi_67_pred_2 = _2990;
                        frontier_phi_67_pred_3 = _2987;
                        frontier_phi_67_pred_4 = _2986;
                        frontier_phi_67_pred_5 = _2985;
                    }
                    _2653 = frontier_phi_67_pred;
                    _2655 = frontier_phi_67_pred_1;
                    _2657 = frontier_phi_67_pred_2;
                    _2651 = frontier_phi_67_pred_3;
                    _2649 = frontier_phi_67_pred_4;
                    _2647 = frontier_phi_67_pred_5;
                    uint _2792 = _2791 + 1u;
                    if (_2792 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2785 = _2647;
                        _2786 = _2649;
                        _2787 = _2651;
                        _2788 = _2653;
                        _2789 = _2655;
                        _2790 = _2657;
                        _2791 = _2792;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2655;
                frontier_phi_55_56_ladder_1 = _2657;
                frontier_phi_55_56_ladder_2 = _2653;
                frontier_phi_55_56_ladder_3 = _2651;
                frontier_phi_55_56_ladder_4 = _2649;
                frontier_phi_55_56_ladder_5 = _2647;
            }
            else
            {
                frontier_phi_55_56_ladder = _2541;
                frontier_phi_55_56_ladder_1 = _2543;
                frontier_phi_55_56_ladder_2 = _2539;
                frontier_phi_55_56_ladder_3 = _2537;
                frontier_phi_55_56_ladder_4 = _2535;
                frontier_phi_55_56_ladder_5 = _2533;
            }
            _2646 = frontier_phi_55_56_ladder_5;
            _2648 = frontier_phi_55_56_ladder_4;
            _2650 = frontier_phi_55_56_ladder_3;
            _2652 = frontier_phi_55_56_ladder_2;
            _2654 = frontier_phi_55_56_ladder;
            _2656 = frontier_phi_55_56_ladder_1;
        }
        float _2661 = isnan(1.0) ? _688 : (isnan(_688) ? 1.0 : min(_688, 1.0));
        _2445 = (_2661 * _2652) + _1878;
        _2447 = (_2661 * _2654) + _1880;
        _2449 = (_2661 * _2656) + _1882;
        _2451 = ((_2646 * _672) * _2661) + _2226;
        _2453 = ((_2648 * _674) * _2661) + _2228;
        _2455 = ((_2650 * _675) * _2661) + _2230;
    }
    else
    {
        _2445 = _1878;
        _2447 = _1880;
        _2449 = _1882;
        _2451 = _2226;
        _2453 = _2228;
        _2455 = _2230;
    }
    float _4321 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _4332 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _4343 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    uint _2475 = _228 + 6u;
    float _2483 = _607 / cbSceneParam._m0[86u].x;
    float _2484 = _608 / cbSceneParam._m0[86u].y;
    vec4 _2498 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2483, _2484, (log2((isnan(cbSceneParam._m0[77u].w) ? _541 : (isnan(_541) ? cbSceneParam._m0[77u].w : min(_541, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2500 = _2498.x;
    float _2501 = _2498.y;
    float _2502 = _2498.z;
    float _2503 = _2498.w;
    float _2596;
    float _2598;
    float _2600;
    float _2602;
    if (_541 > cbSceneParam._m0[78u].w)
    {
        float _2558 = isnan(_541) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _541 : min(cbSceneParam._m0[80u].w, _541));
        float _2559 = _2558 / _541;
        float _2570 = _2559 * _592;
        float _2571 = _593 * _2559;
        float _2572 = (-0.0) - _2571;
        float _2574 = _2559 * _594;
        float _2576 = (cbSceneParam._m0[77u].w * _2572) / _2558;
        float _2577 = _2576 + cbSceneParam._m0[79u].w;
        float _2578 = cbSceneParam._m0[79u].w - _2571;
        float _2584 = sqrt(((_2570 * _2570) + (_2571 * _2571)) + (_2574 * _2574));
        float _2587 = (1.0 - (cbSceneParam._m0[77u].w / _2558)) * _2584;
        float _2592 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2594 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2747;
        if (abs((_2572 - _2576) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2747 = ((((_2577 > 0.0) ? exp2(_2592 * _2577) : (2.0 - exp2(_2594 * _2577))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2587;
        }
        else
        {
            float _2707 = 1.0 / cbSceneParam._m0[80u].x;
            float _2708 = isnan(_2578) ? _2577 : (isnan(_2577) ? _2578 : max(_2577, _2578));
            float _2709 = isnan(_2578) ? _2577 : (isnan(_2577) ? _2578 : min(_2577, _2578));
            float _2718 = isnan(0.0) ? _2708 : (isnan(_2708) ? 0.0 : min(_2708, 0.0));
            float _2719 = isnan(0.0) ? _2709 : (isnan(_2709) ? 0.0 : min(_2709, 0.0));
            _2747 = ((abs(_2584 / _2572) * cbSceneParam._m0[80u].y) * ((((_2718 - _2719) * 2.0) - ((exp2(_2592 * (isnan(0.0) ? _2708 : (isnan(_2708) ? 0.0 : max(_2708, 0.0)))) - exp2(_2592 * (isnan(0.0) ? _2709 : (isnan(_2709) ? 0.0 : max(_2709, 0.0))))) * _2707)) - ((exp2(_2594 * _2718) - exp2(_2594 * _2719)) * _2707))) + (_2587 * cbSceneParam._m0[80u].z);
        }
        vec4 _2749 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2483, _2484, 1.0), 0.0);
        float _2758 = exp2((_2747 * (-1.44269502162933349609375)) * (1.0 - _2749.w));
        float _2759 = log2(_2758);
        float _2775 = log2(_2503);
        _2596 = (exp2(_2775 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2759 * cbSceneParam._m0[78u].x)) * _2749.x) / cbSceneParam._m0[78u].x)) + _2500;
        _2598 = (exp2(_2775 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2759 * cbSceneParam._m0[78u].y)) * _2749.y) / cbSceneParam._m0[78u].y)) + _2501;
        _2600 = (exp2(_2775 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2759 * cbSceneParam._m0[78u].z)) * _2749.z) / cbSceneParam._m0[78u].z)) + _2502;
        _2602 = _2758 * _2503;
    }
    else
    {
        _2596 = _2500;
        _2598 = _2501;
        _2600 = _2502;
        _2602 = _2503;
    }
    float _2614 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2615 = _2614 == 3.0;
    float _2616 = log2(_2602);
    float _2623 = exp2(_2616 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0))) * (_2445 + ((isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0))) * _688))) + ((_2451 + ((isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0))) * _1496)) * cbPerFrame._m0[3u].x));
    float _2624 = exp2(_2616 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0))) * (_2447 + ((isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0))) * _688))) + ((_2453 + ((isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0))) * _1496)) * cbPerFrame._m0[3u].x));
    float _2625 = exp2(_2616 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0))) * (_2449 + ((isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0))) * _688))) + ((_2455 + ((isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0))) * _1496)) * cbPerFrame._m0[3u].x));
    float _2634 = (_2614 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2634 * (_2615 ? _2623 : (_2623 + (cbSceneParam._m0[72u].w * _2596)));
    SV_Target.y = _2634 * (_2615 ? _2624 : (_2624 + (cbSceneParam._m0[72u].w * _2598)));
    SV_Target.z = _2634 * (_2615 ? _2625 : (_2625 + (cbSceneParam._m0[72u].w * _2600)));
    SV_Target.w = cbInstanceData._m0[_2475].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2475].w;
}


