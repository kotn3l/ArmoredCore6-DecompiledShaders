#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1333;
float _3715;
float _3716;
float _3717;
float _3718;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _225 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _226 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _227 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _233 = inversesqrt(dot(vec3(_225, _226, _227), vec3(_225, _226, _227)));
    float _240 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _247 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _253 = uint(roundEven(NORMAL.w)) * 13u;
    uint _258 = _253 + 1u;
    uint _262 = _253 + 2u;
    float _271 = sqrt(((cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x) + (cbInstanceData._m0[_253].x * cbInstanceData._m0[_253].x)) + (cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x));
    float _272 = _271 * TEXCOORD.z;
    float _273 = _271 * TEXCOORD.w;
    vec4 _293 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _299 = _293.x * cbMtdParam._m0[11u].x;
    float _300 = _293.y * cbMtdParam._m0[11u].y;
    float _301 = _293.z * cbMtdParam._m0[11u].z;
    vec4 _320 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _272) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _273) + cbTextureTilingScale._m0[5u].w));
    vec4 _358 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _360 = _358.x;
    float _372 = dot(vec4(_360, _358.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _389 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_360 - _372) * cbMtdParam._m0[24u].y) + _372) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3727 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    float _390 = isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0));
    float _397 = (_390 * ((_320.x * cbMtdParam._m0[12u].x) - _299)) + _299;
    float _398 = (_390 * ((_320.y * cbMtdParam._m0[12u].y) - _300)) + _300;
    float _399 = (_390 * ((_320.z * cbMtdParam._m0[12u].z) - _301)) + _301;
    vec4 _417 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _272) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _273) + cbTextureTilingScale._m0[4u].w));
    vec4 _434 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _436 = _434.x;
    float _437 = _434.y;
    float _438 = _434.z;
    float _447 = ((_417.z - _438) * _390) + _438;
    float _450 = ((((_417.x - _436) * _390) + _436) * 2.0) + (-1.0);
    float _452 = ((((_417.y - _437) * _390) + _437) * 2.0) + (-1.0);
    float _453 = dot(vec2(_450, _452), vec2(_450, _452));
    float _3738 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _458 = sqrt(1.0 - (isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0))));
    vec4 _474 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _499 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _272) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _273) + cbTextureTilingScale._m0[11u].w));
    float _501 = _499.x;
    float _502 = 1.0 - _501;
    float _508 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _511 = ((isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : min(_508, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _520 = (_511 - ((((((_501 - _502) * cbMtdParam._m0[24u].z) + _502) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _511))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3759 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _521 = isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0));
    float _528 = (_521 * (cbMtdParam._m0[17u].x - _397)) + _397;
    float _529 = (_521 * (cbMtdParam._m0[17u].y - _398)) + _398;
    float _530 = (_521 * (cbMtdParam._m0[17u].z - _399)) + _399;
    vec4 _542 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _272) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _273) + cbTextureTilingScale._m0[19u].w));
    float _544 = _542.x;
    float _545 = 1.0 - _544;
    float _572 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_544 - _545) * cbMtdParam._m0[24u].w) + _545) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3770 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
    float _573 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
    float _581 = ((((cbMtdParam._m0[10u].x - _528) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _573) + _528;
    float _582 = ((((cbMtdParam._m0[10u].y - _529) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _573) + _529;
    float _583 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _530)) * _573) + _530;
    vec4 _595 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _609 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _611 = _609.x;
    float _629 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _272) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _273) + cbTextureTilingScale._m0[9u].w)).x - _611) * _390) + _611;
    float _633 = ((_595.x - _629) * cbMtdParam._m0[19u].z) + _629;
    float _635 = _633 - (_633 * _521);
    float _637 = _635 - (_635 * _573);
    float _641 = (cbMtdParam._m0[19u].w * (_474.z - _447)) + _447;
    vec4 _655 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _272) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _273) + cbTextureTilingScale._m0[15u].w));
    float _662 = (_655.x * 2.0) + (-1.0);
    float _663 = (_655.y * 2.0) + (-1.0);
    float _664 = dot(vec2(_662, _663), vec2(_662, _663));
    float _3781 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _672 = (_521 * (_655.z - _641)) + _641;
    float _675 = ((cbMtdParam._m0[23u].y - _672) * _573) + _672;
    vec4 _694 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _272) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _273) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _700 = (_694.x * 2.0) + (-1.0);
    float _701 = (_694.y * 2.0) + (-1.0);
    float _702 = dot(vec2(_700, _701), vec2(_700, _701));
    float _3792 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
    float _710 = (((_474.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _450;
    float _711 = (((_474.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _452;
    float _723 = (((_662 - _710) + (cbMtdParam._m0[21u].x * _710)) * _521) + _710;
    float _724 = (((_663 - _711) + (cbMtdParam._m0[21u].x * _711)) * _521) + _711;
    float _725 = (_521 * (sqrt(1.0 - (isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0)))) - _458)) + _458;
    float _736 = (((_700 - _723) + (_723 * cbMtdParam._m0[22u].z)) * _573) + _723;
    float _737 = (((_701 - _724) + (_724 * cbMtdParam._m0[22u].z)) * _573) + _724;
    float _738 = ((sqrt(1.0 - (isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0)))) - _725) * _573) + _725;
    float _740 = cbMtdParam._m0[22u].x + _474.w;
    float _743 = fma(_738, _240 * NORMAL.x, fma(_737, _247 * TANGENT.x, (_233 * _225) * _736));
    float _746 = fma(_738, _240 * NORMAL.y, fma(_737, _247 * TANGENT.y, (_233 * _226) * _736));
    float _749 = fma(_738, _240 * NORMAL.z, fma(_737, _247 * TANGENT.z, (_233 * _227) * _736));
    float _753 = inversesqrt(dot(vec3(_743, _746, _749), vec3(_743, _746, _749)));
    float _754 = _753 * _743;
    float _755 = _753 * _746;
    float _756 = _753 * _749;
    float _3803 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _757 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
    float _3814 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _3825 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _3836 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
    float _3847 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _3858 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _762 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
    float _776 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _816 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _826 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _816);
    float _827 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _816);
    float _828 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _816);
    float _832 = inversesqrt(dot(vec3(_826, _827, _828), vec3(_826, _827, _828)));
    float _833 = _826 * _832;
    float _834 = _827 * _832;
    float _835 = _828 * _832;
    vec4 _840 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _842 = _840.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1014 = sqrt(((_826 * _826) + (_827 * _827)) + (_828 * _828));
        float _1020 = (cbMatDynParam._m0[5u].x * _1014) + cbMatDynParam._m0[5u].y;
        float _3869 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1021 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
        float _1025 = (cbMatDynParam._m0[5u].z * _1014) + cbMatDynParam._m0[5u].w;
        float _3880 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0))) - _1021)) + _1021) < ((_842 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _853 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _854 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _872 = fma(_756, cbSceneParam._m0[5u].z, fma(_755, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _754));
    float _875 = fma(_756, cbSceneParam._m0[6u].z, fma(_755, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _754));
    float _878 = fma(_756, cbSceneParam._m0[7u].z, fma(_755, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _754));
    uint _891 = _253 + 9u;
    uint _892 = _891 + uint(cbMatDynParam._m0[0u].w);
    float _898 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0)))) * cbInstanceData._m0[_892].x;
    float _899 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0)))) * cbInstanceData._m0[_892].y;
    float _900 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0)))) * cbInstanceData._m0[_892].z;
    float _3891 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
    float _901 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
    float _3902 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
    float _902 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
    float _3913 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
    float _903 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
    float _904 = 1.0 - _762;
    float _905 = _901 * _904;
    float _906 = _902 * _904;
    float _907 = _903 * _904;
    float _912 = (_901 + (-0.039999999105930328369140625)) * _762;
    float _913 = (_902 + (-0.039999999105930328369140625)) * _762;
    float _914 = (_903 + (-0.039999999105930328369140625)) * _762;
    float _915 = _912 + 0.039999999105930328369140625;
    float _917 = _913 + 0.039999999105930328369140625;
    float _918 = _914 + 0.039999999105930328369140625;
    vec4 _927 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _853, cbSceneParam._m0[86u].y * _854));
    float _931 = ((isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0))) * TEXCOORD_5.w) * _927.x;
    float _932 = dot(vec3(_754, _755, _756), vec3(_833, _834, _835));
    float _935 = _932 * 2.0;
    float _939 = (_935 * _754) - _833;
    float _940 = (_935 * _755) - _834;
    float _941 = (_935 * _756) - _835;
    float _945 = abs(dot(vec3(_833, _834, _835), vec3(_754, _755, _756)));
    float _3924 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
    float _947 = sqrt(_757);
    float _960 = exp2((_947 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_947 * 3.0));
    float _966 = (1.0 - _960) * ((_947 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _967 = _960 * _947;
    float _995 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _999 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1003 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1332;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1057 = fma(_1003, cbModelParam._m0[26u].z, fma(_999, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _995));
        float _1061 = fma(_1003, cbModelParam._m0[27u].z, fma(_999, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _995));
        float _1065 = fma(_1003, cbModelParam._m0[28u].z, fma(_999, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _995));
        float _1090 = _995 + _754;
        float _1091 = _999 + _755;
        float _1092 = _1003 + _756;
        float _1102 = fma(_1092, cbModelParam._m0[26u].z, fma(_1091, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1090)) - _1057;
        float _1103 = fma(_1092, cbModelParam._m0[27u].z, fma(_1091, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1090)) - _1061;
        float _1104 = fma(_1092, cbModelParam._m0[28u].z, fma(_1091, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1090)) - _1065;
        float _1108 = inversesqrt(dot(vec3(_1102, _1103, _1104), vec3(_1102, _1103, _1104)));
        float _1121 = ((_1108 * _1102) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1057 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1122 = ((_1108 * _1103) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1061 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1123 = ((_1108 * _1104) / cbModelParam._m0[34u].z) + ((((((_1065 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1126 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1121, _1122, _1123), 0.0);
        vec4 _1133 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1121, _1122, _1123), 0.0);
        vec4 _1140 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1121, _1122, _1123), 0.0);
        vec4 _1147 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1121, _1122, _1123), 0.0);
        float _1160 = exp2((_1126.w + (-0.5)) * 20.0) * 2.0;
        float _1161 = _1160 * (_1126.x + (-0.5));
        float _1162 = _1160 * (_1126.y + (-0.5));
        float _1163 = _1160 * (_1126.z + (-0.5));
        float _1170 = exp2((_1133.w + (-0.5)) * 20.0) * 2.0;
        float _1171 = _1170 * (_1133.x + (-0.5));
        float _1172 = _1170 * (_1133.y + (-0.5));
        float _1173 = _1170 * (_1133.z + (-0.5));
        float _1180 = exp2((_1140.w + (-0.5)) * 20.0) * 2.0;
        float _1181 = _1180 * (_1140.x + (-0.5));
        float _1182 = _1180 * (_1140.y + (-0.5));
        float _1183 = _1180 * (_1140.z + (-0.5));
        float _1190 = exp2((_1147.w + (-0.5)) * 20.0) * 2.0;
        float _1191 = _1190 * (_1147.x + (-0.5));
        float _1192 = _1190 * (_1147.y + (-0.5));
        float _1193 = _1190 * (_1147.z + (-0.5));
        float _1194 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1195 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1196 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1197 = _1161 * 0.5;
        float _1198 = _1171 * 0.5;
        float _1199 = _1181 * 0.5;
        float _1200 = dot(vec3(_1197, _1198, _1199), vec3(_1197, _1198, _1199));
        float _1205 = (_1200 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1200);
        float _1214 = (dot(vec3(_754, _755, _756), vec3(_1205 * _1197, _1205 * _1198, _1205 * _1199)) + 1.0) * 0.5;
        float _3950 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1224 = sqrt(((_1198 * _1198) + (_1197 * _1197)) + (_1199 * _1199)) / (_1194 + 9.9999997473787516355514526367188e-06);
        float _3961 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1225 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
        float _1226 = _1225 * 2.0;
        float _1230 = (1.0 - _1225) / (_1225 + 1.0);
        float _3972 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1231 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
        float _1240 = ((((1.0 - _1231) * (_1226 + 2.0)) * exp2(log2(isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0))) * (_1226 + 1.0))) + _1231) * _1194;
        float _1241 = _1162 * 0.5;
        float _1242 = _1172 * 0.5;
        float _1243 = _1182 * 0.5;
        float _1244 = dot(vec3(_1241, _1242, _1243), vec3(_1241, _1242, _1243));
        float _1249 = (_1244 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1244);
        float _1257 = (dot(vec3(_754, _755, _756), vec3(_1249 * _1241, _1249 * _1242, _1249 * _1243)) + 1.0) * 0.5;
        float _3983 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1266 = sqrt(((_1242 * _1242) + (_1241 * _1241)) + (_1243 * _1243)) / (_1195 + 9.9999997473787516355514526367188e-06);
        float _3994 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1267 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
        float _1268 = _1267 * 2.0;
        float _1272 = (1.0 - _1267) / (_1267 + 1.0);
        float _4005 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1273 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
        float _1282 = ((((1.0 - _1273) * (_1268 + 2.0)) * exp2(log2(isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0))) * (_1268 + 1.0))) + _1273) * _1195;
        float _1283 = _1163 * 0.5;
        float _1284 = _1173 * 0.5;
        float _1285 = _1183 * 0.5;
        float _1286 = dot(vec3(_1283, _1284, _1285), vec3(_1283, _1284, _1285));
        float _1291 = (_1286 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1286);
        float _1299 = (dot(vec3(_754, _755, _756), vec3(_1291 * _1283, _1291 * _1284, _1291 * _1285)) + 1.0) * 0.5;
        float _4016 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1308 = sqrt(((_1284 * _1284) + (_1283 * _1283)) + (_1285 * _1285)) / (_1196 + 9.9999997473787516355514526367188e-06);
        float _4027 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1309 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
        float _1310 = _1309 * 2.0;
        float _1314 = (1.0 - _1309) / (_1309 + 1.0);
        float _4038 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1315 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
        float _1324 = ((((1.0 - _1315) * (_1310 + 2.0)) * exp2(log2(isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0))) * (_1310 + 1.0))) + _1315) * _1196;
        _1332 = _1163;
        _1334 = _1162;
        _1335 = _1161;
        _1336 = _1173;
        _1337 = _1172;
        _1338 = _1171;
        _1339 = _1183;
        _1340 = _1182;
        _1341 = _1181;
        _1342 = _1196;
        _1343 = _1195;
        _1344 = _1194;
        _1345 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0)));
        _1346 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0)));
        _1347 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0)));
    }
    else
    {
        _1332 = _1333;
        _1334 = _1333;
        _1335 = _1333;
        _1336 = _1333;
        _1337 = _1333;
        _1338 = _1333;
        _1339 = _1333;
        _1340 = _1333;
        _1341 = _1333;
        _1342 = _1333;
        _1343 = _1333;
        _1344 = _1333;
        _1345 = 0.0;
        _1346 = 0.0;
        _1347 = 0.0;
    }
    float _1644;
    float _1645;
    float _1646;
    float _1647;
    float _1648;
    float _1649;
    float _1650;
    float _1651;
    float _1652;
    float _1653;
    float _1654;
    float _1655;
    float _1656;
    float _1657;
    float _1658;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1375 = fma(_1003, cbModelParam._m0[30u].z, fma(_999, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _995));
        float _1379 = fma(_1003, cbModelParam._m0[31u].z, fma(_999, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _995));
        float _1383 = fma(_1003, cbModelParam._m0[32u].z, fma(_999, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _995));
        float _1406 = _995 + _754;
        float _1407 = _999 + _755;
        float _1408 = _1003 + _756;
        float _1418 = fma(_1408, cbModelParam._m0[30u].z, fma(_1407, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1406)) - _1375;
        float _1419 = fma(_1408, cbModelParam._m0[31u].z, fma(_1407, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1406)) - _1379;
        float _1420 = fma(_1408, cbModelParam._m0[32u].z, fma(_1407, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1406)) - _1383;
        float _1424 = inversesqrt(dot(vec3(_1418, _1419, _1420), vec3(_1418, _1419, _1420)));
        float _1437 = ((_1424 * _1418) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1375 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1438 = ((_1424 * _1419) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1379 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1439 = ((_1424 * _1420) / cbModelParam._m0[35u].z) + ((((((_1383 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1441 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1437, _1438, _1439), 0.0);
        vec4 _1448 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1437, _1438, _1439), 0.0);
        vec4 _1455 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1437, _1438, _1439), 0.0);
        vec4 _1462 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1437, _1438, _1439), 0.0);
        float _1474 = exp2((_1441.w + (-0.5)) * 20.0) * 2.0;
        float _1475 = _1474 * (_1441.x + (-0.5));
        float _1476 = _1474 * (_1441.y + (-0.5));
        float _1477 = _1474 * (_1441.z + (-0.5));
        float _1484 = exp2((_1448.w + (-0.5)) * 20.0) * 2.0;
        float _1485 = _1484 * (_1448.x + (-0.5));
        float _1486 = _1484 * (_1448.y + (-0.5));
        float _1487 = _1484 * (_1448.z + (-0.5));
        float _1494 = exp2((_1455.w + (-0.5)) * 20.0) * 2.0;
        float _1495 = _1494 * (_1455.x + (-0.5));
        float _1496 = _1494 * (_1455.y + (-0.5));
        float _1497 = _1494 * (_1455.z + (-0.5));
        float _1504 = exp2((_1462.w + (-0.5)) * 20.0) * 2.0;
        float _1505 = _1504 * (_1462.x + (-0.5));
        float _1506 = _1504 * (_1462.y + (-0.5));
        float _1507 = _1504 * (_1462.z + (-0.5));
        float _1508 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1509 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1510 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1511 = _1475 * 0.5;
        float _1512 = _1485 * 0.5;
        float _1513 = _1495 * 0.5;
        float _1514 = dot(vec3(_1511, _1512, _1513), vec3(_1511, _1512, _1513));
        float _1519 = (_1514 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1514);
        float _1527 = (dot(vec3(_754, _755, _756), vec3(_1519 * _1511, _1519 * _1512, _1519 * _1513)) + 1.0) * 0.5;
        float _4079 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1536 = sqrt(((_1512 * _1512) + (_1511 * _1511)) + (_1513 * _1513)) / (_1508 + 9.9999997473787516355514526367188e-06);
        float _4090 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1537 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
        float _1538 = _1537 * 2.0;
        float _1542 = (1.0 - _1537) / (_1537 + 1.0);
        float _4101 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1543 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
        float _1552 = ((((1.0 - _1543) * (_1538 + 2.0)) * exp2(log2(isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0))) * (_1538 + 1.0))) + _1543) * _1508;
        float _1553 = _1476 * 0.5;
        float _1554 = _1486 * 0.5;
        float _1555 = _1496 * 0.5;
        float _1556 = dot(vec3(_1553, _1554, _1555), vec3(_1553, _1554, _1555));
        float _1561 = (_1556 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1556);
        float _1569 = (dot(vec3(_754, _755, _756), vec3(_1561 * _1553, _1561 * _1554, _1561 * _1555)) + 1.0) * 0.5;
        float _4112 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
        float _1578 = sqrt(((_1554 * _1554) + (_1553 * _1553)) + (_1555 * _1555)) / (_1509 + 9.9999997473787516355514526367188e-06);
        float _4123 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
        float _1579 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
        float _1580 = _1579 * 2.0;
        float _1584 = (1.0 - _1579) / (_1579 + 1.0);
        float _4134 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
        float _1585 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
        float _1594 = ((((1.0 - _1585) * (_1580 + 2.0)) * exp2(log2(isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0))) * (_1580 + 1.0))) + _1585) * _1509;
        float _1595 = _1477 * 0.5;
        float _1596 = _1487 * 0.5;
        float _1597 = _1497 * 0.5;
        float _1598 = dot(vec3(_1595, _1596, _1597), vec3(_1595, _1596, _1597));
        float _1603 = (_1598 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1598);
        float _1611 = (dot(vec3(_754, _755, _756), vec3(_1603 * _1595, _1603 * _1596, _1603 * _1597)) + 1.0) * 0.5;
        float _4145 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
        float _1620 = sqrt(((_1596 * _1596) + (_1595 * _1595)) + (_1597 * _1597)) / (_1510 + 9.9999997473787516355514526367188e-06);
        float _4156 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
        float _1621 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
        float _1622 = _1621 * 2.0;
        float _1626 = (1.0 - _1621) / (_1621 + 1.0);
        float _4167 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
        float _1627 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
        float _1636 = ((((1.0 - _1627) * (_1622 + 2.0)) * exp2(log2(isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0))) * (_1622 + 1.0))) + _1627) * _1510;
        _1644 = _1477;
        _1645 = _1476;
        _1646 = _1475;
        _1647 = _1487;
        _1648 = _1486;
        _1649 = _1485;
        _1650 = _1497;
        _1651 = _1496;
        _1652 = _1495;
        _1653 = _1510;
        _1654 = _1509;
        _1655 = _1508;
        _1656 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0)));
        _1657 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0)));
        _1658 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0)));
    }
    else
    {
        _1644 = _1333;
        _1645 = _1333;
        _1646 = _1333;
        _1647 = _1333;
        _1648 = _1333;
        _1649 = _1333;
        _1650 = _1333;
        _1651 = _1333;
        _1652 = _1333;
        _1653 = _1333;
        _1654 = _1333;
        _1655 = _1333;
        _1656 = 0.0;
        _1657 = 0.0;
        _1658 = 0.0;
    }
    float _1668 = (cbModelParam._m0[1u].x * (_1656 - _1345)) + _1345;
    float _1669 = (cbModelParam._m0[1u].x * (_1657 - _1346)) + _1346;
    float _1670 = (cbModelParam._m0[1u].x * (_1658 - _1347)) + _1347;
    float _1691 = fma(_1670, cbSceneParam._m0[89u].z, fma(_1669, cbSceneParam._m0[89u].y, _1668 * cbSceneParam._m0[89u].x));
    float _1694 = fma(_1670, cbSceneParam._m0[90u].z, fma(_1669, cbSceneParam._m0[90u].y, _1668 * cbSceneParam._m0[90u].x));
    float _1697 = fma(_1670, cbSceneParam._m0[91u].z, fma(_1669, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1668));
    float _1712 = _939 * 0.5;
    float _1713 = _940 * 0.5;
    float _1714 = _941 * 0.5;
    float _1715 = dot(vec4(_1712, _1713, _1714, 1.0), vec4(_1646, _1649, _1652, _1655));
    float _1718 = dot(vec4(_1712, _1713, _1714, 1.0), vec4(_1645, _1648, _1651, _1654));
    float _1721 = dot(vec4(_1712, _1713, _1714, 1.0), vec4(_1644, _1647, _1650, _1653));
    float _1755;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1728 = dot(vec4(_1712, _1713, _1714, 1.0), vec4(_1332, _1336, _1339, _1342));
        float _1732 = dot(vec4(_1712, _1713, _1714, 1.0), vec4(_1334, _1337, _1340, _1343));
        float _1736 = dot(vec4(_1712, _1713, _1714, 1.0), vec4(_1335, _1338, _1341, _1344));
        float _1743 = dot(vec4(cbModelParam._m0[39u]), vec4(_1712, _1713, _1714, 1.0));
        _1755 = dot(vec3(isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0)), isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0)), isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1743) ? 0.0 : (isnan(0.0) ? _1743 : max(0.0, _1743))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1755 = 1.0;
    }
    float _1766;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1757 = dot(vec4(cbModelParam._m0[40u]), vec4(_1712, _1713, _1714, 1.0));
        _1766 = dot(vec3(isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0)), isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0)), isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1757) ? 0.0 : (isnan(0.0) ? _1757 : max(0.0, _1757))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1766 = 1.0;
    }
    float _1770 = (_1766 * cbModelParam._m0[1u].x) + (_1755 * (1.0 - cbModelParam._m0[1u].x));
    float _1780 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _757);
    float _1781 = isnan(_1780) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1780 : min(cbModelParam._m0[25u].z, _1780));
    float _1862;
    float _1864;
    float _1866;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1829 = fma(_1003, cbModelParam._m0[13u].z, fma(_999, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _995)) + cbModelParam._m0[13u].w;
        float _1833 = fma(_1003, cbModelParam._m0[14u].z, fma(_999, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _995)) + cbModelParam._m0[14u].w;
        float _1837 = fma(_1003, cbModelParam._m0[15u].z, fma(_999, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _995)) + cbModelParam._m0[15u].w;
        float _1840 = fma(_941, cbModelParam._m0[13u].z, fma(_940, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _939));
        float _1843 = fma(_941, cbModelParam._m0[14u].z, fma(_940, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _939));
        float _1846 = fma(_941, cbModelParam._m0[15u].z, fma(_940, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _939));
        float _1874;
        if (_1840 > 0.0)
        {
            _1874 = abs((1.0 - _1829) / _1840);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1840 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1829 + 1.0) / _1840);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1874 = frontier_phi_17_15_ladder;
        }
        float _2077;
        if (_1843 > 0.0)
        {
            _2077 = abs((1.0 - _1833) / _1843);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1843 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1833 + 1.0) / _1843);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2077 = frontier_phi_26_22_ladder;
        }
        float _2331;
        if (_1846 > 0.0)
        {
            _2331 = abs((1.0 - _1837) / _1846);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1846 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1837 + 1.0) / _1846);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2331 = frontier_phi_38_33_ladder;
        }
        float _2333 = isnan(_2077) ? _1874 : (isnan(_1874) ? _2077 : min(_1874, _2077));
        float _2334 = isnan(_2331) ? _2333 : (isnan(_2333) ? _2331 : min(_2333, _2331));
        float _2338 = (_2334 * _1840) + _1829;
        float _2339 = (_2334 * _1843) + _1833;
        float _2340 = (_2334 * _1846) + _1837;
        float _2341 = _2334 * 9.9999997473787516355514526367188e-05;
        float _2343 = (-1.0) - _2341;
        float _2345 = _2341 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2340 > _2345) || ((_2340 < _2343) || ((_2339 > _2345) || ((_2339 < _2343) || ((_2338 < _2343) || (_2338 > _2345))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2468 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2340, cbModelParam._m0[9u].z, fma(_2339, cbModelParam._m0[9u].y, _2338 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2340, cbModelParam._m0[10u].z, fma(_2339, cbModelParam._m0[10u].y, _2338 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2340, cbModelParam._m0[11u].z, fma(_2339, cbModelParam._m0[11u].y, _2338 * cbModelParam._m0[11u].x))), _1781);
            frontier_phi_16_38_ladder = _2468.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2468.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2468.x * cbModelParam._m0[1u].y;
        }
        _1862 = frontier_phi_16_38_ladder_2;
        _1864 = frontier_phi_16_38_ladder_1;
        _1866 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1850 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_939, _940, _941), _1781);
        _1862 = _1850.x * cbModelParam._m0[1u].y;
        _1864 = _1850.y * cbModelParam._m0[1u].y;
        _1866 = _1850.z * cbModelParam._m0[1u].y;
    }
    float _1870 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _757);
    float _1871 = isnan(_1870) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1870 : min(cbModelParam._m0[25u].w, _1870));
    float _1961;
    float _1963;
    float _1965;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1925 = fma(_1003, cbModelParam._m0[21u].z, fma(_999, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _995)) + cbModelParam._m0[21u].w;
        float _1929 = fma(_1003, cbModelParam._m0[22u].z, fma(_999, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _995)) + cbModelParam._m0[22u].w;
        float _1933 = fma(_1003, cbModelParam._m0[23u].z, fma(_999, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _995)) + cbModelParam._m0[23u].w;
        float _1936 = fma(_941, cbModelParam._m0[21u].z, fma(_940, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _939));
        float _1939 = fma(_941, cbModelParam._m0[22u].z, fma(_940, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _939));
        float _1942 = fma(_941, cbModelParam._m0[23u].z, fma(_940, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _939));
        float _2082;
        if (_1936 > 0.0)
        {
            _2082 = abs((1.0 - _1925) / _1936);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1936 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1925 + 1.0) / _1936);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2082 = frontier_phi_28_24_ladder;
        }
        float _2358;
        if (_1939 > 0.0)
        {
            _2358 = abs((1.0 - _1929) / _1939);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1939 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1929 + 1.0) / _1939);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2358 = frontier_phi_40_35_ladder;
        }
        float _2571;
        if (_1942 > 0.0)
        {
            _2571 = abs((1.0 - _1933) / _1942);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1942 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1933 + 1.0) / _1942);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2571 = frontier_phi_49_46_ladder;
        }
        float _2573 = isnan(_2358) ? _2082 : (isnan(_2082) ? _2358 : min(_2082, _2358));
        float _2574 = isnan(_2571) ? _2573 : (isnan(_2573) ? _2571 : min(_2573, _2571));
        float _2578 = (_2574 * _1936) + _1925;
        float _2579 = (_2574 * _1939) + _1929;
        float _2580 = (_2574 * _1942) + _1933;
        float _2581 = _2574 * 9.9999997473787516355514526367188e-05;
        float _2582 = (-1.0) - _2581;
        float _2584 = _2581 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2580 > _2584) || ((_2580 < _2582) || ((_2579 > _2584) || ((_2579 < _2582) || ((_2578 < _2582) || (_2578 > _2584))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2779 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2580, cbModelParam._m0[17u].z, fma(_2579, cbModelParam._m0[17u].y, _2578 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2580, cbModelParam._m0[18u].z, fma(_2579, cbModelParam._m0[18u].y, _2578 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2580, cbModelParam._m0[19u].z, fma(_2579, cbModelParam._m0[19u].y, _2578 * cbModelParam._m0[19u].x))), _1871);
            frontier_phi_25_49_ladder = _2779.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2779.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2779.x * cbModelParam._m0[1u].z;
        }
        _1961 = frontier_phi_25_49_ladder_2;
        _1963 = frontier_phi_25_49_ladder_1;
        _1965 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1945 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_939, _940, _941), _1871);
        _1961 = _1945.x * cbModelParam._m0[1u].z;
        _1963 = _1945.y * cbModelParam._m0[1u].z;
        _1965 = _1945.z * cbModelParam._m0[1u].z;
    }
    float _1978 = (((_966 * _915) + _967) * _931) * ((cbModelParam._m0[1u].w * (_1961 - _1862)) + _1862);
    float _1980 = (((_966 * _917) + _967) * _931) * ((cbModelParam._m0[1u].w * (_1963 - _1864)) + _1864);
    float _1982 = (((_966 * _918) + _967) * _931) * ((cbModelParam._m0[1u].w * (_1965 - _1866)) + _1866);
    float _1985 = fma(_1982, cbSceneParam._m0[89u].z, fma(_1980, cbSceneParam._m0[89u].y, _1978 * cbSceneParam._m0[89u].x));
    float _1988 = fma(_1982, cbSceneParam._m0[90u].z, fma(_1980, cbSceneParam._m0[90u].y, _1978 * cbSceneParam._m0[90u].x));
    float _1991 = fma(_1982, cbSceneParam._m0[91u].z, fma(_1980, cbSceneParam._m0[91u].y, _1978 * cbSceneParam._m0[91u].x));
    uvec4 _2001 = floatBitsToUint(cbInstanceData._m0[_253 + 5u]);
    uint _2003 = _2001.x * 14u;
    uint _2004 = _2003 + 13u;
    float _2011 = _931 + (-1.0);
    float _2016 = (cbLight._m0[_2004].x * _2011) + 1.0;
    float _2017 = (cbLight._m0[_2004].y * _2011) + 1.0;
    float _2018 = (cbLight._m0[_2004].z * _2011) + 1.0;
    float _2019 = (cbLight._m0[_2004].w * _2011) + 1.0;
    uint _2020 = _2003 + 5u;
    float _2026 = isnan(1.0) ? _2017 : (isnan(_2017) ? 1.0 : min(_2017, 1.0));
    uint _2030 = _2003 + 4u;
    float _2036 = isnan(1.0) ? _2016 : (isnan(_2016) ? 1.0 : min(_2016, 1.0));
    uint _2040 = _2003 | 1u;
    float _2051 = dot(vec3(cbLight._m0[_2003].xyz), vec3(_754, _755, _756));
    float _2054 = dot(vec3(cbLight._m0[_2040].xyz), vec3(_754, _755, _756));
    float _4303 = isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0));
    float _4314 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
    float _2059 = (isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0))) * 0.3183098733425140380859375;
    float _2061 = (isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0))) * 0.3183098733425140380859375;
    float _2068 = ((cbLight._m0[_2020].x * _2026) * _2061) + ((cbLight._m0[_2030].x * _2036) * _2059);
    float _2069 = ((_2026 * cbLight._m0[_2020].y) * _2061) + ((_2036 * cbLight._m0[_2030].y) * _2059);
    float _2070 = ((_2026 * cbLight._m0[_2020].z) * _2061) + ((_2036 * cbLight._m0[_2030].z) * _2059);
    uvec4 _2074 = floatBitsToUint(cbLight._m0[_2003 + 12u]);
    bool _2076 = _2074.x == 0u;
    float _2087;
    float _2089;
    float _2091;
    if (_2076)
    {
        _2087 = _2068;
        _2089 = _2069;
        _2091 = _2070;
    }
    else
    {
        uint _2095 = _2003 + 6u;
        float _2111 = (dot(vec3(cbLight._m0[_2003 + 2u].xyz), vec3(_754, _755, _756)) * 0.5) + 0.5;
        float _2112 = _2111 * _2111;
        float _4325 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
        float _2113 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
        float _2114 = isnan(1.0) ? _2018 : (isnan(_2018) ? 1.0 : min(_2018, 1.0));
        _2087 = (((cbLight._m0[_2095].x * 0.3183098733425140380859375) * _2113) * _2114) + _2068;
        _2089 = (((cbLight._m0[_2095].y * 0.3183098733425140380859375) * _2113) * _2114) + _2069;
        _2091 = (((cbLight._m0[_2095].z * 0.3183098733425140380859375) * _2113) * _2114) + _2070;
    }
    bool _2094 = _2074.y == 0u;
    float _2132;
    float _2134;
    float _2136;
    if (_2094)
    {
        _2132 = _2087;
        _2134 = _2089;
        _2136 = _2091;
    }
    else
    {
        uint _2302 = _2003 + 7u;
        float _2318 = (dot(vec3(cbLight._m0[_2003 + 3u].xyz), vec3(_754, _755, _756)) * 0.5) + 0.5;
        float _2319 = _2318 * _2318;
        float _4341 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
        float _2320 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
        float _2321 = isnan(1.0) ? _2019 : (isnan(_2019) ? 1.0 : min(_2019, 1.0));
        _2132 = (((cbLight._m0[_2302].x * 0.3183098733425140380859375) * _2320) * _2321) + _2087;
        _2134 = (((cbLight._m0[_2302].y * 0.3183098733425140380859375) * _2320) * _2321) + _2089;
        _2136 = (((cbLight._m0[_2302].z * 0.3183098733425140380859375) * _2320) * _2321) + _2091;
    }
    uint _2139 = _2003 + 8u;
    float _2152 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2003].w)) * _757) * 0.949999988079071044921875);
    float _2153 = _2152 * _2152;
    float _2154 = cbLight._m0[_2003].x + _833;
    float _2155 = cbLight._m0[_2003].y + _834;
    float _2156 = cbLight._m0[_2003].z + _835;
    float _2160 = inversesqrt(dot(vec3(_2154, _2155, _2156), vec3(_2154, _2155, _2156)));
    float _2161 = _2160 * _2154;
    float _2162 = _2160 * _2155;
    float _2163 = _2160 * _2156;
    float _2164 = dot(vec3(_754, _755, _756), vec3(cbLight._m0[_2003].xyz));
    float _4357 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
    float _2167 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
    float _4368 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
    float _2168 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
    float _2169 = dot(vec3(_754, _755, _756), vec3(_2161, _2162, _2163));
    float _4379 = isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0));
    float _2172 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
    float _2173 = dot(vec3(cbLight._m0[_2003].xyz), vec3(_2161, _2162, _2163));
    float _4390 = isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0));
    float _2177 = _2153 * _2153;
    float _2181 = ((_2172 * _2172) * (_2177 + (-1.0))) + 1.0;
    float _2189 = exp2(log2(1.0 - (isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0)))) * 5.0);
    float _2190 = 0.959999978542327880859375 - _912;
    float _2192 = 0.959999978542327880859375 - _913;
    float _2193 = 0.959999978542327880859375 - _914;
    float _2200 = 1.0 - _2153;
    float _2211 = (0.5 / (((_2168 * ((_2167 * _2200) + _2153)) + 9.9999999392252902907785028219223e-09) + (((_2168 * _2200) + _2153) * _2167))) * _2167;
    float _4401 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
    float _2213 = (isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0))) * (_2177 / ((_2181 * _2181) * 3.141590118408203125));
    uint _2224 = _2003 + 9u;
    float _2235 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2040].w)) * _757) * 0.949999988079071044921875);
    float _2236 = _2235 * _2235;
    float _2237 = cbLight._m0[_2040].x + _833;
    float _2238 = cbLight._m0[_2040].y + _834;
    float _2239 = cbLight._m0[_2040].z + _835;
    float _2243 = inversesqrt(dot(vec3(_2237, _2238, _2239), vec3(_2237, _2238, _2239)));
    float _2244 = _2243 * _2237;
    float _2245 = _2243 * _2238;
    float _2246 = _2243 * _2239;
    float _2247 = dot(vec3(_754, _755, _756), vec3(cbLight._m0[_2040].xyz));
    float _4412 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
    float _2250 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
    float _2251 = dot(vec3(_754, _755, _756), vec3(_2244, _2245, _2246));
    float _4423 = isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0));
    float _2254 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
    float _2255 = dot(vec3(cbLight._m0[_2040].xyz), vec3(_2244, _2245, _2246));
    float _4434 = isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0));
    float _2259 = _2236 * _2236;
    float _2263 = ((_2254 * _2254) * (_2259 + (-1.0))) + 1.0;
    float _2270 = exp2(log2(1.0 - (isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0)))) * 5.0);
    float _2277 = 1.0 - _2236;
    float _2287 = (0.5 / (((_2168 * ((_2250 * _2277) + _2236)) + 9.9999999392252902907785028219223e-09) + (((_2168 * _2277) + _2236) * _2250))) * _2250;
    float _4445 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
    float _2289 = (isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0))) * (_2259 / ((_2263 * _2263) * 3.141590118408203125));
    float _2299 = (((((_2270 * _2190) + _915) * cbLight._m0[_2224].x) * _2289) * _2026) + (((((_2189 * _2190) + _915) * cbLight._m0[_2139].x) * _2213) * _2036);
    float _2300 = (((((_2270 * _2192) + _917) * cbLight._m0[_2224].y) * _2289) * _2026) + (((((_2189 * _2192) + _917) * cbLight._m0[_2139].y) * _2213) * _2036);
    float _2301 = (((((_2270 * _2193) + _918) * cbLight._m0[_2224].z) * _2289) * _2026) + (((((_2189 * _2193) + _918) * cbLight._m0[_2139].z) * _2213) * _2036);
    float _2363;
    float _2365;
    float _2367;
    if (_2076)
    {
        _2363 = _2299;
        _2365 = _2300;
        _2367 = _2301;
    }
    else
    {
        uint _2369 = _2003 + 2u;
        uint _2373 = _2003 + 10u;
        float _2387 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2369].w)) * _757) * 0.949999988079071044921875);
        float _2388 = _2387 * _2387;
        float _2389 = cbLight._m0[_2369].x + _833;
        float _2390 = cbLight._m0[_2369].y + _834;
        float _2391 = cbLight._m0[_2369].z + _835;
        float _2395 = inversesqrt(dot(vec3(_2389, _2390, _2391), vec3(_2389, _2390, _2391)));
        float _2396 = _2395 * _2389;
        float _2397 = _2395 * _2390;
        float _2398 = _2395 * _2391;
        float _2399 = dot(vec3(_754, _755, _756), vec3(cbLight._m0[_2369].xyz));
        float _4456 = isnan(0.0) ? _2399 : (isnan(_2399) ? 0.0 : max(_2399, 0.0));
        float _2402 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
        float _2403 = dot(vec3(_754, _755, _756), vec3(_2396, _2397, _2398));
        float _4467 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
        float _2406 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
        float _2407 = dot(vec3(cbLight._m0[_2369].xyz), vec3(_2396, _2397, _2398));
        float _4478 = isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0));
        float _2411 = _2388 * _2388;
        float _2415 = ((_2406 * _2406) * (_2411 + (-1.0))) + 1.0;
        float _2422 = exp2(log2(1.0 - (isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0)))) * 5.0);
        float _2429 = 1.0 - _2388;
        float _2439 = (0.5 / (((_2168 * ((_2402 * _2429) + _2388)) + 9.9999999392252902907785028219223e-09) + (((_2168 * _2429) + _2388) * _2402))) * _2402;
        float _4489 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0));
        float _2441 = (isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0))) * (_2411 / ((_2415 * _2415) * 3.141590118408203125));
        float _2442 = isnan(1.0) ? _2018 : (isnan(_2018) ? 1.0 : min(_2018, 1.0));
        _2363 = (((((_2422 * _2190) + _915) * cbLight._m0[_2373].x) * _2441) * _2442) + _2299;
        _2365 = (((((_2422 * _2192) + _917) * cbLight._m0[_2373].y) * _2441) * _2442) + _2300;
        _2367 = (((((_2422 * _2193) + _918) * cbLight._m0[_2373].z) * _2441) * _2442) + _2301;
    }
    float _2477;
    float _2479;
    float _2481;
    if (_2094)
    {
        _2477 = _2363;
        _2479 = _2365;
        _2481 = _2367;
    }
    else
    {
        uint _2488 = _2003 + 3u;
        uint _2492 = _2003 + 11u;
        float _2506 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2488].w)) * _757) * 0.949999988079071044921875);
        float _2507 = _2506 * _2506;
        float _2508 = cbLight._m0[_2488].x + _833;
        float _2509 = cbLight._m0[_2488].y + _834;
        float _2510 = cbLight._m0[_2488].z + _835;
        float _2514 = inversesqrt(dot(vec3(_2508, _2509, _2510), vec3(_2508, _2509, _2510)));
        float _2515 = _2514 * _2508;
        float _2516 = _2514 * _2509;
        float _2517 = _2514 * _2510;
        float _2518 = dot(vec3(_754, _755, _756), vec3(cbLight._m0[_2488].xyz));
        float _4505 = isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0));
        float _2521 = isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0));
        float _2522 = dot(vec3(_754, _755, _756), vec3(_2515, _2516, _2517));
        float _4516 = isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : max(_2522, 0.0));
        float _2525 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
        float _2526 = dot(vec3(cbLight._m0[_2488].xyz), vec3(_2515, _2516, _2517));
        float _4527 = isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0));
        float _2530 = _2507 * _2507;
        float _2534 = ((_2525 * _2525) * (_2530 + (-1.0))) + 1.0;
        float _2541 = exp2(log2(1.0 - (isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0)))) * 5.0);
        float _2548 = 1.0 - _2507;
        float _2558 = (0.5 / (((_2168 * ((_2521 * _2548) + _2507)) + 9.9999999392252902907785028219223e-09) + (((_2168 * _2548) + _2507) * _2521))) * _2521;
        float _4538 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0));
        float _2560 = (isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0))) * (_2530 / ((_2534 * _2534) * 3.141590118408203125));
        float _2561 = isnan(1.0) ? _2019 : (isnan(_2019) ? 1.0 : min(_2019, 1.0));
        _2477 = (((((_2541 * _2190) + _915) * cbLight._m0[_2492].x) * _2560) * _2561) + _2363;
        _2479 = (((((_2541 * _2192) + _917) * cbLight._m0[_2492].y) * _2560) * _2561) + _2365;
        _2481 = (((((_2541 * _2193) + _918) * cbLight._m0[_2492].z) * _2560) * _2561) + _2367;
    }
    float _2696;
    float _2698;
    float _2700;
    float _2702;
    float _2704;
    float _2706;
    if (_2001.y == 0u)
    {
        float _2636 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2637 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2636;
        float _2638 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2636;
        float _2639 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2636;
        uvec4 _2651 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2652 = _2651.x;
        uint _2663 = uint((float(_2651.y) * floor(float(uint(cbSceneParam._m0[85u].y * _854) / _2652))) + floor(float(uint(cbSceneParam._m0[85u].x * _853) / _2652)));
        float _2673 = (log2(_2639 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2674 = isnan(0.0) ? _2673 : (isnan(_2673) ? 0.0 : max(_2673, 0.0));
        uint _2677 = uint(isnan(14.0) ? _2674 : (isnan(_2674) ? 14.0 : min(_2674, 14.0)));
        uvec4 _2682 = texelFetch(g_lightClusterGridBuffer, int(((_2677 << 2u) + (_2663 << 6u)) >> 2u));
        uint _2683 = _2682.x;
        uint _2684 = _2651.z;
        float _2784;
        float _2786;
        float _2788;
        float _2790;
        float _2792;
        float _2794;
        if (((((1u << ((_2684 >> 4u) & 15u)) + 4294967295u) & _2683) == 0u) || ((_2684 & 240u) == 0u))
        {
            _2784 = 0.0;
            _2786 = 0.0;
            _2788 = 0.0;
            _2790 = 0.0;
            _2792 = 0.0;
            _2794 = 0.0;
        }
        else
        {
            float _2785;
            float _2787;
            float _2789;
            float _2791;
            float _2793;
            float _2795;
            float _2937 = 0.0;
            float _2938 = 0.0;
            float _2939 = 0.0;
            float _2940 = 0.0;
            float _2941 = 0.0;
            float _2942 = 0.0;
            uint _2943 = 0u;
            uint _2952;
            bool _2953;
            for (;;)
            {
                _2952 = texelFetch(g_lightClassification, int((((_2677 << 5u) + (_2663 << 9u)) + (_2943 << 2u)) >> 2u)).x;
                _2953 = _2952 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2953)
                {
                    frontier_phi_66_pred = _2937;
                    frontier_phi_66_pred_1 = _2942;
                    frontier_phi_66_pred_2 = _2941;
                    frontier_phi_66_pred_3 = _2940;
                    frontier_phi_66_pred_4 = _2939;
                    frontier_phi_66_pred_5 = _2938;
                }
                else
                {
                    float _3082;
                    float _3083;
                    float _3084;
                    float _3085;
                    float _3086;
                    float _3087;
                    uint _3088;
                    _3082 = _2937;
                    _3083 = _2938;
                    _3084 = _2939;
                    _3085 = _2940;
                    _3086 = _2941;
                    _3087 = _2942;
                    _3088 = _2952;
                    float _3009;
                    float _3010;
                    float _3011;
                    float _3012;
                    float _3013;
                    float _3014;
                    for (;;)
                    {
                        uint _3092 = uint(findLSB(_3088)) + (_2943 << 5u);
                        uint _3089 = (_3088 + 4294967295u) & _3088;
                        uint _3094 = _3092 * 48u;
                        vec4 _3108 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3094)).x, texelFetch(g_PointLightRenderingBuffer, int(_3094 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3094 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3094 + 3u)).x));
                        uint _3114 = (_3092 * 48u) + 4u;
                        vec4 _3127 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3114)).x, texelFetch(g_PointLightRenderingBuffer, int(_3114 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3114 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3114 + 3u)).x));
                        uint _3133 = (_3092 * 48u) + 8u;
                        vec3 _3144 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3133)).x, texelFetch(g_PointLightRenderingBuffer, int(_3133 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3133 + 2u)).x));
                        float _3148 = _3108.x - _2637;
                        float _3149 = _3108.y - _2638;
                        float _3150 = _3108.z - _2639;
                        float _3151 = dot(vec3(_3148, _3149, _3150), vec3(_3148, _3149, _3150));
                        float _3154 = inversesqrt(_3151);
                        float _3155 = _3154 * _3148;
                        float _3156 = _3154 * _3149;
                        float _3157 = _3154 * _3150;
                        float _3158 = dot(vec3(_872, _875, _878), vec3(_3155, _3156, _3157));
                        float _3163 = 1.0 - (_3151 * _3108.w);
                        float _4564 = isnan(0.0) ? _3163 : (isnan(_3163) ? 0.0 : max(_3163, 0.0));
                        float _3164 = isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0));
                        float _3165 = sqrt(_3151) * _3127.w;
                        float _3168 = 1.39999997615814208984375 / (_3165 + 1.39999997615814208984375);
                        float _3169 = _3168 * _3168;
                        float _3172 = ((1.0 - _3169) * _3158) + _3169;
                        float _3175 = _3165 * _3165;
                        float _3179 = ((isnan(0.0) ? _3172 : (isnan(_3172) ? 0.0 : max(_3172, 0.0))) * _3164) / ((_3175 * 0.699999988079071044921875) + 1.0);
                        float _3183 = (-0.0) - _2637;
                        float _3184 = (-0.0) - _2638;
                        float _3185 = (-0.0) - _2639;
                        float _3189 = inversesqrt(dot(vec3(_3183, _3184, _3185), vec3(_3183, _3184, _3185)));
                        float _3190 = _3189 * _3183;
                        float _3191 = _3189 * _3184;
                        float _3192 = _3189 * _3185;
                        float _3200 = exp2(log2(1.0 / ((_3175 * 3.5) + 5.0)) * 0.25);
                        float _3201 = 1.0 - _947;
                        float _3208 = sqrt(1.0 - ((1.0 - (_3201 * _3201)) * (1.0 - (_3200 * _3200))));
                        float _3209 = _3208 * _3208;
                        float _3210 = _3209 * _3209;
                        float _3211 = _3190 + _3155;
                        float _3212 = _3191 + _3156;
                        float _3213 = _3192 + _3157;
                        float _3217 = inversesqrt(dot(vec3(_3211, _3212, _3213), vec3(_3211, _3212, _3213)));
                        float _3221 = dot(vec3(_872, _875, _878), vec3(_3190, _3191, _3192));
                        float _4580 = isnan(0.0) ? _3221 : (isnan(_3221) ? 0.0 : max(_3221, 0.0));
                        float _3224 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
                        float _3225 = dot(vec3(_872, _875, _878), vec3(_3217 * _3211, _3217 * _3212, _3217 * _3213));
                        float _4591 = isnan(0.0) ? _3225 : (isnan(_3225) ? 0.0 : max(_3225, 0.0));
                        float _3228 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
                        float _3232 = ((_3228 * _3228) * (_3210 + (-1.0))) + 1.0;
                        float _3233 = _3168 * _3209;
                        float _3234 = _3233 * _3233;
                        float _3237 = ((1.0 - _3234) * _3158) + _3234;
                        float _4602 = isnan(0.0) ? _3237 : (isnan(_3237) ? 0.0 : max(_3237, 0.0));
                        float _3238 = isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0));
                        float _3239 = 1.0 - _3209;
                        float _3249 = (0.5 / (((_3238 * ((_3224 * _3239) + _3209)) + 9.9999999392252902907785028219223e-09) + (((_3238 * _3239) + _3209) * _3224))) * _3238;
                        float _4613 = isnan(0.0) ? _3249 : (isnan(_3249) ? 0.0 : max(_3249, 0.0));
                        float _3260 = (((_3210 * 3.1415927410125732421875) * (isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0)))) / ((_3232 * _3232) * ((_3175 * 2.1991131305694580078125) + 3.141590118408203125))) * _3164;
                        _3012 = (_3179 * _3127.x) + _3085;
                        _3013 = (_3179 * _3127.y) + _3086;
                        _3014 = (_3179 * _3127.z) + _3087;
                        _3009 = (_3260 * _3144.x) + _3082;
                        _3010 = (_3260 * _3144.y) + _3083;
                        _3011 = (_3260 * _3144.z) + _3084;
                        if (_3089 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3082 = _3009;
                            _3083 = _3010;
                            _3084 = _3011;
                            _3085 = _3012;
                            _3086 = _3013;
                            _3087 = _3014;
                            _3088 = _3089;
                        }
                    }
                    frontier_phi_66_pred = _3009;
                    frontier_phi_66_pred_1 = _3014;
                    frontier_phi_66_pred_2 = _3013;
                    frontier_phi_66_pred_3 = _3012;
                    frontier_phi_66_pred_4 = _3011;
                    frontier_phi_66_pred_5 = _3010;
                }
                _2785 = frontier_phi_66_pred;
                _2795 = frontier_phi_66_pred_1;
                _2793 = frontier_phi_66_pred_2;
                _2791 = frontier_phi_66_pred_3;
                _2789 = frontier_phi_66_pred_4;
                _2787 = frontier_phi_66_pred_5;
                uint _2944 = _2943 + 1u;
                if (_2944 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2937 = _2785;
                    _2938 = _2787;
                    _2939 = _2789;
                    _2940 = _2791;
                    _2941 = _2793;
                    _2942 = _2795;
                    _2943 = _2944;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2784 = _2785;
            _2786 = _2787;
            _2788 = _2789;
            _2790 = _2791;
            _2792 = _2793;
            _2794 = _2795;
        }
        uvec4 _2798 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2799 = _2798.z;
        uint _2801 = (_2799 >> 8u) & 15u;
        float _2905;
        float _2907;
        float _2909;
        float _2911;
        float _2913;
        float _2915;
        if (((4294967295u << _2801) & _2683) == 0u)
        {
            _2905 = _2784;
            _2907 = _2786;
            _2909 = _2788;
            _2911 = _2790;
            _2913 = _2792;
            _2915 = _2794;
        }
        else
        {
            float _2930 = inversesqrt(dot(vec3(_2637, _2638, _2639), vec3(_2637, _2638, _2639)));
            float _2931 = _2930 * _2637;
            float _2932 = _2930 * _2638;
            float _2933 = _2930 * _2639;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2801 < ((_2799 >> 12u) & 15u))
            {
                float _2906;
                float _2908;
                float _2910;
                float _2912;
                float _2914;
                float _2916;
                float _3065 = _2784;
                float _3066 = _2786;
                float _3067 = _2788;
                float _3068 = _2790;
                float _3069 = _2792;
                float _3070 = _2794;
                uint _3071 = _2801;
                uint _3080;
                bool _3081;
                for (;;)
                {
                    _3080 = texelFetch(g_lightClassification, int((((_2677 << 5u) + (_2663 << 9u)) + (_3071 << 2u)) >> 2u)).x;
                    _3081 = _3080 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3081)
                    {
                        frontier_phi_77_pred = _3070;
                        frontier_phi_77_pred_1 = _3069;
                        frontier_phi_77_pred_2 = _3068;
                        frontier_phi_77_pred_3 = _3067;
                        frontier_phi_77_pred_4 = _3066;
                        frontier_phi_77_pred_5 = _3065;
                    }
                    else
                    {
                        float _3274;
                        float _3275;
                        float _3276;
                        float _3277;
                        float _3278;
                        float _3279;
                        float _3568;
                        float _3569;
                        float _3570;
                        float _3571;
                        float _3572;
                        float _3573;
                        float _3287 = _3065;
                        float _3288 = _3066;
                        float _3289 = _3067;
                        float _3290 = _3068;
                        float _3291 = _3069;
                        float _3292 = _3070;
                        uint _3293 = _3080;
                        uint _3294;
                        vec4 _3319;
                        float _3320;
                        vec4 _3335;
                        vec3 _3347;
                        vec4 _3362;
                        vec4 _3378;
                        float _3424;
                        bool _3425;
                        for (;;)
                        {
                            uint _3304 = ((_3071 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3293));
                            _3294 = (_3293 + 4294967295u) & _3293;
                            uint _3306 = _3304 * 40u;
                            _3319 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3306)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 3u)).x));
                            _3320 = _3319.w;
                            uint _3322 = (_3304 * 40u) + 4u;
                            _3335 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3322)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 3u)).x));
                            uint _3337 = (_3304 * 40u) + 8u;
                            _3347 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3337)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3337 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3337 + 2u)).x));
                            uint _3349 = (_3304 * 40u) + 16u;
                            _3362 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3349)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3349 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3349 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3349 + 3u)).x));
                            uint _3365 = (_3304 * 40u) + 20u;
                            _3378 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3365)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 3u)).x));
                            uint _3380 = (_3304 * 40u) + 24u;
                            vec4 _3393 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3380)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 3u)).x));
                            uint _3399 = (_3304 * 40u) + 28u;
                            vec4 _3412 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3399)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 3u)).x));
                            _3424 = fma(_2639, _3412.z, fma(_2638, _3412.y, _3412.x * _2637)) + _3412.w;
                            _3425 = !((fma(_2639, _3393.z, fma(_2638, _3393.y, _3393.x * _2637)) + _3393.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3425)
                            {
                                float _3452 = _3319.x - _2637;
                                float _3453 = _3319.y - _2638;
                                float _3454 = _3319.z - _2639;
                                float _3455 = dot(vec3(_3452, _3453, _3454), vec3(_3452, _3453, _3454));
                                float _3458 = inversesqrt(_3455);
                                float _3459 = _3458 * _3452;
                                float _3460 = _3458 * _3453;
                                float _3461 = _3458 * _3454;
                                float _3465 = 1.0 - (_3455 / (_3320 * _3320));
                                float _4624 = isnan(0.0) ? _3465 : (isnan(_3465) ? 0.0 : max(_3465, 0.0));
                                float _3466 = isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0));
                                float _3470 = sqrt(_3455) * _3335.w;
                                float _3472 = 1.39999997615814208984375 / (_3470 + 1.39999997615814208984375);
                                float _3473 = _3472 * _3472;
                                float _3476 = ((1.0 - _3473) * dot(vec3(_3459, _3460, _3461), vec3(_872, _875, _878))) + _3473;
                                float _3479 = _3470 * _3470;
                                float _3483 = (fma(_2639, _3362.z, fma(_2638, _3362.y, _3362.x * _2637)) + _3362.w) / _3424;
                                float _3484 = (fma(_2639, _3378.z, fma(_2638, _3378.y, _3378.x * _2637)) + _3378.w) / _3424;
                                float _3488 = 1.0 - dot(vec2(_3483, _3484), vec2(_3483, _3484));
                                float _4640 = isnan(0.0) ? _3488 : (isnan(_3488) ? 0.0 : max(_3488, 0.0));
                                float _3489 = isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0));
                                float _3490 = _3489 * (((isnan(0.0) ? _3476 : (isnan(_3476) ? 0.0 : max(_3476, 0.0))) * _3466) / ((_3479 * 0.699999988079071044921875) + 1.0));
                                float _3502 = exp2(log2(1.0 / ((_3479 * 3.5) + 5.0)) * 0.25);
                                float _3503 = 1.0 - _947;
                                float _3510 = sqrt(1.0 - ((1.0 - (_3503 * _3503)) * (1.0 - (_3502 * _3502))));
                                float _3511 = _3510 * _3510;
                                float _3512 = _3511 * _3511;
                                float _3513 = _3459 - _2931;
                                float _3514 = _3460 - _2932;
                                float _3515 = _3461 - _2933;
                                float _3519 = inversesqrt(dot(vec3(_3513, _3514, _3515), vec3(_3513, _3514, _3515)));
                                float _3523 = dot(vec3(_872, _875, _878), vec3((-0.0) - _2931, (-0.0) - _2932, (-0.0) - _2933));
                                float _4651 = isnan(0.0) ? _3523 : (isnan(_3523) ? 0.0 : max(_3523, 0.0));
                                float _3526 = isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0));
                                float _3527 = dot(vec3(_872, _875, _878), vec3(_3519 * _3513, _3519 * _3514, _3519 * _3515));
                                float _4662 = isnan(0.0) ? _3527 : (isnan(_3527) ? 0.0 : max(_3527, 0.0));
                                float _3530 = isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0));
                                float _3534 = ((_3530 * _3530) * (_3512 + (-1.0))) + 1.0;
                                float _3535 = _3472 * _3511;
                                float _3536 = _3535 * _3535;
                                float _3542 = ((1.0 - _3536) * dot(vec3(_872, _875, _878), vec3(_3459, _3460, _3461))) + _3536;
                                float _4673 = isnan(0.0) ? _3542 : (isnan(_3542) ? 0.0 : max(_3542, 0.0));
                                float _3543 = isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0));
                                float _3544 = 1.0 - _3511;
                                float _3554 = (0.5 / (((_3543 * ((_3526 * _3544) + _3511)) + 9.9999999392252902907785028219223e-09) + (((_3543 * _3544) + _3511) * _3526))) * _3543;
                                float _4684 = isnan(0.0) ? _3554 : (isnan(_3554) ? 0.0 : max(_3554, 0.0));
                                float _3564 = (_3489 * _3466) * (((_3512 * 3.1415927410125732421875) * (isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0)))) / ((_3534 * _3534) * ((_3479 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3490 * _3335.y;
                                frontier_phi_83_pred_1 = _3490 * _3335.x;
                                frontier_phi_83_pred_2 = _3564 * _3347.z;
                                frontier_phi_83_pred_3 = _3564 * _3347.y;
                                frontier_phi_83_pred_4 = _3564 * _3347.x;
                                frontier_phi_83_pred_5 = _3490 * _3335.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3572 = frontier_phi_83_pred;
                            _3571 = frontier_phi_83_pred_1;
                            _3570 = frontier_phi_83_pred_2;
                            _3569 = frontier_phi_83_pred_3;
                            _3568 = frontier_phi_83_pred_4;
                            _3573 = frontier_phi_83_pred_5;
                            _3277 = _3571 + _3290;
                            _3278 = _3572 + _3291;
                            _3279 = _3573 + _3292;
                            _3274 = _3568 + _3287;
                            _3275 = _3569 + _3288;
                            _3276 = _3570 + _3289;
                            if (_3294 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3287 = _3274;
                                _3288 = _3275;
                                _3289 = _3276;
                                _3290 = _3277;
                                _3291 = _3278;
                                _3292 = _3279;
                                _3293 = _3294;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3279;
                        frontier_phi_77_pred_1 = _3278;
                        frontier_phi_77_pred_2 = _3277;
                        frontier_phi_77_pred_3 = _3276;
                        frontier_phi_77_pred_4 = _3275;
                        frontier_phi_77_pred_5 = _3274;
                    }
                    _2916 = frontier_phi_77_pred;
                    _2914 = frontier_phi_77_pred_1;
                    _2912 = frontier_phi_77_pred_2;
                    _2910 = frontier_phi_77_pred_3;
                    _2908 = frontier_phi_77_pred_4;
                    _2906 = frontier_phi_77_pred_5;
                    uint _3072 = _3071 + 1u;
                    if (_3072 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3065 = _2906;
                        _3066 = _2908;
                        _3067 = _2910;
                        _3068 = _2912;
                        _3069 = _2914;
                        _3070 = _2916;
                        _3071 = _3072;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2910;
                frontier_phi_58_59_ladder_1 = _2916;
                frontier_phi_58_59_ladder_2 = _2914;
                frontier_phi_58_59_ladder_3 = _2912;
                frontier_phi_58_59_ladder_4 = _2908;
                frontier_phi_58_59_ladder_5 = _2906;
            }
            else
            {
                frontier_phi_58_59_ladder = _2788;
                frontier_phi_58_59_ladder_1 = _2794;
                frontier_phi_58_59_ladder_2 = _2792;
                frontier_phi_58_59_ladder_3 = _2790;
                frontier_phi_58_59_ladder_4 = _2786;
                frontier_phi_58_59_ladder_5 = _2784;
            }
            _2905 = frontier_phi_58_59_ladder_5;
            _2907 = frontier_phi_58_59_ladder_4;
            _2909 = frontier_phi_58_59_ladder;
            _2911 = frontier_phi_58_59_ladder_3;
            _2913 = frontier_phi_58_59_ladder_2;
            _2915 = frontier_phi_58_59_ladder_1;
        }
        float _2920 = isnan(1.0) ? _931 : (isnan(_931) ? 1.0 : min(_931, 1.0));
        _2696 = (_2920 * _2911) + _2132;
        _2698 = (_2920 * _2913) + _2134;
        _2700 = (_2920 * _2915) + _2136;
        _2702 = ((_2905 * _915) * _2920) + _2477;
        _2704 = ((_2907 * _917) * _2920) + _2479;
        _2706 = ((_2909 * _918) * _2920) + _2481;
    }
    else
    {
        _2696 = _2132;
        _2698 = _2134;
        _2700 = _2136;
        _2702 = _2477;
        _2704 = _2479;
        _2706 = _2481;
    }
    float _4700 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
    float _4711 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
    float _4722 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
    float _2723 = ((isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0))) * (_2696 + ((isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0))) * _931))) + ((_2702 + ((isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0))) * _1770)) * cbPerFrame._m0[3u].x);
    float _2724 = ((isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0))) * (_2698 + ((isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0))) * _931))) + ((_2704 + ((isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0))) * _1770)) * cbPerFrame._m0[3u].x);
    float _2725 = ((isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0))) * (_2700 + ((isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0))) * _931))) + ((_2706 + ((isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0))) * _1770)) * cbPerFrame._m0[3u].x);
    uint _2726 = _253 + 6u;
    float _2734 = _853 / cbSceneParam._m0[86u].x;
    float _2735 = _854 / cbSceneParam._m0[86u].y;
    vec4 _2749 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2734, _2735, (log2((isnan(cbSceneParam._m0[77u].w) ? _776 : (isnan(_776) ? cbSceneParam._m0[77u].w : min(_776, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2751 = _2749.x;
    float _2752 = _2749.y;
    float _2753 = _2749.z;
    float _2754 = _2749.w;
    float _2847;
    float _2849;
    float _2851;
    float _2853;
    if (_776 > cbSceneParam._m0[78u].w)
    {
        float _2809 = isnan(_776) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _776 : min(cbSceneParam._m0[80u].w, _776));
        float _2810 = _2809 / _776;
        float _2821 = _2810 * _826;
        float _2822 = _827 * _2810;
        float _2823 = (-0.0) - _2822;
        float _2825 = _2810 * _828;
        float _2827 = (cbSceneParam._m0[77u].w * _2823) / _2809;
        float _2828 = _2827 + cbSceneParam._m0[79u].w;
        float _2829 = cbSceneParam._m0[79u].w - _2822;
        float _2835 = sqrt(((_2821 * _2821) + (_2822 * _2822)) + (_2825 * _2825));
        float _2838 = (1.0 - (cbSceneParam._m0[77u].w / _2809)) * _2835;
        float _2843 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2845 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3022;
        if (abs((_2823 - _2827) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3022 = ((((_2828 > 0.0) ? exp2(_2843 * _2828) : (2.0 - exp2(_2845 * _2828))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2838;
        }
        else
        {
            float _2966 = 1.0 / cbSceneParam._m0[80u].x;
            float _2967 = isnan(_2829) ? _2828 : (isnan(_2828) ? _2829 : max(_2828, _2829));
            float _2968 = isnan(_2829) ? _2828 : (isnan(_2828) ? _2829 : min(_2828, _2829));
            float _2977 = isnan(0.0) ? _2967 : (isnan(_2967) ? 0.0 : min(_2967, 0.0));
            float _2978 = isnan(0.0) ? _2968 : (isnan(_2968) ? 0.0 : min(_2968, 0.0));
            _3022 = ((abs(_2835 / _2823) * cbSceneParam._m0[80u].y) * ((((_2977 - _2978) * 2.0) - ((exp2(_2843 * (isnan(0.0) ? _2967 : (isnan(_2967) ? 0.0 : max(_2967, 0.0)))) - exp2(_2843 * (isnan(0.0) ? _2968 : (isnan(_2968) ? 0.0 : max(_2968, 0.0))))) * _2966)) - ((exp2(_2845 * _2977) - exp2(_2845 * _2978)) * _2966))) + (_2838 * cbSceneParam._m0[80u].z);
        }
        vec4 _3024 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2734, _2735, 1.0), 0.0);
        float _3033 = exp2((_3022 * (-1.44269502162933349609375)) * (1.0 - _3024.w));
        float _3034 = log2(_3033);
        float _3050 = log2(_2754);
        _2847 = (exp2(_3050 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3034 * cbSceneParam._m0[78u].x)) * _3024.x) / cbSceneParam._m0[78u].x)) + _2751;
        _2849 = (exp2(_3050 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3034 * cbSceneParam._m0[78u].y)) * _3024.y) / cbSceneParam._m0[78u].y)) + _2752;
        _2851 = (exp2(_3050 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3034 * cbSceneParam._m0[78u].z)) * _3024.z) / cbSceneParam._m0[78u].z)) + _2753;
        _2853 = _3033 * _2754;
    }
    else
    {
        _2847 = _2751;
        _2849 = _2752;
        _2851 = _2753;
        _2853 = _2754;
    }
    bool _3060;
    vec4 _2863;
    vec4 _2885;
    float _2887;
    float _2891;
    float _2892;
    float _2893;
    float _2894;
    bool _2904;
    for (;;)
    {
        _2863 = cbMatDynParam._m0[0u];
        float _2865 = roundEven(_2863.y);
        bool _2866 = _2865 == 3.0;
        float _2867 = log2(_2853);
        float _2874 = exp2(_2867 * cbSceneParam._m0[78u].x) * _2723;
        float _2875 = exp2(_2867 * cbSceneParam._m0[78u].y) * _2724;
        float _2876 = exp2(_2867 * cbSceneParam._m0[78u].z) * _2725;
        float _2883 = _842 + (-0.5);
        _2885 = cbMtdParam._m0[1u];
        _2887 = _2885.y * _2883;
        float _2890 = (_2865 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2891 = _2890 * (_2866 ? _2874 : (_2874 + (cbSceneParam._m0[72u].w * _2847)));
        _2892 = _2890 * (_2866 ? _2875 : (_2875 + (cbSceneParam._m0[72u].w * _2849)));
        _2893 = _2890 * (_2866 ? _2876 : (_2876 + (cbSceneParam._m0[72u].w * _2851)));
        _2894 = _2883 * 0.999000012874603271484375;
        _2904 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2904)
        {
            if ((cbInstanceData._m0[_253 + 7u].x + _2894) < 0.5)
            {
                _3060 = true;
                break;
            }
        }
        uint _3001 = _891 + uint(_2863.w);
        if ((cbInstanceData._m0[_3001].w < 1.0) && ((cbInstanceData._m0[_3001].w + _2894) < 0.5))
        {
            _3060 = true;
            break;
        }
        if ((_2887 + 1.0) < _2885.x)
        {
            _3060 = true;
            break;
        }
        _3060 = false;
        break;
    }
    float _3265;
    if (_3060)
    {
        discard_state = true;
        _3265 = 0.0;
    }
    else
    {
        _3265 = cbInstanceData._m0[_2726].w;
    }
    SV_Target.x = _2891;
    SV_Target.y = _2892;
    SV_Target.z = _2893;
    SV_Target.w = _3265;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2726].w;
    discard_exit();
}


