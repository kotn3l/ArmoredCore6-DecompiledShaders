#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1326;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _221 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _222 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _223 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _229 = inversesqrt(dot(vec3(_221, _222, _223), vec3(_221, _222, _223)));
    float _230 = _229 * _221;
    float _231 = _229 * _222;
    float _232 = _229 * _223;
    float _236 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _237 = _236 * NORMAL.x;
    float _238 = _236 * NORMAL.y;
    float _239 = _236 * NORMAL.z;
    float _243 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _244 = _243 * TANGENT.x;
    float _245 = _243 * TANGENT.y;
    float _246 = _243 * TANGENT.z;
    float _257 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _259 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _260 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3675 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _3686 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _3697 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    uint _270 = uint(roundEven(NORMAL.w)) * 13u;
    uint _275 = _270 + 1u;
    uint _279 = _270 + 2u;
    float _288 = sqrt(((cbInstanceData._m0[_275].x * cbInstanceData._m0[_275].x) + (cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x)) + (cbInstanceData._m0[_279].x * cbInstanceData._m0[_279].x));
    float _289 = _288 * TEXCOORD.z;
    float _290 = _288 * TEXCOORD.w;
    vec4 _303 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _289) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _290) + cbTextureTilingScale._m0[13u].w));
    vec4 _327 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _332 = _327.x * cbMtdParam._m0[11u].x;
    float _333 = _327.y * cbMtdParam._m0[11u].y;
    float _334 = _327.z * cbMtdParam._m0[11u].z;
    vec4 _353 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _289) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _290) + cbTextureTilingScale._m0[5u].w));
    vec4 _389 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _391 = _389.x;
    float _403 = dot(vec4(_391, _389.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _420 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_391 - _403) * cbMtdParam._m0[24u].y) + _403) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3708 = isnan(0.0) ? _420 : (isnan(_420) ? 0.0 : max(_420, 0.0));
    float _421 = isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0));
    float _428 = (_421 * ((_353.x * cbMtdParam._m0[12u].x) - _332)) + _332;
    float _429 = (_421 * ((_353.y * cbMtdParam._m0[12u].y) - _333)) + _333;
    float _430 = (_421 * ((_353.z * cbMtdParam._m0[12u].z) - _334)) + _334;
    float _434 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _303.x) * _428;
    float _437 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _303.y) * _429;
    float _440 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _303.z) * _430;
    float _447 = ((_428 - _434) * (isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0)))) + _434;
    float _448 = ((_429 - _437) * (isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0)))) + _437;
    float _449 = ((_430 - _440) * (isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0)))) + _440;
    vec4 _468 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _289) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _290) + cbTextureTilingScale._m0[14u].w));
    vec4 _488 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _289) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _290) + cbTextureTilingScale._m0[20u].w));
    vec4 _515 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _289) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _290) + cbTextureTilingScale._m0[4u].w));
    vec4 _532 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _534 = _532.x;
    float _535 = _532.y;
    float _536 = _532.z;
    float _545 = ((_515.z - _536) * _421) + _536;
    float _548 = ((((_515.x - _534) * _421) + _534) * 2.0) + (-1.0);
    float _549 = ((((_515.y - _535) * _421) + _535) * 2.0) + (-1.0);
    float _550 = dot(vec2(_548, _549), vec2(_548, _549));
    float _3719 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _555 = sqrt(1.0 - (isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0))));
    vec4 _575 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _587 = (_548 + ((((_488.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_575.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _588 = (_549 + ((((_488.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_575.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _591 = fma(_555, _237, fma(_588, _244, _587 * _230));
    float _594 = fma(_555, _238, fma(_588, _245, _587 * _231));
    float _597 = fma(_555, _239, fma(_588, _246, _587 * _232));
    float _601 = inversesqrt(dot(vec3(_591, _594, _597), vec3(_591, _594, _597)));
    vec4 _628 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _289) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _290) + cbTextureTilingScale._m0[11u].w));
    float _630 = _628.x;
    float _631 = 1.0 - _630;
    float _635 = ((_630 - _631) * cbMtdParam._m0[24u].z) + _631;
    float _637 = (cbMtdParam._m0[19u].x + dot(vec4(_601 * _591, _601 * _594, _601 * _597, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_635 * cbMtdParam._m0[21u].z);
    float _3730 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _638 = isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0));
    float _653 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_635 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3741 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
    float _654 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
    float _658 = ((_638 * ((_468.x * cbMtdParam._m0[18u].x) - _447)) * _654) + _447;
    float _659 = ((_638 * ((_468.y * cbMtdParam._m0[18u].y) - _448)) * _654) + _448;
    float _660 = ((_638 * ((_468.z * cbMtdParam._m0[18u].z) - _449)) * _654) + _449;
    vec4 _672 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _686 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _688 = _686.x;
    float _706 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _289) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _290) + cbTextureTilingScale._m0[9u].w)).x - _688) * _421) + _688;
    float _710 = ((_672.x - _706) * cbMtdParam._m0[19u].z) + _706;
    float _713 = _710 - ((_654 * _638) * _710);
    float _718 = (((_488.z - _545) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _545;
    float _722 = ((_575.z - _718) * cbMtdParam._m0[19u].w) + _718;
    vec4 _735 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _289) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _290) + cbTextureTilingScale._m0[15u].w));
    float _742 = (_735.x * 2.0) + (-1.0);
    float _743 = (_735.y * 2.0) + (-1.0);
    float _744 = dot(vec2(_742, _743), vec2(_742, _743));
    float _3752 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _753 = (((_735.z - _722) * _638) * _654) + _722;
    float _768 = (((cbMtdParam._m0[21u].x * _587) + ((_742 - _587) * _638)) * _654) + _587;
    float _769 = (((cbMtdParam._m0[21u].x * _588) + ((_743 - _588) * _638)) * _654) + _588;
    float _770 = (((sqrt(1.0 - (isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0)))) - _555) * _638) * _654) + _555;
    float _772 = cbMtdParam._m0[22u].x + _575.w;
    float _775 = fma(_770, _237, fma(_769, _244, _768 * _230));
    float _778 = fma(_770, _238, fma(_769, _245, _768 * _231));
    float _781 = fma(_770, _239, fma(_769, _246, _768 * _232));
    float _785 = inversesqrt(dot(vec3(_775, _778, _781), vec3(_775, _778, _781)));
    float _786 = _785 * _775;
    float _787 = _785 * _778;
    float _788 = _785 * _781;
    float _3763 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _789 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
    float _3774 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _3785 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _3796 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _3807 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _3818 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _794 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
    float _808 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _849 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _859 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _849);
    float _860 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _849);
    float _861 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _849);
    float _865 = inversesqrt(dot(vec3(_859, _860, _861), vec3(_859, _860, _861)));
    float _866 = _859 * _865;
    float _867 = _860 * _865;
    float _868 = _861 * _865;
    float _874 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _875 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _893 = fma(_788, cbSceneParam._m0[5u].z, fma(_787, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _786));
    float _896 = fma(_788, cbSceneParam._m0[6u].z, fma(_787, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _786));
    float _899 = fma(_788, cbSceneParam._m0[7u].z, fma(_787, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _786));
    uint _913 = (_270 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _919 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0)))) * cbInstanceData._m0[_913].x;
    float _920 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0)))) * cbInstanceData._m0[_913].y;
    float _921 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0)))) * cbInstanceData._m0[_913].z;
    float _3829 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
    float _922 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
    float _3840 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
    float _923 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
    float _3851 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
    float _924 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
    float _925 = 1.0 - _794;
    float _926 = _922 * _925;
    float _927 = _923 * _925;
    float _928 = _924 * _925;
    float _933 = (_922 + (-0.039999999105930328369140625)) * _794;
    float _934 = (_923 + (-0.039999999105930328369140625)) * _794;
    float _935 = (_924 + (-0.039999999105930328369140625)) * _794;
    float _936 = _933 + 0.039999999105930328369140625;
    float _938 = _934 + 0.039999999105930328369140625;
    float _939 = _935 + 0.039999999105930328369140625;
    vec4 _948 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _874, cbSceneParam._m0[86u].y * _875));
    float _952 = ((isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0))) * TEXCOORD_5.w) * _948.x;
    float _953 = dot(vec3(_786, _787, _788), vec3(_866, _867, _868));
    float _956 = _953 * 2.0;
    float _960 = (_956 * _786) - _866;
    float _961 = (_956 * _787) - _867;
    float _962 = (_956 * _788) - _868;
    float _966 = abs(dot(vec3(_866, _867, _868), vec3(_786, _787, _788)));
    float _3862 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
    float _968 = sqrt(_789);
    float _981 = exp2((_968 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_968 * 3.0));
    float _987 = (1.0 - _981) * ((_968 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _988 = _981 * _968;
    float _1016 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1020 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1024 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1325;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1050 = fma(_1024, cbModelParam._m0[26u].z, fma(_1020, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1016));
        float _1054 = fma(_1024, cbModelParam._m0[27u].z, fma(_1020, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1016));
        float _1058 = fma(_1024, cbModelParam._m0[28u].z, fma(_1020, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1016));
        float _1083 = _1016 + _786;
        float _1084 = _1020 + _787;
        float _1085 = _1024 + _788;
        float _1095 = fma(_1085, cbModelParam._m0[26u].z, fma(_1084, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1083)) - _1050;
        float _1096 = fma(_1085, cbModelParam._m0[27u].z, fma(_1084, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1083)) - _1054;
        float _1097 = fma(_1085, cbModelParam._m0[28u].z, fma(_1084, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1083)) - _1058;
        float _1101 = inversesqrt(dot(vec3(_1095, _1096, _1097), vec3(_1095, _1096, _1097)));
        float _1114 = ((_1101 * _1095) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1050 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1115 = ((_1101 * _1096) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1054 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1116 = ((_1101 * _1097) / cbModelParam._m0[34u].z) + ((((((_1058 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1119 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1114, _1115, _1116), 0.0);
        vec4 _1126 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1114, _1115, _1116), 0.0);
        vec4 _1133 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1114, _1115, _1116), 0.0);
        vec4 _1140 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1114, _1115, _1116), 0.0);
        float _1153 = exp2((_1119.w + (-0.5)) * 20.0) * 2.0;
        float _1154 = _1153 * (_1119.x + (-0.5));
        float _1155 = _1153 * (_1119.y + (-0.5));
        float _1156 = _1153 * (_1119.z + (-0.5));
        float _1163 = exp2((_1126.w + (-0.5)) * 20.0) * 2.0;
        float _1164 = _1163 * (_1126.x + (-0.5));
        float _1165 = _1163 * (_1126.y + (-0.5));
        float _1166 = _1163 * (_1126.z + (-0.5));
        float _1173 = exp2((_1133.w + (-0.5)) * 20.0) * 2.0;
        float _1174 = _1173 * (_1133.x + (-0.5));
        float _1175 = _1173 * (_1133.y + (-0.5));
        float _1176 = _1173 * (_1133.z + (-0.5));
        float _1183 = exp2((_1140.w + (-0.5)) * 20.0) * 2.0;
        float _1184 = _1183 * (_1140.x + (-0.5));
        float _1185 = _1183 * (_1140.y + (-0.5));
        float _1186 = _1183 * (_1140.z + (-0.5));
        float _1187 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1188 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1189 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1190 = _1154 * 0.5;
        float _1191 = _1164 * 0.5;
        float _1192 = _1174 * 0.5;
        float _1193 = dot(vec3(_1190, _1191, _1192), vec3(_1190, _1191, _1192));
        float _1198 = (_1193 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1193);
        float _1207 = (dot(vec3(_786, _787, _788), vec3(_1198 * _1190, _1198 * _1191, _1198 * _1192)) + 1.0) * 0.5;
        float _3888 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1217 = sqrt(((_1191 * _1191) + (_1190 * _1190)) + (_1192 * _1192)) / (_1187 + 9.9999997473787516355514526367188e-06);
        float _3899 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1218 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
        float _1219 = _1218 * 2.0;
        float _1223 = (1.0 - _1218) / (_1218 + 1.0);
        float _3910 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1224 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
        float _1233 = ((((1.0 - _1224) * (_1219 + 2.0)) * exp2(log2(isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0))) * (_1219 + 1.0))) + _1224) * _1187;
        float _1234 = _1155 * 0.5;
        float _1235 = _1165 * 0.5;
        float _1236 = _1175 * 0.5;
        float _1237 = dot(vec3(_1234, _1235, _1236), vec3(_1234, _1235, _1236));
        float _1242 = (_1237 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1237);
        float _1250 = (dot(vec3(_786, _787, _788), vec3(_1242 * _1234, _1242 * _1235, _1242 * _1236)) + 1.0) * 0.5;
        float _3921 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1259 = sqrt(((_1235 * _1235) + (_1234 * _1234)) + (_1236 * _1236)) / (_1188 + 9.9999997473787516355514526367188e-06);
        float _3932 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1260 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
        float _1261 = _1260 * 2.0;
        float _1265 = (1.0 - _1260) / (_1260 + 1.0);
        float _3943 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1266 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
        float _1275 = ((((1.0 - _1266) * (_1261 + 2.0)) * exp2(log2(isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0))) * (_1261 + 1.0))) + _1266) * _1188;
        float _1276 = _1156 * 0.5;
        float _1277 = _1166 * 0.5;
        float _1278 = _1176 * 0.5;
        float _1279 = dot(vec3(_1276, _1277, _1278), vec3(_1276, _1277, _1278));
        float _1284 = (_1279 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1279);
        float _1292 = (dot(vec3(_786, _787, _788), vec3(_1284 * _1276, _1284 * _1277, _1284 * _1278)) + 1.0) * 0.5;
        float _3954 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1301 = sqrt(((_1277 * _1277) + (_1276 * _1276)) + (_1278 * _1278)) / (_1189 + 9.9999997473787516355514526367188e-06);
        float _3965 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1302 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
        float _1303 = _1302 * 2.0;
        float _1307 = (1.0 - _1302) / (_1302 + 1.0);
        float _3976 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1308 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
        float _1317 = ((((1.0 - _1308) * (_1303 + 2.0)) * exp2(log2(isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0))) * (_1303 + 1.0))) + _1308) * _1189;
        _1325 = _1156;
        _1327 = _1155;
        _1328 = _1154;
        _1329 = _1166;
        _1330 = _1165;
        _1331 = _1164;
        _1332 = _1176;
        _1333 = _1175;
        _1334 = _1174;
        _1335 = _1189;
        _1336 = _1188;
        _1337 = _1187;
        _1338 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0)));
        _1339 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0)));
        _1340 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0)));
    }
    else
    {
        _1325 = _1326;
        _1327 = _1326;
        _1328 = _1326;
        _1329 = _1326;
        _1330 = _1326;
        _1331 = _1326;
        _1332 = _1326;
        _1333 = _1326;
        _1334 = _1326;
        _1335 = _1326;
        _1336 = _1326;
        _1337 = _1326;
        _1338 = 0.0;
        _1339 = 0.0;
        _1340 = 0.0;
    }
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    float _1641;
    float _1642;
    float _1643;
    float _1644;
    float _1645;
    float _1646;
    float _1647;
    float _1648;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1365 = fma(_1024, cbModelParam._m0[30u].z, fma(_1020, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1016));
        float _1369 = fma(_1024, cbModelParam._m0[31u].z, fma(_1020, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1016));
        float _1373 = fma(_1024, cbModelParam._m0[32u].z, fma(_1020, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1016));
        float _1396 = _1016 + _786;
        float _1397 = _1020 + _787;
        float _1398 = _1024 + _788;
        float _1408 = fma(_1398, cbModelParam._m0[30u].z, fma(_1397, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1396)) - _1365;
        float _1409 = fma(_1398, cbModelParam._m0[31u].z, fma(_1397, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1396)) - _1369;
        float _1410 = fma(_1398, cbModelParam._m0[32u].z, fma(_1397, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1396)) - _1373;
        float _1414 = inversesqrt(dot(vec3(_1408, _1409, _1410), vec3(_1408, _1409, _1410)));
        float _1427 = ((_1414 * _1408) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1365 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1428 = ((_1414 * _1409) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1369 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1429 = ((_1414 * _1410) / cbModelParam._m0[35u].z) + ((((((_1373 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1431 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1427, _1428, _1429), 0.0);
        vec4 _1438 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1427, _1428, _1429), 0.0);
        vec4 _1445 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1427, _1428, _1429), 0.0);
        vec4 _1452 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1427, _1428, _1429), 0.0);
        float _1464 = exp2((_1431.w + (-0.5)) * 20.0) * 2.0;
        float _1465 = _1464 * (_1431.x + (-0.5));
        float _1466 = _1464 * (_1431.y + (-0.5));
        float _1467 = _1464 * (_1431.z + (-0.5));
        float _1474 = exp2((_1438.w + (-0.5)) * 20.0) * 2.0;
        float _1475 = _1474 * (_1438.x + (-0.5));
        float _1476 = _1474 * (_1438.y + (-0.5));
        float _1477 = _1474 * (_1438.z + (-0.5));
        float _1484 = exp2((_1445.w + (-0.5)) * 20.0) * 2.0;
        float _1485 = _1484 * (_1445.x + (-0.5));
        float _1486 = _1484 * (_1445.y + (-0.5));
        float _1487 = _1484 * (_1445.z + (-0.5));
        float _1494 = exp2((_1452.w + (-0.5)) * 20.0) * 2.0;
        float _1495 = _1494 * (_1452.x + (-0.5));
        float _1496 = _1494 * (_1452.y + (-0.5));
        float _1497 = _1494 * (_1452.z + (-0.5));
        float _1498 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1499 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1500 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
        float _1501 = _1465 * 0.5;
        float _1502 = _1475 * 0.5;
        float _1503 = _1485 * 0.5;
        float _1504 = dot(vec3(_1501, _1502, _1503), vec3(_1501, _1502, _1503));
        float _1509 = (_1504 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1504);
        float _1517 = (dot(vec3(_786, _787, _788), vec3(_1509 * _1501, _1509 * _1502, _1509 * _1503)) + 1.0) * 0.5;
        float _4017 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
        float _1526 = sqrt(((_1502 * _1502) + (_1501 * _1501)) + (_1503 * _1503)) / (_1498 + 9.9999997473787516355514526367188e-06);
        float _4028 = isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0));
        float _1527 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
        float _1528 = _1527 * 2.0;
        float _1532 = (1.0 - _1527) / (_1527 + 1.0);
        float _4039 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1533 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
        float _1542 = ((((1.0 - _1533) * (_1528 + 2.0)) * exp2(log2(isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0))) * (_1528 + 1.0))) + _1533) * _1498;
        float _1543 = _1466 * 0.5;
        float _1544 = _1476 * 0.5;
        float _1545 = _1486 * 0.5;
        float _1546 = dot(vec3(_1543, _1544, _1545), vec3(_1543, _1544, _1545));
        float _1551 = (_1546 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1546);
        float _1559 = (dot(vec3(_786, _787, _788), vec3(_1551 * _1543, _1551 * _1544, _1551 * _1545)) + 1.0) * 0.5;
        float _4050 = isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0));
        float _1568 = sqrt(((_1544 * _1544) + (_1543 * _1543)) + (_1545 * _1545)) / (_1499 + 9.9999997473787516355514526367188e-06);
        float _4061 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
        float _1569 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
        float _1570 = _1569 * 2.0;
        float _1574 = (1.0 - _1569) / (_1569 + 1.0);
        float _4072 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
        float _1575 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
        float _1584 = ((((1.0 - _1575) * (_1570 + 2.0)) * exp2(log2(isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0))) * (_1570 + 1.0))) + _1575) * _1499;
        float _1585 = _1467 * 0.5;
        float _1586 = _1477 * 0.5;
        float _1587 = _1487 * 0.5;
        float _1588 = dot(vec3(_1585, _1586, _1587), vec3(_1585, _1586, _1587));
        float _1593 = (_1588 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1588);
        float _1601 = (dot(vec3(_786, _787, _788), vec3(_1593 * _1585, _1593 * _1586, _1593 * _1587)) + 1.0) * 0.5;
        float _4083 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1610 = sqrt(((_1586 * _1586) + (_1585 * _1585)) + (_1587 * _1587)) / (_1500 + 9.9999997473787516355514526367188e-06);
        float _4094 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
        float _1611 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
        float _1612 = _1611 * 2.0;
        float _1616 = (1.0 - _1611) / (_1611 + 1.0);
        float _4105 = isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0));
        float _1617 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
        float _1626 = ((((1.0 - _1617) * (_1612 + 2.0)) * exp2(log2(isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0))) * (_1612 + 1.0))) + _1617) * _1500;
        _1634 = _1467;
        _1635 = _1466;
        _1636 = _1465;
        _1637 = _1477;
        _1638 = _1476;
        _1639 = _1475;
        _1640 = _1487;
        _1641 = _1486;
        _1642 = _1485;
        _1643 = _1500;
        _1644 = _1499;
        _1645 = _1498;
        _1646 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0)));
        _1647 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0)));
        _1648 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0)));
    }
    else
    {
        _1634 = _1326;
        _1635 = _1326;
        _1636 = _1326;
        _1637 = _1326;
        _1638 = _1326;
        _1639 = _1326;
        _1640 = _1326;
        _1641 = _1326;
        _1642 = _1326;
        _1643 = _1326;
        _1644 = _1326;
        _1645 = _1326;
        _1646 = 0.0;
        _1647 = 0.0;
        _1648 = 0.0;
    }
    float _1658 = (cbModelParam._m0[1u].x * (_1646 - _1338)) + _1338;
    float _1659 = (cbModelParam._m0[1u].x * (_1647 - _1339)) + _1339;
    float _1660 = (cbModelParam._m0[1u].x * (_1648 - _1340)) + _1340;
    float _1681 = fma(_1660, cbSceneParam._m0[89u].z, fma(_1659, cbSceneParam._m0[89u].y, _1658 * cbSceneParam._m0[89u].x));
    float _1684 = fma(_1660, cbSceneParam._m0[90u].z, fma(_1659, cbSceneParam._m0[90u].y, _1658 * cbSceneParam._m0[90u].x));
    float _1687 = fma(_1660, cbSceneParam._m0[91u].z, fma(_1659, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1658));
    float _1702 = _960 * 0.5;
    float _1703 = _961 * 0.5;
    float _1704 = _962 * 0.5;
    float _1705 = dot(vec4(_1702, _1703, _1704, 1.0), vec4(_1636, _1639, _1642, _1645));
    float _1708 = dot(vec4(_1702, _1703, _1704, 1.0), vec4(_1635, _1638, _1641, _1644));
    float _1711 = dot(vec4(_1702, _1703, _1704, 1.0), vec4(_1634, _1637, _1640, _1643));
    float _1745;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1718 = dot(vec4(_1702, _1703, _1704, 1.0), vec4(_1325, _1329, _1332, _1335));
        float _1722 = dot(vec4(_1702, _1703, _1704, 1.0), vec4(_1327, _1330, _1333, _1336));
        float _1726 = dot(vec4(_1702, _1703, _1704, 1.0), vec4(_1328, _1331, _1334, _1337));
        float _1733 = dot(vec4(cbModelParam._m0[39u]), vec4(_1702, _1703, _1704, 1.0));
        _1745 = dot(vec3(isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0)), isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0)), isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1733) ? 0.0 : (isnan(0.0) ? _1733 : max(0.0, _1733))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1745 = 1.0;
    }
    float _1756;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1747 = dot(vec4(cbModelParam._m0[40u]), vec4(_1702, _1703, _1704, 1.0));
        _1756 = dot(vec3(isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0)), isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0)), isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1747) ? 0.0 : (isnan(0.0) ? _1747 : max(0.0, _1747))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1756 = 1.0;
    }
    float _1760 = (_1756 * cbModelParam._m0[1u].x) + (_1745 * (1.0 - cbModelParam._m0[1u].x));
    float _1770 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _789);
    float _1771 = isnan(_1770) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1770 : min(cbModelParam._m0[25u].z, _1770));
    float _1851;
    float _1853;
    float _1855;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1818 = fma(_1024, cbModelParam._m0[13u].z, fma(_1020, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1016)) + cbModelParam._m0[13u].w;
        float _1822 = fma(_1024, cbModelParam._m0[14u].z, fma(_1020, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1016)) + cbModelParam._m0[14u].w;
        float _1826 = fma(_1024, cbModelParam._m0[15u].z, fma(_1020, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1016)) + cbModelParam._m0[15u].w;
        float _1829 = fma(_962, cbModelParam._m0[13u].z, fma(_961, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _960));
        float _1832 = fma(_962, cbModelParam._m0[14u].z, fma(_961, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _960));
        float _1835 = fma(_962, cbModelParam._m0[15u].z, fma(_961, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _960));
        float _1863;
        if (_1829 > 0.0)
        {
            _1863 = abs((1.0 - _1818) / _1829);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1829 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1818 + 1.0) / _1829);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1863 = frontier_phi_14_12_ladder;
        }
        float _2086;
        if (_1832 > 0.0)
        {
            _2086 = abs((1.0 - _1822) / _1832);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1832 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1822 + 1.0) / _1832);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2086 = frontier_phi_23_19_ladder;
        }
        float _2343;
        if (_1835 > 0.0)
        {
            _2343 = abs((1.0 - _1826) / _1835);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1835 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1826 + 1.0) / _1835);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2343 = frontier_phi_35_30_ladder;
        }
        float _2345 = isnan(_2086) ? _1863 : (isnan(_1863) ? _2086 : min(_1863, _2086));
        float _2346 = isnan(_2343) ? _2345 : (isnan(_2345) ? _2343 : min(_2345, _2343));
        float _2350 = (_2346 * _1829) + _1818;
        float _2351 = (_2346 * _1832) + _1822;
        float _2352 = (_2346 * _1835) + _1826;
        float _2353 = _2346 * 9.9999997473787516355514526367188e-05;
        float _2355 = (-1.0) - _2353;
        float _2357 = _2353 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2352 > _2357) || ((_2352 < _2355) || ((_2351 > _2357) || ((_2351 < _2355) || ((_2350 < _2355) || (_2350 > _2357))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2480 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2352, cbModelParam._m0[9u].z, fma(_2351, cbModelParam._m0[9u].y, _2350 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2352, cbModelParam._m0[10u].z, fma(_2351, cbModelParam._m0[10u].y, _2350 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2352, cbModelParam._m0[11u].z, fma(_2351, cbModelParam._m0[11u].y, _2350 * cbModelParam._m0[11u].x))), _1771);
            frontier_phi_13_35_ladder = _2480.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2480.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2480.x * cbModelParam._m0[1u].y;
        }
        _1851 = frontier_phi_13_35_ladder_2;
        _1853 = frontier_phi_13_35_ladder_1;
        _1855 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1839 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_960, _961, _962), _1771);
        _1851 = _1839.x * cbModelParam._m0[1u].y;
        _1853 = _1839.y * cbModelParam._m0[1u].y;
        _1855 = _1839.z * cbModelParam._m0[1u].y;
    }
    float _1859 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _789);
    float _1860 = isnan(_1859) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1859 : min(cbModelParam._m0[25u].w, _1859));
    float _1949;
    float _1951;
    float _1953;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1913 = fma(_1024, cbModelParam._m0[21u].z, fma(_1020, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1016)) + cbModelParam._m0[21u].w;
        float _1917 = fma(_1024, cbModelParam._m0[22u].z, fma(_1020, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1016)) + cbModelParam._m0[22u].w;
        float _1921 = fma(_1024, cbModelParam._m0[23u].z, fma(_1020, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1016)) + cbModelParam._m0[23u].w;
        float _1924 = fma(_962, cbModelParam._m0[21u].z, fma(_961, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _960));
        float _1927 = fma(_962, cbModelParam._m0[22u].z, fma(_961, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _960));
        float _1930 = fma(_962, cbModelParam._m0[23u].z, fma(_961, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _960));
        float _2091;
        if (_1924 > 0.0)
        {
            _2091 = abs((1.0 - _1913) / _1924);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1924 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1913 + 1.0) / _1924);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2091 = frontier_phi_25_21_ladder;
        }
        float _2370;
        if (_1927 > 0.0)
        {
            _2370 = abs((1.0 - _1917) / _1927);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1927 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1917 + 1.0) / _1927);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2370 = frontier_phi_37_32_ladder;
        }
        float _2583;
        if (_1930 > 0.0)
        {
            _2583 = abs((1.0 - _1921) / _1930);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1930 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1921 + 1.0) / _1930);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2583 = frontier_phi_46_43_ladder;
        }
        float _2585 = isnan(_2370) ? _2091 : (isnan(_2091) ? _2370 : min(_2091, _2370));
        float _2586 = isnan(_2583) ? _2585 : (isnan(_2585) ? _2583 : min(_2585, _2583));
        float _2590 = (_2586 * _1924) + _1913;
        float _2591 = (_2586 * _1927) + _1917;
        float _2592 = (_2586 * _1930) + _1921;
        float _2593 = _2586 * 9.9999997473787516355514526367188e-05;
        float _2594 = (-1.0) - _2593;
        float _2596 = _2593 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2592 > _2596) || ((_2592 < _2594) || ((_2591 > _2596) || ((_2591 < _2594) || ((_2590 < _2594) || (_2590 > _2596))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2791 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2592, cbModelParam._m0[17u].z, fma(_2591, cbModelParam._m0[17u].y, _2590 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2592, cbModelParam._m0[18u].z, fma(_2591, cbModelParam._m0[18u].y, _2590 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2592, cbModelParam._m0[19u].z, fma(_2591, cbModelParam._m0[19u].y, _2590 * cbModelParam._m0[19u].x))), _1860);
            frontier_phi_22_46_ladder = _2791.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2791.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2791.x * cbModelParam._m0[1u].z;
        }
        _1949 = frontier_phi_22_46_ladder_2;
        _1951 = frontier_phi_22_46_ladder_1;
        _1953 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1933 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_960, _961, _962), _1860);
        _1949 = _1933.x * cbModelParam._m0[1u].z;
        _1951 = _1933.y * cbModelParam._m0[1u].z;
        _1953 = _1933.z * cbModelParam._m0[1u].z;
    }
    float _1966 = (((_987 * _936) + _988) * _952) * ((cbModelParam._m0[1u].w * (_1949 - _1851)) + _1851);
    float _1968 = (((_987 * _938) + _988) * _952) * ((cbModelParam._m0[1u].w * (_1951 - _1853)) + _1853);
    float _1970 = (((_987 * _939) + _988) * _952) * ((cbModelParam._m0[1u].w * (_1953 - _1855)) + _1855);
    float _1973 = fma(_1970, cbSceneParam._m0[89u].z, fma(_1968, cbSceneParam._m0[89u].y, _1966 * cbSceneParam._m0[89u].x));
    float _1976 = fma(_1970, cbSceneParam._m0[90u].z, fma(_1968, cbSceneParam._m0[90u].y, _1966 * cbSceneParam._m0[90u].x));
    float _1979 = fma(_1970, cbSceneParam._m0[91u].z, fma(_1968, cbSceneParam._m0[91u].y, _1966 * cbSceneParam._m0[91u].x));
    vec4 _1987 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_874, _875));
    float _1989 = _1987.w;
    float _2001 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1989);
    float _2002 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1989);
    float _2003 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1989);
    uvec4 _2007 = floatBitsToUint(cbInstanceData._m0[_270 + 5u]);
    uint _2009 = _2007.x * 14u;
    uint _2010 = _2009 + 13u;
    float _2017 = _952 + (-1.0);
    float _2022 = (cbLight._m0[_2010].x * _2017) + 1.0;
    float _2023 = (cbLight._m0[_2010].y * _2017) + 1.0;
    float _2024 = (cbLight._m0[_2010].z * _2017) + 1.0;
    float _2025 = (cbLight._m0[_2010].w * _2017) + 1.0;
    uint _2026 = _2009 + 5u;
    float _2032 = isnan(1.0) ? _2023 : (isnan(_2023) ? 1.0 : min(_2023, 1.0));
    uint _2036 = _2009 + 4u;
    float _2045 = isnan(1.0) ? _2022 : (isnan(_2022) ? 1.0 : min(_2022, 1.0));
    uint _2049 = _2009 | 1u;
    float _2060 = dot(vec3(cbLight._m0[_2009].xyz), vec3(_786, _787, _788));
    float _2063 = dot(vec3(cbLight._m0[_2049].xyz), vec3(_786, _787, _788));
    float _4241 = isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0));
    float _4252 = isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0));
    float _2068 = (isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0))) * 0.3183098733425140380859375;
    float _2070 = (isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0))) * 0.3183098733425140380859375;
    float _2077 = ((cbLight._m0[_2026].x * _2032) * _2070) + (((cbLight._m0[_2036].x * _2001) * _2045) * _2068);
    float _2078 = ((_2032 * cbLight._m0[_2026].y) * _2070) + (((cbLight._m0[_2036].y * _2002) * _2045) * _2068);
    float _2079 = ((_2032 * cbLight._m0[_2026].z) * _2070) + (((cbLight._m0[_2036].z * _2003) * _2045) * _2068);
    uvec4 _2083 = floatBitsToUint(cbLight._m0[_2009 + 12u]);
    bool _2085 = _2083.x == 0u;
    float _2096;
    float _2098;
    float _2100;
    if (_2085)
    {
        _2096 = _2077;
        _2098 = _2078;
        _2100 = _2079;
    }
    else
    {
        uint _2104 = _2009 + 6u;
        float _2120 = (dot(vec3(cbLight._m0[_2009 + 2u].xyz), vec3(_786, _787, _788)) * 0.5) + 0.5;
        float _2121 = _2120 * _2120;
        float _4263 = isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0));
        float _2122 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
        float _2123 = isnan(1.0) ? _2024 : (isnan(_2024) ? 1.0 : min(_2024, 1.0));
        _2096 = (((cbLight._m0[_2104].x * 0.3183098733425140380859375) * _2122) * _2123) + _2077;
        _2098 = (((cbLight._m0[_2104].y * 0.3183098733425140380859375) * _2122) * _2123) + _2078;
        _2100 = (((cbLight._m0[_2104].z * 0.3183098733425140380859375) * _2122) * _2123) + _2079;
    }
    bool _2103 = _2083.y == 0u;
    float _2141;
    float _2143;
    float _2145;
    if (_2103)
    {
        _2141 = _2096;
        _2143 = _2098;
        _2145 = _2100;
    }
    else
    {
        uint _2314 = _2009 + 7u;
        float _2330 = (dot(vec3(cbLight._m0[_2009 + 3u].xyz), vec3(_786, _787, _788)) * 0.5) + 0.5;
        float _2331 = _2330 * _2330;
        float _4279 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
        float _2332 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
        float _2333 = isnan(1.0) ? _2025 : (isnan(_2025) ? 1.0 : min(_2025, 1.0));
        _2141 = (((cbLight._m0[_2314].x * 0.3183098733425140380859375) * _2332) * _2333) + _2096;
        _2143 = (((cbLight._m0[_2314].y * 0.3183098733425140380859375) * _2332) * _2333) + _2098;
        _2145 = (((cbLight._m0[_2314].z * 0.3183098733425140380859375) * _2332) * _2333) + _2100;
    }
    uint _2148 = _2009 + 8u;
    float _2161 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2009].w)) * _789) * 0.949999988079071044921875);
    float _2162 = _2161 * _2161;
    float _2163 = cbLight._m0[_2009].x + _866;
    float _2164 = cbLight._m0[_2009].y + _867;
    float _2165 = cbLight._m0[_2009].z + _868;
    float _2169 = inversesqrt(dot(vec3(_2163, _2164, _2165), vec3(_2163, _2164, _2165)));
    float _2170 = _2169 * _2163;
    float _2171 = _2169 * _2164;
    float _2172 = _2169 * _2165;
    float _2173 = dot(vec3(_786, _787, _788), vec3(cbLight._m0[_2009].xyz));
    float _4295 = isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0));
    float _2176 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
    float _4306 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
    float _2177 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
    float _2178 = dot(vec3(_786, _787, _788), vec3(_2170, _2171, _2172));
    float _4317 = isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : max(_2178, 0.0));
    float _2181 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
    float _2182 = dot(vec3(cbLight._m0[_2009].xyz), vec3(_2170, _2171, _2172));
    float _4328 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
    float _2186 = _2162 * _2162;
    float _2190 = ((_2181 * _2181) * (_2186 + (-1.0))) + 1.0;
    float _2198 = exp2(log2(1.0 - (isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0)))) * 5.0);
    float _2199 = 0.959999978542327880859375 - _933;
    float _2201 = 0.959999978542327880859375 - _934;
    float _2202 = 0.959999978542327880859375 - _935;
    float _2209 = 1.0 - _2162;
    float _2220 = (0.5 / (((_2177 * ((_2176 * _2209) + _2162)) + 9.9999999392252902907785028219223e-09) + (((_2177 * _2209) + _2162) * _2176))) * _2176;
    float _4339 = isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0));
    float _2222 = (isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0))) * (_2186 / ((_2190 * _2190) * 3.141590118408203125));
    uint _2236 = _2009 + 9u;
    float _2247 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2049].w)) * _789) * 0.949999988079071044921875);
    float _2248 = _2247 * _2247;
    float _2249 = cbLight._m0[_2049].x + _866;
    float _2250 = cbLight._m0[_2049].y + _867;
    float _2251 = cbLight._m0[_2049].z + _868;
    float _2255 = inversesqrt(dot(vec3(_2249, _2250, _2251), vec3(_2249, _2250, _2251)));
    float _2256 = _2255 * _2249;
    float _2257 = _2255 * _2250;
    float _2258 = _2255 * _2251;
    float _2259 = dot(vec3(_786, _787, _788), vec3(cbLight._m0[_2049].xyz));
    float _4350 = isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0));
    float _2262 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
    float _2263 = dot(vec3(_786, _787, _788), vec3(_2256, _2257, _2258));
    float _4361 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0));
    float _2266 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
    float _2267 = dot(vec3(cbLight._m0[_2049].xyz), vec3(_2256, _2257, _2258));
    float _4372 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0));
    float _2271 = _2248 * _2248;
    float _2275 = ((_2266 * _2266) * (_2271 + (-1.0))) + 1.0;
    float _2282 = exp2(log2(1.0 - (isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0)))) * 5.0);
    float _2289 = 1.0 - _2248;
    float _2299 = (0.5 / (((_2177 * ((_2262 * _2289) + _2248)) + 9.9999999392252902907785028219223e-09) + (((_2177 * _2289) + _2248) * _2262))) * _2262;
    float _4383 = isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0));
    float _2301 = (isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0))) * (_2271 / ((_2275 * _2275) * 3.141590118408203125));
    float _2311 = (((((_2282 * _2199) + _936) * cbLight._m0[_2236].x) * _2301) * _2032) + ((((cbLight._m0[_2148].x * _2001) * ((_2198 * _2199) + _936)) * _2222) * _2045);
    float _2312 = (((((_2282 * _2201) + _938) * cbLight._m0[_2236].y) * _2301) * _2032) + ((((cbLight._m0[_2148].y * _2002) * ((_2198 * _2201) + _938)) * _2222) * _2045);
    float _2313 = (((((_2282 * _2202) + _939) * cbLight._m0[_2236].z) * _2301) * _2032) + ((((cbLight._m0[_2148].z * _2003) * ((_2198 * _2202) + _939)) * _2222) * _2045);
    float _2375;
    float _2377;
    float _2379;
    if (_2085)
    {
        _2375 = _2311;
        _2377 = _2312;
        _2379 = _2313;
    }
    else
    {
        uint _2381 = _2009 + 2u;
        uint _2385 = _2009 + 10u;
        float _2399 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2381].w)) * _789) * 0.949999988079071044921875);
        float _2400 = _2399 * _2399;
        float _2401 = cbLight._m0[_2381].x + _866;
        float _2402 = cbLight._m0[_2381].y + _867;
        float _2403 = cbLight._m0[_2381].z + _868;
        float _2407 = inversesqrt(dot(vec3(_2401, _2402, _2403), vec3(_2401, _2402, _2403)));
        float _2408 = _2407 * _2401;
        float _2409 = _2407 * _2402;
        float _2410 = _2407 * _2403;
        float _2411 = dot(vec3(_786, _787, _788), vec3(cbLight._m0[_2381].xyz));
        float _4394 = isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0));
        float _2414 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
        float _2415 = dot(vec3(_786, _787, _788), vec3(_2408, _2409, _2410));
        float _4405 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0));
        float _2418 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
        float _2419 = dot(vec3(cbLight._m0[_2381].xyz), vec3(_2408, _2409, _2410));
        float _4416 = isnan(0.0) ? _2419 : (isnan(_2419) ? 0.0 : max(_2419, 0.0));
        float _2423 = _2400 * _2400;
        float _2427 = ((_2418 * _2418) * (_2423 + (-1.0))) + 1.0;
        float _2434 = exp2(log2(1.0 - (isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0)))) * 5.0);
        float _2441 = 1.0 - _2400;
        float _2451 = (0.5 / (((_2177 * ((_2414 * _2441) + _2400)) + 9.9999999392252902907785028219223e-09) + (((_2177 * _2441) + _2400) * _2414))) * _2414;
        float _4427 = isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : max(_2451, 0.0));
        float _2453 = (isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0))) * (_2423 / ((_2427 * _2427) * 3.141590118408203125));
        float _2454 = isnan(1.0) ? _2024 : (isnan(_2024) ? 1.0 : min(_2024, 1.0));
        _2375 = (((((_2434 * _2199) + _936) * cbLight._m0[_2385].x) * _2453) * _2454) + _2311;
        _2377 = (((((_2434 * _2201) + _938) * cbLight._m0[_2385].y) * _2453) * _2454) + _2312;
        _2379 = (((((_2434 * _2202) + _939) * cbLight._m0[_2385].z) * _2453) * _2454) + _2313;
    }
    float _2489;
    float _2491;
    float _2493;
    if (_2103)
    {
        _2489 = _2375;
        _2491 = _2377;
        _2493 = _2379;
    }
    else
    {
        uint _2500 = _2009 + 3u;
        uint _2504 = _2009 + 11u;
        float _2518 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2500].w)) * _789) * 0.949999988079071044921875);
        float _2519 = _2518 * _2518;
        float _2520 = cbLight._m0[_2500].x + _866;
        float _2521 = cbLight._m0[_2500].y + _867;
        float _2522 = cbLight._m0[_2500].z + _868;
        float _2526 = inversesqrt(dot(vec3(_2520, _2521, _2522), vec3(_2520, _2521, _2522)));
        float _2527 = _2526 * _2520;
        float _2528 = _2526 * _2521;
        float _2529 = _2526 * _2522;
        float _2530 = dot(vec3(_786, _787, _788), vec3(cbLight._m0[_2500].xyz));
        float _4443 = isnan(0.0) ? _2530 : (isnan(_2530) ? 0.0 : max(_2530, 0.0));
        float _2533 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
        float _2534 = dot(vec3(_786, _787, _788), vec3(_2527, _2528, _2529));
        float _4454 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
        float _2537 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
        float _2538 = dot(vec3(cbLight._m0[_2500].xyz), vec3(_2527, _2528, _2529));
        float _4465 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0));
        float _2542 = _2519 * _2519;
        float _2546 = ((_2537 * _2537) * (_2542 + (-1.0))) + 1.0;
        float _2553 = exp2(log2(1.0 - (isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0)))) * 5.0);
        float _2560 = 1.0 - _2519;
        float _2570 = (0.5 / (((_2177 * ((_2533 * _2560) + _2519)) + 9.9999999392252902907785028219223e-09) + (((_2177 * _2560) + _2519) * _2533))) * _2533;
        float _4476 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
        float _2572 = (isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0))) * (_2542 / ((_2546 * _2546) * 3.141590118408203125));
        float _2573 = isnan(1.0) ? _2025 : (isnan(_2025) ? 1.0 : min(_2025, 1.0));
        _2489 = (((((_2553 * _2199) + _936) * cbLight._m0[_2504].x) * _2572) * _2573) + _2375;
        _2491 = (((((_2553 * _2201) + _938) * cbLight._m0[_2504].y) * _2572) * _2573) + _2377;
        _2493 = (((((_2553 * _2202) + _939) * cbLight._m0[_2504].z) * _2572) * _2573) + _2379;
    }
    float _2708;
    float _2710;
    float _2712;
    float _2714;
    float _2716;
    float _2718;
    if (_2007.y == 0u)
    {
        float _2648 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2649 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2648;
        float _2650 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2648;
        float _2651 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2648;
        uvec4 _2663 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2664 = _2663.x;
        uint _2675 = uint((float(_2663.y) * floor(float(uint(cbSceneParam._m0[85u].y * _875) / _2664))) + floor(float(uint(cbSceneParam._m0[85u].x * _874) / _2664)));
        float _2685 = (log2(_2651 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2686 = isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : max(_2685, 0.0));
        uint _2689 = uint(isnan(14.0) ? _2686 : (isnan(_2686) ? 14.0 : min(_2686, 14.0)));
        uvec4 _2694 = texelFetch(g_lightClusterGridBuffer, int(((_2689 << 2u) + (_2675 << 6u)) >> 2u));
        uint _2695 = _2694.x;
        uint _2696 = _2663.z;
        float _2796;
        float _2798;
        float _2800;
        float _2802;
        float _2804;
        float _2806;
        if (((((1u << ((_2696 >> 4u) & 15u)) + 4294967295u) & _2695) == 0u) || ((_2696 & 240u) == 0u))
        {
            _2796 = 0.0;
            _2798 = 0.0;
            _2800 = 0.0;
            _2802 = 0.0;
            _2804 = 0.0;
            _2806 = 0.0;
        }
        else
        {
            float _2797;
            float _2799;
            float _2801;
            float _2803;
            float _2805;
            float _2807;
            float _2941 = 0.0;
            float _2942 = 0.0;
            float _2943 = 0.0;
            float _2944 = 0.0;
            float _2945 = 0.0;
            float _2946 = 0.0;
            uint _2947 = 0u;
            uint _2956;
            bool _2957;
            for (;;)
            {
                _2956 = texelFetch(g_lightClassification, int((((_2689 << 5u) + (_2675 << 9u)) + (_2947 << 2u)) >> 2u)).x;
                _2957 = _2956 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2957)
                {
                    frontier_phi_61_pred = _2941;
                    frontier_phi_61_pred_1 = _2946;
                    frontier_phi_61_pred_2 = _2945;
                    frontier_phi_61_pred_3 = _2944;
                    frontier_phi_61_pred_4 = _2943;
                    frontier_phi_61_pred_5 = _2942;
                }
                else
                {
                    float _3065;
                    float _3066;
                    float _3067;
                    float _3068;
                    float _3069;
                    float _3070;
                    uint _3071;
                    _3065 = _2941;
                    _3066 = _2942;
                    _3067 = _2943;
                    _3068 = _2944;
                    _3069 = _2945;
                    _3070 = _2946;
                    _3071 = _2956;
                    float _2997;
                    float _2998;
                    float _2999;
                    float _3000;
                    float _3001;
                    float _3002;
                    for (;;)
                    {
                        uint _3075 = uint(findLSB(_3071)) + (_2947 << 5u);
                        uint _3072 = (_3071 + 4294967295u) & _3071;
                        uint _3077 = _3075 * 48u;
                        vec4 _3091 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3077)).x, texelFetch(g_PointLightRenderingBuffer, int(_3077 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3077 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3077 + 3u)).x));
                        uint _3097 = (_3075 * 48u) + 4u;
                        vec4 _3110 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3097)).x, texelFetch(g_PointLightRenderingBuffer, int(_3097 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3097 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3097 + 3u)).x));
                        uint _3116 = (_3075 * 48u) + 8u;
                        vec3 _3127 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3116)).x, texelFetch(g_PointLightRenderingBuffer, int(_3116 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3116 + 2u)).x));
                        float _3131 = _3091.x - _2649;
                        float _3132 = _3091.y - _2650;
                        float _3133 = _3091.z - _2651;
                        float _3134 = dot(vec3(_3131, _3132, _3133), vec3(_3131, _3132, _3133));
                        float _3137 = inversesqrt(_3134);
                        float _3138 = _3137 * _3131;
                        float _3139 = _3137 * _3132;
                        float _3140 = _3137 * _3133;
                        float _3141 = dot(vec3(_893, _896, _899), vec3(_3138, _3139, _3140));
                        float _3146 = 1.0 - (_3134 * _3091.w);
                        float _4502 = isnan(0.0) ? _3146 : (isnan(_3146) ? 0.0 : max(_3146, 0.0));
                        float _3147 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
                        float _3148 = sqrt(_3134) * _3110.w;
                        float _3151 = 1.39999997615814208984375 / (_3148 + 1.39999997615814208984375);
                        float _3152 = _3151 * _3151;
                        float _3155 = ((1.0 - _3152) * _3141) + _3152;
                        float _3158 = _3148 * _3148;
                        float _3162 = ((isnan(0.0) ? _3155 : (isnan(_3155) ? 0.0 : max(_3155, 0.0))) * _3147) / ((_3158 * 0.699999988079071044921875) + 1.0);
                        float _3166 = (-0.0) - _2649;
                        float _3167 = (-0.0) - _2650;
                        float _3168 = (-0.0) - _2651;
                        float _3172 = inversesqrt(dot(vec3(_3166, _3167, _3168), vec3(_3166, _3167, _3168)));
                        float _3173 = _3172 * _3166;
                        float _3174 = _3172 * _3167;
                        float _3175 = _3172 * _3168;
                        float _3183 = exp2(log2(1.0 / ((_3158 * 3.5) + 5.0)) * 0.25);
                        float _3184 = 1.0 - _968;
                        float _3191 = sqrt(1.0 - ((1.0 - (_3184 * _3184)) * (1.0 - (_3183 * _3183))));
                        float _3192 = _3191 * _3191;
                        float _3193 = _3192 * _3192;
                        float _3194 = _3173 + _3138;
                        float _3195 = _3174 + _3139;
                        float _3196 = _3175 + _3140;
                        float _3200 = inversesqrt(dot(vec3(_3194, _3195, _3196), vec3(_3194, _3195, _3196)));
                        float _3204 = dot(vec3(_893, _896, _899), vec3(_3173, _3174, _3175));
                        float _4518 = isnan(0.0) ? _3204 : (isnan(_3204) ? 0.0 : max(_3204, 0.0));
                        float _3207 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
                        float _3208 = dot(vec3(_893, _896, _899), vec3(_3200 * _3194, _3200 * _3195, _3200 * _3196));
                        float _4529 = isnan(0.0) ? _3208 : (isnan(_3208) ? 0.0 : max(_3208, 0.0));
                        float _3211 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
                        float _3215 = ((_3211 * _3211) * (_3193 + (-1.0))) + 1.0;
                        float _3216 = _3151 * _3192;
                        float _3217 = _3216 * _3216;
                        float _3220 = ((1.0 - _3217) * _3141) + _3217;
                        float _4540 = isnan(0.0) ? _3220 : (isnan(_3220) ? 0.0 : max(_3220, 0.0));
                        float _3221 = isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0));
                        float _3222 = 1.0 - _3192;
                        float _3232 = (0.5 / (((_3221 * ((_3207 * _3222) + _3192)) + 9.9999999392252902907785028219223e-09) + (((_3221 * _3222) + _3192) * _3207))) * _3221;
                        float _4551 = isnan(0.0) ? _3232 : (isnan(_3232) ? 0.0 : max(_3232, 0.0));
                        float _3243 = (((_3193 * 3.1415927410125732421875) * (isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0)))) / ((_3215 * _3215) * ((_3158 * 2.1991131305694580078125) + 3.141590118408203125))) * _3147;
                        _3000 = (_3162 * _3110.x) + _3068;
                        _3001 = (_3162 * _3110.y) + _3069;
                        _3002 = (_3162 * _3110.z) + _3070;
                        _2997 = (_3243 * _3127.x) + _3065;
                        _2998 = (_3243 * _3127.y) + _3066;
                        _2999 = (_3243 * _3127.z) + _3067;
                        if (_3072 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3065 = _2997;
                            _3066 = _2998;
                            _3067 = _2999;
                            _3068 = _3000;
                            _3069 = _3001;
                            _3070 = _3002;
                            _3071 = _3072;
                        }
                    }
                    frontier_phi_61_pred = _2997;
                    frontier_phi_61_pred_1 = _3002;
                    frontier_phi_61_pred_2 = _3001;
                    frontier_phi_61_pred_3 = _3000;
                    frontier_phi_61_pred_4 = _2999;
                    frontier_phi_61_pred_5 = _2998;
                }
                _2797 = frontier_phi_61_pred;
                _2807 = frontier_phi_61_pred_1;
                _2805 = frontier_phi_61_pred_2;
                _2803 = frontier_phi_61_pred_3;
                _2801 = frontier_phi_61_pred_4;
                _2799 = frontier_phi_61_pred_5;
                uint _2948 = _2947 + 1u;
                if (_2948 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2941 = _2797;
                    _2942 = _2799;
                    _2943 = _2801;
                    _2944 = _2803;
                    _2945 = _2805;
                    _2946 = _2807;
                    _2947 = _2948;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2796 = _2797;
            _2798 = _2799;
            _2800 = _2801;
            _2802 = _2803;
            _2804 = _2805;
            _2806 = _2807;
        }
        uvec4 _2810 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2811 = _2810.z;
        uint _2813 = (_2811 >> 8u) & 15u;
        float _2909;
        float _2911;
        float _2913;
        float _2915;
        float _2917;
        float _2919;
        if (((4294967295u << _2813) & _2695) == 0u)
        {
            _2909 = _2796;
            _2911 = _2798;
            _2913 = _2800;
            _2915 = _2802;
            _2917 = _2804;
            _2919 = _2806;
        }
        else
        {
            float _2934 = inversesqrt(dot(vec3(_2649, _2650, _2651), vec3(_2649, _2650, _2651)));
            float _2935 = _2934 * _2649;
            float _2936 = _2934 * _2650;
            float _2937 = _2934 * _2651;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2813 < ((_2811 >> 12u) & 15u))
            {
                float _2910;
                float _2912;
                float _2914;
                float _2916;
                float _2918;
                float _2920;
                float _3048 = _2796;
                float _3049 = _2798;
                float _3050 = _2800;
                float _3051 = _2802;
                float _3052 = _2804;
                float _3053 = _2806;
                uint _3054 = _2813;
                uint _3063;
                bool _3064;
                for (;;)
                {
                    _3063 = texelFetch(g_lightClassification, int((((_2689 << 5u) + (_2675 << 9u)) + (_3054 << 2u)) >> 2u)).x;
                    _3064 = _3063 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3064)
                    {
                        frontier_phi_67_pred = _3051;
                        frontier_phi_67_pred_1 = _3052;
                        frontier_phi_67_pred_2 = _3053;
                        frontier_phi_67_pred_3 = _3050;
                        frontier_phi_67_pred_4 = _3049;
                        frontier_phi_67_pred_5 = _3048;
                    }
                    else
                    {
                        float _3248;
                        float _3249;
                        float _3250;
                        float _3251;
                        float _3252;
                        float _3253;
                        float _3541;
                        float _3542;
                        float _3543;
                        float _3544;
                        float _3545;
                        float _3546;
                        float _3261 = _3048;
                        float _3262 = _3049;
                        float _3263 = _3050;
                        float _3264 = _3051;
                        float _3265 = _3052;
                        float _3266 = _3053;
                        uint _3267 = _3063;
                        uint _3268;
                        vec4 _3293;
                        float _3294;
                        vec4 _3309;
                        vec3 _3321;
                        vec4 _3336;
                        vec4 _3351;
                        float _3397;
                        bool _3398;
                        for (;;)
                        {
                            uint _3278 = ((_3054 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3267));
                            _3268 = (_3267 + 4294967295u) & _3267;
                            uint _3280 = _3278 * 40u;
                            _3293 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3280)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 3u)).x));
                            _3294 = _3293.w;
                            uint _3296 = (_3278 * 40u) + 4u;
                            _3309 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3296)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3296 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3296 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3296 + 3u)).x));
                            uint _3311 = (_3278 * 40u) + 8u;
                            _3321 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3311)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 2u)).x));
                            uint _3323 = (_3278 * 40u) + 16u;
                            _3336 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3323)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 3u)).x));
                            uint _3338 = (_3278 * 40u) + 20u;
                            _3351 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3338)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 3u)).x));
                            uint _3353 = (_3278 * 40u) + 24u;
                            vec4 _3366 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3353)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 3u)).x));
                            uint _3372 = (_3278 * 40u) + 28u;
                            vec4 _3385 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3372)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3372 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3372 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3372 + 3u)).x));
                            _3397 = fma(_2651, _3385.z, fma(_2650, _3385.y, _3385.x * _2649)) + _3385.w;
                            _3398 = !((fma(_2651, _3366.z, fma(_2650, _3366.y, _3366.x * _2649)) + _3366.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3398)
                            {
                                float _3425 = _3293.x - _2649;
                                float _3426 = _3293.y - _2650;
                                float _3427 = _3293.z - _2651;
                                float _3428 = dot(vec3(_3425, _3426, _3427), vec3(_3425, _3426, _3427));
                                float _3431 = inversesqrt(_3428);
                                float _3432 = _3431 * _3425;
                                float _3433 = _3431 * _3426;
                                float _3434 = _3431 * _3427;
                                float _3438 = 1.0 - (_3428 / (_3294 * _3294));
                                float _4562 = isnan(0.0) ? _3438 : (isnan(_3438) ? 0.0 : max(_3438, 0.0));
                                float _3439 = isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0));
                                float _3443 = sqrt(_3428) * _3309.w;
                                float _3445 = 1.39999997615814208984375 / (_3443 + 1.39999997615814208984375);
                                float _3446 = _3445 * _3445;
                                float _3449 = ((1.0 - _3446) * dot(vec3(_3432, _3433, _3434), vec3(_893, _896, _899))) + _3446;
                                float _3452 = _3443 * _3443;
                                float _3456 = (fma(_2651, _3336.z, fma(_2650, _3336.y, _3336.x * _2649)) + _3336.w) / _3397;
                                float _3457 = (fma(_2651, _3351.z, fma(_2650, _3351.y, _3351.x * _2649)) + _3351.w) / _3397;
                                float _3461 = 1.0 - dot(vec2(_3456, _3457), vec2(_3456, _3457));
                                float _4578 = isnan(0.0) ? _3461 : (isnan(_3461) ? 0.0 : max(_3461, 0.0));
                                float _3462 = isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0));
                                float _3463 = _3462 * (((isnan(0.0) ? _3449 : (isnan(_3449) ? 0.0 : max(_3449, 0.0))) * _3439) / ((_3452 * 0.699999988079071044921875) + 1.0));
                                float _3475 = exp2(log2(1.0 / ((_3452 * 3.5) + 5.0)) * 0.25);
                                float _3476 = 1.0 - _968;
                                float _3483 = sqrt(1.0 - ((1.0 - (_3476 * _3476)) * (1.0 - (_3475 * _3475))));
                                float _3484 = _3483 * _3483;
                                float _3485 = _3484 * _3484;
                                float _3486 = _3432 - _2935;
                                float _3487 = _3433 - _2936;
                                float _3488 = _3434 - _2937;
                                float _3492 = inversesqrt(dot(vec3(_3486, _3487, _3488), vec3(_3486, _3487, _3488)));
                                float _3496 = dot(vec3(_893, _896, _899), vec3((-0.0) - _2935, (-0.0) - _2936, (-0.0) - _2937));
                                float _4589 = isnan(0.0) ? _3496 : (isnan(_3496) ? 0.0 : max(_3496, 0.0));
                                float _3499 = isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0));
                                float _3500 = dot(vec3(_893, _896, _899), vec3(_3492 * _3486, _3492 * _3487, _3492 * _3488));
                                float _4600 = isnan(0.0) ? _3500 : (isnan(_3500) ? 0.0 : max(_3500, 0.0));
                                float _3503 = isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0));
                                float _3507 = ((_3503 * _3503) * (_3485 + (-1.0))) + 1.0;
                                float _3508 = _3445 * _3484;
                                float _3509 = _3508 * _3508;
                                float _3515 = ((1.0 - _3509) * dot(vec3(_893, _896, _899), vec3(_3432, _3433, _3434))) + _3509;
                                float _4611 = isnan(0.0) ? _3515 : (isnan(_3515) ? 0.0 : max(_3515, 0.0));
                                float _3516 = isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0));
                                float _3517 = 1.0 - _3484;
                                float _3527 = (0.5 / (((_3516 * ((_3499 * _3517) + _3484)) + 9.9999999392252902907785028219223e-09) + (((_3516 * _3517) + _3484) * _3499))) * _3516;
                                float _4622 = isnan(0.0) ? _3527 : (isnan(_3527) ? 0.0 : max(_3527, 0.0));
                                float _3537 = (_3462 * _3439) * (((_3485 * 3.1415927410125732421875) * (isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0)))) / ((_3507 * _3507) * ((_3452 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3537 * _3321.x;
                                frontier_phi_73_pred_1 = _3537 * _3321.y;
                                frontier_phi_73_pred_2 = _3463 * _3309.z;
                                frontier_phi_73_pred_3 = _3463 * _3309.y;
                                frontier_phi_73_pred_4 = _3463 * _3309.x;
                                frontier_phi_73_pred_5 = _3537 * _3321.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3541 = frontier_phi_73_pred;
                            _3542 = frontier_phi_73_pred_1;
                            _3546 = frontier_phi_73_pred_2;
                            _3545 = frontier_phi_73_pred_3;
                            _3544 = frontier_phi_73_pred_4;
                            _3543 = frontier_phi_73_pred_5;
                            _3251 = _3544 + _3264;
                            _3252 = _3545 + _3265;
                            _3253 = _3546 + _3266;
                            _3248 = _3541 + _3261;
                            _3249 = _3542 + _3262;
                            _3250 = _3543 + _3263;
                            if (_3268 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3261 = _3248;
                                _3262 = _3249;
                                _3263 = _3250;
                                _3264 = _3251;
                                _3265 = _3252;
                                _3266 = _3253;
                                _3267 = _3268;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3251;
                        frontier_phi_67_pred_1 = _3252;
                        frontier_phi_67_pred_2 = _3253;
                        frontier_phi_67_pred_3 = _3250;
                        frontier_phi_67_pred_4 = _3249;
                        frontier_phi_67_pred_5 = _3248;
                    }
                    _2916 = frontier_phi_67_pred;
                    _2918 = frontier_phi_67_pred_1;
                    _2920 = frontier_phi_67_pred_2;
                    _2914 = frontier_phi_67_pred_3;
                    _2912 = frontier_phi_67_pred_4;
                    _2910 = frontier_phi_67_pred_5;
                    uint _3055 = _3054 + 1u;
                    if (_3055 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3048 = _2910;
                        _3049 = _2912;
                        _3050 = _2914;
                        _3051 = _2916;
                        _3052 = _2918;
                        _3053 = _2920;
                        _3054 = _3055;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2918;
                frontier_phi_55_56_ladder_1 = _2920;
                frontier_phi_55_56_ladder_2 = _2916;
                frontier_phi_55_56_ladder_3 = _2914;
                frontier_phi_55_56_ladder_4 = _2912;
                frontier_phi_55_56_ladder_5 = _2910;
            }
            else
            {
                frontier_phi_55_56_ladder = _2804;
                frontier_phi_55_56_ladder_1 = _2806;
                frontier_phi_55_56_ladder_2 = _2802;
                frontier_phi_55_56_ladder_3 = _2800;
                frontier_phi_55_56_ladder_4 = _2798;
                frontier_phi_55_56_ladder_5 = _2796;
            }
            _2909 = frontier_phi_55_56_ladder_5;
            _2911 = frontier_phi_55_56_ladder_4;
            _2913 = frontier_phi_55_56_ladder_3;
            _2915 = frontier_phi_55_56_ladder_2;
            _2917 = frontier_phi_55_56_ladder;
            _2919 = frontier_phi_55_56_ladder_1;
        }
        float _2924 = isnan(1.0) ? _952 : (isnan(_952) ? 1.0 : min(_952, 1.0));
        _2708 = (_2924 * _2915) + _2141;
        _2710 = (_2924 * _2917) + _2143;
        _2712 = (_2924 * _2919) + _2145;
        _2714 = ((_2909 * _936) * _2924) + _2489;
        _2716 = ((_2911 * _938) * _2924) + _2491;
        _2718 = ((_2913 * _939) * _2924) + _2493;
    }
    else
    {
        _2708 = _2141;
        _2710 = _2143;
        _2712 = _2145;
        _2714 = _2489;
        _2716 = _2491;
        _2718 = _2493;
    }
    float _4638 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
    float _4649 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
    float _4660 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
    uint _2738 = _270 + 6u;
    float _2746 = _874 / cbSceneParam._m0[86u].x;
    float _2747 = _875 / cbSceneParam._m0[86u].y;
    vec4 _2761 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2746, _2747, (log2((isnan(cbSceneParam._m0[77u].w) ? _808 : (isnan(_808) ? cbSceneParam._m0[77u].w : min(_808, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2763 = _2761.x;
    float _2764 = _2761.y;
    float _2765 = _2761.z;
    float _2766 = _2761.w;
    float _2859;
    float _2861;
    float _2863;
    float _2865;
    if (_808 > cbSceneParam._m0[78u].w)
    {
        float _2821 = isnan(_808) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _808 : min(cbSceneParam._m0[80u].w, _808));
        float _2822 = _2821 / _808;
        float _2833 = _2822 * _859;
        float _2834 = _860 * _2822;
        float _2835 = (-0.0) - _2834;
        float _2837 = _2822 * _861;
        float _2839 = (cbSceneParam._m0[77u].w * _2835) / _2821;
        float _2840 = _2839 + cbSceneParam._m0[79u].w;
        float _2841 = cbSceneParam._m0[79u].w - _2834;
        float _2847 = sqrt(((_2833 * _2833) + (_2834 * _2834)) + (_2837 * _2837));
        float _2850 = (1.0 - (cbSceneParam._m0[77u].w / _2821)) * _2847;
        float _2855 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2857 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3010;
        if (abs((_2835 - _2839) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3010 = ((((_2840 > 0.0) ? exp2(_2855 * _2840) : (2.0 - exp2(_2857 * _2840))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2850;
        }
        else
        {
            float _2970 = 1.0 / cbSceneParam._m0[80u].x;
            float _2971 = isnan(_2841) ? _2840 : (isnan(_2840) ? _2841 : max(_2840, _2841));
            float _2972 = isnan(_2841) ? _2840 : (isnan(_2840) ? _2841 : min(_2840, _2841));
            float _2981 = isnan(0.0) ? _2971 : (isnan(_2971) ? 0.0 : min(_2971, 0.0));
            float _2982 = isnan(0.0) ? _2972 : (isnan(_2972) ? 0.0 : min(_2972, 0.0));
            _3010 = ((abs(_2847 / _2835) * cbSceneParam._m0[80u].y) * ((((_2981 - _2982) * 2.0) - ((exp2(_2855 * (isnan(0.0) ? _2971 : (isnan(_2971) ? 0.0 : max(_2971, 0.0)))) - exp2(_2855 * (isnan(0.0) ? _2972 : (isnan(_2972) ? 0.0 : max(_2972, 0.0))))) * _2970)) - ((exp2(_2857 * _2981) - exp2(_2857 * _2982)) * _2970))) + (_2850 * cbSceneParam._m0[80u].z);
        }
        vec4 _3012 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2746, _2747, 1.0), 0.0);
        float _3021 = exp2((_3010 * (-1.44269502162933349609375)) * (1.0 - _3012.w));
        float _3022 = log2(_3021);
        float _3038 = log2(_2766);
        _2859 = (exp2(_3038 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3022 * cbSceneParam._m0[78u].x)) * _3012.x) / cbSceneParam._m0[78u].x)) + _2763;
        _2861 = (exp2(_3038 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3022 * cbSceneParam._m0[78u].y)) * _3012.y) / cbSceneParam._m0[78u].y)) + _2764;
        _2863 = (exp2(_3038 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3022 * cbSceneParam._m0[78u].z)) * _3012.z) / cbSceneParam._m0[78u].z)) + _2765;
        _2865 = _3021 * _2766;
    }
    else
    {
        _2859 = _2763;
        _2861 = _2764;
        _2863 = _2765;
        _2865 = _2766;
    }
    float _2877 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2878 = _2877 == 3.0;
    float _2879 = log2(_2865);
    float _2886 = exp2(_2879 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0))) * (_2708 + ((isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0))) * _952))) + ((_2714 + ((isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0))) * _1760)) * cbPerFrame._m0[3u].x));
    float _2887 = exp2(_2879 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0))) * (_2710 + ((isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0))) * _952))) + ((_2716 + ((isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0))) * _1760)) * cbPerFrame._m0[3u].x));
    float _2888 = exp2(_2879 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0))) * (_2712 + ((isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0))) * _952))) + ((_2718 + ((isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0))) * _1760)) * cbPerFrame._m0[3u].x));
    float _2897 = (_2877 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2897 * (_2878 ? _2886 : (_2886 + (cbSceneParam._m0[72u].w * _2859)));
    SV_Target.y = _2897 * (_2878 ? _2887 : (_2887 + (cbSceneParam._m0[72u].w * _2861)));
    SV_Target.z = _2897 * (_2878 ? _2888 : (_2888 + (cbSceneParam._m0[72u].w * _2863)));
    SV_Target.w = cbInstanceData._m0[_2738].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2738].w;
}


