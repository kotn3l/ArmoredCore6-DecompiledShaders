#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1153;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _215 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _216 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _217 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _223 = inversesqrt(dot(vec3(_215, _216, _217), vec3(_215, _216, _217)));
    float _230 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _237 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _251 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _253 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _254 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3765 = isnan(0.0) ? _251 : (isnan(_251) ? 0.0 : max(_251, 0.0));
    float _3776 = isnan(0.0) ? _253 : (isnan(_253) ? 0.0 : max(_253, 0.0));
    float _3787 = isnan(0.0) ? _254 : (isnan(_254) ? 0.0 : max(_254, 0.0));
    uint _264 = uint(roundEven(NORMAL.w)) * 13u;
    uint _269 = _264 + 1u;
    uint _273 = _264 + 2u;
    float _282 = sqrt(((cbInstanceData._m0[_269].x * cbInstanceData._m0[_269].x) + (cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x)) + (cbInstanceData._m0[_273].x * cbInstanceData._m0[_273].x));
    float _283 = _282 * TEXCOORD.z;
    float _284 = _282 * TEXCOORD.w;
    vec4 _297 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _283) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _284) + cbTextureTilingScale._m0[13u].w));
    vec4 _321 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _326 = _321.x * cbMtdParam._m0[11u].x;
    float _327 = _321.y * cbMtdParam._m0[11u].y;
    float _328 = _321.z * cbMtdParam._m0[11u].z;
    vec4 _347 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _283) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _284) + cbTextureTilingScale._m0[5u].w));
    vec4 _383 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _385 = _383.x;
    float _397 = dot(vec4(_385, _383.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _414 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_385 - _397) * cbMtdParam._m0[24u].y) + _397) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3798 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    float _415 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
    float _422 = (_415 * ((_347.x * cbMtdParam._m0[12u].x) - _326)) + _326;
    float _423 = (_415 * ((_347.y * cbMtdParam._m0[12u].y) - _327)) + _327;
    float _424 = (_415 * ((_347.z * cbMtdParam._m0[12u].z) - _328)) + _328;
    float _428 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _297.x) * _422;
    float _431 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _297.y) * _423;
    float _434 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _297.z) * _424;
    float _441 = ((_422 - _428) * (isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0)))) + _428;
    float _442 = ((_423 - _431) * (isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0)))) + _431;
    float _443 = ((_424 - _434) * (isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0)))) + _434;
    vec4 _456 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _283) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _284) + cbTextureTilingScale._m0[20u].w));
    vec4 _481 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _283) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _284) + cbTextureTilingScale._m0[4u].w));
    vec4 _498 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _500 = _498.x;
    float _501 = _498.y;
    float _502 = _498.z;
    float _511 = ((_481.z - _502) * _415) + _502;
    float _514 = ((((_481.x - _500) * _415) + _500) * 2.0) + (-1.0);
    float _515 = ((((_481.y - _501) * _415) + _501) * 2.0) + (-1.0);
    float _516 = dot(vec2(_514, _515), vec2(_514, _515));
    float _3809 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _521 = sqrt(1.0 - (isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0))));
    float _526 = _514 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_456.x * 2.0) + (-1.0)));
    float _527 = _515 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_456.y * 2.0) + (-1.0)));
    vec4 _540 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _554 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _568 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _570 = _568.x;
    float _588 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _283) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _284) + cbTextureTilingScale._m0[9u].w)).x - _570) * _415) + _570;
    float _592 = ((_554.x - _588) * cbMtdParam._m0[19u].z) + _588;
    float _597 = (((_456.z - _511) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _511;
    float _599 = cbMtdParam._m0[22u].x + _540.w;
    float _602 = fma(_521, _230 * NORMAL.x, fma(_527, _237 * TANGENT.x, (_223 * _215) * _526));
    float _605 = fma(_521, _230 * NORMAL.y, fma(_527, _237 * TANGENT.y, (_223 * _216) * _526));
    float _608 = fma(_521, _230 * NORMAL.z, fma(_527, _237 * TANGENT.z, (_223 * _217) * _526));
    float _612 = inversesqrt(dot(vec3(_602, _605, _608), vec3(_602, _605, _608)));
    float _613 = _612 * _602;
    float _614 = _612 * _605;
    float _615 = _612 * _608;
    float _3820 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _616 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
    float _3831 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _3842 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _3853 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _3864 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _3875 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _621 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
    float _635 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _676 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _686 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _676);
    float _687 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _676);
    float _688 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _676);
    float _692 = inversesqrt(dot(vec3(_686, _687, _688), vec3(_686, _687, _688)));
    float _693 = _686 * _692;
    float _694 = _687 * _692;
    float _695 = _688 * _692;
    float _701 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _702 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _720 = fma(_615, cbSceneParam._m0[5u].z, fma(_614, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _613));
    float _723 = fma(_615, cbSceneParam._m0[6u].z, fma(_614, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _613));
    float _726 = fma(_615, cbSceneParam._m0[7u].z, fma(_614, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _613));
    uint _740 = (_264 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _746 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0)))) * cbInstanceData._m0[_740].x;
    float _747 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0)))) * cbInstanceData._m0[_740].y;
    float _748 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0)))) * cbInstanceData._m0[_740].z;
    float _3886 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
    float _749 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
    float _3897 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _750 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
    float _3908 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
    float _751 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
    float _752 = 1.0 - _621;
    float _753 = _749 * _752;
    float _754 = _750 * _752;
    float _755 = _751 * _752;
    float _760 = (_749 + (-0.039999999105930328369140625)) * _621;
    float _761 = (_750 + (-0.039999999105930328369140625)) * _621;
    float _762 = (_751 + (-0.039999999105930328369140625)) * _621;
    float _763 = _760 + 0.039999999105930328369140625;
    float _765 = _761 + 0.039999999105930328369140625;
    float _766 = _762 + 0.039999999105930328369140625;
    vec4 _775 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _701, cbSceneParam._m0[86u].y * _702));
    float _779 = ((isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0))) * TEXCOORD_5.w) * _775.x;
    float _780 = dot(vec3(_613, _614, _615), vec3(_693, _694, _695));
    float _783 = _780 * 2.0;
    float _787 = (_783 * _613) - _693;
    float _788 = (_783 * _614) - _694;
    float _789 = (_783 * _615) - _695;
    float _793 = abs(dot(vec3(_693, _694, _695), vec3(_613, _614, _615)));
    float _3919 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
    float _795 = sqrt(_616);
    float _808 = exp2((_795 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_795 * 3.0));
    float _814 = (1.0 - _808) * ((_795 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _815 = _808 * _795;
    float _843 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _847 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _851 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1152;
    float _1154;
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _877 = fma(_851, cbModelParam._m0[26u].z, fma(_847, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _843));
        float _881 = fma(_851, cbModelParam._m0[27u].z, fma(_847, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _843));
        float _885 = fma(_851, cbModelParam._m0[28u].z, fma(_847, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _843));
        float _910 = _843 + _613;
        float _911 = _847 + _614;
        float _912 = _851 + _615;
        float _922 = fma(_912, cbModelParam._m0[26u].z, fma(_911, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _910)) - _877;
        float _923 = fma(_912, cbModelParam._m0[27u].z, fma(_911, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _910)) - _881;
        float _924 = fma(_912, cbModelParam._m0[28u].z, fma(_911, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _910)) - _885;
        float _928 = inversesqrt(dot(vec3(_922, _923, _924), vec3(_922, _923, _924)));
        float _941 = ((_928 * _922) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_877 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _942 = ((_928 * _923) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_881 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _943 = ((_928 * _924) / cbModelParam._m0[34u].z) + ((((((_885 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _946 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_941, _942, _943), 0.0);
        vec4 _953 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_941, _942, _943), 0.0);
        vec4 _960 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_941, _942, _943), 0.0);
        vec4 _967 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_941, _942, _943), 0.0);
        float _980 = exp2((_946.w + (-0.5)) * 20.0) * 2.0;
        float _981 = _980 * (_946.x + (-0.5));
        float _982 = _980 * (_946.y + (-0.5));
        float _983 = _980 * (_946.z + (-0.5));
        float _990 = exp2((_953.w + (-0.5)) * 20.0) * 2.0;
        float _991 = _990 * (_953.x + (-0.5));
        float _992 = _990 * (_953.y + (-0.5));
        float _993 = _990 * (_953.z + (-0.5));
        float _1000 = exp2((_960.w + (-0.5)) * 20.0) * 2.0;
        float _1001 = _1000 * (_960.x + (-0.5));
        float _1002 = _1000 * (_960.y + (-0.5));
        float _1003 = _1000 * (_960.z + (-0.5));
        float _1010 = exp2((_967.w + (-0.5)) * 20.0) * 2.0;
        float _1011 = _1010 * (_967.x + (-0.5));
        float _1012 = _1010 * (_967.y + (-0.5));
        float _1013 = _1010 * (_967.z + (-0.5));
        float _1014 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1015 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1016 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1017 = _981 * 0.5;
        float _1018 = _991 * 0.5;
        float _1019 = _1001 * 0.5;
        float _1020 = dot(vec3(_1017, _1018, _1019), vec3(_1017, _1018, _1019));
        float _1025 = (_1020 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1020);
        float _1034 = (dot(vec3(_613, _614, _615), vec3(_1025 * _1017, _1025 * _1018, _1025 * _1019)) + 1.0) * 0.5;
        float _3945 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1044 = sqrt(((_1018 * _1018) + (_1017 * _1017)) + (_1019 * _1019)) / (_1014 + 9.9999997473787516355514526367188e-06);
        float _3956 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1045 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
        float _1046 = _1045 * 2.0;
        float _1050 = (1.0 - _1045) / (_1045 + 1.0);
        float _3967 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1051 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
        float _1060 = ((((1.0 - _1051) * (_1046 + 2.0)) * exp2(log2(isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0))) * (_1046 + 1.0))) + _1051) * _1014;
        float _1061 = _982 * 0.5;
        float _1062 = _992 * 0.5;
        float _1063 = _1002 * 0.5;
        float _1064 = dot(vec3(_1061, _1062, _1063), vec3(_1061, _1062, _1063));
        float _1069 = (_1064 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1064);
        float _1077 = (dot(vec3(_613, _614, _615), vec3(_1069 * _1061, _1069 * _1062, _1069 * _1063)) + 1.0) * 0.5;
        float _3978 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1086 = sqrt(((_1062 * _1062) + (_1061 * _1061)) + (_1063 * _1063)) / (_1015 + 9.9999997473787516355514526367188e-06);
        float _3989 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1087 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
        float _1088 = _1087 * 2.0;
        float _1092 = (1.0 - _1087) / (_1087 + 1.0);
        float _4000 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1093 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
        float _1102 = ((((1.0 - _1093) * (_1088 + 2.0)) * exp2(log2(isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0))) * (_1088 + 1.0))) + _1093) * _1015;
        float _1103 = _983 * 0.5;
        float _1104 = _993 * 0.5;
        float _1105 = _1003 * 0.5;
        float _1106 = dot(vec3(_1103, _1104, _1105), vec3(_1103, _1104, _1105));
        float _1111 = (_1106 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1106);
        float _1119 = (dot(vec3(_613, _614, _615), vec3(_1111 * _1103, _1111 * _1104, _1111 * _1105)) + 1.0) * 0.5;
        float _4011 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1128 = sqrt(((_1104 * _1104) + (_1103 * _1103)) + (_1105 * _1105)) / (_1016 + 9.9999997473787516355514526367188e-06);
        float _4022 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1129 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
        float _1130 = _1129 * 2.0;
        float _1134 = (1.0 - _1129) / (_1129 + 1.0);
        float _4033 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1135 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
        float _1144 = ((((1.0 - _1135) * (_1130 + 2.0)) * exp2(log2(isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0))) * (_1130 + 1.0))) + _1135) * _1016;
        _1152 = _983;
        _1154 = _982;
        _1155 = _981;
        _1156 = _993;
        _1157 = _992;
        _1158 = _991;
        _1159 = _1003;
        _1160 = _1002;
        _1161 = _1001;
        _1162 = _1016;
        _1163 = _1015;
        _1164 = _1014;
        _1165 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0)));
        _1166 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0)));
        _1167 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0)));
    }
    else
    {
        _1152 = _1153;
        _1154 = _1153;
        _1155 = _1153;
        _1156 = _1153;
        _1157 = _1153;
        _1158 = _1153;
        _1159 = _1153;
        _1160 = _1153;
        _1161 = _1153;
        _1162 = _1153;
        _1163 = _1153;
        _1164 = _1153;
        _1165 = 0.0;
        _1166 = 0.0;
        _1167 = 0.0;
    }
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1192 = fma(_851, cbModelParam._m0[30u].z, fma(_847, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _843));
        float _1196 = fma(_851, cbModelParam._m0[31u].z, fma(_847, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _843));
        float _1200 = fma(_851, cbModelParam._m0[32u].z, fma(_847, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _843));
        float _1223 = _843 + _613;
        float _1224 = _847 + _614;
        float _1225 = _851 + _615;
        float _1235 = fma(_1225, cbModelParam._m0[30u].z, fma(_1224, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1223)) - _1192;
        float _1236 = fma(_1225, cbModelParam._m0[31u].z, fma(_1224, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1223)) - _1196;
        float _1237 = fma(_1225, cbModelParam._m0[32u].z, fma(_1224, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1223)) - _1200;
        float _1241 = inversesqrt(dot(vec3(_1235, _1236, _1237), vec3(_1235, _1236, _1237)));
        float _1254 = ((_1241 * _1235) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1192 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1255 = ((_1241 * _1236) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1196 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1256 = ((_1241 * _1237) / cbModelParam._m0[35u].z) + ((((((_1200 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1258 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1254, _1255, _1256), 0.0);
        vec4 _1265 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1254, _1255, _1256), 0.0);
        vec4 _1272 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1254, _1255, _1256), 0.0);
        vec4 _1279 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1254, _1255, _1256), 0.0);
        float _1291 = exp2((_1258.w + (-0.5)) * 20.0) * 2.0;
        float _1292 = _1291 * (_1258.x + (-0.5));
        float _1293 = _1291 * (_1258.y + (-0.5));
        float _1294 = _1291 * (_1258.z + (-0.5));
        float _1301 = exp2((_1265.w + (-0.5)) * 20.0) * 2.0;
        float _1302 = _1301 * (_1265.x + (-0.5));
        float _1303 = _1301 * (_1265.y + (-0.5));
        float _1304 = _1301 * (_1265.z + (-0.5));
        float _1311 = exp2((_1272.w + (-0.5)) * 20.0) * 2.0;
        float _1312 = _1311 * (_1272.x + (-0.5));
        float _1313 = _1311 * (_1272.y + (-0.5));
        float _1314 = _1311 * (_1272.z + (-0.5));
        float _1321 = exp2((_1279.w + (-0.5)) * 20.0) * 2.0;
        float _1322 = _1321 * (_1279.x + (-0.5));
        float _1323 = _1321 * (_1279.y + (-0.5));
        float _1324 = _1321 * (_1279.z + (-0.5));
        float _1325 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1326 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1327 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1328 = _1292 * 0.5;
        float _1329 = _1302 * 0.5;
        float _1330 = _1312 * 0.5;
        float _1331 = dot(vec3(_1328, _1329, _1330), vec3(_1328, _1329, _1330));
        float _1336 = (_1331 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1331);
        float _1344 = (dot(vec3(_613, _614, _615), vec3(_1336 * _1328, _1336 * _1329, _1336 * _1330)) + 1.0) * 0.5;
        float _4074 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1353 = sqrt(((_1329 * _1329) + (_1328 * _1328)) + (_1330 * _1330)) / (_1325 + 9.9999997473787516355514526367188e-06);
        float _4085 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1354 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
        float _1355 = _1354 * 2.0;
        float _1359 = (1.0 - _1354) / (_1354 + 1.0);
        float _4096 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1360 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
        float _1369 = ((((1.0 - _1360) * (_1355 + 2.0)) * exp2(log2(isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0))) * (_1355 + 1.0))) + _1360) * _1325;
        float _1370 = _1293 * 0.5;
        float _1371 = _1303 * 0.5;
        float _1372 = _1313 * 0.5;
        float _1373 = dot(vec3(_1370, _1371, _1372), vec3(_1370, _1371, _1372));
        float _1378 = (_1373 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1373);
        float _1386 = (dot(vec3(_613, _614, _615), vec3(_1378 * _1370, _1378 * _1371, _1378 * _1372)) + 1.0) * 0.5;
        float _4107 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1395 = sqrt(((_1371 * _1371) + (_1370 * _1370)) + (_1372 * _1372)) / (_1326 + 9.9999997473787516355514526367188e-06);
        float _4118 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1396 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
        float _1397 = _1396 * 2.0;
        float _1401 = (1.0 - _1396) / (_1396 + 1.0);
        float _4129 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1402 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
        float _1411 = ((((1.0 - _1402) * (_1397 + 2.0)) * exp2(log2(isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0))) * (_1397 + 1.0))) + _1402) * _1326;
        float _1412 = _1294 * 0.5;
        float _1413 = _1304 * 0.5;
        float _1414 = _1314 * 0.5;
        float _1415 = dot(vec3(_1412, _1413, _1414), vec3(_1412, _1413, _1414));
        float _1420 = (_1415 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1415);
        float _1428 = (dot(vec3(_613, _614, _615), vec3(_1420 * _1412, _1420 * _1413, _1420 * _1414)) + 1.0) * 0.5;
        float _4140 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1437 = sqrt(((_1413 * _1413) + (_1412 * _1412)) + (_1414 * _1414)) / (_1327 + 9.9999997473787516355514526367188e-06);
        float _4151 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1438 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
        float _1439 = _1438 * 2.0;
        float _1443 = (1.0 - _1438) / (_1438 + 1.0);
        float _4162 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1444 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
        float _1453 = ((((1.0 - _1444) * (_1439 + 2.0)) * exp2(log2(isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0))) * (_1439 + 1.0))) + _1444) * _1327;
        _1461 = _1294;
        _1462 = _1293;
        _1463 = _1292;
        _1464 = _1304;
        _1465 = _1303;
        _1466 = _1302;
        _1467 = _1314;
        _1468 = _1313;
        _1469 = _1312;
        _1470 = _1327;
        _1471 = _1326;
        _1472 = _1325;
        _1473 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0)));
        _1474 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0)));
        _1475 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0)));
    }
    else
    {
        _1461 = _1153;
        _1462 = _1153;
        _1463 = _1153;
        _1464 = _1153;
        _1465 = _1153;
        _1466 = _1153;
        _1467 = _1153;
        _1468 = _1153;
        _1469 = _1153;
        _1470 = _1153;
        _1471 = _1153;
        _1472 = _1153;
        _1473 = 0.0;
        _1474 = 0.0;
        _1475 = 0.0;
    }
    float _1485 = (cbModelParam._m0[1u].x * (_1473 - _1165)) + _1165;
    float _1486 = (cbModelParam._m0[1u].x * (_1474 - _1166)) + _1166;
    float _1487 = (cbModelParam._m0[1u].x * (_1475 - _1167)) + _1167;
    float _1508 = fma(_1487, cbSceneParam._m0[89u].z, fma(_1486, cbSceneParam._m0[89u].y, _1485 * cbSceneParam._m0[89u].x));
    float _1511 = fma(_1487, cbSceneParam._m0[90u].z, fma(_1486, cbSceneParam._m0[90u].y, _1485 * cbSceneParam._m0[90u].x));
    float _1514 = fma(_1487, cbSceneParam._m0[91u].z, fma(_1486, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1485));
    float _1529 = _787 * 0.5;
    float _1530 = _788 * 0.5;
    float _1531 = _789 * 0.5;
    float _1532 = dot(vec4(_1529, _1530, _1531, 1.0), vec4(_1463, _1466, _1469, _1472));
    float _1535 = dot(vec4(_1529, _1530, _1531, 1.0), vec4(_1462, _1465, _1468, _1471));
    float _1538 = dot(vec4(_1529, _1530, _1531, 1.0), vec4(_1461, _1464, _1467, _1470));
    float _1572;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1545 = dot(vec4(_1529, _1530, _1531, 1.0), vec4(_1152, _1156, _1159, _1162));
        float _1549 = dot(vec4(_1529, _1530, _1531, 1.0), vec4(_1154, _1157, _1160, _1163));
        float _1553 = dot(vec4(_1529, _1530, _1531, 1.0), vec4(_1155, _1158, _1161, _1164));
        float _1560 = dot(vec4(cbModelParam._m0[39u]), vec4(_1529, _1530, _1531, 1.0));
        _1572 = dot(vec3(isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0)), isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0)), isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1560) ? 0.0 : (isnan(0.0) ? _1560 : max(0.0, _1560))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1572 = 1.0;
    }
    float _1583;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1574 = dot(vec4(cbModelParam._m0[40u]), vec4(_1529, _1530, _1531, 1.0));
        _1583 = dot(vec3(isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0)), isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0)), isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1574) ? 0.0 : (isnan(0.0) ? _1574 : max(0.0, _1574))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1583 = 1.0;
    }
    float _1587 = (_1583 * cbModelParam._m0[1u].x) + (_1572 * (1.0 - cbModelParam._m0[1u].x));
    float _1597 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _616);
    float _1598 = isnan(_1597) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1597 : min(cbModelParam._m0[25u].z, _1597));
    float _1680;
    float _1682;
    float _1684;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1647 = fma(_851, cbModelParam._m0[13u].z, fma(_847, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _843)) + cbModelParam._m0[13u].w;
        float _1651 = fma(_851, cbModelParam._m0[14u].z, fma(_847, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _843)) + cbModelParam._m0[14u].w;
        float _1655 = fma(_851, cbModelParam._m0[15u].z, fma(_847, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _843)) + cbModelParam._m0[15u].w;
        float _1658 = fma(_789, cbModelParam._m0[13u].z, fma(_788, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _787));
        float _1661 = fma(_789, cbModelParam._m0[14u].z, fma(_788, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _787));
        float _1664 = fma(_789, cbModelParam._m0[15u].z, fma(_788, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _787));
        float _1692;
        if (_1658 > 0.0)
        {
            _1692 = abs((1.0 - _1647) / _1658);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1658 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1647 + 1.0) / _1658);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1692 = frontier_phi_14_12_ladder;
        }
        float _1865;
        if (_1661 > 0.0)
        {
            _1865 = abs((1.0 - _1651) / _1661);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1661 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1651 + 1.0) / _1661);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1865 = frontier_phi_23_19_ladder;
        }
        float _2160;
        if (_1664 > 0.0)
        {
            _2160 = abs((1.0 - _1655) / _1664);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1664 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1655 + 1.0) / _1664);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2160 = frontier_phi_35_30_ladder;
        }
        float _2162 = isnan(_1865) ? _1692 : (isnan(_1692) ? _1865 : min(_1692, _1865));
        float _2163 = isnan(_2160) ? _2162 : (isnan(_2162) ? _2160 : min(_2162, _2160));
        float _2167 = (_2163 * _1658) + _1647;
        float _2168 = (_2163 * _1661) + _1651;
        float _2169 = (_2163 * _1664) + _1655;
        float _2170 = _2163 * 9.9999997473787516355514526367188e-05;
        float _2172 = (-1.0) - _2170;
        float _2174 = _2170 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2169 > _2174) || ((_2169 < _2172) || ((_2168 > _2174) || ((_2168 < _2172) || ((_2167 < _2172) || (_2167 > _2174))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2314 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2169, cbModelParam._m0[9u].z, fma(_2168, cbModelParam._m0[9u].y, _2167 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2169, cbModelParam._m0[10u].z, fma(_2168, cbModelParam._m0[10u].y, _2167 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2169, cbModelParam._m0[11u].z, fma(_2168, cbModelParam._m0[11u].y, _2167 * cbModelParam._m0[11u].x))), _1598);
            frontier_phi_13_35_ladder = _2314.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2314.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2314.x * cbModelParam._m0[1u].y;
        }
        _1680 = frontier_phi_13_35_ladder_2;
        _1682 = frontier_phi_13_35_ladder_1;
        _1684 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1668 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_787, _788, _789), _1598);
        _1680 = _1668.x * cbModelParam._m0[1u].y;
        _1682 = _1668.y * cbModelParam._m0[1u].y;
        _1684 = _1668.z * cbModelParam._m0[1u].y;
    }
    float _1688 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _616);
    float _1689 = isnan(_1688) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1688 : min(cbModelParam._m0[25u].w, _1688));
    float _1780;
    float _1782;
    float _1784;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1744 = fma(_851, cbModelParam._m0[21u].z, fma(_847, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _843)) + cbModelParam._m0[21u].w;
        float _1748 = fma(_851, cbModelParam._m0[22u].z, fma(_847, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _843)) + cbModelParam._m0[22u].w;
        float _1752 = fma(_851, cbModelParam._m0[23u].z, fma(_847, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _843)) + cbModelParam._m0[23u].w;
        float _1755 = fma(_789, cbModelParam._m0[21u].z, fma(_788, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _787));
        float _1758 = fma(_789, cbModelParam._m0[22u].z, fma(_788, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _787));
        float _1761 = fma(_789, cbModelParam._m0[23u].z, fma(_788, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _787));
        float _1870;
        if (_1755 > 0.0)
        {
            _1870 = abs((1.0 - _1744) / _1755);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1755 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1744 + 1.0) / _1755);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1870 = frontier_phi_25_21_ladder;
        }
        float _2187;
        if (_1758 > 0.0)
        {
            _2187 = abs((1.0 - _1748) / _1758);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1758 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1748 + 1.0) / _1758);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2187 = frontier_phi_37_32_ladder;
        }
        float _2525;
        if (_1761 > 0.0)
        {
            _2525 = abs((1.0 - _1752) / _1761);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1761 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1752 + 1.0) / _1761);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2525 = frontier_phi_47_44_ladder;
        }
        float _2527 = isnan(_2187) ? _1870 : (isnan(_1870) ? _2187 : min(_1870, _2187));
        float _2528 = isnan(_2525) ? _2527 : (isnan(_2527) ? _2525 : min(_2527, _2525));
        float _2532 = (_2528 * _1755) + _1744;
        float _2533 = (_2528 * _1758) + _1748;
        float _2534 = (_2528 * _1761) + _1752;
        float _2535 = _2528 * 9.9999997473787516355514526367188e-05;
        float _2536 = (-1.0) - _2535;
        float _2538 = _2535 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2534 > _2538) || ((_2534 < _2536) || ((_2533 > _2538) || ((_2533 < _2536) || ((_2532 < _2536) || (_2532 > _2538))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2656 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2534, cbModelParam._m0[17u].z, fma(_2533, cbModelParam._m0[17u].y, _2532 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2534, cbModelParam._m0[18u].z, fma(_2533, cbModelParam._m0[18u].y, _2532 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2534, cbModelParam._m0[19u].z, fma(_2533, cbModelParam._m0[19u].y, _2532 * cbModelParam._m0[19u].x))), _1689);
            frontier_phi_22_47_ladder = _2656.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2656.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2656.x * cbModelParam._m0[1u].z;
        }
        _1780 = frontier_phi_22_47_ladder_2;
        _1782 = frontier_phi_22_47_ladder_1;
        _1784 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1764 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_787, _788, _789), _1689);
        _1780 = _1764.x * cbModelParam._m0[1u].z;
        _1782 = _1764.y * cbModelParam._m0[1u].z;
        _1784 = _1764.z * cbModelParam._m0[1u].z;
    }
    float _1797 = (((_814 * _763) + _815) * _779) * ((cbModelParam._m0[1u].w * (_1780 - _1680)) + _1680);
    float _1799 = (((_814 * _765) + _815) * _779) * ((cbModelParam._m0[1u].w * (_1782 - _1682)) + _1682);
    float _1801 = (((_814 * _766) + _815) * _779) * ((cbModelParam._m0[1u].w * (_1784 - _1684)) + _1684);
    float _1804 = fma(_1801, cbSceneParam._m0[89u].z, fma(_1799, cbSceneParam._m0[89u].y, _1797 * cbSceneParam._m0[89u].x));
    float _1807 = fma(_1801, cbSceneParam._m0[90u].z, fma(_1799, cbSceneParam._m0[90u].y, _1797 * cbSceneParam._m0[90u].x));
    float _1810 = fma(_1801, cbSceneParam._m0[91u].z, fma(_1799, cbSceneParam._m0[91u].y, _1797 * cbSceneParam._m0[91u].x));
    float _1844 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1848 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1852 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1856 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1857 = _1844 / _1856;
    float _1858 = _1848 / _1856;
    float _1859 = _1852 / _1856;
    float _2006;
    float _2007;
    float _2008;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1886 = ((uint(_1859 > cbSceneParam._m0[59u].y) + uint(_1859 > cbSceneParam._m0[59u].x)) + uint(_1859 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1887 = _1886 + 43u;
        uint _1895 = _1886 + 44u;
        uint _1903 = _1886 + 45u;
        uint _1911 = _1886 + 46u;
        float _1922 = fma(_1856, cbSceneParam._m0[_1887].w, fma(_1852, cbSceneParam._m0[_1887].z, fma(_1848, cbSceneParam._m0[_1887].y, _1844 * cbSceneParam._m0[_1887].x)));
        float _1926 = fma(_1856, cbSceneParam._m0[_1895].w, fma(_1852, cbSceneParam._m0[_1895].z, fma(_1848, cbSceneParam._m0[_1895].y, _1844 * cbSceneParam._m0[_1895].x)));
        float _1934 = fma(_1856, cbSceneParam._m0[_1911].w, fma(_1852, cbSceneParam._m0[_1911].z, fma(_1848, cbSceneParam._m0[_1911].y, _1844 * cbSceneParam._m0[_1911].x)));
        float _1939 = cbSceneParam._m0[33u].z * _1934;
        float _1941 = cbSceneParam._m0[33u].w * _1934;
        float _1944 = fma(_1856, cbSceneParam._m0[_1903].w, fma(_1852, cbSceneParam._m0[_1903].z, fma(_1848, cbSceneParam._m0[_1903].y, _1844 * cbSceneParam._m0[_1903].x))) / _1934;
        float _1992 = (cbSceneParam._m0[33u].x - sqrt(((_1858 * _1858) + (_1857 * _1857)) + (_1859 * _1859))) * cbSceneParam._m0[33u].y;
        float _4288 = isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0));
        float _1999 = (isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1939 + _1922) / _1934, (_1941 + _1926) / _1934), _1944), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1941 + _1922) / _1934, (_1926 - _1939) / _1934), _1944), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1922 - _1939) / _1934, (_1926 - _1941) / _1934), _1944), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1922 - _1941) / _1934, (_1939 + _1926) / _1934), _1944), 0.0)).x), vec4(0.25)));
        _2006 = 1.0 - (_1999 * cbSceneParam._m0[34u].x);
        _2007 = 1.0 - (_1999 * cbSceneParam._m0[34u].y);
        _2008 = 1.0 - (_1999 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2006 = 1.0;
        _2007 = 1.0;
        _2008 = 1.0;
    }
    float _2072;
    float _2074;
    float _2076;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2060 = fma(_1856, cbSceneParam._m0[63u].w, fma(_1852, cbSceneParam._m0[63u].z, fma(_1848, cbSceneParam._m0[63u].y, _1844 * cbSceneParam._m0[63u].x)));
        float _2061 = fma(_1856, cbSceneParam._m0[60u].w, fma(_1852, cbSceneParam._m0[60u].z, fma(_1848, cbSceneParam._m0[60u].y, _1844 * cbSceneParam._m0[60u].x))) / _2060;
        float _2062 = fma(_1856, cbSceneParam._m0[61u].w, fma(_1852, cbSceneParam._m0[61u].z, fma(_1848, cbSceneParam._m0[61u].y, _1844 * cbSceneParam._m0[61u].x))) / _2060;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2061 >= cbSceneParam._m0[64u].x) && (_2062 >= cbSceneParam._m0[64u].y)) && (_2061 <= cbSceneParam._m0[64u].z)) && (_2062 <= cbSceneParam._m0[64u].w))
        {
            float _2200 = fma(_1856, cbSceneParam._m0[62u].w, fma(_1852, cbSceneParam._m0[62u].z, fma(_1848, cbSceneParam._m0[62u].y, _1844 * cbSceneParam._m0[62u].x))) / _2060;
            float _2204 = isnan(cbSceneParam._m0[41u].w) ? _2200 : (isnan(_2200) ? cbSceneParam._m0[41u].w : max(_2200, cbSceneParam._m0[41u].w));
            float _2247 = (cbSceneParam._m0[33u].x - sqrt(((_1858 * _1858) + (_1857 * _1857)) + (_1859 * _1859))) * cbSceneParam._m0[33u].y;
            float _4304 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
            float _2254 = (isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2061, cbSceneParam._m0[33u].w + _2062), _2204), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2061, _2062 - cbSceneParam._m0[33u].z), _2204), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2061 - cbSceneParam._m0[33u].z, _2062 - cbSceneParam._m0[33u].w), _2204), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2061 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2062), _2204), 0.0)).x), vec4(0.25)));
            float _2258 = 1.0 - (_2254 * cbSceneParam._m0[34u].x);
            float _2259 = 1.0 - (_2254 * cbSceneParam._m0[34u].y);
            float _2260 = 1.0 - (_2254 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2260) ? _2008 : (isnan(_2008) ? _2260 : min(_2008, _2260));
            frontier_phi_34_33_ladder_1 = isnan(_2259) ? _2007 : (isnan(_2007) ? _2259 : min(_2007, _2259));
            frontier_phi_34_33_ladder_2 = isnan(_2258) ? _2006 : (isnan(_2006) ? _2258 : min(_2006, _2258));
        }
        else
        {
            frontier_phi_34_33_ladder = _2008;
            frontier_phi_34_33_ladder_1 = _2007;
            frontier_phi_34_33_ladder_2 = _2006;
        }
        _2072 = frontier_phi_34_33_ladder_2;
        _2074 = frontier_phi_34_33_ladder_1;
        _2076 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2072 = _2006;
        _2074 = _2007;
        _2076 = _2008;
    }
    uvec4 _2081 = floatBitsToUint(cbInstanceData._m0[_264 + 5u]);
    uint _2083 = _2081.x * 14u;
    uint _2084 = _2083 + 13u;
    float _2091 = _779 + (-1.0);
    float _2096 = (cbLight._m0[_2084].x * _2091) + 1.0;
    float _2097 = (cbLight._m0[_2084].y * _2091) + 1.0;
    float _2098 = (cbLight._m0[_2084].z * _2091) + 1.0;
    float _2099 = (cbLight._m0[_2084].w * _2091) + 1.0;
    uint _2100 = _2083 + 5u;
    float _2106 = isnan(1.0) ? _2097 : (isnan(_2097) ? 1.0 : min(_2097, 1.0));
    uint _2110 = _2083 + 4u;
    float _2119 = isnan(1.0) ? _2096 : (isnan(_2096) ? 1.0 : min(_2096, 1.0));
    uint _2123 = _2083 | 1u;
    float _2134 = dot(vec3(cbLight._m0[_2083].xyz), vec3(_613, _614, _615));
    float _2137 = dot(vec3(cbLight._m0[_2123].xyz), vec3(_613, _614, _615));
    float _4340 = isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0));
    float _4351 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
    float _2142 = (isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0))) * 0.3183098733425140380859375;
    float _2144 = (isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0))) * 0.3183098733425140380859375;
    float _2151 = ((cbLight._m0[_2100].x * _2106) * _2144) + (((cbLight._m0[_2110].x * _2072) * _2119) * _2142);
    float _2152 = ((_2106 * cbLight._m0[_2100].y) * _2144) + (((cbLight._m0[_2110].y * _2074) * _2119) * _2142);
    float _2153 = ((_2106 * cbLight._m0[_2100].z) * _2144) + (((cbLight._m0[_2110].z * _2076) * _2119) * _2142);
    uvec4 _2157 = floatBitsToUint(cbLight._m0[_2083 + 12u]);
    bool _2159 = _2157.x == 0u;
    float _2261;
    float _2263;
    float _2265;
    if (_2159)
    {
        _2261 = _2151;
        _2263 = _2152;
        _2265 = _2153;
    }
    else
    {
        uint _2269 = _2083 + 6u;
        float _2285 = (dot(vec3(cbLight._m0[_2083 + 2u].xyz), vec3(_613, _614, _615)) * 0.5) + 0.5;
        float _2286 = _2285 * _2285;
        float _4362 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
        float _2287 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
        float _2288 = isnan(1.0) ? _2098 : (isnan(_2098) ? 1.0 : min(_2098, 1.0));
        _2261 = (((cbLight._m0[_2269].x * 0.3183098733425140380859375) * _2287) * _2288) + _2151;
        _2263 = (((cbLight._m0[_2269].y * 0.3183098733425140380859375) * _2287) * _2288) + _2152;
        _2265 = (((cbLight._m0[_2269].z * 0.3183098733425140380859375) * _2287) * _2288) + _2153;
    }
    bool _2268 = _2157.y == 0u;
    float _2323;
    float _2325;
    float _2327;
    if (_2268)
    {
        _2323 = _2261;
        _2325 = _2263;
        _2327 = _2265;
    }
    else
    {
        uint _2496 = _2083 + 7u;
        float _2512 = (dot(vec3(cbLight._m0[_2083 + 3u].xyz), vec3(_613, _614, _615)) * 0.5) + 0.5;
        float _2513 = _2512 * _2512;
        float _4378 = isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0));
        float _2514 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
        float _2515 = isnan(1.0) ? _2099 : (isnan(_2099) ? 1.0 : min(_2099, 1.0));
        _2323 = (((cbLight._m0[_2496].x * 0.3183098733425140380859375) * _2514) * _2515) + _2261;
        _2325 = (((cbLight._m0[_2496].y * 0.3183098733425140380859375) * _2514) * _2515) + _2263;
        _2327 = (((cbLight._m0[_2496].z * 0.3183098733425140380859375) * _2514) * _2515) + _2265;
    }
    uint _2330 = _2083 + 8u;
    float _2343 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2083].w)) * _616) * 0.949999988079071044921875);
    float _2344 = _2343 * _2343;
    float _2345 = cbLight._m0[_2083].x + _693;
    float _2346 = cbLight._m0[_2083].y + _694;
    float _2347 = cbLight._m0[_2083].z + _695;
    float _2351 = inversesqrt(dot(vec3(_2345, _2346, _2347), vec3(_2345, _2346, _2347)));
    float _2352 = _2351 * _2345;
    float _2353 = _2351 * _2346;
    float _2354 = _2351 * _2347;
    float _2355 = dot(vec3(_613, _614, _615), vec3(cbLight._m0[_2083].xyz));
    float _4394 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
    float _2358 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
    float _4405 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _2359 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
    float _2360 = dot(vec3(_613, _614, _615), vec3(_2352, _2353, _2354));
    float _4416 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
    float _2363 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
    float _2364 = dot(vec3(cbLight._m0[_2083].xyz), vec3(_2352, _2353, _2354));
    float _4427 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
    float _2368 = _2344 * _2344;
    float _2372 = ((_2363 * _2363) * (_2368 + (-1.0))) + 1.0;
    float _2380 = exp2(log2(1.0 - (isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0)))) * 5.0);
    float _2381 = 0.959999978542327880859375 - _760;
    float _2383 = 0.959999978542327880859375 - _761;
    float _2384 = 0.959999978542327880859375 - _762;
    float _2391 = 1.0 - _2344;
    float _2402 = (0.5 / (((_2359 * ((_2358 * _2391) + _2344)) + 9.9999999392252902907785028219223e-09) + (((_2359 * _2391) + _2344) * _2358))) * _2358;
    float _4438 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
    float _2404 = (isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0))) * (_2368 / ((_2372 * _2372) * 3.141590118408203125));
    uint _2418 = _2083 + 9u;
    float _2429 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2123].w)) * _616) * 0.949999988079071044921875);
    float _2430 = _2429 * _2429;
    float _2431 = cbLight._m0[_2123].x + _693;
    float _2432 = cbLight._m0[_2123].y + _694;
    float _2433 = cbLight._m0[_2123].z + _695;
    float _2437 = inversesqrt(dot(vec3(_2431, _2432, _2433), vec3(_2431, _2432, _2433)));
    float _2438 = _2437 * _2431;
    float _2439 = _2437 * _2432;
    float _2440 = _2437 * _2433;
    float _2441 = dot(vec3(_613, _614, _615), vec3(cbLight._m0[_2123].xyz));
    float _4449 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
    float _2444 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
    float _2445 = dot(vec3(_613, _614, _615), vec3(_2438, _2439, _2440));
    float _4460 = isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0));
    float _2448 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
    float _2449 = dot(vec3(cbLight._m0[_2123].xyz), vec3(_2438, _2439, _2440));
    float _4471 = isnan(0.0) ? _2449 : (isnan(_2449) ? 0.0 : max(_2449, 0.0));
    float _2453 = _2430 * _2430;
    float _2457 = ((_2448 * _2448) * (_2453 + (-1.0))) + 1.0;
    float _2464 = exp2(log2(1.0 - (isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0)))) * 5.0);
    float _2471 = 1.0 - _2430;
    float _2481 = (0.5 / (((_2359 * ((_2444 * _2471) + _2430)) + 9.9999999392252902907785028219223e-09) + (((_2359 * _2471) + _2430) * _2444))) * _2444;
    float _4482 = isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0));
    float _2483 = (isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0))) * (_2453 / ((_2457 * _2457) * 3.141590118408203125));
    float _2493 = (((((_2464 * _2381) + _763) * cbLight._m0[_2418].x) * _2483) * _2106) + ((((cbLight._m0[_2330].x * _2072) * ((_2380 * _2381) + _763)) * _2404) * _2119);
    float _2494 = (((((_2464 * _2383) + _765) * cbLight._m0[_2418].y) * _2483) * _2106) + ((((cbLight._m0[_2330].y * _2074) * ((_2380 * _2383) + _765)) * _2404) * _2119);
    float _2495 = (((((_2464 * _2384) + _766) * cbLight._m0[_2418].z) * _2483) * _2106) + ((((cbLight._m0[_2330].z * _2076) * ((_2380 * _2384) + _766)) * _2404) * _2119);
    float _2551;
    float _2553;
    float _2555;
    if (_2159)
    {
        _2551 = _2493;
        _2553 = _2494;
        _2555 = _2495;
    }
    else
    {
        uint _2557 = _2083 + 2u;
        uint _2561 = _2083 + 10u;
        float _2575 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2557].w)) * _616) * 0.949999988079071044921875);
        float _2576 = _2575 * _2575;
        float _2577 = cbLight._m0[_2557].x + _693;
        float _2578 = cbLight._m0[_2557].y + _694;
        float _2579 = cbLight._m0[_2557].z + _695;
        float _2583 = inversesqrt(dot(vec3(_2577, _2578, _2579), vec3(_2577, _2578, _2579)));
        float _2584 = _2583 * _2577;
        float _2585 = _2583 * _2578;
        float _2586 = _2583 * _2579;
        float _2587 = dot(vec3(_613, _614, _615), vec3(cbLight._m0[_2557].xyz));
        float _4493 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
        float _2590 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
        float _2591 = dot(vec3(_613, _614, _615), vec3(_2584, _2585, _2586));
        float _4504 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0));
        float _2594 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
        float _2595 = dot(vec3(cbLight._m0[_2557].xyz), vec3(_2584, _2585, _2586));
        float _4515 = isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : max(_2595, 0.0));
        float _2599 = _2576 * _2576;
        float _2603 = ((_2594 * _2594) * (_2599 + (-1.0))) + 1.0;
        float _2610 = exp2(log2(1.0 - (isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0)))) * 5.0);
        float _2617 = 1.0 - _2576;
        float _2627 = (0.5 / (((_2359 * ((_2590 * _2617) + _2576)) + 9.9999999392252902907785028219223e-09) + (((_2359 * _2617) + _2576) * _2590))) * _2590;
        float _4526 = isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : max(_2627, 0.0));
        float _2629 = (isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0))) * (_2599 / ((_2603 * _2603) * 3.141590118408203125));
        float _2630 = isnan(1.0) ? _2098 : (isnan(_2098) ? 1.0 : min(_2098, 1.0));
        _2551 = (((((_2610 * _2381) + _763) * cbLight._m0[_2561].x) * _2629) * _2630) + _2493;
        _2553 = (((((_2610 * _2383) + _765) * cbLight._m0[_2561].y) * _2629) * _2630) + _2494;
        _2555 = (((((_2610 * _2384) + _766) * cbLight._m0[_2561].z) * _2629) * _2630) + _2495;
    }
    float _2661;
    float _2663;
    float _2665;
    if (_2268)
    {
        _2661 = _2551;
        _2663 = _2553;
        _2665 = _2555;
    }
    else
    {
        uint _2672 = _2083 + 3u;
        uint _2676 = _2083 + 11u;
        float _2690 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2672].w)) * _616) * 0.949999988079071044921875);
        float _2691 = _2690 * _2690;
        float _2692 = cbLight._m0[_2672].x + _693;
        float _2693 = cbLight._m0[_2672].y + _694;
        float _2694 = cbLight._m0[_2672].z + _695;
        float _2698 = inversesqrt(dot(vec3(_2692, _2693, _2694), vec3(_2692, _2693, _2694)));
        float _2699 = _2698 * _2692;
        float _2700 = _2698 * _2693;
        float _2701 = _2698 * _2694;
        float _2702 = dot(vec3(_613, _614, _615), vec3(cbLight._m0[_2672].xyz));
        float _4542 = isnan(0.0) ? _2702 : (isnan(_2702) ? 0.0 : max(_2702, 0.0));
        float _2705 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
        float _2706 = dot(vec3(_613, _614, _615), vec3(_2699, _2700, _2701));
        float _4553 = isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : max(_2706, 0.0));
        float _2709 = isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0));
        float _2710 = dot(vec3(cbLight._m0[_2672].xyz), vec3(_2699, _2700, _2701));
        float _4564 = isnan(0.0) ? _2710 : (isnan(_2710) ? 0.0 : max(_2710, 0.0));
        float _2714 = _2691 * _2691;
        float _2718 = ((_2709 * _2709) * (_2714 + (-1.0))) + 1.0;
        float _2725 = exp2(log2(1.0 - (isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0)))) * 5.0);
        float _2732 = 1.0 - _2691;
        float _2742 = (0.5 / (((_2359 * ((_2705 * _2732) + _2691)) + 9.9999999392252902907785028219223e-09) + (((_2359 * _2732) + _2691) * _2705))) * _2705;
        float _4575 = isnan(0.0) ? _2742 : (isnan(_2742) ? 0.0 : max(_2742, 0.0));
        float _2744 = (isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0))) * (_2714 / ((_2718 * _2718) * 3.141590118408203125));
        float _2745 = isnan(1.0) ? _2099 : (isnan(_2099) ? 1.0 : min(_2099, 1.0));
        _2661 = (((((_2725 * _2381) + _763) * cbLight._m0[_2676].x) * _2744) * _2745) + _2551;
        _2663 = (((((_2725 * _2383) + _765) * cbLight._m0[_2676].y) * _2744) * _2745) + _2553;
        _2665 = (((((_2725 * _2384) + _766) * cbLight._m0[_2676].z) * _2744) * _2745) + _2555;
    }
    float _2811;
    float _2813;
    float _2815;
    float _2817;
    float _2819;
    float _2821;
    if (_2081.y == 0u)
    {
        uvec4 _2766 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2767 = _2766.x;
        uint _2778 = uint((float(_2766.y) * floor(float(uint(cbSceneParam._m0[85u].y * _702) / _2767))) + floor(float(uint(cbSceneParam._m0[85u].x * _701) / _2767)));
        float _2788 = (log2(_1859 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2789 = isnan(0.0) ? _2788 : (isnan(_2788) ? 0.0 : max(_2788, 0.0));
        uint _2792 = uint(isnan(14.0) ? _2789 : (isnan(_2789) ? 14.0 : min(_2789, 14.0)));
        uvec4 _2797 = texelFetch(g_lightClusterGridBuffer, int(((_2792 << 2u) + (_2778 << 6u)) >> 2u));
        uint _2798 = _2797.x;
        uint _2799 = _2766.z;
        float _2878;
        float _2880;
        float _2882;
        float _2884;
        float _2886;
        float _2888;
        if (((((1u << ((_2799 >> 4u) & 15u)) + 4294967295u) & _2798) == 0u) || ((_2799 & 240u) == 0u))
        {
            _2878 = 0.0;
            _2880 = 0.0;
            _2882 = 0.0;
            _2884 = 0.0;
            _2886 = 0.0;
            _2888 = 0.0;
        }
        else
        {
            float _2879;
            float _2881;
            float _2883;
            float _2885;
            float _2887;
            float _2889;
            float _3023 = 0.0;
            float _3024 = 0.0;
            float _3025 = 0.0;
            float _3026 = 0.0;
            float _3027 = 0.0;
            float _3028 = 0.0;
            uint _3029 = 0u;
            uint _3038;
            bool _3039;
            for (;;)
            {
                _3038 = texelFetch(g_lightClassification, int((((_2792 << 5u) + (_2778 << 9u)) + (_3029 << 2u)) >> 2u)).x;
                _3039 = _3038 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3039)
                {
                    frontier_phi_66_pred = _3028;
                    frontier_phi_66_pred_1 = _3027;
                    frontier_phi_66_pred_2 = _3026;
                    frontier_phi_66_pred_3 = _3025;
                    frontier_phi_66_pred_4 = _3024;
                    frontier_phi_66_pred_5 = _3023;
                }
                else
                {
                    float _3147;
                    float _3148;
                    float _3149;
                    float _3150;
                    float _3151;
                    float _3152;
                    uint _3153;
                    _3147 = _3023;
                    _3148 = _3024;
                    _3149 = _3025;
                    _3150 = _3026;
                    _3151 = _3027;
                    _3152 = _3028;
                    _3153 = _3038;
                    float _3079;
                    float _3080;
                    float _3081;
                    float _3082;
                    float _3083;
                    float _3084;
                    for (;;)
                    {
                        uint _3157 = uint(findLSB(_3153)) + (_3029 << 5u);
                        uint _3154 = (_3153 + 4294967295u) & _3153;
                        uint _3159 = _3157 * 48u;
                        vec4 _3173 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3159)).x, texelFetch(g_PointLightRenderingBuffer, int(_3159 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3159 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3159 + 3u)).x));
                        uint _3179 = (_3157 * 48u) + 4u;
                        vec4 _3192 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3179)).x, texelFetch(g_PointLightRenderingBuffer, int(_3179 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3179 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3179 + 3u)).x));
                        uint _3198 = (_3157 * 48u) + 8u;
                        vec3 _3209 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3198)).x, texelFetch(g_PointLightRenderingBuffer, int(_3198 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3198 + 2u)).x));
                        float _3213 = _3173.x - _1857;
                        float _3214 = _3173.y - _1858;
                        float _3215 = _3173.z - _1859;
                        float _3216 = dot(vec3(_3213, _3214, _3215), vec3(_3213, _3214, _3215));
                        float _3219 = inversesqrt(_3216);
                        float _3220 = _3219 * _3213;
                        float _3221 = _3219 * _3214;
                        float _3222 = _3219 * _3215;
                        float _3223 = dot(vec3(_720, _723, _726), vec3(_3220, _3221, _3222));
                        float _3228 = 1.0 - (_3216 * _3173.w);
                        float _4601 = isnan(0.0) ? _3228 : (isnan(_3228) ? 0.0 : max(_3228, 0.0));
                        float _3229 = isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0));
                        float _3230 = sqrt(_3216) * _3192.w;
                        float _3233 = 1.39999997615814208984375 / (_3230 + 1.39999997615814208984375);
                        float _3234 = _3233 * _3233;
                        float _3237 = ((1.0 - _3234) * _3223) + _3234;
                        float _3240 = _3230 * _3230;
                        float _3244 = ((isnan(0.0) ? _3237 : (isnan(_3237) ? 0.0 : max(_3237, 0.0))) * _3229) / ((_3240 * 0.699999988079071044921875) + 1.0);
                        float _3248 = (-0.0) - _1857;
                        float _3249 = (-0.0) - _1858;
                        float _3250 = (-0.0) - _1859;
                        float _3254 = inversesqrt(dot(vec3(_3248, _3249, _3250), vec3(_3248, _3249, _3250)));
                        float _3255 = _3254 * _3248;
                        float _3256 = _3254 * _3249;
                        float _3257 = _3254 * _3250;
                        float _3264 = exp2(log2(1.0 / ((_3240 * 3.5) + 5.0)) * 0.25);
                        float _3265 = 1.0 - _795;
                        float _3272 = sqrt(1.0 - ((1.0 - (_3265 * _3265)) * (1.0 - (_3264 * _3264))));
                        float _3273 = _3272 * _3272;
                        float _3274 = _3273 * _3273;
                        float _3275 = _3255 + _3220;
                        float _3276 = _3256 + _3221;
                        float _3277 = _3257 + _3222;
                        float _3281 = inversesqrt(dot(vec3(_3275, _3276, _3277), vec3(_3275, _3276, _3277)));
                        float _3285 = dot(vec3(_720, _723, _726), vec3(_3255, _3256, _3257));
                        float _4617 = isnan(0.0) ? _3285 : (isnan(_3285) ? 0.0 : max(_3285, 0.0));
                        float _3288 = isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0));
                        float _3289 = dot(vec3(_720, _723, _726), vec3(_3281 * _3275, _3281 * _3276, _3281 * _3277));
                        float _4628 = isnan(0.0) ? _3289 : (isnan(_3289) ? 0.0 : max(_3289, 0.0));
                        float _3292 = isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0));
                        float _3296 = ((_3292 * _3292) * (_3274 + (-1.0))) + 1.0;
                        float _3297 = _3233 * _3273;
                        float _3298 = _3297 * _3297;
                        float _3301 = ((1.0 - _3298) * _3223) + _3298;
                        float _4639 = isnan(0.0) ? _3301 : (isnan(_3301) ? 0.0 : max(_3301, 0.0));
                        float _3302 = isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0));
                        float _3303 = 1.0 - _3273;
                        float _3313 = (0.5 / (((_3302 * ((_3288 * _3303) + _3273)) + 9.9999999392252902907785028219223e-09) + (((_3302 * _3303) + _3273) * _3288))) * _3302;
                        float _4650 = isnan(0.0) ? _3313 : (isnan(_3313) ? 0.0 : max(_3313, 0.0));
                        float _3324 = (((_3274 * 3.1415927410125732421875) * (isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0)))) / ((_3296 * _3296) * ((_3240 * 2.1991131305694580078125) + 3.141590118408203125))) * _3229;
                        _3082 = (_3244 * _3192.x) + _3150;
                        _3083 = (_3244 * _3192.y) + _3151;
                        _3084 = (_3244 * _3192.z) + _3152;
                        _3079 = (_3324 * _3209.x) + _3147;
                        _3080 = (_3324 * _3209.y) + _3148;
                        _3081 = (_3324 * _3209.z) + _3149;
                        if (_3154 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3147 = _3079;
                            _3148 = _3080;
                            _3149 = _3081;
                            _3150 = _3082;
                            _3151 = _3083;
                            _3152 = _3084;
                            _3153 = _3154;
                        }
                    }
                    frontier_phi_66_pred = _3084;
                    frontier_phi_66_pred_1 = _3083;
                    frontier_phi_66_pred_2 = _3082;
                    frontier_phi_66_pred_3 = _3081;
                    frontier_phi_66_pred_4 = _3080;
                    frontier_phi_66_pred_5 = _3079;
                }
                _2889 = frontier_phi_66_pred;
                _2887 = frontier_phi_66_pred_1;
                _2885 = frontier_phi_66_pred_2;
                _2883 = frontier_phi_66_pred_3;
                _2881 = frontier_phi_66_pred_4;
                _2879 = frontier_phi_66_pred_5;
                uint _3030 = _3029 + 1u;
                if (_3030 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3023 = _2879;
                    _3024 = _2881;
                    _3025 = _2883;
                    _3026 = _2885;
                    _3027 = _2887;
                    _3028 = _2889;
                    _3029 = _3030;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2878 = _2879;
            _2880 = _2881;
            _2882 = _2883;
            _2884 = _2885;
            _2886 = _2887;
            _2888 = _2889;
        }
        uvec4 _2892 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2893 = _2892.z;
        uint _2895 = (_2893 >> 8u) & 15u;
        float _2991;
        float _2993;
        float _2995;
        float _2997;
        float _2999;
        float _3001;
        if (((4294967295u << _2895) & _2798) == 0u)
        {
            _2991 = _2878;
            _2993 = _2880;
            _2995 = _2882;
            _2997 = _2884;
            _2999 = _2886;
            _3001 = _2888;
        }
        else
        {
            float _3016 = inversesqrt(dot(vec3(_1857, _1858, _1859), vec3(_1857, _1858, _1859)));
            float _3017 = _3016 * _1857;
            float _3018 = _3016 * _1858;
            float _3019 = _3016 * _1859;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2895 < ((_2893 >> 12u) & 15u))
            {
                float _2992;
                float _2994;
                float _2996;
                float _2998;
                float _3000;
                float _3002;
                float _3130 = _2878;
                float _3131 = _2880;
                float _3132 = _2882;
                float _3133 = _2884;
                float _3134 = _2886;
                float _3135 = _2888;
                uint _3136 = _2895;
                uint _3145;
                bool _3146;
                for (;;)
                {
                    _3145 = texelFetch(g_lightClassification, int((((_2792 << 5u) + (_2778 << 9u)) + (_3136 << 2u)) >> 2u)).x;
                    _3146 = _3145 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3146)
                    {
                        frontier_phi_72_pred = _3135;
                        frontier_phi_72_pred_1 = _3134;
                        frontier_phi_72_pred_2 = _3133;
                        frontier_phi_72_pred_3 = _3132;
                        frontier_phi_72_pred_4 = _3131;
                        frontier_phi_72_pred_5 = _3130;
                    }
                    else
                    {
                        float _3329;
                        float _3330;
                        float _3331;
                        float _3332;
                        float _3333;
                        float _3334;
                        float _3622;
                        float _3623;
                        float _3624;
                        float _3625;
                        float _3626;
                        float _3627;
                        float _3342 = _3130;
                        float _3343 = _3131;
                        float _3344 = _3132;
                        float _3345 = _3133;
                        float _3346 = _3134;
                        float _3347 = _3135;
                        uint _3348 = _3145;
                        uint _3349;
                        vec4 _3374;
                        float _3375;
                        vec4 _3390;
                        vec3 _3402;
                        vec4 _3417;
                        vec4 _3432;
                        float _3478;
                        bool _3479;
                        for (;;)
                        {
                            uint _3359 = ((_3136 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3348));
                            _3349 = (_3348 + 4294967295u) & _3348;
                            uint _3361 = _3359 * 40u;
                            _3374 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3361)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 3u)).x));
                            _3375 = _3374.w;
                            uint _3377 = (_3359 * 40u) + 4u;
                            _3390 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3377)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 3u)).x));
                            uint _3392 = (_3359 * 40u) + 8u;
                            _3402 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3392)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 2u)).x));
                            uint _3404 = (_3359 * 40u) + 16u;
                            _3417 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3404)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 3u)).x));
                            uint _3419 = (_3359 * 40u) + 20u;
                            _3432 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3419)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 3u)).x));
                            uint _3434 = (_3359 * 40u) + 24u;
                            vec4 _3447 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3434)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 3u)).x));
                            uint _3453 = (_3359 * 40u) + 28u;
                            vec4 _3466 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3453)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 3u)).x));
                            _3478 = fma(_1859, _3466.z, fma(_1858, _3466.y, _3466.x * _1857)) + _3466.w;
                            _3479 = !((fma(_1859, _3447.z, fma(_1858, _3447.y, _3447.x * _1857)) + _3447.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3479)
                            {
                                float _3506 = _3374.x - _1857;
                                float _3507 = _3374.y - _1858;
                                float _3508 = _3374.z - _1859;
                                float _3509 = dot(vec3(_3506, _3507, _3508), vec3(_3506, _3507, _3508));
                                float _3512 = inversesqrt(_3509);
                                float _3513 = _3512 * _3506;
                                float _3514 = _3512 * _3507;
                                float _3515 = _3512 * _3508;
                                float _3519 = 1.0 - (_3509 / (_3375 * _3375));
                                float _4661 = isnan(0.0) ? _3519 : (isnan(_3519) ? 0.0 : max(_3519, 0.0));
                                float _3520 = isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0));
                                float _3524 = sqrt(_3509) * _3390.w;
                                float _3526 = 1.39999997615814208984375 / (_3524 + 1.39999997615814208984375);
                                float _3527 = _3526 * _3526;
                                float _3530 = ((1.0 - _3527) * dot(vec3(_3513, _3514, _3515), vec3(_720, _723, _726))) + _3527;
                                float _3533 = _3524 * _3524;
                                float _3537 = (fma(_1859, _3417.z, fma(_1858, _3417.y, _3417.x * _1857)) + _3417.w) / _3478;
                                float _3538 = (fma(_1859, _3432.z, fma(_1858, _3432.y, _3432.x * _1857)) + _3432.w) / _3478;
                                float _3542 = 1.0 - dot(vec2(_3537, _3538), vec2(_3537, _3538));
                                float _4677 = isnan(0.0) ? _3542 : (isnan(_3542) ? 0.0 : max(_3542, 0.0));
                                float _3543 = isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0));
                                float _3544 = _3543 * (((isnan(0.0) ? _3530 : (isnan(_3530) ? 0.0 : max(_3530, 0.0))) * _3520) / ((_3533 * 0.699999988079071044921875) + 1.0));
                                float _3556 = exp2(log2(1.0 / ((_3533 * 3.5) + 5.0)) * 0.25);
                                float _3557 = 1.0 - _795;
                                float _3564 = sqrt(1.0 - ((1.0 - (_3557 * _3557)) * (1.0 - (_3556 * _3556))));
                                float _3565 = _3564 * _3564;
                                float _3566 = _3565 * _3565;
                                float _3567 = _3513 - _3017;
                                float _3568 = _3514 - _3018;
                                float _3569 = _3515 - _3019;
                                float _3573 = inversesqrt(dot(vec3(_3567, _3568, _3569), vec3(_3567, _3568, _3569)));
                                float _3577 = dot(vec3(_720, _723, _726), vec3((-0.0) - _3017, (-0.0) - _3018, (-0.0) - _3019));
                                float _4688 = isnan(0.0) ? _3577 : (isnan(_3577) ? 0.0 : max(_3577, 0.0));
                                float _3580 = isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0));
                                float _3581 = dot(vec3(_720, _723, _726), vec3(_3573 * _3567, _3573 * _3568, _3573 * _3569));
                                float _4699 = isnan(0.0) ? _3581 : (isnan(_3581) ? 0.0 : max(_3581, 0.0));
                                float _3584 = isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0));
                                float _3588 = ((_3584 * _3584) * (_3566 + (-1.0))) + 1.0;
                                float _3589 = _3526 * _3565;
                                float _3590 = _3589 * _3589;
                                float _3596 = ((1.0 - _3590) * dot(vec3(_720, _723, _726), vec3(_3513, _3514, _3515))) + _3590;
                                float _4710 = isnan(0.0) ? _3596 : (isnan(_3596) ? 0.0 : max(_3596, 0.0));
                                float _3597 = isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0));
                                float _3598 = 1.0 - _3565;
                                float _3608 = (0.5 / (((_3597 * ((_3580 * _3598) + _3565)) + 9.9999999392252902907785028219223e-09) + (((_3597 * _3598) + _3565) * _3580))) * _3597;
                                float _4721 = isnan(0.0) ? _3608 : (isnan(_3608) ? 0.0 : max(_3608, 0.0));
                                float _3618 = (_3543 * _3520) * (((_3566 * 3.1415927410125732421875) * (isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0)))) / ((_3588 * _3588) * ((_3533 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3544 * _3390.y;
                                frontier_phi_78_pred_1 = _3544 * _3390.x;
                                frontier_phi_78_pred_2 = _3618 * _3402.z;
                                frontier_phi_78_pred_3 = _3618 * _3402.y;
                                frontier_phi_78_pred_4 = _3618 * _3402.x;
                                frontier_phi_78_pred_5 = _3544 * _3390.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3626 = frontier_phi_78_pred;
                            _3625 = frontier_phi_78_pred_1;
                            _3624 = frontier_phi_78_pred_2;
                            _3623 = frontier_phi_78_pred_3;
                            _3622 = frontier_phi_78_pred_4;
                            _3627 = frontier_phi_78_pred_5;
                            _3332 = _3625 + _3345;
                            _3333 = _3626 + _3346;
                            _3334 = _3627 + _3347;
                            _3329 = _3622 + _3342;
                            _3330 = _3623 + _3343;
                            _3331 = _3624 + _3344;
                            if (_3349 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3342 = _3329;
                                _3343 = _3330;
                                _3344 = _3331;
                                _3345 = _3332;
                                _3346 = _3333;
                                _3347 = _3334;
                                _3348 = _3349;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3334;
                        frontier_phi_72_pred_1 = _3333;
                        frontier_phi_72_pred_2 = _3332;
                        frontier_phi_72_pred_3 = _3331;
                        frontier_phi_72_pred_4 = _3330;
                        frontier_phi_72_pred_5 = _3329;
                    }
                    _3002 = frontier_phi_72_pred;
                    _3000 = frontier_phi_72_pred_1;
                    _2998 = frontier_phi_72_pred_2;
                    _2996 = frontier_phi_72_pred_3;
                    _2994 = frontier_phi_72_pred_4;
                    _2992 = frontier_phi_72_pred_5;
                    uint _3137 = _3136 + 1u;
                    if (_3137 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3130 = _2992;
                        _3131 = _2994;
                        _3132 = _2996;
                        _3133 = _2998;
                        _3134 = _3000;
                        _3135 = _3002;
                        _3136 = _3137;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3002;
                frontier_phi_60_61_ladder_1 = _3000;
                frontier_phi_60_61_ladder_2 = _2996;
                frontier_phi_60_61_ladder_3 = _2994;
                frontier_phi_60_61_ladder_4 = _2992;
                frontier_phi_60_61_ladder_5 = _2998;
            }
            else
            {
                frontier_phi_60_61_ladder = _2888;
                frontier_phi_60_61_ladder_1 = _2886;
                frontier_phi_60_61_ladder_2 = _2882;
                frontier_phi_60_61_ladder_3 = _2880;
                frontier_phi_60_61_ladder_4 = _2878;
                frontier_phi_60_61_ladder_5 = _2884;
            }
            _2991 = frontier_phi_60_61_ladder_4;
            _2993 = frontier_phi_60_61_ladder_3;
            _2995 = frontier_phi_60_61_ladder_2;
            _2997 = frontier_phi_60_61_ladder_5;
            _2999 = frontier_phi_60_61_ladder_1;
            _3001 = frontier_phi_60_61_ladder;
        }
        float _3006 = isnan(1.0) ? _779 : (isnan(_779) ? 1.0 : min(_779, 1.0));
        _2811 = (_3006 * _2997) + _2323;
        _2813 = (_3006 * _2999) + _2325;
        _2815 = (_3006 * _3001) + _2327;
        _2817 = ((_2991 * _763) * _3006) + _2661;
        _2819 = ((_2993 * _765) * _3006) + _2663;
        _2821 = ((_2995 * _766) * _3006) + _2665;
    }
    else
    {
        _2811 = _2323;
        _2813 = _2325;
        _2815 = _2327;
        _2817 = _2661;
        _2819 = _2663;
        _2821 = _2665;
    }
    float _4737 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _4748 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    float _4759 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    uint _2841 = _264 + 6u;
    float _2849 = _701 / cbSceneParam._m0[86u].x;
    float _2850 = _702 / cbSceneParam._m0[86u].y;
    vec4 _2864 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2849, _2850, (log2((isnan(cbSceneParam._m0[77u].w) ? _635 : (isnan(_635) ? cbSceneParam._m0[77u].w : min(_635, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2866 = _2864.x;
    float _2867 = _2864.y;
    float _2868 = _2864.z;
    float _2869 = _2864.w;
    float _2941;
    float _2943;
    float _2945;
    float _2947;
    if (_635 > cbSceneParam._m0[78u].w)
    {
        float _2903 = isnan(_635) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _635 : min(cbSceneParam._m0[80u].w, _635));
        float _2904 = _2903 / _635;
        float _2915 = _2904 * _686;
        float _2916 = _687 * _2904;
        float _2917 = (-0.0) - _2916;
        float _2919 = _2904 * _688;
        float _2921 = (cbSceneParam._m0[77u].w * _2917) / _2903;
        float _2922 = _2921 + cbSceneParam._m0[79u].w;
        float _2923 = cbSceneParam._m0[79u].w - _2916;
        float _2929 = sqrt(((_2915 * _2915) + (_2916 * _2916)) + (_2919 * _2919));
        float _2932 = (1.0 - (cbSceneParam._m0[77u].w / _2903)) * _2929;
        float _2937 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2939 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3092;
        if (abs((_2917 - _2921) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3092 = ((((_2922 > 0.0) ? exp2(_2937 * _2922) : (2.0 - exp2(_2939 * _2922))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2932;
        }
        else
        {
            float _3052 = 1.0 / cbSceneParam._m0[80u].x;
            float _3053 = isnan(_2923) ? _2922 : (isnan(_2922) ? _2923 : max(_2922, _2923));
            float _3054 = isnan(_2923) ? _2922 : (isnan(_2922) ? _2923 : min(_2922, _2923));
            float _3063 = isnan(0.0) ? _3053 : (isnan(_3053) ? 0.0 : min(_3053, 0.0));
            float _3064 = isnan(0.0) ? _3054 : (isnan(_3054) ? 0.0 : min(_3054, 0.0));
            _3092 = ((abs(_2929 / _2917) * cbSceneParam._m0[80u].y) * ((((_3063 - _3064) * 2.0) - ((exp2(_2937 * (isnan(0.0) ? _3053 : (isnan(_3053) ? 0.0 : max(_3053, 0.0)))) - exp2(_2937 * (isnan(0.0) ? _3054 : (isnan(_3054) ? 0.0 : max(_3054, 0.0))))) * _3052)) - ((exp2(_2939 * _3063) - exp2(_2939 * _3064)) * _3052))) + (_2932 * cbSceneParam._m0[80u].z);
        }
        vec4 _3094 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2849, _2850, 1.0), 0.0);
        float _3103 = exp2((_3092 * (-1.44269502162933349609375)) * (1.0 - _3094.w));
        float _3104 = log2(_3103);
        float _3120 = log2(_2869);
        _2941 = (exp2(_3120 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3104 * cbSceneParam._m0[78u].x)) * _3094.x) / cbSceneParam._m0[78u].x)) + _2866;
        _2943 = (exp2(_3120 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3104 * cbSceneParam._m0[78u].y)) * _3094.y) / cbSceneParam._m0[78u].y)) + _2867;
        _2945 = (exp2(_3120 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3104 * cbSceneParam._m0[78u].z)) * _3094.z) / cbSceneParam._m0[78u].z)) + _2868;
        _2947 = _3103 * _2869;
    }
    else
    {
        _2941 = _2866;
        _2943 = _2867;
        _2945 = _2868;
        _2947 = _2869;
    }
    float _2959 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2960 = _2959 == 3.0;
    float _2961 = log2(_2947);
    float _2968 = exp2(_2961 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0))) * (_2811 + ((isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0))) * _779))) + ((_2817 + ((isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0))) * _1587)) * cbPerFrame._m0[3u].x));
    float _2969 = exp2(_2961 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0))) * (_2813 + ((isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0))) * _779))) + ((_2819 + ((isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0))) * _1587)) * cbPerFrame._m0[3u].x));
    float _2970 = exp2(_2961 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0))) * (_2815 + ((isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0))) * _779))) + ((_2821 + ((isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0))) * _1587)) * cbPerFrame._m0[3u].x));
    float _2979 = (_2959 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2979 * (_2960 ? _2968 : (_2968 + (cbSceneParam._m0[72u].w * _2941)));
    SV_Target.y = _2979 * (_2960 ? _2969 : (_2969 + (cbSceneParam._m0[72u].w * _2943)));
    SV_Target.z = _2979 * (_2960 ? _2970 : (_2970 + (cbSceneParam._m0[72u].w * _2945)));
    SV_Target.w = cbInstanceData._m0[_2841].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2841].w;
}


