#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1127;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _205 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _206 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _207 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _213 = inversesqrt(dot(vec3(_205, _206, _207), vec3(_205, _206, _207)));
    float _214 = _213 * _205;
    float _215 = _213 * _206;
    float _216 = _213 * _207;
    float _220 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _221 = _220 * NORMAL.x;
    float _222 = _220 * NORMAL.y;
    float _223 = _220 * NORMAL.z;
    float _227 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _228 = _227 * TANGENT.x;
    float _229 = _227 * TANGENT.y;
    float _230 = _227 * TANGENT.z;
    uint _233 = uint(roundEven(NORMAL.w)) * 13u;
    uint _238 = _233 + 1u;
    uint _242 = _233 + 2u;
    float _251 = sqrt(((cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x) + (cbInstanceData._m0[_233].x * cbInstanceData._m0[_233].x)) + (cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x));
    float _252 = _251 * TEXCOORD.z;
    float _253 = _251 * TEXCOORD.w;
    vec4 _272 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _278 = _272.x * cbMtdParam._m0[9u].x;
    float _279 = _272.y * cbMtdParam._m0[9u].y;
    float _280 = _272.z * cbMtdParam._m0[9u].z;
    vec4 _298 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _302 = _298.z;
    float _307 = (_298.x * 2.0) + (-1.0);
    float _309 = (_298.y * 2.0) + (-1.0);
    float _310 = dot(vec2(_307, _309), vec2(_307, _309));
    float _3456 = isnan(0.0) ? _310 : (isnan(_310) ? 0.0 : max(_310, 0.0));
    float _316 = sqrt(1.0 - (isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0))));
    float _319 = fma(_316, _221, fma(_309, _228, _307 * _214));
    float _322 = fma(_316, _222, fma(_309, _229, _307 * _215));
    float _325 = fma(_316, _223, fma(_309, _230, _307 * _216));
    float _329 = inversesqrt(dot(vec3(_319, _322, _325), vec3(_319, _322, _325)));
    vec4 _365 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _252) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _253) + cbTextureTilingScale._m0[11u].w));
    float _367 = _365.x;
    float _368 = 1.0 - _367;
    float _377 = (cbMtdParam._m0[19u].x + dot(vec4(_329 * _319, _329 * _322, _329 * _325, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_367 - _368) * cbMtdParam._m0[24u].z) + _368) * cbMtdParam._m0[21u].z);
    float _3467 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _378 = isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0));
    float _380 = (-0.0) - cbMtdParam._m0[24u].x;
    float _382 = isnan(0.0) ? _380 : (isnan(_380) ? 0.0 : max(_380, 0.0));
    float _383 = isnan(1.0) ? _382 : (isnan(_382) ? 1.0 : min(_382, 1.0));
    float _390 = _378 - ((_378 * TEXCOORD_8.x) * _383);
    float _391 = _378 - ((_378 * TEXCOORD_8.y) * _383);
    float _392 = _378 - ((_378 * TEXCOORD_8.z) * _383);
    float _399 = (_390 * (cbMtdParam._m0[17u].x - _278)) + _278;
    float _400 = (_391 * (cbMtdParam._m0[17u].y - _279)) + _279;
    float _401 = (_392 * (cbMtdParam._m0[17u].z - _280)) + _280;
    vec4 _413 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _252) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _253) + cbTextureTilingScale._m0[19u].w));
    float _415 = _413.x;
    float _416 = 1.0 - _415;
    float _446 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_415 - _416) * cbMtdParam._m0[24u].w) + _416) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3488 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _447 = isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0));
    float _455 = ((((cbMtdParam._m0[10u].x - _399) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _447) + _399;
    float _456 = ((((cbMtdParam._m0[10u].y - _400) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _447) + _400;
    float _457 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _401)) * _447) + _401;
    vec4 _470 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _472 = _470.x;
    float _474 = _472 - (_472 * _390);
    float _476 = _474 - (_474 * _447);
    vec4 _490 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _252) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _253) + cbTextureTilingScale._m0[15u].w));
    float _497 = (_490.x * 2.0) + (-1.0);
    float _498 = (_490.y * 2.0) + (-1.0);
    float _499 = dot(vec2(_497, _498), vec2(_497, _498));
    float _3499 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    float _507 = ((_490.z - _302) * _390) + _302;
    float _510 = ((cbMtdParam._m0[23u].y - _507) * _447) + _507;
    vec4 _529 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _252) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _253) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _535 = (_529.x * 2.0) + (-1.0);
    float _536 = (_529.y * 2.0) + (-1.0);
    float _537 = dot(vec2(_535, _536), vec2(_535, _536));
    float _3510 = isnan(0.0) ? _537 : (isnan(_537) ? 0.0 : max(_537, 0.0));
    float _552 = ((sqrt(1.0 - (isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0)))) - _316) * _392) + _316;
    float _555 = (((_497 - _307) * _390) + _307) + (cbMtdParam._m0[21u].x * _307);
    float _556 = (((_498 - _309) * _391) + _309) + (cbMtdParam._m0[21u].x * _309);
    float _567 = (((_535 - _555) + (_555 * cbMtdParam._m0[22u].z)) * _447) + _555;
    float _568 = (((_536 - _556) + (_556 * cbMtdParam._m0[22u].z)) * _447) + _556;
    float _569 = (_447 * (sqrt(1.0 - (isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0)))) - _552)) + _552;
    float _571 = cbMtdParam._m0[22u].x + _298.w;
    float _574 = fma(_569, _221, fma(_568, _228, _567 * _214));
    float _577 = fma(_569, _222, fma(_568, _229, _567 * _215));
    float _580 = fma(_569, _223, fma(_568, _230, _567 * _216));
    float _584 = inversesqrt(dot(vec3(_574, _577, _580), vec3(_574, _577, _580)));
    float _585 = _584 * _574;
    float _586 = _584 * _577;
    float _587 = _584 * _580;
    float _3521 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _588 = isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0));
    float _3532 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _3543 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _3554 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _3565 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _3576 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _593 = isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0));
    float _607 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _647 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _657 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _647);
    float _658 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _647);
    float _659 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _647);
    float _663 = inversesqrt(dot(vec3(_657, _658, _659), vec3(_657, _658, _659)));
    float _664 = _657 * _663;
    float _665 = _658 * _663;
    float _666 = _659 * _663;
    float _672 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _673 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _694 = fma(_587, cbSceneParam._m0[5u].z, fma(_586, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _585));
    float _697 = fma(_587, cbSceneParam._m0[6u].z, fma(_586, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _585));
    float _700 = fma(_587, cbSceneParam._m0[7u].z, fma(_586, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _585));
    uint _714 = (_233 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _720 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0)))) * cbInstanceData._m0[_714].x;
    float _721 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0)))) * cbInstanceData._m0[_714].y;
    float _722 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0)))) * cbInstanceData._m0[_714].z;
    float _3587 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
    float _723 = isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0));
    float _3598 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
    float _724 = isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0));
    float _3609 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
    float _725 = isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0));
    float _726 = 1.0 - _593;
    float _727 = _723 * _726;
    float _728 = _724 * _726;
    float _729 = _725 * _726;
    float _734 = (_723 + (-0.039999999105930328369140625)) * _593;
    float _735 = (_724 + (-0.039999999105930328369140625)) * _593;
    float _736 = (_725 + (-0.039999999105930328369140625)) * _593;
    float _737 = _734 + 0.039999999105930328369140625;
    float _739 = _735 + 0.039999999105930328369140625;
    float _740 = _736 + 0.039999999105930328369140625;
    vec4 _749 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _672, cbSceneParam._m0[86u].y * _673));
    float _753 = ((isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0))) * TEXCOORD_5.w) * _749.x;
    float _754 = dot(vec3(_585, _586, _587), vec3(_664, _665, _666));
    float _757 = _754 * 2.0;
    float _761 = (_757 * _585) - _664;
    float _762 = (_757 * _586) - _665;
    float _763 = (_757 * _587) - _666;
    float _767 = abs(dot(vec3(_664, _665, _666), vec3(_585, _586, _587)));
    float _3620 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _769 = sqrt(_588);
    float _782 = exp2((_769 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_769 * 3.0));
    float _788 = (1.0 - _782) * ((_769 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _789 = _782 * _769;
    float _817 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _821 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _825 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1126;
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    float _1133;
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    float _1141;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _851 = fma(_825, cbModelParam._m0[26u].z, fma(_821, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _817));
        float _855 = fma(_825, cbModelParam._m0[27u].z, fma(_821, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _817));
        float _859 = fma(_825, cbModelParam._m0[28u].z, fma(_821, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _817));
        float _884 = _817 + _585;
        float _885 = _821 + _586;
        float _886 = _825 + _587;
        float _896 = fma(_886, cbModelParam._m0[26u].z, fma(_885, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _884)) - _851;
        float _897 = fma(_886, cbModelParam._m0[27u].z, fma(_885, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _884)) - _855;
        float _898 = fma(_886, cbModelParam._m0[28u].z, fma(_885, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _884)) - _859;
        float _902 = inversesqrt(dot(vec3(_896, _897, _898), vec3(_896, _897, _898)));
        float _915 = ((_902 * _896) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_851 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _916 = ((_902 * _897) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_855 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _917 = ((_902 * _898) / cbModelParam._m0[34u].z) + ((((((_859 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _920 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_915, _916, _917), 0.0);
        vec4 _927 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_915, _916, _917), 0.0);
        vec4 _934 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_915, _916, _917), 0.0);
        vec4 _941 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_915, _916, _917), 0.0);
        float _954 = exp2((_920.w + (-0.5)) * 20.0) * 2.0;
        float _955 = _954 * (_920.x + (-0.5));
        float _956 = _954 * (_920.y + (-0.5));
        float _957 = _954 * (_920.z + (-0.5));
        float _964 = exp2((_927.w + (-0.5)) * 20.0) * 2.0;
        float _965 = _964 * (_927.x + (-0.5));
        float _966 = _964 * (_927.y + (-0.5));
        float _967 = _964 * (_927.z + (-0.5));
        float _974 = exp2((_934.w + (-0.5)) * 20.0) * 2.0;
        float _975 = _974 * (_934.x + (-0.5));
        float _976 = _974 * (_934.y + (-0.5));
        float _977 = _974 * (_934.z + (-0.5));
        float _984 = exp2((_941.w + (-0.5)) * 20.0) * 2.0;
        float _985 = _984 * (_941.x + (-0.5));
        float _986 = _984 * (_941.y + (-0.5));
        float _987 = _984 * (_941.z + (-0.5));
        float _988 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        float _989 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _990 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _991 = _955 * 0.5;
        float _992 = _965 * 0.5;
        float _993 = _975 * 0.5;
        float _994 = dot(vec3(_991, _992, _993), vec3(_991, _992, _993));
        float _999 = (_994 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_994);
        float _1008 = (dot(vec3(_585, _586, _587), vec3(_999 * _991, _999 * _992, _999 * _993)) + 1.0) * 0.5;
        float _3646 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1018 = sqrt(((_992 * _992) + (_991 * _991)) + (_993 * _993)) / (_988 + 9.9999997473787516355514526367188e-06);
        float _3657 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1019 = isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0));
        float _1020 = _1019 * 2.0;
        float _1024 = (1.0 - _1019) / (_1019 + 1.0);
        float _3668 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1025 = isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0));
        float _1034 = ((((1.0 - _1025) * (_1020 + 2.0)) * exp2(log2(isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0))) * (_1020 + 1.0))) + _1025) * _988;
        float _1035 = _956 * 0.5;
        float _1036 = _966 * 0.5;
        float _1037 = _976 * 0.5;
        float _1038 = dot(vec3(_1035, _1036, _1037), vec3(_1035, _1036, _1037));
        float _1043 = (_1038 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1038);
        float _1051 = (dot(vec3(_585, _586, _587), vec3(_1043 * _1035, _1043 * _1036, _1043 * _1037)) + 1.0) * 0.5;
        float _3679 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1060 = sqrt(((_1036 * _1036) + (_1035 * _1035)) + (_1037 * _1037)) / (_989 + 9.9999997473787516355514526367188e-06);
        float _3690 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1061 = isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0));
        float _1062 = _1061 * 2.0;
        float _1066 = (1.0 - _1061) / (_1061 + 1.0);
        float _3701 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1067 = isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0));
        float _1076 = ((((1.0 - _1067) * (_1062 + 2.0)) * exp2(log2(isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0))) * (_1062 + 1.0))) + _1067) * _989;
        float _1077 = _957 * 0.5;
        float _1078 = _967 * 0.5;
        float _1079 = _977 * 0.5;
        float _1080 = dot(vec3(_1077, _1078, _1079), vec3(_1077, _1078, _1079));
        float _1085 = (_1080 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1080);
        float _1093 = (dot(vec3(_585, _586, _587), vec3(_1085 * _1077, _1085 * _1078, _1085 * _1079)) + 1.0) * 0.5;
        float _3712 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1102 = sqrt(((_1078 * _1078) + (_1077 * _1077)) + (_1079 * _1079)) / (_990 + 9.9999997473787516355514526367188e-06);
        float _3723 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1103 = isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0));
        float _1104 = _1103 * 2.0;
        float _1108 = (1.0 - _1103) / (_1103 + 1.0);
        float _3734 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1109 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
        float _1118 = ((((1.0 - _1109) * (_1104 + 2.0)) * exp2(log2(isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0))) * (_1104 + 1.0))) + _1109) * _990;
        _1126 = _957;
        _1128 = _956;
        _1129 = _955;
        _1130 = _967;
        _1131 = _966;
        _1132 = _965;
        _1133 = _977;
        _1134 = _976;
        _1135 = _975;
        _1136 = _990;
        _1137 = _989;
        _1138 = _988;
        _1139 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0)));
        _1140 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0)));
        _1141 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0)));
    }
    else
    {
        _1126 = _1127;
        _1128 = _1127;
        _1129 = _1127;
        _1130 = _1127;
        _1131 = _1127;
        _1132 = _1127;
        _1133 = _1127;
        _1134 = _1127;
        _1135 = _1127;
        _1136 = _1127;
        _1137 = _1127;
        _1138 = _1127;
        _1139 = 0.0;
        _1140 = 0.0;
        _1141 = 0.0;
    }
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1166 = fma(_825, cbModelParam._m0[30u].z, fma(_821, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _817));
        float _1170 = fma(_825, cbModelParam._m0[31u].z, fma(_821, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _817));
        float _1174 = fma(_825, cbModelParam._m0[32u].z, fma(_821, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _817));
        float _1197 = _817 + _585;
        float _1198 = _821 + _586;
        float _1199 = _825 + _587;
        float _1209 = fma(_1199, cbModelParam._m0[30u].z, fma(_1198, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1197)) - _1166;
        float _1210 = fma(_1199, cbModelParam._m0[31u].z, fma(_1198, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1197)) - _1170;
        float _1211 = fma(_1199, cbModelParam._m0[32u].z, fma(_1198, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1197)) - _1174;
        float _1215 = inversesqrt(dot(vec3(_1209, _1210, _1211), vec3(_1209, _1210, _1211)));
        float _1228 = ((_1215 * _1209) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1166 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1229 = ((_1215 * _1210) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1170 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1230 = ((_1215 * _1211) / cbModelParam._m0[35u].z) + ((((((_1174 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1232 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1228, _1229, _1230), 0.0);
        vec4 _1239 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1228, _1229, _1230), 0.0);
        vec4 _1246 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1228, _1229, _1230), 0.0);
        vec4 _1253 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1228, _1229, _1230), 0.0);
        float _1265 = exp2((_1232.w + (-0.5)) * 20.0) * 2.0;
        float _1266 = _1265 * (_1232.x + (-0.5));
        float _1267 = _1265 * (_1232.y + (-0.5));
        float _1268 = _1265 * (_1232.z + (-0.5));
        float _1275 = exp2((_1239.w + (-0.5)) * 20.0) * 2.0;
        float _1276 = _1275 * (_1239.x + (-0.5));
        float _1277 = _1275 * (_1239.y + (-0.5));
        float _1278 = _1275 * (_1239.z + (-0.5));
        float _1285 = exp2((_1246.w + (-0.5)) * 20.0) * 2.0;
        float _1286 = _1285 * (_1246.x + (-0.5));
        float _1287 = _1285 * (_1246.y + (-0.5));
        float _1288 = _1285 * (_1246.z + (-0.5));
        float _1295 = exp2((_1253.w + (-0.5)) * 20.0) * 2.0;
        float _1296 = _1295 * (_1253.x + (-0.5));
        float _1297 = _1295 * (_1253.y + (-0.5));
        float _1298 = _1295 * (_1253.z + (-0.5));
        float _1299 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1300 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1301 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1302 = _1266 * 0.5;
        float _1303 = _1276 * 0.5;
        float _1304 = _1286 * 0.5;
        float _1305 = dot(vec3(_1302, _1303, _1304), vec3(_1302, _1303, _1304));
        float _1310 = (_1305 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1305);
        float _1318 = (dot(vec3(_585, _586, _587), vec3(_1310 * _1302, _1310 * _1303, _1310 * _1304)) + 1.0) * 0.5;
        float _3775 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1327 = sqrt(((_1303 * _1303) + (_1302 * _1302)) + (_1304 * _1304)) / (_1299 + 9.9999997473787516355514526367188e-06);
        float _3786 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1328 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
        float _1329 = _1328 * 2.0;
        float _1333 = (1.0 - _1328) / (_1328 + 1.0);
        float _3797 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1334 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
        float _1343 = ((((1.0 - _1334) * (_1329 + 2.0)) * exp2(log2(isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0))) * (_1329 + 1.0))) + _1334) * _1299;
        float _1344 = _1267 * 0.5;
        float _1345 = _1277 * 0.5;
        float _1346 = _1287 * 0.5;
        float _1347 = dot(vec3(_1344, _1345, _1346), vec3(_1344, _1345, _1346));
        float _1352 = (_1347 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1347);
        float _1360 = (dot(vec3(_585, _586, _587), vec3(_1352 * _1344, _1352 * _1345, _1352 * _1346)) + 1.0) * 0.5;
        float _3808 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1369 = sqrt(((_1345 * _1345) + (_1344 * _1344)) + (_1346 * _1346)) / (_1300 + 9.9999997473787516355514526367188e-06);
        float _3819 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1370 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
        float _1371 = _1370 * 2.0;
        float _1375 = (1.0 - _1370) / (_1370 + 1.0);
        float _3830 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1376 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
        float _1385 = ((((1.0 - _1376) * (_1371 + 2.0)) * exp2(log2(isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0))) * (_1371 + 1.0))) + _1376) * _1300;
        float _1386 = _1268 * 0.5;
        float _1387 = _1278 * 0.5;
        float _1388 = _1288 * 0.5;
        float _1389 = dot(vec3(_1386, _1387, _1388), vec3(_1386, _1387, _1388));
        float _1394 = (_1389 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1389);
        float _1402 = (dot(vec3(_585, _586, _587), vec3(_1394 * _1386, _1394 * _1387, _1394 * _1388)) + 1.0) * 0.5;
        float _3841 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1411 = sqrt(((_1387 * _1387) + (_1386 * _1386)) + (_1388 * _1388)) / (_1301 + 9.9999997473787516355514526367188e-06);
        float _3852 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1412 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
        float _1413 = _1412 * 2.0;
        float _1417 = (1.0 - _1412) / (_1412 + 1.0);
        float _3863 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1418 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
        float _1427 = ((((1.0 - _1418) * (_1413 + 2.0)) * exp2(log2(isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0))) * (_1413 + 1.0))) + _1418) * _1301;
        _1435 = _1268;
        _1436 = _1267;
        _1437 = _1266;
        _1438 = _1278;
        _1439 = _1277;
        _1440 = _1276;
        _1441 = _1288;
        _1442 = _1287;
        _1443 = _1286;
        _1444 = _1301;
        _1445 = _1300;
        _1446 = _1299;
        _1447 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0)));
        _1448 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0)));
        _1449 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0)));
    }
    else
    {
        _1435 = _1127;
        _1436 = _1127;
        _1437 = _1127;
        _1438 = _1127;
        _1439 = _1127;
        _1440 = _1127;
        _1441 = _1127;
        _1442 = _1127;
        _1443 = _1127;
        _1444 = _1127;
        _1445 = _1127;
        _1446 = _1127;
        _1447 = 0.0;
        _1448 = 0.0;
        _1449 = 0.0;
    }
    float _1459 = (cbModelParam._m0[1u].x * (_1447 - _1139)) + _1139;
    float _1460 = (cbModelParam._m0[1u].x * (_1448 - _1140)) + _1140;
    float _1461 = (cbModelParam._m0[1u].x * (_1449 - _1141)) + _1141;
    float _1482 = fma(_1461, cbSceneParam._m0[89u].z, fma(_1460, cbSceneParam._m0[89u].y, _1459 * cbSceneParam._m0[89u].x));
    float _1485 = fma(_1461, cbSceneParam._m0[90u].z, fma(_1460, cbSceneParam._m0[90u].y, _1459 * cbSceneParam._m0[90u].x));
    float _1488 = fma(_1461, cbSceneParam._m0[91u].z, fma(_1460, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1459));
    float _1503 = _761 * 0.5;
    float _1504 = _762 * 0.5;
    float _1505 = _763 * 0.5;
    float _1506 = dot(vec4(_1503, _1504, _1505, 1.0), vec4(_1437, _1440, _1443, _1446));
    float _1509 = dot(vec4(_1503, _1504, _1505, 1.0), vec4(_1436, _1439, _1442, _1445));
    float _1512 = dot(vec4(_1503, _1504, _1505, 1.0), vec4(_1435, _1438, _1441, _1444));
    float _1546;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1519 = dot(vec4(_1503, _1504, _1505, 1.0), vec4(_1126, _1130, _1133, _1136));
        float _1523 = dot(vec4(_1503, _1504, _1505, 1.0), vec4(_1128, _1131, _1134, _1137));
        float _1527 = dot(vec4(_1503, _1504, _1505, 1.0), vec4(_1129, _1132, _1135, _1138));
        float _1534 = dot(vec4(cbModelParam._m0[39u]), vec4(_1503, _1504, _1505, 1.0));
        _1546 = dot(vec3(isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0)), isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0)), isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1534) ? 0.0 : (isnan(0.0) ? _1534 : max(0.0, _1534))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1546 = 1.0;
    }
    float _1557;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1548 = dot(vec4(cbModelParam._m0[40u]), vec4(_1503, _1504, _1505, 1.0));
        _1557 = dot(vec3(isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0)), isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0)), isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1548) ? 0.0 : (isnan(0.0) ? _1548 : max(0.0, _1548))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1557 = 1.0;
    }
    float _1561 = (_1557 * cbModelParam._m0[1u].x) + (_1546 * (1.0 - cbModelParam._m0[1u].x));
    float _1571 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _588);
    float _1572 = isnan(_1571) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1571 : min(cbModelParam._m0[25u].z, _1571));
    float _1653;
    float _1655;
    float _1657;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1620 = fma(_825, cbModelParam._m0[13u].z, fma(_821, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _817)) + cbModelParam._m0[13u].w;
        float _1624 = fma(_825, cbModelParam._m0[14u].z, fma(_821, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _817)) + cbModelParam._m0[14u].w;
        float _1628 = fma(_825, cbModelParam._m0[15u].z, fma(_821, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _817)) + cbModelParam._m0[15u].w;
        float _1631 = fma(_763, cbModelParam._m0[13u].z, fma(_762, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _761));
        float _1634 = fma(_763, cbModelParam._m0[14u].z, fma(_762, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _761));
        float _1637 = fma(_763, cbModelParam._m0[15u].z, fma(_762, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _761));
        float _1665;
        if (_1631 > 0.0)
        {
            _1665 = abs((1.0 - _1620) / _1631);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1631 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1620 + 1.0) / _1631);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1665 = frontier_phi_14_12_ladder;
        }
        float _1869;
        if (_1634 > 0.0)
        {
            _1869 = abs((1.0 - _1624) / _1634);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1634 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1624 + 1.0) / _1634);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1869 = frontier_phi_23_19_ladder;
        }
        float _2123;
        if (_1637 > 0.0)
        {
            _2123 = abs((1.0 - _1628) / _1637);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1637 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1628 + 1.0) / _1637);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2123 = frontier_phi_35_30_ladder;
        }
        float _2125 = isnan(_1869) ? _1665 : (isnan(_1665) ? _1869 : min(_1665, _1869));
        float _2126 = isnan(_2123) ? _2125 : (isnan(_2125) ? _2123 : min(_2125, _2123));
        float _2130 = (_2126 * _1631) + _1620;
        float _2131 = (_2126 * _1634) + _1624;
        float _2132 = (_2126 * _1637) + _1628;
        float _2133 = _2126 * 9.9999997473787516355514526367188e-05;
        float _2135 = (-1.0) - _2133;
        float _2137 = _2133 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2132 > _2137) || ((_2132 < _2135) || ((_2131 > _2137) || ((_2131 < _2135) || ((_2130 < _2135) || (_2130 > _2137))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2260 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2132, cbModelParam._m0[9u].z, fma(_2131, cbModelParam._m0[9u].y, _2130 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2132, cbModelParam._m0[10u].z, fma(_2131, cbModelParam._m0[10u].y, _2130 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2132, cbModelParam._m0[11u].z, fma(_2131, cbModelParam._m0[11u].y, _2130 * cbModelParam._m0[11u].x))), _1572);
            frontier_phi_13_35_ladder = _2260.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2260.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2260.x * cbModelParam._m0[1u].y;
        }
        _1653 = frontier_phi_13_35_ladder_2;
        _1655 = frontier_phi_13_35_ladder_1;
        _1657 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1641 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_761, _762, _763), _1572);
        _1653 = _1641.x * cbModelParam._m0[1u].y;
        _1655 = _1641.y * cbModelParam._m0[1u].y;
        _1657 = _1641.z * cbModelParam._m0[1u].y;
    }
    float _1661 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _588);
    float _1662 = isnan(_1661) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1661 : min(cbModelParam._m0[25u].w, _1661));
    float _1752;
    float _1754;
    float _1756;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1716 = fma(_825, cbModelParam._m0[21u].z, fma(_821, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _817)) + cbModelParam._m0[21u].w;
        float _1720 = fma(_825, cbModelParam._m0[22u].z, fma(_821, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _817)) + cbModelParam._m0[22u].w;
        float _1724 = fma(_825, cbModelParam._m0[23u].z, fma(_821, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _817)) + cbModelParam._m0[23u].w;
        float _1727 = fma(_763, cbModelParam._m0[21u].z, fma(_762, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _761));
        float _1730 = fma(_763, cbModelParam._m0[22u].z, fma(_762, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _761));
        float _1733 = fma(_763, cbModelParam._m0[23u].z, fma(_762, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _761));
        float _1874;
        if (_1727 > 0.0)
        {
            _1874 = abs((1.0 - _1716) / _1727);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1727 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1716 + 1.0) / _1727);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1874 = frontier_phi_25_21_ladder;
        }
        float _2150;
        if (_1730 > 0.0)
        {
            _2150 = abs((1.0 - _1720) / _1730);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1730 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1720 + 1.0) / _1730);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2150 = frontier_phi_37_32_ladder;
        }
        float _2363;
        if (_1733 > 0.0)
        {
            _2363 = abs((1.0 - _1724) / _1733);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1733 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1724 + 1.0) / _1733);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2363 = frontier_phi_46_43_ladder;
        }
        float _2365 = isnan(_2150) ? _1874 : (isnan(_1874) ? _2150 : min(_1874, _2150));
        float _2366 = isnan(_2363) ? _2365 : (isnan(_2365) ? _2363 : min(_2365, _2363));
        float _2370 = (_2366 * _1727) + _1716;
        float _2371 = (_2366 * _1730) + _1720;
        float _2372 = (_2366 * _1733) + _1724;
        float _2373 = _2366 * 9.9999997473787516355514526367188e-05;
        float _2374 = (-1.0) - _2373;
        float _2376 = _2373 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2372 > _2376) || ((_2372 < _2374) || ((_2371 > _2376) || ((_2371 < _2374) || ((_2370 < _2374) || (_2370 > _2376))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2571 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2372, cbModelParam._m0[17u].z, fma(_2371, cbModelParam._m0[17u].y, _2370 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2372, cbModelParam._m0[18u].z, fma(_2371, cbModelParam._m0[18u].y, _2370 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2372, cbModelParam._m0[19u].z, fma(_2371, cbModelParam._m0[19u].y, _2370 * cbModelParam._m0[19u].x))), _1662);
            frontier_phi_22_46_ladder = _2571.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2571.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2571.x * cbModelParam._m0[1u].z;
        }
        _1752 = frontier_phi_22_46_ladder_2;
        _1754 = frontier_phi_22_46_ladder_1;
        _1756 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1736 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_761, _762, _763), _1662);
        _1752 = _1736.x * cbModelParam._m0[1u].z;
        _1754 = _1736.y * cbModelParam._m0[1u].z;
        _1756 = _1736.z * cbModelParam._m0[1u].z;
    }
    float _1769 = (((_788 * _737) + _789) * _753) * ((cbModelParam._m0[1u].w * (_1752 - _1653)) + _1653);
    float _1771 = (((_788 * _739) + _789) * _753) * ((cbModelParam._m0[1u].w * (_1754 - _1655)) + _1655);
    float _1773 = (((_788 * _740) + _789) * _753) * ((cbModelParam._m0[1u].w * (_1756 - _1657)) + _1657);
    float _1776 = fma(_1773, cbSceneParam._m0[89u].z, fma(_1771, cbSceneParam._m0[89u].y, _1769 * cbSceneParam._m0[89u].x));
    float _1779 = fma(_1773, cbSceneParam._m0[90u].z, fma(_1771, cbSceneParam._m0[90u].y, _1769 * cbSceneParam._m0[90u].x));
    float _1782 = fma(_1773, cbSceneParam._m0[91u].z, fma(_1771, cbSceneParam._m0[91u].y, _1769 * cbSceneParam._m0[91u].x));
    uvec4 _1792 = floatBitsToUint(cbInstanceData._m0[_233 + 5u]);
    uint _1794 = _1792.x * 14u;
    uint _1795 = _1794 + 13u;
    float _1802 = _753 + (-1.0);
    float _1807 = (cbLight._m0[_1795].x * _1802) + 1.0;
    float _1808 = (cbLight._m0[_1795].y * _1802) + 1.0;
    float _1809 = (cbLight._m0[_1795].z * _1802) + 1.0;
    float _1810 = (cbLight._m0[_1795].w * _1802) + 1.0;
    uint _1811 = _1794 + 5u;
    float _1817 = isnan(1.0) ? _1808 : (isnan(_1808) ? 1.0 : min(_1808, 1.0));
    uint _1821 = _1794 + 4u;
    float _1828 = isnan(1.0) ? _1807 : (isnan(_1807) ? 1.0 : min(_1807, 1.0));
    uint _1832 = _1794 | 1u;
    float _1843 = dot(vec3(cbLight._m0[_1794].xyz), vec3(_585, _586, _587));
    float _1846 = dot(vec3(cbLight._m0[_1832].xyz), vec3(_585, _586, _587));
    float _3999 = isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0));
    float _4010 = isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0));
    float _1851 = (isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0))) * 0.3183098733425140380859375;
    float _1853 = (isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0))) * 0.3183098733425140380859375;
    float _1860 = ((cbLight._m0[_1811].x * _1817) * _1853) + ((cbLight._m0[_1821].x * _1828) * _1851);
    float _1861 = ((_1817 * cbLight._m0[_1811].y) * _1853) + ((_1828 * cbLight._m0[_1821].y) * _1851);
    float _1862 = ((_1817 * cbLight._m0[_1811].z) * _1853) + ((_1828 * cbLight._m0[_1821].z) * _1851);
    uvec4 _1866 = floatBitsToUint(cbLight._m0[_1794 + 12u]);
    bool _1868 = _1866.x == 0u;
    float _1879;
    float _1881;
    float _1883;
    if (_1868)
    {
        _1879 = _1860;
        _1881 = _1861;
        _1883 = _1862;
    }
    else
    {
        uint _1887 = _1794 + 6u;
        float _1903 = (dot(vec3(cbLight._m0[_1794 + 2u].xyz), vec3(_585, _586, _587)) * 0.5) + 0.5;
        float _1904 = _1903 * _1903;
        float _4021 = isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0));
        float _1905 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
        float _1906 = isnan(1.0) ? _1809 : (isnan(_1809) ? 1.0 : min(_1809, 1.0));
        _1879 = (((cbLight._m0[_1887].x * 0.3183098733425140380859375) * _1905) * _1906) + _1860;
        _1881 = (((cbLight._m0[_1887].y * 0.3183098733425140380859375) * _1905) * _1906) + _1861;
        _1883 = (((cbLight._m0[_1887].z * 0.3183098733425140380859375) * _1905) * _1906) + _1862;
    }
    bool _1886 = _1866.y == 0u;
    float _1924;
    float _1926;
    float _1928;
    if (_1886)
    {
        _1924 = _1879;
        _1926 = _1881;
        _1928 = _1883;
    }
    else
    {
        uint _2094 = _1794 + 7u;
        float _2110 = (dot(vec3(cbLight._m0[_1794 + 3u].xyz), vec3(_585, _586, _587)) * 0.5) + 0.5;
        float _2111 = _2110 * _2110;
        float _4037 = isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0));
        float _2112 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
        float _2113 = isnan(1.0) ? _1810 : (isnan(_1810) ? 1.0 : min(_1810, 1.0));
        _1924 = (((cbLight._m0[_2094].x * 0.3183098733425140380859375) * _2112) * _2113) + _1879;
        _1926 = (((cbLight._m0[_2094].y * 0.3183098733425140380859375) * _2112) * _2113) + _1881;
        _1928 = (((cbLight._m0[_2094].z * 0.3183098733425140380859375) * _2112) * _2113) + _1883;
    }
    uint _1931 = _1794 + 8u;
    float _1944 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1794].w)) * _588) * 0.949999988079071044921875);
    float _1945 = _1944 * _1944;
    float _1946 = cbLight._m0[_1794].x + _664;
    float _1947 = cbLight._m0[_1794].y + _665;
    float _1948 = cbLight._m0[_1794].z + _666;
    float _1952 = inversesqrt(dot(vec3(_1946, _1947, _1948), vec3(_1946, _1947, _1948)));
    float _1953 = _1952 * _1946;
    float _1954 = _1952 * _1947;
    float _1955 = _1952 * _1948;
    float _1956 = dot(vec3(_585, _586, _587), vec3(cbLight._m0[_1794].xyz));
    float _4053 = isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0));
    float _1959 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
    float _4064 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    float _1960 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
    float _1961 = dot(vec3(_585, _586, _587), vec3(_1953, _1954, _1955));
    float _4075 = isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0));
    float _1964 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
    float _1965 = dot(vec3(cbLight._m0[_1794].xyz), vec3(_1953, _1954, _1955));
    float _4086 = isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0));
    float _1969 = _1945 * _1945;
    float _1973 = ((_1964 * _1964) * (_1969 + (-1.0))) + 1.0;
    float _1981 = exp2(log2(1.0 - (isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0)))) * 5.0);
    float _1982 = 0.959999978542327880859375 - _734;
    float _1984 = 0.959999978542327880859375 - _735;
    float _1985 = 0.959999978542327880859375 - _736;
    float _1992 = 1.0 - _1945;
    float _2003 = (0.5 / (((_1960 * ((_1959 * _1992) + _1945)) + 9.9999999392252902907785028219223e-09) + (((_1960 * _1992) + _1945) * _1959))) * _1959;
    float _4097 = isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0));
    float _2005 = (isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0))) * (_1969 / ((_1973 * _1973) * 3.141590118408203125));
    uint _2016 = _1794 + 9u;
    float _2027 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1832].w)) * _588) * 0.949999988079071044921875);
    float _2028 = _2027 * _2027;
    float _2029 = cbLight._m0[_1832].x + _664;
    float _2030 = cbLight._m0[_1832].y + _665;
    float _2031 = cbLight._m0[_1832].z + _666;
    float _2035 = inversesqrt(dot(vec3(_2029, _2030, _2031), vec3(_2029, _2030, _2031)));
    float _2036 = _2035 * _2029;
    float _2037 = _2035 * _2030;
    float _2038 = _2035 * _2031;
    float _2039 = dot(vec3(_585, _586, _587), vec3(cbLight._m0[_1832].xyz));
    float _4108 = isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0));
    float _2042 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
    float _2043 = dot(vec3(_585, _586, _587), vec3(_2036, _2037, _2038));
    float _4119 = isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0));
    float _2046 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
    float _2047 = dot(vec3(cbLight._m0[_1832].xyz), vec3(_2036, _2037, _2038));
    float _4130 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
    float _2051 = _2028 * _2028;
    float _2055 = ((_2046 * _2046) * (_2051 + (-1.0))) + 1.0;
    float _2062 = exp2(log2(1.0 - (isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0)))) * 5.0);
    float _2069 = 1.0 - _2028;
    float _2079 = (0.5 / (((_1960 * ((_2042 * _2069) + _2028)) + 9.9999999392252902907785028219223e-09) + (((_1960 * _2069) + _2028) * _2042))) * _2042;
    float _4141 = isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0));
    float _2081 = (isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0))) * (_2051 / ((_2055 * _2055) * 3.141590118408203125));
    float _2091 = (((((_2062 * _1982) + _737) * cbLight._m0[_2016].x) * _2081) * _1817) + (((((_1981 * _1982) + _737) * cbLight._m0[_1931].x) * _2005) * _1828);
    float _2092 = (((((_2062 * _1984) + _739) * cbLight._m0[_2016].y) * _2081) * _1817) + (((((_1981 * _1984) + _739) * cbLight._m0[_1931].y) * _2005) * _1828);
    float _2093 = (((((_2062 * _1985) + _740) * cbLight._m0[_2016].z) * _2081) * _1817) + (((((_1981 * _1985) + _740) * cbLight._m0[_1931].z) * _2005) * _1828);
    float _2155;
    float _2157;
    float _2159;
    if (_1868)
    {
        _2155 = _2091;
        _2157 = _2092;
        _2159 = _2093;
    }
    else
    {
        uint _2161 = _1794 + 2u;
        uint _2165 = _1794 + 10u;
        float _2179 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2161].w)) * _588) * 0.949999988079071044921875);
        float _2180 = _2179 * _2179;
        float _2181 = cbLight._m0[_2161].x + _664;
        float _2182 = cbLight._m0[_2161].y + _665;
        float _2183 = cbLight._m0[_2161].z + _666;
        float _2187 = inversesqrt(dot(vec3(_2181, _2182, _2183), vec3(_2181, _2182, _2183)));
        float _2188 = _2187 * _2181;
        float _2189 = _2187 * _2182;
        float _2190 = _2187 * _2183;
        float _2191 = dot(vec3(_585, _586, _587), vec3(cbLight._m0[_2161].xyz));
        float _4152 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
        float _2194 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
        float _2195 = dot(vec3(_585, _586, _587), vec3(_2188, _2189, _2190));
        float _4163 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
        float _2198 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
        float _2199 = dot(vec3(cbLight._m0[_2161].xyz), vec3(_2188, _2189, _2190));
        float _4174 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
        float _2203 = _2180 * _2180;
        float _2207 = ((_2198 * _2198) * (_2203 + (-1.0))) + 1.0;
        float _2214 = exp2(log2(1.0 - (isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0)))) * 5.0);
        float _2221 = 1.0 - _2180;
        float _2231 = (0.5 / (((_1960 * ((_2194 * _2221) + _2180)) + 9.9999999392252902907785028219223e-09) + (((_1960 * _2221) + _2180) * _2194))) * _2194;
        float _4185 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
        float _2233 = (isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0))) * (_2203 / ((_2207 * _2207) * 3.141590118408203125));
        float _2234 = isnan(1.0) ? _1809 : (isnan(_1809) ? 1.0 : min(_1809, 1.0));
        _2155 = (((((_2214 * _1982) + _737) * cbLight._m0[_2165].x) * _2233) * _2234) + _2091;
        _2157 = (((((_2214 * _1984) + _739) * cbLight._m0[_2165].y) * _2233) * _2234) + _2092;
        _2159 = (((((_2214 * _1985) + _740) * cbLight._m0[_2165].z) * _2233) * _2234) + _2093;
    }
    float _2269;
    float _2271;
    float _2273;
    if (_1886)
    {
        _2269 = _2155;
        _2271 = _2157;
        _2273 = _2159;
    }
    else
    {
        uint _2280 = _1794 + 3u;
        uint _2284 = _1794 + 11u;
        float _2298 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2280].w)) * _588) * 0.949999988079071044921875);
        float _2299 = _2298 * _2298;
        float _2300 = cbLight._m0[_2280].x + _664;
        float _2301 = cbLight._m0[_2280].y + _665;
        float _2302 = cbLight._m0[_2280].z + _666;
        float _2306 = inversesqrt(dot(vec3(_2300, _2301, _2302), vec3(_2300, _2301, _2302)));
        float _2307 = _2306 * _2300;
        float _2308 = _2306 * _2301;
        float _2309 = _2306 * _2302;
        float _2310 = dot(vec3(_585, _586, _587), vec3(cbLight._m0[_2280].xyz));
        float _4201 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
        float _2313 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
        float _2314 = dot(vec3(_585, _586, _587), vec3(_2307, _2308, _2309));
        float _4212 = isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0));
        float _2317 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
        float _2318 = dot(vec3(cbLight._m0[_2280].xyz), vec3(_2307, _2308, _2309));
        float _4223 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
        float _2322 = _2299 * _2299;
        float _2326 = ((_2317 * _2317) * (_2322 + (-1.0))) + 1.0;
        float _2333 = exp2(log2(1.0 - (isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0)))) * 5.0);
        float _2340 = 1.0 - _2299;
        float _2350 = (0.5 / (((_1960 * ((_2313 * _2340) + _2299)) + 9.9999999392252902907785028219223e-09) + (((_1960 * _2340) + _2299) * _2313))) * _2313;
        float _4234 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
        float _2352 = (isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0))) * (_2322 / ((_2326 * _2326) * 3.141590118408203125));
        float _2353 = isnan(1.0) ? _1810 : (isnan(_1810) ? 1.0 : min(_1810, 1.0));
        _2269 = (((((_2333 * _1982) + _737) * cbLight._m0[_2284].x) * _2352) * _2353) + _2155;
        _2271 = (((((_2333 * _1984) + _739) * cbLight._m0[_2284].y) * _2352) * _2353) + _2157;
        _2273 = (((((_2333 * _1985) + _740) * cbLight._m0[_2284].z) * _2352) * _2353) + _2159;
    }
    float _2488;
    float _2490;
    float _2492;
    float _2494;
    float _2496;
    float _2498;
    if (_1792.y == 0u)
    {
        float _2428 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2429 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2428;
        float _2430 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2428;
        float _2431 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2428;
        uvec4 _2443 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2444 = _2443.x;
        uint _2455 = uint((float(_2443.y) * floor(float(uint(cbSceneParam._m0[85u].y * _673) / _2444))) + floor(float(uint(cbSceneParam._m0[85u].x * _672) / _2444)));
        float _2465 = (log2(_2431 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2466 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
        uint _2469 = uint(isnan(14.0) ? _2466 : (isnan(_2466) ? 14.0 : min(_2466, 14.0)));
        uvec4 _2474 = texelFetch(g_lightClusterGridBuffer, int(((_2469 << 2u) + (_2455 << 6u)) >> 2u));
        uint _2475 = _2474.x;
        uint _2476 = _2443.z;
        float _2576;
        float _2578;
        float _2580;
        float _2582;
        float _2584;
        float _2586;
        if (((((1u << ((_2476 >> 4u) & 15u)) + 4294967295u) & _2475) == 0u) || ((_2476 & 240u) == 0u))
        {
            _2576 = 0.0;
            _2578 = 0.0;
            _2580 = 0.0;
            _2582 = 0.0;
            _2584 = 0.0;
            _2586 = 0.0;
        }
        else
        {
            float _2577;
            float _2579;
            float _2581;
            float _2583;
            float _2585;
            float _2587;
            float _2720 = 0.0;
            float _2721 = 0.0;
            float _2722 = 0.0;
            float _2723 = 0.0;
            float _2724 = 0.0;
            float _2725 = 0.0;
            uint _2726 = 0u;
            uint _2735;
            bool _2736;
            for (;;)
            {
                _2735 = texelFetch(g_lightClassification, int((((_2469 << 5u) + (_2455 << 9u)) + (_2726 << 2u)) >> 2u)).x;
                _2736 = _2735 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2736)
                {
                    frontier_phi_61_pred = _2720;
                    frontier_phi_61_pred_1 = _2725;
                    frontier_phi_61_pred_2 = _2724;
                    frontier_phi_61_pred_3 = _2723;
                    frontier_phi_61_pred_4 = _2722;
                    frontier_phi_61_pred_5 = _2721;
                }
                else
                {
                    float _2844;
                    float _2845;
                    float _2846;
                    float _2847;
                    float _2848;
                    float _2849;
                    uint _2850;
                    _2844 = _2720;
                    _2845 = _2721;
                    _2846 = _2722;
                    _2847 = _2723;
                    _2848 = _2724;
                    _2849 = _2725;
                    _2850 = _2735;
                    float _2776;
                    float _2777;
                    float _2778;
                    float _2779;
                    float _2780;
                    float _2781;
                    for (;;)
                    {
                        uint _2854 = uint(findLSB(_2850)) + (_2726 << 5u);
                        uint _2851 = (_2850 + 4294967295u) & _2850;
                        uint _2856 = _2854 * 48u;
                        vec4 _2870 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2856)).x, texelFetch(g_PointLightRenderingBuffer, int(_2856 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2856 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2856 + 3u)).x));
                        uint _2876 = (_2854 * 48u) + 4u;
                        vec4 _2889 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2876)).x, texelFetch(g_PointLightRenderingBuffer, int(_2876 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2876 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2876 + 3u)).x));
                        uint _2895 = (_2854 * 48u) + 8u;
                        vec3 _2906 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2895)).x, texelFetch(g_PointLightRenderingBuffer, int(_2895 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2895 + 2u)).x));
                        float _2910 = _2870.x - _2429;
                        float _2911 = _2870.y - _2430;
                        float _2912 = _2870.z - _2431;
                        float _2913 = dot(vec3(_2910, _2911, _2912), vec3(_2910, _2911, _2912));
                        float _2916 = inversesqrt(_2913);
                        float _2917 = _2916 * _2910;
                        float _2918 = _2916 * _2911;
                        float _2919 = _2916 * _2912;
                        float _2920 = dot(vec3(_694, _697, _700), vec3(_2917, _2918, _2919));
                        float _2925 = 1.0 - (_2913 * _2870.w);
                        float _4260 = isnan(0.0) ? _2925 : (isnan(_2925) ? 0.0 : max(_2925, 0.0));
                        float _2926 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
                        float _2927 = sqrt(_2913) * _2889.w;
                        float _2930 = 1.39999997615814208984375 / (_2927 + 1.39999997615814208984375);
                        float _2931 = _2930 * _2930;
                        float _2934 = ((1.0 - _2931) * _2920) + _2931;
                        float _2937 = _2927 * _2927;
                        float _2941 = ((isnan(0.0) ? _2934 : (isnan(_2934) ? 0.0 : max(_2934, 0.0))) * _2926) / ((_2937 * 0.699999988079071044921875) + 1.0);
                        float _2945 = (-0.0) - _2429;
                        float _2946 = (-0.0) - _2430;
                        float _2947 = (-0.0) - _2431;
                        float _2951 = inversesqrt(dot(vec3(_2945, _2946, _2947), vec3(_2945, _2946, _2947)));
                        float _2952 = _2951 * _2945;
                        float _2953 = _2951 * _2946;
                        float _2954 = _2951 * _2947;
                        float _2962 = exp2(log2(1.0 / ((_2937 * 3.5) + 5.0)) * 0.25);
                        float _2963 = 1.0 - _769;
                        float _2970 = sqrt(1.0 - ((1.0 - (_2963 * _2963)) * (1.0 - (_2962 * _2962))));
                        float _2971 = _2970 * _2970;
                        float _2972 = _2971 * _2971;
                        float _2973 = _2952 + _2917;
                        float _2974 = _2953 + _2918;
                        float _2975 = _2954 + _2919;
                        float _2979 = inversesqrt(dot(vec3(_2973, _2974, _2975), vec3(_2973, _2974, _2975)));
                        float _2983 = dot(vec3(_694, _697, _700), vec3(_2952, _2953, _2954));
                        float _4276 = isnan(0.0) ? _2983 : (isnan(_2983) ? 0.0 : max(_2983, 0.0));
                        float _2986 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
                        float _2987 = dot(vec3(_694, _697, _700), vec3(_2979 * _2973, _2979 * _2974, _2979 * _2975));
                        float _4287 = isnan(0.0) ? _2987 : (isnan(_2987) ? 0.0 : max(_2987, 0.0));
                        float _2990 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
                        float _2994 = ((_2990 * _2990) * (_2972 + (-1.0))) + 1.0;
                        float _2995 = _2930 * _2971;
                        float _2996 = _2995 * _2995;
                        float _2999 = ((1.0 - _2996) * _2920) + _2996;
                        float _4298 = isnan(0.0) ? _2999 : (isnan(_2999) ? 0.0 : max(_2999, 0.0));
                        float _3000 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
                        float _3001 = 1.0 - _2971;
                        float _3011 = (0.5 / (((_3000 * ((_2986 * _3001) + _2971)) + 9.9999999392252902907785028219223e-09) + (((_3000 * _3001) + _2971) * _2986))) * _3000;
                        float _4309 = isnan(0.0) ? _3011 : (isnan(_3011) ? 0.0 : max(_3011, 0.0));
                        float _3022 = (((_2972 * 3.1415927410125732421875) * (isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0)))) / ((_2994 * _2994) * ((_2937 * 2.1991131305694580078125) + 3.141590118408203125))) * _2926;
                        _2779 = (_2941 * _2889.x) + _2847;
                        _2780 = (_2941 * _2889.y) + _2848;
                        _2781 = (_2941 * _2889.z) + _2849;
                        _2776 = (_3022 * _2906.x) + _2844;
                        _2777 = (_3022 * _2906.y) + _2845;
                        _2778 = (_3022 * _2906.z) + _2846;
                        if (_2851 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2844 = _2776;
                            _2845 = _2777;
                            _2846 = _2778;
                            _2847 = _2779;
                            _2848 = _2780;
                            _2849 = _2781;
                            _2850 = _2851;
                        }
                    }
                    frontier_phi_61_pred = _2776;
                    frontier_phi_61_pred_1 = _2781;
                    frontier_phi_61_pred_2 = _2780;
                    frontier_phi_61_pred_3 = _2779;
                    frontier_phi_61_pred_4 = _2778;
                    frontier_phi_61_pred_5 = _2777;
                }
                _2577 = frontier_phi_61_pred;
                _2587 = frontier_phi_61_pred_1;
                _2585 = frontier_phi_61_pred_2;
                _2583 = frontier_phi_61_pred_3;
                _2581 = frontier_phi_61_pred_4;
                _2579 = frontier_phi_61_pred_5;
                uint _2727 = _2726 + 1u;
                if (_2727 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2720 = _2577;
                    _2721 = _2579;
                    _2722 = _2581;
                    _2723 = _2583;
                    _2724 = _2585;
                    _2725 = _2587;
                    _2726 = _2727;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2576 = _2577;
            _2578 = _2579;
            _2580 = _2581;
            _2582 = _2583;
            _2584 = _2585;
            _2586 = _2587;
        }
        uvec4 _2590 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2591 = _2590.z;
        uint _2593 = (_2591 >> 8u) & 15u;
        float _2688;
        float _2690;
        float _2692;
        float _2694;
        float _2696;
        float _2698;
        if (((4294967295u << _2593) & _2475) == 0u)
        {
            _2688 = _2576;
            _2690 = _2578;
            _2692 = _2580;
            _2694 = _2582;
            _2696 = _2584;
            _2698 = _2586;
        }
        else
        {
            float _2713 = inversesqrt(dot(vec3(_2429, _2430, _2431), vec3(_2429, _2430, _2431)));
            float _2714 = _2713 * _2429;
            float _2715 = _2713 * _2430;
            float _2716 = _2713 * _2431;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2593 < ((_2591 >> 12u) & 15u))
            {
                float _2689;
                float _2691;
                float _2693;
                float _2695;
                float _2697;
                float _2699;
                float _2827 = _2576;
                float _2828 = _2578;
                float _2829 = _2580;
                float _2830 = _2582;
                float _2831 = _2584;
                float _2832 = _2586;
                uint _2833 = _2593;
                uint _2842;
                bool _2843;
                for (;;)
                {
                    _2842 = texelFetch(g_lightClassification, int((((_2469 << 5u) + (_2455 << 9u)) + (_2833 << 2u)) >> 2u)).x;
                    _2843 = _2842 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2843)
                    {
                        frontier_phi_67_pred = _2830;
                        frontier_phi_67_pred_1 = _2831;
                        frontier_phi_67_pred_2 = _2832;
                        frontier_phi_67_pred_3 = _2829;
                        frontier_phi_67_pred_4 = _2828;
                        frontier_phi_67_pred_5 = _2827;
                    }
                    else
                    {
                        float _3027;
                        float _3028;
                        float _3029;
                        float _3030;
                        float _3031;
                        float _3032;
                        float _3322;
                        float _3323;
                        float _3324;
                        float _3325;
                        float _3326;
                        float _3327;
                        float _3040 = _2827;
                        float _3041 = _2828;
                        float _3042 = _2829;
                        float _3043 = _2830;
                        float _3044 = _2831;
                        float _3045 = _2832;
                        uint _3046 = _2842;
                        uint _3047;
                        vec4 _3072;
                        float _3073;
                        vec4 _3088;
                        vec3 _3100;
                        vec4 _3116;
                        vec4 _3132;
                        float _3178;
                        bool _3179;
                        for (;;)
                        {
                            uint _3057 = ((_2833 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3046));
                            _3047 = (_3046 + 4294967295u) & _3046;
                            uint _3059 = _3057 * 40u;
                            _3072 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3059)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3059 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3059 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3059 + 3u)).x));
                            _3073 = _3072.w;
                            uint _3075 = (_3057 * 40u) + 4u;
                            _3088 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3075)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3075 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3075 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3075 + 3u)).x));
                            uint _3090 = (_3057 * 40u) + 8u;
                            _3100 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3090)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 2u)).x));
                            uint _3103 = (_3057 * 40u) + 16u;
                            _3116 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3103)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3103 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3103 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3103 + 3u)).x));
                            uint _3119 = (_3057 * 40u) + 20u;
                            _3132 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3119)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 3u)).x));
                            uint _3134 = (_3057 * 40u) + 24u;
                            vec4 _3147 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3134)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 3u)).x));
                            uint _3153 = (_3057 * 40u) + 28u;
                            vec4 _3166 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3153)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 3u)).x));
                            _3178 = fma(_2431, _3166.z, fma(_2430, _3166.y, _3166.x * _2429)) + _3166.w;
                            _3179 = !((fma(_2431, _3147.z, fma(_2430, _3147.y, _3147.x * _2429)) + _3147.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3179)
                            {
                                float _3206 = _3072.x - _2429;
                                float _3207 = _3072.y - _2430;
                                float _3208 = _3072.z - _2431;
                                float _3209 = dot(vec3(_3206, _3207, _3208), vec3(_3206, _3207, _3208));
                                float _3212 = inversesqrt(_3209);
                                float _3213 = _3212 * _3206;
                                float _3214 = _3212 * _3207;
                                float _3215 = _3212 * _3208;
                                float _3219 = 1.0 - (_3209 / (_3073 * _3073));
                                float _4320 = isnan(0.0) ? _3219 : (isnan(_3219) ? 0.0 : max(_3219, 0.0));
                                float _3220 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
                                float _3224 = sqrt(_3209) * _3088.w;
                                float _3226 = 1.39999997615814208984375 / (_3224 + 1.39999997615814208984375);
                                float _3227 = _3226 * _3226;
                                float _3230 = ((1.0 - _3227) * dot(vec3(_3213, _3214, _3215), vec3(_694, _697, _700))) + _3227;
                                float _3233 = _3224 * _3224;
                                float _3237 = (fma(_2431, _3116.z, fma(_2430, _3116.y, _3116.x * _2429)) + _3116.w) / _3178;
                                float _3238 = (fma(_2431, _3132.z, fma(_2430, _3132.y, _3132.x * _2429)) + _3132.w) / _3178;
                                float _3242 = 1.0 - dot(vec2(_3237, _3238), vec2(_3237, _3238));
                                float _4336 = isnan(0.0) ? _3242 : (isnan(_3242) ? 0.0 : max(_3242, 0.0));
                                float _3243 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
                                float _3244 = _3243 * (((isnan(0.0) ? _3230 : (isnan(_3230) ? 0.0 : max(_3230, 0.0))) * _3220) / ((_3233 * 0.699999988079071044921875) + 1.0));
                                float _3256 = exp2(log2(1.0 / ((_3233 * 3.5) + 5.0)) * 0.25);
                                float _3257 = 1.0 - _769;
                                float _3264 = sqrt(1.0 - ((1.0 - (_3257 * _3257)) * (1.0 - (_3256 * _3256))));
                                float _3265 = _3264 * _3264;
                                float _3266 = _3265 * _3265;
                                float _3267 = _3213 - _2714;
                                float _3268 = _3214 - _2715;
                                float _3269 = _3215 - _2716;
                                float _3273 = inversesqrt(dot(vec3(_3267, _3268, _3269), vec3(_3267, _3268, _3269)));
                                float _3277 = dot(vec3(_694, _697, _700), vec3((-0.0) - _2714, (-0.0) - _2715, (-0.0) - _2716));
                                float _4347 = isnan(0.0) ? _3277 : (isnan(_3277) ? 0.0 : max(_3277, 0.0));
                                float _3280 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
                                float _3281 = dot(vec3(_694, _697, _700), vec3(_3273 * _3267, _3273 * _3268, _3273 * _3269));
                                float _4358 = isnan(0.0) ? _3281 : (isnan(_3281) ? 0.0 : max(_3281, 0.0));
                                float _3284 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
                                float _3288 = ((_3284 * _3284) * (_3266 + (-1.0))) + 1.0;
                                float _3289 = _3226 * _3265;
                                float _3290 = _3289 * _3289;
                                float _3296 = ((1.0 - _3290) * dot(vec3(_694, _697, _700), vec3(_3213, _3214, _3215))) + _3290;
                                float _4369 = isnan(0.0) ? _3296 : (isnan(_3296) ? 0.0 : max(_3296, 0.0));
                                float _3297 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
                                float _3298 = 1.0 - _3265;
                                float _3308 = (0.5 / (((_3297 * ((_3280 * _3298) + _3265)) + 9.9999999392252902907785028219223e-09) + (((_3297 * _3298) + _3265) * _3280))) * _3297;
                                float _4380 = isnan(0.0) ? _3308 : (isnan(_3308) ? 0.0 : max(_3308, 0.0));
                                float _3318 = (_3243 * _3220) * (((_3266 * 3.1415927410125732421875) * (isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0)))) / ((_3288 * _3288) * ((_3233 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3318 * _3100.x;
                                frontier_phi_73_pred_1 = _3318 * _3100.y;
                                frontier_phi_73_pred_2 = _3244 * _3088.z;
                                frontier_phi_73_pred_3 = _3244 * _3088.y;
                                frontier_phi_73_pred_4 = _3244 * _3088.x;
                                frontier_phi_73_pred_5 = _3318 * _3100.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3322 = frontier_phi_73_pred;
                            _3323 = frontier_phi_73_pred_1;
                            _3327 = frontier_phi_73_pred_2;
                            _3326 = frontier_phi_73_pred_3;
                            _3325 = frontier_phi_73_pred_4;
                            _3324 = frontier_phi_73_pred_5;
                            _3030 = _3325 + _3043;
                            _3031 = _3326 + _3044;
                            _3032 = _3327 + _3045;
                            _3027 = _3322 + _3040;
                            _3028 = _3323 + _3041;
                            _3029 = _3324 + _3042;
                            if (_3047 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3040 = _3027;
                                _3041 = _3028;
                                _3042 = _3029;
                                _3043 = _3030;
                                _3044 = _3031;
                                _3045 = _3032;
                                _3046 = _3047;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3030;
                        frontier_phi_67_pred_1 = _3031;
                        frontier_phi_67_pred_2 = _3032;
                        frontier_phi_67_pred_3 = _3029;
                        frontier_phi_67_pred_4 = _3028;
                        frontier_phi_67_pred_5 = _3027;
                    }
                    _2695 = frontier_phi_67_pred;
                    _2697 = frontier_phi_67_pred_1;
                    _2699 = frontier_phi_67_pred_2;
                    _2693 = frontier_phi_67_pred_3;
                    _2691 = frontier_phi_67_pred_4;
                    _2689 = frontier_phi_67_pred_5;
                    uint _2834 = _2833 + 1u;
                    if (_2834 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2827 = _2689;
                        _2828 = _2691;
                        _2829 = _2693;
                        _2830 = _2695;
                        _2831 = _2697;
                        _2832 = _2699;
                        _2833 = _2834;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2697;
                frontier_phi_55_56_ladder_1 = _2699;
                frontier_phi_55_56_ladder_2 = _2695;
                frontier_phi_55_56_ladder_3 = _2693;
                frontier_phi_55_56_ladder_4 = _2691;
                frontier_phi_55_56_ladder_5 = _2689;
            }
            else
            {
                frontier_phi_55_56_ladder = _2584;
                frontier_phi_55_56_ladder_1 = _2586;
                frontier_phi_55_56_ladder_2 = _2582;
                frontier_phi_55_56_ladder_3 = _2580;
                frontier_phi_55_56_ladder_4 = _2578;
                frontier_phi_55_56_ladder_5 = _2576;
            }
            _2688 = frontier_phi_55_56_ladder_5;
            _2690 = frontier_phi_55_56_ladder_4;
            _2692 = frontier_phi_55_56_ladder_3;
            _2694 = frontier_phi_55_56_ladder_2;
            _2696 = frontier_phi_55_56_ladder;
            _2698 = frontier_phi_55_56_ladder_1;
        }
        float _2703 = isnan(1.0) ? _753 : (isnan(_753) ? 1.0 : min(_753, 1.0));
        _2488 = (_2703 * _2694) + _1924;
        _2490 = (_2703 * _2696) + _1926;
        _2492 = (_2703 * _2698) + _1928;
        _2494 = ((_2688 * _737) * _2703) + _2269;
        _2496 = ((_2690 * _739) * _2703) + _2271;
        _2498 = ((_2692 * _740) * _2703) + _2273;
    }
    else
    {
        _2488 = _1924;
        _2490 = _1926;
        _2492 = _1928;
        _2494 = _2269;
        _2496 = _2271;
        _2498 = _2273;
    }
    float _4396 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
    float _4407 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
    float _4418 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    uint _2518 = _233 + 6u;
    float _2526 = _672 / cbSceneParam._m0[86u].x;
    float _2527 = _673 / cbSceneParam._m0[86u].y;
    vec4 _2541 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2526, _2527, (log2((isnan(cbSceneParam._m0[77u].w) ? _607 : (isnan(_607) ? cbSceneParam._m0[77u].w : min(_607, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2543 = _2541.x;
    float _2544 = _2541.y;
    float _2545 = _2541.z;
    float _2546 = _2541.w;
    float _2638;
    float _2640;
    float _2642;
    float _2644;
    if (_607 > cbSceneParam._m0[78u].w)
    {
        float _2601 = isnan(_607) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _607 : min(cbSceneParam._m0[80u].w, _607));
        float _2602 = _2601 / _607;
        float _2613 = _2602 * _657;
        float _2614 = _658 * _2602;
        float _2615 = (-0.0) - _2614;
        float _2616 = _2602 * _659;
        float _2618 = (cbSceneParam._m0[77u].w * _2615) / _2601;
        float _2619 = _2618 + cbSceneParam._m0[79u].w;
        float _2620 = cbSceneParam._m0[79u].w - _2614;
        float _2626 = sqrt(((_2613 * _2613) + (_2614 * _2614)) + (_2616 * _2616));
        float _2629 = (1.0 - (cbSceneParam._m0[77u].w / _2601)) * _2626;
        float _2634 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2636 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2789;
        if (abs((_2615 - _2618) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2789 = ((((_2619 > 0.0) ? exp2(_2634 * _2619) : (2.0 - exp2(_2636 * _2619))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2629;
        }
        else
        {
            float _2749 = 1.0 / cbSceneParam._m0[80u].x;
            float _2750 = isnan(_2620) ? _2619 : (isnan(_2619) ? _2620 : max(_2619, _2620));
            float _2751 = isnan(_2620) ? _2619 : (isnan(_2619) ? _2620 : min(_2619, _2620));
            float _2760 = isnan(0.0) ? _2750 : (isnan(_2750) ? 0.0 : min(_2750, 0.0));
            float _2761 = isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : min(_2751, 0.0));
            _2789 = ((abs(_2626 / _2615) * cbSceneParam._m0[80u].y) * ((((_2760 - _2761) * 2.0) - ((exp2(_2634 * (isnan(0.0) ? _2750 : (isnan(_2750) ? 0.0 : max(_2750, 0.0)))) - exp2(_2634 * (isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : max(_2751, 0.0))))) * _2749)) - ((exp2(_2636 * _2760) - exp2(_2636 * _2761)) * _2749))) + (_2629 * cbSceneParam._m0[80u].z);
        }
        vec4 _2791 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2526, _2527, 1.0), 0.0);
        float _2800 = exp2((_2789 * (-1.44269502162933349609375)) * (1.0 - _2791.w));
        float _2801 = log2(_2800);
        float _2817 = log2(_2546);
        _2638 = (exp2(_2817 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2801 * cbSceneParam._m0[78u].x)) * _2791.x) / cbSceneParam._m0[78u].x)) + _2543;
        _2640 = (exp2(_2817 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2801 * cbSceneParam._m0[78u].y)) * _2791.y) / cbSceneParam._m0[78u].y)) + _2544;
        _2642 = (exp2(_2817 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2801 * cbSceneParam._m0[78u].z)) * _2791.z) / cbSceneParam._m0[78u].z)) + _2545;
        _2644 = _2800 * _2546;
    }
    else
    {
        _2638 = _2543;
        _2640 = _2544;
        _2642 = _2545;
        _2644 = _2546;
    }
    float _2656 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2657 = _2656 == 3.0;
    float _2658 = log2(_2644);
    float _2665 = exp2(_2658 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0))) * (_2488 + ((isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0))) * _753))) + ((_2494 + ((isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0))) * _1561)) * cbPerFrame._m0[3u].x));
    float _2666 = exp2(_2658 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0))) * (_2490 + ((isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0))) * _753))) + ((_2496 + ((isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0))) * _1561)) * cbPerFrame._m0[3u].x));
    float _2667 = exp2(_2658 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0))) * (_2492 + ((isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0))) * _753))) + ((_2498 + ((isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0))) * _1561)) * cbPerFrame._m0[3u].x));
    float _2676 = (_2656 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2676 * (_2657 ? _2665 : (_2665 + (cbSceneParam._m0[72u].w * _2638)));
    SV_Target.y = _2676 * (_2657 ? _2666 : (_2666 + (cbSceneParam._m0[72u].w * _2640)));
    SV_Target.z = _2676 * (_2657 ? _2667 : (_2667 + (cbSceneParam._m0[72u].w * _2642)));
    SV_Target.w = cbInstanceData._m0[_2518].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2518].w;
}


