#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1161;
float _3541;
float _3542;
float _3543;
float _3544;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _207 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _208 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _209 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _215 = inversesqrt(dot(vec3(_207, _208, _209), vec3(_207, _208, _209)));
    float _216 = _215 * _207;
    float _217 = _215 * _208;
    float _218 = _215 * _209;
    float _222 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _223 = _222 * NORMAL.x;
    float _224 = _222 * NORMAL.y;
    float _225 = _222 * NORMAL.z;
    float _229 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _230 = _229 * TANGENT.x;
    float _231 = _229 * TANGENT.y;
    float _232 = _229 * TANGENT.z;
    float _243 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _245 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _246 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3553 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _3564 = isnan(0.0) ? _245 : (isnan(_245) ? 0.0 : max(_245, 0.0));
    float _3575 = isnan(0.0) ? _246 : (isnan(_246) ? 0.0 : max(_246, 0.0));
    uint _256 = uint(roundEven(NORMAL.w)) * 13u;
    uint _261 = _256 + 1u;
    uint _265 = _256 + 2u;
    float _274 = sqrt(((cbInstanceData._m0[_261].x * cbInstanceData._m0[_261].x) + (cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x)) + (cbInstanceData._m0[_265].x * cbInstanceData._m0[_265].x));
    float _275 = _274 * TEXCOORD.z;
    float _276 = _274 * TEXCOORD.w;
    vec4 _289 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _275) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _276) + cbTextureTilingScale._m0[13u].w));
    vec4 _312 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _317 = _312.x * cbMtdParam._m0[9u].x;
    float _318 = _312.y * cbMtdParam._m0[9u].y;
    float _319 = _312.z * cbMtdParam._m0[9u].z;
    float _323 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _289.x) * _317;
    float _326 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _289.y) * _318;
    float _329 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _289.z) * _319;
    float _336 = ((_317 - _323) * (isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0)))) + _323;
    float _337 = ((_318 - _326) * (isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0)))) + _326;
    float _338 = ((_319 - _329) * (isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0)))) + _329;
    vec4 _357 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _275) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _276) + cbTextureTilingScale._m0[14u].w));
    vec4 _377 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _275) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _276) + cbTextureTilingScale._m0[20u].w));
    vec4 _403 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _407 = _403.z;
    float _411 = (_403.x * 2.0) + (-1.0);
    float _412 = (_403.y * 2.0) + (-1.0);
    float _413 = dot(vec2(_411, _412), vec2(_411, _412));
    float _3586 = isnan(0.0) ? _413 : (isnan(_413) ? 0.0 : max(_413, 0.0));
    float _418 = sqrt(1.0 - (isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0))));
    float _423 = _411 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_377.x * 2.0) + (-1.0)));
    float _424 = _412 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_377.y * 2.0) + (-1.0)));
    float _427 = fma(_418, _223, fma(_424, _230, _423 * _216));
    float _430 = fma(_418, _224, fma(_424, _231, _423 * _217));
    float _433 = fma(_418, _225, fma(_424, _232, _423 * _218));
    float _437 = inversesqrt(dot(vec3(_427, _430, _433), vec3(_427, _430, _433)));
    vec4 _473 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _275) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _276) + cbTextureTilingScale._m0[11u].w));
    float _475 = _473.x;
    float _476 = 1.0 - _475;
    float _485 = (cbMtdParam._m0[19u].x + dot(vec4(_437 * _427, _437 * _430, _437 * _433, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_475 - _476) * cbMtdParam._m0[24u].z) + _476) * cbMtdParam._m0[21u].z);
    float _3597 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _486 = isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0));
    float _493 = (_486 * ((_357.x * cbMtdParam._m0[18u].x) - _336)) + _336;
    float _494 = (_486 * ((_357.y * cbMtdParam._m0[18u].y) - _337)) + _337;
    float _495 = (_486 * ((_357.z * cbMtdParam._m0[18u].z) - _338)) + _338;
    vec4 _508 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _510 = _508.x;
    float _512 = _510 - (_510 * _486);
    float _517 = (((_377.z - _407) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _407;
    vec4 _530 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _275) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _276) + cbTextureTilingScale._m0[15u].w));
    float _537 = (_530.x * 2.0) + (-1.0);
    float _538 = (_530.y * 2.0) + (-1.0);
    float _539 = dot(vec2(_537, _538), vec2(_537, _538));
    float _3608 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _547 = ((_530.z - _517) * _486) + _517;
    float _557 = ((sqrt(1.0 - (isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0)))) - _418) * _486) + _418;
    float _560 = (((_537 - _423) * _486) + _423) + (cbMtdParam._m0[21u].x * _423);
    float _561 = (((_538 - _424) * _486) + _424) + (cbMtdParam._m0[21u].x * _424);
    float _563 = cbMtdParam._m0[22u].x + _403.w;
    float _566 = fma(_557, _223, fma(_561, _230, _560 * _216));
    float _569 = fma(_557, _224, fma(_561, _231, _560 * _217));
    float _572 = fma(_557, _225, fma(_561, _232, _560 * _218));
    float _576 = inversesqrt(dot(vec3(_566, _569, _572), vec3(_566, _569, _572)));
    float _577 = _576 * _566;
    float _578 = _576 * _569;
    float _579 = _576 * _572;
    float _3619 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _580 = isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0));
    float _3630 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _3641 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _3652 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
    float _3663 = isnan(0.0) ? _495 : (isnan(_495) ? 0.0 : max(_495, 0.0));
    float _3674 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _585 = isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0));
    float _599 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _640 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _650 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _640);
    float _651 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _640);
    float _652 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _640);
    float _656 = inversesqrt(dot(vec3(_650, _651, _652), vec3(_650, _651, _652)));
    float _657 = _650 * _656;
    float _658 = _651 * _656;
    float _659 = _652 * _656;
    vec4 _664 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _666 = _664.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _841 = sqrt(((_650 * _650) + (_651 * _651)) + (_652 * _652));
        float _847 = (cbMatDynParam._m0[5u].x * _841) + cbMatDynParam._m0[5u].y;
        float _3685 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
        float _848 = isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0));
        float _852 = (cbMatDynParam._m0[5u].z * _841) + cbMatDynParam._m0[5u].w;
        float _3696 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0))) - _848)) + _848) < ((_666 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _678 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _679 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _699 = fma(_579, cbSceneParam._m0[5u].z, fma(_578, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _577));
    float _702 = fma(_579, cbSceneParam._m0[6u].z, fma(_578, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _577));
    float _705 = fma(_579, cbSceneParam._m0[7u].z, fma(_578, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _577));
    uint _718 = _256 + 9u;
    uint _719 = _718 + uint(cbMatDynParam._m0[0u].w);
    float _725 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0)))) * cbInstanceData._m0[_719].x;
    float _726 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0)))) * cbInstanceData._m0[_719].y;
    float _727 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0)))) * cbInstanceData._m0[_719].z;
    float _3707 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
    float _728 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
    float _3718 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _729 = isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0));
    float _3729 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
    float _730 = isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0));
    float _731 = 1.0 - _585;
    float _732 = _728 * _731;
    float _733 = _729 * _731;
    float _734 = _730 * _731;
    float _739 = (_728 + (-0.039999999105930328369140625)) * _585;
    float _740 = (_729 + (-0.039999999105930328369140625)) * _585;
    float _741 = (_730 + (-0.039999999105930328369140625)) * _585;
    float _742 = _739 + 0.039999999105930328369140625;
    float _744 = _740 + 0.039999999105930328369140625;
    float _745 = _741 + 0.039999999105930328369140625;
    vec4 _754 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _678, cbSceneParam._m0[86u].y * _679));
    float _758 = ((isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0))) * TEXCOORD_5.w) * _754.x;
    float _759 = dot(vec3(_577, _578, _579), vec3(_657, _658, _659));
    float _762 = _759 * 2.0;
    float _766 = (_762 * _577) - _657;
    float _767 = (_762 * _578) - _658;
    float _768 = (_762 * _579) - _659;
    float _772 = abs(dot(vec3(_657, _658, _659), vec3(_577, _578, _579)));
    float _3740 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _774 = sqrt(_580);
    float _787 = exp2((_774 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_774 * 3.0));
    float _793 = (1.0 - _787) * ((_774 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _794 = _787 * _774;
    float _822 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _826 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _830 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1160;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _885 = fma(_830, cbModelParam._m0[26u].z, fma(_826, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _822));
        float _889 = fma(_830, cbModelParam._m0[27u].z, fma(_826, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _822));
        float _893 = fma(_830, cbModelParam._m0[28u].z, fma(_826, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _822));
        float _918 = _822 + _577;
        float _919 = _826 + _578;
        float _920 = _830 + _579;
        float _930 = fma(_920, cbModelParam._m0[26u].z, fma(_919, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _918)) - _885;
        float _931 = fma(_920, cbModelParam._m0[27u].z, fma(_919, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _918)) - _889;
        float _932 = fma(_920, cbModelParam._m0[28u].z, fma(_919, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _918)) - _893;
        float _936 = inversesqrt(dot(vec3(_930, _931, _932), vec3(_930, _931, _932)));
        float _949 = ((_936 * _930) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_885 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _950 = ((_936 * _931) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_889 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _951 = ((_936 * _932) / cbModelParam._m0[34u].z) + ((((((_893 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _954 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_949, _950, _951), 0.0);
        vec4 _961 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_949, _950, _951), 0.0);
        vec4 _968 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_949, _950, _951), 0.0);
        vec4 _975 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_949, _950, _951), 0.0);
        float _988 = exp2((_954.w + (-0.5)) * 20.0) * 2.0;
        float _989 = _988 * (_954.x + (-0.5));
        float _990 = _988 * (_954.y + (-0.5));
        float _991 = _988 * (_954.z + (-0.5));
        float _998 = exp2((_961.w + (-0.5)) * 20.0) * 2.0;
        float _999 = _998 * (_961.x + (-0.5));
        float _1000 = _998 * (_961.y + (-0.5));
        float _1001 = _998 * (_961.z + (-0.5));
        float _1008 = exp2((_968.w + (-0.5)) * 20.0) * 2.0;
        float _1009 = _1008 * (_968.x + (-0.5));
        float _1010 = _1008 * (_968.y + (-0.5));
        float _1011 = _1008 * (_968.z + (-0.5));
        float _1018 = exp2((_975.w + (-0.5)) * 20.0) * 2.0;
        float _1019 = _1018 * (_975.x + (-0.5));
        float _1020 = _1018 * (_975.y + (-0.5));
        float _1021 = _1018 * (_975.z + (-0.5));
        float _1022 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1023 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1024 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1025 = _989 * 0.5;
        float _1026 = _999 * 0.5;
        float _1027 = _1009 * 0.5;
        float _1028 = dot(vec3(_1025, _1026, _1027), vec3(_1025, _1026, _1027));
        float _1033 = (_1028 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1028);
        float _1042 = (dot(vec3(_577, _578, _579), vec3(_1033 * _1025, _1033 * _1026, _1033 * _1027)) + 1.0) * 0.5;
        float _3766 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1052 = sqrt(((_1026 * _1026) + (_1025 * _1025)) + (_1027 * _1027)) / (_1022 + 9.9999997473787516355514526367188e-06);
        float _3777 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1053 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
        float _1054 = _1053 * 2.0;
        float _1058 = (1.0 - _1053) / (_1053 + 1.0);
        float _3788 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1059 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
        float _1068 = ((((1.0 - _1059) * (_1054 + 2.0)) * exp2(log2(isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0))) * (_1054 + 1.0))) + _1059) * _1022;
        float _1069 = _990 * 0.5;
        float _1070 = _1000 * 0.5;
        float _1071 = _1010 * 0.5;
        float _1072 = dot(vec3(_1069, _1070, _1071), vec3(_1069, _1070, _1071));
        float _1077 = (_1072 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1072);
        float _1085 = (dot(vec3(_577, _578, _579), vec3(_1077 * _1069, _1077 * _1070, _1077 * _1071)) + 1.0) * 0.5;
        float _3799 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1094 = sqrt(((_1070 * _1070) + (_1069 * _1069)) + (_1071 * _1071)) / (_1023 + 9.9999997473787516355514526367188e-06);
        float _3810 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1095 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
        float _1096 = _1095 * 2.0;
        float _1100 = (1.0 - _1095) / (_1095 + 1.0);
        float _3821 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1101 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
        float _1110 = ((((1.0 - _1101) * (_1096 + 2.0)) * exp2(log2(isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0))) * (_1096 + 1.0))) + _1101) * _1023;
        float _1111 = _991 * 0.5;
        float _1112 = _1001 * 0.5;
        float _1113 = _1011 * 0.5;
        float _1114 = dot(vec3(_1111, _1112, _1113), vec3(_1111, _1112, _1113));
        float _1119 = (_1114 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1114);
        float _1127 = (dot(vec3(_577, _578, _579), vec3(_1119 * _1111, _1119 * _1112, _1119 * _1113)) + 1.0) * 0.5;
        float _3832 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1136 = sqrt(((_1112 * _1112) + (_1111 * _1111)) + (_1113 * _1113)) / (_1024 + 9.9999997473787516355514526367188e-06);
        float _3843 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1137 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
        float _1138 = _1137 * 2.0;
        float _1142 = (1.0 - _1137) / (_1137 + 1.0);
        float _3854 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1143 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
        float _1152 = ((((1.0 - _1143) * (_1138 + 2.0)) * exp2(log2(isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0))) * (_1138 + 1.0))) + _1143) * _1024;
        _1160 = _991;
        _1162 = _990;
        _1163 = _989;
        _1164 = _1001;
        _1165 = _1000;
        _1166 = _999;
        _1167 = _1011;
        _1168 = _1010;
        _1169 = _1009;
        _1170 = _1024;
        _1171 = _1023;
        _1172 = _1022;
        _1173 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0)));
        _1174 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0)));
        _1175 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0)));
    }
    else
    {
        _1160 = _1161;
        _1162 = _1161;
        _1163 = _1161;
        _1164 = _1161;
        _1165 = _1161;
        _1166 = _1161;
        _1167 = _1161;
        _1168 = _1161;
        _1169 = _1161;
        _1170 = _1161;
        _1171 = _1161;
        _1172 = _1161;
        _1173 = 0.0;
        _1174 = 0.0;
        _1175 = 0.0;
    }
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1203 = fma(_830, cbModelParam._m0[30u].z, fma(_826, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _822));
        float _1207 = fma(_830, cbModelParam._m0[31u].z, fma(_826, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _822));
        float _1211 = fma(_830, cbModelParam._m0[32u].z, fma(_826, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _822));
        float _1234 = _822 + _577;
        float _1235 = _826 + _578;
        float _1236 = _830 + _579;
        float _1246 = fma(_1236, cbModelParam._m0[30u].z, fma(_1235, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1234)) - _1203;
        float _1247 = fma(_1236, cbModelParam._m0[31u].z, fma(_1235, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1234)) - _1207;
        float _1248 = fma(_1236, cbModelParam._m0[32u].z, fma(_1235, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1234)) - _1211;
        float _1252 = inversesqrt(dot(vec3(_1246, _1247, _1248), vec3(_1246, _1247, _1248)));
        float _1265 = ((_1252 * _1246) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1203 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1266 = ((_1252 * _1247) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1207 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1267 = ((_1252 * _1248) / cbModelParam._m0[35u].z) + ((((((_1211 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1269 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1265, _1266, _1267), 0.0);
        vec4 _1276 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1265, _1266, _1267), 0.0);
        vec4 _1283 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1265, _1266, _1267), 0.0);
        vec4 _1290 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1265, _1266, _1267), 0.0);
        float _1302 = exp2((_1269.w + (-0.5)) * 20.0) * 2.0;
        float _1303 = _1302 * (_1269.x + (-0.5));
        float _1304 = _1302 * (_1269.y + (-0.5));
        float _1305 = _1302 * (_1269.z + (-0.5));
        float _1312 = exp2((_1276.w + (-0.5)) * 20.0) * 2.0;
        float _1313 = _1312 * (_1276.x + (-0.5));
        float _1314 = _1312 * (_1276.y + (-0.5));
        float _1315 = _1312 * (_1276.z + (-0.5));
        float _1322 = exp2((_1283.w + (-0.5)) * 20.0) * 2.0;
        float _1323 = _1322 * (_1283.x + (-0.5));
        float _1324 = _1322 * (_1283.y + (-0.5));
        float _1325 = _1322 * (_1283.z + (-0.5));
        float _1332 = exp2((_1290.w + (-0.5)) * 20.0) * 2.0;
        float _1333 = _1332 * (_1290.x + (-0.5));
        float _1334 = _1332 * (_1290.y + (-0.5));
        float _1335 = _1332 * (_1290.z + (-0.5));
        float _1336 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1337 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1338 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1339 = _1303 * 0.5;
        float _1340 = _1313 * 0.5;
        float _1341 = _1323 * 0.5;
        float _1342 = dot(vec3(_1339, _1340, _1341), vec3(_1339, _1340, _1341));
        float _1347 = (_1342 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1342);
        float _1355 = (dot(vec3(_577, _578, _579), vec3(_1347 * _1339, _1347 * _1340, _1347 * _1341)) + 1.0) * 0.5;
        float _3895 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1364 = sqrt(((_1340 * _1340) + (_1339 * _1339)) + (_1341 * _1341)) / (_1336 + 9.9999997473787516355514526367188e-06);
        float _3906 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1365 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
        float _1366 = _1365 * 2.0;
        float _1370 = (1.0 - _1365) / (_1365 + 1.0);
        float _3917 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1371 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
        float _1380 = ((((1.0 - _1371) * (_1366 + 2.0)) * exp2(log2(isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0))) * (_1366 + 1.0))) + _1371) * _1336;
        float _1381 = _1304 * 0.5;
        float _1382 = _1314 * 0.5;
        float _1383 = _1324 * 0.5;
        float _1384 = dot(vec3(_1381, _1382, _1383), vec3(_1381, _1382, _1383));
        float _1389 = (_1384 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1384);
        float _1397 = (dot(vec3(_577, _578, _579), vec3(_1389 * _1381, _1389 * _1382, _1389 * _1383)) + 1.0) * 0.5;
        float _3928 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1406 = sqrt(((_1382 * _1382) + (_1381 * _1381)) + (_1383 * _1383)) / (_1337 + 9.9999997473787516355514526367188e-06);
        float _3939 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1407 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
        float _1408 = _1407 * 2.0;
        float _1412 = (1.0 - _1407) / (_1407 + 1.0);
        float _3950 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1413 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
        float _1422 = ((((1.0 - _1413) * (_1408 + 2.0)) * exp2(log2(isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0))) * (_1408 + 1.0))) + _1413) * _1337;
        float _1423 = _1305 * 0.5;
        float _1424 = _1315 * 0.5;
        float _1425 = _1325 * 0.5;
        float _1426 = dot(vec3(_1423, _1424, _1425), vec3(_1423, _1424, _1425));
        float _1431 = (_1426 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1426);
        float _1439 = (dot(vec3(_577, _578, _579), vec3(_1431 * _1423, _1431 * _1424, _1431 * _1425)) + 1.0) * 0.5;
        float _3961 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1448 = sqrt(((_1424 * _1424) + (_1423 * _1423)) + (_1425 * _1425)) / (_1338 + 9.9999997473787516355514526367188e-06);
        float _3972 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1449 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
        float _1450 = _1449 * 2.0;
        float _1454 = (1.0 - _1449) / (_1449 + 1.0);
        float _3983 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1455 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
        float _1464 = ((((1.0 - _1455) * (_1450 + 2.0)) * exp2(log2(isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0))) * (_1450 + 1.0))) + _1455) * _1338;
        _1472 = _1305;
        _1473 = _1304;
        _1474 = _1303;
        _1475 = _1315;
        _1476 = _1314;
        _1477 = _1313;
        _1478 = _1325;
        _1479 = _1324;
        _1480 = _1323;
        _1481 = _1338;
        _1482 = _1337;
        _1483 = _1336;
        _1484 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0)));
        _1485 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0)));
        _1486 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0)));
    }
    else
    {
        _1472 = _1161;
        _1473 = _1161;
        _1474 = _1161;
        _1475 = _1161;
        _1476 = _1161;
        _1477 = _1161;
        _1478 = _1161;
        _1479 = _1161;
        _1480 = _1161;
        _1481 = _1161;
        _1482 = _1161;
        _1483 = _1161;
        _1484 = 0.0;
        _1485 = 0.0;
        _1486 = 0.0;
    }
    float _1496 = (cbModelParam._m0[1u].x * (_1484 - _1173)) + _1173;
    float _1497 = (cbModelParam._m0[1u].x * (_1485 - _1174)) + _1174;
    float _1498 = (cbModelParam._m0[1u].x * (_1486 - _1175)) + _1175;
    float _1519 = fma(_1498, cbSceneParam._m0[89u].z, fma(_1497, cbSceneParam._m0[89u].y, _1496 * cbSceneParam._m0[89u].x));
    float _1522 = fma(_1498, cbSceneParam._m0[90u].z, fma(_1497, cbSceneParam._m0[90u].y, _1496 * cbSceneParam._m0[90u].x));
    float _1525 = fma(_1498, cbSceneParam._m0[91u].z, fma(_1497, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1496));
    float _1540 = _766 * 0.5;
    float _1541 = _767 * 0.5;
    float _1542 = _768 * 0.5;
    float _1543 = dot(vec4(_1540, _1541, _1542, 1.0), vec4(_1474, _1477, _1480, _1483));
    float _1546 = dot(vec4(_1540, _1541, _1542, 1.0), vec4(_1473, _1476, _1479, _1482));
    float _1549 = dot(vec4(_1540, _1541, _1542, 1.0), vec4(_1472, _1475, _1478, _1481));
    float _1583;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1556 = dot(vec4(_1540, _1541, _1542, 1.0), vec4(_1160, _1164, _1167, _1170));
        float _1560 = dot(vec4(_1540, _1541, _1542, 1.0), vec4(_1162, _1165, _1168, _1171));
        float _1564 = dot(vec4(_1540, _1541, _1542, 1.0), vec4(_1163, _1166, _1169, _1172));
        float _1571 = dot(vec4(cbModelParam._m0[39u]), vec4(_1540, _1541, _1542, 1.0));
        _1583 = dot(vec3(isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0)), isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0)), isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1571) ? 0.0 : (isnan(0.0) ? _1571 : max(0.0, _1571))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1583 = 1.0;
    }
    float _1594;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1585 = dot(vec4(cbModelParam._m0[40u]), vec4(_1540, _1541, _1542, 1.0));
        _1594 = dot(vec3(isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0)), isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0)), isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1585) ? 0.0 : (isnan(0.0) ? _1585 : max(0.0, _1585))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1594 = 1.0;
    }
    float _1598 = (_1594 * cbModelParam._m0[1u].x) + (_1583 * (1.0 - cbModelParam._m0[1u].x));
    float _1608 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _580);
    float _1609 = isnan(_1608) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1608 : min(cbModelParam._m0[25u].z, _1608));
    float _1689;
    float _1691;
    float _1693;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1656 = fma(_830, cbModelParam._m0[13u].z, fma(_826, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _822)) + cbModelParam._m0[13u].w;
        float _1660 = fma(_830, cbModelParam._m0[14u].z, fma(_826, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _822)) + cbModelParam._m0[14u].w;
        float _1664 = fma(_830, cbModelParam._m0[15u].z, fma(_826, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _822)) + cbModelParam._m0[15u].w;
        float _1667 = fma(_768, cbModelParam._m0[13u].z, fma(_767, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _766));
        float _1670 = fma(_768, cbModelParam._m0[14u].z, fma(_767, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _766));
        float _1673 = fma(_768, cbModelParam._m0[15u].z, fma(_767, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _766));
        float _1701;
        if (_1667 > 0.0)
        {
            _1701 = abs((1.0 - _1656) / _1667);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1667 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1656 + 1.0) / _1667);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1701 = frontier_phi_17_15_ladder;
        }
        float _1904;
        if (_1670 > 0.0)
        {
            _1904 = abs((1.0 - _1660) / _1670);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1670 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1660 + 1.0) / _1670);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1904 = frontier_phi_26_22_ladder;
        }
        float _2158;
        if (_1673 > 0.0)
        {
            _2158 = abs((1.0 - _1664) / _1673);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1673 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1664 + 1.0) / _1673);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2158 = frontier_phi_38_33_ladder;
        }
        float _2160 = isnan(_1904) ? _1701 : (isnan(_1701) ? _1904 : min(_1701, _1904));
        float _2161 = isnan(_2158) ? _2160 : (isnan(_2160) ? _2158 : min(_2160, _2158));
        float _2165 = (_2161 * _1667) + _1656;
        float _2166 = (_2161 * _1670) + _1660;
        float _2167 = (_2161 * _1673) + _1664;
        float _2168 = _2161 * 9.9999997473787516355514526367188e-05;
        float _2170 = (-1.0) - _2168;
        float _2172 = _2168 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2167 > _2172) || ((_2167 < _2170) || ((_2166 > _2172) || ((_2166 < _2170) || ((_2165 < _2170) || (_2165 > _2172))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2295 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2167, cbModelParam._m0[9u].z, fma(_2166, cbModelParam._m0[9u].y, _2165 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2167, cbModelParam._m0[10u].z, fma(_2166, cbModelParam._m0[10u].y, _2165 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2167, cbModelParam._m0[11u].z, fma(_2166, cbModelParam._m0[11u].y, _2165 * cbModelParam._m0[11u].x))), _1609);
            frontier_phi_16_38_ladder = _2295.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2295.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2295.x * cbModelParam._m0[1u].y;
        }
        _1689 = frontier_phi_16_38_ladder_2;
        _1691 = frontier_phi_16_38_ladder_1;
        _1693 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1677 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_766, _767, _768), _1609);
        _1689 = _1677.x * cbModelParam._m0[1u].y;
        _1691 = _1677.y * cbModelParam._m0[1u].y;
        _1693 = _1677.z * cbModelParam._m0[1u].y;
    }
    float _1697 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _580);
    float _1698 = isnan(_1697) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1697 : min(cbModelParam._m0[25u].w, _1697));
    float _1787;
    float _1789;
    float _1791;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1751 = fma(_830, cbModelParam._m0[21u].z, fma(_826, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _822)) + cbModelParam._m0[21u].w;
        float _1755 = fma(_830, cbModelParam._m0[22u].z, fma(_826, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _822)) + cbModelParam._m0[22u].w;
        float _1759 = fma(_830, cbModelParam._m0[23u].z, fma(_826, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _822)) + cbModelParam._m0[23u].w;
        float _1762 = fma(_768, cbModelParam._m0[21u].z, fma(_767, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _766));
        float _1765 = fma(_768, cbModelParam._m0[22u].z, fma(_767, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _766));
        float _1768 = fma(_768, cbModelParam._m0[23u].z, fma(_767, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _766));
        float _1909;
        if (_1762 > 0.0)
        {
            _1909 = abs((1.0 - _1751) / _1762);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1762 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1751 + 1.0) / _1762);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1909 = frontier_phi_28_24_ladder;
        }
        float _2185;
        if (_1765 > 0.0)
        {
            _2185 = abs((1.0 - _1755) / _1765);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1765 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1755 + 1.0) / _1765);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2185 = frontier_phi_40_35_ladder;
        }
        float _2398;
        if (_1768 > 0.0)
        {
            _2398 = abs((1.0 - _1759) / _1768);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1768 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1759 + 1.0) / _1768);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2398 = frontier_phi_49_46_ladder;
        }
        float _2400 = isnan(_2185) ? _1909 : (isnan(_1909) ? _2185 : min(_1909, _2185));
        float _2401 = isnan(_2398) ? _2400 : (isnan(_2400) ? _2398 : min(_2400, _2398));
        float _2405 = (_2401 * _1762) + _1751;
        float _2406 = (_2401 * _1765) + _1755;
        float _2407 = (_2401 * _1768) + _1759;
        float _2408 = _2401 * 9.9999997473787516355514526367188e-05;
        float _2409 = (-1.0) - _2408;
        float _2411 = _2408 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2407 > _2411) || ((_2407 < _2409) || ((_2406 > _2411) || ((_2406 < _2409) || ((_2405 < _2409) || (_2405 > _2411))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2606 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2407, cbModelParam._m0[17u].z, fma(_2406, cbModelParam._m0[17u].y, _2405 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2407, cbModelParam._m0[18u].z, fma(_2406, cbModelParam._m0[18u].y, _2405 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2407, cbModelParam._m0[19u].z, fma(_2406, cbModelParam._m0[19u].y, _2405 * cbModelParam._m0[19u].x))), _1698);
            frontier_phi_25_49_ladder = _2606.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2606.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2606.x * cbModelParam._m0[1u].z;
        }
        _1787 = frontier_phi_25_49_ladder_2;
        _1789 = frontier_phi_25_49_ladder_1;
        _1791 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1771 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_766, _767, _768), _1698);
        _1787 = _1771.x * cbModelParam._m0[1u].z;
        _1789 = _1771.y * cbModelParam._m0[1u].z;
        _1791 = _1771.z * cbModelParam._m0[1u].z;
    }
    float _1804 = (((_793 * _742) + _794) * _758) * ((cbModelParam._m0[1u].w * (_1787 - _1689)) + _1689);
    float _1806 = (((_793 * _744) + _794) * _758) * ((cbModelParam._m0[1u].w * (_1789 - _1691)) + _1691);
    float _1808 = (((_793 * _745) + _794) * _758) * ((cbModelParam._m0[1u].w * (_1791 - _1693)) + _1693);
    float _1811 = fma(_1808, cbSceneParam._m0[89u].z, fma(_1806, cbSceneParam._m0[89u].y, _1804 * cbSceneParam._m0[89u].x));
    float _1814 = fma(_1808, cbSceneParam._m0[90u].z, fma(_1806, cbSceneParam._m0[90u].y, _1804 * cbSceneParam._m0[90u].x));
    float _1817 = fma(_1808, cbSceneParam._m0[91u].z, fma(_1806, cbSceneParam._m0[91u].y, _1804 * cbSceneParam._m0[91u].x));
    uvec4 _1827 = floatBitsToUint(cbInstanceData._m0[_256 + 5u]);
    uint _1829 = _1827.x * 14u;
    uint _1830 = _1829 + 13u;
    float _1837 = _758 + (-1.0);
    float _1842 = (cbLight._m0[_1830].x * _1837) + 1.0;
    float _1843 = (cbLight._m0[_1830].y * _1837) + 1.0;
    float _1844 = (cbLight._m0[_1830].z * _1837) + 1.0;
    float _1845 = (cbLight._m0[_1830].w * _1837) + 1.0;
    uint _1846 = _1829 + 5u;
    float _1852 = isnan(1.0) ? _1843 : (isnan(_1843) ? 1.0 : min(_1843, 1.0));
    uint _1856 = _1829 + 4u;
    float _1863 = isnan(1.0) ? _1842 : (isnan(_1842) ? 1.0 : min(_1842, 1.0));
    uint _1867 = _1829 | 1u;
    float _1878 = dot(vec3(cbLight._m0[_1829].xyz), vec3(_577, _578, _579));
    float _1881 = dot(vec3(cbLight._m0[_1867].xyz), vec3(_577, _578, _579));
    float _4119 = isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0));
    float _4130 = isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0));
    float _1886 = (isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0))) * 0.3183098733425140380859375;
    float _1888 = (isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0))) * 0.3183098733425140380859375;
    float _1895 = ((cbLight._m0[_1846].x * _1852) * _1888) + ((cbLight._m0[_1856].x * _1863) * _1886);
    float _1896 = ((_1852 * cbLight._m0[_1846].y) * _1888) + ((_1863 * cbLight._m0[_1856].y) * _1886);
    float _1897 = ((_1852 * cbLight._m0[_1846].z) * _1888) + ((_1863 * cbLight._m0[_1856].z) * _1886);
    uvec4 _1901 = floatBitsToUint(cbLight._m0[_1829 + 12u]);
    bool _1903 = _1901.x == 0u;
    float _1914;
    float _1916;
    float _1918;
    if (_1903)
    {
        _1914 = _1895;
        _1916 = _1896;
        _1918 = _1897;
    }
    else
    {
        uint _1922 = _1829 + 6u;
        float _1938 = (dot(vec3(cbLight._m0[_1829 + 2u].xyz), vec3(_577, _578, _579)) * 0.5) + 0.5;
        float _1939 = _1938 * _1938;
        float _4141 = isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0));
        float _1940 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
        float _1941 = isnan(1.0) ? _1844 : (isnan(_1844) ? 1.0 : min(_1844, 1.0));
        _1914 = (((cbLight._m0[_1922].x * 0.3183098733425140380859375) * _1940) * _1941) + _1895;
        _1916 = (((cbLight._m0[_1922].y * 0.3183098733425140380859375) * _1940) * _1941) + _1896;
        _1918 = (((cbLight._m0[_1922].z * 0.3183098733425140380859375) * _1940) * _1941) + _1897;
    }
    bool _1921 = _1901.y == 0u;
    float _1959;
    float _1961;
    float _1963;
    if (_1921)
    {
        _1959 = _1914;
        _1961 = _1916;
        _1963 = _1918;
    }
    else
    {
        uint _2129 = _1829 + 7u;
        float _2145 = (dot(vec3(cbLight._m0[_1829 + 3u].xyz), vec3(_577, _578, _579)) * 0.5) + 0.5;
        float _2146 = _2145 * _2145;
        float _4157 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
        float _2147 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
        float _2148 = isnan(1.0) ? _1845 : (isnan(_1845) ? 1.0 : min(_1845, 1.0));
        _1959 = (((cbLight._m0[_2129].x * 0.3183098733425140380859375) * _2147) * _2148) + _1914;
        _1961 = (((cbLight._m0[_2129].y * 0.3183098733425140380859375) * _2147) * _2148) + _1916;
        _1963 = (((cbLight._m0[_2129].z * 0.3183098733425140380859375) * _2147) * _2148) + _1918;
    }
    uint _1966 = _1829 + 8u;
    float _1979 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1829].w)) * _580) * 0.949999988079071044921875);
    float _1980 = _1979 * _1979;
    float _1981 = cbLight._m0[_1829].x + _657;
    float _1982 = cbLight._m0[_1829].y + _658;
    float _1983 = cbLight._m0[_1829].z + _659;
    float _1987 = inversesqrt(dot(vec3(_1981, _1982, _1983), vec3(_1981, _1982, _1983)));
    float _1988 = _1987 * _1981;
    float _1989 = _1987 * _1982;
    float _1990 = _1987 * _1983;
    float _1991 = dot(vec3(_577, _578, _579), vec3(cbLight._m0[_1829].xyz));
    float _4173 = isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0));
    float _1994 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
    float _4184 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    float _1995 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
    float _1996 = dot(vec3(_577, _578, _579), vec3(_1988, _1989, _1990));
    float _4195 = isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0));
    float _1999 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
    float _2000 = dot(vec3(cbLight._m0[_1829].xyz), vec3(_1988, _1989, _1990));
    float _4206 = isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0));
    float _2004 = _1980 * _1980;
    float _2008 = ((_1999 * _1999) * (_2004 + (-1.0))) + 1.0;
    float _2016 = exp2(log2(1.0 - (isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0)))) * 5.0);
    float _2017 = 0.959999978542327880859375 - _739;
    float _2019 = 0.959999978542327880859375 - _740;
    float _2020 = 0.959999978542327880859375 - _741;
    float _2027 = 1.0 - _1980;
    float _2038 = (0.5 / (((_1995 * ((_1994 * _2027) + _1980)) + 9.9999999392252902907785028219223e-09) + (((_1995 * _2027) + _1980) * _1994))) * _1994;
    float _4217 = isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0));
    float _2040 = (isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0))) * (_2004 / ((_2008 * _2008) * 3.141590118408203125));
    uint _2051 = _1829 + 9u;
    float _2062 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1867].w)) * _580) * 0.949999988079071044921875);
    float _2063 = _2062 * _2062;
    float _2064 = cbLight._m0[_1867].x + _657;
    float _2065 = cbLight._m0[_1867].y + _658;
    float _2066 = cbLight._m0[_1867].z + _659;
    float _2070 = inversesqrt(dot(vec3(_2064, _2065, _2066), vec3(_2064, _2065, _2066)));
    float _2071 = _2070 * _2064;
    float _2072 = _2070 * _2065;
    float _2073 = _2070 * _2066;
    float _2074 = dot(vec3(_577, _578, _579), vec3(cbLight._m0[_1867].xyz));
    float _4228 = isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0));
    float _2077 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
    float _2078 = dot(vec3(_577, _578, _579), vec3(_2071, _2072, _2073));
    float _4239 = isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0));
    float _2081 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
    float _2082 = dot(vec3(cbLight._m0[_1867].xyz), vec3(_2071, _2072, _2073));
    float _4250 = isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0));
    float _2086 = _2063 * _2063;
    float _2090 = ((_2081 * _2081) * (_2086 + (-1.0))) + 1.0;
    float _2097 = exp2(log2(1.0 - (isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0)))) * 5.0);
    float _2104 = 1.0 - _2063;
    float _2114 = (0.5 / (((_1995 * ((_2077 * _2104) + _2063)) + 9.9999999392252902907785028219223e-09) + (((_1995 * _2104) + _2063) * _2077))) * _2077;
    float _4261 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
    float _2116 = (isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0))) * (_2086 / ((_2090 * _2090) * 3.141590118408203125));
    float _2126 = (((((_2097 * _2017) + _742) * cbLight._m0[_2051].x) * _2116) * _1852) + (((((_2016 * _2017) + _742) * cbLight._m0[_1966].x) * _2040) * _1863);
    float _2127 = (((((_2097 * _2019) + _744) * cbLight._m0[_2051].y) * _2116) * _1852) + (((((_2016 * _2019) + _744) * cbLight._m0[_1966].y) * _2040) * _1863);
    float _2128 = (((((_2097 * _2020) + _745) * cbLight._m0[_2051].z) * _2116) * _1852) + (((((_2016 * _2020) + _745) * cbLight._m0[_1966].z) * _2040) * _1863);
    float _2190;
    float _2192;
    float _2194;
    if (_1903)
    {
        _2190 = _2126;
        _2192 = _2127;
        _2194 = _2128;
    }
    else
    {
        uint _2196 = _1829 + 2u;
        uint _2200 = _1829 + 10u;
        float _2214 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2196].w)) * _580) * 0.949999988079071044921875);
        float _2215 = _2214 * _2214;
        float _2216 = cbLight._m0[_2196].x + _657;
        float _2217 = cbLight._m0[_2196].y + _658;
        float _2218 = cbLight._m0[_2196].z + _659;
        float _2222 = inversesqrt(dot(vec3(_2216, _2217, _2218), vec3(_2216, _2217, _2218)));
        float _2223 = _2222 * _2216;
        float _2224 = _2222 * _2217;
        float _2225 = _2222 * _2218;
        float _2226 = dot(vec3(_577, _578, _579), vec3(cbLight._m0[_2196].xyz));
        float _4272 = isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0));
        float _2229 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
        float _2230 = dot(vec3(_577, _578, _579), vec3(_2223, _2224, _2225));
        float _4283 = isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0));
        float _2233 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
        float _2234 = dot(vec3(cbLight._m0[_2196].xyz), vec3(_2223, _2224, _2225));
        float _4294 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
        float _2238 = _2215 * _2215;
        float _2242 = ((_2233 * _2233) * (_2238 + (-1.0))) + 1.0;
        float _2249 = exp2(log2(1.0 - (isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0)))) * 5.0);
        float _2256 = 1.0 - _2215;
        float _2266 = (0.5 / (((_1995 * ((_2229 * _2256) + _2215)) + 9.9999999392252902907785028219223e-09) + (((_1995 * _2256) + _2215) * _2229))) * _2229;
        float _4305 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
        float _2268 = (isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0))) * (_2238 / ((_2242 * _2242) * 3.141590118408203125));
        float _2269 = isnan(1.0) ? _1844 : (isnan(_1844) ? 1.0 : min(_1844, 1.0));
        _2190 = (((((_2249 * _2017) + _742) * cbLight._m0[_2200].x) * _2268) * _2269) + _2126;
        _2192 = (((((_2249 * _2019) + _744) * cbLight._m0[_2200].y) * _2268) * _2269) + _2127;
        _2194 = (((((_2249 * _2020) + _745) * cbLight._m0[_2200].z) * _2268) * _2269) + _2128;
    }
    float _2304;
    float _2306;
    float _2308;
    if (_1921)
    {
        _2304 = _2190;
        _2306 = _2192;
        _2308 = _2194;
    }
    else
    {
        uint _2315 = _1829 + 3u;
        uint _2319 = _1829 + 11u;
        float _2333 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2315].w)) * _580) * 0.949999988079071044921875);
        float _2334 = _2333 * _2333;
        float _2335 = cbLight._m0[_2315].x + _657;
        float _2336 = cbLight._m0[_2315].y + _658;
        float _2337 = cbLight._m0[_2315].z + _659;
        float _2341 = inversesqrt(dot(vec3(_2335, _2336, _2337), vec3(_2335, _2336, _2337)));
        float _2342 = _2341 * _2335;
        float _2343 = _2341 * _2336;
        float _2344 = _2341 * _2337;
        float _2345 = dot(vec3(_577, _578, _579), vec3(cbLight._m0[_2315].xyz));
        float _4321 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
        float _2348 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
        float _2349 = dot(vec3(_577, _578, _579), vec3(_2342, _2343, _2344));
        float _4332 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
        float _2352 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
        float _2353 = dot(vec3(cbLight._m0[_2315].xyz), vec3(_2342, _2343, _2344));
        float _4343 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
        float _2357 = _2334 * _2334;
        float _2361 = ((_2352 * _2352) * (_2357 + (-1.0))) + 1.0;
        float _2368 = exp2(log2(1.0 - (isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0)))) * 5.0);
        float _2375 = 1.0 - _2334;
        float _2385 = (0.5 / (((_1995 * ((_2348 * _2375) + _2334)) + 9.9999999392252902907785028219223e-09) + (((_1995 * _2375) + _2334) * _2348))) * _2348;
        float _4354 = isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0));
        float _2387 = (isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0))) * (_2357 / ((_2361 * _2361) * 3.141590118408203125));
        float _2388 = isnan(1.0) ? _1845 : (isnan(_1845) ? 1.0 : min(_1845, 1.0));
        _2304 = (((((_2368 * _2017) + _742) * cbLight._m0[_2319].x) * _2387) * _2388) + _2190;
        _2306 = (((((_2368 * _2019) + _744) * cbLight._m0[_2319].y) * _2387) * _2388) + _2192;
        _2308 = (((((_2368 * _2020) + _745) * cbLight._m0[_2319].z) * _2387) * _2388) + _2194;
    }
    float _2523;
    float _2525;
    float _2527;
    float _2529;
    float _2531;
    float _2533;
    if (_1827.y == 0u)
    {
        float _2463 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2464 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2463;
        float _2465 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2463;
        float _2466 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2463;
        uvec4 _2478 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2479 = _2478.x;
        uint _2490 = uint((float(_2478.y) * floor(float(uint(cbSceneParam._m0[85u].y * _679) / _2479))) + floor(float(uint(cbSceneParam._m0[85u].x * _678) / _2479)));
        float _2500 = (log2(_2466 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2501 = isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : max(_2500, 0.0));
        uint _2504 = uint(isnan(14.0) ? _2501 : (isnan(_2501) ? 14.0 : min(_2501, 14.0)));
        uvec4 _2509 = texelFetch(g_lightClusterGridBuffer, int(((_2504 << 2u) + (_2490 << 6u)) >> 2u));
        uint _2510 = _2509.x;
        uint _2511 = _2478.z;
        float _2611;
        float _2613;
        float _2615;
        float _2617;
        float _2619;
        float _2621;
        if (((((1u << ((_2511 >> 4u) & 15u)) + 4294967295u) & _2510) == 0u) || ((_2511 & 240u) == 0u))
        {
            _2611 = 0.0;
            _2613 = 0.0;
            _2615 = 0.0;
            _2617 = 0.0;
            _2619 = 0.0;
            _2621 = 0.0;
        }
        else
        {
            float _2612;
            float _2614;
            float _2616;
            float _2618;
            float _2620;
            float _2622;
            float _2764 = 0.0;
            float _2765 = 0.0;
            float _2766 = 0.0;
            float _2767 = 0.0;
            float _2768 = 0.0;
            float _2769 = 0.0;
            uint _2770 = 0u;
            uint _2779;
            bool _2780;
            for (;;)
            {
                _2779 = texelFetch(g_lightClassification, int((((_2504 << 5u) + (_2490 << 9u)) + (_2770 << 2u)) >> 2u)).x;
                _2780 = _2779 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2780)
                {
                    frontier_phi_66_pred = _2764;
                    frontier_phi_66_pred_1 = _2769;
                    frontier_phi_66_pred_2 = _2768;
                    frontier_phi_66_pred_3 = _2767;
                    frontier_phi_66_pred_4 = _2766;
                    frontier_phi_66_pred_5 = _2765;
                }
                else
                {
                    float _2909;
                    float _2910;
                    float _2911;
                    float _2912;
                    float _2913;
                    float _2914;
                    uint _2915;
                    _2909 = _2764;
                    _2910 = _2765;
                    _2911 = _2766;
                    _2912 = _2767;
                    _2913 = _2768;
                    _2914 = _2769;
                    _2915 = _2779;
                    float _2836;
                    float _2837;
                    float _2838;
                    float _2839;
                    float _2840;
                    float _2841;
                    for (;;)
                    {
                        uint _2919 = uint(findLSB(_2915)) + (_2770 << 5u);
                        uint _2916 = (_2915 + 4294967295u) & _2915;
                        uint _2921 = _2919 * 48u;
                        vec4 _2935 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2921)).x, texelFetch(g_PointLightRenderingBuffer, int(_2921 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2921 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2921 + 3u)).x));
                        uint _2941 = (_2919 * 48u) + 4u;
                        vec4 _2954 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2941)).x, texelFetch(g_PointLightRenderingBuffer, int(_2941 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2941 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2941 + 3u)).x));
                        uint _2960 = (_2919 * 48u) + 8u;
                        vec3 _2971 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2960)).x, texelFetch(g_PointLightRenderingBuffer, int(_2960 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2960 + 2u)).x));
                        float _2975 = _2935.x - _2464;
                        float _2976 = _2935.y - _2465;
                        float _2977 = _2935.z - _2466;
                        float _2978 = dot(vec3(_2975, _2976, _2977), vec3(_2975, _2976, _2977));
                        float _2981 = inversesqrt(_2978);
                        float _2982 = _2981 * _2975;
                        float _2983 = _2981 * _2976;
                        float _2984 = _2981 * _2977;
                        float _2985 = dot(vec3(_699, _702, _705), vec3(_2982, _2983, _2984));
                        float _2990 = 1.0 - (_2978 * _2935.w);
                        float _4380 = isnan(0.0) ? _2990 : (isnan(_2990) ? 0.0 : max(_2990, 0.0));
                        float _2991 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
                        float _2992 = sqrt(_2978) * _2954.w;
                        float _2995 = 1.39999997615814208984375 / (_2992 + 1.39999997615814208984375);
                        float _2996 = _2995 * _2995;
                        float _2999 = ((1.0 - _2996) * _2985) + _2996;
                        float _3002 = _2992 * _2992;
                        float _3006 = ((isnan(0.0) ? _2999 : (isnan(_2999) ? 0.0 : max(_2999, 0.0))) * _2991) / ((_3002 * 0.699999988079071044921875) + 1.0);
                        float _3010 = (-0.0) - _2464;
                        float _3011 = (-0.0) - _2465;
                        float _3012 = (-0.0) - _2466;
                        float _3016 = inversesqrt(dot(vec3(_3010, _3011, _3012), vec3(_3010, _3011, _3012)));
                        float _3017 = _3016 * _3010;
                        float _3018 = _3016 * _3011;
                        float _3019 = _3016 * _3012;
                        float _3027 = exp2(log2(1.0 / ((_3002 * 3.5) + 5.0)) * 0.25);
                        float _3028 = 1.0 - _774;
                        float _3035 = sqrt(1.0 - ((1.0 - (_3028 * _3028)) * (1.0 - (_3027 * _3027))));
                        float _3036 = _3035 * _3035;
                        float _3037 = _3036 * _3036;
                        float _3038 = _3017 + _2982;
                        float _3039 = _3018 + _2983;
                        float _3040 = _3019 + _2984;
                        float _3044 = inversesqrt(dot(vec3(_3038, _3039, _3040), vec3(_3038, _3039, _3040)));
                        float _3048 = dot(vec3(_699, _702, _705), vec3(_3017, _3018, _3019));
                        float _4396 = isnan(0.0) ? _3048 : (isnan(_3048) ? 0.0 : max(_3048, 0.0));
                        float _3051 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
                        float _3052 = dot(vec3(_699, _702, _705), vec3(_3044 * _3038, _3044 * _3039, _3044 * _3040));
                        float _4407 = isnan(0.0) ? _3052 : (isnan(_3052) ? 0.0 : max(_3052, 0.0));
                        float _3055 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
                        float _3059 = ((_3055 * _3055) * (_3037 + (-1.0))) + 1.0;
                        float _3060 = _2995 * _3036;
                        float _3061 = _3060 * _3060;
                        float _3064 = ((1.0 - _3061) * _2985) + _3061;
                        float _4418 = isnan(0.0) ? _3064 : (isnan(_3064) ? 0.0 : max(_3064, 0.0));
                        float _3065 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
                        float _3066 = 1.0 - _3036;
                        float _3076 = (0.5 / (((_3065 * ((_3051 * _3066) + _3036)) + 9.9999999392252902907785028219223e-09) + (((_3065 * _3066) + _3036) * _3051))) * _3065;
                        float _4429 = isnan(0.0) ? _3076 : (isnan(_3076) ? 0.0 : max(_3076, 0.0));
                        float _3087 = (((_3037 * 3.1415927410125732421875) * (isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0)))) / ((_3059 * _3059) * ((_3002 * 2.1991131305694580078125) + 3.141590118408203125))) * _2991;
                        _2839 = (_3006 * _2954.x) + _2912;
                        _2840 = (_3006 * _2954.y) + _2913;
                        _2841 = (_3006 * _2954.z) + _2914;
                        _2836 = (_3087 * _2971.x) + _2909;
                        _2837 = (_3087 * _2971.y) + _2910;
                        _2838 = (_3087 * _2971.z) + _2911;
                        if (_2916 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2909 = _2836;
                            _2910 = _2837;
                            _2911 = _2838;
                            _2912 = _2839;
                            _2913 = _2840;
                            _2914 = _2841;
                            _2915 = _2916;
                        }
                    }
                    frontier_phi_66_pred = _2836;
                    frontier_phi_66_pred_1 = _2841;
                    frontier_phi_66_pred_2 = _2840;
                    frontier_phi_66_pred_3 = _2839;
                    frontier_phi_66_pred_4 = _2838;
                    frontier_phi_66_pred_5 = _2837;
                }
                _2612 = frontier_phi_66_pred;
                _2622 = frontier_phi_66_pred_1;
                _2620 = frontier_phi_66_pred_2;
                _2618 = frontier_phi_66_pred_3;
                _2616 = frontier_phi_66_pred_4;
                _2614 = frontier_phi_66_pred_5;
                uint _2771 = _2770 + 1u;
                if (_2771 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2764 = _2612;
                    _2765 = _2614;
                    _2766 = _2616;
                    _2767 = _2618;
                    _2768 = _2620;
                    _2769 = _2622;
                    _2770 = _2771;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2611 = _2612;
            _2613 = _2614;
            _2615 = _2616;
            _2617 = _2618;
            _2619 = _2620;
            _2621 = _2622;
        }
        uvec4 _2625 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2626 = _2625.z;
        uint _2628 = (_2626 >> 8u) & 15u;
        float _2732;
        float _2734;
        float _2736;
        float _2738;
        float _2740;
        float _2742;
        if (((4294967295u << _2628) & _2510) == 0u)
        {
            _2732 = _2611;
            _2734 = _2613;
            _2736 = _2615;
            _2738 = _2617;
            _2740 = _2619;
            _2742 = _2621;
        }
        else
        {
            float _2757 = inversesqrt(dot(vec3(_2464, _2465, _2466), vec3(_2464, _2465, _2466)));
            float _2758 = _2757 * _2464;
            float _2759 = _2757 * _2465;
            float _2760 = _2757 * _2466;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2628 < ((_2626 >> 12u) & 15u))
            {
                float _2733;
                float _2735;
                float _2737;
                float _2739;
                float _2741;
                float _2743;
                float _2892 = _2611;
                float _2893 = _2613;
                float _2894 = _2615;
                float _2895 = _2617;
                float _2896 = _2619;
                float _2897 = _2621;
                uint _2898 = _2628;
                uint _2907;
                bool _2908;
                for (;;)
                {
                    _2907 = texelFetch(g_lightClassification, int((((_2504 << 5u) + (_2490 << 9u)) + (_2898 << 2u)) >> 2u)).x;
                    _2908 = _2907 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2908)
                    {
                        frontier_phi_77_pred = _2897;
                        frontier_phi_77_pred_1 = _2896;
                        frontier_phi_77_pred_2 = _2895;
                        frontier_phi_77_pred_3 = _2894;
                        frontier_phi_77_pred_4 = _2893;
                        frontier_phi_77_pred_5 = _2892;
                    }
                    else
                    {
                        float _3101;
                        float _3102;
                        float _3103;
                        float _3104;
                        float _3105;
                        float _3106;
                        float _3394;
                        float _3395;
                        float _3396;
                        float _3397;
                        float _3398;
                        float _3399;
                        float _3114 = _2892;
                        float _3115 = _2893;
                        float _3116 = _2894;
                        float _3117 = _2895;
                        float _3118 = _2896;
                        float _3119 = _2897;
                        uint _3120 = _2907;
                        uint _3121;
                        vec4 _3146;
                        float _3147;
                        vec4 _3162;
                        vec3 _3174;
                        vec4 _3189;
                        vec4 _3204;
                        float _3250;
                        bool _3251;
                        for (;;)
                        {
                            uint _3131 = ((_2898 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3120));
                            _3121 = (_3120 + 4294967295u) & _3120;
                            uint _3133 = _3131 * 40u;
                            _3146 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3133)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3133 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3133 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3133 + 3u)).x));
                            _3147 = _3146.w;
                            uint _3149 = (_3131 * 40u) + 4u;
                            _3162 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3149)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3149 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3149 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3149 + 3u)).x));
                            uint _3164 = (_3131 * 40u) + 8u;
                            _3174 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3164)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3164 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3164 + 2u)).x));
                            uint _3176 = (_3131 * 40u) + 16u;
                            _3189 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3176)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 3u)).x));
                            uint _3191 = (_3131 * 40u) + 20u;
                            _3204 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3191)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3191 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3191 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3191 + 3u)).x));
                            uint _3206 = (_3131 * 40u) + 24u;
                            vec4 _3219 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3206)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 3u)).x));
                            uint _3225 = (_3131 * 40u) + 28u;
                            vec4 _3238 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3225)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3225 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3225 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3225 + 3u)).x));
                            _3250 = fma(_2466, _3238.z, fma(_2465, _3238.y, _3238.x * _2464)) + _3238.w;
                            _3251 = !((fma(_2466, _3219.z, fma(_2465, _3219.y, _3219.x * _2464)) + _3219.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3251)
                            {
                                float _3278 = _3146.x - _2464;
                                float _3279 = _3146.y - _2465;
                                float _3280 = _3146.z - _2466;
                                float _3281 = dot(vec3(_3278, _3279, _3280), vec3(_3278, _3279, _3280));
                                float _3284 = inversesqrt(_3281);
                                float _3285 = _3284 * _3278;
                                float _3286 = _3284 * _3279;
                                float _3287 = _3284 * _3280;
                                float _3291 = 1.0 - (_3281 / (_3147 * _3147));
                                float _4440 = isnan(0.0) ? _3291 : (isnan(_3291) ? 0.0 : max(_3291, 0.0));
                                float _3292 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
                                float _3296 = sqrt(_3281) * _3162.w;
                                float _3298 = 1.39999997615814208984375 / (_3296 + 1.39999997615814208984375);
                                float _3299 = _3298 * _3298;
                                float _3302 = ((1.0 - _3299) * dot(vec3(_3285, _3286, _3287), vec3(_699, _702, _705))) + _3299;
                                float _3305 = _3296 * _3296;
                                float _3309 = (fma(_2466, _3189.z, fma(_2465, _3189.y, _3189.x * _2464)) + _3189.w) / _3250;
                                float _3310 = (fma(_2466, _3204.z, fma(_2465, _3204.y, _3204.x * _2464)) + _3204.w) / _3250;
                                float _3314 = 1.0 - dot(vec2(_3309, _3310), vec2(_3309, _3310));
                                float _4456 = isnan(0.0) ? _3314 : (isnan(_3314) ? 0.0 : max(_3314, 0.0));
                                float _3315 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
                                float _3316 = _3315 * (((isnan(0.0) ? _3302 : (isnan(_3302) ? 0.0 : max(_3302, 0.0))) * _3292) / ((_3305 * 0.699999988079071044921875) + 1.0));
                                float _3328 = exp2(log2(1.0 / ((_3305 * 3.5) + 5.0)) * 0.25);
                                float _3329 = 1.0 - _774;
                                float _3336 = sqrt(1.0 - ((1.0 - (_3329 * _3329)) * (1.0 - (_3328 * _3328))));
                                float _3337 = _3336 * _3336;
                                float _3338 = _3337 * _3337;
                                float _3339 = _3285 - _2758;
                                float _3340 = _3286 - _2759;
                                float _3341 = _3287 - _2760;
                                float _3345 = inversesqrt(dot(vec3(_3339, _3340, _3341), vec3(_3339, _3340, _3341)));
                                float _3349 = dot(vec3(_699, _702, _705), vec3((-0.0) - _2758, (-0.0) - _2759, (-0.0) - _2760));
                                float _4467 = isnan(0.0) ? _3349 : (isnan(_3349) ? 0.0 : max(_3349, 0.0));
                                float _3352 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
                                float _3353 = dot(vec3(_699, _702, _705), vec3(_3345 * _3339, _3345 * _3340, _3345 * _3341));
                                float _4478 = isnan(0.0) ? _3353 : (isnan(_3353) ? 0.0 : max(_3353, 0.0));
                                float _3356 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
                                float _3360 = ((_3356 * _3356) * (_3338 + (-1.0))) + 1.0;
                                float _3361 = _3298 * _3337;
                                float _3362 = _3361 * _3361;
                                float _3368 = ((1.0 - _3362) * dot(vec3(_699, _702, _705), vec3(_3285, _3286, _3287))) + _3362;
                                float _4489 = isnan(0.0) ? _3368 : (isnan(_3368) ? 0.0 : max(_3368, 0.0));
                                float _3369 = isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0));
                                float _3370 = 1.0 - _3337;
                                float _3380 = (0.5 / (((_3369 * ((_3352 * _3370) + _3337)) + 9.9999999392252902907785028219223e-09) + (((_3369 * _3370) + _3337) * _3352))) * _3369;
                                float _4500 = isnan(0.0) ? _3380 : (isnan(_3380) ? 0.0 : max(_3380, 0.0));
                                float _3390 = (_3315 * _3292) * (((_3338 * 3.1415927410125732421875) * (isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0)))) / ((_3360 * _3360) * ((_3305 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3316 * _3162.y;
                                frontier_phi_83_pred_1 = _3316 * _3162.x;
                                frontier_phi_83_pred_2 = _3390 * _3174.z;
                                frontier_phi_83_pred_3 = _3390 * _3174.y;
                                frontier_phi_83_pred_4 = _3390 * _3174.x;
                                frontier_phi_83_pred_5 = _3316 * _3162.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3398 = frontier_phi_83_pred;
                            _3397 = frontier_phi_83_pred_1;
                            _3396 = frontier_phi_83_pred_2;
                            _3395 = frontier_phi_83_pred_3;
                            _3394 = frontier_phi_83_pred_4;
                            _3399 = frontier_phi_83_pred_5;
                            _3104 = _3397 + _3117;
                            _3105 = _3398 + _3118;
                            _3106 = _3399 + _3119;
                            _3101 = _3394 + _3114;
                            _3102 = _3395 + _3115;
                            _3103 = _3396 + _3116;
                            if (_3121 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3114 = _3101;
                                _3115 = _3102;
                                _3116 = _3103;
                                _3117 = _3104;
                                _3118 = _3105;
                                _3119 = _3106;
                                _3120 = _3121;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3106;
                        frontier_phi_77_pred_1 = _3105;
                        frontier_phi_77_pred_2 = _3104;
                        frontier_phi_77_pred_3 = _3103;
                        frontier_phi_77_pred_4 = _3102;
                        frontier_phi_77_pred_5 = _3101;
                    }
                    _2743 = frontier_phi_77_pred;
                    _2741 = frontier_phi_77_pred_1;
                    _2739 = frontier_phi_77_pred_2;
                    _2737 = frontier_phi_77_pred_3;
                    _2735 = frontier_phi_77_pred_4;
                    _2733 = frontier_phi_77_pred_5;
                    uint _2899 = _2898 + 1u;
                    if (_2899 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2892 = _2733;
                        _2893 = _2735;
                        _2894 = _2737;
                        _2895 = _2739;
                        _2896 = _2741;
                        _2897 = _2743;
                        _2898 = _2899;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2737;
                frontier_phi_58_59_ladder_1 = _2743;
                frontier_phi_58_59_ladder_2 = _2741;
                frontier_phi_58_59_ladder_3 = _2739;
                frontier_phi_58_59_ladder_4 = _2735;
                frontier_phi_58_59_ladder_5 = _2733;
            }
            else
            {
                frontier_phi_58_59_ladder = _2615;
                frontier_phi_58_59_ladder_1 = _2621;
                frontier_phi_58_59_ladder_2 = _2619;
                frontier_phi_58_59_ladder_3 = _2617;
                frontier_phi_58_59_ladder_4 = _2613;
                frontier_phi_58_59_ladder_5 = _2611;
            }
            _2732 = frontier_phi_58_59_ladder_5;
            _2734 = frontier_phi_58_59_ladder_4;
            _2736 = frontier_phi_58_59_ladder;
            _2738 = frontier_phi_58_59_ladder_3;
            _2740 = frontier_phi_58_59_ladder_2;
            _2742 = frontier_phi_58_59_ladder_1;
        }
        float _2747 = isnan(1.0) ? _758 : (isnan(_758) ? 1.0 : min(_758, 1.0));
        _2523 = (_2747 * _2738) + _1959;
        _2525 = (_2747 * _2740) + _1961;
        _2527 = (_2747 * _2742) + _1963;
        _2529 = ((_2732 * _742) * _2747) + _2304;
        _2531 = ((_2734 * _744) * _2747) + _2306;
        _2533 = ((_2736 * _745) * _2747) + _2308;
    }
    else
    {
        _2523 = _1959;
        _2525 = _1961;
        _2527 = _1963;
        _2529 = _2304;
        _2531 = _2306;
        _2533 = _2308;
    }
    float _4516 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
    float _4527 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
    float _4538 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
    float _2550 = ((isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0))) * (_2523 + ((isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0))) * _758))) + ((_2529 + ((isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0))) * _1598)) * cbPerFrame._m0[3u].x);
    float _2551 = ((isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0))) * (_2525 + ((isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0))) * _758))) + ((_2531 + ((isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0))) * _1598)) * cbPerFrame._m0[3u].x);
    float _2552 = ((isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0))) * (_2527 + ((isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0))) * _758))) + ((_2533 + ((isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0))) * _1598)) * cbPerFrame._m0[3u].x);
    uint _2553 = _256 + 6u;
    float _2561 = _678 / cbSceneParam._m0[86u].x;
    float _2562 = _679 / cbSceneParam._m0[86u].y;
    vec4 _2576 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2561, _2562, (log2((isnan(cbSceneParam._m0[77u].w) ? _599 : (isnan(_599) ? cbSceneParam._m0[77u].w : min(_599, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2578 = _2576.x;
    float _2579 = _2576.y;
    float _2580 = _2576.z;
    float _2581 = _2576.w;
    float _2674;
    float _2676;
    float _2678;
    float _2680;
    if (_599 > cbSceneParam._m0[78u].w)
    {
        float _2636 = isnan(_599) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _599 : min(cbSceneParam._m0[80u].w, _599));
        float _2637 = _2636 / _599;
        float _2648 = _2637 * _650;
        float _2649 = _651 * _2637;
        float _2650 = (-0.0) - _2649;
        float _2652 = _2637 * _652;
        float _2654 = (cbSceneParam._m0[77u].w * _2650) / _2636;
        float _2655 = _2654 + cbSceneParam._m0[79u].w;
        float _2656 = cbSceneParam._m0[79u].w - _2649;
        float _2662 = sqrt(((_2648 * _2648) + (_2649 * _2649)) + (_2652 * _2652));
        float _2665 = (1.0 - (cbSceneParam._m0[77u].w / _2636)) * _2662;
        float _2670 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2672 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2849;
        if (abs((_2650 - _2654) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2849 = ((((_2655 > 0.0) ? exp2(_2670 * _2655) : (2.0 - exp2(_2672 * _2655))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2665;
        }
        else
        {
            float _2793 = 1.0 / cbSceneParam._m0[80u].x;
            float _2794 = isnan(_2656) ? _2655 : (isnan(_2655) ? _2656 : max(_2655, _2656));
            float _2795 = isnan(_2656) ? _2655 : (isnan(_2655) ? _2656 : min(_2655, _2656));
            float _2804 = isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : min(_2794, 0.0));
            float _2805 = isnan(0.0) ? _2795 : (isnan(_2795) ? 0.0 : min(_2795, 0.0));
            _2849 = ((abs(_2662 / _2650) * cbSceneParam._m0[80u].y) * ((((_2804 - _2805) * 2.0) - ((exp2(_2670 * (isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0)))) - exp2(_2670 * (isnan(0.0) ? _2795 : (isnan(_2795) ? 0.0 : max(_2795, 0.0))))) * _2793)) - ((exp2(_2672 * _2804) - exp2(_2672 * _2805)) * _2793))) + (_2665 * cbSceneParam._m0[80u].z);
        }
        vec4 _2851 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2561, _2562, 1.0), 0.0);
        float _2860 = exp2((_2849 * (-1.44269502162933349609375)) * (1.0 - _2851.w));
        float _2861 = log2(_2860);
        float _2877 = log2(_2581);
        _2674 = (exp2(_2877 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2861 * cbSceneParam._m0[78u].x)) * _2851.x) / cbSceneParam._m0[78u].x)) + _2578;
        _2676 = (exp2(_2877 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2861 * cbSceneParam._m0[78u].y)) * _2851.y) / cbSceneParam._m0[78u].y)) + _2579;
        _2678 = (exp2(_2877 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2861 * cbSceneParam._m0[78u].z)) * _2851.z) / cbSceneParam._m0[78u].z)) + _2580;
        _2680 = _2860 * _2581;
    }
    else
    {
        _2674 = _2578;
        _2676 = _2579;
        _2678 = _2580;
        _2680 = _2581;
    }
    bool _2887;
    vec4 _2690;
    vec4 _2712;
    float _2714;
    float _2718;
    float _2719;
    float _2720;
    float _2721;
    bool _2731;
    for (;;)
    {
        _2690 = cbMatDynParam._m0[0u];
        float _2692 = roundEven(_2690.y);
        bool _2693 = _2692 == 3.0;
        float _2694 = log2(_2680);
        float _2701 = exp2(_2694 * cbSceneParam._m0[78u].x) * _2550;
        float _2702 = exp2(_2694 * cbSceneParam._m0[78u].y) * _2551;
        float _2703 = exp2(_2694 * cbSceneParam._m0[78u].z) * _2552;
        float _2710 = _666 + (-0.5);
        _2712 = cbMtdParam._m0[1u];
        _2714 = _2712.y * _2710;
        float _2717 = (_2692 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2718 = _2717 * (_2693 ? _2701 : (_2701 + (cbSceneParam._m0[72u].w * _2674)));
        _2719 = _2717 * (_2693 ? _2702 : (_2702 + (cbSceneParam._m0[72u].w * _2676)));
        _2720 = _2717 * (_2693 ? _2703 : (_2703 + (cbSceneParam._m0[72u].w * _2678)));
        _2721 = _2710 * 0.999000012874603271484375;
        _2731 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2731)
        {
            if ((cbInstanceData._m0[_256 + 7u].x + _2721) < 0.5)
            {
                _2887 = true;
                break;
            }
        }
        uint _2828 = _718 + uint(_2690.w);
        if ((cbInstanceData._m0[_2828].w < 1.0) && ((cbInstanceData._m0[_2828].w + _2721) < 0.5))
        {
            _2887 = true;
            break;
        }
        if ((_2714 + 1.0) < _2712.x)
        {
            _2887 = true;
            break;
        }
        _2887 = false;
        break;
    }
    float _3092;
    if (_2887)
    {
        discard_state = true;
        _3092 = 0.0;
    }
    else
    {
        _3092 = cbInstanceData._m0[_2553].w;
    }
    SV_Target.x = _2718;
    SV_Target.y = _2719;
    SV_Target.z = _2720;
    SV_Target.w = _3092;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2553].w;
    discard_exit();
}


