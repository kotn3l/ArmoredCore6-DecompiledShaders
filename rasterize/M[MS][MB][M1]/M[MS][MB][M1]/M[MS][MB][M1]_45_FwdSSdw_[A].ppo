#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1066;
float _3472;
float _3473;
float _3474;
float _3475;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _198 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _199 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _200 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _206 = inversesqrt(dot(vec3(_198, _199, _200), vec3(_198, _199, _200)));
    float _207 = _206 * _198;
    float _208 = _206 * _199;
    float _209 = _206 * _200;
    float _213 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _214 = _213 * NORMAL.x;
    float _215 = _213 * NORMAL.y;
    float _216 = _213 * NORMAL.z;
    float _220 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _221 = _220 * TANGENT.x;
    float _222 = _220 * TANGENT.y;
    float _223 = _220 * TANGENT.z;
    uint _226 = uint(roundEven(NORMAL.w)) * 13u;
    uint _232 = _226 + 1u;
    uint _236 = _226 + 2u;
    float _245 = sqrt(((cbInstanceData._m0[_232].x * cbInstanceData._m0[_232].x) + (cbInstanceData._m0[_226].x * cbInstanceData._m0[_226].x)) + (cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x));
    float _246 = _245 * TEXCOORD.z;
    float _247 = _245 * TEXCOORD.w;
    vec4 _266 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _272 = _266.x * cbMtdParam._m0[9u].x;
    float _273 = _266.y * cbMtdParam._m0[9u].y;
    float _274 = _266.z * cbMtdParam._m0[9u].z;
    vec4 _293 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _246) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _247) + cbTextureTilingScale._m0[14u].w));
    vec4 _313 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _317 = _313.z;
    float _322 = (_313.x * 2.0) + (-1.0);
    float _324 = (_313.y * 2.0) + (-1.0);
    float _325 = dot(vec2(_322, _324), vec2(_322, _324));
    float _3484 = isnan(0.0) ? _325 : (isnan(_325) ? 0.0 : max(_325, 0.0));
    float _331 = sqrt(1.0 - (isnan(1.0) ? _3484 : (isnan(_3484) ? 1.0 : min(_3484, 1.0))));
    float _334 = fma(_331, _214, fma(_324, _221, _322 * _207));
    float _337 = fma(_331, _215, fma(_324, _222, _322 * _208));
    float _340 = fma(_331, _216, fma(_324, _223, _322 * _209));
    float _344 = inversesqrt(dot(vec3(_334, _337, _340), vec3(_334, _337, _340)));
    vec4 _380 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _246) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _247) + cbTextureTilingScale._m0[11u].w));
    float _382 = _380.x;
    float _383 = 1.0 - _382;
    float _392 = (cbMtdParam._m0[19u].x + dot(vec4(_344 * _334, _344 * _337, _344 * _340, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_382 - _383) * cbMtdParam._m0[24u].z) + _383) * cbMtdParam._m0[21u].z);
    float _3495 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _393 = isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0));
    float _400 = (_393 * ((_293.x * cbMtdParam._m0[18u].x) - _272)) + _272;
    float _401 = (_393 * ((_293.y * cbMtdParam._m0[18u].y) - _273)) + _273;
    float _402 = (_393 * ((_293.z * cbMtdParam._m0[18u].z) - _274)) + _274;
    vec4 _415 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _417 = _415.x;
    float _419 = _417 - (_417 * _393);
    vec4 _432 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _246) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _247) + cbTextureTilingScale._m0[15u].w));
    float _439 = (_432.x * 2.0) + (-1.0);
    float _440 = (_432.y * 2.0) + (-1.0);
    float _441 = dot(vec2(_439, _440), vec2(_439, _440));
    float _3506 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _449 = ((_432.z - _317) * _393) + _317;
    float _459 = ((sqrt(1.0 - (isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0)))) - _331) * _393) + _331;
    float _462 = (((_439 - _322) * _393) + _322) + (cbMtdParam._m0[21u].x * _322);
    float _463 = (((_440 - _324) * _393) + _324) + (cbMtdParam._m0[21u].x * _324);
    float _468 = cbMtdParam._m0[22u].x + _313.w;
    float _471 = fma(_459, _214, fma(_463, _221, _462 * _207));
    float _474 = fma(_459, _215, fma(_463, _222, _462 * _208));
    float _477 = fma(_459, _216, fma(_463, _223, _462 * _209));
    float _481 = inversesqrt(dot(vec3(_471, _474, _477), vec3(_471, _474, _477)));
    float _482 = _481 * _471;
    float _483 = _481 * _474;
    float _484 = _481 * _477;
    float _3517 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _485 = isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0));
    float _3528 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _3539 = isnan(0.0) ? _400 : (isnan(_400) ? 0.0 : max(_400, 0.0));
    float _3550 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    float _3561 = isnan(0.0) ? _402 : (isnan(_402) ? 0.0 : max(_402, 0.0));
    float _3572 = isnan(0.0) ? _419 : (isnan(_419) ? 0.0 : max(_419, 0.0));
    float _490 = isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0));
    float _504 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _545 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _555 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _545);
    float _556 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _545);
    float _557 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _545);
    float _561 = inversesqrt(dot(vec3(_555, _556, _557), vec3(_555, _556, _557)));
    float _562 = _555 * _561;
    float _563 = _556 * _561;
    float _564 = _557 * _561;
    vec4 _569 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _571 = _569.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _746 = sqrt(((_555 * _555) + (_556 * _556)) + (_557 * _557));
        float _752 = (cbMatDynParam._m0[5u].x * _746) + cbMatDynParam._m0[5u].y;
        float _3583 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
        float _753 = isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0));
        float _757 = (cbMatDynParam._m0[5u].z * _746) + cbMatDynParam._m0[5u].w;
        float _3594 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0))) - _753)) + _753) < ((_571 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _583 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _584 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _604 = fma(_484, cbSceneParam._m0[5u].z, fma(_483, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _482));
    float _607 = fma(_484, cbSceneParam._m0[6u].z, fma(_483, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _482));
    float _610 = fma(_484, cbSceneParam._m0[7u].z, fma(_483, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _482));
    uint _623 = _226 + 9u;
    uint _624 = _623 + uint(cbMatDynParam._m0[0u].w);
    float _630 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0)))) * cbInstanceData._m0[_624].x;
    float _631 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0)))) * cbInstanceData._m0[_624].y;
    float _632 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0)))) * cbInstanceData._m0[_624].z;
    float _3605 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _633 = isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0));
    float _3616 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _634 = isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0));
    float _3627 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _635 = isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0));
    float _636 = 1.0 - _490;
    float _637 = _633 * _636;
    float _638 = _634 * _636;
    float _639 = _635 * _636;
    float _644 = (_633 + (-0.039999999105930328369140625)) * _490;
    float _645 = (_634 + (-0.039999999105930328369140625)) * _490;
    float _646 = (_635 + (-0.039999999105930328369140625)) * _490;
    float _647 = _644 + 0.039999999105930328369140625;
    float _649 = _645 + 0.039999999105930328369140625;
    float _650 = _646 + 0.039999999105930328369140625;
    vec4 _659 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _583, cbSceneParam._m0[86u].y * _584));
    float _663 = ((isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0))) * TEXCOORD_5.w) * _659.x;
    float _664 = dot(vec3(_482, _483, _484), vec3(_562, _563, _564));
    float _667 = _664 * 2.0;
    float _671 = (_667 * _482) - _562;
    float _672 = (_667 * _483) - _563;
    float _673 = (_667 * _484) - _564;
    float _677 = abs(dot(vec3(_562, _563, _564), vec3(_482, _483, _484)));
    float _3638 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    float _679 = sqrt(_485);
    float _692 = exp2((_679 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_679 * 3.0));
    float _698 = (1.0 - _692) * ((_679 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _699 = _692 * _679;
    float _727 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _731 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _735 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1065;
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    float _1076;
    float _1077;
    float _1078;
    float _1079;
    float _1080;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _790 = fma(_735, cbModelParam._m0[26u].z, fma(_731, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _727));
        float _794 = fma(_735, cbModelParam._m0[27u].z, fma(_731, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _727));
        float _798 = fma(_735, cbModelParam._m0[28u].z, fma(_731, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _727));
        float _823 = _727 + _482;
        float _824 = _731 + _483;
        float _825 = _735 + _484;
        float _835 = fma(_825, cbModelParam._m0[26u].z, fma(_824, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _823)) - _790;
        float _836 = fma(_825, cbModelParam._m0[27u].z, fma(_824, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _823)) - _794;
        float _837 = fma(_825, cbModelParam._m0[28u].z, fma(_824, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _823)) - _798;
        float _841 = inversesqrt(dot(vec3(_835, _836, _837), vec3(_835, _836, _837)));
        float _854 = ((_841 * _835) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_790 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _855 = ((_841 * _836) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_794 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _856 = ((_841 * _837) / cbModelParam._m0[34u].z) + ((((((_798 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _859 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_854, _855, _856), 0.0);
        vec4 _866 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_854, _855, _856), 0.0);
        vec4 _873 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_854, _855, _856), 0.0);
        vec4 _880 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_854, _855, _856), 0.0);
        float _893 = exp2((_859.w + (-0.5)) * 20.0) * 2.0;
        float _894 = _893 * (_859.x + (-0.5));
        float _895 = _893 * (_859.y + (-0.5));
        float _896 = _893 * (_859.z + (-0.5));
        float _903 = exp2((_866.w + (-0.5)) * 20.0) * 2.0;
        float _904 = _903 * (_866.x + (-0.5));
        float _905 = _903 * (_866.y + (-0.5));
        float _906 = _903 * (_866.z + (-0.5));
        float _913 = exp2((_873.w + (-0.5)) * 20.0) * 2.0;
        float _914 = _913 * (_873.x + (-0.5));
        float _915 = _913 * (_873.y + (-0.5));
        float _916 = _913 * (_873.z + (-0.5));
        float _923 = exp2((_880.w + (-0.5)) * 20.0) * 2.0;
        float _924 = _923 * (_880.x + (-0.5));
        float _925 = _923 * (_880.y + (-0.5));
        float _926 = _923 * (_880.z + (-0.5));
        float _927 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
        float _928 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
        float _929 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
        float _930 = _894 * 0.5;
        float _931 = _904 * 0.5;
        float _932 = _914 * 0.5;
        float _933 = dot(vec3(_930, _931, _932), vec3(_930, _931, _932));
        float _938 = (_933 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_933);
        float _947 = (dot(vec3(_482, _483, _484), vec3(_938 * _930, _938 * _931, _938 * _932)) + 1.0) * 0.5;
        float _3664 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
        float _957 = sqrt(((_931 * _931) + (_930 * _930)) + (_932 * _932)) / (_927 + 9.9999997473787516355514526367188e-06);
        float _3675 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
        float _958 = isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0));
        float _959 = _958 * 2.0;
        float _963 = (1.0 - _958) / (_958 + 1.0);
        float _3686 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
        float _964 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
        float _973 = ((((1.0 - _964) * (_959 + 2.0)) * exp2(log2(isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0))) * (_959 + 1.0))) + _964) * _927;
        float _974 = _895 * 0.5;
        float _975 = _905 * 0.5;
        float _976 = _915 * 0.5;
        float _977 = dot(vec3(_974, _975, _976), vec3(_974, _975, _976));
        float _982 = (_977 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_977);
        float _990 = (dot(vec3(_482, _483, _484), vec3(_982 * _974, _982 * _975, _982 * _976)) + 1.0) * 0.5;
        float _3697 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
        float _999 = sqrt(((_975 * _975) + (_974 * _974)) + (_976 * _976)) / (_928 + 9.9999997473787516355514526367188e-06);
        float _3708 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1000 = isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0));
        float _1001 = _1000 * 2.0;
        float _1005 = (1.0 - _1000) / (_1000 + 1.0);
        float _3719 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
        float _1006 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
        float _1015 = ((((1.0 - _1006) * (_1001 + 2.0)) * exp2(log2(isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0))) * (_1001 + 1.0))) + _1006) * _928;
        float _1016 = _896 * 0.5;
        float _1017 = _906 * 0.5;
        float _1018 = _916 * 0.5;
        float _1019 = dot(vec3(_1016, _1017, _1018), vec3(_1016, _1017, _1018));
        float _1024 = (_1019 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1019);
        float _1032 = (dot(vec3(_482, _483, _484), vec3(_1024 * _1016, _1024 * _1017, _1024 * _1018)) + 1.0) * 0.5;
        float _3730 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1041 = sqrt(((_1017 * _1017) + (_1016 * _1016)) + (_1018 * _1018)) / (_929 + 9.9999997473787516355514526367188e-06);
        float _3741 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1042 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
        float _1043 = _1042 * 2.0;
        float _1047 = (1.0 - _1042) / (_1042 + 1.0);
        float _3752 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1048 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
        float _1057 = ((((1.0 - _1048) * (_1043 + 2.0)) * exp2(log2(isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0))) * (_1043 + 1.0))) + _1048) * _929;
        _1065 = _896;
        _1067 = _895;
        _1068 = _894;
        _1069 = _906;
        _1070 = _905;
        _1071 = _904;
        _1072 = _916;
        _1073 = _915;
        _1074 = _914;
        _1075 = _929;
        _1076 = _928;
        _1077 = _927;
        _1078 = cbModelParam._m0[36u].z * (isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0)));
        _1079 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0)));
        _1080 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0)));
    }
    else
    {
        _1065 = _1066;
        _1067 = _1066;
        _1068 = _1066;
        _1069 = _1066;
        _1070 = _1066;
        _1071 = _1066;
        _1072 = _1066;
        _1073 = _1066;
        _1074 = _1066;
        _1075 = _1066;
        _1076 = _1066;
        _1077 = _1066;
        _1078 = 0.0;
        _1079 = 0.0;
        _1080 = 0.0;
    }
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1108 = fma(_735, cbModelParam._m0[30u].z, fma(_731, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _727));
        float _1112 = fma(_735, cbModelParam._m0[31u].z, fma(_731, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _727));
        float _1116 = fma(_735, cbModelParam._m0[32u].z, fma(_731, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _727));
        float _1139 = _727 + _482;
        float _1140 = _731 + _483;
        float _1141 = _735 + _484;
        float _1151 = fma(_1141, cbModelParam._m0[30u].z, fma(_1140, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1139)) - _1108;
        float _1152 = fma(_1141, cbModelParam._m0[31u].z, fma(_1140, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1139)) - _1112;
        float _1153 = fma(_1141, cbModelParam._m0[32u].z, fma(_1140, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1139)) - _1116;
        float _1157 = inversesqrt(dot(vec3(_1151, _1152, _1153), vec3(_1151, _1152, _1153)));
        float _1170 = ((_1157 * _1151) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1108 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1171 = ((_1157 * _1152) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1112 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1172 = ((_1157 * _1153) / cbModelParam._m0[35u].z) + ((((((_1116 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1174 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1170, _1171, _1172), 0.0);
        vec4 _1181 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1170, _1171, _1172), 0.0);
        vec4 _1188 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1170, _1171, _1172), 0.0);
        vec4 _1195 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1170, _1171, _1172), 0.0);
        float _1207 = exp2((_1174.w + (-0.5)) * 20.0) * 2.0;
        float _1208 = _1207 * (_1174.x + (-0.5));
        float _1209 = _1207 * (_1174.y + (-0.5));
        float _1210 = _1207 * (_1174.z + (-0.5));
        float _1217 = exp2((_1181.w + (-0.5)) * 20.0) * 2.0;
        float _1218 = _1217 * (_1181.x + (-0.5));
        float _1219 = _1217 * (_1181.y + (-0.5));
        float _1220 = _1217 * (_1181.z + (-0.5));
        float _1227 = exp2((_1188.w + (-0.5)) * 20.0) * 2.0;
        float _1228 = _1227 * (_1188.x + (-0.5));
        float _1229 = _1227 * (_1188.y + (-0.5));
        float _1230 = _1227 * (_1188.z + (-0.5));
        float _1237 = exp2((_1195.w + (-0.5)) * 20.0) * 2.0;
        float _1238 = _1237 * (_1195.x + (-0.5));
        float _1239 = _1237 * (_1195.y + (-0.5));
        float _1240 = _1237 * (_1195.z + (-0.5));
        float _1241 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1242 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1243 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1244 = _1208 * 0.5;
        float _1245 = _1218 * 0.5;
        float _1246 = _1228 * 0.5;
        float _1247 = dot(vec3(_1244, _1245, _1246), vec3(_1244, _1245, _1246));
        float _1252 = (_1247 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1247);
        float _1260 = (dot(vec3(_482, _483, _484), vec3(_1252 * _1244, _1252 * _1245, _1252 * _1246)) + 1.0) * 0.5;
        float _3793 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1269 = sqrt(((_1245 * _1245) + (_1244 * _1244)) + (_1246 * _1246)) / (_1241 + 9.9999997473787516355514526367188e-06);
        float _3804 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1270 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
        float _1271 = _1270 * 2.0;
        float _1275 = (1.0 - _1270) / (_1270 + 1.0);
        float _3815 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1276 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
        float _1285 = ((((1.0 - _1276) * (_1271 + 2.0)) * exp2(log2(isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0))) * (_1271 + 1.0))) + _1276) * _1241;
        float _1286 = _1209 * 0.5;
        float _1287 = _1219 * 0.5;
        float _1288 = _1229 * 0.5;
        float _1289 = dot(vec3(_1286, _1287, _1288), vec3(_1286, _1287, _1288));
        float _1294 = (_1289 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1289);
        float _1302 = (dot(vec3(_482, _483, _484), vec3(_1294 * _1286, _1294 * _1287, _1294 * _1288)) + 1.0) * 0.5;
        float _3826 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1311 = sqrt(((_1287 * _1287) + (_1286 * _1286)) + (_1288 * _1288)) / (_1242 + 9.9999997473787516355514526367188e-06);
        float _3837 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1312 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
        float _1313 = _1312 * 2.0;
        float _1317 = (1.0 - _1312) / (_1312 + 1.0);
        float _3848 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1318 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
        float _1327 = ((((1.0 - _1318) * (_1313 + 2.0)) * exp2(log2(isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0))) * (_1313 + 1.0))) + _1318) * _1242;
        float _1328 = _1210 * 0.5;
        float _1329 = _1220 * 0.5;
        float _1330 = _1230 * 0.5;
        float _1331 = dot(vec3(_1328, _1329, _1330), vec3(_1328, _1329, _1330));
        float _1336 = (_1331 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1331);
        float _1344 = (dot(vec3(_482, _483, _484), vec3(_1336 * _1328, _1336 * _1329, _1336 * _1330)) + 1.0) * 0.5;
        float _3859 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1353 = sqrt(((_1329 * _1329) + (_1328 * _1328)) + (_1330 * _1330)) / (_1243 + 9.9999997473787516355514526367188e-06);
        float _3870 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1354 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
        float _1355 = _1354 * 2.0;
        float _1359 = (1.0 - _1354) / (_1354 + 1.0);
        float _3881 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1360 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
        float _1369 = ((((1.0 - _1360) * (_1355 + 2.0)) * exp2(log2(isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0))) * (_1355 + 1.0))) + _1360) * _1243;
        _1377 = _1210;
        _1378 = _1209;
        _1379 = _1208;
        _1380 = _1220;
        _1381 = _1219;
        _1382 = _1218;
        _1383 = _1230;
        _1384 = _1229;
        _1385 = _1228;
        _1386 = _1243;
        _1387 = _1242;
        _1388 = _1241;
        _1389 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0)));
        _1390 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0)));
        _1391 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0)));
    }
    else
    {
        _1377 = _1066;
        _1378 = _1066;
        _1379 = _1066;
        _1380 = _1066;
        _1381 = _1066;
        _1382 = _1066;
        _1383 = _1066;
        _1384 = _1066;
        _1385 = _1066;
        _1386 = _1066;
        _1387 = _1066;
        _1388 = _1066;
        _1389 = 0.0;
        _1390 = 0.0;
        _1391 = 0.0;
    }
    float _1401 = (cbModelParam._m0[1u].x * (_1389 - _1078)) + _1078;
    float _1402 = (cbModelParam._m0[1u].x * (_1390 - _1079)) + _1079;
    float _1403 = (cbModelParam._m0[1u].x * (_1391 - _1080)) + _1080;
    float _1424 = fma(_1403, cbSceneParam._m0[89u].z, fma(_1402, cbSceneParam._m0[89u].y, _1401 * cbSceneParam._m0[89u].x));
    float _1427 = fma(_1403, cbSceneParam._m0[90u].z, fma(_1402, cbSceneParam._m0[90u].y, _1401 * cbSceneParam._m0[90u].x));
    float _1430 = fma(_1403, cbSceneParam._m0[91u].z, fma(_1402, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1401));
    float _1445 = _671 * 0.5;
    float _1446 = _672 * 0.5;
    float _1447 = _673 * 0.5;
    float _1448 = dot(vec4(_1445, _1446, _1447, 1.0), vec4(_1379, _1382, _1385, _1388));
    float _1451 = dot(vec4(_1445, _1446, _1447, 1.0), vec4(_1378, _1381, _1384, _1387));
    float _1454 = dot(vec4(_1445, _1446, _1447, 1.0), vec4(_1377, _1380, _1383, _1386));
    float _1488;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1461 = dot(vec4(_1445, _1446, _1447, 1.0), vec4(_1065, _1069, _1072, _1075));
        float _1465 = dot(vec4(_1445, _1446, _1447, 1.0), vec4(_1067, _1070, _1073, _1076));
        float _1469 = dot(vec4(_1445, _1446, _1447, 1.0), vec4(_1068, _1071, _1074, _1077));
        float _1476 = dot(vec4(cbModelParam._m0[39u]), vec4(_1445, _1446, _1447, 1.0));
        _1488 = dot(vec3(isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0)), isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0)), isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1476) ? 0.0 : (isnan(0.0) ? _1476 : max(0.0, _1476))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1488 = 1.0;
    }
    float _1499;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1490 = dot(vec4(cbModelParam._m0[40u]), vec4(_1445, _1446, _1447, 1.0));
        _1499 = dot(vec3(isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0)), isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0)), isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1490) ? 0.0 : (isnan(0.0) ? _1490 : max(0.0, _1490))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1499 = 1.0;
    }
    float _1503 = (_1499 * cbModelParam._m0[1u].x) + (_1488 * (1.0 - cbModelParam._m0[1u].x));
    float _1513 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _485);
    float _1514 = isnan(_1513) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1513 : min(cbModelParam._m0[25u].z, _1513));
    float _1594;
    float _1596;
    float _1598;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1561 = fma(_735, cbModelParam._m0[13u].z, fma(_731, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _727)) + cbModelParam._m0[13u].w;
        float _1565 = fma(_735, cbModelParam._m0[14u].z, fma(_731, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _727)) + cbModelParam._m0[14u].w;
        float _1569 = fma(_735, cbModelParam._m0[15u].z, fma(_731, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _727)) + cbModelParam._m0[15u].w;
        float _1572 = fma(_673, cbModelParam._m0[13u].z, fma(_672, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _671));
        float _1575 = fma(_673, cbModelParam._m0[14u].z, fma(_672, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _671));
        float _1578 = fma(_673, cbModelParam._m0[15u].z, fma(_672, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _671));
        float _1606;
        if (_1572 > 0.0)
        {
            _1606 = abs((1.0 - _1561) / _1572);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1572 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1561 + 1.0) / _1572);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1606 = frontier_phi_17_15_ladder;
        }
        float _1830;
        if (_1575 > 0.0)
        {
            _1830 = abs((1.0 - _1565) / _1575);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1575 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1565 + 1.0) / _1575);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1830 = frontier_phi_26_22_ladder;
        }
        float _2087;
        if (_1578 > 0.0)
        {
            _2087 = abs((1.0 - _1569) / _1578);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1578 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1569 + 1.0) / _1578);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2087 = frontier_phi_38_33_ladder;
        }
        float _2089 = isnan(_1830) ? _1606 : (isnan(_1606) ? _1830 : min(_1606, _1830));
        float _2090 = isnan(_2087) ? _2089 : (isnan(_2089) ? _2087 : min(_2089, _2087));
        float _2094 = (_2090 * _1572) + _1561;
        float _2095 = (_2090 * _1575) + _1565;
        float _2096 = (_2090 * _1578) + _1569;
        float _2097 = _2090 * 9.9999997473787516355514526367188e-05;
        float _2099 = (-1.0) - _2097;
        float _2101 = _2097 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2096 > _2101) || ((_2096 < _2099) || ((_2095 > _2101) || ((_2095 < _2099) || ((_2094 < _2099) || (_2094 > _2101))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2224 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2096, cbModelParam._m0[9u].z, fma(_2095, cbModelParam._m0[9u].y, _2094 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2096, cbModelParam._m0[10u].z, fma(_2095, cbModelParam._m0[10u].y, _2094 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2096, cbModelParam._m0[11u].z, fma(_2095, cbModelParam._m0[11u].y, _2094 * cbModelParam._m0[11u].x))), _1514);
            frontier_phi_16_38_ladder = _2224.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2224.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2224.x * cbModelParam._m0[1u].y;
        }
        _1594 = frontier_phi_16_38_ladder_2;
        _1596 = frontier_phi_16_38_ladder_1;
        _1598 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1582 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_671, _672, _673), _1514);
        _1594 = _1582.x * cbModelParam._m0[1u].y;
        _1596 = _1582.y * cbModelParam._m0[1u].y;
        _1598 = _1582.z * cbModelParam._m0[1u].y;
    }
    float _1602 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _485);
    float _1603 = isnan(_1602) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1602 : min(cbModelParam._m0[25u].w, _1602));
    float _1692;
    float _1694;
    float _1696;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1656 = fma(_735, cbModelParam._m0[21u].z, fma(_731, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _727)) + cbModelParam._m0[21u].w;
        float _1660 = fma(_735, cbModelParam._m0[22u].z, fma(_731, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _727)) + cbModelParam._m0[22u].w;
        float _1664 = fma(_735, cbModelParam._m0[23u].z, fma(_731, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _727)) + cbModelParam._m0[23u].w;
        float _1667 = fma(_673, cbModelParam._m0[21u].z, fma(_672, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _671));
        float _1670 = fma(_673, cbModelParam._m0[22u].z, fma(_672, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _671));
        float _1673 = fma(_673, cbModelParam._m0[23u].z, fma(_672, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _671));
        float _1835;
        if (_1667 > 0.0)
        {
            _1835 = abs((1.0 - _1656) / _1667);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1667 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1656 + 1.0) / _1667);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1835 = frontier_phi_28_24_ladder;
        }
        float _2114;
        if (_1670 > 0.0)
        {
            _2114 = abs((1.0 - _1660) / _1670);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1670 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1660 + 1.0) / _1670);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2114 = frontier_phi_40_35_ladder;
        }
        float _2327;
        if (_1673 > 0.0)
        {
            _2327 = abs((1.0 - _1664) / _1673);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1673 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1664 + 1.0) / _1673);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2327 = frontier_phi_49_46_ladder;
        }
        float _2329 = isnan(_2114) ? _1835 : (isnan(_1835) ? _2114 : min(_1835, _2114));
        float _2330 = isnan(_2327) ? _2329 : (isnan(_2329) ? _2327 : min(_2329, _2327));
        float _2334 = (_2330 * _1667) + _1656;
        float _2335 = (_2330 * _1670) + _1660;
        float _2336 = (_2330 * _1673) + _1664;
        float _2337 = _2330 * 9.9999997473787516355514526367188e-05;
        float _2338 = (-1.0) - _2337;
        float _2340 = _2337 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2336 > _2340) || ((_2336 < _2338) || ((_2335 > _2340) || ((_2335 < _2338) || ((_2334 < _2338) || (_2334 > _2340))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2535 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2336, cbModelParam._m0[17u].z, fma(_2335, cbModelParam._m0[17u].y, _2334 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2336, cbModelParam._m0[18u].z, fma(_2335, cbModelParam._m0[18u].y, _2334 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2336, cbModelParam._m0[19u].z, fma(_2335, cbModelParam._m0[19u].y, _2334 * cbModelParam._m0[19u].x))), _1603);
            frontier_phi_25_49_ladder = _2535.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2535.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2535.x * cbModelParam._m0[1u].z;
        }
        _1692 = frontier_phi_25_49_ladder_2;
        _1694 = frontier_phi_25_49_ladder_1;
        _1696 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1676 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_671, _672, _673), _1603);
        _1692 = _1676.x * cbModelParam._m0[1u].z;
        _1694 = _1676.y * cbModelParam._m0[1u].z;
        _1696 = _1676.z * cbModelParam._m0[1u].z;
    }
    float _1709 = (((_698 * _647) + _699) * _663) * ((cbModelParam._m0[1u].w * (_1692 - _1594)) + _1594);
    float _1711 = (((_698 * _649) + _699) * _663) * ((cbModelParam._m0[1u].w * (_1694 - _1596)) + _1596);
    float _1713 = (((_698 * _650) + _699) * _663) * ((cbModelParam._m0[1u].w * (_1696 - _1598)) + _1598);
    float _1716 = fma(_1713, cbSceneParam._m0[89u].z, fma(_1711, cbSceneParam._m0[89u].y, _1709 * cbSceneParam._m0[89u].x));
    float _1719 = fma(_1713, cbSceneParam._m0[90u].z, fma(_1711, cbSceneParam._m0[90u].y, _1709 * cbSceneParam._m0[90u].x));
    float _1722 = fma(_1713, cbSceneParam._m0[91u].z, fma(_1711, cbSceneParam._m0[91u].y, _1709 * cbSceneParam._m0[91u].x));
    vec4 _1730 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_583, _584));
    float _1732 = _1730.w;
    float _1744 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1732);
    float _1745 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1732);
    float _1746 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1732);
    uvec4 _1750 = floatBitsToUint(cbInstanceData._m0[_226 + 5u]);
    uint _1752 = _1750.x * 14u;
    uint _1753 = _1752 + 13u;
    float _1760 = _663 + (-1.0);
    float _1765 = (cbLight._m0[_1753].x * _1760) + 1.0;
    float _1766 = (cbLight._m0[_1753].y * _1760) + 1.0;
    float _1767 = (cbLight._m0[_1753].z * _1760) + 1.0;
    float _1768 = (cbLight._m0[_1753].w * _1760) + 1.0;
    uint _1769 = _1752 + 5u;
    float _1775 = isnan(1.0) ? _1766 : (isnan(_1766) ? 1.0 : min(_1766, 1.0));
    uint _1779 = _1752 + 4u;
    float _1789 = isnan(1.0) ? _1765 : (isnan(_1765) ? 1.0 : min(_1765, 1.0));
    uint _1793 = _1752 | 1u;
    float _1804 = dot(vec3(cbLight._m0[_1752].xyz), vec3(_482, _483, _484));
    float _1807 = dot(vec3(cbLight._m0[_1793].xyz), vec3(_482, _483, _484));
    float _4017 = isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0));
    float _4028 = isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0));
    float _1812 = (isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0))) * 0.3183098733425140380859375;
    float _1814 = (isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0))) * 0.3183098733425140380859375;
    float _1821 = ((cbLight._m0[_1769].x * _1775) * _1814) + (((cbLight._m0[_1779].x * _1744) * _1789) * _1812);
    float _1822 = ((_1775 * cbLight._m0[_1769].y) * _1814) + (((cbLight._m0[_1779].y * _1745) * _1789) * _1812);
    float _1823 = ((_1775 * cbLight._m0[_1769].z) * _1814) + (((cbLight._m0[_1779].z * _1746) * _1789) * _1812);
    uvec4 _1827 = floatBitsToUint(cbLight._m0[_1752 + 12u]);
    bool _1829 = _1827.x == 0u;
    float _1840;
    float _1842;
    float _1844;
    if (_1829)
    {
        _1840 = _1821;
        _1842 = _1822;
        _1844 = _1823;
    }
    else
    {
        uint _1848 = _1752 + 6u;
        float _1864 = (dot(vec3(cbLight._m0[_1752 + 2u].xyz), vec3(_482, _483, _484)) * 0.5) + 0.5;
        float _1865 = _1864 * _1864;
        float _4039 = isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0));
        float _1866 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
        float _1867 = isnan(1.0) ? _1767 : (isnan(_1767) ? 1.0 : min(_1767, 1.0));
        _1840 = (((cbLight._m0[_1848].x * 0.3183098733425140380859375) * _1866) * _1867) + _1821;
        _1842 = (((cbLight._m0[_1848].y * 0.3183098733425140380859375) * _1866) * _1867) + _1822;
        _1844 = (((cbLight._m0[_1848].z * 0.3183098733425140380859375) * _1866) * _1867) + _1823;
    }
    bool _1847 = _1827.y == 0u;
    float _1885;
    float _1887;
    float _1889;
    if (_1847)
    {
        _1885 = _1840;
        _1887 = _1842;
        _1889 = _1844;
    }
    else
    {
        uint _2058 = _1752 + 7u;
        float _2074 = (dot(vec3(cbLight._m0[_1752 + 3u].xyz), vec3(_482, _483, _484)) * 0.5) + 0.5;
        float _2075 = _2074 * _2074;
        float _4055 = isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0));
        float _2076 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
        float _2077 = isnan(1.0) ? _1768 : (isnan(_1768) ? 1.0 : min(_1768, 1.0));
        _1885 = (((cbLight._m0[_2058].x * 0.3183098733425140380859375) * _2076) * _2077) + _1840;
        _1887 = (((cbLight._m0[_2058].y * 0.3183098733425140380859375) * _2076) * _2077) + _1842;
        _1889 = (((cbLight._m0[_2058].z * 0.3183098733425140380859375) * _2076) * _2077) + _1844;
    }
    uint _1892 = _1752 + 8u;
    float _1905 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1752].w)) * _485) * 0.949999988079071044921875);
    float _1906 = _1905 * _1905;
    float _1907 = cbLight._m0[_1752].x + _562;
    float _1908 = cbLight._m0[_1752].y + _563;
    float _1909 = cbLight._m0[_1752].z + _564;
    float _1913 = inversesqrt(dot(vec3(_1907, _1908, _1909), vec3(_1907, _1908, _1909)));
    float _1914 = _1913 * _1907;
    float _1915 = _1913 * _1908;
    float _1916 = _1913 * _1909;
    float _1917 = dot(vec3(_482, _483, _484), vec3(cbLight._m0[_1752].xyz));
    float _4071 = isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0));
    float _1920 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
    float _4082 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _1921 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
    float _1922 = dot(vec3(_482, _483, _484), vec3(_1914, _1915, _1916));
    float _4093 = isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0));
    float _1925 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
    float _1926 = dot(vec3(cbLight._m0[_1752].xyz), vec3(_1914, _1915, _1916));
    float _4104 = isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0));
    float _1930 = _1906 * _1906;
    float _1934 = ((_1925 * _1925) * (_1930 + (-1.0))) + 1.0;
    float _1942 = exp2(log2(1.0 - (isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0)))) * 5.0);
    float _1943 = 0.959999978542327880859375 - _644;
    float _1945 = 0.959999978542327880859375 - _645;
    float _1946 = 0.959999978542327880859375 - _646;
    float _1953 = 1.0 - _1906;
    float _1964 = (0.5 / (((_1921 * ((_1920 * _1953) + _1906)) + 9.9999999392252902907785028219223e-09) + (((_1921 * _1953) + _1906) * _1920))) * _1920;
    float _4115 = isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0));
    float _1966 = (isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0))) * (_1930 / ((_1934 * _1934) * 3.141590118408203125));
    uint _1980 = _1752 + 9u;
    float _1991 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1793].w)) * _485) * 0.949999988079071044921875);
    float _1992 = _1991 * _1991;
    float _1993 = cbLight._m0[_1793].x + _562;
    float _1994 = cbLight._m0[_1793].y + _563;
    float _1995 = cbLight._m0[_1793].z + _564;
    float _1999 = inversesqrt(dot(vec3(_1993, _1994, _1995), vec3(_1993, _1994, _1995)));
    float _2000 = _1999 * _1993;
    float _2001 = _1999 * _1994;
    float _2002 = _1999 * _1995;
    float _2003 = dot(vec3(_482, _483, _484), vec3(cbLight._m0[_1793].xyz));
    float _4126 = isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0));
    float _2006 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
    float _2007 = dot(vec3(_482, _483, _484), vec3(_2000, _2001, _2002));
    float _4137 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
    float _2010 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
    float _2011 = dot(vec3(cbLight._m0[_1793].xyz), vec3(_2000, _2001, _2002));
    float _4148 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
    float _2015 = _1992 * _1992;
    float _2019 = ((_2010 * _2010) * (_2015 + (-1.0))) + 1.0;
    float _2026 = exp2(log2(1.0 - (isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0)))) * 5.0);
    float _2033 = 1.0 - _1992;
    float _2043 = (0.5 / (((_1921 * ((_2006 * _2033) + _1992)) + 9.9999999392252902907785028219223e-09) + (((_1921 * _2033) + _1992) * _2006))) * _2006;
    float _4159 = isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0));
    float _2045 = (isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0))) * (_2015 / ((_2019 * _2019) * 3.141590118408203125));
    float _2055 = (((((_2026 * _1943) + _647) * cbLight._m0[_1980].x) * _2045) * _1775) + ((((cbLight._m0[_1892].x * _1744) * ((_1942 * _1943) + _647)) * _1966) * _1789);
    float _2056 = (((((_2026 * _1945) + _649) * cbLight._m0[_1980].y) * _2045) * _1775) + ((((cbLight._m0[_1892].y * _1745) * ((_1942 * _1945) + _649)) * _1966) * _1789);
    float _2057 = (((((_2026 * _1946) + _650) * cbLight._m0[_1980].z) * _2045) * _1775) + ((((cbLight._m0[_1892].z * _1746) * ((_1942 * _1946) + _650)) * _1966) * _1789);
    float _2119;
    float _2121;
    float _2123;
    if (_1829)
    {
        _2119 = _2055;
        _2121 = _2056;
        _2123 = _2057;
    }
    else
    {
        uint _2125 = _1752 + 2u;
        uint _2129 = _1752 + 10u;
        float _2143 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2125].w)) * _485) * 0.949999988079071044921875);
        float _2144 = _2143 * _2143;
        float _2145 = cbLight._m0[_2125].x + _562;
        float _2146 = cbLight._m0[_2125].y + _563;
        float _2147 = cbLight._m0[_2125].z + _564;
        float _2151 = inversesqrt(dot(vec3(_2145, _2146, _2147), vec3(_2145, _2146, _2147)));
        float _2152 = _2151 * _2145;
        float _2153 = _2151 * _2146;
        float _2154 = _2151 * _2147;
        float _2155 = dot(vec3(_482, _483, _484), vec3(cbLight._m0[_2125].xyz));
        float _4170 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
        float _2158 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
        float _2159 = dot(vec3(_482, _483, _484), vec3(_2152, _2153, _2154));
        float _4181 = isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0));
        float _2162 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
        float _2163 = dot(vec3(cbLight._m0[_2125].xyz), vec3(_2152, _2153, _2154));
        float _4192 = isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0));
        float _2167 = _2144 * _2144;
        float _2171 = ((_2162 * _2162) * (_2167 + (-1.0))) + 1.0;
        float _2178 = exp2(log2(1.0 - (isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0)))) * 5.0);
        float _2185 = 1.0 - _2144;
        float _2195 = (0.5 / (((_1921 * ((_2158 * _2185) + _2144)) + 9.9999999392252902907785028219223e-09) + (((_1921 * _2185) + _2144) * _2158))) * _2158;
        float _4203 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
        float _2197 = (isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0))) * (_2167 / ((_2171 * _2171) * 3.141590118408203125));
        float _2198 = isnan(1.0) ? _1767 : (isnan(_1767) ? 1.0 : min(_1767, 1.0));
        _2119 = (((((_2178 * _1943) + _647) * cbLight._m0[_2129].x) * _2197) * _2198) + _2055;
        _2121 = (((((_2178 * _1945) + _649) * cbLight._m0[_2129].y) * _2197) * _2198) + _2056;
        _2123 = (((((_2178 * _1946) + _650) * cbLight._m0[_2129].z) * _2197) * _2198) + _2057;
    }
    float _2233;
    float _2235;
    float _2237;
    if (_1847)
    {
        _2233 = _2119;
        _2235 = _2121;
        _2237 = _2123;
    }
    else
    {
        uint _2244 = _1752 + 3u;
        uint _2248 = _1752 + 11u;
        float _2262 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2244].w)) * _485) * 0.949999988079071044921875);
        float _2263 = _2262 * _2262;
        float _2264 = cbLight._m0[_2244].x + _562;
        float _2265 = cbLight._m0[_2244].y + _563;
        float _2266 = cbLight._m0[_2244].z + _564;
        float _2270 = inversesqrt(dot(vec3(_2264, _2265, _2266), vec3(_2264, _2265, _2266)));
        float _2271 = _2270 * _2264;
        float _2272 = _2270 * _2265;
        float _2273 = _2270 * _2266;
        float _2274 = dot(vec3(_482, _483, _484), vec3(cbLight._m0[_2244].xyz));
        float _4219 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
        float _2277 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
        float _2278 = dot(vec3(_482, _483, _484), vec3(_2271, _2272, _2273));
        float _4230 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
        float _2281 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
        float _2282 = dot(vec3(cbLight._m0[_2244].xyz), vec3(_2271, _2272, _2273));
        float _4241 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
        float _2286 = _2263 * _2263;
        float _2290 = ((_2281 * _2281) * (_2286 + (-1.0))) + 1.0;
        float _2297 = exp2(log2(1.0 - (isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0)))) * 5.0);
        float _2304 = 1.0 - _2263;
        float _2314 = (0.5 / (((_1921 * ((_2277 * _2304) + _2263)) + 9.9999999392252902907785028219223e-09) + (((_1921 * _2304) + _2263) * _2277))) * _2277;
        float _4252 = isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0));
        float _2316 = (isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0))) * (_2286 / ((_2290 * _2290) * 3.141590118408203125));
        float _2317 = isnan(1.0) ? _1768 : (isnan(_1768) ? 1.0 : min(_1768, 1.0));
        _2233 = (((((_2297 * _1943) + _647) * cbLight._m0[_2248].x) * _2316) * _2317) + _2119;
        _2235 = (((((_2297 * _1945) + _649) * cbLight._m0[_2248].y) * _2316) * _2317) + _2121;
        _2237 = (((((_2297 * _1946) + _650) * cbLight._m0[_2248].z) * _2316) * _2317) + _2123;
    }
    float _2452;
    float _2454;
    float _2456;
    float _2458;
    float _2460;
    float _2462;
    if (_1750.y == 0u)
    {
        float _2392 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2393 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2392;
        float _2394 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2392;
        float _2395 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2392;
        uvec4 _2407 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2408 = _2407.x;
        uint _2419 = uint((float(_2407.y) * floor(float(uint(cbSceneParam._m0[85u].y * _584) / _2408))) + floor(float(uint(cbSceneParam._m0[85u].x * _583) / _2408)));
        float _2429 = (log2(_2395 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2430 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
        uint _2433 = uint(isnan(14.0) ? _2430 : (isnan(_2430) ? 14.0 : min(_2430, 14.0)));
        uvec4 _2438 = texelFetch(g_lightClusterGridBuffer, int(((_2433 << 2u) + (_2419 << 6u)) >> 2u));
        uint _2439 = _2438.x;
        uint _2440 = _2407.z;
        float _2540;
        float _2542;
        float _2544;
        float _2546;
        float _2548;
        float _2550;
        if (((((1u << ((_2440 >> 4u) & 15u)) + 4294967295u) & _2439) == 0u) || ((_2440 & 240u) == 0u))
        {
            _2540 = 0.0;
            _2542 = 0.0;
            _2544 = 0.0;
            _2546 = 0.0;
            _2548 = 0.0;
            _2550 = 0.0;
        }
        else
        {
            float _2541;
            float _2543;
            float _2545;
            float _2547;
            float _2549;
            float _2551;
            float _2693 = 0.0;
            float _2694 = 0.0;
            float _2695 = 0.0;
            float _2696 = 0.0;
            float _2697 = 0.0;
            float _2698 = 0.0;
            uint _2699 = 0u;
            uint _2708;
            bool _2709;
            for (;;)
            {
                _2708 = texelFetch(g_lightClassification, int((((_2433 << 5u) + (_2419 << 9u)) + (_2699 << 2u)) >> 2u)).x;
                _2709 = _2708 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2709)
                {
                    frontier_phi_66_pred = _2693;
                    frontier_phi_66_pred_1 = _2698;
                    frontier_phi_66_pred_2 = _2697;
                    frontier_phi_66_pred_3 = _2696;
                    frontier_phi_66_pred_4 = _2695;
                    frontier_phi_66_pred_5 = _2694;
                }
                else
                {
                    float _2838;
                    float _2839;
                    float _2840;
                    float _2841;
                    float _2842;
                    float _2843;
                    uint _2844;
                    _2838 = _2693;
                    _2839 = _2694;
                    _2840 = _2695;
                    _2841 = _2696;
                    _2842 = _2697;
                    _2843 = _2698;
                    _2844 = _2708;
                    float _2765;
                    float _2766;
                    float _2767;
                    float _2768;
                    float _2769;
                    float _2770;
                    for (;;)
                    {
                        uint _2848 = uint(findLSB(_2844)) + (_2699 << 5u);
                        uint _2845 = (_2844 + 4294967295u) & _2844;
                        uint _2850 = _2848 * 48u;
                        vec4 _2864 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2850)).x, texelFetch(g_PointLightRenderingBuffer, int(_2850 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2850 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2850 + 3u)).x));
                        uint _2870 = (_2848 * 48u) + 4u;
                        vec4 _2883 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2870)).x, texelFetch(g_PointLightRenderingBuffer, int(_2870 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2870 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2870 + 3u)).x));
                        uint _2889 = (_2848 * 48u) + 8u;
                        vec3 _2900 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2889)).x, texelFetch(g_PointLightRenderingBuffer, int(_2889 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2889 + 2u)).x));
                        float _2904 = _2864.x - _2393;
                        float _2905 = _2864.y - _2394;
                        float _2906 = _2864.z - _2395;
                        float _2907 = dot(vec3(_2904, _2905, _2906), vec3(_2904, _2905, _2906));
                        float _2910 = inversesqrt(_2907);
                        float _2911 = _2910 * _2904;
                        float _2912 = _2910 * _2905;
                        float _2913 = _2910 * _2906;
                        float _2914 = dot(vec3(_604, _607, _610), vec3(_2911, _2912, _2913));
                        float _2919 = 1.0 - (_2907 * _2864.w);
                        float _4278 = isnan(0.0) ? _2919 : (isnan(_2919) ? 0.0 : max(_2919, 0.0));
                        float _2920 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
                        float _2921 = sqrt(_2907) * _2883.w;
                        float _2924 = 1.39999997615814208984375 / (_2921 + 1.39999997615814208984375);
                        float _2925 = _2924 * _2924;
                        float _2928 = ((1.0 - _2925) * _2914) + _2925;
                        float _2931 = _2921 * _2921;
                        float _2935 = ((isnan(0.0) ? _2928 : (isnan(_2928) ? 0.0 : max(_2928, 0.0))) * _2920) / ((_2931 * 0.699999988079071044921875) + 1.0);
                        float _2939 = (-0.0) - _2393;
                        float _2940 = (-0.0) - _2394;
                        float _2941 = (-0.0) - _2395;
                        float _2945 = inversesqrt(dot(vec3(_2939, _2940, _2941), vec3(_2939, _2940, _2941)));
                        float _2946 = _2945 * _2939;
                        float _2947 = _2945 * _2940;
                        float _2948 = _2945 * _2941;
                        float _2956 = exp2(log2(1.0 / ((_2931 * 3.5) + 5.0)) * 0.25);
                        float _2957 = 1.0 - _679;
                        float _2964 = sqrt(1.0 - ((1.0 - (_2957 * _2957)) * (1.0 - (_2956 * _2956))));
                        float _2965 = _2964 * _2964;
                        float _2966 = _2965 * _2965;
                        float _2967 = _2946 + _2911;
                        float _2968 = _2947 + _2912;
                        float _2969 = _2948 + _2913;
                        float _2973 = inversesqrt(dot(vec3(_2967, _2968, _2969), vec3(_2967, _2968, _2969)));
                        float _2977 = dot(vec3(_604, _607, _610), vec3(_2946, _2947, _2948));
                        float _4294 = isnan(0.0) ? _2977 : (isnan(_2977) ? 0.0 : max(_2977, 0.0));
                        float _2980 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
                        float _2981 = dot(vec3(_604, _607, _610), vec3(_2973 * _2967, _2973 * _2968, _2973 * _2969));
                        float _4305 = isnan(0.0) ? _2981 : (isnan(_2981) ? 0.0 : max(_2981, 0.0));
                        float _2984 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
                        float _2988 = ((_2984 * _2984) * (_2966 + (-1.0))) + 1.0;
                        float _2989 = _2924 * _2965;
                        float _2990 = _2989 * _2989;
                        float _2993 = ((1.0 - _2990) * _2914) + _2990;
                        float _4316 = isnan(0.0) ? _2993 : (isnan(_2993) ? 0.0 : max(_2993, 0.0));
                        float _2994 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
                        float _2995 = 1.0 - _2965;
                        float _3005 = (0.5 / (((_2994 * ((_2980 * _2995) + _2965)) + 9.9999999392252902907785028219223e-09) + (((_2994 * _2995) + _2965) * _2980))) * _2994;
                        float _4327 = isnan(0.0) ? _3005 : (isnan(_3005) ? 0.0 : max(_3005, 0.0));
                        float _3016 = (((_2966 * 3.1415927410125732421875) * (isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0)))) / ((_2988 * _2988) * ((_2931 * 2.1991131305694580078125) + 3.141590118408203125))) * _2920;
                        _2768 = (_2935 * _2883.x) + _2841;
                        _2769 = (_2935 * _2883.y) + _2842;
                        _2770 = (_2935 * _2883.z) + _2843;
                        _2765 = (_3016 * _2900.x) + _2838;
                        _2766 = (_3016 * _2900.y) + _2839;
                        _2767 = (_3016 * _2900.z) + _2840;
                        if (_2845 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2838 = _2765;
                            _2839 = _2766;
                            _2840 = _2767;
                            _2841 = _2768;
                            _2842 = _2769;
                            _2843 = _2770;
                            _2844 = _2845;
                        }
                    }
                    frontier_phi_66_pred = _2765;
                    frontier_phi_66_pred_1 = _2770;
                    frontier_phi_66_pred_2 = _2769;
                    frontier_phi_66_pred_3 = _2768;
                    frontier_phi_66_pred_4 = _2767;
                    frontier_phi_66_pred_5 = _2766;
                }
                _2541 = frontier_phi_66_pred;
                _2551 = frontier_phi_66_pred_1;
                _2549 = frontier_phi_66_pred_2;
                _2547 = frontier_phi_66_pred_3;
                _2545 = frontier_phi_66_pred_4;
                _2543 = frontier_phi_66_pred_5;
                uint _2700 = _2699 + 1u;
                if (_2700 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2693 = _2541;
                    _2694 = _2543;
                    _2695 = _2545;
                    _2696 = _2547;
                    _2697 = _2549;
                    _2698 = _2551;
                    _2699 = _2700;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2540 = _2541;
            _2542 = _2543;
            _2544 = _2545;
            _2546 = _2547;
            _2548 = _2549;
            _2550 = _2551;
        }
        uvec4 _2554 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2555 = _2554.z;
        uint _2557 = (_2555 >> 8u) & 15u;
        float _2661;
        float _2663;
        float _2665;
        float _2667;
        float _2669;
        float _2671;
        if (((4294967295u << _2557) & _2439) == 0u)
        {
            _2661 = _2540;
            _2663 = _2542;
            _2665 = _2544;
            _2667 = _2546;
            _2669 = _2548;
            _2671 = _2550;
        }
        else
        {
            float _2686 = inversesqrt(dot(vec3(_2393, _2394, _2395), vec3(_2393, _2394, _2395)));
            float _2687 = _2686 * _2393;
            float _2688 = _2686 * _2394;
            float _2689 = _2686 * _2395;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2557 < ((_2555 >> 12u) & 15u))
            {
                float _2662;
                float _2664;
                float _2666;
                float _2668;
                float _2670;
                float _2672;
                float _2821 = _2540;
                float _2822 = _2542;
                float _2823 = _2544;
                float _2824 = _2546;
                float _2825 = _2548;
                float _2826 = _2550;
                uint _2827 = _2557;
                uint _2836;
                bool _2837;
                for (;;)
                {
                    _2836 = texelFetch(g_lightClassification, int((((_2433 << 5u) + (_2419 << 9u)) + (_2827 << 2u)) >> 2u)).x;
                    _2837 = _2836 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2837)
                    {
                        frontier_phi_77_pred = _2826;
                        frontier_phi_77_pred_1 = _2825;
                        frontier_phi_77_pred_2 = _2824;
                        frontier_phi_77_pred_3 = _2823;
                        frontier_phi_77_pred_4 = _2822;
                        frontier_phi_77_pred_5 = _2821;
                    }
                    else
                    {
                        float _3030;
                        float _3031;
                        float _3032;
                        float _3033;
                        float _3034;
                        float _3035;
                        float _3325;
                        float _3326;
                        float _3327;
                        float _3328;
                        float _3329;
                        float _3330;
                        float _3043 = _2821;
                        float _3044 = _2822;
                        float _3045 = _2823;
                        float _3046 = _2824;
                        float _3047 = _2825;
                        float _3048 = _2826;
                        uint _3049 = _2836;
                        uint _3050;
                        vec4 _3075;
                        float _3076;
                        vec4 _3091;
                        vec3 _3103;
                        vec4 _3119;
                        vec4 _3135;
                        float _3181;
                        bool _3182;
                        for (;;)
                        {
                            uint _3060 = ((_2827 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3049));
                            _3050 = (_3049 + 4294967295u) & _3049;
                            uint _3062 = _3060 * 40u;
                            _3075 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3062)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3062 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3062 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3062 + 3u)).x));
                            _3076 = _3075.w;
                            uint _3078 = (_3060 * 40u) + 4u;
                            _3091 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3078)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3078 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3078 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3078 + 3u)).x));
                            uint _3093 = (_3060 * 40u) + 8u;
                            _3103 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3093)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3093 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3093 + 2u)).x));
                            uint _3106 = (_3060 * 40u) + 16u;
                            _3119 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3106)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3106 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3106 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3106 + 3u)).x));
                            uint _3122 = (_3060 * 40u) + 20u;
                            _3135 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3122)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 3u)).x));
                            uint _3137 = (_3060 * 40u) + 24u;
                            vec4 _3150 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3137)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 3u)).x));
                            uint _3156 = (_3060 * 40u) + 28u;
                            vec4 _3169 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3156)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 3u)).x));
                            _3181 = fma(_2395, _3169.z, fma(_2394, _3169.y, _3169.x * _2393)) + _3169.w;
                            _3182 = !((fma(_2395, _3150.z, fma(_2394, _3150.y, _3150.x * _2393)) + _3150.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3182)
                            {
                                float _3209 = _3075.x - _2393;
                                float _3210 = _3075.y - _2394;
                                float _3211 = _3075.z - _2395;
                                float _3212 = dot(vec3(_3209, _3210, _3211), vec3(_3209, _3210, _3211));
                                float _3215 = inversesqrt(_3212);
                                float _3216 = _3215 * _3209;
                                float _3217 = _3215 * _3210;
                                float _3218 = _3215 * _3211;
                                float _3222 = 1.0 - (_3212 / (_3076 * _3076));
                                float _4338 = isnan(0.0) ? _3222 : (isnan(_3222) ? 0.0 : max(_3222, 0.0));
                                float _3223 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
                                float _3227 = sqrt(_3212) * _3091.w;
                                float _3229 = 1.39999997615814208984375 / (_3227 + 1.39999997615814208984375);
                                float _3230 = _3229 * _3229;
                                float _3233 = ((1.0 - _3230) * dot(vec3(_3216, _3217, _3218), vec3(_604, _607, _610))) + _3230;
                                float _3236 = _3227 * _3227;
                                float _3240 = (fma(_2395, _3119.z, fma(_2394, _3119.y, _3119.x * _2393)) + _3119.w) / _3181;
                                float _3241 = (fma(_2395, _3135.z, fma(_2394, _3135.y, _3135.x * _2393)) + _3135.w) / _3181;
                                float _3245 = 1.0 - dot(vec2(_3240, _3241), vec2(_3240, _3241));
                                float _4354 = isnan(0.0) ? _3245 : (isnan(_3245) ? 0.0 : max(_3245, 0.0));
                                float _3246 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
                                float _3247 = _3246 * (((isnan(0.0) ? _3233 : (isnan(_3233) ? 0.0 : max(_3233, 0.0))) * _3223) / ((_3236 * 0.699999988079071044921875) + 1.0));
                                float _3259 = exp2(log2(1.0 / ((_3236 * 3.5) + 5.0)) * 0.25);
                                float _3260 = 1.0 - _679;
                                float _3267 = sqrt(1.0 - ((1.0 - (_3260 * _3260)) * (1.0 - (_3259 * _3259))));
                                float _3268 = _3267 * _3267;
                                float _3269 = _3268 * _3268;
                                float _3270 = _3216 - _2687;
                                float _3271 = _3217 - _2688;
                                float _3272 = _3218 - _2689;
                                float _3276 = inversesqrt(dot(vec3(_3270, _3271, _3272), vec3(_3270, _3271, _3272)));
                                float _3280 = dot(vec3(_604, _607, _610), vec3((-0.0) - _2687, (-0.0) - _2688, (-0.0) - _2689));
                                float _4365 = isnan(0.0) ? _3280 : (isnan(_3280) ? 0.0 : max(_3280, 0.0));
                                float _3283 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
                                float _3284 = dot(vec3(_604, _607, _610), vec3(_3276 * _3270, _3276 * _3271, _3276 * _3272));
                                float _4376 = isnan(0.0) ? _3284 : (isnan(_3284) ? 0.0 : max(_3284, 0.0));
                                float _3287 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
                                float _3291 = ((_3287 * _3287) * (_3269 + (-1.0))) + 1.0;
                                float _3292 = _3229 * _3268;
                                float _3293 = _3292 * _3292;
                                float _3299 = ((1.0 - _3293) * dot(vec3(_604, _607, _610), vec3(_3216, _3217, _3218))) + _3293;
                                float _4387 = isnan(0.0) ? _3299 : (isnan(_3299) ? 0.0 : max(_3299, 0.0));
                                float _3300 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
                                float _3301 = 1.0 - _3268;
                                float _3311 = (0.5 / (((_3300 * ((_3283 * _3301) + _3268)) + 9.9999999392252902907785028219223e-09) + (((_3300 * _3301) + _3268) * _3283))) * _3300;
                                float _4398 = isnan(0.0) ? _3311 : (isnan(_3311) ? 0.0 : max(_3311, 0.0));
                                float _3321 = (_3246 * _3223) * (((_3269 * 3.1415927410125732421875) * (isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0)))) / ((_3291 * _3291) * ((_3236 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3247 * _3091.y;
                                frontier_phi_83_pred_1 = _3247 * _3091.x;
                                frontier_phi_83_pred_2 = _3321 * _3103.z;
                                frontier_phi_83_pred_3 = _3321 * _3103.y;
                                frontier_phi_83_pred_4 = _3321 * _3103.x;
                                frontier_phi_83_pred_5 = _3247 * _3091.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3329 = frontier_phi_83_pred;
                            _3328 = frontier_phi_83_pred_1;
                            _3327 = frontier_phi_83_pred_2;
                            _3326 = frontier_phi_83_pred_3;
                            _3325 = frontier_phi_83_pred_4;
                            _3330 = frontier_phi_83_pred_5;
                            _3033 = _3328 + _3046;
                            _3034 = _3329 + _3047;
                            _3035 = _3330 + _3048;
                            _3030 = _3325 + _3043;
                            _3031 = _3326 + _3044;
                            _3032 = _3327 + _3045;
                            if (_3050 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3043 = _3030;
                                _3044 = _3031;
                                _3045 = _3032;
                                _3046 = _3033;
                                _3047 = _3034;
                                _3048 = _3035;
                                _3049 = _3050;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3035;
                        frontier_phi_77_pred_1 = _3034;
                        frontier_phi_77_pred_2 = _3033;
                        frontier_phi_77_pred_3 = _3032;
                        frontier_phi_77_pred_4 = _3031;
                        frontier_phi_77_pred_5 = _3030;
                    }
                    _2672 = frontier_phi_77_pred;
                    _2670 = frontier_phi_77_pred_1;
                    _2668 = frontier_phi_77_pred_2;
                    _2666 = frontier_phi_77_pred_3;
                    _2664 = frontier_phi_77_pred_4;
                    _2662 = frontier_phi_77_pred_5;
                    uint _2828 = _2827 + 1u;
                    if (_2828 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2821 = _2662;
                        _2822 = _2664;
                        _2823 = _2666;
                        _2824 = _2668;
                        _2825 = _2670;
                        _2826 = _2672;
                        _2827 = _2828;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2666;
                frontier_phi_58_59_ladder_1 = _2672;
                frontier_phi_58_59_ladder_2 = _2670;
                frontier_phi_58_59_ladder_3 = _2668;
                frontier_phi_58_59_ladder_4 = _2664;
                frontier_phi_58_59_ladder_5 = _2662;
            }
            else
            {
                frontier_phi_58_59_ladder = _2544;
                frontier_phi_58_59_ladder_1 = _2550;
                frontier_phi_58_59_ladder_2 = _2548;
                frontier_phi_58_59_ladder_3 = _2546;
                frontier_phi_58_59_ladder_4 = _2542;
                frontier_phi_58_59_ladder_5 = _2540;
            }
            _2661 = frontier_phi_58_59_ladder_5;
            _2663 = frontier_phi_58_59_ladder_4;
            _2665 = frontier_phi_58_59_ladder;
            _2667 = frontier_phi_58_59_ladder_3;
            _2669 = frontier_phi_58_59_ladder_2;
            _2671 = frontier_phi_58_59_ladder_1;
        }
        float _2676 = isnan(1.0) ? _663 : (isnan(_663) ? 1.0 : min(_663, 1.0));
        _2452 = (_2676 * _2667) + _1885;
        _2454 = (_2676 * _2669) + _1887;
        _2456 = (_2676 * _2671) + _1889;
        _2458 = ((_2661 * _647) * _2676) + _2233;
        _2460 = ((_2663 * _649) * _2676) + _2235;
        _2462 = ((_2665 * _650) * _2676) + _2237;
    }
    else
    {
        _2452 = _1885;
        _2454 = _1887;
        _2456 = _1889;
        _2458 = _2233;
        _2460 = _2235;
        _2462 = _2237;
    }
    float _4414 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _4425 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _4436 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _2479 = ((isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0))) * (_2452 + ((isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0))) * _663))) + ((_2458 + ((isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0))) * _1503)) * cbPerFrame._m0[3u].x);
    float _2480 = ((isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0))) * (_2454 + ((isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0))) * _663))) + ((_2460 + ((isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0))) * _1503)) * cbPerFrame._m0[3u].x);
    float _2481 = ((isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0))) * (_2456 + ((isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0))) * _663))) + ((_2462 + ((isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0))) * _1503)) * cbPerFrame._m0[3u].x);
    uint _2482 = _226 + 6u;
    float _2490 = _583 / cbSceneParam._m0[86u].x;
    float _2491 = _584 / cbSceneParam._m0[86u].y;
    vec4 _2505 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2490, _2491, (log2((isnan(cbSceneParam._m0[77u].w) ? _504 : (isnan(_504) ? cbSceneParam._m0[77u].w : min(_504, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2507 = _2505.x;
    float _2508 = _2505.y;
    float _2509 = _2505.z;
    float _2510 = _2505.w;
    float _2603;
    float _2605;
    float _2607;
    float _2609;
    if (_504 > cbSceneParam._m0[78u].w)
    {
        float _2565 = isnan(_504) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _504 : min(cbSceneParam._m0[80u].w, _504));
        float _2566 = _2565 / _504;
        float _2577 = _2566 * _555;
        float _2578 = _556 * _2566;
        float _2579 = (-0.0) - _2578;
        float _2581 = _2566 * _557;
        float _2583 = (cbSceneParam._m0[77u].w * _2579) / _2565;
        float _2584 = _2583 + cbSceneParam._m0[79u].w;
        float _2585 = cbSceneParam._m0[79u].w - _2578;
        float _2591 = sqrt(((_2577 * _2577) + (_2578 * _2578)) + (_2581 * _2581));
        float _2594 = (1.0 - (cbSceneParam._m0[77u].w / _2565)) * _2591;
        float _2599 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2601 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2778;
        if (abs((_2579 - _2583) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2778 = ((((_2584 > 0.0) ? exp2(_2599 * _2584) : (2.0 - exp2(_2601 * _2584))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2594;
        }
        else
        {
            float _2722 = 1.0 / cbSceneParam._m0[80u].x;
            float _2723 = isnan(_2585) ? _2584 : (isnan(_2584) ? _2585 : max(_2584, _2585));
            float _2724 = isnan(_2585) ? _2584 : (isnan(_2584) ? _2585 : min(_2584, _2585));
            float _2733 = isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : min(_2723, 0.0));
            float _2734 = isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : min(_2724, 0.0));
            _2778 = ((abs(_2591 / _2579) * cbSceneParam._m0[80u].y) * ((((_2733 - _2734) * 2.0) - ((exp2(_2599 * (isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : max(_2723, 0.0)))) - exp2(_2599 * (isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0))))) * _2722)) - ((exp2(_2601 * _2733) - exp2(_2601 * _2734)) * _2722))) + (_2594 * cbSceneParam._m0[80u].z);
        }
        vec4 _2780 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2490, _2491, 1.0), 0.0);
        float _2789 = exp2((_2778 * (-1.44269502162933349609375)) * (1.0 - _2780.w));
        float _2790 = log2(_2789);
        float _2806 = log2(_2510);
        _2603 = (exp2(_2806 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2790 * cbSceneParam._m0[78u].x)) * _2780.x) / cbSceneParam._m0[78u].x)) + _2507;
        _2605 = (exp2(_2806 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2790 * cbSceneParam._m0[78u].y)) * _2780.y) / cbSceneParam._m0[78u].y)) + _2508;
        _2607 = (exp2(_2806 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2790 * cbSceneParam._m0[78u].z)) * _2780.z) / cbSceneParam._m0[78u].z)) + _2509;
        _2609 = _2789 * _2510;
    }
    else
    {
        _2603 = _2507;
        _2605 = _2508;
        _2607 = _2509;
        _2609 = _2510;
    }
    bool _2816;
    vec4 _2619;
    vec4 _2641;
    float _2643;
    float _2647;
    float _2648;
    float _2649;
    float _2650;
    bool _2660;
    for (;;)
    {
        _2619 = cbMatDynParam._m0[0u];
        float _2621 = roundEven(_2619.y);
        bool _2622 = _2621 == 3.0;
        float _2623 = log2(_2609);
        float _2630 = exp2(_2623 * cbSceneParam._m0[78u].x) * _2479;
        float _2631 = exp2(_2623 * cbSceneParam._m0[78u].y) * _2480;
        float _2632 = exp2(_2623 * cbSceneParam._m0[78u].z) * _2481;
        float _2639 = _571 + (-0.5);
        _2641 = cbMtdParam._m0[1u];
        _2643 = _2641.y * _2639;
        float _2646 = (_2621 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2647 = _2646 * (_2622 ? _2630 : (_2630 + (cbSceneParam._m0[72u].w * _2603)));
        _2648 = _2646 * (_2622 ? _2631 : (_2631 + (cbSceneParam._m0[72u].w * _2605)));
        _2649 = _2646 * (_2622 ? _2632 : (_2632 + (cbSceneParam._m0[72u].w * _2607)));
        _2650 = _2639 * 0.999000012874603271484375;
        _2660 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2660)
        {
            if ((cbInstanceData._m0[_226 + 7u].x + _2650) < 0.5)
            {
                _2816 = true;
                break;
            }
        }
        uint _2757 = _623 + uint(_2619.w);
        if ((cbInstanceData._m0[_2757].w < 1.0) && ((cbInstanceData._m0[_2757].w + _2650) < 0.5))
        {
            _2816 = true;
            break;
        }
        if ((_2643 + 1.0) < _2641.x)
        {
            _2816 = true;
            break;
        }
        _2816 = false;
        break;
    }
    float _3021;
    if (_2816)
    {
        discard_state = true;
        _3021 = 0.0;
    }
    else
    {
        _3021 = cbInstanceData._m0[_2482].w;
    }
    SV_Target.x = _2647;
    SV_Target.y = _2648;
    SV_Target.z = _2649;
    SV_Target.w = _3021;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2482].w;
    discard_exit();
}


