#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1187;
float _3853;
float _3854;
float _3855;
float _3856;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _221 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _222 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _223 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _229 = inversesqrt(dot(vec3(_221, _222, _223), vec3(_221, _222, _223)));
    float _236 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _243 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _249 = uint(roundEven(NORMAL.w)) * 13u;
    uint _254 = _249 + 1u;
    uint _258 = _249 + 2u;
    float _267 = sqrt(((cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x) + (cbInstanceData._m0[_249].x * cbInstanceData._m0[_249].x)) + (cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x));
    float _268 = _267 * TEXCOORD.z;
    float _269 = _267 * TEXCOORD.w;
    vec4 _288 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _294 = _288.x * cbMtdParam._m0[9u].x;
    float _295 = _288.y * cbMtdParam._m0[9u].y;
    float _296 = _288.z * cbMtdParam._m0[9u].z;
    vec4 _314 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _268) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _269) + cbTextureTilingScale._m0[20u].w));
    vec4 _340 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _344 = _340.z;
    float _348 = (_340.x * 2.0) + (-1.0);
    float _349 = (_340.y * 2.0) + (-1.0);
    float _350 = dot(vec2(_348, _349), vec2(_348, _349));
    float _3865 = isnan(0.0) ? _350 : (isnan(_350) ? 0.0 : max(_350, 0.0));
    float _356 = sqrt(1.0 - (isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0))));
    float _361 = _348 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_314.x * 2.0) + (-1.0)));
    float _362 = _349 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_314.y * 2.0) + (-1.0)));
    vec4 _379 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _268) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _269) + cbTextureTilingScale._m0[11u].w));
    float _381 = _379.x;
    float _382 = 1.0 - _381;
    float _391 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _394 = ((isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : min(_391, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _403 = (_394 - ((((((_381 - _382) * cbMtdParam._m0[24u].z) + _382) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _394))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3886 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _404 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
    float _411 = (_404 * (cbMtdParam._m0[17u].x - _294)) + _294;
    float _412 = (_404 * (cbMtdParam._m0[17u].y - _295)) + _295;
    float _413 = (_404 * (cbMtdParam._m0[17u].z - _296)) + _296;
    vec4 _426 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _268) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _269) + cbTextureTilingScale._m0[19u].w));
    float _428 = _426.x;
    float _429 = 1.0 - _428;
    float _458 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_428 - _429) * cbMtdParam._m0[24u].w) + _429) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3897 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _459 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
    float _467 = ((((cbMtdParam._m0[10u].x - _411) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _459) + _411;
    float _468 = ((((cbMtdParam._m0[10u].y - _412) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _459) + _412;
    float _469 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _413)) * _459) + _413;
    vec4 _482 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _484 = _482.x;
    float _486 = _484 - (_484 * _404);
    float _488 = _486 - (_486 * _459);
    float _493 = (((_314.z - _344) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _344;
    vec4 _507 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _268) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _269) + cbTextureTilingScale._m0[15u].w));
    float _514 = (_507.x * 2.0) + (-1.0);
    float _515 = (_507.y * 2.0) + (-1.0);
    float _516 = dot(vec2(_514, _515), vec2(_514, _515));
    float _3908 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _524 = (_404 * (_507.z - _493)) + _493;
    float _527 = ((cbMtdParam._m0[23u].y - _524) * _459) + _524;
    vec4 _549 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _268) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _269) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _555 = (_549.x * 2.0) + (-1.0);
    float _556 = (_549.y * 2.0) + (-1.0);
    float _557 = dot(vec2(_555, _556), vec2(_555, _556));
    float _3919 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
    float _574 = (((_514 - _361) + (cbMtdParam._m0[21u].x * _361)) * _404) + _361;
    float _575 = (((_515 - _362) + (cbMtdParam._m0[21u].x * _362)) * _404) + _362;
    float _576 = (_404 * (sqrt(1.0 - (isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0)))) - _356)) + _356;
    float _587 = (((_555 - _574) + (_574 * cbMtdParam._m0[22u].z)) * _459) + _574;
    float _588 = (((_556 - _575) + (_575 * cbMtdParam._m0[22u].z)) * _459) + _575;
    float _589 = ((sqrt(1.0 - (isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0)))) - _576) * _459) + _576;
    float _591 = cbMtdParam._m0[22u].x + _340.w;
    float _594 = fma(_589, _236 * NORMAL.x, fma(_588, _243 * TANGENT.x, (_229 * _221) * _587));
    float _597 = fma(_589, _236 * NORMAL.y, fma(_588, _243 * TANGENT.y, (_229 * _222) * _587));
    float _600 = fma(_589, _236 * NORMAL.z, fma(_588, _243 * TANGENT.z, (_229 * _223) * _587));
    float _604 = inversesqrt(dot(vec3(_594, _597, _600), vec3(_594, _597, _600)));
    float _605 = _604 * _594;
    float _606 = _604 * _597;
    float _607 = _604 * _600;
    float _3930 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _608 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
    float _3941 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _3952 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _3963 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _3974 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _3985 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _613 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
    float _627 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _667 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _677 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _667);
    float _678 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _667);
    float _679 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _667);
    float _683 = inversesqrt(dot(vec3(_677, _678, _679), vec3(_677, _678, _679)));
    float _684 = _677 * _683;
    float _685 = _678 * _683;
    float _686 = _679 * _683;
    vec4 _691 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _693 = _691.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _868 = sqrt(((_677 * _677) + (_678 * _678)) + (_679 * _679));
        float _874 = (cbMatDynParam._m0[5u].x * _868) + cbMatDynParam._m0[5u].y;
        float _3996 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
        float _875 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
        float _879 = (cbMatDynParam._m0[5u].z * _868) + cbMatDynParam._m0[5u].w;
        float _4007 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0))) - _875)) + _875) < ((_693 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _705 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _706 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _726 = fma(_607, cbSceneParam._m0[5u].z, fma(_606, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _605));
    float _729 = fma(_607, cbSceneParam._m0[6u].z, fma(_606, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _605));
    float _732 = fma(_607, cbSceneParam._m0[7u].z, fma(_606, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _605));
    uint _745 = _249 + 9u;
    uint _746 = _745 + uint(cbMatDynParam._m0[0u].w);
    float _752 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0)))) * cbInstanceData._m0[_746].x;
    float _753 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0)))) * cbInstanceData._m0[_746].y;
    float _754 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0)))) * cbInstanceData._m0[_746].z;
    float _4018 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
    float _755 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
    float _4029 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _756 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
    float _4040 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    float _757 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
    float _758 = 1.0 - _613;
    float _759 = _755 * _758;
    float _760 = _756 * _758;
    float _761 = _757 * _758;
    float _766 = (_755 + (-0.039999999105930328369140625)) * _613;
    float _767 = (_756 + (-0.039999999105930328369140625)) * _613;
    float _768 = (_757 + (-0.039999999105930328369140625)) * _613;
    float _769 = _766 + 0.039999999105930328369140625;
    float _771 = _767 + 0.039999999105930328369140625;
    float _772 = _768 + 0.039999999105930328369140625;
    vec4 _781 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _705, cbSceneParam._m0[86u].y * _706));
    float _785 = ((isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0))) * TEXCOORD_5.w) * _781.x;
    float _786 = dot(vec3(_605, _606, _607), vec3(_684, _685, _686));
    float _789 = _786 * 2.0;
    float _793 = (_789 * _605) - _684;
    float _794 = (_789 * _606) - _685;
    float _795 = (_789 * _607) - _686;
    float _799 = abs(dot(vec3(_684, _685, _686), vec3(_605, _606, _607)));
    float _4051 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
    float _801 = sqrt(_608);
    float _814 = exp2((_801 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_801 * 3.0));
    float _820 = (1.0 - _814) * ((_801 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _821 = _814 * _801;
    float _849 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _853 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _857 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1186;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _911 = fma(_857, cbModelParam._m0[26u].z, fma(_853, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _849));
        float _915 = fma(_857, cbModelParam._m0[27u].z, fma(_853, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _849));
        float _919 = fma(_857, cbModelParam._m0[28u].z, fma(_853, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _849));
        float _944 = _849 + _605;
        float _945 = _853 + _606;
        float _946 = _857 + _607;
        float _956 = fma(_946, cbModelParam._m0[26u].z, fma(_945, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _944)) - _911;
        float _957 = fma(_946, cbModelParam._m0[27u].z, fma(_945, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _944)) - _915;
        float _958 = fma(_946, cbModelParam._m0[28u].z, fma(_945, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _944)) - _919;
        float _962 = inversesqrt(dot(vec3(_956, _957, _958), vec3(_956, _957, _958)));
        float _975 = ((_962 * _956) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_911 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _976 = ((_962 * _957) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_915 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _977 = ((_962 * _958) / cbModelParam._m0[34u].z) + ((((((_919 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _980 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_975, _976, _977), 0.0);
        vec4 _987 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_975, _976, _977), 0.0);
        vec4 _994 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_975, _976, _977), 0.0);
        vec4 _1001 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_975, _976, _977), 0.0);
        float _1014 = exp2((_980.w + (-0.5)) * 20.0) * 2.0;
        float _1015 = _1014 * (_980.x + (-0.5));
        float _1016 = _1014 * (_980.y + (-0.5));
        float _1017 = _1014 * (_980.z + (-0.5));
        float _1024 = exp2((_987.w + (-0.5)) * 20.0) * 2.0;
        float _1025 = _1024 * (_987.x + (-0.5));
        float _1026 = _1024 * (_987.y + (-0.5));
        float _1027 = _1024 * (_987.z + (-0.5));
        float _1034 = exp2((_994.w + (-0.5)) * 20.0) * 2.0;
        float _1035 = _1034 * (_994.x + (-0.5));
        float _1036 = _1034 * (_994.y + (-0.5));
        float _1037 = _1034 * (_994.z + (-0.5));
        float _1044 = exp2((_1001.w + (-0.5)) * 20.0) * 2.0;
        float _1045 = _1044 * (_1001.x + (-0.5));
        float _1046 = _1044 * (_1001.y + (-0.5));
        float _1047 = _1044 * (_1001.z + (-0.5));
        float _1048 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1049 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1050 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1051 = _1015 * 0.5;
        float _1052 = _1025 * 0.5;
        float _1053 = _1035 * 0.5;
        float _1054 = dot(vec3(_1051, _1052, _1053), vec3(_1051, _1052, _1053));
        float _1059 = (_1054 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1054);
        float _1068 = (dot(vec3(_605, _606, _607), vec3(_1059 * _1051, _1059 * _1052, _1059 * _1053)) + 1.0) * 0.5;
        float _4077 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1078 = sqrt(((_1052 * _1052) + (_1051 * _1051)) + (_1053 * _1053)) / (_1048 + 9.9999997473787516355514526367188e-06);
        float _4088 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1079 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
        float _1080 = _1079 * 2.0;
        float _1084 = (1.0 - _1079) / (_1079 + 1.0);
        float _4099 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1085 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
        float _1094 = ((((1.0 - _1085) * (_1080 + 2.0)) * exp2(log2(isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0))) * (_1080 + 1.0))) + _1085) * _1048;
        float _1095 = _1016 * 0.5;
        float _1096 = _1026 * 0.5;
        float _1097 = _1036 * 0.5;
        float _1098 = dot(vec3(_1095, _1096, _1097), vec3(_1095, _1096, _1097));
        float _1103 = (_1098 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1098);
        float _1111 = (dot(vec3(_605, _606, _607), vec3(_1103 * _1095, _1103 * _1096, _1103 * _1097)) + 1.0) * 0.5;
        float _4110 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1120 = sqrt(((_1096 * _1096) + (_1095 * _1095)) + (_1097 * _1097)) / (_1049 + 9.9999997473787516355514526367188e-06);
        float _4121 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1121 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
        float _1122 = _1121 * 2.0;
        float _1126 = (1.0 - _1121) / (_1121 + 1.0);
        float _4132 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1127 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
        float _1136 = ((((1.0 - _1127) * (_1122 + 2.0)) * exp2(log2(isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0))) * (_1122 + 1.0))) + _1127) * _1049;
        float _1137 = _1017 * 0.5;
        float _1138 = _1027 * 0.5;
        float _1139 = _1037 * 0.5;
        float _1140 = dot(vec3(_1137, _1138, _1139), vec3(_1137, _1138, _1139));
        float _1145 = (_1140 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1140);
        float _1153 = (dot(vec3(_605, _606, _607), vec3(_1145 * _1137, _1145 * _1138, _1145 * _1139)) + 1.0) * 0.5;
        float _4143 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1162 = sqrt(((_1138 * _1138) + (_1137 * _1137)) + (_1139 * _1139)) / (_1050 + 9.9999997473787516355514526367188e-06);
        float _4154 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1163 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
        float _1164 = _1163 * 2.0;
        float _1168 = (1.0 - _1163) / (_1163 + 1.0);
        float _4165 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1169 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
        float _1178 = ((((1.0 - _1169) * (_1164 + 2.0)) * exp2(log2(isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0))) * (_1164 + 1.0))) + _1169) * _1050;
        _1186 = _1017;
        _1188 = _1016;
        _1189 = _1015;
        _1190 = _1027;
        _1191 = _1026;
        _1192 = _1025;
        _1193 = _1037;
        _1194 = _1036;
        _1195 = _1035;
        _1196 = _1050;
        _1197 = _1049;
        _1198 = _1048;
        _1199 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0)));
        _1200 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0)));
        _1201 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0)));
    }
    else
    {
        _1186 = _1187;
        _1188 = _1187;
        _1189 = _1187;
        _1190 = _1187;
        _1191 = _1187;
        _1192 = _1187;
        _1193 = _1187;
        _1194 = _1187;
        _1195 = _1187;
        _1196 = _1187;
        _1197 = _1187;
        _1198 = _1187;
        _1199 = 0.0;
        _1200 = 0.0;
        _1201 = 0.0;
    }
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1229 = fma(_857, cbModelParam._m0[30u].z, fma(_853, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _849));
        float _1233 = fma(_857, cbModelParam._m0[31u].z, fma(_853, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _849));
        float _1237 = fma(_857, cbModelParam._m0[32u].z, fma(_853, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _849));
        float _1260 = _849 + _605;
        float _1261 = _853 + _606;
        float _1262 = _857 + _607;
        float _1272 = fma(_1262, cbModelParam._m0[30u].z, fma(_1261, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1260)) - _1229;
        float _1273 = fma(_1262, cbModelParam._m0[31u].z, fma(_1261, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1260)) - _1233;
        float _1274 = fma(_1262, cbModelParam._m0[32u].z, fma(_1261, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1260)) - _1237;
        float _1278 = inversesqrt(dot(vec3(_1272, _1273, _1274), vec3(_1272, _1273, _1274)));
        float _1291 = ((_1278 * _1272) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1229 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1292 = ((_1278 * _1273) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1233 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1293 = ((_1278 * _1274) / cbModelParam._m0[35u].z) + ((((((_1237 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1295 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1291, _1292, _1293), 0.0);
        vec4 _1302 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1291, _1292, _1293), 0.0);
        vec4 _1309 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1291, _1292, _1293), 0.0);
        vec4 _1316 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1291, _1292, _1293), 0.0);
        float _1328 = exp2((_1295.w + (-0.5)) * 20.0) * 2.0;
        float _1329 = _1328 * (_1295.x + (-0.5));
        float _1330 = _1328 * (_1295.y + (-0.5));
        float _1331 = _1328 * (_1295.z + (-0.5));
        float _1338 = exp2((_1302.w + (-0.5)) * 20.0) * 2.0;
        float _1339 = _1338 * (_1302.x + (-0.5));
        float _1340 = _1338 * (_1302.y + (-0.5));
        float _1341 = _1338 * (_1302.z + (-0.5));
        float _1348 = exp2((_1309.w + (-0.5)) * 20.0) * 2.0;
        float _1349 = _1348 * (_1309.x + (-0.5));
        float _1350 = _1348 * (_1309.y + (-0.5));
        float _1351 = _1348 * (_1309.z + (-0.5));
        float _1358 = exp2((_1316.w + (-0.5)) * 20.0) * 2.0;
        float _1359 = _1358 * (_1316.x + (-0.5));
        float _1360 = _1358 * (_1316.y + (-0.5));
        float _1361 = _1358 * (_1316.z + (-0.5));
        float _1362 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1363 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1364 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1365 = _1329 * 0.5;
        float _1366 = _1339 * 0.5;
        float _1367 = _1349 * 0.5;
        float _1368 = dot(vec3(_1365, _1366, _1367), vec3(_1365, _1366, _1367));
        float _1373 = (_1368 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1368);
        float _1381 = (dot(vec3(_605, _606, _607), vec3(_1373 * _1365, _1373 * _1366, _1373 * _1367)) + 1.0) * 0.5;
        float _4206 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1390 = sqrt(((_1366 * _1366) + (_1365 * _1365)) + (_1367 * _1367)) / (_1362 + 9.9999997473787516355514526367188e-06);
        float _4217 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1391 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
        float _1392 = _1391 * 2.0;
        float _1396 = (1.0 - _1391) / (_1391 + 1.0);
        float _4228 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1397 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
        float _1406 = ((((1.0 - _1397) * (_1392 + 2.0)) * exp2(log2(isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0))) * (_1392 + 1.0))) + _1397) * _1362;
        float _1407 = _1330 * 0.5;
        float _1408 = _1340 * 0.5;
        float _1409 = _1350 * 0.5;
        float _1410 = dot(vec3(_1407, _1408, _1409), vec3(_1407, _1408, _1409));
        float _1415 = (_1410 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1410);
        float _1423 = (dot(vec3(_605, _606, _607), vec3(_1415 * _1407, _1415 * _1408, _1415 * _1409)) + 1.0) * 0.5;
        float _4239 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1432 = sqrt(((_1408 * _1408) + (_1407 * _1407)) + (_1409 * _1409)) / (_1363 + 9.9999997473787516355514526367188e-06);
        float _4250 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1433 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
        float _1434 = _1433 * 2.0;
        float _1438 = (1.0 - _1433) / (_1433 + 1.0);
        float _4261 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1439 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
        float _1448 = ((((1.0 - _1439) * (_1434 + 2.0)) * exp2(log2(isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0))) * (_1434 + 1.0))) + _1439) * _1363;
        float _1449 = _1331 * 0.5;
        float _1450 = _1341 * 0.5;
        float _1451 = _1351 * 0.5;
        float _1452 = dot(vec3(_1449, _1450, _1451), vec3(_1449, _1450, _1451));
        float _1457 = (_1452 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1452);
        float _1465 = (dot(vec3(_605, _606, _607), vec3(_1457 * _1449, _1457 * _1450, _1457 * _1451)) + 1.0) * 0.5;
        float _4272 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1474 = sqrt(((_1450 * _1450) + (_1449 * _1449)) + (_1451 * _1451)) / (_1364 + 9.9999997473787516355514526367188e-06);
        float _4283 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1475 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
        float _1476 = _1475 * 2.0;
        float _1480 = (1.0 - _1475) / (_1475 + 1.0);
        float _4294 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1481 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
        float _1490 = ((((1.0 - _1481) * (_1476 + 2.0)) * exp2(log2(isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0))) * (_1476 + 1.0))) + _1481) * _1364;
        _1498 = _1331;
        _1499 = _1330;
        _1500 = _1329;
        _1501 = _1341;
        _1502 = _1340;
        _1503 = _1339;
        _1504 = _1351;
        _1505 = _1350;
        _1506 = _1349;
        _1507 = _1364;
        _1508 = _1363;
        _1509 = _1362;
        _1510 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0)));
        _1511 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0)));
        _1512 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0)));
    }
    else
    {
        _1498 = _1187;
        _1499 = _1187;
        _1500 = _1187;
        _1501 = _1187;
        _1502 = _1187;
        _1503 = _1187;
        _1504 = _1187;
        _1505 = _1187;
        _1506 = _1187;
        _1507 = _1187;
        _1508 = _1187;
        _1509 = _1187;
        _1510 = 0.0;
        _1511 = 0.0;
        _1512 = 0.0;
    }
    float _1522 = (cbModelParam._m0[1u].x * (_1510 - _1199)) + _1199;
    float _1523 = (cbModelParam._m0[1u].x * (_1511 - _1200)) + _1200;
    float _1524 = (cbModelParam._m0[1u].x * (_1512 - _1201)) + _1201;
    float _1545 = fma(_1524, cbSceneParam._m0[89u].z, fma(_1523, cbSceneParam._m0[89u].y, _1522 * cbSceneParam._m0[89u].x));
    float _1548 = fma(_1524, cbSceneParam._m0[90u].z, fma(_1523, cbSceneParam._m0[90u].y, _1522 * cbSceneParam._m0[90u].x));
    float _1551 = fma(_1524, cbSceneParam._m0[91u].z, fma(_1523, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1522));
    float _1566 = _793 * 0.5;
    float _1567 = _794 * 0.5;
    float _1568 = _795 * 0.5;
    float _1569 = dot(vec4(_1566, _1567, _1568, 1.0), vec4(_1500, _1503, _1506, _1509));
    float _1572 = dot(vec4(_1566, _1567, _1568, 1.0), vec4(_1499, _1502, _1505, _1508));
    float _1575 = dot(vec4(_1566, _1567, _1568, 1.0), vec4(_1498, _1501, _1504, _1507));
    float _1609;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1582 = dot(vec4(_1566, _1567, _1568, 1.0), vec4(_1186, _1190, _1193, _1196));
        float _1586 = dot(vec4(_1566, _1567, _1568, 1.0), vec4(_1188, _1191, _1194, _1197));
        float _1590 = dot(vec4(_1566, _1567, _1568, 1.0), vec4(_1189, _1192, _1195, _1198));
        float _1597 = dot(vec4(cbModelParam._m0[39u]), vec4(_1566, _1567, _1568, 1.0));
        _1609 = dot(vec3(isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0)), isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0)), isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1597) ? 0.0 : (isnan(0.0) ? _1597 : max(0.0, _1597))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1609 = 1.0;
    }
    float _1620;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1611 = dot(vec4(cbModelParam._m0[40u]), vec4(_1566, _1567, _1568, 1.0));
        _1620 = dot(vec3(isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0)), isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0)), isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1611) ? 0.0 : (isnan(0.0) ? _1611 : max(0.0, _1611))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1620 = 1.0;
    }
    float _1624 = (_1620 * cbModelParam._m0[1u].x) + (_1609 * (1.0 - cbModelParam._m0[1u].x));
    float _1634 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _608);
    float _1635 = isnan(_1634) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1634 : min(cbModelParam._m0[25u].z, _1634));
    float _1716;
    float _1718;
    float _1720;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1683 = fma(_857, cbModelParam._m0[13u].z, fma(_853, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _849)) + cbModelParam._m0[13u].w;
        float _1687 = fma(_857, cbModelParam._m0[14u].z, fma(_853, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _849)) + cbModelParam._m0[14u].w;
        float _1691 = fma(_857, cbModelParam._m0[15u].z, fma(_853, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _849)) + cbModelParam._m0[15u].w;
        float _1694 = fma(_795, cbModelParam._m0[13u].z, fma(_794, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _793));
        float _1697 = fma(_795, cbModelParam._m0[14u].z, fma(_794, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _793));
        float _1700 = fma(_795, cbModelParam._m0[15u].z, fma(_794, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _793));
        float _1728;
        if (_1694 > 0.0)
        {
            _1728 = abs((1.0 - _1683) / _1694);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1694 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1683 + 1.0) / _1694);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1728 = frontier_phi_17_15_ladder;
        }
        float _1900;
        if (_1697 > 0.0)
        {
            _1900 = abs((1.0 - _1687) / _1697);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1697 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1687 + 1.0) / _1697);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1900 = frontier_phi_26_22_ladder;
        }
        float _2196;
        if (_1700 > 0.0)
        {
            _2196 = abs((1.0 - _1691) / _1700);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1700 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1691 + 1.0) / _1700);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2196 = frontier_phi_38_33_ladder;
        }
        float _2198 = isnan(_1900) ? _1728 : (isnan(_1728) ? _1900 : min(_1728, _1900));
        float _2199 = isnan(_2196) ? _2198 : (isnan(_2198) ? _2196 : min(_2198, _2196));
        float _2203 = (_2199 * _1694) + _1683;
        float _2204 = (_2199 * _1697) + _1687;
        float _2205 = (_2199 * _1700) + _1691;
        float _2206 = _2199 * 9.9999997473787516355514526367188e-05;
        float _2208 = (-1.0) - _2206;
        float _2210 = _2206 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2205 > _2210) || ((_2205 < _2208) || ((_2204 > _2210) || ((_2204 < _2208) || ((_2203 < _2208) || (_2203 > _2210))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2350 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2205, cbModelParam._m0[9u].z, fma(_2204, cbModelParam._m0[9u].y, _2203 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2205, cbModelParam._m0[10u].z, fma(_2204, cbModelParam._m0[10u].y, _2203 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2205, cbModelParam._m0[11u].z, fma(_2204, cbModelParam._m0[11u].y, _2203 * cbModelParam._m0[11u].x))), _1635);
            frontier_phi_16_38_ladder = _2350.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2350.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2350.x * cbModelParam._m0[1u].y;
        }
        _1716 = frontier_phi_16_38_ladder_2;
        _1718 = frontier_phi_16_38_ladder_1;
        _1720 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1704 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_793, _794, _795), _1635);
        _1716 = _1704.x * cbModelParam._m0[1u].y;
        _1718 = _1704.y * cbModelParam._m0[1u].y;
        _1720 = _1704.z * cbModelParam._m0[1u].y;
    }
    float _1724 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _608);
    float _1725 = isnan(_1724) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1724 : min(cbModelParam._m0[25u].w, _1724));
    float _1815;
    float _1817;
    float _1819;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1779 = fma(_857, cbModelParam._m0[21u].z, fma(_853, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _849)) + cbModelParam._m0[21u].w;
        float _1783 = fma(_857, cbModelParam._m0[22u].z, fma(_853, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _849)) + cbModelParam._m0[22u].w;
        float _1787 = fma(_857, cbModelParam._m0[23u].z, fma(_853, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _849)) + cbModelParam._m0[23u].w;
        float _1790 = fma(_795, cbModelParam._m0[21u].z, fma(_794, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _793));
        float _1793 = fma(_795, cbModelParam._m0[22u].z, fma(_794, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _793));
        float _1796 = fma(_795, cbModelParam._m0[23u].z, fma(_794, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _793));
        float _1905;
        if (_1790 > 0.0)
        {
            _1905 = abs((1.0 - _1779) / _1790);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1790 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1779 + 1.0) / _1790);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1905 = frontier_phi_28_24_ladder;
        }
        float _2223;
        if (_1793 > 0.0)
        {
            _2223 = abs((1.0 - _1783) / _1793);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1793 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1783 + 1.0) / _1793);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2223 = frontier_phi_40_35_ladder;
        }
        float _2561;
        if (_1796 > 0.0)
        {
            _2561 = abs((1.0 - _1787) / _1796);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1796 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1787 + 1.0) / _1796);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2561 = frontier_phi_50_47_ladder;
        }
        float _2563 = isnan(_2223) ? _1905 : (isnan(_1905) ? _2223 : min(_1905, _2223));
        float _2564 = isnan(_2561) ? _2563 : (isnan(_2563) ? _2561 : min(_2563, _2561));
        float _2568 = (_2564 * _1790) + _1779;
        float _2569 = (_2564 * _1793) + _1783;
        float _2570 = (_2564 * _1796) + _1787;
        float _2571 = _2564 * 9.9999997473787516355514526367188e-05;
        float _2572 = (-1.0) - _2571;
        float _2574 = _2571 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2570 > _2574) || ((_2570 < _2572) || ((_2569 > _2574) || ((_2569 < _2572) || ((_2568 < _2572) || (_2568 > _2574))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2692 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2570, cbModelParam._m0[17u].z, fma(_2569, cbModelParam._m0[17u].y, _2568 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2570, cbModelParam._m0[18u].z, fma(_2569, cbModelParam._m0[18u].y, _2568 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2570, cbModelParam._m0[19u].z, fma(_2569, cbModelParam._m0[19u].y, _2568 * cbModelParam._m0[19u].x))), _1725);
            frontier_phi_25_50_ladder = _2692.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2692.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2692.x * cbModelParam._m0[1u].z;
        }
        _1815 = frontier_phi_25_50_ladder_2;
        _1817 = frontier_phi_25_50_ladder_1;
        _1819 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1799 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_793, _794, _795), _1725);
        _1815 = _1799.x * cbModelParam._m0[1u].z;
        _1817 = _1799.y * cbModelParam._m0[1u].z;
        _1819 = _1799.z * cbModelParam._m0[1u].z;
    }
    float _1832 = (((_820 * _769) + _821) * _785) * ((cbModelParam._m0[1u].w * (_1815 - _1716)) + _1716);
    float _1834 = (((_820 * _771) + _821) * _785) * ((cbModelParam._m0[1u].w * (_1817 - _1718)) + _1718);
    float _1836 = (((_820 * _772) + _821) * _785) * ((cbModelParam._m0[1u].w * (_1819 - _1720)) + _1720);
    float _1839 = fma(_1836, cbSceneParam._m0[89u].z, fma(_1834, cbSceneParam._m0[89u].y, _1832 * cbSceneParam._m0[89u].x));
    float _1842 = fma(_1836, cbSceneParam._m0[90u].z, fma(_1834, cbSceneParam._m0[90u].y, _1832 * cbSceneParam._m0[90u].x));
    float _1845 = fma(_1836, cbSceneParam._m0[91u].z, fma(_1834, cbSceneParam._m0[91u].y, _1832 * cbSceneParam._m0[91u].x));
    float _1879 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1883 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1887 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1891 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1892 = _1879 / _1891;
    float _1893 = _1883 / _1891;
    float _1894 = _1887 / _1891;
    float _2041;
    float _2042;
    float _2043;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1921 = ((uint(_1894 > cbSceneParam._m0[59u].y) + uint(_1894 > cbSceneParam._m0[59u].x)) + uint(_1894 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1922 = _1921 + 43u;
        uint _1930 = _1921 + 44u;
        uint _1938 = _1921 + 45u;
        uint _1946 = _1921 + 46u;
        float _1957 = fma(_1891, cbSceneParam._m0[_1922].w, fma(_1887, cbSceneParam._m0[_1922].z, fma(_1883, cbSceneParam._m0[_1922].y, _1879 * cbSceneParam._m0[_1922].x)));
        float _1961 = fma(_1891, cbSceneParam._m0[_1930].w, fma(_1887, cbSceneParam._m0[_1930].z, fma(_1883, cbSceneParam._m0[_1930].y, _1879 * cbSceneParam._m0[_1930].x)));
        float _1969 = fma(_1891, cbSceneParam._m0[_1946].w, fma(_1887, cbSceneParam._m0[_1946].z, fma(_1883, cbSceneParam._m0[_1946].y, _1879 * cbSceneParam._m0[_1946].x)));
        float _1974 = cbSceneParam._m0[33u].z * _1969;
        float _1976 = cbSceneParam._m0[33u].w * _1969;
        float _1979 = fma(_1891, cbSceneParam._m0[_1938].w, fma(_1887, cbSceneParam._m0[_1938].z, fma(_1883, cbSceneParam._m0[_1938].y, _1879 * cbSceneParam._m0[_1938].x))) / _1969;
        float _2027 = (cbSceneParam._m0[33u].x - sqrt(((_1893 * _1893) + (_1892 * _1892)) + (_1894 * _1894))) * cbSceneParam._m0[33u].y;
        float _4420 = isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0));
        float _2034 = (isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1974 + _1957) / _1969, (_1976 + _1961) / _1969), _1979), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1976 + _1957) / _1969, (_1961 - _1974) / _1969), _1979), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1957 - _1974) / _1969, (_1961 - _1976) / _1969), _1979), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1957 - _1976) / _1969, (_1974 + _1961) / _1969), _1979), 0.0)).x), vec4(0.25)));
        _2041 = 1.0 - (_2034 * cbSceneParam._m0[34u].x);
        _2042 = 1.0 - (_2034 * cbSceneParam._m0[34u].y);
        _2043 = 1.0 - (_2034 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2041 = 1.0;
        _2042 = 1.0;
        _2043 = 1.0;
    }
    float _2107;
    float _2109;
    float _2111;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2095 = fma(_1891, cbSceneParam._m0[63u].w, fma(_1887, cbSceneParam._m0[63u].z, fma(_1883, cbSceneParam._m0[63u].y, _1879 * cbSceneParam._m0[63u].x)));
        float _2096 = fma(_1891, cbSceneParam._m0[60u].w, fma(_1887, cbSceneParam._m0[60u].z, fma(_1883, cbSceneParam._m0[60u].y, _1879 * cbSceneParam._m0[60u].x))) / _2095;
        float _2097 = fma(_1891, cbSceneParam._m0[61u].w, fma(_1887, cbSceneParam._m0[61u].z, fma(_1883, cbSceneParam._m0[61u].y, _1879 * cbSceneParam._m0[61u].x))) / _2095;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2096 >= cbSceneParam._m0[64u].x) && (_2097 >= cbSceneParam._m0[64u].y)) && (_2096 <= cbSceneParam._m0[64u].z)) && (_2097 <= cbSceneParam._m0[64u].w))
        {
            float _2236 = fma(_1891, cbSceneParam._m0[62u].w, fma(_1887, cbSceneParam._m0[62u].z, fma(_1883, cbSceneParam._m0[62u].y, _1879 * cbSceneParam._m0[62u].x))) / _2095;
            float _2240 = isnan(cbSceneParam._m0[41u].w) ? _2236 : (isnan(_2236) ? cbSceneParam._m0[41u].w : max(_2236, cbSceneParam._m0[41u].w));
            float _2283 = (cbSceneParam._m0[33u].x - sqrt(((_1893 * _1893) + (_1892 * _1892)) + (_1894 * _1894))) * cbSceneParam._m0[33u].y;
            float _4436 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0));
            float _2290 = (isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2096, cbSceneParam._m0[33u].w + _2097), _2240), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2096, _2097 - cbSceneParam._m0[33u].z), _2240), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2096 - cbSceneParam._m0[33u].z, _2097 - cbSceneParam._m0[33u].w), _2240), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2096 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2097), _2240), 0.0)).x), vec4(0.25)));
            float _2294 = 1.0 - (_2290 * cbSceneParam._m0[34u].x);
            float _2295 = 1.0 - (_2290 * cbSceneParam._m0[34u].y);
            float _2296 = 1.0 - (_2290 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2296) ? _2043 : (isnan(_2043) ? _2296 : min(_2043, _2296));
            frontier_phi_37_36_ladder_1 = isnan(_2295) ? _2042 : (isnan(_2042) ? _2295 : min(_2042, _2295));
            frontier_phi_37_36_ladder_2 = isnan(_2294) ? _2041 : (isnan(_2041) ? _2294 : min(_2041, _2294));
        }
        else
        {
            frontier_phi_37_36_ladder = _2043;
            frontier_phi_37_36_ladder_1 = _2042;
            frontier_phi_37_36_ladder_2 = _2041;
        }
        _2107 = frontier_phi_37_36_ladder_2;
        _2109 = frontier_phi_37_36_ladder_1;
        _2111 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2107 = _2041;
        _2109 = _2042;
        _2111 = _2043;
    }
    uvec4 _2116 = floatBitsToUint(cbInstanceData._m0[_249 + 5u]);
    uint _2118 = _2116.x * 14u;
    uint _2119 = _2118 + 13u;
    float _2126 = _785 + (-1.0);
    float _2131 = (cbLight._m0[_2119].x * _2126) + 1.0;
    float _2132 = (cbLight._m0[_2119].y * _2126) + 1.0;
    float _2133 = (cbLight._m0[_2119].z * _2126) + 1.0;
    float _2134 = (cbLight._m0[_2119].w * _2126) + 1.0;
    uint _2135 = _2118 + 5u;
    float _2141 = isnan(1.0) ? _2132 : (isnan(_2132) ? 1.0 : min(_2132, 1.0));
    uint _2145 = _2118 + 4u;
    float _2155 = isnan(1.0) ? _2131 : (isnan(_2131) ? 1.0 : min(_2131, 1.0));
    uint _2159 = _2118 | 1u;
    float _2170 = dot(vec3(cbLight._m0[_2118].xyz), vec3(_605, _606, _607));
    float _2173 = dot(vec3(cbLight._m0[_2159].xyz), vec3(_605, _606, _607));
    float _4472 = isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0));
    float _4483 = isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0));
    float _2178 = (isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0))) * 0.3183098733425140380859375;
    float _2180 = (isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0))) * 0.3183098733425140380859375;
    float _2187 = ((cbLight._m0[_2135].x * _2141) * _2180) + (((cbLight._m0[_2145].x * _2107) * _2155) * _2178);
    float _2188 = ((_2141 * cbLight._m0[_2135].y) * _2180) + (((cbLight._m0[_2145].y * _2109) * _2155) * _2178);
    float _2189 = ((_2141 * cbLight._m0[_2135].z) * _2180) + (((cbLight._m0[_2145].z * _2111) * _2155) * _2178);
    uvec4 _2193 = floatBitsToUint(cbLight._m0[_2118 + 12u]);
    bool _2195 = _2193.x == 0u;
    float _2297;
    float _2299;
    float _2301;
    if (_2195)
    {
        _2297 = _2187;
        _2299 = _2188;
        _2301 = _2189;
    }
    else
    {
        uint _2305 = _2118 + 6u;
        float _2321 = (dot(vec3(cbLight._m0[_2118 + 2u].xyz), vec3(_605, _606, _607)) * 0.5) + 0.5;
        float _2322 = _2321 * _2321;
        float _4494 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
        float _2323 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
        float _2324 = isnan(1.0) ? _2133 : (isnan(_2133) ? 1.0 : min(_2133, 1.0));
        _2297 = (((cbLight._m0[_2305].x * 0.3183098733425140380859375) * _2323) * _2324) + _2187;
        _2299 = (((cbLight._m0[_2305].y * 0.3183098733425140380859375) * _2323) * _2324) + _2188;
        _2301 = (((cbLight._m0[_2305].z * 0.3183098733425140380859375) * _2323) * _2324) + _2189;
    }
    bool _2304 = _2193.y == 0u;
    float _2359;
    float _2361;
    float _2363;
    if (_2304)
    {
        _2359 = _2297;
        _2361 = _2299;
        _2363 = _2301;
    }
    else
    {
        uint _2532 = _2118 + 7u;
        float _2548 = (dot(vec3(cbLight._m0[_2118 + 3u].xyz), vec3(_605, _606, _607)) * 0.5) + 0.5;
        float _2549 = _2548 * _2548;
        float _4510 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0));
        float _2550 = isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0));
        float _2551 = isnan(1.0) ? _2134 : (isnan(_2134) ? 1.0 : min(_2134, 1.0));
        _2359 = (((cbLight._m0[_2532].x * 0.3183098733425140380859375) * _2550) * _2551) + _2297;
        _2361 = (((cbLight._m0[_2532].y * 0.3183098733425140380859375) * _2550) * _2551) + _2299;
        _2363 = (((cbLight._m0[_2532].z * 0.3183098733425140380859375) * _2550) * _2551) + _2301;
    }
    uint _2366 = _2118 + 8u;
    float _2379 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2118].w)) * _608) * 0.949999988079071044921875);
    float _2380 = _2379 * _2379;
    float _2381 = cbLight._m0[_2118].x + _684;
    float _2382 = cbLight._m0[_2118].y + _685;
    float _2383 = cbLight._m0[_2118].z + _686;
    float _2387 = inversesqrt(dot(vec3(_2381, _2382, _2383), vec3(_2381, _2382, _2383)));
    float _2388 = _2387 * _2381;
    float _2389 = _2387 * _2382;
    float _2390 = _2387 * _2383;
    float _2391 = dot(vec3(_605, _606, _607), vec3(cbLight._m0[_2118].xyz));
    float _4526 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
    float _2394 = isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0));
    float _4537 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _2395 = isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0));
    float _2396 = dot(vec3(_605, _606, _607), vec3(_2388, _2389, _2390));
    float _4548 = isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0));
    float _2399 = isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0));
    float _2400 = dot(vec3(cbLight._m0[_2118].xyz), vec3(_2388, _2389, _2390));
    float _4559 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
    float _2404 = _2380 * _2380;
    float _2408 = ((_2399 * _2399) * (_2404 + (-1.0))) + 1.0;
    float _2416 = exp2(log2(1.0 - (isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0)))) * 5.0);
    float _2417 = 0.959999978542327880859375 - _766;
    float _2419 = 0.959999978542327880859375 - _767;
    float _2420 = 0.959999978542327880859375 - _768;
    float _2427 = 1.0 - _2380;
    float _2438 = (0.5 / (((_2395 * ((_2394 * _2427) + _2380)) + 9.9999999392252902907785028219223e-09) + (((_2395 * _2427) + _2380) * _2394))) * _2394;
    float _4570 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
    float _2440 = (isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0))) * (_2404 / ((_2408 * _2408) * 3.141590118408203125));
    uint _2454 = _2118 + 9u;
    float _2465 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2159].w)) * _608) * 0.949999988079071044921875);
    float _2466 = _2465 * _2465;
    float _2467 = cbLight._m0[_2159].x + _684;
    float _2468 = cbLight._m0[_2159].y + _685;
    float _2469 = cbLight._m0[_2159].z + _686;
    float _2473 = inversesqrt(dot(vec3(_2467, _2468, _2469), vec3(_2467, _2468, _2469)));
    float _2474 = _2473 * _2467;
    float _2475 = _2473 * _2468;
    float _2476 = _2473 * _2469;
    float _2477 = dot(vec3(_605, _606, _607), vec3(cbLight._m0[_2159].xyz));
    float _4581 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
    float _2480 = isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0));
    float _2481 = dot(vec3(_605, _606, _607), vec3(_2474, _2475, _2476));
    float _4592 = isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0));
    float _2484 = isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0));
    float _2485 = dot(vec3(cbLight._m0[_2159].xyz), vec3(_2474, _2475, _2476));
    float _4603 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
    float _2489 = _2466 * _2466;
    float _2493 = ((_2484 * _2484) * (_2489 + (-1.0))) + 1.0;
    float _2500 = exp2(log2(1.0 - (isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0)))) * 5.0);
    float _2507 = 1.0 - _2466;
    float _2517 = (0.5 / (((_2395 * ((_2480 * _2507) + _2466)) + 9.9999999392252902907785028219223e-09) + (((_2395 * _2507) + _2466) * _2480))) * _2480;
    float _4614 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0));
    float _2519 = (isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0))) * (_2489 / ((_2493 * _2493) * 3.141590118408203125));
    float _2529 = (((((_2500 * _2417) + _769) * cbLight._m0[_2454].x) * _2519) * _2141) + ((((cbLight._m0[_2366].x * _2107) * ((_2416 * _2417) + _769)) * _2440) * _2155);
    float _2530 = (((((_2500 * _2419) + _771) * cbLight._m0[_2454].y) * _2519) * _2141) + ((((cbLight._m0[_2366].y * _2109) * ((_2416 * _2419) + _771)) * _2440) * _2155);
    float _2531 = (((((_2500 * _2420) + _772) * cbLight._m0[_2454].z) * _2519) * _2141) + ((((cbLight._m0[_2366].z * _2111) * ((_2416 * _2420) + _772)) * _2440) * _2155);
    float _2587;
    float _2589;
    float _2591;
    if (_2195)
    {
        _2587 = _2529;
        _2589 = _2530;
        _2591 = _2531;
    }
    else
    {
        uint _2593 = _2118 + 2u;
        uint _2597 = _2118 + 10u;
        float _2611 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2593].w)) * _608) * 0.949999988079071044921875);
        float _2612 = _2611 * _2611;
        float _2613 = cbLight._m0[_2593].x + _684;
        float _2614 = cbLight._m0[_2593].y + _685;
        float _2615 = cbLight._m0[_2593].z + _686;
        float _2619 = inversesqrt(dot(vec3(_2613, _2614, _2615), vec3(_2613, _2614, _2615)));
        float _2620 = _2619 * _2613;
        float _2621 = _2619 * _2614;
        float _2622 = _2619 * _2615;
        float _2623 = dot(vec3(_605, _606, _607), vec3(cbLight._m0[_2593].xyz));
        float _4625 = isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0));
        float _2626 = isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0));
        float _2627 = dot(vec3(_605, _606, _607), vec3(_2620, _2621, _2622));
        float _4636 = isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : max(_2627, 0.0));
        float _2630 = isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0));
        float _2631 = dot(vec3(cbLight._m0[_2593].xyz), vec3(_2620, _2621, _2622));
        float _4647 = isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : max(_2631, 0.0));
        float _2635 = _2612 * _2612;
        float _2639 = ((_2630 * _2630) * (_2635 + (-1.0))) + 1.0;
        float _2646 = exp2(log2(1.0 - (isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0)))) * 5.0);
        float _2653 = 1.0 - _2612;
        float _2663 = (0.5 / (((_2395 * ((_2626 * _2653) + _2612)) + 9.9999999392252902907785028219223e-09) + (((_2395 * _2653) + _2612) * _2626))) * _2626;
        float _4658 = isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : max(_2663, 0.0));
        float _2665 = (isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0))) * (_2635 / ((_2639 * _2639) * 3.141590118408203125));
        float _2666 = isnan(1.0) ? _2133 : (isnan(_2133) ? 1.0 : min(_2133, 1.0));
        _2587 = (((((_2646 * _2417) + _769) * cbLight._m0[_2597].x) * _2665) * _2666) + _2529;
        _2589 = (((((_2646 * _2419) + _771) * cbLight._m0[_2597].y) * _2665) * _2666) + _2530;
        _2591 = (((((_2646 * _2420) + _772) * cbLight._m0[_2597].z) * _2665) * _2666) + _2531;
    }
    float _2697;
    float _2699;
    float _2701;
    if (_2304)
    {
        _2697 = _2587;
        _2699 = _2589;
        _2701 = _2591;
    }
    else
    {
        uint _2708 = _2118 + 3u;
        uint _2712 = _2118 + 11u;
        float _2726 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2708].w)) * _608) * 0.949999988079071044921875);
        float _2727 = _2726 * _2726;
        float _2728 = cbLight._m0[_2708].x + _684;
        float _2729 = cbLight._m0[_2708].y + _685;
        float _2730 = cbLight._m0[_2708].z + _686;
        float _2734 = inversesqrt(dot(vec3(_2728, _2729, _2730), vec3(_2728, _2729, _2730)));
        float _2735 = _2734 * _2728;
        float _2736 = _2734 * _2729;
        float _2737 = _2734 * _2730;
        float _2738 = dot(vec3(_605, _606, _607), vec3(cbLight._m0[_2708].xyz));
        float _4674 = isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : max(_2738, 0.0));
        float _2741 = isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0));
        float _2742 = dot(vec3(_605, _606, _607), vec3(_2735, _2736, _2737));
        float _4685 = isnan(0.0) ? _2742 : (isnan(_2742) ? 0.0 : max(_2742, 0.0));
        float _2745 = isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0));
        float _2746 = dot(vec3(cbLight._m0[_2708].xyz), vec3(_2735, _2736, _2737));
        float _4696 = isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : max(_2746, 0.0));
        float _2750 = _2727 * _2727;
        float _2754 = ((_2745 * _2745) * (_2750 + (-1.0))) + 1.0;
        float _2761 = exp2(log2(1.0 - (isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0)))) * 5.0);
        float _2768 = 1.0 - _2727;
        float _2778 = (0.5 / (((_2395 * ((_2741 * _2768) + _2727)) + 9.9999999392252902907785028219223e-09) + (((_2395 * _2768) + _2727) * _2741))) * _2741;
        float _4707 = isnan(0.0) ? _2778 : (isnan(_2778) ? 0.0 : max(_2778, 0.0));
        float _2780 = (isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0))) * (_2750 / ((_2754 * _2754) * 3.141590118408203125));
        float _2781 = isnan(1.0) ? _2134 : (isnan(_2134) ? 1.0 : min(_2134, 1.0));
        _2697 = (((((_2761 * _2417) + _769) * cbLight._m0[_2712].x) * _2780) * _2781) + _2587;
        _2699 = (((((_2761 * _2419) + _771) * cbLight._m0[_2712].y) * _2780) * _2781) + _2589;
        _2701 = (((((_2761 * _2420) + _772) * cbLight._m0[_2712].z) * _2780) * _2781) + _2591;
    }
    float _2847;
    float _2849;
    float _2851;
    float _2853;
    float _2855;
    float _2857;
    if (_2116.y == 0u)
    {
        uvec4 _2802 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2803 = _2802.x;
        uint _2814 = uint((float(_2802.y) * floor(float(uint(cbSceneParam._m0[85u].y * _706) / _2803))) + floor(float(uint(cbSceneParam._m0[85u].x * _705) / _2803)));
        float _2824 = (log2(_1894 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2825 = isnan(0.0) ? _2824 : (isnan(_2824) ? 0.0 : max(_2824, 0.0));
        uint _2828 = uint(isnan(14.0) ? _2825 : (isnan(_2825) ? 14.0 : min(_2825, 14.0)));
        uvec4 _2833 = texelFetch(g_lightClusterGridBuffer, int(((_2828 << 2u) + (_2814 << 6u)) >> 2u));
        uint _2834 = _2833.x;
        uint _2835 = _2802.z;
        float _2914;
        float _2916;
        float _2918;
        float _2920;
        float _2922;
        float _2924;
        if (((((1u << ((_2835 >> 4u) & 15u)) + 4294967295u) & _2834) == 0u) || ((_2835 & 240u) == 0u))
        {
            _2914 = 0.0;
            _2916 = 0.0;
            _2918 = 0.0;
            _2920 = 0.0;
            _2922 = 0.0;
            _2924 = 0.0;
        }
        else
        {
            float _2915;
            float _2917;
            float _2919;
            float _2921;
            float _2923;
            float _2925;
            float _3067 = 0.0;
            float _3068 = 0.0;
            float _3069 = 0.0;
            float _3070 = 0.0;
            float _3071 = 0.0;
            float _3072 = 0.0;
            uint _3073 = 0u;
            uint _3082;
            bool _3083;
            for (;;)
            {
                _3082 = texelFetch(g_lightClassification, int((((_2828 << 5u) + (_2814 << 9u)) + (_3073 << 2u)) >> 2u)).x;
                _3083 = _3082 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3083)
                {
                    frontier_phi_71_pred = _3072;
                    frontier_phi_71_pred_1 = _3071;
                    frontier_phi_71_pred_2 = _3070;
                    frontier_phi_71_pred_3 = _3069;
                    frontier_phi_71_pred_4 = _3068;
                    frontier_phi_71_pred_5 = _3067;
                }
                else
                {
                    float _3212;
                    float _3213;
                    float _3214;
                    float _3215;
                    float _3216;
                    float _3217;
                    uint _3218;
                    _3212 = _3067;
                    _3213 = _3068;
                    _3214 = _3069;
                    _3215 = _3070;
                    _3216 = _3071;
                    _3217 = _3072;
                    _3218 = _3082;
                    float _3139;
                    float _3140;
                    float _3141;
                    float _3142;
                    float _3143;
                    float _3144;
                    for (;;)
                    {
                        uint _3222 = uint(findLSB(_3218)) + (_3073 << 5u);
                        uint _3219 = (_3218 + 4294967295u) & _3218;
                        uint _3224 = _3222 * 48u;
                        vec4 _3238 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3224)).x, texelFetch(g_PointLightRenderingBuffer, int(_3224 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3224 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3224 + 3u)).x));
                        uint _3244 = (_3222 * 48u) + 4u;
                        vec4 _3257 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3244)).x, texelFetch(g_PointLightRenderingBuffer, int(_3244 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3244 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3244 + 3u)).x));
                        uint _3263 = (_3222 * 48u) + 8u;
                        vec3 _3274 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3263)).x, texelFetch(g_PointLightRenderingBuffer, int(_3263 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3263 + 2u)).x));
                        float _3278 = _3238.x - _1892;
                        float _3279 = _3238.y - _1893;
                        float _3280 = _3238.z - _1894;
                        float _3281 = dot(vec3(_3278, _3279, _3280), vec3(_3278, _3279, _3280));
                        float _3284 = inversesqrt(_3281);
                        float _3285 = _3284 * _3278;
                        float _3286 = _3284 * _3279;
                        float _3287 = _3284 * _3280;
                        float _3288 = dot(vec3(_726, _729, _732), vec3(_3285, _3286, _3287));
                        float _3293 = 1.0 - (_3281 * _3238.w);
                        float _4733 = isnan(0.0) ? _3293 : (isnan(_3293) ? 0.0 : max(_3293, 0.0));
                        float _3294 = isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0));
                        float _3295 = sqrt(_3281) * _3257.w;
                        float _3298 = 1.39999997615814208984375 / (_3295 + 1.39999997615814208984375);
                        float _3299 = _3298 * _3298;
                        float _3302 = ((1.0 - _3299) * _3288) + _3299;
                        float _3305 = _3295 * _3295;
                        float _3309 = ((isnan(0.0) ? _3302 : (isnan(_3302) ? 0.0 : max(_3302, 0.0))) * _3294) / ((_3305 * 0.699999988079071044921875) + 1.0);
                        float _3313 = (-0.0) - _1892;
                        float _3314 = (-0.0) - _1893;
                        float _3315 = (-0.0) - _1894;
                        float _3319 = inversesqrt(dot(vec3(_3313, _3314, _3315), vec3(_3313, _3314, _3315)));
                        float _3320 = _3319 * _3313;
                        float _3321 = _3319 * _3314;
                        float _3322 = _3319 * _3315;
                        float _3329 = exp2(log2(1.0 / ((_3305 * 3.5) + 5.0)) * 0.25);
                        float _3330 = 1.0 - _801;
                        float _3337 = sqrt(1.0 - ((1.0 - (_3330 * _3330)) * (1.0 - (_3329 * _3329))));
                        float _3338 = _3337 * _3337;
                        float _3339 = _3338 * _3338;
                        float _3340 = _3320 + _3285;
                        float _3341 = _3321 + _3286;
                        float _3342 = _3322 + _3287;
                        float _3346 = inversesqrt(dot(vec3(_3340, _3341, _3342), vec3(_3340, _3341, _3342)));
                        float _3350 = dot(vec3(_726, _729, _732), vec3(_3320, _3321, _3322));
                        float _4749 = isnan(0.0) ? _3350 : (isnan(_3350) ? 0.0 : max(_3350, 0.0));
                        float _3353 = isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0));
                        float _3354 = dot(vec3(_726, _729, _732), vec3(_3346 * _3340, _3346 * _3341, _3346 * _3342));
                        float _4760 = isnan(0.0) ? _3354 : (isnan(_3354) ? 0.0 : max(_3354, 0.0));
                        float _3357 = isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0));
                        float _3361 = ((_3357 * _3357) * (_3339 + (-1.0))) + 1.0;
                        float _3362 = _3298 * _3338;
                        float _3363 = _3362 * _3362;
                        float _3366 = ((1.0 - _3363) * _3288) + _3363;
                        float _4771 = isnan(0.0) ? _3366 : (isnan(_3366) ? 0.0 : max(_3366, 0.0));
                        float _3367 = isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0));
                        float _3368 = 1.0 - _3338;
                        float _3378 = (0.5 / (((_3367 * ((_3353 * _3368) + _3338)) + 9.9999999392252902907785028219223e-09) + (((_3367 * _3368) + _3338) * _3353))) * _3367;
                        float _4782 = isnan(0.0) ? _3378 : (isnan(_3378) ? 0.0 : max(_3378, 0.0));
                        float _3389 = (((_3339 * 3.1415927410125732421875) * (isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0)))) / ((_3361 * _3361) * ((_3305 * 2.1991131305694580078125) + 3.141590118408203125))) * _3294;
                        _3142 = (_3309 * _3257.x) + _3215;
                        _3143 = (_3309 * _3257.y) + _3216;
                        _3144 = (_3309 * _3257.z) + _3217;
                        _3139 = (_3389 * _3274.x) + _3212;
                        _3140 = (_3389 * _3274.y) + _3213;
                        _3141 = (_3389 * _3274.z) + _3214;
                        if (_3219 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3212 = _3139;
                            _3213 = _3140;
                            _3214 = _3141;
                            _3215 = _3142;
                            _3216 = _3143;
                            _3217 = _3144;
                            _3218 = _3219;
                        }
                    }
                    frontier_phi_71_pred = _3144;
                    frontier_phi_71_pred_1 = _3143;
                    frontier_phi_71_pred_2 = _3142;
                    frontier_phi_71_pred_3 = _3141;
                    frontier_phi_71_pred_4 = _3140;
                    frontier_phi_71_pred_5 = _3139;
                }
                _2925 = frontier_phi_71_pred;
                _2923 = frontier_phi_71_pred_1;
                _2921 = frontier_phi_71_pred_2;
                _2919 = frontier_phi_71_pred_3;
                _2917 = frontier_phi_71_pred_4;
                _2915 = frontier_phi_71_pred_5;
                uint _3074 = _3073 + 1u;
                if (_3074 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3067 = _2915;
                    _3068 = _2917;
                    _3069 = _2919;
                    _3070 = _2921;
                    _3071 = _2923;
                    _3072 = _2925;
                    _3073 = _3074;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2914 = _2915;
            _2916 = _2917;
            _2918 = _2919;
            _2920 = _2921;
            _2922 = _2923;
            _2924 = _2925;
        }
        uvec4 _2928 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2929 = _2928.z;
        uint _2931 = (_2929 >> 8u) & 15u;
        float _3035;
        float _3037;
        float _3039;
        float _3041;
        float _3043;
        float _3045;
        if (((4294967295u << _2931) & _2834) == 0u)
        {
            _3035 = _2914;
            _3037 = _2916;
            _3039 = _2918;
            _3041 = _2920;
            _3043 = _2922;
            _3045 = _2924;
        }
        else
        {
            float _3060 = inversesqrt(dot(vec3(_1892, _1893, _1894), vec3(_1892, _1893, _1894)));
            float _3061 = _3060 * _1892;
            float _3062 = _3060 * _1893;
            float _3063 = _3060 * _1894;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2931 < ((_2929 >> 12u) & 15u))
            {
                float _3036;
                float _3038;
                float _3040;
                float _3042;
                float _3044;
                float _3046;
                float _3195 = _2914;
                float _3196 = _2916;
                float _3197 = _2918;
                float _3198 = _2920;
                float _3199 = _2922;
                float _3200 = _2924;
                uint _3201 = _2931;
                uint _3210;
                bool _3211;
                for (;;)
                {
                    _3210 = texelFetch(g_lightClassification, int((((_2828 << 5u) + (_2814 << 9u)) + (_3201 << 2u)) >> 2u)).x;
                    _3211 = _3210 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3211)
                    {
                        frontier_phi_82_pred = _3200;
                        frontier_phi_82_pred_1 = _3199;
                        frontier_phi_82_pred_2 = _3198;
                        frontier_phi_82_pred_3 = _3197;
                        frontier_phi_82_pred_4 = _3196;
                        frontier_phi_82_pred_5 = _3195;
                    }
                    else
                    {
                        float _3403;
                        float _3404;
                        float _3405;
                        float _3406;
                        float _3407;
                        float _3408;
                        float _3697;
                        float _3698;
                        float _3699;
                        float _3700;
                        float _3701;
                        float _3702;
                        float _3416 = _3195;
                        float _3417 = _3196;
                        float _3418 = _3197;
                        float _3419 = _3198;
                        float _3420 = _3199;
                        float _3421 = _3200;
                        uint _3422 = _3210;
                        uint _3423;
                        vec4 _3448;
                        float _3449;
                        vec4 _3464;
                        vec3 _3476;
                        vec4 _3492;
                        vec4 _3507;
                        float _3553;
                        bool _3554;
                        for (;;)
                        {
                            uint _3433 = ((_3201 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3422));
                            _3423 = (_3422 + 4294967295u) & _3422;
                            uint _3435 = _3433 * 40u;
                            _3448 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3435)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 3u)).x));
                            _3449 = _3448.w;
                            uint _3451 = (_3433 * 40u) + 4u;
                            _3464 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3451)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3451 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3451 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3451 + 3u)).x));
                            uint _3466 = (_3433 * 40u) + 8u;
                            _3476 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3466)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3466 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3466 + 2u)).x));
                            uint _3479 = (_3433 * 40u) + 16u;
                            _3492 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3479)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 3u)).x));
                            uint _3494 = (_3433 * 40u) + 20u;
                            _3507 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3494)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 3u)).x));
                            uint _3509 = (_3433 * 40u) + 24u;
                            vec4 _3522 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3509)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 3u)).x));
                            uint _3528 = (_3433 * 40u) + 28u;
                            vec4 _3541 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3528)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3528 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3528 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3528 + 3u)).x));
                            _3553 = fma(_1894, _3541.z, fma(_1893, _3541.y, _3541.x * _1892)) + _3541.w;
                            _3554 = !((fma(_1894, _3522.z, fma(_1893, _3522.y, _3522.x * _1892)) + _3522.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3554)
                            {
                                float _3581 = _3448.x - _1892;
                                float _3582 = _3448.y - _1893;
                                float _3583 = _3448.z - _1894;
                                float _3584 = dot(vec3(_3581, _3582, _3583), vec3(_3581, _3582, _3583));
                                float _3587 = inversesqrt(_3584);
                                float _3588 = _3587 * _3581;
                                float _3589 = _3587 * _3582;
                                float _3590 = _3587 * _3583;
                                float _3594 = 1.0 - (_3584 / (_3449 * _3449));
                                float _4793 = isnan(0.0) ? _3594 : (isnan(_3594) ? 0.0 : max(_3594, 0.0));
                                float _3595 = isnan(1.0) ? _4793 : (isnan(_4793) ? 1.0 : min(_4793, 1.0));
                                float _3599 = sqrt(_3584) * _3464.w;
                                float _3601 = 1.39999997615814208984375 / (_3599 + 1.39999997615814208984375);
                                float _3602 = _3601 * _3601;
                                float _3605 = ((1.0 - _3602) * dot(vec3(_3588, _3589, _3590), vec3(_726, _729, _732))) + _3602;
                                float _3608 = _3599 * _3599;
                                float _3612 = (fma(_1894, _3492.z, fma(_1893, _3492.y, _3492.x * _1892)) + _3492.w) / _3553;
                                float _3613 = (fma(_1894, _3507.z, fma(_1893, _3507.y, _3507.x * _1892)) + _3507.w) / _3553;
                                float _3617 = 1.0 - dot(vec2(_3612, _3613), vec2(_3612, _3613));
                                float _4809 = isnan(0.0) ? _3617 : (isnan(_3617) ? 0.0 : max(_3617, 0.0));
                                float _3618 = isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0));
                                float _3619 = _3618 * (((isnan(0.0) ? _3605 : (isnan(_3605) ? 0.0 : max(_3605, 0.0))) * _3595) / ((_3608 * 0.699999988079071044921875) + 1.0));
                                float _3631 = exp2(log2(1.0 / ((_3608 * 3.5) + 5.0)) * 0.25);
                                float _3632 = 1.0 - _801;
                                float _3639 = sqrt(1.0 - ((1.0 - (_3632 * _3632)) * (1.0 - (_3631 * _3631))));
                                float _3640 = _3639 * _3639;
                                float _3641 = _3640 * _3640;
                                float _3642 = _3588 - _3061;
                                float _3643 = _3589 - _3062;
                                float _3644 = _3590 - _3063;
                                float _3648 = inversesqrt(dot(vec3(_3642, _3643, _3644), vec3(_3642, _3643, _3644)));
                                float _3652 = dot(vec3(_726, _729, _732), vec3((-0.0) - _3061, (-0.0) - _3062, (-0.0) - _3063));
                                float _4820 = isnan(0.0) ? _3652 : (isnan(_3652) ? 0.0 : max(_3652, 0.0));
                                float _3655 = isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0));
                                float _3656 = dot(vec3(_726, _729, _732), vec3(_3648 * _3642, _3648 * _3643, _3648 * _3644));
                                float _4831 = isnan(0.0) ? _3656 : (isnan(_3656) ? 0.0 : max(_3656, 0.0));
                                float _3659 = isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0));
                                float _3663 = ((_3659 * _3659) * (_3641 + (-1.0))) + 1.0;
                                float _3664 = _3601 * _3640;
                                float _3665 = _3664 * _3664;
                                float _3671 = ((1.0 - _3665) * dot(vec3(_726, _729, _732), vec3(_3588, _3589, _3590))) + _3665;
                                float _4842 = isnan(0.0) ? _3671 : (isnan(_3671) ? 0.0 : max(_3671, 0.0));
                                float _3672 = isnan(1.0) ? _4842 : (isnan(_4842) ? 1.0 : min(_4842, 1.0));
                                float _3673 = 1.0 - _3640;
                                float _3683 = (0.5 / (((_3672 * ((_3655 * _3673) + _3640)) + 9.9999999392252902907785028219223e-09) + (((_3672 * _3673) + _3640) * _3655))) * _3672;
                                float _4853 = isnan(0.0) ? _3683 : (isnan(_3683) ? 0.0 : max(_3683, 0.0));
                                float _3693 = (_3618 * _3595) * (((_3641 * 3.1415927410125732421875) * (isnan(1.0) ? _4853 : (isnan(_4853) ? 1.0 : min(_4853, 1.0)))) / ((_3663 * _3663) * ((_3608 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3619 * _3464.z;
                                frontier_phi_88_pred_1 = _3619 * _3464.y;
                                frontier_phi_88_pred_2 = _3619 * _3464.x;
                                frontier_phi_88_pred_3 = _3693 * _3476.z;
                                frontier_phi_88_pred_4 = _3693 * _3476.y;
                                frontier_phi_88_pred_5 = _3693 * _3476.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3702 = frontier_phi_88_pred;
                            _3701 = frontier_phi_88_pred_1;
                            _3700 = frontier_phi_88_pred_2;
                            _3699 = frontier_phi_88_pred_3;
                            _3698 = frontier_phi_88_pred_4;
                            _3697 = frontier_phi_88_pred_5;
                            _3406 = _3700 + _3419;
                            _3407 = _3701 + _3420;
                            _3408 = _3702 + _3421;
                            _3403 = _3697 + _3416;
                            _3404 = _3698 + _3417;
                            _3405 = _3699 + _3418;
                            if (_3423 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3416 = _3403;
                                _3417 = _3404;
                                _3418 = _3405;
                                _3419 = _3406;
                                _3420 = _3407;
                                _3421 = _3408;
                                _3422 = _3423;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3408;
                        frontier_phi_82_pred_1 = _3407;
                        frontier_phi_82_pred_2 = _3406;
                        frontier_phi_82_pred_3 = _3405;
                        frontier_phi_82_pred_4 = _3404;
                        frontier_phi_82_pred_5 = _3403;
                    }
                    _3046 = frontier_phi_82_pred;
                    _3044 = frontier_phi_82_pred_1;
                    _3042 = frontier_phi_82_pred_2;
                    _3040 = frontier_phi_82_pred_3;
                    _3038 = frontier_phi_82_pred_4;
                    _3036 = frontier_phi_82_pred_5;
                    uint _3202 = _3201 + 1u;
                    if (_3202 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3195 = _3036;
                        _3196 = _3038;
                        _3197 = _3040;
                        _3198 = _3042;
                        _3199 = _3044;
                        _3200 = _3046;
                        _3201 = _3202;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3042;
                frontier_phi_63_64_ladder_1 = _3046;
                frontier_phi_63_64_ladder_2 = _3044;
                frontier_phi_63_64_ladder_3 = _3040;
                frontier_phi_63_64_ladder_4 = _3038;
                frontier_phi_63_64_ladder_5 = _3036;
            }
            else
            {
                frontier_phi_63_64_ladder = _2920;
                frontier_phi_63_64_ladder_1 = _2924;
                frontier_phi_63_64_ladder_2 = _2922;
                frontier_phi_63_64_ladder_3 = _2918;
                frontier_phi_63_64_ladder_4 = _2916;
                frontier_phi_63_64_ladder_5 = _2914;
            }
            _3035 = frontier_phi_63_64_ladder_5;
            _3037 = frontier_phi_63_64_ladder_4;
            _3039 = frontier_phi_63_64_ladder_3;
            _3041 = frontier_phi_63_64_ladder;
            _3043 = frontier_phi_63_64_ladder_2;
            _3045 = frontier_phi_63_64_ladder_1;
        }
        float _3050 = isnan(1.0) ? _785 : (isnan(_785) ? 1.0 : min(_785, 1.0));
        _2847 = (_3050 * _3041) + _2359;
        _2849 = (_3050 * _3043) + _2361;
        _2851 = (_3050 * _3045) + _2363;
        _2853 = ((_3035 * _769) * _3050) + _2697;
        _2855 = ((_3037 * _771) * _3050) + _2699;
        _2857 = ((_3039 * _772) * _3050) + _2701;
    }
    else
    {
        _2847 = _2359;
        _2849 = _2361;
        _2851 = _2363;
        _2853 = _2697;
        _2855 = _2699;
        _2857 = _2701;
    }
    float _4869 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    float _4880 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    float _4891 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
    float _2874 = ((isnan(1.0) ? _4869 : (isnan(_4869) ? 1.0 : min(_4869, 1.0))) * (_2847 + ((isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0))) * _785))) + ((_2853 + ((isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0))) * _1624)) * cbPerFrame._m0[3u].x);
    float _2875 = ((isnan(1.0) ? _4880 : (isnan(_4880) ? 1.0 : min(_4880, 1.0))) * (_2849 + ((isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0))) * _785))) + ((_2855 + ((isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0))) * _1624)) * cbPerFrame._m0[3u].x);
    float _2876 = ((isnan(1.0) ? _4891 : (isnan(_4891) ? 1.0 : min(_4891, 1.0))) * (_2851 + ((isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0))) * _785))) + ((_2857 + ((isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0))) * _1624)) * cbPerFrame._m0[3u].x);
    uint _2877 = _249 + 6u;
    float _2885 = _705 / cbSceneParam._m0[86u].x;
    float _2886 = _706 / cbSceneParam._m0[86u].y;
    vec4 _2900 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2885, _2886, (log2((isnan(cbSceneParam._m0[77u].w) ? _627 : (isnan(_627) ? cbSceneParam._m0[77u].w : min(_627, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2902 = _2900.x;
    float _2903 = _2900.y;
    float _2904 = _2900.z;
    float _2905 = _2900.w;
    float _2977;
    float _2979;
    float _2981;
    float _2983;
    if (_627 > cbSceneParam._m0[78u].w)
    {
        float _2939 = isnan(_627) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _627 : min(cbSceneParam._m0[80u].w, _627));
        float _2940 = _2939 / _627;
        float _2951 = _2940 * _677;
        float _2952 = _678 * _2940;
        float _2953 = (-0.0) - _2952;
        float _2955 = _2940 * _679;
        float _2957 = (cbSceneParam._m0[77u].w * _2953) / _2939;
        float _2958 = _2957 + cbSceneParam._m0[79u].w;
        float _2959 = cbSceneParam._m0[79u].w - _2952;
        float _2965 = sqrt(((_2951 * _2951) + (_2952 * _2952)) + (_2955 * _2955));
        float _2968 = (1.0 - (cbSceneParam._m0[77u].w / _2939)) * _2965;
        float _2973 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2975 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3152;
        if (abs((_2953 - _2957) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3152 = ((((_2958 > 0.0) ? exp2(_2973 * _2958) : (2.0 - exp2(_2975 * _2958))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2968;
        }
        else
        {
            float _3096 = 1.0 / cbSceneParam._m0[80u].x;
            float _3097 = isnan(_2959) ? _2958 : (isnan(_2958) ? _2959 : max(_2958, _2959));
            float _3098 = isnan(_2959) ? _2958 : (isnan(_2958) ? _2959 : min(_2958, _2959));
            float _3107 = isnan(0.0) ? _3097 : (isnan(_3097) ? 0.0 : min(_3097, 0.0));
            float _3108 = isnan(0.0) ? _3098 : (isnan(_3098) ? 0.0 : min(_3098, 0.0));
            _3152 = ((abs(_2965 / _2953) * cbSceneParam._m0[80u].y) * ((((_3107 - _3108) * 2.0) - ((exp2(_2973 * (isnan(0.0) ? _3097 : (isnan(_3097) ? 0.0 : max(_3097, 0.0)))) - exp2(_2973 * (isnan(0.0) ? _3098 : (isnan(_3098) ? 0.0 : max(_3098, 0.0))))) * _3096)) - ((exp2(_2975 * _3107) - exp2(_2975 * _3108)) * _3096))) + (_2968 * cbSceneParam._m0[80u].z);
        }
        vec4 _3154 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2885, _2886, 1.0), 0.0);
        float _3163 = exp2((_3152 * (-1.44269502162933349609375)) * (1.0 - _3154.w));
        float _3164 = log2(_3163);
        float _3180 = log2(_2905);
        _2977 = (exp2(_3180 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3164 * cbSceneParam._m0[78u].x)) * _3154.x) / cbSceneParam._m0[78u].x)) + _2902;
        _2979 = (exp2(_3180 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3164 * cbSceneParam._m0[78u].y)) * _3154.y) / cbSceneParam._m0[78u].y)) + _2903;
        _2981 = (exp2(_3180 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3164 * cbSceneParam._m0[78u].z)) * _3154.z) / cbSceneParam._m0[78u].z)) + _2904;
        _2983 = _3163 * _2905;
    }
    else
    {
        _2977 = _2902;
        _2979 = _2903;
        _2981 = _2904;
        _2983 = _2905;
    }
    bool _3190;
    vec4 _2993;
    vec4 _3015;
    float _3017;
    float _3021;
    float _3022;
    float _3023;
    float _3024;
    bool _3034;
    for (;;)
    {
        _2993 = cbMatDynParam._m0[0u];
        float _2995 = roundEven(_2993.y);
        bool _2996 = _2995 == 3.0;
        float _2997 = log2(_2983);
        float _3004 = exp2(_2997 * cbSceneParam._m0[78u].x) * _2874;
        float _3005 = exp2(_2997 * cbSceneParam._m0[78u].y) * _2875;
        float _3006 = exp2(_2997 * cbSceneParam._m0[78u].z) * _2876;
        float _3013 = _693 + (-0.5);
        _3015 = cbMtdParam._m0[1u];
        _3017 = _3015.y * _3013;
        float _3020 = (_2995 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3021 = _3020 * (_2996 ? _3004 : (_3004 + (cbSceneParam._m0[72u].w * _2977)));
        _3022 = _3020 * (_2996 ? _3005 : (_3005 + (cbSceneParam._m0[72u].w * _2979)));
        _3023 = _3020 * (_2996 ? _3006 : (_3006 + (cbSceneParam._m0[72u].w * _2981)));
        _3024 = _3013 * 0.999000012874603271484375;
        _3034 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3034)
        {
            if ((cbInstanceData._m0[_249 + 7u].x + _3024) < 0.5)
            {
                _3190 = true;
                break;
            }
        }
        uint _3131 = _745 + uint(_2993.w);
        if ((cbInstanceData._m0[_3131].w < 1.0) && ((cbInstanceData._m0[_3131].w + _3024) < 0.5))
        {
            _3190 = true;
            break;
        }
        if ((_3017 + 1.0) < _3015.x)
        {
            _3190 = true;
            break;
        }
        _3190 = false;
        break;
    }
    float _3394;
    if (_3190)
    {
        discard_state = true;
        _3394 = 0.0;
    }
    else
    {
        _3394 = cbInstanceData._m0[_2877].w;
    }
    SV_Target.x = _3021;
    SV_Target.y = _3022;
    SV_Target.z = _3023;
    SV_Target.w = _3394;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2877].w;
    discard_exit();
}


