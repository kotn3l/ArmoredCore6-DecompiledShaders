#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1444;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _238 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _239 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _240 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _246 = inversesqrt(dot(vec3(_238, _239, _240), vec3(_238, _239, _240)));
    float _247 = _246 * _238;
    float _248 = _246 * _239;
    float _249 = _246 * _240;
    float _253 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _254 = _253 * NORMAL.x;
    float _255 = _253 * NORMAL.y;
    float _256 = _253 * NORMAL.z;
    float _260 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _261 = _260 * TANGENT.x;
    float _262 = _260 * TANGENT.y;
    float _263 = _260 * TANGENT.z;
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _274 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _275 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4051 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _4062 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _4073 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    uint _285 = uint(roundEven(NORMAL.w)) * 13u;
    uint _290 = _285 + 1u;
    uint _294 = _285 + 2u;
    float _303 = sqrt(((cbInstanceData._m0[_290].x * cbInstanceData._m0[_290].x) + (cbInstanceData._m0[_285].x * cbInstanceData._m0[_285].x)) + (cbInstanceData._m0[_294].x * cbInstanceData._m0[_294].x));
    float _304 = _303 * TEXCOORD.z;
    float _305 = _303 * TEXCOORD.w;
    vec4 _318 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _304) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _305) + cbTextureTilingScale._m0[13u].w));
    vec4 _342 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _347 = _342.x * cbMtdParam._m0[11u].x;
    float _348 = _342.y * cbMtdParam._m0[11u].y;
    float _349 = _342.z * cbMtdParam._m0[11u].z;
    vec4 _368 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _304) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _305) + cbTextureTilingScale._m0[5u].w));
    vec4 _404 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _406 = _404.x;
    float _418 = dot(vec4(_406, _404.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _435 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_406 - _418) * cbMtdParam._m0[24u].y) + _418) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4084 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _436 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
    float _443 = (_436 * ((_368.x * cbMtdParam._m0[12u].x) - _347)) + _347;
    float _444 = (_436 * ((_368.y * cbMtdParam._m0[12u].y) - _348)) + _348;
    float _445 = (_436 * ((_368.z * cbMtdParam._m0[12u].z) - _349)) + _349;
    float _449 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _318.x) * _443;
    float _452 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _318.y) * _444;
    float _455 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _318.z) * _445;
    float _462 = ((_443 - _449) * (isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0)))) + _449;
    float _463 = ((_444 - _452) * (isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0)))) + _452;
    float _464 = ((_445 - _455) * (isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0)))) + _455;
    vec4 _483 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _304) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _305) + cbTextureTilingScale._m0[14u].w));
    vec4 _503 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _304) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _305) + cbTextureTilingScale._m0[20u].w));
    vec4 _530 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _304) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _305) + cbTextureTilingScale._m0[4u].w));
    vec4 _547 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _549 = _547.x;
    float _550 = _547.y;
    float _551 = _547.z;
    float _560 = ((_530.z - _551) * _436) + _551;
    float _563 = ((((_530.x - _549) * _436) + _549) * 2.0) + (-1.0);
    float _564 = ((((_530.y - _550) * _436) + _550) * 2.0) + (-1.0);
    float _565 = dot(vec2(_563, _564), vec2(_563, _564));
    float _4095 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _570 = sqrt(1.0 - (isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0))));
    float _573 = _563 + ((((_503.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x);
    float _574 = _564 + ((((_503.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x);
    float _577 = fma(_570, _254, fma(_574, _261, _573 * _247));
    float _580 = fma(_570, _255, fma(_574, _262, _573 * _248));
    float _583 = fma(_570, _256, fma(_574, _263, _573 * _249));
    float _587 = inversesqrt(dot(vec3(_577, _580, _583), vec3(_577, _580, _583)));
    vec4 _603 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _629 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _304) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _305) + cbTextureTilingScale._m0[11u].w));
    float _631 = _629.x;
    float _632 = 1.0 - _631;
    float _636 = ((_631 - _632) * cbMtdParam._m0[24u].z) + _632;
    float _638 = (cbMtdParam._m0[19u].x + dot(vec4(_587 * _577, _587 * _580, _587 * _583, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_636 * cbMtdParam._m0[21u].z);
    float _4106 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _639 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
    float _641 = (-0.0) - cbMtdParam._m0[24u].x;
    float _643 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _644 = isnan(1.0) ? _643 : (isnan(_643) ? 1.0 : min(_643, 1.0));
    float _651 = _639 - ((_639 * TEXCOORD_8.x) * _644);
    float _652 = _639 - ((_639 * TEXCOORD_8.y) * _644);
    float _653 = _639 - ((_639 * TEXCOORD_8.z) * _644);
    float _660 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _664 = ((isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : min(_660, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _672 = (_664 - (((_636 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _664))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4137 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _673 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
    float _677 = ((_651 * ((_483.x * cbMtdParam._m0[18u].x) - _462)) * _673) + _462;
    float _678 = ((_652 * ((_483.y * cbMtdParam._m0[18u].y) - _463)) * _673) + _463;
    float _679 = ((_653 * ((_483.z * cbMtdParam._m0[18u].z) - _464)) * _673) + _464;
    vec4 _691 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _304) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _305) + cbTextureTilingScale._m0[19u].w));
    float _693 = _691.x;
    float _694 = 1.0 - _693;
    float _719 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_693 - _694) * cbMtdParam._m0[24u].w) + _694) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4148 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
    float _720 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
    float _728 = ((((cbMtdParam._m0[10u].x - _677) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _720) + _677;
    float _729 = ((((cbMtdParam._m0[10u].y - _678) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _720) + _678;
    float _730 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _679)) * _720) + _679;
    vec4 _756 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _758 = _756.x;
    float _776 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _304) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _305) + cbTextureTilingScale._m0[9u].w)).x - _758) * _436) + _758;
    float _780 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _776) * cbMtdParam._m0[19u].z) + _776;
    float _783 = _780 - ((_673 * _651) * _780);
    float _785 = _783 - (_783 * _720);
    float _790 = (((_503.z - _560) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _560;
    vec4 _804 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _304) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _305) + cbTextureTilingScale._m0[15u].w));
    float _811 = (_804.x * 2.0) + (-1.0);
    float _812 = (_804.y * 2.0) + (-1.0);
    float _813 = dot(vec2(_811, _812), vec2(_811, _812));
    float _4159 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
    float _822 = (((_804.z - _790) * _651) * _673) + _790;
    float _825 = ((cbMtdParam._m0[23u].y - _822) * _720) + _822;
    vec4 _844 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _304) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _305) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _850 = (_844.x * 2.0) + (-1.0);
    float _851 = (_844.y * 2.0) + (-1.0);
    float _852 = dot(vec2(_850, _851), vec2(_850, _851));
    float _4170 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
    float _872 = (((cbMtdParam._m0[21u].x * _573) + ((_811 - _573) * _651)) * _673) + _573;
    float _873 = (((cbMtdParam._m0[21u].x * _574) + ((_812 - _574) * _652)) * _673) + _574;
    float _874 = (((sqrt(1.0 - (isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0)))) - _570) * _653) * _673) + _570;
    float _885 = (((_850 - _872) + (_872 * cbMtdParam._m0[22u].z)) * _720) + _872;
    float _886 = (((_851 - _873) + (_873 * cbMtdParam._m0[22u].z)) * _720) + _873;
    float _887 = ((sqrt(1.0 - (isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0)))) - _874) * _720) + _874;
    float _891 = cbMtdParam._m0[22u].x + _603.w;
    float _894 = fma(_887, _254, fma(_886, _261, _885 * _247));
    float _897 = fma(_887, _255, fma(_886, _262, _885 * _248));
    float _900 = fma(_887, _256, fma(_886, _263, _885 * _249));
    float _904 = inversesqrt(dot(vec3(_894, _897, _900), vec3(_894, _897, _900)));
    float _905 = _904 * _894;
    float _906 = _904 * _897;
    float _907 = _904 * _900;
    float _4181 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
    float _908 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
    float _4192 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
    float _4203 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
    float _4214 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _4225 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    float _4236 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
    float _913 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
    float _927 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _967 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _977 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _967);
    float _978 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _967);
    float _979 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _967);
    float _983 = inversesqrt(dot(vec3(_977, _978, _979), vec3(_977, _978, _979)));
    float _984 = _977 * _983;
    float _985 = _978 * _983;
    float _986 = _979 * _983;
    float _992 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _993 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1011 = fma(_907, cbSceneParam._m0[5u].z, fma(_906, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _905));
    float _1014 = fma(_907, cbSceneParam._m0[6u].z, fma(_906, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _905));
    float _1017 = fma(_907, cbSceneParam._m0[7u].z, fma(_906, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _905));
    uint _1031 = (_285 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1037 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0)))) * cbInstanceData._m0[_1031].x;
    float _1038 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0)))) * cbInstanceData._m0[_1031].y;
    float _1039 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0)))) * cbInstanceData._m0[_1031].z;
    float _4247 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
    float _1040 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
    float _4258 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
    float _1041 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
    float _4269 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
    float _1042 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
    float _1043 = 1.0 - _913;
    float _1044 = _1040 * _1043;
    float _1045 = _1041 * _1043;
    float _1046 = _1042 * _1043;
    float _1051 = (_1040 + (-0.039999999105930328369140625)) * _913;
    float _1052 = (_1041 + (-0.039999999105930328369140625)) * _913;
    float _1053 = (_1042 + (-0.039999999105930328369140625)) * _913;
    float _1054 = _1051 + 0.039999999105930328369140625;
    float _1056 = _1052 + 0.039999999105930328369140625;
    float _1057 = _1053 + 0.039999999105930328369140625;
    vec4 _1066 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _992, cbSceneParam._m0[86u].y * _993));
    float _1070 = ((isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0))) * TEXCOORD_5.w) * _1066.x;
    float _1071 = dot(vec3(_905, _906, _907), vec3(_984, _985, _986));
    float _1074 = _1071 * 2.0;
    float _1078 = (_1074 * _905) - _984;
    float _1079 = (_1074 * _906) - _985;
    float _1080 = (_1074 * _907) - _986;
    float _1084 = abs(dot(vec3(_984, _985, _986), vec3(_905, _906, _907)));
    float _4280 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
    float _1086 = sqrt(_908);
    float _1099 = exp2((_1086 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1086 * 3.0));
    float _1105 = (1.0 - _1099) * ((_1086 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1106 = _1099 * _1086;
    float _1134 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1138 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1142 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1443;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1168 = fma(_1142, cbModelParam._m0[26u].z, fma(_1138, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1134));
        float _1172 = fma(_1142, cbModelParam._m0[27u].z, fma(_1138, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1134));
        float _1176 = fma(_1142, cbModelParam._m0[28u].z, fma(_1138, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1134));
        float _1201 = _1134 + _905;
        float _1202 = _1138 + _906;
        float _1203 = _1142 + _907;
        float _1213 = fma(_1203, cbModelParam._m0[26u].z, fma(_1202, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1201)) - _1168;
        float _1214 = fma(_1203, cbModelParam._m0[27u].z, fma(_1202, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1201)) - _1172;
        float _1215 = fma(_1203, cbModelParam._m0[28u].z, fma(_1202, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1201)) - _1176;
        float _1219 = inversesqrt(dot(vec3(_1213, _1214, _1215), vec3(_1213, _1214, _1215)));
        float _1232 = ((_1219 * _1213) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1168 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1233 = ((_1219 * _1214) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1172 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1234 = ((_1219 * _1215) / cbModelParam._m0[34u].z) + ((((((_1176 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1237 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1232, _1233, _1234), 0.0);
        vec4 _1244 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1232, _1233, _1234), 0.0);
        vec4 _1251 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1232, _1233, _1234), 0.0);
        vec4 _1258 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1232, _1233, _1234), 0.0);
        float _1271 = exp2((_1237.w + (-0.5)) * 20.0) * 2.0;
        float _1272 = _1271 * (_1237.x + (-0.5));
        float _1273 = _1271 * (_1237.y + (-0.5));
        float _1274 = _1271 * (_1237.z + (-0.5));
        float _1281 = exp2((_1244.w + (-0.5)) * 20.0) * 2.0;
        float _1282 = _1281 * (_1244.x + (-0.5));
        float _1283 = _1281 * (_1244.y + (-0.5));
        float _1284 = _1281 * (_1244.z + (-0.5));
        float _1291 = exp2((_1251.w + (-0.5)) * 20.0) * 2.0;
        float _1292 = _1291 * (_1251.x + (-0.5));
        float _1293 = _1291 * (_1251.y + (-0.5));
        float _1294 = _1291 * (_1251.z + (-0.5));
        float _1301 = exp2((_1258.w + (-0.5)) * 20.0) * 2.0;
        float _1302 = _1301 * (_1258.x + (-0.5));
        float _1303 = _1301 * (_1258.y + (-0.5));
        float _1304 = _1301 * (_1258.z + (-0.5));
        float _1305 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1306 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1307 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1308 = _1272 * 0.5;
        float _1309 = _1282 * 0.5;
        float _1310 = _1292 * 0.5;
        float _1311 = dot(vec3(_1308, _1309, _1310), vec3(_1308, _1309, _1310));
        float _1316 = (_1311 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1311);
        float _1325 = (dot(vec3(_905, _906, _907), vec3(_1316 * _1308, _1316 * _1309, _1316 * _1310)) + 1.0) * 0.5;
        float _4306 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1335 = sqrt(((_1309 * _1309) + (_1308 * _1308)) + (_1310 * _1310)) / (_1305 + 9.9999997473787516355514526367188e-06);
        float _4317 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1336 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
        float _1337 = _1336 * 2.0;
        float _1341 = (1.0 - _1336) / (_1336 + 1.0);
        float _4328 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1342 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
        float _1351 = ((((1.0 - _1342) * (_1337 + 2.0)) * exp2(log2(isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0))) * (_1337 + 1.0))) + _1342) * _1305;
        float _1352 = _1273 * 0.5;
        float _1353 = _1283 * 0.5;
        float _1354 = _1293 * 0.5;
        float _1355 = dot(vec3(_1352, _1353, _1354), vec3(_1352, _1353, _1354));
        float _1360 = (_1355 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1355);
        float _1368 = (dot(vec3(_905, _906, _907), vec3(_1360 * _1352, _1360 * _1353, _1360 * _1354)) + 1.0) * 0.5;
        float _4339 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1377 = sqrt(((_1353 * _1353) + (_1352 * _1352)) + (_1354 * _1354)) / (_1306 + 9.9999997473787516355514526367188e-06);
        float _4350 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1378 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
        float _1379 = _1378 * 2.0;
        float _1383 = (1.0 - _1378) / (_1378 + 1.0);
        float _4361 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1384 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
        float _1393 = ((((1.0 - _1384) * (_1379 + 2.0)) * exp2(log2(isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0))) * (_1379 + 1.0))) + _1384) * _1306;
        float _1394 = _1274 * 0.5;
        float _1395 = _1284 * 0.5;
        float _1396 = _1294 * 0.5;
        float _1397 = dot(vec3(_1394, _1395, _1396), vec3(_1394, _1395, _1396));
        float _1402 = (_1397 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1397);
        float _1410 = (dot(vec3(_905, _906, _907), vec3(_1402 * _1394, _1402 * _1395, _1402 * _1396)) + 1.0) * 0.5;
        float _4372 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1419 = sqrt(((_1395 * _1395) + (_1394 * _1394)) + (_1396 * _1396)) / (_1307 + 9.9999997473787516355514526367188e-06);
        float _4383 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1420 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
        float _1421 = _1420 * 2.0;
        float _1425 = (1.0 - _1420) / (_1420 + 1.0);
        float _4394 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1426 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
        float _1435 = ((((1.0 - _1426) * (_1421 + 2.0)) * exp2(log2(isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0))) * (_1421 + 1.0))) + _1426) * _1307;
        _1443 = _1274;
        _1445 = _1273;
        _1446 = _1272;
        _1447 = _1284;
        _1448 = _1283;
        _1449 = _1282;
        _1450 = _1294;
        _1451 = _1293;
        _1452 = _1292;
        _1453 = _1307;
        _1454 = _1306;
        _1455 = _1305;
        _1456 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0)));
        _1457 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0)));
        _1458 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0)));
    }
    else
    {
        _1443 = _1444;
        _1445 = _1444;
        _1446 = _1444;
        _1447 = _1444;
        _1448 = _1444;
        _1449 = _1444;
        _1450 = _1444;
        _1451 = _1444;
        _1452 = _1444;
        _1453 = _1444;
        _1454 = _1444;
        _1455 = _1444;
        _1456 = 0.0;
        _1457 = 0.0;
        _1458 = 0.0;
    }
    float _1752;
    float _1753;
    float _1754;
    float _1755;
    float _1756;
    float _1757;
    float _1758;
    float _1759;
    float _1760;
    float _1761;
    float _1762;
    float _1763;
    float _1764;
    float _1765;
    float _1766;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1483 = fma(_1142, cbModelParam._m0[30u].z, fma(_1138, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1134));
        float _1487 = fma(_1142, cbModelParam._m0[31u].z, fma(_1138, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1134));
        float _1491 = fma(_1142, cbModelParam._m0[32u].z, fma(_1138, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1134));
        float _1514 = _1134 + _905;
        float _1515 = _1138 + _906;
        float _1516 = _1142 + _907;
        float _1526 = fma(_1516, cbModelParam._m0[30u].z, fma(_1515, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1514)) - _1483;
        float _1527 = fma(_1516, cbModelParam._m0[31u].z, fma(_1515, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1514)) - _1487;
        float _1528 = fma(_1516, cbModelParam._m0[32u].z, fma(_1515, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1514)) - _1491;
        float _1532 = inversesqrt(dot(vec3(_1526, _1527, _1528), vec3(_1526, _1527, _1528)));
        float _1545 = ((_1532 * _1526) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1483 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1546 = ((_1532 * _1527) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1487 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1547 = ((_1532 * _1528) / cbModelParam._m0[35u].z) + ((((((_1491 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1549 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1545, _1546, _1547), 0.0);
        vec4 _1556 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1545, _1546, _1547), 0.0);
        vec4 _1563 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1545, _1546, _1547), 0.0);
        vec4 _1570 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1545, _1546, _1547), 0.0);
        float _1582 = exp2((_1549.w + (-0.5)) * 20.0) * 2.0;
        float _1583 = _1582 * (_1549.x + (-0.5));
        float _1584 = _1582 * (_1549.y + (-0.5));
        float _1585 = _1582 * (_1549.z + (-0.5));
        float _1592 = exp2((_1556.w + (-0.5)) * 20.0) * 2.0;
        float _1593 = _1592 * (_1556.x + (-0.5));
        float _1594 = _1592 * (_1556.y + (-0.5));
        float _1595 = _1592 * (_1556.z + (-0.5));
        float _1602 = exp2((_1563.w + (-0.5)) * 20.0) * 2.0;
        float _1603 = _1602 * (_1563.x + (-0.5));
        float _1604 = _1602 * (_1563.y + (-0.5));
        float _1605 = _1602 * (_1563.z + (-0.5));
        float _1612 = exp2((_1570.w + (-0.5)) * 20.0) * 2.0;
        float _1613 = _1612 * (_1570.x + (-0.5));
        float _1614 = _1612 * (_1570.y + (-0.5));
        float _1615 = _1612 * (_1570.z + (-0.5));
        float _1616 = isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0));
        float _1617 = isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0));
        float _1618 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
        float _1619 = _1583 * 0.5;
        float _1620 = _1593 * 0.5;
        float _1621 = _1603 * 0.5;
        float _1622 = dot(vec3(_1619, _1620, _1621), vec3(_1619, _1620, _1621));
        float _1627 = (_1622 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1622);
        float _1635 = (dot(vec3(_905, _906, _907), vec3(_1627 * _1619, _1627 * _1620, _1627 * _1621)) + 1.0) * 0.5;
        float _4435 = isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0));
        float _1644 = sqrt(((_1620 * _1620) + (_1619 * _1619)) + (_1621 * _1621)) / (_1616 + 9.9999997473787516355514526367188e-06);
        float _4446 = isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0));
        float _1645 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
        float _1646 = _1645 * 2.0;
        float _1650 = (1.0 - _1645) / (_1645 + 1.0);
        float _4457 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0));
        float _1651 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
        float _1660 = ((((1.0 - _1651) * (_1646 + 2.0)) * exp2(log2(isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0))) * (_1646 + 1.0))) + _1651) * _1616;
        float _1661 = _1584 * 0.5;
        float _1662 = _1594 * 0.5;
        float _1663 = _1604 * 0.5;
        float _1664 = dot(vec3(_1661, _1662, _1663), vec3(_1661, _1662, _1663));
        float _1669 = (_1664 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1664);
        float _1677 = (dot(vec3(_905, _906, _907), vec3(_1669 * _1661, _1669 * _1662, _1669 * _1663)) + 1.0) * 0.5;
        float _4468 = isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0));
        float _1686 = sqrt(((_1662 * _1662) + (_1661 * _1661)) + (_1663 * _1663)) / (_1617 + 9.9999997473787516355514526367188e-06);
        float _4479 = isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0));
        float _1687 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
        float _1688 = _1687 * 2.0;
        float _1692 = (1.0 - _1687) / (_1687 + 1.0);
        float _4490 = isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0));
        float _1693 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
        float _1702 = ((((1.0 - _1693) * (_1688 + 2.0)) * exp2(log2(isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0))) * (_1688 + 1.0))) + _1693) * _1617;
        float _1703 = _1585 * 0.5;
        float _1704 = _1595 * 0.5;
        float _1705 = _1605 * 0.5;
        float _1706 = dot(vec3(_1703, _1704, _1705), vec3(_1703, _1704, _1705));
        float _1711 = (_1706 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1706);
        float _1719 = (dot(vec3(_905, _906, _907), vec3(_1711 * _1703, _1711 * _1704, _1711 * _1705)) + 1.0) * 0.5;
        float _4501 = isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0));
        float _1728 = sqrt(((_1704 * _1704) + (_1703 * _1703)) + (_1705 * _1705)) / (_1618 + 9.9999997473787516355514526367188e-06);
        float _4512 = isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0));
        float _1729 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
        float _1730 = _1729 * 2.0;
        float _1734 = (1.0 - _1729) / (_1729 + 1.0);
        float _4523 = isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0));
        float _1735 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
        float _1744 = ((((1.0 - _1735) * (_1730 + 2.0)) * exp2(log2(isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0))) * (_1730 + 1.0))) + _1735) * _1618;
        _1752 = _1585;
        _1753 = _1584;
        _1754 = _1583;
        _1755 = _1595;
        _1756 = _1594;
        _1757 = _1593;
        _1758 = _1605;
        _1759 = _1604;
        _1760 = _1603;
        _1761 = _1618;
        _1762 = _1617;
        _1763 = _1616;
        _1764 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0)));
        _1765 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0)));
        _1766 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0)));
    }
    else
    {
        _1752 = _1444;
        _1753 = _1444;
        _1754 = _1444;
        _1755 = _1444;
        _1756 = _1444;
        _1757 = _1444;
        _1758 = _1444;
        _1759 = _1444;
        _1760 = _1444;
        _1761 = _1444;
        _1762 = _1444;
        _1763 = _1444;
        _1764 = 0.0;
        _1765 = 0.0;
        _1766 = 0.0;
    }
    float _1776 = (cbModelParam._m0[1u].x * (_1764 - _1456)) + _1456;
    float _1777 = (cbModelParam._m0[1u].x * (_1765 - _1457)) + _1457;
    float _1778 = (cbModelParam._m0[1u].x * (_1766 - _1458)) + _1458;
    float _1799 = fma(_1778, cbSceneParam._m0[89u].z, fma(_1777, cbSceneParam._m0[89u].y, _1776 * cbSceneParam._m0[89u].x));
    float _1802 = fma(_1778, cbSceneParam._m0[90u].z, fma(_1777, cbSceneParam._m0[90u].y, _1776 * cbSceneParam._m0[90u].x));
    float _1805 = fma(_1778, cbSceneParam._m0[91u].z, fma(_1777, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1776));
    float _1820 = _1078 * 0.5;
    float _1821 = _1079 * 0.5;
    float _1822 = _1080 * 0.5;
    float _1823 = dot(vec4(_1820, _1821, _1822, 1.0), vec4(_1754, _1757, _1760, _1763));
    float _1826 = dot(vec4(_1820, _1821, _1822, 1.0), vec4(_1753, _1756, _1759, _1762));
    float _1829 = dot(vec4(_1820, _1821, _1822, 1.0), vec4(_1752, _1755, _1758, _1761));
    float _1863;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1836 = dot(vec4(_1820, _1821, _1822, 1.0), vec4(_1443, _1447, _1450, _1453));
        float _1840 = dot(vec4(_1820, _1821, _1822, 1.0), vec4(_1445, _1448, _1451, _1454));
        float _1844 = dot(vec4(_1820, _1821, _1822, 1.0), vec4(_1446, _1449, _1452, _1455));
        float _1851 = dot(vec4(cbModelParam._m0[39u]), vec4(_1820, _1821, _1822, 1.0));
        _1863 = dot(vec3(isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0)), isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0)), isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1851) ? 0.0 : (isnan(0.0) ? _1851 : max(0.0, _1851))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1863 = 1.0;
    }
    float _1874;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1865 = dot(vec4(cbModelParam._m0[40u]), vec4(_1820, _1821, _1822, 1.0));
        _1874 = dot(vec3(isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0)), isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0)), isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1865) ? 0.0 : (isnan(0.0) ? _1865 : max(0.0, _1865))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1874 = 1.0;
    }
    float _1878 = (_1874 * cbModelParam._m0[1u].x) + (_1863 * (1.0 - cbModelParam._m0[1u].x));
    float _1888 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _908);
    float _1889 = isnan(_1888) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1888 : min(cbModelParam._m0[25u].z, _1888));
    float _1969;
    float _1971;
    float _1973;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1936 = fma(_1142, cbModelParam._m0[13u].z, fma(_1138, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1134)) + cbModelParam._m0[13u].w;
        float _1940 = fma(_1142, cbModelParam._m0[14u].z, fma(_1138, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1134)) + cbModelParam._m0[14u].w;
        float _1944 = fma(_1142, cbModelParam._m0[15u].z, fma(_1138, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1134)) + cbModelParam._m0[15u].w;
        float _1947 = fma(_1080, cbModelParam._m0[13u].z, fma(_1079, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1078));
        float _1950 = fma(_1080, cbModelParam._m0[14u].z, fma(_1079, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1078));
        float _1953 = fma(_1080, cbModelParam._m0[15u].z, fma(_1079, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1078));
        float _1981;
        if (_1947 > 0.0)
        {
            _1981 = abs((1.0 - _1936) / _1947);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1947 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1936 + 1.0) / _1947);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1981 = frontier_phi_14_12_ladder;
        }
        float _2152;
        if (_1950 > 0.0)
        {
            _2152 = abs((1.0 - _1940) / _1950);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1950 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1940 + 1.0) / _1950);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2152 = frontier_phi_23_19_ladder;
        }
        float _2447;
        if (_1953 > 0.0)
        {
            _2447 = abs((1.0 - _1944) / _1953);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1953 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1944 + 1.0) / _1953);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2447 = frontier_phi_35_30_ladder;
        }
        float _2449 = isnan(_2152) ? _1981 : (isnan(_1981) ? _2152 : min(_1981, _2152));
        float _2450 = isnan(_2447) ? _2449 : (isnan(_2449) ? _2447 : min(_2449, _2447));
        float _2454 = (_2450 * _1947) + _1936;
        float _2455 = (_2450 * _1950) + _1940;
        float _2456 = (_2450 * _1953) + _1944;
        float _2457 = _2450 * 9.9999997473787516355514526367188e-05;
        float _2459 = (-1.0) - _2457;
        float _2461 = _2457 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2456 > _2461) || ((_2456 < _2459) || ((_2455 > _2461) || ((_2455 < _2459) || ((_2454 < _2459) || (_2454 > _2461))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2601 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2456, cbModelParam._m0[9u].z, fma(_2455, cbModelParam._m0[9u].y, _2454 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2456, cbModelParam._m0[10u].z, fma(_2455, cbModelParam._m0[10u].y, _2454 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2456, cbModelParam._m0[11u].z, fma(_2455, cbModelParam._m0[11u].y, _2454 * cbModelParam._m0[11u].x))), _1889);
            frontier_phi_13_35_ladder = _2601.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2601.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2601.x * cbModelParam._m0[1u].y;
        }
        _1969 = frontier_phi_13_35_ladder_2;
        _1971 = frontier_phi_13_35_ladder_1;
        _1973 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1957 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1078, _1079, _1080), _1889);
        _1969 = _1957.x * cbModelParam._m0[1u].y;
        _1971 = _1957.y * cbModelParam._m0[1u].y;
        _1973 = _1957.z * cbModelParam._m0[1u].y;
    }
    float _1977 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _908);
    float _1978 = isnan(_1977) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1977 : min(cbModelParam._m0[25u].w, _1977));
    float _2067;
    float _2069;
    float _2071;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2031 = fma(_1142, cbModelParam._m0[21u].z, fma(_1138, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1134)) + cbModelParam._m0[21u].w;
        float _2035 = fma(_1142, cbModelParam._m0[22u].z, fma(_1138, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1134)) + cbModelParam._m0[22u].w;
        float _2039 = fma(_1142, cbModelParam._m0[23u].z, fma(_1138, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1134)) + cbModelParam._m0[23u].w;
        float _2042 = fma(_1080, cbModelParam._m0[21u].z, fma(_1079, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1078));
        float _2045 = fma(_1080, cbModelParam._m0[22u].z, fma(_1079, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1078));
        float _2048 = fma(_1080, cbModelParam._m0[23u].z, fma(_1079, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1078));
        float _2157;
        if (_2042 > 0.0)
        {
            _2157 = abs((1.0 - _2031) / _2042);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2042 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2031 + 1.0) / _2042);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2157 = frontier_phi_25_21_ladder;
        }
        float _2474;
        if (_2045 > 0.0)
        {
            _2474 = abs((1.0 - _2035) / _2045);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2045 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2035 + 1.0) / _2045);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2474 = frontier_phi_37_32_ladder;
        }
        float _2812;
        if (_2048 > 0.0)
        {
            _2812 = abs((1.0 - _2039) / _2048);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2048 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2039 + 1.0) / _2048);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2812 = frontier_phi_47_44_ladder;
        }
        float _2814 = isnan(_2474) ? _2157 : (isnan(_2157) ? _2474 : min(_2157, _2474));
        float _2815 = isnan(_2812) ? _2814 : (isnan(_2814) ? _2812 : min(_2814, _2812));
        float _2819 = (_2815 * _2042) + _2031;
        float _2820 = (_2815 * _2045) + _2035;
        float _2821 = (_2815 * _2048) + _2039;
        float _2822 = _2815 * 9.9999997473787516355514526367188e-05;
        float _2823 = (-1.0) - _2822;
        float _2825 = _2822 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2821 > _2825) || ((_2821 < _2823) || ((_2820 > _2825) || ((_2820 < _2823) || ((_2819 < _2823) || (_2819 > _2825))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2943 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2821, cbModelParam._m0[17u].z, fma(_2820, cbModelParam._m0[17u].y, _2819 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2821, cbModelParam._m0[18u].z, fma(_2820, cbModelParam._m0[18u].y, _2819 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2821, cbModelParam._m0[19u].z, fma(_2820, cbModelParam._m0[19u].y, _2819 * cbModelParam._m0[19u].x))), _1978);
            frontier_phi_22_47_ladder = _2943.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2943.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2943.x * cbModelParam._m0[1u].z;
        }
        _2067 = frontier_phi_22_47_ladder_2;
        _2069 = frontier_phi_22_47_ladder_1;
        _2071 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2051 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1078, _1079, _1080), _1978);
        _2067 = _2051.x * cbModelParam._m0[1u].z;
        _2069 = _2051.y * cbModelParam._m0[1u].z;
        _2071 = _2051.z * cbModelParam._m0[1u].z;
    }
    float _2084 = (((_1105 * _1054) + _1106) * _1070) * ((cbModelParam._m0[1u].w * (_2067 - _1969)) + _1969);
    float _2086 = (((_1105 * _1056) + _1106) * _1070) * ((cbModelParam._m0[1u].w * (_2069 - _1971)) + _1971);
    float _2088 = (((_1105 * _1057) + _1106) * _1070) * ((cbModelParam._m0[1u].w * (_2071 - _1973)) + _1973);
    float _2091 = fma(_2088, cbSceneParam._m0[89u].z, fma(_2086, cbSceneParam._m0[89u].y, _2084 * cbSceneParam._m0[89u].x));
    float _2094 = fma(_2088, cbSceneParam._m0[90u].z, fma(_2086, cbSceneParam._m0[90u].y, _2084 * cbSceneParam._m0[90u].x));
    float _2097 = fma(_2088, cbSceneParam._m0[91u].z, fma(_2086, cbSceneParam._m0[91u].y, _2084 * cbSceneParam._m0[91u].x));
    float _2131 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2135 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2139 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2143 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2144 = _2131 / _2143;
    float _2145 = _2135 / _2143;
    float _2146 = _2139 / _2143;
    float _2293;
    float _2294;
    float _2295;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2173 = ((uint(_2146 > cbSceneParam._m0[59u].y) + uint(_2146 > cbSceneParam._m0[59u].x)) + uint(_2146 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2174 = _2173 + 43u;
        uint _2182 = _2173 + 44u;
        uint _2190 = _2173 + 45u;
        uint _2198 = _2173 + 46u;
        float _2209 = fma(_2143, cbSceneParam._m0[_2174].w, fma(_2139, cbSceneParam._m0[_2174].z, fma(_2135, cbSceneParam._m0[_2174].y, _2131 * cbSceneParam._m0[_2174].x)));
        float _2213 = fma(_2143, cbSceneParam._m0[_2182].w, fma(_2139, cbSceneParam._m0[_2182].z, fma(_2135, cbSceneParam._m0[_2182].y, _2131 * cbSceneParam._m0[_2182].x)));
        float _2221 = fma(_2143, cbSceneParam._m0[_2198].w, fma(_2139, cbSceneParam._m0[_2198].z, fma(_2135, cbSceneParam._m0[_2198].y, _2131 * cbSceneParam._m0[_2198].x)));
        float _2226 = cbSceneParam._m0[33u].z * _2221;
        float _2228 = cbSceneParam._m0[33u].w * _2221;
        float _2231 = fma(_2143, cbSceneParam._m0[_2190].w, fma(_2139, cbSceneParam._m0[_2190].z, fma(_2135, cbSceneParam._m0[_2190].y, _2131 * cbSceneParam._m0[_2190].x))) / _2221;
        float _2279 = (cbSceneParam._m0[33u].x - sqrt(((_2145 * _2145) + (_2144 * _2144)) + (_2146 * _2146))) * cbSceneParam._m0[33u].y;
        float _4649 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
        float _2286 = (isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2226 + _2209) / _2221, (_2228 + _2213) / _2221), _2231), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2228 + _2209) / _2221, (_2213 - _2226) / _2221), _2231), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2209 - _2226) / _2221, (_2213 - _2228) / _2221), _2231), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2209 - _2228) / _2221, (_2226 + _2213) / _2221), _2231), 0.0)).x), vec4(0.25)));
        _2293 = 1.0 - (_2286 * cbSceneParam._m0[34u].x);
        _2294 = 1.0 - (_2286 * cbSceneParam._m0[34u].y);
        _2295 = 1.0 - (_2286 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2293 = 1.0;
        _2294 = 1.0;
        _2295 = 1.0;
    }
    float _2359;
    float _2361;
    float _2363;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2347 = fma(_2143, cbSceneParam._m0[63u].w, fma(_2139, cbSceneParam._m0[63u].z, fma(_2135, cbSceneParam._m0[63u].y, _2131 * cbSceneParam._m0[63u].x)));
        float _2348 = fma(_2143, cbSceneParam._m0[60u].w, fma(_2139, cbSceneParam._m0[60u].z, fma(_2135, cbSceneParam._m0[60u].y, _2131 * cbSceneParam._m0[60u].x))) / _2347;
        float _2349 = fma(_2143, cbSceneParam._m0[61u].w, fma(_2139, cbSceneParam._m0[61u].z, fma(_2135, cbSceneParam._m0[61u].y, _2131 * cbSceneParam._m0[61u].x))) / _2347;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2348 >= cbSceneParam._m0[64u].x) && (_2349 >= cbSceneParam._m0[64u].y)) && (_2348 <= cbSceneParam._m0[64u].z)) && (_2349 <= cbSceneParam._m0[64u].w))
        {
            float _2487 = fma(_2143, cbSceneParam._m0[62u].w, fma(_2139, cbSceneParam._m0[62u].z, fma(_2135, cbSceneParam._m0[62u].y, _2131 * cbSceneParam._m0[62u].x))) / _2347;
            float _2491 = isnan(cbSceneParam._m0[41u].w) ? _2487 : (isnan(_2487) ? cbSceneParam._m0[41u].w : max(_2487, cbSceneParam._m0[41u].w));
            float _2534 = (cbSceneParam._m0[33u].x - sqrt(((_2145 * _2145) + (_2144 * _2144)) + (_2146 * _2146))) * cbSceneParam._m0[33u].y;
            float _4665 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
            float _2541 = (isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2348, cbSceneParam._m0[33u].w + _2349), _2491), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2348, _2349 - cbSceneParam._m0[33u].z), _2491), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2348 - cbSceneParam._m0[33u].z, _2349 - cbSceneParam._m0[33u].w), _2491), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2348 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2349), _2491), 0.0)).x), vec4(0.25)));
            float _2545 = 1.0 - (_2541 * cbSceneParam._m0[34u].x);
            float _2546 = 1.0 - (_2541 * cbSceneParam._m0[34u].y);
            float _2547 = 1.0 - (_2541 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2547) ? _2295 : (isnan(_2295) ? _2547 : min(_2295, _2547));
            frontier_phi_34_33_ladder_1 = isnan(_2546) ? _2294 : (isnan(_2294) ? _2546 : min(_2294, _2546));
            frontier_phi_34_33_ladder_2 = isnan(_2545) ? _2293 : (isnan(_2293) ? _2545 : min(_2293, _2545));
        }
        else
        {
            frontier_phi_34_33_ladder = _2295;
            frontier_phi_34_33_ladder_1 = _2294;
            frontier_phi_34_33_ladder_2 = _2293;
        }
        _2359 = frontier_phi_34_33_ladder_2;
        _2361 = frontier_phi_34_33_ladder_1;
        _2363 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2359 = _2293;
        _2361 = _2294;
        _2363 = _2295;
    }
    uvec4 _2368 = floatBitsToUint(cbInstanceData._m0[_285 + 5u]);
    uint _2370 = _2368.x * 14u;
    uint _2371 = _2370 + 13u;
    float _2378 = _1070 + (-1.0);
    float _2383 = (cbLight._m0[_2371].x * _2378) + 1.0;
    float _2384 = (cbLight._m0[_2371].y * _2378) + 1.0;
    float _2385 = (cbLight._m0[_2371].z * _2378) + 1.0;
    float _2386 = (cbLight._m0[_2371].w * _2378) + 1.0;
    uint _2387 = _2370 + 5u;
    float _2393 = isnan(1.0) ? _2384 : (isnan(_2384) ? 1.0 : min(_2384, 1.0));
    uint _2397 = _2370 + 4u;
    float _2406 = isnan(1.0) ? _2383 : (isnan(_2383) ? 1.0 : min(_2383, 1.0));
    uint _2410 = _2370 | 1u;
    float _2421 = dot(vec3(cbLight._m0[_2370].xyz), vec3(_905, _906, _907));
    float _2424 = dot(vec3(cbLight._m0[_2410].xyz), vec3(_905, _906, _907));
    float _4701 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
    float _4712 = isnan(0.0) ? _2424 : (isnan(_2424) ? 0.0 : max(_2424, 0.0));
    float _2429 = (isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0))) * 0.3183098733425140380859375;
    float _2431 = (isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0))) * 0.3183098733425140380859375;
    float _2438 = ((cbLight._m0[_2387].x * _2393) * _2431) + (((cbLight._m0[_2397].x * _2359) * _2406) * _2429);
    float _2439 = ((_2393 * cbLight._m0[_2387].y) * _2431) + (((cbLight._m0[_2397].y * _2361) * _2406) * _2429);
    float _2440 = ((_2393 * cbLight._m0[_2387].z) * _2431) + (((cbLight._m0[_2397].z * _2363) * _2406) * _2429);
    uvec4 _2444 = floatBitsToUint(cbLight._m0[_2370 + 12u]);
    bool _2446 = _2444.x == 0u;
    float _2548;
    float _2550;
    float _2552;
    if (_2446)
    {
        _2548 = _2438;
        _2550 = _2439;
        _2552 = _2440;
    }
    else
    {
        uint _2556 = _2370 + 6u;
        float _2572 = (dot(vec3(cbLight._m0[_2370 + 2u].xyz), vec3(_905, _906, _907)) * 0.5) + 0.5;
        float _2573 = _2572 * _2572;
        float _4723 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0));
        float _2574 = isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0));
        float _2575 = isnan(1.0) ? _2385 : (isnan(_2385) ? 1.0 : min(_2385, 1.0));
        _2548 = (((cbLight._m0[_2556].x * 0.3183098733425140380859375) * _2574) * _2575) + _2438;
        _2550 = (((cbLight._m0[_2556].y * 0.3183098733425140380859375) * _2574) * _2575) + _2439;
        _2552 = (((cbLight._m0[_2556].z * 0.3183098733425140380859375) * _2574) * _2575) + _2440;
    }
    bool _2555 = _2444.y == 0u;
    float _2610;
    float _2612;
    float _2614;
    if (_2555)
    {
        _2610 = _2548;
        _2612 = _2550;
        _2614 = _2552;
    }
    else
    {
        uint _2783 = _2370 + 7u;
        float _2799 = (dot(vec3(cbLight._m0[_2370 + 3u].xyz), vec3(_905, _906, _907)) * 0.5) + 0.5;
        float _2800 = _2799 * _2799;
        float _4739 = isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : max(_2800, 0.0));
        float _2801 = isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0));
        float _2802 = isnan(1.0) ? _2386 : (isnan(_2386) ? 1.0 : min(_2386, 1.0));
        _2610 = (((cbLight._m0[_2783].x * 0.3183098733425140380859375) * _2801) * _2802) + _2548;
        _2612 = (((cbLight._m0[_2783].y * 0.3183098733425140380859375) * _2801) * _2802) + _2550;
        _2614 = (((cbLight._m0[_2783].z * 0.3183098733425140380859375) * _2801) * _2802) + _2552;
    }
    uint _2617 = _2370 + 8u;
    float _2630 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2370].w)) * _908) * 0.949999988079071044921875);
    float _2631 = _2630 * _2630;
    float _2632 = cbLight._m0[_2370].x + _984;
    float _2633 = cbLight._m0[_2370].y + _985;
    float _2634 = cbLight._m0[_2370].z + _986;
    float _2638 = inversesqrt(dot(vec3(_2632, _2633, _2634), vec3(_2632, _2633, _2634)));
    float _2639 = _2638 * _2632;
    float _2640 = _2638 * _2633;
    float _2641 = _2638 * _2634;
    float _2642 = dot(vec3(_905, _906, _907), vec3(cbLight._m0[_2370].xyz));
    float _4755 = isnan(0.0) ? _2642 : (isnan(_2642) ? 0.0 : max(_2642, 0.0));
    float _2645 = isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0));
    float _4766 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
    float _2646 = isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0));
    float _2647 = dot(vec3(_905, _906, _907), vec3(_2639, _2640, _2641));
    float _4777 = isnan(0.0) ? _2647 : (isnan(_2647) ? 0.0 : max(_2647, 0.0));
    float _2650 = isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0));
    float _2651 = dot(vec3(cbLight._m0[_2370].xyz), vec3(_2639, _2640, _2641));
    float _4788 = isnan(0.0) ? _2651 : (isnan(_2651) ? 0.0 : max(_2651, 0.0));
    float _2655 = _2631 * _2631;
    float _2659 = ((_2650 * _2650) * (_2655 + (-1.0))) + 1.0;
    float _2667 = exp2(log2(1.0 - (isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0)))) * 5.0);
    float _2668 = 0.959999978542327880859375 - _1051;
    float _2670 = 0.959999978542327880859375 - _1052;
    float _2671 = 0.959999978542327880859375 - _1053;
    float _2678 = 1.0 - _2631;
    float _2689 = (0.5 / (((_2646 * ((_2645 * _2678) + _2631)) + 9.9999999392252902907785028219223e-09) + (((_2646 * _2678) + _2631) * _2645))) * _2645;
    float _4799 = isnan(0.0) ? _2689 : (isnan(_2689) ? 0.0 : max(_2689, 0.0));
    float _2691 = (isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0))) * (_2655 / ((_2659 * _2659) * 3.141590118408203125));
    uint _2705 = _2370 + 9u;
    float _2716 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2410].w)) * _908) * 0.949999988079071044921875);
    float _2717 = _2716 * _2716;
    float _2718 = cbLight._m0[_2410].x + _984;
    float _2719 = cbLight._m0[_2410].y + _985;
    float _2720 = cbLight._m0[_2410].z + _986;
    float _2724 = inversesqrt(dot(vec3(_2718, _2719, _2720), vec3(_2718, _2719, _2720)));
    float _2725 = _2724 * _2718;
    float _2726 = _2724 * _2719;
    float _2727 = _2724 * _2720;
    float _2728 = dot(vec3(_905, _906, _907), vec3(cbLight._m0[_2410].xyz));
    float _4810 = isnan(0.0) ? _2728 : (isnan(_2728) ? 0.0 : max(_2728, 0.0));
    float _2731 = isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0));
    float _2732 = dot(vec3(_905, _906, _907), vec3(_2725, _2726, _2727));
    float _4821 = isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : max(_2732, 0.0));
    float _2735 = isnan(1.0) ? _4821 : (isnan(_4821) ? 1.0 : min(_4821, 1.0));
    float _2736 = dot(vec3(cbLight._m0[_2410].xyz), vec3(_2725, _2726, _2727));
    float _4832 = isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : max(_2736, 0.0));
    float _2740 = _2717 * _2717;
    float _2744 = ((_2735 * _2735) * (_2740 + (-1.0))) + 1.0;
    float _2751 = exp2(log2(1.0 - (isnan(1.0) ? _4832 : (isnan(_4832) ? 1.0 : min(_4832, 1.0)))) * 5.0);
    float _2758 = 1.0 - _2717;
    float _2768 = (0.5 / (((_2646 * ((_2731 * _2758) + _2717)) + 9.9999999392252902907785028219223e-09) + (((_2646 * _2758) + _2717) * _2731))) * _2731;
    float _4843 = isnan(0.0) ? _2768 : (isnan(_2768) ? 0.0 : max(_2768, 0.0));
    float _2770 = (isnan(1.0) ? _4843 : (isnan(_4843) ? 1.0 : min(_4843, 1.0))) * (_2740 / ((_2744 * _2744) * 3.141590118408203125));
    float _2780 = (((((_2751 * _2668) + _1054) * cbLight._m0[_2705].x) * _2770) * _2393) + ((((cbLight._m0[_2617].x * _2359) * ((_2667 * _2668) + _1054)) * _2691) * _2406);
    float _2781 = (((((_2751 * _2670) + _1056) * cbLight._m0[_2705].y) * _2770) * _2393) + ((((cbLight._m0[_2617].y * _2361) * ((_2667 * _2670) + _1056)) * _2691) * _2406);
    float _2782 = (((((_2751 * _2671) + _1057) * cbLight._m0[_2705].z) * _2770) * _2393) + ((((cbLight._m0[_2617].z * _2363) * ((_2667 * _2671) + _1057)) * _2691) * _2406);
    float _2838;
    float _2840;
    float _2842;
    if (_2446)
    {
        _2838 = _2780;
        _2840 = _2781;
        _2842 = _2782;
    }
    else
    {
        uint _2844 = _2370 + 2u;
        uint _2848 = _2370 + 10u;
        float _2862 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2844].w)) * _908) * 0.949999988079071044921875);
        float _2863 = _2862 * _2862;
        float _2864 = cbLight._m0[_2844].x + _984;
        float _2865 = cbLight._m0[_2844].y + _985;
        float _2866 = cbLight._m0[_2844].z + _986;
        float _2870 = inversesqrt(dot(vec3(_2864, _2865, _2866), vec3(_2864, _2865, _2866)));
        float _2871 = _2870 * _2864;
        float _2872 = _2870 * _2865;
        float _2873 = _2870 * _2866;
        float _2874 = dot(vec3(_905, _906, _907), vec3(cbLight._m0[_2844].xyz));
        float _4854 = isnan(0.0) ? _2874 : (isnan(_2874) ? 0.0 : max(_2874, 0.0));
        float _2877 = isnan(1.0) ? _4854 : (isnan(_4854) ? 1.0 : min(_4854, 1.0));
        float _2878 = dot(vec3(_905, _906, _907), vec3(_2871, _2872, _2873));
        float _4865 = isnan(0.0) ? _2878 : (isnan(_2878) ? 0.0 : max(_2878, 0.0));
        float _2881 = isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0));
        float _2882 = dot(vec3(cbLight._m0[_2844].xyz), vec3(_2871, _2872, _2873));
        float _4876 = isnan(0.0) ? _2882 : (isnan(_2882) ? 0.0 : max(_2882, 0.0));
        float _2886 = _2863 * _2863;
        float _2890 = ((_2881 * _2881) * (_2886 + (-1.0))) + 1.0;
        float _2897 = exp2(log2(1.0 - (isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0)))) * 5.0);
        float _2904 = 1.0 - _2863;
        float _2914 = (0.5 / (((_2646 * ((_2877 * _2904) + _2863)) + 9.9999999392252902907785028219223e-09) + (((_2646 * _2904) + _2863) * _2877))) * _2877;
        float _4887 = isnan(0.0) ? _2914 : (isnan(_2914) ? 0.0 : max(_2914, 0.0));
        float _2916 = (isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0))) * (_2886 / ((_2890 * _2890) * 3.141590118408203125));
        float _2917 = isnan(1.0) ? _2385 : (isnan(_2385) ? 1.0 : min(_2385, 1.0));
        _2838 = (((((_2897 * _2668) + _1054) * cbLight._m0[_2848].x) * _2916) * _2917) + _2780;
        _2840 = (((((_2897 * _2670) + _1056) * cbLight._m0[_2848].y) * _2916) * _2917) + _2781;
        _2842 = (((((_2897 * _2671) + _1057) * cbLight._m0[_2848].z) * _2916) * _2917) + _2782;
    }
    float _2948;
    float _2950;
    float _2952;
    if (_2555)
    {
        _2948 = _2838;
        _2950 = _2840;
        _2952 = _2842;
    }
    else
    {
        uint _2959 = _2370 + 3u;
        uint _2963 = _2370 + 11u;
        float _2977 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2959].w)) * _908) * 0.949999988079071044921875);
        float _2978 = _2977 * _2977;
        float _2979 = cbLight._m0[_2959].x + _984;
        float _2980 = cbLight._m0[_2959].y + _985;
        float _2981 = cbLight._m0[_2959].z + _986;
        float _2985 = inversesqrt(dot(vec3(_2979, _2980, _2981), vec3(_2979, _2980, _2981)));
        float _2986 = _2985 * _2979;
        float _2987 = _2985 * _2980;
        float _2988 = _2985 * _2981;
        float _2989 = dot(vec3(_905, _906, _907), vec3(cbLight._m0[_2959].xyz));
        float _4903 = isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : max(_2989, 0.0));
        float _2992 = isnan(1.0) ? _4903 : (isnan(_4903) ? 1.0 : min(_4903, 1.0));
        float _2993 = dot(vec3(_905, _906, _907), vec3(_2986, _2987, _2988));
        float _4914 = isnan(0.0) ? _2993 : (isnan(_2993) ? 0.0 : max(_2993, 0.0));
        float _2996 = isnan(1.0) ? _4914 : (isnan(_4914) ? 1.0 : min(_4914, 1.0));
        float _2997 = dot(vec3(cbLight._m0[_2959].xyz), vec3(_2986, _2987, _2988));
        float _4925 = isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : max(_2997, 0.0));
        float _3001 = _2978 * _2978;
        float _3005 = ((_2996 * _2996) * (_3001 + (-1.0))) + 1.0;
        float _3012 = exp2(log2(1.0 - (isnan(1.0) ? _4925 : (isnan(_4925) ? 1.0 : min(_4925, 1.0)))) * 5.0);
        float _3019 = 1.0 - _2978;
        float _3029 = (0.5 / (((_2646 * ((_2992 * _3019) + _2978)) + 9.9999999392252902907785028219223e-09) + (((_2646 * _3019) + _2978) * _2992))) * _2992;
        float _4936 = isnan(0.0) ? _3029 : (isnan(_3029) ? 0.0 : max(_3029, 0.0));
        float _3031 = (isnan(1.0) ? _4936 : (isnan(_4936) ? 1.0 : min(_4936, 1.0))) * (_3001 / ((_3005 * _3005) * 3.141590118408203125));
        float _3032 = isnan(1.0) ? _2386 : (isnan(_2386) ? 1.0 : min(_2386, 1.0));
        _2948 = (((((_3012 * _2668) + _1054) * cbLight._m0[_2963].x) * _3031) * _3032) + _2838;
        _2950 = (((((_3012 * _2670) + _1056) * cbLight._m0[_2963].y) * _3031) * _3032) + _2840;
        _2952 = (((((_3012 * _2671) + _1057) * cbLight._m0[_2963].z) * _3031) * _3032) + _2842;
    }
    float _3098;
    float _3100;
    float _3102;
    float _3104;
    float _3106;
    float _3108;
    if (_2368.y == 0u)
    {
        uvec4 _3053 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3054 = _3053.x;
        uint _3065 = uint((float(_3053.y) * floor(float(uint(cbSceneParam._m0[85u].y * _993) / _3054))) + floor(float(uint(cbSceneParam._m0[85u].x * _992) / _3054)));
        float _3075 = (log2(_2146 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3076 = isnan(0.0) ? _3075 : (isnan(_3075) ? 0.0 : max(_3075, 0.0));
        uint _3079 = uint(isnan(14.0) ? _3076 : (isnan(_3076) ? 14.0 : min(_3076, 14.0)));
        uvec4 _3084 = texelFetch(g_lightClusterGridBuffer, int(((_3079 << 2u) + (_3065 << 6u)) >> 2u));
        uint _3085 = _3084.x;
        uint _3086 = _3053.z;
        float _3165;
        float _3167;
        float _3169;
        float _3171;
        float _3173;
        float _3175;
        if (((((1u << ((_3086 >> 4u) & 15u)) + 4294967295u) & _3085) == 0u) || ((_3086 & 240u) == 0u))
        {
            _3165 = 0.0;
            _3167 = 0.0;
            _3169 = 0.0;
            _3171 = 0.0;
            _3173 = 0.0;
            _3175 = 0.0;
        }
        else
        {
            float _3166;
            float _3168;
            float _3170;
            float _3172;
            float _3174;
            float _3176;
            float _3309 = 0.0;
            float _3310 = 0.0;
            float _3311 = 0.0;
            float _3312 = 0.0;
            float _3313 = 0.0;
            float _3314 = 0.0;
            uint _3315 = 0u;
            uint _3324;
            bool _3325;
            for (;;)
            {
                _3324 = texelFetch(g_lightClassification, int((((_3079 << 5u) + (_3065 << 9u)) + (_3315 << 2u)) >> 2u)).x;
                _3325 = _3324 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3325)
                {
                    frontier_phi_66_pred = _3314;
                    frontier_phi_66_pred_1 = _3313;
                    frontier_phi_66_pred_2 = _3312;
                    frontier_phi_66_pred_3 = _3311;
                    frontier_phi_66_pred_4 = _3310;
                    frontier_phi_66_pred_5 = _3309;
                }
                else
                {
                    float _3433;
                    float _3434;
                    float _3435;
                    float _3436;
                    float _3437;
                    float _3438;
                    uint _3439;
                    _3433 = _3309;
                    _3434 = _3310;
                    _3435 = _3311;
                    _3436 = _3312;
                    _3437 = _3313;
                    _3438 = _3314;
                    _3439 = _3324;
                    float _3365;
                    float _3366;
                    float _3367;
                    float _3368;
                    float _3369;
                    float _3370;
                    for (;;)
                    {
                        uint _3443 = uint(findLSB(_3439)) + (_3315 << 5u);
                        uint _3440 = (_3439 + 4294967295u) & _3439;
                        uint _3445 = _3443 * 48u;
                        vec4 _3459 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3445)).x, texelFetch(g_PointLightRenderingBuffer, int(_3445 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3445 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3445 + 3u)).x));
                        uint _3465 = (_3443 * 48u) + 4u;
                        vec4 _3478 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3465)).x, texelFetch(g_PointLightRenderingBuffer, int(_3465 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3465 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3465 + 3u)).x));
                        uint _3484 = (_3443 * 48u) + 8u;
                        vec3 _3495 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3484)).x, texelFetch(g_PointLightRenderingBuffer, int(_3484 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3484 + 2u)).x));
                        float _3499 = _3459.x - _2144;
                        float _3500 = _3459.y - _2145;
                        float _3501 = _3459.z - _2146;
                        float _3502 = dot(vec3(_3499, _3500, _3501), vec3(_3499, _3500, _3501));
                        float _3505 = inversesqrt(_3502);
                        float _3506 = _3505 * _3499;
                        float _3507 = _3505 * _3500;
                        float _3508 = _3505 * _3501;
                        float _3509 = dot(vec3(_1011, _1014, _1017), vec3(_3506, _3507, _3508));
                        float _3514 = 1.0 - (_3502 * _3459.w);
                        float _4962 = isnan(0.0) ? _3514 : (isnan(_3514) ? 0.0 : max(_3514, 0.0));
                        float _3515 = isnan(1.0) ? _4962 : (isnan(_4962) ? 1.0 : min(_4962, 1.0));
                        float _3516 = sqrt(_3502) * _3478.w;
                        float _3519 = 1.39999997615814208984375 / (_3516 + 1.39999997615814208984375);
                        float _3520 = _3519 * _3519;
                        float _3523 = ((1.0 - _3520) * _3509) + _3520;
                        float _3526 = _3516 * _3516;
                        float _3530 = ((isnan(0.0) ? _3523 : (isnan(_3523) ? 0.0 : max(_3523, 0.0))) * _3515) / ((_3526 * 0.699999988079071044921875) + 1.0);
                        float _3534 = (-0.0) - _2144;
                        float _3535 = (-0.0) - _2145;
                        float _3536 = (-0.0) - _2146;
                        float _3540 = inversesqrt(dot(vec3(_3534, _3535, _3536), vec3(_3534, _3535, _3536)));
                        float _3541 = _3540 * _3534;
                        float _3542 = _3540 * _3535;
                        float _3543 = _3540 * _3536;
                        float _3550 = exp2(log2(1.0 / ((_3526 * 3.5) + 5.0)) * 0.25);
                        float _3551 = 1.0 - _1086;
                        float _3558 = sqrt(1.0 - ((1.0 - (_3551 * _3551)) * (1.0 - (_3550 * _3550))));
                        float _3559 = _3558 * _3558;
                        float _3560 = _3559 * _3559;
                        float _3561 = _3541 + _3506;
                        float _3562 = _3542 + _3507;
                        float _3563 = _3543 + _3508;
                        float _3567 = inversesqrt(dot(vec3(_3561, _3562, _3563), vec3(_3561, _3562, _3563)));
                        float _3571 = dot(vec3(_1011, _1014, _1017), vec3(_3541, _3542, _3543));
                        float _4978 = isnan(0.0) ? _3571 : (isnan(_3571) ? 0.0 : max(_3571, 0.0));
                        float _3574 = isnan(1.0) ? _4978 : (isnan(_4978) ? 1.0 : min(_4978, 1.0));
                        float _3575 = dot(vec3(_1011, _1014, _1017), vec3(_3567 * _3561, _3567 * _3562, _3567 * _3563));
                        float _4989 = isnan(0.0) ? _3575 : (isnan(_3575) ? 0.0 : max(_3575, 0.0));
                        float _3578 = isnan(1.0) ? _4989 : (isnan(_4989) ? 1.0 : min(_4989, 1.0));
                        float _3582 = ((_3578 * _3578) * (_3560 + (-1.0))) + 1.0;
                        float _3583 = _3519 * _3559;
                        float _3584 = _3583 * _3583;
                        float _3587 = ((1.0 - _3584) * _3509) + _3584;
                        float _5000 = isnan(0.0) ? _3587 : (isnan(_3587) ? 0.0 : max(_3587, 0.0));
                        float _3588 = isnan(1.0) ? _5000 : (isnan(_5000) ? 1.0 : min(_5000, 1.0));
                        float _3589 = 1.0 - _3559;
                        float _3599 = (0.5 / (((_3588 * ((_3574 * _3589) + _3559)) + 9.9999999392252902907785028219223e-09) + (((_3588 * _3589) + _3559) * _3574))) * _3588;
                        float _5011 = isnan(0.0) ? _3599 : (isnan(_3599) ? 0.0 : max(_3599, 0.0));
                        float _3610 = (((_3560 * 3.1415927410125732421875) * (isnan(1.0) ? _5011 : (isnan(_5011) ? 1.0 : min(_5011, 1.0)))) / ((_3582 * _3582) * ((_3526 * 2.1991131305694580078125) + 3.141590118408203125))) * _3515;
                        _3368 = (_3530 * _3478.x) + _3436;
                        _3369 = (_3530 * _3478.y) + _3437;
                        _3370 = (_3530 * _3478.z) + _3438;
                        _3365 = (_3610 * _3495.x) + _3433;
                        _3366 = (_3610 * _3495.y) + _3434;
                        _3367 = (_3610 * _3495.z) + _3435;
                        if (_3440 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3433 = _3365;
                            _3434 = _3366;
                            _3435 = _3367;
                            _3436 = _3368;
                            _3437 = _3369;
                            _3438 = _3370;
                            _3439 = _3440;
                        }
                    }
                    frontier_phi_66_pred = _3370;
                    frontier_phi_66_pred_1 = _3369;
                    frontier_phi_66_pred_2 = _3368;
                    frontier_phi_66_pred_3 = _3367;
                    frontier_phi_66_pred_4 = _3366;
                    frontier_phi_66_pred_5 = _3365;
                }
                _3176 = frontier_phi_66_pred;
                _3174 = frontier_phi_66_pred_1;
                _3172 = frontier_phi_66_pred_2;
                _3170 = frontier_phi_66_pred_3;
                _3168 = frontier_phi_66_pred_4;
                _3166 = frontier_phi_66_pred_5;
                uint _3316 = _3315 + 1u;
                if (_3316 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3309 = _3166;
                    _3310 = _3168;
                    _3311 = _3170;
                    _3312 = _3172;
                    _3313 = _3174;
                    _3314 = _3176;
                    _3315 = _3316;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3165 = _3166;
            _3167 = _3168;
            _3169 = _3170;
            _3171 = _3172;
            _3173 = _3174;
            _3175 = _3176;
        }
        uvec4 _3179 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3180 = _3179.z;
        uint _3182 = (_3180 >> 8u) & 15u;
        float _3277;
        float _3279;
        float _3281;
        float _3283;
        float _3285;
        float _3287;
        if (((4294967295u << _3182) & _3085) == 0u)
        {
            _3277 = _3165;
            _3279 = _3167;
            _3281 = _3169;
            _3283 = _3171;
            _3285 = _3173;
            _3287 = _3175;
        }
        else
        {
            float _3302 = inversesqrt(dot(vec3(_2144, _2145, _2146), vec3(_2144, _2145, _2146)));
            float _3303 = _3302 * _2144;
            float _3304 = _3302 * _2145;
            float _3305 = _3302 * _2146;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3182 < ((_3180 >> 12u) & 15u))
            {
                float _3278;
                float _3280;
                float _3282;
                float _3284;
                float _3286;
                float _3288;
                float _3416 = _3165;
                float _3417 = _3167;
                float _3418 = _3169;
                float _3419 = _3171;
                float _3420 = _3173;
                float _3421 = _3175;
                uint _3422 = _3182;
                uint _3431;
                bool _3432;
                for (;;)
                {
                    _3431 = texelFetch(g_lightClassification, int((((_3079 << 5u) + (_3065 << 9u)) + (_3422 << 2u)) >> 2u)).x;
                    _3432 = _3431 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3432)
                    {
                        frontier_phi_72_pred = _3421;
                        frontier_phi_72_pred_1 = _3420;
                        frontier_phi_72_pred_2 = _3419;
                        frontier_phi_72_pred_3 = _3418;
                        frontier_phi_72_pred_4 = _3417;
                        frontier_phi_72_pred_5 = _3416;
                    }
                    else
                    {
                        float _3615;
                        float _3616;
                        float _3617;
                        float _3618;
                        float _3619;
                        float _3620;
                        float _3908;
                        float _3909;
                        float _3910;
                        float _3911;
                        float _3912;
                        float _3913;
                        float _3628 = _3416;
                        float _3629 = _3417;
                        float _3630 = _3418;
                        float _3631 = _3419;
                        float _3632 = _3420;
                        float _3633 = _3421;
                        uint _3634 = _3431;
                        uint _3635;
                        vec4 _3660;
                        float _3661;
                        vec4 _3676;
                        vec3 _3688;
                        vec4 _3703;
                        vec4 _3718;
                        float _3764;
                        bool _3765;
                        for (;;)
                        {
                            uint _3645 = ((_3422 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3634));
                            _3635 = (_3634 + 4294967295u) & _3634;
                            uint _3647 = _3645 * 40u;
                            _3660 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3647)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3647 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3647 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3647 + 3u)).x));
                            _3661 = _3660.w;
                            uint _3663 = (_3645 * 40u) + 4u;
                            _3676 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3663)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3663 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3663 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3663 + 3u)).x));
                            uint _3678 = (_3645 * 40u) + 8u;
                            _3688 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3678)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3678 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3678 + 2u)).x));
                            uint _3690 = (_3645 * 40u) + 16u;
                            _3703 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3690)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3690 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3690 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3690 + 3u)).x));
                            uint _3705 = (_3645 * 40u) + 20u;
                            _3718 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3705)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3705 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3705 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3705 + 3u)).x));
                            uint _3720 = (_3645 * 40u) + 24u;
                            vec4 _3733 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3720)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3720 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3720 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3720 + 3u)).x));
                            uint _3739 = (_3645 * 40u) + 28u;
                            vec4 _3752 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3739)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3739 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3739 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3739 + 3u)).x));
                            _3764 = fma(_2146, _3752.z, fma(_2145, _3752.y, _3752.x * _2144)) + _3752.w;
                            _3765 = !((fma(_2146, _3733.z, fma(_2145, _3733.y, _3733.x * _2144)) + _3733.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3765)
                            {
                                float _3792 = _3660.x - _2144;
                                float _3793 = _3660.y - _2145;
                                float _3794 = _3660.z - _2146;
                                float _3795 = dot(vec3(_3792, _3793, _3794), vec3(_3792, _3793, _3794));
                                float _3798 = inversesqrt(_3795);
                                float _3799 = _3798 * _3792;
                                float _3800 = _3798 * _3793;
                                float _3801 = _3798 * _3794;
                                float _3805 = 1.0 - (_3795 / (_3661 * _3661));
                                float _5022 = isnan(0.0) ? _3805 : (isnan(_3805) ? 0.0 : max(_3805, 0.0));
                                float _3806 = isnan(1.0) ? _5022 : (isnan(_5022) ? 1.0 : min(_5022, 1.0));
                                float _3810 = sqrt(_3795) * _3676.w;
                                float _3812 = 1.39999997615814208984375 / (_3810 + 1.39999997615814208984375);
                                float _3813 = _3812 * _3812;
                                float _3816 = ((1.0 - _3813) * dot(vec3(_3799, _3800, _3801), vec3(_1011, _1014, _1017))) + _3813;
                                float _3819 = _3810 * _3810;
                                float _3823 = (fma(_2146, _3703.z, fma(_2145, _3703.y, _3703.x * _2144)) + _3703.w) / _3764;
                                float _3824 = (fma(_2146, _3718.z, fma(_2145, _3718.y, _3718.x * _2144)) + _3718.w) / _3764;
                                float _3828 = 1.0 - dot(vec2(_3823, _3824), vec2(_3823, _3824));
                                float _5038 = isnan(0.0) ? _3828 : (isnan(_3828) ? 0.0 : max(_3828, 0.0));
                                float _3829 = isnan(1.0) ? _5038 : (isnan(_5038) ? 1.0 : min(_5038, 1.0));
                                float _3830 = _3829 * (((isnan(0.0) ? _3816 : (isnan(_3816) ? 0.0 : max(_3816, 0.0))) * _3806) / ((_3819 * 0.699999988079071044921875) + 1.0));
                                float _3842 = exp2(log2(1.0 / ((_3819 * 3.5) + 5.0)) * 0.25);
                                float _3843 = 1.0 - _1086;
                                float _3850 = sqrt(1.0 - ((1.0 - (_3843 * _3843)) * (1.0 - (_3842 * _3842))));
                                float _3851 = _3850 * _3850;
                                float _3852 = _3851 * _3851;
                                float _3853 = _3799 - _3303;
                                float _3854 = _3800 - _3304;
                                float _3855 = _3801 - _3305;
                                float _3859 = inversesqrt(dot(vec3(_3853, _3854, _3855), vec3(_3853, _3854, _3855)));
                                float _3863 = dot(vec3(_1011, _1014, _1017), vec3((-0.0) - _3303, (-0.0) - _3304, (-0.0) - _3305));
                                float _5049 = isnan(0.0) ? _3863 : (isnan(_3863) ? 0.0 : max(_3863, 0.0));
                                float _3866 = isnan(1.0) ? _5049 : (isnan(_5049) ? 1.0 : min(_5049, 1.0));
                                float _3867 = dot(vec3(_1011, _1014, _1017), vec3(_3859 * _3853, _3859 * _3854, _3859 * _3855));
                                float _5060 = isnan(0.0) ? _3867 : (isnan(_3867) ? 0.0 : max(_3867, 0.0));
                                float _3870 = isnan(1.0) ? _5060 : (isnan(_5060) ? 1.0 : min(_5060, 1.0));
                                float _3874 = ((_3870 * _3870) * (_3852 + (-1.0))) + 1.0;
                                float _3875 = _3812 * _3851;
                                float _3876 = _3875 * _3875;
                                float _3882 = ((1.0 - _3876) * dot(vec3(_1011, _1014, _1017), vec3(_3799, _3800, _3801))) + _3876;
                                float _5071 = isnan(0.0) ? _3882 : (isnan(_3882) ? 0.0 : max(_3882, 0.0));
                                float _3883 = isnan(1.0) ? _5071 : (isnan(_5071) ? 1.0 : min(_5071, 1.0));
                                float _3884 = 1.0 - _3851;
                                float _3894 = (0.5 / (((_3883 * ((_3866 * _3884) + _3851)) + 9.9999999392252902907785028219223e-09) + (((_3883 * _3884) + _3851) * _3866))) * _3883;
                                float _5082 = isnan(0.0) ? _3894 : (isnan(_3894) ? 0.0 : max(_3894, 0.0));
                                float _3904 = (_3829 * _3806) * (((_3852 * 3.1415927410125732421875) * (isnan(1.0) ? _5082 : (isnan(_5082) ? 1.0 : min(_5082, 1.0)))) / ((_3874 * _3874) * ((_3819 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3830 * _3676.y;
                                frontier_phi_78_pred_1 = _3830 * _3676.x;
                                frontier_phi_78_pred_2 = _3904 * _3688.z;
                                frontier_phi_78_pred_3 = _3904 * _3688.y;
                                frontier_phi_78_pred_4 = _3904 * _3688.x;
                                frontier_phi_78_pred_5 = _3830 * _3676.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3912 = frontier_phi_78_pred;
                            _3911 = frontier_phi_78_pred_1;
                            _3910 = frontier_phi_78_pred_2;
                            _3909 = frontier_phi_78_pred_3;
                            _3908 = frontier_phi_78_pred_4;
                            _3913 = frontier_phi_78_pred_5;
                            _3618 = _3911 + _3631;
                            _3619 = _3912 + _3632;
                            _3620 = _3913 + _3633;
                            _3615 = _3908 + _3628;
                            _3616 = _3909 + _3629;
                            _3617 = _3910 + _3630;
                            if (_3635 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3628 = _3615;
                                _3629 = _3616;
                                _3630 = _3617;
                                _3631 = _3618;
                                _3632 = _3619;
                                _3633 = _3620;
                                _3634 = _3635;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3620;
                        frontier_phi_72_pred_1 = _3619;
                        frontier_phi_72_pred_2 = _3618;
                        frontier_phi_72_pred_3 = _3617;
                        frontier_phi_72_pred_4 = _3616;
                        frontier_phi_72_pred_5 = _3615;
                    }
                    _3288 = frontier_phi_72_pred;
                    _3286 = frontier_phi_72_pred_1;
                    _3284 = frontier_phi_72_pred_2;
                    _3282 = frontier_phi_72_pred_3;
                    _3280 = frontier_phi_72_pred_4;
                    _3278 = frontier_phi_72_pred_5;
                    uint _3423 = _3422 + 1u;
                    if (_3423 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3416 = _3278;
                        _3417 = _3280;
                        _3418 = _3282;
                        _3419 = _3284;
                        _3420 = _3286;
                        _3421 = _3288;
                        _3422 = _3423;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3288;
                frontier_phi_60_61_ladder_1 = _3286;
                frontier_phi_60_61_ladder_2 = _3282;
                frontier_phi_60_61_ladder_3 = _3280;
                frontier_phi_60_61_ladder_4 = _3278;
                frontier_phi_60_61_ladder_5 = _3284;
            }
            else
            {
                frontier_phi_60_61_ladder = _3175;
                frontier_phi_60_61_ladder_1 = _3173;
                frontier_phi_60_61_ladder_2 = _3169;
                frontier_phi_60_61_ladder_3 = _3167;
                frontier_phi_60_61_ladder_4 = _3165;
                frontier_phi_60_61_ladder_5 = _3171;
            }
            _3277 = frontier_phi_60_61_ladder_4;
            _3279 = frontier_phi_60_61_ladder_3;
            _3281 = frontier_phi_60_61_ladder_2;
            _3283 = frontier_phi_60_61_ladder_5;
            _3285 = frontier_phi_60_61_ladder_1;
            _3287 = frontier_phi_60_61_ladder;
        }
        float _3292 = isnan(1.0) ? _1070 : (isnan(_1070) ? 1.0 : min(_1070, 1.0));
        _3098 = (_3292 * _3283) + _2610;
        _3100 = (_3292 * _3285) + _2612;
        _3102 = (_3292 * _3287) + _2614;
        _3104 = ((_3277 * _1054) * _3292) + _2948;
        _3106 = ((_3279 * _1056) * _3292) + _2950;
        _3108 = ((_3281 * _1057) * _3292) + _2952;
    }
    else
    {
        _3098 = _2610;
        _3100 = _2612;
        _3102 = _2614;
        _3104 = _2948;
        _3106 = _2950;
        _3108 = _2952;
    }
    float _5098 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
    float _5109 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
    float _5120 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
    uint _3128 = _285 + 6u;
    float _3136 = _992 / cbSceneParam._m0[86u].x;
    float _3137 = _993 / cbSceneParam._m0[86u].y;
    vec4 _3151 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3136, _3137, (log2((isnan(cbSceneParam._m0[77u].w) ? _927 : (isnan(_927) ? cbSceneParam._m0[77u].w : min(_927, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3153 = _3151.x;
    float _3154 = _3151.y;
    float _3155 = _3151.z;
    float _3156 = _3151.w;
    float _3227;
    float _3229;
    float _3231;
    float _3233;
    if (_927 > cbSceneParam._m0[78u].w)
    {
        float _3190 = isnan(_927) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _927 : min(cbSceneParam._m0[80u].w, _927));
        float _3191 = _3190 / _927;
        float _3202 = _3191 * _977;
        float _3203 = _978 * _3191;
        float _3204 = (-0.0) - _3203;
        float _3205 = _3191 * _979;
        float _3207 = (cbSceneParam._m0[77u].w * _3204) / _3190;
        float _3208 = _3207 + cbSceneParam._m0[79u].w;
        float _3209 = cbSceneParam._m0[79u].w - _3203;
        float _3215 = sqrt(((_3202 * _3202) + (_3203 * _3203)) + (_3205 * _3205));
        float _3218 = (1.0 - (cbSceneParam._m0[77u].w / _3190)) * _3215;
        float _3223 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3225 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3378;
        if (abs((_3204 - _3207) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3378 = ((((_3208 > 0.0) ? exp2(_3223 * _3208) : (2.0 - exp2(_3225 * _3208))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3218;
        }
        else
        {
            float _3338 = 1.0 / cbSceneParam._m0[80u].x;
            float _3339 = isnan(_3209) ? _3208 : (isnan(_3208) ? _3209 : max(_3208, _3209));
            float _3340 = isnan(_3209) ? _3208 : (isnan(_3208) ? _3209 : min(_3208, _3209));
            float _3349 = isnan(0.0) ? _3339 : (isnan(_3339) ? 0.0 : min(_3339, 0.0));
            float _3350 = isnan(0.0) ? _3340 : (isnan(_3340) ? 0.0 : min(_3340, 0.0));
            _3378 = ((abs(_3215 / _3204) * cbSceneParam._m0[80u].y) * ((((_3349 - _3350) * 2.0) - ((exp2(_3223 * (isnan(0.0) ? _3339 : (isnan(_3339) ? 0.0 : max(_3339, 0.0)))) - exp2(_3223 * (isnan(0.0) ? _3340 : (isnan(_3340) ? 0.0 : max(_3340, 0.0))))) * _3338)) - ((exp2(_3225 * _3349) - exp2(_3225 * _3350)) * _3338))) + (_3218 * cbSceneParam._m0[80u].z);
        }
        vec4 _3380 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3136, _3137, 1.0), 0.0);
        float _3389 = exp2((_3378 * (-1.44269502162933349609375)) * (1.0 - _3380.w));
        float _3390 = log2(_3389);
        float _3406 = log2(_3156);
        _3227 = (exp2(_3406 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3390 * cbSceneParam._m0[78u].x)) * _3380.x) / cbSceneParam._m0[78u].x)) + _3153;
        _3229 = (exp2(_3406 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3390 * cbSceneParam._m0[78u].y)) * _3380.y) / cbSceneParam._m0[78u].y)) + _3154;
        _3231 = (exp2(_3406 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3390 * cbSceneParam._m0[78u].z)) * _3380.z) / cbSceneParam._m0[78u].z)) + _3155;
        _3233 = _3389 * _3156;
    }
    else
    {
        _3227 = _3153;
        _3229 = _3154;
        _3231 = _3155;
        _3233 = _3156;
    }
    float _3245 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3246 = _3245 == 3.0;
    float _3247 = log2(_3233);
    float _3254 = exp2(_3247 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5098 : (isnan(_5098) ? 1.0 : min(_5098, 1.0))) * (_3098 + ((isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0))) * _1070))) + ((_3104 + ((isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0))) * _1878)) * cbPerFrame._m0[3u].x));
    float _3255 = exp2(_3247 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5109 : (isnan(_5109) ? 1.0 : min(_5109, 1.0))) * (_3100 + ((isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0))) * _1070))) + ((_3106 + ((isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0))) * _1878)) * cbPerFrame._m0[3u].x));
    float _3256 = exp2(_3247 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5120 : (isnan(_5120) ? 1.0 : min(_5120, 1.0))) * (_3102 + ((isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0))) * _1070))) + ((_3108 + ((isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0))) * _1878)) * cbPerFrame._m0[3u].x));
    float _3265 = (_3245 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3265 * (_3246 ? _3254 : (_3254 + (cbSceneParam._m0[72u].w * _3227)));
    SV_Target.y = _3265 * (_3246 ? _3255 : (_3255 + (cbSceneParam._m0[72u].w * _3229)));
    SV_Target.z = _3265 * (_3246 ? _3256 : (_3256 + (cbSceneParam._m0[72u].w * _3231)));
    SV_Target.w = cbInstanceData._m0[_3128].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3128].w;
}


