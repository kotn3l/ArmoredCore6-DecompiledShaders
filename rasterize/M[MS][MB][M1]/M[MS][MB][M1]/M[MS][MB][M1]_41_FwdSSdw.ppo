#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1123;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _211 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _212 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _213 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _219 = inversesqrt(dot(vec3(_211, _212, _213), vec3(_211, _212, _213)));
    float _226 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _233 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _239 = uint(roundEven(NORMAL.w)) * 13u;
    uint _244 = _239 + 1u;
    uint _248 = _239 + 2u;
    float _257 = sqrt(((cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x) + (cbInstanceData._m0[_239].x * cbInstanceData._m0[_239].x)) + (cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x));
    float _258 = _257 * TEXCOORD.z;
    float _259 = _257 * TEXCOORD.w;
    vec4 _278 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _284 = _278.x * cbMtdParam._m0[9u].x;
    float _285 = _278.y * cbMtdParam._m0[9u].y;
    float _286 = _278.z * cbMtdParam._m0[9u].z;
    vec4 _305 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _258) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _259) + cbTextureTilingScale._m0[14u].w));
    vec4 _325 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _329 = _325.z;
    float _334 = (_325.x * 2.0) + (-1.0);
    float _336 = (_325.y * 2.0) + (-1.0);
    float _337 = dot(vec2(_334, _336), vec2(_334, _336));
    float _3475 = isnan(0.0) ? _337 : (isnan(_337) ? 0.0 : max(_337, 0.0));
    float _343 = sqrt(1.0 - (isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0))));
    vec4 _360 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _258) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _259) + cbTextureTilingScale._m0[11u].w));
    float _362 = _360.x;
    float _363 = 1.0 - _362;
    float _372 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _375 = ((isnan(0.0) ? _372 : (isnan(_372) ? 0.0 : min(_372, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _384 = (_375 - ((((((_362 - _363) * cbMtdParam._m0[24u].z) + _363) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _375))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3496 = isnan(0.0) ? _384 : (isnan(_384) ? 0.0 : max(_384, 0.0));
    float _385 = isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0));
    float _392 = (_385 * ((_305.x * cbMtdParam._m0[18u].x) - _284)) + _284;
    float _393 = (_385 * ((_305.y * cbMtdParam._m0[18u].y) - _285)) + _285;
    float _394 = (_385 * ((_305.z * cbMtdParam._m0[18u].z) - _286)) + _286;
    vec4 _407 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _258) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _259) + cbTextureTilingScale._m0[19u].w));
    float _409 = _407.x;
    float _410 = 1.0 - _409;
    float _439 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_409 - _410) * cbMtdParam._m0[24u].w) + _410) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3507 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _440 = isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0));
    float _448 = ((((cbMtdParam._m0[10u].x - _392) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _440) + _392;
    float _449 = ((((cbMtdParam._m0[10u].y - _393) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _440) + _393;
    float _450 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _394)) * _440) + _394;
    vec4 _463 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _465 = _463.x;
    float _467 = _465 - (_465 * _385);
    float _469 = _467 - (_467 * _440);
    vec4 _483 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _258) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _259) + cbTextureTilingScale._m0[15u].w));
    float _490 = (_483.x * 2.0) + (-1.0);
    float _491 = (_483.y * 2.0) + (-1.0);
    float _492 = dot(vec2(_490, _491), vec2(_490, _491));
    float _3518 = isnan(0.0) ? _492 : (isnan(_492) ? 0.0 : max(_492, 0.0));
    float _500 = (_385 * (_483.z - _329)) + _329;
    float _503 = ((cbMtdParam._m0[23u].y - _500) * _440) + _500;
    vec4 _525 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _258) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _259) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _531 = (_525.x * 2.0) + (-1.0);
    float _532 = (_525.y * 2.0) + (-1.0);
    float _533 = dot(vec2(_531, _532), vec2(_531, _532));
    float _3529 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _550 = (((_490 - _334) + (cbMtdParam._m0[21u].x * _334)) * _385) + _334;
    float _551 = (((_491 - _336) + (cbMtdParam._m0[21u].x * _336)) * _385) + _336;
    float _552 = (_385 * (sqrt(1.0 - (isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0)))) - _343)) + _343;
    float _563 = (((_531 - _550) + (_550 * cbMtdParam._m0[22u].z)) * _440) + _550;
    float _564 = (((_532 - _551) + (_551 * cbMtdParam._m0[22u].z)) * _440) + _551;
    float _565 = ((sqrt(1.0 - (isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0)))) - _552) * _440) + _552;
    float _567 = cbMtdParam._m0[22u].x + _325.w;
    float _570 = fma(_565, _226 * NORMAL.x, fma(_564, _233 * TANGENT.x, (_219 * _211) * _563));
    float _573 = fma(_565, _226 * NORMAL.y, fma(_564, _233 * TANGENT.y, (_219 * _212) * _563));
    float _576 = fma(_565, _226 * NORMAL.z, fma(_564, _233 * TANGENT.z, (_219 * _213) * _563));
    float _580 = inversesqrt(dot(vec3(_570, _573, _576), vec3(_570, _573, _576)));
    float _581 = _580 * _570;
    float _582 = _580 * _573;
    float _583 = _580 * _576;
    float _3540 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _584 = isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0));
    float _3551 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _3562 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _3573 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _3584 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _3595 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _589 = isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0));
    float _603 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _643 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _653 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _643);
    float _654 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _643);
    float _655 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _643);
    float _659 = inversesqrt(dot(vec3(_653, _654, _655), vec3(_653, _654, _655)));
    float _660 = _653 * _659;
    float _661 = _654 * _659;
    float _662 = _655 * _659;
    float _668 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _669 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _690 = fma(_583, cbSceneParam._m0[5u].z, fma(_582, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _581));
    float _693 = fma(_583, cbSceneParam._m0[6u].z, fma(_582, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _581));
    float _696 = fma(_583, cbSceneParam._m0[7u].z, fma(_582, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _581));
    uint _710 = (_239 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _716 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0)))) * cbInstanceData._m0[_710].x;
    float _717 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0)))) * cbInstanceData._m0[_710].y;
    float _718 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0)))) * cbInstanceData._m0[_710].z;
    float _3606 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
    float _719 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
    float _3617 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
    float _720 = isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0));
    float _3628 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
    float _721 = isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0));
    float _722 = 1.0 - _589;
    float _723 = _719 * _722;
    float _724 = _720 * _722;
    float _725 = _721 * _722;
    float _730 = (_719 + (-0.039999999105930328369140625)) * _589;
    float _731 = (_720 + (-0.039999999105930328369140625)) * _589;
    float _732 = (_721 + (-0.039999999105930328369140625)) * _589;
    float _733 = _730 + 0.039999999105930328369140625;
    float _735 = _731 + 0.039999999105930328369140625;
    float _736 = _732 + 0.039999999105930328369140625;
    vec4 _745 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _668, cbSceneParam._m0[86u].y * _669));
    float _749 = ((isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0))) * TEXCOORD_5.w) * _745.x;
    float _750 = dot(vec3(_581, _582, _583), vec3(_660, _661, _662));
    float _753 = _750 * 2.0;
    float _757 = (_753 * _581) - _660;
    float _758 = (_753 * _582) - _661;
    float _759 = (_753 * _583) - _662;
    float _763 = abs(dot(vec3(_660, _661, _662), vec3(_581, _582, _583)));
    float _3639 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
    float _765 = sqrt(_584);
    float _778 = exp2((_765 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_765 * 3.0));
    float _784 = (1.0 - _778) * ((_765 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _785 = _778 * _765;
    float _813 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _817 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _821 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1122;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    float _1133;
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _847 = fma(_821, cbModelParam._m0[26u].z, fma(_817, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _813));
        float _851 = fma(_821, cbModelParam._m0[27u].z, fma(_817, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _813));
        float _855 = fma(_821, cbModelParam._m0[28u].z, fma(_817, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _813));
        float _880 = _813 + _581;
        float _881 = _817 + _582;
        float _882 = _821 + _583;
        float _892 = fma(_882, cbModelParam._m0[26u].z, fma(_881, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _880)) - _847;
        float _893 = fma(_882, cbModelParam._m0[27u].z, fma(_881, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _880)) - _851;
        float _894 = fma(_882, cbModelParam._m0[28u].z, fma(_881, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _880)) - _855;
        float _898 = inversesqrt(dot(vec3(_892, _893, _894), vec3(_892, _893, _894)));
        float _911 = ((_898 * _892) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_847 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _912 = ((_898 * _893) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_851 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _913 = ((_898 * _894) / cbModelParam._m0[34u].z) + ((((((_855 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _916 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_911, _912, _913), 0.0);
        vec4 _923 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_911, _912, _913), 0.0);
        vec4 _930 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_911, _912, _913), 0.0);
        vec4 _937 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_911, _912, _913), 0.0);
        float _950 = exp2((_916.w + (-0.5)) * 20.0) * 2.0;
        float _951 = _950 * (_916.x + (-0.5));
        float _952 = _950 * (_916.y + (-0.5));
        float _953 = _950 * (_916.z + (-0.5));
        float _960 = exp2((_923.w + (-0.5)) * 20.0) * 2.0;
        float _961 = _960 * (_923.x + (-0.5));
        float _962 = _960 * (_923.y + (-0.5));
        float _963 = _960 * (_923.z + (-0.5));
        float _970 = exp2((_930.w + (-0.5)) * 20.0) * 2.0;
        float _971 = _970 * (_930.x + (-0.5));
        float _972 = _970 * (_930.y + (-0.5));
        float _973 = _970 * (_930.z + (-0.5));
        float _980 = exp2((_937.w + (-0.5)) * 20.0) * 2.0;
        float _981 = _980 * (_937.x + (-0.5));
        float _982 = _980 * (_937.y + (-0.5));
        float _983 = _980 * (_937.z + (-0.5));
        float _984 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
        float _985 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _986 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _987 = _951 * 0.5;
        float _988 = _961 * 0.5;
        float _989 = _971 * 0.5;
        float _990 = dot(vec3(_987, _988, _989), vec3(_987, _988, _989));
        float _995 = (_990 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_990);
        float _1004 = (dot(vec3(_581, _582, _583), vec3(_995 * _987, _995 * _988, _995 * _989)) + 1.0) * 0.5;
        float _3665 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1014 = sqrt(((_988 * _988) + (_987 * _987)) + (_989 * _989)) / (_984 + 9.9999997473787516355514526367188e-06);
        float _3676 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1015 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
        float _1016 = _1015 * 2.0;
        float _1020 = (1.0 - _1015) / (_1015 + 1.0);
        float _3687 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1021 = isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0));
        float _1030 = ((((1.0 - _1021) * (_1016 + 2.0)) * exp2(log2(isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0))) * (_1016 + 1.0))) + _1021) * _984;
        float _1031 = _952 * 0.5;
        float _1032 = _962 * 0.5;
        float _1033 = _972 * 0.5;
        float _1034 = dot(vec3(_1031, _1032, _1033), vec3(_1031, _1032, _1033));
        float _1039 = (_1034 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1034);
        float _1047 = (dot(vec3(_581, _582, _583), vec3(_1039 * _1031, _1039 * _1032, _1039 * _1033)) + 1.0) * 0.5;
        float _3698 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1056 = sqrt(((_1032 * _1032) + (_1031 * _1031)) + (_1033 * _1033)) / (_985 + 9.9999997473787516355514526367188e-06);
        float _3709 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1057 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
        float _1058 = _1057 * 2.0;
        float _1062 = (1.0 - _1057) / (_1057 + 1.0);
        float _3720 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1063 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
        float _1072 = ((((1.0 - _1063) * (_1058 + 2.0)) * exp2(log2(isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0))) * (_1058 + 1.0))) + _1063) * _985;
        float _1073 = _953 * 0.5;
        float _1074 = _963 * 0.5;
        float _1075 = _973 * 0.5;
        float _1076 = dot(vec3(_1073, _1074, _1075), vec3(_1073, _1074, _1075));
        float _1081 = (_1076 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1076);
        float _1089 = (dot(vec3(_581, _582, _583), vec3(_1081 * _1073, _1081 * _1074, _1081 * _1075)) + 1.0) * 0.5;
        float _3731 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1098 = sqrt(((_1074 * _1074) + (_1073 * _1073)) + (_1075 * _1075)) / (_986 + 9.9999997473787516355514526367188e-06);
        float _3742 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1099 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
        float _1100 = _1099 * 2.0;
        float _1104 = (1.0 - _1099) / (_1099 + 1.0);
        float _3753 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1105 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
        float _1114 = ((((1.0 - _1105) * (_1100 + 2.0)) * exp2(log2(isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0))) * (_1100 + 1.0))) + _1105) * _986;
        _1122 = _953;
        _1124 = _952;
        _1125 = _951;
        _1126 = _963;
        _1127 = _962;
        _1128 = _961;
        _1129 = _973;
        _1130 = _972;
        _1131 = _971;
        _1132 = _986;
        _1133 = _985;
        _1134 = _984;
        _1135 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0)));
        _1136 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0)));
        _1137 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0)));
    }
    else
    {
        _1122 = _1123;
        _1124 = _1123;
        _1125 = _1123;
        _1126 = _1123;
        _1127 = _1123;
        _1128 = _1123;
        _1129 = _1123;
        _1130 = _1123;
        _1131 = _1123;
        _1132 = _1123;
        _1133 = _1123;
        _1134 = _1123;
        _1135 = 0.0;
        _1136 = 0.0;
        _1137 = 0.0;
    }
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1162 = fma(_821, cbModelParam._m0[30u].z, fma(_817, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _813));
        float _1166 = fma(_821, cbModelParam._m0[31u].z, fma(_817, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _813));
        float _1170 = fma(_821, cbModelParam._m0[32u].z, fma(_817, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _813));
        float _1193 = _813 + _581;
        float _1194 = _817 + _582;
        float _1195 = _821 + _583;
        float _1205 = fma(_1195, cbModelParam._m0[30u].z, fma(_1194, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1193)) - _1162;
        float _1206 = fma(_1195, cbModelParam._m0[31u].z, fma(_1194, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1193)) - _1166;
        float _1207 = fma(_1195, cbModelParam._m0[32u].z, fma(_1194, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1193)) - _1170;
        float _1211 = inversesqrt(dot(vec3(_1205, _1206, _1207), vec3(_1205, _1206, _1207)));
        float _1224 = ((_1211 * _1205) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1162 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1225 = ((_1211 * _1206) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1166 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1226 = ((_1211 * _1207) / cbModelParam._m0[35u].z) + ((((((_1170 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1228 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1224, _1225, _1226), 0.0);
        vec4 _1235 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1224, _1225, _1226), 0.0);
        vec4 _1242 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1224, _1225, _1226), 0.0);
        vec4 _1249 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1224, _1225, _1226), 0.0);
        float _1261 = exp2((_1228.w + (-0.5)) * 20.0) * 2.0;
        float _1262 = _1261 * (_1228.x + (-0.5));
        float _1263 = _1261 * (_1228.y + (-0.5));
        float _1264 = _1261 * (_1228.z + (-0.5));
        float _1271 = exp2((_1235.w + (-0.5)) * 20.0) * 2.0;
        float _1272 = _1271 * (_1235.x + (-0.5));
        float _1273 = _1271 * (_1235.y + (-0.5));
        float _1274 = _1271 * (_1235.z + (-0.5));
        float _1281 = exp2((_1242.w + (-0.5)) * 20.0) * 2.0;
        float _1282 = _1281 * (_1242.x + (-0.5));
        float _1283 = _1281 * (_1242.y + (-0.5));
        float _1284 = _1281 * (_1242.z + (-0.5));
        float _1291 = exp2((_1249.w + (-0.5)) * 20.0) * 2.0;
        float _1292 = _1291 * (_1249.x + (-0.5));
        float _1293 = _1291 * (_1249.y + (-0.5));
        float _1294 = _1291 * (_1249.z + (-0.5));
        float _1295 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1296 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1297 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1298 = _1262 * 0.5;
        float _1299 = _1272 * 0.5;
        float _1300 = _1282 * 0.5;
        float _1301 = dot(vec3(_1298, _1299, _1300), vec3(_1298, _1299, _1300));
        float _1306 = (_1301 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1301);
        float _1314 = (dot(vec3(_581, _582, _583), vec3(_1306 * _1298, _1306 * _1299, _1306 * _1300)) + 1.0) * 0.5;
        float _3794 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1323 = sqrt(((_1299 * _1299) + (_1298 * _1298)) + (_1300 * _1300)) / (_1295 + 9.9999997473787516355514526367188e-06);
        float _3805 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1324 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
        float _1325 = _1324 * 2.0;
        float _1329 = (1.0 - _1324) / (_1324 + 1.0);
        float _3816 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1330 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
        float _1339 = ((((1.0 - _1330) * (_1325 + 2.0)) * exp2(log2(isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0))) * (_1325 + 1.0))) + _1330) * _1295;
        float _1340 = _1263 * 0.5;
        float _1341 = _1273 * 0.5;
        float _1342 = _1283 * 0.5;
        float _1343 = dot(vec3(_1340, _1341, _1342), vec3(_1340, _1341, _1342));
        float _1348 = (_1343 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1343);
        float _1356 = (dot(vec3(_581, _582, _583), vec3(_1348 * _1340, _1348 * _1341, _1348 * _1342)) + 1.0) * 0.5;
        float _3827 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1365 = sqrt(((_1341 * _1341) + (_1340 * _1340)) + (_1342 * _1342)) / (_1296 + 9.9999997473787516355514526367188e-06);
        float _3838 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1366 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
        float _1367 = _1366 * 2.0;
        float _1371 = (1.0 - _1366) / (_1366 + 1.0);
        float _3849 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1372 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
        float _1381 = ((((1.0 - _1372) * (_1367 + 2.0)) * exp2(log2(isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0))) * (_1367 + 1.0))) + _1372) * _1296;
        float _1382 = _1264 * 0.5;
        float _1383 = _1274 * 0.5;
        float _1384 = _1284 * 0.5;
        float _1385 = dot(vec3(_1382, _1383, _1384), vec3(_1382, _1383, _1384));
        float _1390 = (_1385 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1385);
        float _1398 = (dot(vec3(_581, _582, _583), vec3(_1390 * _1382, _1390 * _1383, _1390 * _1384)) + 1.0) * 0.5;
        float _3860 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1407 = sqrt(((_1383 * _1383) + (_1382 * _1382)) + (_1384 * _1384)) / (_1297 + 9.9999997473787516355514526367188e-06);
        float _3871 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1408 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
        float _1409 = _1408 * 2.0;
        float _1413 = (1.0 - _1408) / (_1408 + 1.0);
        float _3882 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1414 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
        float _1423 = ((((1.0 - _1414) * (_1409 + 2.0)) * exp2(log2(isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0))) * (_1409 + 1.0))) + _1414) * _1297;
        _1431 = _1264;
        _1432 = _1263;
        _1433 = _1262;
        _1434 = _1274;
        _1435 = _1273;
        _1436 = _1272;
        _1437 = _1284;
        _1438 = _1283;
        _1439 = _1282;
        _1440 = _1297;
        _1441 = _1296;
        _1442 = _1295;
        _1443 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0)));
        _1444 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0)));
        _1445 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0)));
    }
    else
    {
        _1431 = _1123;
        _1432 = _1123;
        _1433 = _1123;
        _1434 = _1123;
        _1435 = _1123;
        _1436 = _1123;
        _1437 = _1123;
        _1438 = _1123;
        _1439 = _1123;
        _1440 = _1123;
        _1441 = _1123;
        _1442 = _1123;
        _1443 = 0.0;
        _1444 = 0.0;
        _1445 = 0.0;
    }
    float _1455 = (cbModelParam._m0[1u].x * (_1443 - _1135)) + _1135;
    float _1456 = (cbModelParam._m0[1u].x * (_1444 - _1136)) + _1136;
    float _1457 = (cbModelParam._m0[1u].x * (_1445 - _1137)) + _1137;
    float _1478 = fma(_1457, cbSceneParam._m0[89u].z, fma(_1456, cbSceneParam._m0[89u].y, _1455 * cbSceneParam._m0[89u].x));
    float _1481 = fma(_1457, cbSceneParam._m0[90u].z, fma(_1456, cbSceneParam._m0[90u].y, _1455 * cbSceneParam._m0[90u].x));
    float _1484 = fma(_1457, cbSceneParam._m0[91u].z, fma(_1456, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1455));
    float _1499 = _757 * 0.5;
    float _1500 = _758 * 0.5;
    float _1501 = _759 * 0.5;
    float _1502 = dot(vec4(_1499, _1500, _1501, 1.0), vec4(_1433, _1436, _1439, _1442));
    float _1505 = dot(vec4(_1499, _1500, _1501, 1.0), vec4(_1432, _1435, _1438, _1441));
    float _1508 = dot(vec4(_1499, _1500, _1501, 1.0), vec4(_1431, _1434, _1437, _1440));
    float _1542;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1515 = dot(vec4(_1499, _1500, _1501, 1.0), vec4(_1122, _1126, _1129, _1132));
        float _1519 = dot(vec4(_1499, _1500, _1501, 1.0), vec4(_1124, _1127, _1130, _1133));
        float _1523 = dot(vec4(_1499, _1500, _1501, 1.0), vec4(_1125, _1128, _1131, _1134));
        float _1530 = dot(vec4(cbModelParam._m0[39u]), vec4(_1499, _1500, _1501, 1.0));
        _1542 = dot(vec3(isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0)), isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0)), isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1530) ? 0.0 : (isnan(0.0) ? _1530 : max(0.0, _1530))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1542 = 1.0;
    }
    float _1553;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1544 = dot(vec4(cbModelParam._m0[40u]), vec4(_1499, _1500, _1501, 1.0));
        _1553 = dot(vec3(isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0)), isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0)), isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1544) ? 0.0 : (isnan(0.0) ? _1544 : max(0.0, _1544))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1553 = 1.0;
    }
    float _1557 = (_1553 * cbModelParam._m0[1u].x) + (_1542 * (1.0 - cbModelParam._m0[1u].x));
    float _1567 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _584);
    float _1568 = isnan(_1567) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1567 : min(cbModelParam._m0[25u].z, _1567));
    float _1648;
    float _1650;
    float _1652;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1615 = fma(_821, cbModelParam._m0[13u].z, fma(_817, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _813)) + cbModelParam._m0[13u].w;
        float _1619 = fma(_821, cbModelParam._m0[14u].z, fma(_817, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _813)) + cbModelParam._m0[14u].w;
        float _1623 = fma(_821, cbModelParam._m0[15u].z, fma(_817, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _813)) + cbModelParam._m0[15u].w;
        float _1626 = fma(_759, cbModelParam._m0[13u].z, fma(_758, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _757));
        float _1629 = fma(_759, cbModelParam._m0[14u].z, fma(_758, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _757));
        float _1632 = fma(_759, cbModelParam._m0[15u].z, fma(_758, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _757));
        float _1660;
        if (_1626 > 0.0)
        {
            _1660 = abs((1.0 - _1615) / _1626);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1626 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1615 + 1.0) / _1626);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1660 = frontier_phi_14_12_ladder;
        }
        float _1884;
        if (_1629 > 0.0)
        {
            _1884 = abs((1.0 - _1619) / _1629);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1629 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1619 + 1.0) / _1629);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1884 = frontier_phi_23_19_ladder;
        }
        float _2141;
        if (_1632 > 0.0)
        {
            _2141 = abs((1.0 - _1623) / _1632);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1632 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1623 + 1.0) / _1632);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2141 = frontier_phi_35_30_ladder;
        }
        float _2143 = isnan(_1884) ? _1660 : (isnan(_1660) ? _1884 : min(_1660, _1884));
        float _2144 = isnan(_2141) ? _2143 : (isnan(_2143) ? _2141 : min(_2143, _2141));
        float _2148 = (_2144 * _1626) + _1615;
        float _2149 = (_2144 * _1629) + _1619;
        float _2150 = (_2144 * _1632) + _1623;
        float _2151 = _2144 * 9.9999997473787516355514526367188e-05;
        float _2153 = (-1.0) - _2151;
        float _2155 = _2151 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2150 > _2155) || ((_2150 < _2153) || ((_2149 > _2155) || ((_2149 < _2153) || ((_2148 < _2153) || (_2148 > _2155))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2278 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2150, cbModelParam._m0[9u].z, fma(_2149, cbModelParam._m0[9u].y, _2148 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2150, cbModelParam._m0[10u].z, fma(_2149, cbModelParam._m0[10u].y, _2148 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2150, cbModelParam._m0[11u].z, fma(_2149, cbModelParam._m0[11u].y, _2148 * cbModelParam._m0[11u].x))), _1568);
            frontier_phi_13_35_ladder = _2278.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2278.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2278.x * cbModelParam._m0[1u].y;
        }
        _1648 = frontier_phi_13_35_ladder_2;
        _1650 = frontier_phi_13_35_ladder_1;
        _1652 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1636 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_757, _758, _759), _1568);
        _1648 = _1636.x * cbModelParam._m0[1u].y;
        _1650 = _1636.y * cbModelParam._m0[1u].y;
        _1652 = _1636.z * cbModelParam._m0[1u].y;
    }
    float _1656 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _584);
    float _1657 = isnan(_1656) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1656 : min(cbModelParam._m0[25u].w, _1656));
    float _1746;
    float _1748;
    float _1750;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1710 = fma(_821, cbModelParam._m0[21u].z, fma(_817, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _813)) + cbModelParam._m0[21u].w;
        float _1714 = fma(_821, cbModelParam._m0[22u].z, fma(_817, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _813)) + cbModelParam._m0[22u].w;
        float _1718 = fma(_821, cbModelParam._m0[23u].z, fma(_817, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _813)) + cbModelParam._m0[23u].w;
        float _1721 = fma(_759, cbModelParam._m0[21u].z, fma(_758, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _757));
        float _1724 = fma(_759, cbModelParam._m0[22u].z, fma(_758, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _757));
        float _1727 = fma(_759, cbModelParam._m0[23u].z, fma(_758, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _757));
        float _1889;
        if (_1721 > 0.0)
        {
            _1889 = abs((1.0 - _1710) / _1721);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1721 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1710 + 1.0) / _1721);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1889 = frontier_phi_25_21_ladder;
        }
        float _2168;
        if (_1724 > 0.0)
        {
            _2168 = abs((1.0 - _1714) / _1724);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1724 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1714 + 1.0) / _1724);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2168 = frontier_phi_37_32_ladder;
        }
        float _2381;
        if (_1727 > 0.0)
        {
            _2381 = abs((1.0 - _1718) / _1727);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1727 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1718 + 1.0) / _1727);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2381 = frontier_phi_46_43_ladder;
        }
        float _2383 = isnan(_2168) ? _1889 : (isnan(_1889) ? _2168 : min(_1889, _2168));
        float _2384 = isnan(_2381) ? _2383 : (isnan(_2383) ? _2381 : min(_2383, _2381));
        float _2388 = (_2384 * _1721) + _1710;
        float _2389 = (_2384 * _1724) + _1714;
        float _2390 = (_2384 * _1727) + _1718;
        float _2391 = _2384 * 9.9999997473787516355514526367188e-05;
        float _2392 = (-1.0) - _2391;
        float _2394 = _2391 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2390 > _2394) || ((_2390 < _2392) || ((_2389 > _2394) || ((_2389 < _2392) || ((_2388 < _2392) || (_2388 > _2394))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2589 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2390, cbModelParam._m0[17u].z, fma(_2389, cbModelParam._m0[17u].y, _2388 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2390, cbModelParam._m0[18u].z, fma(_2389, cbModelParam._m0[18u].y, _2388 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2390, cbModelParam._m0[19u].z, fma(_2389, cbModelParam._m0[19u].y, _2388 * cbModelParam._m0[19u].x))), _1657);
            frontier_phi_22_46_ladder = _2589.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2589.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2589.x * cbModelParam._m0[1u].z;
        }
        _1746 = frontier_phi_22_46_ladder_2;
        _1748 = frontier_phi_22_46_ladder_1;
        _1750 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1730 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_757, _758, _759), _1657);
        _1746 = _1730.x * cbModelParam._m0[1u].z;
        _1748 = _1730.y * cbModelParam._m0[1u].z;
        _1750 = _1730.z * cbModelParam._m0[1u].z;
    }
    float _1763 = (((_784 * _733) + _785) * _749) * ((cbModelParam._m0[1u].w * (_1746 - _1648)) + _1648);
    float _1765 = (((_784 * _735) + _785) * _749) * ((cbModelParam._m0[1u].w * (_1748 - _1650)) + _1650);
    float _1767 = (((_784 * _736) + _785) * _749) * ((cbModelParam._m0[1u].w * (_1750 - _1652)) + _1652);
    float _1770 = fma(_1767, cbSceneParam._m0[89u].z, fma(_1765, cbSceneParam._m0[89u].y, _1763 * cbSceneParam._m0[89u].x));
    float _1773 = fma(_1767, cbSceneParam._m0[90u].z, fma(_1765, cbSceneParam._m0[90u].y, _1763 * cbSceneParam._m0[90u].x));
    float _1776 = fma(_1767, cbSceneParam._m0[91u].z, fma(_1765, cbSceneParam._m0[91u].y, _1763 * cbSceneParam._m0[91u].x));
    vec4 _1784 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_668, _669));
    float _1786 = _1784.w;
    float _1798 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1786);
    float _1799 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1786);
    float _1800 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1786);
    uvec4 _1804 = floatBitsToUint(cbInstanceData._m0[_239 + 5u]);
    uint _1806 = _1804.x * 14u;
    uint _1807 = _1806 + 13u;
    float _1814 = _749 + (-1.0);
    float _1819 = (cbLight._m0[_1807].x * _1814) + 1.0;
    float _1820 = (cbLight._m0[_1807].y * _1814) + 1.0;
    float _1821 = (cbLight._m0[_1807].z * _1814) + 1.0;
    float _1822 = (cbLight._m0[_1807].w * _1814) + 1.0;
    uint _1823 = _1806 + 5u;
    float _1829 = isnan(1.0) ? _1820 : (isnan(_1820) ? 1.0 : min(_1820, 1.0));
    uint _1833 = _1806 + 4u;
    float _1843 = isnan(1.0) ? _1819 : (isnan(_1819) ? 1.0 : min(_1819, 1.0));
    uint _1847 = _1806 | 1u;
    float _1858 = dot(vec3(cbLight._m0[_1806].xyz), vec3(_581, _582, _583));
    float _1861 = dot(vec3(cbLight._m0[_1847].xyz), vec3(_581, _582, _583));
    float _4018 = isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0));
    float _4029 = isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0));
    float _1866 = (isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0))) * 0.3183098733425140380859375;
    float _1868 = (isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0))) * 0.3183098733425140380859375;
    float _1875 = ((cbLight._m0[_1823].x * _1829) * _1868) + (((cbLight._m0[_1833].x * _1798) * _1843) * _1866);
    float _1876 = ((_1829 * cbLight._m0[_1823].y) * _1868) + (((cbLight._m0[_1833].y * _1799) * _1843) * _1866);
    float _1877 = ((_1829 * cbLight._m0[_1823].z) * _1868) + (((cbLight._m0[_1833].z * _1800) * _1843) * _1866);
    uvec4 _1881 = floatBitsToUint(cbLight._m0[_1806 + 12u]);
    bool _1883 = _1881.x == 0u;
    float _1894;
    float _1896;
    float _1898;
    if (_1883)
    {
        _1894 = _1875;
        _1896 = _1876;
        _1898 = _1877;
    }
    else
    {
        uint _1902 = _1806 + 6u;
        float _1918 = (dot(vec3(cbLight._m0[_1806 + 2u].xyz), vec3(_581, _582, _583)) * 0.5) + 0.5;
        float _1919 = _1918 * _1918;
        float _4040 = isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0));
        float _1920 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
        float _1921 = isnan(1.0) ? _1821 : (isnan(_1821) ? 1.0 : min(_1821, 1.0));
        _1894 = (((cbLight._m0[_1902].x * 0.3183098733425140380859375) * _1920) * _1921) + _1875;
        _1896 = (((cbLight._m0[_1902].y * 0.3183098733425140380859375) * _1920) * _1921) + _1876;
        _1898 = (((cbLight._m0[_1902].z * 0.3183098733425140380859375) * _1920) * _1921) + _1877;
    }
    bool _1901 = _1881.y == 0u;
    float _1939;
    float _1941;
    float _1943;
    if (_1901)
    {
        _1939 = _1894;
        _1941 = _1896;
        _1943 = _1898;
    }
    else
    {
        uint _2112 = _1806 + 7u;
        float _2128 = (dot(vec3(cbLight._m0[_1806 + 3u].xyz), vec3(_581, _582, _583)) * 0.5) + 0.5;
        float _2129 = _2128 * _2128;
        float _4056 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
        float _2130 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
        float _2131 = isnan(1.0) ? _1822 : (isnan(_1822) ? 1.0 : min(_1822, 1.0));
        _1939 = (((cbLight._m0[_2112].x * 0.3183098733425140380859375) * _2130) * _2131) + _1894;
        _1941 = (((cbLight._m0[_2112].y * 0.3183098733425140380859375) * _2130) * _2131) + _1896;
        _1943 = (((cbLight._m0[_2112].z * 0.3183098733425140380859375) * _2130) * _2131) + _1898;
    }
    uint _1946 = _1806 + 8u;
    float _1959 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1806].w)) * _584) * 0.949999988079071044921875);
    float _1960 = _1959 * _1959;
    float _1961 = cbLight._m0[_1806].x + _660;
    float _1962 = cbLight._m0[_1806].y + _661;
    float _1963 = cbLight._m0[_1806].z + _662;
    float _1967 = inversesqrt(dot(vec3(_1961, _1962, _1963), vec3(_1961, _1962, _1963)));
    float _1968 = _1967 * _1961;
    float _1969 = _1967 * _1962;
    float _1970 = _1967 * _1963;
    float _1971 = dot(vec3(_581, _582, _583), vec3(cbLight._m0[_1806].xyz));
    float _4072 = isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0));
    float _1974 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
    float _4083 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
    float _1975 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
    float _1976 = dot(vec3(_581, _582, _583), vec3(_1968, _1969, _1970));
    float _4094 = isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0));
    float _1979 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
    float _1980 = dot(vec3(cbLight._m0[_1806].xyz), vec3(_1968, _1969, _1970));
    float _4105 = isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0));
    float _1984 = _1960 * _1960;
    float _1988 = ((_1979 * _1979) * (_1984 + (-1.0))) + 1.0;
    float _1996 = exp2(log2(1.0 - (isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0)))) * 5.0);
    float _1997 = 0.959999978542327880859375 - _730;
    float _1999 = 0.959999978542327880859375 - _731;
    float _2000 = 0.959999978542327880859375 - _732;
    float _2007 = 1.0 - _1960;
    float _2018 = (0.5 / (((_1975 * ((_1974 * _2007) + _1960)) + 9.9999999392252902907785028219223e-09) + (((_1975 * _2007) + _1960) * _1974))) * _1974;
    float _4116 = isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0));
    float _2020 = (isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0))) * (_1984 / ((_1988 * _1988) * 3.141590118408203125));
    uint _2034 = _1806 + 9u;
    float _2045 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1847].w)) * _584) * 0.949999988079071044921875);
    float _2046 = _2045 * _2045;
    float _2047 = cbLight._m0[_1847].x + _660;
    float _2048 = cbLight._m0[_1847].y + _661;
    float _2049 = cbLight._m0[_1847].z + _662;
    float _2053 = inversesqrt(dot(vec3(_2047, _2048, _2049), vec3(_2047, _2048, _2049)));
    float _2054 = _2053 * _2047;
    float _2055 = _2053 * _2048;
    float _2056 = _2053 * _2049;
    float _2057 = dot(vec3(_581, _582, _583), vec3(cbLight._m0[_1847].xyz));
    float _4127 = isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0));
    float _2060 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
    float _2061 = dot(vec3(_581, _582, _583), vec3(_2054, _2055, _2056));
    float _4138 = isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0));
    float _2064 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
    float _2065 = dot(vec3(cbLight._m0[_1847].xyz), vec3(_2054, _2055, _2056));
    float _4149 = isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0));
    float _2069 = _2046 * _2046;
    float _2073 = ((_2064 * _2064) * (_2069 + (-1.0))) + 1.0;
    float _2080 = exp2(log2(1.0 - (isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0)))) * 5.0);
    float _2087 = 1.0 - _2046;
    float _2097 = (0.5 / (((_1975 * ((_2060 * _2087) + _2046)) + 9.9999999392252902907785028219223e-09) + (((_1975 * _2087) + _2046) * _2060))) * _2060;
    float _4160 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
    float _2099 = (isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0))) * (_2069 / ((_2073 * _2073) * 3.141590118408203125));
    float _2109 = (((((_2080 * _1997) + _733) * cbLight._m0[_2034].x) * _2099) * _1829) + ((((cbLight._m0[_1946].x * _1798) * ((_1996 * _1997) + _733)) * _2020) * _1843);
    float _2110 = (((((_2080 * _1999) + _735) * cbLight._m0[_2034].y) * _2099) * _1829) + ((((cbLight._m0[_1946].y * _1799) * ((_1996 * _1999) + _735)) * _2020) * _1843);
    float _2111 = (((((_2080 * _2000) + _736) * cbLight._m0[_2034].z) * _2099) * _1829) + ((((cbLight._m0[_1946].z * _1800) * ((_1996 * _2000) + _736)) * _2020) * _1843);
    float _2173;
    float _2175;
    float _2177;
    if (_1883)
    {
        _2173 = _2109;
        _2175 = _2110;
        _2177 = _2111;
    }
    else
    {
        uint _2179 = _1806 + 2u;
        uint _2183 = _1806 + 10u;
        float _2197 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2179].w)) * _584) * 0.949999988079071044921875);
        float _2198 = _2197 * _2197;
        float _2199 = cbLight._m0[_2179].x + _660;
        float _2200 = cbLight._m0[_2179].y + _661;
        float _2201 = cbLight._m0[_2179].z + _662;
        float _2205 = inversesqrt(dot(vec3(_2199, _2200, _2201), vec3(_2199, _2200, _2201)));
        float _2206 = _2205 * _2199;
        float _2207 = _2205 * _2200;
        float _2208 = _2205 * _2201;
        float _2209 = dot(vec3(_581, _582, _583), vec3(cbLight._m0[_2179].xyz));
        float _4171 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
        float _2212 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
        float _2213 = dot(vec3(_581, _582, _583), vec3(_2206, _2207, _2208));
        float _4182 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
        float _2216 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
        float _2217 = dot(vec3(cbLight._m0[_2179].xyz), vec3(_2206, _2207, _2208));
        float _4193 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
        float _2221 = _2198 * _2198;
        float _2225 = ((_2216 * _2216) * (_2221 + (-1.0))) + 1.0;
        float _2232 = exp2(log2(1.0 - (isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0)))) * 5.0);
        float _2239 = 1.0 - _2198;
        float _2249 = (0.5 / (((_1975 * ((_2212 * _2239) + _2198)) + 9.9999999392252902907785028219223e-09) + (((_1975 * _2239) + _2198) * _2212))) * _2212;
        float _4204 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0));
        float _2251 = (isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0))) * (_2221 / ((_2225 * _2225) * 3.141590118408203125));
        float _2252 = isnan(1.0) ? _1821 : (isnan(_1821) ? 1.0 : min(_1821, 1.0));
        _2173 = (((((_2232 * _1997) + _733) * cbLight._m0[_2183].x) * _2251) * _2252) + _2109;
        _2175 = (((((_2232 * _1999) + _735) * cbLight._m0[_2183].y) * _2251) * _2252) + _2110;
        _2177 = (((((_2232 * _2000) + _736) * cbLight._m0[_2183].z) * _2251) * _2252) + _2111;
    }
    float _2287;
    float _2289;
    float _2291;
    if (_1901)
    {
        _2287 = _2173;
        _2289 = _2175;
        _2291 = _2177;
    }
    else
    {
        uint _2298 = _1806 + 3u;
        uint _2302 = _1806 + 11u;
        float _2316 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2298].w)) * _584) * 0.949999988079071044921875);
        float _2317 = _2316 * _2316;
        float _2318 = cbLight._m0[_2298].x + _660;
        float _2319 = cbLight._m0[_2298].y + _661;
        float _2320 = cbLight._m0[_2298].z + _662;
        float _2324 = inversesqrt(dot(vec3(_2318, _2319, _2320), vec3(_2318, _2319, _2320)));
        float _2325 = _2324 * _2318;
        float _2326 = _2324 * _2319;
        float _2327 = _2324 * _2320;
        float _2328 = dot(vec3(_581, _582, _583), vec3(cbLight._m0[_2298].xyz));
        float _4220 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
        float _2331 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
        float _2332 = dot(vec3(_581, _582, _583), vec3(_2325, _2326, _2327));
        float _4231 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0));
        float _2335 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
        float _2336 = dot(vec3(cbLight._m0[_2298].xyz), vec3(_2325, _2326, _2327));
        float _4242 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
        float _2340 = _2317 * _2317;
        float _2344 = ((_2335 * _2335) * (_2340 + (-1.0))) + 1.0;
        float _2351 = exp2(log2(1.0 - (isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0)))) * 5.0);
        float _2358 = 1.0 - _2317;
        float _2368 = (0.5 / (((_1975 * ((_2331 * _2358) + _2317)) + 9.9999999392252902907785028219223e-09) + (((_1975 * _2358) + _2317) * _2331))) * _2331;
        float _4253 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
        float _2370 = (isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0))) * (_2340 / ((_2344 * _2344) * 3.141590118408203125));
        float _2371 = isnan(1.0) ? _1822 : (isnan(_1822) ? 1.0 : min(_1822, 1.0));
        _2287 = (((((_2351 * _1997) + _733) * cbLight._m0[_2302].x) * _2370) * _2371) + _2173;
        _2289 = (((((_2351 * _1999) + _735) * cbLight._m0[_2302].y) * _2370) * _2371) + _2175;
        _2291 = (((((_2351 * _2000) + _736) * cbLight._m0[_2302].z) * _2370) * _2371) + _2177;
    }
    float _2506;
    float _2508;
    float _2510;
    float _2512;
    float _2514;
    float _2516;
    if (_1804.y == 0u)
    {
        float _2446 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2447 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2446;
        float _2448 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2446;
        float _2449 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2446;
        uvec4 _2461 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2462 = _2461.x;
        uint _2473 = uint((float(_2461.y) * floor(float(uint(cbSceneParam._m0[85u].y * _669) / _2462))) + floor(float(uint(cbSceneParam._m0[85u].x * _668) / _2462)));
        float _2483 = (log2(_2449 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2484 = isnan(0.0) ? _2483 : (isnan(_2483) ? 0.0 : max(_2483, 0.0));
        uint _2487 = uint(isnan(14.0) ? _2484 : (isnan(_2484) ? 14.0 : min(_2484, 14.0)));
        uvec4 _2492 = texelFetch(g_lightClusterGridBuffer, int(((_2487 << 2u) + (_2473 << 6u)) >> 2u));
        uint _2493 = _2492.x;
        uint _2494 = _2461.z;
        float _2594;
        float _2596;
        float _2598;
        float _2600;
        float _2602;
        float _2604;
        if (((((1u << ((_2494 >> 4u) & 15u)) + 4294967295u) & _2493) == 0u) || ((_2494 & 240u) == 0u))
        {
            _2594 = 0.0;
            _2596 = 0.0;
            _2598 = 0.0;
            _2600 = 0.0;
            _2602 = 0.0;
            _2604 = 0.0;
        }
        else
        {
            float _2595;
            float _2597;
            float _2599;
            float _2601;
            float _2603;
            float _2605;
            float _2739 = 0.0;
            float _2740 = 0.0;
            float _2741 = 0.0;
            float _2742 = 0.0;
            float _2743 = 0.0;
            float _2744 = 0.0;
            uint _2745 = 0u;
            uint _2754;
            bool _2755;
            for (;;)
            {
                _2754 = texelFetch(g_lightClassification, int((((_2487 << 5u) + (_2473 << 9u)) + (_2745 << 2u)) >> 2u)).x;
                _2755 = _2754 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2755)
                {
                    frontier_phi_61_pred = _2739;
                    frontier_phi_61_pred_1 = _2744;
                    frontier_phi_61_pred_2 = _2743;
                    frontier_phi_61_pred_3 = _2742;
                    frontier_phi_61_pred_4 = _2741;
                    frontier_phi_61_pred_5 = _2740;
                }
                else
                {
                    float _2863;
                    float _2864;
                    float _2865;
                    float _2866;
                    float _2867;
                    float _2868;
                    uint _2869;
                    _2863 = _2739;
                    _2864 = _2740;
                    _2865 = _2741;
                    _2866 = _2742;
                    _2867 = _2743;
                    _2868 = _2744;
                    _2869 = _2754;
                    float _2795;
                    float _2796;
                    float _2797;
                    float _2798;
                    float _2799;
                    float _2800;
                    for (;;)
                    {
                        uint _2873 = uint(findLSB(_2869)) + (_2745 << 5u);
                        uint _2870 = (_2869 + 4294967295u) & _2869;
                        uint _2875 = _2873 * 48u;
                        vec4 _2889 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2875)).x, texelFetch(g_PointLightRenderingBuffer, int(_2875 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2875 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2875 + 3u)).x));
                        uint _2895 = (_2873 * 48u) + 4u;
                        vec4 _2908 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2895)).x, texelFetch(g_PointLightRenderingBuffer, int(_2895 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2895 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2895 + 3u)).x));
                        uint _2914 = (_2873 * 48u) + 8u;
                        vec3 _2925 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2914)).x, texelFetch(g_PointLightRenderingBuffer, int(_2914 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2914 + 2u)).x));
                        float _2929 = _2889.x - _2447;
                        float _2930 = _2889.y - _2448;
                        float _2931 = _2889.z - _2449;
                        float _2932 = dot(vec3(_2929, _2930, _2931), vec3(_2929, _2930, _2931));
                        float _2935 = inversesqrt(_2932);
                        float _2936 = _2935 * _2929;
                        float _2937 = _2935 * _2930;
                        float _2938 = _2935 * _2931;
                        float _2939 = dot(vec3(_690, _693, _696), vec3(_2936, _2937, _2938));
                        float _2944 = 1.0 - (_2932 * _2889.w);
                        float _4279 = isnan(0.0) ? _2944 : (isnan(_2944) ? 0.0 : max(_2944, 0.0));
                        float _2945 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
                        float _2946 = sqrt(_2932) * _2908.w;
                        float _2949 = 1.39999997615814208984375 / (_2946 + 1.39999997615814208984375);
                        float _2950 = _2949 * _2949;
                        float _2953 = ((1.0 - _2950) * _2939) + _2950;
                        float _2956 = _2946 * _2946;
                        float _2960 = ((isnan(0.0) ? _2953 : (isnan(_2953) ? 0.0 : max(_2953, 0.0))) * _2945) / ((_2956 * 0.699999988079071044921875) + 1.0);
                        float _2964 = (-0.0) - _2447;
                        float _2965 = (-0.0) - _2448;
                        float _2966 = (-0.0) - _2449;
                        float _2970 = inversesqrt(dot(vec3(_2964, _2965, _2966), vec3(_2964, _2965, _2966)));
                        float _2971 = _2970 * _2964;
                        float _2972 = _2970 * _2965;
                        float _2973 = _2970 * _2966;
                        float _2981 = exp2(log2(1.0 / ((_2956 * 3.5) + 5.0)) * 0.25);
                        float _2982 = 1.0 - _765;
                        float _2989 = sqrt(1.0 - ((1.0 - (_2982 * _2982)) * (1.0 - (_2981 * _2981))));
                        float _2990 = _2989 * _2989;
                        float _2991 = _2990 * _2990;
                        float _2992 = _2971 + _2936;
                        float _2993 = _2972 + _2937;
                        float _2994 = _2973 + _2938;
                        float _2998 = inversesqrt(dot(vec3(_2992, _2993, _2994), vec3(_2992, _2993, _2994)));
                        float _3002 = dot(vec3(_690, _693, _696), vec3(_2971, _2972, _2973));
                        float _4295 = isnan(0.0) ? _3002 : (isnan(_3002) ? 0.0 : max(_3002, 0.0));
                        float _3005 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
                        float _3006 = dot(vec3(_690, _693, _696), vec3(_2998 * _2992, _2998 * _2993, _2998 * _2994));
                        float _4306 = isnan(0.0) ? _3006 : (isnan(_3006) ? 0.0 : max(_3006, 0.0));
                        float _3009 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
                        float _3013 = ((_3009 * _3009) * (_2991 + (-1.0))) + 1.0;
                        float _3014 = _2949 * _2990;
                        float _3015 = _3014 * _3014;
                        float _3018 = ((1.0 - _3015) * _2939) + _3015;
                        float _4317 = isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : max(_3018, 0.0));
                        float _3019 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
                        float _3020 = 1.0 - _2990;
                        float _3030 = (0.5 / (((_3019 * ((_3005 * _3020) + _2990)) + 9.9999999392252902907785028219223e-09) + (((_3019 * _3020) + _2990) * _3005))) * _3019;
                        float _4328 = isnan(0.0) ? _3030 : (isnan(_3030) ? 0.0 : max(_3030, 0.0));
                        float _3041 = (((_2991 * 3.1415927410125732421875) * (isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0)))) / ((_3013 * _3013) * ((_2956 * 2.1991131305694580078125) + 3.141590118408203125))) * _2945;
                        _2798 = (_2960 * _2908.x) + _2866;
                        _2799 = (_2960 * _2908.y) + _2867;
                        _2800 = (_2960 * _2908.z) + _2868;
                        _2795 = (_3041 * _2925.x) + _2863;
                        _2796 = (_3041 * _2925.y) + _2864;
                        _2797 = (_3041 * _2925.z) + _2865;
                        if (_2870 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2863 = _2795;
                            _2864 = _2796;
                            _2865 = _2797;
                            _2866 = _2798;
                            _2867 = _2799;
                            _2868 = _2800;
                            _2869 = _2870;
                        }
                    }
                    frontier_phi_61_pred = _2795;
                    frontier_phi_61_pred_1 = _2800;
                    frontier_phi_61_pred_2 = _2799;
                    frontier_phi_61_pred_3 = _2798;
                    frontier_phi_61_pred_4 = _2797;
                    frontier_phi_61_pred_5 = _2796;
                }
                _2595 = frontier_phi_61_pred;
                _2605 = frontier_phi_61_pred_1;
                _2603 = frontier_phi_61_pred_2;
                _2601 = frontier_phi_61_pred_3;
                _2599 = frontier_phi_61_pred_4;
                _2597 = frontier_phi_61_pred_5;
                uint _2746 = _2745 + 1u;
                if (_2746 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2739 = _2595;
                    _2740 = _2597;
                    _2741 = _2599;
                    _2742 = _2601;
                    _2743 = _2603;
                    _2744 = _2605;
                    _2745 = _2746;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2594 = _2595;
            _2596 = _2597;
            _2598 = _2599;
            _2600 = _2601;
            _2602 = _2603;
            _2604 = _2605;
        }
        uvec4 _2608 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2609 = _2608.z;
        uint _2611 = (_2609 >> 8u) & 15u;
        float _2707;
        float _2709;
        float _2711;
        float _2713;
        float _2715;
        float _2717;
        if (((4294967295u << _2611) & _2493) == 0u)
        {
            _2707 = _2594;
            _2709 = _2596;
            _2711 = _2598;
            _2713 = _2600;
            _2715 = _2602;
            _2717 = _2604;
        }
        else
        {
            float _2732 = inversesqrt(dot(vec3(_2447, _2448, _2449), vec3(_2447, _2448, _2449)));
            float _2733 = _2732 * _2447;
            float _2734 = _2732 * _2448;
            float _2735 = _2732 * _2449;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2611 < ((_2609 >> 12u) & 15u))
            {
                float _2708;
                float _2710;
                float _2712;
                float _2714;
                float _2716;
                float _2718;
                float _2846 = _2594;
                float _2847 = _2596;
                float _2848 = _2598;
                float _2849 = _2600;
                float _2850 = _2602;
                float _2851 = _2604;
                uint _2852 = _2611;
                uint _2861;
                bool _2862;
                for (;;)
                {
                    _2861 = texelFetch(g_lightClassification, int((((_2487 << 5u) + (_2473 << 9u)) + (_2852 << 2u)) >> 2u)).x;
                    _2862 = _2861 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2862)
                    {
                        frontier_phi_67_pred = _2849;
                        frontier_phi_67_pred_1 = _2850;
                        frontier_phi_67_pred_2 = _2851;
                        frontier_phi_67_pred_3 = _2848;
                        frontier_phi_67_pred_4 = _2847;
                        frontier_phi_67_pred_5 = _2846;
                    }
                    else
                    {
                        float _3046;
                        float _3047;
                        float _3048;
                        float _3049;
                        float _3050;
                        float _3051;
                        float _3341;
                        float _3342;
                        float _3343;
                        float _3344;
                        float _3345;
                        float _3346;
                        float _3059 = _2846;
                        float _3060 = _2847;
                        float _3061 = _2848;
                        float _3062 = _2849;
                        float _3063 = _2850;
                        float _3064 = _2851;
                        uint _3065 = _2861;
                        uint _3066;
                        vec4 _3091;
                        float _3092;
                        vec4 _3107;
                        vec3 _3119;
                        vec4 _3135;
                        vec4 _3151;
                        float _3197;
                        bool _3198;
                        for (;;)
                        {
                            uint _3076 = ((_2852 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3065));
                            _3066 = (_3065 + 4294967295u) & _3065;
                            uint _3078 = _3076 * 40u;
                            _3091 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3078)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3078 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3078 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3078 + 3u)).x));
                            _3092 = _3091.w;
                            uint _3094 = (_3076 * 40u) + 4u;
                            _3107 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3094)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3094 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3094 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3094 + 3u)).x));
                            uint _3109 = (_3076 * 40u) + 8u;
                            _3119 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3109)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3109 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3109 + 2u)).x));
                            uint _3122 = (_3076 * 40u) + 16u;
                            _3135 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3122)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 3u)).x));
                            uint _3138 = (_3076 * 40u) + 20u;
                            _3151 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3138)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3138 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3138 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3138 + 3u)).x));
                            uint _3153 = (_3076 * 40u) + 24u;
                            vec4 _3166 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3153)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 3u)).x));
                            uint _3172 = (_3076 * 40u) + 28u;
                            vec4 _3185 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3172)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3172 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3172 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3172 + 3u)).x));
                            _3197 = fma(_2449, _3185.z, fma(_2448, _3185.y, _3185.x * _2447)) + _3185.w;
                            _3198 = !((fma(_2449, _3166.z, fma(_2448, _3166.y, _3166.x * _2447)) + _3166.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3198)
                            {
                                float _3225 = _3091.x - _2447;
                                float _3226 = _3091.y - _2448;
                                float _3227 = _3091.z - _2449;
                                float _3228 = dot(vec3(_3225, _3226, _3227), vec3(_3225, _3226, _3227));
                                float _3231 = inversesqrt(_3228);
                                float _3232 = _3231 * _3225;
                                float _3233 = _3231 * _3226;
                                float _3234 = _3231 * _3227;
                                float _3238 = 1.0 - (_3228 / (_3092 * _3092));
                                float _4339 = isnan(0.0) ? _3238 : (isnan(_3238) ? 0.0 : max(_3238, 0.0));
                                float _3239 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
                                float _3243 = sqrt(_3228) * _3107.w;
                                float _3245 = 1.39999997615814208984375 / (_3243 + 1.39999997615814208984375);
                                float _3246 = _3245 * _3245;
                                float _3249 = ((1.0 - _3246) * dot(vec3(_3232, _3233, _3234), vec3(_690, _693, _696))) + _3246;
                                float _3252 = _3243 * _3243;
                                float _3256 = (fma(_2449, _3135.z, fma(_2448, _3135.y, _3135.x * _2447)) + _3135.w) / _3197;
                                float _3257 = (fma(_2449, _3151.z, fma(_2448, _3151.y, _3151.x * _2447)) + _3151.w) / _3197;
                                float _3261 = 1.0 - dot(vec2(_3256, _3257), vec2(_3256, _3257));
                                float _4355 = isnan(0.0) ? _3261 : (isnan(_3261) ? 0.0 : max(_3261, 0.0));
                                float _3262 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
                                float _3263 = _3262 * (((isnan(0.0) ? _3249 : (isnan(_3249) ? 0.0 : max(_3249, 0.0))) * _3239) / ((_3252 * 0.699999988079071044921875) + 1.0));
                                float _3275 = exp2(log2(1.0 / ((_3252 * 3.5) + 5.0)) * 0.25);
                                float _3276 = 1.0 - _765;
                                float _3283 = sqrt(1.0 - ((1.0 - (_3276 * _3276)) * (1.0 - (_3275 * _3275))));
                                float _3284 = _3283 * _3283;
                                float _3285 = _3284 * _3284;
                                float _3286 = _3232 - _2733;
                                float _3287 = _3233 - _2734;
                                float _3288 = _3234 - _2735;
                                float _3292 = inversesqrt(dot(vec3(_3286, _3287, _3288), vec3(_3286, _3287, _3288)));
                                float _3296 = dot(vec3(_690, _693, _696), vec3((-0.0) - _2733, (-0.0) - _2734, (-0.0) - _2735));
                                float _4366 = isnan(0.0) ? _3296 : (isnan(_3296) ? 0.0 : max(_3296, 0.0));
                                float _3299 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
                                float _3300 = dot(vec3(_690, _693, _696), vec3(_3292 * _3286, _3292 * _3287, _3292 * _3288));
                                float _4377 = isnan(0.0) ? _3300 : (isnan(_3300) ? 0.0 : max(_3300, 0.0));
                                float _3303 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
                                float _3307 = ((_3303 * _3303) * (_3285 + (-1.0))) + 1.0;
                                float _3308 = _3245 * _3284;
                                float _3309 = _3308 * _3308;
                                float _3315 = ((1.0 - _3309) * dot(vec3(_690, _693, _696), vec3(_3232, _3233, _3234))) + _3309;
                                float _4388 = isnan(0.0) ? _3315 : (isnan(_3315) ? 0.0 : max(_3315, 0.0));
                                float _3316 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
                                float _3317 = 1.0 - _3284;
                                float _3327 = (0.5 / (((_3316 * ((_3299 * _3317) + _3284)) + 9.9999999392252902907785028219223e-09) + (((_3316 * _3317) + _3284) * _3299))) * _3316;
                                float _4399 = isnan(0.0) ? _3327 : (isnan(_3327) ? 0.0 : max(_3327, 0.0));
                                float _3337 = (_3262 * _3239) * (((_3285 * 3.1415927410125732421875) * (isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0)))) / ((_3307 * _3307) * ((_3252 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3337 * _3119.x;
                                frontier_phi_73_pred_1 = _3337 * _3119.y;
                                frontier_phi_73_pred_2 = _3263 * _3107.z;
                                frontier_phi_73_pred_3 = _3263 * _3107.y;
                                frontier_phi_73_pred_4 = _3263 * _3107.x;
                                frontier_phi_73_pred_5 = _3337 * _3119.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3341 = frontier_phi_73_pred;
                            _3342 = frontier_phi_73_pred_1;
                            _3346 = frontier_phi_73_pred_2;
                            _3345 = frontier_phi_73_pred_3;
                            _3344 = frontier_phi_73_pred_4;
                            _3343 = frontier_phi_73_pred_5;
                            _3049 = _3344 + _3062;
                            _3050 = _3345 + _3063;
                            _3051 = _3346 + _3064;
                            _3046 = _3341 + _3059;
                            _3047 = _3342 + _3060;
                            _3048 = _3343 + _3061;
                            if (_3066 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3059 = _3046;
                                _3060 = _3047;
                                _3061 = _3048;
                                _3062 = _3049;
                                _3063 = _3050;
                                _3064 = _3051;
                                _3065 = _3066;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3049;
                        frontier_phi_67_pred_1 = _3050;
                        frontier_phi_67_pred_2 = _3051;
                        frontier_phi_67_pred_3 = _3048;
                        frontier_phi_67_pred_4 = _3047;
                        frontier_phi_67_pred_5 = _3046;
                    }
                    _2714 = frontier_phi_67_pred;
                    _2716 = frontier_phi_67_pred_1;
                    _2718 = frontier_phi_67_pred_2;
                    _2712 = frontier_phi_67_pred_3;
                    _2710 = frontier_phi_67_pred_4;
                    _2708 = frontier_phi_67_pred_5;
                    uint _2853 = _2852 + 1u;
                    if (_2853 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2846 = _2708;
                        _2847 = _2710;
                        _2848 = _2712;
                        _2849 = _2714;
                        _2850 = _2716;
                        _2851 = _2718;
                        _2852 = _2853;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2716;
                frontier_phi_55_56_ladder_1 = _2718;
                frontier_phi_55_56_ladder_2 = _2714;
                frontier_phi_55_56_ladder_3 = _2712;
                frontier_phi_55_56_ladder_4 = _2710;
                frontier_phi_55_56_ladder_5 = _2708;
            }
            else
            {
                frontier_phi_55_56_ladder = _2602;
                frontier_phi_55_56_ladder_1 = _2604;
                frontier_phi_55_56_ladder_2 = _2600;
                frontier_phi_55_56_ladder_3 = _2598;
                frontier_phi_55_56_ladder_4 = _2596;
                frontier_phi_55_56_ladder_5 = _2594;
            }
            _2707 = frontier_phi_55_56_ladder_5;
            _2709 = frontier_phi_55_56_ladder_4;
            _2711 = frontier_phi_55_56_ladder_3;
            _2713 = frontier_phi_55_56_ladder_2;
            _2715 = frontier_phi_55_56_ladder;
            _2717 = frontier_phi_55_56_ladder_1;
        }
        float _2722 = isnan(1.0) ? _749 : (isnan(_749) ? 1.0 : min(_749, 1.0));
        _2506 = (_2722 * _2713) + _1939;
        _2508 = (_2722 * _2715) + _1941;
        _2510 = (_2722 * _2717) + _1943;
        _2512 = ((_2707 * _733) * _2722) + _2287;
        _2514 = ((_2709 * _735) * _2722) + _2289;
        _2516 = ((_2711 * _736) * _2722) + _2291;
    }
    else
    {
        _2506 = _1939;
        _2508 = _1941;
        _2510 = _1943;
        _2512 = _2287;
        _2514 = _2289;
        _2516 = _2291;
    }
    float _4415 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    float _4426 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
    float _4437 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
    uint _2536 = _239 + 6u;
    float _2544 = _668 / cbSceneParam._m0[86u].x;
    float _2545 = _669 / cbSceneParam._m0[86u].y;
    vec4 _2559 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2544, _2545, (log2((isnan(cbSceneParam._m0[77u].w) ? _603 : (isnan(_603) ? cbSceneParam._m0[77u].w : min(_603, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2561 = _2559.x;
    float _2562 = _2559.y;
    float _2563 = _2559.z;
    float _2564 = _2559.w;
    float _2657;
    float _2659;
    float _2661;
    float _2663;
    if (_603 > cbSceneParam._m0[78u].w)
    {
        float _2619 = isnan(_603) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _603 : min(cbSceneParam._m0[80u].w, _603));
        float _2620 = _2619 / _603;
        float _2631 = _2620 * _653;
        float _2632 = _654 * _2620;
        float _2633 = (-0.0) - _2632;
        float _2635 = _2620 * _655;
        float _2637 = (cbSceneParam._m0[77u].w * _2633) / _2619;
        float _2638 = _2637 + cbSceneParam._m0[79u].w;
        float _2639 = cbSceneParam._m0[79u].w - _2632;
        float _2645 = sqrt(((_2631 * _2631) + (_2632 * _2632)) + (_2635 * _2635));
        float _2648 = (1.0 - (cbSceneParam._m0[77u].w / _2619)) * _2645;
        float _2653 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2655 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2808;
        if (abs((_2633 - _2637) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2808 = ((((_2638 > 0.0) ? exp2(_2653 * _2638) : (2.0 - exp2(_2655 * _2638))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2648;
        }
        else
        {
            float _2768 = 1.0 / cbSceneParam._m0[80u].x;
            float _2769 = isnan(_2639) ? _2638 : (isnan(_2638) ? _2639 : max(_2638, _2639));
            float _2770 = isnan(_2639) ? _2638 : (isnan(_2638) ? _2639 : min(_2638, _2639));
            float _2779 = isnan(0.0) ? _2769 : (isnan(_2769) ? 0.0 : min(_2769, 0.0));
            float _2780 = isnan(0.0) ? _2770 : (isnan(_2770) ? 0.0 : min(_2770, 0.0));
            _2808 = ((abs(_2645 / _2633) * cbSceneParam._m0[80u].y) * ((((_2779 - _2780) * 2.0) - ((exp2(_2653 * (isnan(0.0) ? _2769 : (isnan(_2769) ? 0.0 : max(_2769, 0.0)))) - exp2(_2653 * (isnan(0.0) ? _2770 : (isnan(_2770) ? 0.0 : max(_2770, 0.0))))) * _2768)) - ((exp2(_2655 * _2779) - exp2(_2655 * _2780)) * _2768))) + (_2648 * cbSceneParam._m0[80u].z);
        }
        vec4 _2810 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2544, _2545, 1.0), 0.0);
        float _2819 = exp2((_2808 * (-1.44269502162933349609375)) * (1.0 - _2810.w));
        float _2820 = log2(_2819);
        float _2836 = log2(_2564);
        _2657 = (exp2(_2836 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2820 * cbSceneParam._m0[78u].x)) * _2810.x) / cbSceneParam._m0[78u].x)) + _2561;
        _2659 = (exp2(_2836 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2820 * cbSceneParam._m0[78u].y)) * _2810.y) / cbSceneParam._m0[78u].y)) + _2562;
        _2661 = (exp2(_2836 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2820 * cbSceneParam._m0[78u].z)) * _2810.z) / cbSceneParam._m0[78u].z)) + _2563;
        _2663 = _2819 * _2564;
    }
    else
    {
        _2657 = _2561;
        _2659 = _2562;
        _2661 = _2563;
        _2663 = _2564;
    }
    float _2675 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2676 = _2675 == 3.0;
    float _2677 = log2(_2663);
    float _2684 = exp2(_2677 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0))) * (_2506 + ((isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0))) * _749))) + ((_2512 + ((isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0))) * _1557)) * cbPerFrame._m0[3u].x));
    float _2685 = exp2(_2677 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0))) * (_2508 + ((isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0))) * _749))) + ((_2514 + ((isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0))) * _1557)) * cbPerFrame._m0[3u].x));
    float _2686 = exp2(_2677 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0))) * (_2510 + ((isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0))) * _749))) + ((_2516 + ((isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0))) * _1557)) * cbPerFrame._m0[3u].x));
    float _2695 = (_2675 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2695 * (_2676 ? _2684 : (_2684 + (cbSceneParam._m0[72u].w * _2657)));
    SV_Target.y = _2695 * (_2676 ? _2685 : (_2685 + (cbSceneParam._m0[72u].w * _2659)));
    SV_Target.z = _2695 * (_2676 ? _2686 : (_2686 + (cbSceneParam._m0[72u].w * _2661)));
    SV_Target.w = cbInstanceData._m0[_2536].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2536].w;
}


