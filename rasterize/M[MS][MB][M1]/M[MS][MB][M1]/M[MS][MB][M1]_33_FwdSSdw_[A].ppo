#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1196;
float _3603;
float _3604;
float _3605;
float _3606;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _213 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _214 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _215 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _221 = inversesqrt(dot(vec3(_213, _214, _215), vec3(_213, _214, _215)));
    float _222 = _221 * _213;
    float _223 = _221 * _214;
    float _224 = _221 * _215;
    float _228 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _229 = _228 * NORMAL.x;
    float _230 = _228 * NORMAL.y;
    float _231 = _228 * NORMAL.z;
    float _235 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _236 = _235 * TANGENT.x;
    float _237 = _235 * TANGENT.y;
    float _238 = _235 * TANGENT.z;
    uint _241 = uint(roundEven(NORMAL.w)) * 13u;
    uint _246 = _241 + 1u;
    uint _250 = _241 + 2u;
    float _259 = sqrt(((cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x) + (cbInstanceData._m0[_241].x * cbInstanceData._m0[_241].x)) + (cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x));
    float _260 = _259 * TEXCOORD.z;
    float _261 = _259 * TEXCOORD.w;
    vec4 _280 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _286 = _280.x * cbMtdParam._m0[9u].x;
    float _287 = _280.y * cbMtdParam._m0[9u].y;
    float _288 = _280.z * cbMtdParam._m0[9u].z;
    vec4 _306 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _310 = _306.z;
    float _315 = (_306.x * 2.0) + (-1.0);
    float _317 = (_306.y * 2.0) + (-1.0);
    float _318 = dot(vec2(_315, _317), vec2(_315, _317));
    float _3615 = isnan(0.0) ? _318 : (isnan(_318) ? 0.0 : max(_318, 0.0));
    float _324 = sqrt(1.0 - (isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0))));
    float _327 = fma(_324, _229, fma(_317, _236, _315 * _222));
    float _330 = fma(_324, _230, fma(_317, _237, _315 * _223));
    float _333 = fma(_324, _231, fma(_317, _238, _315 * _224));
    float _337 = inversesqrt(dot(vec3(_327, _330, _333), vec3(_327, _330, _333)));
    vec4 _373 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _260) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _261) + cbTextureTilingScale._m0[11u].w));
    float _375 = _373.x;
    float _376 = 1.0 - _375;
    float _383 = ((_375 - _376) * cbMtdParam._m0[24u].z) + _376;
    float _385 = (cbMtdParam._m0[19u].x + dot(vec4(_337 * _327, _337 * _330, _337 * _333, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_383 * cbMtdParam._m0[21u].z);
    float _3626 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _386 = isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0));
    float _388 = (-0.0) - cbMtdParam._m0[24u].x;
    float _390 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
    float _391 = isnan(1.0) ? _390 : (isnan(_390) ? 1.0 : min(_390, 1.0));
    float _398 = _386 - ((_386 * TEXCOORD_8.x) * _391);
    float _399 = _386 - ((_386 * TEXCOORD_8.y) * _391);
    float _400 = _386 - ((_386 * TEXCOORD_8.z) * _391);
    float _407 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _411 = ((isnan(0.0) ? _407 : (isnan(_407) ? 0.0 : min(_407, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _419 = (_411 - (((_383 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _411))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3657 = isnan(0.0) ? _419 : (isnan(_419) ? 0.0 : max(_419, 0.0));
    float _420 = isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0));
    float _424 = ((_398 * (cbMtdParam._m0[17u].x - _286)) * _420) + _286;
    float _425 = ((_399 * (cbMtdParam._m0[17u].y - _287)) * _420) + _287;
    float _426 = ((_400 * (cbMtdParam._m0[17u].z - _288)) * _420) + _288;
    vec4 _438 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _260) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _261) + cbTextureTilingScale._m0[19u].w));
    float _440 = _438.x;
    float _441 = 1.0 - _440;
    float _470 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_440 - _441) * cbMtdParam._m0[24u].w) + _441) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3668 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _471 = isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0));
    float _479 = ((((cbMtdParam._m0[10u].x - _424) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _471) + _424;
    float _480 = ((((cbMtdParam._m0[10u].y - _425) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _471) + _425;
    float _481 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _426)) * _471) + _426;
    vec4 _494 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _496 = _494.x;
    float _499 = _496 - ((_496 * _398) * _420);
    float _501 = _499 - (_499 * _471);
    vec4 _515 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _260) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _261) + cbTextureTilingScale._m0[15u].w));
    float _522 = (_515.x * 2.0) + (-1.0);
    float _523 = (_515.y * 2.0) + (-1.0);
    float _524 = dot(vec2(_522, _523), vec2(_522, _523));
    float _3679 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _533 = (((_515.z - _310) * _398) * _420) + _310;
    float _536 = ((cbMtdParam._m0[23u].y - _533) * _471) + _533;
    vec4 _555 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _260) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _261) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _561 = (_555.x * 2.0) + (-1.0);
    float _562 = (_555.y * 2.0) + (-1.0);
    float _563 = dot(vec2(_561, _562), vec2(_561, _562));
    float _3690 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _583 = (((cbMtdParam._m0[21u].x * _315) + ((_522 - _315) * _398)) * _420) + _315;
    float _584 = (((cbMtdParam._m0[21u].x * _317) + ((_523 - _317) * _399)) * _420) + _317;
    float _585 = (((sqrt(1.0 - (isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0)))) - _324) * _400) * _420) + _324;
    float _596 = (((_561 - _583) + (_583 * cbMtdParam._m0[22u].z)) * _471) + _583;
    float _597 = (((_562 - _584) + (_584 * cbMtdParam._m0[22u].z)) * _471) + _584;
    float _598 = ((sqrt(1.0 - (isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0)))) - _585) * _471) + _585;
    float _600 = cbMtdParam._m0[22u].x + _306.w;
    float _603 = fma(_598, _229, fma(_597, _236, _596 * _222));
    float _606 = fma(_598, _230, fma(_597, _237, _596 * _223));
    float _609 = fma(_598, _231, fma(_597, _238, _596 * _224));
    float _613 = inversesqrt(dot(vec3(_603, _606, _609), vec3(_603, _606, _609)));
    float _614 = _613 * _603;
    float _615 = _613 * _606;
    float _616 = _613 * _609;
    float _3701 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
    float _617 = isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0));
    float _3712 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _3723 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _3734 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _3745 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _3756 = isnan(0.0) ? _501 : (isnan(_501) ? 0.0 : max(_501, 0.0));
    float _622 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
    float _636 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _676 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _686 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _676);
    float _687 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _676);
    float _688 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _676);
    float _692 = inversesqrt(dot(vec3(_686, _687, _688), vec3(_686, _687, _688)));
    float _693 = _686 * _692;
    float _694 = _687 * _692;
    float _695 = _688 * _692;
    vec4 _700 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _702 = _700.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _877 = sqrt(((_686 * _686) + (_687 * _687)) + (_688 * _688));
        float _883 = (cbMatDynParam._m0[5u].x * _877) + cbMatDynParam._m0[5u].y;
        float _3767 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
        float _884 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
        float _888 = (cbMatDynParam._m0[5u].z * _877) + cbMatDynParam._m0[5u].w;
        float _3778 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0))) - _884)) + _884) < ((_702 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _714 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _715 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _735 = fma(_616, cbSceneParam._m0[5u].z, fma(_615, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _614));
    float _738 = fma(_616, cbSceneParam._m0[6u].z, fma(_615, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _614));
    float _741 = fma(_616, cbSceneParam._m0[7u].z, fma(_615, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _614));
    uint _754 = _241 + 9u;
    uint _755 = _754 + uint(cbMatDynParam._m0[0u].w);
    float _761 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0)))) * cbInstanceData._m0[_755].x;
    float _762 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0)))) * cbInstanceData._m0[_755].y;
    float _763 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0)))) * cbInstanceData._m0[_755].z;
    float _3789 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
    float _764 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
    float _3800 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _765 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
    float _3811 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
    float _766 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
    float _767 = 1.0 - _622;
    float _768 = _764 * _767;
    float _769 = _765 * _767;
    float _770 = _766 * _767;
    float _775 = (_764 + (-0.039999999105930328369140625)) * _622;
    float _776 = (_765 + (-0.039999999105930328369140625)) * _622;
    float _777 = (_766 + (-0.039999999105930328369140625)) * _622;
    float _778 = _775 + 0.039999999105930328369140625;
    float _780 = _776 + 0.039999999105930328369140625;
    float _781 = _777 + 0.039999999105930328369140625;
    vec4 _790 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _714, cbSceneParam._m0[86u].y * _715));
    float _794 = ((isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0))) * TEXCOORD_5.w) * _790.x;
    float _795 = dot(vec3(_614, _615, _616), vec3(_693, _694, _695));
    float _798 = _795 * 2.0;
    float _802 = (_798 * _614) - _693;
    float _803 = (_798 * _615) - _694;
    float _804 = (_798 * _616) - _695;
    float _808 = abs(dot(vec3(_693, _694, _695), vec3(_614, _615, _616)));
    float _3822 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
    float _810 = sqrt(_617);
    float _823 = exp2((_810 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_810 * 3.0));
    float _829 = (1.0 - _823) * ((_810 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _830 = _823 * _810;
    float _858 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _862 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _866 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1195;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _920 = fma(_866, cbModelParam._m0[26u].z, fma(_862, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _858));
        float _924 = fma(_866, cbModelParam._m0[27u].z, fma(_862, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _858));
        float _928 = fma(_866, cbModelParam._m0[28u].z, fma(_862, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _858));
        float _953 = _858 + _614;
        float _954 = _862 + _615;
        float _955 = _866 + _616;
        float _965 = fma(_955, cbModelParam._m0[26u].z, fma(_954, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _953)) - _920;
        float _966 = fma(_955, cbModelParam._m0[27u].z, fma(_954, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _953)) - _924;
        float _967 = fma(_955, cbModelParam._m0[28u].z, fma(_954, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _953)) - _928;
        float _971 = inversesqrt(dot(vec3(_965, _966, _967), vec3(_965, _966, _967)));
        float _984 = ((_971 * _965) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_920 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _985 = ((_971 * _966) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_924 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _986 = ((_971 * _967) / cbModelParam._m0[34u].z) + ((((((_928 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _989 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_984, _985, _986), 0.0);
        vec4 _996 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_984, _985, _986), 0.0);
        vec4 _1003 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_984, _985, _986), 0.0);
        vec4 _1010 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_984, _985, _986), 0.0);
        float _1023 = exp2((_989.w + (-0.5)) * 20.0) * 2.0;
        float _1024 = _1023 * (_989.x + (-0.5));
        float _1025 = _1023 * (_989.y + (-0.5));
        float _1026 = _1023 * (_989.z + (-0.5));
        float _1033 = exp2((_996.w + (-0.5)) * 20.0) * 2.0;
        float _1034 = _1033 * (_996.x + (-0.5));
        float _1035 = _1033 * (_996.y + (-0.5));
        float _1036 = _1033 * (_996.z + (-0.5));
        float _1043 = exp2((_1003.w + (-0.5)) * 20.0) * 2.0;
        float _1044 = _1043 * (_1003.x + (-0.5));
        float _1045 = _1043 * (_1003.y + (-0.5));
        float _1046 = _1043 * (_1003.z + (-0.5));
        float _1053 = exp2((_1010.w + (-0.5)) * 20.0) * 2.0;
        float _1054 = _1053 * (_1010.x + (-0.5));
        float _1055 = _1053 * (_1010.y + (-0.5));
        float _1056 = _1053 * (_1010.z + (-0.5));
        float _1057 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1058 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1059 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1060 = _1024 * 0.5;
        float _1061 = _1034 * 0.5;
        float _1062 = _1044 * 0.5;
        float _1063 = dot(vec3(_1060, _1061, _1062), vec3(_1060, _1061, _1062));
        float _1068 = (_1063 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1063);
        float _1077 = (dot(vec3(_614, _615, _616), vec3(_1068 * _1060, _1068 * _1061, _1068 * _1062)) + 1.0) * 0.5;
        float _3848 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1087 = sqrt(((_1061 * _1061) + (_1060 * _1060)) + (_1062 * _1062)) / (_1057 + 9.9999997473787516355514526367188e-06);
        float _3859 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1088 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
        float _1089 = _1088 * 2.0;
        float _1093 = (1.0 - _1088) / (_1088 + 1.0);
        float _3870 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1094 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
        float _1103 = ((((1.0 - _1094) * (_1089 + 2.0)) * exp2(log2(isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0))) * (_1089 + 1.0))) + _1094) * _1057;
        float _1104 = _1025 * 0.5;
        float _1105 = _1035 * 0.5;
        float _1106 = _1045 * 0.5;
        float _1107 = dot(vec3(_1104, _1105, _1106), vec3(_1104, _1105, _1106));
        float _1112 = (_1107 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1107);
        float _1120 = (dot(vec3(_614, _615, _616), vec3(_1112 * _1104, _1112 * _1105, _1112 * _1106)) + 1.0) * 0.5;
        float _3881 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1129 = sqrt(((_1105 * _1105) + (_1104 * _1104)) + (_1106 * _1106)) / (_1058 + 9.9999997473787516355514526367188e-06);
        float _3892 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1130 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
        float _1131 = _1130 * 2.0;
        float _1135 = (1.0 - _1130) / (_1130 + 1.0);
        float _3903 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1136 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
        float _1145 = ((((1.0 - _1136) * (_1131 + 2.0)) * exp2(log2(isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0))) * (_1131 + 1.0))) + _1136) * _1058;
        float _1146 = _1026 * 0.5;
        float _1147 = _1036 * 0.5;
        float _1148 = _1046 * 0.5;
        float _1149 = dot(vec3(_1146, _1147, _1148), vec3(_1146, _1147, _1148));
        float _1154 = (_1149 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1149);
        float _1162 = (dot(vec3(_614, _615, _616), vec3(_1154 * _1146, _1154 * _1147, _1154 * _1148)) + 1.0) * 0.5;
        float _3914 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1171 = sqrt(((_1147 * _1147) + (_1146 * _1146)) + (_1148 * _1148)) / (_1059 + 9.9999997473787516355514526367188e-06);
        float _3925 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1172 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
        float _1173 = _1172 * 2.0;
        float _1177 = (1.0 - _1172) / (_1172 + 1.0);
        float _3936 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1178 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
        float _1187 = ((((1.0 - _1178) * (_1173 + 2.0)) * exp2(log2(isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0))) * (_1173 + 1.0))) + _1178) * _1059;
        _1195 = _1026;
        _1197 = _1025;
        _1198 = _1024;
        _1199 = _1036;
        _1200 = _1035;
        _1201 = _1034;
        _1202 = _1046;
        _1203 = _1045;
        _1204 = _1044;
        _1205 = _1059;
        _1206 = _1058;
        _1207 = _1057;
        _1208 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0)));
        _1209 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0)));
        _1210 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0)));
    }
    else
    {
        _1195 = _1196;
        _1197 = _1196;
        _1198 = _1196;
        _1199 = _1196;
        _1200 = _1196;
        _1201 = _1196;
        _1202 = _1196;
        _1203 = _1196;
        _1204 = _1196;
        _1205 = _1196;
        _1206 = _1196;
        _1207 = _1196;
        _1208 = 0.0;
        _1209 = 0.0;
        _1210 = 0.0;
    }
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1238 = fma(_866, cbModelParam._m0[30u].z, fma(_862, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _858));
        float _1242 = fma(_866, cbModelParam._m0[31u].z, fma(_862, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _858));
        float _1246 = fma(_866, cbModelParam._m0[32u].z, fma(_862, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _858));
        float _1269 = _858 + _614;
        float _1270 = _862 + _615;
        float _1271 = _866 + _616;
        float _1281 = fma(_1271, cbModelParam._m0[30u].z, fma(_1270, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1269)) - _1238;
        float _1282 = fma(_1271, cbModelParam._m0[31u].z, fma(_1270, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1269)) - _1242;
        float _1283 = fma(_1271, cbModelParam._m0[32u].z, fma(_1270, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1269)) - _1246;
        float _1287 = inversesqrt(dot(vec3(_1281, _1282, _1283), vec3(_1281, _1282, _1283)));
        float _1300 = ((_1287 * _1281) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1238 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1301 = ((_1287 * _1282) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1242 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1302 = ((_1287 * _1283) / cbModelParam._m0[35u].z) + ((((((_1246 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1304 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1300, _1301, _1302), 0.0);
        vec4 _1311 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1300, _1301, _1302), 0.0);
        vec4 _1318 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1300, _1301, _1302), 0.0);
        vec4 _1325 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1300, _1301, _1302), 0.0);
        float _1337 = exp2((_1304.w + (-0.5)) * 20.0) * 2.0;
        float _1338 = _1337 * (_1304.x + (-0.5));
        float _1339 = _1337 * (_1304.y + (-0.5));
        float _1340 = _1337 * (_1304.z + (-0.5));
        float _1347 = exp2((_1311.w + (-0.5)) * 20.0) * 2.0;
        float _1348 = _1347 * (_1311.x + (-0.5));
        float _1349 = _1347 * (_1311.y + (-0.5));
        float _1350 = _1347 * (_1311.z + (-0.5));
        float _1357 = exp2((_1318.w + (-0.5)) * 20.0) * 2.0;
        float _1358 = _1357 * (_1318.x + (-0.5));
        float _1359 = _1357 * (_1318.y + (-0.5));
        float _1360 = _1357 * (_1318.z + (-0.5));
        float _1367 = exp2((_1325.w + (-0.5)) * 20.0) * 2.0;
        float _1368 = _1367 * (_1325.x + (-0.5));
        float _1369 = _1367 * (_1325.y + (-0.5));
        float _1370 = _1367 * (_1325.z + (-0.5));
        float _1371 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1372 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1373 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1374 = _1338 * 0.5;
        float _1375 = _1348 * 0.5;
        float _1376 = _1358 * 0.5;
        float _1377 = dot(vec3(_1374, _1375, _1376), vec3(_1374, _1375, _1376));
        float _1382 = (_1377 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1377);
        float _1390 = (dot(vec3(_614, _615, _616), vec3(_1382 * _1374, _1382 * _1375, _1382 * _1376)) + 1.0) * 0.5;
        float _3977 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1399 = sqrt(((_1375 * _1375) + (_1374 * _1374)) + (_1376 * _1376)) / (_1371 + 9.9999997473787516355514526367188e-06);
        float _3988 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1400 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
        float _1401 = _1400 * 2.0;
        float _1405 = (1.0 - _1400) / (_1400 + 1.0);
        float _3999 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1406 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
        float _1415 = ((((1.0 - _1406) * (_1401 + 2.0)) * exp2(log2(isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0))) * (_1401 + 1.0))) + _1406) * _1371;
        float _1416 = _1339 * 0.5;
        float _1417 = _1349 * 0.5;
        float _1418 = _1359 * 0.5;
        float _1419 = dot(vec3(_1416, _1417, _1418), vec3(_1416, _1417, _1418));
        float _1424 = (_1419 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1419);
        float _1432 = (dot(vec3(_614, _615, _616), vec3(_1424 * _1416, _1424 * _1417, _1424 * _1418)) + 1.0) * 0.5;
        float _4010 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1441 = sqrt(((_1417 * _1417) + (_1416 * _1416)) + (_1418 * _1418)) / (_1372 + 9.9999997473787516355514526367188e-06);
        float _4021 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1442 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
        float _1443 = _1442 * 2.0;
        float _1447 = (1.0 - _1442) / (_1442 + 1.0);
        float _4032 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1448 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
        float _1457 = ((((1.0 - _1448) * (_1443 + 2.0)) * exp2(log2(isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0))) * (_1443 + 1.0))) + _1448) * _1372;
        float _1458 = _1340 * 0.5;
        float _1459 = _1350 * 0.5;
        float _1460 = _1360 * 0.5;
        float _1461 = dot(vec3(_1458, _1459, _1460), vec3(_1458, _1459, _1460));
        float _1466 = (_1461 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1461);
        float _1474 = (dot(vec3(_614, _615, _616), vec3(_1466 * _1458, _1466 * _1459, _1466 * _1460)) + 1.0) * 0.5;
        float _4043 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1483 = sqrt(((_1459 * _1459) + (_1458 * _1458)) + (_1460 * _1460)) / (_1373 + 9.9999997473787516355514526367188e-06);
        float _4054 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1484 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
        float _1485 = _1484 * 2.0;
        float _1489 = (1.0 - _1484) / (_1484 + 1.0);
        float _4065 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1490 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
        float _1499 = ((((1.0 - _1490) * (_1485 + 2.0)) * exp2(log2(isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0))) * (_1485 + 1.0))) + _1490) * _1373;
        _1507 = _1340;
        _1508 = _1339;
        _1509 = _1338;
        _1510 = _1350;
        _1511 = _1349;
        _1512 = _1348;
        _1513 = _1360;
        _1514 = _1359;
        _1515 = _1358;
        _1516 = _1373;
        _1517 = _1372;
        _1518 = _1371;
        _1519 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0)));
        _1520 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0)));
        _1521 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0)));
    }
    else
    {
        _1507 = _1196;
        _1508 = _1196;
        _1509 = _1196;
        _1510 = _1196;
        _1511 = _1196;
        _1512 = _1196;
        _1513 = _1196;
        _1514 = _1196;
        _1515 = _1196;
        _1516 = _1196;
        _1517 = _1196;
        _1518 = _1196;
        _1519 = 0.0;
        _1520 = 0.0;
        _1521 = 0.0;
    }
    float _1531 = (cbModelParam._m0[1u].x * (_1519 - _1208)) + _1208;
    float _1532 = (cbModelParam._m0[1u].x * (_1520 - _1209)) + _1209;
    float _1533 = (cbModelParam._m0[1u].x * (_1521 - _1210)) + _1210;
    float _1554 = fma(_1533, cbSceneParam._m0[89u].z, fma(_1532, cbSceneParam._m0[89u].y, _1531 * cbSceneParam._m0[89u].x));
    float _1557 = fma(_1533, cbSceneParam._m0[90u].z, fma(_1532, cbSceneParam._m0[90u].y, _1531 * cbSceneParam._m0[90u].x));
    float _1560 = fma(_1533, cbSceneParam._m0[91u].z, fma(_1532, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1531));
    float _1575 = _802 * 0.5;
    float _1576 = _803 * 0.5;
    float _1577 = _804 * 0.5;
    float _1578 = dot(vec4(_1575, _1576, _1577, 1.0), vec4(_1509, _1512, _1515, _1518));
    float _1581 = dot(vec4(_1575, _1576, _1577, 1.0), vec4(_1508, _1511, _1514, _1517));
    float _1584 = dot(vec4(_1575, _1576, _1577, 1.0), vec4(_1507, _1510, _1513, _1516));
    float _1618;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1591 = dot(vec4(_1575, _1576, _1577, 1.0), vec4(_1195, _1199, _1202, _1205));
        float _1595 = dot(vec4(_1575, _1576, _1577, 1.0), vec4(_1197, _1200, _1203, _1206));
        float _1599 = dot(vec4(_1575, _1576, _1577, 1.0), vec4(_1198, _1201, _1204, _1207));
        float _1606 = dot(vec4(cbModelParam._m0[39u]), vec4(_1575, _1576, _1577, 1.0));
        _1618 = dot(vec3(isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0)), isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0)), isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1606) ? 0.0 : (isnan(0.0) ? _1606 : max(0.0, _1606))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1618 = 1.0;
    }
    float _1629;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1620 = dot(vec4(cbModelParam._m0[40u]), vec4(_1575, _1576, _1577, 1.0));
        _1629 = dot(vec3(isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0)), isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0)), isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1620) ? 0.0 : (isnan(0.0) ? _1620 : max(0.0, _1620))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1629 = 1.0;
    }
    float _1633 = (_1629 * cbModelParam._m0[1u].x) + (_1618 * (1.0 - cbModelParam._m0[1u].x));
    float _1643 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _617);
    float _1644 = isnan(_1643) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1643 : min(cbModelParam._m0[25u].z, _1643));
    float _1725;
    float _1727;
    float _1729;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1692 = fma(_866, cbModelParam._m0[13u].z, fma(_862, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _858)) + cbModelParam._m0[13u].w;
        float _1696 = fma(_866, cbModelParam._m0[14u].z, fma(_862, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _858)) + cbModelParam._m0[14u].w;
        float _1700 = fma(_866, cbModelParam._m0[15u].z, fma(_862, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _858)) + cbModelParam._m0[15u].w;
        float _1703 = fma(_804, cbModelParam._m0[13u].z, fma(_803, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _802));
        float _1706 = fma(_804, cbModelParam._m0[14u].z, fma(_803, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _802));
        float _1709 = fma(_804, cbModelParam._m0[15u].z, fma(_803, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _802));
        float _1737;
        if (_1703 > 0.0)
        {
            _1737 = abs((1.0 - _1692) / _1703);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1703 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1692 + 1.0) / _1703);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1737 = frontier_phi_17_15_ladder;
        }
        float _1962;
        if (_1706 > 0.0)
        {
            _1962 = abs((1.0 - _1696) / _1706);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1706 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1696 + 1.0) / _1706);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1962 = frontier_phi_26_22_ladder;
        }
        float _2219;
        if (_1709 > 0.0)
        {
            _2219 = abs((1.0 - _1700) / _1709);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1709 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1700 + 1.0) / _1709);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2219 = frontier_phi_38_33_ladder;
        }
        float _2221 = isnan(_1962) ? _1737 : (isnan(_1737) ? _1962 : min(_1737, _1962));
        float _2222 = isnan(_2219) ? _2221 : (isnan(_2221) ? _2219 : min(_2221, _2219));
        float _2226 = (_2222 * _1703) + _1692;
        float _2227 = (_2222 * _1706) + _1696;
        float _2228 = (_2222 * _1709) + _1700;
        float _2229 = _2222 * 9.9999997473787516355514526367188e-05;
        float _2231 = (-1.0) - _2229;
        float _2233 = _2229 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2228 > _2233) || ((_2228 < _2231) || ((_2227 > _2233) || ((_2227 < _2231) || ((_2226 < _2231) || (_2226 > _2233))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2356 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2228, cbModelParam._m0[9u].z, fma(_2227, cbModelParam._m0[9u].y, _2226 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2228, cbModelParam._m0[10u].z, fma(_2227, cbModelParam._m0[10u].y, _2226 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2228, cbModelParam._m0[11u].z, fma(_2227, cbModelParam._m0[11u].y, _2226 * cbModelParam._m0[11u].x))), _1644);
            frontier_phi_16_38_ladder = _2356.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2356.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2356.x * cbModelParam._m0[1u].y;
        }
        _1725 = frontier_phi_16_38_ladder_2;
        _1727 = frontier_phi_16_38_ladder_1;
        _1729 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1713 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_802, _803, _804), _1644);
        _1725 = _1713.x * cbModelParam._m0[1u].y;
        _1727 = _1713.y * cbModelParam._m0[1u].y;
        _1729 = _1713.z * cbModelParam._m0[1u].y;
    }
    float _1733 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _617);
    float _1734 = isnan(_1733) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1733 : min(cbModelParam._m0[25u].w, _1733));
    float _1824;
    float _1826;
    float _1828;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1788 = fma(_866, cbModelParam._m0[21u].z, fma(_862, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _858)) + cbModelParam._m0[21u].w;
        float _1792 = fma(_866, cbModelParam._m0[22u].z, fma(_862, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _858)) + cbModelParam._m0[22u].w;
        float _1796 = fma(_866, cbModelParam._m0[23u].z, fma(_862, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _858)) + cbModelParam._m0[23u].w;
        float _1799 = fma(_804, cbModelParam._m0[21u].z, fma(_803, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _802));
        float _1802 = fma(_804, cbModelParam._m0[22u].z, fma(_803, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _802));
        float _1805 = fma(_804, cbModelParam._m0[23u].z, fma(_803, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _802));
        float _1967;
        if (_1799 > 0.0)
        {
            _1967 = abs((1.0 - _1788) / _1799);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1799 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1788 + 1.0) / _1799);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1967 = frontier_phi_28_24_ladder;
        }
        float _2246;
        if (_1802 > 0.0)
        {
            _2246 = abs((1.0 - _1792) / _1802);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1802 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1792 + 1.0) / _1802);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2246 = frontier_phi_40_35_ladder;
        }
        float _2459;
        if (_1805 > 0.0)
        {
            _2459 = abs((1.0 - _1796) / _1805);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1805 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1796 + 1.0) / _1805);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2459 = frontier_phi_49_46_ladder;
        }
        float _2461 = isnan(_2246) ? _1967 : (isnan(_1967) ? _2246 : min(_1967, _2246));
        float _2462 = isnan(_2459) ? _2461 : (isnan(_2461) ? _2459 : min(_2461, _2459));
        float _2466 = (_2462 * _1799) + _1788;
        float _2467 = (_2462 * _1802) + _1792;
        float _2468 = (_2462 * _1805) + _1796;
        float _2469 = _2462 * 9.9999997473787516355514526367188e-05;
        float _2470 = (-1.0) - _2469;
        float _2472 = _2469 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2468 > _2472) || ((_2468 < _2470) || ((_2467 > _2472) || ((_2467 < _2470) || ((_2466 < _2470) || (_2466 > _2472))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2667 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2468, cbModelParam._m0[17u].z, fma(_2467, cbModelParam._m0[17u].y, _2466 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2468, cbModelParam._m0[18u].z, fma(_2467, cbModelParam._m0[18u].y, _2466 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2468, cbModelParam._m0[19u].z, fma(_2467, cbModelParam._m0[19u].y, _2466 * cbModelParam._m0[19u].x))), _1734);
            frontier_phi_25_49_ladder = _2667.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2667.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2667.x * cbModelParam._m0[1u].z;
        }
        _1824 = frontier_phi_25_49_ladder_2;
        _1826 = frontier_phi_25_49_ladder_1;
        _1828 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1808 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_802, _803, _804), _1734);
        _1824 = _1808.x * cbModelParam._m0[1u].z;
        _1826 = _1808.y * cbModelParam._m0[1u].z;
        _1828 = _1808.z * cbModelParam._m0[1u].z;
    }
    float _1841 = (((_829 * _778) + _830) * _794) * ((cbModelParam._m0[1u].w * (_1824 - _1725)) + _1725);
    float _1843 = (((_829 * _780) + _830) * _794) * ((cbModelParam._m0[1u].w * (_1826 - _1727)) + _1727);
    float _1845 = (((_829 * _781) + _830) * _794) * ((cbModelParam._m0[1u].w * (_1828 - _1729)) + _1729);
    float _1848 = fma(_1845, cbSceneParam._m0[89u].z, fma(_1843, cbSceneParam._m0[89u].y, _1841 * cbSceneParam._m0[89u].x));
    float _1851 = fma(_1845, cbSceneParam._m0[90u].z, fma(_1843, cbSceneParam._m0[90u].y, _1841 * cbSceneParam._m0[90u].x));
    float _1854 = fma(_1845, cbSceneParam._m0[91u].z, fma(_1843, cbSceneParam._m0[91u].y, _1841 * cbSceneParam._m0[91u].x));
    vec4 _1862 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_714, _715));
    float _1864 = _1862.w;
    float _1876 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1864);
    float _1877 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1864);
    float _1878 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1864);
    uvec4 _1882 = floatBitsToUint(cbInstanceData._m0[_241 + 5u]);
    uint _1884 = _1882.x * 14u;
    uint _1885 = _1884 + 13u;
    float _1892 = _794 + (-1.0);
    float _1897 = (cbLight._m0[_1885].x * _1892) + 1.0;
    float _1898 = (cbLight._m0[_1885].y * _1892) + 1.0;
    float _1899 = (cbLight._m0[_1885].z * _1892) + 1.0;
    float _1900 = (cbLight._m0[_1885].w * _1892) + 1.0;
    uint _1901 = _1884 + 5u;
    float _1907 = isnan(1.0) ? _1898 : (isnan(_1898) ? 1.0 : min(_1898, 1.0));
    uint _1911 = _1884 + 4u;
    float _1921 = isnan(1.0) ? _1897 : (isnan(_1897) ? 1.0 : min(_1897, 1.0));
    uint _1925 = _1884 | 1u;
    float _1936 = dot(vec3(cbLight._m0[_1884].xyz), vec3(_614, _615, _616));
    float _1939 = dot(vec3(cbLight._m0[_1925].xyz), vec3(_614, _615, _616));
    float _4201 = isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0));
    float _4212 = isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0));
    float _1944 = (isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0))) * 0.3183098733425140380859375;
    float _1946 = (isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0))) * 0.3183098733425140380859375;
    float _1953 = ((cbLight._m0[_1901].x * _1907) * _1946) + (((cbLight._m0[_1911].x * _1876) * _1921) * _1944);
    float _1954 = ((_1907 * cbLight._m0[_1901].y) * _1946) + (((cbLight._m0[_1911].y * _1877) * _1921) * _1944);
    float _1955 = ((_1907 * cbLight._m0[_1901].z) * _1946) + (((cbLight._m0[_1911].z * _1878) * _1921) * _1944);
    uvec4 _1959 = floatBitsToUint(cbLight._m0[_1884 + 12u]);
    bool _1961 = _1959.x == 0u;
    float _1972;
    float _1974;
    float _1976;
    if (_1961)
    {
        _1972 = _1953;
        _1974 = _1954;
        _1976 = _1955;
    }
    else
    {
        uint _1980 = _1884 + 6u;
        float _1996 = (dot(vec3(cbLight._m0[_1884 + 2u].xyz), vec3(_614, _615, _616)) * 0.5) + 0.5;
        float _1997 = _1996 * _1996;
        float _4223 = isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0));
        float _1998 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
        float _1999 = isnan(1.0) ? _1899 : (isnan(_1899) ? 1.0 : min(_1899, 1.0));
        _1972 = (((cbLight._m0[_1980].x * 0.3183098733425140380859375) * _1998) * _1999) + _1953;
        _1974 = (((cbLight._m0[_1980].y * 0.3183098733425140380859375) * _1998) * _1999) + _1954;
        _1976 = (((cbLight._m0[_1980].z * 0.3183098733425140380859375) * _1998) * _1999) + _1955;
    }
    bool _1979 = _1959.y == 0u;
    float _2017;
    float _2019;
    float _2021;
    if (_1979)
    {
        _2017 = _1972;
        _2019 = _1974;
        _2021 = _1976;
    }
    else
    {
        uint _2190 = _1884 + 7u;
        float _2206 = (dot(vec3(cbLight._m0[_1884 + 3u].xyz), vec3(_614, _615, _616)) * 0.5) + 0.5;
        float _2207 = _2206 * _2206;
        float _4239 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
        float _2208 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
        float _2209 = isnan(1.0) ? _1900 : (isnan(_1900) ? 1.0 : min(_1900, 1.0));
        _2017 = (((cbLight._m0[_2190].x * 0.3183098733425140380859375) * _2208) * _2209) + _1972;
        _2019 = (((cbLight._m0[_2190].y * 0.3183098733425140380859375) * _2208) * _2209) + _1974;
        _2021 = (((cbLight._m0[_2190].z * 0.3183098733425140380859375) * _2208) * _2209) + _1976;
    }
    uint _2024 = _1884 + 8u;
    float _2037 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1884].w)) * _617) * 0.949999988079071044921875);
    float _2038 = _2037 * _2037;
    float _2039 = cbLight._m0[_1884].x + _693;
    float _2040 = cbLight._m0[_1884].y + _694;
    float _2041 = cbLight._m0[_1884].z + _695;
    float _2045 = inversesqrt(dot(vec3(_2039, _2040, _2041), vec3(_2039, _2040, _2041)));
    float _2046 = _2045 * _2039;
    float _2047 = _2045 * _2040;
    float _2048 = _2045 * _2041;
    float _2049 = dot(vec3(_614, _615, _616), vec3(cbLight._m0[_1884].xyz));
    float _4255 = isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0));
    float _2052 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
    float _4266 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
    float _2053 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
    float _2054 = dot(vec3(_614, _615, _616), vec3(_2046, _2047, _2048));
    float _4277 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
    float _2057 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
    float _2058 = dot(vec3(cbLight._m0[_1884].xyz), vec3(_2046, _2047, _2048));
    float _4288 = isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0));
    float _2062 = _2038 * _2038;
    float _2066 = ((_2057 * _2057) * (_2062 + (-1.0))) + 1.0;
    float _2074 = exp2(log2(1.0 - (isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0)))) * 5.0);
    float _2075 = 0.959999978542327880859375 - _775;
    float _2077 = 0.959999978542327880859375 - _776;
    float _2078 = 0.959999978542327880859375 - _777;
    float _2085 = 1.0 - _2038;
    float _2096 = (0.5 / (((_2053 * ((_2052 * _2085) + _2038)) + 9.9999999392252902907785028219223e-09) + (((_2053 * _2085) + _2038) * _2052))) * _2052;
    float _4299 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
    float _2098 = (isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0))) * (_2062 / ((_2066 * _2066) * 3.141590118408203125));
    uint _2112 = _1884 + 9u;
    float _2123 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1925].w)) * _617) * 0.949999988079071044921875);
    float _2124 = _2123 * _2123;
    float _2125 = cbLight._m0[_1925].x + _693;
    float _2126 = cbLight._m0[_1925].y + _694;
    float _2127 = cbLight._m0[_1925].z + _695;
    float _2131 = inversesqrt(dot(vec3(_2125, _2126, _2127), vec3(_2125, _2126, _2127)));
    float _2132 = _2131 * _2125;
    float _2133 = _2131 * _2126;
    float _2134 = _2131 * _2127;
    float _2135 = dot(vec3(_614, _615, _616), vec3(cbLight._m0[_1925].xyz));
    float _4310 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
    float _2138 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
    float _2139 = dot(vec3(_614, _615, _616), vec3(_2132, _2133, _2134));
    float _4321 = isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0));
    float _2142 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
    float _2143 = dot(vec3(cbLight._m0[_1925].xyz), vec3(_2132, _2133, _2134));
    float _4332 = isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0));
    float _2147 = _2124 * _2124;
    float _2151 = ((_2142 * _2142) * (_2147 + (-1.0))) + 1.0;
    float _2158 = exp2(log2(1.0 - (isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0)))) * 5.0);
    float _2165 = 1.0 - _2124;
    float _2175 = (0.5 / (((_2053 * ((_2138 * _2165) + _2124)) + 9.9999999392252902907785028219223e-09) + (((_2053 * _2165) + _2124) * _2138))) * _2138;
    float _4343 = isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0));
    float _2177 = (isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0))) * (_2147 / ((_2151 * _2151) * 3.141590118408203125));
    float _2187 = (((((_2158 * _2075) + _778) * cbLight._m0[_2112].x) * _2177) * _1907) + ((((cbLight._m0[_2024].x * _1876) * ((_2074 * _2075) + _778)) * _2098) * _1921);
    float _2188 = (((((_2158 * _2077) + _780) * cbLight._m0[_2112].y) * _2177) * _1907) + ((((cbLight._m0[_2024].y * _1877) * ((_2074 * _2077) + _780)) * _2098) * _1921);
    float _2189 = (((((_2158 * _2078) + _781) * cbLight._m0[_2112].z) * _2177) * _1907) + ((((cbLight._m0[_2024].z * _1878) * ((_2074 * _2078) + _781)) * _2098) * _1921);
    float _2251;
    float _2253;
    float _2255;
    if (_1961)
    {
        _2251 = _2187;
        _2253 = _2188;
        _2255 = _2189;
    }
    else
    {
        uint _2257 = _1884 + 2u;
        uint _2261 = _1884 + 10u;
        float _2275 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2257].w)) * _617) * 0.949999988079071044921875);
        float _2276 = _2275 * _2275;
        float _2277 = cbLight._m0[_2257].x + _693;
        float _2278 = cbLight._m0[_2257].y + _694;
        float _2279 = cbLight._m0[_2257].z + _695;
        float _2283 = inversesqrt(dot(vec3(_2277, _2278, _2279), vec3(_2277, _2278, _2279)));
        float _2284 = _2283 * _2277;
        float _2285 = _2283 * _2278;
        float _2286 = _2283 * _2279;
        float _2287 = dot(vec3(_614, _615, _616), vec3(cbLight._m0[_2257].xyz));
        float _4354 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
        float _2290 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
        float _2291 = dot(vec3(_614, _615, _616), vec3(_2284, _2285, _2286));
        float _4365 = isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0));
        float _2294 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
        float _2295 = dot(vec3(cbLight._m0[_2257].xyz), vec3(_2284, _2285, _2286));
        float _4376 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
        float _2299 = _2276 * _2276;
        float _2303 = ((_2294 * _2294) * (_2299 + (-1.0))) + 1.0;
        float _2310 = exp2(log2(1.0 - (isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0)))) * 5.0);
        float _2317 = 1.0 - _2276;
        float _2327 = (0.5 / (((_2053 * ((_2290 * _2317) + _2276)) + 9.9999999392252902907785028219223e-09) + (((_2053 * _2317) + _2276) * _2290))) * _2290;
        float _4387 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0));
        float _2329 = (isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0))) * (_2299 / ((_2303 * _2303) * 3.141590118408203125));
        float _2330 = isnan(1.0) ? _1899 : (isnan(_1899) ? 1.0 : min(_1899, 1.0));
        _2251 = (((((_2310 * _2075) + _778) * cbLight._m0[_2261].x) * _2329) * _2330) + _2187;
        _2253 = (((((_2310 * _2077) + _780) * cbLight._m0[_2261].y) * _2329) * _2330) + _2188;
        _2255 = (((((_2310 * _2078) + _781) * cbLight._m0[_2261].z) * _2329) * _2330) + _2189;
    }
    float _2365;
    float _2367;
    float _2369;
    if (_1979)
    {
        _2365 = _2251;
        _2367 = _2253;
        _2369 = _2255;
    }
    else
    {
        uint _2376 = _1884 + 3u;
        uint _2380 = _1884 + 11u;
        float _2394 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2376].w)) * _617) * 0.949999988079071044921875);
        float _2395 = _2394 * _2394;
        float _2396 = cbLight._m0[_2376].x + _693;
        float _2397 = cbLight._m0[_2376].y + _694;
        float _2398 = cbLight._m0[_2376].z + _695;
        float _2402 = inversesqrt(dot(vec3(_2396, _2397, _2398), vec3(_2396, _2397, _2398)));
        float _2403 = _2402 * _2396;
        float _2404 = _2402 * _2397;
        float _2405 = _2402 * _2398;
        float _2406 = dot(vec3(_614, _615, _616), vec3(cbLight._m0[_2376].xyz));
        float _4403 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0));
        float _2409 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
        float _2410 = dot(vec3(_614, _615, _616), vec3(_2403, _2404, _2405));
        float _4414 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0));
        float _2413 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
        float _2414 = dot(vec3(cbLight._m0[_2376].xyz), vec3(_2403, _2404, _2405));
        float _4425 = isnan(0.0) ? _2414 : (isnan(_2414) ? 0.0 : max(_2414, 0.0));
        float _2418 = _2395 * _2395;
        float _2422 = ((_2413 * _2413) * (_2418 + (-1.0))) + 1.0;
        float _2429 = exp2(log2(1.0 - (isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0)))) * 5.0);
        float _2436 = 1.0 - _2395;
        float _2446 = (0.5 / (((_2053 * ((_2409 * _2436) + _2395)) + 9.9999999392252902907785028219223e-09) + (((_2053 * _2436) + _2395) * _2409))) * _2409;
        float _4436 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
        float _2448 = (isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0))) * (_2418 / ((_2422 * _2422) * 3.141590118408203125));
        float _2449 = isnan(1.0) ? _1900 : (isnan(_1900) ? 1.0 : min(_1900, 1.0));
        _2365 = (((((_2429 * _2075) + _778) * cbLight._m0[_2380].x) * _2448) * _2449) + _2251;
        _2367 = (((((_2429 * _2077) + _780) * cbLight._m0[_2380].y) * _2448) * _2449) + _2253;
        _2369 = (((((_2429 * _2078) + _781) * cbLight._m0[_2380].z) * _2448) * _2449) + _2255;
    }
    float _2584;
    float _2586;
    float _2588;
    float _2590;
    float _2592;
    float _2594;
    if (_1882.y == 0u)
    {
        float _2524 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2525 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2524;
        float _2526 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2524;
        float _2527 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2524;
        uvec4 _2539 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2540 = _2539.x;
        uint _2551 = uint((float(_2539.y) * floor(float(uint(cbSceneParam._m0[85u].y * _715) / _2540))) + floor(float(uint(cbSceneParam._m0[85u].x * _714) / _2540)));
        float _2561 = (log2(_2527 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2562 = isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0));
        uint _2565 = uint(isnan(14.0) ? _2562 : (isnan(_2562) ? 14.0 : min(_2562, 14.0)));
        uvec4 _2570 = texelFetch(g_lightClusterGridBuffer, int(((_2565 << 2u) + (_2551 << 6u)) >> 2u));
        uint _2571 = _2570.x;
        uint _2572 = _2539.z;
        float _2672;
        float _2674;
        float _2676;
        float _2678;
        float _2680;
        float _2682;
        if (((((1u << ((_2572 >> 4u) & 15u)) + 4294967295u) & _2571) == 0u) || ((_2572 & 240u) == 0u))
        {
            _2672 = 0.0;
            _2674 = 0.0;
            _2676 = 0.0;
            _2678 = 0.0;
            _2680 = 0.0;
            _2682 = 0.0;
        }
        else
        {
            float _2673;
            float _2675;
            float _2677;
            float _2679;
            float _2681;
            float _2683;
            float _2824 = 0.0;
            float _2825 = 0.0;
            float _2826 = 0.0;
            float _2827 = 0.0;
            float _2828 = 0.0;
            float _2829 = 0.0;
            uint _2830 = 0u;
            uint _2839;
            bool _2840;
            for (;;)
            {
                _2839 = texelFetch(g_lightClassification, int((((_2565 << 5u) + (_2551 << 9u)) + (_2830 << 2u)) >> 2u)).x;
                _2840 = _2839 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2840)
                {
                    frontier_phi_66_pred = _2824;
                    frontier_phi_66_pred_1 = _2829;
                    frontier_phi_66_pred_2 = _2828;
                    frontier_phi_66_pred_3 = _2827;
                    frontier_phi_66_pred_4 = _2826;
                    frontier_phi_66_pred_5 = _2825;
                }
                else
                {
                    float _2969;
                    float _2970;
                    float _2971;
                    float _2972;
                    float _2973;
                    float _2974;
                    uint _2975;
                    _2969 = _2824;
                    _2970 = _2825;
                    _2971 = _2826;
                    _2972 = _2827;
                    _2973 = _2828;
                    _2974 = _2829;
                    _2975 = _2839;
                    float _2896;
                    float _2897;
                    float _2898;
                    float _2899;
                    float _2900;
                    float _2901;
                    for (;;)
                    {
                        uint _2979 = uint(findLSB(_2975)) + (_2830 << 5u);
                        uint _2976 = (_2975 + 4294967295u) & _2975;
                        uint _2981 = _2979 * 48u;
                        vec4 _2995 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2981)).x, texelFetch(g_PointLightRenderingBuffer, int(_2981 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2981 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2981 + 3u)).x));
                        uint _3001 = (_2979 * 48u) + 4u;
                        vec4 _3014 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3001)).x, texelFetch(g_PointLightRenderingBuffer, int(_3001 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3001 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3001 + 3u)).x));
                        uint _3020 = (_2979 * 48u) + 8u;
                        vec3 _3031 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3020)).x, texelFetch(g_PointLightRenderingBuffer, int(_3020 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3020 + 2u)).x));
                        float _3035 = _2995.x - _2525;
                        float _3036 = _2995.y - _2526;
                        float _3037 = _2995.z - _2527;
                        float _3038 = dot(vec3(_3035, _3036, _3037), vec3(_3035, _3036, _3037));
                        float _3041 = inversesqrt(_3038);
                        float _3042 = _3041 * _3035;
                        float _3043 = _3041 * _3036;
                        float _3044 = _3041 * _3037;
                        float _3045 = dot(vec3(_735, _738, _741), vec3(_3042, _3043, _3044));
                        float _3050 = 1.0 - (_3038 * _2995.w);
                        float _4462 = isnan(0.0) ? _3050 : (isnan(_3050) ? 0.0 : max(_3050, 0.0));
                        float _3051 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
                        float _3052 = sqrt(_3038) * _3014.w;
                        float _3055 = 1.39999997615814208984375 / (_3052 + 1.39999997615814208984375);
                        float _3056 = _3055 * _3055;
                        float _3059 = ((1.0 - _3056) * _3045) + _3056;
                        float _3062 = _3052 * _3052;
                        float _3066 = ((isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : max(_3059, 0.0))) * _3051) / ((_3062 * 0.699999988079071044921875) + 1.0);
                        float _3070 = (-0.0) - _2525;
                        float _3071 = (-0.0) - _2526;
                        float _3072 = (-0.0) - _2527;
                        float _3076 = inversesqrt(dot(vec3(_3070, _3071, _3072), vec3(_3070, _3071, _3072)));
                        float _3077 = _3076 * _3070;
                        float _3078 = _3076 * _3071;
                        float _3079 = _3076 * _3072;
                        float _3087 = exp2(log2(1.0 / ((_3062 * 3.5) + 5.0)) * 0.25);
                        float _3088 = 1.0 - _810;
                        float _3095 = sqrt(1.0 - ((1.0 - (_3088 * _3088)) * (1.0 - (_3087 * _3087))));
                        float _3096 = _3095 * _3095;
                        float _3097 = _3096 * _3096;
                        float _3098 = _3077 + _3042;
                        float _3099 = _3078 + _3043;
                        float _3100 = _3079 + _3044;
                        float _3104 = inversesqrt(dot(vec3(_3098, _3099, _3100), vec3(_3098, _3099, _3100)));
                        float _3108 = dot(vec3(_735, _738, _741), vec3(_3077, _3078, _3079));
                        float _4478 = isnan(0.0) ? _3108 : (isnan(_3108) ? 0.0 : max(_3108, 0.0));
                        float _3111 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
                        float _3112 = dot(vec3(_735, _738, _741), vec3(_3104 * _3098, _3104 * _3099, _3104 * _3100));
                        float _4489 = isnan(0.0) ? _3112 : (isnan(_3112) ? 0.0 : max(_3112, 0.0));
                        float _3115 = isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0));
                        float _3119 = ((_3115 * _3115) * (_3097 + (-1.0))) + 1.0;
                        float _3120 = _3055 * _3096;
                        float _3121 = _3120 * _3120;
                        float _3124 = ((1.0 - _3121) * _3045) + _3121;
                        float _4500 = isnan(0.0) ? _3124 : (isnan(_3124) ? 0.0 : max(_3124, 0.0));
                        float _3125 = isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0));
                        float _3126 = 1.0 - _3096;
                        float _3136 = (0.5 / (((_3125 * ((_3111 * _3126) + _3096)) + 9.9999999392252902907785028219223e-09) + (((_3125 * _3126) + _3096) * _3111))) * _3125;
                        float _4511 = isnan(0.0) ? _3136 : (isnan(_3136) ? 0.0 : max(_3136, 0.0));
                        float _3147 = (((_3097 * 3.1415927410125732421875) * (isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0)))) / ((_3119 * _3119) * ((_3062 * 2.1991131305694580078125) + 3.141590118408203125))) * _3051;
                        _2899 = (_3066 * _3014.x) + _2972;
                        _2900 = (_3066 * _3014.y) + _2973;
                        _2901 = (_3066 * _3014.z) + _2974;
                        _2896 = (_3147 * _3031.x) + _2969;
                        _2897 = (_3147 * _3031.y) + _2970;
                        _2898 = (_3147 * _3031.z) + _2971;
                        if (_2976 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2969 = _2896;
                            _2970 = _2897;
                            _2971 = _2898;
                            _2972 = _2899;
                            _2973 = _2900;
                            _2974 = _2901;
                            _2975 = _2976;
                        }
                    }
                    frontier_phi_66_pred = _2896;
                    frontier_phi_66_pred_1 = _2901;
                    frontier_phi_66_pred_2 = _2900;
                    frontier_phi_66_pred_3 = _2899;
                    frontier_phi_66_pred_4 = _2898;
                    frontier_phi_66_pred_5 = _2897;
                }
                _2673 = frontier_phi_66_pred;
                _2683 = frontier_phi_66_pred_1;
                _2681 = frontier_phi_66_pred_2;
                _2679 = frontier_phi_66_pred_3;
                _2677 = frontier_phi_66_pred_4;
                _2675 = frontier_phi_66_pred_5;
                uint _2831 = _2830 + 1u;
                if (_2831 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2824 = _2673;
                    _2825 = _2675;
                    _2826 = _2677;
                    _2827 = _2679;
                    _2828 = _2681;
                    _2829 = _2683;
                    _2830 = _2831;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2672 = _2673;
            _2674 = _2675;
            _2676 = _2677;
            _2678 = _2679;
            _2680 = _2681;
            _2682 = _2683;
        }
        uvec4 _2686 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2687 = _2686.z;
        uint _2689 = (_2687 >> 8u) & 15u;
        float _2792;
        float _2794;
        float _2796;
        float _2798;
        float _2800;
        float _2802;
        if (((4294967295u << _2689) & _2571) == 0u)
        {
            _2792 = _2672;
            _2794 = _2674;
            _2796 = _2676;
            _2798 = _2678;
            _2800 = _2680;
            _2802 = _2682;
        }
        else
        {
            float _2817 = inversesqrt(dot(vec3(_2525, _2526, _2527), vec3(_2525, _2526, _2527)));
            float _2818 = _2817 * _2525;
            float _2819 = _2817 * _2526;
            float _2820 = _2817 * _2527;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2689 < ((_2687 >> 12u) & 15u))
            {
                float _2793;
                float _2795;
                float _2797;
                float _2799;
                float _2801;
                float _2803;
                float _2952 = _2672;
                float _2953 = _2674;
                float _2954 = _2676;
                float _2955 = _2678;
                float _2956 = _2680;
                float _2957 = _2682;
                uint _2958 = _2689;
                uint _2967;
                bool _2968;
                for (;;)
                {
                    _2967 = texelFetch(g_lightClassification, int((((_2565 << 5u) + (_2551 << 9u)) + (_2958 << 2u)) >> 2u)).x;
                    _2968 = _2967 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2968)
                    {
                        frontier_phi_77_pred = _2957;
                        frontier_phi_77_pred_1 = _2956;
                        frontier_phi_77_pred_2 = _2955;
                        frontier_phi_77_pred_3 = _2954;
                        frontier_phi_77_pred_4 = _2953;
                        frontier_phi_77_pred_5 = _2952;
                    }
                    else
                    {
                        float _3161;
                        float _3162;
                        float _3163;
                        float _3164;
                        float _3165;
                        float _3166;
                        float _3456;
                        float _3457;
                        float _3458;
                        float _3459;
                        float _3460;
                        float _3461;
                        float _3174 = _2952;
                        float _3175 = _2953;
                        float _3176 = _2954;
                        float _3177 = _2955;
                        float _3178 = _2956;
                        float _3179 = _2957;
                        uint _3180 = _2967;
                        uint _3181;
                        vec4 _3206;
                        float _3207;
                        vec4 _3222;
                        vec3 _3234;
                        vec4 _3250;
                        vec4 _3266;
                        float _3312;
                        bool _3313;
                        for (;;)
                        {
                            uint _3191 = ((_2958 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3180));
                            _3181 = (_3180 + 4294967295u) & _3180;
                            uint _3193 = _3191 * 40u;
                            _3206 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3193)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3193 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3193 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3193 + 3u)).x));
                            _3207 = _3206.w;
                            uint _3209 = (_3191 * 40u) + 4u;
                            _3222 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3209)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 3u)).x));
                            uint _3224 = (_3191 * 40u) + 8u;
                            _3234 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3224)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 2u)).x));
                            uint _3237 = (_3191 * 40u) + 16u;
                            _3250 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3237)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 3u)).x));
                            uint _3253 = (_3191 * 40u) + 20u;
                            _3266 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3253)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 3u)).x));
                            uint _3268 = (_3191 * 40u) + 24u;
                            vec4 _3281 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3268)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3268 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3268 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3268 + 3u)).x));
                            uint _3287 = (_3191 * 40u) + 28u;
                            vec4 _3300 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3287)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3287 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3287 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3287 + 3u)).x));
                            _3312 = fma(_2527, _3300.z, fma(_2526, _3300.y, _3300.x * _2525)) + _3300.w;
                            _3313 = !((fma(_2527, _3281.z, fma(_2526, _3281.y, _3281.x * _2525)) + _3281.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3313)
                            {
                                float _3340 = _3206.x - _2525;
                                float _3341 = _3206.y - _2526;
                                float _3342 = _3206.z - _2527;
                                float _3343 = dot(vec3(_3340, _3341, _3342), vec3(_3340, _3341, _3342));
                                float _3346 = inversesqrt(_3343);
                                float _3347 = _3346 * _3340;
                                float _3348 = _3346 * _3341;
                                float _3349 = _3346 * _3342;
                                float _3353 = 1.0 - (_3343 / (_3207 * _3207));
                                float _4522 = isnan(0.0) ? _3353 : (isnan(_3353) ? 0.0 : max(_3353, 0.0));
                                float _3354 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
                                float _3358 = sqrt(_3343) * _3222.w;
                                float _3360 = 1.39999997615814208984375 / (_3358 + 1.39999997615814208984375);
                                float _3361 = _3360 * _3360;
                                float _3364 = ((1.0 - _3361) * dot(vec3(_3347, _3348, _3349), vec3(_735, _738, _741))) + _3361;
                                float _3367 = _3358 * _3358;
                                float _3371 = (fma(_2527, _3250.z, fma(_2526, _3250.y, _3250.x * _2525)) + _3250.w) / _3312;
                                float _3372 = (fma(_2527, _3266.z, fma(_2526, _3266.y, _3266.x * _2525)) + _3266.w) / _3312;
                                float _3376 = 1.0 - dot(vec2(_3371, _3372), vec2(_3371, _3372));
                                float _4538 = isnan(0.0) ? _3376 : (isnan(_3376) ? 0.0 : max(_3376, 0.0));
                                float _3377 = isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0));
                                float _3378 = _3377 * (((isnan(0.0) ? _3364 : (isnan(_3364) ? 0.0 : max(_3364, 0.0))) * _3354) / ((_3367 * 0.699999988079071044921875) + 1.0));
                                float _3390 = exp2(log2(1.0 / ((_3367 * 3.5) + 5.0)) * 0.25);
                                float _3391 = 1.0 - _810;
                                float _3398 = sqrt(1.0 - ((1.0 - (_3391 * _3391)) * (1.0 - (_3390 * _3390))));
                                float _3399 = _3398 * _3398;
                                float _3400 = _3399 * _3399;
                                float _3401 = _3347 - _2818;
                                float _3402 = _3348 - _2819;
                                float _3403 = _3349 - _2820;
                                float _3407 = inversesqrt(dot(vec3(_3401, _3402, _3403), vec3(_3401, _3402, _3403)));
                                float _3411 = dot(vec3(_735, _738, _741), vec3((-0.0) - _2818, (-0.0) - _2819, (-0.0) - _2820));
                                float _4549 = isnan(0.0) ? _3411 : (isnan(_3411) ? 0.0 : max(_3411, 0.0));
                                float _3414 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
                                float _3415 = dot(vec3(_735, _738, _741), vec3(_3407 * _3401, _3407 * _3402, _3407 * _3403));
                                float _4560 = isnan(0.0) ? _3415 : (isnan(_3415) ? 0.0 : max(_3415, 0.0));
                                float _3418 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
                                float _3422 = ((_3418 * _3418) * (_3400 + (-1.0))) + 1.0;
                                float _3423 = _3360 * _3399;
                                float _3424 = _3423 * _3423;
                                float _3430 = ((1.0 - _3424) * dot(vec3(_735, _738, _741), vec3(_3347, _3348, _3349))) + _3424;
                                float _4571 = isnan(0.0) ? _3430 : (isnan(_3430) ? 0.0 : max(_3430, 0.0));
                                float _3431 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
                                float _3432 = 1.0 - _3399;
                                float _3442 = (0.5 / (((_3431 * ((_3414 * _3432) + _3399)) + 9.9999999392252902907785028219223e-09) + (((_3431 * _3432) + _3399) * _3414))) * _3431;
                                float _4582 = isnan(0.0) ? _3442 : (isnan(_3442) ? 0.0 : max(_3442, 0.0));
                                float _3452 = (_3377 * _3354) * (((_3400 * 3.1415927410125732421875) * (isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0)))) / ((_3422 * _3422) * ((_3367 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3378 * _3222.y;
                                frontier_phi_83_pred_1 = _3378 * _3222.x;
                                frontier_phi_83_pred_2 = _3452 * _3234.z;
                                frontier_phi_83_pred_3 = _3452 * _3234.y;
                                frontier_phi_83_pred_4 = _3452 * _3234.x;
                                frontier_phi_83_pred_5 = _3378 * _3222.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3460 = frontier_phi_83_pred;
                            _3459 = frontier_phi_83_pred_1;
                            _3458 = frontier_phi_83_pred_2;
                            _3457 = frontier_phi_83_pred_3;
                            _3456 = frontier_phi_83_pred_4;
                            _3461 = frontier_phi_83_pred_5;
                            _3164 = _3459 + _3177;
                            _3165 = _3460 + _3178;
                            _3166 = _3461 + _3179;
                            _3161 = _3456 + _3174;
                            _3162 = _3457 + _3175;
                            _3163 = _3458 + _3176;
                            if (_3181 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3174 = _3161;
                                _3175 = _3162;
                                _3176 = _3163;
                                _3177 = _3164;
                                _3178 = _3165;
                                _3179 = _3166;
                                _3180 = _3181;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3166;
                        frontier_phi_77_pred_1 = _3165;
                        frontier_phi_77_pred_2 = _3164;
                        frontier_phi_77_pred_3 = _3163;
                        frontier_phi_77_pred_4 = _3162;
                        frontier_phi_77_pred_5 = _3161;
                    }
                    _2803 = frontier_phi_77_pred;
                    _2801 = frontier_phi_77_pred_1;
                    _2799 = frontier_phi_77_pred_2;
                    _2797 = frontier_phi_77_pred_3;
                    _2795 = frontier_phi_77_pred_4;
                    _2793 = frontier_phi_77_pred_5;
                    uint _2959 = _2958 + 1u;
                    if (_2959 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2952 = _2793;
                        _2953 = _2795;
                        _2954 = _2797;
                        _2955 = _2799;
                        _2956 = _2801;
                        _2957 = _2803;
                        _2958 = _2959;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2797;
                frontier_phi_58_59_ladder_1 = _2803;
                frontier_phi_58_59_ladder_2 = _2801;
                frontier_phi_58_59_ladder_3 = _2799;
                frontier_phi_58_59_ladder_4 = _2795;
                frontier_phi_58_59_ladder_5 = _2793;
            }
            else
            {
                frontier_phi_58_59_ladder = _2676;
                frontier_phi_58_59_ladder_1 = _2682;
                frontier_phi_58_59_ladder_2 = _2680;
                frontier_phi_58_59_ladder_3 = _2678;
                frontier_phi_58_59_ladder_4 = _2674;
                frontier_phi_58_59_ladder_5 = _2672;
            }
            _2792 = frontier_phi_58_59_ladder_5;
            _2794 = frontier_phi_58_59_ladder_4;
            _2796 = frontier_phi_58_59_ladder;
            _2798 = frontier_phi_58_59_ladder_3;
            _2800 = frontier_phi_58_59_ladder_2;
            _2802 = frontier_phi_58_59_ladder_1;
        }
        float _2807 = isnan(1.0) ? _794 : (isnan(_794) ? 1.0 : min(_794, 1.0));
        _2584 = (_2807 * _2798) + _2017;
        _2586 = (_2807 * _2800) + _2019;
        _2588 = (_2807 * _2802) + _2021;
        _2590 = ((_2792 * _778) * _2807) + _2365;
        _2592 = ((_2794 * _780) * _2807) + _2367;
        _2594 = ((_2796 * _781) * _2807) + _2369;
    }
    else
    {
        _2584 = _2017;
        _2586 = _2019;
        _2588 = _2021;
        _2590 = _2365;
        _2592 = _2367;
        _2594 = _2369;
    }
    float _4598 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _4609 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    float _4620 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _2611 = ((isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0))) * (_2584 + ((isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0))) * _794))) + ((_2590 + ((isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0))) * _1633)) * cbPerFrame._m0[3u].x);
    float _2612 = ((isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0))) * (_2586 + ((isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0))) * _794))) + ((_2592 + ((isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0))) * _1633)) * cbPerFrame._m0[3u].x);
    float _2613 = ((isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0))) * (_2588 + ((isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0))) * _794))) + ((_2594 + ((isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0))) * _1633)) * cbPerFrame._m0[3u].x);
    uint _2614 = _241 + 6u;
    float _2622 = _714 / cbSceneParam._m0[86u].x;
    float _2623 = _715 / cbSceneParam._m0[86u].y;
    vec4 _2637 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2622, _2623, (log2((isnan(cbSceneParam._m0[77u].w) ? _636 : (isnan(_636) ? cbSceneParam._m0[77u].w : min(_636, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2639 = _2637.x;
    float _2640 = _2637.y;
    float _2641 = _2637.z;
    float _2642 = _2637.w;
    float _2734;
    float _2736;
    float _2738;
    float _2740;
    if (_636 > cbSceneParam._m0[78u].w)
    {
        float _2697 = isnan(_636) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _636 : min(cbSceneParam._m0[80u].w, _636));
        float _2698 = _2697 / _636;
        float _2709 = _2698 * _686;
        float _2710 = _687 * _2698;
        float _2711 = (-0.0) - _2710;
        float _2712 = _2698 * _688;
        float _2714 = (cbSceneParam._m0[77u].w * _2711) / _2697;
        float _2715 = _2714 + cbSceneParam._m0[79u].w;
        float _2716 = cbSceneParam._m0[79u].w - _2710;
        float _2722 = sqrt(((_2709 * _2709) + (_2710 * _2710)) + (_2712 * _2712));
        float _2725 = (1.0 - (cbSceneParam._m0[77u].w / _2697)) * _2722;
        float _2730 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2732 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2909;
        if (abs((_2711 - _2714) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2909 = ((((_2715 > 0.0) ? exp2(_2730 * _2715) : (2.0 - exp2(_2732 * _2715))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2725;
        }
        else
        {
            float _2853 = 1.0 / cbSceneParam._m0[80u].x;
            float _2854 = isnan(_2716) ? _2715 : (isnan(_2715) ? _2716 : max(_2715, _2716));
            float _2855 = isnan(_2716) ? _2715 : (isnan(_2715) ? _2716 : min(_2715, _2716));
            float _2864 = isnan(0.0) ? _2854 : (isnan(_2854) ? 0.0 : min(_2854, 0.0));
            float _2865 = isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : min(_2855, 0.0));
            _2909 = ((abs(_2722 / _2711) * cbSceneParam._m0[80u].y) * ((((_2864 - _2865) * 2.0) - ((exp2(_2730 * (isnan(0.0) ? _2854 : (isnan(_2854) ? 0.0 : max(_2854, 0.0)))) - exp2(_2730 * (isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : max(_2855, 0.0))))) * _2853)) - ((exp2(_2732 * _2864) - exp2(_2732 * _2865)) * _2853))) + (_2725 * cbSceneParam._m0[80u].z);
        }
        vec4 _2911 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2622, _2623, 1.0), 0.0);
        float _2920 = exp2((_2909 * (-1.44269502162933349609375)) * (1.0 - _2911.w));
        float _2921 = log2(_2920);
        float _2937 = log2(_2642);
        _2734 = (exp2(_2937 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2921 * cbSceneParam._m0[78u].x)) * _2911.x) / cbSceneParam._m0[78u].x)) + _2639;
        _2736 = (exp2(_2937 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2921 * cbSceneParam._m0[78u].y)) * _2911.y) / cbSceneParam._m0[78u].y)) + _2640;
        _2738 = (exp2(_2937 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2921 * cbSceneParam._m0[78u].z)) * _2911.z) / cbSceneParam._m0[78u].z)) + _2641;
        _2740 = _2920 * _2642;
    }
    else
    {
        _2734 = _2639;
        _2736 = _2640;
        _2738 = _2641;
        _2740 = _2642;
    }
    bool _2947;
    vec4 _2750;
    vec4 _2772;
    float _2774;
    float _2778;
    float _2779;
    float _2780;
    float _2781;
    bool _2791;
    for (;;)
    {
        _2750 = cbMatDynParam._m0[0u];
        float _2752 = roundEven(_2750.y);
        bool _2753 = _2752 == 3.0;
        float _2754 = log2(_2740);
        float _2761 = exp2(_2754 * cbSceneParam._m0[78u].x) * _2611;
        float _2762 = exp2(_2754 * cbSceneParam._m0[78u].y) * _2612;
        float _2763 = exp2(_2754 * cbSceneParam._m0[78u].z) * _2613;
        float _2770 = _702 + (-0.5);
        _2772 = cbMtdParam._m0[1u];
        _2774 = _2772.y * _2770;
        float _2777 = (_2752 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2778 = _2777 * (_2753 ? _2761 : (_2761 + (cbSceneParam._m0[72u].w * _2734)));
        _2779 = _2777 * (_2753 ? _2762 : (_2762 + (cbSceneParam._m0[72u].w * _2736)));
        _2780 = _2777 * (_2753 ? _2763 : (_2763 + (cbSceneParam._m0[72u].w * _2738)));
        _2781 = _2770 * 0.999000012874603271484375;
        _2791 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2791)
        {
            if ((cbInstanceData._m0[_241 + 7u].x + _2781) < 0.5)
            {
                _2947 = true;
                break;
            }
        }
        uint _2888 = _754 + uint(_2750.w);
        if ((cbInstanceData._m0[_2888].w < 1.0) && ((cbInstanceData._m0[_2888].w + _2781) < 0.5))
        {
            _2947 = true;
            break;
        }
        if ((_2774 + 1.0) < _2772.x)
        {
            _2947 = true;
            break;
        }
        _2947 = false;
        break;
    }
    float _3152;
    if (_2947)
    {
        discard_state = true;
        _3152 = 0.0;
    }
    else
    {
        _3152 = cbInstanceData._m0[_2614].w;
    }
    SV_Target.x = _2778;
    SV_Target.y = _2779;
    SV_Target.z = _2780;
    SV_Target.w = _3152;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2614].w;
    discard_exit();
}


