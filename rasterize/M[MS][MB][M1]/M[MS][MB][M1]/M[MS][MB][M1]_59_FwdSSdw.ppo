#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1272;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _222 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _223 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _224 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _230 = inversesqrt(dot(vec3(_222, _223, _224), vec3(_222, _223, _224)));
    float _231 = _230 * _222;
    float _232 = _230 * _223;
    float _233 = _230 * _224;
    float _237 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _238 = _237 * NORMAL.x;
    float _239 = _237 * NORMAL.y;
    float _240 = _237 * NORMAL.z;
    float _244 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _245 = _244 * TANGENT.x;
    float _246 = _244 * TANGENT.y;
    float _247 = _244 * TANGENT.z;
    float _256 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _258 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _259 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3621 = isnan(0.0) ? _256 : (isnan(_256) ? 0.0 : max(_256, 0.0));
    float _3632 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    float _3643 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    uint _269 = uint(roundEven(NORMAL.w)) * 13u;
    uint _274 = _269 + 1u;
    uint _278 = _269 + 2u;
    float _287 = sqrt(((cbInstanceData._m0[_274].x * cbInstanceData._m0[_274].x) + (cbInstanceData._m0[_269].x * cbInstanceData._m0[_269].x)) + (cbInstanceData._m0[_278].x * cbInstanceData._m0[_278].x));
    float _288 = _287 * TEXCOORD.z;
    float _289 = _287 * TEXCOORD.w;
    vec4 _302 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _288) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _289) + cbTextureTilingScale._m0[13u].w));
    vec4 _325 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _330 = _325.x * cbMtdParam._m0[9u].x;
    float _331 = _325.y * cbMtdParam._m0[9u].y;
    float _332 = _325.z * cbMtdParam._m0[9u].z;
    float _336 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _302.x) * _330;
    float _339 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _302.y) * _331;
    float _342 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _302.z) * _332;
    float _349 = ((_330 - _336) * (isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0)))) + _336;
    float _350 = ((_331 - _339) * (isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0)))) + _339;
    float _351 = ((_332 - _342) * (isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0)))) + _342;
    vec4 _370 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _288) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _289) + cbTextureTilingScale._m0[14u].w));
    vec4 _390 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _288) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _289) + cbTextureTilingScale._m0[20u].w));
    vec4 _416 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _420 = _416.z;
    float _424 = (_416.x * 2.0) + (-1.0);
    float _425 = (_416.y * 2.0) + (-1.0);
    float _426 = dot(vec2(_424, _425), vec2(_424, _425));
    float _3654 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _431 = sqrt(1.0 - (isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0))));
    float _436 = _424 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_390.x * 2.0) + (-1.0)));
    float _437 = _425 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_390.y * 2.0) + (-1.0)));
    float _440 = fma(_431, _238, fma(_437, _245, _436 * _231));
    float _443 = fma(_431, _239, fma(_437, _246, _436 * _232));
    float _446 = fma(_431, _240, fma(_437, _247, _436 * _233));
    float _450 = inversesqrt(dot(vec3(_440, _443, _446), vec3(_440, _443, _446)));
    vec4 _486 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _288) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _289) + cbTextureTilingScale._m0[11u].w));
    float _488 = _486.x;
    float _489 = 1.0 - _488;
    float _496 = ((_488 - _489) * cbMtdParam._m0[24u].z) + _489;
    float _498 = (cbMtdParam._m0[19u].x + dot(vec4(_450 * _440, _450 * _443, _450 * _446, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_496 * cbMtdParam._m0[21u].z);
    float _3665 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _499 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
    float _501 = (-0.0) - cbMtdParam._m0[24u].x;
    float _503 = isnan(0.0) ? _501 : (isnan(_501) ? 0.0 : max(_501, 0.0));
    float _504 = isnan(1.0) ? _503 : (isnan(_503) ? 1.0 : min(_503, 1.0));
    float _511 = _499 - ((_499 * TEXCOORD_8.x) * _504);
    float _512 = _499 - ((_499 * TEXCOORD_8.y) * _504);
    float _513 = _499 - ((_499 * TEXCOORD_8.z) * _504);
    float _520 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _524 = ((isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : min(_520, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _532 = (_524 - (((_496 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _524))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3696 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    float _533 = isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0));
    float _537 = ((_511 * ((_370.x * cbMtdParam._m0[18u].x) - _349)) * _533) + _349;
    float _538 = ((_512 * ((_370.y * cbMtdParam._m0[18u].y) - _350)) * _533) + _350;
    float _539 = ((_513 * ((_370.z * cbMtdParam._m0[18u].z) - _351)) * _533) + _351;
    vec4 _551 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _288) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _289) + cbTextureTilingScale._m0[19u].w));
    float _553 = _551.x;
    float _554 = 1.0 - _553;
    float _581 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_553 - _554) * cbMtdParam._m0[24u].w) + _554) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3707 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _582 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
    float _590 = ((((cbMtdParam._m0[10u].x - _537) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _582) + _537;
    float _591 = ((((cbMtdParam._m0[10u].y - _538) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _582) + _538;
    float _592 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _539)) * _582) + _539;
    vec4 _605 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _607 = _605.x;
    float _610 = _607 - ((_607 * _511) * _533);
    float _612 = _610 - (_610 * _582);
    float _617 = (((_390.z - _420) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _420;
    vec4 _631 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _288) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _289) + cbTextureTilingScale._m0[15u].w));
    float _638 = (_631.x * 2.0) + (-1.0);
    float _639 = (_631.y * 2.0) + (-1.0);
    float _640 = dot(vec2(_638, _639), vec2(_638, _639));
    float _3718 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _649 = (((_631.z - _617) * _511) * _533) + _617;
    float _652 = ((cbMtdParam._m0[23u].y - _649) * _582) + _649;
    vec4 _671 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _288) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _289) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _677 = (_671.x * 2.0) + (-1.0);
    float _678 = (_671.y * 2.0) + (-1.0);
    float _679 = dot(vec2(_677, _678), vec2(_677, _678));
    float _3729 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
    float _699 = (((cbMtdParam._m0[21u].x * _436) + ((_638 - _436) * _511)) * _533) + _436;
    float _700 = (((cbMtdParam._m0[21u].x * _437) + ((_639 - _437) * _512)) * _533) + _437;
    float _701 = (((sqrt(1.0 - (isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0)))) - _431) * _513) * _533) + _431;
    float _712 = (((_677 - _699) + (_699 * cbMtdParam._m0[22u].z)) * _582) + _699;
    float _713 = (((_678 - _700) + (_700 * cbMtdParam._m0[22u].z)) * _582) + _700;
    float _714 = ((sqrt(1.0 - (isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0)))) - _701) * _582) + _701;
    float _716 = cbMtdParam._m0[22u].x + _416.w;
    float _719 = fma(_714, _238, fma(_713, _245, _712 * _231));
    float _722 = fma(_714, _239, fma(_713, _246, _712 * _232));
    float _725 = fma(_714, _240, fma(_713, _247, _712 * _233));
    float _729 = inversesqrt(dot(vec3(_719, _722, _725), vec3(_719, _722, _725)));
    float _730 = _729 * _719;
    float _731 = _729 * _722;
    float _732 = _729 * _725;
    float _3740 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
    float _733 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
    float _3751 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
    float _3762 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _3773 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _3784 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _3795 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _738 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
    float _752 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _792 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _802 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _792);
    float _803 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _792);
    float _804 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _792);
    float _808 = inversesqrt(dot(vec3(_802, _803, _804), vec3(_802, _803, _804)));
    float _809 = _802 * _808;
    float _810 = _803 * _808;
    float _811 = _804 * _808;
    float _817 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _818 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _839 = fma(_732, cbSceneParam._m0[5u].z, fma(_731, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _730));
    float _842 = fma(_732, cbSceneParam._m0[6u].z, fma(_731, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _730));
    float _845 = fma(_732, cbSceneParam._m0[7u].z, fma(_731, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _730));
    uint _859 = (_269 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _865 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0)))) * cbInstanceData._m0[_859].x;
    float _866 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0)))) * cbInstanceData._m0[_859].y;
    float _867 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0)))) * cbInstanceData._m0[_859].z;
    float _3806 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
    float _868 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
    float _3817 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
    float _869 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
    float _3828 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
    float _870 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
    float _871 = 1.0 - _738;
    float _872 = _868 * _871;
    float _873 = _869 * _871;
    float _874 = _870 * _871;
    float _879 = (_868 + (-0.039999999105930328369140625)) * _738;
    float _880 = (_869 + (-0.039999999105930328369140625)) * _738;
    float _881 = (_870 + (-0.039999999105930328369140625)) * _738;
    float _882 = _879 + 0.039999999105930328369140625;
    float _884 = _880 + 0.039999999105930328369140625;
    float _885 = _881 + 0.039999999105930328369140625;
    vec4 _894 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _817, cbSceneParam._m0[86u].y * _818));
    float _898 = ((isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0))) * TEXCOORD_5.w) * _894.x;
    float _899 = dot(vec3(_730, _731, _732), vec3(_809, _810, _811));
    float _902 = _899 * 2.0;
    float _906 = (_902 * _730) - _809;
    float _907 = (_902 * _731) - _810;
    float _908 = (_902 * _732) - _811;
    float _912 = abs(dot(vec3(_809, _810, _811), vec3(_730, _731, _732)));
    float _3839 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
    float _914 = sqrt(_733);
    float _927 = exp2((_914 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_914 * 3.0));
    float _933 = (1.0 - _927) * ((_914 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _934 = _927 * _914;
    float _962 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _966 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _970 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1271;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _996 = fma(_970, cbModelParam._m0[26u].z, fma(_966, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _962));
        float _1000 = fma(_970, cbModelParam._m0[27u].z, fma(_966, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _962));
        float _1004 = fma(_970, cbModelParam._m0[28u].z, fma(_966, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _962));
        float _1029 = _962 + _730;
        float _1030 = _966 + _731;
        float _1031 = _970 + _732;
        float _1041 = fma(_1031, cbModelParam._m0[26u].z, fma(_1030, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1029)) - _996;
        float _1042 = fma(_1031, cbModelParam._m0[27u].z, fma(_1030, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1029)) - _1000;
        float _1043 = fma(_1031, cbModelParam._m0[28u].z, fma(_1030, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1029)) - _1004;
        float _1047 = inversesqrt(dot(vec3(_1041, _1042, _1043), vec3(_1041, _1042, _1043)));
        float _1060 = ((_1047 * _1041) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_996 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1061 = ((_1047 * _1042) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1000 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1062 = ((_1047 * _1043) / cbModelParam._m0[34u].z) + ((((((_1004 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1065 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1060, _1061, _1062), 0.0);
        vec4 _1072 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1060, _1061, _1062), 0.0);
        vec4 _1079 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1060, _1061, _1062), 0.0);
        vec4 _1086 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1060, _1061, _1062), 0.0);
        float _1099 = exp2((_1065.w + (-0.5)) * 20.0) * 2.0;
        float _1100 = _1099 * (_1065.x + (-0.5));
        float _1101 = _1099 * (_1065.y + (-0.5));
        float _1102 = _1099 * (_1065.z + (-0.5));
        float _1109 = exp2((_1072.w + (-0.5)) * 20.0) * 2.0;
        float _1110 = _1109 * (_1072.x + (-0.5));
        float _1111 = _1109 * (_1072.y + (-0.5));
        float _1112 = _1109 * (_1072.z + (-0.5));
        float _1119 = exp2((_1079.w + (-0.5)) * 20.0) * 2.0;
        float _1120 = _1119 * (_1079.x + (-0.5));
        float _1121 = _1119 * (_1079.y + (-0.5));
        float _1122 = _1119 * (_1079.z + (-0.5));
        float _1129 = exp2((_1086.w + (-0.5)) * 20.0) * 2.0;
        float _1130 = _1129 * (_1086.x + (-0.5));
        float _1131 = _1129 * (_1086.y + (-0.5));
        float _1132 = _1129 * (_1086.z + (-0.5));
        float _1133 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1134 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1135 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1136 = _1100 * 0.5;
        float _1137 = _1110 * 0.5;
        float _1138 = _1120 * 0.5;
        float _1139 = dot(vec3(_1136, _1137, _1138), vec3(_1136, _1137, _1138));
        float _1144 = (_1139 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1139);
        float _1153 = (dot(vec3(_730, _731, _732), vec3(_1144 * _1136, _1144 * _1137, _1144 * _1138)) + 1.0) * 0.5;
        float _3865 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1163 = sqrt(((_1137 * _1137) + (_1136 * _1136)) + (_1138 * _1138)) / (_1133 + 9.9999997473787516355514526367188e-06);
        float _3876 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1164 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
        float _1165 = _1164 * 2.0;
        float _1169 = (1.0 - _1164) / (_1164 + 1.0);
        float _3887 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1170 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
        float _1179 = ((((1.0 - _1170) * (_1165 + 2.0)) * exp2(log2(isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0))) * (_1165 + 1.0))) + _1170) * _1133;
        float _1180 = _1101 * 0.5;
        float _1181 = _1111 * 0.5;
        float _1182 = _1121 * 0.5;
        float _1183 = dot(vec3(_1180, _1181, _1182), vec3(_1180, _1181, _1182));
        float _1188 = (_1183 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1183);
        float _1196 = (dot(vec3(_730, _731, _732), vec3(_1188 * _1180, _1188 * _1181, _1188 * _1182)) + 1.0) * 0.5;
        float _3898 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1205 = sqrt(((_1181 * _1181) + (_1180 * _1180)) + (_1182 * _1182)) / (_1134 + 9.9999997473787516355514526367188e-06);
        float _3909 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1206 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
        float _1207 = _1206 * 2.0;
        float _1211 = (1.0 - _1206) / (_1206 + 1.0);
        float _3920 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1212 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
        float _1221 = ((((1.0 - _1212) * (_1207 + 2.0)) * exp2(log2(isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0))) * (_1207 + 1.0))) + _1212) * _1134;
        float _1222 = _1102 * 0.5;
        float _1223 = _1112 * 0.5;
        float _1224 = _1122 * 0.5;
        float _1225 = dot(vec3(_1222, _1223, _1224), vec3(_1222, _1223, _1224));
        float _1230 = (_1225 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1225);
        float _1238 = (dot(vec3(_730, _731, _732), vec3(_1230 * _1222, _1230 * _1223, _1230 * _1224)) + 1.0) * 0.5;
        float _3931 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1247 = sqrt(((_1223 * _1223) + (_1222 * _1222)) + (_1224 * _1224)) / (_1135 + 9.9999997473787516355514526367188e-06);
        float _3942 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1248 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
        float _1249 = _1248 * 2.0;
        float _1253 = (1.0 - _1248) / (_1248 + 1.0);
        float _3953 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1254 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
        float _1263 = ((((1.0 - _1254) * (_1249 + 2.0)) * exp2(log2(isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0))) * (_1249 + 1.0))) + _1254) * _1135;
        _1271 = _1102;
        _1273 = _1101;
        _1274 = _1100;
        _1275 = _1112;
        _1276 = _1111;
        _1277 = _1110;
        _1278 = _1122;
        _1279 = _1121;
        _1280 = _1120;
        _1281 = _1135;
        _1282 = _1134;
        _1283 = _1133;
        _1284 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0)));
        _1285 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0)));
        _1286 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0)));
    }
    else
    {
        _1271 = _1272;
        _1273 = _1272;
        _1274 = _1272;
        _1275 = _1272;
        _1276 = _1272;
        _1277 = _1272;
        _1278 = _1272;
        _1279 = _1272;
        _1280 = _1272;
        _1281 = _1272;
        _1282 = _1272;
        _1283 = _1272;
        _1284 = 0.0;
        _1285 = 0.0;
        _1286 = 0.0;
    }
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1311 = fma(_970, cbModelParam._m0[30u].z, fma(_966, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _962));
        float _1315 = fma(_970, cbModelParam._m0[31u].z, fma(_966, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _962));
        float _1319 = fma(_970, cbModelParam._m0[32u].z, fma(_966, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _962));
        float _1342 = _962 + _730;
        float _1343 = _966 + _731;
        float _1344 = _970 + _732;
        float _1354 = fma(_1344, cbModelParam._m0[30u].z, fma(_1343, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1342)) - _1311;
        float _1355 = fma(_1344, cbModelParam._m0[31u].z, fma(_1343, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1342)) - _1315;
        float _1356 = fma(_1344, cbModelParam._m0[32u].z, fma(_1343, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1342)) - _1319;
        float _1360 = inversesqrt(dot(vec3(_1354, _1355, _1356), vec3(_1354, _1355, _1356)));
        float _1373 = ((_1360 * _1354) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1311 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1374 = ((_1360 * _1355) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1315 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1375 = ((_1360 * _1356) / cbModelParam._m0[35u].z) + ((((((_1319 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1377 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1373, _1374, _1375), 0.0);
        vec4 _1384 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1373, _1374, _1375), 0.0);
        vec4 _1391 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1373, _1374, _1375), 0.0);
        vec4 _1398 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1373, _1374, _1375), 0.0);
        float _1410 = exp2((_1377.w + (-0.5)) * 20.0) * 2.0;
        float _1411 = _1410 * (_1377.x + (-0.5));
        float _1412 = _1410 * (_1377.y + (-0.5));
        float _1413 = _1410 * (_1377.z + (-0.5));
        float _1420 = exp2((_1384.w + (-0.5)) * 20.0) * 2.0;
        float _1421 = _1420 * (_1384.x + (-0.5));
        float _1422 = _1420 * (_1384.y + (-0.5));
        float _1423 = _1420 * (_1384.z + (-0.5));
        float _1430 = exp2((_1391.w + (-0.5)) * 20.0) * 2.0;
        float _1431 = _1430 * (_1391.x + (-0.5));
        float _1432 = _1430 * (_1391.y + (-0.5));
        float _1433 = _1430 * (_1391.z + (-0.5));
        float _1440 = exp2((_1398.w + (-0.5)) * 20.0) * 2.0;
        float _1441 = _1440 * (_1398.x + (-0.5));
        float _1442 = _1440 * (_1398.y + (-0.5));
        float _1443 = _1440 * (_1398.z + (-0.5));
        float _1444 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1445 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1446 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1447 = _1411 * 0.5;
        float _1448 = _1421 * 0.5;
        float _1449 = _1431 * 0.5;
        float _1450 = dot(vec3(_1447, _1448, _1449), vec3(_1447, _1448, _1449));
        float _1455 = (_1450 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1450);
        float _1463 = (dot(vec3(_730, _731, _732), vec3(_1455 * _1447, _1455 * _1448, _1455 * _1449)) + 1.0) * 0.5;
        float _3994 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1472 = sqrt(((_1448 * _1448) + (_1447 * _1447)) + (_1449 * _1449)) / (_1444 + 9.9999997473787516355514526367188e-06);
        float _4005 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1473 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
        float _1474 = _1473 * 2.0;
        float _1478 = (1.0 - _1473) / (_1473 + 1.0);
        float _4016 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1479 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
        float _1488 = ((((1.0 - _1479) * (_1474 + 2.0)) * exp2(log2(isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0))) * (_1474 + 1.0))) + _1479) * _1444;
        float _1489 = _1412 * 0.5;
        float _1490 = _1422 * 0.5;
        float _1491 = _1432 * 0.5;
        float _1492 = dot(vec3(_1489, _1490, _1491), vec3(_1489, _1490, _1491));
        float _1497 = (_1492 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1492);
        float _1505 = (dot(vec3(_730, _731, _732), vec3(_1497 * _1489, _1497 * _1490, _1497 * _1491)) + 1.0) * 0.5;
        float _4027 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1514 = sqrt(((_1490 * _1490) + (_1489 * _1489)) + (_1491 * _1491)) / (_1445 + 9.9999997473787516355514526367188e-06);
        float _4038 = isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0));
        float _1515 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
        float _1516 = _1515 * 2.0;
        float _1520 = (1.0 - _1515) / (_1515 + 1.0);
        float _4049 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
        float _1521 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
        float _1530 = ((((1.0 - _1521) * (_1516 + 2.0)) * exp2(log2(isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0))) * (_1516 + 1.0))) + _1521) * _1445;
        float _1531 = _1413 * 0.5;
        float _1532 = _1423 * 0.5;
        float _1533 = _1433 * 0.5;
        float _1534 = dot(vec3(_1531, _1532, _1533), vec3(_1531, _1532, _1533));
        float _1539 = (_1534 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1534);
        float _1547 = (dot(vec3(_730, _731, _732), vec3(_1539 * _1531, _1539 * _1532, _1539 * _1533)) + 1.0) * 0.5;
        float _4060 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
        float _1556 = sqrt(((_1532 * _1532) + (_1531 * _1531)) + (_1533 * _1533)) / (_1446 + 9.9999997473787516355514526367188e-06);
        float _4071 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
        float _1557 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
        float _1558 = _1557 * 2.0;
        float _1562 = (1.0 - _1557) / (_1557 + 1.0);
        float _4082 = isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0));
        float _1563 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
        float _1572 = ((((1.0 - _1563) * (_1558 + 2.0)) * exp2(log2(isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0))) * (_1558 + 1.0))) + _1563) * _1446;
        _1580 = _1413;
        _1581 = _1412;
        _1582 = _1411;
        _1583 = _1423;
        _1584 = _1422;
        _1585 = _1421;
        _1586 = _1433;
        _1587 = _1432;
        _1588 = _1431;
        _1589 = _1446;
        _1590 = _1445;
        _1591 = _1444;
        _1592 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0)));
        _1593 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0)));
        _1594 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0)));
    }
    else
    {
        _1580 = _1272;
        _1581 = _1272;
        _1582 = _1272;
        _1583 = _1272;
        _1584 = _1272;
        _1585 = _1272;
        _1586 = _1272;
        _1587 = _1272;
        _1588 = _1272;
        _1589 = _1272;
        _1590 = _1272;
        _1591 = _1272;
        _1592 = 0.0;
        _1593 = 0.0;
        _1594 = 0.0;
    }
    float _1604 = (cbModelParam._m0[1u].x * (_1592 - _1284)) + _1284;
    float _1605 = (cbModelParam._m0[1u].x * (_1593 - _1285)) + _1285;
    float _1606 = (cbModelParam._m0[1u].x * (_1594 - _1286)) + _1286;
    float _1627 = fma(_1606, cbSceneParam._m0[89u].z, fma(_1605, cbSceneParam._m0[89u].y, _1604 * cbSceneParam._m0[89u].x));
    float _1630 = fma(_1606, cbSceneParam._m0[90u].z, fma(_1605, cbSceneParam._m0[90u].y, _1604 * cbSceneParam._m0[90u].x));
    float _1633 = fma(_1606, cbSceneParam._m0[91u].z, fma(_1605, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1604));
    float _1648 = _906 * 0.5;
    float _1649 = _907 * 0.5;
    float _1650 = _908 * 0.5;
    float _1651 = dot(vec4(_1648, _1649, _1650, 1.0), vec4(_1582, _1585, _1588, _1591));
    float _1654 = dot(vec4(_1648, _1649, _1650, 1.0), vec4(_1581, _1584, _1587, _1590));
    float _1657 = dot(vec4(_1648, _1649, _1650, 1.0), vec4(_1580, _1583, _1586, _1589));
    float _1691;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1664 = dot(vec4(_1648, _1649, _1650, 1.0), vec4(_1271, _1275, _1278, _1281));
        float _1668 = dot(vec4(_1648, _1649, _1650, 1.0), vec4(_1273, _1276, _1279, _1282));
        float _1672 = dot(vec4(_1648, _1649, _1650, 1.0), vec4(_1274, _1277, _1280, _1283));
        float _1679 = dot(vec4(cbModelParam._m0[39u]), vec4(_1648, _1649, _1650, 1.0));
        _1691 = dot(vec3(isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0)), isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0)), isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1679) ? 0.0 : (isnan(0.0) ? _1679 : max(0.0, _1679))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1691 = 1.0;
    }
    float _1702;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1693 = dot(vec4(cbModelParam._m0[40u]), vec4(_1648, _1649, _1650, 1.0));
        _1702 = dot(vec3(isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0)), isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0)), isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1693) ? 0.0 : (isnan(0.0) ? _1693 : max(0.0, _1693))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1702 = 1.0;
    }
    float _1706 = (_1702 * cbModelParam._m0[1u].x) + (_1691 * (1.0 - cbModelParam._m0[1u].x));
    float _1716 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _733);
    float _1717 = isnan(_1716) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1716 : min(cbModelParam._m0[25u].z, _1716));
    float _1797;
    float _1799;
    float _1801;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1764 = fma(_970, cbModelParam._m0[13u].z, fma(_966, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _962)) + cbModelParam._m0[13u].w;
        float _1768 = fma(_970, cbModelParam._m0[14u].z, fma(_966, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _962)) + cbModelParam._m0[14u].w;
        float _1772 = fma(_970, cbModelParam._m0[15u].z, fma(_966, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _962)) + cbModelParam._m0[15u].w;
        float _1775 = fma(_908, cbModelParam._m0[13u].z, fma(_907, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _906));
        float _1778 = fma(_908, cbModelParam._m0[14u].z, fma(_907, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _906));
        float _1781 = fma(_908, cbModelParam._m0[15u].z, fma(_907, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _906));
        float _1809;
        if (_1775 > 0.0)
        {
            _1809 = abs((1.0 - _1764) / _1775);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1775 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1764 + 1.0) / _1775);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1809 = frontier_phi_14_12_ladder;
        }
        float _2033;
        if (_1778 > 0.0)
        {
            _2033 = abs((1.0 - _1768) / _1778);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1778 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1768 + 1.0) / _1778);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2033 = frontier_phi_23_19_ladder;
        }
        float _2290;
        if (_1781 > 0.0)
        {
            _2290 = abs((1.0 - _1772) / _1781);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1781 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1772 + 1.0) / _1781);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2290 = frontier_phi_35_30_ladder;
        }
        float _2292 = isnan(_2033) ? _1809 : (isnan(_1809) ? _2033 : min(_1809, _2033));
        float _2293 = isnan(_2290) ? _2292 : (isnan(_2292) ? _2290 : min(_2292, _2290));
        float _2297 = (_2293 * _1775) + _1764;
        float _2298 = (_2293 * _1778) + _1768;
        float _2299 = (_2293 * _1781) + _1772;
        float _2300 = _2293 * 9.9999997473787516355514526367188e-05;
        float _2302 = (-1.0) - _2300;
        float _2304 = _2300 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2299 > _2304) || ((_2299 < _2302) || ((_2298 > _2304) || ((_2298 < _2302) || ((_2297 < _2302) || (_2297 > _2304))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2427 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2299, cbModelParam._m0[9u].z, fma(_2298, cbModelParam._m0[9u].y, _2297 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2299, cbModelParam._m0[10u].z, fma(_2298, cbModelParam._m0[10u].y, _2297 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2299, cbModelParam._m0[11u].z, fma(_2298, cbModelParam._m0[11u].y, _2297 * cbModelParam._m0[11u].x))), _1717);
            frontier_phi_13_35_ladder = _2427.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2427.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2427.x * cbModelParam._m0[1u].y;
        }
        _1797 = frontier_phi_13_35_ladder_2;
        _1799 = frontier_phi_13_35_ladder_1;
        _1801 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1785 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_906, _907, _908), _1717);
        _1797 = _1785.x * cbModelParam._m0[1u].y;
        _1799 = _1785.y * cbModelParam._m0[1u].y;
        _1801 = _1785.z * cbModelParam._m0[1u].y;
    }
    float _1805 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _733);
    float _1806 = isnan(_1805) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1805 : min(cbModelParam._m0[25u].w, _1805));
    float _1895;
    float _1897;
    float _1899;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1859 = fma(_970, cbModelParam._m0[21u].z, fma(_966, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _962)) + cbModelParam._m0[21u].w;
        float _1863 = fma(_970, cbModelParam._m0[22u].z, fma(_966, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _962)) + cbModelParam._m0[22u].w;
        float _1867 = fma(_970, cbModelParam._m0[23u].z, fma(_966, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _962)) + cbModelParam._m0[23u].w;
        float _1870 = fma(_908, cbModelParam._m0[21u].z, fma(_907, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _906));
        float _1873 = fma(_908, cbModelParam._m0[22u].z, fma(_907, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _906));
        float _1876 = fma(_908, cbModelParam._m0[23u].z, fma(_907, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _906));
        float _2038;
        if (_1870 > 0.0)
        {
            _2038 = abs((1.0 - _1859) / _1870);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1870 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1859 + 1.0) / _1870);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2038 = frontier_phi_25_21_ladder;
        }
        float _2317;
        if (_1873 > 0.0)
        {
            _2317 = abs((1.0 - _1863) / _1873);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1873 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1863 + 1.0) / _1873);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2317 = frontier_phi_37_32_ladder;
        }
        float _2530;
        if (_1876 > 0.0)
        {
            _2530 = abs((1.0 - _1867) / _1876);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1876 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1867 + 1.0) / _1876);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2530 = frontier_phi_46_43_ladder;
        }
        float _2532 = isnan(_2317) ? _2038 : (isnan(_2038) ? _2317 : min(_2038, _2317));
        float _2533 = isnan(_2530) ? _2532 : (isnan(_2532) ? _2530 : min(_2532, _2530));
        float _2537 = (_2533 * _1870) + _1859;
        float _2538 = (_2533 * _1873) + _1863;
        float _2539 = (_2533 * _1876) + _1867;
        float _2540 = _2533 * 9.9999997473787516355514526367188e-05;
        float _2541 = (-1.0) - _2540;
        float _2543 = _2540 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2539 > _2543) || ((_2539 < _2541) || ((_2538 > _2543) || ((_2538 < _2541) || ((_2537 < _2541) || (_2537 > _2543))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2738 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2539, cbModelParam._m0[17u].z, fma(_2538, cbModelParam._m0[17u].y, _2537 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2539, cbModelParam._m0[18u].z, fma(_2538, cbModelParam._m0[18u].y, _2537 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2539, cbModelParam._m0[19u].z, fma(_2538, cbModelParam._m0[19u].y, _2537 * cbModelParam._m0[19u].x))), _1806);
            frontier_phi_22_46_ladder = _2738.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2738.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2738.x * cbModelParam._m0[1u].z;
        }
        _1895 = frontier_phi_22_46_ladder_2;
        _1897 = frontier_phi_22_46_ladder_1;
        _1899 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1879 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_906, _907, _908), _1806);
        _1895 = _1879.x * cbModelParam._m0[1u].z;
        _1897 = _1879.y * cbModelParam._m0[1u].z;
        _1899 = _1879.z * cbModelParam._m0[1u].z;
    }
    float _1912 = (((_933 * _882) + _934) * _898) * ((cbModelParam._m0[1u].w * (_1895 - _1797)) + _1797);
    float _1914 = (((_933 * _884) + _934) * _898) * ((cbModelParam._m0[1u].w * (_1897 - _1799)) + _1799);
    float _1916 = (((_933 * _885) + _934) * _898) * ((cbModelParam._m0[1u].w * (_1899 - _1801)) + _1801);
    float _1919 = fma(_1916, cbSceneParam._m0[89u].z, fma(_1914, cbSceneParam._m0[89u].y, _1912 * cbSceneParam._m0[89u].x));
    float _1922 = fma(_1916, cbSceneParam._m0[90u].z, fma(_1914, cbSceneParam._m0[90u].y, _1912 * cbSceneParam._m0[90u].x));
    float _1925 = fma(_1916, cbSceneParam._m0[91u].z, fma(_1914, cbSceneParam._m0[91u].y, _1912 * cbSceneParam._m0[91u].x));
    vec4 _1933 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_817, _818));
    float _1935 = _1933.w;
    float _1947 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1935);
    float _1948 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1935);
    float _1949 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1935);
    uvec4 _1953 = floatBitsToUint(cbInstanceData._m0[_269 + 5u]);
    uint _1955 = _1953.x * 14u;
    uint _1956 = _1955 + 13u;
    float _1963 = _898 + (-1.0);
    float _1968 = (cbLight._m0[_1956].x * _1963) + 1.0;
    float _1969 = (cbLight._m0[_1956].y * _1963) + 1.0;
    float _1970 = (cbLight._m0[_1956].z * _1963) + 1.0;
    float _1971 = (cbLight._m0[_1956].w * _1963) + 1.0;
    uint _1972 = _1955 + 5u;
    float _1978 = isnan(1.0) ? _1969 : (isnan(_1969) ? 1.0 : min(_1969, 1.0));
    uint _1982 = _1955 + 4u;
    float _1992 = isnan(1.0) ? _1968 : (isnan(_1968) ? 1.0 : min(_1968, 1.0));
    uint _1996 = _1955 | 1u;
    float _2007 = dot(vec3(cbLight._m0[_1955].xyz), vec3(_730, _731, _732));
    float _2010 = dot(vec3(cbLight._m0[_1996].xyz), vec3(_730, _731, _732));
    float _4218 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
    float _4229 = isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0));
    float _2015 = (isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0))) * 0.3183098733425140380859375;
    float _2017 = (isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0))) * 0.3183098733425140380859375;
    float _2024 = ((cbLight._m0[_1972].x * _1978) * _2017) + (((cbLight._m0[_1982].x * _1947) * _1992) * _2015);
    float _2025 = ((_1978 * cbLight._m0[_1972].y) * _2017) + (((cbLight._m0[_1982].y * _1948) * _1992) * _2015);
    float _2026 = ((_1978 * cbLight._m0[_1972].z) * _2017) + (((cbLight._m0[_1982].z * _1949) * _1992) * _2015);
    uvec4 _2030 = floatBitsToUint(cbLight._m0[_1955 + 12u]);
    bool _2032 = _2030.x == 0u;
    float _2043;
    float _2045;
    float _2047;
    if (_2032)
    {
        _2043 = _2024;
        _2045 = _2025;
        _2047 = _2026;
    }
    else
    {
        uint _2051 = _1955 + 6u;
        float _2067 = (dot(vec3(cbLight._m0[_1955 + 2u].xyz), vec3(_730, _731, _732)) * 0.5) + 0.5;
        float _2068 = _2067 * _2067;
        float _4240 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
        float _2069 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
        float _2070 = isnan(1.0) ? _1970 : (isnan(_1970) ? 1.0 : min(_1970, 1.0));
        _2043 = (((cbLight._m0[_2051].x * 0.3183098733425140380859375) * _2069) * _2070) + _2024;
        _2045 = (((cbLight._m0[_2051].y * 0.3183098733425140380859375) * _2069) * _2070) + _2025;
        _2047 = (((cbLight._m0[_2051].z * 0.3183098733425140380859375) * _2069) * _2070) + _2026;
    }
    bool _2050 = _2030.y == 0u;
    float _2088;
    float _2090;
    float _2092;
    if (_2050)
    {
        _2088 = _2043;
        _2090 = _2045;
        _2092 = _2047;
    }
    else
    {
        uint _2261 = _1955 + 7u;
        float _2277 = (dot(vec3(cbLight._m0[_1955 + 3u].xyz), vec3(_730, _731, _732)) * 0.5) + 0.5;
        float _2278 = _2277 * _2277;
        float _4256 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
        float _2279 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
        float _2280 = isnan(1.0) ? _1971 : (isnan(_1971) ? 1.0 : min(_1971, 1.0));
        _2088 = (((cbLight._m0[_2261].x * 0.3183098733425140380859375) * _2279) * _2280) + _2043;
        _2090 = (((cbLight._m0[_2261].y * 0.3183098733425140380859375) * _2279) * _2280) + _2045;
        _2092 = (((cbLight._m0[_2261].z * 0.3183098733425140380859375) * _2279) * _2280) + _2047;
    }
    uint _2095 = _1955 + 8u;
    float _2108 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1955].w)) * _733) * 0.949999988079071044921875);
    float _2109 = _2108 * _2108;
    float _2110 = cbLight._m0[_1955].x + _809;
    float _2111 = cbLight._m0[_1955].y + _810;
    float _2112 = cbLight._m0[_1955].z + _811;
    float _2116 = inversesqrt(dot(vec3(_2110, _2111, _2112), vec3(_2110, _2111, _2112)));
    float _2117 = _2116 * _2110;
    float _2118 = _2116 * _2111;
    float _2119 = _2116 * _2112;
    float _2120 = dot(vec3(_730, _731, _732), vec3(cbLight._m0[_1955].xyz));
    float _4272 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
    float _2123 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
    float _4283 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
    float _2124 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
    float _2125 = dot(vec3(_730, _731, _732), vec3(_2117, _2118, _2119));
    float _4294 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
    float _2128 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
    float _2129 = dot(vec3(cbLight._m0[_1955].xyz), vec3(_2117, _2118, _2119));
    float _4305 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
    float _2133 = _2109 * _2109;
    float _2137 = ((_2128 * _2128) * (_2133 + (-1.0))) + 1.0;
    float _2145 = exp2(log2(1.0 - (isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0)))) * 5.0);
    float _2146 = 0.959999978542327880859375 - _879;
    float _2148 = 0.959999978542327880859375 - _880;
    float _2149 = 0.959999978542327880859375 - _881;
    float _2156 = 1.0 - _2109;
    float _2167 = (0.5 / (((_2124 * ((_2123 * _2156) + _2109)) + 9.9999999392252902907785028219223e-09) + (((_2124 * _2156) + _2109) * _2123))) * _2123;
    float _4316 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
    float _2169 = (isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0))) * (_2133 / ((_2137 * _2137) * 3.141590118408203125));
    uint _2183 = _1955 + 9u;
    float _2194 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1996].w)) * _733) * 0.949999988079071044921875);
    float _2195 = _2194 * _2194;
    float _2196 = cbLight._m0[_1996].x + _809;
    float _2197 = cbLight._m0[_1996].y + _810;
    float _2198 = cbLight._m0[_1996].z + _811;
    float _2202 = inversesqrt(dot(vec3(_2196, _2197, _2198), vec3(_2196, _2197, _2198)));
    float _2203 = _2202 * _2196;
    float _2204 = _2202 * _2197;
    float _2205 = _2202 * _2198;
    float _2206 = dot(vec3(_730, _731, _732), vec3(cbLight._m0[_1996].xyz));
    float _4327 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
    float _2209 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
    float _2210 = dot(vec3(_730, _731, _732), vec3(_2203, _2204, _2205));
    float _4338 = isnan(0.0) ? _2210 : (isnan(_2210) ? 0.0 : max(_2210, 0.0));
    float _2213 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
    float _2214 = dot(vec3(cbLight._m0[_1996].xyz), vec3(_2203, _2204, _2205));
    float _4349 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
    float _2218 = _2195 * _2195;
    float _2222 = ((_2213 * _2213) * (_2218 + (-1.0))) + 1.0;
    float _2229 = exp2(log2(1.0 - (isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0)))) * 5.0);
    float _2236 = 1.0 - _2195;
    float _2246 = (0.5 / (((_2124 * ((_2209 * _2236) + _2195)) + 9.9999999392252902907785028219223e-09) + (((_2124 * _2236) + _2195) * _2209))) * _2209;
    float _4360 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
    float _2248 = (isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0))) * (_2218 / ((_2222 * _2222) * 3.141590118408203125));
    float _2258 = (((((_2229 * _2146) + _882) * cbLight._m0[_2183].x) * _2248) * _1978) + ((((cbLight._m0[_2095].x * _1947) * ((_2145 * _2146) + _882)) * _2169) * _1992);
    float _2259 = (((((_2229 * _2148) + _884) * cbLight._m0[_2183].y) * _2248) * _1978) + ((((cbLight._m0[_2095].y * _1948) * ((_2145 * _2148) + _884)) * _2169) * _1992);
    float _2260 = (((((_2229 * _2149) + _885) * cbLight._m0[_2183].z) * _2248) * _1978) + ((((cbLight._m0[_2095].z * _1949) * ((_2145 * _2149) + _885)) * _2169) * _1992);
    float _2322;
    float _2324;
    float _2326;
    if (_2032)
    {
        _2322 = _2258;
        _2324 = _2259;
        _2326 = _2260;
    }
    else
    {
        uint _2328 = _1955 + 2u;
        uint _2332 = _1955 + 10u;
        float _2346 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2328].w)) * _733) * 0.949999988079071044921875);
        float _2347 = _2346 * _2346;
        float _2348 = cbLight._m0[_2328].x + _809;
        float _2349 = cbLight._m0[_2328].y + _810;
        float _2350 = cbLight._m0[_2328].z + _811;
        float _2354 = inversesqrt(dot(vec3(_2348, _2349, _2350), vec3(_2348, _2349, _2350)));
        float _2355 = _2354 * _2348;
        float _2356 = _2354 * _2349;
        float _2357 = _2354 * _2350;
        float _2358 = dot(vec3(_730, _731, _732), vec3(cbLight._m0[_2328].xyz));
        float _4371 = isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : max(_2358, 0.0));
        float _2361 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
        float _2362 = dot(vec3(_730, _731, _732), vec3(_2355, _2356, _2357));
        float _4382 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
        float _2365 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
        float _2366 = dot(vec3(cbLight._m0[_2328].xyz), vec3(_2355, _2356, _2357));
        float _4393 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
        float _2370 = _2347 * _2347;
        float _2374 = ((_2365 * _2365) * (_2370 + (-1.0))) + 1.0;
        float _2381 = exp2(log2(1.0 - (isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0)))) * 5.0);
        float _2388 = 1.0 - _2347;
        float _2398 = (0.5 / (((_2124 * ((_2361 * _2388) + _2347)) + 9.9999999392252902907785028219223e-09) + (((_2124 * _2388) + _2347) * _2361))) * _2361;
        float _4404 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
        float _2400 = (isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0))) * (_2370 / ((_2374 * _2374) * 3.141590118408203125));
        float _2401 = isnan(1.0) ? _1970 : (isnan(_1970) ? 1.0 : min(_1970, 1.0));
        _2322 = (((((_2381 * _2146) + _882) * cbLight._m0[_2332].x) * _2400) * _2401) + _2258;
        _2324 = (((((_2381 * _2148) + _884) * cbLight._m0[_2332].y) * _2400) * _2401) + _2259;
        _2326 = (((((_2381 * _2149) + _885) * cbLight._m0[_2332].z) * _2400) * _2401) + _2260;
    }
    float _2436;
    float _2438;
    float _2440;
    if (_2050)
    {
        _2436 = _2322;
        _2438 = _2324;
        _2440 = _2326;
    }
    else
    {
        uint _2447 = _1955 + 3u;
        uint _2451 = _1955 + 11u;
        float _2465 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2447].w)) * _733) * 0.949999988079071044921875);
        float _2466 = _2465 * _2465;
        float _2467 = cbLight._m0[_2447].x + _809;
        float _2468 = cbLight._m0[_2447].y + _810;
        float _2469 = cbLight._m0[_2447].z + _811;
        float _2473 = inversesqrt(dot(vec3(_2467, _2468, _2469), vec3(_2467, _2468, _2469)));
        float _2474 = _2473 * _2467;
        float _2475 = _2473 * _2468;
        float _2476 = _2473 * _2469;
        float _2477 = dot(vec3(_730, _731, _732), vec3(cbLight._m0[_2447].xyz));
        float _4420 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
        float _2480 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
        float _2481 = dot(vec3(_730, _731, _732), vec3(_2474, _2475, _2476));
        float _4431 = isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0));
        float _2484 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
        float _2485 = dot(vec3(cbLight._m0[_2447].xyz), vec3(_2474, _2475, _2476));
        float _4442 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
        float _2489 = _2466 * _2466;
        float _2493 = ((_2484 * _2484) * (_2489 + (-1.0))) + 1.0;
        float _2500 = exp2(log2(1.0 - (isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0)))) * 5.0);
        float _2507 = 1.0 - _2466;
        float _2517 = (0.5 / (((_2124 * ((_2480 * _2507) + _2466)) + 9.9999999392252902907785028219223e-09) + (((_2124 * _2507) + _2466) * _2480))) * _2480;
        float _4453 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0));
        float _2519 = (isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0))) * (_2489 / ((_2493 * _2493) * 3.141590118408203125));
        float _2520 = isnan(1.0) ? _1971 : (isnan(_1971) ? 1.0 : min(_1971, 1.0));
        _2436 = (((((_2500 * _2146) + _882) * cbLight._m0[_2451].x) * _2519) * _2520) + _2322;
        _2438 = (((((_2500 * _2148) + _884) * cbLight._m0[_2451].y) * _2519) * _2520) + _2324;
        _2440 = (((((_2500 * _2149) + _885) * cbLight._m0[_2451].z) * _2519) * _2520) + _2326;
    }
    float _2655;
    float _2657;
    float _2659;
    float _2661;
    float _2663;
    float _2665;
    if (_1953.y == 0u)
    {
        float _2595 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2596 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2595;
        float _2597 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2595;
        float _2598 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2595;
        uvec4 _2610 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2611 = _2610.x;
        uint _2622 = uint((float(_2610.y) * floor(float(uint(cbSceneParam._m0[85u].y * _818) / _2611))) + floor(float(uint(cbSceneParam._m0[85u].x * _817) / _2611)));
        float _2632 = (log2(_2598 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2633 = isnan(0.0) ? _2632 : (isnan(_2632) ? 0.0 : max(_2632, 0.0));
        uint _2636 = uint(isnan(14.0) ? _2633 : (isnan(_2633) ? 14.0 : min(_2633, 14.0)));
        uvec4 _2641 = texelFetch(g_lightClusterGridBuffer, int(((_2636 << 2u) + (_2622 << 6u)) >> 2u));
        uint _2642 = _2641.x;
        uint _2643 = _2610.z;
        float _2743;
        float _2745;
        float _2747;
        float _2749;
        float _2751;
        float _2753;
        if (((((1u << ((_2643 >> 4u) & 15u)) + 4294967295u) & _2642) == 0u) || ((_2643 & 240u) == 0u))
        {
            _2743 = 0.0;
            _2745 = 0.0;
            _2747 = 0.0;
            _2749 = 0.0;
            _2751 = 0.0;
            _2753 = 0.0;
        }
        else
        {
            float _2744;
            float _2746;
            float _2748;
            float _2750;
            float _2752;
            float _2754;
            float _2887 = 0.0;
            float _2888 = 0.0;
            float _2889 = 0.0;
            float _2890 = 0.0;
            float _2891 = 0.0;
            float _2892 = 0.0;
            uint _2893 = 0u;
            uint _2902;
            bool _2903;
            for (;;)
            {
                _2902 = texelFetch(g_lightClassification, int((((_2636 << 5u) + (_2622 << 9u)) + (_2893 << 2u)) >> 2u)).x;
                _2903 = _2902 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2903)
                {
                    frontier_phi_61_pred = _2887;
                    frontier_phi_61_pred_1 = _2892;
                    frontier_phi_61_pred_2 = _2891;
                    frontier_phi_61_pred_3 = _2890;
                    frontier_phi_61_pred_4 = _2889;
                    frontier_phi_61_pred_5 = _2888;
                }
                else
                {
                    float _3011;
                    float _3012;
                    float _3013;
                    float _3014;
                    float _3015;
                    float _3016;
                    uint _3017;
                    _3011 = _2887;
                    _3012 = _2888;
                    _3013 = _2889;
                    _3014 = _2890;
                    _3015 = _2891;
                    _3016 = _2892;
                    _3017 = _2902;
                    float _2943;
                    float _2944;
                    float _2945;
                    float _2946;
                    float _2947;
                    float _2948;
                    for (;;)
                    {
                        uint _3021 = uint(findLSB(_3017)) + (_2893 << 5u);
                        uint _3018 = (_3017 + 4294967295u) & _3017;
                        uint _3023 = _3021 * 48u;
                        vec4 _3037 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3023)).x, texelFetch(g_PointLightRenderingBuffer, int(_3023 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3023 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3023 + 3u)).x));
                        uint _3043 = (_3021 * 48u) + 4u;
                        vec4 _3056 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3043)).x, texelFetch(g_PointLightRenderingBuffer, int(_3043 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3043 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3043 + 3u)).x));
                        uint _3062 = (_3021 * 48u) + 8u;
                        vec3 _3073 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3062)).x, texelFetch(g_PointLightRenderingBuffer, int(_3062 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3062 + 2u)).x));
                        float _3077 = _3037.x - _2596;
                        float _3078 = _3037.y - _2597;
                        float _3079 = _3037.z - _2598;
                        float _3080 = dot(vec3(_3077, _3078, _3079), vec3(_3077, _3078, _3079));
                        float _3083 = inversesqrt(_3080);
                        float _3084 = _3083 * _3077;
                        float _3085 = _3083 * _3078;
                        float _3086 = _3083 * _3079;
                        float _3087 = dot(vec3(_839, _842, _845), vec3(_3084, _3085, _3086));
                        float _3092 = 1.0 - (_3080 * _3037.w);
                        float _4479 = isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : max(_3092, 0.0));
                        float _3093 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
                        float _3094 = sqrt(_3080) * _3056.w;
                        float _3097 = 1.39999997615814208984375 / (_3094 + 1.39999997615814208984375);
                        float _3098 = _3097 * _3097;
                        float _3101 = ((1.0 - _3098) * _3087) + _3098;
                        float _3104 = _3094 * _3094;
                        float _3108 = ((isnan(0.0) ? _3101 : (isnan(_3101) ? 0.0 : max(_3101, 0.0))) * _3093) / ((_3104 * 0.699999988079071044921875) + 1.0);
                        float _3112 = (-0.0) - _2596;
                        float _3113 = (-0.0) - _2597;
                        float _3114 = (-0.0) - _2598;
                        float _3118 = inversesqrt(dot(vec3(_3112, _3113, _3114), vec3(_3112, _3113, _3114)));
                        float _3119 = _3118 * _3112;
                        float _3120 = _3118 * _3113;
                        float _3121 = _3118 * _3114;
                        float _3129 = exp2(log2(1.0 / ((_3104 * 3.5) + 5.0)) * 0.25);
                        float _3130 = 1.0 - _914;
                        float _3137 = sqrt(1.0 - ((1.0 - (_3130 * _3130)) * (1.0 - (_3129 * _3129))));
                        float _3138 = _3137 * _3137;
                        float _3139 = _3138 * _3138;
                        float _3140 = _3119 + _3084;
                        float _3141 = _3120 + _3085;
                        float _3142 = _3121 + _3086;
                        float _3146 = inversesqrt(dot(vec3(_3140, _3141, _3142), vec3(_3140, _3141, _3142)));
                        float _3150 = dot(vec3(_839, _842, _845), vec3(_3119, _3120, _3121));
                        float _4495 = isnan(0.0) ? _3150 : (isnan(_3150) ? 0.0 : max(_3150, 0.0));
                        float _3153 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
                        float _3154 = dot(vec3(_839, _842, _845), vec3(_3146 * _3140, _3146 * _3141, _3146 * _3142));
                        float _4506 = isnan(0.0) ? _3154 : (isnan(_3154) ? 0.0 : max(_3154, 0.0));
                        float _3157 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
                        float _3161 = ((_3157 * _3157) * (_3139 + (-1.0))) + 1.0;
                        float _3162 = _3097 * _3138;
                        float _3163 = _3162 * _3162;
                        float _3166 = ((1.0 - _3163) * _3087) + _3163;
                        float _4517 = isnan(0.0) ? _3166 : (isnan(_3166) ? 0.0 : max(_3166, 0.0));
                        float _3167 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
                        float _3168 = 1.0 - _3138;
                        float _3178 = (0.5 / (((_3167 * ((_3153 * _3168) + _3138)) + 9.9999999392252902907785028219223e-09) + (((_3167 * _3168) + _3138) * _3153))) * _3167;
                        float _4528 = isnan(0.0) ? _3178 : (isnan(_3178) ? 0.0 : max(_3178, 0.0));
                        float _3189 = (((_3139 * 3.1415927410125732421875) * (isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0)))) / ((_3161 * _3161) * ((_3104 * 2.1991131305694580078125) + 3.141590118408203125))) * _3093;
                        _2946 = (_3108 * _3056.x) + _3014;
                        _2947 = (_3108 * _3056.y) + _3015;
                        _2948 = (_3108 * _3056.z) + _3016;
                        _2943 = (_3189 * _3073.x) + _3011;
                        _2944 = (_3189 * _3073.y) + _3012;
                        _2945 = (_3189 * _3073.z) + _3013;
                        if (_3018 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3011 = _2943;
                            _3012 = _2944;
                            _3013 = _2945;
                            _3014 = _2946;
                            _3015 = _2947;
                            _3016 = _2948;
                            _3017 = _3018;
                        }
                    }
                    frontier_phi_61_pred = _2943;
                    frontier_phi_61_pred_1 = _2948;
                    frontier_phi_61_pred_2 = _2947;
                    frontier_phi_61_pred_3 = _2946;
                    frontier_phi_61_pred_4 = _2945;
                    frontier_phi_61_pred_5 = _2944;
                }
                _2744 = frontier_phi_61_pred;
                _2754 = frontier_phi_61_pred_1;
                _2752 = frontier_phi_61_pred_2;
                _2750 = frontier_phi_61_pred_3;
                _2748 = frontier_phi_61_pred_4;
                _2746 = frontier_phi_61_pred_5;
                uint _2894 = _2893 + 1u;
                if (_2894 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2887 = _2744;
                    _2888 = _2746;
                    _2889 = _2748;
                    _2890 = _2750;
                    _2891 = _2752;
                    _2892 = _2754;
                    _2893 = _2894;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2743 = _2744;
            _2745 = _2746;
            _2747 = _2748;
            _2749 = _2750;
            _2751 = _2752;
            _2753 = _2754;
        }
        uvec4 _2757 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2758 = _2757.z;
        uint _2760 = (_2758 >> 8u) & 15u;
        float _2855;
        float _2857;
        float _2859;
        float _2861;
        float _2863;
        float _2865;
        if (((4294967295u << _2760) & _2642) == 0u)
        {
            _2855 = _2743;
            _2857 = _2745;
            _2859 = _2747;
            _2861 = _2749;
            _2863 = _2751;
            _2865 = _2753;
        }
        else
        {
            float _2880 = inversesqrt(dot(vec3(_2596, _2597, _2598), vec3(_2596, _2597, _2598)));
            float _2881 = _2880 * _2596;
            float _2882 = _2880 * _2597;
            float _2883 = _2880 * _2598;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2760 < ((_2758 >> 12u) & 15u))
            {
                float _2856;
                float _2858;
                float _2860;
                float _2862;
                float _2864;
                float _2866;
                float _2994 = _2743;
                float _2995 = _2745;
                float _2996 = _2747;
                float _2997 = _2749;
                float _2998 = _2751;
                float _2999 = _2753;
                uint _3000 = _2760;
                uint _3009;
                bool _3010;
                for (;;)
                {
                    _3009 = texelFetch(g_lightClassification, int((((_2636 << 5u) + (_2622 << 9u)) + (_3000 << 2u)) >> 2u)).x;
                    _3010 = _3009 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3010)
                    {
                        frontier_phi_67_pred = _2997;
                        frontier_phi_67_pred_1 = _2998;
                        frontier_phi_67_pred_2 = _2999;
                        frontier_phi_67_pred_3 = _2996;
                        frontier_phi_67_pred_4 = _2995;
                        frontier_phi_67_pred_5 = _2994;
                    }
                    else
                    {
                        float _3194;
                        float _3195;
                        float _3196;
                        float _3197;
                        float _3198;
                        float _3199;
                        float _3487;
                        float _3488;
                        float _3489;
                        float _3490;
                        float _3491;
                        float _3492;
                        float _3207 = _2994;
                        float _3208 = _2995;
                        float _3209 = _2996;
                        float _3210 = _2997;
                        float _3211 = _2998;
                        float _3212 = _2999;
                        uint _3213 = _3009;
                        uint _3214;
                        vec4 _3239;
                        float _3240;
                        vec4 _3255;
                        vec3 _3267;
                        vec4 _3282;
                        vec4 _3297;
                        float _3343;
                        bool _3344;
                        for (;;)
                        {
                            uint _3224 = ((_3000 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3213));
                            _3214 = (_3213 + 4294967295u) & _3213;
                            uint _3226 = _3224 * 40u;
                            _3239 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3226)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3226 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3226 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3226 + 3u)).x));
                            _3240 = _3239.w;
                            uint _3242 = (_3224 * 40u) + 4u;
                            _3255 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3242)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 3u)).x));
                            uint _3257 = (_3224 * 40u) + 8u;
                            _3267 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3257)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 2u)).x));
                            uint _3269 = (_3224 * 40u) + 16u;
                            _3282 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3269)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 3u)).x));
                            uint _3284 = (_3224 * 40u) + 20u;
                            _3297 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3284)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 3u)).x));
                            uint _3299 = (_3224 * 40u) + 24u;
                            vec4 _3312 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3299)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 3u)).x));
                            uint _3318 = (_3224 * 40u) + 28u;
                            vec4 _3331 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3318)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3318 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3318 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3318 + 3u)).x));
                            _3343 = fma(_2598, _3331.z, fma(_2597, _3331.y, _3331.x * _2596)) + _3331.w;
                            _3344 = !((fma(_2598, _3312.z, fma(_2597, _3312.y, _3312.x * _2596)) + _3312.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3344)
                            {
                                float _3371 = _3239.x - _2596;
                                float _3372 = _3239.y - _2597;
                                float _3373 = _3239.z - _2598;
                                float _3374 = dot(vec3(_3371, _3372, _3373), vec3(_3371, _3372, _3373));
                                float _3377 = inversesqrt(_3374);
                                float _3378 = _3377 * _3371;
                                float _3379 = _3377 * _3372;
                                float _3380 = _3377 * _3373;
                                float _3384 = 1.0 - (_3374 / (_3240 * _3240));
                                float _4539 = isnan(0.0) ? _3384 : (isnan(_3384) ? 0.0 : max(_3384, 0.0));
                                float _3385 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
                                float _3389 = sqrt(_3374) * _3255.w;
                                float _3391 = 1.39999997615814208984375 / (_3389 + 1.39999997615814208984375);
                                float _3392 = _3391 * _3391;
                                float _3395 = ((1.0 - _3392) * dot(vec3(_3378, _3379, _3380), vec3(_839, _842, _845))) + _3392;
                                float _3398 = _3389 * _3389;
                                float _3402 = (fma(_2598, _3282.z, fma(_2597, _3282.y, _3282.x * _2596)) + _3282.w) / _3343;
                                float _3403 = (fma(_2598, _3297.z, fma(_2597, _3297.y, _3297.x * _2596)) + _3297.w) / _3343;
                                float _3407 = 1.0 - dot(vec2(_3402, _3403), vec2(_3402, _3403));
                                float _4555 = isnan(0.0) ? _3407 : (isnan(_3407) ? 0.0 : max(_3407, 0.0));
                                float _3408 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
                                float _3409 = _3408 * (((isnan(0.0) ? _3395 : (isnan(_3395) ? 0.0 : max(_3395, 0.0))) * _3385) / ((_3398 * 0.699999988079071044921875) + 1.0));
                                float _3421 = exp2(log2(1.0 / ((_3398 * 3.5) + 5.0)) * 0.25);
                                float _3422 = 1.0 - _914;
                                float _3429 = sqrt(1.0 - ((1.0 - (_3422 * _3422)) * (1.0 - (_3421 * _3421))));
                                float _3430 = _3429 * _3429;
                                float _3431 = _3430 * _3430;
                                float _3432 = _3378 - _2881;
                                float _3433 = _3379 - _2882;
                                float _3434 = _3380 - _2883;
                                float _3438 = inversesqrt(dot(vec3(_3432, _3433, _3434), vec3(_3432, _3433, _3434)));
                                float _3442 = dot(vec3(_839, _842, _845), vec3((-0.0) - _2881, (-0.0) - _2882, (-0.0) - _2883));
                                float _4566 = isnan(0.0) ? _3442 : (isnan(_3442) ? 0.0 : max(_3442, 0.0));
                                float _3445 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
                                float _3446 = dot(vec3(_839, _842, _845), vec3(_3438 * _3432, _3438 * _3433, _3438 * _3434));
                                float _4577 = isnan(0.0) ? _3446 : (isnan(_3446) ? 0.0 : max(_3446, 0.0));
                                float _3449 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
                                float _3453 = ((_3449 * _3449) * (_3431 + (-1.0))) + 1.0;
                                float _3454 = _3391 * _3430;
                                float _3455 = _3454 * _3454;
                                float _3461 = ((1.0 - _3455) * dot(vec3(_839, _842, _845), vec3(_3378, _3379, _3380))) + _3455;
                                float _4588 = isnan(0.0) ? _3461 : (isnan(_3461) ? 0.0 : max(_3461, 0.0));
                                float _3462 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
                                float _3463 = 1.0 - _3430;
                                float _3473 = (0.5 / (((_3462 * ((_3445 * _3463) + _3430)) + 9.9999999392252902907785028219223e-09) + (((_3462 * _3463) + _3430) * _3445))) * _3462;
                                float _4599 = isnan(0.0) ? _3473 : (isnan(_3473) ? 0.0 : max(_3473, 0.0));
                                float _3483 = (_3408 * _3385) * (((_3431 * 3.1415927410125732421875) * (isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0)))) / ((_3453 * _3453) * ((_3398 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3483 * _3267.x;
                                frontier_phi_73_pred_1 = _3483 * _3267.y;
                                frontier_phi_73_pred_2 = _3409 * _3255.z;
                                frontier_phi_73_pred_3 = _3409 * _3255.y;
                                frontier_phi_73_pred_4 = _3409 * _3255.x;
                                frontier_phi_73_pred_5 = _3483 * _3267.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3487 = frontier_phi_73_pred;
                            _3488 = frontier_phi_73_pred_1;
                            _3492 = frontier_phi_73_pred_2;
                            _3491 = frontier_phi_73_pred_3;
                            _3490 = frontier_phi_73_pred_4;
                            _3489 = frontier_phi_73_pred_5;
                            _3197 = _3490 + _3210;
                            _3198 = _3491 + _3211;
                            _3199 = _3492 + _3212;
                            _3194 = _3487 + _3207;
                            _3195 = _3488 + _3208;
                            _3196 = _3489 + _3209;
                            if (_3214 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3207 = _3194;
                                _3208 = _3195;
                                _3209 = _3196;
                                _3210 = _3197;
                                _3211 = _3198;
                                _3212 = _3199;
                                _3213 = _3214;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3197;
                        frontier_phi_67_pred_1 = _3198;
                        frontier_phi_67_pred_2 = _3199;
                        frontier_phi_67_pred_3 = _3196;
                        frontier_phi_67_pred_4 = _3195;
                        frontier_phi_67_pred_5 = _3194;
                    }
                    _2862 = frontier_phi_67_pred;
                    _2864 = frontier_phi_67_pred_1;
                    _2866 = frontier_phi_67_pred_2;
                    _2860 = frontier_phi_67_pred_3;
                    _2858 = frontier_phi_67_pred_4;
                    _2856 = frontier_phi_67_pred_5;
                    uint _3001 = _3000 + 1u;
                    if (_3001 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2994 = _2856;
                        _2995 = _2858;
                        _2996 = _2860;
                        _2997 = _2862;
                        _2998 = _2864;
                        _2999 = _2866;
                        _3000 = _3001;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2864;
                frontier_phi_55_56_ladder_1 = _2866;
                frontier_phi_55_56_ladder_2 = _2862;
                frontier_phi_55_56_ladder_3 = _2860;
                frontier_phi_55_56_ladder_4 = _2858;
                frontier_phi_55_56_ladder_5 = _2856;
            }
            else
            {
                frontier_phi_55_56_ladder = _2751;
                frontier_phi_55_56_ladder_1 = _2753;
                frontier_phi_55_56_ladder_2 = _2749;
                frontier_phi_55_56_ladder_3 = _2747;
                frontier_phi_55_56_ladder_4 = _2745;
                frontier_phi_55_56_ladder_5 = _2743;
            }
            _2855 = frontier_phi_55_56_ladder_5;
            _2857 = frontier_phi_55_56_ladder_4;
            _2859 = frontier_phi_55_56_ladder_3;
            _2861 = frontier_phi_55_56_ladder_2;
            _2863 = frontier_phi_55_56_ladder;
            _2865 = frontier_phi_55_56_ladder_1;
        }
        float _2870 = isnan(1.0) ? _898 : (isnan(_898) ? 1.0 : min(_898, 1.0));
        _2655 = (_2870 * _2861) + _2088;
        _2657 = (_2870 * _2863) + _2090;
        _2659 = (_2870 * _2865) + _2092;
        _2661 = ((_2855 * _882) * _2870) + _2436;
        _2663 = ((_2857 * _884) * _2870) + _2438;
        _2665 = ((_2859 * _885) * _2870) + _2440;
    }
    else
    {
        _2655 = _2088;
        _2657 = _2090;
        _2659 = _2092;
        _2661 = _2436;
        _2663 = _2438;
        _2665 = _2440;
    }
    float _4615 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
    float _4626 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
    float _4637 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
    uint _2685 = _269 + 6u;
    float _2693 = _817 / cbSceneParam._m0[86u].x;
    float _2694 = _818 / cbSceneParam._m0[86u].y;
    vec4 _2708 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2693, _2694, (log2((isnan(cbSceneParam._m0[77u].w) ? _752 : (isnan(_752) ? cbSceneParam._m0[77u].w : min(_752, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2710 = _2708.x;
    float _2711 = _2708.y;
    float _2712 = _2708.z;
    float _2713 = _2708.w;
    float _2805;
    float _2807;
    float _2809;
    float _2811;
    if (_752 > cbSceneParam._m0[78u].w)
    {
        float _2768 = isnan(_752) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _752 : min(cbSceneParam._m0[80u].w, _752));
        float _2769 = _2768 / _752;
        float _2780 = _2769 * _802;
        float _2781 = _803 * _2769;
        float _2782 = (-0.0) - _2781;
        float _2783 = _2769 * _804;
        float _2785 = (cbSceneParam._m0[77u].w * _2782) / _2768;
        float _2786 = _2785 + cbSceneParam._m0[79u].w;
        float _2787 = cbSceneParam._m0[79u].w - _2781;
        float _2793 = sqrt(((_2780 * _2780) + (_2781 * _2781)) + (_2783 * _2783));
        float _2796 = (1.0 - (cbSceneParam._m0[77u].w / _2768)) * _2793;
        float _2801 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2803 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2956;
        if (abs((_2782 - _2785) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2956 = ((((_2786 > 0.0) ? exp2(_2801 * _2786) : (2.0 - exp2(_2803 * _2786))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2796;
        }
        else
        {
            float _2916 = 1.0 / cbSceneParam._m0[80u].x;
            float _2917 = isnan(_2787) ? _2786 : (isnan(_2786) ? _2787 : max(_2786, _2787));
            float _2918 = isnan(_2787) ? _2786 : (isnan(_2786) ? _2787 : min(_2786, _2787));
            float _2927 = isnan(0.0) ? _2917 : (isnan(_2917) ? 0.0 : min(_2917, 0.0));
            float _2928 = isnan(0.0) ? _2918 : (isnan(_2918) ? 0.0 : min(_2918, 0.0));
            _2956 = ((abs(_2793 / _2782) * cbSceneParam._m0[80u].y) * ((((_2927 - _2928) * 2.0) - ((exp2(_2801 * (isnan(0.0) ? _2917 : (isnan(_2917) ? 0.0 : max(_2917, 0.0)))) - exp2(_2801 * (isnan(0.0) ? _2918 : (isnan(_2918) ? 0.0 : max(_2918, 0.0))))) * _2916)) - ((exp2(_2803 * _2927) - exp2(_2803 * _2928)) * _2916))) + (_2796 * cbSceneParam._m0[80u].z);
        }
        vec4 _2958 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2693, _2694, 1.0), 0.0);
        float _2967 = exp2((_2956 * (-1.44269502162933349609375)) * (1.0 - _2958.w));
        float _2968 = log2(_2967);
        float _2984 = log2(_2713);
        _2805 = (exp2(_2984 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2968 * cbSceneParam._m0[78u].x)) * _2958.x) / cbSceneParam._m0[78u].x)) + _2710;
        _2807 = (exp2(_2984 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2968 * cbSceneParam._m0[78u].y)) * _2958.y) / cbSceneParam._m0[78u].y)) + _2711;
        _2809 = (exp2(_2984 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2968 * cbSceneParam._m0[78u].z)) * _2958.z) / cbSceneParam._m0[78u].z)) + _2712;
        _2811 = _2967 * _2713;
    }
    else
    {
        _2805 = _2710;
        _2807 = _2711;
        _2809 = _2712;
        _2811 = _2713;
    }
    float _2823 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2824 = _2823 == 3.0;
    float _2825 = log2(_2811);
    float _2832 = exp2(_2825 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0))) * (_2655 + ((isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0))) * _898))) + ((_2661 + ((isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0))) * _1706)) * cbPerFrame._m0[3u].x));
    float _2833 = exp2(_2825 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0))) * (_2657 + ((isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0))) * _898))) + ((_2663 + ((isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0))) * _1706)) * cbPerFrame._m0[3u].x));
    float _2834 = exp2(_2825 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0))) * (_2659 + ((isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0))) * _898))) + ((_2665 + ((isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0))) * _1706)) * cbPerFrame._m0[3u].x));
    float _2843 = (_2823 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2843 * (_2824 ? _2832 : (_2832 + (cbSceneParam._m0[72u].w * _2805)));
    SV_Target.y = _2843 * (_2824 ? _2833 : (_2833 + (cbSceneParam._m0[72u].w * _2807)));
    SV_Target.z = _2843 * (_2824 ? _2834 : (_2834 + (cbSceneParam._m0[72u].w * _2809)));
    SV_Target.w = cbInstanceData._m0[_2685].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2685].w;
}


