#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1118;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _205 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _206 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _207 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _213 = inversesqrt(dot(vec3(_205, _206, _207), vec3(_205, _206, _207)));
    float _214 = _213 * _205;
    float _215 = _213 * _206;
    float _216 = _213 * _207;
    float _220 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _221 = _220 * NORMAL.x;
    float _222 = _220 * NORMAL.y;
    float _223 = _220 * NORMAL.z;
    float _227 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _228 = _227 * TANGENT.x;
    float _229 = _227 * TANGENT.y;
    float _230 = _227 * TANGENT.z;
    float _241 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _243 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _244 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3468 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _3479 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _3490 = isnan(0.0) ? _244 : (isnan(_244) ? 0.0 : max(_244, 0.0));
    uint _254 = uint(roundEven(NORMAL.w)) * 13u;
    uint _259 = _254 + 1u;
    uint _263 = _254 + 2u;
    float _272 = sqrt(((cbInstanceData._m0[_259].x * cbInstanceData._m0[_259].x) + (cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x)) + (cbInstanceData._m0[_263].x * cbInstanceData._m0[_263].x));
    float _273 = _272 * TEXCOORD.z;
    float _274 = _272 * TEXCOORD.w;
    vec4 _287 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _273) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _274) + cbTextureTilingScale._m0[13u].w));
    vec4 _310 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _315 = _310.x * cbMtdParam._m0[9u].x;
    float _316 = _310.y * cbMtdParam._m0[9u].y;
    float _317 = _310.z * cbMtdParam._m0[9u].z;
    float _321 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _287.x) * _315;
    float _324 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _287.y) * _316;
    float _327 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _287.z) * _317;
    float _334 = ((_315 - _321) * (isnan(1.0) ? _3468 : (isnan(_3468) ? 1.0 : min(_3468, 1.0)))) + _321;
    float _335 = ((_316 - _324) * (isnan(1.0) ? _3479 : (isnan(_3479) ? 1.0 : min(_3479, 1.0)))) + _324;
    float _336 = ((_317 - _327) * (isnan(1.0) ? _3490 : (isnan(_3490) ? 1.0 : min(_3490, 1.0)))) + _327;
    vec4 _355 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _273) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _274) + cbTextureTilingScale._m0[14u].w));
    vec4 _375 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _273) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _274) + cbTextureTilingScale._m0[20u].w));
    vec4 _401 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _405 = _401.z;
    float _409 = (_401.x * 2.0) + (-1.0);
    float _410 = (_401.y * 2.0) + (-1.0);
    float _411 = dot(vec2(_409, _410), vec2(_409, _410));
    float _3501 = isnan(0.0) ? _411 : (isnan(_411) ? 0.0 : max(_411, 0.0));
    float _416 = sqrt(1.0 - (isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0))));
    float _421 = _409 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_375.x * 2.0) + (-1.0)));
    float _422 = _410 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_375.y * 2.0) + (-1.0)));
    float _425 = fma(_416, _221, fma(_422, _228, _421 * _214));
    float _428 = fma(_416, _222, fma(_422, _229, _421 * _215));
    float _431 = fma(_416, _223, fma(_422, _230, _421 * _216));
    float _435 = inversesqrt(dot(vec3(_425, _428, _431), vec3(_425, _428, _431)));
    vec4 _471 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _273) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _274) + cbTextureTilingScale._m0[11u].w));
    float _473 = _471.x;
    float _474 = 1.0 - _473;
    float _483 = (cbMtdParam._m0[19u].x + dot(vec4(_435 * _425, _435 * _428, _435 * _431, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_473 - _474) * cbMtdParam._m0[24u].z) + _474) * cbMtdParam._m0[21u].z);
    float _3512 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _484 = isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0));
    float _491 = (_484 * ((_355.x * cbMtdParam._m0[18u].x) - _334)) + _334;
    float _492 = (_484 * ((_355.y * cbMtdParam._m0[18u].y) - _335)) + _335;
    float _493 = (_484 * ((_355.z * cbMtdParam._m0[18u].z) - _336)) + _336;
    vec4 _506 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _508 = _506.x;
    float _510 = _508 - (_508 * _484);
    float _515 = (((_375.z - _405) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _405;
    vec4 _528 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _273) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _274) + cbTextureTilingScale._m0[15u].w));
    float _535 = (_528.x * 2.0) + (-1.0);
    float _536 = (_528.y * 2.0) + (-1.0);
    float _537 = dot(vec2(_535, _536), vec2(_535, _536));
    float _3523 = isnan(0.0) ? _537 : (isnan(_537) ? 0.0 : max(_537, 0.0));
    float _545 = ((_528.z - _515) * _484) + _515;
    float _555 = ((sqrt(1.0 - (isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0)))) - _416) * _484) + _416;
    float _558 = (((_535 - _421) * _484) + _421) + (cbMtdParam._m0[21u].x * _421);
    float _559 = (((_536 - _422) * _484) + _422) + (cbMtdParam._m0[21u].x * _422);
    float _561 = cbMtdParam._m0[22u].x + _401.w;
    float _564 = fma(_555, _221, fma(_559, _228, _558 * _214));
    float _567 = fma(_555, _222, fma(_559, _229, _558 * _215));
    float _570 = fma(_555, _223, fma(_559, _230, _558 * _216));
    float _574 = inversesqrt(dot(vec3(_564, _567, _570), vec3(_564, _567, _570)));
    float _575 = _574 * _564;
    float _576 = _574 * _567;
    float _577 = _574 * _570;
    float _3534 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _578 = isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0));
    float _3545 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _3556 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _3567 = isnan(0.0) ? _492 : (isnan(_492) ? 0.0 : max(_492, 0.0));
    float _3578 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _3589 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _583 = isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0));
    float _597 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _638 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _648 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _638);
    float _649 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _638);
    float _650 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _638);
    float _654 = inversesqrt(dot(vec3(_648, _649, _650), vec3(_648, _649, _650)));
    float _655 = _648 * _654;
    float _656 = _649 * _654;
    float _657 = _650 * _654;
    float _663 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _664 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _685 = fma(_577, cbSceneParam._m0[5u].z, fma(_576, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _575));
    float _688 = fma(_577, cbSceneParam._m0[6u].z, fma(_576, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _575));
    float _691 = fma(_577, cbSceneParam._m0[7u].z, fma(_576, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _575));
    uint _705 = (_254 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _711 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0)))) * cbInstanceData._m0[_705].x;
    float _712 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0)))) * cbInstanceData._m0[_705].y;
    float _713 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0)))) * cbInstanceData._m0[_705].z;
    float _3600 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _714 = isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0));
    float _3611 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _715 = isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0));
    float _3622 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _716 = isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0));
    float _717 = 1.0 - _583;
    float _718 = _714 * _717;
    float _719 = _715 * _717;
    float _720 = _716 * _717;
    float _725 = (_714 + (-0.039999999105930328369140625)) * _583;
    float _726 = (_715 + (-0.039999999105930328369140625)) * _583;
    float _727 = (_716 + (-0.039999999105930328369140625)) * _583;
    float _728 = _725 + 0.039999999105930328369140625;
    float _730 = _726 + 0.039999999105930328369140625;
    float _731 = _727 + 0.039999999105930328369140625;
    vec4 _740 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _663, cbSceneParam._m0[86u].y * _664));
    float _744 = ((isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0))) * TEXCOORD_5.w) * _740.x;
    float _745 = dot(vec3(_575, _576, _577), vec3(_655, _656, _657));
    float _748 = _745 * 2.0;
    float _752 = (_748 * _575) - _655;
    float _753 = (_748 * _576) - _656;
    float _754 = (_748 * _577) - _657;
    float _758 = abs(dot(vec3(_655, _656, _657), vec3(_575, _576, _577)));
    float _3633 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _760 = sqrt(_578);
    float _773 = exp2((_760 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_760 * 3.0));
    float _779 = (1.0 - _773) * ((_760 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _780 = _773 * _760;
    float _808 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _812 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _816 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1117;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _842 = fma(_816, cbModelParam._m0[26u].z, fma(_812, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _808));
        float _846 = fma(_816, cbModelParam._m0[27u].z, fma(_812, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _808));
        float _850 = fma(_816, cbModelParam._m0[28u].z, fma(_812, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _808));
        float _875 = _808 + _575;
        float _876 = _812 + _576;
        float _877 = _816 + _577;
        float _887 = fma(_877, cbModelParam._m0[26u].z, fma(_876, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _875)) - _842;
        float _888 = fma(_877, cbModelParam._m0[27u].z, fma(_876, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _875)) - _846;
        float _889 = fma(_877, cbModelParam._m0[28u].z, fma(_876, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _875)) - _850;
        float _893 = inversesqrt(dot(vec3(_887, _888, _889), vec3(_887, _888, _889)));
        float _906 = ((_893 * _887) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_842 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _907 = ((_893 * _888) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_846 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _908 = ((_893 * _889) / cbModelParam._m0[34u].z) + ((((((_850 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _911 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_906, _907, _908), 0.0);
        vec4 _918 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_906, _907, _908), 0.0);
        vec4 _925 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_906, _907, _908), 0.0);
        vec4 _932 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_906, _907, _908), 0.0);
        float _945 = exp2((_911.w + (-0.5)) * 20.0) * 2.0;
        float _946 = _945 * (_911.x + (-0.5));
        float _947 = _945 * (_911.y + (-0.5));
        float _948 = _945 * (_911.z + (-0.5));
        float _955 = exp2((_918.w + (-0.5)) * 20.0) * 2.0;
        float _956 = _955 * (_918.x + (-0.5));
        float _957 = _955 * (_918.y + (-0.5));
        float _958 = _955 * (_918.z + (-0.5));
        float _965 = exp2((_925.w + (-0.5)) * 20.0) * 2.0;
        float _966 = _965 * (_925.x + (-0.5));
        float _967 = _965 * (_925.y + (-0.5));
        float _968 = _965 * (_925.z + (-0.5));
        float _975 = exp2((_932.w + (-0.5)) * 20.0) * 2.0;
        float _976 = _975 * (_932.x + (-0.5));
        float _977 = _975 * (_932.y + (-0.5));
        float _978 = _975 * (_932.z + (-0.5));
        float _979 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        float _980 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _981 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _982 = _946 * 0.5;
        float _983 = _956 * 0.5;
        float _984 = _966 * 0.5;
        float _985 = dot(vec3(_982, _983, _984), vec3(_982, _983, _984));
        float _990 = (_985 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_985);
        float _999 = (dot(vec3(_575, _576, _577), vec3(_990 * _982, _990 * _983, _990 * _984)) + 1.0) * 0.5;
        float _3659 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1009 = sqrt(((_983 * _983) + (_982 * _982)) + (_984 * _984)) / (_979 + 9.9999997473787516355514526367188e-06);
        float _3670 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        float _1010 = isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0));
        float _1011 = _1010 * 2.0;
        float _1015 = (1.0 - _1010) / (_1010 + 1.0);
        float _3681 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1016 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
        float _1025 = ((((1.0 - _1016) * (_1011 + 2.0)) * exp2(log2(isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0))) * (_1011 + 1.0))) + _1016) * _979;
        float _1026 = _947 * 0.5;
        float _1027 = _957 * 0.5;
        float _1028 = _967 * 0.5;
        float _1029 = dot(vec3(_1026, _1027, _1028), vec3(_1026, _1027, _1028));
        float _1034 = (_1029 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1029);
        float _1042 = (dot(vec3(_575, _576, _577), vec3(_1034 * _1026, _1034 * _1027, _1034 * _1028)) + 1.0) * 0.5;
        float _3692 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1051 = sqrt(((_1027 * _1027) + (_1026 * _1026)) + (_1028 * _1028)) / (_980 + 9.9999997473787516355514526367188e-06);
        float _3703 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1052 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
        float _1053 = _1052 * 2.0;
        float _1057 = (1.0 - _1052) / (_1052 + 1.0);
        float _3714 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1058 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
        float _1067 = ((((1.0 - _1058) * (_1053 + 2.0)) * exp2(log2(isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0))) * (_1053 + 1.0))) + _1058) * _980;
        float _1068 = _948 * 0.5;
        float _1069 = _958 * 0.5;
        float _1070 = _968 * 0.5;
        float _1071 = dot(vec3(_1068, _1069, _1070), vec3(_1068, _1069, _1070));
        float _1076 = (_1071 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1071);
        float _1084 = (dot(vec3(_575, _576, _577), vec3(_1076 * _1068, _1076 * _1069, _1076 * _1070)) + 1.0) * 0.5;
        float _3725 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1093 = sqrt(((_1069 * _1069) + (_1068 * _1068)) + (_1070 * _1070)) / (_981 + 9.9999997473787516355514526367188e-06);
        float _3736 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1094 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
        float _1095 = _1094 * 2.0;
        float _1099 = (1.0 - _1094) / (_1094 + 1.0);
        float _3747 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1100 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
        float _1109 = ((((1.0 - _1100) * (_1095 + 2.0)) * exp2(log2(isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0))) * (_1095 + 1.0))) + _1100) * _981;
        _1117 = _948;
        _1119 = _947;
        _1120 = _946;
        _1121 = _958;
        _1122 = _957;
        _1123 = _956;
        _1124 = _968;
        _1125 = _967;
        _1126 = _966;
        _1127 = _981;
        _1128 = _980;
        _1129 = _979;
        _1130 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0)));
        _1131 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0)));
        _1132 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0)));
    }
    else
    {
        _1117 = _1118;
        _1119 = _1118;
        _1120 = _1118;
        _1121 = _1118;
        _1122 = _1118;
        _1123 = _1118;
        _1124 = _1118;
        _1125 = _1118;
        _1126 = _1118;
        _1127 = _1118;
        _1128 = _1118;
        _1129 = _1118;
        _1130 = 0.0;
        _1131 = 0.0;
        _1132 = 0.0;
    }
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1157 = fma(_816, cbModelParam._m0[30u].z, fma(_812, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _808));
        float _1161 = fma(_816, cbModelParam._m0[31u].z, fma(_812, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _808));
        float _1165 = fma(_816, cbModelParam._m0[32u].z, fma(_812, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _808));
        float _1188 = _808 + _575;
        float _1189 = _812 + _576;
        float _1190 = _816 + _577;
        float _1200 = fma(_1190, cbModelParam._m0[30u].z, fma(_1189, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1188)) - _1157;
        float _1201 = fma(_1190, cbModelParam._m0[31u].z, fma(_1189, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1188)) - _1161;
        float _1202 = fma(_1190, cbModelParam._m0[32u].z, fma(_1189, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1188)) - _1165;
        float _1206 = inversesqrt(dot(vec3(_1200, _1201, _1202), vec3(_1200, _1201, _1202)));
        float _1219 = ((_1206 * _1200) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1157 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1220 = ((_1206 * _1201) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1161 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1221 = ((_1206 * _1202) / cbModelParam._m0[35u].z) + ((((((_1165 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1223 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1219, _1220, _1221), 0.0);
        vec4 _1230 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1219, _1220, _1221), 0.0);
        vec4 _1237 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1219, _1220, _1221), 0.0);
        vec4 _1244 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1219, _1220, _1221), 0.0);
        float _1256 = exp2((_1223.w + (-0.5)) * 20.0) * 2.0;
        float _1257 = _1256 * (_1223.x + (-0.5));
        float _1258 = _1256 * (_1223.y + (-0.5));
        float _1259 = _1256 * (_1223.z + (-0.5));
        float _1266 = exp2((_1230.w + (-0.5)) * 20.0) * 2.0;
        float _1267 = _1266 * (_1230.x + (-0.5));
        float _1268 = _1266 * (_1230.y + (-0.5));
        float _1269 = _1266 * (_1230.z + (-0.5));
        float _1276 = exp2((_1237.w + (-0.5)) * 20.0) * 2.0;
        float _1277 = _1276 * (_1237.x + (-0.5));
        float _1278 = _1276 * (_1237.y + (-0.5));
        float _1279 = _1276 * (_1237.z + (-0.5));
        float _1286 = exp2((_1244.w + (-0.5)) * 20.0) * 2.0;
        float _1287 = _1286 * (_1244.x + (-0.5));
        float _1288 = _1286 * (_1244.y + (-0.5));
        float _1289 = _1286 * (_1244.z + (-0.5));
        float _1290 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1291 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1292 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1293 = _1257 * 0.5;
        float _1294 = _1267 * 0.5;
        float _1295 = _1277 * 0.5;
        float _1296 = dot(vec3(_1293, _1294, _1295), vec3(_1293, _1294, _1295));
        float _1301 = (_1296 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1296);
        float _1309 = (dot(vec3(_575, _576, _577), vec3(_1301 * _1293, _1301 * _1294, _1301 * _1295)) + 1.0) * 0.5;
        float _3788 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1318 = sqrt(((_1294 * _1294) + (_1293 * _1293)) + (_1295 * _1295)) / (_1290 + 9.9999997473787516355514526367188e-06);
        float _3799 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1319 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
        float _1320 = _1319 * 2.0;
        float _1324 = (1.0 - _1319) / (_1319 + 1.0);
        float _3810 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1325 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
        float _1334 = ((((1.0 - _1325) * (_1320 + 2.0)) * exp2(log2(isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0))) * (_1320 + 1.0))) + _1325) * _1290;
        float _1335 = _1258 * 0.5;
        float _1336 = _1268 * 0.5;
        float _1337 = _1278 * 0.5;
        float _1338 = dot(vec3(_1335, _1336, _1337), vec3(_1335, _1336, _1337));
        float _1343 = (_1338 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1338);
        float _1351 = (dot(vec3(_575, _576, _577), vec3(_1343 * _1335, _1343 * _1336, _1343 * _1337)) + 1.0) * 0.5;
        float _3821 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1360 = sqrt(((_1336 * _1336) + (_1335 * _1335)) + (_1337 * _1337)) / (_1291 + 9.9999997473787516355514526367188e-06);
        float _3832 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1361 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
        float _1362 = _1361 * 2.0;
        float _1366 = (1.0 - _1361) / (_1361 + 1.0);
        float _3843 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1367 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
        float _1376 = ((((1.0 - _1367) * (_1362 + 2.0)) * exp2(log2(isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0))) * (_1362 + 1.0))) + _1367) * _1291;
        float _1377 = _1259 * 0.5;
        float _1378 = _1269 * 0.5;
        float _1379 = _1279 * 0.5;
        float _1380 = dot(vec3(_1377, _1378, _1379), vec3(_1377, _1378, _1379));
        float _1385 = (_1380 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1380);
        float _1393 = (dot(vec3(_575, _576, _577), vec3(_1385 * _1377, _1385 * _1378, _1385 * _1379)) + 1.0) * 0.5;
        float _3854 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1402 = sqrt(((_1378 * _1378) + (_1377 * _1377)) + (_1379 * _1379)) / (_1292 + 9.9999997473787516355514526367188e-06);
        float _3865 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1403 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
        float _1404 = _1403 * 2.0;
        float _1408 = (1.0 - _1403) / (_1403 + 1.0);
        float _3876 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1409 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
        float _1418 = ((((1.0 - _1409) * (_1404 + 2.0)) * exp2(log2(isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0))) * (_1404 + 1.0))) + _1409) * _1292;
        _1426 = _1259;
        _1427 = _1258;
        _1428 = _1257;
        _1429 = _1269;
        _1430 = _1268;
        _1431 = _1267;
        _1432 = _1279;
        _1433 = _1278;
        _1434 = _1277;
        _1435 = _1292;
        _1436 = _1291;
        _1437 = _1290;
        _1438 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0)));
        _1439 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0)));
        _1440 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0)));
    }
    else
    {
        _1426 = _1118;
        _1427 = _1118;
        _1428 = _1118;
        _1429 = _1118;
        _1430 = _1118;
        _1431 = _1118;
        _1432 = _1118;
        _1433 = _1118;
        _1434 = _1118;
        _1435 = _1118;
        _1436 = _1118;
        _1437 = _1118;
        _1438 = 0.0;
        _1439 = 0.0;
        _1440 = 0.0;
    }
    float _1450 = (cbModelParam._m0[1u].x * (_1438 - _1130)) + _1130;
    float _1451 = (cbModelParam._m0[1u].x * (_1439 - _1131)) + _1131;
    float _1452 = (cbModelParam._m0[1u].x * (_1440 - _1132)) + _1132;
    float _1473 = fma(_1452, cbSceneParam._m0[89u].z, fma(_1451, cbSceneParam._m0[89u].y, _1450 * cbSceneParam._m0[89u].x));
    float _1476 = fma(_1452, cbSceneParam._m0[90u].z, fma(_1451, cbSceneParam._m0[90u].y, _1450 * cbSceneParam._m0[90u].x));
    float _1479 = fma(_1452, cbSceneParam._m0[91u].z, fma(_1451, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1450));
    float _1494 = _752 * 0.5;
    float _1495 = _753 * 0.5;
    float _1496 = _754 * 0.5;
    float _1497 = dot(vec4(_1494, _1495, _1496, 1.0), vec4(_1428, _1431, _1434, _1437));
    float _1500 = dot(vec4(_1494, _1495, _1496, 1.0), vec4(_1427, _1430, _1433, _1436));
    float _1503 = dot(vec4(_1494, _1495, _1496, 1.0), vec4(_1426, _1429, _1432, _1435));
    float _1537;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1510 = dot(vec4(_1494, _1495, _1496, 1.0), vec4(_1117, _1121, _1124, _1127));
        float _1514 = dot(vec4(_1494, _1495, _1496, 1.0), vec4(_1119, _1122, _1125, _1128));
        float _1518 = dot(vec4(_1494, _1495, _1496, 1.0), vec4(_1120, _1123, _1126, _1129));
        float _1525 = dot(vec4(cbModelParam._m0[39u]), vec4(_1494, _1495, _1496, 1.0));
        _1537 = dot(vec3(isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0)), isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0)), isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1525) ? 0.0 : (isnan(0.0) ? _1525 : max(0.0, _1525))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1537 = 1.0;
    }
    float _1548;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1539 = dot(vec4(cbModelParam._m0[40u]), vec4(_1494, _1495, _1496, 1.0));
        _1548 = dot(vec3(isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0)), isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0)), isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1539) ? 0.0 : (isnan(0.0) ? _1539 : max(0.0, _1539))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1548 = 1.0;
    }
    float _1552 = (_1548 * cbModelParam._m0[1u].x) + (_1537 * (1.0 - cbModelParam._m0[1u].x));
    float _1562 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _578);
    float _1563 = isnan(_1562) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1562 : min(cbModelParam._m0[25u].z, _1562));
    float _1643;
    float _1645;
    float _1647;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1610 = fma(_816, cbModelParam._m0[13u].z, fma(_812, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _808)) + cbModelParam._m0[13u].w;
        float _1614 = fma(_816, cbModelParam._m0[14u].z, fma(_812, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _808)) + cbModelParam._m0[14u].w;
        float _1618 = fma(_816, cbModelParam._m0[15u].z, fma(_812, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _808)) + cbModelParam._m0[15u].w;
        float _1621 = fma(_754, cbModelParam._m0[13u].z, fma(_753, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _752));
        float _1624 = fma(_754, cbModelParam._m0[14u].z, fma(_753, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _752));
        float _1627 = fma(_754, cbModelParam._m0[15u].z, fma(_753, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _752));
        float _1655;
        if (_1621 > 0.0)
        {
            _1655 = abs((1.0 - _1610) / _1621);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1621 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1610 + 1.0) / _1621);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1655 = frontier_phi_14_12_ladder;
        }
        float _1879;
        if (_1624 > 0.0)
        {
            _1879 = abs((1.0 - _1614) / _1624);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1624 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1614 + 1.0) / _1624);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1879 = frontier_phi_23_19_ladder;
        }
        float _2136;
        if (_1627 > 0.0)
        {
            _2136 = abs((1.0 - _1618) / _1627);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1627 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1618 + 1.0) / _1627);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2136 = frontier_phi_35_30_ladder;
        }
        float _2138 = isnan(_1879) ? _1655 : (isnan(_1655) ? _1879 : min(_1655, _1879));
        float _2139 = isnan(_2136) ? _2138 : (isnan(_2138) ? _2136 : min(_2138, _2136));
        float _2143 = (_2139 * _1621) + _1610;
        float _2144 = (_2139 * _1624) + _1614;
        float _2145 = (_2139 * _1627) + _1618;
        float _2146 = _2139 * 9.9999997473787516355514526367188e-05;
        float _2148 = (-1.0) - _2146;
        float _2150 = _2146 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2145 > _2150) || ((_2145 < _2148) || ((_2144 > _2150) || ((_2144 < _2148) || ((_2143 < _2148) || (_2143 > _2150))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2273 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2145, cbModelParam._m0[9u].z, fma(_2144, cbModelParam._m0[9u].y, _2143 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2145, cbModelParam._m0[10u].z, fma(_2144, cbModelParam._m0[10u].y, _2143 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2145, cbModelParam._m0[11u].z, fma(_2144, cbModelParam._m0[11u].y, _2143 * cbModelParam._m0[11u].x))), _1563);
            frontier_phi_13_35_ladder = _2273.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2273.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2273.x * cbModelParam._m0[1u].y;
        }
        _1643 = frontier_phi_13_35_ladder_2;
        _1645 = frontier_phi_13_35_ladder_1;
        _1647 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1631 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_752, _753, _754), _1563);
        _1643 = _1631.x * cbModelParam._m0[1u].y;
        _1645 = _1631.y * cbModelParam._m0[1u].y;
        _1647 = _1631.z * cbModelParam._m0[1u].y;
    }
    float _1651 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _578);
    float _1652 = isnan(_1651) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1651 : min(cbModelParam._m0[25u].w, _1651));
    float _1741;
    float _1743;
    float _1745;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1705 = fma(_816, cbModelParam._m0[21u].z, fma(_812, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _808)) + cbModelParam._m0[21u].w;
        float _1709 = fma(_816, cbModelParam._m0[22u].z, fma(_812, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _808)) + cbModelParam._m0[22u].w;
        float _1713 = fma(_816, cbModelParam._m0[23u].z, fma(_812, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _808)) + cbModelParam._m0[23u].w;
        float _1716 = fma(_754, cbModelParam._m0[21u].z, fma(_753, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _752));
        float _1719 = fma(_754, cbModelParam._m0[22u].z, fma(_753, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _752));
        float _1722 = fma(_754, cbModelParam._m0[23u].z, fma(_753, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _752));
        float _1884;
        if (_1716 > 0.0)
        {
            _1884 = abs((1.0 - _1705) / _1716);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1716 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1705 + 1.0) / _1716);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1884 = frontier_phi_25_21_ladder;
        }
        float _2163;
        if (_1719 > 0.0)
        {
            _2163 = abs((1.0 - _1709) / _1719);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1719 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1709 + 1.0) / _1719);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2163 = frontier_phi_37_32_ladder;
        }
        float _2376;
        if (_1722 > 0.0)
        {
            _2376 = abs((1.0 - _1713) / _1722);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1722 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1713 + 1.0) / _1722);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2376 = frontier_phi_46_43_ladder;
        }
        float _2378 = isnan(_2163) ? _1884 : (isnan(_1884) ? _2163 : min(_1884, _2163));
        float _2379 = isnan(_2376) ? _2378 : (isnan(_2378) ? _2376 : min(_2378, _2376));
        float _2383 = (_2379 * _1716) + _1705;
        float _2384 = (_2379 * _1719) + _1709;
        float _2385 = (_2379 * _1722) + _1713;
        float _2386 = _2379 * 9.9999997473787516355514526367188e-05;
        float _2387 = (-1.0) - _2386;
        float _2389 = _2386 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2385 > _2389) || ((_2385 < _2387) || ((_2384 > _2389) || ((_2384 < _2387) || ((_2383 < _2387) || (_2383 > _2389))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2584 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2385, cbModelParam._m0[17u].z, fma(_2384, cbModelParam._m0[17u].y, _2383 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2385, cbModelParam._m0[18u].z, fma(_2384, cbModelParam._m0[18u].y, _2383 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2385, cbModelParam._m0[19u].z, fma(_2384, cbModelParam._m0[19u].y, _2383 * cbModelParam._m0[19u].x))), _1652);
            frontier_phi_22_46_ladder = _2584.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2584.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2584.x * cbModelParam._m0[1u].z;
        }
        _1741 = frontier_phi_22_46_ladder_2;
        _1743 = frontier_phi_22_46_ladder_1;
        _1745 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1725 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_752, _753, _754), _1652);
        _1741 = _1725.x * cbModelParam._m0[1u].z;
        _1743 = _1725.y * cbModelParam._m0[1u].z;
        _1745 = _1725.z * cbModelParam._m0[1u].z;
    }
    float _1758 = (((_779 * _728) + _780) * _744) * ((cbModelParam._m0[1u].w * (_1741 - _1643)) + _1643);
    float _1760 = (((_779 * _730) + _780) * _744) * ((cbModelParam._m0[1u].w * (_1743 - _1645)) + _1645);
    float _1762 = (((_779 * _731) + _780) * _744) * ((cbModelParam._m0[1u].w * (_1745 - _1647)) + _1647);
    float _1765 = fma(_1762, cbSceneParam._m0[89u].z, fma(_1760, cbSceneParam._m0[89u].y, _1758 * cbSceneParam._m0[89u].x));
    float _1768 = fma(_1762, cbSceneParam._m0[90u].z, fma(_1760, cbSceneParam._m0[90u].y, _1758 * cbSceneParam._m0[90u].x));
    float _1771 = fma(_1762, cbSceneParam._m0[91u].z, fma(_1760, cbSceneParam._m0[91u].y, _1758 * cbSceneParam._m0[91u].x));
    vec4 _1779 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_663, _664));
    float _1781 = _1779.w;
    float _1793 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1781);
    float _1794 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1781);
    float _1795 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1781);
    uvec4 _1799 = floatBitsToUint(cbInstanceData._m0[_254 + 5u]);
    uint _1801 = _1799.x * 14u;
    uint _1802 = _1801 + 13u;
    float _1809 = _744 + (-1.0);
    float _1814 = (cbLight._m0[_1802].x * _1809) + 1.0;
    float _1815 = (cbLight._m0[_1802].y * _1809) + 1.0;
    float _1816 = (cbLight._m0[_1802].z * _1809) + 1.0;
    float _1817 = (cbLight._m0[_1802].w * _1809) + 1.0;
    uint _1818 = _1801 + 5u;
    float _1824 = isnan(1.0) ? _1815 : (isnan(_1815) ? 1.0 : min(_1815, 1.0));
    uint _1828 = _1801 + 4u;
    float _1838 = isnan(1.0) ? _1814 : (isnan(_1814) ? 1.0 : min(_1814, 1.0));
    uint _1842 = _1801 | 1u;
    float _1853 = dot(vec3(cbLight._m0[_1801].xyz), vec3(_575, _576, _577));
    float _1856 = dot(vec3(cbLight._m0[_1842].xyz), vec3(_575, _576, _577));
    float _4012 = isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0));
    float _4023 = isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0));
    float _1861 = (isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0))) * 0.3183098733425140380859375;
    float _1863 = (isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0))) * 0.3183098733425140380859375;
    float _1870 = ((cbLight._m0[_1818].x * _1824) * _1863) + (((cbLight._m0[_1828].x * _1793) * _1838) * _1861);
    float _1871 = ((_1824 * cbLight._m0[_1818].y) * _1863) + (((cbLight._m0[_1828].y * _1794) * _1838) * _1861);
    float _1872 = ((_1824 * cbLight._m0[_1818].z) * _1863) + (((cbLight._m0[_1828].z * _1795) * _1838) * _1861);
    uvec4 _1876 = floatBitsToUint(cbLight._m0[_1801 + 12u]);
    bool _1878 = _1876.x == 0u;
    float _1889;
    float _1891;
    float _1893;
    if (_1878)
    {
        _1889 = _1870;
        _1891 = _1871;
        _1893 = _1872;
    }
    else
    {
        uint _1897 = _1801 + 6u;
        float _1913 = (dot(vec3(cbLight._m0[_1801 + 2u].xyz), vec3(_575, _576, _577)) * 0.5) + 0.5;
        float _1914 = _1913 * _1913;
        float _4034 = isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0));
        float _1915 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
        float _1916 = isnan(1.0) ? _1816 : (isnan(_1816) ? 1.0 : min(_1816, 1.0));
        _1889 = (((cbLight._m0[_1897].x * 0.3183098733425140380859375) * _1915) * _1916) + _1870;
        _1891 = (((cbLight._m0[_1897].y * 0.3183098733425140380859375) * _1915) * _1916) + _1871;
        _1893 = (((cbLight._m0[_1897].z * 0.3183098733425140380859375) * _1915) * _1916) + _1872;
    }
    bool _1896 = _1876.y == 0u;
    float _1934;
    float _1936;
    float _1938;
    if (_1896)
    {
        _1934 = _1889;
        _1936 = _1891;
        _1938 = _1893;
    }
    else
    {
        uint _2107 = _1801 + 7u;
        float _2123 = (dot(vec3(cbLight._m0[_1801 + 3u].xyz), vec3(_575, _576, _577)) * 0.5) + 0.5;
        float _2124 = _2123 * _2123;
        float _4050 = isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0));
        float _2125 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
        float _2126 = isnan(1.0) ? _1817 : (isnan(_1817) ? 1.0 : min(_1817, 1.0));
        _1934 = (((cbLight._m0[_2107].x * 0.3183098733425140380859375) * _2125) * _2126) + _1889;
        _1936 = (((cbLight._m0[_2107].y * 0.3183098733425140380859375) * _2125) * _2126) + _1891;
        _1938 = (((cbLight._m0[_2107].z * 0.3183098733425140380859375) * _2125) * _2126) + _1893;
    }
    uint _1941 = _1801 + 8u;
    float _1954 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1801].w)) * _578) * 0.949999988079071044921875);
    float _1955 = _1954 * _1954;
    float _1956 = cbLight._m0[_1801].x + _655;
    float _1957 = cbLight._m0[_1801].y + _656;
    float _1958 = cbLight._m0[_1801].z + _657;
    float _1962 = inversesqrt(dot(vec3(_1956, _1957, _1958), vec3(_1956, _1957, _1958)));
    float _1963 = _1962 * _1956;
    float _1964 = _1962 * _1957;
    float _1965 = _1962 * _1958;
    float _1966 = dot(vec3(_575, _576, _577), vec3(cbLight._m0[_1801].xyz));
    float _4066 = isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0));
    float _1969 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
    float _4077 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _1970 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
    float _1971 = dot(vec3(_575, _576, _577), vec3(_1963, _1964, _1965));
    float _4088 = isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0));
    float _1974 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
    float _1975 = dot(vec3(cbLight._m0[_1801].xyz), vec3(_1963, _1964, _1965));
    float _4099 = isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0));
    float _1979 = _1955 * _1955;
    float _1983 = ((_1974 * _1974) * (_1979 + (-1.0))) + 1.0;
    float _1991 = exp2(log2(1.0 - (isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0)))) * 5.0);
    float _1992 = 0.959999978542327880859375 - _725;
    float _1994 = 0.959999978542327880859375 - _726;
    float _1995 = 0.959999978542327880859375 - _727;
    float _2002 = 1.0 - _1955;
    float _2013 = (0.5 / (((_1970 * ((_1969 * _2002) + _1955)) + 9.9999999392252902907785028219223e-09) + (((_1970 * _2002) + _1955) * _1969))) * _1969;
    float _4110 = isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0));
    float _2015 = (isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0))) * (_1979 / ((_1983 * _1983) * 3.141590118408203125));
    uint _2029 = _1801 + 9u;
    float _2040 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1842].w)) * _578) * 0.949999988079071044921875);
    float _2041 = _2040 * _2040;
    float _2042 = cbLight._m0[_1842].x + _655;
    float _2043 = cbLight._m0[_1842].y + _656;
    float _2044 = cbLight._m0[_1842].z + _657;
    float _2048 = inversesqrt(dot(vec3(_2042, _2043, _2044), vec3(_2042, _2043, _2044)));
    float _2049 = _2048 * _2042;
    float _2050 = _2048 * _2043;
    float _2051 = _2048 * _2044;
    float _2052 = dot(vec3(_575, _576, _577), vec3(cbLight._m0[_1842].xyz));
    float _4121 = isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0));
    float _2055 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
    float _2056 = dot(vec3(_575, _576, _577), vec3(_2049, _2050, _2051));
    float _4132 = isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0));
    float _2059 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
    float _2060 = dot(vec3(cbLight._m0[_1842].xyz), vec3(_2049, _2050, _2051));
    float _4143 = isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0));
    float _2064 = _2041 * _2041;
    float _2068 = ((_2059 * _2059) * (_2064 + (-1.0))) + 1.0;
    float _2075 = exp2(log2(1.0 - (isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0)))) * 5.0);
    float _2082 = 1.0 - _2041;
    float _2092 = (0.5 / (((_1970 * ((_2055 * _2082) + _2041)) + 9.9999999392252902907785028219223e-09) + (((_1970 * _2082) + _2041) * _2055))) * _2055;
    float _4154 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
    float _2094 = (isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0))) * (_2064 / ((_2068 * _2068) * 3.141590118408203125));
    float _2104 = (((((_2075 * _1992) + _728) * cbLight._m0[_2029].x) * _2094) * _1824) + ((((cbLight._m0[_1941].x * _1793) * ((_1991 * _1992) + _728)) * _2015) * _1838);
    float _2105 = (((((_2075 * _1994) + _730) * cbLight._m0[_2029].y) * _2094) * _1824) + ((((cbLight._m0[_1941].y * _1794) * ((_1991 * _1994) + _730)) * _2015) * _1838);
    float _2106 = (((((_2075 * _1995) + _731) * cbLight._m0[_2029].z) * _2094) * _1824) + ((((cbLight._m0[_1941].z * _1795) * ((_1991 * _1995) + _731)) * _2015) * _1838);
    float _2168;
    float _2170;
    float _2172;
    if (_1878)
    {
        _2168 = _2104;
        _2170 = _2105;
        _2172 = _2106;
    }
    else
    {
        uint _2174 = _1801 + 2u;
        uint _2178 = _1801 + 10u;
        float _2192 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2174].w)) * _578) * 0.949999988079071044921875);
        float _2193 = _2192 * _2192;
        float _2194 = cbLight._m0[_2174].x + _655;
        float _2195 = cbLight._m0[_2174].y + _656;
        float _2196 = cbLight._m0[_2174].z + _657;
        float _2200 = inversesqrt(dot(vec3(_2194, _2195, _2196), vec3(_2194, _2195, _2196)));
        float _2201 = _2200 * _2194;
        float _2202 = _2200 * _2195;
        float _2203 = _2200 * _2196;
        float _2204 = dot(vec3(_575, _576, _577), vec3(cbLight._m0[_2174].xyz));
        float _4165 = isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0));
        float _2207 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
        float _2208 = dot(vec3(_575, _576, _577), vec3(_2201, _2202, _2203));
        float _4176 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
        float _2211 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
        float _2212 = dot(vec3(cbLight._m0[_2174].xyz), vec3(_2201, _2202, _2203));
        float _4187 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
        float _2216 = _2193 * _2193;
        float _2220 = ((_2211 * _2211) * (_2216 + (-1.0))) + 1.0;
        float _2227 = exp2(log2(1.0 - (isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0)))) * 5.0);
        float _2234 = 1.0 - _2193;
        float _2244 = (0.5 / (((_1970 * ((_2207 * _2234) + _2193)) + 9.9999999392252902907785028219223e-09) + (((_1970 * _2234) + _2193) * _2207))) * _2207;
        float _4198 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
        float _2246 = (isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0))) * (_2216 / ((_2220 * _2220) * 3.141590118408203125));
        float _2247 = isnan(1.0) ? _1816 : (isnan(_1816) ? 1.0 : min(_1816, 1.0));
        _2168 = (((((_2227 * _1992) + _728) * cbLight._m0[_2178].x) * _2246) * _2247) + _2104;
        _2170 = (((((_2227 * _1994) + _730) * cbLight._m0[_2178].y) * _2246) * _2247) + _2105;
        _2172 = (((((_2227 * _1995) + _731) * cbLight._m0[_2178].z) * _2246) * _2247) + _2106;
    }
    float _2282;
    float _2284;
    float _2286;
    if (_1896)
    {
        _2282 = _2168;
        _2284 = _2170;
        _2286 = _2172;
    }
    else
    {
        uint _2293 = _1801 + 3u;
        uint _2297 = _1801 + 11u;
        float _2311 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2293].w)) * _578) * 0.949999988079071044921875);
        float _2312 = _2311 * _2311;
        float _2313 = cbLight._m0[_2293].x + _655;
        float _2314 = cbLight._m0[_2293].y + _656;
        float _2315 = cbLight._m0[_2293].z + _657;
        float _2319 = inversesqrt(dot(vec3(_2313, _2314, _2315), vec3(_2313, _2314, _2315)));
        float _2320 = _2319 * _2313;
        float _2321 = _2319 * _2314;
        float _2322 = _2319 * _2315;
        float _2323 = dot(vec3(_575, _576, _577), vec3(cbLight._m0[_2293].xyz));
        float _4214 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
        float _2326 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
        float _2327 = dot(vec3(_575, _576, _577), vec3(_2320, _2321, _2322));
        float _4225 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0));
        float _2330 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
        float _2331 = dot(vec3(cbLight._m0[_2293].xyz), vec3(_2320, _2321, _2322));
        float _4236 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
        float _2335 = _2312 * _2312;
        float _2339 = ((_2330 * _2330) * (_2335 + (-1.0))) + 1.0;
        float _2346 = exp2(log2(1.0 - (isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0)))) * 5.0);
        float _2353 = 1.0 - _2312;
        float _2363 = (0.5 / (((_1970 * ((_2326 * _2353) + _2312)) + 9.9999999392252902907785028219223e-09) + (((_1970 * _2353) + _2312) * _2326))) * _2326;
        float _4247 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
        float _2365 = (isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0))) * (_2335 / ((_2339 * _2339) * 3.141590118408203125));
        float _2366 = isnan(1.0) ? _1817 : (isnan(_1817) ? 1.0 : min(_1817, 1.0));
        _2282 = (((((_2346 * _1992) + _728) * cbLight._m0[_2297].x) * _2365) * _2366) + _2168;
        _2284 = (((((_2346 * _1994) + _730) * cbLight._m0[_2297].y) * _2365) * _2366) + _2170;
        _2286 = (((((_2346 * _1995) + _731) * cbLight._m0[_2297].z) * _2365) * _2366) + _2172;
    }
    float _2501;
    float _2503;
    float _2505;
    float _2507;
    float _2509;
    float _2511;
    if (_1799.y == 0u)
    {
        float _2441 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2442 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2441;
        float _2443 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2441;
        float _2444 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2441;
        uvec4 _2456 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2457 = _2456.x;
        uint _2468 = uint((float(_2456.y) * floor(float(uint(cbSceneParam._m0[85u].y * _664) / _2457))) + floor(float(uint(cbSceneParam._m0[85u].x * _663) / _2457)));
        float _2478 = (log2(_2444 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2479 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0));
        uint _2482 = uint(isnan(14.0) ? _2479 : (isnan(_2479) ? 14.0 : min(_2479, 14.0)));
        uvec4 _2487 = texelFetch(g_lightClusterGridBuffer, int(((_2482 << 2u) + (_2468 << 6u)) >> 2u));
        uint _2488 = _2487.x;
        uint _2489 = _2456.z;
        float _2589;
        float _2591;
        float _2593;
        float _2595;
        float _2597;
        float _2599;
        if (((((1u << ((_2489 >> 4u) & 15u)) + 4294967295u) & _2488) == 0u) || ((_2489 & 240u) == 0u))
        {
            _2589 = 0.0;
            _2591 = 0.0;
            _2593 = 0.0;
            _2595 = 0.0;
            _2597 = 0.0;
            _2599 = 0.0;
        }
        else
        {
            float _2590;
            float _2592;
            float _2594;
            float _2596;
            float _2598;
            float _2600;
            float _2734 = 0.0;
            float _2735 = 0.0;
            float _2736 = 0.0;
            float _2737 = 0.0;
            float _2738 = 0.0;
            float _2739 = 0.0;
            uint _2740 = 0u;
            uint _2749;
            bool _2750;
            for (;;)
            {
                _2749 = texelFetch(g_lightClassification, int((((_2482 << 5u) + (_2468 << 9u)) + (_2740 << 2u)) >> 2u)).x;
                _2750 = _2749 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2750)
                {
                    frontier_phi_61_pred = _2734;
                    frontier_phi_61_pred_1 = _2739;
                    frontier_phi_61_pred_2 = _2738;
                    frontier_phi_61_pred_3 = _2737;
                    frontier_phi_61_pred_4 = _2736;
                    frontier_phi_61_pred_5 = _2735;
                }
                else
                {
                    float _2858;
                    float _2859;
                    float _2860;
                    float _2861;
                    float _2862;
                    float _2863;
                    uint _2864;
                    _2858 = _2734;
                    _2859 = _2735;
                    _2860 = _2736;
                    _2861 = _2737;
                    _2862 = _2738;
                    _2863 = _2739;
                    _2864 = _2749;
                    float _2790;
                    float _2791;
                    float _2792;
                    float _2793;
                    float _2794;
                    float _2795;
                    for (;;)
                    {
                        uint _2868 = uint(findLSB(_2864)) + (_2740 << 5u);
                        uint _2865 = (_2864 + 4294967295u) & _2864;
                        uint _2870 = _2868 * 48u;
                        vec4 _2884 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2870)).x, texelFetch(g_PointLightRenderingBuffer, int(_2870 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2870 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2870 + 3u)).x));
                        uint _2890 = (_2868 * 48u) + 4u;
                        vec4 _2903 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2890)).x, texelFetch(g_PointLightRenderingBuffer, int(_2890 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2890 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2890 + 3u)).x));
                        uint _2909 = (_2868 * 48u) + 8u;
                        vec3 _2920 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2909)).x, texelFetch(g_PointLightRenderingBuffer, int(_2909 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2909 + 2u)).x));
                        float _2924 = _2884.x - _2442;
                        float _2925 = _2884.y - _2443;
                        float _2926 = _2884.z - _2444;
                        float _2927 = dot(vec3(_2924, _2925, _2926), vec3(_2924, _2925, _2926));
                        float _2930 = inversesqrt(_2927);
                        float _2931 = _2930 * _2924;
                        float _2932 = _2930 * _2925;
                        float _2933 = _2930 * _2926;
                        float _2934 = dot(vec3(_685, _688, _691), vec3(_2931, _2932, _2933));
                        float _2939 = 1.0 - (_2927 * _2884.w);
                        float _4273 = isnan(0.0) ? _2939 : (isnan(_2939) ? 0.0 : max(_2939, 0.0));
                        float _2940 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
                        float _2941 = sqrt(_2927) * _2903.w;
                        float _2944 = 1.39999997615814208984375 / (_2941 + 1.39999997615814208984375);
                        float _2945 = _2944 * _2944;
                        float _2948 = ((1.0 - _2945) * _2934) + _2945;
                        float _2951 = _2941 * _2941;
                        float _2955 = ((isnan(0.0) ? _2948 : (isnan(_2948) ? 0.0 : max(_2948, 0.0))) * _2940) / ((_2951 * 0.699999988079071044921875) + 1.0);
                        float _2959 = (-0.0) - _2442;
                        float _2960 = (-0.0) - _2443;
                        float _2961 = (-0.0) - _2444;
                        float _2965 = inversesqrt(dot(vec3(_2959, _2960, _2961), vec3(_2959, _2960, _2961)));
                        float _2966 = _2965 * _2959;
                        float _2967 = _2965 * _2960;
                        float _2968 = _2965 * _2961;
                        float _2976 = exp2(log2(1.0 / ((_2951 * 3.5) + 5.0)) * 0.25);
                        float _2977 = 1.0 - _760;
                        float _2984 = sqrt(1.0 - ((1.0 - (_2977 * _2977)) * (1.0 - (_2976 * _2976))));
                        float _2985 = _2984 * _2984;
                        float _2986 = _2985 * _2985;
                        float _2987 = _2966 + _2931;
                        float _2988 = _2967 + _2932;
                        float _2989 = _2968 + _2933;
                        float _2993 = inversesqrt(dot(vec3(_2987, _2988, _2989), vec3(_2987, _2988, _2989)));
                        float _2997 = dot(vec3(_685, _688, _691), vec3(_2966, _2967, _2968));
                        float _4289 = isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : max(_2997, 0.0));
                        float _3000 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
                        float _3001 = dot(vec3(_685, _688, _691), vec3(_2993 * _2987, _2993 * _2988, _2993 * _2989));
                        float _4300 = isnan(0.0) ? _3001 : (isnan(_3001) ? 0.0 : max(_3001, 0.0));
                        float _3004 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
                        float _3008 = ((_3004 * _3004) * (_2986 + (-1.0))) + 1.0;
                        float _3009 = _2944 * _2985;
                        float _3010 = _3009 * _3009;
                        float _3013 = ((1.0 - _3010) * _2934) + _3010;
                        float _4311 = isnan(0.0) ? _3013 : (isnan(_3013) ? 0.0 : max(_3013, 0.0));
                        float _3014 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
                        float _3015 = 1.0 - _2985;
                        float _3025 = (0.5 / (((_3014 * ((_3000 * _3015) + _2985)) + 9.9999999392252902907785028219223e-09) + (((_3014 * _3015) + _2985) * _3000))) * _3014;
                        float _4322 = isnan(0.0) ? _3025 : (isnan(_3025) ? 0.0 : max(_3025, 0.0));
                        float _3036 = (((_2986 * 3.1415927410125732421875) * (isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0)))) / ((_3008 * _3008) * ((_2951 * 2.1991131305694580078125) + 3.141590118408203125))) * _2940;
                        _2793 = (_2955 * _2903.x) + _2861;
                        _2794 = (_2955 * _2903.y) + _2862;
                        _2795 = (_2955 * _2903.z) + _2863;
                        _2790 = (_3036 * _2920.x) + _2858;
                        _2791 = (_3036 * _2920.y) + _2859;
                        _2792 = (_3036 * _2920.z) + _2860;
                        if (_2865 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2858 = _2790;
                            _2859 = _2791;
                            _2860 = _2792;
                            _2861 = _2793;
                            _2862 = _2794;
                            _2863 = _2795;
                            _2864 = _2865;
                        }
                    }
                    frontier_phi_61_pred = _2790;
                    frontier_phi_61_pred_1 = _2795;
                    frontier_phi_61_pred_2 = _2794;
                    frontier_phi_61_pred_3 = _2793;
                    frontier_phi_61_pred_4 = _2792;
                    frontier_phi_61_pred_5 = _2791;
                }
                _2590 = frontier_phi_61_pred;
                _2600 = frontier_phi_61_pred_1;
                _2598 = frontier_phi_61_pred_2;
                _2596 = frontier_phi_61_pred_3;
                _2594 = frontier_phi_61_pred_4;
                _2592 = frontier_phi_61_pred_5;
                uint _2741 = _2740 + 1u;
                if (_2741 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2734 = _2590;
                    _2735 = _2592;
                    _2736 = _2594;
                    _2737 = _2596;
                    _2738 = _2598;
                    _2739 = _2600;
                    _2740 = _2741;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2589 = _2590;
            _2591 = _2592;
            _2593 = _2594;
            _2595 = _2596;
            _2597 = _2598;
            _2599 = _2600;
        }
        uvec4 _2603 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2604 = _2603.z;
        uint _2606 = (_2604 >> 8u) & 15u;
        float _2702;
        float _2704;
        float _2706;
        float _2708;
        float _2710;
        float _2712;
        if (((4294967295u << _2606) & _2488) == 0u)
        {
            _2702 = _2589;
            _2704 = _2591;
            _2706 = _2593;
            _2708 = _2595;
            _2710 = _2597;
            _2712 = _2599;
        }
        else
        {
            float _2727 = inversesqrt(dot(vec3(_2442, _2443, _2444), vec3(_2442, _2443, _2444)));
            float _2728 = _2727 * _2442;
            float _2729 = _2727 * _2443;
            float _2730 = _2727 * _2444;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2606 < ((_2604 >> 12u) & 15u))
            {
                float _2703;
                float _2705;
                float _2707;
                float _2709;
                float _2711;
                float _2713;
                float _2841 = _2589;
                float _2842 = _2591;
                float _2843 = _2593;
                float _2844 = _2595;
                float _2845 = _2597;
                float _2846 = _2599;
                uint _2847 = _2606;
                uint _2856;
                bool _2857;
                for (;;)
                {
                    _2856 = texelFetch(g_lightClassification, int((((_2482 << 5u) + (_2468 << 9u)) + (_2847 << 2u)) >> 2u)).x;
                    _2857 = _2856 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2857)
                    {
                        frontier_phi_67_pred = _2844;
                        frontier_phi_67_pred_1 = _2845;
                        frontier_phi_67_pred_2 = _2846;
                        frontier_phi_67_pred_3 = _2843;
                        frontier_phi_67_pred_4 = _2842;
                        frontier_phi_67_pred_5 = _2841;
                    }
                    else
                    {
                        float _3041;
                        float _3042;
                        float _3043;
                        float _3044;
                        float _3045;
                        float _3046;
                        float _3334;
                        float _3335;
                        float _3336;
                        float _3337;
                        float _3338;
                        float _3339;
                        float _3054 = _2841;
                        float _3055 = _2842;
                        float _3056 = _2843;
                        float _3057 = _2844;
                        float _3058 = _2845;
                        float _3059 = _2846;
                        uint _3060 = _2856;
                        uint _3061;
                        vec4 _3086;
                        float _3087;
                        vec4 _3102;
                        vec3 _3114;
                        vec4 _3129;
                        vec4 _3144;
                        float _3190;
                        bool _3191;
                        for (;;)
                        {
                            uint _3071 = ((_2847 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3060));
                            _3061 = (_3060 + 4294967295u) & _3060;
                            uint _3073 = _3071 * 40u;
                            _3086 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3073)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3073 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3073 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3073 + 3u)).x));
                            _3087 = _3086.w;
                            uint _3089 = (_3071 * 40u) + 4u;
                            _3102 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3089)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3089 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3089 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3089 + 3u)).x));
                            uint _3104 = (_3071 * 40u) + 8u;
                            _3114 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3104)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 2u)).x));
                            uint _3116 = (_3071 * 40u) + 16u;
                            _3129 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3116)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 3u)).x));
                            uint _3131 = (_3071 * 40u) + 20u;
                            _3144 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3131)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 3u)).x));
                            uint _3146 = (_3071 * 40u) + 24u;
                            vec4 _3159 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3146)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3146 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3146 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3146 + 3u)).x));
                            uint _3165 = (_3071 * 40u) + 28u;
                            vec4 _3178 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3165)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 3u)).x));
                            _3190 = fma(_2444, _3178.z, fma(_2443, _3178.y, _3178.x * _2442)) + _3178.w;
                            _3191 = !((fma(_2444, _3159.z, fma(_2443, _3159.y, _3159.x * _2442)) + _3159.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3191)
                            {
                                float _3218 = _3086.x - _2442;
                                float _3219 = _3086.y - _2443;
                                float _3220 = _3086.z - _2444;
                                float _3221 = dot(vec3(_3218, _3219, _3220), vec3(_3218, _3219, _3220));
                                float _3224 = inversesqrt(_3221);
                                float _3225 = _3224 * _3218;
                                float _3226 = _3224 * _3219;
                                float _3227 = _3224 * _3220;
                                float _3231 = 1.0 - (_3221 / (_3087 * _3087));
                                float _4333 = isnan(0.0) ? _3231 : (isnan(_3231) ? 0.0 : max(_3231, 0.0));
                                float _3232 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
                                float _3236 = sqrt(_3221) * _3102.w;
                                float _3238 = 1.39999997615814208984375 / (_3236 + 1.39999997615814208984375);
                                float _3239 = _3238 * _3238;
                                float _3242 = ((1.0 - _3239) * dot(vec3(_3225, _3226, _3227), vec3(_685, _688, _691))) + _3239;
                                float _3245 = _3236 * _3236;
                                float _3249 = (fma(_2444, _3129.z, fma(_2443, _3129.y, _3129.x * _2442)) + _3129.w) / _3190;
                                float _3250 = (fma(_2444, _3144.z, fma(_2443, _3144.y, _3144.x * _2442)) + _3144.w) / _3190;
                                float _3254 = 1.0 - dot(vec2(_3249, _3250), vec2(_3249, _3250));
                                float _4349 = isnan(0.0) ? _3254 : (isnan(_3254) ? 0.0 : max(_3254, 0.0));
                                float _3255 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
                                float _3256 = _3255 * (((isnan(0.0) ? _3242 : (isnan(_3242) ? 0.0 : max(_3242, 0.0))) * _3232) / ((_3245 * 0.699999988079071044921875) + 1.0));
                                float _3268 = exp2(log2(1.0 / ((_3245 * 3.5) + 5.0)) * 0.25);
                                float _3269 = 1.0 - _760;
                                float _3276 = sqrt(1.0 - ((1.0 - (_3269 * _3269)) * (1.0 - (_3268 * _3268))));
                                float _3277 = _3276 * _3276;
                                float _3278 = _3277 * _3277;
                                float _3279 = _3225 - _2728;
                                float _3280 = _3226 - _2729;
                                float _3281 = _3227 - _2730;
                                float _3285 = inversesqrt(dot(vec3(_3279, _3280, _3281), vec3(_3279, _3280, _3281)));
                                float _3289 = dot(vec3(_685, _688, _691), vec3((-0.0) - _2728, (-0.0) - _2729, (-0.0) - _2730));
                                float _4360 = isnan(0.0) ? _3289 : (isnan(_3289) ? 0.0 : max(_3289, 0.0));
                                float _3292 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
                                float _3293 = dot(vec3(_685, _688, _691), vec3(_3285 * _3279, _3285 * _3280, _3285 * _3281));
                                float _4371 = isnan(0.0) ? _3293 : (isnan(_3293) ? 0.0 : max(_3293, 0.0));
                                float _3296 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
                                float _3300 = ((_3296 * _3296) * (_3278 + (-1.0))) + 1.0;
                                float _3301 = _3238 * _3277;
                                float _3302 = _3301 * _3301;
                                float _3308 = ((1.0 - _3302) * dot(vec3(_685, _688, _691), vec3(_3225, _3226, _3227))) + _3302;
                                float _4382 = isnan(0.0) ? _3308 : (isnan(_3308) ? 0.0 : max(_3308, 0.0));
                                float _3309 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
                                float _3310 = 1.0 - _3277;
                                float _3320 = (0.5 / (((_3309 * ((_3292 * _3310) + _3277)) + 9.9999999392252902907785028219223e-09) + (((_3309 * _3310) + _3277) * _3292))) * _3309;
                                float _4393 = isnan(0.0) ? _3320 : (isnan(_3320) ? 0.0 : max(_3320, 0.0));
                                float _3330 = (_3255 * _3232) * (((_3278 * 3.1415927410125732421875) * (isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0)))) / ((_3300 * _3300) * ((_3245 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3330 * _3114.x;
                                frontier_phi_73_pred_1 = _3330 * _3114.y;
                                frontier_phi_73_pred_2 = _3256 * _3102.z;
                                frontier_phi_73_pred_3 = _3256 * _3102.y;
                                frontier_phi_73_pred_4 = _3256 * _3102.x;
                                frontier_phi_73_pred_5 = _3330 * _3114.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3334 = frontier_phi_73_pred;
                            _3335 = frontier_phi_73_pred_1;
                            _3339 = frontier_phi_73_pred_2;
                            _3338 = frontier_phi_73_pred_3;
                            _3337 = frontier_phi_73_pred_4;
                            _3336 = frontier_phi_73_pred_5;
                            _3044 = _3337 + _3057;
                            _3045 = _3338 + _3058;
                            _3046 = _3339 + _3059;
                            _3041 = _3334 + _3054;
                            _3042 = _3335 + _3055;
                            _3043 = _3336 + _3056;
                            if (_3061 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3054 = _3041;
                                _3055 = _3042;
                                _3056 = _3043;
                                _3057 = _3044;
                                _3058 = _3045;
                                _3059 = _3046;
                                _3060 = _3061;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3044;
                        frontier_phi_67_pred_1 = _3045;
                        frontier_phi_67_pred_2 = _3046;
                        frontier_phi_67_pred_3 = _3043;
                        frontier_phi_67_pred_4 = _3042;
                        frontier_phi_67_pred_5 = _3041;
                    }
                    _2709 = frontier_phi_67_pred;
                    _2711 = frontier_phi_67_pred_1;
                    _2713 = frontier_phi_67_pred_2;
                    _2707 = frontier_phi_67_pred_3;
                    _2705 = frontier_phi_67_pred_4;
                    _2703 = frontier_phi_67_pred_5;
                    uint _2848 = _2847 + 1u;
                    if (_2848 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2841 = _2703;
                        _2842 = _2705;
                        _2843 = _2707;
                        _2844 = _2709;
                        _2845 = _2711;
                        _2846 = _2713;
                        _2847 = _2848;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2711;
                frontier_phi_55_56_ladder_1 = _2713;
                frontier_phi_55_56_ladder_2 = _2709;
                frontier_phi_55_56_ladder_3 = _2707;
                frontier_phi_55_56_ladder_4 = _2705;
                frontier_phi_55_56_ladder_5 = _2703;
            }
            else
            {
                frontier_phi_55_56_ladder = _2597;
                frontier_phi_55_56_ladder_1 = _2599;
                frontier_phi_55_56_ladder_2 = _2595;
                frontier_phi_55_56_ladder_3 = _2593;
                frontier_phi_55_56_ladder_4 = _2591;
                frontier_phi_55_56_ladder_5 = _2589;
            }
            _2702 = frontier_phi_55_56_ladder_5;
            _2704 = frontier_phi_55_56_ladder_4;
            _2706 = frontier_phi_55_56_ladder_3;
            _2708 = frontier_phi_55_56_ladder_2;
            _2710 = frontier_phi_55_56_ladder;
            _2712 = frontier_phi_55_56_ladder_1;
        }
        float _2717 = isnan(1.0) ? _744 : (isnan(_744) ? 1.0 : min(_744, 1.0));
        _2501 = (_2717 * _2708) + _1934;
        _2503 = (_2717 * _2710) + _1936;
        _2505 = (_2717 * _2712) + _1938;
        _2507 = ((_2702 * _728) * _2717) + _2282;
        _2509 = ((_2704 * _730) * _2717) + _2284;
        _2511 = ((_2706 * _731) * _2717) + _2286;
    }
    else
    {
        _2501 = _1934;
        _2503 = _1936;
        _2505 = _1938;
        _2507 = _2282;
        _2509 = _2284;
        _2511 = _2286;
    }
    float _4409 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
    float _4420 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
    float _4431 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
    uint _2531 = _254 + 6u;
    float _2539 = _663 / cbSceneParam._m0[86u].x;
    float _2540 = _664 / cbSceneParam._m0[86u].y;
    vec4 _2554 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2539, _2540, (log2((isnan(cbSceneParam._m0[77u].w) ? _597 : (isnan(_597) ? cbSceneParam._m0[77u].w : min(_597, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2556 = _2554.x;
    float _2557 = _2554.y;
    float _2558 = _2554.z;
    float _2559 = _2554.w;
    float _2652;
    float _2654;
    float _2656;
    float _2658;
    if (_597 > cbSceneParam._m0[78u].w)
    {
        float _2614 = isnan(_597) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _597 : min(cbSceneParam._m0[80u].w, _597));
        float _2615 = _2614 / _597;
        float _2626 = _2615 * _648;
        float _2627 = _649 * _2615;
        float _2628 = (-0.0) - _2627;
        float _2630 = _2615 * _650;
        float _2632 = (cbSceneParam._m0[77u].w * _2628) / _2614;
        float _2633 = _2632 + cbSceneParam._m0[79u].w;
        float _2634 = cbSceneParam._m0[79u].w - _2627;
        float _2640 = sqrt(((_2626 * _2626) + (_2627 * _2627)) + (_2630 * _2630));
        float _2643 = (1.0 - (cbSceneParam._m0[77u].w / _2614)) * _2640;
        float _2648 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2650 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2803;
        if (abs((_2628 - _2632) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2803 = ((((_2633 > 0.0) ? exp2(_2648 * _2633) : (2.0 - exp2(_2650 * _2633))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2643;
        }
        else
        {
            float _2763 = 1.0 / cbSceneParam._m0[80u].x;
            float _2764 = isnan(_2634) ? _2633 : (isnan(_2633) ? _2634 : max(_2633, _2634));
            float _2765 = isnan(_2634) ? _2633 : (isnan(_2633) ? _2634 : min(_2633, _2634));
            float _2774 = isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : min(_2764, 0.0));
            float _2775 = isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : min(_2765, 0.0));
            _2803 = ((abs(_2640 / _2628) * cbSceneParam._m0[80u].y) * ((((_2774 - _2775) * 2.0) - ((exp2(_2648 * (isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : max(_2764, 0.0)))) - exp2(_2648 * (isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : max(_2765, 0.0))))) * _2763)) - ((exp2(_2650 * _2774) - exp2(_2650 * _2775)) * _2763))) + (_2643 * cbSceneParam._m0[80u].z);
        }
        vec4 _2805 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2539, _2540, 1.0), 0.0);
        float _2814 = exp2((_2803 * (-1.44269502162933349609375)) * (1.0 - _2805.w));
        float _2815 = log2(_2814);
        float _2831 = log2(_2559);
        _2652 = (exp2(_2831 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2815 * cbSceneParam._m0[78u].x)) * _2805.x) / cbSceneParam._m0[78u].x)) + _2556;
        _2654 = (exp2(_2831 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2815 * cbSceneParam._m0[78u].y)) * _2805.y) / cbSceneParam._m0[78u].y)) + _2557;
        _2656 = (exp2(_2831 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2815 * cbSceneParam._m0[78u].z)) * _2805.z) / cbSceneParam._m0[78u].z)) + _2558;
        _2658 = _2814 * _2559;
    }
    else
    {
        _2652 = _2556;
        _2654 = _2557;
        _2656 = _2558;
        _2658 = _2559;
    }
    float _2670 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2671 = _2670 == 3.0;
    float _2672 = log2(_2658);
    float _2679 = exp2(_2672 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0))) * (_2501 + ((isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0))) * _744))) + ((_2507 + ((isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0))) * _1552)) * cbPerFrame._m0[3u].x));
    float _2680 = exp2(_2672 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0))) * (_2503 + ((isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0))) * _744))) + ((_2509 + ((isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0))) * _1552)) * cbPerFrame._m0[3u].x));
    float _2681 = exp2(_2672 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0))) * (_2505 + ((isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0))) * _744))) + ((_2511 + ((isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0))) * _1552)) * cbPerFrame._m0[3u].x));
    float _2690 = (_2670 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2690 * (_2671 ? _2679 : (_2679 + (cbSceneParam._m0[72u].w * _2652)));
    SV_Target.y = _2690 * (_2671 ? _2680 : (_2680 + (cbSceneParam._m0[72u].w * _2654)));
    SV_Target.z = _2690 * (_2671 ? _2681 : (_2681 + (cbSceneParam._m0[72u].w * _2656)));
    SV_Target.w = cbInstanceData._m0[_2531].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2531].w;
}


