#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 18) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_28;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1068;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _203 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _204 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _205 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _211 = inversesqrt(dot(vec3(_203, _204, _205), vec3(_203, _204, _205)));
    float _218 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _219 = _218 * NORMAL.x;
    float _220 = _218 * NORMAL.y;
    float _221 = _218 * NORMAL.z;
    float _225 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _249 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _255 = _249.x * cbMtdParam._m0[9u].x;
    float _256 = _249.y * cbMtdParam._m0[9u].y;
    float _257 = _249.z * cbMtdParam._m0[9u].z;
    vec4 _270 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _274 = _270.z;
    float _279 = (_270.x * 2.0) + (-1.0);
    float _281 = (_270.y * 2.0) + (-1.0);
    float _282 = dot(vec2(_279, _281), vec2(_279, _281));
    float _3398 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    float _288 = sqrt(1.0 - (isnan(1.0) ? _3398 : (isnan(_3398) ? 1.0 : min(_3398, 1.0))));
    uint _289 = uint(roundEven(NORMAL.w)) * 13u;
    uint _294 = _289 + 1u;
    uint _298 = _289 + 2u;
    float _307 = sqrt(((cbInstanceData._m0[_294].x * cbInstanceData._m0[_294].x) + (cbInstanceData._m0[_289].x * cbInstanceData._m0[_289].x)) + (cbInstanceData._m0[_298].x * cbInstanceData._m0[_298].x));
    float _308 = _307 * TEXCOORD.z;
    float _309 = _307 * TEXCOORD.w;
    vec4 _322 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _308) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _309) + cbTextureTilingScale._m0[19u].w));
    float _324 = _322.x;
    float _325 = 1.0 - _324;
    float _358 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_324 - _325) * cbMtdParam._m0[24u].w) + _325) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3409 = isnan(0.0) ? _358 : (isnan(_358) ? 0.0 : max(_358, 0.0));
    float _359 = isnan(1.0) ? _3409 : (isnan(_3409) ? 1.0 : min(_3409, 1.0));
    float _367 = ((((cbMtdParam._m0[10u].x - _255) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _359) + _255;
    float _368 = ((((cbMtdParam._m0[10u].y - _256) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _359) + _256;
    float _369 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _257)) * _359) + _257;
    vec4 _382 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _384 = _382.x;
    float _386 = _384 - (_384 * _359);
    float _390 = ((cbMtdParam._m0[23u].y - _274) * _359) + _274;
    vec4 _412 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _308) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _309) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _414 = _412.x;
    float _415 = _412.y;
    float _422 = dot(vec4(cbMtdParam._m0[29u].yzw, 0.0), vec4(_219, _220, _221, 0.0));
    vec4 _437 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_28, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * _308) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * _309) + cbTextureTilingScale._m0[18u].w));
    float _439 = _437.x;
    float _444 = fract(_437.w + cbPerFrame._m0[22u].x);
    float _446 = (1.0 - _444) * _439;
    float _451 = ((_444 + (-1.0)) + _439) * 9.0;
    float _453 = ((_439 + (-1.0)) + _444) * 9.0;
    float _454 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _455 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _469 = (_446 * ((_437.y * 2.0) + (-1.0))) * sin((isnan(3.0) ? _454 : (isnan(_454) ? 3.0 : min(_454, 3.0))) * 3.1415927410125732421875);
    float _471 = (_446 * ((_437.z * 2.0) + (-1.0))) * sin((isnan(3.0) ? _455 : (isnan(_455) ? 3.0 : min(_455, 3.0))) * 3.1415927410125732421875);
    float _475 = inversesqrt(dot(vec3(_469, _471, 1.0), vec3(_469, _471, 1.0)));
    float _491 = (((((0.5 - _414) + ((_469 * 0.5) * _475)) * _422) + _414) * 2.0) + (-1.0);
    float _492 = (((((0.5 - _415) + ((_475 * 0.5) * _471)) * _422) + _415) * 2.0) + (-1.0);
    float _493 = dot(vec2(_491, _492), vec2(_491, _492));
    float _3440 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _509 = ((((cbMtdParam._m0[22u].z * _279) - _279) + _491) * _359) + _279;
    float _510 = ((((cbMtdParam._m0[22u].z * _281) - _281) + _492) * _359) + _281;
    float _511 = (_359 * (sqrt(1.0 - (isnan(1.0) ? _3440 : (isnan(_3440) ? 1.0 : min(_3440, 1.0)))) - _288)) + _288;
    float _513 = cbMtdParam._m0[22u].x + _270.w;
    float _516 = fma(_511, _219, fma(_510, _225 * TANGENT.x, (_211 * _203) * _509));
    float _519 = fma(_511, _220, fma(_510, _225 * TANGENT.y, (_211 * _204) * _509));
    float _522 = fma(_511, _221, fma(_510, _225 * TANGENT.z, (_211 * _205) * _509));
    float _526 = inversesqrt(dot(vec3(_516, _519, _522), vec3(_516, _519, _522)));
    float _527 = _526 * _516;
    float _528 = _526 * _519;
    float _529 = _526 * _522;
    float _3451 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _530 = isnan(1.0) ? _3451 : (isnan(_3451) ? 1.0 : min(_3451, 1.0));
    float _3462 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _3473 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    float _3484 = isnan(0.0) ? _368 : (isnan(_368) ? 0.0 : max(_368, 0.0));
    float _3495 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _3506 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _535 = isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0));
    float _549 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _590 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _600 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _590);
    float _601 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _590);
    float _602 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _590);
    float _606 = inversesqrt(dot(vec3(_600, _601, _602), vec3(_600, _601, _602)));
    float _607 = _600 * _606;
    float _608 = _601 * _606;
    float _609 = _602 * _606;
    float _615 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _616 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _637 = fma(_529, cbSceneParam._m0[5u].z, fma(_528, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _527));
    float _640 = fma(_529, cbSceneParam._m0[6u].z, fma(_528, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _527));
    float _643 = fma(_529, cbSceneParam._m0[7u].z, fma(_528, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _527));
    uint _657 = (_289 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _663 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0)))) * cbInstanceData._m0[_657].x;
    float _664 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3484 : (isnan(_3484) ? 1.0 : min(_3484, 1.0)))) * cbInstanceData._m0[_657].y;
    float _665 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0)))) * cbInstanceData._m0[_657].z;
    float _3517 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _666 = isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0));
    float _3528 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _667 = isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0));
    float _3539 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _668 = isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0));
    float _669 = 1.0 - _535;
    float _670 = _666 * _669;
    float _671 = _667 * _669;
    float _672 = _668 * _669;
    float _677 = (_666 + (-0.039999999105930328369140625)) * _535;
    float _678 = (_667 + (-0.039999999105930328369140625)) * _535;
    float _679 = (_668 + (-0.039999999105930328369140625)) * _535;
    float _680 = _677 + 0.039999999105930328369140625;
    float _682 = _678 + 0.039999999105930328369140625;
    float _683 = _679 + 0.039999999105930328369140625;
    vec4 _692 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _615, cbSceneParam._m0[86u].y * _616));
    float _696 = ((isnan(1.0) ? _3462 : (isnan(_3462) ? 1.0 : min(_3462, 1.0))) * TEXCOORD_5.w) * _692.x;
    float _697 = dot(vec3(_527, _528, _529), vec3(_607, _608, _609));
    float _700 = _697 * 2.0;
    float _704 = (_700 * _527) - _607;
    float _705 = (_700 * _528) - _608;
    float _706 = (_700 * _529) - _609;
    float _710 = abs(dot(vec3(_607, _608, _609), vec3(_527, _528, _529)));
    float _3550 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
    float _712 = sqrt(_530);
    float _724 = exp2((_712 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_712 * 3.0));
    float _730 = (1.0 - _724) * ((_712 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _731 = _724 * _712;
    float _759 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _763 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _767 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1067;
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    float _1076;
    float _1077;
    float _1078;
    float _1079;
    float _1080;
    float _1081;
    float _1082;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _793 = fma(_767, cbModelParam._m0[26u].z, fma(_763, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _759));
        float _797 = fma(_767, cbModelParam._m0[27u].z, fma(_763, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _759));
        float _801 = fma(_767, cbModelParam._m0[28u].z, fma(_763, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _759));
        float _825 = _759 + _527;
        float _826 = _763 + _528;
        float _827 = _767 + _529;
        float _837 = fma(_827, cbModelParam._m0[26u].z, fma(_826, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _825)) - _793;
        float _838 = fma(_827, cbModelParam._m0[27u].z, fma(_826, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _825)) - _797;
        float _839 = fma(_827, cbModelParam._m0[28u].z, fma(_826, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _825)) - _801;
        float _843 = inversesqrt(dot(vec3(_837, _838, _839), vec3(_837, _838, _839)));
        float _856 = ((_843 * _837) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_793 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _857 = ((_843 * _838) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_797 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _858 = ((_843 * _839) / cbModelParam._m0[34u].z) + ((((((_801 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _861 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_856, _857, _858), 0.0);
        vec4 _868 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_856, _857, _858), 0.0);
        vec4 _875 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_856, _857, _858), 0.0);
        vec4 _882 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_856, _857, _858), 0.0);
        float _895 = exp2((_861.w + (-0.5)) * 20.0) * 2.0;
        float _896 = _895 * (_861.x + (-0.5));
        float _897 = _895 * (_861.y + (-0.5));
        float _898 = _895 * (_861.z + (-0.5));
        float _905 = exp2((_868.w + (-0.5)) * 20.0) * 2.0;
        float _906 = _905 * (_868.x + (-0.5));
        float _907 = _905 * (_868.y + (-0.5));
        float _908 = _905 * (_868.z + (-0.5));
        float _915 = exp2((_875.w + (-0.5)) * 20.0) * 2.0;
        float _916 = _915 * (_875.x + (-0.5));
        float _917 = _915 * (_875.y + (-0.5));
        float _918 = _915 * (_875.z + (-0.5));
        float _925 = exp2((_882.w + (-0.5)) * 20.0) * 2.0;
        float _926 = _925 * (_882.x + (-0.5));
        float _927 = _925 * (_882.y + (-0.5));
        float _928 = _925 * (_882.z + (-0.5));
        float _929 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
        float _930 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
        float _931 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
        float _932 = _896 * 0.5;
        float _933 = _906 * 0.5;
        float _934 = _916 * 0.5;
        float _935 = dot(vec3(_932, _933, _934), vec3(_932, _933, _934));
        float _940 = (_935 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_935);
        float _949 = (dot(vec3(_527, _528, _529), vec3(_940 * _932, _940 * _933, _940 * _934)) + 1.0) * 0.5;
        float _3576 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
        float _959 = sqrt(((_933 * _933) + (_932 * _932)) + (_934 * _934)) / (_929 + 9.9999997473787516355514526367188e-06);
        float _3587 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
        float _960 = isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0));
        float _961 = _960 * 2.0;
        float _965 = (1.0 - _960) / (_960 + 1.0);
        float _3598 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
        float _966 = isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0));
        float _975 = ((((1.0 - _966) * (_961 + 2.0)) * exp2(log2(isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0))) * (_961 + 1.0))) + _966) * _929;
        float _976 = _897 * 0.5;
        float _977 = _907 * 0.5;
        float _978 = _917 * 0.5;
        float _979 = dot(vec3(_976, _977, _978), vec3(_976, _977, _978));
        float _984 = (_979 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_979);
        float _992 = (dot(vec3(_527, _528, _529), vec3(_984 * _976, _984 * _977, _984 * _978)) + 1.0) * 0.5;
        float _3609 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
        float _1001 = sqrt(((_977 * _977) + (_976 * _976)) + (_978 * _978)) / (_930 + 9.9999997473787516355514526367188e-06);
        float _3620 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        float _1002 = isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0));
        float _1003 = _1002 * 2.0;
        float _1007 = (1.0 - _1002) / (_1002 + 1.0);
        float _3631 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        float _1008 = isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0));
        float _1017 = ((((1.0 - _1008) * (_1003 + 2.0)) * exp2(log2(isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0))) * (_1003 + 1.0))) + _1008) * _930;
        float _1018 = _898 * 0.5;
        float _1019 = _908 * 0.5;
        float _1020 = _918 * 0.5;
        float _1021 = dot(vec3(_1018, _1019, _1020), vec3(_1018, _1019, _1020));
        float _1026 = (_1021 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1021);
        float _1034 = (dot(vec3(_527, _528, _529), vec3(_1026 * _1018, _1026 * _1019, _1026 * _1020)) + 1.0) * 0.5;
        float _3642 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1043 = sqrt(((_1019 * _1019) + (_1018 * _1018)) + (_1020 * _1020)) / (_931 + 9.9999997473787516355514526367188e-06);
        float _3653 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1044 = isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0));
        float _1045 = _1044 * 2.0;
        float _1049 = (1.0 - _1044) / (_1044 + 1.0);
        float _3664 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1050 = isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0));
        float _1059 = ((((1.0 - _1050) * (_1045 + 2.0)) * exp2(log2(isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0))) * (_1045 + 1.0))) + _1050) * _931;
        _1067 = _898;
        _1069 = _897;
        _1070 = _896;
        _1071 = _908;
        _1072 = _907;
        _1073 = _906;
        _1074 = _918;
        _1075 = _917;
        _1076 = _916;
        _1077 = _931;
        _1078 = _930;
        _1079 = _929;
        _1080 = cbModelParam._m0[36u].z * (isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0)));
        _1081 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0)));
        _1082 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0)));
    }
    else
    {
        _1067 = _1068;
        _1069 = _1068;
        _1070 = _1068;
        _1071 = _1068;
        _1072 = _1068;
        _1073 = _1068;
        _1074 = _1068;
        _1075 = _1068;
        _1076 = _1068;
        _1077 = _1068;
        _1078 = _1068;
        _1079 = _1068;
        _1080 = 0.0;
        _1081 = 0.0;
        _1082 = 0.0;
    }
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1107 = fma(_767, cbModelParam._m0[30u].z, fma(_763, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _759));
        float _1111 = fma(_767, cbModelParam._m0[31u].z, fma(_763, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _759));
        float _1115 = fma(_767, cbModelParam._m0[32u].z, fma(_763, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _759));
        float _1138 = _759 + _527;
        float _1139 = _763 + _528;
        float _1140 = _767 + _529;
        float _1150 = fma(_1140, cbModelParam._m0[30u].z, fma(_1139, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1138)) - _1107;
        float _1151 = fma(_1140, cbModelParam._m0[31u].z, fma(_1139, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1138)) - _1111;
        float _1152 = fma(_1140, cbModelParam._m0[32u].z, fma(_1139, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1138)) - _1115;
        float _1156 = inversesqrt(dot(vec3(_1150, _1151, _1152), vec3(_1150, _1151, _1152)));
        float _1169 = ((_1156 * _1150) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1107 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1170 = ((_1156 * _1151) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1111 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1171 = ((_1156 * _1152) / cbModelParam._m0[35u].z) + ((((((_1115 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1173 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1169, _1170, _1171), 0.0);
        vec4 _1180 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1169, _1170, _1171), 0.0);
        vec4 _1187 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1169, _1170, _1171), 0.0);
        vec4 _1194 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1169, _1170, _1171), 0.0);
        float _1206 = exp2((_1173.w + (-0.5)) * 20.0) * 2.0;
        float _1207 = _1206 * (_1173.x + (-0.5));
        float _1208 = _1206 * (_1173.y + (-0.5));
        float _1209 = _1206 * (_1173.z + (-0.5));
        float _1216 = exp2((_1180.w + (-0.5)) * 20.0) * 2.0;
        float _1217 = _1216 * (_1180.x + (-0.5));
        float _1218 = _1216 * (_1180.y + (-0.5));
        float _1219 = _1216 * (_1180.z + (-0.5));
        float _1226 = exp2((_1187.w + (-0.5)) * 20.0) * 2.0;
        float _1227 = _1226 * (_1187.x + (-0.5));
        float _1228 = _1226 * (_1187.y + (-0.5));
        float _1229 = _1226 * (_1187.z + (-0.5));
        float _1236 = exp2((_1194.w + (-0.5)) * 20.0) * 2.0;
        float _1237 = _1236 * (_1194.x + (-0.5));
        float _1238 = _1236 * (_1194.y + (-0.5));
        float _1239 = _1236 * (_1194.z + (-0.5));
        float _1240 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1241 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1242 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1243 = _1207 * 0.5;
        float _1244 = _1217 * 0.5;
        float _1245 = _1227 * 0.5;
        float _1246 = dot(vec3(_1243, _1244, _1245), vec3(_1243, _1244, _1245));
        float _1251 = (_1246 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1246);
        float _1259 = (dot(vec3(_527, _528, _529), vec3(_1251 * _1243, _1251 * _1244, _1251 * _1245)) + 1.0) * 0.5;
        float _3705 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1268 = sqrt(((_1244 * _1244) + (_1243 * _1243)) + (_1245 * _1245)) / (_1240 + 9.9999997473787516355514526367188e-06);
        float _3716 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1269 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
        float _1270 = _1269 * 2.0;
        float _1274 = (1.0 - _1269) / (_1269 + 1.0);
        float _3727 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1275 = isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0));
        float _1284 = ((((1.0 - _1275) * (_1270 + 2.0)) * exp2(log2(isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0))) * (_1270 + 1.0))) + _1275) * _1240;
        float _1285 = _1208 * 0.5;
        float _1286 = _1218 * 0.5;
        float _1287 = _1228 * 0.5;
        float _1288 = dot(vec3(_1285, _1286, _1287), vec3(_1285, _1286, _1287));
        float _1293 = (_1288 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1288);
        float _1301 = (dot(vec3(_527, _528, _529), vec3(_1293 * _1285, _1293 * _1286, _1293 * _1287)) + 1.0) * 0.5;
        float _3738 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1310 = sqrt(((_1286 * _1286) + (_1285 * _1285)) + (_1287 * _1287)) / (_1241 + 9.9999997473787516355514526367188e-06);
        float _3749 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1311 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
        float _1312 = _1311 * 2.0;
        float _1316 = (1.0 - _1311) / (_1311 + 1.0);
        float _3760 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1317 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
        float _1326 = ((((1.0 - _1317) * (_1312 + 2.0)) * exp2(log2(isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0))) * (_1312 + 1.0))) + _1317) * _1241;
        float _1327 = _1209 * 0.5;
        float _1328 = _1219 * 0.5;
        float _1329 = _1229 * 0.5;
        float _1330 = dot(vec3(_1327, _1328, _1329), vec3(_1327, _1328, _1329));
        float _1335 = (_1330 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1330);
        float _1343 = (dot(vec3(_527, _528, _529), vec3(_1335 * _1327, _1335 * _1328, _1335 * _1329)) + 1.0) * 0.5;
        float _3771 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1352 = sqrt(((_1328 * _1328) + (_1327 * _1327)) + (_1329 * _1329)) / (_1242 + 9.9999997473787516355514526367188e-06);
        float _3782 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1353 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
        float _1354 = _1353 * 2.0;
        float _1358 = (1.0 - _1353) / (_1353 + 1.0);
        float _3793 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1359 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
        float _1368 = ((((1.0 - _1359) * (_1354 + 2.0)) * exp2(log2(isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0))) * (_1354 + 1.0))) + _1359) * _1242;
        _1376 = _1209;
        _1377 = _1208;
        _1378 = _1207;
        _1379 = _1219;
        _1380 = _1218;
        _1381 = _1217;
        _1382 = _1229;
        _1383 = _1228;
        _1384 = _1227;
        _1385 = _1242;
        _1386 = _1241;
        _1387 = _1240;
        _1388 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0)));
        _1389 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0)));
        _1390 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0)));
    }
    else
    {
        _1376 = _1068;
        _1377 = _1068;
        _1378 = _1068;
        _1379 = _1068;
        _1380 = _1068;
        _1381 = _1068;
        _1382 = _1068;
        _1383 = _1068;
        _1384 = _1068;
        _1385 = _1068;
        _1386 = _1068;
        _1387 = _1068;
        _1388 = 0.0;
        _1389 = 0.0;
        _1390 = 0.0;
    }
    float _1400 = (cbModelParam._m0[1u].x * (_1388 - _1080)) + _1080;
    float _1401 = (cbModelParam._m0[1u].x * (_1389 - _1081)) + _1081;
    float _1402 = (cbModelParam._m0[1u].x * (_1390 - _1082)) + _1082;
    float _1423 = fma(_1402, cbSceneParam._m0[89u].z, fma(_1401, cbSceneParam._m0[89u].y, _1400 * cbSceneParam._m0[89u].x));
    float _1426 = fma(_1402, cbSceneParam._m0[90u].z, fma(_1401, cbSceneParam._m0[90u].y, _1400 * cbSceneParam._m0[90u].x));
    float _1429 = fma(_1402, cbSceneParam._m0[91u].z, fma(_1401, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1400));
    float _1444 = _704 * 0.5;
    float _1445 = _705 * 0.5;
    float _1446 = _706 * 0.5;
    float _1447 = dot(vec4(_1444, _1445, _1446, 1.0), vec4(_1378, _1381, _1384, _1387));
    float _1450 = dot(vec4(_1444, _1445, _1446, 1.0), vec4(_1377, _1380, _1383, _1386));
    float _1453 = dot(vec4(_1444, _1445, _1446, 1.0), vec4(_1376, _1379, _1382, _1385));
    float _1487;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1460 = dot(vec4(_1444, _1445, _1446, 1.0), vec4(_1067, _1071, _1074, _1077));
        float _1464 = dot(vec4(_1444, _1445, _1446, 1.0), vec4(_1069, _1072, _1075, _1078));
        float _1468 = dot(vec4(_1444, _1445, _1446, 1.0), vec4(_1070, _1073, _1076, _1079));
        float _1475 = dot(vec4(cbModelParam._m0[39u]), vec4(_1444, _1445, _1446, 1.0));
        _1487 = dot(vec3(isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0)), isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0)), isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1475) ? 0.0 : (isnan(0.0) ? _1475 : max(0.0, _1475))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1487 = 1.0;
    }
    float _1498;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1489 = dot(vec4(cbModelParam._m0[40u]), vec4(_1444, _1445, _1446, 1.0));
        _1498 = dot(vec3(isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0)), isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0)), isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1489) ? 0.0 : (isnan(0.0) ? _1489 : max(0.0, _1489))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1498 = 1.0;
    }
    float _1502 = (_1498 * cbModelParam._m0[1u].x) + (_1487 * (1.0 - cbModelParam._m0[1u].x));
    float _1512 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _530);
    float _1513 = isnan(_1512) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1512 : min(cbModelParam._m0[25u].z, _1512));
    float _1595;
    float _1597;
    float _1599;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1562 = fma(_767, cbModelParam._m0[13u].z, fma(_763, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _759)) + cbModelParam._m0[13u].w;
        float _1566 = fma(_767, cbModelParam._m0[14u].z, fma(_763, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _759)) + cbModelParam._m0[14u].w;
        float _1570 = fma(_767, cbModelParam._m0[15u].z, fma(_763, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _759)) + cbModelParam._m0[15u].w;
        float _1573 = fma(_706, cbModelParam._m0[13u].z, fma(_705, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _704));
        float _1576 = fma(_706, cbModelParam._m0[14u].z, fma(_705, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _704));
        float _1579 = fma(_706, cbModelParam._m0[15u].z, fma(_705, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _704));
        float _1607;
        if (_1573 > 0.0)
        {
            _1607 = abs((1.0 - _1562) / _1573);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1573 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1562 + 1.0) / _1573);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1607 = frontier_phi_14_12_ladder;
        }
        float _1811;
        if (_1576 > 0.0)
        {
            _1811 = abs((1.0 - _1566) / _1576);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1576 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1566 + 1.0) / _1576);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1811 = frontier_phi_23_19_ladder;
        }
        float _2065;
        if (_1579 > 0.0)
        {
            _2065 = abs((1.0 - _1570) / _1579);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1579 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1570 + 1.0) / _1579);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2065 = frontier_phi_35_30_ladder;
        }
        float _2067 = isnan(_1811) ? _1607 : (isnan(_1607) ? _1811 : min(_1607, _1811));
        float _2068 = isnan(_2065) ? _2067 : (isnan(_2067) ? _2065 : min(_2067, _2065));
        float _2072 = (_2068 * _1573) + _1562;
        float _2073 = (_2068 * _1576) + _1566;
        float _2074 = (_2068 * _1579) + _1570;
        float _2075 = _2068 * 9.9999997473787516355514526367188e-05;
        float _2077 = (-1.0) - _2075;
        float _2079 = _2075 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2074 > _2079) || ((_2074 < _2077) || ((_2073 > _2079) || ((_2073 < _2077) || ((_2072 < _2077) || (_2072 > _2079))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2202 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2074, cbModelParam._m0[9u].z, fma(_2073, cbModelParam._m0[9u].y, _2072 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2074, cbModelParam._m0[10u].z, fma(_2073, cbModelParam._m0[10u].y, _2072 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2074, cbModelParam._m0[11u].z, fma(_2073, cbModelParam._m0[11u].y, _2072 * cbModelParam._m0[11u].x))), _1513);
            frontier_phi_13_35_ladder = _2202.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2202.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2202.x * cbModelParam._m0[1u].y;
        }
        _1595 = frontier_phi_13_35_ladder_2;
        _1597 = frontier_phi_13_35_ladder_1;
        _1599 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1583 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_704, _705, _706), _1513);
        _1595 = _1583.x * cbModelParam._m0[1u].y;
        _1597 = _1583.y * cbModelParam._m0[1u].y;
        _1599 = _1583.z * cbModelParam._m0[1u].y;
    }
    float _1603 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _530);
    float _1604 = isnan(_1603) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1603 : min(cbModelParam._m0[25u].w, _1603));
    float _1694;
    float _1696;
    float _1698;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1658 = fma(_767, cbModelParam._m0[21u].z, fma(_763, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _759)) + cbModelParam._m0[21u].w;
        float _1662 = fma(_767, cbModelParam._m0[22u].z, fma(_763, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _759)) + cbModelParam._m0[22u].w;
        float _1666 = fma(_767, cbModelParam._m0[23u].z, fma(_763, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _759)) + cbModelParam._m0[23u].w;
        float _1669 = fma(_706, cbModelParam._m0[21u].z, fma(_705, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _704));
        float _1672 = fma(_706, cbModelParam._m0[22u].z, fma(_705, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _704));
        float _1675 = fma(_706, cbModelParam._m0[23u].z, fma(_705, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _704));
        float _1816;
        if (_1669 > 0.0)
        {
            _1816 = abs((1.0 - _1658) / _1669);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1669 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1658 + 1.0) / _1669);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1816 = frontier_phi_25_21_ladder;
        }
        float _2092;
        if (_1672 > 0.0)
        {
            _2092 = abs((1.0 - _1662) / _1672);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1672 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1662 + 1.0) / _1672);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2092 = frontier_phi_37_32_ladder;
        }
        float _2305;
        if (_1675 > 0.0)
        {
            _2305 = abs((1.0 - _1666) / _1675);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1675 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1666 + 1.0) / _1675);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2305 = frontier_phi_46_43_ladder;
        }
        float _2307 = isnan(_2092) ? _1816 : (isnan(_1816) ? _2092 : min(_1816, _2092));
        float _2308 = isnan(_2305) ? _2307 : (isnan(_2307) ? _2305 : min(_2307, _2305));
        float _2312 = (_2308 * _1669) + _1658;
        float _2313 = (_2308 * _1672) + _1662;
        float _2314 = (_2308 * _1675) + _1666;
        float _2315 = _2308 * 9.9999997473787516355514526367188e-05;
        float _2316 = (-1.0) - _2315;
        float _2318 = _2315 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2314 > _2318) || ((_2314 < _2316) || ((_2313 > _2318) || ((_2313 < _2316) || ((_2312 < _2316) || (_2312 > _2318))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2513 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2314, cbModelParam._m0[17u].z, fma(_2313, cbModelParam._m0[17u].y, _2312 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2314, cbModelParam._m0[18u].z, fma(_2313, cbModelParam._m0[18u].y, _2312 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2314, cbModelParam._m0[19u].z, fma(_2313, cbModelParam._m0[19u].y, _2312 * cbModelParam._m0[19u].x))), _1604);
            frontier_phi_22_46_ladder = _2513.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2513.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2513.x * cbModelParam._m0[1u].z;
        }
        _1694 = frontier_phi_22_46_ladder_2;
        _1696 = frontier_phi_22_46_ladder_1;
        _1698 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1678 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_704, _705, _706), _1604);
        _1694 = _1678.x * cbModelParam._m0[1u].z;
        _1696 = _1678.y * cbModelParam._m0[1u].z;
        _1698 = _1678.z * cbModelParam._m0[1u].z;
    }
    float _1711 = (((_730 * _680) + _731) * _696) * ((cbModelParam._m0[1u].w * (_1694 - _1595)) + _1595);
    float _1713 = (((_730 * _682) + _731) * _696) * ((cbModelParam._m0[1u].w * (_1696 - _1597)) + _1597);
    float _1715 = (((_730 * _683) + _731) * _696) * ((cbModelParam._m0[1u].w * (_1698 - _1599)) + _1599);
    float _1718 = fma(_1715, cbSceneParam._m0[89u].z, fma(_1713, cbSceneParam._m0[89u].y, _1711 * cbSceneParam._m0[89u].x));
    float _1721 = fma(_1715, cbSceneParam._m0[90u].z, fma(_1713, cbSceneParam._m0[90u].y, _1711 * cbSceneParam._m0[90u].x));
    float _1724 = fma(_1715, cbSceneParam._m0[91u].z, fma(_1713, cbSceneParam._m0[91u].y, _1711 * cbSceneParam._m0[91u].x));
    uvec4 _1734 = floatBitsToUint(cbInstanceData._m0[_289 + 5u]);
    uint _1736 = _1734.x * 14u;
    uint _1737 = _1736 + 13u;
    float _1744 = _696 + (-1.0);
    float _1749 = (cbLight._m0[_1737].x * _1744) + 1.0;
    float _1750 = (cbLight._m0[_1737].y * _1744) + 1.0;
    float _1751 = (cbLight._m0[_1737].z * _1744) + 1.0;
    float _1752 = (cbLight._m0[_1737].w * _1744) + 1.0;
    uint _1753 = _1736 + 5u;
    float _1759 = isnan(1.0) ? _1750 : (isnan(_1750) ? 1.0 : min(_1750, 1.0));
    uint _1763 = _1736 + 4u;
    float _1770 = isnan(1.0) ? _1749 : (isnan(_1749) ? 1.0 : min(_1749, 1.0));
    uint _1774 = _1736 | 1u;
    float _1785 = dot(vec3(cbLight._m0[_1736].xyz), vec3(_527, _528, _529));
    float _1788 = dot(vec3(cbLight._m0[_1774].xyz), vec3(_527, _528, _529));
    float _3929 = isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0));
    float _3940 = isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0));
    float _1793 = (isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0))) * 0.3183098733425140380859375;
    float _1795 = (isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0))) * 0.3183098733425140380859375;
    float _1802 = ((cbLight._m0[_1753].x * _1759) * _1795) + ((cbLight._m0[_1763].x * _1770) * _1793);
    float _1803 = ((_1759 * cbLight._m0[_1753].y) * _1795) + ((_1770 * cbLight._m0[_1763].y) * _1793);
    float _1804 = ((_1759 * cbLight._m0[_1753].z) * _1795) + ((_1770 * cbLight._m0[_1763].z) * _1793);
    uvec4 _1808 = floatBitsToUint(cbLight._m0[_1736 + 12u]);
    bool _1810 = _1808.x == 0u;
    float _1821;
    float _1823;
    float _1825;
    if (_1810)
    {
        _1821 = _1802;
        _1823 = _1803;
        _1825 = _1804;
    }
    else
    {
        uint _1829 = _1736 + 6u;
        float _1845 = (dot(vec3(cbLight._m0[_1736 + 2u].xyz), vec3(_527, _528, _529)) * 0.5) + 0.5;
        float _1846 = _1845 * _1845;
        float _3951 = isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0));
        float _1847 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
        float _1848 = isnan(1.0) ? _1751 : (isnan(_1751) ? 1.0 : min(_1751, 1.0));
        _1821 = (((cbLight._m0[_1829].x * 0.3183098733425140380859375) * _1847) * _1848) + _1802;
        _1823 = (((cbLight._m0[_1829].y * 0.3183098733425140380859375) * _1847) * _1848) + _1803;
        _1825 = (((cbLight._m0[_1829].z * 0.3183098733425140380859375) * _1847) * _1848) + _1804;
    }
    bool _1828 = _1808.y == 0u;
    float _1866;
    float _1868;
    float _1870;
    if (_1828)
    {
        _1866 = _1821;
        _1868 = _1823;
        _1870 = _1825;
    }
    else
    {
        uint _2036 = _1736 + 7u;
        float _2052 = (dot(vec3(cbLight._m0[_1736 + 3u].xyz), vec3(_527, _528, _529)) * 0.5) + 0.5;
        float _2053 = _2052 * _2052;
        float _3967 = isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0));
        float _2054 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
        float _2055 = isnan(1.0) ? _1752 : (isnan(_1752) ? 1.0 : min(_1752, 1.0));
        _1866 = (((cbLight._m0[_2036].x * 0.3183098733425140380859375) * _2054) * _2055) + _1821;
        _1868 = (((cbLight._m0[_2036].y * 0.3183098733425140380859375) * _2054) * _2055) + _1823;
        _1870 = (((cbLight._m0[_2036].z * 0.3183098733425140380859375) * _2054) * _2055) + _1825;
    }
    uint _1873 = _1736 + 8u;
    float _1886 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1736].w)) * _530) * 0.949999988079071044921875);
    float _1887 = _1886 * _1886;
    float _1888 = cbLight._m0[_1736].x + _607;
    float _1889 = cbLight._m0[_1736].y + _608;
    float _1890 = cbLight._m0[_1736].z + _609;
    float _1894 = inversesqrt(dot(vec3(_1888, _1889, _1890), vec3(_1888, _1889, _1890)));
    float _1895 = _1894 * _1888;
    float _1896 = _1894 * _1889;
    float _1897 = _1894 * _1890;
    float _1898 = dot(vec3(_527, _528, _529), vec3(cbLight._m0[_1736].xyz));
    float _3983 = isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0));
    float _1901 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
    float _3994 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _1902 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
    float _1903 = dot(vec3(_527, _528, _529), vec3(_1895, _1896, _1897));
    float _4005 = isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0));
    float _1906 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
    float _1907 = dot(vec3(cbLight._m0[_1736].xyz), vec3(_1895, _1896, _1897));
    float _4016 = isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0));
    float _1911 = _1887 * _1887;
    float _1915 = ((_1906 * _1906) * (_1911 + (-1.0))) + 1.0;
    float _1923 = exp2(log2(1.0 - (isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0)))) * 5.0);
    float _1924 = 0.959999978542327880859375 - _677;
    float _1926 = 0.959999978542327880859375 - _678;
    float _1927 = 0.959999978542327880859375 - _679;
    float _1934 = 1.0 - _1887;
    float _1945 = (0.5 / (((_1902 * ((_1901 * _1934) + _1887)) + 9.9999999392252902907785028219223e-09) + (((_1902 * _1934) + _1887) * _1901))) * _1901;
    float _4027 = isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0));
    float _1947 = (isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0))) * (_1911 / ((_1915 * _1915) * 3.141590118408203125));
    uint _1958 = _1736 + 9u;
    float _1969 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1774].w)) * _530) * 0.949999988079071044921875);
    float _1970 = _1969 * _1969;
    float _1971 = cbLight._m0[_1774].x + _607;
    float _1972 = cbLight._m0[_1774].y + _608;
    float _1973 = cbLight._m0[_1774].z + _609;
    float _1977 = inversesqrt(dot(vec3(_1971, _1972, _1973), vec3(_1971, _1972, _1973)));
    float _1978 = _1977 * _1971;
    float _1979 = _1977 * _1972;
    float _1980 = _1977 * _1973;
    float _1981 = dot(vec3(_527, _528, _529), vec3(cbLight._m0[_1774].xyz));
    float _4038 = isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0));
    float _1984 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
    float _1985 = dot(vec3(_527, _528, _529), vec3(_1978, _1979, _1980));
    float _4049 = isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0));
    float _1988 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
    float _1989 = dot(vec3(cbLight._m0[_1774].xyz), vec3(_1978, _1979, _1980));
    float _4060 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
    float _1993 = _1970 * _1970;
    float _1997 = ((_1988 * _1988) * (_1993 + (-1.0))) + 1.0;
    float _2004 = exp2(log2(1.0 - (isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0)))) * 5.0);
    float _2011 = 1.0 - _1970;
    float _2021 = (0.5 / (((_1902 * ((_1984 * _2011) + _1970)) + 9.9999999392252902907785028219223e-09) + (((_1902 * _2011) + _1970) * _1984))) * _1984;
    float _4071 = isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0));
    float _2023 = (isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0))) * (_1993 / ((_1997 * _1997) * 3.141590118408203125));
    float _2033 = (((((_2004 * _1924) + _680) * cbLight._m0[_1958].x) * _2023) * _1759) + (((((_1923 * _1924) + _680) * cbLight._m0[_1873].x) * _1947) * _1770);
    float _2034 = (((((_2004 * _1926) + _682) * cbLight._m0[_1958].y) * _2023) * _1759) + (((((_1923 * _1926) + _682) * cbLight._m0[_1873].y) * _1947) * _1770);
    float _2035 = (((((_2004 * _1927) + _683) * cbLight._m0[_1958].z) * _2023) * _1759) + (((((_1923 * _1927) + _683) * cbLight._m0[_1873].z) * _1947) * _1770);
    float _2097;
    float _2099;
    float _2101;
    if (_1810)
    {
        _2097 = _2033;
        _2099 = _2034;
        _2101 = _2035;
    }
    else
    {
        uint _2103 = _1736 + 2u;
        uint _2107 = _1736 + 10u;
        float _2121 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2103].w)) * _530) * 0.949999988079071044921875);
        float _2122 = _2121 * _2121;
        float _2123 = cbLight._m0[_2103].x + _607;
        float _2124 = cbLight._m0[_2103].y + _608;
        float _2125 = cbLight._m0[_2103].z + _609;
        float _2129 = inversesqrt(dot(vec3(_2123, _2124, _2125), vec3(_2123, _2124, _2125)));
        float _2130 = _2129 * _2123;
        float _2131 = _2129 * _2124;
        float _2132 = _2129 * _2125;
        float _2133 = dot(vec3(_527, _528, _529), vec3(cbLight._m0[_2103].xyz));
        float _4082 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
        float _2136 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
        float _2137 = dot(vec3(_527, _528, _529), vec3(_2130, _2131, _2132));
        float _4093 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
        float _2140 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
        float _2141 = dot(vec3(cbLight._m0[_2103].xyz), vec3(_2130, _2131, _2132));
        float _4104 = isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0));
        float _2145 = _2122 * _2122;
        float _2149 = ((_2140 * _2140) * (_2145 + (-1.0))) + 1.0;
        float _2156 = exp2(log2(1.0 - (isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0)))) * 5.0);
        float _2163 = 1.0 - _2122;
        float _2173 = (0.5 / (((_1902 * ((_2136 * _2163) + _2122)) + 9.9999999392252902907785028219223e-09) + (((_1902 * _2163) + _2122) * _2136))) * _2136;
        float _4115 = isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0));
        float _2175 = (isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0))) * (_2145 / ((_2149 * _2149) * 3.141590118408203125));
        float _2176 = isnan(1.0) ? _1751 : (isnan(_1751) ? 1.0 : min(_1751, 1.0));
        _2097 = (((((_2156 * _1924) + _680) * cbLight._m0[_2107].x) * _2175) * _2176) + _2033;
        _2099 = (((((_2156 * _1926) + _682) * cbLight._m0[_2107].y) * _2175) * _2176) + _2034;
        _2101 = (((((_2156 * _1927) + _683) * cbLight._m0[_2107].z) * _2175) * _2176) + _2035;
    }
    float _2211;
    float _2213;
    float _2215;
    if (_1828)
    {
        _2211 = _2097;
        _2213 = _2099;
        _2215 = _2101;
    }
    else
    {
        uint _2222 = _1736 + 3u;
        uint _2226 = _1736 + 11u;
        float _2240 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2222].w)) * _530) * 0.949999988079071044921875);
        float _2241 = _2240 * _2240;
        float _2242 = cbLight._m0[_2222].x + _607;
        float _2243 = cbLight._m0[_2222].y + _608;
        float _2244 = cbLight._m0[_2222].z + _609;
        float _2248 = inversesqrt(dot(vec3(_2242, _2243, _2244), vec3(_2242, _2243, _2244)));
        float _2249 = _2248 * _2242;
        float _2250 = _2248 * _2243;
        float _2251 = _2248 * _2244;
        float _2252 = dot(vec3(_527, _528, _529), vec3(cbLight._m0[_2222].xyz));
        float _4131 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
        float _2255 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
        float _2256 = dot(vec3(_527, _528, _529), vec3(_2249, _2250, _2251));
        float _4142 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
        float _2259 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
        float _2260 = dot(vec3(cbLight._m0[_2222].xyz), vec3(_2249, _2250, _2251));
        float _4153 = isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0));
        float _2264 = _2241 * _2241;
        float _2268 = ((_2259 * _2259) * (_2264 + (-1.0))) + 1.0;
        float _2275 = exp2(log2(1.0 - (isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0)))) * 5.0);
        float _2282 = 1.0 - _2241;
        float _2292 = (0.5 / (((_1902 * ((_2255 * _2282) + _2241)) + 9.9999999392252902907785028219223e-09) + (((_1902 * _2282) + _2241) * _2255))) * _2255;
        float _4164 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0));
        float _2294 = (isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0))) * (_2264 / ((_2268 * _2268) * 3.141590118408203125));
        float _2295 = isnan(1.0) ? _1752 : (isnan(_1752) ? 1.0 : min(_1752, 1.0));
        _2211 = (((((_2275 * _1924) + _680) * cbLight._m0[_2226].x) * _2294) * _2295) + _2097;
        _2213 = (((((_2275 * _1926) + _682) * cbLight._m0[_2226].y) * _2294) * _2295) + _2099;
        _2215 = (((((_2275 * _1927) + _683) * cbLight._m0[_2226].z) * _2294) * _2295) + _2101;
    }
    float _2430;
    float _2432;
    float _2434;
    float _2436;
    float _2438;
    float _2440;
    if (_1734.y == 0u)
    {
        float _2370 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2371 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2370;
        float _2372 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2370;
        float _2373 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2370;
        uvec4 _2385 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2386 = _2385.x;
        uint _2397 = uint((float(_2385.y) * floor(float(uint(cbSceneParam._m0[85u].y * _616) / _2386))) + floor(float(uint(cbSceneParam._m0[85u].x * _615) / _2386)));
        float _2407 = (log2(_2373 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2408 = isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0));
        uint _2411 = uint(isnan(14.0) ? _2408 : (isnan(_2408) ? 14.0 : min(_2408, 14.0)));
        uvec4 _2416 = texelFetch(g_lightClusterGridBuffer, int(((_2411 << 2u) + (_2397 << 6u)) >> 2u));
        uint _2417 = _2416.x;
        uint _2418 = _2385.z;
        float _2518;
        float _2520;
        float _2522;
        float _2524;
        float _2526;
        float _2528;
        if (((((1u << ((_2418 >> 4u) & 15u)) + 4294967295u) & _2417) == 0u) || ((_2418 & 240u) == 0u))
        {
            _2518 = 0.0;
            _2520 = 0.0;
            _2522 = 0.0;
            _2524 = 0.0;
            _2526 = 0.0;
            _2528 = 0.0;
        }
        else
        {
            float _2519;
            float _2521;
            float _2523;
            float _2525;
            float _2527;
            float _2529;
            float _2663 = 0.0;
            float _2664 = 0.0;
            float _2665 = 0.0;
            float _2666 = 0.0;
            float _2667 = 0.0;
            float _2668 = 0.0;
            uint _2669 = 0u;
            uint _2678;
            bool _2679;
            for (;;)
            {
                _2678 = texelFetch(g_lightClassification, int((((_2411 << 5u) + (_2397 << 9u)) + (_2669 << 2u)) >> 2u)).x;
                _2679 = _2678 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2679)
                {
                    frontier_phi_61_pred = _2663;
                    frontier_phi_61_pred_1 = _2668;
                    frontier_phi_61_pred_2 = _2667;
                    frontier_phi_61_pred_3 = _2666;
                    frontier_phi_61_pred_4 = _2665;
                    frontier_phi_61_pred_5 = _2664;
                }
                else
                {
                    float _2787;
                    float _2788;
                    float _2789;
                    float _2790;
                    float _2791;
                    float _2792;
                    uint _2793;
                    _2787 = _2663;
                    _2788 = _2664;
                    _2789 = _2665;
                    _2790 = _2666;
                    _2791 = _2667;
                    _2792 = _2668;
                    _2793 = _2678;
                    float _2719;
                    float _2720;
                    float _2721;
                    float _2722;
                    float _2723;
                    float _2724;
                    for (;;)
                    {
                        uint _2797 = uint(findLSB(_2793)) + (_2669 << 5u);
                        uint _2794 = (_2793 + 4294967295u) & _2793;
                        uint _2799 = _2797 * 48u;
                        vec4 _2813 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2799)).x, texelFetch(g_PointLightRenderingBuffer, int(_2799 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2799 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2799 + 3u)).x));
                        uint _2819 = (_2797 * 48u) + 4u;
                        vec4 _2832 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2819)).x, texelFetch(g_PointLightRenderingBuffer, int(_2819 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2819 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2819 + 3u)).x));
                        uint _2838 = (_2797 * 48u) + 8u;
                        vec3 _2849 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2838)).x, texelFetch(g_PointLightRenderingBuffer, int(_2838 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2838 + 2u)).x));
                        float _2853 = _2813.x - _2371;
                        float _2854 = _2813.y - _2372;
                        float _2855 = _2813.z - _2373;
                        float _2856 = dot(vec3(_2853, _2854, _2855), vec3(_2853, _2854, _2855));
                        float _2859 = inversesqrt(_2856);
                        float _2860 = _2859 * _2853;
                        float _2861 = _2859 * _2854;
                        float _2862 = _2859 * _2855;
                        float _2863 = dot(vec3(_637, _640, _643), vec3(_2860, _2861, _2862));
                        float _2868 = 1.0 - (_2856 * _2813.w);
                        float _4190 = isnan(0.0) ? _2868 : (isnan(_2868) ? 0.0 : max(_2868, 0.0));
                        float _2869 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
                        float _2870 = sqrt(_2856) * _2832.w;
                        float _2873 = 1.39999997615814208984375 / (_2870 + 1.39999997615814208984375);
                        float _2874 = _2873 * _2873;
                        float _2877 = ((1.0 - _2874) * _2863) + _2874;
                        float _2880 = _2870 * _2870;
                        float _2884 = ((isnan(0.0) ? _2877 : (isnan(_2877) ? 0.0 : max(_2877, 0.0))) * _2869) / ((_2880 * 0.699999988079071044921875) + 1.0);
                        float _2888 = (-0.0) - _2371;
                        float _2889 = (-0.0) - _2372;
                        float _2890 = (-0.0) - _2373;
                        float _2894 = inversesqrt(dot(vec3(_2888, _2889, _2890), vec3(_2888, _2889, _2890)));
                        float _2895 = _2894 * _2888;
                        float _2896 = _2894 * _2889;
                        float _2897 = _2894 * _2890;
                        float _2905 = exp2(log2(1.0 / ((_2880 * 3.5) + 5.0)) * 0.25);
                        float _2906 = 1.0 - _712;
                        float _2913 = sqrt(1.0 - ((1.0 - (_2906 * _2906)) * (1.0 - (_2905 * _2905))));
                        float _2914 = _2913 * _2913;
                        float _2915 = _2914 * _2914;
                        float _2916 = _2895 + _2860;
                        float _2917 = _2896 + _2861;
                        float _2918 = _2897 + _2862;
                        float _2922 = inversesqrt(dot(vec3(_2916, _2917, _2918), vec3(_2916, _2917, _2918)));
                        float _2926 = dot(vec3(_637, _640, _643), vec3(_2895, _2896, _2897));
                        float _4206 = isnan(0.0) ? _2926 : (isnan(_2926) ? 0.0 : max(_2926, 0.0));
                        float _2929 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
                        float _2930 = dot(vec3(_637, _640, _643), vec3(_2922 * _2916, _2922 * _2917, _2922 * _2918));
                        float _4217 = isnan(0.0) ? _2930 : (isnan(_2930) ? 0.0 : max(_2930, 0.0));
                        float _2933 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
                        float _2937 = ((_2933 * _2933) * (_2915 + (-1.0))) + 1.0;
                        float _2938 = _2873 * _2914;
                        float _2939 = _2938 * _2938;
                        float _2942 = ((1.0 - _2939) * _2863) + _2939;
                        float _4228 = isnan(0.0) ? _2942 : (isnan(_2942) ? 0.0 : max(_2942, 0.0));
                        float _2943 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
                        float _2944 = 1.0 - _2914;
                        float _2954 = (0.5 / (((_2943 * ((_2929 * _2944) + _2914)) + 9.9999999392252902907785028219223e-09) + (((_2943 * _2944) + _2914) * _2929))) * _2943;
                        float _4239 = isnan(0.0) ? _2954 : (isnan(_2954) ? 0.0 : max(_2954, 0.0));
                        float _2964 = (((_2915 * 3.1415927410125732421875) * (isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0)))) / ((_2937 * _2937) * ((_2880 * 2.1991131305694580078125) + 3.141590118408203125))) * _2869;
                        _2722 = (_2884 * _2832.x) + _2790;
                        _2723 = (_2884 * _2832.y) + _2791;
                        _2724 = (_2884 * _2832.z) + _2792;
                        _2719 = (_2964 * _2849.x) + _2787;
                        _2720 = (_2964 * _2849.y) + _2788;
                        _2721 = (_2964 * _2849.z) + _2789;
                        if (_2794 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2787 = _2719;
                            _2788 = _2720;
                            _2789 = _2721;
                            _2790 = _2722;
                            _2791 = _2723;
                            _2792 = _2724;
                            _2793 = _2794;
                        }
                    }
                    frontier_phi_61_pred = _2719;
                    frontier_phi_61_pred_1 = _2724;
                    frontier_phi_61_pred_2 = _2723;
                    frontier_phi_61_pred_3 = _2722;
                    frontier_phi_61_pred_4 = _2721;
                    frontier_phi_61_pred_5 = _2720;
                }
                _2519 = frontier_phi_61_pred;
                _2529 = frontier_phi_61_pred_1;
                _2527 = frontier_phi_61_pred_2;
                _2525 = frontier_phi_61_pred_3;
                _2523 = frontier_phi_61_pred_4;
                _2521 = frontier_phi_61_pred_5;
                uint _2670 = _2669 + 1u;
                if (_2670 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2663 = _2519;
                    _2664 = _2521;
                    _2665 = _2523;
                    _2666 = _2525;
                    _2667 = _2527;
                    _2668 = _2529;
                    _2669 = _2670;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2518 = _2519;
            _2520 = _2521;
            _2522 = _2523;
            _2524 = _2525;
            _2526 = _2527;
            _2528 = _2529;
        }
        uvec4 _2532 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2533 = _2532.z;
        uint _2535 = (_2533 >> 8u) & 15u;
        float _2631;
        float _2633;
        float _2635;
        float _2637;
        float _2639;
        float _2641;
        if (((4294967295u << _2535) & _2417) == 0u)
        {
            _2631 = _2518;
            _2633 = _2520;
            _2635 = _2522;
            _2637 = _2524;
            _2639 = _2526;
            _2641 = _2528;
        }
        else
        {
            float _2656 = inversesqrt(dot(vec3(_2371, _2372, _2373), vec3(_2371, _2372, _2373)));
            float _2657 = _2656 * _2371;
            float _2658 = _2656 * _2372;
            float _2659 = _2656 * _2373;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2535 < ((_2533 >> 12u) & 15u))
            {
                float _2632;
                float _2634;
                float _2636;
                float _2638;
                float _2640;
                float _2642;
                float _2770 = _2518;
                float _2771 = _2520;
                float _2772 = _2522;
                float _2773 = _2524;
                float _2774 = _2526;
                float _2775 = _2528;
                uint _2776 = _2535;
                uint _2785;
                bool _2786;
                for (;;)
                {
                    _2785 = texelFetch(g_lightClassification, int((((_2411 << 5u) + (_2397 << 9u)) + (_2776 << 2u)) >> 2u)).x;
                    _2786 = _2785 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2786)
                    {
                        frontier_phi_67_pred = _2773;
                        frontier_phi_67_pred_1 = _2774;
                        frontier_phi_67_pred_2 = _2775;
                        frontier_phi_67_pred_3 = _2772;
                        frontier_phi_67_pred_4 = _2771;
                        frontier_phi_67_pred_5 = _2770;
                    }
                    else
                    {
                        float _2969;
                        float _2970;
                        float _2971;
                        float _2972;
                        float _2973;
                        float _2974;
                        float _3264;
                        float _3265;
                        float _3266;
                        float _3267;
                        float _3268;
                        float _3269;
                        float _2982 = _2770;
                        float _2983 = _2771;
                        float _2984 = _2772;
                        float _2985 = _2773;
                        float _2986 = _2774;
                        float _2987 = _2775;
                        uint _2988 = _2785;
                        uint _2989;
                        vec4 _3014;
                        float _3015;
                        vec4 _3030;
                        vec3 _3042;
                        vec4 _3058;
                        vec4 _3074;
                        float _3120;
                        bool _3121;
                        for (;;)
                        {
                            uint _2999 = ((_2776 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2988));
                            _2989 = (_2988 + 4294967295u) & _2988;
                            uint _3001 = _2999 * 40u;
                            _3014 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3001)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3001 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3001 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3001 + 3u)).x));
                            _3015 = _3014.w;
                            uint _3017 = (_2999 * 40u) + 4u;
                            _3030 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3017)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3017 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3017 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3017 + 3u)).x));
                            uint _3032 = (_2999 * 40u) + 8u;
                            _3042 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3032)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3032 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3032 + 2u)).x));
                            uint _3045 = (_2999 * 40u) + 16u;
                            _3058 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3045)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 3u)).x));
                            uint _3061 = (_2999 * 40u) + 20u;
                            _3074 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3061)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3061 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3061 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3061 + 3u)).x));
                            uint _3076 = (_2999 * 40u) + 24u;
                            vec4 _3089 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3076)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3076 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3076 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3076 + 3u)).x));
                            uint _3095 = (_2999 * 40u) + 28u;
                            vec4 _3108 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3095)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3095 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3095 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3095 + 3u)).x));
                            _3120 = fma(_2373, _3108.z, fma(_2372, _3108.y, _3108.x * _2371)) + _3108.w;
                            _3121 = !((fma(_2373, _3089.z, fma(_2372, _3089.y, _3089.x * _2371)) + _3089.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3121)
                            {
                                float _3148 = _3014.x - _2371;
                                float _3149 = _3014.y - _2372;
                                float _3150 = _3014.z - _2373;
                                float _3151 = dot(vec3(_3148, _3149, _3150), vec3(_3148, _3149, _3150));
                                float _3154 = inversesqrt(_3151);
                                float _3155 = _3154 * _3148;
                                float _3156 = _3154 * _3149;
                                float _3157 = _3154 * _3150;
                                float _3161 = 1.0 - (_3151 / (_3015 * _3015));
                                float _4250 = isnan(0.0) ? _3161 : (isnan(_3161) ? 0.0 : max(_3161, 0.0));
                                float _3162 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
                                float _3166 = sqrt(_3151) * _3030.w;
                                float _3168 = 1.39999997615814208984375 / (_3166 + 1.39999997615814208984375);
                                float _3169 = _3168 * _3168;
                                float _3172 = ((1.0 - _3169) * dot(vec3(_3155, _3156, _3157), vec3(_637, _640, _643))) + _3169;
                                float _3175 = _3166 * _3166;
                                float _3179 = (fma(_2373, _3058.z, fma(_2372, _3058.y, _3058.x * _2371)) + _3058.w) / _3120;
                                float _3180 = (fma(_2373, _3074.z, fma(_2372, _3074.y, _3074.x * _2371)) + _3074.w) / _3120;
                                float _3184 = 1.0 - dot(vec2(_3179, _3180), vec2(_3179, _3180));
                                float _4266 = isnan(0.0) ? _3184 : (isnan(_3184) ? 0.0 : max(_3184, 0.0));
                                float _3185 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
                                float _3186 = _3185 * (((isnan(0.0) ? _3172 : (isnan(_3172) ? 0.0 : max(_3172, 0.0))) * _3162) / ((_3175 * 0.699999988079071044921875) + 1.0));
                                float _3198 = exp2(log2(1.0 / ((_3175 * 3.5) + 5.0)) * 0.25);
                                float _3199 = 1.0 - _712;
                                float _3206 = sqrt(1.0 - ((1.0 - (_3199 * _3199)) * (1.0 - (_3198 * _3198))));
                                float _3207 = _3206 * _3206;
                                float _3208 = _3207 * _3207;
                                float _3209 = _3155 - _2657;
                                float _3210 = _3156 - _2658;
                                float _3211 = _3157 - _2659;
                                float _3215 = inversesqrt(dot(vec3(_3209, _3210, _3211), vec3(_3209, _3210, _3211)));
                                float _3219 = dot(vec3(_637, _640, _643), vec3((-0.0) - _2657, (-0.0) - _2658, (-0.0) - _2659));
                                float _4277 = isnan(0.0) ? _3219 : (isnan(_3219) ? 0.0 : max(_3219, 0.0));
                                float _3222 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
                                float _3223 = dot(vec3(_637, _640, _643), vec3(_3215 * _3209, _3215 * _3210, _3215 * _3211));
                                float _4288 = isnan(0.0) ? _3223 : (isnan(_3223) ? 0.0 : max(_3223, 0.0));
                                float _3226 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
                                float _3230 = ((_3226 * _3226) * (_3208 + (-1.0))) + 1.0;
                                float _3231 = _3168 * _3207;
                                float _3232 = _3231 * _3231;
                                float _3238 = ((1.0 - _3232) * dot(vec3(_637, _640, _643), vec3(_3155, _3156, _3157))) + _3232;
                                float _4299 = isnan(0.0) ? _3238 : (isnan(_3238) ? 0.0 : max(_3238, 0.0));
                                float _3239 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
                                float _3240 = 1.0 - _3207;
                                float _3250 = (0.5 / (((_3239 * ((_3222 * _3240) + _3207)) + 9.9999999392252902907785028219223e-09) + (((_3239 * _3240) + _3207) * _3222))) * _3239;
                                float _4310 = isnan(0.0) ? _3250 : (isnan(_3250) ? 0.0 : max(_3250, 0.0));
                                float _3260 = (_3185 * _3162) * (((_3208 * 3.1415927410125732421875) * (isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0)))) / ((_3230 * _3230) * ((_3175 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3260 * _3042.x;
                                frontier_phi_73_pred_1 = _3260 * _3042.y;
                                frontier_phi_73_pred_2 = _3186 * _3030.z;
                                frontier_phi_73_pred_3 = _3186 * _3030.y;
                                frontier_phi_73_pred_4 = _3186 * _3030.x;
                                frontier_phi_73_pred_5 = _3260 * _3042.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3264 = frontier_phi_73_pred;
                            _3265 = frontier_phi_73_pred_1;
                            _3269 = frontier_phi_73_pred_2;
                            _3268 = frontier_phi_73_pred_3;
                            _3267 = frontier_phi_73_pred_4;
                            _3266 = frontier_phi_73_pred_5;
                            _2972 = _3267 + _2985;
                            _2973 = _3268 + _2986;
                            _2974 = _3269 + _2987;
                            _2969 = _3264 + _2982;
                            _2970 = _3265 + _2983;
                            _2971 = _3266 + _2984;
                            if (_2989 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2982 = _2969;
                                _2983 = _2970;
                                _2984 = _2971;
                                _2985 = _2972;
                                _2986 = _2973;
                                _2987 = _2974;
                                _2988 = _2989;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2972;
                        frontier_phi_67_pred_1 = _2973;
                        frontier_phi_67_pred_2 = _2974;
                        frontier_phi_67_pred_3 = _2971;
                        frontier_phi_67_pred_4 = _2970;
                        frontier_phi_67_pred_5 = _2969;
                    }
                    _2638 = frontier_phi_67_pred;
                    _2640 = frontier_phi_67_pred_1;
                    _2642 = frontier_phi_67_pred_2;
                    _2636 = frontier_phi_67_pred_3;
                    _2634 = frontier_phi_67_pred_4;
                    _2632 = frontier_phi_67_pred_5;
                    uint _2777 = _2776 + 1u;
                    if (_2777 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2770 = _2632;
                        _2771 = _2634;
                        _2772 = _2636;
                        _2773 = _2638;
                        _2774 = _2640;
                        _2775 = _2642;
                        _2776 = _2777;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2640;
                frontier_phi_55_56_ladder_1 = _2642;
                frontier_phi_55_56_ladder_2 = _2638;
                frontier_phi_55_56_ladder_3 = _2636;
                frontier_phi_55_56_ladder_4 = _2634;
                frontier_phi_55_56_ladder_5 = _2632;
            }
            else
            {
                frontier_phi_55_56_ladder = _2526;
                frontier_phi_55_56_ladder_1 = _2528;
                frontier_phi_55_56_ladder_2 = _2524;
                frontier_phi_55_56_ladder_3 = _2522;
                frontier_phi_55_56_ladder_4 = _2520;
                frontier_phi_55_56_ladder_5 = _2518;
            }
            _2631 = frontier_phi_55_56_ladder_5;
            _2633 = frontier_phi_55_56_ladder_4;
            _2635 = frontier_phi_55_56_ladder_3;
            _2637 = frontier_phi_55_56_ladder_2;
            _2639 = frontier_phi_55_56_ladder;
            _2641 = frontier_phi_55_56_ladder_1;
        }
        float _2646 = isnan(1.0) ? _696 : (isnan(_696) ? 1.0 : min(_696, 1.0));
        _2430 = (_2646 * _2637) + _1866;
        _2432 = (_2646 * _2639) + _1868;
        _2434 = (_2646 * _2641) + _1870;
        _2436 = ((_2631 * _680) * _2646) + _2211;
        _2438 = ((_2633 * _682) * _2646) + _2213;
        _2440 = ((_2635 * _683) * _2646) + _2215;
    }
    else
    {
        _2430 = _1866;
        _2432 = _1868;
        _2434 = _1870;
        _2436 = _2211;
        _2438 = _2213;
        _2440 = _2215;
    }
    float _4326 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _4337 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _4348 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    uint _2460 = _289 + 6u;
    float _2468 = _615 / cbSceneParam._m0[86u].x;
    float _2469 = _616 / cbSceneParam._m0[86u].y;
    vec4 _2483 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2468, _2469, (log2((isnan(cbSceneParam._m0[77u].w) ? _549 : (isnan(_549) ? cbSceneParam._m0[77u].w : min(_549, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2485 = _2483.x;
    float _2486 = _2483.y;
    float _2487 = _2483.z;
    float _2488 = _2483.w;
    float _2581;
    float _2583;
    float _2585;
    float _2587;
    if (_549 > cbSceneParam._m0[78u].w)
    {
        float _2543 = isnan(_549) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _549 : min(cbSceneParam._m0[80u].w, _549));
        float _2544 = _2543 / _549;
        float _2555 = _2544 * _600;
        float _2556 = _601 * _2544;
        float _2557 = (-0.0) - _2556;
        float _2559 = _2544 * _602;
        float _2561 = (cbSceneParam._m0[77u].w * _2557) / _2543;
        float _2562 = _2561 + cbSceneParam._m0[79u].w;
        float _2563 = cbSceneParam._m0[79u].w - _2556;
        float _2569 = sqrt(((_2555 * _2555) + (_2556 * _2556)) + (_2559 * _2559));
        float _2572 = (1.0 - (cbSceneParam._m0[77u].w / _2543)) * _2569;
        float _2577 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2579 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2732;
        if (abs((_2557 - _2561) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2732 = ((((_2562 > 0.0) ? exp2(_2577 * _2562) : (2.0 - exp2(_2579 * _2562))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2572;
        }
        else
        {
            float _2692 = 1.0 / cbSceneParam._m0[80u].x;
            float _2693 = isnan(_2563) ? _2562 : (isnan(_2562) ? _2563 : max(_2562, _2563));
            float _2694 = isnan(_2563) ? _2562 : (isnan(_2562) ? _2563 : min(_2562, _2563));
            float _2703 = isnan(0.0) ? _2693 : (isnan(_2693) ? 0.0 : min(_2693, 0.0));
            float _2704 = isnan(0.0) ? _2694 : (isnan(_2694) ? 0.0 : min(_2694, 0.0));
            _2732 = ((abs(_2569 / _2557) * cbSceneParam._m0[80u].y) * ((((_2703 - _2704) * 2.0) - ((exp2(_2577 * (isnan(0.0) ? _2693 : (isnan(_2693) ? 0.0 : max(_2693, 0.0)))) - exp2(_2577 * (isnan(0.0) ? _2694 : (isnan(_2694) ? 0.0 : max(_2694, 0.0))))) * _2692)) - ((exp2(_2579 * _2703) - exp2(_2579 * _2704)) * _2692))) + (_2572 * cbSceneParam._m0[80u].z);
        }
        vec4 _2734 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2468, _2469, 1.0), 0.0);
        float _2743 = exp2((_2732 * (-1.44269502162933349609375)) * (1.0 - _2734.w));
        float _2744 = log2(_2743);
        float _2760 = log2(_2488);
        _2581 = (exp2(_2760 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2744 * cbSceneParam._m0[78u].x)) * _2734.x) / cbSceneParam._m0[78u].x)) + _2485;
        _2583 = (exp2(_2760 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2744 * cbSceneParam._m0[78u].y)) * _2734.y) / cbSceneParam._m0[78u].y)) + _2486;
        _2585 = (exp2(_2760 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2744 * cbSceneParam._m0[78u].z)) * _2734.z) / cbSceneParam._m0[78u].z)) + _2487;
        _2587 = _2743 * _2488;
    }
    else
    {
        _2581 = _2485;
        _2583 = _2486;
        _2585 = _2487;
        _2587 = _2488;
    }
    float _2599 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2600 = _2599 == 3.0;
    float _2601 = log2(_2587);
    float _2608 = exp2(_2601 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0))) * (_2430 + ((isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0))) * _696))) + ((_2436 + ((isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0))) * _1502)) * cbPerFrame._m0[3u].x));
    float _2609 = exp2(_2601 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0))) * (_2432 + ((isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0))) * _696))) + ((_2438 + ((isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0))) * _1502)) * cbPerFrame._m0[3u].x));
    float _2610 = exp2(_2601 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0))) * (_2434 + ((isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0))) * _696))) + ((_2440 + ((isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0))) * _1502)) * cbPerFrame._m0[3u].x));
    float _2619 = (_2599 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2619 * (_2600 ? _2608 : (_2608 + (cbSceneParam._m0[72u].w * _2581)));
    SV_Target.y = _2619 * (_2600 ? _2609 : (_2609 + (cbSceneParam._m0[72u].w * _2583)));
    SV_Target.z = _2619 * (_2600 ? _2610 : (_2610 + (cbSceneParam._m0[72u].w * _2585)));
    SV_Target.w = cbInstanceData._m0[_2460].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2460].w;
}


