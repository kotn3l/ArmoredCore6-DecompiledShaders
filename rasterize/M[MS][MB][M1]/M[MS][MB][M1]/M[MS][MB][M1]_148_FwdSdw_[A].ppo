#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1465;
float _4126;
float _4127;
float _4128;
float _4129;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _240 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _241 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _242 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _248 = inversesqrt(dot(vec3(_240, _241, _242), vec3(_240, _241, _242)));
    float _249 = _248 * _240;
    float _250 = _248 * _241;
    float _251 = _248 * _242;
    float _255 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _256 = _255 * NORMAL.x;
    float _257 = _255 * NORMAL.y;
    float _258 = _255 * NORMAL.z;
    float _262 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _263 = _262 * TANGENT.x;
    float _264 = _262 * TANGENT.y;
    float _265 = _262 * TANGENT.z;
    float _274 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _276 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _277 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4138 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _4149 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _4160 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    uint _287 = uint(roundEven(NORMAL.w)) * 13u;
    uint _292 = _287 + 1u;
    uint _296 = _287 + 2u;
    float _305 = sqrt(((cbInstanceData._m0[_292].x * cbInstanceData._m0[_292].x) + (cbInstanceData._m0[_287].x * cbInstanceData._m0[_287].x)) + (cbInstanceData._m0[_296].x * cbInstanceData._m0[_296].x));
    float _306 = _305 * TEXCOORD.z;
    float _307 = _305 * TEXCOORD.w;
    vec4 _320 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _306) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _307) + cbTextureTilingScale._m0[13u].w));
    vec4 _344 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _349 = _344.x * cbMtdParam._m0[11u].x;
    float _350 = _344.y * cbMtdParam._m0[11u].y;
    float _351 = _344.z * cbMtdParam._m0[11u].z;
    vec4 _370 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _306) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _307) + cbTextureTilingScale._m0[5u].w));
    vec4 _406 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _408 = _406.x;
    float _420 = dot(vec4(_408, _406.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _437 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_408 - _420) * cbMtdParam._m0[24u].y) + _420) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4171 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _438 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
    float _445 = (_438 * ((_370.x * cbMtdParam._m0[12u].x) - _349)) + _349;
    float _446 = (_438 * ((_370.y * cbMtdParam._m0[12u].y) - _350)) + _350;
    float _447 = (_438 * ((_370.z * cbMtdParam._m0[12u].z) - _351)) + _351;
    float _451 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _320.x) * _445;
    float _454 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _320.y) * _446;
    float _457 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _320.z) * _447;
    float _464 = ((_445 - _451) * (isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0)))) + _451;
    float _465 = ((_446 - _454) * (isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0)))) + _454;
    float _466 = ((_447 - _457) * (isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0)))) + _457;
    vec4 _485 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _306) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _307) + cbTextureTilingScale._m0[14u].w));
    vec4 _505 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _306) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _307) + cbTextureTilingScale._m0[20u].w));
    vec4 _532 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _306) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _307) + cbTextureTilingScale._m0[4u].w));
    vec4 _549 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _551 = _549.x;
    float _552 = _549.y;
    float _553 = _549.z;
    float _562 = ((_532.z - _553) * _438) + _553;
    float _565 = ((((_532.x - _551) * _438) + _551) * 2.0) + (-1.0);
    float _566 = ((((_532.y - _552) * _438) + _552) * 2.0) + (-1.0);
    float _567 = dot(vec2(_565, _566), vec2(_565, _566));
    float _4182 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _572 = sqrt(1.0 - (isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0))));
    float _575 = _565 + ((((_505.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x);
    float _576 = _566 + ((((_505.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x);
    float _579 = fma(_572, _256, fma(_576, _263, _575 * _249));
    float _582 = fma(_572, _257, fma(_576, _264, _575 * _250));
    float _585 = fma(_572, _258, fma(_576, _265, _575 * _251));
    float _589 = inversesqrt(dot(vec3(_579, _582, _585), vec3(_579, _582, _585)));
    vec4 _605 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _631 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _306) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _307) + cbTextureTilingScale._m0[11u].w));
    float _633 = _631.x;
    float _634 = 1.0 - _633;
    float _640 = (cbMtdParam._m0[19u].x + dot(vec4(_589 * _579, _589 * _582, _589 * _585, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_633 - _634) * cbMtdParam._m0[24u].z) + _634) * cbMtdParam._m0[21u].z);
    float _4193 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _641 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
    float _643 = (-0.0) - cbMtdParam._m0[24u].x;
    float _645 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _646 = isnan(1.0) ? _645 : (isnan(_645) ? 1.0 : min(_645, 1.0));
    float _653 = _641 - ((_641 * TEXCOORD_8.x) * _646);
    float _654 = _641 - ((_641 * TEXCOORD_8.y) * _646);
    float _655 = _641 - ((_641 * TEXCOORD_8.z) * _646);
    float _662 = (_653 * ((_485.x * cbMtdParam._m0[18u].x) - _464)) + _464;
    float _663 = (_654 * ((_485.y * cbMtdParam._m0[18u].y) - _465)) + _465;
    float _664 = (_655 * ((_485.z * cbMtdParam._m0[18u].z) - _466)) + _466;
    vec4 _676 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _306) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _307) + cbTextureTilingScale._m0[19u].w));
    float _678 = _676.x;
    float _679 = 1.0 - _678;
    float _705 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_678 - _679) * cbMtdParam._m0[24u].w) + _679) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4214 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _706 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
    float _714 = ((((cbMtdParam._m0[10u].x - _662) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _706) + _662;
    float _715 = ((((cbMtdParam._m0[10u].y - _663) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _706) + _663;
    float _716 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _664)) * _706) + _664;
    vec4 _742 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _744 = _742.x;
    float _762 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _306) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _307) + cbTextureTilingScale._m0[9u].w)).x - _744) * _438) + _744;
    float _766 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _762) * cbMtdParam._m0[19u].z) + _762;
    float _768 = _766 - (_766 * _653);
    float _770 = _768 - (_768 * _706);
    float _775 = (((_505.z - _562) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _562;
    vec4 _789 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _306) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _307) + cbTextureTilingScale._m0[15u].w));
    float _796 = (_789.x * 2.0) + (-1.0);
    float _797 = (_789.y * 2.0) + (-1.0);
    float _798 = dot(vec2(_796, _797), vec2(_796, _797));
    float _4225 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
    float _806 = ((_789.z - _775) * _653) + _775;
    float _809 = ((cbMtdParam._m0[23u].y - _806) * _706) + _806;
    vec4 _828 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _306) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _307) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _834 = (_828.x * 2.0) + (-1.0);
    float _835 = (_828.y * 2.0) + (-1.0);
    float _836 = dot(vec2(_834, _835), vec2(_834, _835));
    float _4236 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
    float _851 = ((sqrt(1.0 - (isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0)))) - _572) * _655) + _572;
    float _854 = (((_796 - _575) * _653) + _575) + (cbMtdParam._m0[21u].x * _575);
    float _855 = (((_797 - _576) * _654) + _576) + (cbMtdParam._m0[21u].x * _576);
    float _866 = (((_834 - _854) + (_854 * cbMtdParam._m0[22u].z)) * _706) + _854;
    float _867 = (((_835 - _855) + (_855 * cbMtdParam._m0[22u].z)) * _706) + _855;
    float _868 = (_706 * (sqrt(1.0 - (isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0)))) - _851)) + _851;
    float _872 = cbMtdParam._m0[22u].x + _605.w;
    float _875 = fma(_868, _256, fma(_867, _263, _866 * _249));
    float _878 = fma(_868, _257, fma(_867, _264, _866 * _250));
    float _881 = fma(_868, _258, fma(_867, _265, _866 * _251));
    float _885 = inversesqrt(dot(vec3(_875, _878, _881), vec3(_875, _878, _881)));
    float _886 = _885 * _875;
    float _887 = _885 * _878;
    float _888 = _885 * _881;
    float _4247 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
    float _889 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
    float _4258 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
    float _4269 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
    float _4280 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _4291 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
    float _4302 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _894 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
    float _908 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _948 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _958 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _948);
    float _959 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _948);
    float _960 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _948);
    float _964 = inversesqrt(dot(vec3(_958, _959, _960), vec3(_958, _959, _960)));
    float _965 = _958 * _964;
    float _966 = _959 * _964;
    float _967 = _960 * _964;
    vec4 _972 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _974 = _972.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1146 = sqrt(((_958 * _958) + (_959 * _959)) + (_960 * _960));
        float _1152 = (cbMatDynParam._m0[5u].x * _1146) + cbMatDynParam._m0[5u].y;
        float _4313 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1153 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
        float _1157 = (cbMatDynParam._m0[5u].z * _1146) + cbMatDynParam._m0[5u].w;
        float _4324 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0))) - _1153)) + _1153) < ((_974 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _985 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _986 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1004 = fma(_888, cbSceneParam._m0[5u].z, fma(_887, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _886));
    float _1007 = fma(_888, cbSceneParam._m0[6u].z, fma(_887, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _886));
    float _1010 = fma(_888, cbSceneParam._m0[7u].z, fma(_887, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _886));
    uint _1023 = _287 + 9u;
    uint _1024 = _1023 + uint(cbMatDynParam._m0[0u].w);
    float _1030 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0)))) * cbInstanceData._m0[_1024].x;
    float _1031 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0)))) * cbInstanceData._m0[_1024].y;
    float _1032 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0)))) * cbInstanceData._m0[_1024].z;
    float _4335 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
    float _1033 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
    float _4346 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
    float _1034 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
    float _4357 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
    float _1035 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
    float _1036 = 1.0 - _894;
    float _1037 = _1033 * _1036;
    float _1038 = _1034 * _1036;
    float _1039 = _1035 * _1036;
    float _1044 = (_1033 + (-0.039999999105930328369140625)) * _894;
    float _1045 = (_1034 + (-0.039999999105930328369140625)) * _894;
    float _1046 = (_1035 + (-0.039999999105930328369140625)) * _894;
    float _1047 = _1044 + 0.039999999105930328369140625;
    float _1049 = _1045 + 0.039999999105930328369140625;
    float _1050 = _1046 + 0.039999999105930328369140625;
    vec4 _1059 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _985, cbSceneParam._m0[86u].y * _986));
    float _1063 = ((isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0))) * TEXCOORD_5.w) * _1059.x;
    float _1064 = dot(vec3(_886, _887, _888), vec3(_965, _966, _967));
    float _1067 = _1064 * 2.0;
    float _1071 = (_1067 * _886) - _965;
    float _1072 = (_1067 * _887) - _966;
    float _1073 = (_1067 * _888) - _967;
    float _1077 = abs(dot(vec3(_965, _966, _967), vec3(_886, _887, _888)));
    float _4368 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
    float _1079 = sqrt(_889);
    float _1092 = exp2((_1079 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1079 * 3.0));
    float _1098 = (1.0 - _1092) * ((_1079 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1099 = _1092 * _1079;
    float _1127 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1131 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1135 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1464;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1189 = fma(_1135, cbModelParam._m0[26u].z, fma(_1131, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1127));
        float _1193 = fma(_1135, cbModelParam._m0[27u].z, fma(_1131, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1127));
        float _1197 = fma(_1135, cbModelParam._m0[28u].z, fma(_1131, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1127));
        float _1222 = _1127 + _886;
        float _1223 = _1131 + _887;
        float _1224 = _1135 + _888;
        float _1234 = fma(_1224, cbModelParam._m0[26u].z, fma(_1223, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1222)) - _1189;
        float _1235 = fma(_1224, cbModelParam._m0[27u].z, fma(_1223, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1222)) - _1193;
        float _1236 = fma(_1224, cbModelParam._m0[28u].z, fma(_1223, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1222)) - _1197;
        float _1240 = inversesqrt(dot(vec3(_1234, _1235, _1236), vec3(_1234, _1235, _1236)));
        float _1253 = ((_1240 * _1234) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1189 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1254 = ((_1240 * _1235) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1193 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1255 = ((_1240 * _1236) / cbModelParam._m0[34u].z) + ((((((_1197 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1258 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1253, _1254, _1255), 0.0);
        vec4 _1265 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1253, _1254, _1255), 0.0);
        vec4 _1272 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1253, _1254, _1255), 0.0);
        vec4 _1279 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1253, _1254, _1255), 0.0);
        float _1292 = exp2((_1258.w + (-0.5)) * 20.0) * 2.0;
        float _1293 = _1292 * (_1258.x + (-0.5));
        float _1294 = _1292 * (_1258.y + (-0.5));
        float _1295 = _1292 * (_1258.z + (-0.5));
        float _1302 = exp2((_1265.w + (-0.5)) * 20.0) * 2.0;
        float _1303 = _1302 * (_1265.x + (-0.5));
        float _1304 = _1302 * (_1265.y + (-0.5));
        float _1305 = _1302 * (_1265.z + (-0.5));
        float _1312 = exp2((_1272.w + (-0.5)) * 20.0) * 2.0;
        float _1313 = _1312 * (_1272.x + (-0.5));
        float _1314 = _1312 * (_1272.y + (-0.5));
        float _1315 = _1312 * (_1272.z + (-0.5));
        float _1322 = exp2((_1279.w + (-0.5)) * 20.0) * 2.0;
        float _1323 = _1322 * (_1279.x + (-0.5));
        float _1324 = _1322 * (_1279.y + (-0.5));
        float _1325 = _1322 * (_1279.z + (-0.5));
        float _1326 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1327 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1328 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1329 = _1293 * 0.5;
        float _1330 = _1303 * 0.5;
        float _1331 = _1313 * 0.5;
        float _1332 = dot(vec3(_1329, _1330, _1331), vec3(_1329, _1330, _1331));
        float _1337 = (_1332 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1332);
        float _1346 = (dot(vec3(_886, _887, _888), vec3(_1337 * _1329, _1337 * _1330, _1337 * _1331)) + 1.0) * 0.5;
        float _4394 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1356 = sqrt(((_1330 * _1330) + (_1329 * _1329)) + (_1331 * _1331)) / (_1326 + 9.9999997473787516355514526367188e-06);
        float _4405 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1357 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
        float _1358 = _1357 * 2.0;
        float _1362 = (1.0 - _1357) / (_1357 + 1.0);
        float _4416 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1363 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
        float _1372 = ((((1.0 - _1363) * (_1358 + 2.0)) * exp2(log2(isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0))) * (_1358 + 1.0))) + _1363) * _1326;
        float _1373 = _1294 * 0.5;
        float _1374 = _1304 * 0.5;
        float _1375 = _1314 * 0.5;
        float _1376 = dot(vec3(_1373, _1374, _1375), vec3(_1373, _1374, _1375));
        float _1381 = (_1376 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1376);
        float _1389 = (dot(vec3(_886, _887, _888), vec3(_1381 * _1373, _1381 * _1374, _1381 * _1375)) + 1.0) * 0.5;
        float _4427 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1398 = sqrt(((_1374 * _1374) + (_1373 * _1373)) + (_1375 * _1375)) / (_1327 + 9.9999997473787516355514526367188e-06);
        float _4438 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1399 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
        float _1400 = _1399 * 2.0;
        float _1404 = (1.0 - _1399) / (_1399 + 1.0);
        float _4449 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1405 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
        float _1414 = ((((1.0 - _1405) * (_1400 + 2.0)) * exp2(log2(isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0))) * (_1400 + 1.0))) + _1405) * _1327;
        float _1415 = _1295 * 0.5;
        float _1416 = _1305 * 0.5;
        float _1417 = _1315 * 0.5;
        float _1418 = dot(vec3(_1415, _1416, _1417), vec3(_1415, _1416, _1417));
        float _1423 = (_1418 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1418);
        float _1431 = (dot(vec3(_886, _887, _888), vec3(_1423 * _1415, _1423 * _1416, _1423 * _1417)) + 1.0) * 0.5;
        float _4460 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1440 = sqrt(((_1416 * _1416) + (_1415 * _1415)) + (_1417 * _1417)) / (_1328 + 9.9999997473787516355514526367188e-06);
        float _4471 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1441 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
        float _1442 = _1441 * 2.0;
        float _1446 = (1.0 - _1441) / (_1441 + 1.0);
        float _4482 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1447 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
        float _1456 = ((((1.0 - _1447) * (_1442 + 2.0)) * exp2(log2(isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0))) * (_1442 + 1.0))) + _1447) * _1328;
        _1464 = _1295;
        _1466 = _1294;
        _1467 = _1293;
        _1468 = _1305;
        _1469 = _1304;
        _1470 = _1303;
        _1471 = _1315;
        _1472 = _1314;
        _1473 = _1313;
        _1474 = _1328;
        _1475 = _1327;
        _1476 = _1326;
        _1477 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0)));
        _1478 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0)));
        _1479 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0)));
    }
    else
    {
        _1464 = _1465;
        _1466 = _1465;
        _1467 = _1465;
        _1468 = _1465;
        _1469 = _1465;
        _1470 = _1465;
        _1471 = _1465;
        _1472 = _1465;
        _1473 = _1465;
        _1474 = _1465;
        _1475 = _1465;
        _1476 = _1465;
        _1477 = 0.0;
        _1478 = 0.0;
        _1479 = 0.0;
    }
    float _1776;
    float _1777;
    float _1778;
    float _1779;
    float _1780;
    float _1781;
    float _1782;
    float _1783;
    float _1784;
    float _1785;
    float _1786;
    float _1787;
    float _1788;
    float _1789;
    float _1790;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1507 = fma(_1135, cbModelParam._m0[30u].z, fma(_1131, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1127));
        float _1511 = fma(_1135, cbModelParam._m0[31u].z, fma(_1131, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1127));
        float _1515 = fma(_1135, cbModelParam._m0[32u].z, fma(_1131, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1127));
        float _1538 = _1127 + _886;
        float _1539 = _1131 + _887;
        float _1540 = _1135 + _888;
        float _1550 = fma(_1540, cbModelParam._m0[30u].z, fma(_1539, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1538)) - _1507;
        float _1551 = fma(_1540, cbModelParam._m0[31u].z, fma(_1539, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1538)) - _1511;
        float _1552 = fma(_1540, cbModelParam._m0[32u].z, fma(_1539, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1538)) - _1515;
        float _1556 = inversesqrt(dot(vec3(_1550, _1551, _1552), vec3(_1550, _1551, _1552)));
        float _1569 = ((_1556 * _1550) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1507 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1570 = ((_1556 * _1551) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1511 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1571 = ((_1556 * _1552) / cbModelParam._m0[35u].z) + ((((((_1515 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1573 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1569, _1570, _1571), 0.0);
        vec4 _1580 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1569, _1570, _1571), 0.0);
        vec4 _1587 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1569, _1570, _1571), 0.0);
        vec4 _1594 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1569, _1570, _1571), 0.0);
        float _1606 = exp2((_1573.w + (-0.5)) * 20.0) * 2.0;
        float _1607 = _1606 * (_1573.x + (-0.5));
        float _1608 = _1606 * (_1573.y + (-0.5));
        float _1609 = _1606 * (_1573.z + (-0.5));
        float _1616 = exp2((_1580.w + (-0.5)) * 20.0) * 2.0;
        float _1617 = _1616 * (_1580.x + (-0.5));
        float _1618 = _1616 * (_1580.y + (-0.5));
        float _1619 = _1616 * (_1580.z + (-0.5));
        float _1626 = exp2((_1587.w + (-0.5)) * 20.0) * 2.0;
        float _1627 = _1626 * (_1587.x + (-0.5));
        float _1628 = _1626 * (_1587.y + (-0.5));
        float _1629 = _1626 * (_1587.z + (-0.5));
        float _1636 = exp2((_1594.w + (-0.5)) * 20.0) * 2.0;
        float _1637 = _1636 * (_1594.x + (-0.5));
        float _1638 = _1636 * (_1594.y + (-0.5));
        float _1639 = _1636 * (_1594.z + (-0.5));
        float _1640 = isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0));
        float _1641 = isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0));
        float _1642 = isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0));
        float _1643 = _1607 * 0.5;
        float _1644 = _1617 * 0.5;
        float _1645 = _1627 * 0.5;
        float _1646 = dot(vec3(_1643, _1644, _1645), vec3(_1643, _1644, _1645));
        float _1651 = (_1646 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1646);
        float _1659 = (dot(vec3(_886, _887, _888), vec3(_1651 * _1643, _1651 * _1644, _1651 * _1645)) + 1.0) * 0.5;
        float _4523 = isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0));
        float _1668 = sqrt(((_1644 * _1644) + (_1643 * _1643)) + (_1645 * _1645)) / (_1640 + 9.9999997473787516355514526367188e-06);
        float _4534 = isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0));
        float _1669 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
        float _1670 = _1669 * 2.0;
        float _1674 = (1.0 - _1669) / (_1669 + 1.0);
        float _4545 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
        float _1675 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
        float _1684 = ((((1.0 - _1675) * (_1670 + 2.0)) * exp2(log2(isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0))) * (_1670 + 1.0))) + _1675) * _1640;
        float _1685 = _1608 * 0.5;
        float _1686 = _1618 * 0.5;
        float _1687 = _1628 * 0.5;
        float _1688 = dot(vec3(_1685, _1686, _1687), vec3(_1685, _1686, _1687));
        float _1693 = (_1688 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1688);
        float _1701 = (dot(vec3(_886, _887, _888), vec3(_1693 * _1685, _1693 * _1686, _1693 * _1687)) + 1.0) * 0.5;
        float _4556 = isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0));
        float _1710 = sqrt(((_1686 * _1686) + (_1685 * _1685)) + (_1687 * _1687)) / (_1641 + 9.9999997473787516355514526367188e-06);
        float _4567 = isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0));
        float _1711 = isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0));
        float _1712 = _1711 * 2.0;
        float _1716 = (1.0 - _1711) / (_1711 + 1.0);
        float _4578 = isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0));
        float _1717 = isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0));
        float _1726 = ((((1.0 - _1717) * (_1712 + 2.0)) * exp2(log2(isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0))) * (_1712 + 1.0))) + _1717) * _1641;
        float _1727 = _1609 * 0.5;
        float _1728 = _1619 * 0.5;
        float _1729 = _1629 * 0.5;
        float _1730 = dot(vec3(_1727, _1728, _1729), vec3(_1727, _1728, _1729));
        float _1735 = (_1730 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1730);
        float _1743 = (dot(vec3(_886, _887, _888), vec3(_1735 * _1727, _1735 * _1728, _1735 * _1729)) + 1.0) * 0.5;
        float _4589 = isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0));
        float _1752 = sqrt(((_1728 * _1728) + (_1727 * _1727)) + (_1729 * _1729)) / (_1642 + 9.9999997473787516355514526367188e-06);
        float _4600 = isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0));
        float _1753 = isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0));
        float _1754 = _1753 * 2.0;
        float _1758 = (1.0 - _1753) / (_1753 + 1.0);
        float _4611 = isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0));
        float _1759 = isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0));
        float _1768 = ((((1.0 - _1759) * (_1754 + 2.0)) * exp2(log2(isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0))) * (_1754 + 1.0))) + _1759) * _1642;
        _1776 = _1609;
        _1777 = _1608;
        _1778 = _1607;
        _1779 = _1619;
        _1780 = _1618;
        _1781 = _1617;
        _1782 = _1629;
        _1783 = _1628;
        _1784 = _1627;
        _1785 = _1642;
        _1786 = _1641;
        _1787 = _1640;
        _1788 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0)));
        _1789 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0)));
        _1790 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0)));
    }
    else
    {
        _1776 = _1465;
        _1777 = _1465;
        _1778 = _1465;
        _1779 = _1465;
        _1780 = _1465;
        _1781 = _1465;
        _1782 = _1465;
        _1783 = _1465;
        _1784 = _1465;
        _1785 = _1465;
        _1786 = _1465;
        _1787 = _1465;
        _1788 = 0.0;
        _1789 = 0.0;
        _1790 = 0.0;
    }
    float _1800 = (cbModelParam._m0[1u].x * (_1788 - _1477)) + _1477;
    float _1801 = (cbModelParam._m0[1u].x * (_1789 - _1478)) + _1478;
    float _1802 = (cbModelParam._m0[1u].x * (_1790 - _1479)) + _1479;
    float _1823 = fma(_1802, cbSceneParam._m0[89u].z, fma(_1801, cbSceneParam._m0[89u].y, _1800 * cbSceneParam._m0[89u].x));
    float _1826 = fma(_1802, cbSceneParam._m0[90u].z, fma(_1801, cbSceneParam._m0[90u].y, _1800 * cbSceneParam._m0[90u].x));
    float _1829 = fma(_1802, cbSceneParam._m0[91u].z, fma(_1801, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1800));
    float _1844 = _1071 * 0.5;
    float _1845 = _1072 * 0.5;
    float _1846 = _1073 * 0.5;
    float _1847 = dot(vec4(_1844, _1845, _1846, 1.0), vec4(_1778, _1781, _1784, _1787));
    float _1850 = dot(vec4(_1844, _1845, _1846, 1.0), vec4(_1777, _1780, _1783, _1786));
    float _1853 = dot(vec4(_1844, _1845, _1846, 1.0), vec4(_1776, _1779, _1782, _1785));
    float _1887;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1860 = dot(vec4(_1844, _1845, _1846, 1.0), vec4(_1464, _1468, _1471, _1474));
        float _1864 = dot(vec4(_1844, _1845, _1846, 1.0), vec4(_1466, _1469, _1472, _1475));
        float _1868 = dot(vec4(_1844, _1845, _1846, 1.0), vec4(_1467, _1470, _1473, _1476));
        float _1875 = dot(vec4(cbModelParam._m0[39u]), vec4(_1844, _1845, _1846, 1.0));
        _1887 = dot(vec3(isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0)), isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0)), isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1875) ? 0.0 : (isnan(0.0) ? _1875 : max(0.0, _1875))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1887 = 1.0;
    }
    float _1898;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1889 = dot(vec4(cbModelParam._m0[40u]), vec4(_1844, _1845, _1846, 1.0));
        _1898 = dot(vec3(isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0)), isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0)), isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1889) ? 0.0 : (isnan(0.0) ? _1889 : max(0.0, _1889))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1898 = 1.0;
    }
    float _1902 = (_1898 * cbModelParam._m0[1u].x) + (_1887 * (1.0 - cbModelParam._m0[1u].x));
    float _1912 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _889);
    float _1913 = isnan(_1912) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1912 : min(cbModelParam._m0[25u].z, _1912));
    float _1993;
    float _1995;
    float _1997;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1960 = fma(_1135, cbModelParam._m0[13u].z, fma(_1131, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1127)) + cbModelParam._m0[13u].w;
        float _1964 = fma(_1135, cbModelParam._m0[14u].z, fma(_1131, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1127)) + cbModelParam._m0[14u].w;
        float _1968 = fma(_1135, cbModelParam._m0[15u].z, fma(_1131, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1127)) + cbModelParam._m0[15u].w;
        float _1971 = fma(_1073, cbModelParam._m0[13u].z, fma(_1072, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1071));
        float _1974 = fma(_1073, cbModelParam._m0[14u].z, fma(_1072, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1071));
        float _1977 = fma(_1073, cbModelParam._m0[15u].z, fma(_1072, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1071));
        float _2005;
        if (_1971 > 0.0)
        {
            _2005 = abs((1.0 - _1960) / _1971);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1971 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1960 + 1.0) / _1971);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2005 = frontier_phi_17_15_ladder;
        }
        float _2176;
        if (_1974 > 0.0)
        {
            _2176 = abs((1.0 - _1964) / _1974);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1974 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1964 + 1.0) / _1974);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2176 = frontier_phi_26_22_ladder;
        }
        float _2471;
        if (_1977 > 0.0)
        {
            _2471 = abs((1.0 - _1968) / _1977);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1977 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1968 + 1.0) / _1977);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2471 = frontier_phi_38_33_ladder;
        }
        float _2473 = isnan(_2176) ? _2005 : (isnan(_2005) ? _2176 : min(_2005, _2176));
        float _2474 = isnan(_2471) ? _2473 : (isnan(_2473) ? _2471 : min(_2473, _2471));
        float _2478 = (_2474 * _1971) + _1960;
        float _2479 = (_2474 * _1974) + _1964;
        float _2480 = (_2474 * _1977) + _1968;
        float _2481 = _2474 * 9.9999997473787516355514526367188e-05;
        float _2483 = (-1.0) - _2481;
        float _2485 = _2481 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2480 > _2485) || ((_2480 < _2483) || ((_2479 > _2485) || ((_2479 < _2483) || ((_2478 < _2483) || (_2478 > _2485))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2625 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2480, cbModelParam._m0[9u].z, fma(_2479, cbModelParam._m0[9u].y, _2478 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2480, cbModelParam._m0[10u].z, fma(_2479, cbModelParam._m0[10u].y, _2478 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2480, cbModelParam._m0[11u].z, fma(_2479, cbModelParam._m0[11u].y, _2478 * cbModelParam._m0[11u].x))), _1913);
            frontier_phi_16_38_ladder = _2625.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2625.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2625.x * cbModelParam._m0[1u].y;
        }
        _1993 = frontier_phi_16_38_ladder_2;
        _1995 = frontier_phi_16_38_ladder_1;
        _1997 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1981 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1071, _1072, _1073), _1913);
        _1993 = _1981.x * cbModelParam._m0[1u].y;
        _1995 = _1981.y * cbModelParam._m0[1u].y;
        _1997 = _1981.z * cbModelParam._m0[1u].y;
    }
    float _2001 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _889);
    float _2002 = isnan(_2001) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2001 : min(cbModelParam._m0[25u].w, _2001));
    float _2091;
    float _2093;
    float _2095;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2055 = fma(_1135, cbModelParam._m0[21u].z, fma(_1131, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1127)) + cbModelParam._m0[21u].w;
        float _2059 = fma(_1135, cbModelParam._m0[22u].z, fma(_1131, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1127)) + cbModelParam._m0[22u].w;
        float _2063 = fma(_1135, cbModelParam._m0[23u].z, fma(_1131, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1127)) + cbModelParam._m0[23u].w;
        float _2066 = fma(_1073, cbModelParam._m0[21u].z, fma(_1072, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1071));
        float _2069 = fma(_1073, cbModelParam._m0[22u].z, fma(_1072, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1071));
        float _2072 = fma(_1073, cbModelParam._m0[23u].z, fma(_1072, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1071));
        float _2181;
        if (_2066 > 0.0)
        {
            _2181 = abs((1.0 - _2055) / _2066);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2066 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2055 + 1.0) / _2066);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2181 = frontier_phi_28_24_ladder;
        }
        float _2498;
        if (_2069 > 0.0)
        {
            _2498 = abs((1.0 - _2059) / _2069);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2069 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2059 + 1.0) / _2069);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2498 = frontier_phi_40_35_ladder;
        }
        float _2836;
        if (_2072 > 0.0)
        {
            _2836 = abs((1.0 - _2063) / _2072);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2072 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2063 + 1.0) / _2072);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2836 = frontier_phi_50_47_ladder;
        }
        float _2838 = isnan(_2498) ? _2181 : (isnan(_2181) ? _2498 : min(_2181, _2498));
        float _2839 = isnan(_2836) ? _2838 : (isnan(_2838) ? _2836 : min(_2838, _2836));
        float _2843 = (_2839 * _2066) + _2055;
        float _2844 = (_2839 * _2069) + _2059;
        float _2845 = (_2839 * _2072) + _2063;
        float _2846 = _2839 * 9.9999997473787516355514526367188e-05;
        float _2847 = (-1.0) - _2846;
        float _2849 = _2846 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2845 > _2849) || ((_2845 < _2847) || ((_2844 > _2849) || ((_2844 < _2847) || ((_2843 < _2847) || (_2843 > _2849))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2967 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2845, cbModelParam._m0[17u].z, fma(_2844, cbModelParam._m0[17u].y, _2843 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2845, cbModelParam._m0[18u].z, fma(_2844, cbModelParam._m0[18u].y, _2843 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2845, cbModelParam._m0[19u].z, fma(_2844, cbModelParam._m0[19u].y, _2843 * cbModelParam._m0[19u].x))), _2002);
            frontier_phi_25_50_ladder = _2967.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2967.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2967.x * cbModelParam._m0[1u].z;
        }
        _2091 = frontier_phi_25_50_ladder_2;
        _2093 = frontier_phi_25_50_ladder_1;
        _2095 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2075 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1071, _1072, _1073), _2002);
        _2091 = _2075.x * cbModelParam._m0[1u].z;
        _2093 = _2075.y * cbModelParam._m0[1u].z;
        _2095 = _2075.z * cbModelParam._m0[1u].z;
    }
    float _2108 = (((_1098 * _1047) + _1099) * _1063) * ((cbModelParam._m0[1u].w * (_2091 - _1993)) + _1993);
    float _2110 = (((_1098 * _1049) + _1099) * _1063) * ((cbModelParam._m0[1u].w * (_2093 - _1995)) + _1995);
    float _2112 = (((_1098 * _1050) + _1099) * _1063) * ((cbModelParam._m0[1u].w * (_2095 - _1997)) + _1997);
    float _2115 = fma(_2112, cbSceneParam._m0[89u].z, fma(_2110, cbSceneParam._m0[89u].y, _2108 * cbSceneParam._m0[89u].x));
    float _2118 = fma(_2112, cbSceneParam._m0[90u].z, fma(_2110, cbSceneParam._m0[90u].y, _2108 * cbSceneParam._m0[90u].x));
    float _2121 = fma(_2112, cbSceneParam._m0[91u].z, fma(_2110, cbSceneParam._m0[91u].y, _2108 * cbSceneParam._m0[91u].x));
    float _2155 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2159 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2163 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2167 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2168 = _2155 / _2167;
    float _2169 = _2159 / _2167;
    float _2170 = _2163 / _2167;
    float _2317;
    float _2318;
    float _2319;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2197 = ((uint(_2170 > cbSceneParam._m0[59u].y) + uint(_2170 > cbSceneParam._m0[59u].x)) + uint(_2170 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2198 = _2197 + 43u;
        uint _2206 = _2197 + 44u;
        uint _2214 = _2197 + 45u;
        uint _2222 = _2197 + 46u;
        float _2233 = fma(_2167, cbSceneParam._m0[_2198].w, fma(_2163, cbSceneParam._m0[_2198].z, fma(_2159, cbSceneParam._m0[_2198].y, _2155 * cbSceneParam._m0[_2198].x)));
        float _2237 = fma(_2167, cbSceneParam._m0[_2206].w, fma(_2163, cbSceneParam._m0[_2206].z, fma(_2159, cbSceneParam._m0[_2206].y, _2155 * cbSceneParam._m0[_2206].x)));
        float _2245 = fma(_2167, cbSceneParam._m0[_2222].w, fma(_2163, cbSceneParam._m0[_2222].z, fma(_2159, cbSceneParam._m0[_2222].y, _2155 * cbSceneParam._m0[_2222].x)));
        float _2250 = cbSceneParam._m0[33u].z * _2245;
        float _2252 = cbSceneParam._m0[33u].w * _2245;
        float _2255 = fma(_2167, cbSceneParam._m0[_2214].w, fma(_2163, cbSceneParam._m0[_2214].z, fma(_2159, cbSceneParam._m0[_2214].y, _2155 * cbSceneParam._m0[_2214].x))) / _2245;
        float _2303 = (cbSceneParam._m0[33u].x - sqrt(((_2169 * _2169) + (_2168 * _2168)) + (_2170 * _2170))) * cbSceneParam._m0[33u].y;
        float _4737 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
        float _2310 = (isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2250 + _2233) / _2245, (_2252 + _2237) / _2245), _2255), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2252 + _2233) / _2245, (_2237 - _2250) / _2245), _2255), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2233 - _2250) / _2245, (_2237 - _2252) / _2245), _2255), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2233 - _2252) / _2245, (_2250 + _2237) / _2245), _2255), 0.0)).x), vec4(0.25)));
        _2317 = 1.0 - (_2310 * cbSceneParam._m0[34u].x);
        _2318 = 1.0 - (_2310 * cbSceneParam._m0[34u].y);
        _2319 = 1.0 - (_2310 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2317 = 1.0;
        _2318 = 1.0;
        _2319 = 1.0;
    }
    float _2383;
    float _2385;
    float _2387;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2371 = fma(_2167, cbSceneParam._m0[63u].w, fma(_2163, cbSceneParam._m0[63u].z, fma(_2159, cbSceneParam._m0[63u].y, _2155 * cbSceneParam._m0[63u].x)));
        float _2372 = fma(_2167, cbSceneParam._m0[60u].w, fma(_2163, cbSceneParam._m0[60u].z, fma(_2159, cbSceneParam._m0[60u].y, _2155 * cbSceneParam._m0[60u].x))) / _2371;
        float _2373 = fma(_2167, cbSceneParam._m0[61u].w, fma(_2163, cbSceneParam._m0[61u].z, fma(_2159, cbSceneParam._m0[61u].y, _2155 * cbSceneParam._m0[61u].x))) / _2371;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2372 >= cbSceneParam._m0[64u].x) && (_2373 >= cbSceneParam._m0[64u].y)) && (_2372 <= cbSceneParam._m0[64u].z)) && (_2373 <= cbSceneParam._m0[64u].w))
        {
            float _2511 = fma(_2167, cbSceneParam._m0[62u].w, fma(_2163, cbSceneParam._m0[62u].z, fma(_2159, cbSceneParam._m0[62u].y, _2155 * cbSceneParam._m0[62u].x))) / _2371;
            float _2515 = isnan(cbSceneParam._m0[41u].w) ? _2511 : (isnan(_2511) ? cbSceneParam._m0[41u].w : max(_2511, cbSceneParam._m0[41u].w));
            float _2558 = (cbSceneParam._m0[33u].x - sqrt(((_2169 * _2169) + (_2168 * _2168)) + (_2170 * _2170))) * cbSceneParam._m0[33u].y;
            float _4753 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0));
            float _2565 = (isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2372, cbSceneParam._m0[33u].w + _2373), _2515), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2372, _2373 - cbSceneParam._m0[33u].z), _2515), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2372 - cbSceneParam._m0[33u].z, _2373 - cbSceneParam._m0[33u].w), _2515), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2372 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2373), _2515), 0.0)).x), vec4(0.25)));
            float _2569 = 1.0 - (_2565 * cbSceneParam._m0[34u].x);
            float _2570 = 1.0 - (_2565 * cbSceneParam._m0[34u].y);
            float _2571 = 1.0 - (_2565 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2571) ? _2319 : (isnan(_2319) ? _2571 : min(_2319, _2571));
            frontier_phi_37_36_ladder_1 = isnan(_2570) ? _2318 : (isnan(_2318) ? _2570 : min(_2318, _2570));
            frontier_phi_37_36_ladder_2 = isnan(_2569) ? _2317 : (isnan(_2317) ? _2569 : min(_2317, _2569));
        }
        else
        {
            frontier_phi_37_36_ladder = _2319;
            frontier_phi_37_36_ladder_1 = _2318;
            frontier_phi_37_36_ladder_2 = _2317;
        }
        _2383 = frontier_phi_37_36_ladder_2;
        _2385 = frontier_phi_37_36_ladder_1;
        _2387 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2383 = _2317;
        _2385 = _2318;
        _2387 = _2319;
    }
    uvec4 _2392 = floatBitsToUint(cbInstanceData._m0[_287 + 5u]);
    uint _2394 = _2392.x * 14u;
    uint _2395 = _2394 + 13u;
    float _2402 = _1063 + (-1.0);
    float _2407 = (cbLight._m0[_2395].x * _2402) + 1.0;
    float _2408 = (cbLight._m0[_2395].y * _2402) + 1.0;
    float _2409 = (cbLight._m0[_2395].z * _2402) + 1.0;
    float _2410 = (cbLight._m0[_2395].w * _2402) + 1.0;
    uint _2411 = _2394 + 5u;
    float _2417 = isnan(1.0) ? _2408 : (isnan(_2408) ? 1.0 : min(_2408, 1.0));
    uint _2421 = _2394 + 4u;
    float _2430 = isnan(1.0) ? _2407 : (isnan(_2407) ? 1.0 : min(_2407, 1.0));
    uint _2434 = _2394 | 1u;
    float _2445 = dot(vec3(cbLight._m0[_2394].xyz), vec3(_886, _887, _888));
    float _2448 = dot(vec3(cbLight._m0[_2434].xyz), vec3(_886, _887, _888));
    float _4789 = isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0));
    float _4800 = isnan(0.0) ? _2448 : (isnan(_2448) ? 0.0 : max(_2448, 0.0));
    float _2453 = (isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0))) * 0.3183098733425140380859375;
    float _2455 = (isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0))) * 0.3183098733425140380859375;
    float _2462 = ((cbLight._m0[_2411].x * _2417) * _2455) + (((cbLight._m0[_2421].x * _2383) * _2430) * _2453);
    float _2463 = ((_2417 * cbLight._m0[_2411].y) * _2455) + (((cbLight._m0[_2421].y * _2385) * _2430) * _2453);
    float _2464 = ((_2417 * cbLight._m0[_2411].z) * _2455) + (((cbLight._m0[_2421].z * _2387) * _2430) * _2453);
    uvec4 _2468 = floatBitsToUint(cbLight._m0[_2394 + 12u]);
    bool _2470 = _2468.x == 0u;
    float _2572;
    float _2574;
    float _2576;
    if (_2470)
    {
        _2572 = _2462;
        _2574 = _2463;
        _2576 = _2464;
    }
    else
    {
        uint _2580 = _2394 + 6u;
        float _2596 = (dot(vec3(cbLight._m0[_2394 + 2u].xyz), vec3(_886, _887, _888)) * 0.5) + 0.5;
        float _2597 = _2596 * _2596;
        float _4811 = isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0));
        float _2598 = isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0));
        float _2599 = isnan(1.0) ? _2409 : (isnan(_2409) ? 1.0 : min(_2409, 1.0));
        _2572 = (((cbLight._m0[_2580].x * 0.3183098733425140380859375) * _2598) * _2599) + _2462;
        _2574 = (((cbLight._m0[_2580].y * 0.3183098733425140380859375) * _2598) * _2599) + _2463;
        _2576 = (((cbLight._m0[_2580].z * 0.3183098733425140380859375) * _2598) * _2599) + _2464;
    }
    bool _2579 = _2468.y == 0u;
    float _2634;
    float _2636;
    float _2638;
    if (_2579)
    {
        _2634 = _2572;
        _2636 = _2574;
        _2638 = _2576;
    }
    else
    {
        uint _2807 = _2394 + 7u;
        float _2823 = (dot(vec3(cbLight._m0[_2394 + 3u].xyz), vec3(_886, _887, _888)) * 0.5) + 0.5;
        float _2824 = _2823 * _2823;
        float _4827 = isnan(0.0) ? _2824 : (isnan(_2824) ? 0.0 : max(_2824, 0.0));
        float _2825 = isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0));
        float _2826 = isnan(1.0) ? _2410 : (isnan(_2410) ? 1.0 : min(_2410, 1.0));
        _2634 = (((cbLight._m0[_2807].x * 0.3183098733425140380859375) * _2825) * _2826) + _2572;
        _2636 = (((cbLight._m0[_2807].y * 0.3183098733425140380859375) * _2825) * _2826) + _2574;
        _2638 = (((cbLight._m0[_2807].z * 0.3183098733425140380859375) * _2825) * _2826) + _2576;
    }
    uint _2641 = _2394 + 8u;
    float _2654 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2394].w)) * _889) * 0.949999988079071044921875);
    float _2655 = _2654 * _2654;
    float _2656 = cbLight._m0[_2394].x + _965;
    float _2657 = cbLight._m0[_2394].y + _966;
    float _2658 = cbLight._m0[_2394].z + _967;
    float _2662 = inversesqrt(dot(vec3(_2656, _2657, _2658), vec3(_2656, _2657, _2658)));
    float _2663 = _2662 * _2656;
    float _2664 = _2662 * _2657;
    float _2665 = _2662 * _2658;
    float _2666 = dot(vec3(_886, _887, _888), vec3(cbLight._m0[_2394].xyz));
    float _4843 = isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : max(_2666, 0.0));
    float _2669 = isnan(1.0) ? _4843 : (isnan(_4843) ? 1.0 : min(_4843, 1.0));
    float _4854 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
    float _2670 = isnan(1.0) ? _4854 : (isnan(_4854) ? 1.0 : min(_4854, 1.0));
    float _2671 = dot(vec3(_886, _887, _888), vec3(_2663, _2664, _2665));
    float _4865 = isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : max(_2671, 0.0));
    float _2674 = isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0));
    float _2675 = dot(vec3(cbLight._m0[_2394].xyz), vec3(_2663, _2664, _2665));
    float _4876 = isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : max(_2675, 0.0));
    float _2679 = _2655 * _2655;
    float _2683 = ((_2674 * _2674) * (_2679 + (-1.0))) + 1.0;
    float _2691 = exp2(log2(1.0 - (isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0)))) * 5.0);
    float _2692 = 0.959999978542327880859375 - _1044;
    float _2694 = 0.959999978542327880859375 - _1045;
    float _2695 = 0.959999978542327880859375 - _1046;
    float _2702 = 1.0 - _2655;
    float _2713 = (0.5 / (((_2670 * ((_2669 * _2702) + _2655)) + 9.9999999392252902907785028219223e-09) + (((_2670 * _2702) + _2655) * _2669))) * _2669;
    float _4887 = isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : max(_2713, 0.0));
    float _2715 = (isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0))) * (_2679 / ((_2683 * _2683) * 3.141590118408203125));
    uint _2729 = _2394 + 9u;
    float _2740 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2434].w)) * _889) * 0.949999988079071044921875);
    float _2741 = _2740 * _2740;
    float _2742 = cbLight._m0[_2434].x + _965;
    float _2743 = cbLight._m0[_2434].y + _966;
    float _2744 = cbLight._m0[_2434].z + _967;
    float _2748 = inversesqrt(dot(vec3(_2742, _2743, _2744), vec3(_2742, _2743, _2744)));
    float _2749 = _2748 * _2742;
    float _2750 = _2748 * _2743;
    float _2751 = _2748 * _2744;
    float _2752 = dot(vec3(_886, _887, _888), vec3(cbLight._m0[_2434].xyz));
    float _4898 = isnan(0.0) ? _2752 : (isnan(_2752) ? 0.0 : max(_2752, 0.0));
    float _2755 = isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0));
    float _2756 = dot(vec3(_886, _887, _888), vec3(_2749, _2750, _2751));
    float _4909 = isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : max(_2756, 0.0));
    float _2759 = isnan(1.0) ? _4909 : (isnan(_4909) ? 1.0 : min(_4909, 1.0));
    float _2760 = dot(vec3(cbLight._m0[_2434].xyz), vec3(_2749, _2750, _2751));
    float _4920 = isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0));
    float _2764 = _2741 * _2741;
    float _2768 = ((_2759 * _2759) * (_2764 + (-1.0))) + 1.0;
    float _2775 = exp2(log2(1.0 - (isnan(1.0) ? _4920 : (isnan(_4920) ? 1.0 : min(_4920, 1.0)))) * 5.0);
    float _2782 = 1.0 - _2741;
    float _2792 = (0.5 / (((_2670 * ((_2755 * _2782) + _2741)) + 9.9999999392252902907785028219223e-09) + (((_2670 * _2782) + _2741) * _2755))) * _2755;
    float _4931 = isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : max(_2792, 0.0));
    float _2794 = (isnan(1.0) ? _4931 : (isnan(_4931) ? 1.0 : min(_4931, 1.0))) * (_2764 / ((_2768 * _2768) * 3.141590118408203125));
    float _2804 = (((((_2775 * _2692) + _1047) * cbLight._m0[_2729].x) * _2794) * _2417) + ((((cbLight._m0[_2641].x * _2383) * ((_2691 * _2692) + _1047)) * _2715) * _2430);
    float _2805 = (((((_2775 * _2694) + _1049) * cbLight._m0[_2729].y) * _2794) * _2417) + ((((cbLight._m0[_2641].y * _2385) * ((_2691 * _2694) + _1049)) * _2715) * _2430);
    float _2806 = (((((_2775 * _2695) + _1050) * cbLight._m0[_2729].z) * _2794) * _2417) + ((((cbLight._m0[_2641].z * _2387) * ((_2691 * _2695) + _1050)) * _2715) * _2430);
    float _2862;
    float _2864;
    float _2866;
    if (_2470)
    {
        _2862 = _2804;
        _2864 = _2805;
        _2866 = _2806;
    }
    else
    {
        uint _2868 = _2394 + 2u;
        uint _2872 = _2394 + 10u;
        float _2886 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2868].w)) * _889) * 0.949999988079071044921875);
        float _2887 = _2886 * _2886;
        float _2888 = cbLight._m0[_2868].x + _965;
        float _2889 = cbLight._m0[_2868].y + _966;
        float _2890 = cbLight._m0[_2868].z + _967;
        float _2894 = inversesqrt(dot(vec3(_2888, _2889, _2890), vec3(_2888, _2889, _2890)));
        float _2895 = _2894 * _2888;
        float _2896 = _2894 * _2889;
        float _2897 = _2894 * _2890;
        float _2898 = dot(vec3(_886, _887, _888), vec3(cbLight._m0[_2868].xyz));
        float _4942 = isnan(0.0) ? _2898 : (isnan(_2898) ? 0.0 : max(_2898, 0.0));
        float _2901 = isnan(1.0) ? _4942 : (isnan(_4942) ? 1.0 : min(_4942, 1.0));
        float _2902 = dot(vec3(_886, _887, _888), vec3(_2895, _2896, _2897));
        float _4953 = isnan(0.0) ? _2902 : (isnan(_2902) ? 0.0 : max(_2902, 0.0));
        float _2905 = isnan(1.0) ? _4953 : (isnan(_4953) ? 1.0 : min(_4953, 1.0));
        float _2906 = dot(vec3(cbLight._m0[_2868].xyz), vec3(_2895, _2896, _2897));
        float _4964 = isnan(0.0) ? _2906 : (isnan(_2906) ? 0.0 : max(_2906, 0.0));
        float _2910 = _2887 * _2887;
        float _2914 = ((_2905 * _2905) * (_2910 + (-1.0))) + 1.0;
        float _2921 = exp2(log2(1.0 - (isnan(1.0) ? _4964 : (isnan(_4964) ? 1.0 : min(_4964, 1.0)))) * 5.0);
        float _2928 = 1.0 - _2887;
        float _2938 = (0.5 / (((_2670 * ((_2901 * _2928) + _2887)) + 9.9999999392252902907785028219223e-09) + (((_2670 * _2928) + _2887) * _2901))) * _2901;
        float _4975 = isnan(0.0) ? _2938 : (isnan(_2938) ? 0.0 : max(_2938, 0.0));
        float _2940 = (isnan(1.0) ? _4975 : (isnan(_4975) ? 1.0 : min(_4975, 1.0))) * (_2910 / ((_2914 * _2914) * 3.141590118408203125));
        float _2941 = isnan(1.0) ? _2409 : (isnan(_2409) ? 1.0 : min(_2409, 1.0));
        _2862 = (((((_2921 * _2692) + _1047) * cbLight._m0[_2872].x) * _2940) * _2941) + _2804;
        _2864 = (((((_2921 * _2694) + _1049) * cbLight._m0[_2872].y) * _2940) * _2941) + _2805;
        _2866 = (((((_2921 * _2695) + _1050) * cbLight._m0[_2872].z) * _2940) * _2941) + _2806;
    }
    float _2972;
    float _2974;
    float _2976;
    if (_2579)
    {
        _2972 = _2862;
        _2974 = _2864;
        _2976 = _2866;
    }
    else
    {
        uint _2983 = _2394 + 3u;
        uint _2987 = _2394 + 11u;
        float _3001 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2983].w)) * _889) * 0.949999988079071044921875);
        float _3002 = _3001 * _3001;
        float _3003 = cbLight._m0[_2983].x + _965;
        float _3004 = cbLight._m0[_2983].y + _966;
        float _3005 = cbLight._m0[_2983].z + _967;
        float _3009 = inversesqrt(dot(vec3(_3003, _3004, _3005), vec3(_3003, _3004, _3005)));
        float _3010 = _3009 * _3003;
        float _3011 = _3009 * _3004;
        float _3012 = _3009 * _3005;
        float _3013 = dot(vec3(_886, _887, _888), vec3(cbLight._m0[_2983].xyz));
        float _4991 = isnan(0.0) ? _3013 : (isnan(_3013) ? 0.0 : max(_3013, 0.0));
        float _3016 = isnan(1.0) ? _4991 : (isnan(_4991) ? 1.0 : min(_4991, 1.0));
        float _3017 = dot(vec3(_886, _887, _888), vec3(_3010, _3011, _3012));
        float _5002 = isnan(0.0) ? _3017 : (isnan(_3017) ? 0.0 : max(_3017, 0.0));
        float _3020 = isnan(1.0) ? _5002 : (isnan(_5002) ? 1.0 : min(_5002, 1.0));
        float _3021 = dot(vec3(cbLight._m0[_2983].xyz), vec3(_3010, _3011, _3012));
        float _5013 = isnan(0.0) ? _3021 : (isnan(_3021) ? 0.0 : max(_3021, 0.0));
        float _3025 = _3002 * _3002;
        float _3029 = ((_3020 * _3020) * (_3025 + (-1.0))) + 1.0;
        float _3036 = exp2(log2(1.0 - (isnan(1.0) ? _5013 : (isnan(_5013) ? 1.0 : min(_5013, 1.0)))) * 5.0);
        float _3043 = 1.0 - _3002;
        float _3053 = (0.5 / (((_2670 * ((_3016 * _3043) + _3002)) + 9.9999999392252902907785028219223e-09) + (((_2670 * _3043) + _3002) * _3016))) * _3016;
        float _5024 = isnan(0.0) ? _3053 : (isnan(_3053) ? 0.0 : max(_3053, 0.0));
        float _3055 = (isnan(1.0) ? _5024 : (isnan(_5024) ? 1.0 : min(_5024, 1.0))) * (_3025 / ((_3029 * _3029) * 3.141590118408203125));
        float _3056 = isnan(1.0) ? _2410 : (isnan(_2410) ? 1.0 : min(_2410, 1.0));
        _2972 = (((((_3036 * _2692) + _1047) * cbLight._m0[_2987].x) * _3055) * _3056) + _2862;
        _2974 = (((((_3036 * _2694) + _1049) * cbLight._m0[_2987].y) * _3055) * _3056) + _2864;
        _2976 = (((((_3036 * _2695) + _1050) * cbLight._m0[_2987].z) * _3055) * _3056) + _2866;
    }
    float _3122;
    float _3124;
    float _3126;
    float _3128;
    float _3130;
    float _3132;
    if (_2392.y == 0u)
    {
        uvec4 _3077 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3078 = _3077.x;
        uint _3089 = uint((float(_3077.y) * floor(float(uint(cbSceneParam._m0[85u].y * _986) / _3078))) + floor(float(uint(cbSceneParam._m0[85u].x * _985) / _3078)));
        float _3099 = (log2(_2170 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3100 = isnan(0.0) ? _3099 : (isnan(_3099) ? 0.0 : max(_3099, 0.0));
        uint _3103 = uint(isnan(14.0) ? _3100 : (isnan(_3100) ? 14.0 : min(_3100, 14.0)));
        uvec4 _3108 = texelFetch(g_lightClusterGridBuffer, int(((_3103 << 2u) + (_3089 << 6u)) >> 2u));
        uint _3109 = _3108.x;
        uint _3110 = _3077.z;
        float _3189;
        float _3191;
        float _3193;
        float _3195;
        float _3197;
        float _3199;
        if (((((1u << ((_3110 >> 4u) & 15u)) + 4294967295u) & _3109) == 0u) || ((_3110 & 240u) == 0u))
        {
            _3189 = 0.0;
            _3191 = 0.0;
            _3193 = 0.0;
            _3195 = 0.0;
            _3197 = 0.0;
            _3199 = 0.0;
        }
        else
        {
            float _3190;
            float _3192;
            float _3194;
            float _3196;
            float _3198;
            float _3200;
            float _3341 = 0.0;
            float _3342 = 0.0;
            float _3343 = 0.0;
            float _3344 = 0.0;
            float _3345 = 0.0;
            float _3346 = 0.0;
            uint _3347 = 0u;
            uint _3356;
            bool _3357;
            for (;;)
            {
                _3356 = texelFetch(g_lightClassification, int((((_3103 << 5u) + (_3089 << 9u)) + (_3347 << 2u)) >> 2u)).x;
                _3357 = _3356 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3357)
                {
                    frontier_phi_71_pred = _3346;
                    frontier_phi_71_pred_1 = _3345;
                    frontier_phi_71_pred_2 = _3344;
                    frontier_phi_71_pred_3 = _3343;
                    frontier_phi_71_pred_4 = _3342;
                    frontier_phi_71_pred_5 = _3341;
                }
                else
                {
                    float _3486;
                    float _3487;
                    float _3488;
                    float _3489;
                    float _3490;
                    float _3491;
                    uint _3492;
                    _3486 = _3341;
                    _3487 = _3342;
                    _3488 = _3343;
                    _3489 = _3344;
                    _3490 = _3345;
                    _3491 = _3346;
                    _3492 = _3356;
                    float _3413;
                    float _3414;
                    float _3415;
                    float _3416;
                    float _3417;
                    float _3418;
                    for (;;)
                    {
                        uint _3496 = uint(findLSB(_3492)) + (_3347 << 5u);
                        uint _3493 = (_3492 + 4294967295u) & _3492;
                        uint _3498 = _3496 * 48u;
                        vec4 _3512 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3498)).x, texelFetch(g_PointLightRenderingBuffer, int(_3498 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3498 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3498 + 3u)).x));
                        uint _3518 = (_3496 * 48u) + 4u;
                        vec4 _3531 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3518)).x, texelFetch(g_PointLightRenderingBuffer, int(_3518 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3518 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3518 + 3u)).x));
                        uint _3537 = (_3496 * 48u) + 8u;
                        vec3 _3548 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3537)).x, texelFetch(g_PointLightRenderingBuffer, int(_3537 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3537 + 2u)).x));
                        float _3552 = _3512.x - _2168;
                        float _3553 = _3512.y - _2169;
                        float _3554 = _3512.z - _2170;
                        float _3555 = dot(vec3(_3552, _3553, _3554), vec3(_3552, _3553, _3554));
                        float _3558 = inversesqrt(_3555);
                        float _3559 = _3558 * _3552;
                        float _3560 = _3558 * _3553;
                        float _3561 = _3558 * _3554;
                        float _3562 = dot(vec3(_1004, _1007, _1010), vec3(_3559, _3560, _3561));
                        float _3567 = 1.0 - (_3555 * _3512.w);
                        float _5050 = isnan(0.0) ? _3567 : (isnan(_3567) ? 0.0 : max(_3567, 0.0));
                        float _3568 = isnan(1.0) ? _5050 : (isnan(_5050) ? 1.0 : min(_5050, 1.0));
                        float _3569 = sqrt(_3555) * _3531.w;
                        float _3572 = 1.39999997615814208984375 / (_3569 + 1.39999997615814208984375);
                        float _3573 = _3572 * _3572;
                        float _3576 = ((1.0 - _3573) * _3562) + _3573;
                        float _3579 = _3569 * _3569;
                        float _3583 = ((isnan(0.0) ? _3576 : (isnan(_3576) ? 0.0 : max(_3576, 0.0))) * _3568) / ((_3579 * 0.699999988079071044921875) + 1.0);
                        float _3587 = (-0.0) - _2168;
                        float _3588 = (-0.0) - _2169;
                        float _3589 = (-0.0) - _2170;
                        float _3593 = inversesqrt(dot(vec3(_3587, _3588, _3589), vec3(_3587, _3588, _3589)));
                        float _3594 = _3593 * _3587;
                        float _3595 = _3593 * _3588;
                        float _3596 = _3593 * _3589;
                        float _3603 = exp2(log2(1.0 / ((_3579 * 3.5) + 5.0)) * 0.25);
                        float _3604 = 1.0 - _1079;
                        float _3611 = sqrt(1.0 - ((1.0 - (_3604 * _3604)) * (1.0 - (_3603 * _3603))));
                        float _3612 = _3611 * _3611;
                        float _3613 = _3612 * _3612;
                        float _3614 = _3594 + _3559;
                        float _3615 = _3595 + _3560;
                        float _3616 = _3596 + _3561;
                        float _3620 = inversesqrt(dot(vec3(_3614, _3615, _3616), vec3(_3614, _3615, _3616)));
                        float _3624 = dot(vec3(_1004, _1007, _1010), vec3(_3594, _3595, _3596));
                        float _5066 = isnan(0.0) ? _3624 : (isnan(_3624) ? 0.0 : max(_3624, 0.0));
                        float _3627 = isnan(1.0) ? _5066 : (isnan(_5066) ? 1.0 : min(_5066, 1.0));
                        float _3628 = dot(vec3(_1004, _1007, _1010), vec3(_3620 * _3614, _3620 * _3615, _3620 * _3616));
                        float _5077 = isnan(0.0) ? _3628 : (isnan(_3628) ? 0.0 : max(_3628, 0.0));
                        float _3631 = isnan(1.0) ? _5077 : (isnan(_5077) ? 1.0 : min(_5077, 1.0));
                        float _3635 = ((_3631 * _3631) * (_3613 + (-1.0))) + 1.0;
                        float _3636 = _3572 * _3612;
                        float _3637 = _3636 * _3636;
                        float _3640 = ((1.0 - _3637) * _3562) + _3637;
                        float _5088 = isnan(0.0) ? _3640 : (isnan(_3640) ? 0.0 : max(_3640, 0.0));
                        float _3641 = isnan(1.0) ? _5088 : (isnan(_5088) ? 1.0 : min(_5088, 1.0));
                        float _3642 = 1.0 - _3612;
                        float _3652 = (0.5 / (((_3641 * ((_3627 * _3642) + _3612)) + 9.9999999392252902907785028219223e-09) + (((_3641 * _3642) + _3612) * _3627))) * _3641;
                        float _5099 = isnan(0.0) ? _3652 : (isnan(_3652) ? 0.0 : max(_3652, 0.0));
                        float _3663 = (((_3613 * 3.1415927410125732421875) * (isnan(1.0) ? _5099 : (isnan(_5099) ? 1.0 : min(_5099, 1.0)))) / ((_3635 * _3635) * ((_3579 * 2.1991131305694580078125) + 3.141590118408203125))) * _3568;
                        _3416 = (_3583 * _3531.x) + _3489;
                        _3417 = (_3583 * _3531.y) + _3490;
                        _3418 = (_3583 * _3531.z) + _3491;
                        _3413 = (_3663 * _3548.x) + _3486;
                        _3414 = (_3663 * _3548.y) + _3487;
                        _3415 = (_3663 * _3548.z) + _3488;
                        if (_3493 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3486 = _3413;
                            _3487 = _3414;
                            _3488 = _3415;
                            _3489 = _3416;
                            _3490 = _3417;
                            _3491 = _3418;
                            _3492 = _3493;
                        }
                    }
                    frontier_phi_71_pred = _3418;
                    frontier_phi_71_pred_1 = _3417;
                    frontier_phi_71_pred_2 = _3416;
                    frontier_phi_71_pred_3 = _3415;
                    frontier_phi_71_pred_4 = _3414;
                    frontier_phi_71_pred_5 = _3413;
                }
                _3200 = frontier_phi_71_pred;
                _3198 = frontier_phi_71_pred_1;
                _3196 = frontier_phi_71_pred_2;
                _3194 = frontier_phi_71_pred_3;
                _3192 = frontier_phi_71_pred_4;
                _3190 = frontier_phi_71_pred_5;
                uint _3348 = _3347 + 1u;
                if (_3348 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3341 = _3190;
                    _3342 = _3192;
                    _3343 = _3194;
                    _3344 = _3196;
                    _3345 = _3198;
                    _3346 = _3200;
                    _3347 = _3348;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3189 = _3190;
            _3191 = _3192;
            _3193 = _3194;
            _3195 = _3196;
            _3197 = _3198;
            _3199 = _3200;
        }
        uvec4 _3203 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3204 = _3203.z;
        uint _3206 = (_3204 >> 8u) & 15u;
        float _3309;
        float _3311;
        float _3313;
        float _3315;
        float _3317;
        float _3319;
        if (((4294967295u << _3206) & _3109) == 0u)
        {
            _3309 = _3189;
            _3311 = _3191;
            _3313 = _3193;
            _3315 = _3195;
            _3317 = _3197;
            _3319 = _3199;
        }
        else
        {
            float _3334 = inversesqrt(dot(vec3(_2168, _2169, _2170), vec3(_2168, _2169, _2170)));
            float _3335 = _3334 * _2168;
            float _3336 = _3334 * _2169;
            float _3337 = _3334 * _2170;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3206 < ((_3204 >> 12u) & 15u))
            {
                float _3310;
                float _3312;
                float _3314;
                float _3316;
                float _3318;
                float _3320;
                float _3469 = _3189;
                float _3470 = _3191;
                float _3471 = _3193;
                float _3472 = _3195;
                float _3473 = _3197;
                float _3474 = _3199;
                uint _3475 = _3206;
                uint _3484;
                bool _3485;
                for (;;)
                {
                    _3484 = texelFetch(g_lightClassification, int((((_3103 << 5u) + (_3089 << 9u)) + (_3475 << 2u)) >> 2u)).x;
                    _3485 = _3484 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3485)
                    {
                        frontier_phi_82_pred = _3474;
                        frontier_phi_82_pred_1 = _3473;
                        frontier_phi_82_pred_2 = _3472;
                        frontier_phi_82_pred_3 = _3471;
                        frontier_phi_82_pred_4 = _3470;
                        frontier_phi_82_pred_5 = _3469;
                    }
                    else
                    {
                        float _3677;
                        float _3678;
                        float _3679;
                        float _3680;
                        float _3681;
                        float _3682;
                        float _3970;
                        float _3971;
                        float _3972;
                        float _3973;
                        float _3974;
                        float _3975;
                        float _3690 = _3469;
                        float _3691 = _3470;
                        float _3692 = _3471;
                        float _3693 = _3472;
                        float _3694 = _3473;
                        float _3695 = _3474;
                        uint _3696 = _3484;
                        uint _3697;
                        vec4 _3722;
                        float _3723;
                        vec4 _3738;
                        vec3 _3750;
                        vec4 _3765;
                        vec4 _3780;
                        float _3826;
                        bool _3827;
                        for (;;)
                        {
                            uint _3707 = ((_3475 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3696));
                            _3697 = (_3696 + 4294967295u) & _3696;
                            uint _3709 = _3707 * 40u;
                            _3722 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3709)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3709 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3709 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3709 + 3u)).x));
                            _3723 = _3722.w;
                            uint _3725 = (_3707 * 40u) + 4u;
                            _3738 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3725)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3725 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3725 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3725 + 3u)).x));
                            uint _3740 = (_3707 * 40u) + 8u;
                            _3750 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3740)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3740 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3740 + 2u)).x));
                            uint _3752 = (_3707 * 40u) + 16u;
                            _3765 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3752)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3752 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3752 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3752 + 3u)).x));
                            uint _3767 = (_3707 * 40u) + 20u;
                            _3780 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3767)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3767 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3767 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3767 + 3u)).x));
                            uint _3782 = (_3707 * 40u) + 24u;
                            vec4 _3795 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3782)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3782 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3782 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3782 + 3u)).x));
                            uint _3801 = (_3707 * 40u) + 28u;
                            vec4 _3814 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3801)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3801 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3801 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3801 + 3u)).x));
                            _3826 = fma(_2170, _3814.z, fma(_2169, _3814.y, _3814.x * _2168)) + _3814.w;
                            _3827 = !((fma(_2170, _3795.z, fma(_2169, _3795.y, _3795.x * _2168)) + _3795.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3827)
                            {
                                float _3854 = _3722.x - _2168;
                                float _3855 = _3722.y - _2169;
                                float _3856 = _3722.z - _2170;
                                float _3857 = dot(vec3(_3854, _3855, _3856), vec3(_3854, _3855, _3856));
                                float _3860 = inversesqrt(_3857);
                                float _3861 = _3860 * _3854;
                                float _3862 = _3860 * _3855;
                                float _3863 = _3860 * _3856;
                                float _3867 = 1.0 - (_3857 / (_3723 * _3723));
                                float _5110 = isnan(0.0) ? _3867 : (isnan(_3867) ? 0.0 : max(_3867, 0.0));
                                float _3868 = isnan(1.0) ? _5110 : (isnan(_5110) ? 1.0 : min(_5110, 1.0));
                                float _3872 = sqrt(_3857) * _3738.w;
                                float _3874 = 1.39999997615814208984375 / (_3872 + 1.39999997615814208984375);
                                float _3875 = _3874 * _3874;
                                float _3878 = ((1.0 - _3875) * dot(vec3(_3861, _3862, _3863), vec3(_1004, _1007, _1010))) + _3875;
                                float _3881 = _3872 * _3872;
                                float _3885 = (fma(_2170, _3765.z, fma(_2169, _3765.y, _3765.x * _2168)) + _3765.w) / _3826;
                                float _3886 = (fma(_2170, _3780.z, fma(_2169, _3780.y, _3780.x * _2168)) + _3780.w) / _3826;
                                float _3890 = 1.0 - dot(vec2(_3885, _3886), vec2(_3885, _3886));
                                float _5126 = isnan(0.0) ? _3890 : (isnan(_3890) ? 0.0 : max(_3890, 0.0));
                                float _3891 = isnan(1.0) ? _5126 : (isnan(_5126) ? 1.0 : min(_5126, 1.0));
                                float _3892 = _3891 * (((isnan(0.0) ? _3878 : (isnan(_3878) ? 0.0 : max(_3878, 0.0))) * _3868) / ((_3881 * 0.699999988079071044921875) + 1.0));
                                float _3904 = exp2(log2(1.0 / ((_3881 * 3.5) + 5.0)) * 0.25);
                                float _3905 = 1.0 - _1079;
                                float _3912 = sqrt(1.0 - ((1.0 - (_3905 * _3905)) * (1.0 - (_3904 * _3904))));
                                float _3913 = _3912 * _3912;
                                float _3914 = _3913 * _3913;
                                float _3915 = _3861 - _3335;
                                float _3916 = _3862 - _3336;
                                float _3917 = _3863 - _3337;
                                float _3921 = inversesqrt(dot(vec3(_3915, _3916, _3917), vec3(_3915, _3916, _3917)));
                                float _3925 = dot(vec3(_1004, _1007, _1010), vec3((-0.0) - _3335, (-0.0) - _3336, (-0.0) - _3337));
                                float _5137 = isnan(0.0) ? _3925 : (isnan(_3925) ? 0.0 : max(_3925, 0.0));
                                float _3928 = isnan(1.0) ? _5137 : (isnan(_5137) ? 1.0 : min(_5137, 1.0));
                                float _3929 = dot(vec3(_1004, _1007, _1010), vec3(_3921 * _3915, _3921 * _3916, _3921 * _3917));
                                float _5148 = isnan(0.0) ? _3929 : (isnan(_3929) ? 0.0 : max(_3929, 0.0));
                                float _3932 = isnan(1.0) ? _5148 : (isnan(_5148) ? 1.0 : min(_5148, 1.0));
                                float _3936 = ((_3932 * _3932) * (_3914 + (-1.0))) + 1.0;
                                float _3937 = _3874 * _3913;
                                float _3938 = _3937 * _3937;
                                float _3944 = ((1.0 - _3938) * dot(vec3(_1004, _1007, _1010), vec3(_3861, _3862, _3863))) + _3938;
                                float _5159 = isnan(0.0) ? _3944 : (isnan(_3944) ? 0.0 : max(_3944, 0.0));
                                float _3945 = isnan(1.0) ? _5159 : (isnan(_5159) ? 1.0 : min(_5159, 1.0));
                                float _3946 = 1.0 - _3913;
                                float _3956 = (0.5 / (((_3945 * ((_3928 * _3946) + _3913)) + 9.9999999392252902907785028219223e-09) + (((_3945 * _3946) + _3913) * _3928))) * _3945;
                                float _5170 = isnan(0.0) ? _3956 : (isnan(_3956) ? 0.0 : max(_3956, 0.0));
                                float _3966 = (_3891 * _3868) * (((_3914 * 3.1415927410125732421875) * (isnan(1.0) ? _5170 : (isnan(_5170) ? 1.0 : min(_5170, 1.0)))) / ((_3936 * _3936) * ((_3881 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3892 * _3738.z;
                                frontier_phi_88_pred_1 = _3892 * _3738.y;
                                frontier_phi_88_pred_2 = _3892 * _3738.x;
                                frontier_phi_88_pred_3 = _3966 * _3750.z;
                                frontier_phi_88_pred_4 = _3966 * _3750.y;
                                frontier_phi_88_pred_5 = _3966 * _3750.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3975 = frontier_phi_88_pred;
                            _3974 = frontier_phi_88_pred_1;
                            _3973 = frontier_phi_88_pred_2;
                            _3972 = frontier_phi_88_pred_3;
                            _3971 = frontier_phi_88_pred_4;
                            _3970 = frontier_phi_88_pred_5;
                            _3680 = _3973 + _3693;
                            _3681 = _3974 + _3694;
                            _3682 = _3975 + _3695;
                            _3677 = _3970 + _3690;
                            _3678 = _3971 + _3691;
                            _3679 = _3972 + _3692;
                            if (_3697 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3690 = _3677;
                                _3691 = _3678;
                                _3692 = _3679;
                                _3693 = _3680;
                                _3694 = _3681;
                                _3695 = _3682;
                                _3696 = _3697;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3682;
                        frontier_phi_82_pred_1 = _3681;
                        frontier_phi_82_pred_2 = _3680;
                        frontier_phi_82_pred_3 = _3679;
                        frontier_phi_82_pred_4 = _3678;
                        frontier_phi_82_pred_5 = _3677;
                    }
                    _3320 = frontier_phi_82_pred;
                    _3318 = frontier_phi_82_pred_1;
                    _3316 = frontier_phi_82_pred_2;
                    _3314 = frontier_phi_82_pred_3;
                    _3312 = frontier_phi_82_pred_4;
                    _3310 = frontier_phi_82_pred_5;
                    uint _3476 = _3475 + 1u;
                    if (_3476 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3469 = _3310;
                        _3470 = _3312;
                        _3471 = _3314;
                        _3472 = _3316;
                        _3473 = _3318;
                        _3474 = _3320;
                        _3475 = _3476;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3316;
                frontier_phi_63_64_ladder_1 = _3320;
                frontier_phi_63_64_ladder_2 = _3318;
                frontier_phi_63_64_ladder_3 = _3314;
                frontier_phi_63_64_ladder_4 = _3312;
                frontier_phi_63_64_ladder_5 = _3310;
            }
            else
            {
                frontier_phi_63_64_ladder = _3195;
                frontier_phi_63_64_ladder_1 = _3199;
                frontier_phi_63_64_ladder_2 = _3197;
                frontier_phi_63_64_ladder_3 = _3193;
                frontier_phi_63_64_ladder_4 = _3191;
                frontier_phi_63_64_ladder_5 = _3189;
            }
            _3309 = frontier_phi_63_64_ladder_5;
            _3311 = frontier_phi_63_64_ladder_4;
            _3313 = frontier_phi_63_64_ladder_3;
            _3315 = frontier_phi_63_64_ladder;
            _3317 = frontier_phi_63_64_ladder_2;
            _3319 = frontier_phi_63_64_ladder_1;
        }
        float _3324 = isnan(1.0) ? _1063 : (isnan(_1063) ? 1.0 : min(_1063, 1.0));
        _3122 = (_3324 * _3315) + _2634;
        _3124 = (_3324 * _3317) + _2636;
        _3126 = (_3324 * _3319) + _2638;
        _3128 = ((_3309 * _1047) * _3324) + _2972;
        _3130 = ((_3311 * _1049) * _3324) + _2974;
        _3132 = ((_3313 * _1050) * _3324) + _2976;
    }
    else
    {
        _3122 = _2634;
        _3124 = _2636;
        _3126 = _2638;
        _3128 = _2972;
        _3130 = _2974;
        _3132 = _2976;
    }
    float _5186 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
    float _5197 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
    float _5208 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
    float _3149 = ((isnan(1.0) ? _5186 : (isnan(_5186) ? 1.0 : min(_5186, 1.0))) * (_3122 + ((isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0))) * _1063))) + ((_3128 + ((isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0))) * _1902)) * cbPerFrame._m0[3u].x);
    float _3150 = ((isnan(1.0) ? _5197 : (isnan(_5197) ? 1.0 : min(_5197, 1.0))) * (_3124 + ((isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0))) * _1063))) + ((_3130 + ((isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0))) * _1902)) * cbPerFrame._m0[3u].x);
    float _3151 = ((isnan(1.0) ? _5208 : (isnan(_5208) ? 1.0 : min(_5208, 1.0))) * (_3126 + ((isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0))) * _1063))) + ((_3132 + ((isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0))) * _1902)) * cbPerFrame._m0[3u].x);
    uint _3152 = _287 + 6u;
    float _3160 = _985 / cbSceneParam._m0[86u].x;
    float _3161 = _986 / cbSceneParam._m0[86u].y;
    vec4 _3175 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3160, _3161, (log2((isnan(cbSceneParam._m0[77u].w) ? _908 : (isnan(_908) ? cbSceneParam._m0[77u].w : min(_908, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3177 = _3175.x;
    float _3178 = _3175.y;
    float _3179 = _3175.z;
    float _3180 = _3175.w;
    float _3251;
    float _3253;
    float _3255;
    float _3257;
    if (_908 > cbSceneParam._m0[78u].w)
    {
        float _3214 = isnan(_908) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _908 : min(cbSceneParam._m0[80u].w, _908));
        float _3215 = _3214 / _908;
        float _3226 = _3215 * _958;
        float _3227 = _959 * _3215;
        float _3228 = (-0.0) - _3227;
        float _3229 = _3215 * _960;
        float _3231 = (cbSceneParam._m0[77u].w * _3228) / _3214;
        float _3232 = _3231 + cbSceneParam._m0[79u].w;
        float _3233 = cbSceneParam._m0[79u].w - _3227;
        float _3239 = sqrt(((_3226 * _3226) + (_3227 * _3227)) + (_3229 * _3229));
        float _3242 = (1.0 - (cbSceneParam._m0[77u].w / _3214)) * _3239;
        float _3247 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3249 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3426;
        if (abs((_3228 - _3231) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3426 = ((((_3232 > 0.0) ? exp2(_3247 * _3232) : (2.0 - exp2(_3249 * _3232))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3242;
        }
        else
        {
            float _3370 = 1.0 / cbSceneParam._m0[80u].x;
            float _3371 = isnan(_3233) ? _3232 : (isnan(_3232) ? _3233 : max(_3232, _3233));
            float _3372 = isnan(_3233) ? _3232 : (isnan(_3232) ? _3233 : min(_3232, _3233));
            float _3381 = isnan(0.0) ? _3371 : (isnan(_3371) ? 0.0 : min(_3371, 0.0));
            float _3382 = isnan(0.0) ? _3372 : (isnan(_3372) ? 0.0 : min(_3372, 0.0));
            _3426 = ((abs(_3239 / _3228) * cbSceneParam._m0[80u].y) * ((((_3381 - _3382) * 2.0) - ((exp2(_3247 * (isnan(0.0) ? _3371 : (isnan(_3371) ? 0.0 : max(_3371, 0.0)))) - exp2(_3247 * (isnan(0.0) ? _3372 : (isnan(_3372) ? 0.0 : max(_3372, 0.0))))) * _3370)) - ((exp2(_3249 * _3381) - exp2(_3249 * _3382)) * _3370))) + (_3242 * cbSceneParam._m0[80u].z);
        }
        vec4 _3428 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3160, _3161, 1.0), 0.0);
        float _3437 = exp2((_3426 * (-1.44269502162933349609375)) * (1.0 - _3428.w));
        float _3438 = log2(_3437);
        float _3454 = log2(_3180);
        _3251 = (exp2(_3454 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3438 * cbSceneParam._m0[78u].x)) * _3428.x) / cbSceneParam._m0[78u].x)) + _3177;
        _3253 = (exp2(_3454 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3438 * cbSceneParam._m0[78u].y)) * _3428.y) / cbSceneParam._m0[78u].y)) + _3178;
        _3255 = (exp2(_3454 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3438 * cbSceneParam._m0[78u].z)) * _3428.z) / cbSceneParam._m0[78u].z)) + _3179;
        _3257 = _3437 * _3180;
    }
    else
    {
        _3251 = _3177;
        _3253 = _3178;
        _3255 = _3179;
        _3257 = _3180;
    }
    bool _3464;
    vec4 _3267;
    vec4 _3289;
    float _3291;
    float _3295;
    float _3296;
    float _3297;
    float _3298;
    bool _3308;
    for (;;)
    {
        _3267 = cbMatDynParam._m0[0u];
        float _3269 = roundEven(_3267.y);
        bool _3270 = _3269 == 3.0;
        float _3271 = log2(_3257);
        float _3278 = exp2(_3271 * cbSceneParam._m0[78u].x) * _3149;
        float _3279 = exp2(_3271 * cbSceneParam._m0[78u].y) * _3150;
        float _3280 = exp2(_3271 * cbSceneParam._m0[78u].z) * _3151;
        float _3287 = _974 + (-0.5);
        _3289 = cbMtdParam._m0[1u];
        _3291 = _3289.y * _3287;
        float _3294 = (_3269 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3295 = _3294 * (_3270 ? _3278 : (_3278 + (cbSceneParam._m0[72u].w * _3251)));
        _3296 = _3294 * (_3270 ? _3279 : (_3279 + (cbSceneParam._m0[72u].w * _3253)));
        _3297 = _3294 * (_3270 ? _3280 : (_3280 + (cbSceneParam._m0[72u].w * _3255)));
        _3298 = _3287 * 0.999000012874603271484375;
        _3308 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3308)
        {
            if ((cbInstanceData._m0[_287 + 7u].x + _3298) < 0.5)
            {
                _3464 = true;
                break;
            }
        }
        uint _3405 = _1023 + uint(_3267.w);
        if ((cbInstanceData._m0[_3405].w < 1.0) && ((cbInstanceData._m0[_3405].w + _3298) < 0.5))
        {
            _3464 = true;
            break;
        }
        if ((_3291 + 1.0) < _3289.x)
        {
            _3464 = true;
            break;
        }
        _3464 = false;
        break;
    }
    float _3668;
    if (_3464)
    {
        discard_state = true;
        _3668 = 0.0;
    }
    else
    {
        _3668 = cbInstanceData._m0[_3152].w;
    }
    SV_Target.x = _3295;
    SV_Target.y = _3296;
    SV_Target.z = _3297;
    SV_Target.w = _3668;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3152].w;
    discard_exit();
}


