#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1458;
float _4120;
float _4121;
float _4122;
float _4123;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _242 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _243 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _244 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _250 = inversesqrt(dot(vec3(_242, _243, _244), vec3(_242, _243, _244)));
    float _257 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _264 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _276 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _278 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _279 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4132 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _4143 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _4154 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    uint _289 = uint(roundEven(NORMAL.w)) * 13u;
    uint _294 = _289 + 1u;
    uint _298 = _289 + 2u;
    float _307 = sqrt(((cbInstanceData._m0[_294].x * cbInstanceData._m0[_294].x) + (cbInstanceData._m0[_289].x * cbInstanceData._m0[_289].x)) + (cbInstanceData._m0[_298].x * cbInstanceData._m0[_298].x));
    float _308 = _307 * TEXCOORD.z;
    float _309 = _307 * TEXCOORD.w;
    vec4 _322 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _308) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _309) + cbTextureTilingScale._m0[13u].w));
    vec4 _346 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _351 = _346.x * cbMtdParam._m0[11u].x;
    float _352 = _346.y * cbMtdParam._m0[11u].y;
    float _353 = _346.z * cbMtdParam._m0[11u].z;
    vec4 _372 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _308) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _309) + cbTextureTilingScale._m0[5u].w));
    vec4 _408 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _410 = _408.x;
    float _422 = dot(vec4(_410, _408.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _439 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_410 - _422) * cbMtdParam._m0[24u].y) + _422) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4165 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _440 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
    float _447 = (_440 * ((_372.x * cbMtdParam._m0[12u].x) - _351)) + _351;
    float _448 = (_440 * ((_372.y * cbMtdParam._m0[12u].y) - _352)) + _352;
    float _449 = (_440 * ((_372.z * cbMtdParam._m0[12u].z) - _353)) + _353;
    float _453 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _322.x) * _447;
    float _456 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _322.y) * _448;
    float _459 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _322.z) * _449;
    float _466 = ((_447 - _453) * (isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0)))) + _453;
    float _467 = ((_448 - _456) * (isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0)))) + _456;
    float _468 = ((_449 - _459) * (isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0)))) + _459;
    vec4 _487 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _308) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _309) + cbTextureTilingScale._m0[14u].w));
    vec4 _507 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _308) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _309) + cbTextureTilingScale._m0[20u].w));
    vec4 _532 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _308) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _309) + cbTextureTilingScale._m0[4u].w));
    vec4 _549 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _551 = _549.x;
    float _552 = _549.y;
    float _553 = _549.z;
    float _562 = ((_532.z - _553) * _440) + _553;
    float _565 = ((((_532.x - _551) * _440) + _551) * 2.0) + (-1.0);
    float _566 = ((((_532.y - _552) * _440) + _552) * 2.0) + (-1.0);
    float _567 = dot(vec2(_565, _566), vec2(_565, _566));
    float _4176 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _572 = sqrt(1.0 - (isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0))));
    vec4 _588 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _613 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _308) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _309) + cbTextureTilingScale._m0[11u].w));
    float _615 = _613.x;
    float _616 = 1.0 - _615;
    float _622 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _625 = ((isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : min(_622, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _634 = (_625 - ((((((_615 - _616) * cbMtdParam._m0[24u].z) + _616) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4197 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _635 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
    float _642 = (_635 * ((_487.x * cbMtdParam._m0[18u].x) - _466)) + _466;
    float _643 = (_635 * ((_487.y * cbMtdParam._m0[18u].y) - _467)) + _467;
    float _644 = (_635 * ((_487.z * cbMtdParam._m0[18u].z) - _468)) + _468;
    vec4 _656 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _308) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _309) + cbTextureTilingScale._m0[19u].w));
    float _658 = _656.x;
    float _659 = 1.0 - _658;
    float _684 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_658 - _659) * cbMtdParam._m0[24u].w) + _659) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4208 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _685 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
    float _693 = ((((cbMtdParam._m0[10u].x - _642) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _685) + _642;
    float _694 = ((((cbMtdParam._m0[10u].y - _643) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _685) + _643;
    float _695 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _644)) * _685) + _644;
    vec4 _707 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _721 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _723 = _721.x;
    float _741 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _308) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _309) + cbTextureTilingScale._m0[9u].w)).x - _723) * _440) + _723;
    float _745 = ((_707.x - _741) * cbMtdParam._m0[19u].z) + _741;
    float _747 = _745 - (_745 * _635);
    float _749 = _747 - (_747 * _685);
    float _754 = (((_507.z - _562) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _562;
    float _758 = ((_588.z - _754) * cbMtdParam._m0[19u].w) + _754;
    vec4 _772 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _308) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _309) + cbTextureTilingScale._m0[15u].w));
    float _779 = (_772.x * 2.0) + (-1.0);
    float _780 = (_772.y * 2.0) + (-1.0);
    float _781 = dot(vec2(_779, _780), vec2(_779, _780));
    float _4219 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
    float _789 = (_635 * (_772.z - _758)) + _758;
    float _792 = ((cbMtdParam._m0[23u].y - _789) * _685) + _789;
    vec4 _811 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _308) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _309) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _817 = (_811.x * 2.0) + (-1.0);
    float _818 = (_811.y * 2.0) + (-1.0);
    float _819 = dot(vec2(_817, _818), vec2(_817, _818));
    float _4230 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
    float _833 = (_565 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_507.x * 2.0) + (-1.0)))) + (((_588.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _834 = (_566 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_507.y * 2.0) + (-1.0)))) + (((_588.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _846 = (((_779 - _833) + (cbMtdParam._m0[21u].x * _833)) * _635) + _833;
    float _847 = (((_780 - _834) + (cbMtdParam._m0[21u].x * _834)) * _635) + _834;
    float _848 = (_635 * (sqrt(1.0 - (isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0)))) - _572)) + _572;
    float _859 = (((_817 - _846) + (_846 * cbMtdParam._m0[22u].z)) * _685) + _846;
    float _860 = (((_818 - _847) + (_847 * cbMtdParam._m0[22u].z)) * _685) + _847;
    float _861 = ((sqrt(1.0 - (isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0)))) - _848) * _685) + _848;
    float _865 = cbMtdParam._m0[22u].x + _588.w;
    float _868 = fma(_861, _257 * NORMAL.x, fma(_860, _264 * TANGENT.x, (_250 * _242) * _859));
    float _871 = fma(_861, _257 * NORMAL.y, fma(_860, _264 * TANGENT.y, (_250 * _243) * _859));
    float _874 = fma(_861, _257 * NORMAL.z, fma(_860, _264 * TANGENT.z, (_250 * _244) * _859));
    float _878 = inversesqrt(dot(vec3(_868, _871, _874), vec3(_868, _871, _874)));
    float _879 = _878 * _868;
    float _880 = _878 * _871;
    float _881 = _878 * _874;
    float _4241 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
    float _882 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
    float _4252 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
    float _4263 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _4274 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
    float _4285 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
    float _4296 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _887 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
    float _901 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _941 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _951 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _941);
    float _952 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _941);
    float _953 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _941);
    float _957 = inversesqrt(dot(vec3(_951, _952, _953), vec3(_951, _952, _953)));
    float _958 = _951 * _957;
    float _959 = _952 * _957;
    float _960 = _953 * _957;
    vec4 _965 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _967 = _965.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1139 = sqrt(((_951 * _951) + (_952 * _952)) + (_953 * _953));
        float _1145 = (cbMatDynParam._m0[5u].x * _1139) + cbMatDynParam._m0[5u].y;
        float _4307 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1146 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
        float _1150 = (cbMatDynParam._m0[5u].z * _1139) + cbMatDynParam._m0[5u].w;
        float _4318 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0))) - _1146)) + _1146) < ((_967 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _978 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _979 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _997 = fma(_881, cbSceneParam._m0[5u].z, fma(_880, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _879));
    float _1000 = fma(_881, cbSceneParam._m0[6u].z, fma(_880, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _879));
    float _1003 = fma(_881, cbSceneParam._m0[7u].z, fma(_880, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _879));
    uint _1016 = _289 + 9u;
    uint _1017 = _1016 + uint(cbMatDynParam._m0[0u].w);
    float _1023 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0)))) * cbInstanceData._m0[_1017].x;
    float _1024 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0)))) * cbInstanceData._m0[_1017].y;
    float _1025 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0)))) * cbInstanceData._m0[_1017].z;
    float _4329 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
    float _1026 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
    float _4340 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
    float _1027 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
    float _4351 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
    float _1028 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
    float _1029 = 1.0 - _887;
    float _1030 = _1026 * _1029;
    float _1031 = _1027 * _1029;
    float _1032 = _1028 * _1029;
    float _1037 = (_1026 + (-0.039999999105930328369140625)) * _887;
    float _1038 = (_1027 + (-0.039999999105930328369140625)) * _887;
    float _1039 = (_1028 + (-0.039999999105930328369140625)) * _887;
    float _1040 = _1037 + 0.039999999105930328369140625;
    float _1042 = _1038 + 0.039999999105930328369140625;
    float _1043 = _1039 + 0.039999999105930328369140625;
    vec4 _1052 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _978, cbSceneParam._m0[86u].y * _979));
    float _1056 = ((isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0))) * TEXCOORD_5.w) * _1052.x;
    float _1057 = dot(vec3(_879, _880, _881), vec3(_958, _959, _960));
    float _1060 = _1057 * 2.0;
    float _1064 = (_1060 * _879) - _958;
    float _1065 = (_1060 * _880) - _959;
    float _1066 = (_1060 * _881) - _960;
    float _1070 = abs(dot(vec3(_958, _959, _960), vec3(_879, _880, _881)));
    float _4362 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
    float _1072 = sqrt(_882);
    float _1085 = exp2((_1072 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1072 * 3.0));
    float _1091 = (1.0 - _1085) * ((_1072 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1092 = _1085 * _1072;
    float _1120 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1124 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1128 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1457;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1182 = fma(_1128, cbModelParam._m0[26u].z, fma(_1124, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1120));
        float _1186 = fma(_1128, cbModelParam._m0[27u].z, fma(_1124, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1120));
        float _1190 = fma(_1128, cbModelParam._m0[28u].z, fma(_1124, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1120));
        float _1215 = _1120 + _879;
        float _1216 = _1124 + _880;
        float _1217 = _1128 + _881;
        float _1227 = fma(_1217, cbModelParam._m0[26u].z, fma(_1216, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1215)) - _1182;
        float _1228 = fma(_1217, cbModelParam._m0[27u].z, fma(_1216, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1215)) - _1186;
        float _1229 = fma(_1217, cbModelParam._m0[28u].z, fma(_1216, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1215)) - _1190;
        float _1233 = inversesqrt(dot(vec3(_1227, _1228, _1229), vec3(_1227, _1228, _1229)));
        float _1246 = ((_1233 * _1227) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1182 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1247 = ((_1233 * _1228) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1186 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1248 = ((_1233 * _1229) / cbModelParam._m0[34u].z) + ((((((_1190 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1251 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1246, _1247, _1248), 0.0);
        vec4 _1258 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1246, _1247, _1248), 0.0);
        vec4 _1265 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1246, _1247, _1248), 0.0);
        vec4 _1272 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1246, _1247, _1248), 0.0);
        float _1285 = exp2((_1251.w + (-0.5)) * 20.0) * 2.0;
        float _1286 = _1285 * (_1251.x + (-0.5));
        float _1287 = _1285 * (_1251.y + (-0.5));
        float _1288 = _1285 * (_1251.z + (-0.5));
        float _1295 = exp2((_1258.w + (-0.5)) * 20.0) * 2.0;
        float _1296 = _1295 * (_1258.x + (-0.5));
        float _1297 = _1295 * (_1258.y + (-0.5));
        float _1298 = _1295 * (_1258.z + (-0.5));
        float _1305 = exp2((_1265.w + (-0.5)) * 20.0) * 2.0;
        float _1306 = _1305 * (_1265.x + (-0.5));
        float _1307 = _1305 * (_1265.y + (-0.5));
        float _1308 = _1305 * (_1265.z + (-0.5));
        float _1315 = exp2((_1272.w + (-0.5)) * 20.0) * 2.0;
        float _1316 = _1315 * (_1272.x + (-0.5));
        float _1317 = _1315 * (_1272.y + (-0.5));
        float _1318 = _1315 * (_1272.z + (-0.5));
        float _1319 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1320 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1321 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1322 = _1286 * 0.5;
        float _1323 = _1296 * 0.5;
        float _1324 = _1306 * 0.5;
        float _1325 = dot(vec3(_1322, _1323, _1324), vec3(_1322, _1323, _1324));
        float _1330 = (_1325 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1325);
        float _1339 = (dot(vec3(_879, _880, _881), vec3(_1330 * _1322, _1330 * _1323, _1330 * _1324)) + 1.0) * 0.5;
        float _4388 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1349 = sqrt(((_1323 * _1323) + (_1322 * _1322)) + (_1324 * _1324)) / (_1319 + 9.9999997473787516355514526367188e-06);
        float _4399 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1350 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
        float _1351 = _1350 * 2.0;
        float _1355 = (1.0 - _1350) / (_1350 + 1.0);
        float _4410 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1356 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
        float _1365 = ((((1.0 - _1356) * (_1351 + 2.0)) * exp2(log2(isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0))) * (_1351 + 1.0))) + _1356) * _1319;
        float _1366 = _1287 * 0.5;
        float _1367 = _1297 * 0.5;
        float _1368 = _1307 * 0.5;
        float _1369 = dot(vec3(_1366, _1367, _1368), vec3(_1366, _1367, _1368));
        float _1374 = (_1369 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1369);
        float _1382 = (dot(vec3(_879, _880, _881), vec3(_1374 * _1366, _1374 * _1367, _1374 * _1368)) + 1.0) * 0.5;
        float _4421 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1391 = sqrt(((_1367 * _1367) + (_1366 * _1366)) + (_1368 * _1368)) / (_1320 + 9.9999997473787516355514526367188e-06);
        float _4432 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1392 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
        float _1393 = _1392 * 2.0;
        float _1397 = (1.0 - _1392) / (_1392 + 1.0);
        float _4443 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1398 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
        float _1407 = ((((1.0 - _1398) * (_1393 + 2.0)) * exp2(log2(isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0))) * (_1393 + 1.0))) + _1398) * _1320;
        float _1408 = _1288 * 0.5;
        float _1409 = _1298 * 0.5;
        float _1410 = _1308 * 0.5;
        float _1411 = dot(vec3(_1408, _1409, _1410), vec3(_1408, _1409, _1410));
        float _1416 = (_1411 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1411);
        float _1424 = (dot(vec3(_879, _880, _881), vec3(_1416 * _1408, _1416 * _1409, _1416 * _1410)) + 1.0) * 0.5;
        float _4454 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1433 = sqrt(((_1409 * _1409) + (_1408 * _1408)) + (_1410 * _1410)) / (_1321 + 9.9999997473787516355514526367188e-06);
        float _4465 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1434 = isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0));
        float _1435 = _1434 * 2.0;
        float _1439 = (1.0 - _1434) / (_1434 + 1.0);
        float _4476 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1440 = isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0));
        float _1449 = ((((1.0 - _1440) * (_1435 + 2.0)) * exp2(log2(isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0))) * (_1435 + 1.0))) + _1440) * _1321;
        _1457 = _1288;
        _1459 = _1287;
        _1460 = _1286;
        _1461 = _1298;
        _1462 = _1297;
        _1463 = _1296;
        _1464 = _1308;
        _1465 = _1307;
        _1466 = _1306;
        _1467 = _1321;
        _1468 = _1320;
        _1469 = _1319;
        _1470 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0)));
        _1471 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0)));
        _1472 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0)));
    }
    else
    {
        _1457 = _1458;
        _1459 = _1458;
        _1460 = _1458;
        _1461 = _1458;
        _1462 = _1458;
        _1463 = _1458;
        _1464 = _1458;
        _1465 = _1458;
        _1466 = _1458;
        _1467 = _1458;
        _1468 = _1458;
        _1469 = _1458;
        _1470 = 0.0;
        _1471 = 0.0;
        _1472 = 0.0;
    }
    float _1769;
    float _1770;
    float _1771;
    float _1772;
    float _1773;
    float _1774;
    float _1775;
    float _1776;
    float _1777;
    float _1778;
    float _1779;
    float _1780;
    float _1781;
    float _1782;
    float _1783;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1500 = fma(_1128, cbModelParam._m0[30u].z, fma(_1124, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1120));
        float _1504 = fma(_1128, cbModelParam._m0[31u].z, fma(_1124, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1120));
        float _1508 = fma(_1128, cbModelParam._m0[32u].z, fma(_1124, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1120));
        float _1531 = _1120 + _879;
        float _1532 = _1124 + _880;
        float _1533 = _1128 + _881;
        float _1543 = fma(_1533, cbModelParam._m0[30u].z, fma(_1532, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1531)) - _1500;
        float _1544 = fma(_1533, cbModelParam._m0[31u].z, fma(_1532, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1531)) - _1504;
        float _1545 = fma(_1533, cbModelParam._m0[32u].z, fma(_1532, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1531)) - _1508;
        float _1549 = inversesqrt(dot(vec3(_1543, _1544, _1545), vec3(_1543, _1544, _1545)));
        float _1562 = ((_1549 * _1543) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1500 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1563 = ((_1549 * _1544) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1504 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1564 = ((_1549 * _1545) / cbModelParam._m0[35u].z) + ((((((_1508 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1566 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1562, _1563, _1564), 0.0);
        vec4 _1573 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1562, _1563, _1564), 0.0);
        vec4 _1580 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1562, _1563, _1564), 0.0);
        vec4 _1587 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1562, _1563, _1564), 0.0);
        float _1599 = exp2((_1566.w + (-0.5)) * 20.0) * 2.0;
        float _1600 = _1599 * (_1566.x + (-0.5));
        float _1601 = _1599 * (_1566.y + (-0.5));
        float _1602 = _1599 * (_1566.z + (-0.5));
        float _1609 = exp2((_1573.w + (-0.5)) * 20.0) * 2.0;
        float _1610 = _1609 * (_1573.x + (-0.5));
        float _1611 = _1609 * (_1573.y + (-0.5));
        float _1612 = _1609 * (_1573.z + (-0.5));
        float _1619 = exp2((_1580.w + (-0.5)) * 20.0) * 2.0;
        float _1620 = _1619 * (_1580.x + (-0.5));
        float _1621 = _1619 * (_1580.y + (-0.5));
        float _1622 = _1619 * (_1580.z + (-0.5));
        float _1629 = exp2((_1587.w + (-0.5)) * 20.0) * 2.0;
        float _1630 = _1629 * (_1587.x + (-0.5));
        float _1631 = _1629 * (_1587.y + (-0.5));
        float _1632 = _1629 * (_1587.z + (-0.5));
        float _1633 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
        float _1634 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
        float _1635 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
        float _1636 = _1600 * 0.5;
        float _1637 = _1610 * 0.5;
        float _1638 = _1620 * 0.5;
        float _1639 = dot(vec3(_1636, _1637, _1638), vec3(_1636, _1637, _1638));
        float _1644 = (_1639 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1639);
        float _1652 = (dot(vec3(_879, _880, _881), vec3(_1644 * _1636, _1644 * _1637, _1644 * _1638)) + 1.0) * 0.5;
        float _4517 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
        float _1661 = sqrt(((_1637 * _1637) + (_1636 * _1636)) + (_1638 * _1638)) / (_1633 + 9.9999997473787516355514526367188e-06);
        float _4528 = isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0));
        float _1662 = isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0));
        float _1663 = _1662 * 2.0;
        float _1667 = (1.0 - _1662) / (_1662 + 1.0);
        float _4539 = isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0));
        float _1668 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
        float _1677 = ((((1.0 - _1668) * (_1663 + 2.0)) * exp2(log2(isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0))) * (_1663 + 1.0))) + _1668) * _1633;
        float _1678 = _1601 * 0.5;
        float _1679 = _1611 * 0.5;
        float _1680 = _1621 * 0.5;
        float _1681 = dot(vec3(_1678, _1679, _1680), vec3(_1678, _1679, _1680));
        float _1686 = (_1681 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1681);
        float _1694 = (dot(vec3(_879, _880, _881), vec3(_1686 * _1678, _1686 * _1679, _1686 * _1680)) + 1.0) * 0.5;
        float _4550 = isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0));
        float _1703 = sqrt(((_1679 * _1679) + (_1678 * _1678)) + (_1680 * _1680)) / (_1634 + 9.9999997473787516355514526367188e-06);
        float _4561 = isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0));
        float _1704 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
        float _1705 = _1704 * 2.0;
        float _1709 = (1.0 - _1704) / (_1704 + 1.0);
        float _4572 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
        float _1710 = isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0));
        float _1719 = ((((1.0 - _1710) * (_1705 + 2.0)) * exp2(log2(isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0))) * (_1705 + 1.0))) + _1710) * _1634;
        float _1720 = _1602 * 0.5;
        float _1721 = _1612 * 0.5;
        float _1722 = _1622 * 0.5;
        float _1723 = dot(vec3(_1720, _1721, _1722), vec3(_1720, _1721, _1722));
        float _1728 = (_1723 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1723);
        float _1736 = (dot(vec3(_879, _880, _881), vec3(_1728 * _1720, _1728 * _1721, _1728 * _1722)) + 1.0) * 0.5;
        float _4583 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
        float _1745 = sqrt(((_1721 * _1721) + (_1720 * _1720)) + (_1722 * _1722)) / (_1635 + 9.9999997473787516355514526367188e-06);
        float _4594 = isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0));
        float _1746 = isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0));
        float _1747 = _1746 * 2.0;
        float _1751 = (1.0 - _1746) / (_1746 + 1.0);
        float _4605 = isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0));
        float _1752 = isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0));
        float _1761 = ((((1.0 - _1752) * (_1747 + 2.0)) * exp2(log2(isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0))) * (_1747 + 1.0))) + _1752) * _1635;
        _1769 = _1602;
        _1770 = _1601;
        _1771 = _1600;
        _1772 = _1612;
        _1773 = _1611;
        _1774 = _1610;
        _1775 = _1622;
        _1776 = _1621;
        _1777 = _1620;
        _1778 = _1635;
        _1779 = _1634;
        _1780 = _1633;
        _1781 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0)));
        _1782 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0)));
        _1783 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0)));
    }
    else
    {
        _1769 = _1458;
        _1770 = _1458;
        _1771 = _1458;
        _1772 = _1458;
        _1773 = _1458;
        _1774 = _1458;
        _1775 = _1458;
        _1776 = _1458;
        _1777 = _1458;
        _1778 = _1458;
        _1779 = _1458;
        _1780 = _1458;
        _1781 = 0.0;
        _1782 = 0.0;
        _1783 = 0.0;
    }
    float _1793 = (cbModelParam._m0[1u].x * (_1781 - _1470)) + _1470;
    float _1794 = (cbModelParam._m0[1u].x * (_1782 - _1471)) + _1471;
    float _1795 = (cbModelParam._m0[1u].x * (_1783 - _1472)) + _1472;
    float _1816 = fma(_1795, cbSceneParam._m0[89u].z, fma(_1794, cbSceneParam._m0[89u].y, _1793 * cbSceneParam._m0[89u].x));
    float _1819 = fma(_1795, cbSceneParam._m0[90u].z, fma(_1794, cbSceneParam._m0[90u].y, _1793 * cbSceneParam._m0[90u].x));
    float _1822 = fma(_1795, cbSceneParam._m0[91u].z, fma(_1794, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1793));
    float _1837 = _1064 * 0.5;
    float _1838 = _1065 * 0.5;
    float _1839 = _1066 * 0.5;
    float _1840 = dot(vec4(_1837, _1838, _1839, 1.0), vec4(_1771, _1774, _1777, _1780));
    float _1843 = dot(vec4(_1837, _1838, _1839, 1.0), vec4(_1770, _1773, _1776, _1779));
    float _1846 = dot(vec4(_1837, _1838, _1839, 1.0), vec4(_1769, _1772, _1775, _1778));
    float _1880;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1853 = dot(vec4(_1837, _1838, _1839, 1.0), vec4(_1457, _1461, _1464, _1467));
        float _1857 = dot(vec4(_1837, _1838, _1839, 1.0), vec4(_1459, _1462, _1465, _1468));
        float _1861 = dot(vec4(_1837, _1838, _1839, 1.0), vec4(_1460, _1463, _1466, _1469));
        float _1868 = dot(vec4(cbModelParam._m0[39u]), vec4(_1837, _1838, _1839, 1.0));
        _1880 = dot(vec3(isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0)), isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0)), isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1868) ? 0.0 : (isnan(0.0) ? _1868 : max(0.0, _1868))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1880 = 1.0;
    }
    float _1891;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1882 = dot(vec4(cbModelParam._m0[40u]), vec4(_1837, _1838, _1839, 1.0));
        _1891 = dot(vec3(isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0)), isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0)), isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1882) ? 0.0 : (isnan(0.0) ? _1882 : max(0.0, _1882))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1891 = 1.0;
    }
    float _1895 = (_1891 * cbModelParam._m0[1u].x) + (_1880 * (1.0 - cbModelParam._m0[1u].x));
    float _1905 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _882);
    float _1906 = isnan(_1905) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1905 : min(cbModelParam._m0[25u].z, _1905));
    float _1986;
    float _1988;
    float _1990;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1953 = fma(_1128, cbModelParam._m0[13u].z, fma(_1124, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1120)) + cbModelParam._m0[13u].w;
        float _1957 = fma(_1128, cbModelParam._m0[14u].z, fma(_1124, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1120)) + cbModelParam._m0[14u].w;
        float _1961 = fma(_1128, cbModelParam._m0[15u].z, fma(_1124, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1120)) + cbModelParam._m0[15u].w;
        float _1964 = fma(_1066, cbModelParam._m0[13u].z, fma(_1065, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1064));
        float _1967 = fma(_1066, cbModelParam._m0[14u].z, fma(_1065, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1064));
        float _1970 = fma(_1066, cbModelParam._m0[15u].z, fma(_1065, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1064));
        float _1998;
        if (_1964 > 0.0)
        {
            _1998 = abs((1.0 - _1953) / _1964);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1964 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1953 + 1.0) / _1964);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1998 = frontier_phi_17_15_ladder;
        }
        float _2169;
        if (_1967 > 0.0)
        {
            _2169 = abs((1.0 - _1957) / _1967);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1967 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1957 + 1.0) / _1967);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2169 = frontier_phi_26_22_ladder;
        }
        float _2464;
        if (_1970 > 0.0)
        {
            _2464 = abs((1.0 - _1961) / _1970);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1970 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1961 + 1.0) / _1970);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2464 = frontier_phi_38_33_ladder;
        }
        float _2466 = isnan(_2169) ? _1998 : (isnan(_1998) ? _2169 : min(_1998, _2169));
        float _2467 = isnan(_2464) ? _2466 : (isnan(_2466) ? _2464 : min(_2466, _2464));
        float _2471 = (_2467 * _1964) + _1953;
        float _2472 = (_2467 * _1967) + _1957;
        float _2473 = (_2467 * _1970) + _1961;
        float _2474 = _2467 * 9.9999997473787516355514526367188e-05;
        float _2476 = (-1.0) - _2474;
        float _2478 = _2474 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2473 > _2478) || ((_2473 < _2476) || ((_2472 > _2478) || ((_2472 < _2476) || ((_2471 < _2476) || (_2471 > _2478))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2618 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2473, cbModelParam._m0[9u].z, fma(_2472, cbModelParam._m0[9u].y, _2471 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2473, cbModelParam._m0[10u].z, fma(_2472, cbModelParam._m0[10u].y, _2471 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2473, cbModelParam._m0[11u].z, fma(_2472, cbModelParam._m0[11u].y, _2471 * cbModelParam._m0[11u].x))), _1906);
            frontier_phi_16_38_ladder = _2618.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2618.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2618.x * cbModelParam._m0[1u].y;
        }
        _1986 = frontier_phi_16_38_ladder_2;
        _1988 = frontier_phi_16_38_ladder_1;
        _1990 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1974 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1064, _1065, _1066), _1906);
        _1986 = _1974.x * cbModelParam._m0[1u].y;
        _1988 = _1974.y * cbModelParam._m0[1u].y;
        _1990 = _1974.z * cbModelParam._m0[1u].y;
    }
    float _1994 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _882);
    float _1995 = isnan(_1994) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1994 : min(cbModelParam._m0[25u].w, _1994));
    float _2084;
    float _2086;
    float _2088;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2048 = fma(_1128, cbModelParam._m0[21u].z, fma(_1124, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1120)) + cbModelParam._m0[21u].w;
        float _2052 = fma(_1128, cbModelParam._m0[22u].z, fma(_1124, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1120)) + cbModelParam._m0[22u].w;
        float _2056 = fma(_1128, cbModelParam._m0[23u].z, fma(_1124, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1120)) + cbModelParam._m0[23u].w;
        float _2059 = fma(_1066, cbModelParam._m0[21u].z, fma(_1065, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1064));
        float _2062 = fma(_1066, cbModelParam._m0[22u].z, fma(_1065, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1064));
        float _2065 = fma(_1066, cbModelParam._m0[23u].z, fma(_1065, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1064));
        float _2174;
        if (_2059 > 0.0)
        {
            _2174 = abs((1.0 - _2048) / _2059);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2059 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2048 + 1.0) / _2059);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2174 = frontier_phi_28_24_ladder;
        }
        float _2491;
        if (_2062 > 0.0)
        {
            _2491 = abs((1.0 - _2052) / _2062);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2062 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2052 + 1.0) / _2062);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2491 = frontier_phi_40_35_ladder;
        }
        float _2829;
        if (_2065 > 0.0)
        {
            _2829 = abs((1.0 - _2056) / _2065);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2065 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2056 + 1.0) / _2065);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2829 = frontier_phi_50_47_ladder;
        }
        float _2831 = isnan(_2491) ? _2174 : (isnan(_2174) ? _2491 : min(_2174, _2491));
        float _2832 = isnan(_2829) ? _2831 : (isnan(_2831) ? _2829 : min(_2831, _2829));
        float _2836 = (_2832 * _2059) + _2048;
        float _2837 = (_2832 * _2062) + _2052;
        float _2838 = (_2832 * _2065) + _2056;
        float _2839 = _2832 * 9.9999997473787516355514526367188e-05;
        float _2840 = (-1.0) - _2839;
        float _2842 = _2839 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2838 > _2842) || ((_2838 < _2840) || ((_2837 > _2842) || ((_2837 < _2840) || ((_2836 < _2840) || (_2836 > _2842))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2960 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2838, cbModelParam._m0[17u].z, fma(_2837, cbModelParam._m0[17u].y, _2836 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2838, cbModelParam._m0[18u].z, fma(_2837, cbModelParam._m0[18u].y, _2836 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2838, cbModelParam._m0[19u].z, fma(_2837, cbModelParam._m0[19u].y, _2836 * cbModelParam._m0[19u].x))), _1995);
            frontier_phi_25_50_ladder = _2960.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2960.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2960.x * cbModelParam._m0[1u].z;
        }
        _2084 = frontier_phi_25_50_ladder_2;
        _2086 = frontier_phi_25_50_ladder_1;
        _2088 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2068 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1064, _1065, _1066), _1995);
        _2084 = _2068.x * cbModelParam._m0[1u].z;
        _2086 = _2068.y * cbModelParam._m0[1u].z;
        _2088 = _2068.z * cbModelParam._m0[1u].z;
    }
    float _2101 = (((_1091 * _1040) + _1092) * _1056) * ((cbModelParam._m0[1u].w * (_2084 - _1986)) + _1986);
    float _2103 = (((_1091 * _1042) + _1092) * _1056) * ((cbModelParam._m0[1u].w * (_2086 - _1988)) + _1988);
    float _2105 = (((_1091 * _1043) + _1092) * _1056) * ((cbModelParam._m0[1u].w * (_2088 - _1990)) + _1990);
    float _2108 = fma(_2105, cbSceneParam._m0[89u].z, fma(_2103, cbSceneParam._m0[89u].y, _2101 * cbSceneParam._m0[89u].x));
    float _2111 = fma(_2105, cbSceneParam._m0[90u].z, fma(_2103, cbSceneParam._m0[90u].y, _2101 * cbSceneParam._m0[90u].x));
    float _2114 = fma(_2105, cbSceneParam._m0[91u].z, fma(_2103, cbSceneParam._m0[91u].y, _2101 * cbSceneParam._m0[91u].x));
    float _2148 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2152 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2156 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2160 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2161 = _2148 / _2160;
    float _2162 = _2152 / _2160;
    float _2163 = _2156 / _2160;
    float _2310;
    float _2311;
    float _2312;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2190 = ((uint(_2163 > cbSceneParam._m0[59u].y) + uint(_2163 > cbSceneParam._m0[59u].x)) + uint(_2163 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2191 = _2190 + 43u;
        uint _2199 = _2190 + 44u;
        uint _2207 = _2190 + 45u;
        uint _2215 = _2190 + 46u;
        float _2226 = fma(_2160, cbSceneParam._m0[_2191].w, fma(_2156, cbSceneParam._m0[_2191].z, fma(_2152, cbSceneParam._m0[_2191].y, _2148 * cbSceneParam._m0[_2191].x)));
        float _2230 = fma(_2160, cbSceneParam._m0[_2199].w, fma(_2156, cbSceneParam._m0[_2199].z, fma(_2152, cbSceneParam._m0[_2199].y, _2148 * cbSceneParam._m0[_2199].x)));
        float _2238 = fma(_2160, cbSceneParam._m0[_2215].w, fma(_2156, cbSceneParam._m0[_2215].z, fma(_2152, cbSceneParam._m0[_2215].y, _2148 * cbSceneParam._m0[_2215].x)));
        float _2243 = cbSceneParam._m0[33u].z * _2238;
        float _2245 = cbSceneParam._m0[33u].w * _2238;
        float _2248 = fma(_2160, cbSceneParam._m0[_2207].w, fma(_2156, cbSceneParam._m0[_2207].z, fma(_2152, cbSceneParam._m0[_2207].y, _2148 * cbSceneParam._m0[_2207].x))) / _2238;
        float _2296 = (cbSceneParam._m0[33u].x - sqrt(((_2162 * _2162) + (_2161 * _2161)) + (_2163 * _2163))) * cbSceneParam._m0[33u].y;
        float _4731 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
        float _2303 = (isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2243 + _2226) / _2238, (_2245 + _2230) / _2238), _2248), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2245 + _2226) / _2238, (_2230 - _2243) / _2238), _2248), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2226 - _2243) / _2238, (_2230 - _2245) / _2238), _2248), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2226 - _2245) / _2238, (_2243 + _2230) / _2238), _2248), 0.0)).x), vec4(0.25)));
        _2310 = 1.0 - (_2303 * cbSceneParam._m0[34u].x);
        _2311 = 1.0 - (_2303 * cbSceneParam._m0[34u].y);
        _2312 = 1.0 - (_2303 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2310 = 1.0;
        _2311 = 1.0;
        _2312 = 1.0;
    }
    float _2376;
    float _2378;
    float _2380;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2364 = fma(_2160, cbSceneParam._m0[63u].w, fma(_2156, cbSceneParam._m0[63u].z, fma(_2152, cbSceneParam._m0[63u].y, _2148 * cbSceneParam._m0[63u].x)));
        float _2365 = fma(_2160, cbSceneParam._m0[60u].w, fma(_2156, cbSceneParam._m0[60u].z, fma(_2152, cbSceneParam._m0[60u].y, _2148 * cbSceneParam._m0[60u].x))) / _2364;
        float _2366 = fma(_2160, cbSceneParam._m0[61u].w, fma(_2156, cbSceneParam._m0[61u].z, fma(_2152, cbSceneParam._m0[61u].y, _2148 * cbSceneParam._m0[61u].x))) / _2364;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2365 >= cbSceneParam._m0[64u].x) && (_2366 >= cbSceneParam._m0[64u].y)) && (_2365 <= cbSceneParam._m0[64u].z)) && (_2366 <= cbSceneParam._m0[64u].w))
        {
            float _2504 = fma(_2160, cbSceneParam._m0[62u].w, fma(_2156, cbSceneParam._m0[62u].z, fma(_2152, cbSceneParam._m0[62u].y, _2148 * cbSceneParam._m0[62u].x))) / _2364;
            float _2508 = isnan(cbSceneParam._m0[41u].w) ? _2504 : (isnan(_2504) ? cbSceneParam._m0[41u].w : max(_2504, cbSceneParam._m0[41u].w));
            float _2551 = (cbSceneParam._m0[33u].x - sqrt(((_2162 * _2162) + (_2161 * _2161)) + (_2163 * _2163))) * cbSceneParam._m0[33u].y;
            float _4747 = isnan(0.0) ? _2551 : (isnan(_2551) ? 0.0 : max(_2551, 0.0));
            float _2558 = (isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2365, cbSceneParam._m0[33u].w + _2366), _2508), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2365, _2366 - cbSceneParam._m0[33u].z), _2508), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2365 - cbSceneParam._m0[33u].z, _2366 - cbSceneParam._m0[33u].w), _2508), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2365 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2366), _2508), 0.0)).x), vec4(0.25)));
            float _2562 = 1.0 - (_2558 * cbSceneParam._m0[34u].x);
            float _2563 = 1.0 - (_2558 * cbSceneParam._m0[34u].y);
            float _2564 = 1.0 - (_2558 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2564) ? _2312 : (isnan(_2312) ? _2564 : min(_2312, _2564));
            frontier_phi_37_36_ladder_1 = isnan(_2563) ? _2311 : (isnan(_2311) ? _2563 : min(_2311, _2563));
            frontier_phi_37_36_ladder_2 = isnan(_2562) ? _2310 : (isnan(_2310) ? _2562 : min(_2310, _2562));
        }
        else
        {
            frontier_phi_37_36_ladder = _2312;
            frontier_phi_37_36_ladder_1 = _2311;
            frontier_phi_37_36_ladder_2 = _2310;
        }
        _2376 = frontier_phi_37_36_ladder_2;
        _2378 = frontier_phi_37_36_ladder_1;
        _2380 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2376 = _2310;
        _2378 = _2311;
        _2380 = _2312;
    }
    uvec4 _2385 = floatBitsToUint(cbInstanceData._m0[_289 + 5u]);
    uint _2387 = _2385.x * 14u;
    uint _2388 = _2387 + 13u;
    float _2395 = _1056 + (-1.0);
    float _2400 = (cbLight._m0[_2388].x * _2395) + 1.0;
    float _2401 = (cbLight._m0[_2388].y * _2395) + 1.0;
    float _2402 = (cbLight._m0[_2388].z * _2395) + 1.0;
    float _2403 = (cbLight._m0[_2388].w * _2395) + 1.0;
    uint _2404 = _2387 + 5u;
    float _2410 = isnan(1.0) ? _2401 : (isnan(_2401) ? 1.0 : min(_2401, 1.0));
    uint _2414 = _2387 + 4u;
    float _2423 = isnan(1.0) ? _2400 : (isnan(_2400) ? 1.0 : min(_2400, 1.0));
    uint _2427 = _2387 | 1u;
    float _2438 = dot(vec3(cbLight._m0[_2387].xyz), vec3(_879, _880, _881));
    float _2441 = dot(vec3(cbLight._m0[_2427].xyz), vec3(_879, _880, _881));
    float _4783 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
    float _4794 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
    float _2446 = (isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0))) * 0.3183098733425140380859375;
    float _2448 = (isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0))) * 0.3183098733425140380859375;
    float _2455 = ((cbLight._m0[_2404].x * _2410) * _2448) + (((cbLight._m0[_2414].x * _2376) * _2423) * _2446);
    float _2456 = ((_2410 * cbLight._m0[_2404].y) * _2448) + (((cbLight._m0[_2414].y * _2378) * _2423) * _2446);
    float _2457 = ((_2410 * cbLight._m0[_2404].z) * _2448) + (((cbLight._m0[_2414].z * _2380) * _2423) * _2446);
    uvec4 _2461 = floatBitsToUint(cbLight._m0[_2387 + 12u]);
    bool _2463 = _2461.x == 0u;
    float _2565;
    float _2567;
    float _2569;
    if (_2463)
    {
        _2565 = _2455;
        _2567 = _2456;
        _2569 = _2457;
    }
    else
    {
        uint _2573 = _2387 + 6u;
        float _2589 = (dot(vec3(cbLight._m0[_2387 + 2u].xyz), vec3(_879, _880, _881)) * 0.5) + 0.5;
        float _2590 = _2589 * _2589;
        float _4805 = isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : max(_2590, 0.0));
        float _2591 = isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0));
        float _2592 = isnan(1.0) ? _2402 : (isnan(_2402) ? 1.0 : min(_2402, 1.0));
        _2565 = (((cbLight._m0[_2573].x * 0.3183098733425140380859375) * _2591) * _2592) + _2455;
        _2567 = (((cbLight._m0[_2573].y * 0.3183098733425140380859375) * _2591) * _2592) + _2456;
        _2569 = (((cbLight._m0[_2573].z * 0.3183098733425140380859375) * _2591) * _2592) + _2457;
    }
    bool _2572 = _2461.y == 0u;
    float _2627;
    float _2629;
    float _2631;
    if (_2572)
    {
        _2627 = _2565;
        _2629 = _2567;
        _2631 = _2569;
    }
    else
    {
        uint _2800 = _2387 + 7u;
        float _2816 = (dot(vec3(cbLight._m0[_2387 + 3u].xyz), vec3(_879, _880, _881)) * 0.5) + 0.5;
        float _2817 = _2816 * _2816;
        float _4821 = isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : max(_2817, 0.0));
        float _2818 = isnan(1.0) ? _4821 : (isnan(_4821) ? 1.0 : min(_4821, 1.0));
        float _2819 = isnan(1.0) ? _2403 : (isnan(_2403) ? 1.0 : min(_2403, 1.0));
        _2627 = (((cbLight._m0[_2800].x * 0.3183098733425140380859375) * _2818) * _2819) + _2565;
        _2629 = (((cbLight._m0[_2800].y * 0.3183098733425140380859375) * _2818) * _2819) + _2567;
        _2631 = (((cbLight._m0[_2800].z * 0.3183098733425140380859375) * _2818) * _2819) + _2569;
    }
    uint _2634 = _2387 + 8u;
    float _2647 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2387].w)) * _882) * 0.949999988079071044921875);
    float _2648 = _2647 * _2647;
    float _2649 = cbLight._m0[_2387].x + _958;
    float _2650 = cbLight._m0[_2387].y + _959;
    float _2651 = cbLight._m0[_2387].z + _960;
    float _2655 = inversesqrt(dot(vec3(_2649, _2650, _2651), vec3(_2649, _2650, _2651)));
    float _2656 = _2655 * _2649;
    float _2657 = _2655 * _2650;
    float _2658 = _2655 * _2651;
    float _2659 = dot(vec3(_879, _880, _881), vec3(cbLight._m0[_2387].xyz));
    float _4837 = isnan(0.0) ? _2659 : (isnan(_2659) ? 0.0 : max(_2659, 0.0));
    float _2662 = isnan(1.0) ? _4837 : (isnan(_4837) ? 1.0 : min(_4837, 1.0));
    float _4848 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
    float _2663 = isnan(1.0) ? _4848 : (isnan(_4848) ? 1.0 : min(_4848, 1.0));
    float _2664 = dot(vec3(_879, _880, _881), vec3(_2656, _2657, _2658));
    float _4859 = isnan(0.0) ? _2664 : (isnan(_2664) ? 0.0 : max(_2664, 0.0));
    float _2667 = isnan(1.0) ? _4859 : (isnan(_4859) ? 1.0 : min(_4859, 1.0));
    float _2668 = dot(vec3(cbLight._m0[_2387].xyz), vec3(_2656, _2657, _2658));
    float _4870 = isnan(0.0) ? _2668 : (isnan(_2668) ? 0.0 : max(_2668, 0.0));
    float _2672 = _2648 * _2648;
    float _2676 = ((_2667 * _2667) * (_2672 + (-1.0))) + 1.0;
    float _2684 = exp2(log2(1.0 - (isnan(1.0) ? _4870 : (isnan(_4870) ? 1.0 : min(_4870, 1.0)))) * 5.0);
    float _2685 = 0.959999978542327880859375 - _1037;
    float _2687 = 0.959999978542327880859375 - _1038;
    float _2688 = 0.959999978542327880859375 - _1039;
    float _2695 = 1.0 - _2648;
    float _2706 = (0.5 / (((_2663 * ((_2662 * _2695) + _2648)) + 9.9999999392252902907785028219223e-09) + (((_2663 * _2695) + _2648) * _2662))) * _2662;
    float _4881 = isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : max(_2706, 0.0));
    float _2708 = (isnan(1.0) ? _4881 : (isnan(_4881) ? 1.0 : min(_4881, 1.0))) * (_2672 / ((_2676 * _2676) * 3.141590118408203125));
    uint _2722 = _2387 + 9u;
    float _2733 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2427].w)) * _882) * 0.949999988079071044921875);
    float _2734 = _2733 * _2733;
    float _2735 = cbLight._m0[_2427].x + _958;
    float _2736 = cbLight._m0[_2427].y + _959;
    float _2737 = cbLight._m0[_2427].z + _960;
    float _2741 = inversesqrt(dot(vec3(_2735, _2736, _2737), vec3(_2735, _2736, _2737)));
    float _2742 = _2741 * _2735;
    float _2743 = _2741 * _2736;
    float _2744 = _2741 * _2737;
    float _2745 = dot(vec3(_879, _880, _881), vec3(cbLight._m0[_2427].xyz));
    float _4892 = isnan(0.0) ? _2745 : (isnan(_2745) ? 0.0 : max(_2745, 0.0));
    float _2748 = isnan(1.0) ? _4892 : (isnan(_4892) ? 1.0 : min(_4892, 1.0));
    float _2749 = dot(vec3(_879, _880, _881), vec3(_2742, _2743, _2744));
    float _4903 = isnan(0.0) ? _2749 : (isnan(_2749) ? 0.0 : max(_2749, 0.0));
    float _2752 = isnan(1.0) ? _4903 : (isnan(_4903) ? 1.0 : min(_4903, 1.0));
    float _2753 = dot(vec3(cbLight._m0[_2427].xyz), vec3(_2742, _2743, _2744));
    float _4914 = isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0));
    float _2757 = _2734 * _2734;
    float _2761 = ((_2752 * _2752) * (_2757 + (-1.0))) + 1.0;
    float _2768 = exp2(log2(1.0 - (isnan(1.0) ? _4914 : (isnan(_4914) ? 1.0 : min(_4914, 1.0)))) * 5.0);
    float _2775 = 1.0 - _2734;
    float _2785 = (0.5 / (((_2663 * ((_2748 * _2775) + _2734)) + 9.9999999392252902907785028219223e-09) + (((_2663 * _2775) + _2734) * _2748))) * _2748;
    float _4925 = isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : max(_2785, 0.0));
    float _2787 = (isnan(1.0) ? _4925 : (isnan(_4925) ? 1.0 : min(_4925, 1.0))) * (_2757 / ((_2761 * _2761) * 3.141590118408203125));
    float _2797 = (((((_2768 * _2685) + _1040) * cbLight._m0[_2722].x) * _2787) * _2410) + ((((cbLight._m0[_2634].x * _2376) * ((_2684 * _2685) + _1040)) * _2708) * _2423);
    float _2798 = (((((_2768 * _2687) + _1042) * cbLight._m0[_2722].y) * _2787) * _2410) + ((((cbLight._m0[_2634].y * _2378) * ((_2684 * _2687) + _1042)) * _2708) * _2423);
    float _2799 = (((((_2768 * _2688) + _1043) * cbLight._m0[_2722].z) * _2787) * _2410) + ((((cbLight._m0[_2634].z * _2380) * ((_2684 * _2688) + _1043)) * _2708) * _2423);
    float _2855;
    float _2857;
    float _2859;
    if (_2463)
    {
        _2855 = _2797;
        _2857 = _2798;
        _2859 = _2799;
    }
    else
    {
        uint _2861 = _2387 + 2u;
        uint _2865 = _2387 + 10u;
        float _2879 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2861].w)) * _882) * 0.949999988079071044921875);
        float _2880 = _2879 * _2879;
        float _2881 = cbLight._m0[_2861].x + _958;
        float _2882 = cbLight._m0[_2861].y + _959;
        float _2883 = cbLight._m0[_2861].z + _960;
        float _2887 = inversesqrt(dot(vec3(_2881, _2882, _2883), vec3(_2881, _2882, _2883)));
        float _2888 = _2887 * _2881;
        float _2889 = _2887 * _2882;
        float _2890 = _2887 * _2883;
        float _2891 = dot(vec3(_879, _880, _881), vec3(cbLight._m0[_2861].xyz));
        float _4936 = isnan(0.0) ? _2891 : (isnan(_2891) ? 0.0 : max(_2891, 0.0));
        float _2894 = isnan(1.0) ? _4936 : (isnan(_4936) ? 1.0 : min(_4936, 1.0));
        float _2895 = dot(vec3(_879, _880, _881), vec3(_2888, _2889, _2890));
        float _4947 = isnan(0.0) ? _2895 : (isnan(_2895) ? 0.0 : max(_2895, 0.0));
        float _2898 = isnan(1.0) ? _4947 : (isnan(_4947) ? 1.0 : min(_4947, 1.0));
        float _2899 = dot(vec3(cbLight._m0[_2861].xyz), vec3(_2888, _2889, _2890));
        float _4958 = isnan(0.0) ? _2899 : (isnan(_2899) ? 0.0 : max(_2899, 0.0));
        float _2903 = _2880 * _2880;
        float _2907 = ((_2898 * _2898) * (_2903 + (-1.0))) + 1.0;
        float _2914 = exp2(log2(1.0 - (isnan(1.0) ? _4958 : (isnan(_4958) ? 1.0 : min(_4958, 1.0)))) * 5.0);
        float _2921 = 1.0 - _2880;
        float _2931 = (0.5 / (((_2663 * ((_2894 * _2921) + _2880)) + 9.9999999392252902907785028219223e-09) + (((_2663 * _2921) + _2880) * _2894))) * _2894;
        float _4969 = isnan(0.0) ? _2931 : (isnan(_2931) ? 0.0 : max(_2931, 0.0));
        float _2933 = (isnan(1.0) ? _4969 : (isnan(_4969) ? 1.0 : min(_4969, 1.0))) * (_2903 / ((_2907 * _2907) * 3.141590118408203125));
        float _2934 = isnan(1.0) ? _2402 : (isnan(_2402) ? 1.0 : min(_2402, 1.0));
        _2855 = (((((_2914 * _2685) + _1040) * cbLight._m0[_2865].x) * _2933) * _2934) + _2797;
        _2857 = (((((_2914 * _2687) + _1042) * cbLight._m0[_2865].y) * _2933) * _2934) + _2798;
        _2859 = (((((_2914 * _2688) + _1043) * cbLight._m0[_2865].z) * _2933) * _2934) + _2799;
    }
    float _2965;
    float _2967;
    float _2969;
    if (_2572)
    {
        _2965 = _2855;
        _2967 = _2857;
        _2969 = _2859;
    }
    else
    {
        uint _2976 = _2387 + 3u;
        uint _2980 = _2387 + 11u;
        float _2994 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2976].w)) * _882) * 0.949999988079071044921875);
        float _2995 = _2994 * _2994;
        float _2996 = cbLight._m0[_2976].x + _958;
        float _2997 = cbLight._m0[_2976].y + _959;
        float _2998 = cbLight._m0[_2976].z + _960;
        float _3002 = inversesqrt(dot(vec3(_2996, _2997, _2998), vec3(_2996, _2997, _2998)));
        float _3003 = _3002 * _2996;
        float _3004 = _3002 * _2997;
        float _3005 = _3002 * _2998;
        float _3006 = dot(vec3(_879, _880, _881), vec3(cbLight._m0[_2976].xyz));
        float _4985 = isnan(0.0) ? _3006 : (isnan(_3006) ? 0.0 : max(_3006, 0.0));
        float _3009 = isnan(1.0) ? _4985 : (isnan(_4985) ? 1.0 : min(_4985, 1.0));
        float _3010 = dot(vec3(_879, _880, _881), vec3(_3003, _3004, _3005));
        float _4996 = isnan(0.0) ? _3010 : (isnan(_3010) ? 0.0 : max(_3010, 0.0));
        float _3013 = isnan(1.0) ? _4996 : (isnan(_4996) ? 1.0 : min(_4996, 1.0));
        float _3014 = dot(vec3(cbLight._m0[_2976].xyz), vec3(_3003, _3004, _3005));
        float _5007 = isnan(0.0) ? _3014 : (isnan(_3014) ? 0.0 : max(_3014, 0.0));
        float _3018 = _2995 * _2995;
        float _3022 = ((_3013 * _3013) * (_3018 + (-1.0))) + 1.0;
        float _3029 = exp2(log2(1.0 - (isnan(1.0) ? _5007 : (isnan(_5007) ? 1.0 : min(_5007, 1.0)))) * 5.0);
        float _3036 = 1.0 - _2995;
        float _3046 = (0.5 / (((_2663 * ((_3009 * _3036) + _2995)) + 9.9999999392252902907785028219223e-09) + (((_2663 * _3036) + _2995) * _3009))) * _3009;
        float _5018 = isnan(0.0) ? _3046 : (isnan(_3046) ? 0.0 : max(_3046, 0.0));
        float _3048 = (isnan(1.0) ? _5018 : (isnan(_5018) ? 1.0 : min(_5018, 1.0))) * (_3018 / ((_3022 * _3022) * 3.141590118408203125));
        float _3049 = isnan(1.0) ? _2403 : (isnan(_2403) ? 1.0 : min(_2403, 1.0));
        _2965 = (((((_3029 * _2685) + _1040) * cbLight._m0[_2980].x) * _3048) * _3049) + _2855;
        _2967 = (((((_3029 * _2687) + _1042) * cbLight._m0[_2980].y) * _3048) * _3049) + _2857;
        _2969 = (((((_3029 * _2688) + _1043) * cbLight._m0[_2980].z) * _3048) * _3049) + _2859;
    }
    float _3115;
    float _3117;
    float _3119;
    float _3121;
    float _3123;
    float _3125;
    if (_2385.y == 0u)
    {
        uvec4 _3070 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3071 = _3070.x;
        uint _3082 = uint((float(_3070.y) * floor(float(uint(cbSceneParam._m0[85u].y * _979) / _3071))) + floor(float(uint(cbSceneParam._m0[85u].x * _978) / _3071)));
        float _3092 = (log2(_2163 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3093 = isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : max(_3092, 0.0));
        uint _3096 = uint(isnan(14.0) ? _3093 : (isnan(_3093) ? 14.0 : min(_3093, 14.0)));
        uvec4 _3101 = texelFetch(g_lightClusterGridBuffer, int(((_3096 << 2u) + (_3082 << 6u)) >> 2u));
        uint _3102 = _3101.x;
        uint _3103 = _3070.z;
        float _3182;
        float _3184;
        float _3186;
        float _3188;
        float _3190;
        float _3192;
        if (((((1u << ((_3103 >> 4u) & 15u)) + 4294967295u) & _3102) == 0u) || ((_3103 & 240u) == 0u))
        {
            _3182 = 0.0;
            _3184 = 0.0;
            _3186 = 0.0;
            _3188 = 0.0;
            _3190 = 0.0;
            _3192 = 0.0;
        }
        else
        {
            float _3183;
            float _3185;
            float _3187;
            float _3189;
            float _3191;
            float _3193;
            float _3335 = 0.0;
            float _3336 = 0.0;
            float _3337 = 0.0;
            float _3338 = 0.0;
            float _3339 = 0.0;
            float _3340 = 0.0;
            uint _3341 = 0u;
            uint _3350;
            bool _3351;
            for (;;)
            {
                _3350 = texelFetch(g_lightClassification, int((((_3096 << 5u) + (_3082 << 9u)) + (_3341 << 2u)) >> 2u)).x;
                _3351 = _3350 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3351)
                {
                    frontier_phi_71_pred = _3340;
                    frontier_phi_71_pred_1 = _3339;
                    frontier_phi_71_pred_2 = _3338;
                    frontier_phi_71_pred_3 = _3337;
                    frontier_phi_71_pred_4 = _3336;
                    frontier_phi_71_pred_5 = _3335;
                }
                else
                {
                    float _3480;
                    float _3481;
                    float _3482;
                    float _3483;
                    float _3484;
                    float _3485;
                    uint _3486;
                    _3480 = _3335;
                    _3481 = _3336;
                    _3482 = _3337;
                    _3483 = _3338;
                    _3484 = _3339;
                    _3485 = _3340;
                    _3486 = _3350;
                    float _3407;
                    float _3408;
                    float _3409;
                    float _3410;
                    float _3411;
                    float _3412;
                    for (;;)
                    {
                        uint _3490 = uint(findLSB(_3486)) + (_3341 << 5u);
                        uint _3487 = (_3486 + 4294967295u) & _3486;
                        uint _3492 = _3490 * 48u;
                        vec4 _3506 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3492)).x, texelFetch(g_PointLightRenderingBuffer, int(_3492 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3492 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3492 + 3u)).x));
                        uint _3512 = (_3490 * 48u) + 4u;
                        vec4 _3525 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3512)).x, texelFetch(g_PointLightRenderingBuffer, int(_3512 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3512 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3512 + 3u)).x));
                        uint _3531 = (_3490 * 48u) + 8u;
                        vec3 _3542 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3531)).x, texelFetch(g_PointLightRenderingBuffer, int(_3531 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3531 + 2u)).x));
                        float _3546 = _3506.x - _2161;
                        float _3547 = _3506.y - _2162;
                        float _3548 = _3506.z - _2163;
                        float _3549 = dot(vec3(_3546, _3547, _3548), vec3(_3546, _3547, _3548));
                        float _3552 = inversesqrt(_3549);
                        float _3553 = _3552 * _3546;
                        float _3554 = _3552 * _3547;
                        float _3555 = _3552 * _3548;
                        float _3556 = dot(vec3(_997, _1000, _1003), vec3(_3553, _3554, _3555));
                        float _3561 = 1.0 - (_3549 * _3506.w);
                        float _5044 = isnan(0.0) ? _3561 : (isnan(_3561) ? 0.0 : max(_3561, 0.0));
                        float _3562 = isnan(1.0) ? _5044 : (isnan(_5044) ? 1.0 : min(_5044, 1.0));
                        float _3563 = sqrt(_3549) * _3525.w;
                        float _3566 = 1.39999997615814208984375 / (_3563 + 1.39999997615814208984375);
                        float _3567 = _3566 * _3566;
                        float _3570 = ((1.0 - _3567) * _3556) + _3567;
                        float _3573 = _3563 * _3563;
                        float _3577 = ((isnan(0.0) ? _3570 : (isnan(_3570) ? 0.0 : max(_3570, 0.0))) * _3562) / ((_3573 * 0.699999988079071044921875) + 1.0);
                        float _3581 = (-0.0) - _2161;
                        float _3582 = (-0.0) - _2162;
                        float _3583 = (-0.0) - _2163;
                        float _3587 = inversesqrt(dot(vec3(_3581, _3582, _3583), vec3(_3581, _3582, _3583)));
                        float _3588 = _3587 * _3581;
                        float _3589 = _3587 * _3582;
                        float _3590 = _3587 * _3583;
                        float _3597 = exp2(log2(1.0 / ((_3573 * 3.5) + 5.0)) * 0.25);
                        float _3598 = 1.0 - _1072;
                        float _3605 = sqrt(1.0 - ((1.0 - (_3598 * _3598)) * (1.0 - (_3597 * _3597))));
                        float _3606 = _3605 * _3605;
                        float _3607 = _3606 * _3606;
                        float _3608 = _3588 + _3553;
                        float _3609 = _3589 + _3554;
                        float _3610 = _3590 + _3555;
                        float _3614 = inversesqrt(dot(vec3(_3608, _3609, _3610), vec3(_3608, _3609, _3610)));
                        float _3618 = dot(vec3(_997, _1000, _1003), vec3(_3588, _3589, _3590));
                        float _5060 = isnan(0.0) ? _3618 : (isnan(_3618) ? 0.0 : max(_3618, 0.0));
                        float _3621 = isnan(1.0) ? _5060 : (isnan(_5060) ? 1.0 : min(_5060, 1.0));
                        float _3622 = dot(vec3(_997, _1000, _1003), vec3(_3614 * _3608, _3614 * _3609, _3614 * _3610));
                        float _5071 = isnan(0.0) ? _3622 : (isnan(_3622) ? 0.0 : max(_3622, 0.0));
                        float _3625 = isnan(1.0) ? _5071 : (isnan(_5071) ? 1.0 : min(_5071, 1.0));
                        float _3629 = ((_3625 * _3625) * (_3607 + (-1.0))) + 1.0;
                        float _3630 = _3566 * _3606;
                        float _3631 = _3630 * _3630;
                        float _3634 = ((1.0 - _3631) * _3556) + _3631;
                        float _5082 = isnan(0.0) ? _3634 : (isnan(_3634) ? 0.0 : max(_3634, 0.0));
                        float _3635 = isnan(1.0) ? _5082 : (isnan(_5082) ? 1.0 : min(_5082, 1.0));
                        float _3636 = 1.0 - _3606;
                        float _3646 = (0.5 / (((_3635 * ((_3621 * _3636) + _3606)) + 9.9999999392252902907785028219223e-09) + (((_3635 * _3636) + _3606) * _3621))) * _3635;
                        float _5093 = isnan(0.0) ? _3646 : (isnan(_3646) ? 0.0 : max(_3646, 0.0));
                        float _3657 = (((_3607 * 3.1415927410125732421875) * (isnan(1.0) ? _5093 : (isnan(_5093) ? 1.0 : min(_5093, 1.0)))) / ((_3629 * _3629) * ((_3573 * 2.1991131305694580078125) + 3.141590118408203125))) * _3562;
                        _3410 = (_3577 * _3525.x) + _3483;
                        _3411 = (_3577 * _3525.y) + _3484;
                        _3412 = (_3577 * _3525.z) + _3485;
                        _3407 = (_3657 * _3542.x) + _3480;
                        _3408 = (_3657 * _3542.y) + _3481;
                        _3409 = (_3657 * _3542.z) + _3482;
                        if (_3487 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3480 = _3407;
                            _3481 = _3408;
                            _3482 = _3409;
                            _3483 = _3410;
                            _3484 = _3411;
                            _3485 = _3412;
                            _3486 = _3487;
                        }
                    }
                    frontier_phi_71_pred = _3412;
                    frontier_phi_71_pred_1 = _3411;
                    frontier_phi_71_pred_2 = _3410;
                    frontier_phi_71_pred_3 = _3409;
                    frontier_phi_71_pred_4 = _3408;
                    frontier_phi_71_pred_5 = _3407;
                }
                _3193 = frontier_phi_71_pred;
                _3191 = frontier_phi_71_pred_1;
                _3189 = frontier_phi_71_pred_2;
                _3187 = frontier_phi_71_pred_3;
                _3185 = frontier_phi_71_pred_4;
                _3183 = frontier_phi_71_pred_5;
                uint _3342 = _3341 + 1u;
                if (_3342 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3335 = _3183;
                    _3336 = _3185;
                    _3337 = _3187;
                    _3338 = _3189;
                    _3339 = _3191;
                    _3340 = _3193;
                    _3341 = _3342;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3182 = _3183;
            _3184 = _3185;
            _3186 = _3187;
            _3188 = _3189;
            _3190 = _3191;
            _3192 = _3193;
        }
        uvec4 _3196 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3197 = _3196.z;
        uint _3199 = (_3197 >> 8u) & 15u;
        float _3303;
        float _3305;
        float _3307;
        float _3309;
        float _3311;
        float _3313;
        if (((4294967295u << _3199) & _3102) == 0u)
        {
            _3303 = _3182;
            _3305 = _3184;
            _3307 = _3186;
            _3309 = _3188;
            _3311 = _3190;
            _3313 = _3192;
        }
        else
        {
            float _3328 = inversesqrt(dot(vec3(_2161, _2162, _2163), vec3(_2161, _2162, _2163)));
            float _3329 = _3328 * _2161;
            float _3330 = _3328 * _2162;
            float _3331 = _3328 * _2163;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3199 < ((_3197 >> 12u) & 15u))
            {
                float _3304;
                float _3306;
                float _3308;
                float _3310;
                float _3312;
                float _3314;
                float _3463 = _3182;
                float _3464 = _3184;
                float _3465 = _3186;
                float _3466 = _3188;
                float _3467 = _3190;
                float _3468 = _3192;
                uint _3469 = _3199;
                uint _3478;
                bool _3479;
                for (;;)
                {
                    _3478 = texelFetch(g_lightClassification, int((((_3096 << 5u) + (_3082 << 9u)) + (_3469 << 2u)) >> 2u)).x;
                    _3479 = _3478 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3479)
                    {
                        frontier_phi_82_pred = _3468;
                        frontier_phi_82_pred_1 = _3467;
                        frontier_phi_82_pred_2 = _3466;
                        frontier_phi_82_pred_3 = _3465;
                        frontier_phi_82_pred_4 = _3464;
                        frontier_phi_82_pred_5 = _3463;
                    }
                    else
                    {
                        float _3671;
                        float _3672;
                        float _3673;
                        float _3674;
                        float _3675;
                        float _3676;
                        float _3964;
                        float _3965;
                        float _3966;
                        float _3967;
                        float _3968;
                        float _3969;
                        float _3684 = _3463;
                        float _3685 = _3464;
                        float _3686 = _3465;
                        float _3687 = _3466;
                        float _3688 = _3467;
                        float _3689 = _3468;
                        uint _3690 = _3478;
                        uint _3691;
                        vec4 _3716;
                        float _3717;
                        vec4 _3732;
                        vec3 _3744;
                        vec4 _3759;
                        vec4 _3774;
                        float _3820;
                        bool _3821;
                        for (;;)
                        {
                            uint _3701 = ((_3469 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3690));
                            _3691 = (_3690 + 4294967295u) & _3690;
                            uint _3703 = _3701 * 40u;
                            _3716 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3703)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3703 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3703 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3703 + 3u)).x));
                            _3717 = _3716.w;
                            uint _3719 = (_3701 * 40u) + 4u;
                            _3732 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3719)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3719 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3719 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3719 + 3u)).x));
                            uint _3734 = (_3701 * 40u) + 8u;
                            _3744 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3734)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3734 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3734 + 2u)).x));
                            uint _3746 = (_3701 * 40u) + 16u;
                            _3759 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3746)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3746 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3746 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3746 + 3u)).x));
                            uint _3761 = (_3701 * 40u) + 20u;
                            _3774 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3761)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3761 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3761 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3761 + 3u)).x));
                            uint _3776 = (_3701 * 40u) + 24u;
                            vec4 _3789 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3776)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3776 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3776 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3776 + 3u)).x));
                            uint _3795 = (_3701 * 40u) + 28u;
                            vec4 _3808 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3795)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3795 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3795 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3795 + 3u)).x));
                            _3820 = fma(_2163, _3808.z, fma(_2162, _3808.y, _3808.x * _2161)) + _3808.w;
                            _3821 = !((fma(_2163, _3789.z, fma(_2162, _3789.y, _3789.x * _2161)) + _3789.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3821)
                            {
                                float _3848 = _3716.x - _2161;
                                float _3849 = _3716.y - _2162;
                                float _3850 = _3716.z - _2163;
                                float _3851 = dot(vec3(_3848, _3849, _3850), vec3(_3848, _3849, _3850));
                                float _3854 = inversesqrt(_3851);
                                float _3855 = _3854 * _3848;
                                float _3856 = _3854 * _3849;
                                float _3857 = _3854 * _3850;
                                float _3861 = 1.0 - (_3851 / (_3717 * _3717));
                                float _5104 = isnan(0.0) ? _3861 : (isnan(_3861) ? 0.0 : max(_3861, 0.0));
                                float _3862 = isnan(1.0) ? _5104 : (isnan(_5104) ? 1.0 : min(_5104, 1.0));
                                float _3866 = sqrt(_3851) * _3732.w;
                                float _3868 = 1.39999997615814208984375 / (_3866 + 1.39999997615814208984375);
                                float _3869 = _3868 * _3868;
                                float _3872 = ((1.0 - _3869) * dot(vec3(_3855, _3856, _3857), vec3(_997, _1000, _1003))) + _3869;
                                float _3875 = _3866 * _3866;
                                float _3879 = (fma(_2163, _3759.z, fma(_2162, _3759.y, _3759.x * _2161)) + _3759.w) / _3820;
                                float _3880 = (fma(_2163, _3774.z, fma(_2162, _3774.y, _3774.x * _2161)) + _3774.w) / _3820;
                                float _3884 = 1.0 - dot(vec2(_3879, _3880), vec2(_3879, _3880));
                                float _5120 = isnan(0.0) ? _3884 : (isnan(_3884) ? 0.0 : max(_3884, 0.0));
                                float _3885 = isnan(1.0) ? _5120 : (isnan(_5120) ? 1.0 : min(_5120, 1.0));
                                float _3886 = _3885 * (((isnan(0.0) ? _3872 : (isnan(_3872) ? 0.0 : max(_3872, 0.0))) * _3862) / ((_3875 * 0.699999988079071044921875) + 1.0));
                                float _3898 = exp2(log2(1.0 / ((_3875 * 3.5) + 5.0)) * 0.25);
                                float _3899 = 1.0 - _1072;
                                float _3906 = sqrt(1.0 - ((1.0 - (_3899 * _3899)) * (1.0 - (_3898 * _3898))));
                                float _3907 = _3906 * _3906;
                                float _3908 = _3907 * _3907;
                                float _3909 = _3855 - _3329;
                                float _3910 = _3856 - _3330;
                                float _3911 = _3857 - _3331;
                                float _3915 = inversesqrt(dot(vec3(_3909, _3910, _3911), vec3(_3909, _3910, _3911)));
                                float _3919 = dot(vec3(_997, _1000, _1003), vec3((-0.0) - _3329, (-0.0) - _3330, (-0.0) - _3331));
                                float _5131 = isnan(0.0) ? _3919 : (isnan(_3919) ? 0.0 : max(_3919, 0.0));
                                float _3922 = isnan(1.0) ? _5131 : (isnan(_5131) ? 1.0 : min(_5131, 1.0));
                                float _3923 = dot(vec3(_997, _1000, _1003), vec3(_3915 * _3909, _3915 * _3910, _3915 * _3911));
                                float _5142 = isnan(0.0) ? _3923 : (isnan(_3923) ? 0.0 : max(_3923, 0.0));
                                float _3926 = isnan(1.0) ? _5142 : (isnan(_5142) ? 1.0 : min(_5142, 1.0));
                                float _3930 = ((_3926 * _3926) * (_3908 + (-1.0))) + 1.0;
                                float _3931 = _3868 * _3907;
                                float _3932 = _3931 * _3931;
                                float _3938 = ((1.0 - _3932) * dot(vec3(_997, _1000, _1003), vec3(_3855, _3856, _3857))) + _3932;
                                float _5153 = isnan(0.0) ? _3938 : (isnan(_3938) ? 0.0 : max(_3938, 0.0));
                                float _3939 = isnan(1.0) ? _5153 : (isnan(_5153) ? 1.0 : min(_5153, 1.0));
                                float _3940 = 1.0 - _3907;
                                float _3950 = (0.5 / (((_3939 * ((_3922 * _3940) + _3907)) + 9.9999999392252902907785028219223e-09) + (((_3939 * _3940) + _3907) * _3922))) * _3939;
                                float _5164 = isnan(0.0) ? _3950 : (isnan(_3950) ? 0.0 : max(_3950, 0.0));
                                float _3960 = (_3885 * _3862) * (((_3908 * 3.1415927410125732421875) * (isnan(1.0) ? _5164 : (isnan(_5164) ? 1.0 : min(_5164, 1.0)))) / ((_3930 * _3930) * ((_3875 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3886 * _3732.z;
                                frontier_phi_88_pred_1 = _3886 * _3732.y;
                                frontier_phi_88_pred_2 = _3886 * _3732.x;
                                frontier_phi_88_pred_3 = _3960 * _3744.z;
                                frontier_phi_88_pred_4 = _3960 * _3744.y;
                                frontier_phi_88_pred_5 = _3960 * _3744.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3969 = frontier_phi_88_pred;
                            _3968 = frontier_phi_88_pred_1;
                            _3967 = frontier_phi_88_pred_2;
                            _3966 = frontier_phi_88_pred_3;
                            _3965 = frontier_phi_88_pred_4;
                            _3964 = frontier_phi_88_pred_5;
                            _3674 = _3967 + _3687;
                            _3675 = _3968 + _3688;
                            _3676 = _3969 + _3689;
                            _3671 = _3964 + _3684;
                            _3672 = _3965 + _3685;
                            _3673 = _3966 + _3686;
                            if (_3691 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3684 = _3671;
                                _3685 = _3672;
                                _3686 = _3673;
                                _3687 = _3674;
                                _3688 = _3675;
                                _3689 = _3676;
                                _3690 = _3691;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3676;
                        frontier_phi_82_pred_1 = _3675;
                        frontier_phi_82_pred_2 = _3674;
                        frontier_phi_82_pred_3 = _3673;
                        frontier_phi_82_pred_4 = _3672;
                        frontier_phi_82_pred_5 = _3671;
                    }
                    _3314 = frontier_phi_82_pred;
                    _3312 = frontier_phi_82_pred_1;
                    _3310 = frontier_phi_82_pred_2;
                    _3308 = frontier_phi_82_pred_3;
                    _3306 = frontier_phi_82_pred_4;
                    _3304 = frontier_phi_82_pred_5;
                    uint _3470 = _3469 + 1u;
                    if (_3470 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3463 = _3304;
                        _3464 = _3306;
                        _3465 = _3308;
                        _3466 = _3310;
                        _3467 = _3312;
                        _3468 = _3314;
                        _3469 = _3470;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3310;
                frontier_phi_63_64_ladder_1 = _3314;
                frontier_phi_63_64_ladder_2 = _3312;
                frontier_phi_63_64_ladder_3 = _3308;
                frontier_phi_63_64_ladder_4 = _3306;
                frontier_phi_63_64_ladder_5 = _3304;
            }
            else
            {
                frontier_phi_63_64_ladder = _3188;
                frontier_phi_63_64_ladder_1 = _3192;
                frontier_phi_63_64_ladder_2 = _3190;
                frontier_phi_63_64_ladder_3 = _3186;
                frontier_phi_63_64_ladder_4 = _3184;
                frontier_phi_63_64_ladder_5 = _3182;
            }
            _3303 = frontier_phi_63_64_ladder_5;
            _3305 = frontier_phi_63_64_ladder_4;
            _3307 = frontier_phi_63_64_ladder_3;
            _3309 = frontier_phi_63_64_ladder;
            _3311 = frontier_phi_63_64_ladder_2;
            _3313 = frontier_phi_63_64_ladder_1;
        }
        float _3318 = isnan(1.0) ? _1056 : (isnan(_1056) ? 1.0 : min(_1056, 1.0));
        _3115 = (_3318 * _3309) + _2627;
        _3117 = (_3318 * _3311) + _2629;
        _3119 = (_3318 * _3313) + _2631;
        _3121 = ((_3303 * _1040) * _3318) + _2965;
        _3123 = ((_3305 * _1042) * _3318) + _2967;
        _3125 = ((_3307 * _1043) * _3318) + _2969;
    }
    else
    {
        _3115 = _2627;
        _3117 = _2629;
        _3119 = _2631;
        _3121 = _2965;
        _3123 = _2967;
        _3125 = _2969;
    }
    float _5180 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
    float _5191 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
    float _5202 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
    float _3142 = ((isnan(1.0) ? _5180 : (isnan(_5180) ? 1.0 : min(_5180, 1.0))) * (_3115 + ((isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0))) * _1056))) + ((_3121 + ((isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0))) * _1895)) * cbPerFrame._m0[3u].x);
    float _3143 = ((isnan(1.0) ? _5191 : (isnan(_5191) ? 1.0 : min(_5191, 1.0))) * (_3117 + ((isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0))) * _1056))) + ((_3123 + ((isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0))) * _1895)) * cbPerFrame._m0[3u].x);
    float _3144 = ((isnan(1.0) ? _5202 : (isnan(_5202) ? 1.0 : min(_5202, 1.0))) * (_3119 + ((isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0))) * _1056))) + ((_3125 + ((isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0))) * _1895)) * cbPerFrame._m0[3u].x);
    uint _3145 = _289 + 6u;
    float _3153 = _978 / cbSceneParam._m0[86u].x;
    float _3154 = _979 / cbSceneParam._m0[86u].y;
    vec4 _3168 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3153, _3154, (log2((isnan(cbSceneParam._m0[77u].w) ? _901 : (isnan(_901) ? cbSceneParam._m0[77u].w : min(_901, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3170 = _3168.x;
    float _3171 = _3168.y;
    float _3172 = _3168.z;
    float _3173 = _3168.w;
    float _3245;
    float _3247;
    float _3249;
    float _3251;
    if (_901 > cbSceneParam._m0[78u].w)
    {
        float _3207 = isnan(_901) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _901 : min(cbSceneParam._m0[80u].w, _901));
        float _3208 = _3207 / _901;
        float _3219 = _3208 * _951;
        float _3220 = _952 * _3208;
        float _3221 = (-0.0) - _3220;
        float _3223 = _3208 * _953;
        float _3225 = (cbSceneParam._m0[77u].w * _3221) / _3207;
        float _3226 = _3225 + cbSceneParam._m0[79u].w;
        float _3227 = cbSceneParam._m0[79u].w - _3220;
        float _3233 = sqrt(((_3219 * _3219) + (_3220 * _3220)) + (_3223 * _3223));
        float _3236 = (1.0 - (cbSceneParam._m0[77u].w / _3207)) * _3233;
        float _3241 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3243 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3420;
        if (abs((_3221 - _3225) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3420 = ((((_3226 > 0.0) ? exp2(_3241 * _3226) : (2.0 - exp2(_3243 * _3226))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3236;
        }
        else
        {
            float _3364 = 1.0 / cbSceneParam._m0[80u].x;
            float _3365 = isnan(_3227) ? _3226 : (isnan(_3226) ? _3227 : max(_3226, _3227));
            float _3366 = isnan(_3227) ? _3226 : (isnan(_3226) ? _3227 : min(_3226, _3227));
            float _3375 = isnan(0.0) ? _3365 : (isnan(_3365) ? 0.0 : min(_3365, 0.0));
            float _3376 = isnan(0.0) ? _3366 : (isnan(_3366) ? 0.0 : min(_3366, 0.0));
            _3420 = ((abs(_3233 / _3221) * cbSceneParam._m0[80u].y) * ((((_3375 - _3376) * 2.0) - ((exp2(_3241 * (isnan(0.0) ? _3365 : (isnan(_3365) ? 0.0 : max(_3365, 0.0)))) - exp2(_3241 * (isnan(0.0) ? _3366 : (isnan(_3366) ? 0.0 : max(_3366, 0.0))))) * _3364)) - ((exp2(_3243 * _3375) - exp2(_3243 * _3376)) * _3364))) + (_3236 * cbSceneParam._m0[80u].z);
        }
        vec4 _3422 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3153, _3154, 1.0), 0.0);
        float _3431 = exp2((_3420 * (-1.44269502162933349609375)) * (1.0 - _3422.w));
        float _3432 = log2(_3431);
        float _3448 = log2(_3173);
        _3245 = (exp2(_3448 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3432 * cbSceneParam._m0[78u].x)) * _3422.x) / cbSceneParam._m0[78u].x)) + _3170;
        _3247 = (exp2(_3448 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3432 * cbSceneParam._m0[78u].y)) * _3422.y) / cbSceneParam._m0[78u].y)) + _3171;
        _3249 = (exp2(_3448 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3432 * cbSceneParam._m0[78u].z)) * _3422.z) / cbSceneParam._m0[78u].z)) + _3172;
        _3251 = _3431 * _3173;
    }
    else
    {
        _3245 = _3170;
        _3247 = _3171;
        _3249 = _3172;
        _3251 = _3173;
    }
    bool _3458;
    vec4 _3261;
    vec4 _3283;
    float _3285;
    float _3289;
    float _3290;
    float _3291;
    float _3292;
    bool _3302;
    for (;;)
    {
        _3261 = cbMatDynParam._m0[0u];
        float _3263 = roundEven(_3261.y);
        bool _3264 = _3263 == 3.0;
        float _3265 = log2(_3251);
        float _3272 = exp2(_3265 * cbSceneParam._m0[78u].x) * _3142;
        float _3273 = exp2(_3265 * cbSceneParam._m0[78u].y) * _3143;
        float _3274 = exp2(_3265 * cbSceneParam._m0[78u].z) * _3144;
        float _3281 = _967 + (-0.5);
        _3283 = cbMtdParam._m0[1u];
        _3285 = _3283.y * _3281;
        float _3288 = (_3263 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3289 = _3288 * (_3264 ? _3272 : (_3272 + (cbSceneParam._m0[72u].w * _3245)));
        _3290 = _3288 * (_3264 ? _3273 : (_3273 + (cbSceneParam._m0[72u].w * _3247)));
        _3291 = _3288 * (_3264 ? _3274 : (_3274 + (cbSceneParam._m0[72u].w * _3249)));
        _3292 = _3281 * 0.999000012874603271484375;
        _3302 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3302)
        {
            if ((cbInstanceData._m0[_289 + 7u].x + _3292) < 0.5)
            {
                _3458 = true;
                break;
            }
        }
        uint _3399 = _1016 + uint(_3261.w);
        if ((cbInstanceData._m0[_3399].w < 1.0) && ((cbInstanceData._m0[_3399].w + _3292) < 0.5))
        {
            _3458 = true;
            break;
        }
        if ((_3285 + 1.0) < _3283.x)
        {
            _3458 = true;
            break;
        }
        _3458 = false;
        break;
    }
    float _3662;
    if (_3458)
    {
        discard_state = true;
        _3662 = 0.0;
    }
    else
    {
        _3662 = cbInstanceData._m0[_3145].w;
    }
    SV_Target.x = _3289;
    SV_Target.y = _3290;
    SV_Target.z = _3291;
    SV_Target.w = _3662;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3145].w;
    discard_exit();
}


