#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1230;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _214 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _215 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _216 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _222 = inversesqrt(dot(vec3(_214, _215, _216), vec3(_214, _215, _216)));
    float _223 = _222 * _214;
    float _224 = _222 * _215;
    float _225 = _222 * _216;
    float _229 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _230 = _229 * NORMAL.x;
    float _231 = _229 * NORMAL.y;
    float _232 = _229 * NORMAL.z;
    float _236 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _237 = _236 * TANGENT.x;
    float _238 = _236 * TANGENT.y;
    float _239 = _236 * TANGENT.z;
    uint _242 = uint(roundEven(NORMAL.w)) * 13u;
    uint _248 = _242 + 1u;
    uint _252 = _242 + 2u;
    float _261 = sqrt(((cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x) + (cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x)) + (cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x));
    float _262 = _261 * TEXCOORD.z;
    float _263 = _261 * TEXCOORD.w;
    vec4 _283 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _289 = _283.x * cbMtdParam._m0[11u].x;
    float _290 = _283.y * cbMtdParam._m0[11u].y;
    float _291 = _283.z * cbMtdParam._m0[11u].z;
    vec4 _310 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _262) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _263) + cbTextureTilingScale._m0[5u].w));
    vec4 _348 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _350 = _348.x;
    float _362 = dot(vec4(_350, _348.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _379 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_350 - _362) * cbMtdParam._m0[24u].y) + _362) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3840 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _380 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
    float _387 = (_380 * ((_310.x * cbMtdParam._m0[12u].x) - _289)) + _289;
    float _388 = (_380 * ((_310.y * cbMtdParam._m0[12u].y) - _290)) + _290;
    float _389 = (_380 * ((_310.z * cbMtdParam._m0[12u].z) - _291)) + _291;
    vec4 _407 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _262) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _263) + cbTextureTilingScale._m0[20u].w));
    vec4 _434 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _262) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _263) + cbTextureTilingScale._m0[4u].w));
    vec4 _451 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _453 = _451.x;
    float _454 = _451.y;
    float _455 = _451.z;
    float _464 = ((_434.z - _455) * _380) + _455;
    float _467 = ((((_434.x - _453) * _380) + _453) * 2.0) + (-1.0);
    float _468 = ((((_434.y - _454) * _380) + _454) * 2.0) + (-1.0);
    float _469 = dot(vec2(_467, _468), vec2(_467, _468));
    float _3851 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _474 = sqrt(1.0 - (isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0))));
    vec4 _494 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _506 = (_467 + ((((_407.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_494.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _507 = (_468 + ((((_407.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_494.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _510 = fma(_474, _230, fma(_507, _237, _506 * _223));
    float _513 = fma(_474, _231, fma(_507, _238, _506 * _224));
    float _516 = fma(_474, _232, fma(_507, _239, _506 * _225));
    float _520 = inversesqrt(dot(vec3(_510, _513, _516), vec3(_510, _513, _516)));
    vec4 _547 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _262) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _263) + cbTextureTilingScale._m0[11u].w));
    float _549 = _547.x;
    float _550 = 1.0 - _549;
    float _556 = (cbMtdParam._m0[19u].x + dot(vec4(_520 * _510, _520 * _513, _520 * _516, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_549 - _550) * cbMtdParam._m0[24u].z) + _550) * cbMtdParam._m0[21u].z);
    float _3862 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _557 = isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0));
    float _564 = (_557 * (cbMtdParam._m0[17u].x - _387)) + _387;
    float _565 = (_557 * (cbMtdParam._m0[17u].y - _388)) + _388;
    float _566 = (_557 * (cbMtdParam._m0[17u].z - _389)) + _389;
    vec4 _578 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _592 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _594 = _592.x;
    float _612 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _262) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _263) + cbTextureTilingScale._m0[9u].w)).x - _594) * _380) + _594;
    float _616 = ((_578.x - _612) * cbMtdParam._m0[19u].z) + _612;
    float _618 = _616 - (_616 * _557);
    float _623 = (((_407.z - _464) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _464;
    float _627 = ((_494.z - _623) * cbMtdParam._m0[19u].w) + _623;
    vec4 _640 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _262) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _263) + cbTextureTilingScale._m0[15u].w));
    float _647 = (_640.x * 2.0) + (-1.0);
    float _648 = (_640.y * 2.0) + (-1.0);
    float _649 = dot(vec2(_647, _648), vec2(_647, _648));
    float _3873 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _657 = ((_640.z - _627) * _557) + _627;
    float _667 = ((sqrt(1.0 - (isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0)))) - _474) * _557) + _474;
    float _670 = (((_647 - _506) * _557) + _506) + (cbMtdParam._m0[21u].x * _506);
    float _671 = (((_648 - _507) * _557) + _507) + (cbMtdParam._m0[21u].x * _507);
    float _676 = cbMtdParam._m0[22u].x + _494.w;
    float _679 = fma(_667, _230, fma(_671, _237, _670 * _223));
    float _682 = fma(_667, _231, fma(_671, _238, _670 * _224));
    float _685 = fma(_667, _232, fma(_671, _239, _670 * _225));
    float _689 = inversesqrt(dot(vec3(_679, _682, _685), vec3(_679, _682, _685)));
    float _690 = _689 * _679;
    float _691 = _689 * _682;
    float _692 = _689 * _685;
    float _3884 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _693 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
    float _3895 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
    float _3906 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _3917 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _3928 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _3939 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _698 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
    float _712 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _753 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _763 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _753);
    float _764 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _753);
    float _765 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _753);
    float _769 = inversesqrt(dot(vec3(_763, _764, _765), vec3(_763, _764, _765)));
    float _770 = _763 * _769;
    float _771 = _764 * _769;
    float _772 = _765 * _769;
    float _778 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _779 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _797 = fma(_692, cbSceneParam._m0[5u].z, fma(_691, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _690));
    float _800 = fma(_692, cbSceneParam._m0[6u].z, fma(_691, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _690));
    float _803 = fma(_692, cbSceneParam._m0[7u].z, fma(_691, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _690));
    uint _817 = (_242 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _823 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0)))) * cbInstanceData._m0[_817].x;
    float _824 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0)))) * cbInstanceData._m0[_817].y;
    float _825 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0)))) * cbInstanceData._m0[_817].z;
    float _3950 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
    float _826 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
    float _3961 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
    float _827 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
    float _3972 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
    float _828 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
    float _829 = 1.0 - _698;
    float _830 = _826 * _829;
    float _831 = _827 * _829;
    float _832 = _828 * _829;
    float _837 = (_826 + (-0.039999999105930328369140625)) * _698;
    float _838 = (_827 + (-0.039999999105930328369140625)) * _698;
    float _839 = (_828 + (-0.039999999105930328369140625)) * _698;
    float _840 = _837 + 0.039999999105930328369140625;
    float _842 = _838 + 0.039999999105930328369140625;
    float _843 = _839 + 0.039999999105930328369140625;
    vec4 _852 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _778, cbSceneParam._m0[86u].y * _779));
    float _856 = ((isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0))) * TEXCOORD_5.w) * _852.x;
    float _857 = dot(vec3(_690, _691, _692), vec3(_770, _771, _772));
    float _860 = _857 * 2.0;
    float _864 = (_860 * _690) - _770;
    float _865 = (_860 * _691) - _771;
    float _866 = (_860 * _692) - _772;
    float _870 = abs(dot(vec3(_770, _771, _772), vec3(_690, _691, _692)));
    float _3983 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
    float _872 = sqrt(_693);
    float _885 = exp2((_872 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_872 * 3.0));
    float _891 = (1.0 - _885) * ((_872 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _892 = _885 * _872;
    float _920 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _924 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _928 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1229;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _954 = fma(_928, cbModelParam._m0[26u].z, fma(_924, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _920));
        float _958 = fma(_928, cbModelParam._m0[27u].z, fma(_924, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _920));
        float _962 = fma(_928, cbModelParam._m0[28u].z, fma(_924, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _920));
        float _987 = _920 + _690;
        float _988 = _924 + _691;
        float _989 = _928 + _692;
        float _999 = fma(_989, cbModelParam._m0[26u].z, fma(_988, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _987)) - _954;
        float _1000 = fma(_989, cbModelParam._m0[27u].z, fma(_988, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _987)) - _958;
        float _1001 = fma(_989, cbModelParam._m0[28u].z, fma(_988, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _987)) - _962;
        float _1005 = inversesqrt(dot(vec3(_999, _1000, _1001), vec3(_999, _1000, _1001)));
        float _1018 = ((_1005 * _999) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_954 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1019 = ((_1005 * _1000) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_958 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1020 = ((_1005 * _1001) / cbModelParam._m0[34u].z) + ((((((_962 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1023 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1018, _1019, _1020), 0.0);
        vec4 _1030 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1018, _1019, _1020), 0.0);
        vec4 _1037 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1018, _1019, _1020), 0.0);
        vec4 _1044 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1018, _1019, _1020), 0.0);
        float _1057 = exp2((_1023.w + (-0.5)) * 20.0) * 2.0;
        float _1058 = _1057 * (_1023.x + (-0.5));
        float _1059 = _1057 * (_1023.y + (-0.5));
        float _1060 = _1057 * (_1023.z + (-0.5));
        float _1067 = exp2((_1030.w + (-0.5)) * 20.0) * 2.0;
        float _1068 = _1067 * (_1030.x + (-0.5));
        float _1069 = _1067 * (_1030.y + (-0.5));
        float _1070 = _1067 * (_1030.z + (-0.5));
        float _1077 = exp2((_1037.w + (-0.5)) * 20.0) * 2.0;
        float _1078 = _1077 * (_1037.x + (-0.5));
        float _1079 = _1077 * (_1037.y + (-0.5));
        float _1080 = _1077 * (_1037.z + (-0.5));
        float _1087 = exp2((_1044.w + (-0.5)) * 20.0) * 2.0;
        float _1088 = _1087 * (_1044.x + (-0.5));
        float _1089 = _1087 * (_1044.y + (-0.5));
        float _1090 = _1087 * (_1044.z + (-0.5));
        float _1091 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1092 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1093 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1094 = _1058 * 0.5;
        float _1095 = _1068 * 0.5;
        float _1096 = _1078 * 0.5;
        float _1097 = dot(vec3(_1094, _1095, _1096), vec3(_1094, _1095, _1096));
        float _1102 = (_1097 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1097);
        float _1111 = (dot(vec3(_690, _691, _692), vec3(_1102 * _1094, _1102 * _1095, _1102 * _1096)) + 1.0) * 0.5;
        float _4009 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1121 = sqrt(((_1095 * _1095) + (_1094 * _1094)) + (_1096 * _1096)) / (_1091 + 9.9999997473787516355514526367188e-06);
        float _4020 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1122 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
        float _1123 = _1122 * 2.0;
        float _1127 = (1.0 - _1122) / (_1122 + 1.0);
        float _4031 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1128 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
        float _1137 = ((((1.0 - _1128) * (_1123 + 2.0)) * exp2(log2(isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0))) * (_1123 + 1.0))) + _1128) * _1091;
        float _1138 = _1059 * 0.5;
        float _1139 = _1069 * 0.5;
        float _1140 = _1079 * 0.5;
        float _1141 = dot(vec3(_1138, _1139, _1140), vec3(_1138, _1139, _1140));
        float _1146 = (_1141 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1141);
        float _1154 = (dot(vec3(_690, _691, _692), vec3(_1146 * _1138, _1146 * _1139, _1146 * _1140)) + 1.0) * 0.5;
        float _4042 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1163 = sqrt(((_1139 * _1139) + (_1138 * _1138)) + (_1140 * _1140)) / (_1092 + 9.9999997473787516355514526367188e-06);
        float _4053 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1164 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
        float _1165 = _1164 * 2.0;
        float _1169 = (1.0 - _1164) / (_1164 + 1.0);
        float _4064 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1170 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
        float _1179 = ((((1.0 - _1170) * (_1165 + 2.0)) * exp2(log2(isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0))) * (_1165 + 1.0))) + _1170) * _1092;
        float _1180 = _1060 * 0.5;
        float _1181 = _1070 * 0.5;
        float _1182 = _1080 * 0.5;
        float _1183 = dot(vec3(_1180, _1181, _1182), vec3(_1180, _1181, _1182));
        float _1188 = (_1183 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1183);
        float _1196 = (dot(vec3(_690, _691, _692), vec3(_1188 * _1180, _1188 * _1181, _1188 * _1182)) + 1.0) * 0.5;
        float _4075 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1205 = sqrt(((_1181 * _1181) + (_1180 * _1180)) + (_1182 * _1182)) / (_1093 + 9.9999997473787516355514526367188e-06);
        float _4086 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1206 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
        float _1207 = _1206 * 2.0;
        float _1211 = (1.0 - _1206) / (_1206 + 1.0);
        float _4097 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1212 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
        float _1221 = ((((1.0 - _1212) * (_1207 + 2.0)) * exp2(log2(isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0))) * (_1207 + 1.0))) + _1212) * _1093;
        _1229 = _1060;
        _1231 = _1059;
        _1232 = _1058;
        _1233 = _1070;
        _1234 = _1069;
        _1235 = _1068;
        _1236 = _1080;
        _1237 = _1079;
        _1238 = _1078;
        _1239 = _1093;
        _1240 = _1092;
        _1241 = _1091;
        _1242 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0)));
        _1243 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0)));
        _1244 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0)));
    }
    else
    {
        _1229 = _1230;
        _1231 = _1230;
        _1232 = _1230;
        _1233 = _1230;
        _1234 = _1230;
        _1235 = _1230;
        _1236 = _1230;
        _1237 = _1230;
        _1238 = _1230;
        _1239 = _1230;
        _1240 = _1230;
        _1241 = _1230;
        _1242 = 0.0;
        _1243 = 0.0;
        _1244 = 0.0;
    }
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    float _1548;
    float _1549;
    float _1550;
    float _1551;
    float _1552;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1269 = fma(_928, cbModelParam._m0[30u].z, fma(_924, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _920));
        float _1273 = fma(_928, cbModelParam._m0[31u].z, fma(_924, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _920));
        float _1277 = fma(_928, cbModelParam._m0[32u].z, fma(_924, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _920));
        float _1300 = _920 + _690;
        float _1301 = _924 + _691;
        float _1302 = _928 + _692;
        float _1312 = fma(_1302, cbModelParam._m0[30u].z, fma(_1301, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1300)) - _1269;
        float _1313 = fma(_1302, cbModelParam._m0[31u].z, fma(_1301, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1300)) - _1273;
        float _1314 = fma(_1302, cbModelParam._m0[32u].z, fma(_1301, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1300)) - _1277;
        float _1318 = inversesqrt(dot(vec3(_1312, _1313, _1314), vec3(_1312, _1313, _1314)));
        float _1331 = ((_1318 * _1312) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1269 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1332 = ((_1318 * _1313) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1273 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1333 = ((_1318 * _1314) / cbModelParam._m0[35u].z) + ((((((_1277 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1335 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1331, _1332, _1333), 0.0);
        vec4 _1342 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1331, _1332, _1333), 0.0);
        vec4 _1349 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1331, _1332, _1333), 0.0);
        vec4 _1356 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1331, _1332, _1333), 0.0);
        float _1368 = exp2((_1335.w + (-0.5)) * 20.0) * 2.0;
        float _1369 = _1368 * (_1335.x + (-0.5));
        float _1370 = _1368 * (_1335.y + (-0.5));
        float _1371 = _1368 * (_1335.z + (-0.5));
        float _1378 = exp2((_1342.w + (-0.5)) * 20.0) * 2.0;
        float _1379 = _1378 * (_1342.x + (-0.5));
        float _1380 = _1378 * (_1342.y + (-0.5));
        float _1381 = _1378 * (_1342.z + (-0.5));
        float _1388 = exp2((_1349.w + (-0.5)) * 20.0) * 2.0;
        float _1389 = _1388 * (_1349.x + (-0.5));
        float _1390 = _1388 * (_1349.y + (-0.5));
        float _1391 = _1388 * (_1349.z + (-0.5));
        float _1398 = exp2((_1356.w + (-0.5)) * 20.0) * 2.0;
        float _1399 = _1398 * (_1356.x + (-0.5));
        float _1400 = _1398 * (_1356.y + (-0.5));
        float _1401 = _1398 * (_1356.z + (-0.5));
        float _1402 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1403 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1404 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1405 = _1369 * 0.5;
        float _1406 = _1379 * 0.5;
        float _1407 = _1389 * 0.5;
        float _1408 = dot(vec3(_1405, _1406, _1407), vec3(_1405, _1406, _1407));
        float _1413 = (_1408 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1408);
        float _1421 = (dot(vec3(_690, _691, _692), vec3(_1413 * _1405, _1413 * _1406, _1413 * _1407)) + 1.0) * 0.5;
        float _4138 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1430 = sqrt(((_1406 * _1406) + (_1405 * _1405)) + (_1407 * _1407)) / (_1402 + 9.9999997473787516355514526367188e-06);
        float _4149 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1431 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
        float _1432 = _1431 * 2.0;
        float _1436 = (1.0 - _1431) / (_1431 + 1.0);
        float _4160 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1437 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
        float _1446 = ((((1.0 - _1437) * (_1432 + 2.0)) * exp2(log2(isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0))) * (_1432 + 1.0))) + _1437) * _1402;
        float _1447 = _1370 * 0.5;
        float _1448 = _1380 * 0.5;
        float _1449 = _1390 * 0.5;
        float _1450 = dot(vec3(_1447, _1448, _1449), vec3(_1447, _1448, _1449));
        float _1455 = (_1450 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1450);
        float _1463 = (dot(vec3(_690, _691, _692), vec3(_1455 * _1447, _1455 * _1448, _1455 * _1449)) + 1.0) * 0.5;
        float _4171 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1472 = sqrt(((_1448 * _1448) + (_1447 * _1447)) + (_1449 * _1449)) / (_1403 + 9.9999997473787516355514526367188e-06);
        float _4182 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1473 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
        float _1474 = _1473 * 2.0;
        float _1478 = (1.0 - _1473) / (_1473 + 1.0);
        float _4193 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1479 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
        float _1488 = ((((1.0 - _1479) * (_1474 + 2.0)) * exp2(log2(isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0))) * (_1474 + 1.0))) + _1479) * _1403;
        float _1489 = _1371 * 0.5;
        float _1490 = _1381 * 0.5;
        float _1491 = _1391 * 0.5;
        float _1492 = dot(vec3(_1489, _1490, _1491), vec3(_1489, _1490, _1491));
        float _1497 = (_1492 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1492);
        float _1505 = (dot(vec3(_690, _691, _692), vec3(_1497 * _1489, _1497 * _1490, _1497 * _1491)) + 1.0) * 0.5;
        float _4204 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1514 = sqrt(((_1490 * _1490) + (_1489 * _1489)) + (_1491 * _1491)) / (_1404 + 9.9999997473787516355514526367188e-06);
        float _4215 = isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0));
        float _1515 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
        float _1516 = _1515 * 2.0;
        float _1520 = (1.0 - _1515) / (_1515 + 1.0);
        float _4226 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
        float _1521 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
        float _1530 = ((((1.0 - _1521) * (_1516 + 2.0)) * exp2(log2(isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0))) * (_1516 + 1.0))) + _1521) * _1404;
        _1538 = _1371;
        _1539 = _1370;
        _1540 = _1369;
        _1541 = _1381;
        _1542 = _1380;
        _1543 = _1379;
        _1544 = _1391;
        _1545 = _1390;
        _1546 = _1389;
        _1547 = _1404;
        _1548 = _1403;
        _1549 = _1402;
        _1550 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0)));
        _1551 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0)));
        _1552 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0)));
    }
    else
    {
        _1538 = _1230;
        _1539 = _1230;
        _1540 = _1230;
        _1541 = _1230;
        _1542 = _1230;
        _1543 = _1230;
        _1544 = _1230;
        _1545 = _1230;
        _1546 = _1230;
        _1547 = _1230;
        _1548 = _1230;
        _1549 = _1230;
        _1550 = 0.0;
        _1551 = 0.0;
        _1552 = 0.0;
    }
    float _1562 = (cbModelParam._m0[1u].x * (_1550 - _1242)) + _1242;
    float _1563 = (cbModelParam._m0[1u].x * (_1551 - _1243)) + _1243;
    float _1564 = (cbModelParam._m0[1u].x * (_1552 - _1244)) + _1244;
    float _1585 = fma(_1564, cbSceneParam._m0[89u].z, fma(_1563, cbSceneParam._m0[89u].y, _1562 * cbSceneParam._m0[89u].x));
    float _1588 = fma(_1564, cbSceneParam._m0[90u].z, fma(_1563, cbSceneParam._m0[90u].y, _1562 * cbSceneParam._m0[90u].x));
    float _1591 = fma(_1564, cbSceneParam._m0[91u].z, fma(_1563, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1562));
    float _1606 = _864 * 0.5;
    float _1607 = _865 * 0.5;
    float _1608 = _866 * 0.5;
    float _1609 = dot(vec4(_1606, _1607, _1608, 1.0), vec4(_1540, _1543, _1546, _1549));
    float _1612 = dot(vec4(_1606, _1607, _1608, 1.0), vec4(_1539, _1542, _1545, _1548));
    float _1615 = dot(vec4(_1606, _1607, _1608, 1.0), vec4(_1538, _1541, _1544, _1547));
    float _1649;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1622 = dot(vec4(_1606, _1607, _1608, 1.0), vec4(_1229, _1233, _1236, _1239));
        float _1626 = dot(vec4(_1606, _1607, _1608, 1.0), vec4(_1231, _1234, _1237, _1240));
        float _1630 = dot(vec4(_1606, _1607, _1608, 1.0), vec4(_1232, _1235, _1238, _1241));
        float _1637 = dot(vec4(cbModelParam._m0[39u]), vec4(_1606, _1607, _1608, 1.0));
        _1649 = dot(vec3(isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0)), isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0)), isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1637) ? 0.0 : (isnan(0.0) ? _1637 : max(0.0, _1637))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1649 = 1.0;
    }
    float _1660;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1651 = dot(vec4(cbModelParam._m0[40u]), vec4(_1606, _1607, _1608, 1.0));
        _1660 = dot(vec3(isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0)), isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0)), isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1651) ? 0.0 : (isnan(0.0) ? _1651 : max(0.0, _1651))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1660 = 1.0;
    }
    float _1664 = (_1660 * cbModelParam._m0[1u].x) + (_1649 * (1.0 - cbModelParam._m0[1u].x));
    float _1674 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _693);
    float _1675 = isnan(_1674) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1674 : min(cbModelParam._m0[25u].z, _1674));
    float _1756;
    float _1758;
    float _1760;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1723 = fma(_928, cbModelParam._m0[13u].z, fma(_924, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _920)) + cbModelParam._m0[13u].w;
        float _1727 = fma(_928, cbModelParam._m0[14u].z, fma(_924, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _920)) + cbModelParam._m0[14u].w;
        float _1731 = fma(_928, cbModelParam._m0[15u].z, fma(_924, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _920)) + cbModelParam._m0[15u].w;
        float _1734 = fma(_866, cbModelParam._m0[13u].z, fma(_865, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _864));
        float _1737 = fma(_866, cbModelParam._m0[14u].z, fma(_865, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _864));
        float _1740 = fma(_866, cbModelParam._m0[15u].z, fma(_865, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _864));
        float _1768;
        if (_1734 > 0.0)
        {
            _1768 = abs((1.0 - _1723) / _1734);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1734 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1723 + 1.0) / _1734);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1768 = frontier_phi_14_12_ladder;
        }
        float _1940;
        if (_1737 > 0.0)
        {
            _1940 = abs((1.0 - _1727) / _1737);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1737 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1727 + 1.0) / _1737);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1940 = frontier_phi_23_19_ladder;
        }
        float _2235;
        if (_1740 > 0.0)
        {
            _2235 = abs((1.0 - _1731) / _1740);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1740 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1731 + 1.0) / _1740);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2235 = frontier_phi_35_30_ladder;
        }
        float _2237 = isnan(_1940) ? _1768 : (isnan(_1768) ? _1940 : min(_1768, _1940));
        float _2238 = isnan(_2235) ? _2237 : (isnan(_2237) ? _2235 : min(_2237, _2235));
        float _2242 = (_2238 * _1734) + _1723;
        float _2243 = (_2238 * _1737) + _1727;
        float _2244 = (_2238 * _1740) + _1731;
        float _2245 = _2238 * 9.9999997473787516355514526367188e-05;
        float _2247 = (-1.0) - _2245;
        float _2249 = _2245 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2244 > _2249) || ((_2244 < _2247) || ((_2243 > _2249) || ((_2243 < _2247) || ((_2242 < _2247) || (_2242 > _2249))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2389 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2244, cbModelParam._m0[9u].z, fma(_2243, cbModelParam._m0[9u].y, _2242 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2244, cbModelParam._m0[10u].z, fma(_2243, cbModelParam._m0[10u].y, _2242 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2244, cbModelParam._m0[11u].z, fma(_2243, cbModelParam._m0[11u].y, _2242 * cbModelParam._m0[11u].x))), _1675);
            frontier_phi_13_35_ladder = _2389.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2389.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2389.x * cbModelParam._m0[1u].y;
        }
        _1756 = frontier_phi_13_35_ladder_2;
        _1758 = frontier_phi_13_35_ladder_1;
        _1760 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1744 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_864, _865, _866), _1675);
        _1756 = _1744.x * cbModelParam._m0[1u].y;
        _1758 = _1744.y * cbModelParam._m0[1u].y;
        _1760 = _1744.z * cbModelParam._m0[1u].y;
    }
    float _1764 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _693);
    float _1765 = isnan(_1764) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1764 : min(cbModelParam._m0[25u].w, _1764));
    float _1855;
    float _1857;
    float _1859;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1819 = fma(_928, cbModelParam._m0[21u].z, fma(_924, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _920)) + cbModelParam._m0[21u].w;
        float _1823 = fma(_928, cbModelParam._m0[22u].z, fma(_924, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _920)) + cbModelParam._m0[22u].w;
        float _1827 = fma(_928, cbModelParam._m0[23u].z, fma(_924, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _920)) + cbModelParam._m0[23u].w;
        float _1830 = fma(_866, cbModelParam._m0[21u].z, fma(_865, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _864));
        float _1833 = fma(_866, cbModelParam._m0[22u].z, fma(_865, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _864));
        float _1836 = fma(_866, cbModelParam._m0[23u].z, fma(_865, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _864));
        float _1945;
        if (_1830 > 0.0)
        {
            _1945 = abs((1.0 - _1819) / _1830);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1830 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1819 + 1.0) / _1830);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1945 = frontier_phi_25_21_ladder;
        }
        float _2262;
        if (_1833 > 0.0)
        {
            _2262 = abs((1.0 - _1823) / _1833);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1833 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1823 + 1.0) / _1833);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2262 = frontier_phi_37_32_ladder;
        }
        float _2600;
        if (_1836 > 0.0)
        {
            _2600 = abs((1.0 - _1827) / _1836);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1836 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1827 + 1.0) / _1836);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2600 = frontier_phi_47_44_ladder;
        }
        float _2602 = isnan(_2262) ? _1945 : (isnan(_1945) ? _2262 : min(_1945, _2262));
        float _2603 = isnan(_2600) ? _2602 : (isnan(_2602) ? _2600 : min(_2602, _2600));
        float _2607 = (_2603 * _1830) + _1819;
        float _2608 = (_2603 * _1833) + _1823;
        float _2609 = (_2603 * _1836) + _1827;
        float _2610 = _2603 * 9.9999997473787516355514526367188e-05;
        float _2611 = (-1.0) - _2610;
        float _2613 = _2610 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2609 > _2613) || ((_2609 < _2611) || ((_2608 > _2613) || ((_2608 < _2611) || ((_2607 < _2611) || (_2607 > _2613))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2731 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2609, cbModelParam._m0[17u].z, fma(_2608, cbModelParam._m0[17u].y, _2607 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2609, cbModelParam._m0[18u].z, fma(_2608, cbModelParam._m0[18u].y, _2607 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2609, cbModelParam._m0[19u].z, fma(_2608, cbModelParam._m0[19u].y, _2607 * cbModelParam._m0[19u].x))), _1765);
            frontier_phi_22_47_ladder = _2731.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2731.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2731.x * cbModelParam._m0[1u].z;
        }
        _1855 = frontier_phi_22_47_ladder_2;
        _1857 = frontier_phi_22_47_ladder_1;
        _1859 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1839 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_864, _865, _866), _1765);
        _1855 = _1839.x * cbModelParam._m0[1u].z;
        _1857 = _1839.y * cbModelParam._m0[1u].z;
        _1859 = _1839.z * cbModelParam._m0[1u].z;
    }
    float _1872 = (((_891 * _840) + _892) * _856) * ((cbModelParam._m0[1u].w * (_1855 - _1756)) + _1756);
    float _1874 = (((_891 * _842) + _892) * _856) * ((cbModelParam._m0[1u].w * (_1857 - _1758)) + _1758);
    float _1876 = (((_891 * _843) + _892) * _856) * ((cbModelParam._m0[1u].w * (_1859 - _1760)) + _1760);
    float _1879 = fma(_1876, cbSceneParam._m0[89u].z, fma(_1874, cbSceneParam._m0[89u].y, _1872 * cbSceneParam._m0[89u].x));
    float _1882 = fma(_1876, cbSceneParam._m0[90u].z, fma(_1874, cbSceneParam._m0[90u].y, _1872 * cbSceneParam._m0[90u].x));
    float _1885 = fma(_1876, cbSceneParam._m0[91u].z, fma(_1874, cbSceneParam._m0[91u].y, _1872 * cbSceneParam._m0[91u].x));
    float _1919 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1923 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1927 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1931 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1932 = _1919 / _1931;
    float _1933 = _1923 / _1931;
    float _1934 = _1927 / _1931;
    float _2081;
    float _2082;
    float _2083;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1961 = ((uint(_1934 > cbSceneParam._m0[59u].y) + uint(_1934 > cbSceneParam._m0[59u].x)) + uint(_1934 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1962 = _1961 + 43u;
        uint _1970 = _1961 + 44u;
        uint _1978 = _1961 + 45u;
        uint _1986 = _1961 + 46u;
        float _1997 = fma(_1931, cbSceneParam._m0[_1962].w, fma(_1927, cbSceneParam._m0[_1962].z, fma(_1923, cbSceneParam._m0[_1962].y, _1919 * cbSceneParam._m0[_1962].x)));
        float _2001 = fma(_1931, cbSceneParam._m0[_1970].w, fma(_1927, cbSceneParam._m0[_1970].z, fma(_1923, cbSceneParam._m0[_1970].y, _1919 * cbSceneParam._m0[_1970].x)));
        float _2009 = fma(_1931, cbSceneParam._m0[_1986].w, fma(_1927, cbSceneParam._m0[_1986].z, fma(_1923, cbSceneParam._m0[_1986].y, _1919 * cbSceneParam._m0[_1986].x)));
        float _2014 = cbSceneParam._m0[33u].z * _2009;
        float _2016 = cbSceneParam._m0[33u].w * _2009;
        float _2019 = fma(_1931, cbSceneParam._m0[_1978].w, fma(_1927, cbSceneParam._m0[_1978].z, fma(_1923, cbSceneParam._m0[_1978].y, _1919 * cbSceneParam._m0[_1978].x))) / _2009;
        float _2067 = (cbSceneParam._m0[33u].x - sqrt(((_1933 * _1933) + (_1932 * _1932)) + (_1934 * _1934))) * cbSceneParam._m0[33u].y;
        float _4352 = isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0));
        float _2074 = (isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2014 + _1997) / _2009, (_2016 + _2001) / _2009), _2019), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2016 + _1997) / _2009, (_2001 - _2014) / _2009), _2019), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1997 - _2014) / _2009, (_2001 - _2016) / _2009), _2019), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1997 - _2016) / _2009, (_2014 + _2001) / _2009), _2019), 0.0)).x), vec4(0.25)));
        _2081 = 1.0 - (_2074 * cbSceneParam._m0[34u].x);
        _2082 = 1.0 - (_2074 * cbSceneParam._m0[34u].y);
        _2083 = 1.0 - (_2074 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2081 = 1.0;
        _2082 = 1.0;
        _2083 = 1.0;
    }
    float _2147;
    float _2149;
    float _2151;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2135 = fma(_1931, cbSceneParam._m0[63u].w, fma(_1927, cbSceneParam._m0[63u].z, fma(_1923, cbSceneParam._m0[63u].y, _1919 * cbSceneParam._m0[63u].x)));
        float _2136 = fma(_1931, cbSceneParam._m0[60u].w, fma(_1927, cbSceneParam._m0[60u].z, fma(_1923, cbSceneParam._m0[60u].y, _1919 * cbSceneParam._m0[60u].x))) / _2135;
        float _2137 = fma(_1931, cbSceneParam._m0[61u].w, fma(_1927, cbSceneParam._m0[61u].z, fma(_1923, cbSceneParam._m0[61u].y, _1919 * cbSceneParam._m0[61u].x))) / _2135;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2136 >= cbSceneParam._m0[64u].x) && (_2137 >= cbSceneParam._m0[64u].y)) && (_2136 <= cbSceneParam._m0[64u].z)) && (_2137 <= cbSceneParam._m0[64u].w))
        {
            float _2275 = fma(_1931, cbSceneParam._m0[62u].w, fma(_1927, cbSceneParam._m0[62u].z, fma(_1923, cbSceneParam._m0[62u].y, _1919 * cbSceneParam._m0[62u].x))) / _2135;
            float _2279 = isnan(cbSceneParam._m0[41u].w) ? _2275 : (isnan(_2275) ? cbSceneParam._m0[41u].w : max(_2275, cbSceneParam._m0[41u].w));
            float _2322 = (cbSceneParam._m0[33u].x - sqrt(((_1933 * _1933) + (_1932 * _1932)) + (_1934 * _1934))) * cbSceneParam._m0[33u].y;
            float _4368 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
            float _2329 = (isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2136, cbSceneParam._m0[33u].w + _2137), _2279), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2136, _2137 - cbSceneParam._m0[33u].z), _2279), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2136 - cbSceneParam._m0[33u].z, _2137 - cbSceneParam._m0[33u].w), _2279), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2136 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2137), _2279), 0.0)).x), vec4(0.25)));
            float _2333 = 1.0 - (_2329 * cbSceneParam._m0[34u].x);
            float _2334 = 1.0 - (_2329 * cbSceneParam._m0[34u].y);
            float _2335 = 1.0 - (_2329 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2335) ? _2083 : (isnan(_2083) ? _2335 : min(_2083, _2335));
            frontier_phi_34_33_ladder_1 = isnan(_2334) ? _2082 : (isnan(_2082) ? _2334 : min(_2082, _2334));
            frontier_phi_34_33_ladder_2 = isnan(_2333) ? _2081 : (isnan(_2081) ? _2333 : min(_2081, _2333));
        }
        else
        {
            frontier_phi_34_33_ladder = _2083;
            frontier_phi_34_33_ladder_1 = _2082;
            frontier_phi_34_33_ladder_2 = _2081;
        }
        _2147 = frontier_phi_34_33_ladder_2;
        _2149 = frontier_phi_34_33_ladder_1;
        _2151 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2147 = _2081;
        _2149 = _2082;
        _2151 = _2083;
    }
    uvec4 _2156 = floatBitsToUint(cbInstanceData._m0[_242 + 5u]);
    uint _2158 = _2156.x * 14u;
    uint _2159 = _2158 + 13u;
    float _2166 = _856 + (-1.0);
    float _2171 = (cbLight._m0[_2159].x * _2166) + 1.0;
    float _2172 = (cbLight._m0[_2159].y * _2166) + 1.0;
    float _2173 = (cbLight._m0[_2159].z * _2166) + 1.0;
    float _2174 = (cbLight._m0[_2159].w * _2166) + 1.0;
    uint _2175 = _2158 + 5u;
    float _2181 = isnan(1.0) ? _2172 : (isnan(_2172) ? 1.0 : min(_2172, 1.0));
    uint _2185 = _2158 + 4u;
    float _2194 = isnan(1.0) ? _2171 : (isnan(_2171) ? 1.0 : min(_2171, 1.0));
    uint _2198 = _2158 | 1u;
    float _2209 = dot(vec3(cbLight._m0[_2158].xyz), vec3(_690, _691, _692));
    float _2212 = dot(vec3(cbLight._m0[_2198].xyz), vec3(_690, _691, _692));
    float _4404 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
    float _4415 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
    float _2217 = (isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0))) * 0.3183098733425140380859375;
    float _2219 = (isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0))) * 0.3183098733425140380859375;
    float _2226 = ((cbLight._m0[_2175].x * _2181) * _2219) + (((cbLight._m0[_2185].x * _2147) * _2194) * _2217);
    float _2227 = ((_2181 * cbLight._m0[_2175].y) * _2219) + (((cbLight._m0[_2185].y * _2149) * _2194) * _2217);
    float _2228 = ((_2181 * cbLight._m0[_2175].z) * _2219) + (((cbLight._m0[_2185].z * _2151) * _2194) * _2217);
    uvec4 _2232 = floatBitsToUint(cbLight._m0[_2158 + 12u]);
    bool _2234 = _2232.x == 0u;
    float _2336;
    float _2338;
    float _2340;
    if (_2234)
    {
        _2336 = _2226;
        _2338 = _2227;
        _2340 = _2228;
    }
    else
    {
        uint _2344 = _2158 + 6u;
        float _2360 = (dot(vec3(cbLight._m0[_2158 + 2u].xyz), vec3(_690, _691, _692)) * 0.5) + 0.5;
        float _2361 = _2360 * _2360;
        float _4426 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
        float _2362 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
        float _2363 = isnan(1.0) ? _2173 : (isnan(_2173) ? 1.0 : min(_2173, 1.0));
        _2336 = (((cbLight._m0[_2344].x * 0.3183098733425140380859375) * _2362) * _2363) + _2226;
        _2338 = (((cbLight._m0[_2344].y * 0.3183098733425140380859375) * _2362) * _2363) + _2227;
        _2340 = (((cbLight._m0[_2344].z * 0.3183098733425140380859375) * _2362) * _2363) + _2228;
    }
    bool _2343 = _2232.y == 0u;
    float _2398;
    float _2400;
    float _2402;
    if (_2343)
    {
        _2398 = _2336;
        _2400 = _2338;
        _2402 = _2340;
    }
    else
    {
        uint _2571 = _2158 + 7u;
        float _2587 = (dot(vec3(cbLight._m0[_2158 + 3u].xyz), vec3(_690, _691, _692)) * 0.5) + 0.5;
        float _2588 = _2587 * _2587;
        float _4442 = isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : max(_2588, 0.0));
        float _2589 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
        float _2590 = isnan(1.0) ? _2174 : (isnan(_2174) ? 1.0 : min(_2174, 1.0));
        _2398 = (((cbLight._m0[_2571].x * 0.3183098733425140380859375) * _2589) * _2590) + _2336;
        _2400 = (((cbLight._m0[_2571].y * 0.3183098733425140380859375) * _2589) * _2590) + _2338;
        _2402 = (((cbLight._m0[_2571].z * 0.3183098733425140380859375) * _2589) * _2590) + _2340;
    }
    uint _2405 = _2158 + 8u;
    float _2418 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2158].w)) * _693) * 0.949999988079071044921875);
    float _2419 = _2418 * _2418;
    float _2420 = cbLight._m0[_2158].x + _770;
    float _2421 = cbLight._m0[_2158].y + _771;
    float _2422 = cbLight._m0[_2158].z + _772;
    float _2426 = inversesqrt(dot(vec3(_2420, _2421, _2422), vec3(_2420, _2421, _2422)));
    float _2427 = _2426 * _2420;
    float _2428 = _2426 * _2421;
    float _2429 = _2426 * _2422;
    float _2430 = dot(vec3(_690, _691, _692), vec3(cbLight._m0[_2158].xyz));
    float _4458 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
    float _2433 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
    float _4469 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
    float _2434 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
    float _2435 = dot(vec3(_690, _691, _692), vec3(_2427, _2428, _2429));
    float _4480 = isnan(0.0) ? _2435 : (isnan(_2435) ? 0.0 : max(_2435, 0.0));
    float _2438 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
    float _2439 = dot(vec3(cbLight._m0[_2158].xyz), vec3(_2427, _2428, _2429));
    float _4491 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0));
    float _2443 = _2419 * _2419;
    float _2447 = ((_2438 * _2438) * (_2443 + (-1.0))) + 1.0;
    float _2455 = exp2(log2(1.0 - (isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0)))) * 5.0);
    float _2456 = 0.959999978542327880859375 - _837;
    float _2458 = 0.959999978542327880859375 - _838;
    float _2459 = 0.959999978542327880859375 - _839;
    float _2466 = 1.0 - _2419;
    float _2477 = (0.5 / (((_2434 * ((_2433 * _2466) + _2419)) + 9.9999999392252902907785028219223e-09) + (((_2434 * _2466) + _2419) * _2433))) * _2433;
    float _4502 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
    float _2479 = (isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0))) * (_2443 / ((_2447 * _2447) * 3.141590118408203125));
    uint _2493 = _2158 + 9u;
    float _2504 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2198].w)) * _693) * 0.949999988079071044921875);
    float _2505 = _2504 * _2504;
    float _2506 = cbLight._m0[_2198].x + _770;
    float _2507 = cbLight._m0[_2198].y + _771;
    float _2508 = cbLight._m0[_2198].z + _772;
    float _2512 = inversesqrt(dot(vec3(_2506, _2507, _2508), vec3(_2506, _2507, _2508)));
    float _2513 = _2512 * _2506;
    float _2514 = _2512 * _2507;
    float _2515 = _2512 * _2508;
    float _2516 = dot(vec3(_690, _691, _692), vec3(cbLight._m0[_2198].xyz));
    float _4513 = isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : max(_2516, 0.0));
    float _2519 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
    float _2520 = dot(vec3(_690, _691, _692), vec3(_2513, _2514, _2515));
    float _4524 = isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0));
    float _2523 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
    float _2524 = dot(vec3(cbLight._m0[_2198].xyz), vec3(_2513, _2514, _2515));
    float _4535 = isnan(0.0) ? _2524 : (isnan(_2524) ? 0.0 : max(_2524, 0.0));
    float _2528 = _2505 * _2505;
    float _2532 = ((_2523 * _2523) * (_2528 + (-1.0))) + 1.0;
    float _2539 = exp2(log2(1.0 - (isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0)))) * 5.0);
    float _2546 = 1.0 - _2505;
    float _2556 = (0.5 / (((_2434 * ((_2519 * _2546) + _2505)) + 9.9999999392252902907785028219223e-09) + (((_2434 * _2546) + _2505) * _2519))) * _2519;
    float _4546 = isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0));
    float _2558 = (isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0))) * (_2528 / ((_2532 * _2532) * 3.141590118408203125));
    float _2568 = (((((_2539 * _2456) + _840) * cbLight._m0[_2493].x) * _2558) * _2181) + ((((cbLight._m0[_2405].x * _2147) * ((_2455 * _2456) + _840)) * _2479) * _2194);
    float _2569 = (((((_2539 * _2458) + _842) * cbLight._m0[_2493].y) * _2558) * _2181) + ((((cbLight._m0[_2405].y * _2149) * ((_2455 * _2458) + _842)) * _2479) * _2194);
    float _2570 = (((((_2539 * _2459) + _843) * cbLight._m0[_2493].z) * _2558) * _2181) + ((((cbLight._m0[_2405].z * _2151) * ((_2455 * _2459) + _843)) * _2479) * _2194);
    float _2626;
    float _2628;
    float _2630;
    if (_2234)
    {
        _2626 = _2568;
        _2628 = _2569;
        _2630 = _2570;
    }
    else
    {
        uint _2632 = _2158 + 2u;
        uint _2636 = _2158 + 10u;
        float _2650 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2632].w)) * _693) * 0.949999988079071044921875);
        float _2651 = _2650 * _2650;
        float _2652 = cbLight._m0[_2632].x + _770;
        float _2653 = cbLight._m0[_2632].y + _771;
        float _2654 = cbLight._m0[_2632].z + _772;
        float _2658 = inversesqrt(dot(vec3(_2652, _2653, _2654), vec3(_2652, _2653, _2654)));
        float _2659 = _2658 * _2652;
        float _2660 = _2658 * _2653;
        float _2661 = _2658 * _2654;
        float _2662 = dot(vec3(_690, _691, _692), vec3(cbLight._m0[_2632].xyz));
        float _4557 = isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : max(_2662, 0.0));
        float _2665 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
        float _2666 = dot(vec3(_690, _691, _692), vec3(_2659, _2660, _2661));
        float _4568 = isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : max(_2666, 0.0));
        float _2669 = isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0));
        float _2670 = dot(vec3(cbLight._m0[_2632].xyz), vec3(_2659, _2660, _2661));
        float _4579 = isnan(0.0) ? _2670 : (isnan(_2670) ? 0.0 : max(_2670, 0.0));
        float _2674 = _2651 * _2651;
        float _2678 = ((_2669 * _2669) * (_2674 + (-1.0))) + 1.0;
        float _2685 = exp2(log2(1.0 - (isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0)))) * 5.0);
        float _2692 = 1.0 - _2651;
        float _2702 = (0.5 / (((_2434 * ((_2665 * _2692) + _2651)) + 9.9999999392252902907785028219223e-09) + (((_2434 * _2692) + _2651) * _2665))) * _2665;
        float _4590 = isnan(0.0) ? _2702 : (isnan(_2702) ? 0.0 : max(_2702, 0.0));
        float _2704 = (isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0))) * (_2674 / ((_2678 * _2678) * 3.141590118408203125));
        float _2705 = isnan(1.0) ? _2173 : (isnan(_2173) ? 1.0 : min(_2173, 1.0));
        _2626 = (((((_2685 * _2456) + _840) * cbLight._m0[_2636].x) * _2704) * _2705) + _2568;
        _2628 = (((((_2685 * _2458) + _842) * cbLight._m0[_2636].y) * _2704) * _2705) + _2569;
        _2630 = (((((_2685 * _2459) + _843) * cbLight._m0[_2636].z) * _2704) * _2705) + _2570;
    }
    float _2736;
    float _2738;
    float _2740;
    if (_2343)
    {
        _2736 = _2626;
        _2738 = _2628;
        _2740 = _2630;
    }
    else
    {
        uint _2747 = _2158 + 3u;
        uint _2751 = _2158 + 11u;
        float _2765 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2747].w)) * _693) * 0.949999988079071044921875);
        float _2766 = _2765 * _2765;
        float _2767 = cbLight._m0[_2747].x + _770;
        float _2768 = cbLight._m0[_2747].y + _771;
        float _2769 = cbLight._m0[_2747].z + _772;
        float _2773 = inversesqrt(dot(vec3(_2767, _2768, _2769), vec3(_2767, _2768, _2769)));
        float _2774 = _2773 * _2767;
        float _2775 = _2773 * _2768;
        float _2776 = _2773 * _2769;
        float _2777 = dot(vec3(_690, _691, _692), vec3(cbLight._m0[_2747].xyz));
        float _4606 = isnan(0.0) ? _2777 : (isnan(_2777) ? 0.0 : max(_2777, 0.0));
        float _2780 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
        float _2781 = dot(vec3(_690, _691, _692), vec3(_2774, _2775, _2776));
        float _4617 = isnan(0.0) ? _2781 : (isnan(_2781) ? 0.0 : max(_2781, 0.0));
        float _2784 = isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0));
        float _2785 = dot(vec3(cbLight._m0[_2747].xyz), vec3(_2774, _2775, _2776));
        float _4628 = isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : max(_2785, 0.0));
        float _2789 = _2766 * _2766;
        float _2793 = ((_2784 * _2784) * (_2789 + (-1.0))) + 1.0;
        float _2800 = exp2(log2(1.0 - (isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0)))) * 5.0);
        float _2807 = 1.0 - _2766;
        float _2817 = (0.5 / (((_2434 * ((_2780 * _2807) + _2766)) + 9.9999999392252902907785028219223e-09) + (((_2434 * _2807) + _2766) * _2780))) * _2780;
        float _4639 = isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : max(_2817, 0.0));
        float _2819 = (isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0))) * (_2789 / ((_2793 * _2793) * 3.141590118408203125));
        float _2820 = isnan(1.0) ? _2174 : (isnan(_2174) ? 1.0 : min(_2174, 1.0));
        _2736 = (((((_2800 * _2456) + _840) * cbLight._m0[_2751].x) * _2819) * _2820) + _2626;
        _2738 = (((((_2800 * _2458) + _842) * cbLight._m0[_2751].y) * _2819) * _2820) + _2628;
        _2740 = (((((_2800 * _2459) + _843) * cbLight._m0[_2751].z) * _2819) * _2820) + _2630;
    }
    float _2886;
    float _2888;
    float _2890;
    float _2892;
    float _2894;
    float _2896;
    if (_2156.y == 0u)
    {
        uvec4 _2841 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2842 = _2841.x;
        uint _2853 = uint((float(_2841.y) * floor(float(uint(cbSceneParam._m0[85u].y * _779) / _2842))) + floor(float(uint(cbSceneParam._m0[85u].x * _778) / _2842)));
        float _2863 = (log2(_1934 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2864 = isnan(0.0) ? _2863 : (isnan(_2863) ? 0.0 : max(_2863, 0.0));
        uint _2867 = uint(isnan(14.0) ? _2864 : (isnan(_2864) ? 14.0 : min(_2864, 14.0)));
        uvec4 _2872 = texelFetch(g_lightClusterGridBuffer, int(((_2867 << 2u) + (_2853 << 6u)) >> 2u));
        uint _2873 = _2872.x;
        uint _2874 = _2841.z;
        float _2953;
        float _2955;
        float _2957;
        float _2959;
        float _2961;
        float _2963;
        if (((((1u << ((_2874 >> 4u) & 15u)) + 4294967295u) & _2873) == 0u) || ((_2874 & 240u) == 0u))
        {
            _2953 = 0.0;
            _2955 = 0.0;
            _2957 = 0.0;
            _2959 = 0.0;
            _2961 = 0.0;
            _2963 = 0.0;
        }
        else
        {
            float _2954;
            float _2956;
            float _2958;
            float _2960;
            float _2962;
            float _2964;
            float _3098 = 0.0;
            float _3099 = 0.0;
            float _3100 = 0.0;
            float _3101 = 0.0;
            float _3102 = 0.0;
            float _3103 = 0.0;
            uint _3104 = 0u;
            uint _3113;
            bool _3114;
            for (;;)
            {
                _3113 = texelFetch(g_lightClassification, int((((_2867 << 5u) + (_2853 << 9u)) + (_3104 << 2u)) >> 2u)).x;
                _3114 = _3113 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3114)
                {
                    frontier_phi_66_pred = _3103;
                    frontier_phi_66_pred_1 = _3102;
                    frontier_phi_66_pred_2 = _3101;
                    frontier_phi_66_pred_3 = _3100;
                    frontier_phi_66_pred_4 = _3099;
                    frontier_phi_66_pred_5 = _3098;
                }
                else
                {
                    float _3222;
                    float _3223;
                    float _3224;
                    float _3225;
                    float _3226;
                    float _3227;
                    uint _3228;
                    _3222 = _3098;
                    _3223 = _3099;
                    _3224 = _3100;
                    _3225 = _3101;
                    _3226 = _3102;
                    _3227 = _3103;
                    _3228 = _3113;
                    float _3154;
                    float _3155;
                    float _3156;
                    float _3157;
                    float _3158;
                    float _3159;
                    for (;;)
                    {
                        uint _3232 = uint(findLSB(_3228)) + (_3104 << 5u);
                        uint _3229 = (_3228 + 4294967295u) & _3228;
                        uint _3234 = _3232 * 48u;
                        vec4 _3248 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3234)).x, texelFetch(g_PointLightRenderingBuffer, int(_3234 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3234 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3234 + 3u)).x));
                        uint _3254 = (_3232 * 48u) + 4u;
                        vec4 _3267 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3254)).x, texelFetch(g_PointLightRenderingBuffer, int(_3254 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3254 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3254 + 3u)).x));
                        uint _3273 = (_3232 * 48u) + 8u;
                        vec3 _3284 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3273)).x, texelFetch(g_PointLightRenderingBuffer, int(_3273 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3273 + 2u)).x));
                        float _3288 = _3248.x - _1932;
                        float _3289 = _3248.y - _1933;
                        float _3290 = _3248.z - _1934;
                        float _3291 = dot(vec3(_3288, _3289, _3290), vec3(_3288, _3289, _3290));
                        float _3294 = inversesqrt(_3291);
                        float _3295 = _3294 * _3288;
                        float _3296 = _3294 * _3289;
                        float _3297 = _3294 * _3290;
                        float _3298 = dot(vec3(_797, _800, _803), vec3(_3295, _3296, _3297));
                        float _3303 = 1.0 - (_3291 * _3248.w);
                        float _4665 = isnan(0.0) ? _3303 : (isnan(_3303) ? 0.0 : max(_3303, 0.0));
                        float _3304 = isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0));
                        float _3305 = sqrt(_3291) * _3267.w;
                        float _3308 = 1.39999997615814208984375 / (_3305 + 1.39999997615814208984375);
                        float _3309 = _3308 * _3308;
                        float _3312 = ((1.0 - _3309) * _3298) + _3309;
                        float _3315 = _3305 * _3305;
                        float _3319 = ((isnan(0.0) ? _3312 : (isnan(_3312) ? 0.0 : max(_3312, 0.0))) * _3304) / ((_3315 * 0.699999988079071044921875) + 1.0);
                        float _3323 = (-0.0) - _1932;
                        float _3324 = (-0.0) - _1933;
                        float _3325 = (-0.0) - _1934;
                        float _3329 = inversesqrt(dot(vec3(_3323, _3324, _3325), vec3(_3323, _3324, _3325)));
                        float _3330 = _3329 * _3323;
                        float _3331 = _3329 * _3324;
                        float _3332 = _3329 * _3325;
                        float _3339 = exp2(log2(1.0 / ((_3315 * 3.5) + 5.0)) * 0.25);
                        float _3340 = 1.0 - _872;
                        float _3347 = sqrt(1.0 - ((1.0 - (_3340 * _3340)) * (1.0 - (_3339 * _3339))));
                        float _3348 = _3347 * _3347;
                        float _3349 = _3348 * _3348;
                        float _3350 = _3330 + _3295;
                        float _3351 = _3331 + _3296;
                        float _3352 = _3332 + _3297;
                        float _3356 = inversesqrt(dot(vec3(_3350, _3351, _3352), vec3(_3350, _3351, _3352)));
                        float _3360 = dot(vec3(_797, _800, _803), vec3(_3330, _3331, _3332));
                        float _4681 = isnan(0.0) ? _3360 : (isnan(_3360) ? 0.0 : max(_3360, 0.0));
                        float _3363 = isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0));
                        float _3364 = dot(vec3(_797, _800, _803), vec3(_3356 * _3350, _3356 * _3351, _3356 * _3352));
                        float _4692 = isnan(0.0) ? _3364 : (isnan(_3364) ? 0.0 : max(_3364, 0.0));
                        float _3367 = isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0));
                        float _3371 = ((_3367 * _3367) * (_3349 + (-1.0))) + 1.0;
                        float _3372 = _3308 * _3348;
                        float _3373 = _3372 * _3372;
                        float _3376 = ((1.0 - _3373) * _3298) + _3373;
                        float _4703 = isnan(0.0) ? _3376 : (isnan(_3376) ? 0.0 : max(_3376, 0.0));
                        float _3377 = isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0));
                        float _3378 = 1.0 - _3348;
                        float _3388 = (0.5 / (((_3377 * ((_3363 * _3378) + _3348)) + 9.9999999392252902907785028219223e-09) + (((_3377 * _3378) + _3348) * _3363))) * _3377;
                        float _4714 = isnan(0.0) ? _3388 : (isnan(_3388) ? 0.0 : max(_3388, 0.0));
                        float _3399 = (((_3349 * 3.1415927410125732421875) * (isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0)))) / ((_3371 * _3371) * ((_3315 * 2.1991131305694580078125) + 3.141590118408203125))) * _3304;
                        _3157 = (_3319 * _3267.x) + _3225;
                        _3158 = (_3319 * _3267.y) + _3226;
                        _3159 = (_3319 * _3267.z) + _3227;
                        _3154 = (_3399 * _3284.x) + _3222;
                        _3155 = (_3399 * _3284.y) + _3223;
                        _3156 = (_3399 * _3284.z) + _3224;
                        if (_3229 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3222 = _3154;
                            _3223 = _3155;
                            _3224 = _3156;
                            _3225 = _3157;
                            _3226 = _3158;
                            _3227 = _3159;
                            _3228 = _3229;
                        }
                    }
                    frontier_phi_66_pred = _3159;
                    frontier_phi_66_pred_1 = _3158;
                    frontier_phi_66_pred_2 = _3157;
                    frontier_phi_66_pred_3 = _3156;
                    frontier_phi_66_pred_4 = _3155;
                    frontier_phi_66_pred_5 = _3154;
                }
                _2964 = frontier_phi_66_pred;
                _2962 = frontier_phi_66_pred_1;
                _2960 = frontier_phi_66_pred_2;
                _2958 = frontier_phi_66_pred_3;
                _2956 = frontier_phi_66_pred_4;
                _2954 = frontier_phi_66_pred_5;
                uint _3105 = _3104 + 1u;
                if (_3105 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3098 = _2954;
                    _3099 = _2956;
                    _3100 = _2958;
                    _3101 = _2960;
                    _3102 = _2962;
                    _3103 = _2964;
                    _3104 = _3105;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2953 = _2954;
            _2955 = _2956;
            _2957 = _2958;
            _2959 = _2960;
            _2961 = _2962;
            _2963 = _2964;
        }
        uvec4 _2967 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2968 = _2967.z;
        uint _2970 = (_2968 >> 8u) & 15u;
        float _3066;
        float _3068;
        float _3070;
        float _3072;
        float _3074;
        float _3076;
        if (((4294967295u << _2970) & _2873) == 0u)
        {
            _3066 = _2953;
            _3068 = _2955;
            _3070 = _2957;
            _3072 = _2959;
            _3074 = _2961;
            _3076 = _2963;
        }
        else
        {
            float _3091 = inversesqrt(dot(vec3(_1932, _1933, _1934), vec3(_1932, _1933, _1934)));
            float _3092 = _3091 * _1932;
            float _3093 = _3091 * _1933;
            float _3094 = _3091 * _1934;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2970 < ((_2968 >> 12u) & 15u))
            {
                float _3067;
                float _3069;
                float _3071;
                float _3073;
                float _3075;
                float _3077;
                float _3205 = _2953;
                float _3206 = _2955;
                float _3207 = _2957;
                float _3208 = _2959;
                float _3209 = _2961;
                float _3210 = _2963;
                uint _3211 = _2970;
                uint _3220;
                bool _3221;
                for (;;)
                {
                    _3220 = texelFetch(g_lightClassification, int((((_2867 << 5u) + (_2853 << 9u)) + (_3211 << 2u)) >> 2u)).x;
                    _3221 = _3220 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3221)
                    {
                        frontier_phi_72_pred = _3210;
                        frontier_phi_72_pred_1 = _3209;
                        frontier_phi_72_pred_2 = _3208;
                        frontier_phi_72_pred_3 = _3207;
                        frontier_phi_72_pred_4 = _3206;
                        frontier_phi_72_pred_5 = _3205;
                    }
                    else
                    {
                        float _3404;
                        float _3405;
                        float _3406;
                        float _3407;
                        float _3408;
                        float _3409;
                        float _3697;
                        float _3698;
                        float _3699;
                        float _3700;
                        float _3701;
                        float _3702;
                        float _3417 = _3205;
                        float _3418 = _3206;
                        float _3419 = _3207;
                        float _3420 = _3208;
                        float _3421 = _3209;
                        float _3422 = _3210;
                        uint _3423 = _3220;
                        uint _3424;
                        vec4 _3449;
                        float _3450;
                        vec4 _3465;
                        vec3 _3477;
                        vec4 _3492;
                        vec4 _3507;
                        float _3553;
                        bool _3554;
                        for (;;)
                        {
                            uint _3434 = ((_3211 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3423));
                            _3424 = (_3423 + 4294967295u) & _3423;
                            uint _3436 = _3434 * 40u;
                            _3449 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3436)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 3u)).x));
                            _3450 = _3449.w;
                            uint _3452 = (_3434 * 40u) + 4u;
                            _3465 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3452)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 3u)).x));
                            uint _3467 = (_3434 * 40u) + 8u;
                            _3477 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3467)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 2u)).x));
                            uint _3479 = (_3434 * 40u) + 16u;
                            _3492 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3479)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 3u)).x));
                            uint _3494 = (_3434 * 40u) + 20u;
                            _3507 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3494)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 3u)).x));
                            uint _3509 = (_3434 * 40u) + 24u;
                            vec4 _3522 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3509)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 3u)).x));
                            uint _3528 = (_3434 * 40u) + 28u;
                            vec4 _3541 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3528)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3528 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3528 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3528 + 3u)).x));
                            _3553 = fma(_1934, _3541.z, fma(_1933, _3541.y, _3541.x * _1932)) + _3541.w;
                            _3554 = !((fma(_1934, _3522.z, fma(_1933, _3522.y, _3522.x * _1932)) + _3522.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3554)
                            {
                                float _3581 = _3449.x - _1932;
                                float _3582 = _3449.y - _1933;
                                float _3583 = _3449.z - _1934;
                                float _3584 = dot(vec3(_3581, _3582, _3583), vec3(_3581, _3582, _3583));
                                float _3587 = inversesqrt(_3584);
                                float _3588 = _3587 * _3581;
                                float _3589 = _3587 * _3582;
                                float _3590 = _3587 * _3583;
                                float _3594 = 1.0 - (_3584 / (_3450 * _3450));
                                float _4725 = isnan(0.0) ? _3594 : (isnan(_3594) ? 0.0 : max(_3594, 0.0));
                                float _3595 = isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0));
                                float _3599 = sqrt(_3584) * _3465.w;
                                float _3601 = 1.39999997615814208984375 / (_3599 + 1.39999997615814208984375);
                                float _3602 = _3601 * _3601;
                                float _3605 = ((1.0 - _3602) * dot(vec3(_3588, _3589, _3590), vec3(_797, _800, _803))) + _3602;
                                float _3608 = _3599 * _3599;
                                float _3612 = (fma(_1934, _3492.z, fma(_1933, _3492.y, _3492.x * _1932)) + _3492.w) / _3553;
                                float _3613 = (fma(_1934, _3507.z, fma(_1933, _3507.y, _3507.x * _1932)) + _3507.w) / _3553;
                                float _3617 = 1.0 - dot(vec2(_3612, _3613), vec2(_3612, _3613));
                                float _4741 = isnan(0.0) ? _3617 : (isnan(_3617) ? 0.0 : max(_3617, 0.0));
                                float _3618 = isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0));
                                float _3619 = _3618 * (((isnan(0.0) ? _3605 : (isnan(_3605) ? 0.0 : max(_3605, 0.0))) * _3595) / ((_3608 * 0.699999988079071044921875) + 1.0));
                                float _3631 = exp2(log2(1.0 / ((_3608 * 3.5) + 5.0)) * 0.25);
                                float _3632 = 1.0 - _872;
                                float _3639 = sqrt(1.0 - ((1.0 - (_3632 * _3632)) * (1.0 - (_3631 * _3631))));
                                float _3640 = _3639 * _3639;
                                float _3641 = _3640 * _3640;
                                float _3642 = _3588 - _3092;
                                float _3643 = _3589 - _3093;
                                float _3644 = _3590 - _3094;
                                float _3648 = inversesqrt(dot(vec3(_3642, _3643, _3644), vec3(_3642, _3643, _3644)));
                                float _3652 = dot(vec3(_797, _800, _803), vec3((-0.0) - _3092, (-0.0) - _3093, (-0.0) - _3094));
                                float _4752 = isnan(0.0) ? _3652 : (isnan(_3652) ? 0.0 : max(_3652, 0.0));
                                float _3655 = isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0));
                                float _3656 = dot(vec3(_797, _800, _803), vec3(_3648 * _3642, _3648 * _3643, _3648 * _3644));
                                float _4763 = isnan(0.0) ? _3656 : (isnan(_3656) ? 0.0 : max(_3656, 0.0));
                                float _3659 = isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0));
                                float _3663 = ((_3659 * _3659) * (_3641 + (-1.0))) + 1.0;
                                float _3664 = _3601 * _3640;
                                float _3665 = _3664 * _3664;
                                float _3671 = ((1.0 - _3665) * dot(vec3(_797, _800, _803), vec3(_3588, _3589, _3590))) + _3665;
                                float _4774 = isnan(0.0) ? _3671 : (isnan(_3671) ? 0.0 : max(_3671, 0.0));
                                float _3672 = isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0));
                                float _3673 = 1.0 - _3640;
                                float _3683 = (0.5 / (((_3672 * ((_3655 * _3673) + _3640)) + 9.9999999392252902907785028219223e-09) + (((_3672 * _3673) + _3640) * _3655))) * _3672;
                                float _4785 = isnan(0.0) ? _3683 : (isnan(_3683) ? 0.0 : max(_3683, 0.0));
                                float _3693 = (_3618 * _3595) * (((_3641 * 3.1415927410125732421875) * (isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0)))) / ((_3663 * _3663) * ((_3608 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3619 * _3465.y;
                                frontier_phi_78_pred_1 = _3619 * _3465.x;
                                frontier_phi_78_pred_2 = _3693 * _3477.z;
                                frontier_phi_78_pred_3 = _3693 * _3477.y;
                                frontier_phi_78_pred_4 = _3693 * _3477.x;
                                frontier_phi_78_pred_5 = _3619 * _3465.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3701 = frontier_phi_78_pred;
                            _3700 = frontier_phi_78_pred_1;
                            _3699 = frontier_phi_78_pred_2;
                            _3698 = frontier_phi_78_pred_3;
                            _3697 = frontier_phi_78_pred_4;
                            _3702 = frontier_phi_78_pred_5;
                            _3407 = _3700 + _3420;
                            _3408 = _3701 + _3421;
                            _3409 = _3702 + _3422;
                            _3404 = _3697 + _3417;
                            _3405 = _3698 + _3418;
                            _3406 = _3699 + _3419;
                            if (_3424 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3417 = _3404;
                                _3418 = _3405;
                                _3419 = _3406;
                                _3420 = _3407;
                                _3421 = _3408;
                                _3422 = _3409;
                                _3423 = _3424;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3409;
                        frontier_phi_72_pred_1 = _3408;
                        frontier_phi_72_pred_2 = _3407;
                        frontier_phi_72_pred_3 = _3406;
                        frontier_phi_72_pred_4 = _3405;
                        frontier_phi_72_pred_5 = _3404;
                    }
                    _3077 = frontier_phi_72_pred;
                    _3075 = frontier_phi_72_pred_1;
                    _3073 = frontier_phi_72_pred_2;
                    _3071 = frontier_phi_72_pred_3;
                    _3069 = frontier_phi_72_pred_4;
                    _3067 = frontier_phi_72_pred_5;
                    uint _3212 = _3211 + 1u;
                    if (_3212 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3205 = _3067;
                        _3206 = _3069;
                        _3207 = _3071;
                        _3208 = _3073;
                        _3209 = _3075;
                        _3210 = _3077;
                        _3211 = _3212;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3077;
                frontier_phi_60_61_ladder_1 = _3075;
                frontier_phi_60_61_ladder_2 = _3071;
                frontier_phi_60_61_ladder_3 = _3069;
                frontier_phi_60_61_ladder_4 = _3067;
                frontier_phi_60_61_ladder_5 = _3073;
            }
            else
            {
                frontier_phi_60_61_ladder = _2963;
                frontier_phi_60_61_ladder_1 = _2961;
                frontier_phi_60_61_ladder_2 = _2957;
                frontier_phi_60_61_ladder_3 = _2955;
                frontier_phi_60_61_ladder_4 = _2953;
                frontier_phi_60_61_ladder_5 = _2959;
            }
            _3066 = frontier_phi_60_61_ladder_4;
            _3068 = frontier_phi_60_61_ladder_3;
            _3070 = frontier_phi_60_61_ladder_2;
            _3072 = frontier_phi_60_61_ladder_5;
            _3074 = frontier_phi_60_61_ladder_1;
            _3076 = frontier_phi_60_61_ladder;
        }
        float _3081 = isnan(1.0) ? _856 : (isnan(_856) ? 1.0 : min(_856, 1.0));
        _2886 = (_3081 * _3072) + _2398;
        _2888 = (_3081 * _3074) + _2400;
        _2890 = (_3081 * _3076) + _2402;
        _2892 = ((_3066 * _840) * _3081) + _2736;
        _2894 = ((_3068 * _842) * _3081) + _2738;
        _2896 = ((_3070 * _843) * _3081) + _2740;
    }
    else
    {
        _2886 = _2398;
        _2888 = _2400;
        _2890 = _2402;
        _2892 = _2736;
        _2894 = _2738;
        _2896 = _2740;
    }
    float _4801 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
    float _4812 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
    float _4823 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
    uint _2916 = _242 + 6u;
    float _2924 = _778 / cbSceneParam._m0[86u].x;
    float _2925 = _779 / cbSceneParam._m0[86u].y;
    vec4 _2939 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2924, _2925, (log2((isnan(cbSceneParam._m0[77u].w) ? _712 : (isnan(_712) ? cbSceneParam._m0[77u].w : min(_712, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2941 = _2939.x;
    float _2942 = _2939.y;
    float _2943 = _2939.z;
    float _2944 = _2939.w;
    float _3016;
    float _3018;
    float _3020;
    float _3022;
    if (_712 > cbSceneParam._m0[78u].w)
    {
        float _2978 = isnan(_712) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _712 : min(cbSceneParam._m0[80u].w, _712));
        float _2979 = _2978 / _712;
        float _2990 = _2979 * _763;
        float _2991 = _764 * _2979;
        float _2992 = (-0.0) - _2991;
        float _2994 = _2979 * _765;
        float _2996 = (cbSceneParam._m0[77u].w * _2992) / _2978;
        float _2997 = _2996 + cbSceneParam._m0[79u].w;
        float _2998 = cbSceneParam._m0[79u].w - _2991;
        float _3004 = sqrt(((_2990 * _2990) + (_2991 * _2991)) + (_2994 * _2994));
        float _3007 = (1.0 - (cbSceneParam._m0[77u].w / _2978)) * _3004;
        float _3012 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3014 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3167;
        if (abs((_2992 - _2996) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3167 = ((((_2997 > 0.0) ? exp2(_3012 * _2997) : (2.0 - exp2(_3014 * _2997))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3007;
        }
        else
        {
            float _3127 = 1.0 / cbSceneParam._m0[80u].x;
            float _3128 = isnan(_2998) ? _2997 : (isnan(_2997) ? _2998 : max(_2997, _2998));
            float _3129 = isnan(_2998) ? _2997 : (isnan(_2997) ? _2998 : min(_2997, _2998));
            float _3138 = isnan(0.0) ? _3128 : (isnan(_3128) ? 0.0 : min(_3128, 0.0));
            float _3139 = isnan(0.0) ? _3129 : (isnan(_3129) ? 0.0 : min(_3129, 0.0));
            _3167 = ((abs(_3004 / _2992) * cbSceneParam._m0[80u].y) * ((((_3138 - _3139) * 2.0) - ((exp2(_3012 * (isnan(0.0) ? _3128 : (isnan(_3128) ? 0.0 : max(_3128, 0.0)))) - exp2(_3012 * (isnan(0.0) ? _3129 : (isnan(_3129) ? 0.0 : max(_3129, 0.0))))) * _3127)) - ((exp2(_3014 * _3138) - exp2(_3014 * _3139)) * _3127))) + (_3007 * cbSceneParam._m0[80u].z);
        }
        vec4 _3169 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2924, _2925, 1.0), 0.0);
        float _3178 = exp2((_3167 * (-1.44269502162933349609375)) * (1.0 - _3169.w));
        float _3179 = log2(_3178);
        float _3195 = log2(_2944);
        _3016 = (exp2(_3195 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3179 * cbSceneParam._m0[78u].x)) * _3169.x) / cbSceneParam._m0[78u].x)) + _2941;
        _3018 = (exp2(_3195 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3179 * cbSceneParam._m0[78u].y)) * _3169.y) / cbSceneParam._m0[78u].y)) + _2942;
        _3020 = (exp2(_3195 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3179 * cbSceneParam._m0[78u].z)) * _3169.z) / cbSceneParam._m0[78u].z)) + _2943;
        _3022 = _3178 * _2944;
    }
    else
    {
        _3016 = _2941;
        _3018 = _2942;
        _3020 = _2943;
        _3022 = _2944;
    }
    float _3034 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3035 = _3034 == 3.0;
    float _3036 = log2(_3022);
    float _3043 = exp2(_3036 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0))) * (_2886 + ((isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0))) * _856))) + ((_2892 + ((isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0))) * _1664)) * cbPerFrame._m0[3u].x));
    float _3044 = exp2(_3036 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0))) * (_2888 + ((isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0))) * _856))) + ((_2894 + ((isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0))) * _1664)) * cbPerFrame._m0[3u].x));
    float _3045 = exp2(_3036 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0))) * (_2890 + ((isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0))) * _856))) + ((_2896 + ((isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0))) * _1664)) * cbPerFrame._m0[3u].x));
    float _3054 = (_3034 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3054 * (_3035 ? _3043 : (_3043 + (cbSceneParam._m0[72u].w * _3016)));
    SV_Target.y = _3054 * (_3035 ? _3044 : (_3044 + (cbSceneParam._m0[72u].w * _3018)));
    SV_Target.z = _3054 * (_3035 ? _3045 : (_3045 + (cbSceneParam._m0[72u].w * _3020)));
    SV_Target.w = cbInstanceData._m0[_2916].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2916].w;
}


