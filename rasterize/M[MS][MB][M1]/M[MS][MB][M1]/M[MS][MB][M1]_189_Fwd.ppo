#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1411;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _229 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _230 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _231 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _237 = inversesqrt(dot(vec3(_229, _230, _231), vec3(_229, _230, _231)));
    float _244 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _251 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _257 = uint(roundEven(NORMAL.w)) * 13u;
    uint _262 = _257 + 1u;
    uint _266 = _257 + 2u;
    float _275 = sqrt(((cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x) + (cbInstanceData._m0[_257].x * cbInstanceData._m0[_257].x)) + (cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x));
    float _276 = _275 * TEXCOORD.z;
    float _277 = _275 * TEXCOORD.w;
    vec4 _297 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _303 = _297.x * cbMtdParam._m0[11u].x;
    float _304 = _297.y * cbMtdParam._m0[11u].y;
    float _305 = _297.z * cbMtdParam._m0[11u].z;
    vec4 _324 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _276) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _277) + cbTextureTilingScale._m0[5u].w));
    vec4 _363 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _365 = _363.x;
    float _377 = dot(vec4(_365, _363.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _394 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_365 - _377) * cbMtdParam._m0[24u].y) + _377) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3737 = isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0));
    float _395 = isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0));
    float _402 = (_395 * ((_324.x * cbMtdParam._m0[12u].x) - _303)) + _303;
    float _403 = (_395 * ((_324.y * cbMtdParam._m0[12u].y) - _304)) + _304;
    float _404 = (_395 * ((_324.z * cbMtdParam._m0[12u].z) - _305)) + _305;
    vec4 _421 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _276) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _277) + cbTextureTilingScale._m0[3u].w));
    vec4 _441 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _443 = _441.x;
    float _453 = dot(vec4(_443, _441.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _467 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_443 - _453) * cbMtdParam._m0[24u].y) + _453) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3748 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _468 = isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0));
    float _475 = (_468 * ((_421.x * cbMtdParam._m0[13u].x) - _402)) + _402;
    float _476 = (_468 * ((_421.y * cbMtdParam._m0[13u].y) - _403)) + _403;
    float _477 = (_468 * ((_421.z * cbMtdParam._m0[13u].z) - _404)) + _404;
    vec4 _495 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _276) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _277) + cbTextureTilingScale._m0[4u].w));
    vec4 _512 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _514 = _512.x;
    float _515 = _512.y;
    float _516 = _512.z;
    float _523 = ((_495.x - _514) * _395) + _514;
    float _524 = ((_495.y - _515) * _395) + _515;
    float _525 = ((_495.z - _516) * _395) + _516;
    vec4 _537 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _276) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _277) + cbTextureTilingScale._m0[2u].w));
    float _550 = ((_537.z - _525) * _468) + _525;
    float _553 = ((((_537.x - _523) * _468) + _523) * 2.0) + (-1.0);
    float _555 = ((((_537.y - _524) * _468) + _524) * 2.0) + (-1.0);
    float _556 = dot(vec2(_553, _555), vec2(_553, _555));
    float _3759 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _561 = sqrt(1.0 - (isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0))));
    vec4 _575 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _600 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _276) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _277) + cbTextureTilingScale._m0[11u].w));
    float _602 = _600.x;
    float _603 = 1.0 - _602;
    float _609 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _612 = ((isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : min(_609, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _621 = (_612 - ((((((_602 - _603) * cbMtdParam._m0[24u].z) + _603) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _612))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3780 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _622 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
    float _629 = (_622 * (cbMtdParam._m0[17u].x - _475)) + _475;
    float _630 = (_622 * (cbMtdParam._m0[17u].y - _476)) + _476;
    float _631 = (_622 * (cbMtdParam._m0[17u].z - _477)) + _477;
    vec4 _643 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _276) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _277) + cbTextureTilingScale._m0[19u].w));
    float _645 = _643.x;
    float _646 = 1.0 - _645;
    float _673 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_645 - _646) * cbMtdParam._m0[24u].w) + _646) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3791 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _674 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
    float _682 = ((((cbMtdParam._m0[10u].x - _629) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _674) + _629;
    float _683 = ((((cbMtdParam._m0[10u].y - _630) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _674) + _630;
    float _684 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _631)) * _674) + _631;
    vec4 _710 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _712 = _710.x;
    float _730 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _276) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _277) + cbTextureTilingScale._m0[9u].w)).x - _712) * _395) + _712;
    float _747 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _276) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _277) + cbTextureTilingScale._m0[21u].w)).x - _730) * _468) + _730;
    float _751 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _747) * cbMtdParam._m0[19u].z) + _747;
    float _753 = _751 - (_751 * _622);
    float _755 = _753 - (_753 * _674);
    float _759 = (cbMtdParam._m0[19u].w * (_575.z - _550)) + _550;
    vec4 _773 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _276) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _277) + cbTextureTilingScale._m0[15u].w));
    float _780 = (_773.x * 2.0) + (-1.0);
    float _781 = (_773.y * 2.0) + (-1.0);
    float _782 = dot(vec2(_780, _781), vec2(_780, _781));
    float _3802 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _790 = (_622 * (_773.z - _759)) + _759;
    float _793 = ((cbMtdParam._m0[23u].y - _790) * _674) + _790;
    vec4 _812 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _276) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _277) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _818 = (_812.x * 2.0) + (-1.0);
    float _819 = (_812.y * 2.0) + (-1.0);
    float _820 = dot(vec2(_818, _819), vec2(_818, _819));
    float _3813 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
    float _828 = (((_575.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _553;
    float _829 = (((_575.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _555;
    float _841 = (((_780 - _828) + (cbMtdParam._m0[21u].x * _828)) * _622) + _828;
    float _842 = (((_781 - _829) + (cbMtdParam._m0[21u].x * _829)) * _622) + _829;
    float _843 = (_622 * (sqrt(1.0 - (isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0)))) - _561)) + _561;
    float _854 = (((_818 - _841) + (_841 * cbMtdParam._m0[22u].z)) * _674) + _841;
    float _855 = (((_819 - _842) + (_842 * cbMtdParam._m0[22u].z)) * _674) + _842;
    float _856 = ((sqrt(1.0 - (isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0)))) - _843) * _674) + _843;
    float _858 = cbMtdParam._m0[22u].x + _575.w;
    float _861 = fma(_856, _244 * NORMAL.x, fma(_855, _251 * TANGENT.x, (_237 * _229) * _854));
    float _864 = fma(_856, _244 * NORMAL.y, fma(_855, _251 * TANGENT.y, (_237 * _230) * _854));
    float _867 = fma(_856, _244 * NORMAL.z, fma(_855, _251 * TANGENT.z, (_237 * _231) * _854));
    float _871 = inversesqrt(dot(vec3(_861, _864, _867), vec3(_861, _864, _867)));
    float _872 = _871 * _861;
    float _873 = _871 * _864;
    float _874 = _871 * _867;
    float _3824 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
    float _875 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
    float _3835 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
    float _3846 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _3857 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
    float _3868 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _3879 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _880 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
    float _894 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _934 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _944 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _934);
    float _945 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _934);
    float _946 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _934);
    float _950 = inversesqrt(dot(vec3(_944, _945, _946), vec3(_944, _945, _946)));
    float _951 = _944 * _950;
    float _952 = _945 * _950;
    float _953 = _946 * _950;
    float _959 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _960 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _978 = fma(_874, cbSceneParam._m0[5u].z, fma(_873, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _872));
    float _981 = fma(_874, cbSceneParam._m0[6u].z, fma(_873, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _872));
    float _984 = fma(_874, cbSceneParam._m0[7u].z, fma(_873, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _872));
    uint _998 = (_257 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1004 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0)))) * cbInstanceData._m0[_998].x;
    float _1005 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0)))) * cbInstanceData._m0[_998].y;
    float _1006 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0)))) * cbInstanceData._m0[_998].z;
    float _3890 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
    float _1007 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
    float _3901 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
    float _1008 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
    float _3912 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
    float _1009 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
    float _1010 = 1.0 - _880;
    float _1011 = _1007 * _1010;
    float _1012 = _1008 * _1010;
    float _1013 = _1009 * _1010;
    float _1018 = (_1007 + (-0.039999999105930328369140625)) * _880;
    float _1019 = (_1008 + (-0.039999999105930328369140625)) * _880;
    float _1020 = (_1009 + (-0.039999999105930328369140625)) * _880;
    float _1021 = _1018 + 0.039999999105930328369140625;
    float _1023 = _1019 + 0.039999999105930328369140625;
    float _1024 = _1020 + 0.039999999105930328369140625;
    vec4 _1033 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _959, cbSceneParam._m0[86u].y * _960));
    float _1037 = ((isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0))) * TEXCOORD_5.w) * _1033.x;
    float _1038 = dot(vec3(_872, _873, _874), vec3(_951, _952, _953));
    float _1041 = _1038 * 2.0;
    float _1045 = (_1041 * _872) - _951;
    float _1046 = (_1041 * _873) - _952;
    float _1047 = (_1041 * _874) - _953;
    float _1051 = abs(dot(vec3(_951, _952, _953), vec3(_872, _873, _874)));
    float _3923 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
    float _1053 = sqrt(_875);
    float _1066 = exp2((_1053 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1053 * 3.0));
    float _1072 = (1.0 - _1066) * ((_1053 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1073 = _1066 * _1053;
    float _1101 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1105 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1109 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1410;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1135 = fma(_1109, cbModelParam._m0[26u].z, fma(_1105, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1101));
        float _1139 = fma(_1109, cbModelParam._m0[27u].z, fma(_1105, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1101));
        float _1143 = fma(_1109, cbModelParam._m0[28u].z, fma(_1105, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1101));
        float _1168 = _1101 + _872;
        float _1169 = _1105 + _873;
        float _1170 = _1109 + _874;
        float _1180 = fma(_1170, cbModelParam._m0[26u].z, fma(_1169, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1168)) - _1135;
        float _1181 = fma(_1170, cbModelParam._m0[27u].z, fma(_1169, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1168)) - _1139;
        float _1182 = fma(_1170, cbModelParam._m0[28u].z, fma(_1169, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1168)) - _1143;
        float _1186 = inversesqrt(dot(vec3(_1180, _1181, _1182), vec3(_1180, _1181, _1182)));
        float _1199 = ((_1186 * _1180) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1135 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1200 = ((_1186 * _1181) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1139 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1201 = ((_1186 * _1182) / cbModelParam._m0[34u].z) + ((((((_1143 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1204 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1199, _1200, _1201), 0.0);
        vec4 _1211 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1199, _1200, _1201), 0.0);
        vec4 _1218 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1199, _1200, _1201), 0.0);
        vec4 _1225 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1199, _1200, _1201), 0.0);
        float _1238 = exp2((_1204.w + (-0.5)) * 20.0) * 2.0;
        float _1239 = _1238 * (_1204.x + (-0.5));
        float _1240 = _1238 * (_1204.y + (-0.5));
        float _1241 = _1238 * (_1204.z + (-0.5));
        float _1248 = exp2((_1211.w + (-0.5)) * 20.0) * 2.0;
        float _1249 = _1248 * (_1211.x + (-0.5));
        float _1250 = _1248 * (_1211.y + (-0.5));
        float _1251 = _1248 * (_1211.z + (-0.5));
        float _1258 = exp2((_1218.w + (-0.5)) * 20.0) * 2.0;
        float _1259 = _1258 * (_1218.x + (-0.5));
        float _1260 = _1258 * (_1218.y + (-0.5));
        float _1261 = _1258 * (_1218.z + (-0.5));
        float _1268 = exp2((_1225.w + (-0.5)) * 20.0) * 2.0;
        float _1269 = _1268 * (_1225.x + (-0.5));
        float _1270 = _1268 * (_1225.y + (-0.5));
        float _1271 = _1268 * (_1225.z + (-0.5));
        float _1272 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1273 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1274 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1275 = _1239 * 0.5;
        float _1276 = _1249 * 0.5;
        float _1277 = _1259 * 0.5;
        float _1278 = dot(vec3(_1275, _1276, _1277), vec3(_1275, _1276, _1277));
        float _1283 = (_1278 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1278);
        float _1292 = (dot(vec3(_872, _873, _874), vec3(_1283 * _1275, _1283 * _1276, _1283 * _1277)) + 1.0) * 0.5;
        float _3949 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1302 = sqrt(((_1276 * _1276) + (_1275 * _1275)) + (_1277 * _1277)) / (_1272 + 9.9999997473787516355514526367188e-06);
        float _3960 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1303 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
        float _1304 = _1303 * 2.0;
        float _1308 = (1.0 - _1303) / (_1303 + 1.0);
        float _3971 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1309 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
        float _1318 = ((((1.0 - _1309) * (_1304 + 2.0)) * exp2(log2(isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0))) * (_1304 + 1.0))) + _1309) * _1272;
        float _1319 = _1240 * 0.5;
        float _1320 = _1250 * 0.5;
        float _1321 = _1260 * 0.5;
        float _1322 = dot(vec3(_1319, _1320, _1321), vec3(_1319, _1320, _1321));
        float _1327 = (_1322 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1322);
        float _1335 = (dot(vec3(_872, _873, _874), vec3(_1327 * _1319, _1327 * _1320, _1327 * _1321)) + 1.0) * 0.5;
        float _3982 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1344 = sqrt(((_1320 * _1320) + (_1319 * _1319)) + (_1321 * _1321)) / (_1273 + 9.9999997473787516355514526367188e-06);
        float _3993 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1345 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
        float _1346 = _1345 * 2.0;
        float _1350 = (1.0 - _1345) / (_1345 + 1.0);
        float _4004 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1351 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
        float _1360 = ((((1.0 - _1351) * (_1346 + 2.0)) * exp2(log2(isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0))) * (_1346 + 1.0))) + _1351) * _1273;
        float _1361 = _1241 * 0.5;
        float _1362 = _1251 * 0.5;
        float _1363 = _1261 * 0.5;
        float _1364 = dot(vec3(_1361, _1362, _1363), vec3(_1361, _1362, _1363));
        float _1369 = (_1364 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1364);
        float _1377 = (dot(vec3(_872, _873, _874), vec3(_1369 * _1361, _1369 * _1362, _1369 * _1363)) + 1.0) * 0.5;
        float _4015 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1386 = sqrt(((_1362 * _1362) + (_1361 * _1361)) + (_1363 * _1363)) / (_1274 + 9.9999997473787516355514526367188e-06);
        float _4026 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1387 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
        float _1388 = _1387 * 2.0;
        float _1392 = (1.0 - _1387) / (_1387 + 1.0);
        float _4037 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1393 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
        float _1402 = ((((1.0 - _1393) * (_1388 + 2.0)) * exp2(log2(isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0))) * (_1388 + 1.0))) + _1393) * _1274;
        _1410 = _1241;
        _1412 = _1240;
        _1413 = _1239;
        _1414 = _1251;
        _1415 = _1250;
        _1416 = _1249;
        _1417 = _1261;
        _1418 = _1260;
        _1419 = _1259;
        _1420 = _1274;
        _1421 = _1273;
        _1422 = _1272;
        _1423 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0)));
        _1424 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0)));
        _1425 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0)));
    }
    else
    {
        _1410 = _1411;
        _1412 = _1411;
        _1413 = _1411;
        _1414 = _1411;
        _1415 = _1411;
        _1416 = _1411;
        _1417 = _1411;
        _1418 = _1411;
        _1419 = _1411;
        _1420 = _1411;
        _1421 = _1411;
        _1422 = _1411;
        _1423 = 0.0;
        _1424 = 0.0;
        _1425 = 0.0;
    }
    float _1718;
    float _1719;
    float _1720;
    float _1721;
    float _1722;
    float _1723;
    float _1724;
    float _1725;
    float _1726;
    float _1727;
    float _1728;
    float _1729;
    float _1730;
    float _1731;
    float _1732;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1449 = fma(_1109, cbModelParam._m0[30u].z, fma(_1105, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1101));
        float _1453 = fma(_1109, cbModelParam._m0[31u].z, fma(_1105, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1101));
        float _1457 = fma(_1109, cbModelParam._m0[32u].z, fma(_1105, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1101));
        float _1480 = _1101 + _872;
        float _1481 = _1105 + _873;
        float _1482 = _1109 + _874;
        float _1492 = fma(_1482, cbModelParam._m0[30u].z, fma(_1481, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1480)) - _1449;
        float _1493 = fma(_1482, cbModelParam._m0[31u].z, fma(_1481, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1480)) - _1453;
        float _1494 = fma(_1482, cbModelParam._m0[32u].z, fma(_1481, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1480)) - _1457;
        float _1498 = inversesqrt(dot(vec3(_1492, _1493, _1494), vec3(_1492, _1493, _1494)));
        float _1511 = ((_1498 * _1492) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1449 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1512 = ((_1498 * _1493) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1453 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1513 = ((_1498 * _1494) / cbModelParam._m0[35u].z) + ((((((_1457 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1515 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1511, _1512, _1513), 0.0);
        vec4 _1522 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1511, _1512, _1513), 0.0);
        vec4 _1529 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1511, _1512, _1513), 0.0);
        vec4 _1536 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1511, _1512, _1513), 0.0);
        float _1548 = exp2((_1515.w + (-0.5)) * 20.0) * 2.0;
        float _1549 = _1548 * (_1515.x + (-0.5));
        float _1550 = _1548 * (_1515.y + (-0.5));
        float _1551 = _1548 * (_1515.z + (-0.5));
        float _1558 = exp2((_1522.w + (-0.5)) * 20.0) * 2.0;
        float _1559 = _1558 * (_1522.x + (-0.5));
        float _1560 = _1558 * (_1522.y + (-0.5));
        float _1561 = _1558 * (_1522.z + (-0.5));
        float _1568 = exp2((_1529.w + (-0.5)) * 20.0) * 2.0;
        float _1569 = _1568 * (_1529.x + (-0.5));
        float _1570 = _1568 * (_1529.y + (-0.5));
        float _1571 = _1568 * (_1529.z + (-0.5));
        float _1578 = exp2((_1536.w + (-0.5)) * 20.0) * 2.0;
        float _1579 = _1578 * (_1536.x + (-0.5));
        float _1580 = _1578 * (_1536.y + (-0.5));
        float _1581 = _1578 * (_1536.z + (-0.5));
        float _1582 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1583 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1584 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1585 = _1549 * 0.5;
        float _1586 = _1559 * 0.5;
        float _1587 = _1569 * 0.5;
        float _1588 = dot(vec3(_1585, _1586, _1587), vec3(_1585, _1586, _1587));
        float _1593 = (_1588 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1588);
        float _1601 = (dot(vec3(_872, _873, _874), vec3(_1593 * _1585, _1593 * _1586, _1593 * _1587)) + 1.0) * 0.5;
        float _4078 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1610 = sqrt(((_1586 * _1586) + (_1585 * _1585)) + (_1587 * _1587)) / (_1582 + 9.9999997473787516355514526367188e-06);
        float _4089 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
        float _1611 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
        float _1612 = _1611 * 2.0;
        float _1616 = (1.0 - _1611) / (_1611 + 1.0);
        float _4100 = isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0));
        float _1617 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
        float _1626 = ((((1.0 - _1617) * (_1612 + 2.0)) * exp2(log2(isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0))) * (_1612 + 1.0))) + _1617) * _1582;
        float _1627 = _1550 * 0.5;
        float _1628 = _1560 * 0.5;
        float _1629 = _1570 * 0.5;
        float _1630 = dot(vec3(_1627, _1628, _1629), vec3(_1627, _1628, _1629));
        float _1635 = (_1630 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1630);
        float _1643 = (dot(vec3(_872, _873, _874), vec3(_1635 * _1627, _1635 * _1628, _1635 * _1629)) + 1.0) * 0.5;
        float _4111 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
        float _1652 = sqrt(((_1628 * _1628) + (_1627 * _1627)) + (_1629 * _1629)) / (_1583 + 9.9999997473787516355514526367188e-06);
        float _4122 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
        float _1653 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
        float _1654 = _1653 * 2.0;
        float _1658 = (1.0 - _1653) / (_1653 + 1.0);
        float _4133 = isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0));
        float _1659 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
        float _1668 = ((((1.0 - _1659) * (_1654 + 2.0)) * exp2(log2(isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0))) * (_1654 + 1.0))) + _1659) * _1583;
        float _1669 = _1551 * 0.5;
        float _1670 = _1561 * 0.5;
        float _1671 = _1571 * 0.5;
        float _1672 = dot(vec3(_1669, _1670, _1671), vec3(_1669, _1670, _1671));
        float _1677 = (_1672 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1672);
        float _1685 = (dot(vec3(_872, _873, _874), vec3(_1677 * _1669, _1677 * _1670, _1677 * _1671)) + 1.0) * 0.5;
        float _4144 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0));
        float _1694 = sqrt(((_1670 * _1670) + (_1669 * _1669)) + (_1671 * _1671)) / (_1584 + 9.9999997473787516355514526367188e-06);
        float _4155 = isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0));
        float _1695 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
        float _1696 = _1695 * 2.0;
        float _1700 = (1.0 - _1695) / (_1695 + 1.0);
        float _4166 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
        float _1701 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
        float _1710 = ((((1.0 - _1701) * (_1696 + 2.0)) * exp2(log2(isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0))) * (_1696 + 1.0))) + _1701) * _1584;
        _1718 = _1551;
        _1719 = _1550;
        _1720 = _1549;
        _1721 = _1561;
        _1722 = _1560;
        _1723 = _1559;
        _1724 = _1571;
        _1725 = _1570;
        _1726 = _1569;
        _1727 = _1584;
        _1728 = _1583;
        _1729 = _1582;
        _1730 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0)));
        _1731 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0)));
        _1732 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0)));
    }
    else
    {
        _1718 = _1411;
        _1719 = _1411;
        _1720 = _1411;
        _1721 = _1411;
        _1722 = _1411;
        _1723 = _1411;
        _1724 = _1411;
        _1725 = _1411;
        _1726 = _1411;
        _1727 = _1411;
        _1728 = _1411;
        _1729 = _1411;
        _1730 = 0.0;
        _1731 = 0.0;
        _1732 = 0.0;
    }
    float _1742 = (cbModelParam._m0[1u].x * (_1730 - _1423)) + _1423;
    float _1743 = (cbModelParam._m0[1u].x * (_1731 - _1424)) + _1424;
    float _1744 = (cbModelParam._m0[1u].x * (_1732 - _1425)) + _1425;
    float _1765 = fma(_1744, cbSceneParam._m0[89u].z, fma(_1743, cbSceneParam._m0[89u].y, _1742 * cbSceneParam._m0[89u].x));
    float _1768 = fma(_1744, cbSceneParam._m0[90u].z, fma(_1743, cbSceneParam._m0[90u].y, _1742 * cbSceneParam._m0[90u].x));
    float _1771 = fma(_1744, cbSceneParam._m0[91u].z, fma(_1743, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1742));
    float _1786 = _1045 * 0.5;
    float _1787 = _1046 * 0.5;
    float _1788 = _1047 * 0.5;
    float _1789 = dot(vec4(_1786, _1787, _1788, 1.0), vec4(_1720, _1723, _1726, _1729));
    float _1792 = dot(vec4(_1786, _1787, _1788, 1.0), vec4(_1719, _1722, _1725, _1728));
    float _1795 = dot(vec4(_1786, _1787, _1788, 1.0), vec4(_1718, _1721, _1724, _1727));
    float _1829;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1802 = dot(vec4(_1786, _1787, _1788, 1.0), vec4(_1410, _1414, _1417, _1420));
        float _1806 = dot(vec4(_1786, _1787, _1788, 1.0), vec4(_1412, _1415, _1418, _1421));
        float _1810 = dot(vec4(_1786, _1787, _1788, 1.0), vec4(_1413, _1416, _1419, _1422));
        float _1817 = dot(vec4(cbModelParam._m0[39u]), vec4(_1786, _1787, _1788, 1.0));
        _1829 = dot(vec3(isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0)), isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0)), isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1817) ? 0.0 : (isnan(0.0) ? _1817 : max(0.0, _1817))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1829 = 1.0;
    }
    float _1840;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1831 = dot(vec4(cbModelParam._m0[40u]), vec4(_1786, _1787, _1788, 1.0));
        _1840 = dot(vec3(isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0)), isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0)), isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1831) ? 0.0 : (isnan(0.0) ? _1831 : max(0.0, _1831))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1840 = 1.0;
    }
    float _1844 = (_1840 * cbModelParam._m0[1u].x) + (_1829 * (1.0 - cbModelParam._m0[1u].x));
    float _1854 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _875);
    float _1855 = isnan(_1854) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1854 : min(cbModelParam._m0[25u].z, _1854));
    float _1936;
    float _1938;
    float _1940;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1903 = fma(_1109, cbModelParam._m0[13u].z, fma(_1105, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1101)) + cbModelParam._m0[13u].w;
        float _1907 = fma(_1109, cbModelParam._m0[14u].z, fma(_1105, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1101)) + cbModelParam._m0[14u].w;
        float _1911 = fma(_1109, cbModelParam._m0[15u].z, fma(_1105, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1101)) + cbModelParam._m0[15u].w;
        float _1914 = fma(_1047, cbModelParam._m0[13u].z, fma(_1046, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1045));
        float _1917 = fma(_1047, cbModelParam._m0[14u].z, fma(_1046, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1045));
        float _1920 = fma(_1047, cbModelParam._m0[15u].z, fma(_1046, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1045));
        float _1948;
        if (_1914 > 0.0)
        {
            _1948 = abs((1.0 - _1903) / _1914);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1914 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1903 + 1.0) / _1914);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1948 = frontier_phi_14_12_ladder;
        }
        float _2151;
        if (_1917 > 0.0)
        {
            _2151 = abs((1.0 - _1907) / _1917);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1917 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1907 + 1.0) / _1917);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2151 = frontier_phi_23_19_ladder;
        }
        float _2405;
        if (_1920 > 0.0)
        {
            _2405 = abs((1.0 - _1911) / _1920);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1920 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1911 + 1.0) / _1920);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2405 = frontier_phi_35_30_ladder;
        }
        float _2407 = isnan(_2151) ? _1948 : (isnan(_1948) ? _2151 : min(_1948, _2151));
        float _2408 = isnan(_2405) ? _2407 : (isnan(_2407) ? _2405 : min(_2407, _2405));
        float _2412 = (_2408 * _1914) + _1903;
        float _2413 = (_2408 * _1917) + _1907;
        float _2414 = (_2408 * _1920) + _1911;
        float _2415 = _2408 * 9.9999997473787516355514526367188e-05;
        float _2417 = (-1.0) - _2415;
        float _2419 = _2415 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2414 > _2419) || ((_2414 < _2417) || ((_2413 > _2419) || ((_2413 < _2417) || ((_2412 < _2417) || (_2412 > _2419))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2542 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2414, cbModelParam._m0[9u].z, fma(_2413, cbModelParam._m0[9u].y, _2412 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2414, cbModelParam._m0[10u].z, fma(_2413, cbModelParam._m0[10u].y, _2412 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2414, cbModelParam._m0[11u].z, fma(_2413, cbModelParam._m0[11u].y, _2412 * cbModelParam._m0[11u].x))), _1855);
            frontier_phi_13_35_ladder = _2542.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2542.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2542.x * cbModelParam._m0[1u].y;
        }
        _1936 = frontier_phi_13_35_ladder_2;
        _1938 = frontier_phi_13_35_ladder_1;
        _1940 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1924 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1045, _1046, _1047), _1855);
        _1936 = _1924.x * cbModelParam._m0[1u].y;
        _1938 = _1924.y * cbModelParam._m0[1u].y;
        _1940 = _1924.z * cbModelParam._m0[1u].y;
    }
    float _1944 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _875);
    float _1945 = isnan(_1944) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1944 : min(cbModelParam._m0[25u].w, _1944));
    float _2035;
    float _2037;
    float _2039;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1999 = fma(_1109, cbModelParam._m0[21u].z, fma(_1105, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1101)) + cbModelParam._m0[21u].w;
        float _2003 = fma(_1109, cbModelParam._m0[22u].z, fma(_1105, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1101)) + cbModelParam._m0[22u].w;
        float _2007 = fma(_1109, cbModelParam._m0[23u].z, fma(_1105, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1101)) + cbModelParam._m0[23u].w;
        float _2010 = fma(_1047, cbModelParam._m0[21u].z, fma(_1046, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1045));
        float _2013 = fma(_1047, cbModelParam._m0[22u].z, fma(_1046, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1045));
        float _2016 = fma(_1047, cbModelParam._m0[23u].z, fma(_1046, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1045));
        float _2156;
        if (_2010 > 0.0)
        {
            _2156 = abs((1.0 - _1999) / _2010);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2010 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1999 + 1.0) / _2010);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2156 = frontier_phi_25_21_ladder;
        }
        float _2432;
        if (_2013 > 0.0)
        {
            _2432 = abs((1.0 - _2003) / _2013);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2013 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2003 + 1.0) / _2013);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2432 = frontier_phi_37_32_ladder;
        }
        float _2645;
        if (_2016 > 0.0)
        {
            _2645 = abs((1.0 - _2007) / _2016);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2016 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2007 + 1.0) / _2016);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2645 = frontier_phi_46_43_ladder;
        }
        float _2647 = isnan(_2432) ? _2156 : (isnan(_2156) ? _2432 : min(_2156, _2432));
        float _2648 = isnan(_2645) ? _2647 : (isnan(_2647) ? _2645 : min(_2647, _2645));
        float _2652 = (_2648 * _2010) + _1999;
        float _2653 = (_2648 * _2013) + _2003;
        float _2654 = (_2648 * _2016) + _2007;
        float _2655 = _2648 * 9.9999997473787516355514526367188e-05;
        float _2656 = (-1.0) - _2655;
        float _2658 = _2655 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2654 > _2658) || ((_2654 < _2656) || ((_2653 > _2658) || ((_2653 < _2656) || ((_2652 < _2656) || (_2652 > _2658))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2853 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2654, cbModelParam._m0[17u].z, fma(_2653, cbModelParam._m0[17u].y, _2652 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2654, cbModelParam._m0[18u].z, fma(_2653, cbModelParam._m0[18u].y, _2652 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2654, cbModelParam._m0[19u].z, fma(_2653, cbModelParam._m0[19u].y, _2652 * cbModelParam._m0[19u].x))), _1945);
            frontier_phi_22_46_ladder = _2853.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2853.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2853.x * cbModelParam._m0[1u].z;
        }
        _2035 = frontier_phi_22_46_ladder_2;
        _2037 = frontier_phi_22_46_ladder_1;
        _2039 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2019 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1045, _1046, _1047), _1945);
        _2035 = _2019.x * cbModelParam._m0[1u].z;
        _2037 = _2019.y * cbModelParam._m0[1u].z;
        _2039 = _2019.z * cbModelParam._m0[1u].z;
    }
    float _2052 = (((_1072 * _1021) + _1073) * _1037) * ((cbModelParam._m0[1u].w * (_2035 - _1936)) + _1936);
    float _2054 = (((_1072 * _1023) + _1073) * _1037) * ((cbModelParam._m0[1u].w * (_2037 - _1938)) + _1938);
    float _2056 = (((_1072 * _1024) + _1073) * _1037) * ((cbModelParam._m0[1u].w * (_2039 - _1940)) + _1940);
    float _2059 = fma(_2056, cbSceneParam._m0[89u].z, fma(_2054, cbSceneParam._m0[89u].y, _2052 * cbSceneParam._m0[89u].x));
    float _2062 = fma(_2056, cbSceneParam._m0[90u].z, fma(_2054, cbSceneParam._m0[90u].y, _2052 * cbSceneParam._m0[90u].x));
    float _2065 = fma(_2056, cbSceneParam._m0[91u].z, fma(_2054, cbSceneParam._m0[91u].y, _2052 * cbSceneParam._m0[91u].x));
    uvec4 _2075 = floatBitsToUint(cbInstanceData._m0[_257 + 5u]);
    uint _2077 = _2075.x * 14u;
    uint _2078 = _2077 + 13u;
    float _2085 = _1037 + (-1.0);
    float _2090 = (cbLight._m0[_2078].x * _2085) + 1.0;
    float _2091 = (cbLight._m0[_2078].y * _2085) + 1.0;
    float _2092 = (cbLight._m0[_2078].z * _2085) + 1.0;
    float _2093 = (cbLight._m0[_2078].w * _2085) + 1.0;
    uint _2094 = _2077 + 5u;
    float _2100 = isnan(1.0) ? _2091 : (isnan(_2091) ? 1.0 : min(_2091, 1.0));
    uint _2104 = _2077 + 4u;
    float _2110 = isnan(1.0) ? _2090 : (isnan(_2090) ? 1.0 : min(_2090, 1.0));
    uint _2114 = _2077 | 1u;
    float _2125 = dot(vec3(cbLight._m0[_2077].xyz), vec3(_872, _873, _874));
    float _2128 = dot(vec3(cbLight._m0[_2114].xyz), vec3(_872, _873, _874));
    float _4302 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
    float _4313 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0));
    float _2133 = (isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0))) * 0.3183098733425140380859375;
    float _2135 = (isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0))) * 0.3183098733425140380859375;
    float _2142 = ((cbLight._m0[_2094].x * _2100) * _2135) + ((cbLight._m0[_2104].x * _2110) * _2133);
    float _2143 = ((_2100 * cbLight._m0[_2094].y) * _2135) + ((_2110 * cbLight._m0[_2104].y) * _2133);
    float _2144 = ((_2100 * cbLight._m0[_2094].z) * _2135) + ((_2110 * cbLight._m0[_2104].z) * _2133);
    uvec4 _2148 = floatBitsToUint(cbLight._m0[_2077 + 12u]);
    bool _2150 = _2148.x == 0u;
    float _2161;
    float _2163;
    float _2165;
    if (_2150)
    {
        _2161 = _2142;
        _2163 = _2143;
        _2165 = _2144;
    }
    else
    {
        uint _2169 = _2077 + 6u;
        float _2185 = (dot(vec3(cbLight._m0[_2077 + 2u].xyz), vec3(_872, _873, _874)) * 0.5) + 0.5;
        float _2186 = _2185 * _2185;
        float _4324 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
        float _2187 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
        float _2188 = isnan(1.0) ? _2092 : (isnan(_2092) ? 1.0 : min(_2092, 1.0));
        _2161 = (((cbLight._m0[_2169].x * 0.3183098733425140380859375) * _2187) * _2188) + _2142;
        _2163 = (((cbLight._m0[_2169].y * 0.3183098733425140380859375) * _2187) * _2188) + _2143;
        _2165 = (((cbLight._m0[_2169].z * 0.3183098733425140380859375) * _2187) * _2188) + _2144;
    }
    bool _2168 = _2148.y == 0u;
    float _2206;
    float _2208;
    float _2210;
    if (_2168)
    {
        _2206 = _2161;
        _2208 = _2163;
        _2210 = _2165;
    }
    else
    {
        uint _2376 = _2077 + 7u;
        float _2392 = (dot(vec3(cbLight._m0[_2077 + 3u].xyz), vec3(_872, _873, _874)) * 0.5) + 0.5;
        float _2393 = _2392 * _2392;
        float _4340 = isnan(0.0) ? _2393 : (isnan(_2393) ? 0.0 : max(_2393, 0.0));
        float _2394 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
        float _2395 = isnan(1.0) ? _2093 : (isnan(_2093) ? 1.0 : min(_2093, 1.0));
        _2206 = (((cbLight._m0[_2376].x * 0.3183098733425140380859375) * _2394) * _2395) + _2161;
        _2208 = (((cbLight._m0[_2376].y * 0.3183098733425140380859375) * _2394) * _2395) + _2163;
        _2210 = (((cbLight._m0[_2376].z * 0.3183098733425140380859375) * _2394) * _2395) + _2165;
    }
    uint _2213 = _2077 + 8u;
    float _2226 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2077].w)) * _875) * 0.949999988079071044921875);
    float _2227 = _2226 * _2226;
    float _2228 = cbLight._m0[_2077].x + _951;
    float _2229 = cbLight._m0[_2077].y + _952;
    float _2230 = cbLight._m0[_2077].z + _953;
    float _2234 = inversesqrt(dot(vec3(_2228, _2229, _2230), vec3(_2228, _2229, _2230)));
    float _2235 = _2234 * _2228;
    float _2236 = _2234 * _2229;
    float _2237 = _2234 * _2230;
    float _2238 = dot(vec3(_872, _873, _874), vec3(cbLight._m0[_2077].xyz));
    float _4356 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
    float _2241 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
    float _4367 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
    float _2242 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
    float _2243 = dot(vec3(_872, _873, _874), vec3(_2235, _2236, _2237));
    float _4378 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
    float _2246 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
    float _2247 = dot(vec3(cbLight._m0[_2077].xyz), vec3(_2235, _2236, _2237));
    float _4389 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
    float _2251 = _2227 * _2227;
    float _2255 = ((_2246 * _2246) * (_2251 + (-1.0))) + 1.0;
    float _2263 = exp2(log2(1.0 - (isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0)))) * 5.0);
    float _2264 = 0.959999978542327880859375 - _1018;
    float _2266 = 0.959999978542327880859375 - _1019;
    float _2267 = 0.959999978542327880859375 - _1020;
    float _2274 = 1.0 - _2227;
    float _2285 = (0.5 / (((_2242 * ((_2241 * _2274) + _2227)) + 9.9999999392252902907785028219223e-09) + (((_2242 * _2274) + _2227) * _2241))) * _2241;
    float _4400 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0));
    float _2287 = (isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0))) * (_2251 / ((_2255 * _2255) * 3.141590118408203125));
    uint _2298 = _2077 + 9u;
    float _2309 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2114].w)) * _875) * 0.949999988079071044921875);
    float _2310 = _2309 * _2309;
    float _2311 = cbLight._m0[_2114].x + _951;
    float _2312 = cbLight._m0[_2114].y + _952;
    float _2313 = cbLight._m0[_2114].z + _953;
    float _2317 = inversesqrt(dot(vec3(_2311, _2312, _2313), vec3(_2311, _2312, _2313)));
    float _2318 = _2317 * _2311;
    float _2319 = _2317 * _2312;
    float _2320 = _2317 * _2313;
    float _2321 = dot(vec3(_872, _873, _874), vec3(cbLight._m0[_2114].xyz));
    float _4411 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
    float _2324 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
    float _2325 = dot(vec3(_872, _873, _874), vec3(_2318, _2319, _2320));
    float _4422 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
    float _2328 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
    float _2329 = dot(vec3(cbLight._m0[_2114].xyz), vec3(_2318, _2319, _2320));
    float _4433 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
    float _2333 = _2310 * _2310;
    float _2337 = ((_2328 * _2328) * (_2333 + (-1.0))) + 1.0;
    float _2344 = exp2(log2(1.0 - (isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0)))) * 5.0);
    float _2351 = 1.0 - _2310;
    float _2361 = (0.5 / (((_2242 * ((_2324 * _2351) + _2310)) + 9.9999999392252902907785028219223e-09) + (((_2242 * _2351) + _2310) * _2324))) * _2324;
    float _4444 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
    float _2363 = (isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0))) * (_2333 / ((_2337 * _2337) * 3.141590118408203125));
    float _2373 = (((((_2344 * _2264) + _1021) * cbLight._m0[_2298].x) * _2363) * _2100) + (((((_2263 * _2264) + _1021) * cbLight._m0[_2213].x) * _2287) * _2110);
    float _2374 = (((((_2344 * _2266) + _1023) * cbLight._m0[_2298].y) * _2363) * _2100) + (((((_2263 * _2266) + _1023) * cbLight._m0[_2213].y) * _2287) * _2110);
    float _2375 = (((((_2344 * _2267) + _1024) * cbLight._m0[_2298].z) * _2363) * _2100) + (((((_2263 * _2267) + _1024) * cbLight._m0[_2213].z) * _2287) * _2110);
    float _2437;
    float _2439;
    float _2441;
    if (_2150)
    {
        _2437 = _2373;
        _2439 = _2374;
        _2441 = _2375;
    }
    else
    {
        uint _2443 = _2077 + 2u;
        uint _2447 = _2077 + 10u;
        float _2461 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2443].w)) * _875) * 0.949999988079071044921875);
        float _2462 = _2461 * _2461;
        float _2463 = cbLight._m0[_2443].x + _951;
        float _2464 = cbLight._m0[_2443].y + _952;
        float _2465 = cbLight._m0[_2443].z + _953;
        float _2469 = inversesqrt(dot(vec3(_2463, _2464, _2465), vec3(_2463, _2464, _2465)));
        float _2470 = _2469 * _2463;
        float _2471 = _2469 * _2464;
        float _2472 = _2469 * _2465;
        float _2473 = dot(vec3(_872, _873, _874), vec3(cbLight._m0[_2443].xyz));
        float _4455 = isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0));
        float _2476 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
        float _2477 = dot(vec3(_872, _873, _874), vec3(_2470, _2471, _2472));
        float _4466 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
        float _2480 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
        float _2481 = dot(vec3(cbLight._m0[_2443].xyz), vec3(_2470, _2471, _2472));
        float _4477 = isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0));
        float _2485 = _2462 * _2462;
        float _2489 = ((_2480 * _2480) * (_2485 + (-1.0))) + 1.0;
        float _2496 = exp2(log2(1.0 - (isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0)))) * 5.0);
        float _2503 = 1.0 - _2462;
        float _2513 = (0.5 / (((_2242 * ((_2476 * _2503) + _2462)) + 9.9999999392252902907785028219223e-09) + (((_2242 * _2503) + _2462) * _2476))) * _2476;
        float _4488 = isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0));
        float _2515 = (isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0))) * (_2485 / ((_2489 * _2489) * 3.141590118408203125));
        float _2516 = isnan(1.0) ? _2092 : (isnan(_2092) ? 1.0 : min(_2092, 1.0));
        _2437 = (((((_2496 * _2264) + _1021) * cbLight._m0[_2447].x) * _2515) * _2516) + _2373;
        _2439 = (((((_2496 * _2266) + _1023) * cbLight._m0[_2447].y) * _2515) * _2516) + _2374;
        _2441 = (((((_2496 * _2267) + _1024) * cbLight._m0[_2447].z) * _2515) * _2516) + _2375;
    }
    float _2551;
    float _2553;
    float _2555;
    if (_2168)
    {
        _2551 = _2437;
        _2553 = _2439;
        _2555 = _2441;
    }
    else
    {
        uint _2562 = _2077 + 3u;
        uint _2566 = _2077 + 11u;
        float _2580 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2562].w)) * _875) * 0.949999988079071044921875);
        float _2581 = _2580 * _2580;
        float _2582 = cbLight._m0[_2562].x + _951;
        float _2583 = cbLight._m0[_2562].y + _952;
        float _2584 = cbLight._m0[_2562].z + _953;
        float _2588 = inversesqrt(dot(vec3(_2582, _2583, _2584), vec3(_2582, _2583, _2584)));
        float _2589 = _2588 * _2582;
        float _2590 = _2588 * _2583;
        float _2591 = _2588 * _2584;
        float _2592 = dot(vec3(_872, _873, _874), vec3(cbLight._m0[_2562].xyz));
        float _4504 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0));
        float _2595 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
        float _2596 = dot(vec3(_872, _873, _874), vec3(_2589, _2590, _2591));
        float _4515 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0));
        float _2599 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
        float _2600 = dot(vec3(cbLight._m0[_2562].xyz), vec3(_2589, _2590, _2591));
        float _4526 = isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : max(_2600, 0.0));
        float _2604 = _2581 * _2581;
        float _2608 = ((_2599 * _2599) * (_2604 + (-1.0))) + 1.0;
        float _2615 = exp2(log2(1.0 - (isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0)))) * 5.0);
        float _2622 = 1.0 - _2581;
        float _2632 = (0.5 / (((_2242 * ((_2595 * _2622) + _2581)) + 9.9999999392252902907785028219223e-09) + (((_2242 * _2622) + _2581) * _2595))) * _2595;
        float _4537 = isnan(0.0) ? _2632 : (isnan(_2632) ? 0.0 : max(_2632, 0.0));
        float _2634 = (isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0))) * (_2604 / ((_2608 * _2608) * 3.141590118408203125));
        float _2635 = isnan(1.0) ? _2093 : (isnan(_2093) ? 1.0 : min(_2093, 1.0));
        _2551 = (((((_2615 * _2264) + _1021) * cbLight._m0[_2566].x) * _2634) * _2635) + _2437;
        _2553 = (((((_2615 * _2266) + _1023) * cbLight._m0[_2566].y) * _2634) * _2635) + _2439;
        _2555 = (((((_2615 * _2267) + _1024) * cbLight._m0[_2566].z) * _2634) * _2635) + _2441;
    }
    float _2770;
    float _2772;
    float _2774;
    float _2776;
    float _2778;
    float _2780;
    if (_2075.y == 0u)
    {
        float _2710 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2711 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2710;
        float _2712 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2710;
        float _2713 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2710;
        uvec4 _2725 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2726 = _2725.x;
        uint _2737 = uint((float(_2725.y) * floor(float(uint(cbSceneParam._m0[85u].y * _960) / _2726))) + floor(float(uint(cbSceneParam._m0[85u].x * _959) / _2726)));
        float _2747 = (log2(_2713 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2748 = isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : max(_2747, 0.0));
        uint _2751 = uint(isnan(14.0) ? _2748 : (isnan(_2748) ? 14.0 : min(_2748, 14.0)));
        uvec4 _2756 = texelFetch(g_lightClusterGridBuffer, int(((_2751 << 2u) + (_2737 << 6u)) >> 2u));
        uint _2757 = _2756.x;
        uint _2758 = _2725.z;
        float _2858;
        float _2860;
        float _2862;
        float _2864;
        float _2866;
        float _2868;
        if (((((1u << ((_2758 >> 4u) & 15u)) + 4294967295u) & _2757) == 0u) || ((_2758 & 240u) == 0u))
        {
            _2858 = 0.0;
            _2860 = 0.0;
            _2862 = 0.0;
            _2864 = 0.0;
            _2866 = 0.0;
            _2868 = 0.0;
        }
        else
        {
            float _2859;
            float _2861;
            float _2863;
            float _2865;
            float _2867;
            float _2869;
            float _3003 = 0.0;
            float _3004 = 0.0;
            float _3005 = 0.0;
            float _3006 = 0.0;
            float _3007 = 0.0;
            float _3008 = 0.0;
            uint _3009 = 0u;
            uint _3018;
            bool _3019;
            for (;;)
            {
                _3018 = texelFetch(g_lightClassification, int((((_2751 << 5u) + (_2737 << 9u)) + (_3009 << 2u)) >> 2u)).x;
                _3019 = _3018 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3019)
                {
                    frontier_phi_61_pred = _3003;
                    frontier_phi_61_pred_1 = _3008;
                    frontier_phi_61_pred_2 = _3007;
                    frontier_phi_61_pred_3 = _3006;
                    frontier_phi_61_pred_4 = _3005;
                    frontier_phi_61_pred_5 = _3004;
                }
                else
                {
                    float _3127;
                    float _3128;
                    float _3129;
                    float _3130;
                    float _3131;
                    float _3132;
                    uint _3133;
                    _3127 = _3003;
                    _3128 = _3004;
                    _3129 = _3005;
                    _3130 = _3006;
                    _3131 = _3007;
                    _3132 = _3008;
                    _3133 = _3018;
                    float _3059;
                    float _3060;
                    float _3061;
                    float _3062;
                    float _3063;
                    float _3064;
                    for (;;)
                    {
                        uint _3137 = uint(findLSB(_3133)) + (_3009 << 5u);
                        uint _3134 = (_3133 + 4294967295u) & _3133;
                        uint _3139 = _3137 * 48u;
                        vec4 _3153 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3139)).x, texelFetch(g_PointLightRenderingBuffer, int(_3139 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3139 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3139 + 3u)).x));
                        uint _3159 = (_3137 * 48u) + 4u;
                        vec4 _3172 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3159)).x, texelFetch(g_PointLightRenderingBuffer, int(_3159 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3159 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3159 + 3u)).x));
                        uint _3178 = (_3137 * 48u) + 8u;
                        vec3 _3189 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3178)).x, texelFetch(g_PointLightRenderingBuffer, int(_3178 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3178 + 2u)).x));
                        float _3193 = _3153.x - _2711;
                        float _3194 = _3153.y - _2712;
                        float _3195 = _3153.z - _2713;
                        float _3196 = dot(vec3(_3193, _3194, _3195), vec3(_3193, _3194, _3195));
                        float _3199 = inversesqrt(_3196);
                        float _3200 = _3199 * _3193;
                        float _3201 = _3199 * _3194;
                        float _3202 = _3199 * _3195;
                        float _3203 = dot(vec3(_978, _981, _984), vec3(_3200, _3201, _3202));
                        float _3208 = 1.0 - (_3196 * _3153.w);
                        float _4563 = isnan(0.0) ? _3208 : (isnan(_3208) ? 0.0 : max(_3208, 0.0));
                        float _3209 = isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0));
                        float _3210 = sqrt(_3196) * _3172.w;
                        float _3213 = 1.39999997615814208984375 / (_3210 + 1.39999997615814208984375);
                        float _3214 = _3213 * _3213;
                        float _3217 = ((1.0 - _3214) * _3203) + _3214;
                        float _3220 = _3210 * _3210;
                        float _3224 = ((isnan(0.0) ? _3217 : (isnan(_3217) ? 0.0 : max(_3217, 0.0))) * _3209) / ((_3220 * 0.699999988079071044921875) + 1.0);
                        float _3228 = (-0.0) - _2711;
                        float _3229 = (-0.0) - _2712;
                        float _3230 = (-0.0) - _2713;
                        float _3234 = inversesqrt(dot(vec3(_3228, _3229, _3230), vec3(_3228, _3229, _3230)));
                        float _3235 = _3234 * _3228;
                        float _3236 = _3234 * _3229;
                        float _3237 = _3234 * _3230;
                        float _3245 = exp2(log2(1.0 / ((_3220 * 3.5) + 5.0)) * 0.25);
                        float _3246 = 1.0 - _1053;
                        float _3253 = sqrt(1.0 - ((1.0 - (_3246 * _3246)) * (1.0 - (_3245 * _3245))));
                        float _3254 = _3253 * _3253;
                        float _3255 = _3254 * _3254;
                        float _3256 = _3235 + _3200;
                        float _3257 = _3236 + _3201;
                        float _3258 = _3237 + _3202;
                        float _3262 = inversesqrt(dot(vec3(_3256, _3257, _3258), vec3(_3256, _3257, _3258)));
                        float _3266 = dot(vec3(_978, _981, _984), vec3(_3235, _3236, _3237));
                        float _4579 = isnan(0.0) ? _3266 : (isnan(_3266) ? 0.0 : max(_3266, 0.0));
                        float _3269 = isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0));
                        float _3270 = dot(vec3(_978, _981, _984), vec3(_3262 * _3256, _3262 * _3257, _3262 * _3258));
                        float _4590 = isnan(0.0) ? _3270 : (isnan(_3270) ? 0.0 : max(_3270, 0.0));
                        float _3273 = isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0));
                        float _3277 = ((_3273 * _3273) * (_3255 + (-1.0))) + 1.0;
                        float _3278 = _3213 * _3254;
                        float _3279 = _3278 * _3278;
                        float _3282 = ((1.0 - _3279) * _3203) + _3279;
                        float _4601 = isnan(0.0) ? _3282 : (isnan(_3282) ? 0.0 : max(_3282, 0.0));
                        float _3283 = isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0));
                        float _3284 = 1.0 - _3254;
                        float _3294 = (0.5 / (((_3283 * ((_3269 * _3284) + _3254)) + 9.9999999392252902907785028219223e-09) + (((_3283 * _3284) + _3254) * _3269))) * _3283;
                        float _4612 = isnan(0.0) ? _3294 : (isnan(_3294) ? 0.0 : max(_3294, 0.0));
                        float _3305 = (((_3255 * 3.1415927410125732421875) * (isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0)))) / ((_3277 * _3277) * ((_3220 * 2.1991131305694580078125) + 3.141590118408203125))) * _3209;
                        _3062 = (_3224 * _3172.x) + _3130;
                        _3063 = (_3224 * _3172.y) + _3131;
                        _3064 = (_3224 * _3172.z) + _3132;
                        _3059 = (_3305 * _3189.x) + _3127;
                        _3060 = (_3305 * _3189.y) + _3128;
                        _3061 = (_3305 * _3189.z) + _3129;
                        if (_3134 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3127 = _3059;
                            _3128 = _3060;
                            _3129 = _3061;
                            _3130 = _3062;
                            _3131 = _3063;
                            _3132 = _3064;
                            _3133 = _3134;
                        }
                    }
                    frontier_phi_61_pred = _3059;
                    frontier_phi_61_pred_1 = _3064;
                    frontier_phi_61_pred_2 = _3063;
                    frontier_phi_61_pred_3 = _3062;
                    frontier_phi_61_pred_4 = _3061;
                    frontier_phi_61_pred_5 = _3060;
                }
                _2859 = frontier_phi_61_pred;
                _2869 = frontier_phi_61_pred_1;
                _2867 = frontier_phi_61_pred_2;
                _2865 = frontier_phi_61_pred_3;
                _2863 = frontier_phi_61_pred_4;
                _2861 = frontier_phi_61_pred_5;
                uint _3010 = _3009 + 1u;
                if (_3010 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3003 = _2859;
                    _3004 = _2861;
                    _3005 = _2863;
                    _3006 = _2865;
                    _3007 = _2867;
                    _3008 = _2869;
                    _3009 = _3010;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2858 = _2859;
            _2860 = _2861;
            _2862 = _2863;
            _2864 = _2865;
            _2866 = _2867;
            _2868 = _2869;
        }
        uvec4 _2872 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2873 = _2872.z;
        uint _2875 = (_2873 >> 8u) & 15u;
        float _2971;
        float _2973;
        float _2975;
        float _2977;
        float _2979;
        float _2981;
        if (((4294967295u << _2875) & _2757) == 0u)
        {
            _2971 = _2858;
            _2973 = _2860;
            _2975 = _2862;
            _2977 = _2864;
            _2979 = _2866;
            _2981 = _2868;
        }
        else
        {
            float _2996 = inversesqrt(dot(vec3(_2711, _2712, _2713), vec3(_2711, _2712, _2713)));
            float _2997 = _2996 * _2711;
            float _2998 = _2996 * _2712;
            float _2999 = _2996 * _2713;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2875 < ((_2873 >> 12u) & 15u))
            {
                float _2972;
                float _2974;
                float _2976;
                float _2978;
                float _2980;
                float _2982;
                float _3110 = _2858;
                float _3111 = _2860;
                float _3112 = _2862;
                float _3113 = _2864;
                float _3114 = _2866;
                float _3115 = _2868;
                uint _3116 = _2875;
                uint _3125;
                bool _3126;
                for (;;)
                {
                    _3125 = texelFetch(g_lightClassification, int((((_2751 << 5u) + (_2737 << 9u)) + (_3116 << 2u)) >> 2u)).x;
                    _3126 = _3125 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3126)
                    {
                        frontier_phi_67_pred = _3113;
                        frontier_phi_67_pred_1 = _3114;
                        frontier_phi_67_pred_2 = _3115;
                        frontier_phi_67_pred_3 = _3112;
                        frontier_phi_67_pred_4 = _3111;
                        frontier_phi_67_pred_5 = _3110;
                    }
                    else
                    {
                        float _3310;
                        float _3311;
                        float _3312;
                        float _3313;
                        float _3314;
                        float _3315;
                        float _3603;
                        float _3604;
                        float _3605;
                        float _3606;
                        float _3607;
                        float _3608;
                        float _3323 = _3110;
                        float _3324 = _3111;
                        float _3325 = _3112;
                        float _3326 = _3113;
                        float _3327 = _3114;
                        float _3328 = _3115;
                        uint _3329 = _3125;
                        uint _3330;
                        vec4 _3355;
                        float _3356;
                        vec4 _3371;
                        vec3 _3383;
                        vec4 _3398;
                        vec4 _3413;
                        float _3459;
                        bool _3460;
                        for (;;)
                        {
                            uint _3340 = ((_3116 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3329));
                            _3330 = (_3329 + 4294967295u) & _3329;
                            uint _3342 = _3340 * 40u;
                            _3355 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3342)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 3u)).x));
                            _3356 = _3355.w;
                            uint _3358 = (_3340 * 40u) + 4u;
                            _3371 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3358)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 3u)).x));
                            uint _3373 = (_3340 * 40u) + 8u;
                            _3383 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3373)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 2u)).x));
                            uint _3385 = (_3340 * 40u) + 16u;
                            _3398 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3385)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 3u)).x));
                            uint _3400 = (_3340 * 40u) + 20u;
                            _3413 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3400)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3400 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3400 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3400 + 3u)).x));
                            uint _3415 = (_3340 * 40u) + 24u;
                            vec4 _3428 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3415)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3415 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3415 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3415 + 3u)).x));
                            uint _3434 = (_3340 * 40u) + 28u;
                            vec4 _3447 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3434)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 3u)).x));
                            _3459 = fma(_2713, _3447.z, fma(_2712, _3447.y, _3447.x * _2711)) + _3447.w;
                            _3460 = !((fma(_2713, _3428.z, fma(_2712, _3428.y, _3428.x * _2711)) + _3428.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3460)
                            {
                                float _3487 = _3355.x - _2711;
                                float _3488 = _3355.y - _2712;
                                float _3489 = _3355.z - _2713;
                                float _3490 = dot(vec3(_3487, _3488, _3489), vec3(_3487, _3488, _3489));
                                float _3493 = inversesqrt(_3490);
                                float _3494 = _3493 * _3487;
                                float _3495 = _3493 * _3488;
                                float _3496 = _3493 * _3489;
                                float _3500 = 1.0 - (_3490 / (_3356 * _3356));
                                float _4623 = isnan(0.0) ? _3500 : (isnan(_3500) ? 0.0 : max(_3500, 0.0));
                                float _3501 = isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0));
                                float _3505 = sqrt(_3490) * _3371.w;
                                float _3507 = 1.39999997615814208984375 / (_3505 + 1.39999997615814208984375);
                                float _3508 = _3507 * _3507;
                                float _3511 = ((1.0 - _3508) * dot(vec3(_3494, _3495, _3496), vec3(_978, _981, _984))) + _3508;
                                float _3514 = _3505 * _3505;
                                float _3518 = (fma(_2713, _3398.z, fma(_2712, _3398.y, _3398.x * _2711)) + _3398.w) / _3459;
                                float _3519 = (fma(_2713, _3413.z, fma(_2712, _3413.y, _3413.x * _2711)) + _3413.w) / _3459;
                                float _3523 = 1.0 - dot(vec2(_3518, _3519), vec2(_3518, _3519));
                                float _4639 = isnan(0.0) ? _3523 : (isnan(_3523) ? 0.0 : max(_3523, 0.0));
                                float _3524 = isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0));
                                float _3525 = _3524 * (((isnan(0.0) ? _3511 : (isnan(_3511) ? 0.0 : max(_3511, 0.0))) * _3501) / ((_3514 * 0.699999988079071044921875) + 1.0));
                                float _3537 = exp2(log2(1.0 / ((_3514 * 3.5) + 5.0)) * 0.25);
                                float _3538 = 1.0 - _1053;
                                float _3545 = sqrt(1.0 - ((1.0 - (_3538 * _3538)) * (1.0 - (_3537 * _3537))));
                                float _3546 = _3545 * _3545;
                                float _3547 = _3546 * _3546;
                                float _3548 = _3494 - _2997;
                                float _3549 = _3495 - _2998;
                                float _3550 = _3496 - _2999;
                                float _3554 = inversesqrt(dot(vec3(_3548, _3549, _3550), vec3(_3548, _3549, _3550)));
                                float _3558 = dot(vec3(_978, _981, _984), vec3((-0.0) - _2997, (-0.0) - _2998, (-0.0) - _2999));
                                float _4650 = isnan(0.0) ? _3558 : (isnan(_3558) ? 0.0 : max(_3558, 0.0));
                                float _3561 = isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0));
                                float _3562 = dot(vec3(_978, _981, _984), vec3(_3554 * _3548, _3554 * _3549, _3554 * _3550));
                                float _4661 = isnan(0.0) ? _3562 : (isnan(_3562) ? 0.0 : max(_3562, 0.0));
                                float _3565 = isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0));
                                float _3569 = ((_3565 * _3565) * (_3547 + (-1.0))) + 1.0;
                                float _3570 = _3507 * _3546;
                                float _3571 = _3570 * _3570;
                                float _3577 = ((1.0 - _3571) * dot(vec3(_978, _981, _984), vec3(_3494, _3495, _3496))) + _3571;
                                float _4672 = isnan(0.0) ? _3577 : (isnan(_3577) ? 0.0 : max(_3577, 0.0));
                                float _3578 = isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0));
                                float _3579 = 1.0 - _3546;
                                float _3589 = (0.5 / (((_3578 * ((_3561 * _3579) + _3546)) + 9.9999999392252902907785028219223e-09) + (((_3578 * _3579) + _3546) * _3561))) * _3578;
                                float _4683 = isnan(0.0) ? _3589 : (isnan(_3589) ? 0.0 : max(_3589, 0.0));
                                float _3599 = (_3524 * _3501) * (((_3547 * 3.1415927410125732421875) * (isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0)))) / ((_3569 * _3569) * ((_3514 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3599 * _3383.x;
                                frontier_phi_73_pred_1 = _3599 * _3383.y;
                                frontier_phi_73_pred_2 = _3525 * _3371.z;
                                frontier_phi_73_pred_3 = _3525 * _3371.y;
                                frontier_phi_73_pred_4 = _3525 * _3371.x;
                                frontier_phi_73_pred_5 = _3599 * _3383.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3603 = frontier_phi_73_pred;
                            _3604 = frontier_phi_73_pred_1;
                            _3608 = frontier_phi_73_pred_2;
                            _3607 = frontier_phi_73_pred_3;
                            _3606 = frontier_phi_73_pred_4;
                            _3605 = frontier_phi_73_pred_5;
                            _3313 = _3606 + _3326;
                            _3314 = _3607 + _3327;
                            _3315 = _3608 + _3328;
                            _3310 = _3603 + _3323;
                            _3311 = _3604 + _3324;
                            _3312 = _3605 + _3325;
                            if (_3330 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3323 = _3310;
                                _3324 = _3311;
                                _3325 = _3312;
                                _3326 = _3313;
                                _3327 = _3314;
                                _3328 = _3315;
                                _3329 = _3330;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3313;
                        frontier_phi_67_pred_1 = _3314;
                        frontier_phi_67_pred_2 = _3315;
                        frontier_phi_67_pred_3 = _3312;
                        frontier_phi_67_pred_4 = _3311;
                        frontier_phi_67_pred_5 = _3310;
                    }
                    _2978 = frontier_phi_67_pred;
                    _2980 = frontier_phi_67_pred_1;
                    _2982 = frontier_phi_67_pred_2;
                    _2976 = frontier_phi_67_pred_3;
                    _2974 = frontier_phi_67_pred_4;
                    _2972 = frontier_phi_67_pred_5;
                    uint _3117 = _3116 + 1u;
                    if (_3117 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3110 = _2972;
                        _3111 = _2974;
                        _3112 = _2976;
                        _3113 = _2978;
                        _3114 = _2980;
                        _3115 = _2982;
                        _3116 = _3117;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2980;
                frontier_phi_55_56_ladder_1 = _2982;
                frontier_phi_55_56_ladder_2 = _2978;
                frontier_phi_55_56_ladder_3 = _2976;
                frontier_phi_55_56_ladder_4 = _2974;
                frontier_phi_55_56_ladder_5 = _2972;
            }
            else
            {
                frontier_phi_55_56_ladder = _2866;
                frontier_phi_55_56_ladder_1 = _2868;
                frontier_phi_55_56_ladder_2 = _2864;
                frontier_phi_55_56_ladder_3 = _2862;
                frontier_phi_55_56_ladder_4 = _2860;
                frontier_phi_55_56_ladder_5 = _2858;
            }
            _2971 = frontier_phi_55_56_ladder_5;
            _2973 = frontier_phi_55_56_ladder_4;
            _2975 = frontier_phi_55_56_ladder_3;
            _2977 = frontier_phi_55_56_ladder_2;
            _2979 = frontier_phi_55_56_ladder;
            _2981 = frontier_phi_55_56_ladder_1;
        }
        float _2986 = isnan(1.0) ? _1037 : (isnan(_1037) ? 1.0 : min(_1037, 1.0));
        _2770 = (_2986 * _2977) + _2206;
        _2772 = (_2986 * _2979) + _2208;
        _2774 = (_2986 * _2981) + _2210;
        _2776 = ((_2971 * _1021) * _2986) + _2551;
        _2778 = ((_2973 * _1023) * _2986) + _2553;
        _2780 = ((_2975 * _1024) * _2986) + _2555;
    }
    else
    {
        _2770 = _2206;
        _2772 = _2208;
        _2774 = _2210;
        _2776 = _2551;
        _2778 = _2553;
        _2780 = _2555;
    }
    float _4699 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
    float _4710 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
    float _4721 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
    uint _2800 = _257 + 6u;
    float _2808 = _959 / cbSceneParam._m0[86u].x;
    float _2809 = _960 / cbSceneParam._m0[86u].y;
    vec4 _2823 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2808, _2809, (log2((isnan(cbSceneParam._m0[77u].w) ? _894 : (isnan(_894) ? cbSceneParam._m0[77u].w : min(_894, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2825 = _2823.x;
    float _2826 = _2823.y;
    float _2827 = _2823.z;
    float _2828 = _2823.w;
    float _2921;
    float _2923;
    float _2925;
    float _2927;
    if (_894 > cbSceneParam._m0[78u].w)
    {
        float _2883 = isnan(_894) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _894 : min(cbSceneParam._m0[80u].w, _894));
        float _2884 = _2883 / _894;
        float _2895 = _2884 * _944;
        float _2896 = _945 * _2884;
        float _2897 = (-0.0) - _2896;
        float _2899 = _2884 * _946;
        float _2901 = (cbSceneParam._m0[77u].w * _2897) / _2883;
        float _2902 = _2901 + cbSceneParam._m0[79u].w;
        float _2903 = cbSceneParam._m0[79u].w - _2896;
        float _2909 = sqrt(((_2895 * _2895) + (_2896 * _2896)) + (_2899 * _2899));
        float _2912 = (1.0 - (cbSceneParam._m0[77u].w / _2883)) * _2909;
        float _2917 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2919 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3072;
        if (abs((_2897 - _2901) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3072 = ((((_2902 > 0.0) ? exp2(_2917 * _2902) : (2.0 - exp2(_2919 * _2902))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2912;
        }
        else
        {
            float _3032 = 1.0 / cbSceneParam._m0[80u].x;
            float _3033 = isnan(_2903) ? _2902 : (isnan(_2902) ? _2903 : max(_2902, _2903));
            float _3034 = isnan(_2903) ? _2902 : (isnan(_2902) ? _2903 : min(_2902, _2903));
            float _3043 = isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : min(_3033, 0.0));
            float _3044 = isnan(0.0) ? _3034 : (isnan(_3034) ? 0.0 : min(_3034, 0.0));
            _3072 = ((abs(_2909 / _2897) * cbSceneParam._m0[80u].y) * ((((_3043 - _3044) * 2.0) - ((exp2(_2917 * (isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : max(_3033, 0.0)))) - exp2(_2917 * (isnan(0.0) ? _3034 : (isnan(_3034) ? 0.0 : max(_3034, 0.0))))) * _3032)) - ((exp2(_2919 * _3043) - exp2(_2919 * _3044)) * _3032))) + (_2912 * cbSceneParam._m0[80u].z);
        }
        vec4 _3074 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2808, _2809, 1.0), 0.0);
        float _3083 = exp2((_3072 * (-1.44269502162933349609375)) * (1.0 - _3074.w));
        float _3084 = log2(_3083);
        float _3100 = log2(_2828);
        _2921 = (exp2(_3100 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3084 * cbSceneParam._m0[78u].x)) * _3074.x) / cbSceneParam._m0[78u].x)) + _2825;
        _2923 = (exp2(_3100 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3084 * cbSceneParam._m0[78u].y)) * _3074.y) / cbSceneParam._m0[78u].y)) + _2826;
        _2925 = (exp2(_3100 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3084 * cbSceneParam._m0[78u].z)) * _3074.z) / cbSceneParam._m0[78u].z)) + _2827;
        _2927 = _3083 * _2828;
    }
    else
    {
        _2921 = _2825;
        _2923 = _2826;
        _2925 = _2827;
        _2927 = _2828;
    }
    float _2939 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2940 = _2939 == 3.0;
    float _2941 = log2(_2927);
    float _2948 = exp2(_2941 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0))) * (_2770 + ((isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0))) * _1037))) + ((_2776 + ((isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0))) * _1844)) * cbPerFrame._m0[3u].x));
    float _2949 = exp2(_2941 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0))) * (_2772 + ((isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0))) * _1037))) + ((_2778 + ((isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0))) * _1844)) * cbPerFrame._m0[3u].x));
    float _2950 = exp2(_2941 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0))) * (_2774 + ((isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0))) * _1037))) + ((_2780 + ((isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0))) * _1844)) * cbPerFrame._m0[3u].x));
    float _2959 = (_2939 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2959 * (_2940 ? _2948 : (_2948 + (cbSceneParam._m0[72u].w * _2921)));
    SV_Target.y = _2959 * (_2940 ? _2949 : (_2949 + (cbSceneParam._m0[72u].w * _2923)));
    SV_Target.z = _2959 * (_2940 ? _2950 : (_2950 + (cbSceneParam._m0[72u].w * _2925)));
    SV_Target.w = cbInstanceData._m0[_2800].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2800].w;
}


