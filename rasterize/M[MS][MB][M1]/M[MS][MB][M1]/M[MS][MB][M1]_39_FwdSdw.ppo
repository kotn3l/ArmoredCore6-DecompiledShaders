#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1001;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _198 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _199 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _200 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _206 = inversesqrt(dot(vec3(_198, _199, _200), vec3(_198, _199, _200)));
    float _213 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _220 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _226 = uint(roundEven(NORMAL.w)) * 13u;
    uint _232 = _226 + 1u;
    uint _236 = _226 + 2u;
    float _245 = sqrt(((cbInstanceData._m0[_232].x * cbInstanceData._m0[_232].x) + (cbInstanceData._m0[_226].x * cbInstanceData._m0[_226].x)) + (cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x));
    float _246 = _245 * TEXCOORD.z;
    float _247 = _245 * TEXCOORD.w;
    vec4 _266 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _272 = _266.x * cbMtdParam._m0[9u].x;
    float _273 = _266.y * cbMtdParam._m0[9u].y;
    float _274 = _266.z * cbMtdParam._m0[9u].z;
    vec4 _293 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _246) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _247) + cbTextureTilingScale._m0[14u].w));
    vec4 _313 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _317 = _313.z;
    float _322 = (_313.x * 2.0) + (-1.0);
    float _324 = (_313.y * 2.0) + (-1.0);
    float _325 = dot(vec2(_322, _324), vec2(_322, _324));
    float _3613 = isnan(0.0) ? _325 : (isnan(_325) ? 0.0 : max(_325, 0.0));
    float _331 = sqrt(1.0 - (isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0))));
    vec4 _348 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _246) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _247) + cbTextureTilingScale._m0[11u].w));
    float _350 = _348.x;
    float _351 = 1.0 - _350;
    float _367 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_350 - _351) * cbMtdParam._m0[24u].z) + _351) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3624 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    float _368 = isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0));
    float _375 = (_368 * ((_293.x * cbMtdParam._m0[18u].x) - _272)) + _272;
    float _376 = (_368 * ((_293.y * cbMtdParam._m0[18u].y) - _273)) + _273;
    float _377 = (_368 * ((_293.z * cbMtdParam._m0[18u].z) - _274)) + _274;
    vec4 _390 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _392 = _390.x;
    float _394 = _392 - (_392 * _368);
    vec4 _407 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _246) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _247) + cbTextureTilingScale._m0[15u].w));
    float _414 = (_407.x * 2.0) + (-1.0);
    float _415 = (_407.y * 2.0) + (-1.0);
    float _416 = dot(vec2(_414, _415), vec2(_414, _415));
    float _3635 = isnan(0.0) ? _416 : (isnan(_416) ? 0.0 : max(_416, 0.0));
    float _424 = (_368 * (_407.z - _317)) + _317;
    float _436 = (((_414 - _322) + (cbMtdParam._m0[21u].x * _322)) * _368) + _322;
    float _437 = (((_415 - _324) + (cbMtdParam._m0[21u].x * _324)) * _368) + _324;
    float _438 = (_368 * (sqrt(1.0 - (isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0)))) - _331)) + _331;
    float _443 = cbMtdParam._m0[22u].x + _313.w;
    float _446 = fma(_438, _213 * NORMAL.x, fma(_437, _220 * TANGENT.x, (_206 * _198) * _436));
    float _449 = fma(_438, _213 * NORMAL.y, fma(_437, _220 * TANGENT.y, (_206 * _199) * _436));
    float _452 = fma(_438, _213 * NORMAL.z, fma(_437, _220 * TANGENT.z, (_206 * _200) * _436));
    float _456 = inversesqrt(dot(vec3(_446, _449, _452), vec3(_446, _449, _452)));
    float _457 = _456 * _446;
    float _458 = _456 * _449;
    float _459 = _456 * _452;
    float _3646 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _460 = isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0));
    float _3657 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _3668 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _3679 = isnan(0.0) ? _376 : (isnan(_376) ? 0.0 : max(_376, 0.0));
    float _3690 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _3701 = isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0));
    float _465 = isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0));
    float _479 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _520 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _530 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _520);
    float _531 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _520);
    float _532 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _520);
    float _536 = inversesqrt(dot(vec3(_530, _531, _532), vec3(_530, _531, _532)));
    float _537 = _530 * _536;
    float _538 = _531 * _536;
    float _539 = _532 * _536;
    float _545 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _546 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _567 = fma(_459, cbSceneParam._m0[5u].z, fma(_458, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _457));
    float _570 = fma(_459, cbSceneParam._m0[6u].z, fma(_458, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _457));
    float _573 = fma(_459, cbSceneParam._m0[7u].z, fma(_458, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _457));
    uint _587 = (_226 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _593 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0)))) * cbInstanceData._m0[_587].x;
    float _594 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0)))) * cbInstanceData._m0[_587].y;
    float _595 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0)))) * cbInstanceData._m0[_587].z;
    float _3712 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
    float _596 = isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0));
    float _3723 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _597 = isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0));
    float _3734 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _598 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
    float _599 = 1.0 - _465;
    float _600 = _596 * _599;
    float _601 = _597 * _599;
    float _602 = _598 * _599;
    float _607 = (_596 + (-0.039999999105930328369140625)) * _465;
    float _608 = (_597 + (-0.039999999105930328369140625)) * _465;
    float _609 = (_598 + (-0.039999999105930328369140625)) * _465;
    float _610 = _607 + 0.039999999105930328369140625;
    float _612 = _608 + 0.039999999105930328369140625;
    float _613 = _609 + 0.039999999105930328369140625;
    vec4 _622 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _545, cbSceneParam._m0[86u].y * _546));
    float _626 = ((isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0))) * TEXCOORD_5.w) * _622.x;
    float _627 = dot(vec3(_457, _458, _459), vec3(_537, _538, _539));
    float _630 = _627 * 2.0;
    float _634 = (_630 * _457) - _537;
    float _635 = (_630 * _458) - _538;
    float _636 = (_630 * _459) - _539;
    float _640 = abs(dot(vec3(_537, _538, _539), vec3(_457, _458, _459)));
    float _3745 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _642 = sqrt(_460);
    float _655 = exp2((_642 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_642 * 3.0));
    float _661 = (1.0 - _655) * ((_642 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _662 = _655 * _642;
    float _690 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _694 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _698 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1000;
    float _1002;
    float _1003;
    float _1004;
    float _1005;
    float _1006;
    float _1007;
    float _1008;
    float _1009;
    float _1010;
    float _1011;
    float _1012;
    float _1013;
    float _1014;
    float _1015;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _725 = fma(_698, cbModelParam._m0[26u].z, fma(_694, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _690));
        float _729 = fma(_698, cbModelParam._m0[27u].z, fma(_694, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _690));
        float _733 = fma(_698, cbModelParam._m0[28u].z, fma(_694, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _690));
        float _758 = _690 + _457;
        float _759 = _694 + _458;
        float _760 = _698 + _459;
        float _770 = fma(_760, cbModelParam._m0[26u].z, fma(_759, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _758)) - _725;
        float _771 = fma(_760, cbModelParam._m0[27u].z, fma(_759, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _758)) - _729;
        float _772 = fma(_760, cbModelParam._m0[28u].z, fma(_759, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _758)) - _733;
        float _776 = inversesqrt(dot(vec3(_770, _771, _772), vec3(_770, _771, _772)));
        float _789 = ((_776 * _770) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_725 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _790 = ((_776 * _771) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_729 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _791 = ((_776 * _772) / cbModelParam._m0[34u].z) + ((((((_733 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _794 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_789, _790, _791), 0.0);
        vec4 _801 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_789, _790, _791), 0.0);
        vec4 _808 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_789, _790, _791), 0.0);
        vec4 _815 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_789, _790, _791), 0.0);
        float _828 = exp2((_794.w + (-0.5)) * 20.0) * 2.0;
        float _829 = _828 * (_794.x + (-0.5));
        float _830 = _828 * (_794.y + (-0.5));
        float _831 = _828 * (_794.z + (-0.5));
        float _838 = exp2((_801.w + (-0.5)) * 20.0) * 2.0;
        float _839 = _838 * (_801.x + (-0.5));
        float _840 = _838 * (_801.y + (-0.5));
        float _841 = _838 * (_801.z + (-0.5));
        float _848 = exp2((_808.w + (-0.5)) * 20.0) * 2.0;
        float _849 = _848 * (_808.x + (-0.5));
        float _850 = _848 * (_808.y + (-0.5));
        float _851 = _848 * (_808.z + (-0.5));
        float _858 = exp2((_815.w + (-0.5)) * 20.0) * 2.0;
        float _859 = _858 * (_815.x + (-0.5));
        float _860 = _858 * (_815.y + (-0.5));
        float _861 = _858 * (_815.z + (-0.5));
        float _862 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
        float _863 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
        float _864 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
        float _865 = _829 * 0.5;
        float _866 = _839 * 0.5;
        float _867 = _849 * 0.5;
        float _868 = dot(vec3(_865, _866, _867), vec3(_865, _866, _867));
        float _873 = (_868 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_868);
        float _882 = (dot(vec3(_457, _458, _459), vec3(_873 * _865, _873 * _866, _873 * _867)) + 1.0) * 0.5;
        float _3771 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
        float _892 = sqrt(((_866 * _866) + (_865 * _865)) + (_867 * _867)) / (_862 + 9.9999997473787516355514526367188e-06);
        float _3782 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
        float _893 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
        float _894 = _893 * 2.0;
        float _898 = (1.0 - _893) / (_893 + 1.0);
        float _3793 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
        float _899 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
        float _908 = ((((1.0 - _899) * (_894 + 2.0)) * exp2(log2(isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0))) * (_894 + 1.0))) + _899) * _862;
        float _909 = _830 * 0.5;
        float _910 = _840 * 0.5;
        float _911 = _850 * 0.5;
        float _912 = dot(vec3(_909, _910, _911), vec3(_909, _910, _911));
        float _917 = (_912 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_912);
        float _925 = (dot(vec3(_457, _458, _459), vec3(_917 * _909, _917 * _910, _917 * _911)) + 1.0) * 0.5;
        float _3804 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
        float _934 = sqrt(((_910 * _910) + (_909 * _909)) + (_911 * _911)) / (_863 + 9.9999997473787516355514526367188e-06);
        float _3815 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
        float _935 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
        float _936 = _935 * 2.0;
        float _940 = (1.0 - _935) / (_935 + 1.0);
        float _3826 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _941 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
        float _950 = ((((1.0 - _941) * (_936 + 2.0)) * exp2(log2(isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0))) * (_936 + 1.0))) + _941) * _863;
        float _951 = _831 * 0.5;
        float _952 = _841 * 0.5;
        float _953 = _851 * 0.5;
        float _954 = dot(vec3(_951, _952, _953), vec3(_951, _952, _953));
        float _959 = (_954 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_954);
        float _967 = (dot(vec3(_457, _458, _459), vec3(_959 * _951, _959 * _952, _959 * _953)) + 1.0) * 0.5;
        float _3837 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
        float _976 = sqrt(((_952 * _952) + (_951 * _951)) + (_953 * _953)) / (_864 + 9.9999997473787516355514526367188e-06);
        float _3848 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        float _977 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
        float _978 = _977 * 2.0;
        float _982 = (1.0 - _977) / (_977 + 1.0);
        float _3859 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _983 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
        float _992 = ((((1.0 - _983) * (_978 + 2.0)) * exp2(log2(isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0))) * (_978 + 1.0))) + _983) * _864;
        _1000 = _831;
        _1002 = _830;
        _1003 = _829;
        _1004 = _841;
        _1005 = _840;
        _1006 = _839;
        _1007 = _851;
        _1008 = _850;
        _1009 = _849;
        _1010 = _864;
        _1011 = _863;
        _1012 = _862;
        _1013 = cbModelParam._m0[36u].z * (isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0)));
        _1014 = cbModelParam._m0[36u].z * (isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0)));
        _1015 = cbModelParam._m0[36u].z * (isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0)));
    }
    else
    {
        _1000 = _1001;
        _1002 = _1001;
        _1003 = _1001;
        _1004 = _1001;
        _1005 = _1001;
        _1006 = _1001;
        _1007 = _1001;
        _1008 = _1001;
        _1009 = _1001;
        _1010 = _1001;
        _1011 = _1001;
        _1012 = _1001;
        _1013 = 0.0;
        _1014 = 0.0;
        _1015 = 0.0;
    }
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1040 = fma(_698, cbModelParam._m0[30u].z, fma(_694, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _690));
        float _1044 = fma(_698, cbModelParam._m0[31u].z, fma(_694, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _690));
        float _1048 = fma(_698, cbModelParam._m0[32u].z, fma(_694, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _690));
        float _1071 = _690 + _457;
        float _1072 = _694 + _458;
        float _1073 = _698 + _459;
        float _1083 = fma(_1073, cbModelParam._m0[30u].z, fma(_1072, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1071)) - _1040;
        float _1084 = fma(_1073, cbModelParam._m0[31u].z, fma(_1072, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1071)) - _1044;
        float _1085 = fma(_1073, cbModelParam._m0[32u].z, fma(_1072, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1071)) - _1048;
        float _1089 = inversesqrt(dot(vec3(_1083, _1084, _1085), vec3(_1083, _1084, _1085)));
        float _1102 = ((_1089 * _1083) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1040 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1103 = ((_1089 * _1084) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1044 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1104 = ((_1089 * _1085) / cbModelParam._m0[35u].z) + ((((((_1048 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1106 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1102, _1103, _1104), 0.0);
        vec4 _1113 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1102, _1103, _1104), 0.0);
        vec4 _1120 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1102, _1103, _1104), 0.0);
        vec4 _1127 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1102, _1103, _1104), 0.0);
        float _1139 = exp2((_1106.w + (-0.5)) * 20.0) * 2.0;
        float _1140 = _1139 * (_1106.x + (-0.5));
        float _1141 = _1139 * (_1106.y + (-0.5));
        float _1142 = _1139 * (_1106.z + (-0.5));
        float _1149 = exp2((_1113.w + (-0.5)) * 20.0) * 2.0;
        float _1150 = _1149 * (_1113.x + (-0.5));
        float _1151 = _1149 * (_1113.y + (-0.5));
        float _1152 = _1149 * (_1113.z + (-0.5));
        float _1159 = exp2((_1120.w + (-0.5)) * 20.0) * 2.0;
        float _1160 = _1159 * (_1120.x + (-0.5));
        float _1161 = _1159 * (_1120.y + (-0.5));
        float _1162 = _1159 * (_1120.z + (-0.5));
        float _1169 = exp2((_1127.w + (-0.5)) * 20.0) * 2.0;
        float _1170 = _1169 * (_1127.x + (-0.5));
        float _1171 = _1169 * (_1127.y + (-0.5));
        float _1172 = _1169 * (_1127.z + (-0.5));
        float _1173 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1174 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1175 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1176 = _1140 * 0.5;
        float _1177 = _1150 * 0.5;
        float _1178 = _1160 * 0.5;
        float _1179 = dot(vec3(_1176, _1177, _1178), vec3(_1176, _1177, _1178));
        float _1184 = (_1179 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1179);
        float _1192 = (dot(vec3(_457, _458, _459), vec3(_1184 * _1176, _1184 * _1177, _1184 * _1178)) + 1.0) * 0.5;
        float _3900 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1201 = sqrt(((_1177 * _1177) + (_1176 * _1176)) + (_1178 * _1178)) / (_1173 + 9.9999997473787516355514526367188e-06);
        float _3911 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1202 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
        float _1203 = _1202 * 2.0;
        float _1207 = (1.0 - _1202) / (_1202 + 1.0);
        float _3922 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1208 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
        float _1217 = ((((1.0 - _1208) * (_1203 + 2.0)) * exp2(log2(isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0))) * (_1203 + 1.0))) + _1208) * _1173;
        float _1218 = _1141 * 0.5;
        float _1219 = _1151 * 0.5;
        float _1220 = _1161 * 0.5;
        float _1221 = dot(vec3(_1218, _1219, _1220), vec3(_1218, _1219, _1220));
        float _1226 = (_1221 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1221);
        float _1234 = (dot(vec3(_457, _458, _459), vec3(_1226 * _1218, _1226 * _1219, _1226 * _1220)) + 1.0) * 0.5;
        float _3933 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1243 = sqrt(((_1219 * _1219) + (_1218 * _1218)) + (_1220 * _1220)) / (_1174 + 9.9999997473787516355514526367188e-06);
        float _3944 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1244 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
        float _1245 = _1244 * 2.0;
        float _1249 = (1.0 - _1244) / (_1244 + 1.0);
        float _3955 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1250 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
        float _1259 = ((((1.0 - _1250) * (_1245 + 2.0)) * exp2(log2(isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0))) * (_1245 + 1.0))) + _1250) * _1174;
        float _1260 = _1142 * 0.5;
        float _1261 = _1152 * 0.5;
        float _1262 = _1162 * 0.5;
        float _1263 = dot(vec3(_1260, _1261, _1262), vec3(_1260, _1261, _1262));
        float _1268 = (_1263 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1263);
        float _1276 = (dot(vec3(_457, _458, _459), vec3(_1268 * _1260, _1268 * _1261, _1268 * _1262)) + 1.0) * 0.5;
        float _3966 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1285 = sqrt(((_1261 * _1261) + (_1260 * _1260)) + (_1262 * _1262)) / (_1175 + 9.9999997473787516355514526367188e-06);
        float _3977 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1286 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
        float _1287 = _1286 * 2.0;
        float _1291 = (1.0 - _1286) / (_1286 + 1.0);
        float _3988 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1292 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
        float _1301 = ((((1.0 - _1292) * (_1287 + 2.0)) * exp2(log2(isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0))) * (_1287 + 1.0))) + _1292) * _1175;
        _1309 = _1142;
        _1310 = _1141;
        _1311 = _1140;
        _1312 = _1152;
        _1313 = _1151;
        _1314 = _1150;
        _1315 = _1162;
        _1316 = _1161;
        _1317 = _1160;
        _1318 = _1175;
        _1319 = _1174;
        _1320 = _1173;
        _1321 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0)));
        _1322 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0)));
        _1323 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0)));
    }
    else
    {
        _1309 = _1001;
        _1310 = _1001;
        _1311 = _1001;
        _1312 = _1001;
        _1313 = _1001;
        _1314 = _1001;
        _1315 = _1001;
        _1316 = _1001;
        _1317 = _1001;
        _1318 = _1001;
        _1319 = _1001;
        _1320 = _1001;
        _1321 = 0.0;
        _1322 = 0.0;
        _1323 = 0.0;
    }
    float _1333 = (cbModelParam._m0[1u].x * (_1321 - _1013)) + _1013;
    float _1334 = (cbModelParam._m0[1u].x * (_1322 - _1014)) + _1014;
    float _1335 = (cbModelParam._m0[1u].x * (_1323 - _1015)) + _1015;
    float _1356 = fma(_1335, cbSceneParam._m0[89u].z, fma(_1334, cbSceneParam._m0[89u].y, _1333 * cbSceneParam._m0[89u].x));
    float _1359 = fma(_1335, cbSceneParam._m0[90u].z, fma(_1334, cbSceneParam._m0[90u].y, _1333 * cbSceneParam._m0[90u].x));
    float _1362 = fma(_1335, cbSceneParam._m0[91u].z, fma(_1334, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1333));
    float _1377 = _634 * 0.5;
    float _1378 = _635 * 0.5;
    float _1379 = _636 * 0.5;
    float _1380 = dot(vec4(_1377, _1378, _1379, 1.0), vec4(_1311, _1314, _1317, _1320));
    float _1383 = dot(vec4(_1377, _1378, _1379, 1.0), vec4(_1310, _1313, _1316, _1319));
    float _1386 = dot(vec4(_1377, _1378, _1379, 1.0), vec4(_1309, _1312, _1315, _1318));
    float _1420;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1393 = dot(vec4(_1377, _1378, _1379, 1.0), vec4(_1000, _1004, _1007, _1010));
        float _1397 = dot(vec4(_1377, _1378, _1379, 1.0), vec4(_1002, _1005, _1008, _1011));
        float _1401 = dot(vec4(_1377, _1378, _1379, 1.0), vec4(_1003, _1006, _1009, _1012));
        float _1408 = dot(vec4(cbModelParam._m0[39u]), vec4(_1377, _1378, _1379, 1.0));
        _1420 = dot(vec3(isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0)), isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0)), isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1408) ? 0.0 : (isnan(0.0) ? _1408 : max(0.0, _1408))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1420 = 1.0;
    }
    float _1431;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1422 = dot(vec4(cbModelParam._m0[40u]), vec4(_1377, _1378, _1379, 1.0));
        _1431 = dot(vec3(isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0)), isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0)), isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1422) ? 0.0 : (isnan(0.0) ? _1422 : max(0.0, _1422))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1431 = 1.0;
    }
    float _1435 = (_1431 * cbModelParam._m0[1u].x) + (_1420 * (1.0 - cbModelParam._m0[1u].x));
    float _1445 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _460);
    float _1446 = isnan(_1445) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1445 : min(cbModelParam._m0[25u].z, _1445));
    float _1526;
    float _1528;
    float _1530;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1493 = fma(_698, cbModelParam._m0[13u].z, fma(_694, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _690)) + cbModelParam._m0[13u].w;
        float _1497 = fma(_698, cbModelParam._m0[14u].z, fma(_694, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _690)) + cbModelParam._m0[14u].w;
        float _1501 = fma(_698, cbModelParam._m0[15u].z, fma(_694, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _690)) + cbModelParam._m0[15u].w;
        float _1504 = fma(_636, cbModelParam._m0[13u].z, fma(_635, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _634));
        float _1507 = fma(_636, cbModelParam._m0[14u].z, fma(_635, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _634));
        float _1510 = fma(_636, cbModelParam._m0[15u].z, fma(_635, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _634));
        float _1538;
        if (_1504 > 0.0)
        {
            _1538 = abs((1.0 - _1493) / _1504);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1504 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1493 + 1.0) / _1504);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1538 = frontier_phi_14_12_ladder;
        }
        float _1710;
        if (_1507 > 0.0)
        {
            _1710 = abs((1.0 - _1497) / _1507);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1507 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1497 + 1.0) / _1507);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1710 = frontier_phi_23_19_ladder;
        }
        float _2006;
        if (_1510 > 0.0)
        {
            _2006 = abs((1.0 - _1501) / _1510);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1510 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1501 + 1.0) / _1510);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2006 = frontier_phi_35_30_ladder;
        }
        float _2008 = isnan(_1710) ? _1538 : (isnan(_1538) ? _1710 : min(_1538, _1710));
        float _2009 = isnan(_2006) ? _2008 : (isnan(_2008) ? _2006 : min(_2008, _2006));
        float _2013 = (_2009 * _1504) + _1493;
        float _2014 = (_2009 * _1507) + _1497;
        float _2015 = (_2009 * _1510) + _1501;
        float _2016 = _2009 * 9.9999997473787516355514526367188e-05;
        float _2018 = (-1.0) - _2016;
        float _2020 = _2016 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2015 > _2020) || ((_2015 < _2018) || ((_2014 > _2020) || ((_2014 < _2018) || ((_2013 < _2018) || (_2013 > _2020))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2160 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2015, cbModelParam._m0[9u].z, fma(_2014, cbModelParam._m0[9u].y, _2013 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2015, cbModelParam._m0[10u].z, fma(_2014, cbModelParam._m0[10u].y, _2013 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2015, cbModelParam._m0[11u].z, fma(_2014, cbModelParam._m0[11u].y, _2013 * cbModelParam._m0[11u].x))), _1446);
            frontier_phi_13_35_ladder = _2160.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2160.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2160.x * cbModelParam._m0[1u].y;
        }
        _1526 = frontier_phi_13_35_ladder_2;
        _1528 = frontier_phi_13_35_ladder_1;
        _1530 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1514 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_634, _635, _636), _1446);
        _1526 = _1514.x * cbModelParam._m0[1u].y;
        _1528 = _1514.y * cbModelParam._m0[1u].y;
        _1530 = _1514.z * cbModelParam._m0[1u].y;
    }
    float _1534 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _460);
    float _1535 = isnan(_1534) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1534 : min(cbModelParam._m0[25u].w, _1534));
    float _1625;
    float _1627;
    float _1629;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1589 = fma(_698, cbModelParam._m0[21u].z, fma(_694, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _690)) + cbModelParam._m0[21u].w;
        float _1593 = fma(_698, cbModelParam._m0[22u].z, fma(_694, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _690)) + cbModelParam._m0[22u].w;
        float _1597 = fma(_698, cbModelParam._m0[23u].z, fma(_694, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _690)) + cbModelParam._m0[23u].w;
        float _1600 = fma(_636, cbModelParam._m0[21u].z, fma(_635, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _634));
        float _1603 = fma(_636, cbModelParam._m0[22u].z, fma(_635, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _634));
        float _1606 = fma(_636, cbModelParam._m0[23u].z, fma(_635, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _634));
        float _1715;
        if (_1600 > 0.0)
        {
            _1715 = abs((1.0 - _1589) / _1600);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1600 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1589 + 1.0) / _1600);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1715 = frontier_phi_25_21_ladder;
        }
        float _2033;
        if (_1603 > 0.0)
        {
            _2033 = abs((1.0 - _1593) / _1603);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1603 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1593 + 1.0) / _1603);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2033 = frontier_phi_37_32_ladder;
        }
        float _2371;
        if (_1606 > 0.0)
        {
            _2371 = abs((1.0 - _1597) / _1606);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1606 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1597 + 1.0) / _1606);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2371 = frontier_phi_47_44_ladder;
        }
        float _2373 = isnan(_2033) ? _1715 : (isnan(_1715) ? _2033 : min(_1715, _2033));
        float _2374 = isnan(_2371) ? _2373 : (isnan(_2373) ? _2371 : min(_2373, _2371));
        float _2378 = (_2374 * _1600) + _1589;
        float _2379 = (_2374 * _1603) + _1593;
        float _2380 = (_2374 * _1606) + _1597;
        float _2381 = _2374 * 9.9999997473787516355514526367188e-05;
        float _2382 = (-1.0) - _2381;
        float _2384 = _2381 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2380 > _2384) || ((_2380 < _2382) || ((_2379 > _2384) || ((_2379 < _2382) || ((_2378 < _2382) || (_2378 > _2384))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2502 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2380, cbModelParam._m0[17u].z, fma(_2379, cbModelParam._m0[17u].y, _2378 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2380, cbModelParam._m0[18u].z, fma(_2379, cbModelParam._m0[18u].y, _2378 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2380, cbModelParam._m0[19u].z, fma(_2379, cbModelParam._m0[19u].y, _2378 * cbModelParam._m0[19u].x))), _1535);
            frontier_phi_22_47_ladder = _2502.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2502.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2502.x * cbModelParam._m0[1u].z;
        }
        _1625 = frontier_phi_22_47_ladder_2;
        _1627 = frontier_phi_22_47_ladder_1;
        _1629 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1609 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_634, _635, _636), _1535);
        _1625 = _1609.x * cbModelParam._m0[1u].z;
        _1627 = _1609.y * cbModelParam._m0[1u].z;
        _1629 = _1609.z * cbModelParam._m0[1u].z;
    }
    float _1642 = (((_661 * _610) + _662) * _626) * ((cbModelParam._m0[1u].w * (_1625 - _1526)) + _1526);
    float _1644 = (((_661 * _612) + _662) * _626) * ((cbModelParam._m0[1u].w * (_1627 - _1528)) + _1528);
    float _1646 = (((_661 * _613) + _662) * _626) * ((cbModelParam._m0[1u].w * (_1629 - _1530)) + _1530);
    float _1649 = fma(_1646, cbSceneParam._m0[89u].z, fma(_1644, cbSceneParam._m0[89u].y, _1642 * cbSceneParam._m0[89u].x));
    float _1652 = fma(_1646, cbSceneParam._m0[90u].z, fma(_1644, cbSceneParam._m0[90u].y, _1642 * cbSceneParam._m0[90u].x));
    float _1655 = fma(_1646, cbSceneParam._m0[91u].z, fma(_1644, cbSceneParam._m0[91u].y, _1642 * cbSceneParam._m0[91u].x));
    float _1689 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1693 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1697 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1701 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1702 = _1689 / _1701;
    float _1703 = _1693 / _1701;
    float _1704 = _1697 / _1701;
    float _1851;
    float _1852;
    float _1853;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1731 = ((uint(_1704 > cbSceneParam._m0[59u].y) + uint(_1704 > cbSceneParam._m0[59u].x)) + uint(_1704 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1732 = _1731 + 43u;
        uint _1740 = _1731 + 44u;
        uint _1748 = _1731 + 45u;
        uint _1756 = _1731 + 46u;
        float _1767 = fma(_1701, cbSceneParam._m0[_1732].w, fma(_1697, cbSceneParam._m0[_1732].z, fma(_1693, cbSceneParam._m0[_1732].y, _1689 * cbSceneParam._m0[_1732].x)));
        float _1771 = fma(_1701, cbSceneParam._m0[_1740].w, fma(_1697, cbSceneParam._m0[_1740].z, fma(_1693, cbSceneParam._m0[_1740].y, _1689 * cbSceneParam._m0[_1740].x)));
        float _1779 = fma(_1701, cbSceneParam._m0[_1756].w, fma(_1697, cbSceneParam._m0[_1756].z, fma(_1693, cbSceneParam._m0[_1756].y, _1689 * cbSceneParam._m0[_1756].x)));
        float _1784 = cbSceneParam._m0[33u].z * _1779;
        float _1786 = cbSceneParam._m0[33u].w * _1779;
        float _1789 = fma(_1701, cbSceneParam._m0[_1748].w, fma(_1697, cbSceneParam._m0[_1748].z, fma(_1693, cbSceneParam._m0[_1748].y, _1689 * cbSceneParam._m0[_1748].x))) / _1779;
        float _1837 = (cbSceneParam._m0[33u].x - sqrt(((_1703 * _1703) + (_1702 * _1702)) + (_1704 * _1704))) * cbSceneParam._m0[33u].y;
        float _4114 = isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0));
        float _1844 = (isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1784 + _1767) / _1779, (_1786 + _1771) / _1779), _1789), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1786 + _1767) / _1779, (_1771 - _1784) / _1779), _1789), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1767 - _1784) / _1779, (_1771 - _1786) / _1779), _1789), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1767 - _1786) / _1779, (_1784 + _1771) / _1779), _1789), 0.0)).x), vec4(0.25)));
        _1851 = 1.0 - (_1844 * cbSceneParam._m0[34u].x);
        _1852 = 1.0 - (_1844 * cbSceneParam._m0[34u].y);
        _1853 = 1.0 - (_1844 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1851 = 1.0;
        _1852 = 1.0;
        _1853 = 1.0;
    }
    float _1917;
    float _1919;
    float _1921;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1905 = fma(_1701, cbSceneParam._m0[63u].w, fma(_1697, cbSceneParam._m0[63u].z, fma(_1693, cbSceneParam._m0[63u].y, _1689 * cbSceneParam._m0[63u].x)));
        float _1906 = fma(_1701, cbSceneParam._m0[60u].w, fma(_1697, cbSceneParam._m0[60u].z, fma(_1693, cbSceneParam._m0[60u].y, _1689 * cbSceneParam._m0[60u].x))) / _1905;
        float _1907 = fma(_1701, cbSceneParam._m0[61u].w, fma(_1697, cbSceneParam._m0[61u].z, fma(_1693, cbSceneParam._m0[61u].y, _1689 * cbSceneParam._m0[61u].x))) / _1905;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1906 >= cbSceneParam._m0[64u].x) && (_1907 >= cbSceneParam._m0[64u].y)) && (_1906 <= cbSceneParam._m0[64u].z)) && (_1907 <= cbSceneParam._m0[64u].w))
        {
            float _2046 = fma(_1701, cbSceneParam._m0[62u].w, fma(_1697, cbSceneParam._m0[62u].z, fma(_1693, cbSceneParam._m0[62u].y, _1689 * cbSceneParam._m0[62u].x))) / _1905;
            float _2050 = isnan(cbSceneParam._m0[41u].w) ? _2046 : (isnan(_2046) ? cbSceneParam._m0[41u].w : max(_2046, cbSceneParam._m0[41u].w));
            float _2093 = (cbSceneParam._m0[33u].x - sqrt(((_1703 * _1703) + (_1702 * _1702)) + (_1704 * _1704))) * cbSceneParam._m0[33u].y;
            float _4130 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
            float _2100 = (isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1906, cbSceneParam._m0[33u].w + _1907), _2050), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1906, _1907 - cbSceneParam._m0[33u].z), _2050), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1906 - cbSceneParam._m0[33u].z, _1907 - cbSceneParam._m0[33u].w), _2050), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1906 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1907), _2050), 0.0)).x), vec4(0.25)));
            float _2104 = 1.0 - (_2100 * cbSceneParam._m0[34u].x);
            float _2105 = 1.0 - (_2100 * cbSceneParam._m0[34u].y);
            float _2106 = 1.0 - (_2100 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2106) ? _1853 : (isnan(_1853) ? _2106 : min(_1853, _2106));
            frontier_phi_34_33_ladder_1 = isnan(_2105) ? _1852 : (isnan(_1852) ? _2105 : min(_1852, _2105));
            frontier_phi_34_33_ladder_2 = isnan(_2104) ? _1851 : (isnan(_1851) ? _2104 : min(_1851, _2104));
        }
        else
        {
            frontier_phi_34_33_ladder = _1853;
            frontier_phi_34_33_ladder_1 = _1852;
            frontier_phi_34_33_ladder_2 = _1851;
        }
        _1917 = frontier_phi_34_33_ladder_2;
        _1919 = frontier_phi_34_33_ladder_1;
        _1921 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1917 = _1851;
        _1919 = _1852;
        _1921 = _1853;
    }
    uvec4 _1926 = floatBitsToUint(cbInstanceData._m0[_226 + 5u]);
    uint _1928 = _1926.x * 14u;
    uint _1929 = _1928 + 13u;
    float _1936 = _626 + (-1.0);
    float _1941 = (cbLight._m0[_1929].x * _1936) + 1.0;
    float _1942 = (cbLight._m0[_1929].y * _1936) + 1.0;
    float _1943 = (cbLight._m0[_1929].z * _1936) + 1.0;
    float _1944 = (cbLight._m0[_1929].w * _1936) + 1.0;
    uint _1945 = _1928 + 5u;
    float _1951 = isnan(1.0) ? _1942 : (isnan(_1942) ? 1.0 : min(_1942, 1.0));
    uint _1955 = _1928 + 4u;
    float _1965 = isnan(1.0) ? _1941 : (isnan(_1941) ? 1.0 : min(_1941, 1.0));
    uint _1969 = _1928 | 1u;
    float _1980 = dot(vec3(cbLight._m0[_1928].xyz), vec3(_457, _458, _459));
    float _1983 = dot(vec3(cbLight._m0[_1969].xyz), vec3(_457, _458, _459));
    float _4166 = isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0));
    float _4177 = isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0));
    float _1988 = (isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0))) * 0.3183098733425140380859375;
    float _1990 = (isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0))) * 0.3183098733425140380859375;
    float _1997 = ((cbLight._m0[_1945].x * _1951) * _1990) + (((cbLight._m0[_1955].x * _1917) * _1965) * _1988);
    float _1998 = ((_1951 * cbLight._m0[_1945].y) * _1990) + (((cbLight._m0[_1955].y * _1919) * _1965) * _1988);
    float _1999 = ((_1951 * cbLight._m0[_1945].z) * _1990) + (((cbLight._m0[_1955].z * _1921) * _1965) * _1988);
    uvec4 _2003 = floatBitsToUint(cbLight._m0[_1928 + 12u]);
    bool _2005 = _2003.x == 0u;
    float _2107;
    float _2109;
    float _2111;
    if (_2005)
    {
        _2107 = _1997;
        _2109 = _1998;
        _2111 = _1999;
    }
    else
    {
        uint _2115 = _1928 + 6u;
        float _2131 = (dot(vec3(cbLight._m0[_1928 + 2u].xyz), vec3(_457, _458, _459)) * 0.5) + 0.5;
        float _2132 = _2131 * _2131;
        float _4188 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
        float _2133 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _2134 = isnan(1.0) ? _1943 : (isnan(_1943) ? 1.0 : min(_1943, 1.0));
        _2107 = (((cbLight._m0[_2115].x * 0.3183098733425140380859375) * _2133) * _2134) + _1997;
        _2109 = (((cbLight._m0[_2115].y * 0.3183098733425140380859375) * _2133) * _2134) + _1998;
        _2111 = (((cbLight._m0[_2115].z * 0.3183098733425140380859375) * _2133) * _2134) + _1999;
    }
    bool _2114 = _2003.y == 0u;
    float _2169;
    float _2171;
    float _2173;
    if (_2114)
    {
        _2169 = _2107;
        _2171 = _2109;
        _2173 = _2111;
    }
    else
    {
        uint _2342 = _1928 + 7u;
        float _2358 = (dot(vec3(cbLight._m0[_1928 + 3u].xyz), vec3(_457, _458, _459)) * 0.5) + 0.5;
        float _2359 = _2358 * _2358;
        float _4204 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0));
        float _2360 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
        float _2361 = isnan(1.0) ? _1944 : (isnan(_1944) ? 1.0 : min(_1944, 1.0));
        _2169 = (((cbLight._m0[_2342].x * 0.3183098733425140380859375) * _2360) * _2361) + _2107;
        _2171 = (((cbLight._m0[_2342].y * 0.3183098733425140380859375) * _2360) * _2361) + _2109;
        _2173 = (((cbLight._m0[_2342].z * 0.3183098733425140380859375) * _2360) * _2361) + _2111;
    }
    uint _2176 = _1928 + 8u;
    float _2189 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1928].w)) * _460) * 0.949999988079071044921875);
    float _2190 = _2189 * _2189;
    float _2191 = cbLight._m0[_1928].x + _537;
    float _2192 = cbLight._m0[_1928].y + _538;
    float _2193 = cbLight._m0[_1928].z + _539;
    float _2197 = inversesqrt(dot(vec3(_2191, _2192, _2193), vec3(_2191, _2192, _2193)));
    float _2198 = _2197 * _2191;
    float _2199 = _2197 * _2192;
    float _2200 = _2197 * _2193;
    float _2201 = dot(vec3(_457, _458, _459), vec3(cbLight._m0[_1928].xyz));
    float _4220 = isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0));
    float _2204 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
    float _4231 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _2205 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
    float _2206 = dot(vec3(_457, _458, _459), vec3(_2198, _2199, _2200));
    float _4242 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
    float _2209 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
    float _2210 = dot(vec3(cbLight._m0[_1928].xyz), vec3(_2198, _2199, _2200));
    float _4253 = isnan(0.0) ? _2210 : (isnan(_2210) ? 0.0 : max(_2210, 0.0));
    float _2214 = _2190 * _2190;
    float _2218 = ((_2209 * _2209) * (_2214 + (-1.0))) + 1.0;
    float _2226 = exp2(log2(1.0 - (isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0)))) * 5.0);
    float _2227 = 0.959999978542327880859375 - _607;
    float _2229 = 0.959999978542327880859375 - _608;
    float _2230 = 0.959999978542327880859375 - _609;
    float _2237 = 1.0 - _2190;
    float _2248 = (0.5 / (((_2205 * ((_2204 * _2237) + _2190)) + 9.9999999392252902907785028219223e-09) + (((_2205 * _2237) + _2190) * _2204))) * _2204;
    float _4264 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
    float _2250 = (isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0))) * (_2214 / ((_2218 * _2218) * 3.141590118408203125));
    uint _2264 = _1928 + 9u;
    float _2275 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1969].w)) * _460) * 0.949999988079071044921875);
    float _2276 = _2275 * _2275;
    float _2277 = cbLight._m0[_1969].x + _537;
    float _2278 = cbLight._m0[_1969].y + _538;
    float _2279 = cbLight._m0[_1969].z + _539;
    float _2283 = inversesqrt(dot(vec3(_2277, _2278, _2279), vec3(_2277, _2278, _2279)));
    float _2284 = _2283 * _2277;
    float _2285 = _2283 * _2278;
    float _2286 = _2283 * _2279;
    float _2287 = dot(vec3(_457, _458, _459), vec3(cbLight._m0[_1969].xyz));
    float _4275 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
    float _2290 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
    float _2291 = dot(vec3(_457, _458, _459), vec3(_2284, _2285, _2286));
    float _4286 = isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0));
    float _2294 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
    float _2295 = dot(vec3(cbLight._m0[_1969].xyz), vec3(_2284, _2285, _2286));
    float _4297 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
    float _2299 = _2276 * _2276;
    float _2303 = ((_2294 * _2294) * (_2299 + (-1.0))) + 1.0;
    float _2310 = exp2(log2(1.0 - (isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0)))) * 5.0);
    float _2317 = 1.0 - _2276;
    float _2327 = (0.5 / (((_2205 * ((_2290 * _2317) + _2276)) + 9.9999999392252902907785028219223e-09) + (((_2205 * _2317) + _2276) * _2290))) * _2290;
    float _4308 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0));
    float _2329 = (isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0))) * (_2299 / ((_2303 * _2303) * 3.141590118408203125));
    float _2339 = (((((_2310 * _2227) + _610) * cbLight._m0[_2264].x) * _2329) * _1951) + ((((cbLight._m0[_2176].x * _1917) * ((_2226 * _2227) + _610)) * _2250) * _1965);
    float _2340 = (((((_2310 * _2229) + _612) * cbLight._m0[_2264].y) * _2329) * _1951) + ((((cbLight._m0[_2176].y * _1919) * ((_2226 * _2229) + _612)) * _2250) * _1965);
    float _2341 = (((((_2310 * _2230) + _613) * cbLight._m0[_2264].z) * _2329) * _1951) + ((((cbLight._m0[_2176].z * _1921) * ((_2226 * _2230) + _613)) * _2250) * _1965);
    float _2397;
    float _2399;
    float _2401;
    if (_2005)
    {
        _2397 = _2339;
        _2399 = _2340;
        _2401 = _2341;
    }
    else
    {
        uint _2403 = _1928 + 2u;
        uint _2407 = _1928 + 10u;
        float _2421 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2403].w)) * _460) * 0.949999988079071044921875);
        float _2422 = _2421 * _2421;
        float _2423 = cbLight._m0[_2403].x + _537;
        float _2424 = cbLight._m0[_2403].y + _538;
        float _2425 = cbLight._m0[_2403].z + _539;
        float _2429 = inversesqrt(dot(vec3(_2423, _2424, _2425), vec3(_2423, _2424, _2425)));
        float _2430 = _2429 * _2423;
        float _2431 = _2429 * _2424;
        float _2432 = _2429 * _2425;
        float _2433 = dot(vec3(_457, _458, _459), vec3(cbLight._m0[_2403].xyz));
        float _4319 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
        float _2436 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
        float _2437 = dot(vec3(_457, _458, _459), vec3(_2430, _2431, _2432));
        float _4330 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
        float _2440 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
        float _2441 = dot(vec3(cbLight._m0[_2403].xyz), vec3(_2430, _2431, _2432));
        float _4341 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
        float _2445 = _2422 * _2422;
        float _2449 = ((_2440 * _2440) * (_2445 + (-1.0))) + 1.0;
        float _2456 = exp2(log2(1.0 - (isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0)))) * 5.0);
        float _2463 = 1.0 - _2422;
        float _2473 = (0.5 / (((_2205 * ((_2436 * _2463) + _2422)) + 9.9999999392252902907785028219223e-09) + (((_2205 * _2463) + _2422) * _2436))) * _2436;
        float _4352 = isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0));
        float _2475 = (isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0))) * (_2445 / ((_2449 * _2449) * 3.141590118408203125));
        float _2476 = isnan(1.0) ? _1943 : (isnan(_1943) ? 1.0 : min(_1943, 1.0));
        _2397 = (((((_2456 * _2227) + _610) * cbLight._m0[_2407].x) * _2475) * _2476) + _2339;
        _2399 = (((((_2456 * _2229) + _612) * cbLight._m0[_2407].y) * _2475) * _2476) + _2340;
        _2401 = (((((_2456 * _2230) + _613) * cbLight._m0[_2407].z) * _2475) * _2476) + _2341;
    }
    float _2507;
    float _2509;
    float _2511;
    if (_2114)
    {
        _2507 = _2397;
        _2509 = _2399;
        _2511 = _2401;
    }
    else
    {
        uint _2518 = _1928 + 3u;
        uint _2522 = _1928 + 11u;
        float _2536 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2518].w)) * _460) * 0.949999988079071044921875);
        float _2537 = _2536 * _2536;
        float _2538 = cbLight._m0[_2518].x + _537;
        float _2539 = cbLight._m0[_2518].y + _538;
        float _2540 = cbLight._m0[_2518].z + _539;
        float _2544 = inversesqrt(dot(vec3(_2538, _2539, _2540), vec3(_2538, _2539, _2540)));
        float _2545 = _2544 * _2538;
        float _2546 = _2544 * _2539;
        float _2547 = _2544 * _2540;
        float _2548 = dot(vec3(_457, _458, _459), vec3(cbLight._m0[_2518].xyz));
        float _4368 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0));
        float _2551 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
        float _2552 = dot(vec3(_457, _458, _459), vec3(_2545, _2546, _2547));
        float _4379 = isnan(0.0) ? _2552 : (isnan(_2552) ? 0.0 : max(_2552, 0.0));
        float _2555 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
        float _2556 = dot(vec3(cbLight._m0[_2518].xyz), vec3(_2545, _2546, _2547));
        float _4390 = isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0));
        float _2560 = _2537 * _2537;
        float _2564 = ((_2555 * _2555) * (_2560 + (-1.0))) + 1.0;
        float _2571 = exp2(log2(1.0 - (isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0)))) * 5.0);
        float _2578 = 1.0 - _2537;
        float _2588 = (0.5 / (((_2205 * ((_2551 * _2578) + _2537)) + 9.9999999392252902907785028219223e-09) + (((_2205 * _2578) + _2537) * _2551))) * _2551;
        float _4401 = isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : max(_2588, 0.0));
        float _2590 = (isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0))) * (_2560 / ((_2564 * _2564) * 3.141590118408203125));
        float _2591 = isnan(1.0) ? _1944 : (isnan(_1944) ? 1.0 : min(_1944, 1.0));
        _2507 = (((((_2571 * _2227) + _610) * cbLight._m0[_2522].x) * _2590) * _2591) + _2397;
        _2509 = (((((_2571 * _2229) + _612) * cbLight._m0[_2522].y) * _2590) * _2591) + _2399;
        _2511 = (((((_2571 * _2230) + _613) * cbLight._m0[_2522].z) * _2590) * _2591) + _2401;
    }
    float _2657;
    float _2659;
    float _2661;
    float _2663;
    float _2665;
    float _2667;
    if (_1926.y == 0u)
    {
        uvec4 _2612 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2613 = _2612.x;
        uint _2624 = uint((float(_2612.y) * floor(float(uint(cbSceneParam._m0[85u].y * _546) / _2613))) + floor(float(uint(cbSceneParam._m0[85u].x * _545) / _2613)));
        float _2634 = (log2(_1704 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2635 = isnan(0.0) ? _2634 : (isnan(_2634) ? 0.0 : max(_2634, 0.0));
        uint _2638 = uint(isnan(14.0) ? _2635 : (isnan(_2635) ? 14.0 : min(_2635, 14.0)));
        uvec4 _2643 = texelFetch(g_lightClusterGridBuffer, int(((_2638 << 2u) + (_2624 << 6u)) >> 2u));
        uint _2644 = _2643.x;
        uint _2645 = _2612.z;
        float _2724;
        float _2726;
        float _2728;
        float _2730;
        float _2732;
        float _2734;
        if (((((1u << ((_2645 >> 4u) & 15u)) + 4294967295u) & _2644) == 0u) || ((_2645 & 240u) == 0u))
        {
            _2724 = 0.0;
            _2726 = 0.0;
            _2728 = 0.0;
            _2730 = 0.0;
            _2732 = 0.0;
            _2734 = 0.0;
        }
        else
        {
            float _2725;
            float _2727;
            float _2729;
            float _2731;
            float _2733;
            float _2735;
            float _2869 = 0.0;
            float _2870 = 0.0;
            float _2871 = 0.0;
            float _2872 = 0.0;
            float _2873 = 0.0;
            float _2874 = 0.0;
            uint _2875 = 0u;
            uint _2884;
            bool _2885;
            for (;;)
            {
                _2884 = texelFetch(g_lightClassification, int((((_2638 << 5u) + (_2624 << 9u)) + (_2875 << 2u)) >> 2u)).x;
                _2885 = _2884 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2885)
                {
                    frontier_phi_66_pred = _2874;
                    frontier_phi_66_pred_1 = _2873;
                    frontier_phi_66_pred_2 = _2872;
                    frontier_phi_66_pred_3 = _2871;
                    frontier_phi_66_pred_4 = _2870;
                    frontier_phi_66_pred_5 = _2869;
                }
                else
                {
                    float _2993;
                    float _2994;
                    float _2995;
                    float _2996;
                    float _2997;
                    float _2998;
                    uint _2999;
                    _2993 = _2869;
                    _2994 = _2870;
                    _2995 = _2871;
                    _2996 = _2872;
                    _2997 = _2873;
                    _2998 = _2874;
                    _2999 = _2884;
                    float _2925;
                    float _2926;
                    float _2927;
                    float _2928;
                    float _2929;
                    float _2930;
                    for (;;)
                    {
                        uint _3003 = uint(findLSB(_2999)) + (_2875 << 5u);
                        uint _3000 = (_2999 + 4294967295u) & _2999;
                        uint _3005 = _3003 * 48u;
                        vec4 _3019 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3005)).x, texelFetch(g_PointLightRenderingBuffer, int(_3005 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3005 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3005 + 3u)).x));
                        uint _3025 = (_3003 * 48u) + 4u;
                        vec4 _3038 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3025)).x, texelFetch(g_PointLightRenderingBuffer, int(_3025 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3025 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3025 + 3u)).x));
                        uint _3044 = (_3003 * 48u) + 8u;
                        vec3 _3055 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3044)).x, texelFetch(g_PointLightRenderingBuffer, int(_3044 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3044 + 2u)).x));
                        float _3059 = _3019.x - _1702;
                        float _3060 = _3019.y - _1703;
                        float _3061 = _3019.z - _1704;
                        float _3062 = dot(vec3(_3059, _3060, _3061), vec3(_3059, _3060, _3061));
                        float _3065 = inversesqrt(_3062);
                        float _3066 = _3065 * _3059;
                        float _3067 = _3065 * _3060;
                        float _3068 = _3065 * _3061;
                        float _3069 = dot(vec3(_567, _570, _573), vec3(_3066, _3067, _3068));
                        float _3074 = 1.0 - (_3062 * _3019.w);
                        float _4427 = isnan(0.0) ? _3074 : (isnan(_3074) ? 0.0 : max(_3074, 0.0));
                        float _3075 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
                        float _3076 = sqrt(_3062) * _3038.w;
                        float _3079 = 1.39999997615814208984375 / (_3076 + 1.39999997615814208984375);
                        float _3080 = _3079 * _3079;
                        float _3083 = ((1.0 - _3080) * _3069) + _3080;
                        float _3086 = _3076 * _3076;
                        float _3090 = ((isnan(0.0) ? _3083 : (isnan(_3083) ? 0.0 : max(_3083, 0.0))) * _3075) / ((_3086 * 0.699999988079071044921875) + 1.0);
                        float _3094 = (-0.0) - _1702;
                        float _3095 = (-0.0) - _1703;
                        float _3096 = (-0.0) - _1704;
                        float _3100 = inversesqrt(dot(vec3(_3094, _3095, _3096), vec3(_3094, _3095, _3096)));
                        float _3101 = _3100 * _3094;
                        float _3102 = _3100 * _3095;
                        float _3103 = _3100 * _3096;
                        float _3110 = exp2(log2(1.0 / ((_3086 * 3.5) + 5.0)) * 0.25);
                        float _3111 = 1.0 - _642;
                        float _3118 = sqrt(1.0 - ((1.0 - (_3111 * _3111)) * (1.0 - (_3110 * _3110))));
                        float _3119 = _3118 * _3118;
                        float _3120 = _3119 * _3119;
                        float _3121 = _3101 + _3066;
                        float _3122 = _3102 + _3067;
                        float _3123 = _3103 + _3068;
                        float _3127 = inversesqrt(dot(vec3(_3121, _3122, _3123), vec3(_3121, _3122, _3123)));
                        float _3131 = dot(vec3(_567, _570, _573), vec3(_3101, _3102, _3103));
                        float _4443 = isnan(0.0) ? _3131 : (isnan(_3131) ? 0.0 : max(_3131, 0.0));
                        float _3134 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
                        float _3135 = dot(vec3(_567, _570, _573), vec3(_3127 * _3121, _3127 * _3122, _3127 * _3123));
                        float _4454 = isnan(0.0) ? _3135 : (isnan(_3135) ? 0.0 : max(_3135, 0.0));
                        float _3138 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
                        float _3142 = ((_3138 * _3138) * (_3120 + (-1.0))) + 1.0;
                        float _3143 = _3079 * _3119;
                        float _3144 = _3143 * _3143;
                        float _3147 = ((1.0 - _3144) * _3069) + _3144;
                        float _4465 = isnan(0.0) ? _3147 : (isnan(_3147) ? 0.0 : max(_3147, 0.0));
                        float _3148 = isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0));
                        float _3149 = 1.0 - _3119;
                        float _3159 = (0.5 / (((_3148 * ((_3134 * _3149) + _3119)) + 9.9999999392252902907785028219223e-09) + (((_3148 * _3149) + _3119) * _3134))) * _3148;
                        float _4476 = isnan(0.0) ? _3159 : (isnan(_3159) ? 0.0 : max(_3159, 0.0));
                        float _3170 = (((_3120 * 3.1415927410125732421875) * (isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0)))) / ((_3142 * _3142) * ((_3086 * 2.1991131305694580078125) + 3.141590118408203125))) * _3075;
                        _2928 = (_3090 * _3038.x) + _2996;
                        _2929 = (_3090 * _3038.y) + _2997;
                        _2930 = (_3090 * _3038.z) + _2998;
                        _2925 = (_3170 * _3055.x) + _2993;
                        _2926 = (_3170 * _3055.y) + _2994;
                        _2927 = (_3170 * _3055.z) + _2995;
                        if (_3000 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2993 = _2925;
                            _2994 = _2926;
                            _2995 = _2927;
                            _2996 = _2928;
                            _2997 = _2929;
                            _2998 = _2930;
                            _2999 = _3000;
                        }
                    }
                    frontier_phi_66_pred = _2930;
                    frontier_phi_66_pred_1 = _2929;
                    frontier_phi_66_pred_2 = _2928;
                    frontier_phi_66_pred_3 = _2927;
                    frontier_phi_66_pred_4 = _2926;
                    frontier_phi_66_pred_5 = _2925;
                }
                _2735 = frontier_phi_66_pred;
                _2733 = frontier_phi_66_pred_1;
                _2731 = frontier_phi_66_pred_2;
                _2729 = frontier_phi_66_pred_3;
                _2727 = frontier_phi_66_pred_4;
                _2725 = frontier_phi_66_pred_5;
                uint _2876 = _2875 + 1u;
                if (_2876 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2869 = _2725;
                    _2870 = _2727;
                    _2871 = _2729;
                    _2872 = _2731;
                    _2873 = _2733;
                    _2874 = _2735;
                    _2875 = _2876;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2724 = _2725;
            _2726 = _2727;
            _2728 = _2729;
            _2730 = _2731;
            _2732 = _2733;
            _2734 = _2735;
        }
        uvec4 _2738 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2739 = _2738.z;
        uint _2741 = (_2739 >> 8u) & 15u;
        float _2837;
        float _2839;
        float _2841;
        float _2843;
        float _2845;
        float _2847;
        if (((4294967295u << _2741) & _2644) == 0u)
        {
            _2837 = _2724;
            _2839 = _2726;
            _2841 = _2728;
            _2843 = _2730;
            _2845 = _2732;
            _2847 = _2734;
        }
        else
        {
            float _2862 = inversesqrt(dot(vec3(_1702, _1703, _1704), vec3(_1702, _1703, _1704)));
            float _2863 = _2862 * _1702;
            float _2864 = _2862 * _1703;
            float _2865 = _2862 * _1704;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2741 < ((_2739 >> 12u) & 15u))
            {
                float _2838;
                float _2840;
                float _2842;
                float _2844;
                float _2846;
                float _2848;
                float _2976 = _2724;
                float _2977 = _2726;
                float _2978 = _2728;
                float _2979 = _2730;
                float _2980 = _2732;
                float _2981 = _2734;
                uint _2982 = _2741;
                uint _2991;
                bool _2992;
                for (;;)
                {
                    _2991 = texelFetch(g_lightClassification, int((((_2638 << 5u) + (_2624 << 9u)) + (_2982 << 2u)) >> 2u)).x;
                    _2992 = _2991 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2992)
                    {
                        frontier_phi_72_pred = _2981;
                        frontier_phi_72_pred_1 = _2980;
                        frontier_phi_72_pred_2 = _2979;
                        frontier_phi_72_pred_3 = _2978;
                        frontier_phi_72_pred_4 = _2977;
                        frontier_phi_72_pred_5 = _2976;
                    }
                    else
                    {
                        float _3175;
                        float _3176;
                        float _3177;
                        float _3178;
                        float _3179;
                        float _3180;
                        float _3470;
                        float _3471;
                        float _3472;
                        float _3473;
                        float _3474;
                        float _3475;
                        float _3188 = _2976;
                        float _3189 = _2977;
                        float _3190 = _2978;
                        float _3191 = _2979;
                        float _3192 = _2980;
                        float _3193 = _2981;
                        uint _3194 = _2991;
                        uint _3195;
                        vec4 _3220;
                        float _3221;
                        vec4 _3236;
                        vec3 _3248;
                        vec4 _3264;
                        vec4 _3280;
                        float _3326;
                        bool _3327;
                        for (;;)
                        {
                            uint _3205 = ((_2982 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3194));
                            _3195 = (_3194 + 4294967295u) & _3194;
                            uint _3207 = _3205 * 40u;
                            _3220 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3207)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3207 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3207 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3207 + 3u)).x));
                            _3221 = _3220.w;
                            uint _3223 = (_3205 * 40u) + 4u;
                            _3236 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3223)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3223 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3223 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3223 + 3u)).x));
                            uint _3238 = (_3205 * 40u) + 8u;
                            _3248 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3238)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 2u)).x));
                            uint _3251 = (_3205 * 40u) + 16u;
                            _3264 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3251)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3251 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3251 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3251 + 3u)).x));
                            uint _3267 = (_3205 * 40u) + 20u;
                            _3280 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3267)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3267 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3267 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3267 + 3u)).x));
                            uint _3282 = (_3205 * 40u) + 24u;
                            vec4 _3295 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3282)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 3u)).x));
                            uint _3301 = (_3205 * 40u) + 28u;
                            vec4 _3314 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3301)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3301 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3301 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3301 + 3u)).x));
                            _3326 = fma(_1704, _3314.z, fma(_1703, _3314.y, _3314.x * _1702)) + _3314.w;
                            _3327 = !((fma(_1704, _3295.z, fma(_1703, _3295.y, _3295.x * _1702)) + _3295.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3327)
                            {
                                float _3354 = _3220.x - _1702;
                                float _3355 = _3220.y - _1703;
                                float _3356 = _3220.z - _1704;
                                float _3357 = dot(vec3(_3354, _3355, _3356), vec3(_3354, _3355, _3356));
                                float _3360 = inversesqrt(_3357);
                                float _3361 = _3360 * _3354;
                                float _3362 = _3360 * _3355;
                                float _3363 = _3360 * _3356;
                                float _3367 = 1.0 - (_3357 / (_3221 * _3221));
                                float _4487 = isnan(0.0) ? _3367 : (isnan(_3367) ? 0.0 : max(_3367, 0.0));
                                float _3368 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
                                float _3372 = sqrt(_3357) * _3236.w;
                                float _3374 = 1.39999997615814208984375 / (_3372 + 1.39999997615814208984375);
                                float _3375 = _3374 * _3374;
                                float _3378 = ((1.0 - _3375) * dot(vec3(_3361, _3362, _3363), vec3(_567, _570, _573))) + _3375;
                                float _3381 = _3372 * _3372;
                                float _3385 = (fma(_1704, _3264.z, fma(_1703, _3264.y, _3264.x * _1702)) + _3264.w) / _3326;
                                float _3386 = (fma(_1704, _3280.z, fma(_1703, _3280.y, _3280.x * _1702)) + _3280.w) / _3326;
                                float _3390 = 1.0 - dot(vec2(_3385, _3386), vec2(_3385, _3386));
                                float _4503 = isnan(0.0) ? _3390 : (isnan(_3390) ? 0.0 : max(_3390, 0.0));
                                float _3391 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
                                float _3392 = _3391 * (((isnan(0.0) ? _3378 : (isnan(_3378) ? 0.0 : max(_3378, 0.0))) * _3368) / ((_3381 * 0.699999988079071044921875) + 1.0));
                                float _3404 = exp2(log2(1.0 / ((_3381 * 3.5) + 5.0)) * 0.25);
                                float _3405 = 1.0 - _642;
                                float _3412 = sqrt(1.0 - ((1.0 - (_3405 * _3405)) * (1.0 - (_3404 * _3404))));
                                float _3413 = _3412 * _3412;
                                float _3414 = _3413 * _3413;
                                float _3415 = _3361 - _2863;
                                float _3416 = _3362 - _2864;
                                float _3417 = _3363 - _2865;
                                float _3421 = inversesqrt(dot(vec3(_3415, _3416, _3417), vec3(_3415, _3416, _3417)));
                                float _3425 = dot(vec3(_567, _570, _573), vec3((-0.0) - _2863, (-0.0) - _2864, (-0.0) - _2865));
                                float _4514 = isnan(0.0) ? _3425 : (isnan(_3425) ? 0.0 : max(_3425, 0.0));
                                float _3428 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
                                float _3429 = dot(vec3(_567, _570, _573), vec3(_3421 * _3415, _3421 * _3416, _3421 * _3417));
                                float _4525 = isnan(0.0) ? _3429 : (isnan(_3429) ? 0.0 : max(_3429, 0.0));
                                float _3432 = isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0));
                                float _3436 = ((_3432 * _3432) * (_3414 + (-1.0))) + 1.0;
                                float _3437 = _3374 * _3413;
                                float _3438 = _3437 * _3437;
                                float _3444 = ((1.0 - _3438) * dot(vec3(_567, _570, _573), vec3(_3361, _3362, _3363))) + _3438;
                                float _4536 = isnan(0.0) ? _3444 : (isnan(_3444) ? 0.0 : max(_3444, 0.0));
                                float _3445 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
                                float _3446 = 1.0 - _3413;
                                float _3456 = (0.5 / (((_3445 * ((_3428 * _3446) + _3413)) + 9.9999999392252902907785028219223e-09) + (((_3445 * _3446) + _3413) * _3428))) * _3445;
                                float _4547 = isnan(0.0) ? _3456 : (isnan(_3456) ? 0.0 : max(_3456, 0.0));
                                float _3466 = (_3391 * _3368) * (((_3414 * 3.1415927410125732421875) * (isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0)))) / ((_3436 * _3436) * ((_3381 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3392 * _3236.y;
                                frontier_phi_78_pred_1 = _3392 * _3236.x;
                                frontier_phi_78_pred_2 = _3466 * _3248.z;
                                frontier_phi_78_pred_3 = _3466 * _3248.y;
                                frontier_phi_78_pred_4 = _3466 * _3248.x;
                                frontier_phi_78_pred_5 = _3392 * _3236.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3474 = frontier_phi_78_pred;
                            _3473 = frontier_phi_78_pred_1;
                            _3472 = frontier_phi_78_pred_2;
                            _3471 = frontier_phi_78_pred_3;
                            _3470 = frontier_phi_78_pred_4;
                            _3475 = frontier_phi_78_pred_5;
                            _3178 = _3473 + _3191;
                            _3179 = _3474 + _3192;
                            _3180 = _3475 + _3193;
                            _3175 = _3470 + _3188;
                            _3176 = _3471 + _3189;
                            _3177 = _3472 + _3190;
                            if (_3195 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3188 = _3175;
                                _3189 = _3176;
                                _3190 = _3177;
                                _3191 = _3178;
                                _3192 = _3179;
                                _3193 = _3180;
                                _3194 = _3195;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3180;
                        frontier_phi_72_pred_1 = _3179;
                        frontier_phi_72_pred_2 = _3178;
                        frontier_phi_72_pred_3 = _3177;
                        frontier_phi_72_pred_4 = _3176;
                        frontier_phi_72_pred_5 = _3175;
                    }
                    _2848 = frontier_phi_72_pred;
                    _2846 = frontier_phi_72_pred_1;
                    _2844 = frontier_phi_72_pred_2;
                    _2842 = frontier_phi_72_pred_3;
                    _2840 = frontier_phi_72_pred_4;
                    _2838 = frontier_phi_72_pred_5;
                    uint _2983 = _2982 + 1u;
                    if (_2983 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2976 = _2838;
                        _2977 = _2840;
                        _2978 = _2842;
                        _2979 = _2844;
                        _2980 = _2846;
                        _2981 = _2848;
                        _2982 = _2983;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2848;
                frontier_phi_60_61_ladder_1 = _2846;
                frontier_phi_60_61_ladder_2 = _2842;
                frontier_phi_60_61_ladder_3 = _2840;
                frontier_phi_60_61_ladder_4 = _2838;
                frontier_phi_60_61_ladder_5 = _2844;
            }
            else
            {
                frontier_phi_60_61_ladder = _2734;
                frontier_phi_60_61_ladder_1 = _2732;
                frontier_phi_60_61_ladder_2 = _2728;
                frontier_phi_60_61_ladder_3 = _2726;
                frontier_phi_60_61_ladder_4 = _2724;
                frontier_phi_60_61_ladder_5 = _2730;
            }
            _2837 = frontier_phi_60_61_ladder_4;
            _2839 = frontier_phi_60_61_ladder_3;
            _2841 = frontier_phi_60_61_ladder_2;
            _2843 = frontier_phi_60_61_ladder_5;
            _2845 = frontier_phi_60_61_ladder_1;
            _2847 = frontier_phi_60_61_ladder;
        }
        float _2852 = isnan(1.0) ? _626 : (isnan(_626) ? 1.0 : min(_626, 1.0));
        _2657 = (_2852 * _2843) + _2169;
        _2659 = (_2852 * _2845) + _2171;
        _2661 = (_2852 * _2847) + _2173;
        _2663 = ((_2837 * _610) * _2852) + _2507;
        _2665 = ((_2839 * _612) * _2852) + _2509;
        _2667 = ((_2841 * _613) * _2852) + _2511;
    }
    else
    {
        _2657 = _2169;
        _2659 = _2171;
        _2661 = _2173;
        _2663 = _2507;
        _2665 = _2509;
        _2667 = _2511;
    }
    float _4563 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _4574 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _4585 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    uint _2687 = _226 + 6u;
    float _2695 = _545 / cbSceneParam._m0[86u].x;
    float _2696 = _546 / cbSceneParam._m0[86u].y;
    vec4 _2710 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2695, _2696, (log2((isnan(cbSceneParam._m0[77u].w) ? _479 : (isnan(_479) ? cbSceneParam._m0[77u].w : min(_479, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2712 = _2710.x;
    float _2713 = _2710.y;
    float _2714 = _2710.z;
    float _2715 = _2710.w;
    float _2787;
    float _2789;
    float _2791;
    float _2793;
    if (_479 > cbSceneParam._m0[78u].w)
    {
        float _2749 = isnan(_479) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _479 : min(cbSceneParam._m0[80u].w, _479));
        float _2750 = _2749 / _479;
        float _2761 = _2750 * _530;
        float _2762 = _531 * _2750;
        float _2763 = (-0.0) - _2762;
        float _2765 = _2750 * _532;
        float _2767 = (cbSceneParam._m0[77u].w * _2763) / _2749;
        float _2768 = _2767 + cbSceneParam._m0[79u].w;
        float _2769 = cbSceneParam._m0[79u].w - _2762;
        float _2775 = sqrt(((_2761 * _2761) + (_2762 * _2762)) + (_2765 * _2765));
        float _2778 = (1.0 - (cbSceneParam._m0[77u].w / _2749)) * _2775;
        float _2783 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2785 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2938;
        if (abs((_2763 - _2767) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2938 = ((((_2768 > 0.0) ? exp2(_2783 * _2768) : (2.0 - exp2(_2785 * _2768))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2778;
        }
        else
        {
            float _2898 = 1.0 / cbSceneParam._m0[80u].x;
            float _2899 = isnan(_2769) ? _2768 : (isnan(_2768) ? _2769 : max(_2768, _2769));
            float _2900 = isnan(_2769) ? _2768 : (isnan(_2768) ? _2769 : min(_2768, _2769));
            float _2909 = isnan(0.0) ? _2899 : (isnan(_2899) ? 0.0 : min(_2899, 0.0));
            float _2910 = isnan(0.0) ? _2900 : (isnan(_2900) ? 0.0 : min(_2900, 0.0));
            _2938 = ((abs(_2775 / _2763) * cbSceneParam._m0[80u].y) * ((((_2909 - _2910) * 2.0) - ((exp2(_2783 * (isnan(0.0) ? _2899 : (isnan(_2899) ? 0.0 : max(_2899, 0.0)))) - exp2(_2783 * (isnan(0.0) ? _2900 : (isnan(_2900) ? 0.0 : max(_2900, 0.0))))) * _2898)) - ((exp2(_2785 * _2909) - exp2(_2785 * _2910)) * _2898))) + (_2778 * cbSceneParam._m0[80u].z);
        }
        vec4 _2940 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2695, _2696, 1.0), 0.0);
        float _2949 = exp2((_2938 * (-1.44269502162933349609375)) * (1.0 - _2940.w));
        float _2950 = log2(_2949);
        float _2966 = log2(_2715);
        _2787 = (exp2(_2966 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2950 * cbSceneParam._m0[78u].x)) * _2940.x) / cbSceneParam._m0[78u].x)) + _2712;
        _2789 = (exp2(_2966 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2950 * cbSceneParam._m0[78u].y)) * _2940.y) / cbSceneParam._m0[78u].y)) + _2713;
        _2791 = (exp2(_2966 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2950 * cbSceneParam._m0[78u].z)) * _2940.z) / cbSceneParam._m0[78u].z)) + _2714;
        _2793 = _2949 * _2715;
    }
    else
    {
        _2787 = _2712;
        _2789 = _2713;
        _2791 = _2714;
        _2793 = _2715;
    }
    float _2805 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2806 = _2805 == 3.0;
    float _2807 = log2(_2793);
    float _2814 = exp2(_2807 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0))) * (_2657 + ((isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0))) * _626))) + ((_2663 + ((isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0))) * _1435)) * cbPerFrame._m0[3u].x));
    float _2815 = exp2(_2807 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0))) * (_2659 + ((isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0))) * _626))) + ((_2665 + ((isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0))) * _1435)) * cbPerFrame._m0[3u].x));
    float _2816 = exp2(_2807 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0))) * (_2661 + ((isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0))) * _626))) + ((_2667 + ((isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0))) * _1435)) * cbPerFrame._m0[3u].x));
    float _2825 = (_2805 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2825 * (_2806 ? _2814 : (_2814 + (cbSceneParam._m0[72u].w * _2787)));
    SV_Target.y = _2825 * (_2806 ? _2815 : (_2815 + (cbSceneParam._m0[72u].w * _2789)));
    SV_Target.z = _2825 * (_2806 ? _2816 : (_2816 + (cbSceneParam._m0[72u].w * _2791)));
    SV_Target.w = cbInstanceData._m0[_2687].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2687].w;
}


