#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1408;
float _4070;
float _4071;
float _4072;
float _4073;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _231 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _232 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _233 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _239 = inversesqrt(dot(vec3(_231, _232, _233), vec3(_231, _232, _233)));
    float _240 = _239 * _231;
    float _241 = _239 * _232;
    float _242 = _239 * _233;
    float _246 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _247 = _246 * NORMAL.x;
    float _248 = _246 * NORMAL.y;
    float _249 = _246 * NORMAL.z;
    float _253 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _254 = _253 * TANGENT.x;
    float _255 = _253 * TANGENT.y;
    float _256 = _253 * TANGENT.z;
    uint _259 = uint(roundEven(NORMAL.w)) * 13u;
    uint _264 = _259 + 1u;
    uint _268 = _259 + 2u;
    float _277 = sqrt(((cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x) + (cbInstanceData._m0[_259].x * cbInstanceData._m0[_259].x)) + (cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x));
    float _278 = _277 * TEXCOORD.z;
    float _279 = _277 * TEXCOORD.w;
    vec4 _299 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _305 = _299.x * cbMtdParam._m0[11u].x;
    float _306 = _299.y * cbMtdParam._m0[11u].y;
    float _307 = _299.z * cbMtdParam._m0[11u].z;
    vec4 _326 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _278) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _279) + cbTextureTilingScale._m0[5u].w));
    vec4 _364 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _366 = _364.x;
    float _378 = dot(vec4(_366, _364.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _395 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_366 - _378) * cbMtdParam._m0[24u].y) + _378) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4082 = isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0));
    float _396 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
    float _403 = (_396 * ((_326.x * cbMtdParam._m0[12u].x) - _305)) + _305;
    float _404 = (_396 * ((_326.y * cbMtdParam._m0[12u].y) - _306)) + _306;
    float _405 = (_396 * ((_326.z * cbMtdParam._m0[12u].z) - _307)) + _307;
    vec4 _424 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _278) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _279) + cbTextureTilingScale._m0[14u].w));
    vec4 _444 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _278) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _279) + cbTextureTilingScale._m0[4u].w));
    vec4 _461 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _463 = _461.x;
    float _464 = _461.y;
    float _465 = _461.z;
    float _474 = ((_444.z - _465) * _396) + _465;
    float _477 = ((((_444.x - _463) * _396) + _463) * 2.0) + (-1.0);
    float _479 = ((((_444.y - _464) * _396) + _464) * 2.0) + (-1.0);
    float _480 = dot(vec2(_477, _479), vec2(_477, _479));
    float _4093 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _485 = sqrt(1.0 - (isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0))));
    vec4 _501 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _513 = (((_501.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _477;
    float _514 = (((_501.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _479;
    float _517 = fma(_485, _247, fma(_514, _254, _513 * _240));
    float _520 = fma(_485, _248, fma(_514, _255, _513 * _241));
    float _523 = fma(_485, _249, fma(_514, _256, _513 * _242));
    float _527 = inversesqrt(dot(vec3(_517, _520, _523), vec3(_517, _520, _523)));
    vec4 _554 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _278) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _279) + cbTextureTilingScale._m0[11u].w));
    float _556 = _554.x;
    float _557 = 1.0 - _556;
    float _561 = ((_556 - _557) * cbMtdParam._m0[24u].z) + _557;
    float _563 = (cbMtdParam._m0[19u].x + dot(vec4(_527 * _517, _527 * _520, _527 * _523, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_561 * cbMtdParam._m0[21u].z);
    float _4104 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _564 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
    float _566 = (-0.0) - cbMtdParam._m0[24u].x;
    float _568 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _569 = isnan(1.0) ? _568 : (isnan(_568) ? 1.0 : min(_568, 1.0));
    float _576 = _564 - ((_564 * TEXCOORD_8.x) * _569);
    float _577 = _564 - ((_564 * TEXCOORD_8.y) * _569);
    float _578 = _564 - ((_564 * TEXCOORD_8.z) * _569);
    float _585 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _589 = ((isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : min(_585, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _597 = (_589 - (((_561 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _589))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4135 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _598 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
    float _602 = ((_576 * ((_424.x * cbMtdParam._m0[18u].x) - _403)) * _598) + _403;
    float _603 = ((_577 * ((_424.y * cbMtdParam._m0[18u].y) - _404)) * _598) + _404;
    float _604 = ((_578 * ((_424.z * cbMtdParam._m0[18u].z) - _405)) * _598) + _405;
    vec4 _616 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _278) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _279) + cbTextureTilingScale._m0[19u].w));
    float _618 = _616.x;
    float _619 = 1.0 - _618;
    float _646 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_618 - _619) * cbMtdParam._m0[24u].w) + _619) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4146 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _647 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
    float _655 = ((((cbMtdParam._m0[10u].x - _602) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _647) + _602;
    float _656 = ((((cbMtdParam._m0[10u].y - _603) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _647) + _603;
    float _657 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _604)) * _647) + _604;
    vec4 _683 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _685 = _683.x;
    float _703 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _278) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _279) + cbTextureTilingScale._m0[9u].w)).x - _685) * _396) + _685;
    float _707 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _703) * cbMtdParam._m0[19u].z) + _703;
    float _710 = _707 - ((_598 * _576) * _707);
    float _712 = _710 - (_710 * _647);
    float _716 = (cbMtdParam._m0[19u].w * (_501.z - _474)) + _474;
    vec4 _730 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _278) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _279) + cbTextureTilingScale._m0[15u].w));
    float _737 = (_730.x * 2.0) + (-1.0);
    float _738 = (_730.y * 2.0) + (-1.0);
    float _739 = dot(vec2(_737, _738), vec2(_737, _738));
    float _4157 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _748 = (((_730.z - _716) * _576) * _598) + _716;
    float _751 = ((cbMtdParam._m0[23u].y - _748) * _647) + _748;
    vec4 _770 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _278) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _279) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _776 = (_770.x * 2.0) + (-1.0);
    float _777 = (_770.y * 2.0) + (-1.0);
    float _778 = dot(vec2(_776, _777), vec2(_776, _777));
    float _4168 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _798 = (((cbMtdParam._m0[21u].x * _513) + ((_737 - _513) * _576)) * _598) + _513;
    float _799 = (((cbMtdParam._m0[21u].x * _514) + ((_738 - _514) * _577)) * _598) + _514;
    float _800 = (((sqrt(1.0 - (isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0)))) - _485) * _578) * _598) + _485;
    float _811 = (((_776 - _798) + (_798 * cbMtdParam._m0[22u].z)) * _647) + _798;
    float _812 = (((_777 - _799) + (_799 * cbMtdParam._m0[22u].z)) * _647) + _799;
    float _813 = ((sqrt(1.0 - (isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0)))) - _800) * _647) + _800;
    float _815 = cbMtdParam._m0[22u].x + _501.w;
    float _818 = fma(_813, _247, fma(_812, _254, _811 * _240));
    float _821 = fma(_813, _248, fma(_812, _255, _811 * _241));
    float _824 = fma(_813, _249, fma(_812, _256, _811 * _242));
    float _828 = inversesqrt(dot(vec3(_818, _821, _824), vec3(_818, _821, _824)));
    float _829 = _828 * _818;
    float _830 = _828 * _821;
    float _831 = _828 * _824;
    float _4179 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
    float _832 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
    float _4190 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
    float _4201 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    float _4212 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _4223 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _4234 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _837 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
    float _851 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _891 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _901 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _891);
    float _902 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _891);
    float _903 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _891);
    float _907 = inversesqrt(dot(vec3(_901, _902, _903), vec3(_901, _902, _903)));
    float _908 = _901 * _907;
    float _909 = _902 * _907;
    float _910 = _903 * _907;
    vec4 _915 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _917 = _915.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1089 = sqrt(((_901 * _901) + (_902 * _902)) + (_903 * _903));
        float _1095 = (cbMatDynParam._m0[5u].x * _1089) + cbMatDynParam._m0[5u].y;
        float _4245 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1096 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
        float _1100 = (cbMatDynParam._m0[5u].z * _1089) + cbMatDynParam._m0[5u].w;
        float _4256 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0))) - _1096)) + _1096) < ((_917 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _928 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _929 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _947 = fma(_831, cbSceneParam._m0[5u].z, fma(_830, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _829));
    float _950 = fma(_831, cbSceneParam._m0[6u].z, fma(_830, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _829));
    float _953 = fma(_831, cbSceneParam._m0[7u].z, fma(_830, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _829));
    uint _966 = _259 + 9u;
    uint _967 = _966 + uint(cbMatDynParam._m0[0u].w);
    float _973 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0)))) * cbInstanceData._m0[_967].x;
    float _974 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0)))) * cbInstanceData._m0[_967].y;
    float _975 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0)))) * cbInstanceData._m0[_967].z;
    float _4267 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
    float _976 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
    float _4278 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
    float _977 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
    float _4289 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
    float _978 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
    float _979 = 1.0 - _837;
    float _980 = _976 * _979;
    float _981 = _977 * _979;
    float _982 = _978 * _979;
    float _987 = (_976 + (-0.039999999105930328369140625)) * _837;
    float _988 = (_977 + (-0.039999999105930328369140625)) * _837;
    float _989 = (_978 + (-0.039999999105930328369140625)) * _837;
    float _990 = _987 + 0.039999999105930328369140625;
    float _992 = _988 + 0.039999999105930328369140625;
    float _993 = _989 + 0.039999999105930328369140625;
    vec4 _1002 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _928, cbSceneParam._m0[86u].y * _929));
    float _1006 = ((isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0))) * TEXCOORD_5.w) * _1002.x;
    float _1007 = dot(vec3(_829, _830, _831), vec3(_908, _909, _910));
    float _1010 = _1007 * 2.0;
    float _1014 = (_1010 * _829) - _908;
    float _1015 = (_1010 * _830) - _909;
    float _1016 = (_1010 * _831) - _910;
    float _1020 = abs(dot(vec3(_908, _909, _910), vec3(_829, _830, _831)));
    float _4300 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
    float _1022 = sqrt(_832);
    float _1035 = exp2((_1022 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1022 * 3.0));
    float _1041 = (1.0 - _1035) * ((_1022 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1042 = _1035 * _1022;
    float _1070 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1074 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1078 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1407;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1132 = fma(_1078, cbModelParam._m0[26u].z, fma(_1074, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1070));
        float _1136 = fma(_1078, cbModelParam._m0[27u].z, fma(_1074, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1070));
        float _1140 = fma(_1078, cbModelParam._m0[28u].z, fma(_1074, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1070));
        float _1165 = _1070 + _829;
        float _1166 = _1074 + _830;
        float _1167 = _1078 + _831;
        float _1177 = fma(_1167, cbModelParam._m0[26u].z, fma(_1166, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1165)) - _1132;
        float _1178 = fma(_1167, cbModelParam._m0[27u].z, fma(_1166, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1165)) - _1136;
        float _1179 = fma(_1167, cbModelParam._m0[28u].z, fma(_1166, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1165)) - _1140;
        float _1183 = inversesqrt(dot(vec3(_1177, _1178, _1179), vec3(_1177, _1178, _1179)));
        float _1196 = ((_1183 * _1177) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1132 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1197 = ((_1183 * _1178) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1136 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1198 = ((_1183 * _1179) / cbModelParam._m0[34u].z) + ((((((_1140 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1201 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1196, _1197, _1198), 0.0);
        vec4 _1208 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1196, _1197, _1198), 0.0);
        vec4 _1215 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1196, _1197, _1198), 0.0);
        vec4 _1222 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1196, _1197, _1198), 0.0);
        float _1235 = exp2((_1201.w + (-0.5)) * 20.0) * 2.0;
        float _1236 = _1235 * (_1201.x + (-0.5));
        float _1237 = _1235 * (_1201.y + (-0.5));
        float _1238 = _1235 * (_1201.z + (-0.5));
        float _1245 = exp2((_1208.w + (-0.5)) * 20.0) * 2.0;
        float _1246 = _1245 * (_1208.x + (-0.5));
        float _1247 = _1245 * (_1208.y + (-0.5));
        float _1248 = _1245 * (_1208.z + (-0.5));
        float _1255 = exp2((_1215.w + (-0.5)) * 20.0) * 2.0;
        float _1256 = _1255 * (_1215.x + (-0.5));
        float _1257 = _1255 * (_1215.y + (-0.5));
        float _1258 = _1255 * (_1215.z + (-0.5));
        float _1265 = exp2((_1222.w + (-0.5)) * 20.0) * 2.0;
        float _1266 = _1265 * (_1222.x + (-0.5));
        float _1267 = _1265 * (_1222.y + (-0.5));
        float _1268 = _1265 * (_1222.z + (-0.5));
        float _1269 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1270 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1271 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1272 = _1236 * 0.5;
        float _1273 = _1246 * 0.5;
        float _1274 = _1256 * 0.5;
        float _1275 = dot(vec3(_1272, _1273, _1274), vec3(_1272, _1273, _1274));
        float _1280 = (_1275 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1275);
        float _1289 = (dot(vec3(_829, _830, _831), vec3(_1280 * _1272, _1280 * _1273, _1280 * _1274)) + 1.0) * 0.5;
        float _4326 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1299 = sqrt(((_1273 * _1273) + (_1272 * _1272)) + (_1274 * _1274)) / (_1269 + 9.9999997473787516355514526367188e-06);
        float _4337 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1300 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
        float _1301 = _1300 * 2.0;
        float _1305 = (1.0 - _1300) / (_1300 + 1.0);
        float _4348 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1306 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
        float _1315 = ((((1.0 - _1306) * (_1301 + 2.0)) * exp2(log2(isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0))) * (_1301 + 1.0))) + _1306) * _1269;
        float _1316 = _1237 * 0.5;
        float _1317 = _1247 * 0.5;
        float _1318 = _1257 * 0.5;
        float _1319 = dot(vec3(_1316, _1317, _1318), vec3(_1316, _1317, _1318));
        float _1324 = (_1319 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1319);
        float _1332 = (dot(vec3(_829, _830, _831), vec3(_1324 * _1316, _1324 * _1317, _1324 * _1318)) + 1.0) * 0.5;
        float _4359 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1341 = sqrt(((_1317 * _1317) + (_1316 * _1316)) + (_1318 * _1318)) / (_1270 + 9.9999997473787516355514526367188e-06);
        float _4370 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1342 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
        float _1343 = _1342 * 2.0;
        float _1347 = (1.0 - _1342) / (_1342 + 1.0);
        float _4381 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1348 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
        float _1357 = ((((1.0 - _1348) * (_1343 + 2.0)) * exp2(log2(isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0))) * (_1343 + 1.0))) + _1348) * _1270;
        float _1358 = _1238 * 0.5;
        float _1359 = _1248 * 0.5;
        float _1360 = _1258 * 0.5;
        float _1361 = dot(vec3(_1358, _1359, _1360), vec3(_1358, _1359, _1360));
        float _1366 = (_1361 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1361);
        float _1374 = (dot(vec3(_829, _830, _831), vec3(_1366 * _1358, _1366 * _1359, _1366 * _1360)) + 1.0) * 0.5;
        float _4392 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1383 = sqrt(((_1359 * _1359) + (_1358 * _1358)) + (_1360 * _1360)) / (_1271 + 9.9999997473787516355514526367188e-06);
        float _4403 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1384 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
        float _1385 = _1384 * 2.0;
        float _1389 = (1.0 - _1384) / (_1384 + 1.0);
        float _4414 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1390 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
        float _1399 = ((((1.0 - _1390) * (_1385 + 2.0)) * exp2(log2(isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0))) * (_1385 + 1.0))) + _1390) * _1271;
        _1407 = _1238;
        _1409 = _1237;
        _1410 = _1236;
        _1411 = _1248;
        _1412 = _1247;
        _1413 = _1246;
        _1414 = _1258;
        _1415 = _1257;
        _1416 = _1256;
        _1417 = _1271;
        _1418 = _1270;
        _1419 = _1269;
        _1420 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0)));
        _1421 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0)));
        _1422 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0)));
    }
    else
    {
        _1407 = _1408;
        _1409 = _1408;
        _1410 = _1408;
        _1411 = _1408;
        _1412 = _1408;
        _1413 = _1408;
        _1414 = _1408;
        _1415 = _1408;
        _1416 = _1408;
        _1417 = _1408;
        _1418 = _1408;
        _1419 = _1408;
        _1420 = 0.0;
        _1421 = 0.0;
        _1422 = 0.0;
    }
    float _1719;
    float _1720;
    float _1721;
    float _1722;
    float _1723;
    float _1724;
    float _1725;
    float _1726;
    float _1727;
    float _1728;
    float _1729;
    float _1730;
    float _1731;
    float _1732;
    float _1733;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1450 = fma(_1078, cbModelParam._m0[30u].z, fma(_1074, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1070));
        float _1454 = fma(_1078, cbModelParam._m0[31u].z, fma(_1074, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1070));
        float _1458 = fma(_1078, cbModelParam._m0[32u].z, fma(_1074, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1070));
        float _1481 = _1070 + _829;
        float _1482 = _1074 + _830;
        float _1483 = _1078 + _831;
        float _1493 = fma(_1483, cbModelParam._m0[30u].z, fma(_1482, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1481)) - _1450;
        float _1494 = fma(_1483, cbModelParam._m0[31u].z, fma(_1482, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1481)) - _1454;
        float _1495 = fma(_1483, cbModelParam._m0[32u].z, fma(_1482, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1481)) - _1458;
        float _1499 = inversesqrt(dot(vec3(_1493, _1494, _1495), vec3(_1493, _1494, _1495)));
        float _1512 = ((_1499 * _1493) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1450 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1513 = ((_1499 * _1494) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1454 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1514 = ((_1499 * _1495) / cbModelParam._m0[35u].z) + ((((((_1458 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1516 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1512, _1513, _1514), 0.0);
        vec4 _1523 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1512, _1513, _1514), 0.0);
        vec4 _1530 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1512, _1513, _1514), 0.0);
        vec4 _1537 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1512, _1513, _1514), 0.0);
        float _1549 = exp2((_1516.w + (-0.5)) * 20.0) * 2.0;
        float _1550 = _1549 * (_1516.x + (-0.5));
        float _1551 = _1549 * (_1516.y + (-0.5));
        float _1552 = _1549 * (_1516.z + (-0.5));
        float _1559 = exp2((_1523.w + (-0.5)) * 20.0) * 2.0;
        float _1560 = _1559 * (_1523.x + (-0.5));
        float _1561 = _1559 * (_1523.y + (-0.5));
        float _1562 = _1559 * (_1523.z + (-0.5));
        float _1569 = exp2((_1530.w + (-0.5)) * 20.0) * 2.0;
        float _1570 = _1569 * (_1530.x + (-0.5));
        float _1571 = _1569 * (_1530.y + (-0.5));
        float _1572 = _1569 * (_1530.z + (-0.5));
        float _1579 = exp2((_1537.w + (-0.5)) * 20.0) * 2.0;
        float _1580 = _1579 * (_1537.x + (-0.5));
        float _1581 = _1579 * (_1537.y + (-0.5));
        float _1582 = _1579 * (_1537.z + (-0.5));
        float _1583 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1584 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1585 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
        float _1586 = _1550 * 0.5;
        float _1587 = _1560 * 0.5;
        float _1588 = _1570 * 0.5;
        float _1589 = dot(vec3(_1586, _1587, _1588), vec3(_1586, _1587, _1588));
        float _1594 = (_1589 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1589);
        float _1602 = (dot(vec3(_829, _830, _831), vec3(_1594 * _1586, _1594 * _1587, _1594 * _1588)) + 1.0) * 0.5;
        float _4455 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
        float _1611 = sqrt(((_1587 * _1587) + (_1586 * _1586)) + (_1588 * _1588)) / (_1583 + 9.9999997473787516355514526367188e-06);
        float _4466 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
        float _1612 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
        float _1613 = _1612 * 2.0;
        float _1617 = (1.0 - _1612) / (_1612 + 1.0);
        float _4477 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
        float _1618 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
        float _1627 = ((((1.0 - _1618) * (_1613 + 2.0)) * exp2(log2(isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0))) * (_1613 + 1.0))) + _1618) * _1583;
        float _1628 = _1551 * 0.5;
        float _1629 = _1561 * 0.5;
        float _1630 = _1571 * 0.5;
        float _1631 = dot(vec3(_1628, _1629, _1630), vec3(_1628, _1629, _1630));
        float _1636 = (_1631 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1631);
        float _1644 = (dot(vec3(_829, _830, _831), vec3(_1636 * _1628, _1636 * _1629, _1636 * _1630)) + 1.0) * 0.5;
        float _4488 = isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0));
        float _1653 = sqrt(((_1629 * _1629) + (_1628 * _1628)) + (_1630 * _1630)) / (_1584 + 9.9999997473787516355514526367188e-06);
        float _4499 = isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0));
        float _1654 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
        float _1655 = _1654 * 2.0;
        float _1659 = (1.0 - _1654) / (_1654 + 1.0);
        float _4510 = isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0));
        float _1660 = isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0));
        float _1669 = ((((1.0 - _1660) * (_1655 + 2.0)) * exp2(log2(isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0))) * (_1655 + 1.0))) + _1660) * _1584;
        float _1670 = _1552 * 0.5;
        float _1671 = _1562 * 0.5;
        float _1672 = _1572 * 0.5;
        float _1673 = dot(vec3(_1670, _1671, _1672), vec3(_1670, _1671, _1672));
        float _1678 = (_1673 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1673);
        float _1686 = (dot(vec3(_829, _830, _831), vec3(_1678 * _1670, _1678 * _1671, _1678 * _1672)) + 1.0) * 0.5;
        float _4521 = isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0));
        float _1695 = sqrt(((_1671 * _1671) + (_1670 * _1670)) + (_1672 * _1672)) / (_1585 + 9.9999997473787516355514526367188e-06);
        float _4532 = isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0));
        float _1696 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
        float _1697 = _1696 * 2.0;
        float _1701 = (1.0 - _1696) / (_1696 + 1.0);
        float _4543 = isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0));
        float _1702 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
        float _1711 = ((((1.0 - _1702) * (_1697 + 2.0)) * exp2(log2(isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0))) * (_1697 + 1.0))) + _1702) * _1585;
        _1719 = _1552;
        _1720 = _1551;
        _1721 = _1550;
        _1722 = _1562;
        _1723 = _1561;
        _1724 = _1560;
        _1725 = _1572;
        _1726 = _1571;
        _1727 = _1570;
        _1728 = _1585;
        _1729 = _1584;
        _1730 = _1583;
        _1731 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0)));
        _1732 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0)));
        _1733 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0)));
    }
    else
    {
        _1719 = _1408;
        _1720 = _1408;
        _1721 = _1408;
        _1722 = _1408;
        _1723 = _1408;
        _1724 = _1408;
        _1725 = _1408;
        _1726 = _1408;
        _1727 = _1408;
        _1728 = _1408;
        _1729 = _1408;
        _1730 = _1408;
        _1731 = 0.0;
        _1732 = 0.0;
        _1733 = 0.0;
    }
    float _1743 = (cbModelParam._m0[1u].x * (_1731 - _1420)) + _1420;
    float _1744 = (cbModelParam._m0[1u].x * (_1732 - _1421)) + _1421;
    float _1745 = (cbModelParam._m0[1u].x * (_1733 - _1422)) + _1422;
    float _1766 = fma(_1745, cbSceneParam._m0[89u].z, fma(_1744, cbSceneParam._m0[89u].y, _1743 * cbSceneParam._m0[89u].x));
    float _1769 = fma(_1745, cbSceneParam._m0[90u].z, fma(_1744, cbSceneParam._m0[90u].y, _1743 * cbSceneParam._m0[90u].x));
    float _1772 = fma(_1745, cbSceneParam._m0[91u].z, fma(_1744, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1743));
    float _1787 = _1014 * 0.5;
    float _1788 = _1015 * 0.5;
    float _1789 = _1016 * 0.5;
    float _1790 = dot(vec4(_1787, _1788, _1789, 1.0), vec4(_1721, _1724, _1727, _1730));
    float _1793 = dot(vec4(_1787, _1788, _1789, 1.0), vec4(_1720, _1723, _1726, _1729));
    float _1796 = dot(vec4(_1787, _1788, _1789, 1.0), vec4(_1719, _1722, _1725, _1728));
    float _1830;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1803 = dot(vec4(_1787, _1788, _1789, 1.0), vec4(_1407, _1411, _1414, _1417));
        float _1807 = dot(vec4(_1787, _1788, _1789, 1.0), vec4(_1409, _1412, _1415, _1418));
        float _1811 = dot(vec4(_1787, _1788, _1789, 1.0), vec4(_1410, _1413, _1416, _1419));
        float _1818 = dot(vec4(cbModelParam._m0[39u]), vec4(_1787, _1788, _1789, 1.0));
        _1830 = dot(vec3(isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0)), isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0)), isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1818) ? 0.0 : (isnan(0.0) ? _1818 : max(0.0, _1818))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1830 = 1.0;
    }
    float _1841;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1832 = dot(vec4(cbModelParam._m0[40u]), vec4(_1787, _1788, _1789, 1.0));
        _1841 = dot(vec3(isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0)), isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0)), isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1832) ? 0.0 : (isnan(0.0) ? _1832 : max(0.0, _1832))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1841 = 1.0;
    }
    float _1845 = (_1841 * cbModelParam._m0[1u].x) + (_1830 * (1.0 - cbModelParam._m0[1u].x));
    float _1855 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _832);
    float _1856 = isnan(_1855) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1855 : min(cbModelParam._m0[25u].z, _1855));
    float _1936;
    float _1938;
    float _1940;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1903 = fma(_1078, cbModelParam._m0[13u].z, fma(_1074, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1070)) + cbModelParam._m0[13u].w;
        float _1907 = fma(_1078, cbModelParam._m0[14u].z, fma(_1074, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1070)) + cbModelParam._m0[14u].w;
        float _1911 = fma(_1078, cbModelParam._m0[15u].z, fma(_1074, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1070)) + cbModelParam._m0[15u].w;
        float _1914 = fma(_1016, cbModelParam._m0[13u].z, fma(_1015, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1014));
        float _1917 = fma(_1016, cbModelParam._m0[14u].z, fma(_1015, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1014));
        float _1920 = fma(_1016, cbModelParam._m0[15u].z, fma(_1015, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1014));
        float _1948;
        if (_1914 > 0.0)
        {
            _1948 = abs((1.0 - _1903) / _1914);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1914 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1903 + 1.0) / _1914);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1948 = frontier_phi_17_15_ladder;
        }
        float _2119;
        if (_1917 > 0.0)
        {
            _2119 = abs((1.0 - _1907) / _1917);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1917 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1907 + 1.0) / _1917);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2119 = frontier_phi_26_22_ladder;
        }
        float _2414;
        if (_1920 > 0.0)
        {
            _2414 = abs((1.0 - _1911) / _1920);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1920 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1911 + 1.0) / _1920);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2414 = frontier_phi_38_33_ladder;
        }
        float _2416 = isnan(_2119) ? _1948 : (isnan(_1948) ? _2119 : min(_1948, _2119));
        float _2417 = isnan(_2414) ? _2416 : (isnan(_2416) ? _2414 : min(_2416, _2414));
        float _2421 = (_2417 * _1914) + _1903;
        float _2422 = (_2417 * _1917) + _1907;
        float _2423 = (_2417 * _1920) + _1911;
        float _2424 = _2417 * 9.9999997473787516355514526367188e-05;
        float _2426 = (-1.0) - _2424;
        float _2428 = _2424 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2423 > _2428) || ((_2423 < _2426) || ((_2422 > _2428) || ((_2422 < _2426) || ((_2421 < _2426) || (_2421 > _2428))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2568 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2423, cbModelParam._m0[9u].z, fma(_2422, cbModelParam._m0[9u].y, _2421 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2423, cbModelParam._m0[10u].z, fma(_2422, cbModelParam._m0[10u].y, _2421 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2423, cbModelParam._m0[11u].z, fma(_2422, cbModelParam._m0[11u].y, _2421 * cbModelParam._m0[11u].x))), _1856);
            frontier_phi_16_38_ladder = _2568.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2568.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2568.x * cbModelParam._m0[1u].y;
        }
        _1936 = frontier_phi_16_38_ladder_2;
        _1938 = frontier_phi_16_38_ladder_1;
        _1940 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1924 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1014, _1015, _1016), _1856);
        _1936 = _1924.x * cbModelParam._m0[1u].y;
        _1938 = _1924.y * cbModelParam._m0[1u].y;
        _1940 = _1924.z * cbModelParam._m0[1u].y;
    }
    float _1944 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _832);
    float _1945 = isnan(_1944) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1944 : min(cbModelParam._m0[25u].w, _1944));
    float _2034;
    float _2036;
    float _2038;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1998 = fma(_1078, cbModelParam._m0[21u].z, fma(_1074, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1070)) + cbModelParam._m0[21u].w;
        float _2002 = fma(_1078, cbModelParam._m0[22u].z, fma(_1074, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1070)) + cbModelParam._m0[22u].w;
        float _2006 = fma(_1078, cbModelParam._m0[23u].z, fma(_1074, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1070)) + cbModelParam._m0[23u].w;
        float _2009 = fma(_1016, cbModelParam._m0[21u].z, fma(_1015, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1014));
        float _2012 = fma(_1016, cbModelParam._m0[22u].z, fma(_1015, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1014));
        float _2015 = fma(_1016, cbModelParam._m0[23u].z, fma(_1015, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1014));
        float _2124;
        if (_2009 > 0.0)
        {
            _2124 = abs((1.0 - _1998) / _2009);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2009 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1998 + 1.0) / _2009);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2124 = frontier_phi_28_24_ladder;
        }
        float _2441;
        if (_2012 > 0.0)
        {
            _2441 = abs((1.0 - _2002) / _2012);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2012 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2002 + 1.0) / _2012);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2441 = frontier_phi_40_35_ladder;
        }
        float _2779;
        if (_2015 > 0.0)
        {
            _2779 = abs((1.0 - _2006) / _2015);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2015 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2006 + 1.0) / _2015);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2779 = frontier_phi_50_47_ladder;
        }
        float _2781 = isnan(_2441) ? _2124 : (isnan(_2124) ? _2441 : min(_2124, _2441));
        float _2782 = isnan(_2779) ? _2781 : (isnan(_2781) ? _2779 : min(_2781, _2779));
        float _2786 = (_2782 * _2009) + _1998;
        float _2787 = (_2782 * _2012) + _2002;
        float _2788 = (_2782 * _2015) + _2006;
        float _2789 = _2782 * 9.9999997473787516355514526367188e-05;
        float _2790 = (-1.0) - _2789;
        float _2792 = _2789 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2788 > _2792) || ((_2788 < _2790) || ((_2787 > _2792) || ((_2787 < _2790) || ((_2786 < _2790) || (_2786 > _2792))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2910 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2788, cbModelParam._m0[17u].z, fma(_2787, cbModelParam._m0[17u].y, _2786 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2788, cbModelParam._m0[18u].z, fma(_2787, cbModelParam._m0[18u].y, _2786 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2788, cbModelParam._m0[19u].z, fma(_2787, cbModelParam._m0[19u].y, _2786 * cbModelParam._m0[19u].x))), _1945);
            frontier_phi_25_50_ladder = _2910.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2910.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2910.x * cbModelParam._m0[1u].z;
        }
        _2034 = frontier_phi_25_50_ladder_2;
        _2036 = frontier_phi_25_50_ladder_1;
        _2038 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2018 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1014, _1015, _1016), _1945);
        _2034 = _2018.x * cbModelParam._m0[1u].z;
        _2036 = _2018.y * cbModelParam._m0[1u].z;
        _2038 = _2018.z * cbModelParam._m0[1u].z;
    }
    float _2051 = (((_1041 * _990) + _1042) * _1006) * ((cbModelParam._m0[1u].w * (_2034 - _1936)) + _1936);
    float _2053 = (((_1041 * _992) + _1042) * _1006) * ((cbModelParam._m0[1u].w * (_2036 - _1938)) + _1938);
    float _2055 = (((_1041 * _993) + _1042) * _1006) * ((cbModelParam._m0[1u].w * (_2038 - _1940)) + _1940);
    float _2058 = fma(_2055, cbSceneParam._m0[89u].z, fma(_2053, cbSceneParam._m0[89u].y, _2051 * cbSceneParam._m0[89u].x));
    float _2061 = fma(_2055, cbSceneParam._m0[90u].z, fma(_2053, cbSceneParam._m0[90u].y, _2051 * cbSceneParam._m0[90u].x));
    float _2064 = fma(_2055, cbSceneParam._m0[91u].z, fma(_2053, cbSceneParam._m0[91u].y, _2051 * cbSceneParam._m0[91u].x));
    float _2098 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2102 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2106 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2110 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2111 = _2098 / _2110;
    float _2112 = _2102 / _2110;
    float _2113 = _2106 / _2110;
    float _2260;
    float _2261;
    float _2262;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2140 = ((uint(_2113 > cbSceneParam._m0[59u].y) + uint(_2113 > cbSceneParam._m0[59u].x)) + uint(_2113 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2141 = _2140 + 43u;
        uint _2149 = _2140 + 44u;
        uint _2157 = _2140 + 45u;
        uint _2165 = _2140 + 46u;
        float _2176 = fma(_2110, cbSceneParam._m0[_2141].w, fma(_2106, cbSceneParam._m0[_2141].z, fma(_2102, cbSceneParam._m0[_2141].y, _2098 * cbSceneParam._m0[_2141].x)));
        float _2180 = fma(_2110, cbSceneParam._m0[_2149].w, fma(_2106, cbSceneParam._m0[_2149].z, fma(_2102, cbSceneParam._m0[_2149].y, _2098 * cbSceneParam._m0[_2149].x)));
        float _2188 = fma(_2110, cbSceneParam._m0[_2165].w, fma(_2106, cbSceneParam._m0[_2165].z, fma(_2102, cbSceneParam._m0[_2165].y, _2098 * cbSceneParam._m0[_2165].x)));
        float _2193 = cbSceneParam._m0[33u].z * _2188;
        float _2195 = cbSceneParam._m0[33u].w * _2188;
        float _2198 = fma(_2110, cbSceneParam._m0[_2157].w, fma(_2106, cbSceneParam._m0[_2157].z, fma(_2102, cbSceneParam._m0[_2157].y, _2098 * cbSceneParam._m0[_2157].x))) / _2188;
        float _2246 = (cbSceneParam._m0[33u].x - sqrt(((_2112 * _2112) + (_2111 * _2111)) + (_2113 * _2113))) * cbSceneParam._m0[33u].y;
        float _4669 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
        float _2253 = (isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2193 + _2176) / _2188, (_2195 + _2180) / _2188), _2198), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2195 + _2176) / _2188, (_2180 - _2193) / _2188), _2198), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2176 - _2193) / _2188, (_2180 - _2195) / _2188), _2198), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2176 - _2195) / _2188, (_2193 + _2180) / _2188), _2198), 0.0)).x), vec4(0.25)));
        _2260 = 1.0 - (_2253 * cbSceneParam._m0[34u].x);
        _2261 = 1.0 - (_2253 * cbSceneParam._m0[34u].y);
        _2262 = 1.0 - (_2253 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2260 = 1.0;
        _2261 = 1.0;
        _2262 = 1.0;
    }
    float _2326;
    float _2328;
    float _2330;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2314 = fma(_2110, cbSceneParam._m0[63u].w, fma(_2106, cbSceneParam._m0[63u].z, fma(_2102, cbSceneParam._m0[63u].y, _2098 * cbSceneParam._m0[63u].x)));
        float _2315 = fma(_2110, cbSceneParam._m0[60u].w, fma(_2106, cbSceneParam._m0[60u].z, fma(_2102, cbSceneParam._m0[60u].y, _2098 * cbSceneParam._m0[60u].x))) / _2314;
        float _2316 = fma(_2110, cbSceneParam._m0[61u].w, fma(_2106, cbSceneParam._m0[61u].z, fma(_2102, cbSceneParam._m0[61u].y, _2098 * cbSceneParam._m0[61u].x))) / _2314;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2315 >= cbSceneParam._m0[64u].x) && (_2316 >= cbSceneParam._m0[64u].y)) && (_2315 <= cbSceneParam._m0[64u].z)) && (_2316 <= cbSceneParam._m0[64u].w))
        {
            float _2454 = fma(_2110, cbSceneParam._m0[62u].w, fma(_2106, cbSceneParam._m0[62u].z, fma(_2102, cbSceneParam._m0[62u].y, _2098 * cbSceneParam._m0[62u].x))) / _2314;
            float _2458 = isnan(cbSceneParam._m0[41u].w) ? _2454 : (isnan(_2454) ? cbSceneParam._m0[41u].w : max(_2454, cbSceneParam._m0[41u].w));
            float _2501 = (cbSceneParam._m0[33u].x - sqrt(((_2112 * _2112) + (_2111 * _2111)) + (_2113 * _2113))) * cbSceneParam._m0[33u].y;
            float _4685 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
            float _2508 = (isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2315, cbSceneParam._m0[33u].w + _2316), _2458), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2315, _2316 - cbSceneParam._m0[33u].z), _2458), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2315 - cbSceneParam._m0[33u].z, _2316 - cbSceneParam._m0[33u].w), _2458), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2315 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2316), _2458), 0.0)).x), vec4(0.25)));
            float _2512 = 1.0 - (_2508 * cbSceneParam._m0[34u].x);
            float _2513 = 1.0 - (_2508 * cbSceneParam._m0[34u].y);
            float _2514 = 1.0 - (_2508 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2514) ? _2262 : (isnan(_2262) ? _2514 : min(_2262, _2514));
            frontier_phi_37_36_ladder_1 = isnan(_2513) ? _2261 : (isnan(_2261) ? _2513 : min(_2261, _2513));
            frontier_phi_37_36_ladder_2 = isnan(_2512) ? _2260 : (isnan(_2260) ? _2512 : min(_2260, _2512));
        }
        else
        {
            frontier_phi_37_36_ladder = _2262;
            frontier_phi_37_36_ladder_1 = _2261;
            frontier_phi_37_36_ladder_2 = _2260;
        }
        _2326 = frontier_phi_37_36_ladder_2;
        _2328 = frontier_phi_37_36_ladder_1;
        _2330 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2326 = _2260;
        _2328 = _2261;
        _2330 = _2262;
    }
    uvec4 _2335 = floatBitsToUint(cbInstanceData._m0[_259 + 5u]);
    uint _2337 = _2335.x * 14u;
    uint _2338 = _2337 + 13u;
    float _2345 = _1006 + (-1.0);
    float _2350 = (cbLight._m0[_2338].x * _2345) + 1.0;
    float _2351 = (cbLight._m0[_2338].y * _2345) + 1.0;
    float _2352 = (cbLight._m0[_2338].z * _2345) + 1.0;
    float _2353 = (cbLight._m0[_2338].w * _2345) + 1.0;
    uint _2354 = _2337 + 5u;
    float _2360 = isnan(1.0) ? _2351 : (isnan(_2351) ? 1.0 : min(_2351, 1.0));
    uint _2364 = _2337 + 4u;
    float _2373 = isnan(1.0) ? _2350 : (isnan(_2350) ? 1.0 : min(_2350, 1.0));
    uint _2377 = _2337 | 1u;
    float _2388 = dot(vec3(cbLight._m0[_2337].xyz), vec3(_829, _830, _831));
    float _2391 = dot(vec3(cbLight._m0[_2377].xyz), vec3(_829, _830, _831));
    float _4721 = isnan(0.0) ? _2388 : (isnan(_2388) ? 0.0 : max(_2388, 0.0));
    float _4732 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
    float _2396 = (isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0))) * 0.3183098733425140380859375;
    float _2398 = (isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0))) * 0.3183098733425140380859375;
    float _2405 = ((cbLight._m0[_2354].x * _2360) * _2398) + (((cbLight._m0[_2364].x * _2326) * _2373) * _2396);
    float _2406 = ((_2360 * cbLight._m0[_2354].y) * _2398) + (((cbLight._m0[_2364].y * _2328) * _2373) * _2396);
    float _2407 = ((_2360 * cbLight._m0[_2354].z) * _2398) + (((cbLight._m0[_2364].z * _2330) * _2373) * _2396);
    uvec4 _2411 = floatBitsToUint(cbLight._m0[_2337 + 12u]);
    bool _2413 = _2411.x == 0u;
    float _2515;
    float _2517;
    float _2519;
    if (_2413)
    {
        _2515 = _2405;
        _2517 = _2406;
        _2519 = _2407;
    }
    else
    {
        uint _2523 = _2337 + 6u;
        float _2539 = (dot(vec3(cbLight._m0[_2337 + 2u].xyz), vec3(_829, _830, _831)) * 0.5) + 0.5;
        float _2540 = _2539 * _2539;
        float _4743 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
        float _2541 = isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0));
        float _2542 = isnan(1.0) ? _2352 : (isnan(_2352) ? 1.0 : min(_2352, 1.0));
        _2515 = (((cbLight._m0[_2523].x * 0.3183098733425140380859375) * _2541) * _2542) + _2405;
        _2517 = (((cbLight._m0[_2523].y * 0.3183098733425140380859375) * _2541) * _2542) + _2406;
        _2519 = (((cbLight._m0[_2523].z * 0.3183098733425140380859375) * _2541) * _2542) + _2407;
    }
    bool _2522 = _2411.y == 0u;
    float _2577;
    float _2579;
    float _2581;
    if (_2522)
    {
        _2577 = _2515;
        _2579 = _2517;
        _2581 = _2519;
    }
    else
    {
        uint _2750 = _2337 + 7u;
        float _2766 = (dot(vec3(cbLight._m0[_2337 + 3u].xyz), vec3(_829, _830, _831)) * 0.5) + 0.5;
        float _2767 = _2766 * _2766;
        float _4759 = isnan(0.0) ? _2767 : (isnan(_2767) ? 0.0 : max(_2767, 0.0));
        float _2768 = isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0));
        float _2769 = isnan(1.0) ? _2353 : (isnan(_2353) ? 1.0 : min(_2353, 1.0));
        _2577 = (((cbLight._m0[_2750].x * 0.3183098733425140380859375) * _2768) * _2769) + _2515;
        _2579 = (((cbLight._m0[_2750].y * 0.3183098733425140380859375) * _2768) * _2769) + _2517;
        _2581 = (((cbLight._m0[_2750].z * 0.3183098733425140380859375) * _2768) * _2769) + _2519;
    }
    uint _2584 = _2337 + 8u;
    float _2597 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2337].w)) * _832) * 0.949999988079071044921875);
    float _2598 = _2597 * _2597;
    float _2599 = cbLight._m0[_2337].x + _908;
    float _2600 = cbLight._m0[_2337].y + _909;
    float _2601 = cbLight._m0[_2337].z + _910;
    float _2605 = inversesqrt(dot(vec3(_2599, _2600, _2601), vec3(_2599, _2600, _2601)));
    float _2606 = _2605 * _2599;
    float _2607 = _2605 * _2600;
    float _2608 = _2605 * _2601;
    float _2609 = dot(vec3(_829, _830, _831), vec3(cbLight._m0[_2337].xyz));
    float _4775 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0));
    float _2612 = isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0));
    float _4786 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
    float _2613 = isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0));
    float _2614 = dot(vec3(_829, _830, _831), vec3(_2606, _2607, _2608));
    float _4797 = isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : max(_2614, 0.0));
    float _2617 = isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0));
    float _2618 = dot(vec3(cbLight._m0[_2337].xyz), vec3(_2606, _2607, _2608));
    float _4808 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0));
    float _2622 = _2598 * _2598;
    float _2626 = ((_2617 * _2617) * (_2622 + (-1.0))) + 1.0;
    float _2634 = exp2(log2(1.0 - (isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0)))) * 5.0);
    float _2635 = 0.959999978542327880859375 - _987;
    float _2637 = 0.959999978542327880859375 - _988;
    float _2638 = 0.959999978542327880859375 - _989;
    float _2645 = 1.0 - _2598;
    float _2656 = (0.5 / (((_2613 * ((_2612 * _2645) + _2598)) + 9.9999999392252902907785028219223e-09) + (((_2613 * _2645) + _2598) * _2612))) * _2612;
    float _4819 = isnan(0.0) ? _2656 : (isnan(_2656) ? 0.0 : max(_2656, 0.0));
    float _2658 = (isnan(1.0) ? _4819 : (isnan(_4819) ? 1.0 : min(_4819, 1.0))) * (_2622 / ((_2626 * _2626) * 3.141590118408203125));
    uint _2672 = _2337 + 9u;
    float _2683 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2377].w)) * _832) * 0.949999988079071044921875);
    float _2684 = _2683 * _2683;
    float _2685 = cbLight._m0[_2377].x + _908;
    float _2686 = cbLight._m0[_2377].y + _909;
    float _2687 = cbLight._m0[_2377].z + _910;
    float _2691 = inversesqrt(dot(vec3(_2685, _2686, _2687), vec3(_2685, _2686, _2687)));
    float _2692 = _2691 * _2685;
    float _2693 = _2691 * _2686;
    float _2694 = _2691 * _2687;
    float _2695 = dot(vec3(_829, _830, _831), vec3(cbLight._m0[_2377].xyz));
    float _4830 = isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : max(_2695, 0.0));
    float _2698 = isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0));
    float _2699 = dot(vec3(_829, _830, _831), vec3(_2692, _2693, _2694));
    float _4841 = isnan(0.0) ? _2699 : (isnan(_2699) ? 0.0 : max(_2699, 0.0));
    float _2702 = isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0));
    float _2703 = dot(vec3(cbLight._m0[_2377].xyz), vec3(_2692, _2693, _2694));
    float _4852 = isnan(0.0) ? _2703 : (isnan(_2703) ? 0.0 : max(_2703, 0.0));
    float _2707 = _2684 * _2684;
    float _2711 = ((_2702 * _2702) * (_2707 + (-1.0))) + 1.0;
    float _2718 = exp2(log2(1.0 - (isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0)))) * 5.0);
    float _2725 = 1.0 - _2684;
    float _2735 = (0.5 / (((_2613 * ((_2698 * _2725) + _2684)) + 9.9999999392252902907785028219223e-09) + (((_2613 * _2725) + _2684) * _2698))) * _2698;
    float _4863 = isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : max(_2735, 0.0));
    float _2737 = (isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0))) * (_2707 / ((_2711 * _2711) * 3.141590118408203125));
    float _2747 = (((((_2718 * _2635) + _990) * cbLight._m0[_2672].x) * _2737) * _2360) + ((((cbLight._m0[_2584].x * _2326) * ((_2634 * _2635) + _990)) * _2658) * _2373);
    float _2748 = (((((_2718 * _2637) + _992) * cbLight._m0[_2672].y) * _2737) * _2360) + ((((cbLight._m0[_2584].y * _2328) * ((_2634 * _2637) + _992)) * _2658) * _2373);
    float _2749 = (((((_2718 * _2638) + _993) * cbLight._m0[_2672].z) * _2737) * _2360) + ((((cbLight._m0[_2584].z * _2330) * ((_2634 * _2638) + _993)) * _2658) * _2373);
    float _2805;
    float _2807;
    float _2809;
    if (_2413)
    {
        _2805 = _2747;
        _2807 = _2748;
        _2809 = _2749;
    }
    else
    {
        uint _2811 = _2337 + 2u;
        uint _2815 = _2337 + 10u;
        float _2829 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2811].w)) * _832) * 0.949999988079071044921875);
        float _2830 = _2829 * _2829;
        float _2831 = cbLight._m0[_2811].x + _908;
        float _2832 = cbLight._m0[_2811].y + _909;
        float _2833 = cbLight._m0[_2811].z + _910;
        float _2837 = inversesqrt(dot(vec3(_2831, _2832, _2833), vec3(_2831, _2832, _2833)));
        float _2838 = _2837 * _2831;
        float _2839 = _2837 * _2832;
        float _2840 = _2837 * _2833;
        float _2841 = dot(vec3(_829, _830, _831), vec3(cbLight._m0[_2811].xyz));
        float _4874 = isnan(0.0) ? _2841 : (isnan(_2841) ? 0.0 : max(_2841, 0.0));
        float _2844 = isnan(1.0) ? _4874 : (isnan(_4874) ? 1.0 : min(_4874, 1.0));
        float _2845 = dot(vec3(_829, _830, _831), vec3(_2838, _2839, _2840));
        float _4885 = isnan(0.0) ? _2845 : (isnan(_2845) ? 0.0 : max(_2845, 0.0));
        float _2848 = isnan(1.0) ? _4885 : (isnan(_4885) ? 1.0 : min(_4885, 1.0));
        float _2849 = dot(vec3(cbLight._m0[_2811].xyz), vec3(_2838, _2839, _2840));
        float _4896 = isnan(0.0) ? _2849 : (isnan(_2849) ? 0.0 : max(_2849, 0.0));
        float _2853 = _2830 * _2830;
        float _2857 = ((_2848 * _2848) * (_2853 + (-1.0))) + 1.0;
        float _2864 = exp2(log2(1.0 - (isnan(1.0) ? _4896 : (isnan(_4896) ? 1.0 : min(_4896, 1.0)))) * 5.0);
        float _2871 = 1.0 - _2830;
        float _2881 = (0.5 / (((_2613 * ((_2844 * _2871) + _2830)) + 9.9999999392252902907785028219223e-09) + (((_2613 * _2871) + _2830) * _2844))) * _2844;
        float _4907 = isnan(0.0) ? _2881 : (isnan(_2881) ? 0.0 : max(_2881, 0.0));
        float _2883 = (isnan(1.0) ? _4907 : (isnan(_4907) ? 1.0 : min(_4907, 1.0))) * (_2853 / ((_2857 * _2857) * 3.141590118408203125));
        float _2884 = isnan(1.0) ? _2352 : (isnan(_2352) ? 1.0 : min(_2352, 1.0));
        _2805 = (((((_2864 * _2635) + _990) * cbLight._m0[_2815].x) * _2883) * _2884) + _2747;
        _2807 = (((((_2864 * _2637) + _992) * cbLight._m0[_2815].y) * _2883) * _2884) + _2748;
        _2809 = (((((_2864 * _2638) + _993) * cbLight._m0[_2815].z) * _2883) * _2884) + _2749;
    }
    float _2915;
    float _2917;
    float _2919;
    if (_2522)
    {
        _2915 = _2805;
        _2917 = _2807;
        _2919 = _2809;
    }
    else
    {
        uint _2926 = _2337 + 3u;
        uint _2930 = _2337 + 11u;
        float _2944 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2926].w)) * _832) * 0.949999988079071044921875);
        float _2945 = _2944 * _2944;
        float _2946 = cbLight._m0[_2926].x + _908;
        float _2947 = cbLight._m0[_2926].y + _909;
        float _2948 = cbLight._m0[_2926].z + _910;
        float _2952 = inversesqrt(dot(vec3(_2946, _2947, _2948), vec3(_2946, _2947, _2948)));
        float _2953 = _2952 * _2946;
        float _2954 = _2952 * _2947;
        float _2955 = _2952 * _2948;
        float _2956 = dot(vec3(_829, _830, _831), vec3(cbLight._m0[_2926].xyz));
        float _4923 = isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : max(_2956, 0.0));
        float _2959 = isnan(1.0) ? _4923 : (isnan(_4923) ? 1.0 : min(_4923, 1.0));
        float _2960 = dot(vec3(_829, _830, _831), vec3(_2953, _2954, _2955));
        float _4934 = isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : max(_2960, 0.0));
        float _2963 = isnan(1.0) ? _4934 : (isnan(_4934) ? 1.0 : min(_4934, 1.0));
        float _2964 = dot(vec3(cbLight._m0[_2926].xyz), vec3(_2953, _2954, _2955));
        float _4945 = isnan(0.0) ? _2964 : (isnan(_2964) ? 0.0 : max(_2964, 0.0));
        float _2968 = _2945 * _2945;
        float _2972 = ((_2963 * _2963) * (_2968 + (-1.0))) + 1.0;
        float _2979 = exp2(log2(1.0 - (isnan(1.0) ? _4945 : (isnan(_4945) ? 1.0 : min(_4945, 1.0)))) * 5.0);
        float _2986 = 1.0 - _2945;
        float _2996 = (0.5 / (((_2613 * ((_2959 * _2986) + _2945)) + 9.9999999392252902907785028219223e-09) + (((_2613 * _2986) + _2945) * _2959))) * _2959;
        float _4956 = isnan(0.0) ? _2996 : (isnan(_2996) ? 0.0 : max(_2996, 0.0));
        float _2998 = (isnan(1.0) ? _4956 : (isnan(_4956) ? 1.0 : min(_4956, 1.0))) * (_2968 / ((_2972 * _2972) * 3.141590118408203125));
        float _2999 = isnan(1.0) ? _2353 : (isnan(_2353) ? 1.0 : min(_2353, 1.0));
        _2915 = (((((_2979 * _2635) + _990) * cbLight._m0[_2930].x) * _2998) * _2999) + _2805;
        _2917 = (((((_2979 * _2637) + _992) * cbLight._m0[_2930].y) * _2998) * _2999) + _2807;
        _2919 = (((((_2979 * _2638) + _993) * cbLight._m0[_2930].z) * _2998) * _2999) + _2809;
    }
    float _3065;
    float _3067;
    float _3069;
    float _3071;
    float _3073;
    float _3075;
    if (_2335.y == 0u)
    {
        uvec4 _3020 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3021 = _3020.x;
        uint _3032 = uint((float(_3020.y) * floor(float(uint(cbSceneParam._m0[85u].y * _929) / _3021))) + floor(float(uint(cbSceneParam._m0[85u].x * _928) / _3021)));
        float _3042 = (log2(_2113 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3043 = isnan(0.0) ? _3042 : (isnan(_3042) ? 0.0 : max(_3042, 0.0));
        uint _3046 = uint(isnan(14.0) ? _3043 : (isnan(_3043) ? 14.0 : min(_3043, 14.0)));
        uvec4 _3051 = texelFetch(g_lightClusterGridBuffer, int(((_3046 << 2u) + (_3032 << 6u)) >> 2u));
        uint _3052 = _3051.x;
        uint _3053 = _3020.z;
        float _3132;
        float _3134;
        float _3136;
        float _3138;
        float _3140;
        float _3142;
        if (((((1u << ((_3053 >> 4u) & 15u)) + 4294967295u) & _3052) == 0u) || ((_3053 & 240u) == 0u))
        {
            _3132 = 0.0;
            _3134 = 0.0;
            _3136 = 0.0;
            _3138 = 0.0;
            _3140 = 0.0;
            _3142 = 0.0;
        }
        else
        {
            float _3133;
            float _3135;
            float _3137;
            float _3139;
            float _3141;
            float _3143;
            float _3284 = 0.0;
            float _3285 = 0.0;
            float _3286 = 0.0;
            float _3287 = 0.0;
            float _3288 = 0.0;
            float _3289 = 0.0;
            uint _3290 = 0u;
            uint _3299;
            bool _3300;
            for (;;)
            {
                _3299 = texelFetch(g_lightClassification, int((((_3046 << 5u) + (_3032 << 9u)) + (_3290 << 2u)) >> 2u)).x;
                _3300 = _3299 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3300)
                {
                    frontier_phi_71_pred = _3289;
                    frontier_phi_71_pred_1 = _3288;
                    frontier_phi_71_pred_2 = _3287;
                    frontier_phi_71_pred_3 = _3286;
                    frontier_phi_71_pred_4 = _3285;
                    frontier_phi_71_pred_5 = _3284;
                }
                else
                {
                    float _3429;
                    float _3430;
                    float _3431;
                    float _3432;
                    float _3433;
                    float _3434;
                    uint _3435;
                    _3429 = _3284;
                    _3430 = _3285;
                    _3431 = _3286;
                    _3432 = _3287;
                    _3433 = _3288;
                    _3434 = _3289;
                    _3435 = _3299;
                    float _3356;
                    float _3357;
                    float _3358;
                    float _3359;
                    float _3360;
                    float _3361;
                    for (;;)
                    {
                        uint _3439 = uint(findLSB(_3435)) + (_3290 << 5u);
                        uint _3436 = (_3435 + 4294967295u) & _3435;
                        uint _3441 = _3439 * 48u;
                        vec4 _3455 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3441)).x, texelFetch(g_PointLightRenderingBuffer, int(_3441 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3441 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3441 + 3u)).x));
                        uint _3461 = (_3439 * 48u) + 4u;
                        vec4 _3474 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3461)).x, texelFetch(g_PointLightRenderingBuffer, int(_3461 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3461 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3461 + 3u)).x));
                        uint _3480 = (_3439 * 48u) + 8u;
                        vec3 _3491 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3480)).x, texelFetch(g_PointLightRenderingBuffer, int(_3480 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3480 + 2u)).x));
                        float _3495 = _3455.x - _2111;
                        float _3496 = _3455.y - _2112;
                        float _3497 = _3455.z - _2113;
                        float _3498 = dot(vec3(_3495, _3496, _3497), vec3(_3495, _3496, _3497));
                        float _3501 = inversesqrt(_3498);
                        float _3502 = _3501 * _3495;
                        float _3503 = _3501 * _3496;
                        float _3504 = _3501 * _3497;
                        float _3505 = dot(vec3(_947, _950, _953), vec3(_3502, _3503, _3504));
                        float _3510 = 1.0 - (_3498 * _3455.w);
                        float _4982 = isnan(0.0) ? _3510 : (isnan(_3510) ? 0.0 : max(_3510, 0.0));
                        float _3511 = isnan(1.0) ? _4982 : (isnan(_4982) ? 1.0 : min(_4982, 1.0));
                        float _3512 = sqrt(_3498) * _3474.w;
                        float _3515 = 1.39999997615814208984375 / (_3512 + 1.39999997615814208984375);
                        float _3516 = _3515 * _3515;
                        float _3519 = ((1.0 - _3516) * _3505) + _3516;
                        float _3522 = _3512 * _3512;
                        float _3526 = ((isnan(0.0) ? _3519 : (isnan(_3519) ? 0.0 : max(_3519, 0.0))) * _3511) / ((_3522 * 0.699999988079071044921875) + 1.0);
                        float _3530 = (-0.0) - _2111;
                        float _3531 = (-0.0) - _2112;
                        float _3532 = (-0.0) - _2113;
                        float _3536 = inversesqrt(dot(vec3(_3530, _3531, _3532), vec3(_3530, _3531, _3532)));
                        float _3537 = _3536 * _3530;
                        float _3538 = _3536 * _3531;
                        float _3539 = _3536 * _3532;
                        float _3546 = exp2(log2(1.0 / ((_3522 * 3.5) + 5.0)) * 0.25);
                        float _3547 = 1.0 - _1022;
                        float _3554 = sqrt(1.0 - ((1.0 - (_3547 * _3547)) * (1.0 - (_3546 * _3546))));
                        float _3555 = _3554 * _3554;
                        float _3556 = _3555 * _3555;
                        float _3557 = _3537 + _3502;
                        float _3558 = _3538 + _3503;
                        float _3559 = _3539 + _3504;
                        float _3563 = inversesqrt(dot(vec3(_3557, _3558, _3559), vec3(_3557, _3558, _3559)));
                        float _3567 = dot(vec3(_947, _950, _953), vec3(_3537, _3538, _3539));
                        float _4998 = isnan(0.0) ? _3567 : (isnan(_3567) ? 0.0 : max(_3567, 0.0));
                        float _3570 = isnan(1.0) ? _4998 : (isnan(_4998) ? 1.0 : min(_4998, 1.0));
                        float _3571 = dot(vec3(_947, _950, _953), vec3(_3563 * _3557, _3563 * _3558, _3563 * _3559));
                        float _5009 = isnan(0.0) ? _3571 : (isnan(_3571) ? 0.0 : max(_3571, 0.0));
                        float _3574 = isnan(1.0) ? _5009 : (isnan(_5009) ? 1.0 : min(_5009, 1.0));
                        float _3578 = ((_3574 * _3574) * (_3556 + (-1.0))) + 1.0;
                        float _3579 = _3515 * _3555;
                        float _3580 = _3579 * _3579;
                        float _3583 = ((1.0 - _3580) * _3505) + _3580;
                        float _5020 = isnan(0.0) ? _3583 : (isnan(_3583) ? 0.0 : max(_3583, 0.0));
                        float _3584 = isnan(1.0) ? _5020 : (isnan(_5020) ? 1.0 : min(_5020, 1.0));
                        float _3585 = 1.0 - _3555;
                        float _3595 = (0.5 / (((_3584 * ((_3570 * _3585) + _3555)) + 9.9999999392252902907785028219223e-09) + (((_3584 * _3585) + _3555) * _3570))) * _3584;
                        float _5031 = isnan(0.0) ? _3595 : (isnan(_3595) ? 0.0 : max(_3595, 0.0));
                        float _3606 = (((_3556 * 3.1415927410125732421875) * (isnan(1.0) ? _5031 : (isnan(_5031) ? 1.0 : min(_5031, 1.0)))) / ((_3578 * _3578) * ((_3522 * 2.1991131305694580078125) + 3.141590118408203125))) * _3511;
                        _3359 = (_3526 * _3474.x) + _3432;
                        _3360 = (_3526 * _3474.y) + _3433;
                        _3361 = (_3526 * _3474.z) + _3434;
                        _3356 = (_3606 * _3491.x) + _3429;
                        _3357 = (_3606 * _3491.y) + _3430;
                        _3358 = (_3606 * _3491.z) + _3431;
                        if (_3436 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3429 = _3356;
                            _3430 = _3357;
                            _3431 = _3358;
                            _3432 = _3359;
                            _3433 = _3360;
                            _3434 = _3361;
                            _3435 = _3436;
                        }
                    }
                    frontier_phi_71_pred = _3361;
                    frontier_phi_71_pred_1 = _3360;
                    frontier_phi_71_pred_2 = _3359;
                    frontier_phi_71_pred_3 = _3358;
                    frontier_phi_71_pred_4 = _3357;
                    frontier_phi_71_pred_5 = _3356;
                }
                _3143 = frontier_phi_71_pred;
                _3141 = frontier_phi_71_pred_1;
                _3139 = frontier_phi_71_pred_2;
                _3137 = frontier_phi_71_pred_3;
                _3135 = frontier_phi_71_pred_4;
                _3133 = frontier_phi_71_pred_5;
                uint _3291 = _3290 + 1u;
                if (_3291 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3284 = _3133;
                    _3285 = _3135;
                    _3286 = _3137;
                    _3287 = _3139;
                    _3288 = _3141;
                    _3289 = _3143;
                    _3290 = _3291;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3132 = _3133;
            _3134 = _3135;
            _3136 = _3137;
            _3138 = _3139;
            _3140 = _3141;
            _3142 = _3143;
        }
        uvec4 _3146 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3147 = _3146.z;
        uint _3149 = (_3147 >> 8u) & 15u;
        float _3252;
        float _3254;
        float _3256;
        float _3258;
        float _3260;
        float _3262;
        if (((4294967295u << _3149) & _3052) == 0u)
        {
            _3252 = _3132;
            _3254 = _3134;
            _3256 = _3136;
            _3258 = _3138;
            _3260 = _3140;
            _3262 = _3142;
        }
        else
        {
            float _3277 = inversesqrt(dot(vec3(_2111, _2112, _2113), vec3(_2111, _2112, _2113)));
            float _3278 = _3277 * _2111;
            float _3279 = _3277 * _2112;
            float _3280 = _3277 * _2113;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3149 < ((_3147 >> 12u) & 15u))
            {
                float _3253;
                float _3255;
                float _3257;
                float _3259;
                float _3261;
                float _3263;
                float _3412 = _3132;
                float _3413 = _3134;
                float _3414 = _3136;
                float _3415 = _3138;
                float _3416 = _3140;
                float _3417 = _3142;
                uint _3418 = _3149;
                uint _3427;
                bool _3428;
                for (;;)
                {
                    _3427 = texelFetch(g_lightClassification, int((((_3046 << 5u) + (_3032 << 9u)) + (_3418 << 2u)) >> 2u)).x;
                    _3428 = _3427 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3428)
                    {
                        frontier_phi_82_pred = _3417;
                        frontier_phi_82_pred_1 = _3416;
                        frontier_phi_82_pred_2 = _3415;
                        frontier_phi_82_pred_3 = _3414;
                        frontier_phi_82_pred_4 = _3413;
                        frontier_phi_82_pred_5 = _3412;
                    }
                    else
                    {
                        float _3620;
                        float _3621;
                        float _3622;
                        float _3623;
                        float _3624;
                        float _3625;
                        float _3914;
                        float _3915;
                        float _3916;
                        float _3917;
                        float _3918;
                        float _3919;
                        float _3633 = _3412;
                        float _3634 = _3413;
                        float _3635 = _3414;
                        float _3636 = _3415;
                        float _3637 = _3416;
                        float _3638 = _3417;
                        uint _3639 = _3427;
                        uint _3640;
                        vec4 _3665;
                        float _3666;
                        vec4 _3681;
                        vec3 _3693;
                        vec4 _3708;
                        vec4 _3724;
                        float _3770;
                        bool _3771;
                        for (;;)
                        {
                            uint _3650 = ((_3418 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3639));
                            _3640 = (_3639 + 4294967295u) & _3639;
                            uint _3652 = _3650 * 40u;
                            _3665 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3652)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3652 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3652 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3652 + 3u)).x));
                            _3666 = _3665.w;
                            uint _3668 = (_3650 * 40u) + 4u;
                            _3681 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3668)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3668 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3668 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3668 + 3u)).x));
                            uint _3683 = (_3650 * 40u) + 8u;
                            _3693 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3683)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3683 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3683 + 2u)).x));
                            uint _3695 = (_3650 * 40u) + 16u;
                            _3708 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3695)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3695 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3695 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3695 + 3u)).x));
                            uint _3711 = (_3650 * 40u) + 20u;
                            _3724 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3711)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3711 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3711 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3711 + 3u)).x));
                            uint _3726 = (_3650 * 40u) + 24u;
                            vec4 _3739 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3726)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3726 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3726 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3726 + 3u)).x));
                            uint _3745 = (_3650 * 40u) + 28u;
                            vec4 _3758 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3745)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3745 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3745 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3745 + 3u)).x));
                            _3770 = fma(_2113, _3758.z, fma(_2112, _3758.y, _3758.x * _2111)) + _3758.w;
                            _3771 = !((fma(_2113, _3739.z, fma(_2112, _3739.y, _3739.x * _2111)) + _3739.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3771)
                            {
                                float _3798 = _3665.x - _2111;
                                float _3799 = _3665.y - _2112;
                                float _3800 = _3665.z - _2113;
                                float _3801 = dot(vec3(_3798, _3799, _3800), vec3(_3798, _3799, _3800));
                                float _3804 = inversesqrt(_3801);
                                float _3805 = _3804 * _3798;
                                float _3806 = _3804 * _3799;
                                float _3807 = _3804 * _3800;
                                float _3811 = 1.0 - (_3801 / (_3666 * _3666));
                                float _5042 = isnan(0.0) ? _3811 : (isnan(_3811) ? 0.0 : max(_3811, 0.0));
                                float _3812 = isnan(1.0) ? _5042 : (isnan(_5042) ? 1.0 : min(_5042, 1.0));
                                float _3816 = sqrt(_3801) * _3681.w;
                                float _3818 = 1.39999997615814208984375 / (_3816 + 1.39999997615814208984375);
                                float _3819 = _3818 * _3818;
                                float _3822 = ((1.0 - _3819) * dot(vec3(_3805, _3806, _3807), vec3(_947, _950, _953))) + _3819;
                                float _3825 = _3816 * _3816;
                                float _3829 = (fma(_2113, _3708.z, fma(_2112, _3708.y, _3708.x * _2111)) + _3708.w) / _3770;
                                float _3830 = (fma(_2113, _3724.z, fma(_2112, _3724.y, _3724.x * _2111)) + _3724.w) / _3770;
                                float _3834 = 1.0 - dot(vec2(_3829, _3830), vec2(_3829, _3830));
                                float _5058 = isnan(0.0) ? _3834 : (isnan(_3834) ? 0.0 : max(_3834, 0.0));
                                float _3835 = isnan(1.0) ? _5058 : (isnan(_5058) ? 1.0 : min(_5058, 1.0));
                                float _3836 = _3835 * (((isnan(0.0) ? _3822 : (isnan(_3822) ? 0.0 : max(_3822, 0.0))) * _3812) / ((_3825 * 0.699999988079071044921875) + 1.0));
                                float _3848 = exp2(log2(1.0 / ((_3825 * 3.5) + 5.0)) * 0.25);
                                float _3849 = 1.0 - _1022;
                                float _3856 = sqrt(1.0 - ((1.0 - (_3849 * _3849)) * (1.0 - (_3848 * _3848))));
                                float _3857 = _3856 * _3856;
                                float _3858 = _3857 * _3857;
                                float _3859 = _3805 - _3278;
                                float _3860 = _3806 - _3279;
                                float _3861 = _3807 - _3280;
                                float _3865 = inversesqrt(dot(vec3(_3859, _3860, _3861), vec3(_3859, _3860, _3861)));
                                float _3869 = dot(vec3(_947, _950, _953), vec3((-0.0) - _3278, (-0.0) - _3279, (-0.0) - _3280));
                                float _5069 = isnan(0.0) ? _3869 : (isnan(_3869) ? 0.0 : max(_3869, 0.0));
                                float _3872 = isnan(1.0) ? _5069 : (isnan(_5069) ? 1.0 : min(_5069, 1.0));
                                float _3873 = dot(vec3(_947, _950, _953), vec3(_3865 * _3859, _3865 * _3860, _3865 * _3861));
                                float _5080 = isnan(0.0) ? _3873 : (isnan(_3873) ? 0.0 : max(_3873, 0.0));
                                float _3876 = isnan(1.0) ? _5080 : (isnan(_5080) ? 1.0 : min(_5080, 1.0));
                                float _3880 = ((_3876 * _3876) * (_3858 + (-1.0))) + 1.0;
                                float _3881 = _3818 * _3857;
                                float _3882 = _3881 * _3881;
                                float _3888 = ((1.0 - _3882) * dot(vec3(_947, _950, _953), vec3(_3805, _3806, _3807))) + _3882;
                                float _5091 = isnan(0.0) ? _3888 : (isnan(_3888) ? 0.0 : max(_3888, 0.0));
                                float _3889 = isnan(1.0) ? _5091 : (isnan(_5091) ? 1.0 : min(_5091, 1.0));
                                float _3890 = 1.0 - _3857;
                                float _3900 = (0.5 / (((_3889 * ((_3872 * _3890) + _3857)) + 9.9999999392252902907785028219223e-09) + (((_3889 * _3890) + _3857) * _3872))) * _3889;
                                float _5102 = isnan(0.0) ? _3900 : (isnan(_3900) ? 0.0 : max(_3900, 0.0));
                                float _3910 = (_3835 * _3812) * (((_3858 * 3.1415927410125732421875) * (isnan(1.0) ? _5102 : (isnan(_5102) ? 1.0 : min(_5102, 1.0)))) / ((_3880 * _3880) * ((_3825 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3836 * _3681.z;
                                frontier_phi_88_pred_1 = _3836 * _3681.y;
                                frontier_phi_88_pred_2 = _3836 * _3681.x;
                                frontier_phi_88_pred_3 = _3910 * _3693.z;
                                frontier_phi_88_pred_4 = _3910 * _3693.y;
                                frontier_phi_88_pred_5 = _3910 * _3693.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3919 = frontier_phi_88_pred;
                            _3918 = frontier_phi_88_pred_1;
                            _3917 = frontier_phi_88_pred_2;
                            _3916 = frontier_phi_88_pred_3;
                            _3915 = frontier_phi_88_pred_4;
                            _3914 = frontier_phi_88_pred_5;
                            _3623 = _3917 + _3636;
                            _3624 = _3918 + _3637;
                            _3625 = _3919 + _3638;
                            _3620 = _3914 + _3633;
                            _3621 = _3915 + _3634;
                            _3622 = _3916 + _3635;
                            if (_3640 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3633 = _3620;
                                _3634 = _3621;
                                _3635 = _3622;
                                _3636 = _3623;
                                _3637 = _3624;
                                _3638 = _3625;
                                _3639 = _3640;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3625;
                        frontier_phi_82_pred_1 = _3624;
                        frontier_phi_82_pred_2 = _3623;
                        frontier_phi_82_pred_3 = _3622;
                        frontier_phi_82_pred_4 = _3621;
                        frontier_phi_82_pred_5 = _3620;
                    }
                    _3263 = frontier_phi_82_pred;
                    _3261 = frontier_phi_82_pred_1;
                    _3259 = frontier_phi_82_pred_2;
                    _3257 = frontier_phi_82_pred_3;
                    _3255 = frontier_phi_82_pred_4;
                    _3253 = frontier_phi_82_pred_5;
                    uint _3419 = _3418 + 1u;
                    if (_3419 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3412 = _3253;
                        _3413 = _3255;
                        _3414 = _3257;
                        _3415 = _3259;
                        _3416 = _3261;
                        _3417 = _3263;
                        _3418 = _3419;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3259;
                frontier_phi_63_64_ladder_1 = _3263;
                frontier_phi_63_64_ladder_2 = _3261;
                frontier_phi_63_64_ladder_3 = _3257;
                frontier_phi_63_64_ladder_4 = _3255;
                frontier_phi_63_64_ladder_5 = _3253;
            }
            else
            {
                frontier_phi_63_64_ladder = _3138;
                frontier_phi_63_64_ladder_1 = _3142;
                frontier_phi_63_64_ladder_2 = _3140;
                frontier_phi_63_64_ladder_3 = _3136;
                frontier_phi_63_64_ladder_4 = _3134;
                frontier_phi_63_64_ladder_5 = _3132;
            }
            _3252 = frontier_phi_63_64_ladder_5;
            _3254 = frontier_phi_63_64_ladder_4;
            _3256 = frontier_phi_63_64_ladder_3;
            _3258 = frontier_phi_63_64_ladder;
            _3260 = frontier_phi_63_64_ladder_2;
            _3262 = frontier_phi_63_64_ladder_1;
        }
        float _3267 = isnan(1.0) ? _1006 : (isnan(_1006) ? 1.0 : min(_1006, 1.0));
        _3065 = (_3267 * _3258) + _2577;
        _3067 = (_3267 * _3260) + _2579;
        _3069 = (_3267 * _3262) + _2581;
        _3071 = ((_3252 * _990) * _3267) + _2915;
        _3073 = ((_3254 * _992) * _3267) + _2917;
        _3075 = ((_3256 * _993) * _3267) + _2919;
    }
    else
    {
        _3065 = _2577;
        _3067 = _2579;
        _3069 = _2581;
        _3071 = _2915;
        _3073 = _2917;
        _3075 = _2919;
    }
    float _5118 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
    float _5129 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
    float _5140 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
    float _3092 = ((isnan(1.0) ? _5118 : (isnan(_5118) ? 1.0 : min(_5118, 1.0))) * (_3065 + ((isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0))) * _1006))) + ((_3071 + ((isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0))) * _1845)) * cbPerFrame._m0[3u].x);
    float _3093 = ((isnan(1.0) ? _5129 : (isnan(_5129) ? 1.0 : min(_5129, 1.0))) * (_3067 + ((isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0))) * _1006))) + ((_3073 + ((isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0))) * _1845)) * cbPerFrame._m0[3u].x);
    float _3094 = ((isnan(1.0) ? _5140 : (isnan(_5140) ? 1.0 : min(_5140, 1.0))) * (_3069 + ((isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0))) * _1006))) + ((_3075 + ((isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0))) * _1845)) * cbPerFrame._m0[3u].x);
    uint _3095 = _259 + 6u;
    float _3103 = _928 / cbSceneParam._m0[86u].x;
    float _3104 = _929 / cbSceneParam._m0[86u].y;
    vec4 _3118 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3103, _3104, (log2((isnan(cbSceneParam._m0[77u].w) ? _851 : (isnan(_851) ? cbSceneParam._m0[77u].w : min(_851, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3120 = _3118.x;
    float _3121 = _3118.y;
    float _3122 = _3118.z;
    float _3123 = _3118.w;
    float _3194;
    float _3196;
    float _3198;
    float _3200;
    if (_851 > cbSceneParam._m0[78u].w)
    {
        float _3157 = isnan(_851) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _851 : min(cbSceneParam._m0[80u].w, _851));
        float _3158 = _3157 / _851;
        float _3169 = _3158 * _901;
        float _3170 = _902 * _3158;
        float _3171 = (-0.0) - _3170;
        float _3172 = _3158 * _903;
        float _3174 = (cbSceneParam._m0[77u].w * _3171) / _3157;
        float _3175 = _3174 + cbSceneParam._m0[79u].w;
        float _3176 = cbSceneParam._m0[79u].w - _3170;
        float _3182 = sqrt(((_3169 * _3169) + (_3170 * _3170)) + (_3172 * _3172));
        float _3185 = (1.0 - (cbSceneParam._m0[77u].w / _3157)) * _3182;
        float _3190 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3192 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3369;
        if (abs((_3171 - _3174) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3369 = ((((_3175 > 0.0) ? exp2(_3190 * _3175) : (2.0 - exp2(_3192 * _3175))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3185;
        }
        else
        {
            float _3313 = 1.0 / cbSceneParam._m0[80u].x;
            float _3314 = isnan(_3176) ? _3175 : (isnan(_3175) ? _3176 : max(_3175, _3176));
            float _3315 = isnan(_3176) ? _3175 : (isnan(_3175) ? _3176 : min(_3175, _3176));
            float _3324 = isnan(0.0) ? _3314 : (isnan(_3314) ? 0.0 : min(_3314, 0.0));
            float _3325 = isnan(0.0) ? _3315 : (isnan(_3315) ? 0.0 : min(_3315, 0.0));
            _3369 = ((abs(_3182 / _3171) * cbSceneParam._m0[80u].y) * ((((_3324 - _3325) * 2.0) - ((exp2(_3190 * (isnan(0.0) ? _3314 : (isnan(_3314) ? 0.0 : max(_3314, 0.0)))) - exp2(_3190 * (isnan(0.0) ? _3315 : (isnan(_3315) ? 0.0 : max(_3315, 0.0))))) * _3313)) - ((exp2(_3192 * _3324) - exp2(_3192 * _3325)) * _3313))) + (_3185 * cbSceneParam._m0[80u].z);
        }
        vec4 _3371 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3103, _3104, 1.0), 0.0);
        float _3380 = exp2((_3369 * (-1.44269502162933349609375)) * (1.0 - _3371.w));
        float _3381 = log2(_3380);
        float _3397 = log2(_3123);
        _3194 = (exp2(_3397 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3381 * cbSceneParam._m0[78u].x)) * _3371.x) / cbSceneParam._m0[78u].x)) + _3120;
        _3196 = (exp2(_3397 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3381 * cbSceneParam._m0[78u].y)) * _3371.y) / cbSceneParam._m0[78u].y)) + _3121;
        _3198 = (exp2(_3397 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3381 * cbSceneParam._m0[78u].z)) * _3371.z) / cbSceneParam._m0[78u].z)) + _3122;
        _3200 = _3380 * _3123;
    }
    else
    {
        _3194 = _3120;
        _3196 = _3121;
        _3198 = _3122;
        _3200 = _3123;
    }
    bool _3407;
    vec4 _3210;
    vec4 _3232;
    float _3234;
    float _3238;
    float _3239;
    float _3240;
    float _3241;
    bool _3251;
    for (;;)
    {
        _3210 = cbMatDynParam._m0[0u];
        float _3212 = roundEven(_3210.y);
        bool _3213 = _3212 == 3.0;
        float _3214 = log2(_3200);
        float _3221 = exp2(_3214 * cbSceneParam._m0[78u].x) * _3092;
        float _3222 = exp2(_3214 * cbSceneParam._m0[78u].y) * _3093;
        float _3223 = exp2(_3214 * cbSceneParam._m0[78u].z) * _3094;
        float _3230 = _917 + (-0.5);
        _3232 = cbMtdParam._m0[1u];
        _3234 = _3232.y * _3230;
        float _3237 = (_3212 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3238 = _3237 * (_3213 ? _3221 : (_3221 + (cbSceneParam._m0[72u].w * _3194)));
        _3239 = _3237 * (_3213 ? _3222 : (_3222 + (cbSceneParam._m0[72u].w * _3196)));
        _3240 = _3237 * (_3213 ? _3223 : (_3223 + (cbSceneParam._m0[72u].w * _3198)));
        _3241 = _3230 * 0.999000012874603271484375;
        _3251 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3251)
        {
            if ((cbInstanceData._m0[_259 + 7u].x + _3241) < 0.5)
            {
                _3407 = true;
                break;
            }
        }
        uint _3348 = _966 + uint(_3210.w);
        if ((cbInstanceData._m0[_3348].w < 1.0) && ((cbInstanceData._m0[_3348].w + _3241) < 0.5))
        {
            _3407 = true;
            break;
        }
        if ((_3234 + 1.0) < _3232.x)
        {
            _3407 = true;
            break;
        }
        _3407 = false;
        break;
    }
    float _3611;
    if (_3407)
    {
        discard_state = true;
        _3611 = 0.0;
    }
    else
    {
        _3611 = cbInstanceData._m0[_3095].w;
    }
    SV_Target.x = _3238;
    SV_Target.y = _3239;
    SV_Target.z = _3240;
    SV_Target.w = _3611;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3095].w;
    discard_exit();
}


