#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1315;
float _3718;
float _3719;
float _3720;
float _3721;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _220 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _221 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _222 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _228 = inversesqrt(dot(vec3(_220, _221, _222), vec3(_220, _221, _222)));
    float _229 = _228 * _220;
    float _230 = _228 * _221;
    float _231 = _228 * _222;
    float _235 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _236 = _235 * NORMAL.x;
    float _237 = _235 * NORMAL.y;
    float _238 = _235 * NORMAL.z;
    float _242 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _243 = _242 * TANGENT.x;
    float _244 = _242 * TANGENT.y;
    float _245 = _242 * TANGENT.z;
    uint _248 = uint(roundEven(NORMAL.w)) * 13u;
    uint _254 = _248 + 1u;
    uint _258 = _248 + 2u;
    float _267 = sqrt(((cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x) + (cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x)) + (cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x));
    float _268 = _267 * TEXCOORD.z;
    float _269 = _267 * TEXCOORD.w;
    vec4 _289 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _295 = _289.x * cbMtdParam._m0[11u].x;
    float _296 = _289.y * cbMtdParam._m0[11u].y;
    float _297 = _289.z * cbMtdParam._m0[11u].z;
    vec4 _316 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _268) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _269) + cbTextureTilingScale._m0[5u].w));
    vec4 _354 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _356 = _354.x;
    float _368 = dot(vec4(_356, _354.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _385 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_356 - _368) * cbMtdParam._m0[24u].y) + _368) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3730 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _386 = isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0));
    float _393 = (_386 * ((_316.x * cbMtdParam._m0[12u].x) - _295)) + _295;
    float _394 = (_386 * ((_316.y * cbMtdParam._m0[12u].y) - _296)) + _296;
    float _395 = (_386 * ((_316.z * cbMtdParam._m0[12u].z) - _297)) + _297;
    vec4 _414 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _268) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _269) + cbTextureTilingScale._m0[14u].w));
    vec4 _434 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _268) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _269) + cbTextureTilingScale._m0[20u].w));
    vec4 _461 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _268) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _269) + cbTextureTilingScale._m0[4u].w));
    vec4 _478 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _480 = _478.x;
    float _481 = _478.y;
    float _482 = _478.z;
    float _491 = ((_461.z - _482) * _386) + _482;
    float _494 = ((((_461.x - _480) * _386) + _480) * 2.0) + (-1.0);
    float _495 = ((((_461.y - _481) * _386) + _481) * 2.0) + (-1.0);
    float _496 = dot(vec2(_494, _495), vec2(_494, _495));
    float _3741 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _501 = sqrt(1.0 - (isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0))));
    vec4 _521 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _533 = (_494 + ((((_434.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_521.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _534 = (_495 + ((((_434.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_521.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _537 = fma(_501, _236, fma(_534, _243, _533 * _229));
    float _540 = fma(_501, _237, fma(_534, _244, _533 * _230));
    float _543 = fma(_501, _238, fma(_534, _245, _533 * _231));
    float _547 = inversesqrt(dot(vec3(_537, _540, _543), vec3(_537, _540, _543)));
    vec4 _574 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _268) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _269) + cbTextureTilingScale._m0[11u].w));
    float _576 = _574.x;
    float _577 = 1.0 - _576;
    float _581 = ((_576 - _577) * cbMtdParam._m0[24u].z) + _577;
    float _583 = (cbMtdParam._m0[19u].x + dot(vec4(_547 * _537, _547 * _540, _547 * _543, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_581 * cbMtdParam._m0[21u].z);
    float _3752 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _584 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
    float _599 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_581 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3763 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _600 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
    float _604 = ((_584 * ((_414.x * cbMtdParam._m0[18u].x) - _393)) * _600) + _393;
    float _605 = ((_584 * ((_414.y * cbMtdParam._m0[18u].y) - _394)) * _600) + _394;
    float _606 = ((_584 * ((_414.z * cbMtdParam._m0[18u].z) - _395)) * _600) + _395;
    vec4 _618 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _632 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _634 = _632.x;
    float _652 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _268) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _269) + cbTextureTilingScale._m0[9u].w)).x - _634) * _386) + _634;
    float _656 = ((_618.x - _652) * cbMtdParam._m0[19u].z) + _652;
    float _659 = _656 - ((_600 * _584) * _656);
    float _664 = (((_434.z - _491) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _491;
    float _668 = ((_521.z - _664) * cbMtdParam._m0[19u].w) + _664;
    vec4 _681 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _268) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _269) + cbTextureTilingScale._m0[15u].w));
    float _688 = (_681.x * 2.0) + (-1.0);
    float _689 = (_681.y * 2.0) + (-1.0);
    float _690 = dot(vec2(_688, _689), vec2(_688, _689));
    float _3774 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _699 = (((_681.z - _668) * _584) * _600) + _668;
    float _714 = (((cbMtdParam._m0[21u].x * _533) + ((_688 - _533) * _584)) * _600) + _533;
    float _715 = (((cbMtdParam._m0[21u].x * _534) + ((_689 - _534) * _584)) * _600) + _534;
    float _716 = (((sqrt(1.0 - (isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0)))) - _501) * _584) * _600) + _501;
    float _721 = cbMtdParam._m0[22u].x + _521.w;
    float _724 = fma(_716, _236, fma(_715, _243, _714 * _229));
    float _727 = fma(_716, _237, fma(_715, _244, _714 * _230));
    float _730 = fma(_716, _238, fma(_715, _245, _714 * _231));
    float _734 = inversesqrt(dot(vec3(_724, _727, _730), vec3(_724, _727, _730)));
    float _735 = _734 * _724;
    float _736 = _734 * _727;
    float _737 = _734 * _730;
    float _3785 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
    float _738 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
    float _3796 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
    float _3807 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _3818 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    float _3829 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _3840 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _743 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
    float _757 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _798 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _808 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _798);
    float _809 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _798);
    float _810 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _798);
    float _814 = inversesqrt(dot(vec3(_808, _809, _810), vec3(_808, _809, _810)));
    float _815 = _808 * _814;
    float _816 = _809 * _814;
    float _817 = _810 * _814;
    vec4 _822 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _824 = _822.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _996 = sqrt(((_808 * _808) + (_809 * _809)) + (_810 * _810));
        float _1002 = (cbMatDynParam._m0[5u].x * _996) + cbMatDynParam._m0[5u].y;
        float _3851 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1003 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
        float _1007 = (cbMatDynParam._m0[5u].z * _996) + cbMatDynParam._m0[5u].w;
        float _3862 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0))) - _1003)) + _1003) < ((_824 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _835 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _836 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _854 = fma(_737, cbSceneParam._m0[5u].z, fma(_736, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _735));
    float _857 = fma(_737, cbSceneParam._m0[6u].z, fma(_736, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _735));
    float _860 = fma(_737, cbSceneParam._m0[7u].z, fma(_736, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _735));
    uint _873 = _248 + 9u;
    uint _874 = _873 + uint(cbMatDynParam._m0[0u].w);
    float _880 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0)))) * cbInstanceData._m0[_874].x;
    float _881 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0)))) * cbInstanceData._m0[_874].y;
    float _882 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0)))) * cbInstanceData._m0[_874].z;
    float _3873 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
    float _883 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
    float _3884 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
    float _884 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
    float _3895 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
    float _885 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
    float _886 = 1.0 - _743;
    float _887 = _883 * _886;
    float _888 = _884 * _886;
    float _889 = _885 * _886;
    float _894 = (_883 + (-0.039999999105930328369140625)) * _743;
    float _895 = (_884 + (-0.039999999105930328369140625)) * _743;
    float _896 = (_885 + (-0.039999999105930328369140625)) * _743;
    float _897 = _894 + 0.039999999105930328369140625;
    float _899 = _895 + 0.039999999105930328369140625;
    float _900 = _896 + 0.039999999105930328369140625;
    vec4 _909 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _835, cbSceneParam._m0[86u].y * _836));
    float _913 = ((isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0))) * TEXCOORD_5.w) * _909.x;
    float _914 = dot(vec3(_735, _736, _737), vec3(_815, _816, _817));
    float _917 = _914 * 2.0;
    float _921 = (_917 * _735) - _815;
    float _922 = (_917 * _736) - _816;
    float _923 = (_917 * _737) - _817;
    float _927 = abs(dot(vec3(_815, _816, _817), vec3(_735, _736, _737)));
    float _3906 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
    float _929 = sqrt(_738);
    float _942 = exp2((_929 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_929 * 3.0));
    float _948 = (1.0 - _942) * ((_929 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _949 = _942 * _929;
    float _977 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _981 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _985 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1314;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1039 = fma(_985, cbModelParam._m0[26u].z, fma(_981, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _977));
        float _1043 = fma(_985, cbModelParam._m0[27u].z, fma(_981, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _977));
        float _1047 = fma(_985, cbModelParam._m0[28u].z, fma(_981, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _977));
        float _1072 = _977 + _735;
        float _1073 = _981 + _736;
        float _1074 = _985 + _737;
        float _1084 = fma(_1074, cbModelParam._m0[26u].z, fma(_1073, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1072)) - _1039;
        float _1085 = fma(_1074, cbModelParam._m0[27u].z, fma(_1073, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1072)) - _1043;
        float _1086 = fma(_1074, cbModelParam._m0[28u].z, fma(_1073, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1072)) - _1047;
        float _1090 = inversesqrt(dot(vec3(_1084, _1085, _1086), vec3(_1084, _1085, _1086)));
        float _1103 = ((_1090 * _1084) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1039 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1104 = ((_1090 * _1085) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1043 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1105 = ((_1090 * _1086) / cbModelParam._m0[34u].z) + ((((((_1047 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1108 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1103, _1104, _1105), 0.0);
        vec4 _1115 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1103, _1104, _1105), 0.0);
        vec4 _1122 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1103, _1104, _1105), 0.0);
        vec4 _1129 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1103, _1104, _1105), 0.0);
        float _1142 = exp2((_1108.w + (-0.5)) * 20.0) * 2.0;
        float _1143 = _1142 * (_1108.x + (-0.5));
        float _1144 = _1142 * (_1108.y + (-0.5));
        float _1145 = _1142 * (_1108.z + (-0.5));
        float _1152 = exp2((_1115.w + (-0.5)) * 20.0) * 2.0;
        float _1153 = _1152 * (_1115.x + (-0.5));
        float _1154 = _1152 * (_1115.y + (-0.5));
        float _1155 = _1152 * (_1115.z + (-0.5));
        float _1162 = exp2((_1122.w + (-0.5)) * 20.0) * 2.0;
        float _1163 = _1162 * (_1122.x + (-0.5));
        float _1164 = _1162 * (_1122.y + (-0.5));
        float _1165 = _1162 * (_1122.z + (-0.5));
        float _1172 = exp2((_1129.w + (-0.5)) * 20.0) * 2.0;
        float _1173 = _1172 * (_1129.x + (-0.5));
        float _1174 = _1172 * (_1129.y + (-0.5));
        float _1175 = _1172 * (_1129.z + (-0.5));
        float _1176 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1177 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1178 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1179 = _1143 * 0.5;
        float _1180 = _1153 * 0.5;
        float _1181 = _1163 * 0.5;
        float _1182 = dot(vec3(_1179, _1180, _1181), vec3(_1179, _1180, _1181));
        float _1187 = (_1182 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1182);
        float _1196 = (dot(vec3(_735, _736, _737), vec3(_1187 * _1179, _1187 * _1180, _1187 * _1181)) + 1.0) * 0.5;
        float _3932 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1206 = sqrt(((_1180 * _1180) + (_1179 * _1179)) + (_1181 * _1181)) / (_1176 + 9.9999997473787516355514526367188e-06);
        float _3943 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1207 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
        float _1208 = _1207 * 2.0;
        float _1212 = (1.0 - _1207) / (_1207 + 1.0);
        float _3954 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1213 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
        float _1222 = ((((1.0 - _1213) * (_1208 + 2.0)) * exp2(log2(isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0))) * (_1208 + 1.0))) + _1213) * _1176;
        float _1223 = _1144 * 0.5;
        float _1224 = _1154 * 0.5;
        float _1225 = _1164 * 0.5;
        float _1226 = dot(vec3(_1223, _1224, _1225), vec3(_1223, _1224, _1225));
        float _1231 = (_1226 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1226);
        float _1239 = (dot(vec3(_735, _736, _737), vec3(_1231 * _1223, _1231 * _1224, _1231 * _1225)) + 1.0) * 0.5;
        float _3965 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1248 = sqrt(((_1224 * _1224) + (_1223 * _1223)) + (_1225 * _1225)) / (_1177 + 9.9999997473787516355514526367188e-06);
        float _3976 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1249 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
        float _1250 = _1249 * 2.0;
        float _1254 = (1.0 - _1249) / (_1249 + 1.0);
        float _3987 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1255 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
        float _1264 = ((((1.0 - _1255) * (_1250 + 2.0)) * exp2(log2(isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0))) * (_1250 + 1.0))) + _1255) * _1177;
        float _1265 = _1145 * 0.5;
        float _1266 = _1155 * 0.5;
        float _1267 = _1165 * 0.5;
        float _1268 = dot(vec3(_1265, _1266, _1267), vec3(_1265, _1266, _1267));
        float _1273 = (_1268 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1268);
        float _1281 = (dot(vec3(_735, _736, _737), vec3(_1273 * _1265, _1273 * _1266, _1273 * _1267)) + 1.0) * 0.5;
        float _3998 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1290 = sqrt(((_1266 * _1266) + (_1265 * _1265)) + (_1267 * _1267)) / (_1178 + 9.9999997473787516355514526367188e-06);
        float _4009 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1291 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
        float _1292 = _1291 * 2.0;
        float _1296 = (1.0 - _1291) / (_1291 + 1.0);
        float _4020 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1297 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
        float _1306 = ((((1.0 - _1297) * (_1292 + 2.0)) * exp2(log2(isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0))) * (_1292 + 1.0))) + _1297) * _1178;
        _1314 = _1145;
        _1316 = _1144;
        _1317 = _1143;
        _1318 = _1155;
        _1319 = _1154;
        _1320 = _1153;
        _1321 = _1165;
        _1322 = _1164;
        _1323 = _1163;
        _1324 = _1178;
        _1325 = _1177;
        _1326 = _1176;
        _1327 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0)));
        _1328 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0)));
        _1329 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0)));
    }
    else
    {
        _1314 = _1315;
        _1316 = _1315;
        _1317 = _1315;
        _1318 = _1315;
        _1319 = _1315;
        _1320 = _1315;
        _1321 = _1315;
        _1322 = _1315;
        _1323 = _1315;
        _1324 = _1315;
        _1325 = _1315;
        _1326 = _1315;
        _1327 = 0.0;
        _1328 = 0.0;
        _1329 = 0.0;
    }
    float _1626;
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1357 = fma(_985, cbModelParam._m0[30u].z, fma(_981, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _977));
        float _1361 = fma(_985, cbModelParam._m0[31u].z, fma(_981, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _977));
        float _1365 = fma(_985, cbModelParam._m0[32u].z, fma(_981, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _977));
        float _1388 = _977 + _735;
        float _1389 = _981 + _736;
        float _1390 = _985 + _737;
        float _1400 = fma(_1390, cbModelParam._m0[30u].z, fma(_1389, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1388)) - _1357;
        float _1401 = fma(_1390, cbModelParam._m0[31u].z, fma(_1389, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1388)) - _1361;
        float _1402 = fma(_1390, cbModelParam._m0[32u].z, fma(_1389, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1388)) - _1365;
        float _1406 = inversesqrt(dot(vec3(_1400, _1401, _1402), vec3(_1400, _1401, _1402)));
        float _1419 = ((_1406 * _1400) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1357 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1420 = ((_1406 * _1401) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1361 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1421 = ((_1406 * _1402) / cbModelParam._m0[35u].z) + ((((((_1365 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1423 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1419, _1420, _1421), 0.0);
        vec4 _1430 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1419, _1420, _1421), 0.0);
        vec4 _1437 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1419, _1420, _1421), 0.0);
        vec4 _1444 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1419, _1420, _1421), 0.0);
        float _1456 = exp2((_1423.w + (-0.5)) * 20.0) * 2.0;
        float _1457 = _1456 * (_1423.x + (-0.5));
        float _1458 = _1456 * (_1423.y + (-0.5));
        float _1459 = _1456 * (_1423.z + (-0.5));
        float _1466 = exp2((_1430.w + (-0.5)) * 20.0) * 2.0;
        float _1467 = _1466 * (_1430.x + (-0.5));
        float _1468 = _1466 * (_1430.y + (-0.5));
        float _1469 = _1466 * (_1430.z + (-0.5));
        float _1476 = exp2((_1437.w + (-0.5)) * 20.0) * 2.0;
        float _1477 = _1476 * (_1437.x + (-0.5));
        float _1478 = _1476 * (_1437.y + (-0.5));
        float _1479 = _1476 * (_1437.z + (-0.5));
        float _1486 = exp2((_1444.w + (-0.5)) * 20.0) * 2.0;
        float _1487 = _1486 * (_1444.x + (-0.5));
        float _1488 = _1486 * (_1444.y + (-0.5));
        float _1489 = _1486 * (_1444.z + (-0.5));
        float _1490 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1491 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1492 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1493 = _1457 * 0.5;
        float _1494 = _1467 * 0.5;
        float _1495 = _1477 * 0.5;
        float _1496 = dot(vec3(_1493, _1494, _1495), vec3(_1493, _1494, _1495));
        float _1501 = (_1496 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1496);
        float _1509 = (dot(vec3(_735, _736, _737), vec3(_1501 * _1493, _1501 * _1494, _1501 * _1495)) + 1.0) * 0.5;
        float _4061 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1518 = sqrt(((_1494 * _1494) + (_1493 * _1493)) + (_1495 * _1495)) / (_1490 + 9.9999997473787516355514526367188e-06);
        float _4072 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1519 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
        float _1520 = _1519 * 2.0;
        float _1524 = (1.0 - _1519) / (_1519 + 1.0);
        float _4083 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
        float _1525 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
        float _1534 = ((((1.0 - _1525) * (_1520 + 2.0)) * exp2(log2(isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0))) * (_1520 + 1.0))) + _1525) * _1490;
        float _1535 = _1458 * 0.5;
        float _1536 = _1468 * 0.5;
        float _1537 = _1478 * 0.5;
        float _1538 = dot(vec3(_1535, _1536, _1537), vec3(_1535, _1536, _1537));
        float _1543 = (_1538 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1538);
        float _1551 = (dot(vec3(_735, _736, _737), vec3(_1543 * _1535, _1543 * _1536, _1543 * _1537)) + 1.0) * 0.5;
        float _4094 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1560 = sqrt(((_1536 * _1536) + (_1535 * _1535)) + (_1537 * _1537)) / (_1491 + 9.9999997473787516355514526367188e-06);
        float _4105 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
        float _1561 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
        float _1562 = _1561 * 2.0;
        float _1566 = (1.0 - _1561) / (_1561 + 1.0);
        float _4116 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
        float _1567 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
        float _1576 = ((((1.0 - _1567) * (_1562 + 2.0)) * exp2(log2(isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0))) * (_1562 + 1.0))) + _1567) * _1491;
        float _1577 = _1459 * 0.5;
        float _1578 = _1469 * 0.5;
        float _1579 = _1479 * 0.5;
        float _1580 = dot(vec3(_1577, _1578, _1579), vec3(_1577, _1578, _1579));
        float _1585 = (_1580 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1580);
        float _1593 = (dot(vec3(_735, _736, _737), vec3(_1585 * _1577, _1585 * _1578, _1585 * _1579)) + 1.0) * 0.5;
        float _4127 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
        float _1602 = sqrt(((_1578 * _1578) + (_1577 * _1577)) + (_1579 * _1579)) / (_1492 + 9.9999997473787516355514526367188e-06);
        float _4138 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
        float _1603 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
        float _1604 = _1603 * 2.0;
        float _1608 = (1.0 - _1603) / (_1603 + 1.0);
        float _4149 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
        float _1609 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
        float _1618 = ((((1.0 - _1609) * (_1604 + 2.0)) * exp2(log2(isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0))) * (_1604 + 1.0))) + _1609) * _1492;
        _1626 = _1459;
        _1627 = _1458;
        _1628 = _1457;
        _1629 = _1469;
        _1630 = _1468;
        _1631 = _1467;
        _1632 = _1479;
        _1633 = _1478;
        _1634 = _1477;
        _1635 = _1492;
        _1636 = _1491;
        _1637 = _1490;
        _1638 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0)));
        _1639 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0)));
        _1640 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0)));
    }
    else
    {
        _1626 = _1315;
        _1627 = _1315;
        _1628 = _1315;
        _1629 = _1315;
        _1630 = _1315;
        _1631 = _1315;
        _1632 = _1315;
        _1633 = _1315;
        _1634 = _1315;
        _1635 = _1315;
        _1636 = _1315;
        _1637 = _1315;
        _1638 = 0.0;
        _1639 = 0.0;
        _1640 = 0.0;
    }
    float _1650 = (cbModelParam._m0[1u].x * (_1638 - _1327)) + _1327;
    float _1651 = (cbModelParam._m0[1u].x * (_1639 - _1328)) + _1328;
    float _1652 = (cbModelParam._m0[1u].x * (_1640 - _1329)) + _1329;
    float _1673 = fma(_1652, cbSceneParam._m0[89u].z, fma(_1651, cbSceneParam._m0[89u].y, _1650 * cbSceneParam._m0[89u].x));
    float _1676 = fma(_1652, cbSceneParam._m0[90u].z, fma(_1651, cbSceneParam._m0[90u].y, _1650 * cbSceneParam._m0[90u].x));
    float _1679 = fma(_1652, cbSceneParam._m0[91u].z, fma(_1651, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1650));
    float _1694 = _921 * 0.5;
    float _1695 = _922 * 0.5;
    float _1696 = _923 * 0.5;
    float _1697 = dot(vec4(_1694, _1695, _1696, 1.0), vec4(_1628, _1631, _1634, _1637));
    float _1700 = dot(vec4(_1694, _1695, _1696, 1.0), vec4(_1627, _1630, _1633, _1636));
    float _1703 = dot(vec4(_1694, _1695, _1696, 1.0), vec4(_1626, _1629, _1632, _1635));
    float _1737;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1710 = dot(vec4(_1694, _1695, _1696, 1.0), vec4(_1314, _1318, _1321, _1324));
        float _1714 = dot(vec4(_1694, _1695, _1696, 1.0), vec4(_1316, _1319, _1322, _1325));
        float _1718 = dot(vec4(_1694, _1695, _1696, 1.0), vec4(_1317, _1320, _1323, _1326));
        float _1725 = dot(vec4(cbModelParam._m0[39u]), vec4(_1694, _1695, _1696, 1.0));
        _1737 = dot(vec3(isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0)), isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0)), isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1725) ? 0.0 : (isnan(0.0) ? _1725 : max(0.0, _1725))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1737 = 1.0;
    }
    float _1748;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1739 = dot(vec4(cbModelParam._m0[40u]), vec4(_1694, _1695, _1696, 1.0));
        _1748 = dot(vec3(isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0)), isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0)), isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1739) ? 0.0 : (isnan(0.0) ? _1739 : max(0.0, _1739))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1748 = 1.0;
    }
    float _1752 = (_1748 * cbModelParam._m0[1u].x) + (_1737 * (1.0 - cbModelParam._m0[1u].x));
    float _1762 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _738);
    float _1763 = isnan(_1762) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1762 : min(cbModelParam._m0[25u].z, _1762));
    float _1843;
    float _1845;
    float _1847;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1810 = fma(_985, cbModelParam._m0[13u].z, fma(_981, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _977)) + cbModelParam._m0[13u].w;
        float _1814 = fma(_985, cbModelParam._m0[14u].z, fma(_981, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _977)) + cbModelParam._m0[14u].w;
        float _1818 = fma(_985, cbModelParam._m0[15u].z, fma(_981, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _977)) + cbModelParam._m0[15u].w;
        float _1821 = fma(_923, cbModelParam._m0[13u].z, fma(_922, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _921));
        float _1824 = fma(_923, cbModelParam._m0[14u].z, fma(_922, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _921));
        float _1827 = fma(_923, cbModelParam._m0[15u].z, fma(_922, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _921));
        float _1855;
        if (_1821 > 0.0)
        {
            _1855 = abs((1.0 - _1810) / _1821);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1821 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1810 + 1.0) / _1821);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1855 = frontier_phi_17_15_ladder;
        }
        float _2078;
        if (_1824 > 0.0)
        {
            _2078 = abs((1.0 - _1814) / _1824);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1824 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1814 + 1.0) / _1824);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2078 = frontier_phi_26_22_ladder;
        }
        float _2335;
        if (_1827 > 0.0)
        {
            _2335 = abs((1.0 - _1818) / _1827);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1827 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1818 + 1.0) / _1827);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2335 = frontier_phi_38_33_ladder;
        }
        float _2337 = isnan(_2078) ? _1855 : (isnan(_1855) ? _2078 : min(_1855, _2078));
        float _2338 = isnan(_2335) ? _2337 : (isnan(_2337) ? _2335 : min(_2337, _2335));
        float _2342 = (_2338 * _1821) + _1810;
        float _2343 = (_2338 * _1824) + _1814;
        float _2344 = (_2338 * _1827) + _1818;
        float _2345 = _2338 * 9.9999997473787516355514526367188e-05;
        float _2347 = (-1.0) - _2345;
        float _2349 = _2345 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2344 > _2349) || ((_2344 < _2347) || ((_2343 > _2349) || ((_2343 < _2347) || ((_2342 < _2347) || (_2342 > _2349))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2472 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2344, cbModelParam._m0[9u].z, fma(_2343, cbModelParam._m0[9u].y, _2342 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2344, cbModelParam._m0[10u].z, fma(_2343, cbModelParam._m0[10u].y, _2342 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2344, cbModelParam._m0[11u].z, fma(_2343, cbModelParam._m0[11u].y, _2342 * cbModelParam._m0[11u].x))), _1763);
            frontier_phi_16_38_ladder = _2472.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2472.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2472.x * cbModelParam._m0[1u].y;
        }
        _1843 = frontier_phi_16_38_ladder_2;
        _1845 = frontier_phi_16_38_ladder_1;
        _1847 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1831 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_921, _922, _923), _1763);
        _1843 = _1831.x * cbModelParam._m0[1u].y;
        _1845 = _1831.y * cbModelParam._m0[1u].y;
        _1847 = _1831.z * cbModelParam._m0[1u].y;
    }
    float _1851 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _738);
    float _1852 = isnan(_1851) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1851 : min(cbModelParam._m0[25u].w, _1851));
    float _1941;
    float _1943;
    float _1945;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1905 = fma(_985, cbModelParam._m0[21u].z, fma(_981, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _977)) + cbModelParam._m0[21u].w;
        float _1909 = fma(_985, cbModelParam._m0[22u].z, fma(_981, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _977)) + cbModelParam._m0[22u].w;
        float _1913 = fma(_985, cbModelParam._m0[23u].z, fma(_981, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _977)) + cbModelParam._m0[23u].w;
        float _1916 = fma(_923, cbModelParam._m0[21u].z, fma(_922, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _921));
        float _1919 = fma(_923, cbModelParam._m0[22u].z, fma(_922, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _921));
        float _1922 = fma(_923, cbModelParam._m0[23u].z, fma(_922, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _921));
        float _2083;
        if (_1916 > 0.0)
        {
            _2083 = abs((1.0 - _1905) / _1916);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1916 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1905 + 1.0) / _1916);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2083 = frontier_phi_28_24_ladder;
        }
        float _2362;
        if (_1919 > 0.0)
        {
            _2362 = abs((1.0 - _1909) / _1919);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1919 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1909 + 1.0) / _1919);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2362 = frontier_phi_40_35_ladder;
        }
        float _2575;
        if (_1922 > 0.0)
        {
            _2575 = abs((1.0 - _1913) / _1922);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1922 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1913 + 1.0) / _1922);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2575 = frontier_phi_49_46_ladder;
        }
        float _2577 = isnan(_2362) ? _2083 : (isnan(_2083) ? _2362 : min(_2083, _2362));
        float _2578 = isnan(_2575) ? _2577 : (isnan(_2577) ? _2575 : min(_2577, _2575));
        float _2582 = (_2578 * _1916) + _1905;
        float _2583 = (_2578 * _1919) + _1909;
        float _2584 = (_2578 * _1922) + _1913;
        float _2585 = _2578 * 9.9999997473787516355514526367188e-05;
        float _2586 = (-1.0) - _2585;
        float _2588 = _2585 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2584 > _2588) || ((_2584 < _2586) || ((_2583 > _2588) || ((_2583 < _2586) || ((_2582 < _2586) || (_2582 > _2588))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2783 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2584, cbModelParam._m0[17u].z, fma(_2583, cbModelParam._m0[17u].y, _2582 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2584, cbModelParam._m0[18u].z, fma(_2583, cbModelParam._m0[18u].y, _2582 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2584, cbModelParam._m0[19u].z, fma(_2583, cbModelParam._m0[19u].y, _2582 * cbModelParam._m0[19u].x))), _1852);
            frontier_phi_25_49_ladder = _2783.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2783.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2783.x * cbModelParam._m0[1u].z;
        }
        _1941 = frontier_phi_25_49_ladder_2;
        _1943 = frontier_phi_25_49_ladder_1;
        _1945 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1925 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_921, _922, _923), _1852);
        _1941 = _1925.x * cbModelParam._m0[1u].z;
        _1943 = _1925.y * cbModelParam._m0[1u].z;
        _1945 = _1925.z * cbModelParam._m0[1u].z;
    }
    float _1958 = (((_948 * _897) + _949) * _913) * ((cbModelParam._m0[1u].w * (_1941 - _1843)) + _1843);
    float _1960 = (((_948 * _899) + _949) * _913) * ((cbModelParam._m0[1u].w * (_1943 - _1845)) + _1845);
    float _1962 = (((_948 * _900) + _949) * _913) * ((cbModelParam._m0[1u].w * (_1945 - _1847)) + _1847);
    float _1965 = fma(_1962, cbSceneParam._m0[89u].z, fma(_1960, cbSceneParam._m0[89u].y, _1958 * cbSceneParam._m0[89u].x));
    float _1968 = fma(_1962, cbSceneParam._m0[90u].z, fma(_1960, cbSceneParam._m0[90u].y, _1958 * cbSceneParam._m0[90u].x));
    float _1971 = fma(_1962, cbSceneParam._m0[91u].z, fma(_1960, cbSceneParam._m0[91u].y, _1958 * cbSceneParam._m0[91u].x));
    vec4 _1979 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_835, _836));
    float _1981 = _1979.w;
    float _1993 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1981);
    float _1994 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1981);
    float _1995 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1981);
    uvec4 _1999 = floatBitsToUint(cbInstanceData._m0[_248 + 5u]);
    uint _2001 = _1999.x * 14u;
    uint _2002 = _2001 + 13u;
    float _2009 = _913 + (-1.0);
    float _2014 = (cbLight._m0[_2002].x * _2009) + 1.0;
    float _2015 = (cbLight._m0[_2002].y * _2009) + 1.0;
    float _2016 = (cbLight._m0[_2002].z * _2009) + 1.0;
    float _2017 = (cbLight._m0[_2002].w * _2009) + 1.0;
    uint _2018 = _2001 + 5u;
    float _2024 = isnan(1.0) ? _2015 : (isnan(_2015) ? 1.0 : min(_2015, 1.0));
    uint _2028 = _2001 + 4u;
    float _2037 = isnan(1.0) ? _2014 : (isnan(_2014) ? 1.0 : min(_2014, 1.0));
    uint _2041 = _2001 | 1u;
    float _2052 = dot(vec3(cbLight._m0[_2001].xyz), vec3(_735, _736, _737));
    float _2055 = dot(vec3(cbLight._m0[_2041].xyz), vec3(_735, _736, _737));
    float _4285 = isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0));
    float _4296 = isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0));
    float _2060 = (isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0))) * 0.3183098733425140380859375;
    float _2062 = (isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0))) * 0.3183098733425140380859375;
    float _2069 = ((cbLight._m0[_2018].x * _2024) * _2062) + (((cbLight._m0[_2028].x * _1993) * _2037) * _2060);
    float _2070 = ((_2024 * cbLight._m0[_2018].y) * _2062) + (((cbLight._m0[_2028].y * _1994) * _2037) * _2060);
    float _2071 = ((_2024 * cbLight._m0[_2018].z) * _2062) + (((cbLight._m0[_2028].z * _1995) * _2037) * _2060);
    uvec4 _2075 = floatBitsToUint(cbLight._m0[_2001 + 12u]);
    bool _2077 = _2075.x == 0u;
    float _2088;
    float _2090;
    float _2092;
    if (_2077)
    {
        _2088 = _2069;
        _2090 = _2070;
        _2092 = _2071;
    }
    else
    {
        uint _2096 = _2001 + 6u;
        float _2112 = (dot(vec3(cbLight._m0[_2001 + 2u].xyz), vec3(_735, _736, _737)) * 0.5) + 0.5;
        float _2113 = _2112 * _2112;
        float _4307 = isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0));
        float _2114 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
        float _2115 = isnan(1.0) ? _2016 : (isnan(_2016) ? 1.0 : min(_2016, 1.0));
        _2088 = (((cbLight._m0[_2096].x * 0.3183098733425140380859375) * _2114) * _2115) + _2069;
        _2090 = (((cbLight._m0[_2096].y * 0.3183098733425140380859375) * _2114) * _2115) + _2070;
        _2092 = (((cbLight._m0[_2096].z * 0.3183098733425140380859375) * _2114) * _2115) + _2071;
    }
    bool _2095 = _2075.y == 0u;
    float _2133;
    float _2135;
    float _2137;
    if (_2095)
    {
        _2133 = _2088;
        _2135 = _2090;
        _2137 = _2092;
    }
    else
    {
        uint _2306 = _2001 + 7u;
        float _2322 = (dot(vec3(cbLight._m0[_2001 + 3u].xyz), vec3(_735, _736, _737)) * 0.5) + 0.5;
        float _2323 = _2322 * _2322;
        float _4323 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
        float _2324 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
        float _2325 = isnan(1.0) ? _2017 : (isnan(_2017) ? 1.0 : min(_2017, 1.0));
        _2133 = (((cbLight._m0[_2306].x * 0.3183098733425140380859375) * _2324) * _2325) + _2088;
        _2135 = (((cbLight._m0[_2306].y * 0.3183098733425140380859375) * _2324) * _2325) + _2090;
        _2137 = (((cbLight._m0[_2306].z * 0.3183098733425140380859375) * _2324) * _2325) + _2092;
    }
    uint _2140 = _2001 + 8u;
    float _2153 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2001].w)) * _738) * 0.949999988079071044921875);
    float _2154 = _2153 * _2153;
    float _2155 = cbLight._m0[_2001].x + _815;
    float _2156 = cbLight._m0[_2001].y + _816;
    float _2157 = cbLight._m0[_2001].z + _817;
    float _2161 = inversesqrt(dot(vec3(_2155, _2156, _2157), vec3(_2155, _2156, _2157)));
    float _2162 = _2161 * _2155;
    float _2163 = _2161 * _2156;
    float _2164 = _2161 * _2157;
    float _2165 = dot(vec3(_735, _736, _737), vec3(cbLight._m0[_2001].xyz));
    float _4339 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
    float _2168 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
    float _4350 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
    float _2169 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
    float _2170 = dot(vec3(_735, _736, _737), vec3(_2162, _2163, _2164));
    float _4361 = isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0));
    float _2173 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
    float _2174 = dot(vec3(cbLight._m0[_2001].xyz), vec3(_2162, _2163, _2164));
    float _4372 = isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0));
    float _2178 = _2154 * _2154;
    float _2182 = ((_2173 * _2173) * (_2178 + (-1.0))) + 1.0;
    float _2190 = exp2(log2(1.0 - (isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0)))) * 5.0);
    float _2191 = 0.959999978542327880859375 - _894;
    float _2193 = 0.959999978542327880859375 - _895;
    float _2194 = 0.959999978542327880859375 - _896;
    float _2201 = 1.0 - _2154;
    float _2212 = (0.5 / (((_2169 * ((_2168 * _2201) + _2154)) + 9.9999999392252902907785028219223e-09) + (((_2169 * _2201) + _2154) * _2168))) * _2168;
    float _4383 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
    float _2214 = (isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0))) * (_2178 / ((_2182 * _2182) * 3.141590118408203125));
    uint _2228 = _2001 + 9u;
    float _2239 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2041].w)) * _738) * 0.949999988079071044921875);
    float _2240 = _2239 * _2239;
    float _2241 = cbLight._m0[_2041].x + _815;
    float _2242 = cbLight._m0[_2041].y + _816;
    float _2243 = cbLight._m0[_2041].z + _817;
    float _2247 = inversesqrt(dot(vec3(_2241, _2242, _2243), vec3(_2241, _2242, _2243)));
    float _2248 = _2247 * _2241;
    float _2249 = _2247 * _2242;
    float _2250 = _2247 * _2243;
    float _2251 = dot(vec3(_735, _736, _737), vec3(cbLight._m0[_2041].xyz));
    float _4394 = isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0));
    float _2254 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
    float _2255 = dot(vec3(_735, _736, _737), vec3(_2248, _2249, _2250));
    float _4405 = isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0));
    float _2258 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
    float _2259 = dot(vec3(cbLight._m0[_2041].xyz), vec3(_2248, _2249, _2250));
    float _4416 = isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0));
    float _2263 = _2240 * _2240;
    float _2267 = ((_2258 * _2258) * (_2263 + (-1.0))) + 1.0;
    float _2274 = exp2(log2(1.0 - (isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0)))) * 5.0);
    float _2281 = 1.0 - _2240;
    float _2291 = (0.5 / (((_2169 * ((_2254 * _2281) + _2240)) + 9.9999999392252902907785028219223e-09) + (((_2169 * _2281) + _2240) * _2254))) * _2254;
    float _4427 = isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0));
    float _2293 = (isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0))) * (_2263 / ((_2267 * _2267) * 3.141590118408203125));
    float _2303 = (((((_2274 * _2191) + _897) * cbLight._m0[_2228].x) * _2293) * _2024) + ((((cbLight._m0[_2140].x * _1993) * ((_2190 * _2191) + _897)) * _2214) * _2037);
    float _2304 = (((((_2274 * _2193) + _899) * cbLight._m0[_2228].y) * _2293) * _2024) + ((((cbLight._m0[_2140].y * _1994) * ((_2190 * _2193) + _899)) * _2214) * _2037);
    float _2305 = (((((_2274 * _2194) + _900) * cbLight._m0[_2228].z) * _2293) * _2024) + ((((cbLight._m0[_2140].z * _1995) * ((_2190 * _2194) + _900)) * _2214) * _2037);
    float _2367;
    float _2369;
    float _2371;
    if (_2077)
    {
        _2367 = _2303;
        _2369 = _2304;
        _2371 = _2305;
    }
    else
    {
        uint _2373 = _2001 + 2u;
        uint _2377 = _2001 + 10u;
        float _2391 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2373].w)) * _738) * 0.949999988079071044921875);
        float _2392 = _2391 * _2391;
        float _2393 = cbLight._m0[_2373].x + _815;
        float _2394 = cbLight._m0[_2373].y + _816;
        float _2395 = cbLight._m0[_2373].z + _817;
        float _2399 = inversesqrt(dot(vec3(_2393, _2394, _2395), vec3(_2393, _2394, _2395)));
        float _2400 = _2399 * _2393;
        float _2401 = _2399 * _2394;
        float _2402 = _2399 * _2395;
        float _2403 = dot(vec3(_735, _736, _737), vec3(cbLight._m0[_2373].xyz));
        float _4438 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
        float _2406 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
        float _2407 = dot(vec3(_735, _736, _737), vec3(_2400, _2401, _2402));
        float _4449 = isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0));
        float _2410 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
        float _2411 = dot(vec3(cbLight._m0[_2373].xyz), vec3(_2400, _2401, _2402));
        float _4460 = isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0));
        float _2415 = _2392 * _2392;
        float _2419 = ((_2410 * _2410) * (_2415 + (-1.0))) + 1.0;
        float _2426 = exp2(log2(1.0 - (isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0)))) * 5.0);
        float _2433 = 1.0 - _2392;
        float _2443 = (0.5 / (((_2169 * ((_2406 * _2433) + _2392)) + 9.9999999392252902907785028219223e-09) + (((_2169 * _2433) + _2392) * _2406))) * _2406;
        float _4471 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0));
        float _2445 = (isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0))) * (_2415 / ((_2419 * _2419) * 3.141590118408203125));
        float _2446 = isnan(1.0) ? _2016 : (isnan(_2016) ? 1.0 : min(_2016, 1.0));
        _2367 = (((((_2426 * _2191) + _897) * cbLight._m0[_2377].x) * _2445) * _2446) + _2303;
        _2369 = (((((_2426 * _2193) + _899) * cbLight._m0[_2377].y) * _2445) * _2446) + _2304;
        _2371 = (((((_2426 * _2194) + _900) * cbLight._m0[_2377].z) * _2445) * _2446) + _2305;
    }
    float _2481;
    float _2483;
    float _2485;
    if (_2095)
    {
        _2481 = _2367;
        _2483 = _2369;
        _2485 = _2371;
    }
    else
    {
        uint _2492 = _2001 + 3u;
        uint _2496 = _2001 + 11u;
        float _2510 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2492].w)) * _738) * 0.949999988079071044921875);
        float _2511 = _2510 * _2510;
        float _2512 = cbLight._m0[_2492].x + _815;
        float _2513 = cbLight._m0[_2492].y + _816;
        float _2514 = cbLight._m0[_2492].z + _817;
        float _2518 = inversesqrt(dot(vec3(_2512, _2513, _2514), vec3(_2512, _2513, _2514)));
        float _2519 = _2518 * _2512;
        float _2520 = _2518 * _2513;
        float _2521 = _2518 * _2514;
        float _2522 = dot(vec3(_735, _736, _737), vec3(cbLight._m0[_2492].xyz));
        float _4487 = isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : max(_2522, 0.0));
        float _2525 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
        float _2526 = dot(vec3(_735, _736, _737), vec3(_2519, _2520, _2521));
        float _4498 = isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0));
        float _2529 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
        float _2530 = dot(vec3(cbLight._m0[_2492].xyz), vec3(_2519, _2520, _2521));
        float _4509 = isnan(0.0) ? _2530 : (isnan(_2530) ? 0.0 : max(_2530, 0.0));
        float _2534 = _2511 * _2511;
        float _2538 = ((_2529 * _2529) * (_2534 + (-1.0))) + 1.0;
        float _2545 = exp2(log2(1.0 - (isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0)))) * 5.0);
        float _2552 = 1.0 - _2511;
        float _2562 = (0.5 / (((_2169 * ((_2525 * _2552) + _2511)) + 9.9999999392252902907785028219223e-09) + (((_2169 * _2552) + _2511) * _2525))) * _2525;
        float _4520 = isnan(0.0) ? _2562 : (isnan(_2562) ? 0.0 : max(_2562, 0.0));
        float _2564 = (isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0))) * (_2534 / ((_2538 * _2538) * 3.141590118408203125));
        float _2565 = isnan(1.0) ? _2017 : (isnan(_2017) ? 1.0 : min(_2017, 1.0));
        _2481 = (((((_2545 * _2191) + _897) * cbLight._m0[_2496].x) * _2564) * _2565) + _2367;
        _2483 = (((((_2545 * _2193) + _899) * cbLight._m0[_2496].y) * _2564) * _2565) + _2369;
        _2485 = (((((_2545 * _2194) + _900) * cbLight._m0[_2496].z) * _2564) * _2565) + _2371;
    }
    float _2700;
    float _2702;
    float _2704;
    float _2706;
    float _2708;
    float _2710;
    if (_1999.y == 0u)
    {
        float _2640 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2641 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2640;
        float _2642 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2640;
        float _2643 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2640;
        uvec4 _2655 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2656 = _2655.x;
        uint _2667 = uint((float(_2655.y) * floor(float(uint(cbSceneParam._m0[85u].y * _836) / _2656))) + floor(float(uint(cbSceneParam._m0[85u].x * _835) / _2656)));
        float _2677 = (log2(_2643 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2678 = isnan(0.0) ? _2677 : (isnan(_2677) ? 0.0 : max(_2677, 0.0));
        uint _2681 = uint(isnan(14.0) ? _2678 : (isnan(_2678) ? 14.0 : min(_2678, 14.0)));
        uvec4 _2686 = texelFetch(g_lightClusterGridBuffer, int(((_2681 << 2u) + (_2667 << 6u)) >> 2u));
        uint _2687 = _2686.x;
        uint _2688 = _2655.z;
        float _2788;
        float _2790;
        float _2792;
        float _2794;
        float _2796;
        float _2798;
        if (((((1u << ((_2688 >> 4u) & 15u)) + 4294967295u) & _2687) == 0u) || ((_2688 & 240u) == 0u))
        {
            _2788 = 0.0;
            _2790 = 0.0;
            _2792 = 0.0;
            _2794 = 0.0;
            _2796 = 0.0;
            _2798 = 0.0;
        }
        else
        {
            float _2789;
            float _2791;
            float _2793;
            float _2795;
            float _2797;
            float _2799;
            float _2941 = 0.0;
            float _2942 = 0.0;
            float _2943 = 0.0;
            float _2944 = 0.0;
            float _2945 = 0.0;
            float _2946 = 0.0;
            uint _2947 = 0u;
            uint _2956;
            bool _2957;
            for (;;)
            {
                _2956 = texelFetch(g_lightClassification, int((((_2681 << 5u) + (_2667 << 9u)) + (_2947 << 2u)) >> 2u)).x;
                _2957 = _2956 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2957)
                {
                    frontier_phi_66_pred = _2941;
                    frontier_phi_66_pred_1 = _2946;
                    frontier_phi_66_pred_2 = _2945;
                    frontier_phi_66_pred_3 = _2944;
                    frontier_phi_66_pred_4 = _2943;
                    frontier_phi_66_pred_5 = _2942;
                }
                else
                {
                    float _3086;
                    float _3087;
                    float _3088;
                    float _3089;
                    float _3090;
                    float _3091;
                    uint _3092;
                    _3086 = _2941;
                    _3087 = _2942;
                    _3088 = _2943;
                    _3089 = _2944;
                    _3090 = _2945;
                    _3091 = _2946;
                    _3092 = _2956;
                    float _3013;
                    float _3014;
                    float _3015;
                    float _3016;
                    float _3017;
                    float _3018;
                    for (;;)
                    {
                        uint _3096 = uint(findLSB(_3092)) + (_2947 << 5u);
                        uint _3093 = (_3092 + 4294967295u) & _3092;
                        uint _3098 = _3096 * 48u;
                        vec4 _3112 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3098)).x, texelFetch(g_PointLightRenderingBuffer, int(_3098 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3098 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3098 + 3u)).x));
                        uint _3118 = (_3096 * 48u) + 4u;
                        vec4 _3131 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3118)).x, texelFetch(g_PointLightRenderingBuffer, int(_3118 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3118 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3118 + 3u)).x));
                        uint _3137 = (_3096 * 48u) + 8u;
                        vec3 _3148 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3137)).x, texelFetch(g_PointLightRenderingBuffer, int(_3137 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3137 + 2u)).x));
                        float _3152 = _3112.x - _2641;
                        float _3153 = _3112.y - _2642;
                        float _3154 = _3112.z - _2643;
                        float _3155 = dot(vec3(_3152, _3153, _3154), vec3(_3152, _3153, _3154));
                        float _3158 = inversesqrt(_3155);
                        float _3159 = _3158 * _3152;
                        float _3160 = _3158 * _3153;
                        float _3161 = _3158 * _3154;
                        float _3162 = dot(vec3(_854, _857, _860), vec3(_3159, _3160, _3161));
                        float _3167 = 1.0 - (_3155 * _3112.w);
                        float _4546 = isnan(0.0) ? _3167 : (isnan(_3167) ? 0.0 : max(_3167, 0.0));
                        float _3168 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
                        float _3169 = sqrt(_3155) * _3131.w;
                        float _3172 = 1.39999997615814208984375 / (_3169 + 1.39999997615814208984375);
                        float _3173 = _3172 * _3172;
                        float _3176 = ((1.0 - _3173) * _3162) + _3173;
                        float _3179 = _3169 * _3169;
                        float _3183 = ((isnan(0.0) ? _3176 : (isnan(_3176) ? 0.0 : max(_3176, 0.0))) * _3168) / ((_3179 * 0.699999988079071044921875) + 1.0);
                        float _3187 = (-0.0) - _2641;
                        float _3188 = (-0.0) - _2642;
                        float _3189 = (-0.0) - _2643;
                        float _3193 = inversesqrt(dot(vec3(_3187, _3188, _3189), vec3(_3187, _3188, _3189)));
                        float _3194 = _3193 * _3187;
                        float _3195 = _3193 * _3188;
                        float _3196 = _3193 * _3189;
                        float _3204 = exp2(log2(1.0 / ((_3179 * 3.5) + 5.0)) * 0.25);
                        float _3205 = 1.0 - _929;
                        float _3212 = sqrt(1.0 - ((1.0 - (_3205 * _3205)) * (1.0 - (_3204 * _3204))));
                        float _3213 = _3212 * _3212;
                        float _3214 = _3213 * _3213;
                        float _3215 = _3194 + _3159;
                        float _3216 = _3195 + _3160;
                        float _3217 = _3196 + _3161;
                        float _3221 = inversesqrt(dot(vec3(_3215, _3216, _3217), vec3(_3215, _3216, _3217)));
                        float _3225 = dot(vec3(_854, _857, _860), vec3(_3194, _3195, _3196));
                        float _4562 = isnan(0.0) ? _3225 : (isnan(_3225) ? 0.0 : max(_3225, 0.0));
                        float _3228 = isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0));
                        float _3229 = dot(vec3(_854, _857, _860), vec3(_3221 * _3215, _3221 * _3216, _3221 * _3217));
                        float _4573 = isnan(0.0) ? _3229 : (isnan(_3229) ? 0.0 : max(_3229, 0.0));
                        float _3232 = isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0));
                        float _3236 = ((_3232 * _3232) * (_3214 + (-1.0))) + 1.0;
                        float _3237 = _3172 * _3213;
                        float _3238 = _3237 * _3237;
                        float _3241 = ((1.0 - _3238) * _3162) + _3238;
                        float _4584 = isnan(0.0) ? _3241 : (isnan(_3241) ? 0.0 : max(_3241, 0.0));
                        float _3242 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
                        float _3243 = 1.0 - _3213;
                        float _3253 = (0.5 / (((_3242 * ((_3228 * _3243) + _3213)) + 9.9999999392252902907785028219223e-09) + (((_3242 * _3243) + _3213) * _3228))) * _3242;
                        float _4595 = isnan(0.0) ? _3253 : (isnan(_3253) ? 0.0 : max(_3253, 0.0));
                        float _3264 = (((_3214 * 3.1415927410125732421875) * (isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0)))) / ((_3236 * _3236) * ((_3179 * 2.1991131305694580078125) + 3.141590118408203125))) * _3168;
                        _3016 = (_3183 * _3131.x) + _3089;
                        _3017 = (_3183 * _3131.y) + _3090;
                        _3018 = (_3183 * _3131.z) + _3091;
                        _3013 = (_3264 * _3148.x) + _3086;
                        _3014 = (_3264 * _3148.y) + _3087;
                        _3015 = (_3264 * _3148.z) + _3088;
                        if (_3093 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3086 = _3013;
                            _3087 = _3014;
                            _3088 = _3015;
                            _3089 = _3016;
                            _3090 = _3017;
                            _3091 = _3018;
                            _3092 = _3093;
                        }
                    }
                    frontier_phi_66_pred = _3013;
                    frontier_phi_66_pred_1 = _3018;
                    frontier_phi_66_pred_2 = _3017;
                    frontier_phi_66_pred_3 = _3016;
                    frontier_phi_66_pred_4 = _3015;
                    frontier_phi_66_pred_5 = _3014;
                }
                _2789 = frontier_phi_66_pred;
                _2799 = frontier_phi_66_pred_1;
                _2797 = frontier_phi_66_pred_2;
                _2795 = frontier_phi_66_pred_3;
                _2793 = frontier_phi_66_pred_4;
                _2791 = frontier_phi_66_pred_5;
                uint _2948 = _2947 + 1u;
                if (_2948 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2941 = _2789;
                    _2942 = _2791;
                    _2943 = _2793;
                    _2944 = _2795;
                    _2945 = _2797;
                    _2946 = _2799;
                    _2947 = _2948;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2788 = _2789;
            _2790 = _2791;
            _2792 = _2793;
            _2794 = _2795;
            _2796 = _2797;
            _2798 = _2799;
        }
        uvec4 _2802 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2803 = _2802.z;
        uint _2805 = (_2803 >> 8u) & 15u;
        float _2909;
        float _2911;
        float _2913;
        float _2915;
        float _2917;
        float _2919;
        if (((4294967295u << _2805) & _2687) == 0u)
        {
            _2909 = _2788;
            _2911 = _2790;
            _2913 = _2792;
            _2915 = _2794;
            _2917 = _2796;
            _2919 = _2798;
        }
        else
        {
            float _2934 = inversesqrt(dot(vec3(_2641, _2642, _2643), vec3(_2641, _2642, _2643)));
            float _2935 = _2934 * _2641;
            float _2936 = _2934 * _2642;
            float _2937 = _2934 * _2643;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2805 < ((_2803 >> 12u) & 15u))
            {
                float _2910;
                float _2912;
                float _2914;
                float _2916;
                float _2918;
                float _2920;
                float _3069 = _2788;
                float _3070 = _2790;
                float _3071 = _2792;
                float _3072 = _2794;
                float _3073 = _2796;
                float _3074 = _2798;
                uint _3075 = _2805;
                uint _3084;
                bool _3085;
                for (;;)
                {
                    _3084 = texelFetch(g_lightClassification, int((((_2681 << 5u) + (_2667 << 9u)) + (_3075 << 2u)) >> 2u)).x;
                    _3085 = _3084 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3085)
                    {
                        frontier_phi_77_pred = _3074;
                        frontier_phi_77_pred_1 = _3073;
                        frontier_phi_77_pred_2 = _3072;
                        frontier_phi_77_pred_3 = _3071;
                        frontier_phi_77_pred_4 = _3070;
                        frontier_phi_77_pred_5 = _3069;
                    }
                    else
                    {
                        float _3278;
                        float _3279;
                        float _3280;
                        float _3281;
                        float _3282;
                        float _3283;
                        float _3571;
                        float _3572;
                        float _3573;
                        float _3574;
                        float _3575;
                        float _3576;
                        float _3291 = _3069;
                        float _3292 = _3070;
                        float _3293 = _3071;
                        float _3294 = _3072;
                        float _3295 = _3073;
                        float _3296 = _3074;
                        uint _3297 = _3084;
                        uint _3298;
                        vec4 _3323;
                        float _3324;
                        vec4 _3339;
                        vec3 _3351;
                        vec4 _3366;
                        vec4 _3381;
                        float _3427;
                        bool _3428;
                        for (;;)
                        {
                            uint _3308 = ((_3075 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3297));
                            _3298 = (_3297 + 4294967295u) & _3297;
                            uint _3310 = _3308 * 40u;
                            _3323 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3310)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 3u)).x));
                            _3324 = _3323.w;
                            uint _3326 = (_3308 * 40u) + 4u;
                            _3339 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3326)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 3u)).x));
                            uint _3341 = (_3308 * 40u) + 8u;
                            _3351 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3341)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3341 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3341 + 2u)).x));
                            uint _3353 = (_3308 * 40u) + 16u;
                            _3366 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3353)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 3u)).x));
                            uint _3368 = (_3308 * 40u) + 20u;
                            _3381 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3368)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 3u)).x));
                            uint _3383 = (_3308 * 40u) + 24u;
                            vec4 _3396 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3383)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 3u)).x));
                            uint _3402 = (_3308 * 40u) + 28u;
                            vec4 _3415 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3402)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3402 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3402 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3402 + 3u)).x));
                            _3427 = fma(_2643, _3415.z, fma(_2642, _3415.y, _3415.x * _2641)) + _3415.w;
                            _3428 = !((fma(_2643, _3396.z, fma(_2642, _3396.y, _3396.x * _2641)) + _3396.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3428)
                            {
                                float _3455 = _3323.x - _2641;
                                float _3456 = _3323.y - _2642;
                                float _3457 = _3323.z - _2643;
                                float _3458 = dot(vec3(_3455, _3456, _3457), vec3(_3455, _3456, _3457));
                                float _3461 = inversesqrt(_3458);
                                float _3462 = _3461 * _3455;
                                float _3463 = _3461 * _3456;
                                float _3464 = _3461 * _3457;
                                float _3468 = 1.0 - (_3458 / (_3324 * _3324));
                                float _4606 = isnan(0.0) ? _3468 : (isnan(_3468) ? 0.0 : max(_3468, 0.0));
                                float _3469 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
                                float _3473 = sqrt(_3458) * _3339.w;
                                float _3475 = 1.39999997615814208984375 / (_3473 + 1.39999997615814208984375);
                                float _3476 = _3475 * _3475;
                                float _3479 = ((1.0 - _3476) * dot(vec3(_3462, _3463, _3464), vec3(_854, _857, _860))) + _3476;
                                float _3482 = _3473 * _3473;
                                float _3486 = (fma(_2643, _3366.z, fma(_2642, _3366.y, _3366.x * _2641)) + _3366.w) / _3427;
                                float _3487 = (fma(_2643, _3381.z, fma(_2642, _3381.y, _3381.x * _2641)) + _3381.w) / _3427;
                                float _3491 = 1.0 - dot(vec2(_3486, _3487), vec2(_3486, _3487));
                                float _4622 = isnan(0.0) ? _3491 : (isnan(_3491) ? 0.0 : max(_3491, 0.0));
                                float _3492 = isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0));
                                float _3493 = _3492 * (((isnan(0.0) ? _3479 : (isnan(_3479) ? 0.0 : max(_3479, 0.0))) * _3469) / ((_3482 * 0.699999988079071044921875) + 1.0));
                                float _3505 = exp2(log2(1.0 / ((_3482 * 3.5) + 5.0)) * 0.25);
                                float _3506 = 1.0 - _929;
                                float _3513 = sqrt(1.0 - ((1.0 - (_3506 * _3506)) * (1.0 - (_3505 * _3505))));
                                float _3514 = _3513 * _3513;
                                float _3515 = _3514 * _3514;
                                float _3516 = _3462 - _2935;
                                float _3517 = _3463 - _2936;
                                float _3518 = _3464 - _2937;
                                float _3522 = inversesqrt(dot(vec3(_3516, _3517, _3518), vec3(_3516, _3517, _3518)));
                                float _3526 = dot(vec3(_854, _857, _860), vec3((-0.0) - _2935, (-0.0) - _2936, (-0.0) - _2937));
                                float _4633 = isnan(0.0) ? _3526 : (isnan(_3526) ? 0.0 : max(_3526, 0.0));
                                float _3529 = isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0));
                                float _3530 = dot(vec3(_854, _857, _860), vec3(_3522 * _3516, _3522 * _3517, _3522 * _3518));
                                float _4644 = isnan(0.0) ? _3530 : (isnan(_3530) ? 0.0 : max(_3530, 0.0));
                                float _3533 = isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0));
                                float _3537 = ((_3533 * _3533) * (_3515 + (-1.0))) + 1.0;
                                float _3538 = _3475 * _3514;
                                float _3539 = _3538 * _3538;
                                float _3545 = ((1.0 - _3539) * dot(vec3(_854, _857, _860), vec3(_3462, _3463, _3464))) + _3539;
                                float _4655 = isnan(0.0) ? _3545 : (isnan(_3545) ? 0.0 : max(_3545, 0.0));
                                float _3546 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
                                float _3547 = 1.0 - _3514;
                                float _3557 = (0.5 / (((_3546 * ((_3529 * _3547) + _3514)) + 9.9999999392252902907785028219223e-09) + (((_3546 * _3547) + _3514) * _3529))) * _3546;
                                float _4666 = isnan(0.0) ? _3557 : (isnan(_3557) ? 0.0 : max(_3557, 0.0));
                                float _3567 = (_3492 * _3469) * (((_3515 * 3.1415927410125732421875) * (isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0)))) / ((_3537 * _3537) * ((_3482 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3493 * _3339.y;
                                frontier_phi_83_pred_1 = _3493 * _3339.x;
                                frontier_phi_83_pred_2 = _3567 * _3351.z;
                                frontier_phi_83_pred_3 = _3567 * _3351.y;
                                frontier_phi_83_pred_4 = _3567 * _3351.x;
                                frontier_phi_83_pred_5 = _3493 * _3339.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3575 = frontier_phi_83_pred;
                            _3574 = frontier_phi_83_pred_1;
                            _3573 = frontier_phi_83_pred_2;
                            _3572 = frontier_phi_83_pred_3;
                            _3571 = frontier_phi_83_pred_4;
                            _3576 = frontier_phi_83_pred_5;
                            _3281 = _3574 + _3294;
                            _3282 = _3575 + _3295;
                            _3283 = _3576 + _3296;
                            _3278 = _3571 + _3291;
                            _3279 = _3572 + _3292;
                            _3280 = _3573 + _3293;
                            if (_3298 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3291 = _3278;
                                _3292 = _3279;
                                _3293 = _3280;
                                _3294 = _3281;
                                _3295 = _3282;
                                _3296 = _3283;
                                _3297 = _3298;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3283;
                        frontier_phi_77_pred_1 = _3282;
                        frontier_phi_77_pred_2 = _3281;
                        frontier_phi_77_pred_3 = _3280;
                        frontier_phi_77_pred_4 = _3279;
                        frontier_phi_77_pred_5 = _3278;
                    }
                    _2920 = frontier_phi_77_pred;
                    _2918 = frontier_phi_77_pred_1;
                    _2916 = frontier_phi_77_pred_2;
                    _2914 = frontier_phi_77_pred_3;
                    _2912 = frontier_phi_77_pred_4;
                    _2910 = frontier_phi_77_pred_5;
                    uint _3076 = _3075 + 1u;
                    if (_3076 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3069 = _2910;
                        _3070 = _2912;
                        _3071 = _2914;
                        _3072 = _2916;
                        _3073 = _2918;
                        _3074 = _2920;
                        _3075 = _3076;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2914;
                frontier_phi_58_59_ladder_1 = _2920;
                frontier_phi_58_59_ladder_2 = _2918;
                frontier_phi_58_59_ladder_3 = _2916;
                frontier_phi_58_59_ladder_4 = _2912;
                frontier_phi_58_59_ladder_5 = _2910;
            }
            else
            {
                frontier_phi_58_59_ladder = _2792;
                frontier_phi_58_59_ladder_1 = _2798;
                frontier_phi_58_59_ladder_2 = _2796;
                frontier_phi_58_59_ladder_3 = _2794;
                frontier_phi_58_59_ladder_4 = _2790;
                frontier_phi_58_59_ladder_5 = _2788;
            }
            _2909 = frontier_phi_58_59_ladder_5;
            _2911 = frontier_phi_58_59_ladder_4;
            _2913 = frontier_phi_58_59_ladder;
            _2915 = frontier_phi_58_59_ladder_3;
            _2917 = frontier_phi_58_59_ladder_2;
            _2919 = frontier_phi_58_59_ladder_1;
        }
        float _2924 = isnan(1.0) ? _913 : (isnan(_913) ? 1.0 : min(_913, 1.0));
        _2700 = (_2924 * _2915) + _2133;
        _2702 = (_2924 * _2917) + _2135;
        _2704 = (_2924 * _2919) + _2137;
        _2706 = ((_2909 * _897) * _2924) + _2481;
        _2708 = ((_2911 * _899) * _2924) + _2483;
        _2710 = ((_2913 * _900) * _2924) + _2485;
    }
    else
    {
        _2700 = _2133;
        _2702 = _2135;
        _2704 = _2137;
        _2706 = _2481;
        _2708 = _2483;
        _2710 = _2485;
    }
    float _4682 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
    float _4693 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
    float _4704 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
    float _2727 = ((isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0))) * (_2700 + ((isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0))) * _913))) + ((_2706 + ((isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0))) * _1752)) * cbPerFrame._m0[3u].x);
    float _2728 = ((isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0))) * (_2702 + ((isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0))) * _913))) + ((_2708 + ((isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0))) * _1752)) * cbPerFrame._m0[3u].x);
    float _2729 = ((isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0))) * (_2704 + ((isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0))) * _913))) + ((_2710 + ((isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0))) * _1752)) * cbPerFrame._m0[3u].x);
    uint _2730 = _248 + 6u;
    float _2738 = _835 / cbSceneParam._m0[86u].x;
    float _2739 = _836 / cbSceneParam._m0[86u].y;
    vec4 _2753 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2738, _2739, (log2((isnan(cbSceneParam._m0[77u].w) ? _757 : (isnan(_757) ? cbSceneParam._m0[77u].w : min(_757, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2755 = _2753.x;
    float _2756 = _2753.y;
    float _2757 = _2753.z;
    float _2758 = _2753.w;
    float _2851;
    float _2853;
    float _2855;
    float _2857;
    if (_757 > cbSceneParam._m0[78u].w)
    {
        float _2813 = isnan(_757) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _757 : min(cbSceneParam._m0[80u].w, _757));
        float _2814 = _2813 / _757;
        float _2825 = _2814 * _808;
        float _2826 = _809 * _2814;
        float _2827 = (-0.0) - _2826;
        float _2829 = _2814 * _810;
        float _2831 = (cbSceneParam._m0[77u].w * _2827) / _2813;
        float _2832 = _2831 + cbSceneParam._m0[79u].w;
        float _2833 = cbSceneParam._m0[79u].w - _2826;
        float _2839 = sqrt(((_2825 * _2825) + (_2826 * _2826)) + (_2829 * _2829));
        float _2842 = (1.0 - (cbSceneParam._m0[77u].w / _2813)) * _2839;
        float _2847 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2849 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3026;
        if (abs((_2827 - _2831) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3026 = ((((_2832 > 0.0) ? exp2(_2847 * _2832) : (2.0 - exp2(_2849 * _2832))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2842;
        }
        else
        {
            float _2970 = 1.0 / cbSceneParam._m0[80u].x;
            float _2971 = isnan(_2833) ? _2832 : (isnan(_2832) ? _2833 : max(_2832, _2833));
            float _2972 = isnan(_2833) ? _2832 : (isnan(_2832) ? _2833 : min(_2832, _2833));
            float _2981 = isnan(0.0) ? _2971 : (isnan(_2971) ? 0.0 : min(_2971, 0.0));
            float _2982 = isnan(0.0) ? _2972 : (isnan(_2972) ? 0.0 : min(_2972, 0.0));
            _3026 = ((abs(_2839 / _2827) * cbSceneParam._m0[80u].y) * ((((_2981 - _2982) * 2.0) - ((exp2(_2847 * (isnan(0.0) ? _2971 : (isnan(_2971) ? 0.0 : max(_2971, 0.0)))) - exp2(_2847 * (isnan(0.0) ? _2972 : (isnan(_2972) ? 0.0 : max(_2972, 0.0))))) * _2970)) - ((exp2(_2849 * _2981) - exp2(_2849 * _2982)) * _2970))) + (_2842 * cbSceneParam._m0[80u].z);
        }
        vec4 _3028 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2738, _2739, 1.0), 0.0);
        float _3037 = exp2((_3026 * (-1.44269502162933349609375)) * (1.0 - _3028.w));
        float _3038 = log2(_3037);
        float _3054 = log2(_2758);
        _2851 = (exp2(_3054 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3038 * cbSceneParam._m0[78u].x)) * _3028.x) / cbSceneParam._m0[78u].x)) + _2755;
        _2853 = (exp2(_3054 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3038 * cbSceneParam._m0[78u].y)) * _3028.y) / cbSceneParam._m0[78u].y)) + _2756;
        _2855 = (exp2(_3054 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3038 * cbSceneParam._m0[78u].z)) * _3028.z) / cbSceneParam._m0[78u].z)) + _2757;
        _2857 = _3037 * _2758;
    }
    else
    {
        _2851 = _2755;
        _2853 = _2756;
        _2855 = _2757;
        _2857 = _2758;
    }
    bool _3064;
    vec4 _2867;
    vec4 _2889;
    float _2891;
    float _2895;
    float _2896;
    float _2897;
    float _2898;
    bool _2908;
    for (;;)
    {
        _2867 = cbMatDynParam._m0[0u];
        float _2869 = roundEven(_2867.y);
        bool _2870 = _2869 == 3.0;
        float _2871 = log2(_2857);
        float _2878 = exp2(_2871 * cbSceneParam._m0[78u].x) * _2727;
        float _2879 = exp2(_2871 * cbSceneParam._m0[78u].y) * _2728;
        float _2880 = exp2(_2871 * cbSceneParam._m0[78u].z) * _2729;
        float _2887 = _824 + (-0.5);
        _2889 = cbMtdParam._m0[1u];
        _2891 = _2889.y * _2887;
        float _2894 = (_2869 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2895 = _2894 * (_2870 ? _2878 : (_2878 + (cbSceneParam._m0[72u].w * _2851)));
        _2896 = _2894 * (_2870 ? _2879 : (_2879 + (cbSceneParam._m0[72u].w * _2853)));
        _2897 = _2894 * (_2870 ? _2880 : (_2880 + (cbSceneParam._m0[72u].w * _2855)));
        _2898 = _2887 * 0.999000012874603271484375;
        _2908 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2908)
        {
            if ((cbInstanceData._m0[_248 + 7u].x + _2898) < 0.5)
            {
                _3064 = true;
                break;
            }
        }
        uint _3005 = _873 + uint(_2867.w);
        if ((cbInstanceData._m0[_3005].w < 1.0) && ((cbInstanceData._m0[_3005].w + _2898) < 0.5))
        {
            _3064 = true;
            break;
        }
        if ((_2891 + 1.0) < _2889.x)
        {
            _3064 = true;
            break;
        }
        _3064 = false;
        break;
    }
    float _3269;
    if (_3064)
    {
        discard_state = true;
        _3269 = 0.0;
    }
    else
    {
        _3269 = cbInstanceData._m0[_2730].w;
    }
    SV_Target.x = _2895;
    SV_Target.y = _2896;
    SV_Target.z = _2897;
    SV_Target.w = _3269;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2730].w;
    discard_exit();
}


