#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1165;
float _3547;
float _3548;
float _3549;
float _3550;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _213 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _214 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _215 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _221 = inversesqrt(dot(vec3(_213, _214, _215), vec3(_213, _214, _215)));
    float _228 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _235 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _241 = uint(roundEven(NORMAL.w)) * 13u;
    uint _246 = _241 + 1u;
    uint _250 = _241 + 2u;
    float _259 = sqrt(((cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x) + (cbInstanceData._m0[_241].x * cbInstanceData._m0[_241].x)) + (cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x));
    float _260 = _259 * TEXCOORD.z;
    float _261 = _259 * TEXCOORD.w;
    vec4 _280 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _286 = _280.x * cbMtdParam._m0[9u].x;
    float _287 = _280.y * cbMtdParam._m0[9u].y;
    float _288 = _280.z * cbMtdParam._m0[9u].z;
    vec4 _307 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _260) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _261) + cbTextureTilingScale._m0[14u].w));
    vec4 _327 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _331 = _327.z;
    float _336 = (_327.x * 2.0) + (-1.0);
    float _338 = (_327.y * 2.0) + (-1.0);
    float _339 = dot(vec2(_336, _338), vec2(_336, _338));
    float _3559 = isnan(0.0) ? _339 : (isnan(_339) ? 0.0 : max(_339, 0.0));
    float _345 = sqrt(1.0 - (isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0))));
    vec4 _362 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _260) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _261) + cbTextureTilingScale._m0[11u].w));
    float _364 = _362.x;
    float _365 = 1.0 - _364;
    float _374 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _377 = ((isnan(0.0) ? _374 : (isnan(_374) ? 0.0 : min(_374, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _386 = (_377 - ((((((_364 - _365) * cbMtdParam._m0[24u].z) + _365) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _377))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3580 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _387 = isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0));
    float _394 = (_387 * ((_307.x * cbMtdParam._m0[18u].x) - _286)) + _286;
    float _395 = (_387 * ((_307.y * cbMtdParam._m0[18u].y) - _287)) + _287;
    float _396 = (_387 * ((_307.z * cbMtdParam._m0[18u].z) - _288)) + _288;
    vec4 _409 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _260) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _261) + cbTextureTilingScale._m0[19u].w));
    float _411 = _409.x;
    float _412 = 1.0 - _411;
    float _441 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_411 - _412) * cbMtdParam._m0[24u].w) + _412) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3591 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _442 = isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0));
    float _450 = ((((cbMtdParam._m0[10u].x - _394) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _442) + _394;
    float _451 = ((((cbMtdParam._m0[10u].y - _395) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _442) + _395;
    float _452 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _396)) * _442) + _396;
    vec4 _465 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _467 = _465.x;
    float _469 = _467 - (_467 * _387);
    float _471 = _469 - (_469 * _442);
    vec4 _485 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _260) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _261) + cbTextureTilingScale._m0[15u].w));
    float _492 = (_485.x * 2.0) + (-1.0);
    float _493 = (_485.y * 2.0) + (-1.0);
    float _494 = dot(vec2(_492, _493), vec2(_492, _493));
    float _3602 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
    float _502 = (_387 * (_485.z - _331)) + _331;
    float _505 = ((cbMtdParam._m0[23u].y - _502) * _442) + _502;
    vec4 _527 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _260) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _261) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _533 = (_527.x * 2.0) + (-1.0);
    float _534 = (_527.y * 2.0) + (-1.0);
    float _535 = dot(vec2(_533, _534), vec2(_533, _534));
    float _3613 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _552 = (((_492 - _336) + (cbMtdParam._m0[21u].x * _336)) * _387) + _336;
    float _553 = (((_493 - _338) + (cbMtdParam._m0[21u].x * _338)) * _387) + _338;
    float _554 = (_387 * (sqrt(1.0 - (isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0)))) - _345)) + _345;
    float _565 = (((_533 - _552) + (_552 * cbMtdParam._m0[22u].z)) * _442) + _552;
    float _566 = (((_534 - _553) + (_553 * cbMtdParam._m0[22u].z)) * _442) + _553;
    float _567 = ((sqrt(1.0 - (isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0)))) - _554) * _442) + _554;
    float _569 = cbMtdParam._m0[22u].x + _327.w;
    float _572 = fma(_567, _228 * NORMAL.x, fma(_566, _235 * TANGENT.x, (_221 * _213) * _565));
    float _575 = fma(_567, _228 * NORMAL.y, fma(_566, _235 * TANGENT.y, (_221 * _214) * _565));
    float _578 = fma(_567, _228 * NORMAL.z, fma(_566, _235 * TANGENT.z, (_221 * _215) * _565));
    float _582 = inversesqrt(dot(vec3(_572, _575, _578), vec3(_572, _575, _578)));
    float _583 = _582 * _572;
    float _584 = _582 * _575;
    float _585 = _582 * _578;
    float _3624 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _586 = isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0));
    float _3635 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _3646 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _3657 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _3668 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _3679 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _591 = isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0));
    float _605 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _645 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _655 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _645);
    float _656 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _645);
    float _657 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _645);
    float _661 = inversesqrt(dot(vec3(_655, _656, _657), vec3(_655, _656, _657)));
    float _662 = _655 * _661;
    float _663 = _656 * _661;
    float _664 = _657 * _661;
    vec4 _669 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _671 = _669.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _846 = sqrt(((_655 * _655) + (_656 * _656)) + (_657 * _657));
        float _852 = (cbMatDynParam._m0[5u].x * _846) + cbMatDynParam._m0[5u].y;
        float _3690 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
        float _853 = isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0));
        float _857 = (cbMatDynParam._m0[5u].z * _846) + cbMatDynParam._m0[5u].w;
        float _3701 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0))) - _853)) + _853) < ((_671 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _683 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _684 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _704 = fma(_585, cbSceneParam._m0[5u].z, fma(_584, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _583));
    float _707 = fma(_585, cbSceneParam._m0[6u].z, fma(_584, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _583));
    float _710 = fma(_585, cbSceneParam._m0[7u].z, fma(_584, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _583));
    uint _723 = _241 + 9u;
    uint _724 = _723 + uint(cbMatDynParam._m0[0u].w);
    float _730 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0)))) * cbInstanceData._m0[_724].x;
    float _731 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0)))) * cbInstanceData._m0[_724].y;
    float _732 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0)))) * cbInstanceData._m0[_724].z;
    float _3712 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    float _733 = isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0));
    float _3723 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
    float _734 = isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0));
    float _3734 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
    float _735 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
    float _736 = 1.0 - _591;
    float _737 = _733 * _736;
    float _738 = _734 * _736;
    float _739 = _735 * _736;
    float _744 = (_733 + (-0.039999999105930328369140625)) * _591;
    float _745 = (_734 + (-0.039999999105930328369140625)) * _591;
    float _746 = (_735 + (-0.039999999105930328369140625)) * _591;
    float _747 = _744 + 0.039999999105930328369140625;
    float _749 = _745 + 0.039999999105930328369140625;
    float _750 = _746 + 0.039999999105930328369140625;
    vec4 _759 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _683, cbSceneParam._m0[86u].y * _684));
    float _763 = ((isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0))) * TEXCOORD_5.w) * _759.x;
    float _764 = dot(vec3(_583, _584, _585), vec3(_662, _663, _664));
    float _767 = _764 * 2.0;
    float _771 = (_767 * _583) - _662;
    float _772 = (_767 * _584) - _663;
    float _773 = (_767 * _585) - _664;
    float _777 = abs(dot(vec3(_662, _663, _664), vec3(_583, _584, _585)));
    float _3745 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
    float _779 = sqrt(_586);
    float _792 = exp2((_779 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_779 * 3.0));
    float _798 = (1.0 - _792) * ((_779 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _799 = _792 * _779;
    float _827 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _831 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _835 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1164;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _889 = fma(_835, cbModelParam._m0[26u].z, fma(_831, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _827));
        float _893 = fma(_835, cbModelParam._m0[27u].z, fma(_831, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _827));
        float _897 = fma(_835, cbModelParam._m0[28u].z, fma(_831, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _827));
        float _922 = _827 + _583;
        float _923 = _831 + _584;
        float _924 = _835 + _585;
        float _934 = fma(_924, cbModelParam._m0[26u].z, fma(_923, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _922)) - _889;
        float _935 = fma(_924, cbModelParam._m0[27u].z, fma(_923, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _922)) - _893;
        float _936 = fma(_924, cbModelParam._m0[28u].z, fma(_923, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _922)) - _897;
        float _940 = inversesqrt(dot(vec3(_934, _935, _936), vec3(_934, _935, _936)));
        float _953 = ((_940 * _934) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_889 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _954 = ((_940 * _935) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_893 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _955 = ((_940 * _936) / cbModelParam._m0[34u].z) + ((((((_897 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _958 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_953, _954, _955), 0.0);
        vec4 _965 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_953, _954, _955), 0.0);
        vec4 _972 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_953, _954, _955), 0.0);
        vec4 _979 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_953, _954, _955), 0.0);
        float _992 = exp2((_958.w + (-0.5)) * 20.0) * 2.0;
        float _993 = _992 * (_958.x + (-0.5));
        float _994 = _992 * (_958.y + (-0.5));
        float _995 = _992 * (_958.z + (-0.5));
        float _1002 = exp2((_965.w + (-0.5)) * 20.0) * 2.0;
        float _1003 = _1002 * (_965.x + (-0.5));
        float _1004 = _1002 * (_965.y + (-0.5));
        float _1005 = _1002 * (_965.z + (-0.5));
        float _1012 = exp2((_972.w + (-0.5)) * 20.0) * 2.0;
        float _1013 = _1012 * (_972.x + (-0.5));
        float _1014 = _1012 * (_972.y + (-0.5));
        float _1015 = _1012 * (_972.z + (-0.5));
        float _1022 = exp2((_979.w + (-0.5)) * 20.0) * 2.0;
        float _1023 = _1022 * (_979.x + (-0.5));
        float _1024 = _1022 * (_979.y + (-0.5));
        float _1025 = _1022 * (_979.z + (-0.5));
        float _1026 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1027 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1028 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1029 = _993 * 0.5;
        float _1030 = _1003 * 0.5;
        float _1031 = _1013 * 0.5;
        float _1032 = dot(vec3(_1029, _1030, _1031), vec3(_1029, _1030, _1031));
        float _1037 = (_1032 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1032);
        float _1046 = (dot(vec3(_583, _584, _585), vec3(_1037 * _1029, _1037 * _1030, _1037 * _1031)) + 1.0) * 0.5;
        float _3771 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1056 = sqrt(((_1030 * _1030) + (_1029 * _1029)) + (_1031 * _1031)) / (_1026 + 9.9999997473787516355514526367188e-06);
        float _3782 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1057 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
        float _1058 = _1057 * 2.0;
        float _1062 = (1.0 - _1057) / (_1057 + 1.0);
        float _3793 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1063 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
        float _1072 = ((((1.0 - _1063) * (_1058 + 2.0)) * exp2(log2(isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0))) * (_1058 + 1.0))) + _1063) * _1026;
        float _1073 = _994 * 0.5;
        float _1074 = _1004 * 0.5;
        float _1075 = _1014 * 0.5;
        float _1076 = dot(vec3(_1073, _1074, _1075), vec3(_1073, _1074, _1075));
        float _1081 = (_1076 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1076);
        float _1089 = (dot(vec3(_583, _584, _585), vec3(_1081 * _1073, _1081 * _1074, _1081 * _1075)) + 1.0) * 0.5;
        float _3804 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1098 = sqrt(((_1074 * _1074) + (_1073 * _1073)) + (_1075 * _1075)) / (_1027 + 9.9999997473787516355514526367188e-06);
        float _3815 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1099 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
        float _1100 = _1099 * 2.0;
        float _1104 = (1.0 - _1099) / (_1099 + 1.0);
        float _3826 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1105 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
        float _1114 = ((((1.0 - _1105) * (_1100 + 2.0)) * exp2(log2(isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0))) * (_1100 + 1.0))) + _1105) * _1027;
        float _1115 = _995 * 0.5;
        float _1116 = _1005 * 0.5;
        float _1117 = _1015 * 0.5;
        float _1118 = dot(vec3(_1115, _1116, _1117), vec3(_1115, _1116, _1117));
        float _1123 = (_1118 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1118);
        float _1131 = (dot(vec3(_583, _584, _585), vec3(_1123 * _1115, _1123 * _1116, _1123 * _1117)) + 1.0) * 0.5;
        float _3837 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1140 = sqrt(((_1116 * _1116) + (_1115 * _1115)) + (_1117 * _1117)) / (_1028 + 9.9999997473787516355514526367188e-06);
        float _3848 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1141 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
        float _1142 = _1141 * 2.0;
        float _1146 = (1.0 - _1141) / (_1141 + 1.0);
        float _3859 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1147 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
        float _1156 = ((((1.0 - _1147) * (_1142 + 2.0)) * exp2(log2(isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0))) * (_1142 + 1.0))) + _1147) * _1028;
        _1164 = _995;
        _1166 = _994;
        _1167 = _993;
        _1168 = _1005;
        _1169 = _1004;
        _1170 = _1003;
        _1171 = _1015;
        _1172 = _1014;
        _1173 = _1013;
        _1174 = _1028;
        _1175 = _1027;
        _1176 = _1026;
        _1177 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0)));
        _1178 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0)));
        _1179 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0)));
    }
    else
    {
        _1164 = _1165;
        _1166 = _1165;
        _1167 = _1165;
        _1168 = _1165;
        _1169 = _1165;
        _1170 = _1165;
        _1171 = _1165;
        _1172 = _1165;
        _1173 = _1165;
        _1174 = _1165;
        _1175 = _1165;
        _1176 = _1165;
        _1177 = 0.0;
        _1178 = 0.0;
        _1179 = 0.0;
    }
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1207 = fma(_835, cbModelParam._m0[30u].z, fma(_831, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _827));
        float _1211 = fma(_835, cbModelParam._m0[31u].z, fma(_831, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _827));
        float _1215 = fma(_835, cbModelParam._m0[32u].z, fma(_831, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _827));
        float _1238 = _827 + _583;
        float _1239 = _831 + _584;
        float _1240 = _835 + _585;
        float _1250 = fma(_1240, cbModelParam._m0[30u].z, fma(_1239, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1238)) - _1207;
        float _1251 = fma(_1240, cbModelParam._m0[31u].z, fma(_1239, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1238)) - _1211;
        float _1252 = fma(_1240, cbModelParam._m0[32u].z, fma(_1239, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1238)) - _1215;
        float _1256 = inversesqrt(dot(vec3(_1250, _1251, _1252), vec3(_1250, _1251, _1252)));
        float _1269 = ((_1256 * _1250) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1207 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1270 = ((_1256 * _1251) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1211 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1271 = ((_1256 * _1252) / cbModelParam._m0[35u].z) + ((((((_1215 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1273 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1269, _1270, _1271), 0.0);
        vec4 _1280 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1269, _1270, _1271), 0.0);
        vec4 _1287 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1269, _1270, _1271), 0.0);
        vec4 _1294 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1269, _1270, _1271), 0.0);
        float _1306 = exp2((_1273.w + (-0.5)) * 20.0) * 2.0;
        float _1307 = _1306 * (_1273.x + (-0.5));
        float _1308 = _1306 * (_1273.y + (-0.5));
        float _1309 = _1306 * (_1273.z + (-0.5));
        float _1316 = exp2((_1280.w + (-0.5)) * 20.0) * 2.0;
        float _1317 = _1316 * (_1280.x + (-0.5));
        float _1318 = _1316 * (_1280.y + (-0.5));
        float _1319 = _1316 * (_1280.z + (-0.5));
        float _1326 = exp2((_1287.w + (-0.5)) * 20.0) * 2.0;
        float _1327 = _1326 * (_1287.x + (-0.5));
        float _1328 = _1326 * (_1287.y + (-0.5));
        float _1329 = _1326 * (_1287.z + (-0.5));
        float _1336 = exp2((_1294.w + (-0.5)) * 20.0) * 2.0;
        float _1337 = _1336 * (_1294.x + (-0.5));
        float _1338 = _1336 * (_1294.y + (-0.5));
        float _1339 = _1336 * (_1294.z + (-0.5));
        float _1340 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1341 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1342 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1343 = _1307 * 0.5;
        float _1344 = _1317 * 0.5;
        float _1345 = _1327 * 0.5;
        float _1346 = dot(vec3(_1343, _1344, _1345), vec3(_1343, _1344, _1345));
        float _1351 = (_1346 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1346);
        float _1359 = (dot(vec3(_583, _584, _585), vec3(_1351 * _1343, _1351 * _1344, _1351 * _1345)) + 1.0) * 0.5;
        float _3900 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1368 = sqrt(((_1344 * _1344) + (_1343 * _1343)) + (_1345 * _1345)) / (_1340 + 9.9999997473787516355514526367188e-06);
        float _3911 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1369 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
        float _1370 = _1369 * 2.0;
        float _1374 = (1.0 - _1369) / (_1369 + 1.0);
        float _3922 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1375 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
        float _1384 = ((((1.0 - _1375) * (_1370 + 2.0)) * exp2(log2(isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0))) * (_1370 + 1.0))) + _1375) * _1340;
        float _1385 = _1308 * 0.5;
        float _1386 = _1318 * 0.5;
        float _1387 = _1328 * 0.5;
        float _1388 = dot(vec3(_1385, _1386, _1387), vec3(_1385, _1386, _1387));
        float _1393 = (_1388 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1388);
        float _1401 = (dot(vec3(_583, _584, _585), vec3(_1393 * _1385, _1393 * _1386, _1393 * _1387)) + 1.0) * 0.5;
        float _3933 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1410 = sqrt(((_1386 * _1386) + (_1385 * _1385)) + (_1387 * _1387)) / (_1341 + 9.9999997473787516355514526367188e-06);
        float _3944 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1411 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
        float _1412 = _1411 * 2.0;
        float _1416 = (1.0 - _1411) / (_1411 + 1.0);
        float _3955 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1417 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
        float _1426 = ((((1.0 - _1417) * (_1412 + 2.0)) * exp2(log2(isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0))) * (_1412 + 1.0))) + _1417) * _1341;
        float _1427 = _1309 * 0.5;
        float _1428 = _1319 * 0.5;
        float _1429 = _1329 * 0.5;
        float _1430 = dot(vec3(_1427, _1428, _1429), vec3(_1427, _1428, _1429));
        float _1435 = (_1430 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1430);
        float _1443 = (dot(vec3(_583, _584, _585), vec3(_1435 * _1427, _1435 * _1428, _1435 * _1429)) + 1.0) * 0.5;
        float _3966 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1452 = sqrt(((_1428 * _1428) + (_1427 * _1427)) + (_1429 * _1429)) / (_1342 + 9.9999997473787516355514526367188e-06);
        float _3977 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1453 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
        float _1454 = _1453 * 2.0;
        float _1458 = (1.0 - _1453) / (_1453 + 1.0);
        float _3988 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1459 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
        float _1468 = ((((1.0 - _1459) * (_1454 + 2.0)) * exp2(log2(isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0))) * (_1454 + 1.0))) + _1459) * _1342;
        _1476 = _1309;
        _1477 = _1308;
        _1478 = _1307;
        _1479 = _1319;
        _1480 = _1318;
        _1481 = _1317;
        _1482 = _1329;
        _1483 = _1328;
        _1484 = _1327;
        _1485 = _1342;
        _1486 = _1341;
        _1487 = _1340;
        _1488 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0)));
        _1489 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0)));
        _1490 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0)));
    }
    else
    {
        _1476 = _1165;
        _1477 = _1165;
        _1478 = _1165;
        _1479 = _1165;
        _1480 = _1165;
        _1481 = _1165;
        _1482 = _1165;
        _1483 = _1165;
        _1484 = _1165;
        _1485 = _1165;
        _1486 = _1165;
        _1487 = _1165;
        _1488 = 0.0;
        _1489 = 0.0;
        _1490 = 0.0;
    }
    float _1500 = (cbModelParam._m0[1u].x * (_1488 - _1177)) + _1177;
    float _1501 = (cbModelParam._m0[1u].x * (_1489 - _1178)) + _1178;
    float _1502 = (cbModelParam._m0[1u].x * (_1490 - _1179)) + _1179;
    float _1523 = fma(_1502, cbSceneParam._m0[89u].z, fma(_1501, cbSceneParam._m0[89u].y, _1500 * cbSceneParam._m0[89u].x));
    float _1526 = fma(_1502, cbSceneParam._m0[90u].z, fma(_1501, cbSceneParam._m0[90u].y, _1500 * cbSceneParam._m0[90u].x));
    float _1529 = fma(_1502, cbSceneParam._m0[91u].z, fma(_1501, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1500));
    float _1544 = _771 * 0.5;
    float _1545 = _772 * 0.5;
    float _1546 = _773 * 0.5;
    float _1547 = dot(vec4(_1544, _1545, _1546, 1.0), vec4(_1478, _1481, _1484, _1487));
    float _1550 = dot(vec4(_1544, _1545, _1546, 1.0), vec4(_1477, _1480, _1483, _1486));
    float _1553 = dot(vec4(_1544, _1545, _1546, 1.0), vec4(_1476, _1479, _1482, _1485));
    float _1587;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1560 = dot(vec4(_1544, _1545, _1546, 1.0), vec4(_1164, _1168, _1171, _1174));
        float _1564 = dot(vec4(_1544, _1545, _1546, 1.0), vec4(_1166, _1169, _1172, _1175));
        float _1568 = dot(vec4(_1544, _1545, _1546, 1.0), vec4(_1167, _1170, _1173, _1176));
        float _1575 = dot(vec4(cbModelParam._m0[39u]), vec4(_1544, _1545, _1546, 1.0));
        _1587 = dot(vec3(isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0)), isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0)), isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1575) ? 0.0 : (isnan(0.0) ? _1575 : max(0.0, _1575))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1587 = 1.0;
    }
    float _1598;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1589 = dot(vec4(cbModelParam._m0[40u]), vec4(_1544, _1545, _1546, 1.0));
        _1598 = dot(vec3(isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0)), isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0)), isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1589) ? 0.0 : (isnan(0.0) ? _1589 : max(0.0, _1589))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1598 = 1.0;
    }
    float _1602 = (_1598 * cbModelParam._m0[1u].x) + (_1587 * (1.0 - cbModelParam._m0[1u].x));
    float _1612 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _586);
    float _1613 = isnan(_1612) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1612 : min(cbModelParam._m0[25u].z, _1612));
    float _1693;
    float _1695;
    float _1697;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1660 = fma(_835, cbModelParam._m0[13u].z, fma(_831, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _827)) + cbModelParam._m0[13u].w;
        float _1664 = fma(_835, cbModelParam._m0[14u].z, fma(_831, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _827)) + cbModelParam._m0[14u].w;
        float _1668 = fma(_835, cbModelParam._m0[15u].z, fma(_831, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _827)) + cbModelParam._m0[15u].w;
        float _1671 = fma(_773, cbModelParam._m0[13u].z, fma(_772, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _771));
        float _1674 = fma(_773, cbModelParam._m0[14u].z, fma(_772, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _771));
        float _1677 = fma(_773, cbModelParam._m0[15u].z, fma(_772, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _771));
        float _1705;
        if (_1671 > 0.0)
        {
            _1705 = abs((1.0 - _1660) / _1671);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1671 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1660 + 1.0) / _1671);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1705 = frontier_phi_17_15_ladder;
        }
        float _1908;
        if (_1674 > 0.0)
        {
            _1908 = abs((1.0 - _1664) / _1674);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1674 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1664 + 1.0) / _1674);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1908 = frontier_phi_26_22_ladder;
        }
        float _2162;
        if (_1677 > 0.0)
        {
            _2162 = abs((1.0 - _1668) / _1677);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1677 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1668 + 1.0) / _1677);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2162 = frontier_phi_38_33_ladder;
        }
        float _2164 = isnan(_1908) ? _1705 : (isnan(_1705) ? _1908 : min(_1705, _1908));
        float _2165 = isnan(_2162) ? _2164 : (isnan(_2164) ? _2162 : min(_2164, _2162));
        float _2169 = (_2165 * _1671) + _1660;
        float _2170 = (_2165 * _1674) + _1664;
        float _2171 = (_2165 * _1677) + _1668;
        float _2172 = _2165 * 9.9999997473787516355514526367188e-05;
        float _2174 = (-1.0) - _2172;
        float _2176 = _2172 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2171 > _2176) || ((_2171 < _2174) || ((_2170 > _2176) || ((_2170 < _2174) || ((_2169 < _2174) || (_2169 > _2176))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2299 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2171, cbModelParam._m0[9u].z, fma(_2170, cbModelParam._m0[9u].y, _2169 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2171, cbModelParam._m0[10u].z, fma(_2170, cbModelParam._m0[10u].y, _2169 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2171, cbModelParam._m0[11u].z, fma(_2170, cbModelParam._m0[11u].y, _2169 * cbModelParam._m0[11u].x))), _1613);
            frontier_phi_16_38_ladder = _2299.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2299.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2299.x * cbModelParam._m0[1u].y;
        }
        _1693 = frontier_phi_16_38_ladder_2;
        _1695 = frontier_phi_16_38_ladder_1;
        _1697 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1681 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_771, _772, _773), _1613);
        _1693 = _1681.x * cbModelParam._m0[1u].y;
        _1695 = _1681.y * cbModelParam._m0[1u].y;
        _1697 = _1681.z * cbModelParam._m0[1u].y;
    }
    float _1701 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _586);
    float _1702 = isnan(_1701) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1701 : min(cbModelParam._m0[25u].w, _1701));
    float _1791;
    float _1793;
    float _1795;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1755 = fma(_835, cbModelParam._m0[21u].z, fma(_831, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _827)) + cbModelParam._m0[21u].w;
        float _1759 = fma(_835, cbModelParam._m0[22u].z, fma(_831, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _827)) + cbModelParam._m0[22u].w;
        float _1763 = fma(_835, cbModelParam._m0[23u].z, fma(_831, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _827)) + cbModelParam._m0[23u].w;
        float _1766 = fma(_773, cbModelParam._m0[21u].z, fma(_772, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _771));
        float _1769 = fma(_773, cbModelParam._m0[22u].z, fma(_772, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _771));
        float _1772 = fma(_773, cbModelParam._m0[23u].z, fma(_772, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _771));
        float _1913;
        if (_1766 > 0.0)
        {
            _1913 = abs((1.0 - _1755) / _1766);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1766 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1755 + 1.0) / _1766);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1913 = frontier_phi_28_24_ladder;
        }
        float _2189;
        if (_1769 > 0.0)
        {
            _2189 = abs((1.0 - _1759) / _1769);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1769 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1759 + 1.0) / _1769);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2189 = frontier_phi_40_35_ladder;
        }
        float _2402;
        if (_1772 > 0.0)
        {
            _2402 = abs((1.0 - _1763) / _1772);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1772 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1763 + 1.0) / _1772);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2402 = frontier_phi_49_46_ladder;
        }
        float _2404 = isnan(_2189) ? _1913 : (isnan(_1913) ? _2189 : min(_1913, _2189));
        float _2405 = isnan(_2402) ? _2404 : (isnan(_2404) ? _2402 : min(_2404, _2402));
        float _2409 = (_2405 * _1766) + _1755;
        float _2410 = (_2405 * _1769) + _1759;
        float _2411 = (_2405 * _1772) + _1763;
        float _2412 = _2405 * 9.9999997473787516355514526367188e-05;
        float _2413 = (-1.0) - _2412;
        float _2415 = _2412 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2411 > _2415) || ((_2411 < _2413) || ((_2410 > _2415) || ((_2410 < _2413) || ((_2409 < _2413) || (_2409 > _2415))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2610 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2411, cbModelParam._m0[17u].z, fma(_2410, cbModelParam._m0[17u].y, _2409 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2411, cbModelParam._m0[18u].z, fma(_2410, cbModelParam._m0[18u].y, _2409 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2411, cbModelParam._m0[19u].z, fma(_2410, cbModelParam._m0[19u].y, _2409 * cbModelParam._m0[19u].x))), _1702);
            frontier_phi_25_49_ladder = _2610.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2610.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2610.x * cbModelParam._m0[1u].z;
        }
        _1791 = frontier_phi_25_49_ladder_2;
        _1793 = frontier_phi_25_49_ladder_1;
        _1795 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1775 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_771, _772, _773), _1702);
        _1791 = _1775.x * cbModelParam._m0[1u].z;
        _1793 = _1775.y * cbModelParam._m0[1u].z;
        _1795 = _1775.z * cbModelParam._m0[1u].z;
    }
    float _1808 = (((_798 * _747) + _799) * _763) * ((cbModelParam._m0[1u].w * (_1791 - _1693)) + _1693);
    float _1810 = (((_798 * _749) + _799) * _763) * ((cbModelParam._m0[1u].w * (_1793 - _1695)) + _1695);
    float _1812 = (((_798 * _750) + _799) * _763) * ((cbModelParam._m0[1u].w * (_1795 - _1697)) + _1697);
    float _1815 = fma(_1812, cbSceneParam._m0[89u].z, fma(_1810, cbSceneParam._m0[89u].y, _1808 * cbSceneParam._m0[89u].x));
    float _1818 = fma(_1812, cbSceneParam._m0[90u].z, fma(_1810, cbSceneParam._m0[90u].y, _1808 * cbSceneParam._m0[90u].x));
    float _1821 = fma(_1812, cbSceneParam._m0[91u].z, fma(_1810, cbSceneParam._m0[91u].y, _1808 * cbSceneParam._m0[91u].x));
    uvec4 _1831 = floatBitsToUint(cbInstanceData._m0[_241 + 5u]);
    uint _1833 = _1831.x * 14u;
    uint _1834 = _1833 + 13u;
    float _1841 = _763 + (-1.0);
    float _1846 = (cbLight._m0[_1834].x * _1841) + 1.0;
    float _1847 = (cbLight._m0[_1834].y * _1841) + 1.0;
    float _1848 = (cbLight._m0[_1834].z * _1841) + 1.0;
    float _1849 = (cbLight._m0[_1834].w * _1841) + 1.0;
    uint _1850 = _1833 + 5u;
    float _1856 = isnan(1.0) ? _1847 : (isnan(_1847) ? 1.0 : min(_1847, 1.0));
    uint _1860 = _1833 + 4u;
    float _1867 = isnan(1.0) ? _1846 : (isnan(_1846) ? 1.0 : min(_1846, 1.0));
    uint _1871 = _1833 | 1u;
    float _1882 = dot(vec3(cbLight._m0[_1833].xyz), vec3(_583, _584, _585));
    float _1885 = dot(vec3(cbLight._m0[_1871].xyz), vec3(_583, _584, _585));
    float _4124 = isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0));
    float _4135 = isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0));
    float _1890 = (isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0))) * 0.3183098733425140380859375;
    float _1892 = (isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0))) * 0.3183098733425140380859375;
    float _1899 = ((cbLight._m0[_1850].x * _1856) * _1892) + ((cbLight._m0[_1860].x * _1867) * _1890);
    float _1900 = ((_1856 * cbLight._m0[_1850].y) * _1892) + ((_1867 * cbLight._m0[_1860].y) * _1890);
    float _1901 = ((_1856 * cbLight._m0[_1850].z) * _1892) + ((_1867 * cbLight._m0[_1860].z) * _1890);
    uvec4 _1905 = floatBitsToUint(cbLight._m0[_1833 + 12u]);
    bool _1907 = _1905.x == 0u;
    float _1918;
    float _1920;
    float _1922;
    if (_1907)
    {
        _1918 = _1899;
        _1920 = _1900;
        _1922 = _1901;
    }
    else
    {
        uint _1926 = _1833 + 6u;
        float _1942 = (dot(vec3(cbLight._m0[_1833 + 2u].xyz), vec3(_583, _584, _585)) * 0.5) + 0.5;
        float _1943 = _1942 * _1942;
        float _4146 = isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0));
        float _1944 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
        float _1945 = isnan(1.0) ? _1848 : (isnan(_1848) ? 1.0 : min(_1848, 1.0));
        _1918 = (((cbLight._m0[_1926].x * 0.3183098733425140380859375) * _1944) * _1945) + _1899;
        _1920 = (((cbLight._m0[_1926].y * 0.3183098733425140380859375) * _1944) * _1945) + _1900;
        _1922 = (((cbLight._m0[_1926].z * 0.3183098733425140380859375) * _1944) * _1945) + _1901;
    }
    bool _1925 = _1905.y == 0u;
    float _1963;
    float _1965;
    float _1967;
    if (_1925)
    {
        _1963 = _1918;
        _1965 = _1920;
        _1967 = _1922;
    }
    else
    {
        uint _2133 = _1833 + 7u;
        float _2149 = (dot(vec3(cbLight._m0[_1833 + 3u].xyz), vec3(_583, _584, _585)) * 0.5) + 0.5;
        float _2150 = _2149 * _2149;
        float _4162 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
        float _2151 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
        float _2152 = isnan(1.0) ? _1849 : (isnan(_1849) ? 1.0 : min(_1849, 1.0));
        _1963 = (((cbLight._m0[_2133].x * 0.3183098733425140380859375) * _2151) * _2152) + _1918;
        _1965 = (((cbLight._m0[_2133].y * 0.3183098733425140380859375) * _2151) * _2152) + _1920;
        _1967 = (((cbLight._m0[_2133].z * 0.3183098733425140380859375) * _2151) * _2152) + _1922;
    }
    uint _1970 = _1833 + 8u;
    float _1983 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1833].w)) * _586) * 0.949999988079071044921875);
    float _1984 = _1983 * _1983;
    float _1985 = cbLight._m0[_1833].x + _662;
    float _1986 = cbLight._m0[_1833].y + _663;
    float _1987 = cbLight._m0[_1833].z + _664;
    float _1991 = inversesqrt(dot(vec3(_1985, _1986, _1987), vec3(_1985, _1986, _1987)));
    float _1992 = _1991 * _1985;
    float _1993 = _1991 * _1986;
    float _1994 = _1991 * _1987;
    float _1995 = dot(vec3(_583, _584, _585), vec3(cbLight._m0[_1833].xyz));
    float _4178 = isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0));
    float _1998 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
    float _4189 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    float _1999 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
    float _2000 = dot(vec3(_583, _584, _585), vec3(_1992, _1993, _1994));
    float _4200 = isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0));
    float _2003 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
    float _2004 = dot(vec3(cbLight._m0[_1833].xyz), vec3(_1992, _1993, _1994));
    float _4211 = isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0));
    float _2008 = _1984 * _1984;
    float _2012 = ((_2003 * _2003) * (_2008 + (-1.0))) + 1.0;
    float _2020 = exp2(log2(1.0 - (isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0)))) * 5.0);
    float _2021 = 0.959999978542327880859375 - _744;
    float _2023 = 0.959999978542327880859375 - _745;
    float _2024 = 0.959999978542327880859375 - _746;
    float _2031 = 1.0 - _1984;
    float _2042 = (0.5 / (((_1999 * ((_1998 * _2031) + _1984)) + 9.9999999392252902907785028219223e-09) + (((_1999 * _2031) + _1984) * _1998))) * _1998;
    float _4222 = isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0));
    float _2044 = (isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0))) * (_2008 / ((_2012 * _2012) * 3.141590118408203125));
    uint _2055 = _1833 + 9u;
    float _2066 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1871].w)) * _586) * 0.949999988079071044921875);
    float _2067 = _2066 * _2066;
    float _2068 = cbLight._m0[_1871].x + _662;
    float _2069 = cbLight._m0[_1871].y + _663;
    float _2070 = cbLight._m0[_1871].z + _664;
    float _2074 = inversesqrt(dot(vec3(_2068, _2069, _2070), vec3(_2068, _2069, _2070)));
    float _2075 = _2074 * _2068;
    float _2076 = _2074 * _2069;
    float _2077 = _2074 * _2070;
    float _2078 = dot(vec3(_583, _584, _585), vec3(cbLight._m0[_1871].xyz));
    float _4233 = isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0));
    float _2081 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
    float _2082 = dot(vec3(_583, _584, _585), vec3(_2075, _2076, _2077));
    float _4244 = isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0));
    float _2085 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
    float _2086 = dot(vec3(cbLight._m0[_1871].xyz), vec3(_2075, _2076, _2077));
    float _4255 = isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0));
    float _2090 = _2067 * _2067;
    float _2094 = ((_2085 * _2085) * (_2090 + (-1.0))) + 1.0;
    float _2101 = exp2(log2(1.0 - (isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0)))) * 5.0);
    float _2108 = 1.0 - _2067;
    float _2118 = (0.5 / (((_1999 * ((_2081 * _2108) + _2067)) + 9.9999999392252902907785028219223e-09) + (((_1999 * _2108) + _2067) * _2081))) * _2081;
    float _4266 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
    float _2120 = (isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0))) * (_2090 / ((_2094 * _2094) * 3.141590118408203125));
    float _2130 = (((((_2101 * _2021) + _747) * cbLight._m0[_2055].x) * _2120) * _1856) + (((((_2020 * _2021) + _747) * cbLight._m0[_1970].x) * _2044) * _1867);
    float _2131 = (((((_2101 * _2023) + _749) * cbLight._m0[_2055].y) * _2120) * _1856) + (((((_2020 * _2023) + _749) * cbLight._m0[_1970].y) * _2044) * _1867);
    float _2132 = (((((_2101 * _2024) + _750) * cbLight._m0[_2055].z) * _2120) * _1856) + (((((_2020 * _2024) + _750) * cbLight._m0[_1970].z) * _2044) * _1867);
    float _2194;
    float _2196;
    float _2198;
    if (_1907)
    {
        _2194 = _2130;
        _2196 = _2131;
        _2198 = _2132;
    }
    else
    {
        uint _2200 = _1833 + 2u;
        uint _2204 = _1833 + 10u;
        float _2218 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2200].w)) * _586) * 0.949999988079071044921875);
        float _2219 = _2218 * _2218;
        float _2220 = cbLight._m0[_2200].x + _662;
        float _2221 = cbLight._m0[_2200].y + _663;
        float _2222 = cbLight._m0[_2200].z + _664;
        float _2226 = inversesqrt(dot(vec3(_2220, _2221, _2222), vec3(_2220, _2221, _2222)));
        float _2227 = _2226 * _2220;
        float _2228 = _2226 * _2221;
        float _2229 = _2226 * _2222;
        float _2230 = dot(vec3(_583, _584, _585), vec3(cbLight._m0[_2200].xyz));
        float _4277 = isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0));
        float _2233 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
        float _2234 = dot(vec3(_583, _584, _585), vec3(_2227, _2228, _2229));
        float _4288 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
        float _2237 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
        float _2238 = dot(vec3(cbLight._m0[_2200].xyz), vec3(_2227, _2228, _2229));
        float _4299 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
        float _2242 = _2219 * _2219;
        float _2246 = ((_2237 * _2237) * (_2242 + (-1.0))) + 1.0;
        float _2253 = exp2(log2(1.0 - (isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0)))) * 5.0);
        float _2260 = 1.0 - _2219;
        float _2270 = (0.5 / (((_1999 * ((_2233 * _2260) + _2219)) + 9.9999999392252902907785028219223e-09) + (((_1999 * _2260) + _2219) * _2233))) * _2233;
        float _4310 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
        float _2272 = (isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0))) * (_2242 / ((_2246 * _2246) * 3.141590118408203125));
        float _2273 = isnan(1.0) ? _1848 : (isnan(_1848) ? 1.0 : min(_1848, 1.0));
        _2194 = (((((_2253 * _2021) + _747) * cbLight._m0[_2204].x) * _2272) * _2273) + _2130;
        _2196 = (((((_2253 * _2023) + _749) * cbLight._m0[_2204].y) * _2272) * _2273) + _2131;
        _2198 = (((((_2253 * _2024) + _750) * cbLight._m0[_2204].z) * _2272) * _2273) + _2132;
    }
    float _2308;
    float _2310;
    float _2312;
    if (_1925)
    {
        _2308 = _2194;
        _2310 = _2196;
        _2312 = _2198;
    }
    else
    {
        uint _2319 = _1833 + 3u;
        uint _2323 = _1833 + 11u;
        float _2337 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2319].w)) * _586) * 0.949999988079071044921875);
        float _2338 = _2337 * _2337;
        float _2339 = cbLight._m0[_2319].x + _662;
        float _2340 = cbLight._m0[_2319].y + _663;
        float _2341 = cbLight._m0[_2319].z + _664;
        float _2345 = inversesqrt(dot(vec3(_2339, _2340, _2341), vec3(_2339, _2340, _2341)));
        float _2346 = _2345 * _2339;
        float _2347 = _2345 * _2340;
        float _2348 = _2345 * _2341;
        float _2349 = dot(vec3(_583, _584, _585), vec3(cbLight._m0[_2319].xyz));
        float _4326 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
        float _2352 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
        float _2353 = dot(vec3(_583, _584, _585), vec3(_2346, _2347, _2348));
        float _4337 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
        float _2356 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
        float _2357 = dot(vec3(cbLight._m0[_2319].xyz), vec3(_2346, _2347, _2348));
        float _4348 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
        float _2361 = _2338 * _2338;
        float _2365 = ((_2356 * _2356) * (_2361 + (-1.0))) + 1.0;
        float _2372 = exp2(log2(1.0 - (isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0)))) * 5.0);
        float _2379 = 1.0 - _2338;
        float _2389 = (0.5 / (((_1999 * ((_2352 * _2379) + _2338)) + 9.9999999392252902907785028219223e-09) + (((_1999 * _2379) + _2338) * _2352))) * _2352;
        float _4359 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
        float _2391 = (isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0))) * (_2361 / ((_2365 * _2365) * 3.141590118408203125));
        float _2392 = isnan(1.0) ? _1849 : (isnan(_1849) ? 1.0 : min(_1849, 1.0));
        _2308 = (((((_2372 * _2021) + _747) * cbLight._m0[_2323].x) * _2391) * _2392) + _2194;
        _2310 = (((((_2372 * _2023) + _749) * cbLight._m0[_2323].y) * _2391) * _2392) + _2196;
        _2312 = (((((_2372 * _2024) + _750) * cbLight._m0[_2323].z) * _2391) * _2392) + _2198;
    }
    float _2527;
    float _2529;
    float _2531;
    float _2533;
    float _2535;
    float _2537;
    if (_1831.y == 0u)
    {
        float _2467 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2468 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2467;
        float _2469 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2467;
        float _2470 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2467;
        uvec4 _2482 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2483 = _2482.x;
        uint _2494 = uint((float(_2482.y) * floor(float(uint(cbSceneParam._m0[85u].y * _684) / _2483))) + floor(float(uint(cbSceneParam._m0[85u].x * _683) / _2483)));
        float _2504 = (log2(_2470 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2505 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
        uint _2508 = uint(isnan(14.0) ? _2505 : (isnan(_2505) ? 14.0 : min(_2505, 14.0)));
        uvec4 _2513 = texelFetch(g_lightClusterGridBuffer, int(((_2508 << 2u) + (_2494 << 6u)) >> 2u));
        uint _2514 = _2513.x;
        uint _2515 = _2482.z;
        float _2615;
        float _2617;
        float _2619;
        float _2621;
        float _2623;
        float _2625;
        if (((((1u << ((_2515 >> 4u) & 15u)) + 4294967295u) & _2514) == 0u) || ((_2515 & 240u) == 0u))
        {
            _2615 = 0.0;
            _2617 = 0.0;
            _2619 = 0.0;
            _2621 = 0.0;
            _2623 = 0.0;
            _2625 = 0.0;
        }
        else
        {
            float _2616;
            float _2618;
            float _2620;
            float _2622;
            float _2624;
            float _2626;
            float _2768 = 0.0;
            float _2769 = 0.0;
            float _2770 = 0.0;
            float _2771 = 0.0;
            float _2772 = 0.0;
            float _2773 = 0.0;
            uint _2774 = 0u;
            uint _2783;
            bool _2784;
            for (;;)
            {
                _2783 = texelFetch(g_lightClassification, int((((_2508 << 5u) + (_2494 << 9u)) + (_2774 << 2u)) >> 2u)).x;
                _2784 = _2783 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2784)
                {
                    frontier_phi_66_pred = _2768;
                    frontier_phi_66_pred_1 = _2773;
                    frontier_phi_66_pred_2 = _2772;
                    frontier_phi_66_pred_3 = _2771;
                    frontier_phi_66_pred_4 = _2770;
                    frontier_phi_66_pred_5 = _2769;
                }
                else
                {
                    float _2913;
                    float _2914;
                    float _2915;
                    float _2916;
                    float _2917;
                    float _2918;
                    uint _2919;
                    _2913 = _2768;
                    _2914 = _2769;
                    _2915 = _2770;
                    _2916 = _2771;
                    _2917 = _2772;
                    _2918 = _2773;
                    _2919 = _2783;
                    float _2840;
                    float _2841;
                    float _2842;
                    float _2843;
                    float _2844;
                    float _2845;
                    for (;;)
                    {
                        uint _2923 = uint(findLSB(_2919)) + (_2774 << 5u);
                        uint _2920 = (_2919 + 4294967295u) & _2919;
                        uint _2925 = _2923 * 48u;
                        vec4 _2939 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2925)).x, texelFetch(g_PointLightRenderingBuffer, int(_2925 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2925 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2925 + 3u)).x));
                        uint _2945 = (_2923 * 48u) + 4u;
                        vec4 _2958 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2945)).x, texelFetch(g_PointLightRenderingBuffer, int(_2945 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2945 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2945 + 3u)).x));
                        uint _2964 = (_2923 * 48u) + 8u;
                        vec3 _2975 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2964)).x, texelFetch(g_PointLightRenderingBuffer, int(_2964 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2964 + 2u)).x));
                        float _2979 = _2939.x - _2468;
                        float _2980 = _2939.y - _2469;
                        float _2981 = _2939.z - _2470;
                        float _2982 = dot(vec3(_2979, _2980, _2981), vec3(_2979, _2980, _2981));
                        float _2985 = inversesqrt(_2982);
                        float _2986 = _2985 * _2979;
                        float _2987 = _2985 * _2980;
                        float _2988 = _2985 * _2981;
                        float _2989 = dot(vec3(_704, _707, _710), vec3(_2986, _2987, _2988));
                        float _2994 = 1.0 - (_2982 * _2939.w);
                        float _4385 = isnan(0.0) ? _2994 : (isnan(_2994) ? 0.0 : max(_2994, 0.0));
                        float _2995 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
                        float _2996 = sqrt(_2982) * _2958.w;
                        float _2999 = 1.39999997615814208984375 / (_2996 + 1.39999997615814208984375);
                        float _3000 = _2999 * _2999;
                        float _3003 = ((1.0 - _3000) * _2989) + _3000;
                        float _3006 = _2996 * _2996;
                        float _3010 = ((isnan(0.0) ? _3003 : (isnan(_3003) ? 0.0 : max(_3003, 0.0))) * _2995) / ((_3006 * 0.699999988079071044921875) + 1.0);
                        float _3014 = (-0.0) - _2468;
                        float _3015 = (-0.0) - _2469;
                        float _3016 = (-0.0) - _2470;
                        float _3020 = inversesqrt(dot(vec3(_3014, _3015, _3016), vec3(_3014, _3015, _3016)));
                        float _3021 = _3020 * _3014;
                        float _3022 = _3020 * _3015;
                        float _3023 = _3020 * _3016;
                        float _3031 = exp2(log2(1.0 / ((_3006 * 3.5) + 5.0)) * 0.25);
                        float _3032 = 1.0 - _779;
                        float _3039 = sqrt(1.0 - ((1.0 - (_3032 * _3032)) * (1.0 - (_3031 * _3031))));
                        float _3040 = _3039 * _3039;
                        float _3041 = _3040 * _3040;
                        float _3042 = _3021 + _2986;
                        float _3043 = _3022 + _2987;
                        float _3044 = _3023 + _2988;
                        float _3048 = inversesqrt(dot(vec3(_3042, _3043, _3044), vec3(_3042, _3043, _3044)));
                        float _3052 = dot(vec3(_704, _707, _710), vec3(_3021, _3022, _3023));
                        float _4401 = isnan(0.0) ? _3052 : (isnan(_3052) ? 0.0 : max(_3052, 0.0));
                        float _3055 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
                        float _3056 = dot(vec3(_704, _707, _710), vec3(_3048 * _3042, _3048 * _3043, _3048 * _3044));
                        float _4412 = isnan(0.0) ? _3056 : (isnan(_3056) ? 0.0 : max(_3056, 0.0));
                        float _3059 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
                        float _3063 = ((_3059 * _3059) * (_3041 + (-1.0))) + 1.0;
                        float _3064 = _2999 * _3040;
                        float _3065 = _3064 * _3064;
                        float _3068 = ((1.0 - _3065) * _2989) + _3065;
                        float _4423 = isnan(0.0) ? _3068 : (isnan(_3068) ? 0.0 : max(_3068, 0.0));
                        float _3069 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
                        float _3070 = 1.0 - _3040;
                        float _3080 = (0.5 / (((_3069 * ((_3055 * _3070) + _3040)) + 9.9999999392252902907785028219223e-09) + (((_3069 * _3070) + _3040) * _3055))) * _3069;
                        float _4434 = isnan(0.0) ? _3080 : (isnan(_3080) ? 0.0 : max(_3080, 0.0));
                        float _3091 = (((_3041 * 3.1415927410125732421875) * (isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0)))) / ((_3063 * _3063) * ((_3006 * 2.1991131305694580078125) + 3.141590118408203125))) * _2995;
                        _2843 = (_3010 * _2958.x) + _2916;
                        _2844 = (_3010 * _2958.y) + _2917;
                        _2845 = (_3010 * _2958.z) + _2918;
                        _2840 = (_3091 * _2975.x) + _2913;
                        _2841 = (_3091 * _2975.y) + _2914;
                        _2842 = (_3091 * _2975.z) + _2915;
                        if (_2920 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2913 = _2840;
                            _2914 = _2841;
                            _2915 = _2842;
                            _2916 = _2843;
                            _2917 = _2844;
                            _2918 = _2845;
                            _2919 = _2920;
                        }
                    }
                    frontier_phi_66_pred = _2840;
                    frontier_phi_66_pred_1 = _2845;
                    frontier_phi_66_pred_2 = _2844;
                    frontier_phi_66_pred_3 = _2843;
                    frontier_phi_66_pred_4 = _2842;
                    frontier_phi_66_pred_5 = _2841;
                }
                _2616 = frontier_phi_66_pred;
                _2626 = frontier_phi_66_pred_1;
                _2624 = frontier_phi_66_pred_2;
                _2622 = frontier_phi_66_pred_3;
                _2620 = frontier_phi_66_pred_4;
                _2618 = frontier_phi_66_pred_5;
                uint _2775 = _2774 + 1u;
                if (_2775 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2768 = _2616;
                    _2769 = _2618;
                    _2770 = _2620;
                    _2771 = _2622;
                    _2772 = _2624;
                    _2773 = _2626;
                    _2774 = _2775;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2615 = _2616;
            _2617 = _2618;
            _2619 = _2620;
            _2621 = _2622;
            _2623 = _2624;
            _2625 = _2626;
        }
        uvec4 _2629 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2630 = _2629.z;
        uint _2632 = (_2630 >> 8u) & 15u;
        float _2736;
        float _2738;
        float _2740;
        float _2742;
        float _2744;
        float _2746;
        if (((4294967295u << _2632) & _2514) == 0u)
        {
            _2736 = _2615;
            _2738 = _2617;
            _2740 = _2619;
            _2742 = _2621;
            _2744 = _2623;
            _2746 = _2625;
        }
        else
        {
            float _2761 = inversesqrt(dot(vec3(_2468, _2469, _2470), vec3(_2468, _2469, _2470)));
            float _2762 = _2761 * _2468;
            float _2763 = _2761 * _2469;
            float _2764 = _2761 * _2470;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2632 < ((_2630 >> 12u) & 15u))
            {
                float _2737;
                float _2739;
                float _2741;
                float _2743;
                float _2745;
                float _2747;
                float _2896 = _2615;
                float _2897 = _2617;
                float _2898 = _2619;
                float _2899 = _2621;
                float _2900 = _2623;
                float _2901 = _2625;
                uint _2902 = _2632;
                uint _2911;
                bool _2912;
                for (;;)
                {
                    _2911 = texelFetch(g_lightClassification, int((((_2508 << 5u) + (_2494 << 9u)) + (_2902 << 2u)) >> 2u)).x;
                    _2912 = _2911 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2912)
                    {
                        frontier_phi_77_pred = _2901;
                        frontier_phi_77_pred_1 = _2900;
                        frontier_phi_77_pred_2 = _2899;
                        frontier_phi_77_pred_3 = _2898;
                        frontier_phi_77_pred_4 = _2897;
                        frontier_phi_77_pred_5 = _2896;
                    }
                    else
                    {
                        float _3105;
                        float _3106;
                        float _3107;
                        float _3108;
                        float _3109;
                        float _3110;
                        float _3400;
                        float _3401;
                        float _3402;
                        float _3403;
                        float _3404;
                        float _3405;
                        float _3118 = _2896;
                        float _3119 = _2897;
                        float _3120 = _2898;
                        float _3121 = _2899;
                        float _3122 = _2900;
                        float _3123 = _2901;
                        uint _3124 = _2911;
                        uint _3125;
                        vec4 _3150;
                        float _3151;
                        vec4 _3166;
                        vec3 _3178;
                        vec4 _3194;
                        vec4 _3210;
                        float _3256;
                        bool _3257;
                        for (;;)
                        {
                            uint _3135 = ((_2902 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3124));
                            _3125 = (_3124 + 4294967295u) & _3124;
                            uint _3137 = _3135 * 40u;
                            _3150 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3137)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 3u)).x));
                            _3151 = _3150.w;
                            uint _3153 = (_3135 * 40u) + 4u;
                            _3166 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3153)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 3u)).x));
                            uint _3168 = (_3135 * 40u) + 8u;
                            _3178 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3168)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3168 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3168 + 2u)).x));
                            uint _3181 = (_3135 * 40u) + 16u;
                            _3194 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3181)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 3u)).x));
                            uint _3197 = (_3135 * 40u) + 20u;
                            _3210 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3197)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 3u)).x));
                            uint _3212 = (_3135 * 40u) + 24u;
                            vec4 _3225 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3212)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3212 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3212 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3212 + 3u)).x));
                            uint _3231 = (_3135 * 40u) + 28u;
                            vec4 _3244 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3231)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3231 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3231 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3231 + 3u)).x));
                            _3256 = fma(_2470, _3244.z, fma(_2469, _3244.y, _3244.x * _2468)) + _3244.w;
                            _3257 = !((fma(_2470, _3225.z, fma(_2469, _3225.y, _3225.x * _2468)) + _3225.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3257)
                            {
                                float _3284 = _3150.x - _2468;
                                float _3285 = _3150.y - _2469;
                                float _3286 = _3150.z - _2470;
                                float _3287 = dot(vec3(_3284, _3285, _3286), vec3(_3284, _3285, _3286));
                                float _3290 = inversesqrt(_3287);
                                float _3291 = _3290 * _3284;
                                float _3292 = _3290 * _3285;
                                float _3293 = _3290 * _3286;
                                float _3297 = 1.0 - (_3287 / (_3151 * _3151));
                                float _4445 = isnan(0.0) ? _3297 : (isnan(_3297) ? 0.0 : max(_3297, 0.0));
                                float _3298 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
                                float _3302 = sqrt(_3287) * _3166.w;
                                float _3304 = 1.39999997615814208984375 / (_3302 + 1.39999997615814208984375);
                                float _3305 = _3304 * _3304;
                                float _3308 = ((1.0 - _3305) * dot(vec3(_3291, _3292, _3293), vec3(_704, _707, _710))) + _3305;
                                float _3311 = _3302 * _3302;
                                float _3315 = (fma(_2470, _3194.z, fma(_2469, _3194.y, _3194.x * _2468)) + _3194.w) / _3256;
                                float _3316 = (fma(_2470, _3210.z, fma(_2469, _3210.y, _3210.x * _2468)) + _3210.w) / _3256;
                                float _3320 = 1.0 - dot(vec2(_3315, _3316), vec2(_3315, _3316));
                                float _4461 = isnan(0.0) ? _3320 : (isnan(_3320) ? 0.0 : max(_3320, 0.0));
                                float _3321 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
                                float _3322 = _3321 * (((isnan(0.0) ? _3308 : (isnan(_3308) ? 0.0 : max(_3308, 0.0))) * _3298) / ((_3311 * 0.699999988079071044921875) + 1.0));
                                float _3334 = exp2(log2(1.0 / ((_3311 * 3.5) + 5.0)) * 0.25);
                                float _3335 = 1.0 - _779;
                                float _3342 = sqrt(1.0 - ((1.0 - (_3335 * _3335)) * (1.0 - (_3334 * _3334))));
                                float _3343 = _3342 * _3342;
                                float _3344 = _3343 * _3343;
                                float _3345 = _3291 - _2762;
                                float _3346 = _3292 - _2763;
                                float _3347 = _3293 - _2764;
                                float _3351 = inversesqrt(dot(vec3(_3345, _3346, _3347), vec3(_3345, _3346, _3347)));
                                float _3355 = dot(vec3(_704, _707, _710), vec3((-0.0) - _2762, (-0.0) - _2763, (-0.0) - _2764));
                                float _4472 = isnan(0.0) ? _3355 : (isnan(_3355) ? 0.0 : max(_3355, 0.0));
                                float _3358 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
                                float _3359 = dot(vec3(_704, _707, _710), vec3(_3351 * _3345, _3351 * _3346, _3351 * _3347));
                                float _4483 = isnan(0.0) ? _3359 : (isnan(_3359) ? 0.0 : max(_3359, 0.0));
                                float _3362 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
                                float _3366 = ((_3362 * _3362) * (_3344 + (-1.0))) + 1.0;
                                float _3367 = _3304 * _3343;
                                float _3368 = _3367 * _3367;
                                float _3374 = ((1.0 - _3368) * dot(vec3(_704, _707, _710), vec3(_3291, _3292, _3293))) + _3368;
                                float _4494 = isnan(0.0) ? _3374 : (isnan(_3374) ? 0.0 : max(_3374, 0.0));
                                float _3375 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
                                float _3376 = 1.0 - _3343;
                                float _3386 = (0.5 / (((_3375 * ((_3358 * _3376) + _3343)) + 9.9999999392252902907785028219223e-09) + (((_3375 * _3376) + _3343) * _3358))) * _3375;
                                float _4505 = isnan(0.0) ? _3386 : (isnan(_3386) ? 0.0 : max(_3386, 0.0));
                                float _3396 = (_3321 * _3298) * (((_3344 * 3.1415927410125732421875) * (isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0)))) / ((_3366 * _3366) * ((_3311 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3322 * _3166.y;
                                frontier_phi_83_pred_1 = _3322 * _3166.x;
                                frontier_phi_83_pred_2 = _3396 * _3178.z;
                                frontier_phi_83_pred_3 = _3396 * _3178.y;
                                frontier_phi_83_pred_4 = _3396 * _3178.x;
                                frontier_phi_83_pred_5 = _3322 * _3166.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3404 = frontier_phi_83_pred;
                            _3403 = frontier_phi_83_pred_1;
                            _3402 = frontier_phi_83_pred_2;
                            _3401 = frontier_phi_83_pred_3;
                            _3400 = frontier_phi_83_pred_4;
                            _3405 = frontier_phi_83_pred_5;
                            _3108 = _3403 + _3121;
                            _3109 = _3404 + _3122;
                            _3110 = _3405 + _3123;
                            _3105 = _3400 + _3118;
                            _3106 = _3401 + _3119;
                            _3107 = _3402 + _3120;
                            if (_3125 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3118 = _3105;
                                _3119 = _3106;
                                _3120 = _3107;
                                _3121 = _3108;
                                _3122 = _3109;
                                _3123 = _3110;
                                _3124 = _3125;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3110;
                        frontier_phi_77_pred_1 = _3109;
                        frontier_phi_77_pred_2 = _3108;
                        frontier_phi_77_pred_3 = _3107;
                        frontier_phi_77_pred_4 = _3106;
                        frontier_phi_77_pred_5 = _3105;
                    }
                    _2747 = frontier_phi_77_pred;
                    _2745 = frontier_phi_77_pred_1;
                    _2743 = frontier_phi_77_pred_2;
                    _2741 = frontier_phi_77_pred_3;
                    _2739 = frontier_phi_77_pred_4;
                    _2737 = frontier_phi_77_pred_5;
                    uint _2903 = _2902 + 1u;
                    if (_2903 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2896 = _2737;
                        _2897 = _2739;
                        _2898 = _2741;
                        _2899 = _2743;
                        _2900 = _2745;
                        _2901 = _2747;
                        _2902 = _2903;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2741;
                frontier_phi_58_59_ladder_1 = _2747;
                frontier_phi_58_59_ladder_2 = _2745;
                frontier_phi_58_59_ladder_3 = _2743;
                frontier_phi_58_59_ladder_4 = _2739;
                frontier_phi_58_59_ladder_5 = _2737;
            }
            else
            {
                frontier_phi_58_59_ladder = _2619;
                frontier_phi_58_59_ladder_1 = _2625;
                frontier_phi_58_59_ladder_2 = _2623;
                frontier_phi_58_59_ladder_3 = _2621;
                frontier_phi_58_59_ladder_4 = _2617;
                frontier_phi_58_59_ladder_5 = _2615;
            }
            _2736 = frontier_phi_58_59_ladder_5;
            _2738 = frontier_phi_58_59_ladder_4;
            _2740 = frontier_phi_58_59_ladder;
            _2742 = frontier_phi_58_59_ladder_3;
            _2744 = frontier_phi_58_59_ladder_2;
            _2746 = frontier_phi_58_59_ladder_1;
        }
        float _2751 = isnan(1.0) ? _763 : (isnan(_763) ? 1.0 : min(_763, 1.0));
        _2527 = (_2751 * _2742) + _1963;
        _2529 = (_2751 * _2744) + _1965;
        _2531 = (_2751 * _2746) + _1967;
        _2533 = ((_2736 * _747) * _2751) + _2308;
        _2535 = ((_2738 * _749) * _2751) + _2310;
        _2537 = ((_2740 * _750) * _2751) + _2312;
    }
    else
    {
        _2527 = _1963;
        _2529 = _1965;
        _2531 = _1967;
        _2533 = _2308;
        _2535 = _2310;
        _2537 = _2312;
    }
    float _4521 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _4532 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
    float _4543 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _2554 = ((isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0))) * (_2527 + ((isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0))) * _763))) + ((_2533 + ((isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0))) * _1602)) * cbPerFrame._m0[3u].x);
    float _2555 = ((isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0))) * (_2529 + ((isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0))) * _763))) + ((_2535 + ((isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0))) * _1602)) * cbPerFrame._m0[3u].x);
    float _2556 = ((isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0))) * (_2531 + ((isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0))) * _763))) + ((_2537 + ((isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0))) * _1602)) * cbPerFrame._m0[3u].x);
    uint _2557 = _241 + 6u;
    float _2565 = _683 / cbSceneParam._m0[86u].x;
    float _2566 = _684 / cbSceneParam._m0[86u].y;
    vec4 _2580 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2565, _2566, (log2((isnan(cbSceneParam._m0[77u].w) ? _605 : (isnan(_605) ? cbSceneParam._m0[77u].w : min(_605, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2582 = _2580.x;
    float _2583 = _2580.y;
    float _2584 = _2580.z;
    float _2585 = _2580.w;
    float _2678;
    float _2680;
    float _2682;
    float _2684;
    if (_605 > cbSceneParam._m0[78u].w)
    {
        float _2640 = isnan(_605) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _605 : min(cbSceneParam._m0[80u].w, _605));
        float _2641 = _2640 / _605;
        float _2652 = _2641 * _655;
        float _2653 = _656 * _2641;
        float _2654 = (-0.0) - _2653;
        float _2656 = _2641 * _657;
        float _2658 = (cbSceneParam._m0[77u].w * _2654) / _2640;
        float _2659 = _2658 + cbSceneParam._m0[79u].w;
        float _2660 = cbSceneParam._m0[79u].w - _2653;
        float _2666 = sqrt(((_2652 * _2652) + (_2653 * _2653)) + (_2656 * _2656));
        float _2669 = (1.0 - (cbSceneParam._m0[77u].w / _2640)) * _2666;
        float _2674 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2676 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2853;
        if (abs((_2654 - _2658) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2853 = ((((_2659 > 0.0) ? exp2(_2674 * _2659) : (2.0 - exp2(_2676 * _2659))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2669;
        }
        else
        {
            float _2797 = 1.0 / cbSceneParam._m0[80u].x;
            float _2798 = isnan(_2660) ? _2659 : (isnan(_2659) ? _2660 : max(_2659, _2660));
            float _2799 = isnan(_2660) ? _2659 : (isnan(_2659) ? _2660 : min(_2659, _2660));
            float _2808 = isnan(0.0) ? _2798 : (isnan(_2798) ? 0.0 : min(_2798, 0.0));
            float _2809 = isnan(0.0) ? _2799 : (isnan(_2799) ? 0.0 : min(_2799, 0.0));
            _2853 = ((abs(_2666 / _2654) * cbSceneParam._m0[80u].y) * ((((_2808 - _2809) * 2.0) - ((exp2(_2674 * (isnan(0.0) ? _2798 : (isnan(_2798) ? 0.0 : max(_2798, 0.0)))) - exp2(_2674 * (isnan(0.0) ? _2799 : (isnan(_2799) ? 0.0 : max(_2799, 0.0))))) * _2797)) - ((exp2(_2676 * _2808) - exp2(_2676 * _2809)) * _2797))) + (_2669 * cbSceneParam._m0[80u].z);
        }
        vec4 _2855 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2565, _2566, 1.0), 0.0);
        float _2864 = exp2((_2853 * (-1.44269502162933349609375)) * (1.0 - _2855.w));
        float _2865 = log2(_2864);
        float _2881 = log2(_2585);
        _2678 = (exp2(_2881 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2865 * cbSceneParam._m0[78u].x)) * _2855.x) / cbSceneParam._m0[78u].x)) + _2582;
        _2680 = (exp2(_2881 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2865 * cbSceneParam._m0[78u].y)) * _2855.y) / cbSceneParam._m0[78u].y)) + _2583;
        _2682 = (exp2(_2881 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2865 * cbSceneParam._m0[78u].z)) * _2855.z) / cbSceneParam._m0[78u].z)) + _2584;
        _2684 = _2864 * _2585;
    }
    else
    {
        _2678 = _2582;
        _2680 = _2583;
        _2682 = _2584;
        _2684 = _2585;
    }
    bool _2891;
    vec4 _2694;
    vec4 _2716;
    float _2718;
    float _2722;
    float _2723;
    float _2724;
    float _2725;
    bool _2735;
    for (;;)
    {
        _2694 = cbMatDynParam._m0[0u];
        float _2696 = roundEven(_2694.y);
        bool _2697 = _2696 == 3.0;
        float _2698 = log2(_2684);
        float _2705 = exp2(_2698 * cbSceneParam._m0[78u].x) * _2554;
        float _2706 = exp2(_2698 * cbSceneParam._m0[78u].y) * _2555;
        float _2707 = exp2(_2698 * cbSceneParam._m0[78u].z) * _2556;
        float _2714 = _671 + (-0.5);
        _2716 = cbMtdParam._m0[1u];
        _2718 = _2716.y * _2714;
        float _2721 = (_2696 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2722 = _2721 * (_2697 ? _2705 : (_2705 + (cbSceneParam._m0[72u].w * _2678)));
        _2723 = _2721 * (_2697 ? _2706 : (_2706 + (cbSceneParam._m0[72u].w * _2680)));
        _2724 = _2721 * (_2697 ? _2707 : (_2707 + (cbSceneParam._m0[72u].w * _2682)));
        _2725 = _2714 * 0.999000012874603271484375;
        _2735 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2735)
        {
            if ((cbInstanceData._m0[_241 + 7u].x + _2725) < 0.5)
            {
                _2891 = true;
                break;
            }
        }
        uint _2832 = _723 + uint(_2694.w);
        if ((cbInstanceData._m0[_2832].w < 1.0) && ((cbInstanceData._m0[_2832].w + _2725) < 0.5))
        {
            _2891 = true;
            break;
        }
        if ((_2718 + 1.0) < _2716.x)
        {
            _2891 = true;
            break;
        }
        _2891 = false;
        break;
    }
    float _3096;
    if (_2891)
    {
        discard_state = true;
        _3096 = 0.0;
    }
    else
    {
        _3096 = cbInstanceData._m0[_2557].w;
    }
    SV_Target.x = _2722;
    SV_Target.y = _2723;
    SV_Target.z = _2724;
    SV_Target.w = _3096;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2557].w;
    discard_exit();
}


