#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1457;
float _3861;
float _3862;
float _3863;
float _3864;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _235 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _236 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _237 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _243 = inversesqrt(dot(vec3(_235, _236, _237), vec3(_235, _236, _237)));
    float _250 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _257 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _263 = uint(roundEven(NORMAL.w)) * 13u;
    uint _268 = _263 + 1u;
    uint _272 = _263 + 2u;
    float _281 = sqrt(((cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x) + (cbInstanceData._m0[_263].x * cbInstanceData._m0[_263].x)) + (cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x));
    float _282 = _281 * TEXCOORD.z;
    float _283 = _281 * TEXCOORD.w;
    vec4 _303 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _309 = _303.x * cbMtdParam._m0[11u].x;
    float _310 = _303.y * cbMtdParam._m0[11u].y;
    float _311 = _303.z * cbMtdParam._m0[11u].z;
    vec4 _330 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _282) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _283) + cbTextureTilingScale._m0[5u].w));
    vec4 _369 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _371 = _369.x;
    float _383 = dot(vec4(_371, _369.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _400 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_371 - _383) * cbMtdParam._m0[24u].y) + _383) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3873 = isnan(0.0) ? _400 : (isnan(_400) ? 0.0 : max(_400, 0.0));
    float _401 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
    float _408 = (_401 * ((_330.x * cbMtdParam._m0[12u].x) - _309)) + _309;
    float _409 = (_401 * ((_330.y * cbMtdParam._m0[12u].y) - _310)) + _310;
    float _410 = (_401 * ((_330.z * cbMtdParam._m0[12u].z) - _311)) + _311;
    vec4 _427 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _282) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _283) + cbTextureTilingScale._m0[3u].w));
    vec4 _447 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _449 = _447.x;
    float _459 = dot(vec4(_449, _447.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _473 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_449 - _459) * cbMtdParam._m0[24u].y) + _459) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3884 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _474 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
    float _481 = (_474 * ((_427.x * cbMtdParam._m0[13u].x) - _408)) + _408;
    float _482 = (_474 * ((_427.y * cbMtdParam._m0[13u].y) - _409)) + _409;
    float _483 = (_474 * ((_427.z * cbMtdParam._m0[13u].z) - _410)) + _410;
    vec4 _501 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _282) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _283) + cbTextureTilingScale._m0[4u].w));
    vec4 _518 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _520 = _518.x;
    float _521 = _518.y;
    float _522 = _518.z;
    float _529 = ((_501.x - _520) * _401) + _520;
    float _530 = ((_501.y - _521) * _401) + _521;
    float _531 = ((_501.z - _522) * _401) + _522;
    vec4 _543 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _282) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _283) + cbTextureTilingScale._m0[2u].w));
    float _556 = ((_543.z - _531) * _474) + _531;
    float _559 = ((((_543.x - _529) * _474) + _529) * 2.0) + (-1.0);
    float _561 = ((((_543.y - _530) * _474) + _530) * 2.0) + (-1.0);
    float _562 = dot(vec2(_559, _561), vec2(_559, _561));
    float _3895 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _567 = sqrt(1.0 - (isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0))));
    vec4 _581 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _606 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _282) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _283) + cbTextureTilingScale._m0[11u].w));
    float _608 = _606.x;
    float _609 = 1.0 - _608;
    float _615 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _618 = ((isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : min(_615, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _627 = (_618 - ((((((_608 - _609) * cbMtdParam._m0[24u].z) + _609) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _618))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3916 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _628 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
    float _635 = (_628 * (cbMtdParam._m0[17u].x - _481)) + _481;
    float _636 = (_628 * (cbMtdParam._m0[17u].y - _482)) + _482;
    float _637 = (_628 * (cbMtdParam._m0[17u].z - _483)) + _483;
    vec4 _649 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _282) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _283) + cbTextureTilingScale._m0[19u].w));
    float _651 = _649.x;
    float _652 = 1.0 - _651;
    float _679 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_651 - _652) * cbMtdParam._m0[24u].w) + _652) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3927 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
    float _680 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
    float _688 = ((((cbMtdParam._m0[10u].x - _635) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _680) + _635;
    float _689 = ((((cbMtdParam._m0[10u].y - _636) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _680) + _636;
    float _690 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _637)) * _680) + _637;
    vec4 _716 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _718 = _716.x;
    float _736 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _282) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _283) + cbTextureTilingScale._m0[9u].w)).x - _718) * _401) + _718;
    float _753 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _282) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _283) + cbTextureTilingScale._m0[21u].w)).x - _736) * _474) + _736;
    float _757 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _753) * cbMtdParam._m0[19u].z) + _753;
    float _759 = _757 - (_757 * _628);
    float _761 = _759 - (_759 * _680);
    float _765 = (cbMtdParam._m0[19u].w * (_581.z - _556)) + _556;
    vec4 _779 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _282) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _283) + cbTextureTilingScale._m0[15u].w));
    float _786 = (_779.x * 2.0) + (-1.0);
    float _787 = (_779.y * 2.0) + (-1.0);
    float _788 = dot(vec2(_786, _787), vec2(_786, _787));
    float _3938 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
    float _796 = (_628 * (_779.z - _765)) + _765;
    float _799 = ((cbMtdParam._m0[23u].y - _796) * _680) + _796;
    vec4 _818 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _282) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _283) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _824 = (_818.x * 2.0) + (-1.0);
    float _825 = (_818.y * 2.0) + (-1.0);
    float _826 = dot(vec2(_824, _825), vec2(_824, _825));
    float _3949 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
    float _834 = (((_581.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _559;
    float _835 = (((_581.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _561;
    float _847 = (((_786 - _834) + (cbMtdParam._m0[21u].x * _834)) * _628) + _834;
    float _848 = (((_787 - _835) + (cbMtdParam._m0[21u].x * _835)) * _628) + _835;
    float _849 = (_628 * (sqrt(1.0 - (isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0)))) - _567)) + _567;
    float _860 = (((_824 - _847) + (_847 * cbMtdParam._m0[22u].z)) * _680) + _847;
    float _861 = (((_825 - _848) + (_848 * cbMtdParam._m0[22u].z)) * _680) + _848;
    float _862 = ((sqrt(1.0 - (isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0)))) - _849) * _680) + _849;
    float _864 = cbMtdParam._m0[22u].x + _581.w;
    float _867 = fma(_862, _250 * NORMAL.x, fma(_861, _257 * TANGENT.x, (_243 * _235) * _860));
    float _870 = fma(_862, _250 * NORMAL.y, fma(_861, _257 * TANGENT.y, (_243 * _236) * _860));
    float _873 = fma(_862, _250 * NORMAL.z, fma(_861, _257 * TANGENT.z, (_243 * _237) * _860));
    float _877 = inversesqrt(dot(vec3(_867, _870, _873), vec3(_867, _870, _873)));
    float _878 = _877 * _867;
    float _879 = _877 * _870;
    float _880 = _877 * _873;
    float _3960 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
    float _881 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
    float _3971 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
    float _3982 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _3993 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _4004 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _4015 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
    float _886 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
    float _900 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _940 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _950 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _940);
    float _951 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _940);
    float _952 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _940);
    float _956 = inversesqrt(dot(vec3(_950, _951, _952), vec3(_950, _951, _952)));
    float _957 = _950 * _956;
    float _958 = _951 * _956;
    float _959 = _952 * _956;
    vec4 _964 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _966 = _964.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1138 = sqrt(((_950 * _950) + (_951 * _951)) + (_952 * _952));
        float _1144 = (cbMatDynParam._m0[5u].x * _1138) + cbMatDynParam._m0[5u].y;
        float _4026 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1145 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
        float _1149 = (cbMatDynParam._m0[5u].z * _1138) + cbMatDynParam._m0[5u].w;
        float _4037 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0))) - _1145)) + _1145) < ((_966 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _977 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _978 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _996 = fma(_880, cbSceneParam._m0[5u].z, fma(_879, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _878));
    float _999 = fma(_880, cbSceneParam._m0[6u].z, fma(_879, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _878));
    float _1002 = fma(_880, cbSceneParam._m0[7u].z, fma(_879, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _878));
    uint _1015 = _263 + 9u;
    uint _1016 = _1015 + uint(cbMatDynParam._m0[0u].w);
    float _1022 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0)))) * cbInstanceData._m0[_1016].x;
    float _1023 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0)))) * cbInstanceData._m0[_1016].y;
    float _1024 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0)))) * cbInstanceData._m0[_1016].z;
    float _4048 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
    float _1025 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
    float _4059 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
    float _1026 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
    float _4070 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
    float _1027 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
    float _1028 = 1.0 - _886;
    float _1029 = _1025 * _1028;
    float _1030 = _1026 * _1028;
    float _1031 = _1027 * _1028;
    float _1036 = (_1025 + (-0.039999999105930328369140625)) * _886;
    float _1037 = (_1026 + (-0.039999999105930328369140625)) * _886;
    float _1038 = (_1027 + (-0.039999999105930328369140625)) * _886;
    float _1039 = _1036 + 0.039999999105930328369140625;
    float _1041 = _1037 + 0.039999999105930328369140625;
    float _1042 = _1038 + 0.039999999105930328369140625;
    vec4 _1051 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _977, cbSceneParam._m0[86u].y * _978));
    float _1055 = ((isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0))) * TEXCOORD_5.w) * _1051.x;
    float _1056 = dot(vec3(_878, _879, _880), vec3(_957, _958, _959));
    float _1059 = _1056 * 2.0;
    float _1063 = (_1059 * _878) - _957;
    float _1064 = (_1059 * _879) - _958;
    float _1065 = (_1059 * _880) - _959;
    float _1069 = abs(dot(vec3(_957, _958, _959), vec3(_878, _879, _880)));
    float _4081 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
    float _1071 = sqrt(_881);
    float _1084 = exp2((_1071 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1071 * 3.0));
    float _1090 = (1.0 - _1084) * ((_1071 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1091 = _1084 * _1071;
    float _1119 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1123 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1127 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1456;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1181 = fma(_1127, cbModelParam._m0[26u].z, fma(_1123, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1119));
        float _1185 = fma(_1127, cbModelParam._m0[27u].z, fma(_1123, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1119));
        float _1189 = fma(_1127, cbModelParam._m0[28u].z, fma(_1123, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1119));
        float _1214 = _1119 + _878;
        float _1215 = _1123 + _879;
        float _1216 = _1127 + _880;
        float _1226 = fma(_1216, cbModelParam._m0[26u].z, fma(_1215, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1214)) - _1181;
        float _1227 = fma(_1216, cbModelParam._m0[27u].z, fma(_1215, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1214)) - _1185;
        float _1228 = fma(_1216, cbModelParam._m0[28u].z, fma(_1215, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1214)) - _1189;
        float _1232 = inversesqrt(dot(vec3(_1226, _1227, _1228), vec3(_1226, _1227, _1228)));
        float _1245 = ((_1232 * _1226) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1181 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1246 = ((_1232 * _1227) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1185 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1247 = ((_1232 * _1228) / cbModelParam._m0[34u].z) + ((((((_1189 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1250 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1245, _1246, _1247), 0.0);
        vec4 _1257 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1245, _1246, _1247), 0.0);
        vec4 _1264 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1245, _1246, _1247), 0.0);
        vec4 _1271 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1245, _1246, _1247), 0.0);
        float _1284 = exp2((_1250.w + (-0.5)) * 20.0) * 2.0;
        float _1285 = _1284 * (_1250.x + (-0.5));
        float _1286 = _1284 * (_1250.y + (-0.5));
        float _1287 = _1284 * (_1250.z + (-0.5));
        float _1294 = exp2((_1257.w + (-0.5)) * 20.0) * 2.0;
        float _1295 = _1294 * (_1257.x + (-0.5));
        float _1296 = _1294 * (_1257.y + (-0.5));
        float _1297 = _1294 * (_1257.z + (-0.5));
        float _1304 = exp2((_1264.w + (-0.5)) * 20.0) * 2.0;
        float _1305 = _1304 * (_1264.x + (-0.5));
        float _1306 = _1304 * (_1264.y + (-0.5));
        float _1307 = _1304 * (_1264.z + (-0.5));
        float _1314 = exp2((_1271.w + (-0.5)) * 20.0) * 2.0;
        float _1315 = _1314 * (_1271.x + (-0.5));
        float _1316 = _1314 * (_1271.y + (-0.5));
        float _1317 = _1314 * (_1271.z + (-0.5));
        float _1318 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1319 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1320 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1321 = _1285 * 0.5;
        float _1322 = _1295 * 0.5;
        float _1323 = _1305 * 0.5;
        float _1324 = dot(vec3(_1321, _1322, _1323), vec3(_1321, _1322, _1323));
        float _1329 = (_1324 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1324);
        float _1338 = (dot(vec3(_878, _879, _880), vec3(_1329 * _1321, _1329 * _1322, _1329 * _1323)) + 1.0) * 0.5;
        float _4107 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1348 = sqrt(((_1322 * _1322) + (_1321 * _1321)) + (_1323 * _1323)) / (_1318 + 9.9999997473787516355514526367188e-06);
        float _4118 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1349 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
        float _1350 = _1349 * 2.0;
        float _1354 = (1.0 - _1349) / (_1349 + 1.0);
        float _4129 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1355 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
        float _1364 = ((((1.0 - _1355) * (_1350 + 2.0)) * exp2(log2(isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0))) * (_1350 + 1.0))) + _1355) * _1318;
        float _1365 = _1286 * 0.5;
        float _1366 = _1296 * 0.5;
        float _1367 = _1306 * 0.5;
        float _1368 = dot(vec3(_1365, _1366, _1367), vec3(_1365, _1366, _1367));
        float _1373 = (_1368 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1368);
        float _1381 = (dot(vec3(_878, _879, _880), vec3(_1373 * _1365, _1373 * _1366, _1373 * _1367)) + 1.0) * 0.5;
        float _4140 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1390 = sqrt(((_1366 * _1366) + (_1365 * _1365)) + (_1367 * _1367)) / (_1319 + 9.9999997473787516355514526367188e-06);
        float _4151 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1391 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
        float _1392 = _1391 * 2.0;
        float _1396 = (1.0 - _1391) / (_1391 + 1.0);
        float _4162 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1397 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
        float _1406 = ((((1.0 - _1397) * (_1392 + 2.0)) * exp2(log2(isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0))) * (_1392 + 1.0))) + _1397) * _1319;
        float _1407 = _1287 * 0.5;
        float _1408 = _1297 * 0.5;
        float _1409 = _1307 * 0.5;
        float _1410 = dot(vec3(_1407, _1408, _1409), vec3(_1407, _1408, _1409));
        float _1415 = (_1410 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1410);
        float _1423 = (dot(vec3(_878, _879, _880), vec3(_1415 * _1407, _1415 * _1408, _1415 * _1409)) + 1.0) * 0.5;
        float _4173 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1432 = sqrt(((_1408 * _1408) + (_1407 * _1407)) + (_1409 * _1409)) / (_1320 + 9.9999997473787516355514526367188e-06);
        float _4184 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1433 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
        float _1434 = _1433 * 2.0;
        float _1438 = (1.0 - _1433) / (_1433 + 1.0);
        float _4195 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1439 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
        float _1448 = ((((1.0 - _1439) * (_1434 + 2.0)) * exp2(log2(isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0))) * (_1434 + 1.0))) + _1439) * _1320;
        _1456 = _1287;
        _1458 = _1286;
        _1459 = _1285;
        _1460 = _1297;
        _1461 = _1296;
        _1462 = _1295;
        _1463 = _1307;
        _1464 = _1306;
        _1465 = _1305;
        _1466 = _1320;
        _1467 = _1319;
        _1468 = _1318;
        _1469 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0)));
        _1470 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0)));
        _1471 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0)));
    }
    else
    {
        _1456 = _1457;
        _1458 = _1457;
        _1459 = _1457;
        _1460 = _1457;
        _1461 = _1457;
        _1462 = _1457;
        _1463 = _1457;
        _1464 = _1457;
        _1465 = _1457;
        _1466 = _1457;
        _1467 = _1457;
        _1468 = _1457;
        _1469 = 0.0;
        _1470 = 0.0;
        _1471 = 0.0;
    }
    float _1767;
    float _1768;
    float _1769;
    float _1770;
    float _1771;
    float _1772;
    float _1773;
    float _1774;
    float _1775;
    float _1776;
    float _1777;
    float _1778;
    float _1779;
    float _1780;
    float _1781;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1498 = fma(_1127, cbModelParam._m0[30u].z, fma(_1123, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1119));
        float _1502 = fma(_1127, cbModelParam._m0[31u].z, fma(_1123, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1119));
        float _1506 = fma(_1127, cbModelParam._m0[32u].z, fma(_1123, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1119));
        float _1529 = _1119 + _878;
        float _1530 = _1123 + _879;
        float _1531 = _1127 + _880;
        float _1541 = fma(_1531, cbModelParam._m0[30u].z, fma(_1530, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1529)) - _1498;
        float _1542 = fma(_1531, cbModelParam._m0[31u].z, fma(_1530, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1529)) - _1502;
        float _1543 = fma(_1531, cbModelParam._m0[32u].z, fma(_1530, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1529)) - _1506;
        float _1547 = inversesqrt(dot(vec3(_1541, _1542, _1543), vec3(_1541, _1542, _1543)));
        float _1560 = ((_1547 * _1541) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1498 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1561 = ((_1547 * _1542) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1502 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1562 = ((_1547 * _1543) / cbModelParam._m0[35u].z) + ((((((_1506 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1564 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1560, _1561, _1562), 0.0);
        vec4 _1571 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1560, _1561, _1562), 0.0);
        vec4 _1578 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1560, _1561, _1562), 0.0);
        vec4 _1585 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1560, _1561, _1562), 0.0);
        float _1597 = exp2((_1564.w + (-0.5)) * 20.0) * 2.0;
        float _1598 = _1597 * (_1564.x + (-0.5));
        float _1599 = _1597 * (_1564.y + (-0.5));
        float _1600 = _1597 * (_1564.z + (-0.5));
        float _1607 = exp2((_1571.w + (-0.5)) * 20.0) * 2.0;
        float _1608 = _1607 * (_1571.x + (-0.5));
        float _1609 = _1607 * (_1571.y + (-0.5));
        float _1610 = _1607 * (_1571.z + (-0.5));
        float _1617 = exp2((_1578.w + (-0.5)) * 20.0) * 2.0;
        float _1618 = _1617 * (_1578.x + (-0.5));
        float _1619 = _1617 * (_1578.y + (-0.5));
        float _1620 = _1617 * (_1578.z + (-0.5));
        float _1627 = exp2((_1585.w + (-0.5)) * 20.0) * 2.0;
        float _1628 = _1627 * (_1585.x + (-0.5));
        float _1629 = _1627 * (_1585.y + (-0.5));
        float _1630 = _1627 * (_1585.z + (-0.5));
        float _1631 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
        float _1632 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
        float _1633 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
        float _1634 = _1598 * 0.5;
        float _1635 = _1608 * 0.5;
        float _1636 = _1618 * 0.5;
        float _1637 = dot(vec3(_1634, _1635, _1636), vec3(_1634, _1635, _1636));
        float _1642 = (_1637 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1637);
        float _1650 = (dot(vec3(_878, _879, _880), vec3(_1642 * _1634, _1642 * _1635, _1642 * _1636)) + 1.0) * 0.5;
        float _4236 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0));
        float _1659 = sqrt(((_1635 * _1635) + (_1634 * _1634)) + (_1636 * _1636)) / (_1631 + 9.9999997473787516355514526367188e-06);
        float _4247 = isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0));
        float _1660 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
        float _1661 = _1660 * 2.0;
        float _1665 = (1.0 - _1660) / (_1660 + 1.0);
        float _4258 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
        float _1666 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
        float _1675 = ((((1.0 - _1666) * (_1661 + 2.0)) * exp2(log2(isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0))) * (_1661 + 1.0))) + _1666) * _1631;
        float _1676 = _1599 * 0.5;
        float _1677 = _1609 * 0.5;
        float _1678 = _1619 * 0.5;
        float _1679 = dot(vec3(_1676, _1677, _1678), vec3(_1676, _1677, _1678));
        float _1684 = (_1679 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1679);
        float _1692 = (dot(vec3(_878, _879, _880), vec3(_1684 * _1676, _1684 * _1677, _1684 * _1678)) + 1.0) * 0.5;
        float _4269 = isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0));
        float _1701 = sqrt(((_1677 * _1677) + (_1676 * _1676)) + (_1678 * _1678)) / (_1632 + 9.9999997473787516355514526367188e-06);
        float _4280 = isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0));
        float _1702 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
        float _1703 = _1702 * 2.0;
        float _1707 = (1.0 - _1702) / (_1702 + 1.0);
        float _4291 = isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0));
        float _1708 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
        float _1717 = ((((1.0 - _1708) * (_1703 + 2.0)) * exp2(log2(isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0))) * (_1703 + 1.0))) + _1708) * _1632;
        float _1718 = _1600 * 0.5;
        float _1719 = _1610 * 0.5;
        float _1720 = _1620 * 0.5;
        float _1721 = dot(vec3(_1718, _1719, _1720), vec3(_1718, _1719, _1720));
        float _1726 = (_1721 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1721);
        float _1734 = (dot(vec3(_878, _879, _880), vec3(_1726 * _1718, _1726 * _1719, _1726 * _1720)) + 1.0) * 0.5;
        float _4302 = isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0));
        float _1743 = sqrt(((_1719 * _1719) + (_1718 * _1718)) + (_1720 * _1720)) / (_1633 + 9.9999997473787516355514526367188e-06);
        float _4313 = isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0));
        float _1744 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
        float _1745 = _1744 * 2.0;
        float _1749 = (1.0 - _1744) / (_1744 + 1.0);
        float _4324 = isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0));
        float _1750 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
        float _1759 = ((((1.0 - _1750) * (_1745 + 2.0)) * exp2(log2(isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0))) * (_1745 + 1.0))) + _1750) * _1633;
        _1767 = _1600;
        _1768 = _1599;
        _1769 = _1598;
        _1770 = _1610;
        _1771 = _1609;
        _1772 = _1608;
        _1773 = _1620;
        _1774 = _1619;
        _1775 = _1618;
        _1776 = _1633;
        _1777 = _1632;
        _1778 = _1631;
        _1779 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0)));
        _1780 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0)));
        _1781 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0)));
    }
    else
    {
        _1767 = _1457;
        _1768 = _1457;
        _1769 = _1457;
        _1770 = _1457;
        _1771 = _1457;
        _1772 = _1457;
        _1773 = _1457;
        _1774 = _1457;
        _1775 = _1457;
        _1776 = _1457;
        _1777 = _1457;
        _1778 = _1457;
        _1779 = 0.0;
        _1780 = 0.0;
        _1781 = 0.0;
    }
    float _1791 = (cbModelParam._m0[1u].x * (_1779 - _1469)) + _1469;
    float _1792 = (cbModelParam._m0[1u].x * (_1780 - _1470)) + _1470;
    float _1793 = (cbModelParam._m0[1u].x * (_1781 - _1471)) + _1471;
    float _1814 = fma(_1793, cbSceneParam._m0[89u].z, fma(_1792, cbSceneParam._m0[89u].y, _1791 * cbSceneParam._m0[89u].x));
    float _1817 = fma(_1793, cbSceneParam._m0[90u].z, fma(_1792, cbSceneParam._m0[90u].y, _1791 * cbSceneParam._m0[90u].x));
    float _1820 = fma(_1793, cbSceneParam._m0[91u].z, fma(_1792, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1791));
    float _1835 = _1063 * 0.5;
    float _1836 = _1064 * 0.5;
    float _1837 = _1065 * 0.5;
    float _1838 = dot(vec4(_1835, _1836, _1837, 1.0), vec4(_1769, _1772, _1775, _1778));
    float _1841 = dot(vec4(_1835, _1836, _1837, 1.0), vec4(_1768, _1771, _1774, _1777));
    float _1844 = dot(vec4(_1835, _1836, _1837, 1.0), vec4(_1767, _1770, _1773, _1776));
    float _1878;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1851 = dot(vec4(_1835, _1836, _1837, 1.0), vec4(_1456, _1460, _1463, _1466));
        float _1855 = dot(vec4(_1835, _1836, _1837, 1.0), vec4(_1458, _1461, _1464, _1467));
        float _1859 = dot(vec4(_1835, _1836, _1837, 1.0), vec4(_1459, _1462, _1465, _1468));
        float _1866 = dot(vec4(cbModelParam._m0[39u]), vec4(_1835, _1836, _1837, 1.0));
        _1878 = dot(vec3(isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0)), isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0)), isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1866) ? 0.0 : (isnan(0.0) ? _1866 : max(0.0, _1866))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1878 = 1.0;
    }
    float _1889;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1880 = dot(vec4(cbModelParam._m0[40u]), vec4(_1835, _1836, _1837, 1.0));
        _1889 = dot(vec3(isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0)), isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0)), isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1880) ? 0.0 : (isnan(0.0) ? _1880 : max(0.0, _1880))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1889 = 1.0;
    }
    float _1893 = (_1889 * cbModelParam._m0[1u].x) + (_1878 * (1.0 - cbModelParam._m0[1u].x));
    float _1903 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _881);
    float _1904 = isnan(_1903) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1903 : min(cbModelParam._m0[25u].z, _1903));
    float _1985;
    float _1987;
    float _1989;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1952 = fma(_1127, cbModelParam._m0[13u].z, fma(_1123, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1119)) + cbModelParam._m0[13u].w;
        float _1956 = fma(_1127, cbModelParam._m0[14u].z, fma(_1123, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1119)) + cbModelParam._m0[14u].w;
        float _1960 = fma(_1127, cbModelParam._m0[15u].z, fma(_1123, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1119)) + cbModelParam._m0[15u].w;
        float _1963 = fma(_1065, cbModelParam._m0[13u].z, fma(_1064, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1063));
        float _1966 = fma(_1065, cbModelParam._m0[14u].z, fma(_1064, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1063));
        float _1969 = fma(_1065, cbModelParam._m0[15u].z, fma(_1064, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1063));
        float _1997;
        if (_1963 > 0.0)
        {
            _1997 = abs((1.0 - _1952) / _1963);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1963 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1952 + 1.0) / _1963);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1997 = frontier_phi_17_15_ladder;
        }
        float _2221;
        if (_1966 > 0.0)
        {
            _2221 = abs((1.0 - _1956) / _1966);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1966 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1956 + 1.0) / _1966);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2221 = frontier_phi_26_22_ladder;
        }
        float _2478;
        if (_1969 > 0.0)
        {
            _2478 = abs((1.0 - _1960) / _1969);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1969 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1960 + 1.0) / _1969);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2478 = frontier_phi_38_33_ladder;
        }
        float _2480 = isnan(_2221) ? _1997 : (isnan(_1997) ? _2221 : min(_1997, _2221));
        float _2481 = isnan(_2478) ? _2480 : (isnan(_2480) ? _2478 : min(_2480, _2478));
        float _2485 = (_2481 * _1963) + _1952;
        float _2486 = (_2481 * _1966) + _1956;
        float _2487 = (_2481 * _1969) + _1960;
        float _2488 = _2481 * 9.9999997473787516355514526367188e-05;
        float _2490 = (-1.0) - _2488;
        float _2492 = _2488 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2487 > _2492) || ((_2487 < _2490) || ((_2486 > _2492) || ((_2486 < _2490) || ((_2485 < _2490) || (_2485 > _2492))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2615 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2487, cbModelParam._m0[9u].z, fma(_2486, cbModelParam._m0[9u].y, _2485 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2487, cbModelParam._m0[10u].z, fma(_2486, cbModelParam._m0[10u].y, _2485 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2487, cbModelParam._m0[11u].z, fma(_2486, cbModelParam._m0[11u].y, _2485 * cbModelParam._m0[11u].x))), _1904);
            frontier_phi_16_38_ladder = _2615.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2615.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2615.x * cbModelParam._m0[1u].y;
        }
        _1985 = frontier_phi_16_38_ladder_2;
        _1987 = frontier_phi_16_38_ladder_1;
        _1989 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1973 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1063, _1064, _1065), _1904);
        _1985 = _1973.x * cbModelParam._m0[1u].y;
        _1987 = _1973.y * cbModelParam._m0[1u].y;
        _1989 = _1973.z * cbModelParam._m0[1u].y;
    }
    float _1993 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _881);
    float _1994 = isnan(_1993) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1993 : min(cbModelParam._m0[25u].w, _1993));
    float _2084;
    float _2086;
    float _2088;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2048 = fma(_1127, cbModelParam._m0[21u].z, fma(_1123, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1119)) + cbModelParam._m0[21u].w;
        float _2052 = fma(_1127, cbModelParam._m0[22u].z, fma(_1123, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1119)) + cbModelParam._m0[22u].w;
        float _2056 = fma(_1127, cbModelParam._m0[23u].z, fma(_1123, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1119)) + cbModelParam._m0[23u].w;
        float _2059 = fma(_1065, cbModelParam._m0[21u].z, fma(_1064, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1063));
        float _2062 = fma(_1065, cbModelParam._m0[22u].z, fma(_1064, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1063));
        float _2065 = fma(_1065, cbModelParam._m0[23u].z, fma(_1064, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1063));
        float _2226;
        if (_2059 > 0.0)
        {
            _2226 = abs((1.0 - _2048) / _2059);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2059 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2048 + 1.0) / _2059);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2226 = frontier_phi_28_24_ladder;
        }
        float _2505;
        if (_2062 > 0.0)
        {
            _2505 = abs((1.0 - _2052) / _2062);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2062 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2052 + 1.0) / _2062);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2505 = frontier_phi_40_35_ladder;
        }
        float _2718;
        if (_2065 > 0.0)
        {
            _2718 = abs((1.0 - _2056) / _2065);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2065 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2056 + 1.0) / _2065);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2718 = frontier_phi_49_46_ladder;
        }
        float _2720 = isnan(_2505) ? _2226 : (isnan(_2226) ? _2505 : min(_2226, _2505));
        float _2721 = isnan(_2718) ? _2720 : (isnan(_2720) ? _2718 : min(_2720, _2718));
        float _2725 = (_2721 * _2059) + _2048;
        float _2726 = (_2721 * _2062) + _2052;
        float _2727 = (_2721 * _2065) + _2056;
        float _2728 = _2721 * 9.9999997473787516355514526367188e-05;
        float _2729 = (-1.0) - _2728;
        float _2731 = _2728 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2727 > _2731) || ((_2727 < _2729) || ((_2726 > _2731) || ((_2726 < _2729) || ((_2725 < _2729) || (_2725 > _2731))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2926 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2727, cbModelParam._m0[17u].z, fma(_2726, cbModelParam._m0[17u].y, _2725 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2727, cbModelParam._m0[18u].z, fma(_2726, cbModelParam._m0[18u].y, _2725 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2727, cbModelParam._m0[19u].z, fma(_2726, cbModelParam._m0[19u].y, _2725 * cbModelParam._m0[19u].x))), _1994);
            frontier_phi_25_49_ladder = _2926.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2926.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2926.x * cbModelParam._m0[1u].z;
        }
        _2084 = frontier_phi_25_49_ladder_2;
        _2086 = frontier_phi_25_49_ladder_1;
        _2088 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2068 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1063, _1064, _1065), _1994);
        _2084 = _2068.x * cbModelParam._m0[1u].z;
        _2086 = _2068.y * cbModelParam._m0[1u].z;
        _2088 = _2068.z * cbModelParam._m0[1u].z;
    }
    float _2101 = (((_1090 * _1039) + _1091) * _1055) * ((cbModelParam._m0[1u].w * (_2084 - _1985)) + _1985);
    float _2103 = (((_1090 * _1041) + _1091) * _1055) * ((cbModelParam._m0[1u].w * (_2086 - _1987)) + _1987);
    float _2105 = (((_1090 * _1042) + _1091) * _1055) * ((cbModelParam._m0[1u].w * (_2088 - _1989)) + _1989);
    float _2108 = fma(_2105, cbSceneParam._m0[89u].z, fma(_2103, cbSceneParam._m0[89u].y, _2101 * cbSceneParam._m0[89u].x));
    float _2111 = fma(_2105, cbSceneParam._m0[90u].z, fma(_2103, cbSceneParam._m0[90u].y, _2101 * cbSceneParam._m0[90u].x));
    float _2114 = fma(_2105, cbSceneParam._m0[91u].z, fma(_2103, cbSceneParam._m0[91u].y, _2101 * cbSceneParam._m0[91u].x));
    vec4 _2122 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_977, _978));
    float _2124 = _2122.w;
    float _2136 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2124);
    float _2137 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2124);
    float _2138 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2124);
    uvec4 _2142 = floatBitsToUint(cbInstanceData._m0[_263 + 5u]);
    uint _2144 = _2142.x * 14u;
    uint _2145 = _2144 + 13u;
    float _2152 = _1055 + (-1.0);
    float _2157 = (cbLight._m0[_2145].x * _2152) + 1.0;
    float _2158 = (cbLight._m0[_2145].y * _2152) + 1.0;
    float _2159 = (cbLight._m0[_2145].z * _2152) + 1.0;
    float _2160 = (cbLight._m0[_2145].w * _2152) + 1.0;
    uint _2161 = _2144 + 5u;
    float _2167 = isnan(1.0) ? _2158 : (isnan(_2158) ? 1.0 : min(_2158, 1.0));
    uint _2171 = _2144 + 4u;
    float _2180 = isnan(1.0) ? _2157 : (isnan(_2157) ? 1.0 : min(_2157, 1.0));
    uint _2184 = _2144 | 1u;
    float _2195 = dot(vec3(cbLight._m0[_2144].xyz), vec3(_878, _879, _880));
    float _2198 = dot(vec3(cbLight._m0[_2184].xyz), vec3(_878, _879, _880));
    float _4460 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
    float _4471 = isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0));
    float _2203 = (isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0))) * 0.3183098733425140380859375;
    float _2205 = (isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0))) * 0.3183098733425140380859375;
    float _2212 = ((cbLight._m0[_2161].x * _2167) * _2205) + (((cbLight._m0[_2171].x * _2136) * _2180) * _2203);
    float _2213 = ((_2167 * cbLight._m0[_2161].y) * _2205) + (((cbLight._m0[_2171].y * _2137) * _2180) * _2203);
    float _2214 = ((_2167 * cbLight._m0[_2161].z) * _2205) + (((cbLight._m0[_2171].z * _2138) * _2180) * _2203);
    uvec4 _2218 = floatBitsToUint(cbLight._m0[_2144 + 12u]);
    bool _2220 = _2218.x == 0u;
    float _2231;
    float _2233;
    float _2235;
    if (_2220)
    {
        _2231 = _2212;
        _2233 = _2213;
        _2235 = _2214;
    }
    else
    {
        uint _2239 = _2144 + 6u;
        float _2255 = (dot(vec3(cbLight._m0[_2144 + 2u].xyz), vec3(_878, _879, _880)) * 0.5) + 0.5;
        float _2256 = _2255 * _2255;
        float _4482 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
        float _2257 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
        float _2258 = isnan(1.0) ? _2159 : (isnan(_2159) ? 1.0 : min(_2159, 1.0));
        _2231 = (((cbLight._m0[_2239].x * 0.3183098733425140380859375) * _2257) * _2258) + _2212;
        _2233 = (((cbLight._m0[_2239].y * 0.3183098733425140380859375) * _2257) * _2258) + _2213;
        _2235 = (((cbLight._m0[_2239].z * 0.3183098733425140380859375) * _2257) * _2258) + _2214;
    }
    bool _2238 = _2218.y == 0u;
    float _2276;
    float _2278;
    float _2280;
    if (_2238)
    {
        _2276 = _2231;
        _2278 = _2233;
        _2280 = _2235;
    }
    else
    {
        uint _2449 = _2144 + 7u;
        float _2465 = (dot(vec3(cbLight._m0[_2144 + 3u].xyz), vec3(_878, _879, _880)) * 0.5) + 0.5;
        float _2466 = _2465 * _2465;
        float _4498 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
        float _2467 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
        float _2468 = isnan(1.0) ? _2160 : (isnan(_2160) ? 1.0 : min(_2160, 1.0));
        _2276 = (((cbLight._m0[_2449].x * 0.3183098733425140380859375) * _2467) * _2468) + _2231;
        _2278 = (((cbLight._m0[_2449].y * 0.3183098733425140380859375) * _2467) * _2468) + _2233;
        _2280 = (((cbLight._m0[_2449].z * 0.3183098733425140380859375) * _2467) * _2468) + _2235;
    }
    uint _2283 = _2144 + 8u;
    float _2296 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2144].w)) * _881) * 0.949999988079071044921875);
    float _2297 = _2296 * _2296;
    float _2298 = cbLight._m0[_2144].x + _957;
    float _2299 = cbLight._m0[_2144].y + _958;
    float _2300 = cbLight._m0[_2144].z + _959;
    float _2304 = inversesqrt(dot(vec3(_2298, _2299, _2300), vec3(_2298, _2299, _2300)));
    float _2305 = _2304 * _2298;
    float _2306 = _2304 * _2299;
    float _2307 = _2304 * _2300;
    float _2308 = dot(vec3(_878, _879, _880), vec3(cbLight._m0[_2144].xyz));
    float _4514 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
    float _2311 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
    float _4525 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
    float _2312 = isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0));
    float _2313 = dot(vec3(_878, _879, _880), vec3(_2305, _2306, _2307));
    float _4536 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
    float _2316 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
    float _2317 = dot(vec3(cbLight._m0[_2144].xyz), vec3(_2305, _2306, _2307));
    float _4547 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
    float _2321 = _2297 * _2297;
    float _2325 = ((_2316 * _2316) * (_2321 + (-1.0))) + 1.0;
    float _2333 = exp2(log2(1.0 - (isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0)))) * 5.0);
    float _2334 = 0.959999978542327880859375 - _1036;
    float _2336 = 0.959999978542327880859375 - _1037;
    float _2337 = 0.959999978542327880859375 - _1038;
    float _2344 = 1.0 - _2297;
    float _2355 = (0.5 / (((_2312 * ((_2311 * _2344) + _2297)) + 9.9999999392252902907785028219223e-09) + (((_2312 * _2344) + _2297) * _2311))) * _2311;
    float _4558 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
    float _2357 = (isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0))) * (_2321 / ((_2325 * _2325) * 3.141590118408203125));
    uint _2371 = _2144 + 9u;
    float _2382 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2184].w)) * _881) * 0.949999988079071044921875);
    float _2383 = _2382 * _2382;
    float _2384 = cbLight._m0[_2184].x + _957;
    float _2385 = cbLight._m0[_2184].y + _958;
    float _2386 = cbLight._m0[_2184].z + _959;
    float _2390 = inversesqrt(dot(vec3(_2384, _2385, _2386), vec3(_2384, _2385, _2386)));
    float _2391 = _2390 * _2384;
    float _2392 = _2390 * _2385;
    float _2393 = _2390 * _2386;
    float _2394 = dot(vec3(_878, _879, _880), vec3(cbLight._m0[_2184].xyz));
    float _4569 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
    float _2397 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
    float _2398 = dot(vec3(_878, _879, _880), vec3(_2391, _2392, _2393));
    float _4580 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
    float _2401 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
    float _2402 = dot(vec3(cbLight._m0[_2184].xyz), vec3(_2391, _2392, _2393));
    float _4591 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
    float _2406 = _2383 * _2383;
    float _2410 = ((_2401 * _2401) * (_2406 + (-1.0))) + 1.0;
    float _2417 = exp2(log2(1.0 - (isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0)))) * 5.0);
    float _2424 = 1.0 - _2383;
    float _2434 = (0.5 / (((_2312 * ((_2397 * _2424) + _2383)) + 9.9999999392252902907785028219223e-09) + (((_2312 * _2424) + _2383) * _2397))) * _2397;
    float _4602 = isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0));
    float _2436 = (isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0))) * (_2406 / ((_2410 * _2410) * 3.141590118408203125));
    float _2446 = (((((_2417 * _2334) + _1039) * cbLight._m0[_2371].x) * _2436) * _2167) + ((((cbLight._m0[_2283].x * _2136) * ((_2333 * _2334) + _1039)) * _2357) * _2180);
    float _2447 = (((((_2417 * _2336) + _1041) * cbLight._m0[_2371].y) * _2436) * _2167) + ((((cbLight._m0[_2283].y * _2137) * ((_2333 * _2336) + _1041)) * _2357) * _2180);
    float _2448 = (((((_2417 * _2337) + _1042) * cbLight._m0[_2371].z) * _2436) * _2167) + ((((cbLight._m0[_2283].z * _2138) * ((_2333 * _2337) + _1042)) * _2357) * _2180);
    float _2510;
    float _2512;
    float _2514;
    if (_2220)
    {
        _2510 = _2446;
        _2512 = _2447;
        _2514 = _2448;
    }
    else
    {
        uint _2516 = _2144 + 2u;
        uint _2520 = _2144 + 10u;
        float _2534 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2516].w)) * _881) * 0.949999988079071044921875);
        float _2535 = _2534 * _2534;
        float _2536 = cbLight._m0[_2516].x + _957;
        float _2537 = cbLight._m0[_2516].y + _958;
        float _2538 = cbLight._m0[_2516].z + _959;
        float _2542 = inversesqrt(dot(vec3(_2536, _2537, _2538), vec3(_2536, _2537, _2538)));
        float _2543 = _2542 * _2536;
        float _2544 = _2542 * _2537;
        float _2545 = _2542 * _2538;
        float _2546 = dot(vec3(_878, _879, _880), vec3(cbLight._m0[_2516].xyz));
        float _4613 = isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : max(_2546, 0.0));
        float _2549 = isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0));
        float _2550 = dot(vec3(_878, _879, _880), vec3(_2543, _2544, _2545));
        float _4624 = isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : max(_2550, 0.0));
        float _2553 = isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0));
        float _2554 = dot(vec3(cbLight._m0[_2516].xyz), vec3(_2543, _2544, _2545));
        float _4635 = isnan(0.0) ? _2554 : (isnan(_2554) ? 0.0 : max(_2554, 0.0));
        float _2558 = _2535 * _2535;
        float _2562 = ((_2553 * _2553) * (_2558 + (-1.0))) + 1.0;
        float _2569 = exp2(log2(1.0 - (isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0)))) * 5.0);
        float _2576 = 1.0 - _2535;
        float _2586 = (0.5 / (((_2312 * ((_2549 * _2576) + _2535)) + 9.9999999392252902907785028219223e-09) + (((_2312 * _2576) + _2535) * _2549))) * _2549;
        float _4646 = isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : max(_2586, 0.0));
        float _2588 = (isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0))) * (_2558 / ((_2562 * _2562) * 3.141590118408203125));
        float _2589 = isnan(1.0) ? _2159 : (isnan(_2159) ? 1.0 : min(_2159, 1.0));
        _2510 = (((((_2569 * _2334) + _1039) * cbLight._m0[_2520].x) * _2588) * _2589) + _2446;
        _2512 = (((((_2569 * _2336) + _1041) * cbLight._m0[_2520].y) * _2588) * _2589) + _2447;
        _2514 = (((((_2569 * _2337) + _1042) * cbLight._m0[_2520].z) * _2588) * _2589) + _2448;
    }
    float _2624;
    float _2626;
    float _2628;
    if (_2238)
    {
        _2624 = _2510;
        _2626 = _2512;
        _2628 = _2514;
    }
    else
    {
        uint _2635 = _2144 + 3u;
        uint _2639 = _2144 + 11u;
        float _2653 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2635].w)) * _881) * 0.949999988079071044921875);
        float _2654 = _2653 * _2653;
        float _2655 = cbLight._m0[_2635].x + _957;
        float _2656 = cbLight._m0[_2635].y + _958;
        float _2657 = cbLight._m0[_2635].z + _959;
        float _2661 = inversesqrt(dot(vec3(_2655, _2656, _2657), vec3(_2655, _2656, _2657)));
        float _2662 = _2661 * _2655;
        float _2663 = _2661 * _2656;
        float _2664 = _2661 * _2657;
        float _2665 = dot(vec3(_878, _879, _880), vec3(cbLight._m0[_2635].xyz));
        float _4662 = isnan(0.0) ? _2665 : (isnan(_2665) ? 0.0 : max(_2665, 0.0));
        float _2668 = isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0));
        float _2669 = dot(vec3(_878, _879, _880), vec3(_2662, _2663, _2664));
        float _4673 = isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : max(_2669, 0.0));
        float _2672 = isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0));
        float _2673 = dot(vec3(cbLight._m0[_2635].xyz), vec3(_2662, _2663, _2664));
        float _4684 = isnan(0.0) ? _2673 : (isnan(_2673) ? 0.0 : max(_2673, 0.0));
        float _2677 = _2654 * _2654;
        float _2681 = ((_2672 * _2672) * (_2677 + (-1.0))) + 1.0;
        float _2688 = exp2(log2(1.0 - (isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0)))) * 5.0);
        float _2695 = 1.0 - _2654;
        float _2705 = (0.5 / (((_2312 * ((_2668 * _2695) + _2654)) + 9.9999999392252902907785028219223e-09) + (((_2312 * _2695) + _2654) * _2668))) * _2668;
        float _4695 = isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : max(_2705, 0.0));
        float _2707 = (isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0))) * (_2677 / ((_2681 * _2681) * 3.141590118408203125));
        float _2708 = isnan(1.0) ? _2160 : (isnan(_2160) ? 1.0 : min(_2160, 1.0));
        _2624 = (((((_2688 * _2334) + _1039) * cbLight._m0[_2639].x) * _2707) * _2708) + _2510;
        _2626 = (((((_2688 * _2336) + _1041) * cbLight._m0[_2639].y) * _2707) * _2708) + _2512;
        _2628 = (((((_2688 * _2337) + _1042) * cbLight._m0[_2639].z) * _2707) * _2708) + _2514;
    }
    float _2843;
    float _2845;
    float _2847;
    float _2849;
    float _2851;
    float _2853;
    if (_2142.y == 0u)
    {
        float _2783 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2784 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2783;
        float _2785 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2783;
        float _2786 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2783;
        uvec4 _2798 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2799 = _2798.x;
        uint _2810 = uint((float(_2798.y) * floor(float(uint(cbSceneParam._m0[85u].y * _978) / _2799))) + floor(float(uint(cbSceneParam._m0[85u].x * _977) / _2799)));
        float _2820 = (log2(_2786 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2821 = isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : max(_2820, 0.0));
        uint _2824 = uint(isnan(14.0) ? _2821 : (isnan(_2821) ? 14.0 : min(_2821, 14.0)));
        uvec4 _2829 = texelFetch(g_lightClusterGridBuffer, int(((_2824 << 2u) + (_2810 << 6u)) >> 2u));
        uint _2830 = _2829.x;
        uint _2831 = _2798.z;
        float _2931;
        float _2933;
        float _2935;
        float _2937;
        float _2939;
        float _2941;
        if (((((1u << ((_2831 >> 4u) & 15u)) + 4294967295u) & _2830) == 0u) || ((_2831 & 240u) == 0u))
        {
            _2931 = 0.0;
            _2933 = 0.0;
            _2935 = 0.0;
            _2937 = 0.0;
            _2939 = 0.0;
            _2941 = 0.0;
        }
        else
        {
            float _2932;
            float _2934;
            float _2936;
            float _2938;
            float _2940;
            float _2942;
            float _3084 = 0.0;
            float _3085 = 0.0;
            float _3086 = 0.0;
            float _3087 = 0.0;
            float _3088 = 0.0;
            float _3089 = 0.0;
            uint _3090 = 0u;
            uint _3099;
            bool _3100;
            for (;;)
            {
                _3099 = texelFetch(g_lightClassification, int((((_2824 << 5u) + (_2810 << 9u)) + (_3090 << 2u)) >> 2u)).x;
                _3100 = _3099 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3100)
                {
                    frontier_phi_66_pred = _3084;
                    frontier_phi_66_pred_1 = _3089;
                    frontier_phi_66_pred_2 = _3088;
                    frontier_phi_66_pred_3 = _3087;
                    frontier_phi_66_pred_4 = _3086;
                    frontier_phi_66_pred_5 = _3085;
                }
                else
                {
                    float _3229;
                    float _3230;
                    float _3231;
                    float _3232;
                    float _3233;
                    float _3234;
                    uint _3235;
                    _3229 = _3084;
                    _3230 = _3085;
                    _3231 = _3086;
                    _3232 = _3087;
                    _3233 = _3088;
                    _3234 = _3089;
                    _3235 = _3099;
                    float _3156;
                    float _3157;
                    float _3158;
                    float _3159;
                    float _3160;
                    float _3161;
                    for (;;)
                    {
                        uint _3239 = uint(findLSB(_3235)) + (_3090 << 5u);
                        uint _3236 = (_3235 + 4294967295u) & _3235;
                        uint _3241 = _3239 * 48u;
                        vec4 _3255 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3241)).x, texelFetch(g_PointLightRenderingBuffer, int(_3241 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3241 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3241 + 3u)).x));
                        uint _3261 = (_3239 * 48u) + 4u;
                        vec4 _3274 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3261)).x, texelFetch(g_PointLightRenderingBuffer, int(_3261 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3261 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3261 + 3u)).x));
                        uint _3280 = (_3239 * 48u) + 8u;
                        vec3 _3291 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3280)).x, texelFetch(g_PointLightRenderingBuffer, int(_3280 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3280 + 2u)).x));
                        float _3295 = _3255.x - _2784;
                        float _3296 = _3255.y - _2785;
                        float _3297 = _3255.z - _2786;
                        float _3298 = dot(vec3(_3295, _3296, _3297), vec3(_3295, _3296, _3297));
                        float _3301 = inversesqrt(_3298);
                        float _3302 = _3301 * _3295;
                        float _3303 = _3301 * _3296;
                        float _3304 = _3301 * _3297;
                        float _3305 = dot(vec3(_996, _999, _1002), vec3(_3302, _3303, _3304));
                        float _3310 = 1.0 - (_3298 * _3255.w);
                        float _4721 = isnan(0.0) ? _3310 : (isnan(_3310) ? 0.0 : max(_3310, 0.0));
                        float _3311 = isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0));
                        float _3312 = sqrt(_3298) * _3274.w;
                        float _3315 = 1.39999997615814208984375 / (_3312 + 1.39999997615814208984375);
                        float _3316 = _3315 * _3315;
                        float _3319 = ((1.0 - _3316) * _3305) + _3316;
                        float _3322 = _3312 * _3312;
                        float _3326 = ((isnan(0.0) ? _3319 : (isnan(_3319) ? 0.0 : max(_3319, 0.0))) * _3311) / ((_3322 * 0.699999988079071044921875) + 1.0);
                        float _3330 = (-0.0) - _2784;
                        float _3331 = (-0.0) - _2785;
                        float _3332 = (-0.0) - _2786;
                        float _3336 = inversesqrt(dot(vec3(_3330, _3331, _3332), vec3(_3330, _3331, _3332)));
                        float _3337 = _3336 * _3330;
                        float _3338 = _3336 * _3331;
                        float _3339 = _3336 * _3332;
                        float _3347 = exp2(log2(1.0 / ((_3322 * 3.5) + 5.0)) * 0.25);
                        float _3348 = 1.0 - _1071;
                        float _3355 = sqrt(1.0 - ((1.0 - (_3348 * _3348)) * (1.0 - (_3347 * _3347))));
                        float _3356 = _3355 * _3355;
                        float _3357 = _3356 * _3356;
                        float _3358 = _3337 + _3302;
                        float _3359 = _3338 + _3303;
                        float _3360 = _3339 + _3304;
                        float _3364 = inversesqrt(dot(vec3(_3358, _3359, _3360), vec3(_3358, _3359, _3360)));
                        float _3368 = dot(vec3(_996, _999, _1002), vec3(_3337, _3338, _3339));
                        float _4737 = isnan(0.0) ? _3368 : (isnan(_3368) ? 0.0 : max(_3368, 0.0));
                        float _3371 = isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0));
                        float _3372 = dot(vec3(_996, _999, _1002), vec3(_3364 * _3358, _3364 * _3359, _3364 * _3360));
                        float _4748 = isnan(0.0) ? _3372 : (isnan(_3372) ? 0.0 : max(_3372, 0.0));
                        float _3375 = isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0));
                        float _3379 = ((_3375 * _3375) * (_3357 + (-1.0))) + 1.0;
                        float _3380 = _3315 * _3356;
                        float _3381 = _3380 * _3380;
                        float _3384 = ((1.0 - _3381) * _3305) + _3381;
                        float _4759 = isnan(0.0) ? _3384 : (isnan(_3384) ? 0.0 : max(_3384, 0.0));
                        float _3385 = isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0));
                        float _3386 = 1.0 - _3356;
                        float _3396 = (0.5 / (((_3385 * ((_3371 * _3386) + _3356)) + 9.9999999392252902907785028219223e-09) + (((_3385 * _3386) + _3356) * _3371))) * _3385;
                        float _4770 = isnan(0.0) ? _3396 : (isnan(_3396) ? 0.0 : max(_3396, 0.0));
                        float _3407 = (((_3357 * 3.1415927410125732421875) * (isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0)))) / ((_3379 * _3379) * ((_3322 * 2.1991131305694580078125) + 3.141590118408203125))) * _3311;
                        _3159 = (_3326 * _3274.x) + _3232;
                        _3160 = (_3326 * _3274.y) + _3233;
                        _3161 = (_3326 * _3274.z) + _3234;
                        _3156 = (_3407 * _3291.x) + _3229;
                        _3157 = (_3407 * _3291.y) + _3230;
                        _3158 = (_3407 * _3291.z) + _3231;
                        if (_3236 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3229 = _3156;
                            _3230 = _3157;
                            _3231 = _3158;
                            _3232 = _3159;
                            _3233 = _3160;
                            _3234 = _3161;
                            _3235 = _3236;
                        }
                    }
                    frontier_phi_66_pred = _3156;
                    frontier_phi_66_pred_1 = _3161;
                    frontier_phi_66_pred_2 = _3160;
                    frontier_phi_66_pred_3 = _3159;
                    frontier_phi_66_pred_4 = _3158;
                    frontier_phi_66_pred_5 = _3157;
                }
                _2932 = frontier_phi_66_pred;
                _2942 = frontier_phi_66_pred_1;
                _2940 = frontier_phi_66_pred_2;
                _2938 = frontier_phi_66_pred_3;
                _2936 = frontier_phi_66_pred_4;
                _2934 = frontier_phi_66_pred_5;
                uint _3091 = _3090 + 1u;
                if (_3091 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3084 = _2932;
                    _3085 = _2934;
                    _3086 = _2936;
                    _3087 = _2938;
                    _3088 = _2940;
                    _3089 = _2942;
                    _3090 = _3091;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2931 = _2932;
            _2933 = _2934;
            _2935 = _2936;
            _2937 = _2938;
            _2939 = _2940;
            _2941 = _2942;
        }
        uvec4 _2945 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2946 = _2945.z;
        uint _2948 = (_2946 >> 8u) & 15u;
        float _3052;
        float _3054;
        float _3056;
        float _3058;
        float _3060;
        float _3062;
        if (((4294967295u << _2948) & _2830) == 0u)
        {
            _3052 = _2931;
            _3054 = _2933;
            _3056 = _2935;
            _3058 = _2937;
            _3060 = _2939;
            _3062 = _2941;
        }
        else
        {
            float _3077 = inversesqrt(dot(vec3(_2784, _2785, _2786), vec3(_2784, _2785, _2786)));
            float _3078 = _3077 * _2784;
            float _3079 = _3077 * _2785;
            float _3080 = _3077 * _2786;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2948 < ((_2946 >> 12u) & 15u))
            {
                float _3053;
                float _3055;
                float _3057;
                float _3059;
                float _3061;
                float _3063;
                float _3212 = _2931;
                float _3213 = _2933;
                float _3214 = _2935;
                float _3215 = _2937;
                float _3216 = _2939;
                float _3217 = _2941;
                uint _3218 = _2948;
                uint _3227;
                bool _3228;
                for (;;)
                {
                    _3227 = texelFetch(g_lightClassification, int((((_2824 << 5u) + (_2810 << 9u)) + (_3218 << 2u)) >> 2u)).x;
                    _3228 = _3227 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3228)
                    {
                        frontier_phi_77_pred = _3217;
                        frontier_phi_77_pred_1 = _3216;
                        frontier_phi_77_pred_2 = _3215;
                        frontier_phi_77_pred_3 = _3214;
                        frontier_phi_77_pred_4 = _3213;
                        frontier_phi_77_pred_5 = _3212;
                    }
                    else
                    {
                        float _3421;
                        float _3422;
                        float _3423;
                        float _3424;
                        float _3425;
                        float _3426;
                        float _3714;
                        float _3715;
                        float _3716;
                        float _3717;
                        float _3718;
                        float _3719;
                        float _3434 = _3212;
                        float _3435 = _3213;
                        float _3436 = _3214;
                        float _3437 = _3215;
                        float _3438 = _3216;
                        float _3439 = _3217;
                        uint _3440 = _3227;
                        uint _3441;
                        vec4 _3466;
                        float _3467;
                        vec4 _3482;
                        vec3 _3494;
                        vec4 _3509;
                        vec4 _3524;
                        float _3570;
                        bool _3571;
                        for (;;)
                        {
                            uint _3451 = ((_3218 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3440));
                            _3441 = (_3440 + 4294967295u) & _3440;
                            uint _3453 = _3451 * 40u;
                            _3466 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3453)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 3u)).x));
                            _3467 = _3466.w;
                            uint _3469 = (_3451 * 40u) + 4u;
                            _3482 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3469)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3469 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3469 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3469 + 3u)).x));
                            uint _3484 = (_3451 * 40u) + 8u;
                            _3494 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3484)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 2u)).x));
                            uint _3496 = (_3451 * 40u) + 16u;
                            _3509 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3496)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 3u)).x));
                            uint _3511 = (_3451 * 40u) + 20u;
                            _3524 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3511)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 3u)).x));
                            uint _3526 = (_3451 * 40u) + 24u;
                            vec4 _3539 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3526)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 3u)).x));
                            uint _3545 = (_3451 * 40u) + 28u;
                            vec4 _3558 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3545)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 3u)).x));
                            _3570 = fma(_2786, _3558.z, fma(_2785, _3558.y, _3558.x * _2784)) + _3558.w;
                            _3571 = !((fma(_2786, _3539.z, fma(_2785, _3539.y, _3539.x * _2784)) + _3539.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3571)
                            {
                                float _3598 = _3466.x - _2784;
                                float _3599 = _3466.y - _2785;
                                float _3600 = _3466.z - _2786;
                                float _3601 = dot(vec3(_3598, _3599, _3600), vec3(_3598, _3599, _3600));
                                float _3604 = inversesqrt(_3601);
                                float _3605 = _3604 * _3598;
                                float _3606 = _3604 * _3599;
                                float _3607 = _3604 * _3600;
                                float _3611 = 1.0 - (_3601 / (_3467 * _3467));
                                float _4781 = isnan(0.0) ? _3611 : (isnan(_3611) ? 0.0 : max(_3611, 0.0));
                                float _3612 = isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0));
                                float _3616 = sqrt(_3601) * _3482.w;
                                float _3618 = 1.39999997615814208984375 / (_3616 + 1.39999997615814208984375);
                                float _3619 = _3618 * _3618;
                                float _3622 = ((1.0 - _3619) * dot(vec3(_3605, _3606, _3607), vec3(_996, _999, _1002))) + _3619;
                                float _3625 = _3616 * _3616;
                                float _3629 = (fma(_2786, _3509.z, fma(_2785, _3509.y, _3509.x * _2784)) + _3509.w) / _3570;
                                float _3630 = (fma(_2786, _3524.z, fma(_2785, _3524.y, _3524.x * _2784)) + _3524.w) / _3570;
                                float _3634 = 1.0 - dot(vec2(_3629, _3630), vec2(_3629, _3630));
                                float _4797 = isnan(0.0) ? _3634 : (isnan(_3634) ? 0.0 : max(_3634, 0.0));
                                float _3635 = isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0));
                                float _3636 = _3635 * (((isnan(0.0) ? _3622 : (isnan(_3622) ? 0.0 : max(_3622, 0.0))) * _3612) / ((_3625 * 0.699999988079071044921875) + 1.0));
                                float _3648 = exp2(log2(1.0 / ((_3625 * 3.5) + 5.0)) * 0.25);
                                float _3649 = 1.0 - _1071;
                                float _3656 = sqrt(1.0 - ((1.0 - (_3649 * _3649)) * (1.0 - (_3648 * _3648))));
                                float _3657 = _3656 * _3656;
                                float _3658 = _3657 * _3657;
                                float _3659 = _3605 - _3078;
                                float _3660 = _3606 - _3079;
                                float _3661 = _3607 - _3080;
                                float _3665 = inversesqrt(dot(vec3(_3659, _3660, _3661), vec3(_3659, _3660, _3661)));
                                float _3669 = dot(vec3(_996, _999, _1002), vec3((-0.0) - _3078, (-0.0) - _3079, (-0.0) - _3080));
                                float _4808 = isnan(0.0) ? _3669 : (isnan(_3669) ? 0.0 : max(_3669, 0.0));
                                float _3672 = isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0));
                                float _3673 = dot(vec3(_996, _999, _1002), vec3(_3665 * _3659, _3665 * _3660, _3665 * _3661));
                                float _4819 = isnan(0.0) ? _3673 : (isnan(_3673) ? 0.0 : max(_3673, 0.0));
                                float _3676 = isnan(1.0) ? _4819 : (isnan(_4819) ? 1.0 : min(_4819, 1.0));
                                float _3680 = ((_3676 * _3676) * (_3658 + (-1.0))) + 1.0;
                                float _3681 = _3618 * _3657;
                                float _3682 = _3681 * _3681;
                                float _3688 = ((1.0 - _3682) * dot(vec3(_996, _999, _1002), vec3(_3605, _3606, _3607))) + _3682;
                                float _4830 = isnan(0.0) ? _3688 : (isnan(_3688) ? 0.0 : max(_3688, 0.0));
                                float _3689 = isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0));
                                float _3690 = 1.0 - _3657;
                                float _3700 = (0.5 / (((_3689 * ((_3672 * _3690) + _3657)) + 9.9999999392252902907785028219223e-09) + (((_3689 * _3690) + _3657) * _3672))) * _3689;
                                float _4841 = isnan(0.0) ? _3700 : (isnan(_3700) ? 0.0 : max(_3700, 0.0));
                                float _3710 = (_3635 * _3612) * (((_3658 * 3.1415927410125732421875) * (isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0)))) / ((_3680 * _3680) * ((_3625 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3636 * _3482.y;
                                frontier_phi_83_pred_1 = _3636 * _3482.x;
                                frontier_phi_83_pred_2 = _3710 * _3494.z;
                                frontier_phi_83_pred_3 = _3710 * _3494.y;
                                frontier_phi_83_pred_4 = _3710 * _3494.x;
                                frontier_phi_83_pred_5 = _3636 * _3482.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3718 = frontier_phi_83_pred;
                            _3717 = frontier_phi_83_pred_1;
                            _3716 = frontier_phi_83_pred_2;
                            _3715 = frontier_phi_83_pred_3;
                            _3714 = frontier_phi_83_pred_4;
                            _3719 = frontier_phi_83_pred_5;
                            _3424 = _3717 + _3437;
                            _3425 = _3718 + _3438;
                            _3426 = _3719 + _3439;
                            _3421 = _3714 + _3434;
                            _3422 = _3715 + _3435;
                            _3423 = _3716 + _3436;
                            if (_3441 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3434 = _3421;
                                _3435 = _3422;
                                _3436 = _3423;
                                _3437 = _3424;
                                _3438 = _3425;
                                _3439 = _3426;
                                _3440 = _3441;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3426;
                        frontier_phi_77_pred_1 = _3425;
                        frontier_phi_77_pred_2 = _3424;
                        frontier_phi_77_pred_3 = _3423;
                        frontier_phi_77_pred_4 = _3422;
                        frontier_phi_77_pred_5 = _3421;
                    }
                    _3063 = frontier_phi_77_pred;
                    _3061 = frontier_phi_77_pred_1;
                    _3059 = frontier_phi_77_pred_2;
                    _3057 = frontier_phi_77_pred_3;
                    _3055 = frontier_phi_77_pred_4;
                    _3053 = frontier_phi_77_pred_5;
                    uint _3219 = _3218 + 1u;
                    if (_3219 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3212 = _3053;
                        _3213 = _3055;
                        _3214 = _3057;
                        _3215 = _3059;
                        _3216 = _3061;
                        _3217 = _3063;
                        _3218 = _3219;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3057;
                frontier_phi_58_59_ladder_1 = _3063;
                frontier_phi_58_59_ladder_2 = _3061;
                frontier_phi_58_59_ladder_3 = _3059;
                frontier_phi_58_59_ladder_4 = _3055;
                frontier_phi_58_59_ladder_5 = _3053;
            }
            else
            {
                frontier_phi_58_59_ladder = _2935;
                frontier_phi_58_59_ladder_1 = _2941;
                frontier_phi_58_59_ladder_2 = _2939;
                frontier_phi_58_59_ladder_3 = _2937;
                frontier_phi_58_59_ladder_4 = _2933;
                frontier_phi_58_59_ladder_5 = _2931;
            }
            _3052 = frontier_phi_58_59_ladder_5;
            _3054 = frontier_phi_58_59_ladder_4;
            _3056 = frontier_phi_58_59_ladder;
            _3058 = frontier_phi_58_59_ladder_3;
            _3060 = frontier_phi_58_59_ladder_2;
            _3062 = frontier_phi_58_59_ladder_1;
        }
        float _3067 = isnan(1.0) ? _1055 : (isnan(_1055) ? 1.0 : min(_1055, 1.0));
        _2843 = (_3067 * _3058) + _2276;
        _2845 = (_3067 * _3060) + _2278;
        _2847 = (_3067 * _3062) + _2280;
        _2849 = ((_3052 * _1039) * _3067) + _2624;
        _2851 = ((_3054 * _1041) * _3067) + _2626;
        _2853 = ((_3056 * _1042) * _3067) + _2628;
    }
    else
    {
        _2843 = _2276;
        _2845 = _2278;
        _2847 = _2280;
        _2849 = _2624;
        _2851 = _2626;
        _2853 = _2628;
    }
    float _4857 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
    float _4868 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
    float _4879 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
    float _2870 = ((isnan(1.0) ? _4857 : (isnan(_4857) ? 1.0 : min(_4857, 1.0))) * (_2843 + ((isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0))) * _1055))) + ((_2849 + ((isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0))) * _1893)) * cbPerFrame._m0[3u].x);
    float _2871 = ((isnan(1.0) ? _4868 : (isnan(_4868) ? 1.0 : min(_4868, 1.0))) * (_2845 + ((isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0))) * _1055))) + ((_2851 + ((isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0))) * _1893)) * cbPerFrame._m0[3u].x);
    float _2872 = ((isnan(1.0) ? _4879 : (isnan(_4879) ? 1.0 : min(_4879, 1.0))) * (_2847 + ((isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0))) * _1055))) + ((_2853 + ((isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0))) * _1893)) * cbPerFrame._m0[3u].x);
    uint _2873 = _263 + 6u;
    float _2881 = _977 / cbSceneParam._m0[86u].x;
    float _2882 = _978 / cbSceneParam._m0[86u].y;
    vec4 _2896 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2881, _2882, (log2((isnan(cbSceneParam._m0[77u].w) ? _900 : (isnan(_900) ? cbSceneParam._m0[77u].w : min(_900, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2898 = _2896.x;
    float _2899 = _2896.y;
    float _2900 = _2896.z;
    float _2901 = _2896.w;
    float _2994;
    float _2996;
    float _2998;
    float _3000;
    if (_900 > cbSceneParam._m0[78u].w)
    {
        float _2956 = isnan(_900) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _900 : min(cbSceneParam._m0[80u].w, _900));
        float _2957 = _2956 / _900;
        float _2968 = _2957 * _950;
        float _2969 = _951 * _2957;
        float _2970 = (-0.0) - _2969;
        float _2972 = _2957 * _952;
        float _2974 = (cbSceneParam._m0[77u].w * _2970) / _2956;
        float _2975 = _2974 + cbSceneParam._m0[79u].w;
        float _2976 = cbSceneParam._m0[79u].w - _2969;
        float _2982 = sqrt(((_2968 * _2968) + (_2969 * _2969)) + (_2972 * _2972));
        float _2985 = (1.0 - (cbSceneParam._m0[77u].w / _2956)) * _2982;
        float _2990 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2992 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3169;
        if (abs((_2970 - _2974) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3169 = ((((_2975 > 0.0) ? exp2(_2990 * _2975) : (2.0 - exp2(_2992 * _2975))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2985;
        }
        else
        {
            float _3113 = 1.0 / cbSceneParam._m0[80u].x;
            float _3114 = isnan(_2976) ? _2975 : (isnan(_2975) ? _2976 : max(_2975, _2976));
            float _3115 = isnan(_2976) ? _2975 : (isnan(_2975) ? _2976 : min(_2975, _2976));
            float _3124 = isnan(0.0) ? _3114 : (isnan(_3114) ? 0.0 : min(_3114, 0.0));
            float _3125 = isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : min(_3115, 0.0));
            _3169 = ((abs(_2982 / _2970) * cbSceneParam._m0[80u].y) * ((((_3124 - _3125) * 2.0) - ((exp2(_2990 * (isnan(0.0) ? _3114 : (isnan(_3114) ? 0.0 : max(_3114, 0.0)))) - exp2(_2990 * (isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : max(_3115, 0.0))))) * _3113)) - ((exp2(_2992 * _3124) - exp2(_2992 * _3125)) * _3113))) + (_2985 * cbSceneParam._m0[80u].z);
        }
        vec4 _3171 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2881, _2882, 1.0), 0.0);
        float _3180 = exp2((_3169 * (-1.44269502162933349609375)) * (1.0 - _3171.w));
        float _3181 = log2(_3180);
        float _3197 = log2(_2901);
        _2994 = (exp2(_3197 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3181 * cbSceneParam._m0[78u].x)) * _3171.x) / cbSceneParam._m0[78u].x)) + _2898;
        _2996 = (exp2(_3197 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3181 * cbSceneParam._m0[78u].y)) * _3171.y) / cbSceneParam._m0[78u].y)) + _2899;
        _2998 = (exp2(_3197 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3181 * cbSceneParam._m0[78u].z)) * _3171.z) / cbSceneParam._m0[78u].z)) + _2900;
        _3000 = _3180 * _2901;
    }
    else
    {
        _2994 = _2898;
        _2996 = _2899;
        _2998 = _2900;
        _3000 = _2901;
    }
    bool _3207;
    vec4 _3010;
    vec4 _3032;
    float _3034;
    float _3038;
    float _3039;
    float _3040;
    float _3041;
    bool _3051;
    for (;;)
    {
        _3010 = cbMatDynParam._m0[0u];
        float _3012 = roundEven(_3010.y);
        bool _3013 = _3012 == 3.0;
        float _3014 = log2(_3000);
        float _3021 = exp2(_3014 * cbSceneParam._m0[78u].x) * _2870;
        float _3022 = exp2(_3014 * cbSceneParam._m0[78u].y) * _2871;
        float _3023 = exp2(_3014 * cbSceneParam._m0[78u].z) * _2872;
        float _3030 = _966 + (-0.5);
        _3032 = cbMtdParam._m0[1u];
        _3034 = _3032.y * _3030;
        float _3037 = (_3012 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3038 = _3037 * (_3013 ? _3021 : (_3021 + (cbSceneParam._m0[72u].w * _2994)));
        _3039 = _3037 * (_3013 ? _3022 : (_3022 + (cbSceneParam._m0[72u].w * _2996)));
        _3040 = _3037 * (_3013 ? _3023 : (_3023 + (cbSceneParam._m0[72u].w * _2998)));
        _3041 = _3030 * 0.999000012874603271484375;
        _3051 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3051)
        {
            if ((cbInstanceData._m0[_263 + 7u].x + _3041) < 0.5)
            {
                _3207 = true;
                break;
            }
        }
        uint _3148 = _1015 + uint(_3010.w);
        if ((cbInstanceData._m0[_3148].w < 1.0) && ((cbInstanceData._m0[_3148].w + _3041) < 0.5))
        {
            _3207 = true;
            break;
        }
        if ((_3034 + 1.0) < _3032.x)
        {
            _3207 = true;
            break;
        }
        _3207 = false;
        break;
    }
    float _3412;
    if (_3207)
    {
        discard_state = true;
        _3412 = 0.0;
    }
    else
    {
        _3412 = cbInstanceData._m0[_2873].w;
    }
    SV_Target.x = _3038;
    SV_Target.y = _3039;
    SV_Target.z = _3040;
    SV_Target.w = _3412;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2873].w;
    discard_exit();
}


