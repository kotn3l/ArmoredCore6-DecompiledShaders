#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1484;
float _3862;
float _3863;
float _3864;
float _3865;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _238 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _239 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _240 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _246 = inversesqrt(dot(vec3(_238, _239, _240), vec3(_238, _239, _240)));
    float _247 = _246 * _238;
    float _248 = _246 * _239;
    float _249 = _246 * _240;
    float _253 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _254 = _253 * NORMAL.x;
    float _255 = _253 * NORMAL.y;
    float _256 = _253 * NORMAL.z;
    float _260 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _261 = _260 * TANGENT.x;
    float _262 = _260 * TANGENT.y;
    float _263 = _260 * TANGENT.z;
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _274 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _275 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3874 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _3885 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _3896 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    uint _285 = uint(roundEven(NORMAL.w)) * 13u;
    uint _290 = _285 + 1u;
    uint _294 = _285 + 2u;
    float _303 = sqrt(((cbInstanceData._m0[_290].x * cbInstanceData._m0[_290].x) + (cbInstanceData._m0[_285].x * cbInstanceData._m0[_285].x)) + (cbInstanceData._m0[_294].x * cbInstanceData._m0[_294].x));
    float _304 = _303 * TEXCOORD.z;
    float _305 = _303 * TEXCOORD.w;
    vec4 _318 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _304) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _305) + cbTextureTilingScale._m0[13u].w));
    vec4 _342 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _347 = _342.x * cbMtdParam._m0[11u].x;
    float _348 = _342.y * cbMtdParam._m0[11u].y;
    float _349 = _342.z * cbMtdParam._m0[11u].z;
    vec4 _368 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _304) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _305) + cbTextureTilingScale._m0[5u].w));
    vec4 _404 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _406 = _404.x;
    float _418 = dot(vec4(_406, _404.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _435 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_406 - _418) * cbMtdParam._m0[24u].y) + _418) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3907 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _436 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
    float _443 = (_436 * ((_368.x * cbMtdParam._m0[12u].x) - _347)) + _347;
    float _444 = (_436 * ((_368.y * cbMtdParam._m0[12u].y) - _348)) + _348;
    float _445 = (_436 * ((_368.z * cbMtdParam._m0[12u].z) - _349)) + _349;
    float _449 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _318.x) * _443;
    float _452 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _318.y) * _444;
    float _455 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _318.z) * _445;
    float _462 = ((_443 - _449) * (isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0)))) + _449;
    float _463 = ((_444 - _452) * (isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0)))) + _452;
    float _464 = ((_445 - _455) * (isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0)))) + _455;
    vec4 _483 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _304) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _305) + cbTextureTilingScale._m0[14u].w));
    vec4 _503 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _304) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _305) + cbTextureTilingScale._m0[20u].w));
    vec4 _530 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _304) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _305) + cbTextureTilingScale._m0[4u].w));
    vec4 _547 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _549 = _547.x;
    float _550 = _547.y;
    float _551 = _547.z;
    float _560 = ((_530.z - _551) * _436) + _551;
    float _563 = ((((_530.x - _549) * _436) + _549) * 2.0) + (-1.0);
    float _564 = ((((_530.y - _550) * _436) + _550) * 2.0) + (-1.0);
    float _565 = dot(vec2(_563, _564), vec2(_563, _564));
    float _3918 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _570 = sqrt(1.0 - (isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0))));
    float _573 = _563 + ((((_503.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x);
    float _574 = _564 + ((((_503.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x);
    float _577 = fma(_570, _254, fma(_574, _261, _573 * _247));
    float _580 = fma(_570, _255, fma(_574, _262, _573 * _248));
    float _583 = fma(_570, _256, fma(_574, _263, _573 * _249));
    float _587 = inversesqrt(dot(vec3(_577, _580, _583), vec3(_577, _580, _583)));
    vec4 _603 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _629 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _304) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _305) + cbTextureTilingScale._m0[11u].w));
    float _631 = _629.x;
    float _632 = 1.0 - _631;
    float _636 = ((_631 - _632) * cbMtdParam._m0[24u].z) + _632;
    float _638 = (cbMtdParam._m0[19u].x + dot(vec4(_587 * _577, _587 * _580, _587 * _583, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_636 * cbMtdParam._m0[21u].z);
    float _3929 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _639 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
    float _641 = (-0.0) - cbMtdParam._m0[24u].x;
    float _643 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _644 = isnan(1.0) ? _643 : (isnan(_643) ? 1.0 : min(_643, 1.0));
    float _651 = _639 - ((_639 * TEXCOORD_8.x) * _644);
    float _652 = _639 - ((_639 * TEXCOORD_8.y) * _644);
    float _653 = _639 - ((_639 * TEXCOORD_8.z) * _644);
    float _660 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _664 = ((isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : min(_660, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _672 = (_664 - (((_636 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _664))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3960 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _673 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
    float _677 = ((_651 * ((_483.x * cbMtdParam._m0[18u].x) - _462)) * _673) + _462;
    float _678 = ((_652 * ((_483.y * cbMtdParam._m0[18u].y) - _463)) * _673) + _463;
    float _679 = ((_653 * ((_483.z * cbMtdParam._m0[18u].z) - _464)) * _673) + _464;
    vec4 _691 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _304) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _305) + cbTextureTilingScale._m0[19u].w));
    float _693 = _691.x;
    float _694 = 1.0 - _693;
    float _719 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_693 - _694) * cbMtdParam._m0[24u].w) + _694) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3971 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
    float _720 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
    float _728 = ((((cbMtdParam._m0[10u].x - _677) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _720) + _677;
    float _729 = ((((cbMtdParam._m0[10u].y - _678) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _720) + _678;
    float _730 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _679)) * _720) + _679;
    vec4 _756 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _758 = _756.x;
    float _776 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _304) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _305) + cbTextureTilingScale._m0[9u].w)).x - _758) * _436) + _758;
    float _780 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _776) * cbMtdParam._m0[19u].z) + _776;
    float _783 = _780 - ((_673 * _651) * _780);
    float _785 = _783 - (_783 * _720);
    float _790 = (((_503.z - _560) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _560;
    vec4 _804 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _304) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _305) + cbTextureTilingScale._m0[15u].w));
    float _811 = (_804.x * 2.0) + (-1.0);
    float _812 = (_804.y * 2.0) + (-1.0);
    float _813 = dot(vec2(_811, _812), vec2(_811, _812));
    float _3982 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
    float _822 = (((_804.z - _790) * _651) * _673) + _790;
    float _825 = ((cbMtdParam._m0[23u].y - _822) * _720) + _822;
    vec4 _844 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _304) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _305) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _850 = (_844.x * 2.0) + (-1.0);
    float _851 = (_844.y * 2.0) + (-1.0);
    float _852 = dot(vec2(_850, _851), vec2(_850, _851));
    float _3993 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
    float _872 = (((cbMtdParam._m0[21u].x * _573) + ((_811 - _573) * _651)) * _673) + _573;
    float _873 = (((cbMtdParam._m0[21u].x * _574) + ((_812 - _574) * _652)) * _673) + _574;
    float _874 = (((sqrt(1.0 - (isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0)))) - _570) * _653) * _673) + _570;
    float _885 = (((_850 - _872) + (_872 * cbMtdParam._m0[22u].z)) * _720) + _872;
    float _886 = (((_851 - _873) + (_873 * cbMtdParam._m0[22u].z)) * _720) + _873;
    float _887 = ((sqrt(1.0 - (isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0)))) - _874) * _720) + _874;
    float _891 = cbMtdParam._m0[22u].x + _603.w;
    float _894 = fma(_887, _254, fma(_886, _261, _885 * _247));
    float _897 = fma(_887, _255, fma(_886, _262, _885 * _248));
    float _900 = fma(_887, _256, fma(_886, _263, _885 * _249));
    float _904 = inversesqrt(dot(vec3(_894, _897, _900), vec3(_894, _897, _900)));
    float _905 = _904 * _894;
    float _906 = _904 * _897;
    float _907 = _904 * _900;
    float _4004 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
    float _908 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
    float _4015 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
    float _4026 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
    float _4037 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _4048 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    float _4059 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
    float _913 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
    float _927 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _967 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _977 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _967);
    float _978 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _967);
    float _979 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _967);
    float _983 = inversesqrt(dot(vec3(_977, _978, _979), vec3(_977, _978, _979)));
    float _984 = _977 * _983;
    float _985 = _978 * _983;
    float _986 = _979 * _983;
    vec4 _991 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _993 = _991.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1165 = sqrt(((_977 * _977) + (_978 * _978)) + (_979 * _979));
        float _1171 = (cbMatDynParam._m0[5u].x * _1165) + cbMatDynParam._m0[5u].y;
        float _4070 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1172 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
        float _1176 = (cbMatDynParam._m0[5u].z * _1165) + cbMatDynParam._m0[5u].w;
        float _4081 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0))) - _1172)) + _1172) < ((_993 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1004 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1005 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1023 = fma(_907, cbSceneParam._m0[5u].z, fma(_906, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _905));
    float _1026 = fma(_907, cbSceneParam._m0[6u].z, fma(_906, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _905));
    float _1029 = fma(_907, cbSceneParam._m0[7u].z, fma(_906, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _905));
    uint _1042 = _285 + 9u;
    uint _1043 = _1042 + uint(cbMatDynParam._m0[0u].w);
    float _1049 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0)))) * cbInstanceData._m0[_1043].x;
    float _1050 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0)))) * cbInstanceData._m0[_1043].y;
    float _1051 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0)))) * cbInstanceData._m0[_1043].z;
    float _4092 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
    float _1052 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
    float _4103 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
    float _1053 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
    float _4114 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
    float _1054 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
    float _1055 = 1.0 - _913;
    float _1056 = _1052 * _1055;
    float _1057 = _1053 * _1055;
    float _1058 = _1054 * _1055;
    float _1063 = (_1052 + (-0.039999999105930328369140625)) * _913;
    float _1064 = (_1053 + (-0.039999999105930328369140625)) * _913;
    float _1065 = (_1054 + (-0.039999999105930328369140625)) * _913;
    float _1066 = _1063 + 0.039999999105930328369140625;
    float _1068 = _1064 + 0.039999999105930328369140625;
    float _1069 = _1065 + 0.039999999105930328369140625;
    vec4 _1078 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1004, cbSceneParam._m0[86u].y * _1005));
    float _1082 = ((isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0))) * TEXCOORD_5.w) * _1078.x;
    float _1083 = dot(vec3(_905, _906, _907), vec3(_984, _985, _986));
    float _1086 = _1083 * 2.0;
    float _1090 = (_1086 * _905) - _984;
    float _1091 = (_1086 * _906) - _985;
    float _1092 = (_1086 * _907) - _986;
    float _1096 = abs(dot(vec3(_984, _985, _986), vec3(_905, _906, _907)));
    float _4125 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
    float _1098 = sqrt(_908);
    float _1111 = exp2((_1098 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1098 * 3.0));
    float _1117 = (1.0 - _1111) * ((_1098 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1118 = _1111 * _1098;
    float _1146 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1150 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1154 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1483;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1208 = fma(_1154, cbModelParam._m0[26u].z, fma(_1150, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1146));
        float _1212 = fma(_1154, cbModelParam._m0[27u].z, fma(_1150, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1146));
        float _1216 = fma(_1154, cbModelParam._m0[28u].z, fma(_1150, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1146));
        float _1241 = _1146 + _905;
        float _1242 = _1150 + _906;
        float _1243 = _1154 + _907;
        float _1253 = fma(_1243, cbModelParam._m0[26u].z, fma(_1242, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1241)) - _1208;
        float _1254 = fma(_1243, cbModelParam._m0[27u].z, fma(_1242, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1241)) - _1212;
        float _1255 = fma(_1243, cbModelParam._m0[28u].z, fma(_1242, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1241)) - _1216;
        float _1259 = inversesqrt(dot(vec3(_1253, _1254, _1255), vec3(_1253, _1254, _1255)));
        float _1272 = ((_1259 * _1253) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1208 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1273 = ((_1259 * _1254) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1212 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1274 = ((_1259 * _1255) / cbModelParam._m0[34u].z) + ((((((_1216 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1277 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1272, _1273, _1274), 0.0);
        vec4 _1284 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1272, _1273, _1274), 0.0);
        vec4 _1291 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1272, _1273, _1274), 0.0);
        vec4 _1298 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1272, _1273, _1274), 0.0);
        float _1311 = exp2((_1277.w + (-0.5)) * 20.0) * 2.0;
        float _1312 = _1311 * (_1277.x + (-0.5));
        float _1313 = _1311 * (_1277.y + (-0.5));
        float _1314 = _1311 * (_1277.z + (-0.5));
        float _1321 = exp2((_1284.w + (-0.5)) * 20.0) * 2.0;
        float _1322 = _1321 * (_1284.x + (-0.5));
        float _1323 = _1321 * (_1284.y + (-0.5));
        float _1324 = _1321 * (_1284.z + (-0.5));
        float _1331 = exp2((_1291.w + (-0.5)) * 20.0) * 2.0;
        float _1332 = _1331 * (_1291.x + (-0.5));
        float _1333 = _1331 * (_1291.y + (-0.5));
        float _1334 = _1331 * (_1291.z + (-0.5));
        float _1341 = exp2((_1298.w + (-0.5)) * 20.0) * 2.0;
        float _1342 = _1341 * (_1298.x + (-0.5));
        float _1343 = _1341 * (_1298.y + (-0.5));
        float _1344 = _1341 * (_1298.z + (-0.5));
        float _1345 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1346 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1347 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1348 = _1312 * 0.5;
        float _1349 = _1322 * 0.5;
        float _1350 = _1332 * 0.5;
        float _1351 = dot(vec3(_1348, _1349, _1350), vec3(_1348, _1349, _1350));
        float _1356 = (_1351 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1351);
        float _1365 = (dot(vec3(_905, _906, _907), vec3(_1356 * _1348, _1356 * _1349, _1356 * _1350)) + 1.0) * 0.5;
        float _4151 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1375 = sqrt(((_1349 * _1349) + (_1348 * _1348)) + (_1350 * _1350)) / (_1345 + 9.9999997473787516355514526367188e-06);
        float _4162 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1376 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
        float _1377 = _1376 * 2.0;
        float _1381 = (1.0 - _1376) / (_1376 + 1.0);
        float _4173 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1382 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
        float _1391 = ((((1.0 - _1382) * (_1377 + 2.0)) * exp2(log2(isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0))) * (_1377 + 1.0))) + _1382) * _1345;
        float _1392 = _1313 * 0.5;
        float _1393 = _1323 * 0.5;
        float _1394 = _1333 * 0.5;
        float _1395 = dot(vec3(_1392, _1393, _1394), vec3(_1392, _1393, _1394));
        float _1400 = (_1395 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1395);
        float _1408 = (dot(vec3(_905, _906, _907), vec3(_1400 * _1392, _1400 * _1393, _1400 * _1394)) + 1.0) * 0.5;
        float _4184 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1417 = sqrt(((_1393 * _1393) + (_1392 * _1392)) + (_1394 * _1394)) / (_1346 + 9.9999997473787516355514526367188e-06);
        float _4195 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1418 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
        float _1419 = _1418 * 2.0;
        float _1423 = (1.0 - _1418) / (_1418 + 1.0);
        float _4206 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1424 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
        float _1433 = ((((1.0 - _1424) * (_1419 + 2.0)) * exp2(log2(isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0))) * (_1419 + 1.0))) + _1424) * _1346;
        float _1434 = _1314 * 0.5;
        float _1435 = _1324 * 0.5;
        float _1436 = _1334 * 0.5;
        float _1437 = dot(vec3(_1434, _1435, _1436), vec3(_1434, _1435, _1436));
        float _1442 = (_1437 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1437);
        float _1450 = (dot(vec3(_905, _906, _907), vec3(_1442 * _1434, _1442 * _1435, _1442 * _1436)) + 1.0) * 0.5;
        float _4217 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1459 = sqrt(((_1435 * _1435) + (_1434 * _1434)) + (_1436 * _1436)) / (_1347 + 9.9999997473787516355514526367188e-06);
        float _4228 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1460 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
        float _1461 = _1460 * 2.0;
        float _1465 = (1.0 - _1460) / (_1460 + 1.0);
        float _4239 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1466 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
        float _1475 = ((((1.0 - _1466) * (_1461 + 2.0)) * exp2(log2(isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0))) * (_1461 + 1.0))) + _1466) * _1347;
        _1483 = _1314;
        _1485 = _1313;
        _1486 = _1312;
        _1487 = _1324;
        _1488 = _1323;
        _1489 = _1322;
        _1490 = _1334;
        _1491 = _1333;
        _1492 = _1332;
        _1493 = _1347;
        _1494 = _1346;
        _1495 = _1345;
        _1496 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0)));
        _1497 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0)));
        _1498 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0)));
    }
    else
    {
        _1483 = _1484;
        _1485 = _1484;
        _1486 = _1484;
        _1487 = _1484;
        _1488 = _1484;
        _1489 = _1484;
        _1490 = _1484;
        _1491 = _1484;
        _1492 = _1484;
        _1493 = _1484;
        _1494 = _1484;
        _1495 = _1484;
        _1496 = 0.0;
        _1497 = 0.0;
        _1498 = 0.0;
    }
    float _1795;
    float _1796;
    float _1797;
    float _1798;
    float _1799;
    float _1800;
    float _1801;
    float _1802;
    float _1803;
    float _1804;
    float _1805;
    float _1806;
    float _1807;
    float _1808;
    float _1809;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1526 = fma(_1154, cbModelParam._m0[30u].z, fma(_1150, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1146));
        float _1530 = fma(_1154, cbModelParam._m0[31u].z, fma(_1150, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1146));
        float _1534 = fma(_1154, cbModelParam._m0[32u].z, fma(_1150, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1146));
        float _1557 = _1146 + _905;
        float _1558 = _1150 + _906;
        float _1559 = _1154 + _907;
        float _1569 = fma(_1559, cbModelParam._m0[30u].z, fma(_1558, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1557)) - _1526;
        float _1570 = fma(_1559, cbModelParam._m0[31u].z, fma(_1558, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1557)) - _1530;
        float _1571 = fma(_1559, cbModelParam._m0[32u].z, fma(_1558, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1557)) - _1534;
        float _1575 = inversesqrt(dot(vec3(_1569, _1570, _1571), vec3(_1569, _1570, _1571)));
        float _1588 = ((_1575 * _1569) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1526 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1589 = ((_1575 * _1570) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1530 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1590 = ((_1575 * _1571) / cbModelParam._m0[35u].z) + ((((((_1534 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1592 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1588, _1589, _1590), 0.0);
        vec4 _1599 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1588, _1589, _1590), 0.0);
        vec4 _1606 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1588, _1589, _1590), 0.0);
        vec4 _1613 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1588, _1589, _1590), 0.0);
        float _1625 = exp2((_1592.w + (-0.5)) * 20.0) * 2.0;
        float _1626 = _1625 * (_1592.x + (-0.5));
        float _1627 = _1625 * (_1592.y + (-0.5));
        float _1628 = _1625 * (_1592.z + (-0.5));
        float _1635 = exp2((_1599.w + (-0.5)) * 20.0) * 2.0;
        float _1636 = _1635 * (_1599.x + (-0.5));
        float _1637 = _1635 * (_1599.y + (-0.5));
        float _1638 = _1635 * (_1599.z + (-0.5));
        float _1645 = exp2((_1606.w + (-0.5)) * 20.0) * 2.0;
        float _1646 = _1645 * (_1606.x + (-0.5));
        float _1647 = _1645 * (_1606.y + (-0.5));
        float _1648 = _1645 * (_1606.z + (-0.5));
        float _1655 = exp2((_1613.w + (-0.5)) * 20.0) * 2.0;
        float _1656 = _1655 * (_1613.x + (-0.5));
        float _1657 = _1655 * (_1613.y + (-0.5));
        float _1658 = _1655 * (_1613.z + (-0.5));
        float _1659 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
        float _1660 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
        float _1661 = isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0));
        float _1662 = _1626 * 0.5;
        float _1663 = _1636 * 0.5;
        float _1664 = _1646 * 0.5;
        float _1665 = dot(vec3(_1662, _1663, _1664), vec3(_1662, _1663, _1664));
        float _1670 = (_1665 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1665);
        float _1678 = (dot(vec3(_905, _906, _907), vec3(_1670 * _1662, _1670 * _1663, _1670 * _1664)) + 1.0) * 0.5;
        float _4280 = isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0));
        float _1687 = sqrt(((_1663 * _1663) + (_1662 * _1662)) + (_1664 * _1664)) / (_1659 + 9.9999997473787516355514526367188e-06);
        float _4291 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
        float _1688 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
        float _1689 = _1688 * 2.0;
        float _1693 = (1.0 - _1688) / (_1688 + 1.0);
        float _4302 = isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0));
        float _1694 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
        float _1703 = ((((1.0 - _1694) * (_1689 + 2.0)) * exp2(log2(isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0))) * (_1689 + 1.0))) + _1694) * _1659;
        float _1704 = _1627 * 0.5;
        float _1705 = _1637 * 0.5;
        float _1706 = _1647 * 0.5;
        float _1707 = dot(vec3(_1704, _1705, _1706), vec3(_1704, _1705, _1706));
        float _1712 = (_1707 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1707);
        float _1720 = (dot(vec3(_905, _906, _907), vec3(_1712 * _1704, _1712 * _1705, _1712 * _1706)) + 1.0) * 0.5;
        float _4313 = isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0));
        float _1729 = sqrt(((_1705 * _1705) + (_1704 * _1704)) + (_1706 * _1706)) / (_1660 + 9.9999997473787516355514526367188e-06);
        float _4324 = isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0));
        float _1730 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
        float _1731 = _1730 * 2.0;
        float _1735 = (1.0 - _1730) / (_1730 + 1.0);
        float _4335 = isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0));
        float _1736 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
        float _1745 = ((((1.0 - _1736) * (_1731 + 2.0)) * exp2(log2(isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0))) * (_1731 + 1.0))) + _1736) * _1660;
        float _1746 = _1628 * 0.5;
        float _1747 = _1638 * 0.5;
        float _1748 = _1648 * 0.5;
        float _1749 = dot(vec3(_1746, _1747, _1748), vec3(_1746, _1747, _1748));
        float _1754 = (_1749 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1749);
        float _1762 = (dot(vec3(_905, _906, _907), vec3(_1754 * _1746, _1754 * _1747, _1754 * _1748)) + 1.0) * 0.5;
        float _4346 = isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0));
        float _1771 = sqrt(((_1747 * _1747) + (_1746 * _1746)) + (_1748 * _1748)) / (_1661 + 9.9999997473787516355514526367188e-06);
        float _4357 = isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0));
        float _1772 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
        float _1773 = _1772 * 2.0;
        float _1777 = (1.0 - _1772) / (_1772 + 1.0);
        float _4368 = isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0));
        float _1778 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
        float _1787 = ((((1.0 - _1778) * (_1773 + 2.0)) * exp2(log2(isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0))) * (_1773 + 1.0))) + _1778) * _1661;
        _1795 = _1628;
        _1796 = _1627;
        _1797 = _1626;
        _1798 = _1638;
        _1799 = _1637;
        _1800 = _1636;
        _1801 = _1648;
        _1802 = _1647;
        _1803 = _1646;
        _1804 = _1661;
        _1805 = _1660;
        _1806 = _1659;
        _1807 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0)));
        _1808 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0)));
        _1809 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0)));
    }
    else
    {
        _1795 = _1484;
        _1796 = _1484;
        _1797 = _1484;
        _1798 = _1484;
        _1799 = _1484;
        _1800 = _1484;
        _1801 = _1484;
        _1802 = _1484;
        _1803 = _1484;
        _1804 = _1484;
        _1805 = _1484;
        _1806 = _1484;
        _1807 = 0.0;
        _1808 = 0.0;
        _1809 = 0.0;
    }
    float _1819 = (cbModelParam._m0[1u].x * (_1807 - _1496)) + _1496;
    float _1820 = (cbModelParam._m0[1u].x * (_1808 - _1497)) + _1497;
    float _1821 = (cbModelParam._m0[1u].x * (_1809 - _1498)) + _1498;
    float _1842 = fma(_1821, cbSceneParam._m0[89u].z, fma(_1820, cbSceneParam._m0[89u].y, _1819 * cbSceneParam._m0[89u].x));
    float _1845 = fma(_1821, cbSceneParam._m0[90u].z, fma(_1820, cbSceneParam._m0[90u].y, _1819 * cbSceneParam._m0[90u].x));
    float _1848 = fma(_1821, cbSceneParam._m0[91u].z, fma(_1820, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1819));
    float _1863 = _1090 * 0.5;
    float _1864 = _1091 * 0.5;
    float _1865 = _1092 * 0.5;
    float _1866 = dot(vec4(_1863, _1864, _1865, 1.0), vec4(_1797, _1800, _1803, _1806));
    float _1869 = dot(vec4(_1863, _1864, _1865, 1.0), vec4(_1796, _1799, _1802, _1805));
    float _1872 = dot(vec4(_1863, _1864, _1865, 1.0), vec4(_1795, _1798, _1801, _1804));
    float _1906;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1879 = dot(vec4(_1863, _1864, _1865, 1.0), vec4(_1483, _1487, _1490, _1493));
        float _1883 = dot(vec4(_1863, _1864, _1865, 1.0), vec4(_1485, _1488, _1491, _1494));
        float _1887 = dot(vec4(_1863, _1864, _1865, 1.0), vec4(_1486, _1489, _1492, _1495));
        float _1894 = dot(vec4(cbModelParam._m0[39u]), vec4(_1863, _1864, _1865, 1.0));
        _1906 = dot(vec3(isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0)), isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0)), isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1894) ? 0.0 : (isnan(0.0) ? _1894 : max(0.0, _1894))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1906 = 1.0;
    }
    float _1917;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1908 = dot(vec4(cbModelParam._m0[40u]), vec4(_1863, _1864, _1865, 1.0));
        _1917 = dot(vec3(isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0)), isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0)), isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1908) ? 0.0 : (isnan(0.0) ? _1908 : max(0.0, _1908))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1917 = 1.0;
    }
    float _1921 = (_1917 * cbModelParam._m0[1u].x) + (_1906 * (1.0 - cbModelParam._m0[1u].x));
    float _1931 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _908);
    float _1932 = isnan(_1931) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1931 : min(cbModelParam._m0[25u].z, _1931));
    float _2012;
    float _2014;
    float _2016;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1979 = fma(_1154, cbModelParam._m0[13u].z, fma(_1150, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1146)) + cbModelParam._m0[13u].w;
        float _1983 = fma(_1154, cbModelParam._m0[14u].z, fma(_1150, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1146)) + cbModelParam._m0[14u].w;
        float _1987 = fma(_1154, cbModelParam._m0[15u].z, fma(_1150, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1146)) + cbModelParam._m0[15u].w;
        float _1990 = fma(_1092, cbModelParam._m0[13u].z, fma(_1091, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1090));
        float _1993 = fma(_1092, cbModelParam._m0[14u].z, fma(_1091, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1090));
        float _1996 = fma(_1092, cbModelParam._m0[15u].z, fma(_1091, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1090));
        float _2024;
        if (_1990 > 0.0)
        {
            _2024 = abs((1.0 - _1979) / _1990);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1990 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1979 + 1.0) / _1990);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2024 = frontier_phi_17_15_ladder;
        }
        float _2226;
        if (_1993 > 0.0)
        {
            _2226 = abs((1.0 - _1983) / _1993);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1993 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1983 + 1.0) / _1993);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2226 = frontier_phi_26_22_ladder;
        }
        float _2480;
        if (_1996 > 0.0)
        {
            _2480 = abs((1.0 - _1987) / _1996);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1996 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1987 + 1.0) / _1996);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2480 = frontier_phi_38_33_ladder;
        }
        float _2482 = isnan(_2226) ? _2024 : (isnan(_2024) ? _2226 : min(_2024, _2226));
        float _2483 = isnan(_2480) ? _2482 : (isnan(_2482) ? _2480 : min(_2482, _2480));
        float _2487 = (_2483 * _1990) + _1979;
        float _2488 = (_2483 * _1993) + _1983;
        float _2489 = (_2483 * _1996) + _1987;
        float _2490 = _2483 * 9.9999997473787516355514526367188e-05;
        float _2492 = (-1.0) - _2490;
        float _2494 = _2490 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2489 > _2494) || ((_2489 < _2492) || ((_2488 > _2494) || ((_2488 < _2492) || ((_2487 < _2492) || (_2487 > _2494))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2617 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2489, cbModelParam._m0[9u].z, fma(_2488, cbModelParam._m0[9u].y, _2487 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2489, cbModelParam._m0[10u].z, fma(_2488, cbModelParam._m0[10u].y, _2487 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2489, cbModelParam._m0[11u].z, fma(_2488, cbModelParam._m0[11u].y, _2487 * cbModelParam._m0[11u].x))), _1932);
            frontier_phi_16_38_ladder = _2617.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2617.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2617.x * cbModelParam._m0[1u].y;
        }
        _2012 = frontier_phi_16_38_ladder_2;
        _2014 = frontier_phi_16_38_ladder_1;
        _2016 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2000 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1090, _1091, _1092), _1932);
        _2012 = _2000.x * cbModelParam._m0[1u].y;
        _2014 = _2000.y * cbModelParam._m0[1u].y;
        _2016 = _2000.z * cbModelParam._m0[1u].y;
    }
    float _2020 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _908);
    float _2021 = isnan(_2020) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2020 : min(cbModelParam._m0[25u].w, _2020));
    float _2110;
    float _2112;
    float _2114;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2074 = fma(_1154, cbModelParam._m0[21u].z, fma(_1150, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1146)) + cbModelParam._m0[21u].w;
        float _2078 = fma(_1154, cbModelParam._m0[22u].z, fma(_1150, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1146)) + cbModelParam._m0[22u].w;
        float _2082 = fma(_1154, cbModelParam._m0[23u].z, fma(_1150, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1146)) + cbModelParam._m0[23u].w;
        float _2085 = fma(_1092, cbModelParam._m0[21u].z, fma(_1091, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1090));
        float _2088 = fma(_1092, cbModelParam._m0[22u].z, fma(_1091, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1090));
        float _2091 = fma(_1092, cbModelParam._m0[23u].z, fma(_1091, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1090));
        float _2231;
        if (_2085 > 0.0)
        {
            _2231 = abs((1.0 - _2074) / _2085);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2085 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2074 + 1.0) / _2085);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2231 = frontier_phi_28_24_ladder;
        }
        float _2507;
        if (_2088 > 0.0)
        {
            _2507 = abs((1.0 - _2078) / _2088);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2088 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2078 + 1.0) / _2088);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2507 = frontier_phi_40_35_ladder;
        }
        float _2720;
        if (_2091 > 0.0)
        {
            _2720 = abs((1.0 - _2082) / _2091);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2091 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2082 + 1.0) / _2091);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2720 = frontier_phi_49_46_ladder;
        }
        float _2722 = isnan(_2507) ? _2231 : (isnan(_2231) ? _2507 : min(_2231, _2507));
        float _2723 = isnan(_2720) ? _2722 : (isnan(_2722) ? _2720 : min(_2722, _2720));
        float _2727 = (_2723 * _2085) + _2074;
        float _2728 = (_2723 * _2088) + _2078;
        float _2729 = (_2723 * _2091) + _2082;
        float _2730 = _2723 * 9.9999997473787516355514526367188e-05;
        float _2731 = (-1.0) - _2730;
        float _2733 = _2730 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2729 > _2733) || ((_2729 < _2731) || ((_2728 > _2733) || ((_2728 < _2731) || ((_2727 < _2731) || (_2727 > _2733))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2928 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2729, cbModelParam._m0[17u].z, fma(_2728, cbModelParam._m0[17u].y, _2727 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2729, cbModelParam._m0[18u].z, fma(_2728, cbModelParam._m0[18u].y, _2727 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2729, cbModelParam._m0[19u].z, fma(_2728, cbModelParam._m0[19u].y, _2727 * cbModelParam._m0[19u].x))), _2021);
            frontier_phi_25_49_ladder = _2928.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2928.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2928.x * cbModelParam._m0[1u].z;
        }
        _2110 = frontier_phi_25_49_ladder_2;
        _2112 = frontier_phi_25_49_ladder_1;
        _2114 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2094 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1090, _1091, _1092), _2021);
        _2110 = _2094.x * cbModelParam._m0[1u].z;
        _2112 = _2094.y * cbModelParam._m0[1u].z;
        _2114 = _2094.z * cbModelParam._m0[1u].z;
    }
    float _2127 = (((_1117 * _1066) + _1118) * _1082) * ((cbModelParam._m0[1u].w * (_2110 - _2012)) + _2012);
    float _2129 = (((_1117 * _1068) + _1118) * _1082) * ((cbModelParam._m0[1u].w * (_2112 - _2014)) + _2014);
    float _2131 = (((_1117 * _1069) + _1118) * _1082) * ((cbModelParam._m0[1u].w * (_2114 - _2016)) + _2016);
    float _2134 = fma(_2131, cbSceneParam._m0[89u].z, fma(_2129, cbSceneParam._m0[89u].y, _2127 * cbSceneParam._m0[89u].x));
    float _2137 = fma(_2131, cbSceneParam._m0[90u].z, fma(_2129, cbSceneParam._m0[90u].y, _2127 * cbSceneParam._m0[90u].x));
    float _2140 = fma(_2131, cbSceneParam._m0[91u].z, fma(_2129, cbSceneParam._m0[91u].y, _2127 * cbSceneParam._m0[91u].x));
    uvec4 _2150 = floatBitsToUint(cbInstanceData._m0[_285 + 5u]);
    uint _2152 = _2150.x * 14u;
    uint _2153 = _2152 + 13u;
    float _2160 = _1082 + (-1.0);
    float _2165 = (cbLight._m0[_2153].x * _2160) + 1.0;
    float _2166 = (cbLight._m0[_2153].y * _2160) + 1.0;
    float _2167 = (cbLight._m0[_2153].z * _2160) + 1.0;
    float _2168 = (cbLight._m0[_2153].w * _2160) + 1.0;
    uint _2169 = _2152 + 5u;
    float _2175 = isnan(1.0) ? _2166 : (isnan(_2166) ? 1.0 : min(_2166, 1.0));
    uint _2179 = _2152 + 4u;
    float _2185 = isnan(1.0) ? _2165 : (isnan(_2165) ? 1.0 : min(_2165, 1.0));
    uint _2189 = _2152 | 1u;
    float _2200 = dot(vec3(cbLight._m0[_2152].xyz), vec3(_905, _906, _907));
    float _2203 = dot(vec3(cbLight._m0[_2189].xyz), vec3(_905, _906, _907));
    float _4504 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
    float _4515 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
    float _2208 = (isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0))) * 0.3183098733425140380859375;
    float _2210 = (isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0))) * 0.3183098733425140380859375;
    float _2217 = ((cbLight._m0[_2169].x * _2175) * _2210) + ((cbLight._m0[_2179].x * _2185) * _2208);
    float _2218 = ((_2175 * cbLight._m0[_2169].y) * _2210) + ((_2185 * cbLight._m0[_2179].y) * _2208);
    float _2219 = ((_2175 * cbLight._m0[_2169].z) * _2210) + ((_2185 * cbLight._m0[_2179].z) * _2208);
    uvec4 _2223 = floatBitsToUint(cbLight._m0[_2152 + 12u]);
    bool _2225 = _2223.x == 0u;
    float _2236;
    float _2238;
    float _2240;
    if (_2225)
    {
        _2236 = _2217;
        _2238 = _2218;
        _2240 = _2219;
    }
    else
    {
        uint _2244 = _2152 + 6u;
        float _2260 = (dot(vec3(cbLight._m0[_2152 + 2u].xyz), vec3(_905, _906, _907)) * 0.5) + 0.5;
        float _2261 = _2260 * _2260;
        float _4526 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
        float _2262 = isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0));
        float _2263 = isnan(1.0) ? _2167 : (isnan(_2167) ? 1.0 : min(_2167, 1.0));
        _2236 = (((cbLight._m0[_2244].x * 0.3183098733425140380859375) * _2262) * _2263) + _2217;
        _2238 = (((cbLight._m0[_2244].y * 0.3183098733425140380859375) * _2262) * _2263) + _2218;
        _2240 = (((cbLight._m0[_2244].z * 0.3183098733425140380859375) * _2262) * _2263) + _2219;
    }
    bool _2243 = _2223.y == 0u;
    float _2281;
    float _2283;
    float _2285;
    if (_2243)
    {
        _2281 = _2236;
        _2283 = _2238;
        _2285 = _2240;
    }
    else
    {
        uint _2451 = _2152 + 7u;
        float _2467 = (dot(vec3(cbLight._m0[_2152 + 3u].xyz), vec3(_905, _906, _907)) * 0.5) + 0.5;
        float _2468 = _2467 * _2467;
        float _4542 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
        float _2469 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
        float _2470 = isnan(1.0) ? _2168 : (isnan(_2168) ? 1.0 : min(_2168, 1.0));
        _2281 = (((cbLight._m0[_2451].x * 0.3183098733425140380859375) * _2469) * _2470) + _2236;
        _2283 = (((cbLight._m0[_2451].y * 0.3183098733425140380859375) * _2469) * _2470) + _2238;
        _2285 = (((cbLight._m0[_2451].z * 0.3183098733425140380859375) * _2469) * _2470) + _2240;
    }
    uint _2288 = _2152 + 8u;
    float _2301 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2152].w)) * _908) * 0.949999988079071044921875);
    float _2302 = _2301 * _2301;
    float _2303 = cbLight._m0[_2152].x + _984;
    float _2304 = cbLight._m0[_2152].y + _985;
    float _2305 = cbLight._m0[_2152].z + _986;
    float _2309 = inversesqrt(dot(vec3(_2303, _2304, _2305), vec3(_2303, _2304, _2305)));
    float _2310 = _2309 * _2303;
    float _2311 = _2309 * _2304;
    float _2312 = _2309 * _2305;
    float _2313 = dot(vec3(_905, _906, _907), vec3(cbLight._m0[_2152].xyz));
    float _4558 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
    float _2316 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
    float _4569 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
    float _2317 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
    float _2318 = dot(vec3(_905, _906, _907), vec3(_2310, _2311, _2312));
    float _4580 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
    float _2321 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
    float _2322 = dot(vec3(cbLight._m0[_2152].xyz), vec3(_2310, _2311, _2312));
    float _4591 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
    float _2326 = _2302 * _2302;
    float _2330 = ((_2321 * _2321) * (_2326 + (-1.0))) + 1.0;
    float _2338 = exp2(log2(1.0 - (isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0)))) * 5.0);
    float _2339 = 0.959999978542327880859375 - _1063;
    float _2341 = 0.959999978542327880859375 - _1064;
    float _2342 = 0.959999978542327880859375 - _1065;
    float _2349 = 1.0 - _2302;
    float _2360 = (0.5 / (((_2317 * ((_2316 * _2349) + _2302)) + 9.9999999392252902907785028219223e-09) + (((_2317 * _2349) + _2302) * _2316))) * _2316;
    float _4602 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
    float _2362 = (isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0))) * (_2326 / ((_2330 * _2330) * 3.141590118408203125));
    uint _2373 = _2152 + 9u;
    float _2384 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2189].w)) * _908) * 0.949999988079071044921875);
    float _2385 = _2384 * _2384;
    float _2386 = cbLight._m0[_2189].x + _984;
    float _2387 = cbLight._m0[_2189].y + _985;
    float _2388 = cbLight._m0[_2189].z + _986;
    float _2392 = inversesqrt(dot(vec3(_2386, _2387, _2388), vec3(_2386, _2387, _2388)));
    float _2393 = _2392 * _2386;
    float _2394 = _2392 * _2387;
    float _2395 = _2392 * _2388;
    float _2396 = dot(vec3(_905, _906, _907), vec3(cbLight._m0[_2189].xyz));
    float _4613 = isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0));
    float _2399 = isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0));
    float _2400 = dot(vec3(_905, _906, _907), vec3(_2393, _2394, _2395));
    float _4624 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
    float _2403 = isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0));
    float _2404 = dot(vec3(cbLight._m0[_2189].xyz), vec3(_2393, _2394, _2395));
    float _4635 = isnan(0.0) ? _2404 : (isnan(_2404) ? 0.0 : max(_2404, 0.0));
    float _2408 = _2385 * _2385;
    float _2412 = ((_2403 * _2403) * (_2408 + (-1.0))) + 1.0;
    float _2419 = exp2(log2(1.0 - (isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0)))) * 5.0);
    float _2426 = 1.0 - _2385;
    float _2436 = (0.5 / (((_2317 * ((_2399 * _2426) + _2385)) + 9.9999999392252902907785028219223e-09) + (((_2317 * _2426) + _2385) * _2399))) * _2399;
    float _4646 = isnan(0.0) ? _2436 : (isnan(_2436) ? 0.0 : max(_2436, 0.0));
    float _2438 = (isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0))) * (_2408 / ((_2412 * _2412) * 3.141590118408203125));
    float _2448 = (((((_2419 * _2339) + _1066) * cbLight._m0[_2373].x) * _2438) * _2175) + (((((_2338 * _2339) + _1066) * cbLight._m0[_2288].x) * _2362) * _2185);
    float _2449 = (((((_2419 * _2341) + _1068) * cbLight._m0[_2373].y) * _2438) * _2175) + (((((_2338 * _2341) + _1068) * cbLight._m0[_2288].y) * _2362) * _2185);
    float _2450 = (((((_2419 * _2342) + _1069) * cbLight._m0[_2373].z) * _2438) * _2175) + (((((_2338 * _2342) + _1069) * cbLight._m0[_2288].z) * _2362) * _2185);
    float _2512;
    float _2514;
    float _2516;
    if (_2225)
    {
        _2512 = _2448;
        _2514 = _2449;
        _2516 = _2450;
    }
    else
    {
        uint _2518 = _2152 + 2u;
        uint _2522 = _2152 + 10u;
        float _2536 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2518].w)) * _908) * 0.949999988079071044921875);
        float _2537 = _2536 * _2536;
        float _2538 = cbLight._m0[_2518].x + _984;
        float _2539 = cbLight._m0[_2518].y + _985;
        float _2540 = cbLight._m0[_2518].z + _986;
        float _2544 = inversesqrt(dot(vec3(_2538, _2539, _2540), vec3(_2538, _2539, _2540)));
        float _2545 = _2544 * _2538;
        float _2546 = _2544 * _2539;
        float _2547 = _2544 * _2540;
        float _2548 = dot(vec3(_905, _906, _907), vec3(cbLight._m0[_2518].xyz));
        float _4657 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0));
        float _2551 = isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0));
        float _2552 = dot(vec3(_905, _906, _907), vec3(_2545, _2546, _2547));
        float _4668 = isnan(0.0) ? _2552 : (isnan(_2552) ? 0.0 : max(_2552, 0.0));
        float _2555 = isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0));
        float _2556 = dot(vec3(cbLight._m0[_2518].xyz), vec3(_2545, _2546, _2547));
        float _4679 = isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0));
        float _2560 = _2537 * _2537;
        float _2564 = ((_2555 * _2555) * (_2560 + (-1.0))) + 1.0;
        float _2571 = exp2(log2(1.0 - (isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0)))) * 5.0);
        float _2578 = 1.0 - _2537;
        float _2588 = (0.5 / (((_2317 * ((_2551 * _2578) + _2537)) + 9.9999999392252902907785028219223e-09) + (((_2317 * _2578) + _2537) * _2551))) * _2551;
        float _4690 = isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : max(_2588, 0.0));
        float _2590 = (isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0))) * (_2560 / ((_2564 * _2564) * 3.141590118408203125));
        float _2591 = isnan(1.0) ? _2167 : (isnan(_2167) ? 1.0 : min(_2167, 1.0));
        _2512 = (((((_2571 * _2339) + _1066) * cbLight._m0[_2522].x) * _2590) * _2591) + _2448;
        _2514 = (((((_2571 * _2341) + _1068) * cbLight._m0[_2522].y) * _2590) * _2591) + _2449;
        _2516 = (((((_2571 * _2342) + _1069) * cbLight._m0[_2522].z) * _2590) * _2591) + _2450;
    }
    float _2626;
    float _2628;
    float _2630;
    if (_2243)
    {
        _2626 = _2512;
        _2628 = _2514;
        _2630 = _2516;
    }
    else
    {
        uint _2637 = _2152 + 3u;
        uint _2641 = _2152 + 11u;
        float _2655 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2637].w)) * _908) * 0.949999988079071044921875);
        float _2656 = _2655 * _2655;
        float _2657 = cbLight._m0[_2637].x + _984;
        float _2658 = cbLight._m0[_2637].y + _985;
        float _2659 = cbLight._m0[_2637].z + _986;
        float _2663 = inversesqrt(dot(vec3(_2657, _2658, _2659), vec3(_2657, _2658, _2659)));
        float _2664 = _2663 * _2657;
        float _2665 = _2663 * _2658;
        float _2666 = _2663 * _2659;
        float _2667 = dot(vec3(_905, _906, _907), vec3(cbLight._m0[_2637].xyz));
        float _4706 = isnan(0.0) ? _2667 : (isnan(_2667) ? 0.0 : max(_2667, 0.0));
        float _2670 = isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0));
        float _2671 = dot(vec3(_905, _906, _907), vec3(_2664, _2665, _2666));
        float _4717 = isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : max(_2671, 0.0));
        float _2674 = isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0));
        float _2675 = dot(vec3(cbLight._m0[_2637].xyz), vec3(_2664, _2665, _2666));
        float _4728 = isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : max(_2675, 0.0));
        float _2679 = _2656 * _2656;
        float _2683 = ((_2674 * _2674) * (_2679 + (-1.0))) + 1.0;
        float _2690 = exp2(log2(1.0 - (isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0)))) * 5.0);
        float _2697 = 1.0 - _2656;
        float _2707 = (0.5 / (((_2317 * ((_2670 * _2697) + _2656)) + 9.9999999392252902907785028219223e-09) + (((_2317 * _2697) + _2656) * _2670))) * _2670;
        float _4739 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0));
        float _2709 = (isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0))) * (_2679 / ((_2683 * _2683) * 3.141590118408203125));
        float _2710 = isnan(1.0) ? _2168 : (isnan(_2168) ? 1.0 : min(_2168, 1.0));
        _2626 = (((((_2690 * _2339) + _1066) * cbLight._m0[_2641].x) * _2709) * _2710) + _2512;
        _2628 = (((((_2690 * _2341) + _1068) * cbLight._m0[_2641].y) * _2709) * _2710) + _2514;
        _2630 = (((((_2690 * _2342) + _1069) * cbLight._m0[_2641].z) * _2709) * _2710) + _2516;
    }
    float _2845;
    float _2847;
    float _2849;
    float _2851;
    float _2853;
    float _2855;
    if (_2150.y == 0u)
    {
        float _2785 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2786 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2785;
        float _2787 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2785;
        float _2788 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2785;
        uvec4 _2800 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2801 = _2800.x;
        uint _2812 = uint((float(_2800.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1005) / _2801))) + floor(float(uint(cbSceneParam._m0[85u].x * _1004) / _2801)));
        float _2822 = (log2(_2788 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2823 = isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0));
        uint _2826 = uint(isnan(14.0) ? _2823 : (isnan(_2823) ? 14.0 : min(_2823, 14.0)));
        uvec4 _2831 = texelFetch(g_lightClusterGridBuffer, int(((_2826 << 2u) + (_2812 << 6u)) >> 2u));
        uint _2832 = _2831.x;
        uint _2833 = _2800.z;
        float _2933;
        float _2935;
        float _2937;
        float _2939;
        float _2941;
        float _2943;
        if (((((1u << ((_2833 >> 4u) & 15u)) + 4294967295u) & _2832) == 0u) || ((_2833 & 240u) == 0u))
        {
            _2933 = 0.0;
            _2935 = 0.0;
            _2937 = 0.0;
            _2939 = 0.0;
            _2941 = 0.0;
            _2943 = 0.0;
        }
        else
        {
            float _2934;
            float _2936;
            float _2938;
            float _2940;
            float _2942;
            float _2944;
            float _3085 = 0.0;
            float _3086 = 0.0;
            float _3087 = 0.0;
            float _3088 = 0.0;
            float _3089 = 0.0;
            float _3090 = 0.0;
            uint _3091 = 0u;
            uint _3100;
            bool _3101;
            for (;;)
            {
                _3100 = texelFetch(g_lightClassification, int((((_2826 << 5u) + (_2812 << 9u)) + (_3091 << 2u)) >> 2u)).x;
                _3101 = _3100 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3101)
                {
                    frontier_phi_66_pred = _3085;
                    frontier_phi_66_pred_1 = _3090;
                    frontier_phi_66_pred_2 = _3089;
                    frontier_phi_66_pred_3 = _3088;
                    frontier_phi_66_pred_4 = _3087;
                    frontier_phi_66_pred_5 = _3086;
                }
                else
                {
                    float _3230;
                    float _3231;
                    float _3232;
                    float _3233;
                    float _3234;
                    float _3235;
                    uint _3236;
                    _3230 = _3085;
                    _3231 = _3086;
                    _3232 = _3087;
                    _3233 = _3088;
                    _3234 = _3089;
                    _3235 = _3090;
                    _3236 = _3100;
                    float _3157;
                    float _3158;
                    float _3159;
                    float _3160;
                    float _3161;
                    float _3162;
                    for (;;)
                    {
                        uint _3240 = uint(findLSB(_3236)) + (_3091 << 5u);
                        uint _3237 = (_3236 + 4294967295u) & _3236;
                        uint _3242 = _3240 * 48u;
                        vec4 _3256 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3242)).x, texelFetch(g_PointLightRenderingBuffer, int(_3242 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3242 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3242 + 3u)).x));
                        uint _3262 = (_3240 * 48u) + 4u;
                        vec4 _3275 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3262)).x, texelFetch(g_PointLightRenderingBuffer, int(_3262 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3262 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3262 + 3u)).x));
                        uint _3281 = (_3240 * 48u) + 8u;
                        vec3 _3292 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3281)).x, texelFetch(g_PointLightRenderingBuffer, int(_3281 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3281 + 2u)).x));
                        float _3296 = _3256.x - _2786;
                        float _3297 = _3256.y - _2787;
                        float _3298 = _3256.z - _2788;
                        float _3299 = dot(vec3(_3296, _3297, _3298), vec3(_3296, _3297, _3298));
                        float _3302 = inversesqrt(_3299);
                        float _3303 = _3302 * _3296;
                        float _3304 = _3302 * _3297;
                        float _3305 = _3302 * _3298;
                        float _3306 = dot(vec3(_1023, _1026, _1029), vec3(_3303, _3304, _3305));
                        float _3311 = 1.0 - (_3299 * _3256.w);
                        float _4765 = isnan(0.0) ? _3311 : (isnan(_3311) ? 0.0 : max(_3311, 0.0));
                        float _3312 = isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0));
                        float _3313 = sqrt(_3299) * _3275.w;
                        float _3316 = 1.39999997615814208984375 / (_3313 + 1.39999997615814208984375);
                        float _3317 = _3316 * _3316;
                        float _3320 = ((1.0 - _3317) * _3306) + _3317;
                        float _3323 = _3313 * _3313;
                        float _3327 = ((isnan(0.0) ? _3320 : (isnan(_3320) ? 0.0 : max(_3320, 0.0))) * _3312) / ((_3323 * 0.699999988079071044921875) + 1.0);
                        float _3331 = (-0.0) - _2786;
                        float _3332 = (-0.0) - _2787;
                        float _3333 = (-0.0) - _2788;
                        float _3337 = inversesqrt(dot(vec3(_3331, _3332, _3333), vec3(_3331, _3332, _3333)));
                        float _3338 = _3337 * _3331;
                        float _3339 = _3337 * _3332;
                        float _3340 = _3337 * _3333;
                        float _3348 = exp2(log2(1.0 / ((_3323 * 3.5) + 5.0)) * 0.25);
                        float _3349 = 1.0 - _1098;
                        float _3356 = sqrt(1.0 - ((1.0 - (_3349 * _3349)) * (1.0 - (_3348 * _3348))));
                        float _3357 = _3356 * _3356;
                        float _3358 = _3357 * _3357;
                        float _3359 = _3338 + _3303;
                        float _3360 = _3339 + _3304;
                        float _3361 = _3340 + _3305;
                        float _3365 = inversesqrt(dot(vec3(_3359, _3360, _3361), vec3(_3359, _3360, _3361)));
                        float _3369 = dot(vec3(_1023, _1026, _1029), vec3(_3338, _3339, _3340));
                        float _4781 = isnan(0.0) ? _3369 : (isnan(_3369) ? 0.0 : max(_3369, 0.0));
                        float _3372 = isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0));
                        float _3373 = dot(vec3(_1023, _1026, _1029), vec3(_3365 * _3359, _3365 * _3360, _3365 * _3361));
                        float _4792 = isnan(0.0) ? _3373 : (isnan(_3373) ? 0.0 : max(_3373, 0.0));
                        float _3376 = isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0));
                        float _3380 = ((_3376 * _3376) * (_3358 + (-1.0))) + 1.0;
                        float _3381 = _3316 * _3357;
                        float _3382 = _3381 * _3381;
                        float _3385 = ((1.0 - _3382) * _3306) + _3382;
                        float _4803 = isnan(0.0) ? _3385 : (isnan(_3385) ? 0.0 : max(_3385, 0.0));
                        float _3386 = isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0));
                        float _3387 = 1.0 - _3357;
                        float _3397 = (0.5 / (((_3386 * ((_3372 * _3387) + _3357)) + 9.9999999392252902907785028219223e-09) + (((_3386 * _3387) + _3357) * _3372))) * _3386;
                        float _4814 = isnan(0.0) ? _3397 : (isnan(_3397) ? 0.0 : max(_3397, 0.0));
                        float _3408 = (((_3358 * 3.1415927410125732421875) * (isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0)))) / ((_3380 * _3380) * ((_3323 * 2.1991131305694580078125) + 3.141590118408203125))) * _3312;
                        _3160 = (_3327 * _3275.x) + _3233;
                        _3161 = (_3327 * _3275.y) + _3234;
                        _3162 = (_3327 * _3275.z) + _3235;
                        _3157 = (_3408 * _3292.x) + _3230;
                        _3158 = (_3408 * _3292.y) + _3231;
                        _3159 = (_3408 * _3292.z) + _3232;
                        if (_3237 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3230 = _3157;
                            _3231 = _3158;
                            _3232 = _3159;
                            _3233 = _3160;
                            _3234 = _3161;
                            _3235 = _3162;
                            _3236 = _3237;
                        }
                    }
                    frontier_phi_66_pred = _3157;
                    frontier_phi_66_pred_1 = _3162;
                    frontier_phi_66_pred_2 = _3161;
                    frontier_phi_66_pred_3 = _3160;
                    frontier_phi_66_pred_4 = _3159;
                    frontier_phi_66_pred_5 = _3158;
                }
                _2934 = frontier_phi_66_pred;
                _2944 = frontier_phi_66_pred_1;
                _2942 = frontier_phi_66_pred_2;
                _2940 = frontier_phi_66_pred_3;
                _2938 = frontier_phi_66_pred_4;
                _2936 = frontier_phi_66_pred_5;
                uint _3092 = _3091 + 1u;
                if (_3092 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3085 = _2934;
                    _3086 = _2936;
                    _3087 = _2938;
                    _3088 = _2940;
                    _3089 = _2942;
                    _3090 = _2944;
                    _3091 = _3092;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2933 = _2934;
            _2935 = _2936;
            _2937 = _2938;
            _2939 = _2940;
            _2941 = _2942;
            _2943 = _2944;
        }
        uvec4 _2947 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2948 = _2947.z;
        uint _2950 = (_2948 >> 8u) & 15u;
        float _3053;
        float _3055;
        float _3057;
        float _3059;
        float _3061;
        float _3063;
        if (((4294967295u << _2950) & _2832) == 0u)
        {
            _3053 = _2933;
            _3055 = _2935;
            _3057 = _2937;
            _3059 = _2939;
            _3061 = _2941;
            _3063 = _2943;
        }
        else
        {
            float _3078 = inversesqrt(dot(vec3(_2786, _2787, _2788), vec3(_2786, _2787, _2788)));
            float _3079 = _3078 * _2786;
            float _3080 = _3078 * _2787;
            float _3081 = _3078 * _2788;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2950 < ((_2948 >> 12u) & 15u))
            {
                float _3054;
                float _3056;
                float _3058;
                float _3060;
                float _3062;
                float _3064;
                float _3213 = _2933;
                float _3214 = _2935;
                float _3215 = _2937;
                float _3216 = _2939;
                float _3217 = _2941;
                float _3218 = _2943;
                uint _3219 = _2950;
                uint _3228;
                bool _3229;
                for (;;)
                {
                    _3228 = texelFetch(g_lightClassification, int((((_2826 << 5u) + (_2812 << 9u)) + (_3219 << 2u)) >> 2u)).x;
                    _3229 = _3228 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3229)
                    {
                        frontier_phi_77_pred = _3218;
                        frontier_phi_77_pred_1 = _3217;
                        frontier_phi_77_pred_2 = _3216;
                        frontier_phi_77_pred_3 = _3215;
                        frontier_phi_77_pred_4 = _3214;
                        frontier_phi_77_pred_5 = _3213;
                    }
                    else
                    {
                        float _3422;
                        float _3423;
                        float _3424;
                        float _3425;
                        float _3426;
                        float _3427;
                        float _3715;
                        float _3716;
                        float _3717;
                        float _3718;
                        float _3719;
                        float _3720;
                        float _3435 = _3213;
                        float _3436 = _3214;
                        float _3437 = _3215;
                        float _3438 = _3216;
                        float _3439 = _3217;
                        float _3440 = _3218;
                        uint _3441 = _3228;
                        uint _3442;
                        vec4 _3467;
                        float _3468;
                        vec4 _3483;
                        vec3 _3495;
                        vec4 _3510;
                        vec4 _3525;
                        float _3571;
                        bool _3572;
                        for (;;)
                        {
                            uint _3452 = ((_3219 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3441));
                            _3442 = (_3441 + 4294967295u) & _3441;
                            uint _3454 = _3452 * 40u;
                            _3467 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3454)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 3u)).x));
                            _3468 = _3467.w;
                            uint _3470 = (_3452 * 40u) + 4u;
                            _3483 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3470)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3470 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3470 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3470 + 3u)).x));
                            uint _3485 = (_3452 * 40u) + 8u;
                            _3495 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3485)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3485 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3485 + 2u)).x));
                            uint _3497 = (_3452 * 40u) + 16u;
                            _3510 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3497)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3497 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3497 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3497 + 3u)).x));
                            uint _3512 = (_3452 * 40u) + 20u;
                            _3525 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3512)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3512 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3512 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3512 + 3u)).x));
                            uint _3527 = (_3452 * 40u) + 24u;
                            vec4 _3540 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3527)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3527 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3527 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3527 + 3u)).x));
                            uint _3546 = (_3452 * 40u) + 28u;
                            vec4 _3559 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3546)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3546 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3546 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3546 + 3u)).x));
                            _3571 = fma(_2788, _3559.z, fma(_2787, _3559.y, _3559.x * _2786)) + _3559.w;
                            _3572 = !((fma(_2788, _3540.z, fma(_2787, _3540.y, _3540.x * _2786)) + _3540.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3572)
                            {
                                float _3599 = _3467.x - _2786;
                                float _3600 = _3467.y - _2787;
                                float _3601 = _3467.z - _2788;
                                float _3602 = dot(vec3(_3599, _3600, _3601), vec3(_3599, _3600, _3601));
                                float _3605 = inversesqrt(_3602);
                                float _3606 = _3605 * _3599;
                                float _3607 = _3605 * _3600;
                                float _3608 = _3605 * _3601;
                                float _3612 = 1.0 - (_3602 / (_3468 * _3468));
                                float _4825 = isnan(0.0) ? _3612 : (isnan(_3612) ? 0.0 : max(_3612, 0.0));
                                float _3613 = isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0));
                                float _3617 = sqrt(_3602) * _3483.w;
                                float _3619 = 1.39999997615814208984375 / (_3617 + 1.39999997615814208984375);
                                float _3620 = _3619 * _3619;
                                float _3623 = ((1.0 - _3620) * dot(vec3(_3606, _3607, _3608), vec3(_1023, _1026, _1029))) + _3620;
                                float _3626 = _3617 * _3617;
                                float _3630 = (fma(_2788, _3510.z, fma(_2787, _3510.y, _3510.x * _2786)) + _3510.w) / _3571;
                                float _3631 = (fma(_2788, _3525.z, fma(_2787, _3525.y, _3525.x * _2786)) + _3525.w) / _3571;
                                float _3635 = 1.0 - dot(vec2(_3630, _3631), vec2(_3630, _3631));
                                float _4841 = isnan(0.0) ? _3635 : (isnan(_3635) ? 0.0 : max(_3635, 0.0));
                                float _3636 = isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0));
                                float _3637 = _3636 * (((isnan(0.0) ? _3623 : (isnan(_3623) ? 0.0 : max(_3623, 0.0))) * _3613) / ((_3626 * 0.699999988079071044921875) + 1.0));
                                float _3649 = exp2(log2(1.0 / ((_3626 * 3.5) + 5.0)) * 0.25);
                                float _3650 = 1.0 - _1098;
                                float _3657 = sqrt(1.0 - ((1.0 - (_3650 * _3650)) * (1.0 - (_3649 * _3649))));
                                float _3658 = _3657 * _3657;
                                float _3659 = _3658 * _3658;
                                float _3660 = _3606 - _3079;
                                float _3661 = _3607 - _3080;
                                float _3662 = _3608 - _3081;
                                float _3666 = inversesqrt(dot(vec3(_3660, _3661, _3662), vec3(_3660, _3661, _3662)));
                                float _3670 = dot(vec3(_1023, _1026, _1029), vec3((-0.0) - _3079, (-0.0) - _3080, (-0.0) - _3081));
                                float _4852 = isnan(0.0) ? _3670 : (isnan(_3670) ? 0.0 : max(_3670, 0.0));
                                float _3673 = isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0));
                                float _3674 = dot(vec3(_1023, _1026, _1029), vec3(_3666 * _3660, _3666 * _3661, _3666 * _3662));
                                float _4863 = isnan(0.0) ? _3674 : (isnan(_3674) ? 0.0 : max(_3674, 0.0));
                                float _3677 = isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0));
                                float _3681 = ((_3677 * _3677) * (_3659 + (-1.0))) + 1.0;
                                float _3682 = _3619 * _3658;
                                float _3683 = _3682 * _3682;
                                float _3689 = ((1.0 - _3683) * dot(vec3(_1023, _1026, _1029), vec3(_3606, _3607, _3608))) + _3683;
                                float _4874 = isnan(0.0) ? _3689 : (isnan(_3689) ? 0.0 : max(_3689, 0.0));
                                float _3690 = isnan(1.0) ? _4874 : (isnan(_4874) ? 1.0 : min(_4874, 1.0));
                                float _3691 = 1.0 - _3658;
                                float _3701 = (0.5 / (((_3690 * ((_3673 * _3691) + _3658)) + 9.9999999392252902907785028219223e-09) + (((_3690 * _3691) + _3658) * _3673))) * _3690;
                                float _4885 = isnan(0.0) ? _3701 : (isnan(_3701) ? 0.0 : max(_3701, 0.0));
                                float _3711 = (_3636 * _3613) * (((_3659 * 3.1415927410125732421875) * (isnan(1.0) ? _4885 : (isnan(_4885) ? 1.0 : min(_4885, 1.0)))) / ((_3681 * _3681) * ((_3626 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3637 * _3483.y;
                                frontier_phi_83_pred_1 = _3637 * _3483.x;
                                frontier_phi_83_pred_2 = _3711 * _3495.z;
                                frontier_phi_83_pred_3 = _3711 * _3495.y;
                                frontier_phi_83_pred_4 = _3711 * _3495.x;
                                frontier_phi_83_pred_5 = _3637 * _3483.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3719 = frontier_phi_83_pred;
                            _3718 = frontier_phi_83_pred_1;
                            _3717 = frontier_phi_83_pred_2;
                            _3716 = frontier_phi_83_pred_3;
                            _3715 = frontier_phi_83_pred_4;
                            _3720 = frontier_phi_83_pred_5;
                            _3425 = _3718 + _3438;
                            _3426 = _3719 + _3439;
                            _3427 = _3720 + _3440;
                            _3422 = _3715 + _3435;
                            _3423 = _3716 + _3436;
                            _3424 = _3717 + _3437;
                            if (_3442 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3435 = _3422;
                                _3436 = _3423;
                                _3437 = _3424;
                                _3438 = _3425;
                                _3439 = _3426;
                                _3440 = _3427;
                                _3441 = _3442;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3427;
                        frontier_phi_77_pred_1 = _3426;
                        frontier_phi_77_pred_2 = _3425;
                        frontier_phi_77_pred_3 = _3424;
                        frontier_phi_77_pred_4 = _3423;
                        frontier_phi_77_pred_5 = _3422;
                    }
                    _3064 = frontier_phi_77_pred;
                    _3062 = frontier_phi_77_pred_1;
                    _3060 = frontier_phi_77_pred_2;
                    _3058 = frontier_phi_77_pred_3;
                    _3056 = frontier_phi_77_pred_4;
                    _3054 = frontier_phi_77_pred_5;
                    uint _3220 = _3219 + 1u;
                    if (_3220 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3213 = _3054;
                        _3214 = _3056;
                        _3215 = _3058;
                        _3216 = _3060;
                        _3217 = _3062;
                        _3218 = _3064;
                        _3219 = _3220;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3058;
                frontier_phi_58_59_ladder_1 = _3064;
                frontier_phi_58_59_ladder_2 = _3062;
                frontier_phi_58_59_ladder_3 = _3060;
                frontier_phi_58_59_ladder_4 = _3056;
                frontier_phi_58_59_ladder_5 = _3054;
            }
            else
            {
                frontier_phi_58_59_ladder = _2937;
                frontier_phi_58_59_ladder_1 = _2943;
                frontier_phi_58_59_ladder_2 = _2941;
                frontier_phi_58_59_ladder_3 = _2939;
                frontier_phi_58_59_ladder_4 = _2935;
                frontier_phi_58_59_ladder_5 = _2933;
            }
            _3053 = frontier_phi_58_59_ladder_5;
            _3055 = frontier_phi_58_59_ladder_4;
            _3057 = frontier_phi_58_59_ladder;
            _3059 = frontier_phi_58_59_ladder_3;
            _3061 = frontier_phi_58_59_ladder_2;
            _3063 = frontier_phi_58_59_ladder_1;
        }
        float _3068 = isnan(1.0) ? _1082 : (isnan(_1082) ? 1.0 : min(_1082, 1.0));
        _2845 = (_3068 * _3059) + _2281;
        _2847 = (_3068 * _3061) + _2283;
        _2849 = (_3068 * _3063) + _2285;
        _2851 = ((_3053 * _1066) * _3068) + _2626;
        _2853 = ((_3055 * _1068) * _3068) + _2628;
        _2855 = ((_3057 * _1069) * _3068) + _2630;
    }
    else
    {
        _2845 = _2281;
        _2847 = _2283;
        _2849 = _2285;
        _2851 = _2626;
        _2853 = _2628;
        _2855 = _2630;
    }
    float _4901 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
    float _4912 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
    float _4923 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
    float _2872 = ((isnan(1.0) ? _4901 : (isnan(_4901) ? 1.0 : min(_4901, 1.0))) * (_2845 + ((isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0))) * _1082))) + ((_2851 + ((isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0))) * _1921)) * cbPerFrame._m0[3u].x);
    float _2873 = ((isnan(1.0) ? _4912 : (isnan(_4912) ? 1.0 : min(_4912, 1.0))) * (_2847 + ((isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0))) * _1082))) + ((_2853 + ((isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0))) * _1921)) * cbPerFrame._m0[3u].x);
    float _2874 = ((isnan(1.0) ? _4923 : (isnan(_4923) ? 1.0 : min(_4923, 1.0))) * (_2849 + ((isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0))) * _1082))) + ((_2855 + ((isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0))) * _1921)) * cbPerFrame._m0[3u].x);
    uint _2875 = _285 + 6u;
    float _2883 = _1004 / cbSceneParam._m0[86u].x;
    float _2884 = _1005 / cbSceneParam._m0[86u].y;
    vec4 _2898 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2883, _2884, (log2((isnan(cbSceneParam._m0[77u].w) ? _927 : (isnan(_927) ? cbSceneParam._m0[77u].w : min(_927, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2900 = _2898.x;
    float _2901 = _2898.y;
    float _2902 = _2898.z;
    float _2903 = _2898.w;
    float _2995;
    float _2997;
    float _2999;
    float _3001;
    if (_927 > cbSceneParam._m0[78u].w)
    {
        float _2958 = isnan(_927) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _927 : min(cbSceneParam._m0[80u].w, _927));
        float _2959 = _2958 / _927;
        float _2970 = _2959 * _977;
        float _2971 = _978 * _2959;
        float _2972 = (-0.0) - _2971;
        float _2973 = _2959 * _979;
        float _2975 = (cbSceneParam._m0[77u].w * _2972) / _2958;
        float _2976 = _2975 + cbSceneParam._m0[79u].w;
        float _2977 = cbSceneParam._m0[79u].w - _2971;
        float _2983 = sqrt(((_2970 * _2970) + (_2971 * _2971)) + (_2973 * _2973));
        float _2986 = (1.0 - (cbSceneParam._m0[77u].w / _2958)) * _2983;
        float _2991 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2993 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3170;
        if (abs((_2972 - _2975) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3170 = ((((_2976 > 0.0) ? exp2(_2991 * _2976) : (2.0 - exp2(_2993 * _2976))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2986;
        }
        else
        {
            float _3114 = 1.0 / cbSceneParam._m0[80u].x;
            float _3115 = isnan(_2977) ? _2976 : (isnan(_2976) ? _2977 : max(_2976, _2977));
            float _3116 = isnan(_2977) ? _2976 : (isnan(_2976) ? _2977 : min(_2976, _2977));
            float _3125 = isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : min(_3115, 0.0));
            float _3126 = isnan(0.0) ? _3116 : (isnan(_3116) ? 0.0 : min(_3116, 0.0));
            _3170 = ((abs(_2983 / _2972) * cbSceneParam._m0[80u].y) * ((((_3125 - _3126) * 2.0) - ((exp2(_2991 * (isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : max(_3115, 0.0)))) - exp2(_2991 * (isnan(0.0) ? _3116 : (isnan(_3116) ? 0.0 : max(_3116, 0.0))))) * _3114)) - ((exp2(_2993 * _3125) - exp2(_2993 * _3126)) * _3114))) + (_2986 * cbSceneParam._m0[80u].z);
        }
        vec4 _3172 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2883, _2884, 1.0), 0.0);
        float _3181 = exp2((_3170 * (-1.44269502162933349609375)) * (1.0 - _3172.w));
        float _3182 = log2(_3181);
        float _3198 = log2(_2903);
        _2995 = (exp2(_3198 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3182 * cbSceneParam._m0[78u].x)) * _3172.x) / cbSceneParam._m0[78u].x)) + _2900;
        _2997 = (exp2(_3198 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3182 * cbSceneParam._m0[78u].y)) * _3172.y) / cbSceneParam._m0[78u].y)) + _2901;
        _2999 = (exp2(_3198 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3182 * cbSceneParam._m0[78u].z)) * _3172.z) / cbSceneParam._m0[78u].z)) + _2902;
        _3001 = _3181 * _2903;
    }
    else
    {
        _2995 = _2900;
        _2997 = _2901;
        _2999 = _2902;
        _3001 = _2903;
    }
    bool _3208;
    vec4 _3011;
    vec4 _3033;
    float _3035;
    float _3039;
    float _3040;
    float _3041;
    float _3042;
    bool _3052;
    for (;;)
    {
        _3011 = cbMatDynParam._m0[0u];
        float _3013 = roundEven(_3011.y);
        bool _3014 = _3013 == 3.0;
        float _3015 = log2(_3001);
        float _3022 = exp2(_3015 * cbSceneParam._m0[78u].x) * _2872;
        float _3023 = exp2(_3015 * cbSceneParam._m0[78u].y) * _2873;
        float _3024 = exp2(_3015 * cbSceneParam._m0[78u].z) * _2874;
        float _3031 = _993 + (-0.5);
        _3033 = cbMtdParam._m0[1u];
        _3035 = _3033.y * _3031;
        float _3038 = (_3013 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3039 = _3038 * (_3014 ? _3022 : (_3022 + (cbSceneParam._m0[72u].w * _2995)));
        _3040 = _3038 * (_3014 ? _3023 : (_3023 + (cbSceneParam._m0[72u].w * _2997)));
        _3041 = _3038 * (_3014 ? _3024 : (_3024 + (cbSceneParam._m0[72u].w * _2999)));
        _3042 = _3031 * 0.999000012874603271484375;
        _3052 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3052)
        {
            if ((cbInstanceData._m0[_285 + 7u].x + _3042) < 0.5)
            {
                _3208 = true;
                break;
            }
        }
        uint _3149 = _1042 + uint(_3011.w);
        if ((cbInstanceData._m0[_3149].w < 1.0) && ((cbInstanceData._m0[_3149].w + _3042) < 0.5))
        {
            _3208 = true;
            break;
        }
        if ((_3035 + 1.0) < _3033.x)
        {
            _3208 = true;
            break;
        }
        _3208 = false;
        break;
    }
    float _3413;
    if (_3208)
    {
        discard_state = true;
        _3413 = 0.0;
    }
    else
    {
        _3413 = cbInstanceData._m0[_2875].w;
    }
    SV_Target.x = _3039;
    SV_Target.y = _3040;
    SV_Target.z = _3041;
    SV_Target.w = _3413;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2875].w;
    discard_exit();
}


