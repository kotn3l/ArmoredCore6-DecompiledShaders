#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1247;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _218 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _219 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _220 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _226 = inversesqrt(dot(vec3(_218, _219, _220), vec3(_218, _219, _220)));
    float _227 = _226 * _218;
    float _228 = _226 * _219;
    float _229 = _226 * _220;
    float _233 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _234 = _233 * NORMAL.x;
    float _235 = _233 * NORMAL.y;
    float _236 = _233 * NORMAL.z;
    float _240 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _241 = _240 * TANGENT.x;
    float _242 = _240 * TANGENT.y;
    float _243 = _240 * TANGENT.z;
    float _252 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _254 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _255 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3572 = isnan(0.0) ? _252 : (isnan(_252) ? 0.0 : max(_252, 0.0));
    float _3583 = isnan(0.0) ? _254 : (isnan(_254) ? 0.0 : max(_254, 0.0));
    float _3594 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    uint _265 = uint(roundEven(NORMAL.w)) * 13u;
    uint _270 = _265 + 1u;
    uint _274 = _265 + 2u;
    float _283 = sqrt(((cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x) + (cbInstanceData._m0[_265].x * cbInstanceData._m0[_265].x)) + (cbInstanceData._m0[_274].x * cbInstanceData._m0[_274].x));
    float _284 = _283 * TEXCOORD.z;
    float _285 = _283 * TEXCOORD.w;
    vec4 _298 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _284) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _285) + cbTextureTilingScale._m0[13u].w));
    vec4 _321 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _326 = _321.x * cbMtdParam._m0[9u].x;
    float _327 = _321.y * cbMtdParam._m0[9u].y;
    float _328 = _321.z * cbMtdParam._m0[9u].z;
    float _332 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _298.x) * _326;
    float _335 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _298.y) * _327;
    float _338 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _298.z) * _328;
    float _345 = ((_326 - _332) * (isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0)))) + _332;
    float _346 = ((_327 - _335) * (isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0)))) + _335;
    float _347 = ((_328 - _338) * (isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0)))) + _338;
    vec4 _366 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _284) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _285) + cbTextureTilingScale._m0[14u].w));
    vec4 _386 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _284) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _285) + cbTextureTilingScale._m0[20u].w));
    vec4 _412 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _416 = _412.z;
    float _420 = (_412.x * 2.0) + (-1.0);
    float _421 = (_412.y * 2.0) + (-1.0);
    float _422 = dot(vec2(_420, _421), vec2(_420, _421));
    float _3605 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _427 = sqrt(1.0 - (isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0))));
    float _432 = _420 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_386.x * 2.0) + (-1.0)));
    float _433 = _421 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_386.y * 2.0) + (-1.0)));
    float _436 = fma(_427, _234, fma(_433, _241, _432 * _227));
    float _439 = fma(_427, _235, fma(_433, _242, _432 * _228));
    float _442 = fma(_427, _236, fma(_433, _243, _432 * _229));
    float _446 = inversesqrt(dot(vec3(_436, _439, _442), vec3(_436, _439, _442)));
    vec4 _482 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _284) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _285) + cbTextureTilingScale._m0[11u].w));
    float _484 = _482.x;
    float _485 = 1.0 - _484;
    float _494 = (cbMtdParam._m0[19u].x + dot(vec4(_446 * _436, _446 * _439, _446 * _442, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_484 - _485) * cbMtdParam._m0[24u].z) + _485) * cbMtdParam._m0[21u].z);
    float _3616 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
    float _495 = isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0));
    float _497 = (-0.0) - cbMtdParam._m0[24u].x;
    float _499 = isnan(0.0) ? _497 : (isnan(_497) ? 0.0 : max(_497, 0.0));
    float _500 = isnan(1.0) ? _499 : (isnan(_499) ? 1.0 : min(_499, 1.0));
    float _507 = _495 - ((_495 * TEXCOORD_8.x) * _500);
    float _508 = _495 - ((_495 * TEXCOORD_8.y) * _500);
    float _509 = _495 - ((_495 * TEXCOORD_8.z) * _500);
    float _516 = (_507 * ((_366.x * cbMtdParam._m0[18u].x) - _345)) + _345;
    float _517 = (_508 * ((_366.y * cbMtdParam._m0[18u].y) - _346)) + _346;
    float _518 = (_509 * ((_366.z * cbMtdParam._m0[18u].z) - _347)) + _347;
    vec4 _530 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _284) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _285) + cbTextureTilingScale._m0[19u].w));
    float _532 = _530.x;
    float _533 = 1.0 - _532;
    float _561 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_532 - _533) * cbMtdParam._m0[24u].w) + _533) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3637 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _562 = isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0));
    float _570 = ((((cbMtdParam._m0[10u].x - _516) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _562) + _516;
    float _571 = ((((cbMtdParam._m0[10u].y - _517) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _562) + _517;
    float _572 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _518)) * _562) + _518;
    vec4 _585 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _587 = _585.x;
    float _589 = _587 - (_587 * _507);
    float _591 = _589 - (_589 * _562);
    float _596 = (((_386.z - _416) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _416;
    vec4 _610 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _284) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _285) + cbTextureTilingScale._m0[15u].w));
    float _617 = (_610.x * 2.0) + (-1.0);
    float _618 = (_610.y * 2.0) + (-1.0);
    float _619 = dot(vec2(_617, _618), vec2(_617, _618));
    float _3648 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _627 = ((_610.z - _596) * _507) + _596;
    float _630 = ((cbMtdParam._m0[23u].y - _627) * _562) + _627;
    vec4 _649 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _284) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _285) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _655 = (_649.x * 2.0) + (-1.0);
    float _656 = (_649.y * 2.0) + (-1.0);
    float _657 = dot(vec2(_655, _656), vec2(_655, _656));
    float _3659 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _672 = ((sqrt(1.0 - (isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0)))) - _427) * _509) + _427;
    float _675 = (((_617 - _432) * _507) + _432) + (cbMtdParam._m0[21u].x * _432);
    float _676 = (((_618 - _433) * _508) + _433) + (cbMtdParam._m0[21u].x * _433);
    float _687 = (((_655 - _675) + (_675 * cbMtdParam._m0[22u].z)) * _562) + _675;
    float _688 = (((_656 - _676) + (_676 * cbMtdParam._m0[22u].z)) * _562) + _676;
    float _689 = (_562 * (sqrt(1.0 - (isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0)))) - _672)) + _672;
    float _691 = cbMtdParam._m0[22u].x + _412.w;
    float _694 = fma(_689, _234, fma(_688, _241, _687 * _227));
    float _697 = fma(_689, _235, fma(_688, _242, _687 * _228));
    float _700 = fma(_689, _236, fma(_688, _243, _687 * _229));
    float _704 = inversesqrt(dot(vec3(_694, _697, _700), vec3(_694, _697, _700)));
    float _705 = _704 * _694;
    float _706 = _704 * _697;
    float _707 = _704 * _700;
    float _3670 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _708 = isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0));
    float _3681 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _3692 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
    float _3703 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _3714 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
    float _3725 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _713 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
    float _727 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _767 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _777 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _767);
    float _778 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _767);
    float _779 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _767);
    float _783 = inversesqrt(dot(vec3(_777, _778, _779), vec3(_777, _778, _779)));
    float _784 = _777 * _783;
    float _785 = _778 * _783;
    float _786 = _779 * _783;
    float _792 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _793 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _814 = fma(_707, cbSceneParam._m0[5u].z, fma(_706, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _705));
    float _817 = fma(_707, cbSceneParam._m0[6u].z, fma(_706, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _705));
    float _820 = fma(_707, cbSceneParam._m0[7u].z, fma(_706, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _705));
    uint _834 = (_265 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _840 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0)))) * cbInstanceData._m0[_834].x;
    float _841 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0)))) * cbInstanceData._m0[_834].y;
    float _842 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0)))) * cbInstanceData._m0[_834].z;
    float _3736 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
    float _843 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
    float _3747 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
    float _844 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
    float _3758 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
    float _845 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
    float _846 = 1.0 - _713;
    float _847 = _843 * _846;
    float _848 = _844 * _846;
    float _849 = _845 * _846;
    float _854 = (_843 + (-0.039999999105930328369140625)) * _713;
    float _855 = (_844 + (-0.039999999105930328369140625)) * _713;
    float _856 = (_845 + (-0.039999999105930328369140625)) * _713;
    float _857 = _854 + 0.039999999105930328369140625;
    float _859 = _855 + 0.039999999105930328369140625;
    float _860 = _856 + 0.039999999105930328369140625;
    vec4 _869 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _792, cbSceneParam._m0[86u].y * _793));
    float _873 = ((isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0))) * TEXCOORD_5.w) * _869.x;
    float _874 = dot(vec3(_705, _706, _707), vec3(_784, _785, _786));
    float _877 = _874 * 2.0;
    float _881 = (_877 * _705) - _784;
    float _882 = (_877 * _706) - _785;
    float _883 = (_877 * _707) - _786;
    float _887 = abs(dot(vec3(_784, _785, _786), vec3(_705, _706, _707)));
    float _3769 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
    float _889 = sqrt(_708);
    float _902 = exp2((_889 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_889 * 3.0));
    float _908 = (1.0 - _902) * ((_889 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _909 = _902 * _889;
    float _937 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _941 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _945 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1246;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _971 = fma(_945, cbModelParam._m0[26u].z, fma(_941, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _937));
        float _975 = fma(_945, cbModelParam._m0[27u].z, fma(_941, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _937));
        float _979 = fma(_945, cbModelParam._m0[28u].z, fma(_941, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _937));
        float _1004 = _937 + _705;
        float _1005 = _941 + _706;
        float _1006 = _945 + _707;
        float _1016 = fma(_1006, cbModelParam._m0[26u].z, fma(_1005, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1004)) - _971;
        float _1017 = fma(_1006, cbModelParam._m0[27u].z, fma(_1005, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1004)) - _975;
        float _1018 = fma(_1006, cbModelParam._m0[28u].z, fma(_1005, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1004)) - _979;
        float _1022 = inversesqrt(dot(vec3(_1016, _1017, _1018), vec3(_1016, _1017, _1018)));
        float _1035 = ((_1022 * _1016) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_971 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1036 = ((_1022 * _1017) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_975 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1037 = ((_1022 * _1018) / cbModelParam._m0[34u].z) + ((((((_979 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1040 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1035, _1036, _1037), 0.0);
        vec4 _1047 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1035, _1036, _1037), 0.0);
        vec4 _1054 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1035, _1036, _1037), 0.0);
        vec4 _1061 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1035, _1036, _1037), 0.0);
        float _1074 = exp2((_1040.w + (-0.5)) * 20.0) * 2.0;
        float _1075 = _1074 * (_1040.x + (-0.5));
        float _1076 = _1074 * (_1040.y + (-0.5));
        float _1077 = _1074 * (_1040.z + (-0.5));
        float _1084 = exp2((_1047.w + (-0.5)) * 20.0) * 2.0;
        float _1085 = _1084 * (_1047.x + (-0.5));
        float _1086 = _1084 * (_1047.y + (-0.5));
        float _1087 = _1084 * (_1047.z + (-0.5));
        float _1094 = exp2((_1054.w + (-0.5)) * 20.0) * 2.0;
        float _1095 = _1094 * (_1054.x + (-0.5));
        float _1096 = _1094 * (_1054.y + (-0.5));
        float _1097 = _1094 * (_1054.z + (-0.5));
        float _1104 = exp2((_1061.w + (-0.5)) * 20.0) * 2.0;
        float _1105 = _1104 * (_1061.x + (-0.5));
        float _1106 = _1104 * (_1061.y + (-0.5));
        float _1107 = _1104 * (_1061.z + (-0.5));
        float _1108 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1109 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1110 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1111 = _1075 * 0.5;
        float _1112 = _1085 * 0.5;
        float _1113 = _1095 * 0.5;
        float _1114 = dot(vec3(_1111, _1112, _1113), vec3(_1111, _1112, _1113));
        float _1119 = (_1114 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1114);
        float _1128 = (dot(vec3(_705, _706, _707), vec3(_1119 * _1111, _1119 * _1112, _1119 * _1113)) + 1.0) * 0.5;
        float _3795 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1138 = sqrt(((_1112 * _1112) + (_1111 * _1111)) + (_1113 * _1113)) / (_1108 + 9.9999997473787516355514526367188e-06);
        float _3806 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1139 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
        float _1140 = _1139 * 2.0;
        float _1144 = (1.0 - _1139) / (_1139 + 1.0);
        float _3817 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1145 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
        float _1154 = ((((1.0 - _1145) * (_1140 + 2.0)) * exp2(log2(isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0))) * (_1140 + 1.0))) + _1145) * _1108;
        float _1155 = _1076 * 0.5;
        float _1156 = _1086 * 0.5;
        float _1157 = _1096 * 0.5;
        float _1158 = dot(vec3(_1155, _1156, _1157), vec3(_1155, _1156, _1157));
        float _1163 = (_1158 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1158);
        float _1171 = (dot(vec3(_705, _706, _707), vec3(_1163 * _1155, _1163 * _1156, _1163 * _1157)) + 1.0) * 0.5;
        float _3828 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1180 = sqrt(((_1156 * _1156) + (_1155 * _1155)) + (_1157 * _1157)) / (_1109 + 9.9999997473787516355514526367188e-06);
        float _3839 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1181 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
        float _1182 = _1181 * 2.0;
        float _1186 = (1.0 - _1181) / (_1181 + 1.0);
        float _3850 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1187 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
        float _1196 = ((((1.0 - _1187) * (_1182 + 2.0)) * exp2(log2(isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0))) * (_1182 + 1.0))) + _1187) * _1109;
        float _1197 = _1077 * 0.5;
        float _1198 = _1087 * 0.5;
        float _1199 = _1097 * 0.5;
        float _1200 = dot(vec3(_1197, _1198, _1199), vec3(_1197, _1198, _1199));
        float _1205 = (_1200 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1200);
        float _1213 = (dot(vec3(_705, _706, _707), vec3(_1205 * _1197, _1205 * _1198, _1205 * _1199)) + 1.0) * 0.5;
        float _3861 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1222 = sqrt(((_1198 * _1198) + (_1197 * _1197)) + (_1199 * _1199)) / (_1110 + 9.9999997473787516355514526367188e-06);
        float _3872 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1223 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
        float _1224 = _1223 * 2.0;
        float _1228 = (1.0 - _1223) / (_1223 + 1.0);
        float _3883 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1229 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
        float _1238 = ((((1.0 - _1229) * (_1224 + 2.0)) * exp2(log2(isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0))) * (_1224 + 1.0))) + _1229) * _1110;
        _1246 = _1077;
        _1248 = _1076;
        _1249 = _1075;
        _1250 = _1087;
        _1251 = _1086;
        _1252 = _1085;
        _1253 = _1097;
        _1254 = _1096;
        _1255 = _1095;
        _1256 = _1110;
        _1257 = _1109;
        _1258 = _1108;
        _1259 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0)));
        _1260 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0)));
        _1261 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0)));
    }
    else
    {
        _1246 = _1247;
        _1248 = _1247;
        _1249 = _1247;
        _1250 = _1247;
        _1251 = _1247;
        _1252 = _1247;
        _1253 = _1247;
        _1254 = _1247;
        _1255 = _1247;
        _1256 = _1247;
        _1257 = _1247;
        _1258 = _1247;
        _1259 = 0.0;
        _1260 = 0.0;
        _1261 = 0.0;
    }
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1286 = fma(_945, cbModelParam._m0[30u].z, fma(_941, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _937));
        float _1290 = fma(_945, cbModelParam._m0[31u].z, fma(_941, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _937));
        float _1294 = fma(_945, cbModelParam._m0[32u].z, fma(_941, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _937));
        float _1317 = _937 + _705;
        float _1318 = _941 + _706;
        float _1319 = _945 + _707;
        float _1329 = fma(_1319, cbModelParam._m0[30u].z, fma(_1318, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1317)) - _1286;
        float _1330 = fma(_1319, cbModelParam._m0[31u].z, fma(_1318, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1317)) - _1290;
        float _1331 = fma(_1319, cbModelParam._m0[32u].z, fma(_1318, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1317)) - _1294;
        float _1335 = inversesqrt(dot(vec3(_1329, _1330, _1331), vec3(_1329, _1330, _1331)));
        float _1348 = ((_1335 * _1329) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1286 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1349 = ((_1335 * _1330) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1290 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1350 = ((_1335 * _1331) / cbModelParam._m0[35u].z) + ((((((_1294 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1352 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1348, _1349, _1350), 0.0);
        vec4 _1359 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1348, _1349, _1350), 0.0);
        vec4 _1366 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1348, _1349, _1350), 0.0);
        vec4 _1373 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1348, _1349, _1350), 0.0);
        float _1385 = exp2((_1352.w + (-0.5)) * 20.0) * 2.0;
        float _1386 = _1385 * (_1352.x + (-0.5));
        float _1387 = _1385 * (_1352.y + (-0.5));
        float _1388 = _1385 * (_1352.z + (-0.5));
        float _1395 = exp2((_1359.w + (-0.5)) * 20.0) * 2.0;
        float _1396 = _1395 * (_1359.x + (-0.5));
        float _1397 = _1395 * (_1359.y + (-0.5));
        float _1398 = _1395 * (_1359.z + (-0.5));
        float _1405 = exp2((_1366.w + (-0.5)) * 20.0) * 2.0;
        float _1406 = _1405 * (_1366.x + (-0.5));
        float _1407 = _1405 * (_1366.y + (-0.5));
        float _1408 = _1405 * (_1366.z + (-0.5));
        float _1415 = exp2((_1373.w + (-0.5)) * 20.0) * 2.0;
        float _1416 = _1415 * (_1373.x + (-0.5));
        float _1417 = _1415 * (_1373.y + (-0.5));
        float _1418 = _1415 * (_1373.z + (-0.5));
        float _1419 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1420 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1421 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1422 = _1386 * 0.5;
        float _1423 = _1396 * 0.5;
        float _1424 = _1406 * 0.5;
        float _1425 = dot(vec3(_1422, _1423, _1424), vec3(_1422, _1423, _1424));
        float _1430 = (_1425 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1425);
        float _1438 = (dot(vec3(_705, _706, _707), vec3(_1430 * _1422, _1430 * _1423, _1430 * _1424)) + 1.0) * 0.5;
        float _3924 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1447 = sqrt(((_1423 * _1423) + (_1422 * _1422)) + (_1424 * _1424)) / (_1419 + 9.9999997473787516355514526367188e-06);
        float _3935 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1448 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
        float _1449 = _1448 * 2.0;
        float _1453 = (1.0 - _1448) / (_1448 + 1.0);
        float _3946 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1454 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
        float _1463 = ((((1.0 - _1454) * (_1449 + 2.0)) * exp2(log2(isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0))) * (_1449 + 1.0))) + _1454) * _1419;
        float _1464 = _1387 * 0.5;
        float _1465 = _1397 * 0.5;
        float _1466 = _1407 * 0.5;
        float _1467 = dot(vec3(_1464, _1465, _1466), vec3(_1464, _1465, _1466));
        float _1472 = (_1467 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1467);
        float _1480 = (dot(vec3(_705, _706, _707), vec3(_1472 * _1464, _1472 * _1465, _1472 * _1466)) + 1.0) * 0.5;
        float _3957 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1489 = sqrt(((_1465 * _1465) + (_1464 * _1464)) + (_1466 * _1466)) / (_1420 + 9.9999997473787516355514526367188e-06);
        float _3968 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1490 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
        float _1491 = _1490 * 2.0;
        float _1495 = (1.0 - _1490) / (_1490 + 1.0);
        float _3979 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1496 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
        float _1505 = ((((1.0 - _1496) * (_1491 + 2.0)) * exp2(log2(isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0))) * (_1491 + 1.0))) + _1496) * _1420;
        float _1506 = _1388 * 0.5;
        float _1507 = _1398 * 0.5;
        float _1508 = _1408 * 0.5;
        float _1509 = dot(vec3(_1506, _1507, _1508), vec3(_1506, _1507, _1508));
        float _1514 = (_1509 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1509);
        float _1522 = (dot(vec3(_705, _706, _707), vec3(_1514 * _1506, _1514 * _1507, _1514 * _1508)) + 1.0) * 0.5;
        float _3990 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1531 = sqrt(((_1507 * _1507) + (_1506 * _1506)) + (_1508 * _1508)) / (_1421 + 9.9999997473787516355514526367188e-06);
        float _4001 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1532 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
        float _1533 = _1532 * 2.0;
        float _1537 = (1.0 - _1532) / (_1532 + 1.0);
        float _4012 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1538 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
        float _1547 = ((((1.0 - _1538) * (_1533 + 2.0)) * exp2(log2(isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0))) * (_1533 + 1.0))) + _1538) * _1421;
        _1555 = _1388;
        _1556 = _1387;
        _1557 = _1386;
        _1558 = _1398;
        _1559 = _1397;
        _1560 = _1396;
        _1561 = _1408;
        _1562 = _1407;
        _1563 = _1406;
        _1564 = _1421;
        _1565 = _1420;
        _1566 = _1419;
        _1567 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0)));
        _1568 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0)));
        _1569 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0)));
    }
    else
    {
        _1555 = _1247;
        _1556 = _1247;
        _1557 = _1247;
        _1558 = _1247;
        _1559 = _1247;
        _1560 = _1247;
        _1561 = _1247;
        _1562 = _1247;
        _1563 = _1247;
        _1564 = _1247;
        _1565 = _1247;
        _1566 = _1247;
        _1567 = 0.0;
        _1568 = 0.0;
        _1569 = 0.0;
    }
    float _1579 = (cbModelParam._m0[1u].x * (_1567 - _1259)) + _1259;
    float _1580 = (cbModelParam._m0[1u].x * (_1568 - _1260)) + _1260;
    float _1581 = (cbModelParam._m0[1u].x * (_1569 - _1261)) + _1261;
    float _1602 = fma(_1581, cbSceneParam._m0[89u].z, fma(_1580, cbSceneParam._m0[89u].y, _1579 * cbSceneParam._m0[89u].x));
    float _1605 = fma(_1581, cbSceneParam._m0[90u].z, fma(_1580, cbSceneParam._m0[90u].y, _1579 * cbSceneParam._m0[90u].x));
    float _1608 = fma(_1581, cbSceneParam._m0[91u].z, fma(_1580, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1579));
    float _1623 = _881 * 0.5;
    float _1624 = _882 * 0.5;
    float _1625 = _883 * 0.5;
    float _1626 = dot(vec4(_1623, _1624, _1625, 1.0), vec4(_1557, _1560, _1563, _1566));
    float _1629 = dot(vec4(_1623, _1624, _1625, 1.0), vec4(_1556, _1559, _1562, _1565));
    float _1632 = dot(vec4(_1623, _1624, _1625, 1.0), vec4(_1555, _1558, _1561, _1564));
    float _1666;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1639 = dot(vec4(_1623, _1624, _1625, 1.0), vec4(_1246, _1250, _1253, _1256));
        float _1643 = dot(vec4(_1623, _1624, _1625, 1.0), vec4(_1248, _1251, _1254, _1257));
        float _1647 = dot(vec4(_1623, _1624, _1625, 1.0), vec4(_1249, _1252, _1255, _1258));
        float _1654 = dot(vec4(cbModelParam._m0[39u]), vec4(_1623, _1624, _1625, 1.0));
        _1666 = dot(vec3(isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0)), isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0)), isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1654) ? 0.0 : (isnan(0.0) ? _1654 : max(0.0, _1654))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1666 = 1.0;
    }
    float _1677;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1668 = dot(vec4(cbModelParam._m0[40u]), vec4(_1623, _1624, _1625, 1.0));
        _1677 = dot(vec3(isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0)), isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0)), isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1668) ? 0.0 : (isnan(0.0) ? _1668 : max(0.0, _1668))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1677 = 1.0;
    }
    float _1681 = (_1677 * cbModelParam._m0[1u].x) + (_1666 * (1.0 - cbModelParam._m0[1u].x));
    float _1691 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _708);
    float _1692 = isnan(_1691) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1691 : min(cbModelParam._m0[25u].z, _1691));
    float _1772;
    float _1774;
    float _1776;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1739 = fma(_945, cbModelParam._m0[13u].z, fma(_941, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _937)) + cbModelParam._m0[13u].w;
        float _1743 = fma(_945, cbModelParam._m0[14u].z, fma(_941, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _937)) + cbModelParam._m0[14u].w;
        float _1747 = fma(_945, cbModelParam._m0[15u].z, fma(_941, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _937)) + cbModelParam._m0[15u].w;
        float _1750 = fma(_883, cbModelParam._m0[13u].z, fma(_882, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _881));
        float _1753 = fma(_883, cbModelParam._m0[14u].z, fma(_882, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _881));
        float _1756 = fma(_883, cbModelParam._m0[15u].z, fma(_882, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _881));
        float _1784;
        if (_1750 > 0.0)
        {
            _1784 = abs((1.0 - _1739) / _1750);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1750 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1739 + 1.0) / _1750);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1784 = frontier_phi_14_12_ladder;
        }
        float _1987;
        if (_1753 > 0.0)
        {
            _1987 = abs((1.0 - _1743) / _1753);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1753 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1743 + 1.0) / _1753);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1987 = frontier_phi_23_19_ladder;
        }
        float _2241;
        if (_1756 > 0.0)
        {
            _2241 = abs((1.0 - _1747) / _1756);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1756 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1747 + 1.0) / _1756);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2241 = frontier_phi_35_30_ladder;
        }
        float _2243 = isnan(_1987) ? _1784 : (isnan(_1784) ? _1987 : min(_1784, _1987));
        float _2244 = isnan(_2241) ? _2243 : (isnan(_2243) ? _2241 : min(_2243, _2241));
        float _2248 = (_2244 * _1750) + _1739;
        float _2249 = (_2244 * _1753) + _1743;
        float _2250 = (_2244 * _1756) + _1747;
        float _2251 = _2244 * 9.9999997473787516355514526367188e-05;
        float _2253 = (-1.0) - _2251;
        float _2255 = _2251 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2250 > _2255) || ((_2250 < _2253) || ((_2249 > _2255) || ((_2249 < _2253) || ((_2248 < _2253) || (_2248 > _2255))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2378 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2250, cbModelParam._m0[9u].z, fma(_2249, cbModelParam._m0[9u].y, _2248 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2250, cbModelParam._m0[10u].z, fma(_2249, cbModelParam._m0[10u].y, _2248 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2250, cbModelParam._m0[11u].z, fma(_2249, cbModelParam._m0[11u].y, _2248 * cbModelParam._m0[11u].x))), _1692);
            frontier_phi_13_35_ladder = _2378.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2378.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2378.x * cbModelParam._m0[1u].y;
        }
        _1772 = frontier_phi_13_35_ladder_2;
        _1774 = frontier_phi_13_35_ladder_1;
        _1776 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1760 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_881, _882, _883), _1692);
        _1772 = _1760.x * cbModelParam._m0[1u].y;
        _1774 = _1760.y * cbModelParam._m0[1u].y;
        _1776 = _1760.z * cbModelParam._m0[1u].y;
    }
    float _1780 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _708);
    float _1781 = isnan(_1780) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1780 : min(cbModelParam._m0[25u].w, _1780));
    float _1870;
    float _1872;
    float _1874;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1834 = fma(_945, cbModelParam._m0[21u].z, fma(_941, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _937)) + cbModelParam._m0[21u].w;
        float _1838 = fma(_945, cbModelParam._m0[22u].z, fma(_941, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _937)) + cbModelParam._m0[22u].w;
        float _1842 = fma(_945, cbModelParam._m0[23u].z, fma(_941, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _937)) + cbModelParam._m0[23u].w;
        float _1845 = fma(_883, cbModelParam._m0[21u].z, fma(_882, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _881));
        float _1848 = fma(_883, cbModelParam._m0[22u].z, fma(_882, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _881));
        float _1851 = fma(_883, cbModelParam._m0[23u].z, fma(_882, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _881));
        float _1992;
        if (_1845 > 0.0)
        {
            _1992 = abs((1.0 - _1834) / _1845);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1845 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1834 + 1.0) / _1845);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1992 = frontier_phi_25_21_ladder;
        }
        float _2268;
        if (_1848 > 0.0)
        {
            _2268 = abs((1.0 - _1838) / _1848);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1848 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1838 + 1.0) / _1848);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2268 = frontier_phi_37_32_ladder;
        }
        float _2481;
        if (_1851 > 0.0)
        {
            _2481 = abs((1.0 - _1842) / _1851);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1851 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1842 + 1.0) / _1851);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2481 = frontier_phi_46_43_ladder;
        }
        float _2483 = isnan(_2268) ? _1992 : (isnan(_1992) ? _2268 : min(_1992, _2268));
        float _2484 = isnan(_2481) ? _2483 : (isnan(_2483) ? _2481 : min(_2483, _2481));
        float _2488 = (_2484 * _1845) + _1834;
        float _2489 = (_2484 * _1848) + _1838;
        float _2490 = (_2484 * _1851) + _1842;
        float _2491 = _2484 * 9.9999997473787516355514526367188e-05;
        float _2492 = (-1.0) - _2491;
        float _2494 = _2491 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2490 > _2494) || ((_2490 < _2492) || ((_2489 > _2494) || ((_2489 < _2492) || ((_2488 < _2492) || (_2488 > _2494))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2689 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2490, cbModelParam._m0[17u].z, fma(_2489, cbModelParam._m0[17u].y, _2488 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2490, cbModelParam._m0[18u].z, fma(_2489, cbModelParam._m0[18u].y, _2488 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2490, cbModelParam._m0[19u].z, fma(_2489, cbModelParam._m0[19u].y, _2488 * cbModelParam._m0[19u].x))), _1781);
            frontier_phi_22_46_ladder = _2689.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2689.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2689.x * cbModelParam._m0[1u].z;
        }
        _1870 = frontier_phi_22_46_ladder_2;
        _1872 = frontier_phi_22_46_ladder_1;
        _1874 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1854 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_881, _882, _883), _1781);
        _1870 = _1854.x * cbModelParam._m0[1u].z;
        _1872 = _1854.y * cbModelParam._m0[1u].z;
        _1874 = _1854.z * cbModelParam._m0[1u].z;
    }
    float _1887 = (((_908 * _857) + _909) * _873) * ((cbModelParam._m0[1u].w * (_1870 - _1772)) + _1772);
    float _1889 = (((_908 * _859) + _909) * _873) * ((cbModelParam._m0[1u].w * (_1872 - _1774)) + _1774);
    float _1891 = (((_908 * _860) + _909) * _873) * ((cbModelParam._m0[1u].w * (_1874 - _1776)) + _1776);
    float _1894 = fma(_1891, cbSceneParam._m0[89u].z, fma(_1889, cbSceneParam._m0[89u].y, _1887 * cbSceneParam._m0[89u].x));
    float _1897 = fma(_1891, cbSceneParam._m0[90u].z, fma(_1889, cbSceneParam._m0[90u].y, _1887 * cbSceneParam._m0[90u].x));
    float _1900 = fma(_1891, cbSceneParam._m0[91u].z, fma(_1889, cbSceneParam._m0[91u].y, _1887 * cbSceneParam._m0[91u].x));
    uvec4 _1910 = floatBitsToUint(cbInstanceData._m0[_265 + 5u]);
    uint _1912 = _1910.x * 14u;
    uint _1913 = _1912 + 13u;
    float _1920 = _873 + (-1.0);
    float _1925 = (cbLight._m0[_1913].x * _1920) + 1.0;
    float _1926 = (cbLight._m0[_1913].y * _1920) + 1.0;
    float _1927 = (cbLight._m0[_1913].z * _1920) + 1.0;
    float _1928 = (cbLight._m0[_1913].w * _1920) + 1.0;
    uint _1929 = _1912 + 5u;
    float _1935 = isnan(1.0) ? _1926 : (isnan(_1926) ? 1.0 : min(_1926, 1.0));
    uint _1939 = _1912 + 4u;
    float _1946 = isnan(1.0) ? _1925 : (isnan(_1925) ? 1.0 : min(_1925, 1.0));
    uint _1950 = _1912 | 1u;
    float _1961 = dot(vec3(cbLight._m0[_1912].xyz), vec3(_705, _706, _707));
    float _1964 = dot(vec3(cbLight._m0[_1950].xyz), vec3(_705, _706, _707));
    float _4148 = isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0));
    float _4159 = isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0));
    float _1969 = (isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0))) * 0.3183098733425140380859375;
    float _1971 = (isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0))) * 0.3183098733425140380859375;
    float _1978 = ((cbLight._m0[_1929].x * _1935) * _1971) + ((cbLight._m0[_1939].x * _1946) * _1969);
    float _1979 = ((_1935 * cbLight._m0[_1929].y) * _1971) + ((_1946 * cbLight._m0[_1939].y) * _1969);
    float _1980 = ((_1935 * cbLight._m0[_1929].z) * _1971) + ((_1946 * cbLight._m0[_1939].z) * _1969);
    uvec4 _1984 = floatBitsToUint(cbLight._m0[_1912 + 12u]);
    bool _1986 = _1984.x == 0u;
    float _1997;
    float _1999;
    float _2001;
    if (_1986)
    {
        _1997 = _1978;
        _1999 = _1979;
        _2001 = _1980;
    }
    else
    {
        uint _2005 = _1912 + 6u;
        float _2021 = (dot(vec3(cbLight._m0[_1912 + 2u].xyz), vec3(_705, _706, _707)) * 0.5) + 0.5;
        float _2022 = _2021 * _2021;
        float _4170 = isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0));
        float _2023 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
        float _2024 = isnan(1.0) ? _1927 : (isnan(_1927) ? 1.0 : min(_1927, 1.0));
        _1997 = (((cbLight._m0[_2005].x * 0.3183098733425140380859375) * _2023) * _2024) + _1978;
        _1999 = (((cbLight._m0[_2005].y * 0.3183098733425140380859375) * _2023) * _2024) + _1979;
        _2001 = (((cbLight._m0[_2005].z * 0.3183098733425140380859375) * _2023) * _2024) + _1980;
    }
    bool _2004 = _1984.y == 0u;
    float _2042;
    float _2044;
    float _2046;
    if (_2004)
    {
        _2042 = _1997;
        _2044 = _1999;
        _2046 = _2001;
    }
    else
    {
        uint _2212 = _1912 + 7u;
        float _2228 = (dot(vec3(cbLight._m0[_1912 + 3u].xyz), vec3(_705, _706, _707)) * 0.5) + 0.5;
        float _2229 = _2228 * _2228;
        float _4186 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
        float _2230 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
        float _2231 = isnan(1.0) ? _1928 : (isnan(_1928) ? 1.0 : min(_1928, 1.0));
        _2042 = (((cbLight._m0[_2212].x * 0.3183098733425140380859375) * _2230) * _2231) + _1997;
        _2044 = (((cbLight._m0[_2212].y * 0.3183098733425140380859375) * _2230) * _2231) + _1999;
        _2046 = (((cbLight._m0[_2212].z * 0.3183098733425140380859375) * _2230) * _2231) + _2001;
    }
    uint _2049 = _1912 + 8u;
    float _2062 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1912].w)) * _708) * 0.949999988079071044921875);
    float _2063 = _2062 * _2062;
    float _2064 = cbLight._m0[_1912].x + _784;
    float _2065 = cbLight._m0[_1912].y + _785;
    float _2066 = cbLight._m0[_1912].z + _786;
    float _2070 = inversesqrt(dot(vec3(_2064, _2065, _2066), vec3(_2064, _2065, _2066)));
    float _2071 = _2070 * _2064;
    float _2072 = _2070 * _2065;
    float _2073 = _2070 * _2066;
    float _2074 = dot(vec3(_705, _706, _707), vec3(cbLight._m0[_1912].xyz));
    float _4202 = isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0));
    float _2077 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
    float _4213 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
    float _2078 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
    float _2079 = dot(vec3(_705, _706, _707), vec3(_2071, _2072, _2073));
    float _4224 = isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0));
    float _2082 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
    float _2083 = dot(vec3(cbLight._m0[_1912].xyz), vec3(_2071, _2072, _2073));
    float _4235 = isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0));
    float _2087 = _2063 * _2063;
    float _2091 = ((_2082 * _2082) * (_2087 + (-1.0))) + 1.0;
    float _2099 = exp2(log2(1.0 - (isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0)))) * 5.0);
    float _2100 = 0.959999978542327880859375 - _854;
    float _2102 = 0.959999978542327880859375 - _855;
    float _2103 = 0.959999978542327880859375 - _856;
    float _2110 = 1.0 - _2063;
    float _2121 = (0.5 / (((_2078 * ((_2077 * _2110) + _2063)) + 9.9999999392252902907785028219223e-09) + (((_2078 * _2110) + _2063) * _2077))) * _2077;
    float _4246 = isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0));
    float _2123 = (isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0))) * (_2087 / ((_2091 * _2091) * 3.141590118408203125));
    uint _2134 = _1912 + 9u;
    float _2145 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1950].w)) * _708) * 0.949999988079071044921875);
    float _2146 = _2145 * _2145;
    float _2147 = cbLight._m0[_1950].x + _784;
    float _2148 = cbLight._m0[_1950].y + _785;
    float _2149 = cbLight._m0[_1950].z + _786;
    float _2153 = inversesqrt(dot(vec3(_2147, _2148, _2149), vec3(_2147, _2148, _2149)));
    float _2154 = _2153 * _2147;
    float _2155 = _2153 * _2148;
    float _2156 = _2153 * _2149;
    float _2157 = dot(vec3(_705, _706, _707), vec3(cbLight._m0[_1950].xyz));
    float _4257 = isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0));
    float _2160 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
    float _2161 = dot(vec3(_705, _706, _707), vec3(_2154, _2155, _2156));
    float _4268 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
    float _2164 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
    float _2165 = dot(vec3(cbLight._m0[_1950].xyz), vec3(_2154, _2155, _2156));
    float _4279 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
    float _2169 = _2146 * _2146;
    float _2173 = ((_2164 * _2164) * (_2169 + (-1.0))) + 1.0;
    float _2180 = exp2(log2(1.0 - (isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0)))) * 5.0);
    float _2187 = 1.0 - _2146;
    float _2197 = (0.5 / (((_2078 * ((_2160 * _2187) + _2146)) + 9.9999999392252902907785028219223e-09) + (((_2078 * _2187) + _2146) * _2160))) * _2160;
    float _4290 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
    float _2199 = (isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0))) * (_2169 / ((_2173 * _2173) * 3.141590118408203125));
    float _2209 = (((((_2180 * _2100) + _857) * cbLight._m0[_2134].x) * _2199) * _1935) + (((((_2099 * _2100) + _857) * cbLight._m0[_2049].x) * _2123) * _1946);
    float _2210 = (((((_2180 * _2102) + _859) * cbLight._m0[_2134].y) * _2199) * _1935) + (((((_2099 * _2102) + _859) * cbLight._m0[_2049].y) * _2123) * _1946);
    float _2211 = (((((_2180 * _2103) + _860) * cbLight._m0[_2134].z) * _2199) * _1935) + (((((_2099 * _2103) + _860) * cbLight._m0[_2049].z) * _2123) * _1946);
    float _2273;
    float _2275;
    float _2277;
    if (_1986)
    {
        _2273 = _2209;
        _2275 = _2210;
        _2277 = _2211;
    }
    else
    {
        uint _2279 = _1912 + 2u;
        uint _2283 = _1912 + 10u;
        float _2297 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2279].w)) * _708) * 0.949999988079071044921875);
        float _2298 = _2297 * _2297;
        float _2299 = cbLight._m0[_2279].x + _784;
        float _2300 = cbLight._m0[_2279].y + _785;
        float _2301 = cbLight._m0[_2279].z + _786;
        float _2305 = inversesqrt(dot(vec3(_2299, _2300, _2301), vec3(_2299, _2300, _2301)));
        float _2306 = _2305 * _2299;
        float _2307 = _2305 * _2300;
        float _2308 = _2305 * _2301;
        float _2309 = dot(vec3(_705, _706, _707), vec3(cbLight._m0[_2279].xyz));
        float _4301 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
        float _2312 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
        float _2313 = dot(vec3(_705, _706, _707), vec3(_2306, _2307, _2308));
        float _4312 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
        float _2316 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
        float _2317 = dot(vec3(cbLight._m0[_2279].xyz), vec3(_2306, _2307, _2308));
        float _4323 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
        float _2321 = _2298 * _2298;
        float _2325 = ((_2316 * _2316) * (_2321 + (-1.0))) + 1.0;
        float _2332 = exp2(log2(1.0 - (isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0)))) * 5.0);
        float _2339 = 1.0 - _2298;
        float _2349 = (0.5 / (((_2078 * ((_2312 * _2339) + _2298)) + 9.9999999392252902907785028219223e-09) + (((_2078 * _2339) + _2298) * _2312))) * _2312;
        float _4334 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
        float _2351 = (isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0))) * (_2321 / ((_2325 * _2325) * 3.141590118408203125));
        float _2352 = isnan(1.0) ? _1927 : (isnan(_1927) ? 1.0 : min(_1927, 1.0));
        _2273 = (((((_2332 * _2100) + _857) * cbLight._m0[_2283].x) * _2351) * _2352) + _2209;
        _2275 = (((((_2332 * _2102) + _859) * cbLight._m0[_2283].y) * _2351) * _2352) + _2210;
        _2277 = (((((_2332 * _2103) + _860) * cbLight._m0[_2283].z) * _2351) * _2352) + _2211;
    }
    float _2387;
    float _2389;
    float _2391;
    if (_2004)
    {
        _2387 = _2273;
        _2389 = _2275;
        _2391 = _2277;
    }
    else
    {
        uint _2398 = _1912 + 3u;
        uint _2402 = _1912 + 11u;
        float _2416 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2398].w)) * _708) * 0.949999988079071044921875);
        float _2417 = _2416 * _2416;
        float _2418 = cbLight._m0[_2398].x + _784;
        float _2419 = cbLight._m0[_2398].y + _785;
        float _2420 = cbLight._m0[_2398].z + _786;
        float _2424 = inversesqrt(dot(vec3(_2418, _2419, _2420), vec3(_2418, _2419, _2420)));
        float _2425 = _2424 * _2418;
        float _2426 = _2424 * _2419;
        float _2427 = _2424 * _2420;
        float _2428 = dot(vec3(_705, _706, _707), vec3(cbLight._m0[_2398].xyz));
        float _4350 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
        float _2431 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
        float _2432 = dot(vec3(_705, _706, _707), vec3(_2425, _2426, _2427));
        float _4361 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0));
        float _2435 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
        float _2436 = dot(vec3(cbLight._m0[_2398].xyz), vec3(_2425, _2426, _2427));
        float _4372 = isnan(0.0) ? _2436 : (isnan(_2436) ? 0.0 : max(_2436, 0.0));
        float _2440 = _2417 * _2417;
        float _2444 = ((_2435 * _2435) * (_2440 + (-1.0))) + 1.0;
        float _2451 = exp2(log2(1.0 - (isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0)))) * 5.0);
        float _2458 = 1.0 - _2417;
        float _2468 = (0.5 / (((_2078 * ((_2431 * _2458) + _2417)) + 9.9999999392252902907785028219223e-09) + (((_2078 * _2458) + _2417) * _2431))) * _2431;
        float _4383 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
        float _2470 = (isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0))) * (_2440 / ((_2444 * _2444) * 3.141590118408203125));
        float _2471 = isnan(1.0) ? _1928 : (isnan(_1928) ? 1.0 : min(_1928, 1.0));
        _2387 = (((((_2451 * _2100) + _857) * cbLight._m0[_2402].x) * _2470) * _2471) + _2273;
        _2389 = (((((_2451 * _2102) + _859) * cbLight._m0[_2402].y) * _2470) * _2471) + _2275;
        _2391 = (((((_2451 * _2103) + _860) * cbLight._m0[_2402].z) * _2470) * _2471) + _2277;
    }
    float _2606;
    float _2608;
    float _2610;
    float _2612;
    float _2614;
    float _2616;
    if (_1910.y == 0u)
    {
        float _2546 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2547 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2546;
        float _2548 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2546;
        float _2549 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2546;
        uvec4 _2561 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2562 = _2561.x;
        uint _2573 = uint((float(_2561.y) * floor(float(uint(cbSceneParam._m0[85u].y * _793) / _2562))) + floor(float(uint(cbSceneParam._m0[85u].x * _792) / _2562)));
        float _2583 = (log2(_2549 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2584 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0));
        uint _2587 = uint(isnan(14.0) ? _2584 : (isnan(_2584) ? 14.0 : min(_2584, 14.0)));
        uvec4 _2592 = texelFetch(g_lightClusterGridBuffer, int(((_2587 << 2u) + (_2573 << 6u)) >> 2u));
        uint _2593 = _2592.x;
        uint _2594 = _2561.z;
        float _2694;
        float _2696;
        float _2698;
        float _2700;
        float _2702;
        float _2704;
        if (((((1u << ((_2594 >> 4u) & 15u)) + 4294967295u) & _2593) == 0u) || ((_2594 & 240u) == 0u))
        {
            _2694 = 0.0;
            _2696 = 0.0;
            _2698 = 0.0;
            _2700 = 0.0;
            _2702 = 0.0;
            _2704 = 0.0;
        }
        else
        {
            float _2695;
            float _2697;
            float _2699;
            float _2701;
            float _2703;
            float _2705;
            float _2838 = 0.0;
            float _2839 = 0.0;
            float _2840 = 0.0;
            float _2841 = 0.0;
            float _2842 = 0.0;
            float _2843 = 0.0;
            uint _2844 = 0u;
            uint _2853;
            bool _2854;
            for (;;)
            {
                _2853 = texelFetch(g_lightClassification, int((((_2587 << 5u) + (_2573 << 9u)) + (_2844 << 2u)) >> 2u)).x;
                _2854 = _2853 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2854)
                {
                    frontier_phi_61_pred = _2838;
                    frontier_phi_61_pred_1 = _2843;
                    frontier_phi_61_pred_2 = _2842;
                    frontier_phi_61_pred_3 = _2841;
                    frontier_phi_61_pred_4 = _2840;
                    frontier_phi_61_pred_5 = _2839;
                }
                else
                {
                    float _2962;
                    float _2963;
                    float _2964;
                    float _2965;
                    float _2966;
                    float _2967;
                    uint _2968;
                    _2962 = _2838;
                    _2963 = _2839;
                    _2964 = _2840;
                    _2965 = _2841;
                    _2966 = _2842;
                    _2967 = _2843;
                    _2968 = _2853;
                    float _2894;
                    float _2895;
                    float _2896;
                    float _2897;
                    float _2898;
                    float _2899;
                    for (;;)
                    {
                        uint _2972 = uint(findLSB(_2968)) + (_2844 << 5u);
                        uint _2969 = (_2968 + 4294967295u) & _2968;
                        uint _2974 = _2972 * 48u;
                        vec4 _2988 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2974)).x, texelFetch(g_PointLightRenderingBuffer, int(_2974 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2974 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2974 + 3u)).x));
                        uint _2994 = (_2972 * 48u) + 4u;
                        vec4 _3007 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2994)).x, texelFetch(g_PointLightRenderingBuffer, int(_2994 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2994 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2994 + 3u)).x));
                        uint _3013 = (_2972 * 48u) + 8u;
                        vec3 _3024 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3013)).x, texelFetch(g_PointLightRenderingBuffer, int(_3013 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3013 + 2u)).x));
                        float _3028 = _2988.x - _2547;
                        float _3029 = _2988.y - _2548;
                        float _3030 = _2988.z - _2549;
                        float _3031 = dot(vec3(_3028, _3029, _3030), vec3(_3028, _3029, _3030));
                        float _3034 = inversesqrt(_3031);
                        float _3035 = _3034 * _3028;
                        float _3036 = _3034 * _3029;
                        float _3037 = _3034 * _3030;
                        float _3038 = dot(vec3(_814, _817, _820), vec3(_3035, _3036, _3037));
                        float _3043 = 1.0 - (_3031 * _2988.w);
                        float _4409 = isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : max(_3043, 0.0));
                        float _3044 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
                        float _3045 = sqrt(_3031) * _3007.w;
                        float _3048 = 1.39999997615814208984375 / (_3045 + 1.39999997615814208984375);
                        float _3049 = _3048 * _3048;
                        float _3052 = ((1.0 - _3049) * _3038) + _3049;
                        float _3055 = _3045 * _3045;
                        float _3059 = ((isnan(0.0) ? _3052 : (isnan(_3052) ? 0.0 : max(_3052, 0.0))) * _3044) / ((_3055 * 0.699999988079071044921875) + 1.0);
                        float _3063 = (-0.0) - _2547;
                        float _3064 = (-0.0) - _2548;
                        float _3065 = (-0.0) - _2549;
                        float _3069 = inversesqrt(dot(vec3(_3063, _3064, _3065), vec3(_3063, _3064, _3065)));
                        float _3070 = _3069 * _3063;
                        float _3071 = _3069 * _3064;
                        float _3072 = _3069 * _3065;
                        float _3080 = exp2(log2(1.0 / ((_3055 * 3.5) + 5.0)) * 0.25);
                        float _3081 = 1.0 - _889;
                        float _3088 = sqrt(1.0 - ((1.0 - (_3081 * _3081)) * (1.0 - (_3080 * _3080))));
                        float _3089 = _3088 * _3088;
                        float _3090 = _3089 * _3089;
                        float _3091 = _3070 + _3035;
                        float _3092 = _3071 + _3036;
                        float _3093 = _3072 + _3037;
                        float _3097 = inversesqrt(dot(vec3(_3091, _3092, _3093), vec3(_3091, _3092, _3093)));
                        float _3101 = dot(vec3(_814, _817, _820), vec3(_3070, _3071, _3072));
                        float _4425 = isnan(0.0) ? _3101 : (isnan(_3101) ? 0.0 : max(_3101, 0.0));
                        float _3104 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
                        float _3105 = dot(vec3(_814, _817, _820), vec3(_3097 * _3091, _3097 * _3092, _3097 * _3093));
                        float _4436 = isnan(0.0) ? _3105 : (isnan(_3105) ? 0.0 : max(_3105, 0.0));
                        float _3108 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
                        float _3112 = ((_3108 * _3108) * (_3090 + (-1.0))) + 1.0;
                        float _3113 = _3048 * _3089;
                        float _3114 = _3113 * _3113;
                        float _3117 = ((1.0 - _3114) * _3038) + _3114;
                        float _4447 = isnan(0.0) ? _3117 : (isnan(_3117) ? 0.0 : max(_3117, 0.0));
                        float _3118 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
                        float _3119 = 1.0 - _3089;
                        float _3129 = (0.5 / (((_3118 * ((_3104 * _3119) + _3089)) + 9.9999999392252902907785028219223e-09) + (((_3118 * _3119) + _3089) * _3104))) * _3118;
                        float _4458 = isnan(0.0) ? _3129 : (isnan(_3129) ? 0.0 : max(_3129, 0.0));
                        float _3140 = (((_3090 * 3.1415927410125732421875) * (isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0)))) / ((_3112 * _3112) * ((_3055 * 2.1991131305694580078125) + 3.141590118408203125))) * _3044;
                        _2897 = (_3059 * _3007.x) + _2965;
                        _2898 = (_3059 * _3007.y) + _2966;
                        _2899 = (_3059 * _3007.z) + _2967;
                        _2894 = (_3140 * _3024.x) + _2962;
                        _2895 = (_3140 * _3024.y) + _2963;
                        _2896 = (_3140 * _3024.z) + _2964;
                        if (_2969 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2962 = _2894;
                            _2963 = _2895;
                            _2964 = _2896;
                            _2965 = _2897;
                            _2966 = _2898;
                            _2967 = _2899;
                            _2968 = _2969;
                        }
                    }
                    frontier_phi_61_pred = _2894;
                    frontier_phi_61_pred_1 = _2899;
                    frontier_phi_61_pred_2 = _2898;
                    frontier_phi_61_pred_3 = _2897;
                    frontier_phi_61_pred_4 = _2896;
                    frontier_phi_61_pred_5 = _2895;
                }
                _2695 = frontier_phi_61_pred;
                _2705 = frontier_phi_61_pred_1;
                _2703 = frontier_phi_61_pred_2;
                _2701 = frontier_phi_61_pred_3;
                _2699 = frontier_phi_61_pred_4;
                _2697 = frontier_phi_61_pred_5;
                uint _2845 = _2844 + 1u;
                if (_2845 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2838 = _2695;
                    _2839 = _2697;
                    _2840 = _2699;
                    _2841 = _2701;
                    _2842 = _2703;
                    _2843 = _2705;
                    _2844 = _2845;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2694 = _2695;
            _2696 = _2697;
            _2698 = _2699;
            _2700 = _2701;
            _2702 = _2703;
            _2704 = _2705;
        }
        uvec4 _2708 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2709 = _2708.z;
        uint _2711 = (_2709 >> 8u) & 15u;
        float _2806;
        float _2808;
        float _2810;
        float _2812;
        float _2814;
        float _2816;
        if (((4294967295u << _2711) & _2593) == 0u)
        {
            _2806 = _2694;
            _2808 = _2696;
            _2810 = _2698;
            _2812 = _2700;
            _2814 = _2702;
            _2816 = _2704;
        }
        else
        {
            float _2831 = inversesqrt(dot(vec3(_2547, _2548, _2549), vec3(_2547, _2548, _2549)));
            float _2832 = _2831 * _2547;
            float _2833 = _2831 * _2548;
            float _2834 = _2831 * _2549;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2711 < ((_2709 >> 12u) & 15u))
            {
                float _2807;
                float _2809;
                float _2811;
                float _2813;
                float _2815;
                float _2817;
                float _2945 = _2694;
                float _2946 = _2696;
                float _2947 = _2698;
                float _2948 = _2700;
                float _2949 = _2702;
                float _2950 = _2704;
                uint _2951 = _2711;
                uint _2960;
                bool _2961;
                for (;;)
                {
                    _2960 = texelFetch(g_lightClassification, int((((_2587 << 5u) + (_2573 << 9u)) + (_2951 << 2u)) >> 2u)).x;
                    _2961 = _2960 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2961)
                    {
                        frontier_phi_67_pred = _2948;
                        frontier_phi_67_pred_1 = _2949;
                        frontier_phi_67_pred_2 = _2950;
                        frontier_phi_67_pred_3 = _2947;
                        frontier_phi_67_pred_4 = _2946;
                        frontier_phi_67_pred_5 = _2945;
                    }
                    else
                    {
                        float _3145;
                        float _3146;
                        float _3147;
                        float _3148;
                        float _3149;
                        float _3150;
                        float _3438;
                        float _3439;
                        float _3440;
                        float _3441;
                        float _3442;
                        float _3443;
                        float _3158 = _2945;
                        float _3159 = _2946;
                        float _3160 = _2947;
                        float _3161 = _2948;
                        float _3162 = _2949;
                        float _3163 = _2950;
                        uint _3164 = _2960;
                        uint _3165;
                        vec4 _3190;
                        float _3191;
                        vec4 _3206;
                        vec3 _3218;
                        vec4 _3233;
                        vec4 _3248;
                        float _3294;
                        bool _3295;
                        for (;;)
                        {
                            uint _3175 = ((_2951 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3164));
                            _3165 = (_3164 + 4294967295u) & _3164;
                            uint _3177 = _3175 * 40u;
                            _3190 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3177)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3177 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3177 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3177 + 3u)).x));
                            _3191 = _3190.w;
                            uint _3193 = (_3175 * 40u) + 4u;
                            _3206 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3193)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3193 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3193 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3193 + 3u)).x));
                            uint _3208 = (_3175 * 40u) + 8u;
                            _3218 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3208)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3208 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3208 + 2u)).x));
                            uint _3220 = (_3175 * 40u) + 16u;
                            _3233 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3220)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3220 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3220 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3220 + 3u)).x));
                            uint _3235 = (_3175 * 40u) + 20u;
                            _3248 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3235)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3235 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3235 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3235 + 3u)).x));
                            uint _3250 = (_3175 * 40u) + 24u;
                            vec4 _3263 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3250)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 3u)).x));
                            uint _3269 = (_3175 * 40u) + 28u;
                            vec4 _3282 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3269)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 3u)).x));
                            _3294 = fma(_2549, _3282.z, fma(_2548, _3282.y, _3282.x * _2547)) + _3282.w;
                            _3295 = !((fma(_2549, _3263.z, fma(_2548, _3263.y, _3263.x * _2547)) + _3263.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3295)
                            {
                                float _3322 = _3190.x - _2547;
                                float _3323 = _3190.y - _2548;
                                float _3324 = _3190.z - _2549;
                                float _3325 = dot(vec3(_3322, _3323, _3324), vec3(_3322, _3323, _3324));
                                float _3328 = inversesqrt(_3325);
                                float _3329 = _3328 * _3322;
                                float _3330 = _3328 * _3323;
                                float _3331 = _3328 * _3324;
                                float _3335 = 1.0 - (_3325 / (_3191 * _3191));
                                float _4469 = isnan(0.0) ? _3335 : (isnan(_3335) ? 0.0 : max(_3335, 0.0));
                                float _3336 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
                                float _3340 = sqrt(_3325) * _3206.w;
                                float _3342 = 1.39999997615814208984375 / (_3340 + 1.39999997615814208984375);
                                float _3343 = _3342 * _3342;
                                float _3346 = ((1.0 - _3343) * dot(vec3(_3329, _3330, _3331), vec3(_814, _817, _820))) + _3343;
                                float _3349 = _3340 * _3340;
                                float _3353 = (fma(_2549, _3233.z, fma(_2548, _3233.y, _3233.x * _2547)) + _3233.w) / _3294;
                                float _3354 = (fma(_2549, _3248.z, fma(_2548, _3248.y, _3248.x * _2547)) + _3248.w) / _3294;
                                float _3358 = 1.0 - dot(vec2(_3353, _3354), vec2(_3353, _3354));
                                float _4485 = isnan(0.0) ? _3358 : (isnan(_3358) ? 0.0 : max(_3358, 0.0));
                                float _3359 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
                                float _3360 = _3359 * (((isnan(0.0) ? _3346 : (isnan(_3346) ? 0.0 : max(_3346, 0.0))) * _3336) / ((_3349 * 0.699999988079071044921875) + 1.0));
                                float _3372 = exp2(log2(1.0 / ((_3349 * 3.5) + 5.0)) * 0.25);
                                float _3373 = 1.0 - _889;
                                float _3380 = sqrt(1.0 - ((1.0 - (_3373 * _3373)) * (1.0 - (_3372 * _3372))));
                                float _3381 = _3380 * _3380;
                                float _3382 = _3381 * _3381;
                                float _3383 = _3329 - _2832;
                                float _3384 = _3330 - _2833;
                                float _3385 = _3331 - _2834;
                                float _3389 = inversesqrt(dot(vec3(_3383, _3384, _3385), vec3(_3383, _3384, _3385)));
                                float _3393 = dot(vec3(_814, _817, _820), vec3((-0.0) - _2832, (-0.0) - _2833, (-0.0) - _2834));
                                float _4496 = isnan(0.0) ? _3393 : (isnan(_3393) ? 0.0 : max(_3393, 0.0));
                                float _3396 = isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0));
                                float _3397 = dot(vec3(_814, _817, _820), vec3(_3389 * _3383, _3389 * _3384, _3389 * _3385));
                                float _4507 = isnan(0.0) ? _3397 : (isnan(_3397) ? 0.0 : max(_3397, 0.0));
                                float _3400 = isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0));
                                float _3404 = ((_3400 * _3400) * (_3382 + (-1.0))) + 1.0;
                                float _3405 = _3342 * _3381;
                                float _3406 = _3405 * _3405;
                                float _3412 = ((1.0 - _3406) * dot(vec3(_814, _817, _820), vec3(_3329, _3330, _3331))) + _3406;
                                float _4518 = isnan(0.0) ? _3412 : (isnan(_3412) ? 0.0 : max(_3412, 0.0));
                                float _3413 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
                                float _3414 = 1.0 - _3381;
                                float _3424 = (0.5 / (((_3413 * ((_3396 * _3414) + _3381)) + 9.9999999392252902907785028219223e-09) + (((_3413 * _3414) + _3381) * _3396))) * _3413;
                                float _4529 = isnan(0.0) ? _3424 : (isnan(_3424) ? 0.0 : max(_3424, 0.0));
                                float _3434 = (_3359 * _3336) * (((_3382 * 3.1415927410125732421875) * (isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0)))) / ((_3404 * _3404) * ((_3349 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3434 * _3218.x;
                                frontier_phi_73_pred_1 = _3434 * _3218.y;
                                frontier_phi_73_pred_2 = _3360 * _3206.z;
                                frontier_phi_73_pred_3 = _3360 * _3206.y;
                                frontier_phi_73_pred_4 = _3360 * _3206.x;
                                frontier_phi_73_pred_5 = _3434 * _3218.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3438 = frontier_phi_73_pred;
                            _3439 = frontier_phi_73_pred_1;
                            _3443 = frontier_phi_73_pred_2;
                            _3442 = frontier_phi_73_pred_3;
                            _3441 = frontier_phi_73_pred_4;
                            _3440 = frontier_phi_73_pred_5;
                            _3148 = _3441 + _3161;
                            _3149 = _3442 + _3162;
                            _3150 = _3443 + _3163;
                            _3145 = _3438 + _3158;
                            _3146 = _3439 + _3159;
                            _3147 = _3440 + _3160;
                            if (_3165 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3158 = _3145;
                                _3159 = _3146;
                                _3160 = _3147;
                                _3161 = _3148;
                                _3162 = _3149;
                                _3163 = _3150;
                                _3164 = _3165;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3148;
                        frontier_phi_67_pred_1 = _3149;
                        frontier_phi_67_pred_2 = _3150;
                        frontier_phi_67_pred_3 = _3147;
                        frontier_phi_67_pred_4 = _3146;
                        frontier_phi_67_pred_5 = _3145;
                    }
                    _2813 = frontier_phi_67_pred;
                    _2815 = frontier_phi_67_pred_1;
                    _2817 = frontier_phi_67_pred_2;
                    _2811 = frontier_phi_67_pred_3;
                    _2809 = frontier_phi_67_pred_4;
                    _2807 = frontier_phi_67_pred_5;
                    uint _2952 = _2951 + 1u;
                    if (_2952 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2945 = _2807;
                        _2946 = _2809;
                        _2947 = _2811;
                        _2948 = _2813;
                        _2949 = _2815;
                        _2950 = _2817;
                        _2951 = _2952;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2815;
                frontier_phi_55_56_ladder_1 = _2817;
                frontier_phi_55_56_ladder_2 = _2813;
                frontier_phi_55_56_ladder_3 = _2811;
                frontier_phi_55_56_ladder_4 = _2809;
                frontier_phi_55_56_ladder_5 = _2807;
            }
            else
            {
                frontier_phi_55_56_ladder = _2702;
                frontier_phi_55_56_ladder_1 = _2704;
                frontier_phi_55_56_ladder_2 = _2700;
                frontier_phi_55_56_ladder_3 = _2698;
                frontier_phi_55_56_ladder_4 = _2696;
                frontier_phi_55_56_ladder_5 = _2694;
            }
            _2806 = frontier_phi_55_56_ladder_5;
            _2808 = frontier_phi_55_56_ladder_4;
            _2810 = frontier_phi_55_56_ladder_3;
            _2812 = frontier_phi_55_56_ladder_2;
            _2814 = frontier_phi_55_56_ladder;
            _2816 = frontier_phi_55_56_ladder_1;
        }
        float _2821 = isnan(1.0) ? _873 : (isnan(_873) ? 1.0 : min(_873, 1.0));
        _2606 = (_2821 * _2812) + _2042;
        _2608 = (_2821 * _2814) + _2044;
        _2610 = (_2821 * _2816) + _2046;
        _2612 = ((_2806 * _857) * _2821) + _2387;
        _2614 = ((_2808 * _859) * _2821) + _2389;
        _2616 = ((_2810 * _860) * _2821) + _2391;
    }
    else
    {
        _2606 = _2042;
        _2608 = _2044;
        _2610 = _2046;
        _2612 = _2387;
        _2614 = _2389;
        _2616 = _2391;
    }
    float _4545 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
    float _4556 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
    float _4567 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
    uint _2636 = _265 + 6u;
    float _2644 = _792 / cbSceneParam._m0[86u].x;
    float _2645 = _793 / cbSceneParam._m0[86u].y;
    vec4 _2659 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2644, _2645, (log2((isnan(cbSceneParam._m0[77u].w) ? _727 : (isnan(_727) ? cbSceneParam._m0[77u].w : min(_727, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2661 = _2659.x;
    float _2662 = _2659.y;
    float _2663 = _2659.z;
    float _2664 = _2659.w;
    float _2756;
    float _2758;
    float _2760;
    float _2762;
    if (_727 > cbSceneParam._m0[78u].w)
    {
        float _2719 = isnan(_727) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _727 : min(cbSceneParam._m0[80u].w, _727));
        float _2720 = _2719 / _727;
        float _2731 = _2720 * _777;
        float _2732 = _778 * _2720;
        float _2733 = (-0.0) - _2732;
        float _2734 = _2720 * _779;
        float _2736 = (cbSceneParam._m0[77u].w * _2733) / _2719;
        float _2737 = _2736 + cbSceneParam._m0[79u].w;
        float _2738 = cbSceneParam._m0[79u].w - _2732;
        float _2744 = sqrt(((_2731 * _2731) + (_2732 * _2732)) + (_2734 * _2734));
        float _2747 = (1.0 - (cbSceneParam._m0[77u].w / _2719)) * _2744;
        float _2752 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2754 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2907;
        if (abs((_2733 - _2736) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2907 = ((((_2737 > 0.0) ? exp2(_2752 * _2737) : (2.0 - exp2(_2754 * _2737))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2747;
        }
        else
        {
            float _2867 = 1.0 / cbSceneParam._m0[80u].x;
            float _2868 = isnan(_2738) ? _2737 : (isnan(_2737) ? _2738 : max(_2737, _2738));
            float _2869 = isnan(_2738) ? _2737 : (isnan(_2737) ? _2738 : min(_2737, _2738));
            float _2878 = isnan(0.0) ? _2868 : (isnan(_2868) ? 0.0 : min(_2868, 0.0));
            float _2879 = isnan(0.0) ? _2869 : (isnan(_2869) ? 0.0 : min(_2869, 0.0));
            _2907 = ((abs(_2744 / _2733) * cbSceneParam._m0[80u].y) * ((((_2878 - _2879) * 2.0) - ((exp2(_2752 * (isnan(0.0) ? _2868 : (isnan(_2868) ? 0.0 : max(_2868, 0.0)))) - exp2(_2752 * (isnan(0.0) ? _2869 : (isnan(_2869) ? 0.0 : max(_2869, 0.0))))) * _2867)) - ((exp2(_2754 * _2878) - exp2(_2754 * _2879)) * _2867))) + (_2747 * cbSceneParam._m0[80u].z);
        }
        vec4 _2909 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2644, _2645, 1.0), 0.0);
        float _2918 = exp2((_2907 * (-1.44269502162933349609375)) * (1.0 - _2909.w));
        float _2919 = log2(_2918);
        float _2935 = log2(_2664);
        _2756 = (exp2(_2935 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2919 * cbSceneParam._m0[78u].x)) * _2909.x) / cbSceneParam._m0[78u].x)) + _2661;
        _2758 = (exp2(_2935 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2919 * cbSceneParam._m0[78u].y)) * _2909.y) / cbSceneParam._m0[78u].y)) + _2662;
        _2760 = (exp2(_2935 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2919 * cbSceneParam._m0[78u].z)) * _2909.z) / cbSceneParam._m0[78u].z)) + _2663;
        _2762 = _2918 * _2664;
    }
    else
    {
        _2756 = _2661;
        _2758 = _2662;
        _2760 = _2663;
        _2762 = _2664;
    }
    float _2774 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2775 = _2774 == 3.0;
    float _2776 = log2(_2762);
    float _2783 = exp2(_2776 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0))) * (_2606 + ((isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0))) * _873))) + ((_2612 + ((isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0))) * _1681)) * cbPerFrame._m0[3u].x));
    float _2784 = exp2(_2776 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0))) * (_2608 + ((isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0))) * _873))) + ((_2614 + ((isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0))) * _1681)) * cbPerFrame._m0[3u].x));
    float _2785 = exp2(_2776 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0))) * (_2610 + ((isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0))) * _873))) + ((_2616 + ((isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0))) * _1681)) * cbPerFrame._m0[3u].x));
    float _2794 = (_2774 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2794 * (_2775 ? _2783 : (_2783 + (cbSceneParam._m0[72u].w * _2756)));
    SV_Target.y = _2794 * (_2775 ? _2784 : (_2784 + (cbSceneParam._m0[72u].w * _2758)));
    SV_Target.z = _2794 * (_2775 ? _2785 : (_2785 + (cbSceneParam._m0[72u].w * _2760)));
    SV_Target.w = cbInstanceData._m0[_2636].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2636].w;
}


