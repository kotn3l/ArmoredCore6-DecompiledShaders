#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1355;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _231 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _232 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _233 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _239 = inversesqrt(dot(vec3(_231, _232, _233), vec3(_231, _232, _233)));
    float _246 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _253 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _259 = uint(roundEven(NORMAL.w)) * 13u;
    uint _264 = _259 + 1u;
    uint _268 = _259 + 2u;
    float _277 = sqrt(((cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x) + (cbInstanceData._m0[_259].x * cbInstanceData._m0[_259].x)) + (cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x));
    float _278 = _277 * TEXCOORD.z;
    float _279 = _277 * TEXCOORD.w;
    vec4 _299 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _305 = _299.x * cbMtdParam._m0[11u].x;
    float _306 = _299.y * cbMtdParam._m0[11u].y;
    float _307 = _299.z * cbMtdParam._m0[11u].z;
    vec4 _326 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _278) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _279) + cbTextureTilingScale._m0[5u].w));
    vec4 _364 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _366 = _364.x;
    float _378 = dot(vec4(_366, _364.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _395 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_366 - _378) * cbMtdParam._m0[24u].y) + _378) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3704 = isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0));
    float _396 = isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0));
    float _403 = (_396 * ((_326.x * cbMtdParam._m0[12u].x) - _305)) + _305;
    float _404 = (_396 * ((_326.y * cbMtdParam._m0[12u].y) - _306)) + _306;
    float _405 = (_396 * ((_326.z * cbMtdParam._m0[12u].z) - _307)) + _307;
    vec4 _424 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _278) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _279) + cbTextureTilingScale._m0[14u].w));
    vec4 _444 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _278) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _279) + cbTextureTilingScale._m0[20u].w));
    vec4 _469 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _278) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _279) + cbTextureTilingScale._m0[4u].w));
    vec4 _486 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _488 = _486.x;
    float _489 = _486.y;
    float _490 = _486.z;
    float _499 = ((_469.z - _490) * _396) + _490;
    float _502 = ((((_469.x - _488) * _396) + _488) * 2.0) + (-1.0);
    float _503 = ((((_469.y - _489) * _396) + _489) * 2.0) + (-1.0);
    float _504 = dot(vec2(_502, _503), vec2(_502, _503));
    float _3715 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _509 = sqrt(1.0 - (isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0))));
    vec4 _525 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _550 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _278) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _279) + cbTextureTilingScale._m0[11u].w));
    float _552 = _550.x;
    float _553 = 1.0 - _552;
    float _559 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _562 = ((isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : min(_559, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _571 = (_562 - ((((((_552 - _553) * cbMtdParam._m0[24u].z) + _553) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _562))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3736 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _572 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
    float _579 = (_572 * ((_424.x * cbMtdParam._m0[18u].x) - _403)) + _403;
    float _580 = (_572 * ((_424.y * cbMtdParam._m0[18u].y) - _404)) + _404;
    float _581 = (_572 * ((_424.z * cbMtdParam._m0[18u].z) - _405)) + _405;
    vec4 _593 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _278) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _279) + cbTextureTilingScale._m0[19u].w));
    float _595 = _593.x;
    float _596 = 1.0 - _595;
    float _623 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_595 - _596) * cbMtdParam._m0[24u].w) + _596) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3747 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _624 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
    float _632 = ((((cbMtdParam._m0[10u].x - _579) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _624) + _579;
    float _633 = ((((cbMtdParam._m0[10u].y - _580) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _624) + _580;
    float _634 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _581)) * _624) + _581;
    vec4 _660 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _662 = _660.x;
    float _680 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _278) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _279) + cbTextureTilingScale._m0[9u].w)).x - _662) * _396) + _662;
    float _684 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _680) * cbMtdParam._m0[19u].z) + _680;
    float _686 = _684 - (_684 * _572);
    float _688 = _686 - (_686 * _624);
    float _693 = (((_444.z - _499) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _499;
    float _697 = ((_525.z - _693) * cbMtdParam._m0[19u].w) + _693;
    vec4 _711 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _278) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _279) + cbTextureTilingScale._m0[15u].w));
    float _718 = (_711.x * 2.0) + (-1.0);
    float _719 = (_711.y * 2.0) + (-1.0);
    float _720 = dot(vec2(_718, _719), vec2(_718, _719));
    float _3758 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
    float _728 = (_572 * (_711.z - _697)) + _697;
    float _731 = ((cbMtdParam._m0[23u].y - _728) * _624) + _728;
    vec4 _750 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _278) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _279) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _756 = (_750.x * 2.0) + (-1.0);
    float _757 = (_750.y * 2.0) + (-1.0);
    float _758 = dot(vec2(_756, _757), vec2(_756, _757));
    float _3769 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _772 = (_502 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_444.x * 2.0) + (-1.0)))) + (((_525.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _773 = (_503 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_444.y * 2.0) + (-1.0)))) + (((_525.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _785 = (((_718 - _772) + (cbMtdParam._m0[21u].x * _772)) * _572) + _772;
    float _786 = (((_719 - _773) + (cbMtdParam._m0[21u].x * _773)) * _572) + _773;
    float _787 = (_572 * (sqrt(1.0 - (isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0)))) - _509)) + _509;
    float _798 = (((_756 - _785) + (_785 * cbMtdParam._m0[22u].z)) * _624) + _785;
    float _799 = (((_757 - _786) + (_786 * cbMtdParam._m0[22u].z)) * _624) + _786;
    float _800 = ((sqrt(1.0 - (isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0)))) - _787) * _624) + _787;
    float _802 = cbMtdParam._m0[22u].x + _525.w;
    float _805 = fma(_800, _246 * NORMAL.x, fma(_799, _253 * TANGENT.x, (_239 * _231) * _798));
    float _808 = fma(_800, _246 * NORMAL.y, fma(_799, _253 * TANGENT.y, (_239 * _232) * _798));
    float _811 = fma(_800, _246 * NORMAL.z, fma(_799, _253 * TANGENT.z, (_239 * _233) * _798));
    float _815 = inversesqrt(dot(vec3(_805, _808, _811), vec3(_805, _808, _811)));
    float _816 = _815 * _805;
    float _817 = _815 * _808;
    float _818 = _815 * _811;
    float _3780 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
    float _819 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
    float _3791 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
    float _3802 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _3813 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _3824 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _3835 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _824 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
    float _838 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _878 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _888 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _878);
    float _889 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _878);
    float _890 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _878);
    float _894 = inversesqrt(dot(vec3(_888, _889, _890), vec3(_888, _889, _890)));
    float _895 = _888 * _894;
    float _896 = _889 * _894;
    float _897 = _890 * _894;
    float _903 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _904 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _922 = fma(_818, cbSceneParam._m0[5u].z, fma(_817, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _816));
    float _925 = fma(_818, cbSceneParam._m0[6u].z, fma(_817, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _816));
    float _928 = fma(_818, cbSceneParam._m0[7u].z, fma(_817, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _816));
    uint _942 = (_259 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _948 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0)))) * cbInstanceData._m0[_942].x;
    float _949 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0)))) * cbInstanceData._m0[_942].y;
    float _950 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0)))) * cbInstanceData._m0[_942].z;
    float _3846 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
    float _951 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
    float _3857 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
    float _952 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
    float _3868 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
    float _953 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
    float _954 = 1.0 - _824;
    float _955 = _951 * _954;
    float _956 = _952 * _954;
    float _957 = _953 * _954;
    float _962 = (_951 + (-0.039999999105930328369140625)) * _824;
    float _963 = (_952 + (-0.039999999105930328369140625)) * _824;
    float _964 = (_953 + (-0.039999999105930328369140625)) * _824;
    float _965 = _962 + 0.039999999105930328369140625;
    float _967 = _963 + 0.039999999105930328369140625;
    float _968 = _964 + 0.039999999105930328369140625;
    vec4 _977 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _903, cbSceneParam._m0[86u].y * _904));
    float _981 = ((isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0))) * TEXCOORD_5.w) * _977.x;
    float _982 = dot(vec3(_816, _817, _818), vec3(_895, _896, _897));
    float _985 = _982 * 2.0;
    float _989 = (_985 * _816) - _895;
    float _990 = (_985 * _817) - _896;
    float _991 = (_985 * _818) - _897;
    float _995 = abs(dot(vec3(_895, _896, _897), vec3(_816, _817, _818)));
    float _3879 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
    float _997 = sqrt(_819);
    float _1010 = exp2((_997 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_997 * 3.0));
    float _1016 = (1.0 - _1010) * ((_997 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1017 = _1010 * _997;
    float _1045 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1049 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1053 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1354;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1079 = fma(_1053, cbModelParam._m0[26u].z, fma(_1049, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1045));
        float _1083 = fma(_1053, cbModelParam._m0[27u].z, fma(_1049, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1045));
        float _1087 = fma(_1053, cbModelParam._m0[28u].z, fma(_1049, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1045));
        float _1112 = _1045 + _816;
        float _1113 = _1049 + _817;
        float _1114 = _1053 + _818;
        float _1124 = fma(_1114, cbModelParam._m0[26u].z, fma(_1113, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1112)) - _1079;
        float _1125 = fma(_1114, cbModelParam._m0[27u].z, fma(_1113, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1112)) - _1083;
        float _1126 = fma(_1114, cbModelParam._m0[28u].z, fma(_1113, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1112)) - _1087;
        float _1130 = inversesqrt(dot(vec3(_1124, _1125, _1126), vec3(_1124, _1125, _1126)));
        float _1143 = ((_1130 * _1124) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1079 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1144 = ((_1130 * _1125) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1083 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1145 = ((_1130 * _1126) / cbModelParam._m0[34u].z) + ((((((_1087 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1148 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1143, _1144, _1145), 0.0);
        vec4 _1155 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1143, _1144, _1145), 0.0);
        vec4 _1162 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1143, _1144, _1145), 0.0);
        vec4 _1169 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1143, _1144, _1145), 0.0);
        float _1182 = exp2((_1148.w + (-0.5)) * 20.0) * 2.0;
        float _1183 = _1182 * (_1148.x + (-0.5));
        float _1184 = _1182 * (_1148.y + (-0.5));
        float _1185 = _1182 * (_1148.z + (-0.5));
        float _1192 = exp2((_1155.w + (-0.5)) * 20.0) * 2.0;
        float _1193 = _1192 * (_1155.x + (-0.5));
        float _1194 = _1192 * (_1155.y + (-0.5));
        float _1195 = _1192 * (_1155.z + (-0.5));
        float _1202 = exp2((_1162.w + (-0.5)) * 20.0) * 2.0;
        float _1203 = _1202 * (_1162.x + (-0.5));
        float _1204 = _1202 * (_1162.y + (-0.5));
        float _1205 = _1202 * (_1162.z + (-0.5));
        float _1212 = exp2((_1169.w + (-0.5)) * 20.0) * 2.0;
        float _1213 = _1212 * (_1169.x + (-0.5));
        float _1214 = _1212 * (_1169.y + (-0.5));
        float _1215 = _1212 * (_1169.z + (-0.5));
        float _1216 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1217 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1218 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1219 = _1183 * 0.5;
        float _1220 = _1193 * 0.5;
        float _1221 = _1203 * 0.5;
        float _1222 = dot(vec3(_1219, _1220, _1221), vec3(_1219, _1220, _1221));
        float _1227 = (_1222 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1222);
        float _1236 = (dot(vec3(_816, _817, _818), vec3(_1227 * _1219, _1227 * _1220, _1227 * _1221)) + 1.0) * 0.5;
        float _3905 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1246 = sqrt(((_1220 * _1220) + (_1219 * _1219)) + (_1221 * _1221)) / (_1216 + 9.9999997473787516355514526367188e-06);
        float _3916 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1247 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
        float _1248 = _1247 * 2.0;
        float _1252 = (1.0 - _1247) / (_1247 + 1.0);
        float _3927 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1253 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
        float _1262 = ((((1.0 - _1253) * (_1248 + 2.0)) * exp2(log2(isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0))) * (_1248 + 1.0))) + _1253) * _1216;
        float _1263 = _1184 * 0.5;
        float _1264 = _1194 * 0.5;
        float _1265 = _1204 * 0.5;
        float _1266 = dot(vec3(_1263, _1264, _1265), vec3(_1263, _1264, _1265));
        float _1271 = (_1266 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1266);
        float _1279 = (dot(vec3(_816, _817, _818), vec3(_1271 * _1263, _1271 * _1264, _1271 * _1265)) + 1.0) * 0.5;
        float _3938 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1288 = sqrt(((_1264 * _1264) + (_1263 * _1263)) + (_1265 * _1265)) / (_1217 + 9.9999997473787516355514526367188e-06);
        float _3949 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1289 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
        float _1290 = _1289 * 2.0;
        float _1294 = (1.0 - _1289) / (_1289 + 1.0);
        float _3960 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1295 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
        float _1304 = ((((1.0 - _1295) * (_1290 + 2.0)) * exp2(log2(isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0))) * (_1290 + 1.0))) + _1295) * _1217;
        float _1305 = _1185 * 0.5;
        float _1306 = _1195 * 0.5;
        float _1307 = _1205 * 0.5;
        float _1308 = dot(vec3(_1305, _1306, _1307), vec3(_1305, _1306, _1307));
        float _1313 = (_1308 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1308);
        float _1321 = (dot(vec3(_816, _817, _818), vec3(_1313 * _1305, _1313 * _1306, _1313 * _1307)) + 1.0) * 0.5;
        float _3971 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1330 = sqrt(((_1306 * _1306) + (_1305 * _1305)) + (_1307 * _1307)) / (_1218 + 9.9999997473787516355514526367188e-06);
        float _3982 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1331 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
        float _1332 = _1331 * 2.0;
        float _1336 = (1.0 - _1331) / (_1331 + 1.0);
        float _3993 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1337 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
        float _1346 = ((((1.0 - _1337) * (_1332 + 2.0)) * exp2(log2(isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0))) * (_1332 + 1.0))) + _1337) * _1218;
        _1354 = _1185;
        _1356 = _1184;
        _1357 = _1183;
        _1358 = _1195;
        _1359 = _1194;
        _1360 = _1193;
        _1361 = _1205;
        _1362 = _1204;
        _1363 = _1203;
        _1364 = _1218;
        _1365 = _1217;
        _1366 = _1216;
        _1367 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0)));
        _1368 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0)));
        _1369 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0)));
    }
    else
    {
        _1354 = _1355;
        _1356 = _1355;
        _1357 = _1355;
        _1358 = _1355;
        _1359 = _1355;
        _1360 = _1355;
        _1361 = _1355;
        _1362 = _1355;
        _1363 = _1355;
        _1364 = _1355;
        _1365 = _1355;
        _1366 = _1355;
        _1367 = 0.0;
        _1368 = 0.0;
        _1369 = 0.0;
    }
    float _1663;
    float _1664;
    float _1665;
    float _1666;
    float _1667;
    float _1668;
    float _1669;
    float _1670;
    float _1671;
    float _1672;
    float _1673;
    float _1674;
    float _1675;
    float _1676;
    float _1677;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1394 = fma(_1053, cbModelParam._m0[30u].z, fma(_1049, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1045));
        float _1398 = fma(_1053, cbModelParam._m0[31u].z, fma(_1049, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1045));
        float _1402 = fma(_1053, cbModelParam._m0[32u].z, fma(_1049, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1045));
        float _1425 = _1045 + _816;
        float _1426 = _1049 + _817;
        float _1427 = _1053 + _818;
        float _1437 = fma(_1427, cbModelParam._m0[30u].z, fma(_1426, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1425)) - _1394;
        float _1438 = fma(_1427, cbModelParam._m0[31u].z, fma(_1426, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1425)) - _1398;
        float _1439 = fma(_1427, cbModelParam._m0[32u].z, fma(_1426, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1425)) - _1402;
        float _1443 = inversesqrt(dot(vec3(_1437, _1438, _1439), vec3(_1437, _1438, _1439)));
        float _1456 = ((_1443 * _1437) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1394 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1457 = ((_1443 * _1438) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1398 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1458 = ((_1443 * _1439) / cbModelParam._m0[35u].z) + ((((((_1402 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1460 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1456, _1457, _1458), 0.0);
        vec4 _1467 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1456, _1457, _1458), 0.0);
        vec4 _1474 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1456, _1457, _1458), 0.0);
        vec4 _1481 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1456, _1457, _1458), 0.0);
        float _1493 = exp2((_1460.w + (-0.5)) * 20.0) * 2.0;
        float _1494 = _1493 * (_1460.x + (-0.5));
        float _1495 = _1493 * (_1460.y + (-0.5));
        float _1496 = _1493 * (_1460.z + (-0.5));
        float _1503 = exp2((_1467.w + (-0.5)) * 20.0) * 2.0;
        float _1504 = _1503 * (_1467.x + (-0.5));
        float _1505 = _1503 * (_1467.y + (-0.5));
        float _1506 = _1503 * (_1467.z + (-0.5));
        float _1513 = exp2((_1474.w + (-0.5)) * 20.0) * 2.0;
        float _1514 = _1513 * (_1474.x + (-0.5));
        float _1515 = _1513 * (_1474.y + (-0.5));
        float _1516 = _1513 * (_1474.z + (-0.5));
        float _1523 = exp2((_1481.w + (-0.5)) * 20.0) * 2.0;
        float _1524 = _1523 * (_1481.x + (-0.5));
        float _1525 = _1523 * (_1481.y + (-0.5));
        float _1526 = _1523 * (_1481.z + (-0.5));
        float _1527 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
        float _1528 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1529 = isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0));
        float _1530 = _1494 * 0.5;
        float _1531 = _1504 * 0.5;
        float _1532 = _1514 * 0.5;
        float _1533 = dot(vec3(_1530, _1531, _1532), vec3(_1530, _1531, _1532));
        float _1538 = (_1533 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1533);
        float _1546 = (dot(vec3(_816, _817, _818), vec3(_1538 * _1530, _1538 * _1531, _1538 * _1532)) + 1.0) * 0.5;
        float _4034 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1555 = sqrt(((_1531 * _1531) + (_1530 * _1530)) + (_1532 * _1532)) / (_1527 + 9.9999997473787516355514526367188e-06);
        float _4045 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
        float _1556 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
        float _1557 = _1556 * 2.0;
        float _1561 = (1.0 - _1556) / (_1556 + 1.0);
        float _4056 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1562 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
        float _1571 = ((((1.0 - _1562) * (_1557 + 2.0)) * exp2(log2(isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0))) * (_1557 + 1.0))) + _1562) * _1527;
        float _1572 = _1495 * 0.5;
        float _1573 = _1505 * 0.5;
        float _1574 = _1515 * 0.5;
        float _1575 = dot(vec3(_1572, _1573, _1574), vec3(_1572, _1573, _1574));
        float _1580 = (_1575 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1575);
        float _1588 = (dot(vec3(_816, _817, _818), vec3(_1580 * _1572, _1580 * _1573, _1580 * _1574)) + 1.0) * 0.5;
        float _4067 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
        float _1597 = sqrt(((_1573 * _1573) + (_1572 * _1572)) + (_1574 * _1574)) / (_1528 + 9.9999997473787516355514526367188e-06);
        float _4078 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
        float _1598 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
        float _1599 = _1598 * 2.0;
        float _1603 = (1.0 - _1598) / (_1598 + 1.0);
        float _4089 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
        float _1604 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
        float _1613 = ((((1.0 - _1604) * (_1599 + 2.0)) * exp2(log2(isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0))) * (_1599 + 1.0))) + _1604) * _1528;
        float _1614 = _1496 * 0.5;
        float _1615 = _1506 * 0.5;
        float _1616 = _1516 * 0.5;
        float _1617 = dot(vec3(_1614, _1615, _1616), vec3(_1614, _1615, _1616));
        float _1622 = (_1617 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1617);
        float _1630 = (dot(vec3(_816, _817, _818), vec3(_1622 * _1614, _1622 * _1615, _1622 * _1616)) + 1.0) * 0.5;
        float _4100 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
        float _1639 = sqrt(((_1615 * _1615) + (_1614 * _1614)) + (_1616 * _1616)) / (_1529 + 9.9999997473787516355514526367188e-06);
        float _4111 = isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0));
        float _1640 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
        float _1641 = _1640 * 2.0;
        float _1645 = (1.0 - _1640) / (_1640 + 1.0);
        float _4122 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
        float _1646 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
        float _1655 = ((((1.0 - _1646) * (_1641 + 2.0)) * exp2(log2(isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0))) * (_1641 + 1.0))) + _1646) * _1529;
        _1663 = _1496;
        _1664 = _1495;
        _1665 = _1494;
        _1666 = _1506;
        _1667 = _1505;
        _1668 = _1504;
        _1669 = _1516;
        _1670 = _1515;
        _1671 = _1514;
        _1672 = _1529;
        _1673 = _1528;
        _1674 = _1527;
        _1675 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0)));
        _1676 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0)));
        _1677 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0)));
    }
    else
    {
        _1663 = _1355;
        _1664 = _1355;
        _1665 = _1355;
        _1666 = _1355;
        _1667 = _1355;
        _1668 = _1355;
        _1669 = _1355;
        _1670 = _1355;
        _1671 = _1355;
        _1672 = _1355;
        _1673 = _1355;
        _1674 = _1355;
        _1675 = 0.0;
        _1676 = 0.0;
        _1677 = 0.0;
    }
    float _1687 = (cbModelParam._m0[1u].x * (_1675 - _1367)) + _1367;
    float _1688 = (cbModelParam._m0[1u].x * (_1676 - _1368)) + _1368;
    float _1689 = (cbModelParam._m0[1u].x * (_1677 - _1369)) + _1369;
    float _1710 = fma(_1689, cbSceneParam._m0[89u].z, fma(_1688, cbSceneParam._m0[89u].y, _1687 * cbSceneParam._m0[89u].x));
    float _1713 = fma(_1689, cbSceneParam._m0[90u].z, fma(_1688, cbSceneParam._m0[90u].y, _1687 * cbSceneParam._m0[90u].x));
    float _1716 = fma(_1689, cbSceneParam._m0[91u].z, fma(_1688, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1687));
    float _1731 = _989 * 0.5;
    float _1732 = _990 * 0.5;
    float _1733 = _991 * 0.5;
    float _1734 = dot(vec4(_1731, _1732, _1733, 1.0), vec4(_1665, _1668, _1671, _1674));
    float _1737 = dot(vec4(_1731, _1732, _1733, 1.0), vec4(_1664, _1667, _1670, _1673));
    float _1740 = dot(vec4(_1731, _1732, _1733, 1.0), vec4(_1663, _1666, _1669, _1672));
    float _1774;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1747 = dot(vec4(_1731, _1732, _1733, 1.0), vec4(_1354, _1358, _1361, _1364));
        float _1751 = dot(vec4(_1731, _1732, _1733, 1.0), vec4(_1356, _1359, _1362, _1365));
        float _1755 = dot(vec4(_1731, _1732, _1733, 1.0), vec4(_1357, _1360, _1363, _1366));
        float _1762 = dot(vec4(cbModelParam._m0[39u]), vec4(_1731, _1732, _1733, 1.0));
        _1774 = dot(vec3(isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0)), isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0)), isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1762) ? 0.0 : (isnan(0.0) ? _1762 : max(0.0, _1762))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1774 = 1.0;
    }
    float _1785;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1776 = dot(vec4(cbModelParam._m0[40u]), vec4(_1731, _1732, _1733, 1.0));
        _1785 = dot(vec3(isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0)), isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0)), isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1776) ? 0.0 : (isnan(0.0) ? _1776 : max(0.0, _1776))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1785 = 1.0;
    }
    float _1789 = (_1785 * cbModelParam._m0[1u].x) + (_1774 * (1.0 - cbModelParam._m0[1u].x));
    float _1799 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _819);
    float _1800 = isnan(_1799) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1799 : min(cbModelParam._m0[25u].z, _1799));
    float _1880;
    float _1882;
    float _1884;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1847 = fma(_1053, cbModelParam._m0[13u].z, fma(_1049, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1045)) + cbModelParam._m0[13u].w;
        float _1851 = fma(_1053, cbModelParam._m0[14u].z, fma(_1049, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1045)) + cbModelParam._m0[14u].w;
        float _1855 = fma(_1053, cbModelParam._m0[15u].z, fma(_1049, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1045)) + cbModelParam._m0[15u].w;
        float _1858 = fma(_991, cbModelParam._m0[13u].z, fma(_990, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _989));
        float _1861 = fma(_991, cbModelParam._m0[14u].z, fma(_990, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _989));
        float _1864 = fma(_991, cbModelParam._m0[15u].z, fma(_990, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _989));
        float _1892;
        if (_1858 > 0.0)
        {
            _1892 = abs((1.0 - _1847) / _1858);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1858 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1847 + 1.0) / _1858);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1892 = frontier_phi_14_12_ladder;
        }
        float _2115;
        if (_1861 > 0.0)
        {
            _2115 = abs((1.0 - _1851) / _1861);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1861 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1851 + 1.0) / _1861);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2115 = frontier_phi_23_19_ladder;
        }
        float _2372;
        if (_1864 > 0.0)
        {
            _2372 = abs((1.0 - _1855) / _1864);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1864 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1855 + 1.0) / _1864);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2372 = frontier_phi_35_30_ladder;
        }
        float _2374 = isnan(_2115) ? _1892 : (isnan(_1892) ? _2115 : min(_1892, _2115));
        float _2375 = isnan(_2372) ? _2374 : (isnan(_2374) ? _2372 : min(_2374, _2372));
        float _2379 = (_2375 * _1858) + _1847;
        float _2380 = (_2375 * _1861) + _1851;
        float _2381 = (_2375 * _1864) + _1855;
        float _2382 = _2375 * 9.9999997473787516355514526367188e-05;
        float _2384 = (-1.0) - _2382;
        float _2386 = _2382 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2381 > _2386) || ((_2381 < _2384) || ((_2380 > _2386) || ((_2380 < _2384) || ((_2379 < _2384) || (_2379 > _2386))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2509 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2381, cbModelParam._m0[9u].z, fma(_2380, cbModelParam._m0[9u].y, _2379 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2381, cbModelParam._m0[10u].z, fma(_2380, cbModelParam._m0[10u].y, _2379 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2381, cbModelParam._m0[11u].z, fma(_2380, cbModelParam._m0[11u].y, _2379 * cbModelParam._m0[11u].x))), _1800);
            frontier_phi_13_35_ladder = _2509.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2509.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2509.x * cbModelParam._m0[1u].y;
        }
        _1880 = frontier_phi_13_35_ladder_2;
        _1882 = frontier_phi_13_35_ladder_1;
        _1884 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1868 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_989, _990, _991), _1800);
        _1880 = _1868.x * cbModelParam._m0[1u].y;
        _1882 = _1868.y * cbModelParam._m0[1u].y;
        _1884 = _1868.z * cbModelParam._m0[1u].y;
    }
    float _1888 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _819);
    float _1889 = isnan(_1888) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1888 : min(cbModelParam._m0[25u].w, _1888));
    float _1978;
    float _1980;
    float _1982;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1942 = fma(_1053, cbModelParam._m0[21u].z, fma(_1049, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1045)) + cbModelParam._m0[21u].w;
        float _1946 = fma(_1053, cbModelParam._m0[22u].z, fma(_1049, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1045)) + cbModelParam._m0[22u].w;
        float _1950 = fma(_1053, cbModelParam._m0[23u].z, fma(_1049, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1045)) + cbModelParam._m0[23u].w;
        float _1953 = fma(_991, cbModelParam._m0[21u].z, fma(_990, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _989));
        float _1956 = fma(_991, cbModelParam._m0[22u].z, fma(_990, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _989));
        float _1959 = fma(_991, cbModelParam._m0[23u].z, fma(_990, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _989));
        float _2120;
        if (_1953 > 0.0)
        {
            _2120 = abs((1.0 - _1942) / _1953);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1953 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1942 + 1.0) / _1953);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2120 = frontier_phi_25_21_ladder;
        }
        float _2399;
        if (_1956 > 0.0)
        {
            _2399 = abs((1.0 - _1946) / _1956);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1956 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1946 + 1.0) / _1956);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2399 = frontier_phi_37_32_ladder;
        }
        float _2612;
        if (_1959 > 0.0)
        {
            _2612 = abs((1.0 - _1950) / _1959);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1959 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1950 + 1.0) / _1959);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2612 = frontier_phi_46_43_ladder;
        }
        float _2614 = isnan(_2399) ? _2120 : (isnan(_2120) ? _2399 : min(_2120, _2399));
        float _2615 = isnan(_2612) ? _2614 : (isnan(_2614) ? _2612 : min(_2614, _2612));
        float _2619 = (_2615 * _1953) + _1942;
        float _2620 = (_2615 * _1956) + _1946;
        float _2621 = (_2615 * _1959) + _1950;
        float _2622 = _2615 * 9.9999997473787516355514526367188e-05;
        float _2623 = (-1.0) - _2622;
        float _2625 = _2622 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2621 > _2625) || ((_2621 < _2623) || ((_2620 > _2625) || ((_2620 < _2623) || ((_2619 < _2623) || (_2619 > _2625))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2820 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2621, cbModelParam._m0[17u].z, fma(_2620, cbModelParam._m0[17u].y, _2619 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2621, cbModelParam._m0[18u].z, fma(_2620, cbModelParam._m0[18u].y, _2619 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2621, cbModelParam._m0[19u].z, fma(_2620, cbModelParam._m0[19u].y, _2619 * cbModelParam._m0[19u].x))), _1889);
            frontier_phi_22_46_ladder = _2820.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2820.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2820.x * cbModelParam._m0[1u].z;
        }
        _1978 = frontier_phi_22_46_ladder_2;
        _1980 = frontier_phi_22_46_ladder_1;
        _1982 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1962 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_989, _990, _991), _1889);
        _1978 = _1962.x * cbModelParam._m0[1u].z;
        _1980 = _1962.y * cbModelParam._m0[1u].z;
        _1982 = _1962.z * cbModelParam._m0[1u].z;
    }
    float _1995 = (((_1016 * _965) + _1017) * _981) * ((cbModelParam._m0[1u].w * (_1978 - _1880)) + _1880);
    float _1997 = (((_1016 * _967) + _1017) * _981) * ((cbModelParam._m0[1u].w * (_1980 - _1882)) + _1882);
    float _1999 = (((_1016 * _968) + _1017) * _981) * ((cbModelParam._m0[1u].w * (_1982 - _1884)) + _1884);
    float _2002 = fma(_1999, cbSceneParam._m0[89u].z, fma(_1997, cbSceneParam._m0[89u].y, _1995 * cbSceneParam._m0[89u].x));
    float _2005 = fma(_1999, cbSceneParam._m0[90u].z, fma(_1997, cbSceneParam._m0[90u].y, _1995 * cbSceneParam._m0[90u].x));
    float _2008 = fma(_1999, cbSceneParam._m0[91u].z, fma(_1997, cbSceneParam._m0[91u].y, _1995 * cbSceneParam._m0[91u].x));
    vec4 _2016 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_903, _904));
    float _2018 = _2016.w;
    float _2030 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2018);
    float _2031 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2018);
    float _2032 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2018);
    uvec4 _2036 = floatBitsToUint(cbInstanceData._m0[_259 + 5u]);
    uint _2038 = _2036.x * 14u;
    uint _2039 = _2038 + 13u;
    float _2046 = _981 + (-1.0);
    float _2051 = (cbLight._m0[_2039].x * _2046) + 1.0;
    float _2052 = (cbLight._m0[_2039].y * _2046) + 1.0;
    float _2053 = (cbLight._m0[_2039].z * _2046) + 1.0;
    float _2054 = (cbLight._m0[_2039].w * _2046) + 1.0;
    uint _2055 = _2038 + 5u;
    float _2061 = isnan(1.0) ? _2052 : (isnan(_2052) ? 1.0 : min(_2052, 1.0));
    uint _2065 = _2038 + 4u;
    float _2074 = isnan(1.0) ? _2051 : (isnan(_2051) ? 1.0 : min(_2051, 1.0));
    uint _2078 = _2038 | 1u;
    float _2089 = dot(vec3(cbLight._m0[_2038].xyz), vec3(_816, _817, _818));
    float _2092 = dot(vec3(cbLight._m0[_2078].xyz), vec3(_816, _817, _818));
    float _4258 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
    float _4269 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
    float _2097 = (isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0))) * 0.3183098733425140380859375;
    float _2099 = (isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0))) * 0.3183098733425140380859375;
    float _2106 = ((cbLight._m0[_2055].x * _2061) * _2099) + (((cbLight._m0[_2065].x * _2030) * _2074) * _2097);
    float _2107 = ((_2061 * cbLight._m0[_2055].y) * _2099) + (((cbLight._m0[_2065].y * _2031) * _2074) * _2097);
    float _2108 = ((_2061 * cbLight._m0[_2055].z) * _2099) + (((cbLight._m0[_2065].z * _2032) * _2074) * _2097);
    uvec4 _2112 = floatBitsToUint(cbLight._m0[_2038 + 12u]);
    bool _2114 = _2112.x == 0u;
    float _2125;
    float _2127;
    float _2129;
    if (_2114)
    {
        _2125 = _2106;
        _2127 = _2107;
        _2129 = _2108;
    }
    else
    {
        uint _2133 = _2038 + 6u;
        float _2149 = (dot(vec3(cbLight._m0[_2038 + 2u].xyz), vec3(_816, _817, _818)) * 0.5) + 0.5;
        float _2150 = _2149 * _2149;
        float _4280 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
        float _2151 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
        float _2152 = isnan(1.0) ? _2053 : (isnan(_2053) ? 1.0 : min(_2053, 1.0));
        _2125 = (((cbLight._m0[_2133].x * 0.3183098733425140380859375) * _2151) * _2152) + _2106;
        _2127 = (((cbLight._m0[_2133].y * 0.3183098733425140380859375) * _2151) * _2152) + _2107;
        _2129 = (((cbLight._m0[_2133].z * 0.3183098733425140380859375) * _2151) * _2152) + _2108;
    }
    bool _2132 = _2112.y == 0u;
    float _2170;
    float _2172;
    float _2174;
    if (_2132)
    {
        _2170 = _2125;
        _2172 = _2127;
        _2174 = _2129;
    }
    else
    {
        uint _2343 = _2038 + 7u;
        float _2359 = (dot(vec3(cbLight._m0[_2038 + 3u].xyz), vec3(_816, _817, _818)) * 0.5) + 0.5;
        float _2360 = _2359 * _2359;
        float _4296 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
        float _2361 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
        float _2362 = isnan(1.0) ? _2054 : (isnan(_2054) ? 1.0 : min(_2054, 1.0));
        _2170 = (((cbLight._m0[_2343].x * 0.3183098733425140380859375) * _2361) * _2362) + _2125;
        _2172 = (((cbLight._m0[_2343].y * 0.3183098733425140380859375) * _2361) * _2362) + _2127;
        _2174 = (((cbLight._m0[_2343].z * 0.3183098733425140380859375) * _2361) * _2362) + _2129;
    }
    uint _2177 = _2038 + 8u;
    float _2190 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2038].w)) * _819) * 0.949999988079071044921875);
    float _2191 = _2190 * _2190;
    float _2192 = cbLight._m0[_2038].x + _895;
    float _2193 = cbLight._m0[_2038].y + _896;
    float _2194 = cbLight._m0[_2038].z + _897;
    float _2198 = inversesqrt(dot(vec3(_2192, _2193, _2194), vec3(_2192, _2193, _2194)));
    float _2199 = _2198 * _2192;
    float _2200 = _2198 * _2193;
    float _2201 = _2198 * _2194;
    float _2202 = dot(vec3(_816, _817, _818), vec3(cbLight._m0[_2038].xyz));
    float _4312 = isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0));
    float _2205 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
    float _4323 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
    float _2206 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
    float _2207 = dot(vec3(_816, _817, _818), vec3(_2199, _2200, _2201));
    float _4334 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
    float _2210 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
    float _2211 = dot(vec3(cbLight._m0[_2038].xyz), vec3(_2199, _2200, _2201));
    float _4345 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
    float _2215 = _2191 * _2191;
    float _2219 = ((_2210 * _2210) * (_2215 + (-1.0))) + 1.0;
    float _2227 = exp2(log2(1.0 - (isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0)))) * 5.0);
    float _2228 = 0.959999978542327880859375 - _962;
    float _2230 = 0.959999978542327880859375 - _963;
    float _2231 = 0.959999978542327880859375 - _964;
    float _2238 = 1.0 - _2191;
    float _2249 = (0.5 / (((_2206 * ((_2205 * _2238) + _2191)) + 9.9999999392252902907785028219223e-09) + (((_2206 * _2238) + _2191) * _2205))) * _2205;
    float _4356 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0));
    float _2251 = (isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0))) * (_2215 / ((_2219 * _2219) * 3.141590118408203125));
    uint _2265 = _2038 + 9u;
    float _2276 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2078].w)) * _819) * 0.949999988079071044921875);
    float _2277 = _2276 * _2276;
    float _2278 = cbLight._m0[_2078].x + _895;
    float _2279 = cbLight._m0[_2078].y + _896;
    float _2280 = cbLight._m0[_2078].z + _897;
    float _2284 = inversesqrt(dot(vec3(_2278, _2279, _2280), vec3(_2278, _2279, _2280)));
    float _2285 = _2284 * _2278;
    float _2286 = _2284 * _2279;
    float _2287 = _2284 * _2280;
    float _2288 = dot(vec3(_816, _817, _818), vec3(cbLight._m0[_2078].xyz));
    float _4367 = isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0));
    float _2291 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
    float _2292 = dot(vec3(_816, _817, _818), vec3(_2285, _2286, _2287));
    float _4378 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0));
    float _2295 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
    float _2296 = dot(vec3(cbLight._m0[_2078].xyz), vec3(_2285, _2286, _2287));
    float _4389 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
    float _2300 = _2277 * _2277;
    float _2304 = ((_2295 * _2295) * (_2300 + (-1.0))) + 1.0;
    float _2311 = exp2(log2(1.0 - (isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0)))) * 5.0);
    float _2318 = 1.0 - _2277;
    float _2328 = (0.5 / (((_2206 * ((_2291 * _2318) + _2277)) + 9.9999999392252902907785028219223e-09) + (((_2206 * _2318) + _2277) * _2291))) * _2291;
    float _4400 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
    float _2330 = (isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0))) * (_2300 / ((_2304 * _2304) * 3.141590118408203125));
    float _2340 = (((((_2311 * _2228) + _965) * cbLight._m0[_2265].x) * _2330) * _2061) + ((((cbLight._m0[_2177].x * _2030) * ((_2227 * _2228) + _965)) * _2251) * _2074);
    float _2341 = (((((_2311 * _2230) + _967) * cbLight._m0[_2265].y) * _2330) * _2061) + ((((cbLight._m0[_2177].y * _2031) * ((_2227 * _2230) + _967)) * _2251) * _2074);
    float _2342 = (((((_2311 * _2231) + _968) * cbLight._m0[_2265].z) * _2330) * _2061) + ((((cbLight._m0[_2177].z * _2032) * ((_2227 * _2231) + _968)) * _2251) * _2074);
    float _2404;
    float _2406;
    float _2408;
    if (_2114)
    {
        _2404 = _2340;
        _2406 = _2341;
        _2408 = _2342;
    }
    else
    {
        uint _2410 = _2038 + 2u;
        uint _2414 = _2038 + 10u;
        float _2428 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2410].w)) * _819) * 0.949999988079071044921875);
        float _2429 = _2428 * _2428;
        float _2430 = cbLight._m0[_2410].x + _895;
        float _2431 = cbLight._m0[_2410].y + _896;
        float _2432 = cbLight._m0[_2410].z + _897;
        float _2436 = inversesqrt(dot(vec3(_2430, _2431, _2432), vec3(_2430, _2431, _2432)));
        float _2437 = _2436 * _2430;
        float _2438 = _2436 * _2431;
        float _2439 = _2436 * _2432;
        float _2440 = dot(vec3(_816, _817, _818), vec3(cbLight._m0[_2410].xyz));
        float _4411 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0));
        float _2443 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
        float _2444 = dot(vec3(_816, _817, _818), vec3(_2437, _2438, _2439));
        float _4422 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
        float _2447 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
        float _2448 = dot(vec3(cbLight._m0[_2410].xyz), vec3(_2437, _2438, _2439));
        float _4433 = isnan(0.0) ? _2448 : (isnan(_2448) ? 0.0 : max(_2448, 0.0));
        float _2452 = _2429 * _2429;
        float _2456 = ((_2447 * _2447) * (_2452 + (-1.0))) + 1.0;
        float _2463 = exp2(log2(1.0 - (isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0)))) * 5.0);
        float _2470 = 1.0 - _2429;
        float _2480 = (0.5 / (((_2206 * ((_2443 * _2470) + _2429)) + 9.9999999392252902907785028219223e-09) + (((_2206 * _2470) + _2429) * _2443))) * _2443;
        float _4444 = isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0));
        float _2482 = (isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0))) * (_2452 / ((_2456 * _2456) * 3.141590118408203125));
        float _2483 = isnan(1.0) ? _2053 : (isnan(_2053) ? 1.0 : min(_2053, 1.0));
        _2404 = (((((_2463 * _2228) + _965) * cbLight._m0[_2414].x) * _2482) * _2483) + _2340;
        _2406 = (((((_2463 * _2230) + _967) * cbLight._m0[_2414].y) * _2482) * _2483) + _2341;
        _2408 = (((((_2463 * _2231) + _968) * cbLight._m0[_2414].z) * _2482) * _2483) + _2342;
    }
    float _2518;
    float _2520;
    float _2522;
    if (_2132)
    {
        _2518 = _2404;
        _2520 = _2406;
        _2522 = _2408;
    }
    else
    {
        uint _2529 = _2038 + 3u;
        uint _2533 = _2038 + 11u;
        float _2547 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2529].w)) * _819) * 0.949999988079071044921875);
        float _2548 = _2547 * _2547;
        float _2549 = cbLight._m0[_2529].x + _895;
        float _2550 = cbLight._m0[_2529].y + _896;
        float _2551 = cbLight._m0[_2529].z + _897;
        float _2555 = inversesqrt(dot(vec3(_2549, _2550, _2551), vec3(_2549, _2550, _2551)));
        float _2556 = _2555 * _2549;
        float _2557 = _2555 * _2550;
        float _2558 = _2555 * _2551;
        float _2559 = dot(vec3(_816, _817, _818), vec3(cbLight._m0[_2529].xyz));
        float _4460 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0));
        float _2562 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
        float _2563 = dot(vec3(_816, _817, _818), vec3(_2556, _2557, _2558));
        float _4471 = isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0));
        float _2566 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
        float _2567 = dot(vec3(cbLight._m0[_2529].xyz), vec3(_2556, _2557, _2558));
        float _4482 = isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0));
        float _2571 = _2548 * _2548;
        float _2575 = ((_2566 * _2566) * (_2571 + (-1.0))) + 1.0;
        float _2582 = exp2(log2(1.0 - (isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0)))) * 5.0);
        float _2589 = 1.0 - _2548;
        float _2599 = (0.5 / (((_2206 * ((_2562 * _2589) + _2548)) + 9.9999999392252902907785028219223e-09) + (((_2206 * _2589) + _2548) * _2562))) * _2562;
        float _4493 = isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0));
        float _2601 = (isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0))) * (_2571 / ((_2575 * _2575) * 3.141590118408203125));
        float _2602 = isnan(1.0) ? _2054 : (isnan(_2054) ? 1.0 : min(_2054, 1.0));
        _2518 = (((((_2582 * _2228) + _965) * cbLight._m0[_2533].x) * _2601) * _2602) + _2404;
        _2520 = (((((_2582 * _2230) + _967) * cbLight._m0[_2533].y) * _2601) * _2602) + _2406;
        _2522 = (((((_2582 * _2231) + _968) * cbLight._m0[_2533].z) * _2601) * _2602) + _2408;
    }
    float _2737;
    float _2739;
    float _2741;
    float _2743;
    float _2745;
    float _2747;
    if (_2036.y == 0u)
    {
        float _2677 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2678 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2677;
        float _2679 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2677;
        float _2680 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2677;
        uvec4 _2692 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2693 = _2692.x;
        uint _2704 = uint((float(_2692.y) * floor(float(uint(cbSceneParam._m0[85u].y * _904) / _2693))) + floor(float(uint(cbSceneParam._m0[85u].x * _903) / _2693)));
        float _2714 = (log2(_2680 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2715 = isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : max(_2714, 0.0));
        uint _2718 = uint(isnan(14.0) ? _2715 : (isnan(_2715) ? 14.0 : min(_2715, 14.0)));
        uvec4 _2723 = texelFetch(g_lightClusterGridBuffer, int(((_2718 << 2u) + (_2704 << 6u)) >> 2u));
        uint _2724 = _2723.x;
        uint _2725 = _2692.z;
        float _2825;
        float _2827;
        float _2829;
        float _2831;
        float _2833;
        float _2835;
        if (((((1u << ((_2725 >> 4u) & 15u)) + 4294967295u) & _2724) == 0u) || ((_2725 & 240u) == 0u))
        {
            _2825 = 0.0;
            _2827 = 0.0;
            _2829 = 0.0;
            _2831 = 0.0;
            _2833 = 0.0;
            _2835 = 0.0;
        }
        else
        {
            float _2826;
            float _2828;
            float _2830;
            float _2832;
            float _2834;
            float _2836;
            float _2970 = 0.0;
            float _2971 = 0.0;
            float _2972 = 0.0;
            float _2973 = 0.0;
            float _2974 = 0.0;
            float _2975 = 0.0;
            uint _2976 = 0u;
            uint _2985;
            bool _2986;
            for (;;)
            {
                _2985 = texelFetch(g_lightClassification, int((((_2718 << 5u) + (_2704 << 9u)) + (_2976 << 2u)) >> 2u)).x;
                _2986 = _2985 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2986)
                {
                    frontier_phi_61_pred = _2970;
                    frontier_phi_61_pred_1 = _2975;
                    frontier_phi_61_pred_2 = _2974;
                    frontier_phi_61_pred_3 = _2973;
                    frontier_phi_61_pred_4 = _2972;
                    frontier_phi_61_pred_5 = _2971;
                }
                else
                {
                    float _3094;
                    float _3095;
                    float _3096;
                    float _3097;
                    float _3098;
                    float _3099;
                    uint _3100;
                    _3094 = _2970;
                    _3095 = _2971;
                    _3096 = _2972;
                    _3097 = _2973;
                    _3098 = _2974;
                    _3099 = _2975;
                    _3100 = _2985;
                    float _3026;
                    float _3027;
                    float _3028;
                    float _3029;
                    float _3030;
                    float _3031;
                    for (;;)
                    {
                        uint _3104 = uint(findLSB(_3100)) + (_2976 << 5u);
                        uint _3101 = (_3100 + 4294967295u) & _3100;
                        uint _3106 = _3104 * 48u;
                        vec4 _3120 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3106)).x, texelFetch(g_PointLightRenderingBuffer, int(_3106 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3106 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3106 + 3u)).x));
                        uint _3126 = (_3104 * 48u) + 4u;
                        vec4 _3139 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3126)).x, texelFetch(g_PointLightRenderingBuffer, int(_3126 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3126 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3126 + 3u)).x));
                        uint _3145 = (_3104 * 48u) + 8u;
                        vec3 _3156 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3145)).x, texelFetch(g_PointLightRenderingBuffer, int(_3145 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3145 + 2u)).x));
                        float _3160 = _3120.x - _2678;
                        float _3161 = _3120.y - _2679;
                        float _3162 = _3120.z - _2680;
                        float _3163 = dot(vec3(_3160, _3161, _3162), vec3(_3160, _3161, _3162));
                        float _3166 = inversesqrt(_3163);
                        float _3167 = _3166 * _3160;
                        float _3168 = _3166 * _3161;
                        float _3169 = _3166 * _3162;
                        float _3170 = dot(vec3(_922, _925, _928), vec3(_3167, _3168, _3169));
                        float _3175 = 1.0 - (_3163 * _3120.w);
                        float _4519 = isnan(0.0) ? _3175 : (isnan(_3175) ? 0.0 : max(_3175, 0.0));
                        float _3176 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
                        float _3177 = sqrt(_3163) * _3139.w;
                        float _3180 = 1.39999997615814208984375 / (_3177 + 1.39999997615814208984375);
                        float _3181 = _3180 * _3180;
                        float _3184 = ((1.0 - _3181) * _3170) + _3181;
                        float _3187 = _3177 * _3177;
                        float _3191 = ((isnan(0.0) ? _3184 : (isnan(_3184) ? 0.0 : max(_3184, 0.0))) * _3176) / ((_3187 * 0.699999988079071044921875) + 1.0);
                        float _3195 = (-0.0) - _2678;
                        float _3196 = (-0.0) - _2679;
                        float _3197 = (-0.0) - _2680;
                        float _3201 = inversesqrt(dot(vec3(_3195, _3196, _3197), vec3(_3195, _3196, _3197)));
                        float _3202 = _3201 * _3195;
                        float _3203 = _3201 * _3196;
                        float _3204 = _3201 * _3197;
                        float _3212 = exp2(log2(1.0 / ((_3187 * 3.5) + 5.0)) * 0.25);
                        float _3213 = 1.0 - _997;
                        float _3220 = sqrt(1.0 - ((1.0 - (_3213 * _3213)) * (1.0 - (_3212 * _3212))));
                        float _3221 = _3220 * _3220;
                        float _3222 = _3221 * _3221;
                        float _3223 = _3202 + _3167;
                        float _3224 = _3203 + _3168;
                        float _3225 = _3204 + _3169;
                        float _3229 = inversesqrt(dot(vec3(_3223, _3224, _3225), vec3(_3223, _3224, _3225)));
                        float _3233 = dot(vec3(_922, _925, _928), vec3(_3202, _3203, _3204));
                        float _4535 = isnan(0.0) ? _3233 : (isnan(_3233) ? 0.0 : max(_3233, 0.0));
                        float _3236 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
                        float _3237 = dot(vec3(_922, _925, _928), vec3(_3229 * _3223, _3229 * _3224, _3229 * _3225));
                        float _4546 = isnan(0.0) ? _3237 : (isnan(_3237) ? 0.0 : max(_3237, 0.0));
                        float _3240 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
                        float _3244 = ((_3240 * _3240) * (_3222 + (-1.0))) + 1.0;
                        float _3245 = _3180 * _3221;
                        float _3246 = _3245 * _3245;
                        float _3249 = ((1.0 - _3246) * _3170) + _3246;
                        float _4557 = isnan(0.0) ? _3249 : (isnan(_3249) ? 0.0 : max(_3249, 0.0));
                        float _3250 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
                        float _3251 = 1.0 - _3221;
                        float _3261 = (0.5 / (((_3250 * ((_3236 * _3251) + _3221)) + 9.9999999392252902907785028219223e-09) + (((_3250 * _3251) + _3221) * _3236))) * _3250;
                        float _4568 = isnan(0.0) ? _3261 : (isnan(_3261) ? 0.0 : max(_3261, 0.0));
                        float _3272 = (((_3222 * 3.1415927410125732421875) * (isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0)))) / ((_3244 * _3244) * ((_3187 * 2.1991131305694580078125) + 3.141590118408203125))) * _3176;
                        _3029 = (_3191 * _3139.x) + _3097;
                        _3030 = (_3191 * _3139.y) + _3098;
                        _3031 = (_3191 * _3139.z) + _3099;
                        _3026 = (_3272 * _3156.x) + _3094;
                        _3027 = (_3272 * _3156.y) + _3095;
                        _3028 = (_3272 * _3156.z) + _3096;
                        if (_3101 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3094 = _3026;
                            _3095 = _3027;
                            _3096 = _3028;
                            _3097 = _3029;
                            _3098 = _3030;
                            _3099 = _3031;
                            _3100 = _3101;
                        }
                    }
                    frontier_phi_61_pred = _3026;
                    frontier_phi_61_pred_1 = _3031;
                    frontier_phi_61_pred_2 = _3030;
                    frontier_phi_61_pred_3 = _3029;
                    frontier_phi_61_pred_4 = _3028;
                    frontier_phi_61_pred_5 = _3027;
                }
                _2826 = frontier_phi_61_pred;
                _2836 = frontier_phi_61_pred_1;
                _2834 = frontier_phi_61_pred_2;
                _2832 = frontier_phi_61_pred_3;
                _2830 = frontier_phi_61_pred_4;
                _2828 = frontier_phi_61_pred_5;
                uint _2977 = _2976 + 1u;
                if (_2977 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2970 = _2826;
                    _2971 = _2828;
                    _2972 = _2830;
                    _2973 = _2832;
                    _2974 = _2834;
                    _2975 = _2836;
                    _2976 = _2977;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2825 = _2826;
            _2827 = _2828;
            _2829 = _2830;
            _2831 = _2832;
            _2833 = _2834;
            _2835 = _2836;
        }
        uvec4 _2839 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2840 = _2839.z;
        uint _2842 = (_2840 >> 8u) & 15u;
        float _2938;
        float _2940;
        float _2942;
        float _2944;
        float _2946;
        float _2948;
        if (((4294967295u << _2842) & _2724) == 0u)
        {
            _2938 = _2825;
            _2940 = _2827;
            _2942 = _2829;
            _2944 = _2831;
            _2946 = _2833;
            _2948 = _2835;
        }
        else
        {
            float _2963 = inversesqrt(dot(vec3(_2678, _2679, _2680), vec3(_2678, _2679, _2680)));
            float _2964 = _2963 * _2678;
            float _2965 = _2963 * _2679;
            float _2966 = _2963 * _2680;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2842 < ((_2840 >> 12u) & 15u))
            {
                float _2939;
                float _2941;
                float _2943;
                float _2945;
                float _2947;
                float _2949;
                float _3077 = _2825;
                float _3078 = _2827;
                float _3079 = _2829;
                float _3080 = _2831;
                float _3081 = _2833;
                float _3082 = _2835;
                uint _3083 = _2842;
                uint _3092;
                bool _3093;
                for (;;)
                {
                    _3092 = texelFetch(g_lightClassification, int((((_2718 << 5u) + (_2704 << 9u)) + (_3083 << 2u)) >> 2u)).x;
                    _3093 = _3092 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3093)
                    {
                        frontier_phi_67_pred = _3080;
                        frontier_phi_67_pred_1 = _3081;
                        frontier_phi_67_pred_2 = _3082;
                        frontier_phi_67_pred_3 = _3079;
                        frontier_phi_67_pred_4 = _3078;
                        frontier_phi_67_pred_5 = _3077;
                    }
                    else
                    {
                        float _3277;
                        float _3278;
                        float _3279;
                        float _3280;
                        float _3281;
                        float _3282;
                        float _3570;
                        float _3571;
                        float _3572;
                        float _3573;
                        float _3574;
                        float _3575;
                        float _3290 = _3077;
                        float _3291 = _3078;
                        float _3292 = _3079;
                        float _3293 = _3080;
                        float _3294 = _3081;
                        float _3295 = _3082;
                        uint _3296 = _3092;
                        uint _3297;
                        vec4 _3322;
                        float _3323;
                        vec4 _3338;
                        vec3 _3350;
                        vec4 _3365;
                        vec4 _3380;
                        float _3426;
                        bool _3427;
                        for (;;)
                        {
                            uint _3307 = ((_3083 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3296));
                            _3297 = (_3296 + 4294967295u) & _3296;
                            uint _3309 = _3307 * 40u;
                            _3322 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3309)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 3u)).x));
                            _3323 = _3322.w;
                            uint _3325 = (_3307 * 40u) + 4u;
                            _3338 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3325)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3325 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3325 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3325 + 3u)).x));
                            uint _3340 = (_3307 * 40u) + 8u;
                            _3350 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3340)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 2u)).x));
                            uint _3352 = (_3307 * 40u) + 16u;
                            _3365 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3352)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3352 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3352 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3352 + 3u)).x));
                            uint _3367 = (_3307 * 40u) + 20u;
                            _3380 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3367)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 3u)).x));
                            uint _3382 = (_3307 * 40u) + 24u;
                            vec4 _3395 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3382)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 3u)).x));
                            uint _3401 = (_3307 * 40u) + 28u;
                            vec4 _3414 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3401)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 3u)).x));
                            _3426 = fma(_2680, _3414.z, fma(_2679, _3414.y, _3414.x * _2678)) + _3414.w;
                            _3427 = !((fma(_2680, _3395.z, fma(_2679, _3395.y, _3395.x * _2678)) + _3395.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3427)
                            {
                                float _3454 = _3322.x - _2678;
                                float _3455 = _3322.y - _2679;
                                float _3456 = _3322.z - _2680;
                                float _3457 = dot(vec3(_3454, _3455, _3456), vec3(_3454, _3455, _3456));
                                float _3460 = inversesqrt(_3457);
                                float _3461 = _3460 * _3454;
                                float _3462 = _3460 * _3455;
                                float _3463 = _3460 * _3456;
                                float _3467 = 1.0 - (_3457 / (_3323 * _3323));
                                float _4579 = isnan(0.0) ? _3467 : (isnan(_3467) ? 0.0 : max(_3467, 0.0));
                                float _3468 = isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0));
                                float _3472 = sqrt(_3457) * _3338.w;
                                float _3474 = 1.39999997615814208984375 / (_3472 + 1.39999997615814208984375);
                                float _3475 = _3474 * _3474;
                                float _3478 = ((1.0 - _3475) * dot(vec3(_3461, _3462, _3463), vec3(_922, _925, _928))) + _3475;
                                float _3481 = _3472 * _3472;
                                float _3485 = (fma(_2680, _3365.z, fma(_2679, _3365.y, _3365.x * _2678)) + _3365.w) / _3426;
                                float _3486 = (fma(_2680, _3380.z, fma(_2679, _3380.y, _3380.x * _2678)) + _3380.w) / _3426;
                                float _3490 = 1.0 - dot(vec2(_3485, _3486), vec2(_3485, _3486));
                                float _4595 = isnan(0.0) ? _3490 : (isnan(_3490) ? 0.0 : max(_3490, 0.0));
                                float _3491 = isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0));
                                float _3492 = _3491 * (((isnan(0.0) ? _3478 : (isnan(_3478) ? 0.0 : max(_3478, 0.0))) * _3468) / ((_3481 * 0.699999988079071044921875) + 1.0));
                                float _3504 = exp2(log2(1.0 / ((_3481 * 3.5) + 5.0)) * 0.25);
                                float _3505 = 1.0 - _997;
                                float _3512 = sqrt(1.0 - ((1.0 - (_3505 * _3505)) * (1.0 - (_3504 * _3504))));
                                float _3513 = _3512 * _3512;
                                float _3514 = _3513 * _3513;
                                float _3515 = _3461 - _2964;
                                float _3516 = _3462 - _2965;
                                float _3517 = _3463 - _2966;
                                float _3521 = inversesqrt(dot(vec3(_3515, _3516, _3517), vec3(_3515, _3516, _3517)));
                                float _3525 = dot(vec3(_922, _925, _928), vec3((-0.0) - _2964, (-0.0) - _2965, (-0.0) - _2966));
                                float _4606 = isnan(0.0) ? _3525 : (isnan(_3525) ? 0.0 : max(_3525, 0.0));
                                float _3528 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
                                float _3529 = dot(vec3(_922, _925, _928), vec3(_3521 * _3515, _3521 * _3516, _3521 * _3517));
                                float _4617 = isnan(0.0) ? _3529 : (isnan(_3529) ? 0.0 : max(_3529, 0.0));
                                float _3532 = isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0));
                                float _3536 = ((_3532 * _3532) * (_3514 + (-1.0))) + 1.0;
                                float _3537 = _3474 * _3513;
                                float _3538 = _3537 * _3537;
                                float _3544 = ((1.0 - _3538) * dot(vec3(_922, _925, _928), vec3(_3461, _3462, _3463))) + _3538;
                                float _4628 = isnan(0.0) ? _3544 : (isnan(_3544) ? 0.0 : max(_3544, 0.0));
                                float _3545 = isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0));
                                float _3546 = 1.0 - _3513;
                                float _3556 = (0.5 / (((_3545 * ((_3528 * _3546) + _3513)) + 9.9999999392252902907785028219223e-09) + (((_3545 * _3546) + _3513) * _3528))) * _3545;
                                float _4639 = isnan(0.0) ? _3556 : (isnan(_3556) ? 0.0 : max(_3556, 0.0));
                                float _3566 = (_3491 * _3468) * (((_3514 * 3.1415927410125732421875) * (isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0)))) / ((_3536 * _3536) * ((_3481 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3566 * _3350.x;
                                frontier_phi_73_pred_1 = _3566 * _3350.y;
                                frontier_phi_73_pred_2 = _3492 * _3338.z;
                                frontier_phi_73_pred_3 = _3492 * _3338.y;
                                frontier_phi_73_pred_4 = _3492 * _3338.x;
                                frontier_phi_73_pred_5 = _3566 * _3350.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3570 = frontier_phi_73_pred;
                            _3571 = frontier_phi_73_pred_1;
                            _3575 = frontier_phi_73_pred_2;
                            _3574 = frontier_phi_73_pred_3;
                            _3573 = frontier_phi_73_pred_4;
                            _3572 = frontier_phi_73_pred_5;
                            _3280 = _3573 + _3293;
                            _3281 = _3574 + _3294;
                            _3282 = _3575 + _3295;
                            _3277 = _3570 + _3290;
                            _3278 = _3571 + _3291;
                            _3279 = _3572 + _3292;
                            if (_3297 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3290 = _3277;
                                _3291 = _3278;
                                _3292 = _3279;
                                _3293 = _3280;
                                _3294 = _3281;
                                _3295 = _3282;
                                _3296 = _3297;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3280;
                        frontier_phi_67_pred_1 = _3281;
                        frontier_phi_67_pred_2 = _3282;
                        frontier_phi_67_pred_3 = _3279;
                        frontier_phi_67_pred_4 = _3278;
                        frontier_phi_67_pred_5 = _3277;
                    }
                    _2945 = frontier_phi_67_pred;
                    _2947 = frontier_phi_67_pred_1;
                    _2949 = frontier_phi_67_pred_2;
                    _2943 = frontier_phi_67_pred_3;
                    _2941 = frontier_phi_67_pred_4;
                    _2939 = frontier_phi_67_pred_5;
                    uint _3084 = _3083 + 1u;
                    if (_3084 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3077 = _2939;
                        _3078 = _2941;
                        _3079 = _2943;
                        _3080 = _2945;
                        _3081 = _2947;
                        _3082 = _2949;
                        _3083 = _3084;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2947;
                frontier_phi_55_56_ladder_1 = _2949;
                frontier_phi_55_56_ladder_2 = _2945;
                frontier_phi_55_56_ladder_3 = _2943;
                frontier_phi_55_56_ladder_4 = _2941;
                frontier_phi_55_56_ladder_5 = _2939;
            }
            else
            {
                frontier_phi_55_56_ladder = _2833;
                frontier_phi_55_56_ladder_1 = _2835;
                frontier_phi_55_56_ladder_2 = _2831;
                frontier_phi_55_56_ladder_3 = _2829;
                frontier_phi_55_56_ladder_4 = _2827;
                frontier_phi_55_56_ladder_5 = _2825;
            }
            _2938 = frontier_phi_55_56_ladder_5;
            _2940 = frontier_phi_55_56_ladder_4;
            _2942 = frontier_phi_55_56_ladder_3;
            _2944 = frontier_phi_55_56_ladder_2;
            _2946 = frontier_phi_55_56_ladder;
            _2948 = frontier_phi_55_56_ladder_1;
        }
        float _2953 = isnan(1.0) ? _981 : (isnan(_981) ? 1.0 : min(_981, 1.0));
        _2737 = (_2953 * _2944) + _2170;
        _2739 = (_2953 * _2946) + _2172;
        _2741 = (_2953 * _2948) + _2174;
        _2743 = ((_2938 * _965) * _2953) + _2518;
        _2745 = ((_2940 * _967) * _2953) + _2520;
        _2747 = ((_2942 * _968) * _2953) + _2522;
    }
    else
    {
        _2737 = _2170;
        _2739 = _2172;
        _2741 = _2174;
        _2743 = _2518;
        _2745 = _2520;
        _2747 = _2522;
    }
    float _4655 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
    float _4666 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
    float _4677 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
    uint _2767 = _259 + 6u;
    float _2775 = _903 / cbSceneParam._m0[86u].x;
    float _2776 = _904 / cbSceneParam._m0[86u].y;
    vec4 _2790 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2775, _2776, (log2((isnan(cbSceneParam._m0[77u].w) ? _838 : (isnan(_838) ? cbSceneParam._m0[77u].w : min(_838, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2792 = _2790.x;
    float _2793 = _2790.y;
    float _2794 = _2790.z;
    float _2795 = _2790.w;
    float _2888;
    float _2890;
    float _2892;
    float _2894;
    if (_838 > cbSceneParam._m0[78u].w)
    {
        float _2850 = isnan(_838) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _838 : min(cbSceneParam._m0[80u].w, _838));
        float _2851 = _2850 / _838;
        float _2862 = _2851 * _888;
        float _2863 = _889 * _2851;
        float _2864 = (-0.0) - _2863;
        float _2866 = _2851 * _890;
        float _2868 = (cbSceneParam._m0[77u].w * _2864) / _2850;
        float _2869 = _2868 + cbSceneParam._m0[79u].w;
        float _2870 = cbSceneParam._m0[79u].w - _2863;
        float _2876 = sqrt(((_2862 * _2862) + (_2863 * _2863)) + (_2866 * _2866));
        float _2879 = (1.0 - (cbSceneParam._m0[77u].w / _2850)) * _2876;
        float _2884 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2886 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3039;
        if (abs((_2864 - _2868) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3039 = ((((_2869 > 0.0) ? exp2(_2884 * _2869) : (2.0 - exp2(_2886 * _2869))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2879;
        }
        else
        {
            float _2999 = 1.0 / cbSceneParam._m0[80u].x;
            float _3000 = isnan(_2870) ? _2869 : (isnan(_2869) ? _2870 : max(_2869, _2870));
            float _3001 = isnan(_2870) ? _2869 : (isnan(_2869) ? _2870 : min(_2869, _2870));
            float _3010 = isnan(0.0) ? _3000 : (isnan(_3000) ? 0.0 : min(_3000, 0.0));
            float _3011 = isnan(0.0) ? _3001 : (isnan(_3001) ? 0.0 : min(_3001, 0.0));
            _3039 = ((abs(_2876 / _2864) * cbSceneParam._m0[80u].y) * ((((_3010 - _3011) * 2.0) - ((exp2(_2884 * (isnan(0.0) ? _3000 : (isnan(_3000) ? 0.0 : max(_3000, 0.0)))) - exp2(_2884 * (isnan(0.0) ? _3001 : (isnan(_3001) ? 0.0 : max(_3001, 0.0))))) * _2999)) - ((exp2(_2886 * _3010) - exp2(_2886 * _3011)) * _2999))) + (_2879 * cbSceneParam._m0[80u].z);
        }
        vec4 _3041 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2775, _2776, 1.0), 0.0);
        float _3050 = exp2((_3039 * (-1.44269502162933349609375)) * (1.0 - _3041.w));
        float _3051 = log2(_3050);
        float _3067 = log2(_2795);
        _2888 = (exp2(_3067 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3051 * cbSceneParam._m0[78u].x)) * _3041.x) / cbSceneParam._m0[78u].x)) + _2792;
        _2890 = (exp2(_3067 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3051 * cbSceneParam._m0[78u].y)) * _3041.y) / cbSceneParam._m0[78u].y)) + _2793;
        _2892 = (exp2(_3067 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3051 * cbSceneParam._m0[78u].z)) * _3041.z) / cbSceneParam._m0[78u].z)) + _2794;
        _2894 = _3050 * _2795;
    }
    else
    {
        _2888 = _2792;
        _2890 = _2793;
        _2892 = _2794;
        _2894 = _2795;
    }
    float _2906 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2907 = _2906 == 3.0;
    float _2908 = log2(_2894);
    float _2915 = exp2(_2908 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0))) * (_2737 + ((isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0))) * _981))) + ((_2743 + ((isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0))) * _1789)) * cbPerFrame._m0[3u].x));
    float _2916 = exp2(_2908 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0))) * (_2739 + ((isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0))) * _981))) + ((_2745 + ((isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0))) * _1789)) * cbPerFrame._m0[3u].x));
    float _2917 = exp2(_2908 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0))) * (_2741 + ((isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0))) * _981))) + ((_2747 + ((isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0))) * _1789)) * cbPerFrame._m0[3u].x));
    float _2926 = (_2906 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2926 * (_2907 ? _2915 : (_2915 + (cbSceneParam._m0[72u].w * _2888)));
    SV_Target.y = _2926 * (_2907 ? _2916 : (_2916 + (cbSceneParam._m0[72u].w * _2890)));
    SV_Target.z = _2926 * (_2907 ? _2917 : (_2917 + (cbSceneParam._m0[72u].w * _2892)));
    SV_Target.w = cbInstanceData._m0[_2767].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2767].w;
}


