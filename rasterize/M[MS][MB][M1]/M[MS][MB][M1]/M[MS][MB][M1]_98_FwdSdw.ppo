#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1189;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _208 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _209 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _210 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _216 = inversesqrt(dot(vec3(_208, _209, _210), vec3(_208, _209, _210)));
    float _217 = _216 * _208;
    float _218 = _216 * _209;
    float _219 = _216 * _210;
    float _223 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _224 = _223 * NORMAL.x;
    float _225 = _223 * NORMAL.y;
    float _226 = _223 * NORMAL.z;
    float _230 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _231 = _230 * TANGENT.x;
    float _232 = _230 * TANGENT.y;
    float _233 = _230 * TANGENT.z;
    uint _236 = uint(roundEven(NORMAL.w)) * 13u;
    uint _242 = _236 + 1u;
    uint _246 = _236 + 2u;
    float _255 = sqrt(((cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x) + (cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x)) + (cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x));
    float _256 = _255 * TEXCOORD.z;
    float _257 = _255 * TEXCOORD.w;
    vec4 _277 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _283 = _277.x * cbMtdParam._m0[11u].x;
    float _284 = _277.y * cbMtdParam._m0[11u].y;
    float _285 = _277.z * cbMtdParam._m0[11u].z;
    vec4 _304 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _256) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _257) + cbTextureTilingScale._m0[5u].w));
    vec4 _342 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _344 = _342.x;
    float _356 = dot(vec4(_344, _342.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _373 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_344 - _356) * cbMtdParam._m0[24u].y) + _356) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3800 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _374 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
    float _381 = (_374 * ((_304.x * cbMtdParam._m0[12u].x) - _283)) + _283;
    float _382 = (_374 * ((_304.y * cbMtdParam._m0[12u].y) - _284)) + _284;
    float _383 = (_374 * ((_304.z * cbMtdParam._m0[12u].z) - _285)) + _285;
    vec4 _401 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _256) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _257) + cbTextureTilingScale._m0[4u].w));
    vec4 _418 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _420 = _418.x;
    float _421 = _418.y;
    float _422 = _418.z;
    float _431 = ((_401.z - _422) * _374) + _422;
    float _434 = ((((_401.x - _420) * _374) + _420) * 2.0) + (-1.0);
    float _436 = ((((_401.y - _421) * _374) + _421) * 2.0) + (-1.0);
    float _437 = dot(vec2(_434, _436), vec2(_434, _436));
    float _3811 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _442 = sqrt(1.0 - (isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0))));
    vec4 _458 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _470 = (((_458.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _434;
    float _471 = (((_458.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _436;
    float _474 = fma(_442, _224, fma(_471, _231, _470 * _217));
    float _477 = fma(_442, _225, fma(_471, _232, _470 * _218));
    float _480 = fma(_442, _226, fma(_471, _233, _470 * _219));
    float _484 = inversesqrt(dot(vec3(_474, _477, _480), vec3(_474, _477, _480)));
    vec4 _511 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _256) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _257) + cbTextureTilingScale._m0[11u].w));
    float _513 = _511.x;
    float _514 = 1.0 - _513;
    float _520 = (cbMtdParam._m0[19u].x + dot(vec4(_484 * _474, _484 * _477, _484 * _480, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_513 - _514) * cbMtdParam._m0[24u].z) + _514) * cbMtdParam._m0[21u].z);
    float _3822 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _521 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
    float _528 = (_521 * (cbMtdParam._m0[17u].x - _381)) + _381;
    float _529 = (_521 * (cbMtdParam._m0[17u].y - _382)) + _382;
    float _530 = (_521 * (cbMtdParam._m0[17u].z - _383)) + _383;
    vec4 _542 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _556 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _558 = _556.x;
    float _576 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _256) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _257) + cbTextureTilingScale._m0[9u].w)).x - _558) * _374) + _558;
    float _580 = ((_542.x - _576) * cbMtdParam._m0[19u].z) + _576;
    float _582 = _580 - (_580 * _521);
    float _586 = (cbMtdParam._m0[19u].w * (_458.z - _431)) + _431;
    vec4 _599 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _256) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _257) + cbTextureTilingScale._m0[15u].w));
    float _606 = (_599.x * 2.0) + (-1.0);
    float _607 = (_599.y * 2.0) + (-1.0);
    float _608 = dot(vec2(_606, _607), vec2(_606, _607));
    float _3833 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _616 = ((_599.z - _586) * _521) + _586;
    float _626 = ((sqrt(1.0 - (isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0)))) - _442) * _521) + _442;
    float _629 = (((_606 - _470) * _521) + _470) + (cbMtdParam._m0[21u].x * _470);
    float _630 = (((_607 - _471) * _521) + _471) + (cbMtdParam._m0[21u].x * _471);
    float _635 = cbMtdParam._m0[22u].x + _458.w;
    float _638 = fma(_626, _224, fma(_630, _231, _629 * _217));
    float _641 = fma(_626, _225, fma(_630, _232, _629 * _218));
    float _644 = fma(_626, _226, fma(_630, _233, _629 * _219));
    float _648 = inversesqrt(dot(vec3(_638, _641, _644), vec3(_638, _641, _644)));
    float _649 = _648 * _638;
    float _650 = _648 * _641;
    float _651 = _648 * _644;
    float _3844 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _652 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
    float _3855 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _3866 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _3877 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _3888 = isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : max(_530, 0.0));
    float _3899 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
    float _657 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
    float _671 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _712 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _722 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _712);
    float _723 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _712);
    float _724 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _712);
    float _728 = inversesqrt(dot(vec3(_722, _723, _724), vec3(_722, _723, _724)));
    float _729 = _722 * _728;
    float _730 = _723 * _728;
    float _731 = _724 * _728;
    float _737 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _738 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _756 = fma(_651, cbSceneParam._m0[5u].z, fma(_650, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _649));
    float _759 = fma(_651, cbSceneParam._m0[6u].z, fma(_650, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _649));
    float _762 = fma(_651, cbSceneParam._m0[7u].z, fma(_650, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _649));
    uint _776 = (_236 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _782 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0)))) * cbInstanceData._m0[_776].x;
    float _783 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0)))) * cbInstanceData._m0[_776].y;
    float _784 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0)))) * cbInstanceData._m0[_776].z;
    float _3910 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _785 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
    float _3921 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
    float _786 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
    float _3932 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _787 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
    float _788 = 1.0 - _657;
    float _789 = _785 * _788;
    float _790 = _786 * _788;
    float _791 = _787 * _788;
    float _796 = (_785 + (-0.039999999105930328369140625)) * _657;
    float _797 = (_786 + (-0.039999999105930328369140625)) * _657;
    float _798 = (_787 + (-0.039999999105930328369140625)) * _657;
    float _799 = _796 + 0.039999999105930328369140625;
    float _801 = _797 + 0.039999999105930328369140625;
    float _802 = _798 + 0.039999999105930328369140625;
    vec4 _811 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _737, cbSceneParam._m0[86u].y * _738));
    float _815 = ((isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0))) * TEXCOORD_5.w) * _811.x;
    float _816 = dot(vec3(_649, _650, _651), vec3(_729, _730, _731));
    float _819 = _816 * 2.0;
    float _823 = (_819 * _649) - _729;
    float _824 = (_819 * _650) - _730;
    float _825 = (_819 * _651) - _731;
    float _829 = abs(dot(vec3(_729, _730, _731), vec3(_649, _650, _651)));
    float _3943 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
    float _831 = sqrt(_652);
    float _844 = exp2((_831 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_831 * 3.0));
    float _850 = (1.0 - _844) * ((_831 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _851 = _844 * _831;
    float _879 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _883 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _887 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1188;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _913 = fma(_887, cbModelParam._m0[26u].z, fma(_883, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _879));
        float _917 = fma(_887, cbModelParam._m0[27u].z, fma(_883, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _879));
        float _921 = fma(_887, cbModelParam._m0[28u].z, fma(_883, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _879));
        float _946 = _879 + _649;
        float _947 = _883 + _650;
        float _948 = _887 + _651;
        float _958 = fma(_948, cbModelParam._m0[26u].z, fma(_947, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _946)) - _913;
        float _959 = fma(_948, cbModelParam._m0[27u].z, fma(_947, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _946)) - _917;
        float _960 = fma(_948, cbModelParam._m0[28u].z, fma(_947, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _946)) - _921;
        float _964 = inversesqrt(dot(vec3(_958, _959, _960), vec3(_958, _959, _960)));
        float _977 = ((_964 * _958) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_913 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _978 = ((_964 * _959) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_917 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _979 = ((_964 * _960) / cbModelParam._m0[34u].z) + ((((((_921 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _982 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_977, _978, _979), 0.0);
        vec4 _989 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_977, _978, _979), 0.0);
        vec4 _996 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_977, _978, _979), 0.0);
        vec4 _1003 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_977, _978, _979), 0.0);
        float _1016 = exp2((_982.w + (-0.5)) * 20.0) * 2.0;
        float _1017 = _1016 * (_982.x + (-0.5));
        float _1018 = _1016 * (_982.y + (-0.5));
        float _1019 = _1016 * (_982.z + (-0.5));
        float _1026 = exp2((_989.w + (-0.5)) * 20.0) * 2.0;
        float _1027 = _1026 * (_989.x + (-0.5));
        float _1028 = _1026 * (_989.y + (-0.5));
        float _1029 = _1026 * (_989.z + (-0.5));
        float _1036 = exp2((_996.w + (-0.5)) * 20.0) * 2.0;
        float _1037 = _1036 * (_996.x + (-0.5));
        float _1038 = _1036 * (_996.y + (-0.5));
        float _1039 = _1036 * (_996.z + (-0.5));
        float _1046 = exp2((_1003.w + (-0.5)) * 20.0) * 2.0;
        float _1047 = _1046 * (_1003.x + (-0.5));
        float _1048 = _1046 * (_1003.y + (-0.5));
        float _1049 = _1046 * (_1003.z + (-0.5));
        float _1050 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1051 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1052 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1053 = _1017 * 0.5;
        float _1054 = _1027 * 0.5;
        float _1055 = _1037 * 0.5;
        float _1056 = dot(vec3(_1053, _1054, _1055), vec3(_1053, _1054, _1055));
        float _1061 = (_1056 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1056);
        float _1070 = (dot(vec3(_649, _650, _651), vec3(_1061 * _1053, _1061 * _1054, _1061 * _1055)) + 1.0) * 0.5;
        float _3969 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1080 = sqrt(((_1054 * _1054) + (_1053 * _1053)) + (_1055 * _1055)) / (_1050 + 9.9999997473787516355514526367188e-06);
        float _3980 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1081 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
        float _1082 = _1081 * 2.0;
        float _1086 = (1.0 - _1081) / (_1081 + 1.0);
        float _3991 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1087 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
        float _1096 = ((((1.0 - _1087) * (_1082 + 2.0)) * exp2(log2(isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0))) * (_1082 + 1.0))) + _1087) * _1050;
        float _1097 = _1018 * 0.5;
        float _1098 = _1028 * 0.5;
        float _1099 = _1038 * 0.5;
        float _1100 = dot(vec3(_1097, _1098, _1099), vec3(_1097, _1098, _1099));
        float _1105 = (_1100 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1100);
        float _1113 = (dot(vec3(_649, _650, _651), vec3(_1105 * _1097, _1105 * _1098, _1105 * _1099)) + 1.0) * 0.5;
        float _4002 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1122 = sqrt(((_1098 * _1098) + (_1097 * _1097)) + (_1099 * _1099)) / (_1051 + 9.9999997473787516355514526367188e-06);
        float _4013 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1123 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
        float _1124 = _1123 * 2.0;
        float _1128 = (1.0 - _1123) / (_1123 + 1.0);
        float _4024 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1129 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
        float _1138 = ((((1.0 - _1129) * (_1124 + 2.0)) * exp2(log2(isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0))) * (_1124 + 1.0))) + _1129) * _1051;
        float _1139 = _1019 * 0.5;
        float _1140 = _1029 * 0.5;
        float _1141 = _1039 * 0.5;
        float _1142 = dot(vec3(_1139, _1140, _1141), vec3(_1139, _1140, _1141));
        float _1147 = (_1142 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1142);
        float _1155 = (dot(vec3(_649, _650, _651), vec3(_1147 * _1139, _1147 * _1140, _1147 * _1141)) + 1.0) * 0.5;
        float _4035 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1164 = sqrt(((_1140 * _1140) + (_1139 * _1139)) + (_1141 * _1141)) / (_1052 + 9.9999997473787516355514526367188e-06);
        float _4046 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1165 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
        float _1166 = _1165 * 2.0;
        float _1170 = (1.0 - _1165) / (_1165 + 1.0);
        float _4057 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1171 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
        float _1180 = ((((1.0 - _1171) * (_1166 + 2.0)) * exp2(log2(isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0))) * (_1166 + 1.0))) + _1171) * _1052;
        _1188 = _1019;
        _1190 = _1018;
        _1191 = _1017;
        _1192 = _1029;
        _1193 = _1028;
        _1194 = _1027;
        _1195 = _1039;
        _1196 = _1038;
        _1197 = _1037;
        _1198 = _1052;
        _1199 = _1051;
        _1200 = _1050;
        _1201 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0)));
        _1202 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0)));
        _1203 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0)));
    }
    else
    {
        _1188 = _1189;
        _1190 = _1189;
        _1191 = _1189;
        _1192 = _1189;
        _1193 = _1189;
        _1194 = _1189;
        _1195 = _1189;
        _1196 = _1189;
        _1197 = _1189;
        _1198 = _1189;
        _1199 = _1189;
        _1200 = _1189;
        _1201 = 0.0;
        _1202 = 0.0;
        _1203 = 0.0;
    }
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1228 = fma(_887, cbModelParam._m0[30u].z, fma(_883, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _879));
        float _1232 = fma(_887, cbModelParam._m0[31u].z, fma(_883, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _879));
        float _1236 = fma(_887, cbModelParam._m0[32u].z, fma(_883, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _879));
        float _1259 = _879 + _649;
        float _1260 = _883 + _650;
        float _1261 = _887 + _651;
        float _1271 = fma(_1261, cbModelParam._m0[30u].z, fma(_1260, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1259)) - _1228;
        float _1272 = fma(_1261, cbModelParam._m0[31u].z, fma(_1260, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1259)) - _1232;
        float _1273 = fma(_1261, cbModelParam._m0[32u].z, fma(_1260, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1259)) - _1236;
        float _1277 = inversesqrt(dot(vec3(_1271, _1272, _1273), vec3(_1271, _1272, _1273)));
        float _1290 = ((_1277 * _1271) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1228 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1291 = ((_1277 * _1272) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1232 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1292 = ((_1277 * _1273) / cbModelParam._m0[35u].z) + ((((((_1236 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1294 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1290, _1291, _1292), 0.0);
        vec4 _1301 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1290, _1291, _1292), 0.0);
        vec4 _1308 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1290, _1291, _1292), 0.0);
        vec4 _1315 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1290, _1291, _1292), 0.0);
        float _1327 = exp2((_1294.w + (-0.5)) * 20.0) * 2.0;
        float _1328 = _1327 * (_1294.x + (-0.5));
        float _1329 = _1327 * (_1294.y + (-0.5));
        float _1330 = _1327 * (_1294.z + (-0.5));
        float _1337 = exp2((_1301.w + (-0.5)) * 20.0) * 2.0;
        float _1338 = _1337 * (_1301.x + (-0.5));
        float _1339 = _1337 * (_1301.y + (-0.5));
        float _1340 = _1337 * (_1301.z + (-0.5));
        float _1347 = exp2((_1308.w + (-0.5)) * 20.0) * 2.0;
        float _1348 = _1347 * (_1308.x + (-0.5));
        float _1349 = _1347 * (_1308.y + (-0.5));
        float _1350 = _1347 * (_1308.z + (-0.5));
        float _1357 = exp2((_1315.w + (-0.5)) * 20.0) * 2.0;
        float _1358 = _1357 * (_1315.x + (-0.5));
        float _1359 = _1357 * (_1315.y + (-0.5));
        float _1360 = _1357 * (_1315.z + (-0.5));
        float _1361 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1362 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1363 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1364 = _1328 * 0.5;
        float _1365 = _1338 * 0.5;
        float _1366 = _1348 * 0.5;
        float _1367 = dot(vec3(_1364, _1365, _1366), vec3(_1364, _1365, _1366));
        float _1372 = (_1367 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1367);
        float _1380 = (dot(vec3(_649, _650, _651), vec3(_1372 * _1364, _1372 * _1365, _1372 * _1366)) + 1.0) * 0.5;
        float _4098 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1389 = sqrt(((_1365 * _1365) + (_1364 * _1364)) + (_1366 * _1366)) / (_1361 + 9.9999997473787516355514526367188e-06);
        float _4109 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1390 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
        float _1391 = _1390 * 2.0;
        float _1395 = (1.0 - _1390) / (_1390 + 1.0);
        float _4120 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1396 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
        float _1405 = ((((1.0 - _1396) * (_1391 + 2.0)) * exp2(log2(isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0))) * (_1391 + 1.0))) + _1396) * _1361;
        float _1406 = _1329 * 0.5;
        float _1407 = _1339 * 0.5;
        float _1408 = _1349 * 0.5;
        float _1409 = dot(vec3(_1406, _1407, _1408), vec3(_1406, _1407, _1408));
        float _1414 = (_1409 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1409);
        float _1422 = (dot(vec3(_649, _650, _651), vec3(_1414 * _1406, _1414 * _1407, _1414 * _1408)) + 1.0) * 0.5;
        float _4131 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1431 = sqrt(((_1407 * _1407) + (_1406 * _1406)) + (_1408 * _1408)) / (_1362 + 9.9999997473787516355514526367188e-06);
        float _4142 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1432 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
        float _1433 = _1432 * 2.0;
        float _1437 = (1.0 - _1432) / (_1432 + 1.0);
        float _4153 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1438 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
        float _1447 = ((((1.0 - _1438) * (_1433 + 2.0)) * exp2(log2(isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0))) * (_1433 + 1.0))) + _1438) * _1362;
        float _1448 = _1330 * 0.5;
        float _1449 = _1340 * 0.5;
        float _1450 = _1350 * 0.5;
        float _1451 = dot(vec3(_1448, _1449, _1450), vec3(_1448, _1449, _1450));
        float _1456 = (_1451 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1451);
        float _1464 = (dot(vec3(_649, _650, _651), vec3(_1456 * _1448, _1456 * _1449, _1456 * _1450)) + 1.0) * 0.5;
        float _4164 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1473 = sqrt(((_1449 * _1449) + (_1448 * _1448)) + (_1450 * _1450)) / (_1363 + 9.9999997473787516355514526367188e-06);
        float _4175 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1474 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
        float _1475 = _1474 * 2.0;
        float _1479 = (1.0 - _1474) / (_1474 + 1.0);
        float _4186 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1480 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
        float _1489 = ((((1.0 - _1480) * (_1475 + 2.0)) * exp2(log2(isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0))) * (_1475 + 1.0))) + _1480) * _1363;
        _1497 = _1330;
        _1498 = _1329;
        _1499 = _1328;
        _1500 = _1340;
        _1501 = _1339;
        _1502 = _1338;
        _1503 = _1350;
        _1504 = _1349;
        _1505 = _1348;
        _1506 = _1363;
        _1507 = _1362;
        _1508 = _1361;
        _1509 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0)));
        _1510 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0)));
        _1511 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0)));
    }
    else
    {
        _1497 = _1189;
        _1498 = _1189;
        _1499 = _1189;
        _1500 = _1189;
        _1501 = _1189;
        _1502 = _1189;
        _1503 = _1189;
        _1504 = _1189;
        _1505 = _1189;
        _1506 = _1189;
        _1507 = _1189;
        _1508 = _1189;
        _1509 = 0.0;
        _1510 = 0.0;
        _1511 = 0.0;
    }
    float _1521 = (cbModelParam._m0[1u].x * (_1509 - _1201)) + _1201;
    float _1522 = (cbModelParam._m0[1u].x * (_1510 - _1202)) + _1202;
    float _1523 = (cbModelParam._m0[1u].x * (_1511 - _1203)) + _1203;
    float _1544 = fma(_1523, cbSceneParam._m0[89u].z, fma(_1522, cbSceneParam._m0[89u].y, _1521 * cbSceneParam._m0[89u].x));
    float _1547 = fma(_1523, cbSceneParam._m0[90u].z, fma(_1522, cbSceneParam._m0[90u].y, _1521 * cbSceneParam._m0[90u].x));
    float _1550 = fma(_1523, cbSceneParam._m0[91u].z, fma(_1522, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1521));
    float _1565 = _823 * 0.5;
    float _1566 = _824 * 0.5;
    float _1567 = _825 * 0.5;
    float _1568 = dot(vec4(_1565, _1566, _1567, 1.0), vec4(_1499, _1502, _1505, _1508));
    float _1571 = dot(vec4(_1565, _1566, _1567, 1.0), vec4(_1498, _1501, _1504, _1507));
    float _1574 = dot(vec4(_1565, _1566, _1567, 1.0), vec4(_1497, _1500, _1503, _1506));
    float _1608;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1581 = dot(vec4(_1565, _1566, _1567, 1.0), vec4(_1188, _1192, _1195, _1198));
        float _1585 = dot(vec4(_1565, _1566, _1567, 1.0), vec4(_1190, _1193, _1196, _1199));
        float _1589 = dot(vec4(_1565, _1566, _1567, 1.0), vec4(_1191, _1194, _1197, _1200));
        float _1596 = dot(vec4(cbModelParam._m0[39u]), vec4(_1565, _1566, _1567, 1.0));
        _1608 = dot(vec3(isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0)), isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0)), isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1596) ? 0.0 : (isnan(0.0) ? _1596 : max(0.0, _1596))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1608 = 1.0;
    }
    float _1619;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1610 = dot(vec4(cbModelParam._m0[40u]), vec4(_1565, _1566, _1567, 1.0));
        _1619 = dot(vec3(isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0)), isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0)), isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1610) ? 0.0 : (isnan(0.0) ? _1610 : max(0.0, _1610))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1619 = 1.0;
    }
    float _1623 = (_1619 * cbModelParam._m0[1u].x) + (_1608 * (1.0 - cbModelParam._m0[1u].x));
    float _1633 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _652);
    float _1634 = isnan(_1633) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1633 : min(cbModelParam._m0[25u].z, _1633));
    float _1715;
    float _1717;
    float _1719;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1682 = fma(_887, cbModelParam._m0[13u].z, fma(_883, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _879)) + cbModelParam._m0[13u].w;
        float _1686 = fma(_887, cbModelParam._m0[14u].z, fma(_883, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _879)) + cbModelParam._m0[14u].w;
        float _1690 = fma(_887, cbModelParam._m0[15u].z, fma(_883, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _879)) + cbModelParam._m0[15u].w;
        float _1693 = fma(_825, cbModelParam._m0[13u].z, fma(_824, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _823));
        float _1696 = fma(_825, cbModelParam._m0[14u].z, fma(_824, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _823));
        float _1699 = fma(_825, cbModelParam._m0[15u].z, fma(_824, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _823));
        float _1727;
        if (_1693 > 0.0)
        {
            _1727 = abs((1.0 - _1682) / _1693);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1693 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1682 + 1.0) / _1693);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1727 = frontier_phi_14_12_ladder;
        }
        float _1899;
        if (_1696 > 0.0)
        {
            _1899 = abs((1.0 - _1686) / _1696);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1696 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1686 + 1.0) / _1696);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1899 = frontier_phi_23_19_ladder;
        }
        float _2194;
        if (_1699 > 0.0)
        {
            _2194 = abs((1.0 - _1690) / _1699);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1699 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1690 + 1.0) / _1699);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2194 = frontier_phi_35_30_ladder;
        }
        float _2196 = isnan(_1899) ? _1727 : (isnan(_1727) ? _1899 : min(_1727, _1899));
        float _2197 = isnan(_2194) ? _2196 : (isnan(_2196) ? _2194 : min(_2196, _2194));
        float _2201 = (_2197 * _1693) + _1682;
        float _2202 = (_2197 * _1696) + _1686;
        float _2203 = (_2197 * _1699) + _1690;
        float _2204 = _2197 * 9.9999997473787516355514526367188e-05;
        float _2206 = (-1.0) - _2204;
        float _2208 = _2204 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2203 > _2208) || ((_2203 < _2206) || ((_2202 > _2208) || ((_2202 < _2206) || ((_2201 < _2206) || (_2201 > _2208))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2348 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2203, cbModelParam._m0[9u].z, fma(_2202, cbModelParam._m0[9u].y, _2201 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2203, cbModelParam._m0[10u].z, fma(_2202, cbModelParam._m0[10u].y, _2201 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2203, cbModelParam._m0[11u].z, fma(_2202, cbModelParam._m0[11u].y, _2201 * cbModelParam._m0[11u].x))), _1634);
            frontier_phi_13_35_ladder = _2348.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2348.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2348.x * cbModelParam._m0[1u].y;
        }
        _1715 = frontier_phi_13_35_ladder_2;
        _1717 = frontier_phi_13_35_ladder_1;
        _1719 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1703 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_823, _824, _825), _1634);
        _1715 = _1703.x * cbModelParam._m0[1u].y;
        _1717 = _1703.y * cbModelParam._m0[1u].y;
        _1719 = _1703.z * cbModelParam._m0[1u].y;
    }
    float _1723 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _652);
    float _1724 = isnan(_1723) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1723 : min(cbModelParam._m0[25u].w, _1723));
    float _1814;
    float _1816;
    float _1818;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1778 = fma(_887, cbModelParam._m0[21u].z, fma(_883, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _879)) + cbModelParam._m0[21u].w;
        float _1782 = fma(_887, cbModelParam._m0[22u].z, fma(_883, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _879)) + cbModelParam._m0[22u].w;
        float _1786 = fma(_887, cbModelParam._m0[23u].z, fma(_883, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _879)) + cbModelParam._m0[23u].w;
        float _1789 = fma(_825, cbModelParam._m0[21u].z, fma(_824, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _823));
        float _1792 = fma(_825, cbModelParam._m0[22u].z, fma(_824, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _823));
        float _1795 = fma(_825, cbModelParam._m0[23u].z, fma(_824, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _823));
        float _1904;
        if (_1789 > 0.0)
        {
            _1904 = abs((1.0 - _1778) / _1789);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1789 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1778 + 1.0) / _1789);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1904 = frontier_phi_25_21_ladder;
        }
        float _2221;
        if (_1792 > 0.0)
        {
            _2221 = abs((1.0 - _1782) / _1792);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1792 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1782 + 1.0) / _1792);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2221 = frontier_phi_37_32_ladder;
        }
        float _2559;
        if (_1795 > 0.0)
        {
            _2559 = abs((1.0 - _1786) / _1795);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1795 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1786 + 1.0) / _1795);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2559 = frontier_phi_47_44_ladder;
        }
        float _2561 = isnan(_2221) ? _1904 : (isnan(_1904) ? _2221 : min(_1904, _2221));
        float _2562 = isnan(_2559) ? _2561 : (isnan(_2561) ? _2559 : min(_2561, _2559));
        float _2566 = (_2562 * _1789) + _1778;
        float _2567 = (_2562 * _1792) + _1782;
        float _2568 = (_2562 * _1795) + _1786;
        float _2569 = _2562 * 9.9999997473787516355514526367188e-05;
        float _2570 = (-1.0) - _2569;
        float _2572 = _2569 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2568 > _2572) || ((_2568 < _2570) || ((_2567 > _2572) || ((_2567 < _2570) || ((_2566 < _2570) || (_2566 > _2572))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2690 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2568, cbModelParam._m0[17u].z, fma(_2567, cbModelParam._m0[17u].y, _2566 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2568, cbModelParam._m0[18u].z, fma(_2567, cbModelParam._m0[18u].y, _2566 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2568, cbModelParam._m0[19u].z, fma(_2567, cbModelParam._m0[19u].y, _2566 * cbModelParam._m0[19u].x))), _1724);
            frontier_phi_22_47_ladder = _2690.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2690.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2690.x * cbModelParam._m0[1u].z;
        }
        _1814 = frontier_phi_22_47_ladder_2;
        _1816 = frontier_phi_22_47_ladder_1;
        _1818 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1798 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_823, _824, _825), _1724);
        _1814 = _1798.x * cbModelParam._m0[1u].z;
        _1816 = _1798.y * cbModelParam._m0[1u].z;
        _1818 = _1798.z * cbModelParam._m0[1u].z;
    }
    float _1831 = (((_850 * _799) + _851) * _815) * ((cbModelParam._m0[1u].w * (_1814 - _1715)) + _1715);
    float _1833 = (((_850 * _801) + _851) * _815) * ((cbModelParam._m0[1u].w * (_1816 - _1717)) + _1717);
    float _1835 = (((_850 * _802) + _851) * _815) * ((cbModelParam._m0[1u].w * (_1818 - _1719)) + _1719);
    float _1838 = fma(_1835, cbSceneParam._m0[89u].z, fma(_1833, cbSceneParam._m0[89u].y, _1831 * cbSceneParam._m0[89u].x));
    float _1841 = fma(_1835, cbSceneParam._m0[90u].z, fma(_1833, cbSceneParam._m0[90u].y, _1831 * cbSceneParam._m0[90u].x));
    float _1844 = fma(_1835, cbSceneParam._m0[91u].z, fma(_1833, cbSceneParam._m0[91u].y, _1831 * cbSceneParam._m0[91u].x));
    float _1878 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1882 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1886 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1890 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1891 = _1878 / _1890;
    float _1892 = _1882 / _1890;
    float _1893 = _1886 / _1890;
    float _2040;
    float _2041;
    float _2042;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1920 = ((uint(_1893 > cbSceneParam._m0[59u].y) + uint(_1893 > cbSceneParam._m0[59u].x)) + uint(_1893 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1921 = _1920 + 43u;
        uint _1929 = _1920 + 44u;
        uint _1937 = _1920 + 45u;
        uint _1945 = _1920 + 46u;
        float _1956 = fma(_1890, cbSceneParam._m0[_1921].w, fma(_1886, cbSceneParam._m0[_1921].z, fma(_1882, cbSceneParam._m0[_1921].y, _1878 * cbSceneParam._m0[_1921].x)));
        float _1960 = fma(_1890, cbSceneParam._m0[_1929].w, fma(_1886, cbSceneParam._m0[_1929].z, fma(_1882, cbSceneParam._m0[_1929].y, _1878 * cbSceneParam._m0[_1929].x)));
        float _1968 = fma(_1890, cbSceneParam._m0[_1945].w, fma(_1886, cbSceneParam._m0[_1945].z, fma(_1882, cbSceneParam._m0[_1945].y, _1878 * cbSceneParam._m0[_1945].x)));
        float _1973 = cbSceneParam._m0[33u].z * _1968;
        float _1975 = cbSceneParam._m0[33u].w * _1968;
        float _1978 = fma(_1890, cbSceneParam._m0[_1937].w, fma(_1886, cbSceneParam._m0[_1937].z, fma(_1882, cbSceneParam._m0[_1937].y, _1878 * cbSceneParam._m0[_1937].x))) / _1968;
        float _2026 = (cbSceneParam._m0[33u].x - sqrt(((_1892 * _1892) + (_1891 * _1891)) + (_1893 * _1893))) * cbSceneParam._m0[33u].y;
        float _4312 = isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0));
        float _2033 = (isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1973 + _1956) / _1968, (_1975 + _1960) / _1968), _1978), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1975 + _1956) / _1968, (_1960 - _1973) / _1968), _1978), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1956 - _1973) / _1968, (_1960 - _1975) / _1968), _1978), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1956 - _1975) / _1968, (_1973 + _1960) / _1968), _1978), 0.0)).x), vec4(0.25)));
        _2040 = 1.0 - (_2033 * cbSceneParam._m0[34u].x);
        _2041 = 1.0 - (_2033 * cbSceneParam._m0[34u].y);
        _2042 = 1.0 - (_2033 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2040 = 1.0;
        _2041 = 1.0;
        _2042 = 1.0;
    }
    float _2106;
    float _2108;
    float _2110;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2094 = fma(_1890, cbSceneParam._m0[63u].w, fma(_1886, cbSceneParam._m0[63u].z, fma(_1882, cbSceneParam._m0[63u].y, _1878 * cbSceneParam._m0[63u].x)));
        float _2095 = fma(_1890, cbSceneParam._m0[60u].w, fma(_1886, cbSceneParam._m0[60u].z, fma(_1882, cbSceneParam._m0[60u].y, _1878 * cbSceneParam._m0[60u].x))) / _2094;
        float _2096 = fma(_1890, cbSceneParam._m0[61u].w, fma(_1886, cbSceneParam._m0[61u].z, fma(_1882, cbSceneParam._m0[61u].y, _1878 * cbSceneParam._m0[61u].x))) / _2094;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2095 >= cbSceneParam._m0[64u].x) && (_2096 >= cbSceneParam._m0[64u].y)) && (_2095 <= cbSceneParam._m0[64u].z)) && (_2096 <= cbSceneParam._m0[64u].w))
        {
            float _2234 = fma(_1890, cbSceneParam._m0[62u].w, fma(_1886, cbSceneParam._m0[62u].z, fma(_1882, cbSceneParam._m0[62u].y, _1878 * cbSceneParam._m0[62u].x))) / _2094;
            float _2238 = isnan(cbSceneParam._m0[41u].w) ? _2234 : (isnan(_2234) ? cbSceneParam._m0[41u].w : max(_2234, cbSceneParam._m0[41u].w));
            float _2281 = (cbSceneParam._m0[33u].x - sqrt(((_1892 * _1892) + (_1891 * _1891)) + (_1893 * _1893))) * cbSceneParam._m0[33u].y;
            float _4328 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
            float _2288 = (isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2095, cbSceneParam._m0[33u].w + _2096), _2238), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2095, _2096 - cbSceneParam._m0[33u].z), _2238), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2095 - cbSceneParam._m0[33u].z, _2096 - cbSceneParam._m0[33u].w), _2238), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2095 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2096), _2238), 0.0)).x), vec4(0.25)));
            float _2292 = 1.0 - (_2288 * cbSceneParam._m0[34u].x);
            float _2293 = 1.0 - (_2288 * cbSceneParam._m0[34u].y);
            float _2294 = 1.0 - (_2288 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2294) ? _2042 : (isnan(_2042) ? _2294 : min(_2042, _2294));
            frontier_phi_34_33_ladder_1 = isnan(_2293) ? _2041 : (isnan(_2041) ? _2293 : min(_2041, _2293));
            frontier_phi_34_33_ladder_2 = isnan(_2292) ? _2040 : (isnan(_2040) ? _2292 : min(_2040, _2292));
        }
        else
        {
            frontier_phi_34_33_ladder = _2042;
            frontier_phi_34_33_ladder_1 = _2041;
            frontier_phi_34_33_ladder_2 = _2040;
        }
        _2106 = frontier_phi_34_33_ladder_2;
        _2108 = frontier_phi_34_33_ladder_1;
        _2110 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2106 = _2040;
        _2108 = _2041;
        _2110 = _2042;
    }
    uvec4 _2115 = floatBitsToUint(cbInstanceData._m0[_236 + 5u]);
    uint _2117 = _2115.x * 14u;
    uint _2118 = _2117 + 13u;
    float _2125 = _815 + (-1.0);
    float _2130 = (cbLight._m0[_2118].x * _2125) + 1.0;
    float _2131 = (cbLight._m0[_2118].y * _2125) + 1.0;
    float _2132 = (cbLight._m0[_2118].z * _2125) + 1.0;
    float _2133 = (cbLight._m0[_2118].w * _2125) + 1.0;
    uint _2134 = _2117 + 5u;
    float _2140 = isnan(1.0) ? _2131 : (isnan(_2131) ? 1.0 : min(_2131, 1.0));
    uint _2144 = _2117 + 4u;
    float _2153 = isnan(1.0) ? _2130 : (isnan(_2130) ? 1.0 : min(_2130, 1.0));
    uint _2157 = _2117 | 1u;
    float _2168 = dot(vec3(cbLight._m0[_2117].xyz), vec3(_649, _650, _651));
    float _2171 = dot(vec3(cbLight._m0[_2157].xyz), vec3(_649, _650, _651));
    float _4364 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
    float _4375 = isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0));
    float _2176 = (isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0))) * 0.3183098733425140380859375;
    float _2178 = (isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0))) * 0.3183098733425140380859375;
    float _2185 = ((cbLight._m0[_2134].x * _2140) * _2178) + (((cbLight._m0[_2144].x * _2106) * _2153) * _2176);
    float _2186 = ((_2140 * cbLight._m0[_2134].y) * _2178) + (((cbLight._m0[_2144].y * _2108) * _2153) * _2176);
    float _2187 = ((_2140 * cbLight._m0[_2134].z) * _2178) + (((cbLight._m0[_2144].z * _2110) * _2153) * _2176);
    uvec4 _2191 = floatBitsToUint(cbLight._m0[_2117 + 12u]);
    bool _2193 = _2191.x == 0u;
    float _2295;
    float _2297;
    float _2299;
    if (_2193)
    {
        _2295 = _2185;
        _2297 = _2186;
        _2299 = _2187;
    }
    else
    {
        uint _2303 = _2117 + 6u;
        float _2319 = (dot(vec3(cbLight._m0[_2117 + 2u].xyz), vec3(_649, _650, _651)) * 0.5) + 0.5;
        float _2320 = _2319 * _2319;
        float _4386 = isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0));
        float _2321 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
        float _2322 = isnan(1.0) ? _2132 : (isnan(_2132) ? 1.0 : min(_2132, 1.0));
        _2295 = (((cbLight._m0[_2303].x * 0.3183098733425140380859375) * _2321) * _2322) + _2185;
        _2297 = (((cbLight._m0[_2303].y * 0.3183098733425140380859375) * _2321) * _2322) + _2186;
        _2299 = (((cbLight._m0[_2303].z * 0.3183098733425140380859375) * _2321) * _2322) + _2187;
    }
    bool _2302 = _2191.y == 0u;
    float _2357;
    float _2359;
    float _2361;
    if (_2302)
    {
        _2357 = _2295;
        _2359 = _2297;
        _2361 = _2299;
    }
    else
    {
        uint _2530 = _2117 + 7u;
        float _2546 = (dot(vec3(cbLight._m0[_2117 + 3u].xyz), vec3(_649, _650, _651)) * 0.5) + 0.5;
        float _2547 = _2546 * _2546;
        float _4402 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0));
        float _2548 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
        float _2549 = isnan(1.0) ? _2133 : (isnan(_2133) ? 1.0 : min(_2133, 1.0));
        _2357 = (((cbLight._m0[_2530].x * 0.3183098733425140380859375) * _2548) * _2549) + _2295;
        _2359 = (((cbLight._m0[_2530].y * 0.3183098733425140380859375) * _2548) * _2549) + _2297;
        _2361 = (((cbLight._m0[_2530].z * 0.3183098733425140380859375) * _2548) * _2549) + _2299;
    }
    uint _2364 = _2117 + 8u;
    float _2377 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2117].w)) * _652) * 0.949999988079071044921875);
    float _2378 = _2377 * _2377;
    float _2379 = cbLight._m0[_2117].x + _729;
    float _2380 = cbLight._m0[_2117].y + _730;
    float _2381 = cbLight._m0[_2117].z + _731;
    float _2385 = inversesqrt(dot(vec3(_2379, _2380, _2381), vec3(_2379, _2380, _2381)));
    float _2386 = _2385 * _2379;
    float _2387 = _2385 * _2380;
    float _2388 = _2385 * _2381;
    float _2389 = dot(vec3(_649, _650, _651), vec3(cbLight._m0[_2117].xyz));
    float _4418 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
    float _2392 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
    float _4429 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
    float _2393 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
    float _2394 = dot(vec3(_649, _650, _651), vec3(_2386, _2387, _2388));
    float _4440 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
    float _2397 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
    float _2398 = dot(vec3(cbLight._m0[_2117].xyz), vec3(_2386, _2387, _2388));
    float _4451 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
    float _2402 = _2378 * _2378;
    float _2406 = ((_2397 * _2397) * (_2402 + (-1.0))) + 1.0;
    float _2414 = exp2(log2(1.0 - (isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0)))) * 5.0);
    float _2415 = 0.959999978542327880859375 - _796;
    float _2417 = 0.959999978542327880859375 - _797;
    float _2418 = 0.959999978542327880859375 - _798;
    float _2425 = 1.0 - _2378;
    float _2436 = (0.5 / (((_2393 * ((_2392 * _2425) + _2378)) + 9.9999999392252902907785028219223e-09) + (((_2393 * _2425) + _2378) * _2392))) * _2392;
    float _4462 = isnan(0.0) ? _2436 : (isnan(_2436) ? 0.0 : max(_2436, 0.0));
    float _2438 = (isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0))) * (_2402 / ((_2406 * _2406) * 3.141590118408203125));
    uint _2452 = _2117 + 9u;
    float _2463 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2157].w)) * _652) * 0.949999988079071044921875);
    float _2464 = _2463 * _2463;
    float _2465 = cbLight._m0[_2157].x + _729;
    float _2466 = cbLight._m0[_2157].y + _730;
    float _2467 = cbLight._m0[_2157].z + _731;
    float _2471 = inversesqrt(dot(vec3(_2465, _2466, _2467), vec3(_2465, _2466, _2467)));
    float _2472 = _2471 * _2465;
    float _2473 = _2471 * _2466;
    float _2474 = _2471 * _2467;
    float _2475 = dot(vec3(_649, _650, _651), vec3(cbLight._m0[_2157].xyz));
    float _4473 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
    float _2478 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
    float _2479 = dot(vec3(_649, _650, _651), vec3(_2472, _2473, _2474));
    float _4484 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0));
    float _2482 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
    float _2483 = dot(vec3(cbLight._m0[_2157].xyz), vec3(_2472, _2473, _2474));
    float _4495 = isnan(0.0) ? _2483 : (isnan(_2483) ? 0.0 : max(_2483, 0.0));
    float _2487 = _2464 * _2464;
    float _2491 = ((_2482 * _2482) * (_2487 + (-1.0))) + 1.0;
    float _2498 = exp2(log2(1.0 - (isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0)))) * 5.0);
    float _2505 = 1.0 - _2464;
    float _2515 = (0.5 / (((_2393 * ((_2478 * _2505) + _2464)) + 9.9999999392252902907785028219223e-09) + (((_2393 * _2505) + _2464) * _2478))) * _2478;
    float _4506 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
    float _2517 = (isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0))) * (_2487 / ((_2491 * _2491) * 3.141590118408203125));
    float _2527 = (((((_2498 * _2415) + _799) * cbLight._m0[_2452].x) * _2517) * _2140) + ((((cbLight._m0[_2364].x * _2106) * ((_2414 * _2415) + _799)) * _2438) * _2153);
    float _2528 = (((((_2498 * _2417) + _801) * cbLight._m0[_2452].y) * _2517) * _2140) + ((((cbLight._m0[_2364].y * _2108) * ((_2414 * _2417) + _801)) * _2438) * _2153);
    float _2529 = (((((_2498 * _2418) + _802) * cbLight._m0[_2452].z) * _2517) * _2140) + ((((cbLight._m0[_2364].z * _2110) * ((_2414 * _2418) + _802)) * _2438) * _2153);
    float _2585;
    float _2587;
    float _2589;
    if (_2193)
    {
        _2585 = _2527;
        _2587 = _2528;
        _2589 = _2529;
    }
    else
    {
        uint _2591 = _2117 + 2u;
        uint _2595 = _2117 + 10u;
        float _2609 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2591].w)) * _652) * 0.949999988079071044921875);
        float _2610 = _2609 * _2609;
        float _2611 = cbLight._m0[_2591].x + _729;
        float _2612 = cbLight._m0[_2591].y + _730;
        float _2613 = cbLight._m0[_2591].z + _731;
        float _2617 = inversesqrt(dot(vec3(_2611, _2612, _2613), vec3(_2611, _2612, _2613)));
        float _2618 = _2617 * _2611;
        float _2619 = _2617 * _2612;
        float _2620 = _2617 * _2613;
        float _2621 = dot(vec3(_649, _650, _651), vec3(cbLight._m0[_2591].xyz));
        float _4517 = isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : max(_2621, 0.0));
        float _2624 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
        float _2625 = dot(vec3(_649, _650, _651), vec3(_2618, _2619, _2620));
        float _4528 = isnan(0.0) ? _2625 : (isnan(_2625) ? 0.0 : max(_2625, 0.0));
        float _2628 = isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0));
        float _2629 = dot(vec3(cbLight._m0[_2591].xyz), vec3(_2618, _2619, _2620));
        float _4539 = isnan(0.0) ? _2629 : (isnan(_2629) ? 0.0 : max(_2629, 0.0));
        float _2633 = _2610 * _2610;
        float _2637 = ((_2628 * _2628) * (_2633 + (-1.0))) + 1.0;
        float _2644 = exp2(log2(1.0 - (isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0)))) * 5.0);
        float _2651 = 1.0 - _2610;
        float _2661 = (0.5 / (((_2393 * ((_2624 * _2651) + _2610)) + 9.9999999392252902907785028219223e-09) + (((_2393 * _2651) + _2610) * _2624))) * _2624;
        float _4550 = isnan(0.0) ? _2661 : (isnan(_2661) ? 0.0 : max(_2661, 0.0));
        float _2663 = (isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0))) * (_2633 / ((_2637 * _2637) * 3.141590118408203125));
        float _2664 = isnan(1.0) ? _2132 : (isnan(_2132) ? 1.0 : min(_2132, 1.0));
        _2585 = (((((_2644 * _2415) + _799) * cbLight._m0[_2595].x) * _2663) * _2664) + _2527;
        _2587 = (((((_2644 * _2417) + _801) * cbLight._m0[_2595].y) * _2663) * _2664) + _2528;
        _2589 = (((((_2644 * _2418) + _802) * cbLight._m0[_2595].z) * _2663) * _2664) + _2529;
    }
    float _2695;
    float _2697;
    float _2699;
    if (_2302)
    {
        _2695 = _2585;
        _2697 = _2587;
        _2699 = _2589;
    }
    else
    {
        uint _2706 = _2117 + 3u;
        uint _2710 = _2117 + 11u;
        float _2724 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2706].w)) * _652) * 0.949999988079071044921875);
        float _2725 = _2724 * _2724;
        float _2726 = cbLight._m0[_2706].x + _729;
        float _2727 = cbLight._m0[_2706].y + _730;
        float _2728 = cbLight._m0[_2706].z + _731;
        float _2732 = inversesqrt(dot(vec3(_2726, _2727, _2728), vec3(_2726, _2727, _2728)));
        float _2733 = _2732 * _2726;
        float _2734 = _2732 * _2727;
        float _2735 = _2732 * _2728;
        float _2736 = dot(vec3(_649, _650, _651), vec3(cbLight._m0[_2706].xyz));
        float _4566 = isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : max(_2736, 0.0));
        float _2739 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
        float _2740 = dot(vec3(_649, _650, _651), vec3(_2733, _2734, _2735));
        float _4577 = isnan(0.0) ? _2740 : (isnan(_2740) ? 0.0 : max(_2740, 0.0));
        float _2743 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
        float _2744 = dot(vec3(cbLight._m0[_2706].xyz), vec3(_2733, _2734, _2735));
        float _4588 = isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : max(_2744, 0.0));
        float _2748 = _2725 * _2725;
        float _2752 = ((_2743 * _2743) * (_2748 + (-1.0))) + 1.0;
        float _2759 = exp2(log2(1.0 - (isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0)))) * 5.0);
        float _2766 = 1.0 - _2725;
        float _2776 = (0.5 / (((_2393 * ((_2739 * _2766) + _2725)) + 9.9999999392252902907785028219223e-09) + (((_2393 * _2766) + _2725) * _2739))) * _2739;
        float _4599 = isnan(0.0) ? _2776 : (isnan(_2776) ? 0.0 : max(_2776, 0.0));
        float _2778 = (isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0))) * (_2748 / ((_2752 * _2752) * 3.141590118408203125));
        float _2779 = isnan(1.0) ? _2133 : (isnan(_2133) ? 1.0 : min(_2133, 1.0));
        _2695 = (((((_2759 * _2415) + _799) * cbLight._m0[_2710].x) * _2778) * _2779) + _2585;
        _2697 = (((((_2759 * _2417) + _801) * cbLight._m0[_2710].y) * _2778) * _2779) + _2587;
        _2699 = (((((_2759 * _2418) + _802) * cbLight._m0[_2710].z) * _2778) * _2779) + _2589;
    }
    float _2845;
    float _2847;
    float _2849;
    float _2851;
    float _2853;
    float _2855;
    if (_2115.y == 0u)
    {
        uvec4 _2800 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2801 = _2800.x;
        uint _2812 = uint((float(_2800.y) * floor(float(uint(cbSceneParam._m0[85u].y * _738) / _2801))) + floor(float(uint(cbSceneParam._m0[85u].x * _737) / _2801)));
        float _2822 = (log2(_1893 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2823 = isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0));
        uint _2826 = uint(isnan(14.0) ? _2823 : (isnan(_2823) ? 14.0 : min(_2823, 14.0)));
        uvec4 _2831 = texelFetch(g_lightClusterGridBuffer, int(((_2826 << 2u) + (_2812 << 6u)) >> 2u));
        uint _2832 = _2831.x;
        uint _2833 = _2800.z;
        float _2912;
        float _2914;
        float _2916;
        float _2918;
        float _2920;
        float _2922;
        if (((((1u << ((_2833 >> 4u) & 15u)) + 4294967295u) & _2832) == 0u) || ((_2833 & 240u) == 0u))
        {
            _2912 = 0.0;
            _2914 = 0.0;
            _2916 = 0.0;
            _2918 = 0.0;
            _2920 = 0.0;
            _2922 = 0.0;
        }
        else
        {
            float _2913;
            float _2915;
            float _2917;
            float _2919;
            float _2921;
            float _2923;
            float _3057 = 0.0;
            float _3058 = 0.0;
            float _3059 = 0.0;
            float _3060 = 0.0;
            float _3061 = 0.0;
            float _3062 = 0.0;
            uint _3063 = 0u;
            uint _3072;
            bool _3073;
            for (;;)
            {
                _3072 = texelFetch(g_lightClassification, int((((_2826 << 5u) + (_2812 << 9u)) + (_3063 << 2u)) >> 2u)).x;
                _3073 = _3072 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3073)
                {
                    frontier_phi_66_pred = _3062;
                    frontier_phi_66_pred_1 = _3061;
                    frontier_phi_66_pred_2 = _3060;
                    frontier_phi_66_pred_3 = _3059;
                    frontier_phi_66_pred_4 = _3058;
                    frontier_phi_66_pred_5 = _3057;
                }
                else
                {
                    float _3181;
                    float _3182;
                    float _3183;
                    float _3184;
                    float _3185;
                    float _3186;
                    uint _3187;
                    _3181 = _3057;
                    _3182 = _3058;
                    _3183 = _3059;
                    _3184 = _3060;
                    _3185 = _3061;
                    _3186 = _3062;
                    _3187 = _3072;
                    float _3113;
                    float _3114;
                    float _3115;
                    float _3116;
                    float _3117;
                    float _3118;
                    for (;;)
                    {
                        uint _3191 = uint(findLSB(_3187)) + (_3063 << 5u);
                        uint _3188 = (_3187 + 4294967295u) & _3187;
                        uint _3193 = _3191 * 48u;
                        vec4 _3207 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3193)).x, texelFetch(g_PointLightRenderingBuffer, int(_3193 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3193 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3193 + 3u)).x));
                        uint _3213 = (_3191 * 48u) + 4u;
                        vec4 _3226 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3213)).x, texelFetch(g_PointLightRenderingBuffer, int(_3213 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3213 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3213 + 3u)).x));
                        uint _3232 = (_3191 * 48u) + 8u;
                        vec3 _3243 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3232)).x, texelFetch(g_PointLightRenderingBuffer, int(_3232 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3232 + 2u)).x));
                        float _3247 = _3207.x - _1891;
                        float _3248 = _3207.y - _1892;
                        float _3249 = _3207.z - _1893;
                        float _3250 = dot(vec3(_3247, _3248, _3249), vec3(_3247, _3248, _3249));
                        float _3253 = inversesqrt(_3250);
                        float _3254 = _3253 * _3247;
                        float _3255 = _3253 * _3248;
                        float _3256 = _3253 * _3249;
                        float _3257 = dot(vec3(_756, _759, _762), vec3(_3254, _3255, _3256));
                        float _3262 = 1.0 - (_3250 * _3207.w);
                        float _4625 = isnan(0.0) ? _3262 : (isnan(_3262) ? 0.0 : max(_3262, 0.0));
                        float _3263 = isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0));
                        float _3264 = sqrt(_3250) * _3226.w;
                        float _3267 = 1.39999997615814208984375 / (_3264 + 1.39999997615814208984375);
                        float _3268 = _3267 * _3267;
                        float _3271 = ((1.0 - _3268) * _3257) + _3268;
                        float _3274 = _3264 * _3264;
                        float _3278 = ((isnan(0.0) ? _3271 : (isnan(_3271) ? 0.0 : max(_3271, 0.0))) * _3263) / ((_3274 * 0.699999988079071044921875) + 1.0);
                        float _3282 = (-0.0) - _1891;
                        float _3283 = (-0.0) - _1892;
                        float _3284 = (-0.0) - _1893;
                        float _3288 = inversesqrt(dot(vec3(_3282, _3283, _3284), vec3(_3282, _3283, _3284)));
                        float _3289 = _3288 * _3282;
                        float _3290 = _3288 * _3283;
                        float _3291 = _3288 * _3284;
                        float _3298 = exp2(log2(1.0 / ((_3274 * 3.5) + 5.0)) * 0.25);
                        float _3299 = 1.0 - _831;
                        float _3306 = sqrt(1.0 - ((1.0 - (_3299 * _3299)) * (1.0 - (_3298 * _3298))));
                        float _3307 = _3306 * _3306;
                        float _3308 = _3307 * _3307;
                        float _3309 = _3289 + _3254;
                        float _3310 = _3290 + _3255;
                        float _3311 = _3291 + _3256;
                        float _3315 = inversesqrt(dot(vec3(_3309, _3310, _3311), vec3(_3309, _3310, _3311)));
                        float _3319 = dot(vec3(_756, _759, _762), vec3(_3289, _3290, _3291));
                        float _4641 = isnan(0.0) ? _3319 : (isnan(_3319) ? 0.0 : max(_3319, 0.0));
                        float _3322 = isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0));
                        float _3323 = dot(vec3(_756, _759, _762), vec3(_3315 * _3309, _3315 * _3310, _3315 * _3311));
                        float _4652 = isnan(0.0) ? _3323 : (isnan(_3323) ? 0.0 : max(_3323, 0.0));
                        float _3326 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
                        float _3330 = ((_3326 * _3326) * (_3308 + (-1.0))) + 1.0;
                        float _3331 = _3267 * _3307;
                        float _3332 = _3331 * _3331;
                        float _3335 = ((1.0 - _3332) * _3257) + _3332;
                        float _4663 = isnan(0.0) ? _3335 : (isnan(_3335) ? 0.0 : max(_3335, 0.0));
                        float _3336 = isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0));
                        float _3337 = 1.0 - _3307;
                        float _3347 = (0.5 / (((_3336 * ((_3322 * _3337) + _3307)) + 9.9999999392252902907785028219223e-09) + (((_3336 * _3337) + _3307) * _3322))) * _3336;
                        float _4674 = isnan(0.0) ? _3347 : (isnan(_3347) ? 0.0 : max(_3347, 0.0));
                        float _3358 = (((_3308 * 3.1415927410125732421875) * (isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0)))) / ((_3330 * _3330) * ((_3274 * 2.1991131305694580078125) + 3.141590118408203125))) * _3263;
                        _3116 = (_3278 * _3226.x) + _3184;
                        _3117 = (_3278 * _3226.y) + _3185;
                        _3118 = (_3278 * _3226.z) + _3186;
                        _3113 = (_3358 * _3243.x) + _3181;
                        _3114 = (_3358 * _3243.y) + _3182;
                        _3115 = (_3358 * _3243.z) + _3183;
                        if (_3188 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3181 = _3113;
                            _3182 = _3114;
                            _3183 = _3115;
                            _3184 = _3116;
                            _3185 = _3117;
                            _3186 = _3118;
                            _3187 = _3188;
                        }
                    }
                    frontier_phi_66_pred = _3118;
                    frontier_phi_66_pred_1 = _3117;
                    frontier_phi_66_pred_2 = _3116;
                    frontier_phi_66_pred_3 = _3115;
                    frontier_phi_66_pred_4 = _3114;
                    frontier_phi_66_pred_5 = _3113;
                }
                _2923 = frontier_phi_66_pred;
                _2921 = frontier_phi_66_pred_1;
                _2919 = frontier_phi_66_pred_2;
                _2917 = frontier_phi_66_pred_3;
                _2915 = frontier_phi_66_pred_4;
                _2913 = frontier_phi_66_pred_5;
                uint _3064 = _3063 + 1u;
                if (_3064 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3057 = _2913;
                    _3058 = _2915;
                    _3059 = _2917;
                    _3060 = _2919;
                    _3061 = _2921;
                    _3062 = _2923;
                    _3063 = _3064;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2912 = _2913;
            _2914 = _2915;
            _2916 = _2917;
            _2918 = _2919;
            _2920 = _2921;
            _2922 = _2923;
        }
        uvec4 _2926 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2927 = _2926.z;
        uint _2929 = (_2927 >> 8u) & 15u;
        float _3025;
        float _3027;
        float _3029;
        float _3031;
        float _3033;
        float _3035;
        if (((4294967295u << _2929) & _2832) == 0u)
        {
            _3025 = _2912;
            _3027 = _2914;
            _3029 = _2916;
            _3031 = _2918;
            _3033 = _2920;
            _3035 = _2922;
        }
        else
        {
            float _3050 = inversesqrt(dot(vec3(_1891, _1892, _1893), vec3(_1891, _1892, _1893)));
            float _3051 = _3050 * _1891;
            float _3052 = _3050 * _1892;
            float _3053 = _3050 * _1893;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2929 < ((_2927 >> 12u) & 15u))
            {
                float _3026;
                float _3028;
                float _3030;
                float _3032;
                float _3034;
                float _3036;
                float _3164 = _2912;
                float _3165 = _2914;
                float _3166 = _2916;
                float _3167 = _2918;
                float _3168 = _2920;
                float _3169 = _2922;
                uint _3170 = _2929;
                uint _3179;
                bool _3180;
                for (;;)
                {
                    _3179 = texelFetch(g_lightClassification, int((((_2826 << 5u) + (_2812 << 9u)) + (_3170 << 2u)) >> 2u)).x;
                    _3180 = _3179 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3180)
                    {
                        frontier_phi_72_pred = _3169;
                        frontier_phi_72_pred_1 = _3168;
                        frontier_phi_72_pred_2 = _3167;
                        frontier_phi_72_pred_3 = _3166;
                        frontier_phi_72_pred_4 = _3165;
                        frontier_phi_72_pred_5 = _3164;
                    }
                    else
                    {
                        float _3363;
                        float _3364;
                        float _3365;
                        float _3366;
                        float _3367;
                        float _3368;
                        float _3657;
                        float _3658;
                        float _3659;
                        float _3660;
                        float _3661;
                        float _3662;
                        float _3376 = _3164;
                        float _3377 = _3165;
                        float _3378 = _3166;
                        float _3379 = _3167;
                        float _3380 = _3168;
                        float _3381 = _3169;
                        uint _3382 = _3179;
                        uint _3383;
                        vec4 _3408;
                        float _3409;
                        vec4 _3424;
                        vec3 _3436;
                        vec4 _3451;
                        vec4 _3467;
                        float _3513;
                        bool _3514;
                        for (;;)
                        {
                            uint _3393 = ((_3170 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3382));
                            _3383 = (_3382 + 4294967295u) & _3382;
                            uint _3395 = _3393 * 40u;
                            _3408 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3395)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 3u)).x));
                            _3409 = _3408.w;
                            uint _3411 = (_3393 * 40u) + 4u;
                            _3424 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3411)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3411 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3411 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3411 + 3u)).x));
                            uint _3426 = (_3393 * 40u) + 8u;
                            _3436 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3426)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 2u)).x));
                            uint _3438 = (_3393 * 40u) + 16u;
                            _3451 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3438)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 3u)).x));
                            uint _3454 = (_3393 * 40u) + 20u;
                            _3467 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3454)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 3u)).x));
                            uint _3469 = (_3393 * 40u) + 24u;
                            vec4 _3482 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3469)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3469 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3469 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3469 + 3u)).x));
                            uint _3488 = (_3393 * 40u) + 28u;
                            vec4 _3501 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3488)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3488 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3488 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3488 + 3u)).x));
                            _3513 = fma(_1893, _3501.z, fma(_1892, _3501.y, _3501.x * _1891)) + _3501.w;
                            _3514 = !((fma(_1893, _3482.z, fma(_1892, _3482.y, _3482.x * _1891)) + _3482.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3514)
                            {
                                float _3541 = _3408.x - _1891;
                                float _3542 = _3408.y - _1892;
                                float _3543 = _3408.z - _1893;
                                float _3544 = dot(vec3(_3541, _3542, _3543), vec3(_3541, _3542, _3543));
                                float _3547 = inversesqrt(_3544);
                                float _3548 = _3547 * _3541;
                                float _3549 = _3547 * _3542;
                                float _3550 = _3547 * _3543;
                                float _3554 = 1.0 - (_3544 / (_3409 * _3409));
                                float _4685 = isnan(0.0) ? _3554 : (isnan(_3554) ? 0.0 : max(_3554, 0.0));
                                float _3555 = isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0));
                                float _3559 = sqrt(_3544) * _3424.w;
                                float _3561 = 1.39999997615814208984375 / (_3559 + 1.39999997615814208984375);
                                float _3562 = _3561 * _3561;
                                float _3565 = ((1.0 - _3562) * dot(vec3(_3548, _3549, _3550), vec3(_756, _759, _762))) + _3562;
                                float _3568 = _3559 * _3559;
                                float _3572 = (fma(_1893, _3451.z, fma(_1892, _3451.y, _3451.x * _1891)) + _3451.w) / _3513;
                                float _3573 = (fma(_1893, _3467.z, fma(_1892, _3467.y, _3467.x * _1891)) + _3467.w) / _3513;
                                float _3577 = 1.0 - dot(vec2(_3572, _3573), vec2(_3572, _3573));
                                float _4701 = isnan(0.0) ? _3577 : (isnan(_3577) ? 0.0 : max(_3577, 0.0));
                                float _3578 = isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0));
                                float _3579 = _3578 * (((isnan(0.0) ? _3565 : (isnan(_3565) ? 0.0 : max(_3565, 0.0))) * _3555) / ((_3568 * 0.699999988079071044921875) + 1.0));
                                float _3591 = exp2(log2(1.0 / ((_3568 * 3.5) + 5.0)) * 0.25);
                                float _3592 = 1.0 - _831;
                                float _3599 = sqrt(1.0 - ((1.0 - (_3592 * _3592)) * (1.0 - (_3591 * _3591))));
                                float _3600 = _3599 * _3599;
                                float _3601 = _3600 * _3600;
                                float _3602 = _3548 - _3051;
                                float _3603 = _3549 - _3052;
                                float _3604 = _3550 - _3053;
                                float _3608 = inversesqrt(dot(vec3(_3602, _3603, _3604), vec3(_3602, _3603, _3604)));
                                float _3612 = dot(vec3(_756, _759, _762), vec3((-0.0) - _3051, (-0.0) - _3052, (-0.0) - _3053));
                                float _4712 = isnan(0.0) ? _3612 : (isnan(_3612) ? 0.0 : max(_3612, 0.0));
                                float _3615 = isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0));
                                float _3616 = dot(vec3(_756, _759, _762), vec3(_3608 * _3602, _3608 * _3603, _3608 * _3604));
                                float _4723 = isnan(0.0) ? _3616 : (isnan(_3616) ? 0.0 : max(_3616, 0.0));
                                float _3619 = isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0));
                                float _3623 = ((_3619 * _3619) * (_3601 + (-1.0))) + 1.0;
                                float _3624 = _3561 * _3600;
                                float _3625 = _3624 * _3624;
                                float _3631 = ((1.0 - _3625) * dot(vec3(_756, _759, _762), vec3(_3548, _3549, _3550))) + _3625;
                                float _4734 = isnan(0.0) ? _3631 : (isnan(_3631) ? 0.0 : max(_3631, 0.0));
                                float _3632 = isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0));
                                float _3633 = 1.0 - _3600;
                                float _3643 = (0.5 / (((_3632 * ((_3615 * _3633) + _3600)) + 9.9999999392252902907785028219223e-09) + (((_3632 * _3633) + _3600) * _3615))) * _3632;
                                float _4745 = isnan(0.0) ? _3643 : (isnan(_3643) ? 0.0 : max(_3643, 0.0));
                                float _3653 = (_3578 * _3555) * (((_3601 * 3.1415927410125732421875) * (isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0)))) / ((_3623 * _3623) * ((_3568 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3579 * _3424.y;
                                frontier_phi_78_pred_1 = _3579 * _3424.x;
                                frontier_phi_78_pred_2 = _3653 * _3436.z;
                                frontier_phi_78_pred_3 = _3653 * _3436.y;
                                frontier_phi_78_pred_4 = _3653 * _3436.x;
                                frontier_phi_78_pred_5 = _3579 * _3424.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3661 = frontier_phi_78_pred;
                            _3660 = frontier_phi_78_pred_1;
                            _3659 = frontier_phi_78_pred_2;
                            _3658 = frontier_phi_78_pred_3;
                            _3657 = frontier_phi_78_pred_4;
                            _3662 = frontier_phi_78_pred_5;
                            _3366 = _3660 + _3379;
                            _3367 = _3661 + _3380;
                            _3368 = _3662 + _3381;
                            _3363 = _3657 + _3376;
                            _3364 = _3658 + _3377;
                            _3365 = _3659 + _3378;
                            if (_3383 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3376 = _3363;
                                _3377 = _3364;
                                _3378 = _3365;
                                _3379 = _3366;
                                _3380 = _3367;
                                _3381 = _3368;
                                _3382 = _3383;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3368;
                        frontier_phi_72_pred_1 = _3367;
                        frontier_phi_72_pred_2 = _3366;
                        frontier_phi_72_pred_3 = _3365;
                        frontier_phi_72_pred_4 = _3364;
                        frontier_phi_72_pred_5 = _3363;
                    }
                    _3036 = frontier_phi_72_pred;
                    _3034 = frontier_phi_72_pred_1;
                    _3032 = frontier_phi_72_pred_2;
                    _3030 = frontier_phi_72_pred_3;
                    _3028 = frontier_phi_72_pred_4;
                    _3026 = frontier_phi_72_pred_5;
                    uint _3171 = _3170 + 1u;
                    if (_3171 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3164 = _3026;
                        _3165 = _3028;
                        _3166 = _3030;
                        _3167 = _3032;
                        _3168 = _3034;
                        _3169 = _3036;
                        _3170 = _3171;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3036;
                frontier_phi_60_61_ladder_1 = _3034;
                frontier_phi_60_61_ladder_2 = _3030;
                frontier_phi_60_61_ladder_3 = _3028;
                frontier_phi_60_61_ladder_4 = _3026;
                frontier_phi_60_61_ladder_5 = _3032;
            }
            else
            {
                frontier_phi_60_61_ladder = _2922;
                frontier_phi_60_61_ladder_1 = _2920;
                frontier_phi_60_61_ladder_2 = _2916;
                frontier_phi_60_61_ladder_3 = _2914;
                frontier_phi_60_61_ladder_4 = _2912;
                frontier_phi_60_61_ladder_5 = _2918;
            }
            _3025 = frontier_phi_60_61_ladder_4;
            _3027 = frontier_phi_60_61_ladder_3;
            _3029 = frontier_phi_60_61_ladder_2;
            _3031 = frontier_phi_60_61_ladder_5;
            _3033 = frontier_phi_60_61_ladder_1;
            _3035 = frontier_phi_60_61_ladder;
        }
        float _3040 = isnan(1.0) ? _815 : (isnan(_815) ? 1.0 : min(_815, 1.0));
        _2845 = (_3040 * _3031) + _2357;
        _2847 = (_3040 * _3033) + _2359;
        _2849 = (_3040 * _3035) + _2361;
        _2851 = ((_3025 * _799) * _3040) + _2695;
        _2853 = ((_3027 * _801) * _3040) + _2697;
        _2855 = ((_3029 * _802) * _3040) + _2699;
    }
    else
    {
        _2845 = _2357;
        _2847 = _2359;
        _2849 = _2361;
        _2851 = _2695;
        _2853 = _2697;
        _2855 = _2699;
    }
    float _4761 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
    float _4772 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
    float _4783 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
    uint _2875 = _236 + 6u;
    float _2883 = _737 / cbSceneParam._m0[86u].x;
    float _2884 = _738 / cbSceneParam._m0[86u].y;
    vec4 _2898 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2883, _2884, (log2((isnan(cbSceneParam._m0[77u].w) ? _671 : (isnan(_671) ? cbSceneParam._m0[77u].w : min(_671, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2900 = _2898.x;
    float _2901 = _2898.y;
    float _2902 = _2898.z;
    float _2903 = _2898.w;
    float _2975;
    float _2977;
    float _2979;
    float _2981;
    if (_671 > cbSceneParam._m0[78u].w)
    {
        float _2937 = isnan(_671) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _671 : min(cbSceneParam._m0[80u].w, _671));
        float _2938 = _2937 / _671;
        float _2949 = _2938 * _722;
        float _2950 = _723 * _2938;
        float _2951 = (-0.0) - _2950;
        float _2953 = _2938 * _724;
        float _2955 = (cbSceneParam._m0[77u].w * _2951) / _2937;
        float _2956 = _2955 + cbSceneParam._m0[79u].w;
        float _2957 = cbSceneParam._m0[79u].w - _2950;
        float _2963 = sqrt(((_2949 * _2949) + (_2950 * _2950)) + (_2953 * _2953));
        float _2966 = (1.0 - (cbSceneParam._m0[77u].w / _2937)) * _2963;
        float _2971 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2973 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3126;
        if (abs((_2951 - _2955) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3126 = ((((_2956 > 0.0) ? exp2(_2971 * _2956) : (2.0 - exp2(_2973 * _2956))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2966;
        }
        else
        {
            float _3086 = 1.0 / cbSceneParam._m0[80u].x;
            float _3087 = isnan(_2957) ? _2956 : (isnan(_2956) ? _2957 : max(_2956, _2957));
            float _3088 = isnan(_2957) ? _2956 : (isnan(_2956) ? _2957 : min(_2956, _2957));
            float _3097 = isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : min(_3087, 0.0));
            float _3098 = isnan(0.0) ? _3088 : (isnan(_3088) ? 0.0 : min(_3088, 0.0));
            _3126 = ((abs(_2963 / _2951) * cbSceneParam._m0[80u].y) * ((((_3097 - _3098) * 2.0) - ((exp2(_2971 * (isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : max(_3087, 0.0)))) - exp2(_2971 * (isnan(0.0) ? _3088 : (isnan(_3088) ? 0.0 : max(_3088, 0.0))))) * _3086)) - ((exp2(_2973 * _3097) - exp2(_2973 * _3098)) * _3086))) + (_2966 * cbSceneParam._m0[80u].z);
        }
        vec4 _3128 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2883, _2884, 1.0), 0.0);
        float _3137 = exp2((_3126 * (-1.44269502162933349609375)) * (1.0 - _3128.w));
        float _3138 = log2(_3137);
        float _3154 = log2(_2903);
        _2975 = (exp2(_3154 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3138 * cbSceneParam._m0[78u].x)) * _3128.x) / cbSceneParam._m0[78u].x)) + _2900;
        _2977 = (exp2(_3154 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3138 * cbSceneParam._m0[78u].y)) * _3128.y) / cbSceneParam._m0[78u].y)) + _2901;
        _2979 = (exp2(_3154 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3138 * cbSceneParam._m0[78u].z)) * _3128.z) / cbSceneParam._m0[78u].z)) + _2902;
        _2981 = _3137 * _2903;
    }
    else
    {
        _2975 = _2900;
        _2977 = _2901;
        _2979 = _2902;
        _2981 = _2903;
    }
    float _2993 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2994 = _2993 == 3.0;
    float _2995 = log2(_2981);
    float _3002 = exp2(_2995 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0))) * (_2845 + ((isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0))) * _815))) + ((_2851 + ((isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0))) * _1623)) * cbPerFrame._m0[3u].x));
    float _3003 = exp2(_2995 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0))) * (_2847 + ((isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0))) * _815))) + ((_2853 + ((isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0))) * _1623)) * cbPerFrame._m0[3u].x));
    float _3004 = exp2(_2995 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0))) * (_2849 + ((isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0))) * _815))) + ((_2855 + ((isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0))) * _1623)) * cbPerFrame._m0[3u].x));
    float _3013 = (_2993 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3013 * (_2994 ? _3002 : (_3002 + (cbSceneParam._m0[72u].w * _2975)));
    SV_Target.y = _3013 * (_2994 ? _3003 : (_3003 + (cbSceneParam._m0[72u].w * _2977)));
    SV_Target.z = _3013 * (_2994 ? _3004 : (_3004 + (cbSceneParam._m0[72u].w * _2979)));
    SV_Target.w = cbInstanceData._m0[_2875].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2875].w;
}


