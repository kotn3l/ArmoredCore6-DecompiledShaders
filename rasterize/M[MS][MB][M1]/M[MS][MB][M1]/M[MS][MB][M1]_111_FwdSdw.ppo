#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1232;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _216 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _217 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _218 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _224 = inversesqrt(dot(vec3(_216, _217, _218), vec3(_216, _217, _218)));
    float _225 = _224 * _216;
    float _226 = _224 * _217;
    float _227 = _224 * _218;
    float _231 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _232 = _231 * NORMAL.x;
    float _233 = _231 * NORMAL.y;
    float _234 = _231 * NORMAL.z;
    float _238 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _239 = _238 * TANGENT.x;
    float _240 = _238 * TANGENT.y;
    float _241 = _238 * TANGENT.z;
    uint _244 = uint(roundEven(NORMAL.w)) * 13u;
    uint _250 = _244 + 1u;
    uint _254 = _244 + 2u;
    float _263 = sqrt(((cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x) + (cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x)) + (cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x));
    float _264 = _263 * TEXCOORD.z;
    float _265 = _263 * TEXCOORD.w;
    vec4 _285 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _291 = _285.x * cbMtdParam._m0[11u].x;
    float _292 = _285.y * cbMtdParam._m0[11u].y;
    float _293 = _285.z * cbMtdParam._m0[11u].z;
    vec4 _312 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _264) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _265) + cbTextureTilingScale._m0[5u].w));
    vec4 _350 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _352 = _350.x;
    float _364 = dot(vec4(_352, _350.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _381 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_352 - _364) * cbMtdParam._m0[24u].y) + _364) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3842 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _382 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
    float _389 = (_382 * ((_312.x * cbMtdParam._m0[12u].x) - _291)) + _291;
    float _390 = (_382 * ((_312.y * cbMtdParam._m0[12u].y) - _292)) + _292;
    float _391 = (_382 * ((_312.z * cbMtdParam._m0[12u].z) - _293)) + _293;
    vec4 _409 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _264) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _265) + cbTextureTilingScale._m0[20u].w));
    vec4 _436 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _264) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _265) + cbTextureTilingScale._m0[4u].w));
    vec4 _453 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _455 = _453.x;
    float _456 = _453.y;
    float _457 = _453.z;
    float _466 = ((_436.z - _457) * _382) + _457;
    float _469 = ((((_436.x - _455) * _382) + _455) * 2.0) + (-1.0);
    float _470 = ((((_436.y - _456) * _382) + _456) * 2.0) + (-1.0);
    float _471 = dot(vec2(_469, _470), vec2(_469, _470));
    float _3853 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _476 = sqrt(1.0 - (isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0))));
    float _479 = _469 + ((((_409.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x);
    float _480 = _470 + ((((_409.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x);
    float _483 = fma(_476, _232, fma(_480, _239, _479 * _225));
    float _486 = fma(_476, _233, fma(_480, _240, _479 * _226));
    float _489 = fma(_476, _234, fma(_480, _241, _479 * _227));
    float _493 = inversesqrt(dot(vec3(_483, _486, _489), vec3(_483, _486, _489)));
    vec4 _509 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _535 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _264) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _265) + cbTextureTilingScale._m0[11u].w));
    float _537 = _535.x;
    float _538 = 1.0 - _537;
    float _542 = ((_537 - _538) * cbMtdParam._m0[24u].z) + _538;
    float _544 = (cbMtdParam._m0[19u].x + dot(vec4(_493 * _483, _493 * _486, _493 * _489, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_542 * cbMtdParam._m0[21u].z);
    float _3864 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _545 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
    float _560 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_542 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3875 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _561 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
    float _565 = ((_545 * (cbMtdParam._m0[17u].x - _389)) * _561) + _389;
    float _566 = ((_545 * (cbMtdParam._m0[17u].y - _390)) * _561) + _390;
    float _567 = ((_545 * (cbMtdParam._m0[17u].z - _391)) * _561) + _391;
    vec4 _579 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _593 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _595 = _593.x;
    float _613 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _264) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _265) + cbTextureTilingScale._m0[9u].w)).x - _595) * _382) + _595;
    float _617 = ((_579.x - _613) * cbMtdParam._m0[19u].z) + _613;
    float _620 = _617 - ((_561 * _545) * _617);
    float _625 = (((_409.z - _466) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _466;
    vec4 _638 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _264) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _265) + cbTextureTilingScale._m0[15u].w));
    float _645 = (_638.x * 2.0) + (-1.0);
    float _646 = (_638.y * 2.0) + (-1.0);
    float _647 = dot(vec2(_645, _646), vec2(_645, _646));
    float _3886 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _656 = (((_638.z - _625) * _545) * _561) + _625;
    float _671 = (((cbMtdParam._m0[21u].x * _479) + ((_645 - _479) * _545)) * _561) + _479;
    float _672 = (((cbMtdParam._m0[21u].x * _480) + ((_646 - _480) * _545)) * _561) + _480;
    float _673 = (((sqrt(1.0 - (isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0)))) - _476) * _545) * _561) + _476;
    float _678 = cbMtdParam._m0[22u].x + _509.w;
    float _681 = fma(_673, _232, fma(_672, _239, _671 * _225));
    float _684 = fma(_673, _233, fma(_672, _240, _671 * _226));
    float _687 = fma(_673, _234, fma(_672, _241, _671 * _227));
    float _691 = inversesqrt(dot(vec3(_681, _684, _687), vec3(_681, _684, _687)));
    float _692 = _691 * _681;
    float _693 = _691 * _684;
    float _694 = _691 * _687;
    float _3897 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _695 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
    float _3908 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
    float _3919 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _3930 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _3941 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _3952 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _700 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
    float _714 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _755 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _765 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _755);
    float _766 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _755);
    float _767 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _755);
    float _771 = inversesqrt(dot(vec3(_765, _766, _767), vec3(_765, _766, _767)));
    float _772 = _765 * _771;
    float _773 = _766 * _771;
    float _774 = _767 * _771;
    float _780 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _781 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _799 = fma(_694, cbSceneParam._m0[5u].z, fma(_693, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _692));
    float _802 = fma(_694, cbSceneParam._m0[6u].z, fma(_693, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _692));
    float _805 = fma(_694, cbSceneParam._m0[7u].z, fma(_693, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _692));
    uint _819 = (_244 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _825 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0)))) * cbInstanceData._m0[_819].x;
    float _826 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0)))) * cbInstanceData._m0[_819].y;
    float _827 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0)))) * cbInstanceData._m0[_819].z;
    float _3963 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
    float _828 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
    float _3974 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
    float _829 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
    float _3985 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
    float _830 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
    float _831 = 1.0 - _700;
    float _832 = _828 * _831;
    float _833 = _829 * _831;
    float _834 = _830 * _831;
    float _839 = (_828 + (-0.039999999105930328369140625)) * _700;
    float _840 = (_829 + (-0.039999999105930328369140625)) * _700;
    float _841 = (_830 + (-0.039999999105930328369140625)) * _700;
    float _842 = _839 + 0.039999999105930328369140625;
    float _844 = _840 + 0.039999999105930328369140625;
    float _845 = _841 + 0.039999999105930328369140625;
    vec4 _854 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _780, cbSceneParam._m0[86u].y * _781));
    float _858 = ((isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0))) * TEXCOORD_5.w) * _854.x;
    float _859 = dot(vec3(_692, _693, _694), vec3(_772, _773, _774));
    float _862 = _859 * 2.0;
    float _866 = (_862 * _692) - _772;
    float _867 = (_862 * _693) - _773;
    float _868 = (_862 * _694) - _774;
    float _872 = abs(dot(vec3(_772, _773, _774), vec3(_692, _693, _694)));
    float _3996 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
    float _874 = sqrt(_695);
    float _887 = exp2((_874 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_874 * 3.0));
    float _893 = (1.0 - _887) * ((_874 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _894 = _887 * _874;
    float _922 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _926 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _930 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1231;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _956 = fma(_930, cbModelParam._m0[26u].z, fma(_926, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _922));
        float _960 = fma(_930, cbModelParam._m0[27u].z, fma(_926, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _922));
        float _964 = fma(_930, cbModelParam._m0[28u].z, fma(_926, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _922));
        float _989 = _922 + _692;
        float _990 = _926 + _693;
        float _991 = _930 + _694;
        float _1001 = fma(_991, cbModelParam._m0[26u].z, fma(_990, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _989)) - _956;
        float _1002 = fma(_991, cbModelParam._m0[27u].z, fma(_990, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _989)) - _960;
        float _1003 = fma(_991, cbModelParam._m0[28u].z, fma(_990, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _989)) - _964;
        float _1007 = inversesqrt(dot(vec3(_1001, _1002, _1003), vec3(_1001, _1002, _1003)));
        float _1020 = ((_1007 * _1001) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_956 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1021 = ((_1007 * _1002) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_960 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1022 = ((_1007 * _1003) / cbModelParam._m0[34u].z) + ((((((_964 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1025 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1020, _1021, _1022), 0.0);
        vec4 _1032 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1020, _1021, _1022), 0.0);
        vec4 _1039 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1020, _1021, _1022), 0.0);
        vec4 _1046 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1020, _1021, _1022), 0.0);
        float _1059 = exp2((_1025.w + (-0.5)) * 20.0) * 2.0;
        float _1060 = _1059 * (_1025.x + (-0.5));
        float _1061 = _1059 * (_1025.y + (-0.5));
        float _1062 = _1059 * (_1025.z + (-0.5));
        float _1069 = exp2((_1032.w + (-0.5)) * 20.0) * 2.0;
        float _1070 = _1069 * (_1032.x + (-0.5));
        float _1071 = _1069 * (_1032.y + (-0.5));
        float _1072 = _1069 * (_1032.z + (-0.5));
        float _1079 = exp2((_1039.w + (-0.5)) * 20.0) * 2.0;
        float _1080 = _1079 * (_1039.x + (-0.5));
        float _1081 = _1079 * (_1039.y + (-0.5));
        float _1082 = _1079 * (_1039.z + (-0.5));
        float _1089 = exp2((_1046.w + (-0.5)) * 20.0) * 2.0;
        float _1090 = _1089 * (_1046.x + (-0.5));
        float _1091 = _1089 * (_1046.y + (-0.5));
        float _1092 = _1089 * (_1046.z + (-0.5));
        float _1093 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1094 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1095 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1096 = _1060 * 0.5;
        float _1097 = _1070 * 0.5;
        float _1098 = _1080 * 0.5;
        float _1099 = dot(vec3(_1096, _1097, _1098), vec3(_1096, _1097, _1098));
        float _1104 = (_1099 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1099);
        float _1113 = (dot(vec3(_692, _693, _694), vec3(_1104 * _1096, _1104 * _1097, _1104 * _1098)) + 1.0) * 0.5;
        float _4022 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1123 = sqrt(((_1097 * _1097) + (_1096 * _1096)) + (_1098 * _1098)) / (_1093 + 9.9999997473787516355514526367188e-06);
        float _4033 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1124 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
        float _1125 = _1124 * 2.0;
        float _1129 = (1.0 - _1124) / (_1124 + 1.0);
        float _4044 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1130 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
        float _1139 = ((((1.0 - _1130) * (_1125 + 2.0)) * exp2(log2(isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0))) * (_1125 + 1.0))) + _1130) * _1093;
        float _1140 = _1061 * 0.5;
        float _1141 = _1071 * 0.5;
        float _1142 = _1081 * 0.5;
        float _1143 = dot(vec3(_1140, _1141, _1142), vec3(_1140, _1141, _1142));
        float _1148 = (_1143 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1143);
        float _1156 = (dot(vec3(_692, _693, _694), vec3(_1148 * _1140, _1148 * _1141, _1148 * _1142)) + 1.0) * 0.5;
        float _4055 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1165 = sqrt(((_1141 * _1141) + (_1140 * _1140)) + (_1142 * _1142)) / (_1094 + 9.9999997473787516355514526367188e-06);
        float _4066 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1166 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
        float _1167 = _1166 * 2.0;
        float _1171 = (1.0 - _1166) / (_1166 + 1.0);
        float _4077 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1172 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
        float _1181 = ((((1.0 - _1172) * (_1167 + 2.0)) * exp2(log2(isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0))) * (_1167 + 1.0))) + _1172) * _1094;
        float _1182 = _1062 * 0.5;
        float _1183 = _1072 * 0.5;
        float _1184 = _1082 * 0.5;
        float _1185 = dot(vec3(_1182, _1183, _1184), vec3(_1182, _1183, _1184));
        float _1190 = (_1185 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1185);
        float _1198 = (dot(vec3(_692, _693, _694), vec3(_1190 * _1182, _1190 * _1183, _1190 * _1184)) + 1.0) * 0.5;
        float _4088 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1207 = sqrt(((_1183 * _1183) + (_1182 * _1182)) + (_1184 * _1184)) / (_1095 + 9.9999997473787516355514526367188e-06);
        float _4099 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1208 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
        float _1209 = _1208 * 2.0;
        float _1213 = (1.0 - _1208) / (_1208 + 1.0);
        float _4110 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1214 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
        float _1223 = ((((1.0 - _1214) * (_1209 + 2.0)) * exp2(log2(isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0))) * (_1209 + 1.0))) + _1214) * _1095;
        _1231 = _1062;
        _1233 = _1061;
        _1234 = _1060;
        _1235 = _1072;
        _1236 = _1071;
        _1237 = _1070;
        _1238 = _1082;
        _1239 = _1081;
        _1240 = _1080;
        _1241 = _1095;
        _1242 = _1094;
        _1243 = _1093;
        _1244 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0)));
        _1245 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0)));
        _1246 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0)));
    }
    else
    {
        _1231 = _1232;
        _1233 = _1232;
        _1234 = _1232;
        _1235 = _1232;
        _1236 = _1232;
        _1237 = _1232;
        _1238 = _1232;
        _1239 = _1232;
        _1240 = _1232;
        _1241 = _1232;
        _1242 = _1232;
        _1243 = _1232;
        _1244 = 0.0;
        _1245 = 0.0;
        _1246 = 0.0;
    }
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    float _1548;
    float _1549;
    float _1550;
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1271 = fma(_930, cbModelParam._m0[30u].z, fma(_926, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _922));
        float _1275 = fma(_930, cbModelParam._m0[31u].z, fma(_926, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _922));
        float _1279 = fma(_930, cbModelParam._m0[32u].z, fma(_926, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _922));
        float _1302 = _922 + _692;
        float _1303 = _926 + _693;
        float _1304 = _930 + _694;
        float _1314 = fma(_1304, cbModelParam._m0[30u].z, fma(_1303, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1302)) - _1271;
        float _1315 = fma(_1304, cbModelParam._m0[31u].z, fma(_1303, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1302)) - _1275;
        float _1316 = fma(_1304, cbModelParam._m0[32u].z, fma(_1303, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1302)) - _1279;
        float _1320 = inversesqrt(dot(vec3(_1314, _1315, _1316), vec3(_1314, _1315, _1316)));
        float _1333 = ((_1320 * _1314) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1271 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1334 = ((_1320 * _1315) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1275 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1335 = ((_1320 * _1316) / cbModelParam._m0[35u].z) + ((((((_1279 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1337 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1333, _1334, _1335), 0.0);
        vec4 _1344 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1333, _1334, _1335), 0.0);
        vec4 _1351 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1333, _1334, _1335), 0.0);
        vec4 _1358 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1333, _1334, _1335), 0.0);
        float _1370 = exp2((_1337.w + (-0.5)) * 20.0) * 2.0;
        float _1371 = _1370 * (_1337.x + (-0.5));
        float _1372 = _1370 * (_1337.y + (-0.5));
        float _1373 = _1370 * (_1337.z + (-0.5));
        float _1380 = exp2((_1344.w + (-0.5)) * 20.0) * 2.0;
        float _1381 = _1380 * (_1344.x + (-0.5));
        float _1382 = _1380 * (_1344.y + (-0.5));
        float _1383 = _1380 * (_1344.z + (-0.5));
        float _1390 = exp2((_1351.w + (-0.5)) * 20.0) * 2.0;
        float _1391 = _1390 * (_1351.x + (-0.5));
        float _1392 = _1390 * (_1351.y + (-0.5));
        float _1393 = _1390 * (_1351.z + (-0.5));
        float _1400 = exp2((_1358.w + (-0.5)) * 20.0) * 2.0;
        float _1401 = _1400 * (_1358.x + (-0.5));
        float _1402 = _1400 * (_1358.y + (-0.5));
        float _1403 = _1400 * (_1358.z + (-0.5));
        float _1404 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1405 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1406 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1407 = _1371 * 0.5;
        float _1408 = _1381 * 0.5;
        float _1409 = _1391 * 0.5;
        float _1410 = dot(vec3(_1407, _1408, _1409), vec3(_1407, _1408, _1409));
        float _1415 = (_1410 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1410);
        float _1423 = (dot(vec3(_692, _693, _694), vec3(_1415 * _1407, _1415 * _1408, _1415 * _1409)) + 1.0) * 0.5;
        float _4151 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1432 = sqrt(((_1408 * _1408) + (_1407 * _1407)) + (_1409 * _1409)) / (_1404 + 9.9999997473787516355514526367188e-06);
        float _4162 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1433 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
        float _1434 = _1433 * 2.0;
        float _1438 = (1.0 - _1433) / (_1433 + 1.0);
        float _4173 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1439 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
        float _1448 = ((((1.0 - _1439) * (_1434 + 2.0)) * exp2(log2(isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0))) * (_1434 + 1.0))) + _1439) * _1404;
        float _1449 = _1372 * 0.5;
        float _1450 = _1382 * 0.5;
        float _1451 = _1392 * 0.5;
        float _1452 = dot(vec3(_1449, _1450, _1451), vec3(_1449, _1450, _1451));
        float _1457 = (_1452 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1452);
        float _1465 = (dot(vec3(_692, _693, _694), vec3(_1457 * _1449, _1457 * _1450, _1457 * _1451)) + 1.0) * 0.5;
        float _4184 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1474 = sqrt(((_1450 * _1450) + (_1449 * _1449)) + (_1451 * _1451)) / (_1405 + 9.9999997473787516355514526367188e-06);
        float _4195 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1475 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
        float _1476 = _1475 * 2.0;
        float _1480 = (1.0 - _1475) / (_1475 + 1.0);
        float _4206 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1481 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
        float _1490 = ((((1.0 - _1481) * (_1476 + 2.0)) * exp2(log2(isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0))) * (_1476 + 1.0))) + _1481) * _1405;
        float _1491 = _1373 * 0.5;
        float _1492 = _1383 * 0.5;
        float _1493 = _1393 * 0.5;
        float _1494 = dot(vec3(_1491, _1492, _1493), vec3(_1491, _1492, _1493));
        float _1499 = (_1494 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1494);
        float _1507 = (dot(vec3(_692, _693, _694), vec3(_1499 * _1491, _1499 * _1492, _1499 * _1493)) + 1.0) * 0.5;
        float _4217 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1516 = sqrt(((_1492 * _1492) + (_1491 * _1491)) + (_1493 * _1493)) / (_1406 + 9.9999997473787516355514526367188e-06);
        float _4228 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
        float _1517 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
        float _1518 = _1517 * 2.0;
        float _1522 = (1.0 - _1517) / (_1517 + 1.0);
        float _4239 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1523 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
        float _1532 = ((((1.0 - _1523) * (_1518 + 2.0)) * exp2(log2(isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0))) * (_1518 + 1.0))) + _1523) * _1406;
        _1540 = _1373;
        _1541 = _1372;
        _1542 = _1371;
        _1543 = _1383;
        _1544 = _1382;
        _1545 = _1381;
        _1546 = _1393;
        _1547 = _1392;
        _1548 = _1391;
        _1549 = _1406;
        _1550 = _1405;
        _1551 = _1404;
        _1552 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0)));
        _1553 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0)));
        _1554 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0)));
    }
    else
    {
        _1540 = _1232;
        _1541 = _1232;
        _1542 = _1232;
        _1543 = _1232;
        _1544 = _1232;
        _1545 = _1232;
        _1546 = _1232;
        _1547 = _1232;
        _1548 = _1232;
        _1549 = _1232;
        _1550 = _1232;
        _1551 = _1232;
        _1552 = 0.0;
        _1553 = 0.0;
        _1554 = 0.0;
    }
    float _1564 = (cbModelParam._m0[1u].x * (_1552 - _1244)) + _1244;
    float _1565 = (cbModelParam._m0[1u].x * (_1553 - _1245)) + _1245;
    float _1566 = (cbModelParam._m0[1u].x * (_1554 - _1246)) + _1246;
    float _1587 = fma(_1566, cbSceneParam._m0[89u].z, fma(_1565, cbSceneParam._m0[89u].y, _1564 * cbSceneParam._m0[89u].x));
    float _1590 = fma(_1566, cbSceneParam._m0[90u].z, fma(_1565, cbSceneParam._m0[90u].y, _1564 * cbSceneParam._m0[90u].x));
    float _1593 = fma(_1566, cbSceneParam._m0[91u].z, fma(_1565, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1564));
    float _1608 = _866 * 0.5;
    float _1609 = _867 * 0.5;
    float _1610 = _868 * 0.5;
    float _1611 = dot(vec4(_1608, _1609, _1610, 1.0), vec4(_1542, _1545, _1548, _1551));
    float _1614 = dot(vec4(_1608, _1609, _1610, 1.0), vec4(_1541, _1544, _1547, _1550));
    float _1617 = dot(vec4(_1608, _1609, _1610, 1.0), vec4(_1540, _1543, _1546, _1549));
    float _1651;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1624 = dot(vec4(_1608, _1609, _1610, 1.0), vec4(_1231, _1235, _1238, _1241));
        float _1628 = dot(vec4(_1608, _1609, _1610, 1.0), vec4(_1233, _1236, _1239, _1242));
        float _1632 = dot(vec4(_1608, _1609, _1610, 1.0), vec4(_1234, _1237, _1240, _1243));
        float _1639 = dot(vec4(cbModelParam._m0[39u]), vec4(_1608, _1609, _1610, 1.0));
        _1651 = dot(vec3(isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0)), isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0)), isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1639) ? 0.0 : (isnan(0.0) ? _1639 : max(0.0, _1639))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1651 = 1.0;
    }
    float _1662;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1653 = dot(vec4(cbModelParam._m0[40u]), vec4(_1608, _1609, _1610, 1.0));
        _1662 = dot(vec3(isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0)), isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0)), isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1653) ? 0.0 : (isnan(0.0) ? _1653 : max(0.0, _1653))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1662 = 1.0;
    }
    float _1666 = (_1662 * cbModelParam._m0[1u].x) + (_1651 * (1.0 - cbModelParam._m0[1u].x));
    float _1676 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _695);
    float _1677 = isnan(_1676) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1676 : min(cbModelParam._m0[25u].z, _1676));
    float _1758;
    float _1760;
    float _1762;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1725 = fma(_930, cbModelParam._m0[13u].z, fma(_926, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _922)) + cbModelParam._m0[13u].w;
        float _1729 = fma(_930, cbModelParam._m0[14u].z, fma(_926, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _922)) + cbModelParam._m0[14u].w;
        float _1733 = fma(_930, cbModelParam._m0[15u].z, fma(_926, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _922)) + cbModelParam._m0[15u].w;
        float _1736 = fma(_868, cbModelParam._m0[13u].z, fma(_867, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _866));
        float _1739 = fma(_868, cbModelParam._m0[14u].z, fma(_867, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _866));
        float _1742 = fma(_868, cbModelParam._m0[15u].z, fma(_867, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _866));
        float _1770;
        if (_1736 > 0.0)
        {
            _1770 = abs((1.0 - _1725) / _1736);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1736 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1725 + 1.0) / _1736);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1770 = frontier_phi_14_12_ladder;
        }
        float _1942;
        if (_1739 > 0.0)
        {
            _1942 = abs((1.0 - _1729) / _1739);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1739 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1729 + 1.0) / _1739);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1942 = frontier_phi_23_19_ladder;
        }
        float _2237;
        if (_1742 > 0.0)
        {
            _2237 = abs((1.0 - _1733) / _1742);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1742 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1733 + 1.0) / _1742);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2237 = frontier_phi_35_30_ladder;
        }
        float _2239 = isnan(_1942) ? _1770 : (isnan(_1770) ? _1942 : min(_1770, _1942));
        float _2240 = isnan(_2237) ? _2239 : (isnan(_2239) ? _2237 : min(_2239, _2237));
        float _2244 = (_2240 * _1736) + _1725;
        float _2245 = (_2240 * _1739) + _1729;
        float _2246 = (_2240 * _1742) + _1733;
        float _2247 = _2240 * 9.9999997473787516355514526367188e-05;
        float _2249 = (-1.0) - _2247;
        float _2251 = _2247 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2246 > _2251) || ((_2246 < _2249) || ((_2245 > _2251) || ((_2245 < _2249) || ((_2244 < _2249) || (_2244 > _2251))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2391 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2246, cbModelParam._m0[9u].z, fma(_2245, cbModelParam._m0[9u].y, _2244 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2246, cbModelParam._m0[10u].z, fma(_2245, cbModelParam._m0[10u].y, _2244 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2246, cbModelParam._m0[11u].z, fma(_2245, cbModelParam._m0[11u].y, _2244 * cbModelParam._m0[11u].x))), _1677);
            frontier_phi_13_35_ladder = _2391.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2391.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2391.x * cbModelParam._m0[1u].y;
        }
        _1758 = frontier_phi_13_35_ladder_2;
        _1760 = frontier_phi_13_35_ladder_1;
        _1762 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1746 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_866, _867, _868), _1677);
        _1758 = _1746.x * cbModelParam._m0[1u].y;
        _1760 = _1746.y * cbModelParam._m0[1u].y;
        _1762 = _1746.z * cbModelParam._m0[1u].y;
    }
    float _1766 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _695);
    float _1767 = isnan(_1766) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1766 : min(cbModelParam._m0[25u].w, _1766));
    float _1857;
    float _1859;
    float _1861;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1821 = fma(_930, cbModelParam._m0[21u].z, fma(_926, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _922)) + cbModelParam._m0[21u].w;
        float _1825 = fma(_930, cbModelParam._m0[22u].z, fma(_926, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _922)) + cbModelParam._m0[22u].w;
        float _1829 = fma(_930, cbModelParam._m0[23u].z, fma(_926, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _922)) + cbModelParam._m0[23u].w;
        float _1832 = fma(_868, cbModelParam._m0[21u].z, fma(_867, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _866));
        float _1835 = fma(_868, cbModelParam._m0[22u].z, fma(_867, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _866));
        float _1838 = fma(_868, cbModelParam._m0[23u].z, fma(_867, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _866));
        float _1947;
        if (_1832 > 0.0)
        {
            _1947 = abs((1.0 - _1821) / _1832);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1832 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1821 + 1.0) / _1832);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1947 = frontier_phi_25_21_ladder;
        }
        float _2264;
        if (_1835 > 0.0)
        {
            _2264 = abs((1.0 - _1825) / _1835);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1835 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1825 + 1.0) / _1835);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2264 = frontier_phi_37_32_ladder;
        }
        float _2602;
        if (_1838 > 0.0)
        {
            _2602 = abs((1.0 - _1829) / _1838);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1838 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1829 + 1.0) / _1838);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2602 = frontier_phi_47_44_ladder;
        }
        float _2604 = isnan(_2264) ? _1947 : (isnan(_1947) ? _2264 : min(_1947, _2264));
        float _2605 = isnan(_2602) ? _2604 : (isnan(_2604) ? _2602 : min(_2604, _2602));
        float _2609 = (_2605 * _1832) + _1821;
        float _2610 = (_2605 * _1835) + _1825;
        float _2611 = (_2605 * _1838) + _1829;
        float _2612 = _2605 * 9.9999997473787516355514526367188e-05;
        float _2613 = (-1.0) - _2612;
        float _2615 = _2612 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2611 > _2615) || ((_2611 < _2613) || ((_2610 > _2615) || ((_2610 < _2613) || ((_2609 < _2613) || (_2609 > _2615))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2733 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2611, cbModelParam._m0[17u].z, fma(_2610, cbModelParam._m0[17u].y, _2609 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2611, cbModelParam._m0[18u].z, fma(_2610, cbModelParam._m0[18u].y, _2609 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2611, cbModelParam._m0[19u].z, fma(_2610, cbModelParam._m0[19u].y, _2609 * cbModelParam._m0[19u].x))), _1767);
            frontier_phi_22_47_ladder = _2733.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2733.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2733.x * cbModelParam._m0[1u].z;
        }
        _1857 = frontier_phi_22_47_ladder_2;
        _1859 = frontier_phi_22_47_ladder_1;
        _1861 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1841 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_866, _867, _868), _1767);
        _1857 = _1841.x * cbModelParam._m0[1u].z;
        _1859 = _1841.y * cbModelParam._m0[1u].z;
        _1861 = _1841.z * cbModelParam._m0[1u].z;
    }
    float _1874 = (((_893 * _842) + _894) * _858) * ((cbModelParam._m0[1u].w * (_1857 - _1758)) + _1758);
    float _1876 = (((_893 * _844) + _894) * _858) * ((cbModelParam._m0[1u].w * (_1859 - _1760)) + _1760);
    float _1878 = (((_893 * _845) + _894) * _858) * ((cbModelParam._m0[1u].w * (_1861 - _1762)) + _1762);
    float _1881 = fma(_1878, cbSceneParam._m0[89u].z, fma(_1876, cbSceneParam._m0[89u].y, _1874 * cbSceneParam._m0[89u].x));
    float _1884 = fma(_1878, cbSceneParam._m0[90u].z, fma(_1876, cbSceneParam._m0[90u].y, _1874 * cbSceneParam._m0[90u].x));
    float _1887 = fma(_1878, cbSceneParam._m0[91u].z, fma(_1876, cbSceneParam._m0[91u].y, _1874 * cbSceneParam._m0[91u].x));
    float _1921 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1925 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1929 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1933 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1934 = _1921 / _1933;
    float _1935 = _1925 / _1933;
    float _1936 = _1929 / _1933;
    float _2083;
    float _2084;
    float _2085;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1963 = ((uint(_1936 > cbSceneParam._m0[59u].y) + uint(_1936 > cbSceneParam._m0[59u].x)) + uint(_1936 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1964 = _1963 + 43u;
        uint _1972 = _1963 + 44u;
        uint _1980 = _1963 + 45u;
        uint _1988 = _1963 + 46u;
        float _1999 = fma(_1933, cbSceneParam._m0[_1964].w, fma(_1929, cbSceneParam._m0[_1964].z, fma(_1925, cbSceneParam._m0[_1964].y, _1921 * cbSceneParam._m0[_1964].x)));
        float _2003 = fma(_1933, cbSceneParam._m0[_1972].w, fma(_1929, cbSceneParam._m0[_1972].z, fma(_1925, cbSceneParam._m0[_1972].y, _1921 * cbSceneParam._m0[_1972].x)));
        float _2011 = fma(_1933, cbSceneParam._m0[_1988].w, fma(_1929, cbSceneParam._m0[_1988].z, fma(_1925, cbSceneParam._m0[_1988].y, _1921 * cbSceneParam._m0[_1988].x)));
        float _2016 = cbSceneParam._m0[33u].z * _2011;
        float _2018 = cbSceneParam._m0[33u].w * _2011;
        float _2021 = fma(_1933, cbSceneParam._m0[_1980].w, fma(_1929, cbSceneParam._m0[_1980].z, fma(_1925, cbSceneParam._m0[_1980].y, _1921 * cbSceneParam._m0[_1980].x))) / _2011;
        float _2069 = (cbSceneParam._m0[33u].x - sqrt(((_1935 * _1935) + (_1934 * _1934)) + (_1936 * _1936))) * cbSceneParam._m0[33u].y;
        float _4365 = isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0));
        float _2076 = (isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2016 + _1999) / _2011, (_2018 + _2003) / _2011), _2021), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2018 + _1999) / _2011, (_2003 - _2016) / _2011), _2021), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1999 - _2016) / _2011, (_2003 - _2018) / _2011), _2021), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1999 - _2018) / _2011, (_2016 + _2003) / _2011), _2021), 0.0)).x), vec4(0.25)));
        _2083 = 1.0 - (_2076 * cbSceneParam._m0[34u].x);
        _2084 = 1.0 - (_2076 * cbSceneParam._m0[34u].y);
        _2085 = 1.0 - (_2076 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2083 = 1.0;
        _2084 = 1.0;
        _2085 = 1.0;
    }
    float _2149;
    float _2151;
    float _2153;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2137 = fma(_1933, cbSceneParam._m0[63u].w, fma(_1929, cbSceneParam._m0[63u].z, fma(_1925, cbSceneParam._m0[63u].y, _1921 * cbSceneParam._m0[63u].x)));
        float _2138 = fma(_1933, cbSceneParam._m0[60u].w, fma(_1929, cbSceneParam._m0[60u].z, fma(_1925, cbSceneParam._m0[60u].y, _1921 * cbSceneParam._m0[60u].x))) / _2137;
        float _2139 = fma(_1933, cbSceneParam._m0[61u].w, fma(_1929, cbSceneParam._m0[61u].z, fma(_1925, cbSceneParam._m0[61u].y, _1921 * cbSceneParam._m0[61u].x))) / _2137;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2138 >= cbSceneParam._m0[64u].x) && (_2139 >= cbSceneParam._m0[64u].y)) && (_2138 <= cbSceneParam._m0[64u].z)) && (_2139 <= cbSceneParam._m0[64u].w))
        {
            float _2277 = fma(_1933, cbSceneParam._m0[62u].w, fma(_1929, cbSceneParam._m0[62u].z, fma(_1925, cbSceneParam._m0[62u].y, _1921 * cbSceneParam._m0[62u].x))) / _2137;
            float _2281 = isnan(cbSceneParam._m0[41u].w) ? _2277 : (isnan(_2277) ? cbSceneParam._m0[41u].w : max(_2277, cbSceneParam._m0[41u].w));
            float _2324 = (cbSceneParam._m0[33u].x - sqrt(((_1935 * _1935) + (_1934 * _1934)) + (_1936 * _1936))) * cbSceneParam._m0[33u].y;
            float _4381 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
            float _2331 = (isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2138, cbSceneParam._m0[33u].w + _2139), _2281), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2138, _2139 - cbSceneParam._m0[33u].z), _2281), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2138 - cbSceneParam._m0[33u].z, _2139 - cbSceneParam._m0[33u].w), _2281), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2138 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2139), _2281), 0.0)).x), vec4(0.25)));
            float _2335 = 1.0 - (_2331 * cbSceneParam._m0[34u].x);
            float _2336 = 1.0 - (_2331 * cbSceneParam._m0[34u].y);
            float _2337 = 1.0 - (_2331 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2337) ? _2085 : (isnan(_2085) ? _2337 : min(_2085, _2337));
            frontier_phi_34_33_ladder_1 = isnan(_2336) ? _2084 : (isnan(_2084) ? _2336 : min(_2084, _2336));
            frontier_phi_34_33_ladder_2 = isnan(_2335) ? _2083 : (isnan(_2083) ? _2335 : min(_2083, _2335));
        }
        else
        {
            frontier_phi_34_33_ladder = _2085;
            frontier_phi_34_33_ladder_1 = _2084;
            frontier_phi_34_33_ladder_2 = _2083;
        }
        _2149 = frontier_phi_34_33_ladder_2;
        _2151 = frontier_phi_34_33_ladder_1;
        _2153 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2149 = _2083;
        _2151 = _2084;
        _2153 = _2085;
    }
    uvec4 _2158 = floatBitsToUint(cbInstanceData._m0[_244 + 5u]);
    uint _2160 = _2158.x * 14u;
    uint _2161 = _2160 + 13u;
    float _2168 = _858 + (-1.0);
    float _2173 = (cbLight._m0[_2161].x * _2168) + 1.0;
    float _2174 = (cbLight._m0[_2161].y * _2168) + 1.0;
    float _2175 = (cbLight._m0[_2161].z * _2168) + 1.0;
    float _2176 = (cbLight._m0[_2161].w * _2168) + 1.0;
    uint _2177 = _2160 + 5u;
    float _2183 = isnan(1.0) ? _2174 : (isnan(_2174) ? 1.0 : min(_2174, 1.0));
    uint _2187 = _2160 + 4u;
    float _2196 = isnan(1.0) ? _2173 : (isnan(_2173) ? 1.0 : min(_2173, 1.0));
    uint _2200 = _2160 | 1u;
    float _2211 = dot(vec3(cbLight._m0[_2160].xyz), vec3(_692, _693, _694));
    float _2214 = dot(vec3(cbLight._m0[_2200].xyz), vec3(_692, _693, _694));
    float _4417 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
    float _4428 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
    float _2219 = (isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0))) * 0.3183098733425140380859375;
    float _2221 = (isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0))) * 0.3183098733425140380859375;
    float _2228 = ((cbLight._m0[_2177].x * _2183) * _2221) + (((cbLight._m0[_2187].x * _2149) * _2196) * _2219);
    float _2229 = ((_2183 * cbLight._m0[_2177].y) * _2221) + (((cbLight._m0[_2187].y * _2151) * _2196) * _2219);
    float _2230 = ((_2183 * cbLight._m0[_2177].z) * _2221) + (((cbLight._m0[_2187].z * _2153) * _2196) * _2219);
    uvec4 _2234 = floatBitsToUint(cbLight._m0[_2160 + 12u]);
    bool _2236 = _2234.x == 0u;
    float _2338;
    float _2340;
    float _2342;
    if (_2236)
    {
        _2338 = _2228;
        _2340 = _2229;
        _2342 = _2230;
    }
    else
    {
        uint _2346 = _2160 + 6u;
        float _2362 = (dot(vec3(cbLight._m0[_2160 + 2u].xyz), vec3(_692, _693, _694)) * 0.5) + 0.5;
        float _2363 = _2362 * _2362;
        float _4439 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
        float _2364 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
        float _2365 = isnan(1.0) ? _2175 : (isnan(_2175) ? 1.0 : min(_2175, 1.0));
        _2338 = (((cbLight._m0[_2346].x * 0.3183098733425140380859375) * _2364) * _2365) + _2228;
        _2340 = (((cbLight._m0[_2346].y * 0.3183098733425140380859375) * _2364) * _2365) + _2229;
        _2342 = (((cbLight._m0[_2346].z * 0.3183098733425140380859375) * _2364) * _2365) + _2230;
    }
    bool _2345 = _2234.y == 0u;
    float _2400;
    float _2402;
    float _2404;
    if (_2345)
    {
        _2400 = _2338;
        _2402 = _2340;
        _2404 = _2342;
    }
    else
    {
        uint _2573 = _2160 + 7u;
        float _2589 = (dot(vec3(cbLight._m0[_2160 + 3u].xyz), vec3(_692, _693, _694)) * 0.5) + 0.5;
        float _2590 = _2589 * _2589;
        float _4455 = isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : max(_2590, 0.0));
        float _2591 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
        float _2592 = isnan(1.0) ? _2176 : (isnan(_2176) ? 1.0 : min(_2176, 1.0));
        _2400 = (((cbLight._m0[_2573].x * 0.3183098733425140380859375) * _2591) * _2592) + _2338;
        _2402 = (((cbLight._m0[_2573].y * 0.3183098733425140380859375) * _2591) * _2592) + _2340;
        _2404 = (((cbLight._m0[_2573].z * 0.3183098733425140380859375) * _2591) * _2592) + _2342;
    }
    uint _2407 = _2160 + 8u;
    float _2420 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2160].w)) * _695) * 0.949999988079071044921875);
    float _2421 = _2420 * _2420;
    float _2422 = cbLight._m0[_2160].x + _772;
    float _2423 = cbLight._m0[_2160].y + _773;
    float _2424 = cbLight._m0[_2160].z + _774;
    float _2428 = inversesqrt(dot(vec3(_2422, _2423, _2424), vec3(_2422, _2423, _2424)));
    float _2429 = _2428 * _2422;
    float _2430 = _2428 * _2423;
    float _2431 = _2428 * _2424;
    float _2432 = dot(vec3(_692, _693, _694), vec3(cbLight._m0[_2160].xyz));
    float _4471 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0));
    float _2435 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
    float _4482 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
    float _2436 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
    float _2437 = dot(vec3(_692, _693, _694), vec3(_2429, _2430, _2431));
    float _4493 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
    float _2440 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
    float _2441 = dot(vec3(cbLight._m0[_2160].xyz), vec3(_2429, _2430, _2431));
    float _4504 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
    float _2445 = _2421 * _2421;
    float _2449 = ((_2440 * _2440) * (_2445 + (-1.0))) + 1.0;
    float _2457 = exp2(log2(1.0 - (isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0)))) * 5.0);
    float _2458 = 0.959999978542327880859375 - _839;
    float _2460 = 0.959999978542327880859375 - _840;
    float _2461 = 0.959999978542327880859375 - _841;
    float _2468 = 1.0 - _2421;
    float _2479 = (0.5 / (((_2436 * ((_2435 * _2468) + _2421)) + 9.9999999392252902907785028219223e-09) + (((_2436 * _2468) + _2421) * _2435))) * _2435;
    float _4515 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0));
    float _2481 = (isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0))) * (_2445 / ((_2449 * _2449) * 3.141590118408203125));
    uint _2495 = _2160 + 9u;
    float _2506 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2200].w)) * _695) * 0.949999988079071044921875);
    float _2507 = _2506 * _2506;
    float _2508 = cbLight._m0[_2200].x + _772;
    float _2509 = cbLight._m0[_2200].y + _773;
    float _2510 = cbLight._m0[_2200].z + _774;
    float _2514 = inversesqrt(dot(vec3(_2508, _2509, _2510), vec3(_2508, _2509, _2510)));
    float _2515 = _2514 * _2508;
    float _2516 = _2514 * _2509;
    float _2517 = _2514 * _2510;
    float _2518 = dot(vec3(_692, _693, _694), vec3(cbLight._m0[_2200].xyz));
    float _4526 = isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0));
    float _2521 = isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0));
    float _2522 = dot(vec3(_692, _693, _694), vec3(_2515, _2516, _2517));
    float _4537 = isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : max(_2522, 0.0));
    float _2525 = isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0));
    float _2526 = dot(vec3(cbLight._m0[_2200].xyz), vec3(_2515, _2516, _2517));
    float _4548 = isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0));
    float _2530 = _2507 * _2507;
    float _2534 = ((_2525 * _2525) * (_2530 + (-1.0))) + 1.0;
    float _2541 = exp2(log2(1.0 - (isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0)))) * 5.0);
    float _2548 = 1.0 - _2507;
    float _2558 = (0.5 / (((_2436 * ((_2521 * _2548) + _2507)) + 9.9999999392252902907785028219223e-09) + (((_2436 * _2548) + _2507) * _2521))) * _2521;
    float _4559 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0));
    float _2560 = (isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0))) * (_2530 / ((_2534 * _2534) * 3.141590118408203125));
    float _2570 = (((((_2541 * _2458) + _842) * cbLight._m0[_2495].x) * _2560) * _2183) + ((((cbLight._m0[_2407].x * _2149) * ((_2457 * _2458) + _842)) * _2481) * _2196);
    float _2571 = (((((_2541 * _2460) + _844) * cbLight._m0[_2495].y) * _2560) * _2183) + ((((cbLight._m0[_2407].y * _2151) * ((_2457 * _2460) + _844)) * _2481) * _2196);
    float _2572 = (((((_2541 * _2461) + _845) * cbLight._m0[_2495].z) * _2560) * _2183) + ((((cbLight._m0[_2407].z * _2153) * ((_2457 * _2461) + _845)) * _2481) * _2196);
    float _2628;
    float _2630;
    float _2632;
    if (_2236)
    {
        _2628 = _2570;
        _2630 = _2571;
        _2632 = _2572;
    }
    else
    {
        uint _2634 = _2160 + 2u;
        uint _2638 = _2160 + 10u;
        float _2652 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2634].w)) * _695) * 0.949999988079071044921875);
        float _2653 = _2652 * _2652;
        float _2654 = cbLight._m0[_2634].x + _772;
        float _2655 = cbLight._m0[_2634].y + _773;
        float _2656 = cbLight._m0[_2634].z + _774;
        float _2660 = inversesqrt(dot(vec3(_2654, _2655, _2656), vec3(_2654, _2655, _2656)));
        float _2661 = _2660 * _2654;
        float _2662 = _2660 * _2655;
        float _2663 = _2660 * _2656;
        float _2664 = dot(vec3(_692, _693, _694), vec3(cbLight._m0[_2634].xyz));
        float _4570 = isnan(0.0) ? _2664 : (isnan(_2664) ? 0.0 : max(_2664, 0.0));
        float _2667 = isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0));
        float _2668 = dot(vec3(_692, _693, _694), vec3(_2661, _2662, _2663));
        float _4581 = isnan(0.0) ? _2668 : (isnan(_2668) ? 0.0 : max(_2668, 0.0));
        float _2671 = isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0));
        float _2672 = dot(vec3(cbLight._m0[_2634].xyz), vec3(_2661, _2662, _2663));
        float _4592 = isnan(0.0) ? _2672 : (isnan(_2672) ? 0.0 : max(_2672, 0.0));
        float _2676 = _2653 * _2653;
        float _2680 = ((_2671 * _2671) * (_2676 + (-1.0))) + 1.0;
        float _2687 = exp2(log2(1.0 - (isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0)))) * 5.0);
        float _2694 = 1.0 - _2653;
        float _2704 = (0.5 / (((_2436 * ((_2667 * _2694) + _2653)) + 9.9999999392252902907785028219223e-09) + (((_2436 * _2694) + _2653) * _2667))) * _2667;
        float _4603 = isnan(0.0) ? _2704 : (isnan(_2704) ? 0.0 : max(_2704, 0.0));
        float _2706 = (isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0))) * (_2676 / ((_2680 * _2680) * 3.141590118408203125));
        float _2707 = isnan(1.0) ? _2175 : (isnan(_2175) ? 1.0 : min(_2175, 1.0));
        _2628 = (((((_2687 * _2458) + _842) * cbLight._m0[_2638].x) * _2706) * _2707) + _2570;
        _2630 = (((((_2687 * _2460) + _844) * cbLight._m0[_2638].y) * _2706) * _2707) + _2571;
        _2632 = (((((_2687 * _2461) + _845) * cbLight._m0[_2638].z) * _2706) * _2707) + _2572;
    }
    float _2738;
    float _2740;
    float _2742;
    if (_2345)
    {
        _2738 = _2628;
        _2740 = _2630;
        _2742 = _2632;
    }
    else
    {
        uint _2749 = _2160 + 3u;
        uint _2753 = _2160 + 11u;
        float _2767 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2749].w)) * _695) * 0.949999988079071044921875);
        float _2768 = _2767 * _2767;
        float _2769 = cbLight._m0[_2749].x + _772;
        float _2770 = cbLight._m0[_2749].y + _773;
        float _2771 = cbLight._m0[_2749].z + _774;
        float _2775 = inversesqrt(dot(vec3(_2769, _2770, _2771), vec3(_2769, _2770, _2771)));
        float _2776 = _2775 * _2769;
        float _2777 = _2775 * _2770;
        float _2778 = _2775 * _2771;
        float _2779 = dot(vec3(_692, _693, _694), vec3(cbLight._m0[_2749].xyz));
        float _4619 = isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : max(_2779, 0.0));
        float _2782 = isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0));
        float _2783 = dot(vec3(_692, _693, _694), vec3(_2776, _2777, _2778));
        float _4630 = isnan(0.0) ? _2783 : (isnan(_2783) ? 0.0 : max(_2783, 0.0));
        float _2786 = isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0));
        float _2787 = dot(vec3(cbLight._m0[_2749].xyz), vec3(_2776, _2777, _2778));
        float _4641 = isnan(0.0) ? _2787 : (isnan(_2787) ? 0.0 : max(_2787, 0.0));
        float _2791 = _2768 * _2768;
        float _2795 = ((_2786 * _2786) * (_2791 + (-1.0))) + 1.0;
        float _2802 = exp2(log2(1.0 - (isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0)))) * 5.0);
        float _2809 = 1.0 - _2768;
        float _2819 = (0.5 / (((_2436 * ((_2782 * _2809) + _2768)) + 9.9999999392252902907785028219223e-09) + (((_2436 * _2809) + _2768) * _2782))) * _2782;
        float _4652 = isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : max(_2819, 0.0));
        float _2821 = (isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0))) * (_2791 / ((_2795 * _2795) * 3.141590118408203125));
        float _2822 = isnan(1.0) ? _2176 : (isnan(_2176) ? 1.0 : min(_2176, 1.0));
        _2738 = (((((_2802 * _2458) + _842) * cbLight._m0[_2753].x) * _2821) * _2822) + _2628;
        _2740 = (((((_2802 * _2460) + _844) * cbLight._m0[_2753].y) * _2821) * _2822) + _2630;
        _2742 = (((((_2802 * _2461) + _845) * cbLight._m0[_2753].z) * _2821) * _2822) + _2632;
    }
    float _2888;
    float _2890;
    float _2892;
    float _2894;
    float _2896;
    float _2898;
    if (_2158.y == 0u)
    {
        uvec4 _2843 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2844 = _2843.x;
        uint _2855 = uint((float(_2843.y) * floor(float(uint(cbSceneParam._m0[85u].y * _781) / _2844))) + floor(float(uint(cbSceneParam._m0[85u].x * _780) / _2844)));
        float _2865 = (log2(_1936 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2866 = isnan(0.0) ? _2865 : (isnan(_2865) ? 0.0 : max(_2865, 0.0));
        uint _2869 = uint(isnan(14.0) ? _2866 : (isnan(_2866) ? 14.0 : min(_2866, 14.0)));
        uvec4 _2874 = texelFetch(g_lightClusterGridBuffer, int(((_2869 << 2u) + (_2855 << 6u)) >> 2u));
        uint _2875 = _2874.x;
        uint _2876 = _2843.z;
        float _2955;
        float _2957;
        float _2959;
        float _2961;
        float _2963;
        float _2965;
        if (((((1u << ((_2876 >> 4u) & 15u)) + 4294967295u) & _2875) == 0u) || ((_2876 & 240u) == 0u))
        {
            _2955 = 0.0;
            _2957 = 0.0;
            _2959 = 0.0;
            _2961 = 0.0;
            _2963 = 0.0;
            _2965 = 0.0;
        }
        else
        {
            float _2956;
            float _2958;
            float _2960;
            float _2962;
            float _2964;
            float _2966;
            float _3100 = 0.0;
            float _3101 = 0.0;
            float _3102 = 0.0;
            float _3103 = 0.0;
            float _3104 = 0.0;
            float _3105 = 0.0;
            uint _3106 = 0u;
            uint _3115;
            bool _3116;
            for (;;)
            {
                _3115 = texelFetch(g_lightClassification, int((((_2869 << 5u) + (_2855 << 9u)) + (_3106 << 2u)) >> 2u)).x;
                _3116 = _3115 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3116)
                {
                    frontier_phi_66_pred = _3105;
                    frontier_phi_66_pred_1 = _3104;
                    frontier_phi_66_pred_2 = _3103;
                    frontier_phi_66_pred_3 = _3102;
                    frontier_phi_66_pred_4 = _3101;
                    frontier_phi_66_pred_5 = _3100;
                }
                else
                {
                    float _3224;
                    float _3225;
                    float _3226;
                    float _3227;
                    float _3228;
                    float _3229;
                    uint _3230;
                    _3224 = _3100;
                    _3225 = _3101;
                    _3226 = _3102;
                    _3227 = _3103;
                    _3228 = _3104;
                    _3229 = _3105;
                    _3230 = _3115;
                    float _3156;
                    float _3157;
                    float _3158;
                    float _3159;
                    float _3160;
                    float _3161;
                    for (;;)
                    {
                        uint _3234 = uint(findLSB(_3230)) + (_3106 << 5u);
                        uint _3231 = (_3230 + 4294967295u) & _3230;
                        uint _3236 = _3234 * 48u;
                        vec4 _3250 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3236)).x, texelFetch(g_PointLightRenderingBuffer, int(_3236 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3236 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3236 + 3u)).x));
                        uint _3256 = (_3234 * 48u) + 4u;
                        vec4 _3269 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3256)).x, texelFetch(g_PointLightRenderingBuffer, int(_3256 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3256 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3256 + 3u)).x));
                        uint _3275 = (_3234 * 48u) + 8u;
                        vec3 _3286 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3275)).x, texelFetch(g_PointLightRenderingBuffer, int(_3275 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3275 + 2u)).x));
                        float _3290 = _3250.x - _1934;
                        float _3291 = _3250.y - _1935;
                        float _3292 = _3250.z - _1936;
                        float _3293 = dot(vec3(_3290, _3291, _3292), vec3(_3290, _3291, _3292));
                        float _3296 = inversesqrt(_3293);
                        float _3297 = _3296 * _3290;
                        float _3298 = _3296 * _3291;
                        float _3299 = _3296 * _3292;
                        float _3300 = dot(vec3(_799, _802, _805), vec3(_3297, _3298, _3299));
                        float _3305 = 1.0 - (_3293 * _3250.w);
                        float _4678 = isnan(0.0) ? _3305 : (isnan(_3305) ? 0.0 : max(_3305, 0.0));
                        float _3306 = isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0));
                        float _3307 = sqrt(_3293) * _3269.w;
                        float _3310 = 1.39999997615814208984375 / (_3307 + 1.39999997615814208984375);
                        float _3311 = _3310 * _3310;
                        float _3314 = ((1.0 - _3311) * _3300) + _3311;
                        float _3317 = _3307 * _3307;
                        float _3321 = ((isnan(0.0) ? _3314 : (isnan(_3314) ? 0.0 : max(_3314, 0.0))) * _3306) / ((_3317 * 0.699999988079071044921875) + 1.0);
                        float _3325 = (-0.0) - _1934;
                        float _3326 = (-0.0) - _1935;
                        float _3327 = (-0.0) - _1936;
                        float _3331 = inversesqrt(dot(vec3(_3325, _3326, _3327), vec3(_3325, _3326, _3327)));
                        float _3332 = _3331 * _3325;
                        float _3333 = _3331 * _3326;
                        float _3334 = _3331 * _3327;
                        float _3341 = exp2(log2(1.0 / ((_3317 * 3.5) + 5.0)) * 0.25);
                        float _3342 = 1.0 - _874;
                        float _3349 = sqrt(1.0 - ((1.0 - (_3342 * _3342)) * (1.0 - (_3341 * _3341))));
                        float _3350 = _3349 * _3349;
                        float _3351 = _3350 * _3350;
                        float _3352 = _3332 + _3297;
                        float _3353 = _3333 + _3298;
                        float _3354 = _3334 + _3299;
                        float _3358 = inversesqrt(dot(vec3(_3352, _3353, _3354), vec3(_3352, _3353, _3354)));
                        float _3362 = dot(vec3(_799, _802, _805), vec3(_3332, _3333, _3334));
                        float _4694 = isnan(0.0) ? _3362 : (isnan(_3362) ? 0.0 : max(_3362, 0.0));
                        float _3365 = isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0));
                        float _3366 = dot(vec3(_799, _802, _805), vec3(_3358 * _3352, _3358 * _3353, _3358 * _3354));
                        float _4705 = isnan(0.0) ? _3366 : (isnan(_3366) ? 0.0 : max(_3366, 0.0));
                        float _3369 = isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0));
                        float _3373 = ((_3369 * _3369) * (_3351 + (-1.0))) + 1.0;
                        float _3374 = _3310 * _3350;
                        float _3375 = _3374 * _3374;
                        float _3378 = ((1.0 - _3375) * _3300) + _3375;
                        float _4716 = isnan(0.0) ? _3378 : (isnan(_3378) ? 0.0 : max(_3378, 0.0));
                        float _3379 = isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0));
                        float _3380 = 1.0 - _3350;
                        float _3390 = (0.5 / (((_3379 * ((_3365 * _3380) + _3350)) + 9.9999999392252902907785028219223e-09) + (((_3379 * _3380) + _3350) * _3365))) * _3379;
                        float _4727 = isnan(0.0) ? _3390 : (isnan(_3390) ? 0.0 : max(_3390, 0.0));
                        float _3401 = (((_3351 * 3.1415927410125732421875) * (isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0)))) / ((_3373 * _3373) * ((_3317 * 2.1991131305694580078125) + 3.141590118408203125))) * _3306;
                        _3159 = (_3321 * _3269.x) + _3227;
                        _3160 = (_3321 * _3269.y) + _3228;
                        _3161 = (_3321 * _3269.z) + _3229;
                        _3156 = (_3401 * _3286.x) + _3224;
                        _3157 = (_3401 * _3286.y) + _3225;
                        _3158 = (_3401 * _3286.z) + _3226;
                        if (_3231 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3224 = _3156;
                            _3225 = _3157;
                            _3226 = _3158;
                            _3227 = _3159;
                            _3228 = _3160;
                            _3229 = _3161;
                            _3230 = _3231;
                        }
                    }
                    frontier_phi_66_pred = _3161;
                    frontier_phi_66_pred_1 = _3160;
                    frontier_phi_66_pred_2 = _3159;
                    frontier_phi_66_pred_3 = _3158;
                    frontier_phi_66_pred_4 = _3157;
                    frontier_phi_66_pred_5 = _3156;
                }
                _2966 = frontier_phi_66_pred;
                _2964 = frontier_phi_66_pred_1;
                _2962 = frontier_phi_66_pred_2;
                _2960 = frontier_phi_66_pred_3;
                _2958 = frontier_phi_66_pred_4;
                _2956 = frontier_phi_66_pred_5;
                uint _3107 = _3106 + 1u;
                if (_3107 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3100 = _2956;
                    _3101 = _2958;
                    _3102 = _2960;
                    _3103 = _2962;
                    _3104 = _2964;
                    _3105 = _2966;
                    _3106 = _3107;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2955 = _2956;
            _2957 = _2958;
            _2959 = _2960;
            _2961 = _2962;
            _2963 = _2964;
            _2965 = _2966;
        }
        uvec4 _2969 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2970 = _2969.z;
        uint _2972 = (_2970 >> 8u) & 15u;
        float _3068;
        float _3070;
        float _3072;
        float _3074;
        float _3076;
        float _3078;
        if (((4294967295u << _2972) & _2875) == 0u)
        {
            _3068 = _2955;
            _3070 = _2957;
            _3072 = _2959;
            _3074 = _2961;
            _3076 = _2963;
            _3078 = _2965;
        }
        else
        {
            float _3093 = inversesqrt(dot(vec3(_1934, _1935, _1936), vec3(_1934, _1935, _1936)));
            float _3094 = _3093 * _1934;
            float _3095 = _3093 * _1935;
            float _3096 = _3093 * _1936;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2972 < ((_2970 >> 12u) & 15u))
            {
                float _3069;
                float _3071;
                float _3073;
                float _3075;
                float _3077;
                float _3079;
                float _3207 = _2955;
                float _3208 = _2957;
                float _3209 = _2959;
                float _3210 = _2961;
                float _3211 = _2963;
                float _3212 = _2965;
                uint _3213 = _2972;
                uint _3222;
                bool _3223;
                for (;;)
                {
                    _3222 = texelFetch(g_lightClassification, int((((_2869 << 5u) + (_2855 << 9u)) + (_3213 << 2u)) >> 2u)).x;
                    _3223 = _3222 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3223)
                    {
                        frontier_phi_72_pred = _3212;
                        frontier_phi_72_pred_1 = _3211;
                        frontier_phi_72_pred_2 = _3210;
                        frontier_phi_72_pred_3 = _3209;
                        frontier_phi_72_pred_4 = _3208;
                        frontier_phi_72_pred_5 = _3207;
                    }
                    else
                    {
                        float _3406;
                        float _3407;
                        float _3408;
                        float _3409;
                        float _3410;
                        float _3411;
                        float _3699;
                        float _3700;
                        float _3701;
                        float _3702;
                        float _3703;
                        float _3704;
                        float _3419 = _3207;
                        float _3420 = _3208;
                        float _3421 = _3209;
                        float _3422 = _3210;
                        float _3423 = _3211;
                        float _3424 = _3212;
                        uint _3425 = _3222;
                        uint _3426;
                        vec4 _3451;
                        float _3452;
                        vec4 _3467;
                        vec3 _3479;
                        vec4 _3494;
                        vec4 _3509;
                        float _3555;
                        bool _3556;
                        for (;;)
                        {
                            uint _3436 = ((_3213 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3425));
                            _3426 = (_3425 + 4294967295u) & _3425;
                            uint _3438 = _3436 * 40u;
                            _3451 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3438)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 3u)).x));
                            _3452 = _3451.w;
                            uint _3454 = (_3436 * 40u) + 4u;
                            _3467 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3454)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 3u)).x));
                            uint _3469 = (_3436 * 40u) + 8u;
                            _3479 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3469)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3469 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3469 + 2u)).x));
                            uint _3481 = (_3436 * 40u) + 16u;
                            _3494 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3481)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 3u)).x));
                            uint _3496 = (_3436 * 40u) + 20u;
                            _3509 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3496)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 3u)).x));
                            uint _3511 = (_3436 * 40u) + 24u;
                            vec4 _3524 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3511)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 3u)).x));
                            uint _3530 = (_3436 * 40u) + 28u;
                            vec4 _3543 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3530)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3530 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3530 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3530 + 3u)).x));
                            _3555 = fma(_1936, _3543.z, fma(_1935, _3543.y, _3543.x * _1934)) + _3543.w;
                            _3556 = !((fma(_1936, _3524.z, fma(_1935, _3524.y, _3524.x * _1934)) + _3524.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3556)
                            {
                                float _3583 = _3451.x - _1934;
                                float _3584 = _3451.y - _1935;
                                float _3585 = _3451.z - _1936;
                                float _3586 = dot(vec3(_3583, _3584, _3585), vec3(_3583, _3584, _3585));
                                float _3589 = inversesqrt(_3586);
                                float _3590 = _3589 * _3583;
                                float _3591 = _3589 * _3584;
                                float _3592 = _3589 * _3585;
                                float _3596 = 1.0 - (_3586 / (_3452 * _3452));
                                float _4738 = isnan(0.0) ? _3596 : (isnan(_3596) ? 0.0 : max(_3596, 0.0));
                                float _3597 = isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0));
                                float _3601 = sqrt(_3586) * _3467.w;
                                float _3603 = 1.39999997615814208984375 / (_3601 + 1.39999997615814208984375);
                                float _3604 = _3603 * _3603;
                                float _3607 = ((1.0 - _3604) * dot(vec3(_3590, _3591, _3592), vec3(_799, _802, _805))) + _3604;
                                float _3610 = _3601 * _3601;
                                float _3614 = (fma(_1936, _3494.z, fma(_1935, _3494.y, _3494.x * _1934)) + _3494.w) / _3555;
                                float _3615 = (fma(_1936, _3509.z, fma(_1935, _3509.y, _3509.x * _1934)) + _3509.w) / _3555;
                                float _3619 = 1.0 - dot(vec2(_3614, _3615), vec2(_3614, _3615));
                                float _4754 = isnan(0.0) ? _3619 : (isnan(_3619) ? 0.0 : max(_3619, 0.0));
                                float _3620 = isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0));
                                float _3621 = _3620 * (((isnan(0.0) ? _3607 : (isnan(_3607) ? 0.0 : max(_3607, 0.0))) * _3597) / ((_3610 * 0.699999988079071044921875) + 1.0));
                                float _3633 = exp2(log2(1.0 / ((_3610 * 3.5) + 5.0)) * 0.25);
                                float _3634 = 1.0 - _874;
                                float _3641 = sqrt(1.0 - ((1.0 - (_3634 * _3634)) * (1.0 - (_3633 * _3633))));
                                float _3642 = _3641 * _3641;
                                float _3643 = _3642 * _3642;
                                float _3644 = _3590 - _3094;
                                float _3645 = _3591 - _3095;
                                float _3646 = _3592 - _3096;
                                float _3650 = inversesqrt(dot(vec3(_3644, _3645, _3646), vec3(_3644, _3645, _3646)));
                                float _3654 = dot(vec3(_799, _802, _805), vec3((-0.0) - _3094, (-0.0) - _3095, (-0.0) - _3096));
                                float _4765 = isnan(0.0) ? _3654 : (isnan(_3654) ? 0.0 : max(_3654, 0.0));
                                float _3657 = isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0));
                                float _3658 = dot(vec3(_799, _802, _805), vec3(_3650 * _3644, _3650 * _3645, _3650 * _3646));
                                float _4776 = isnan(0.0) ? _3658 : (isnan(_3658) ? 0.0 : max(_3658, 0.0));
                                float _3661 = isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0));
                                float _3665 = ((_3661 * _3661) * (_3643 + (-1.0))) + 1.0;
                                float _3666 = _3603 * _3642;
                                float _3667 = _3666 * _3666;
                                float _3673 = ((1.0 - _3667) * dot(vec3(_799, _802, _805), vec3(_3590, _3591, _3592))) + _3667;
                                float _4787 = isnan(0.0) ? _3673 : (isnan(_3673) ? 0.0 : max(_3673, 0.0));
                                float _3674 = isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0));
                                float _3675 = 1.0 - _3642;
                                float _3685 = (0.5 / (((_3674 * ((_3657 * _3675) + _3642)) + 9.9999999392252902907785028219223e-09) + (((_3674 * _3675) + _3642) * _3657))) * _3674;
                                float _4798 = isnan(0.0) ? _3685 : (isnan(_3685) ? 0.0 : max(_3685, 0.0));
                                float _3695 = (_3620 * _3597) * (((_3643 * 3.1415927410125732421875) * (isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0)))) / ((_3665 * _3665) * ((_3610 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3621 * _3467.y;
                                frontier_phi_78_pred_1 = _3621 * _3467.x;
                                frontier_phi_78_pred_2 = _3695 * _3479.z;
                                frontier_phi_78_pred_3 = _3695 * _3479.y;
                                frontier_phi_78_pred_4 = _3695 * _3479.x;
                                frontier_phi_78_pred_5 = _3621 * _3467.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3703 = frontier_phi_78_pred;
                            _3702 = frontier_phi_78_pred_1;
                            _3701 = frontier_phi_78_pred_2;
                            _3700 = frontier_phi_78_pred_3;
                            _3699 = frontier_phi_78_pred_4;
                            _3704 = frontier_phi_78_pred_5;
                            _3409 = _3702 + _3422;
                            _3410 = _3703 + _3423;
                            _3411 = _3704 + _3424;
                            _3406 = _3699 + _3419;
                            _3407 = _3700 + _3420;
                            _3408 = _3701 + _3421;
                            if (_3426 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3419 = _3406;
                                _3420 = _3407;
                                _3421 = _3408;
                                _3422 = _3409;
                                _3423 = _3410;
                                _3424 = _3411;
                                _3425 = _3426;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3411;
                        frontier_phi_72_pred_1 = _3410;
                        frontier_phi_72_pred_2 = _3409;
                        frontier_phi_72_pred_3 = _3408;
                        frontier_phi_72_pred_4 = _3407;
                        frontier_phi_72_pred_5 = _3406;
                    }
                    _3079 = frontier_phi_72_pred;
                    _3077 = frontier_phi_72_pred_1;
                    _3075 = frontier_phi_72_pred_2;
                    _3073 = frontier_phi_72_pred_3;
                    _3071 = frontier_phi_72_pred_4;
                    _3069 = frontier_phi_72_pred_5;
                    uint _3214 = _3213 + 1u;
                    if (_3214 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3207 = _3069;
                        _3208 = _3071;
                        _3209 = _3073;
                        _3210 = _3075;
                        _3211 = _3077;
                        _3212 = _3079;
                        _3213 = _3214;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3079;
                frontier_phi_60_61_ladder_1 = _3077;
                frontier_phi_60_61_ladder_2 = _3073;
                frontier_phi_60_61_ladder_3 = _3071;
                frontier_phi_60_61_ladder_4 = _3069;
                frontier_phi_60_61_ladder_5 = _3075;
            }
            else
            {
                frontier_phi_60_61_ladder = _2965;
                frontier_phi_60_61_ladder_1 = _2963;
                frontier_phi_60_61_ladder_2 = _2959;
                frontier_phi_60_61_ladder_3 = _2957;
                frontier_phi_60_61_ladder_4 = _2955;
                frontier_phi_60_61_ladder_5 = _2961;
            }
            _3068 = frontier_phi_60_61_ladder_4;
            _3070 = frontier_phi_60_61_ladder_3;
            _3072 = frontier_phi_60_61_ladder_2;
            _3074 = frontier_phi_60_61_ladder_5;
            _3076 = frontier_phi_60_61_ladder_1;
            _3078 = frontier_phi_60_61_ladder;
        }
        float _3083 = isnan(1.0) ? _858 : (isnan(_858) ? 1.0 : min(_858, 1.0));
        _2888 = (_3083 * _3074) + _2400;
        _2890 = (_3083 * _3076) + _2402;
        _2892 = (_3083 * _3078) + _2404;
        _2894 = ((_3068 * _842) * _3083) + _2738;
        _2896 = ((_3070 * _844) * _3083) + _2740;
        _2898 = ((_3072 * _845) * _3083) + _2742;
    }
    else
    {
        _2888 = _2400;
        _2890 = _2402;
        _2892 = _2404;
        _2894 = _2738;
        _2896 = _2740;
        _2898 = _2742;
    }
    float _4814 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
    float _4825 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
    float _4836 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
    uint _2918 = _244 + 6u;
    float _2926 = _780 / cbSceneParam._m0[86u].x;
    float _2927 = _781 / cbSceneParam._m0[86u].y;
    vec4 _2941 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2926, _2927, (log2((isnan(cbSceneParam._m0[77u].w) ? _714 : (isnan(_714) ? cbSceneParam._m0[77u].w : min(_714, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2943 = _2941.x;
    float _2944 = _2941.y;
    float _2945 = _2941.z;
    float _2946 = _2941.w;
    float _3018;
    float _3020;
    float _3022;
    float _3024;
    if (_714 > cbSceneParam._m0[78u].w)
    {
        float _2980 = isnan(_714) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _714 : min(cbSceneParam._m0[80u].w, _714));
        float _2981 = _2980 / _714;
        float _2992 = _2981 * _765;
        float _2993 = _766 * _2981;
        float _2994 = (-0.0) - _2993;
        float _2996 = _2981 * _767;
        float _2998 = (cbSceneParam._m0[77u].w * _2994) / _2980;
        float _2999 = _2998 + cbSceneParam._m0[79u].w;
        float _3000 = cbSceneParam._m0[79u].w - _2993;
        float _3006 = sqrt(((_2992 * _2992) + (_2993 * _2993)) + (_2996 * _2996));
        float _3009 = (1.0 - (cbSceneParam._m0[77u].w / _2980)) * _3006;
        float _3014 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3016 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3169;
        if (abs((_2994 - _2998) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3169 = ((((_2999 > 0.0) ? exp2(_3014 * _2999) : (2.0 - exp2(_3016 * _2999))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3009;
        }
        else
        {
            float _3129 = 1.0 / cbSceneParam._m0[80u].x;
            float _3130 = isnan(_3000) ? _2999 : (isnan(_2999) ? _3000 : max(_2999, _3000));
            float _3131 = isnan(_3000) ? _2999 : (isnan(_2999) ? _3000 : min(_2999, _3000));
            float _3140 = isnan(0.0) ? _3130 : (isnan(_3130) ? 0.0 : min(_3130, 0.0));
            float _3141 = isnan(0.0) ? _3131 : (isnan(_3131) ? 0.0 : min(_3131, 0.0));
            _3169 = ((abs(_3006 / _2994) * cbSceneParam._m0[80u].y) * ((((_3140 - _3141) * 2.0) - ((exp2(_3014 * (isnan(0.0) ? _3130 : (isnan(_3130) ? 0.0 : max(_3130, 0.0)))) - exp2(_3014 * (isnan(0.0) ? _3131 : (isnan(_3131) ? 0.0 : max(_3131, 0.0))))) * _3129)) - ((exp2(_3016 * _3140) - exp2(_3016 * _3141)) * _3129))) + (_3009 * cbSceneParam._m0[80u].z);
        }
        vec4 _3171 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2926, _2927, 1.0), 0.0);
        float _3180 = exp2((_3169 * (-1.44269502162933349609375)) * (1.0 - _3171.w));
        float _3181 = log2(_3180);
        float _3197 = log2(_2946);
        _3018 = (exp2(_3197 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3181 * cbSceneParam._m0[78u].x)) * _3171.x) / cbSceneParam._m0[78u].x)) + _2943;
        _3020 = (exp2(_3197 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3181 * cbSceneParam._m0[78u].y)) * _3171.y) / cbSceneParam._m0[78u].y)) + _2944;
        _3022 = (exp2(_3197 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3181 * cbSceneParam._m0[78u].z)) * _3171.z) / cbSceneParam._m0[78u].z)) + _2945;
        _3024 = _3180 * _2946;
    }
    else
    {
        _3018 = _2943;
        _3020 = _2944;
        _3022 = _2945;
        _3024 = _2946;
    }
    float _3036 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3037 = _3036 == 3.0;
    float _3038 = log2(_3024);
    float _3045 = exp2(_3038 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0))) * (_2888 + ((isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0))) * _858))) + ((_2894 + ((isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0))) * _1666)) * cbPerFrame._m0[3u].x));
    float _3046 = exp2(_3038 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0))) * (_2890 + ((isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0))) * _858))) + ((_2896 + ((isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0))) * _1666)) * cbPerFrame._m0[3u].x));
    float _3047 = exp2(_3038 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0))) * (_2892 + ((isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0))) * _858))) + ((_2898 + ((isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0))) * _1666)) * cbPerFrame._m0[3u].x));
    float _3056 = (_3036 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3056 * (_3037 ? _3045 : (_3045 + (cbSceneParam._m0[72u].w * _3018)));
    SV_Target.y = _3056 * (_3037 ? _3046 : (_3046 + (cbSceneParam._m0[72u].w * _3020)));
    SV_Target.z = _3056 * (_3037 ? _3047 : (_3047 + (cbSceneParam._m0[72u].w * _3022)));
    SV_Target.w = cbInstanceData._m0[_2918].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2918].w;
}


