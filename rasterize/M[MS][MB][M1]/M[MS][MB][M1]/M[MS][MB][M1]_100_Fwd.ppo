#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1226;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _210 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _211 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _212 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _218 = inversesqrt(dot(vec3(_210, _211, _212), vec3(_210, _211, _212)));
    float _219 = _218 * _210;
    float _220 = _218 * _211;
    float _221 = _218 * _212;
    float _225 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _226 = _225 * NORMAL.x;
    float _227 = _225 * NORMAL.y;
    float _228 = _225 * NORMAL.z;
    float _232 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _233 = _232 * TANGENT.x;
    float _234 = _232 * TANGENT.y;
    float _235 = _232 * TANGENT.z;
    uint _238 = uint(roundEven(NORMAL.w)) * 13u;
    uint _244 = _238 + 1u;
    uint _248 = _238 + 2u;
    float _257 = sqrt(((cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x) + (cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x)) + (cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x));
    float _258 = _257 * TEXCOORD.z;
    float _259 = _257 * TEXCOORD.w;
    vec4 _279 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _285 = _279.x * cbMtdParam._m0[11u].x;
    float _286 = _279.y * cbMtdParam._m0[11u].y;
    float _287 = _279.z * cbMtdParam._m0[11u].z;
    vec4 _306 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _258) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _259) + cbTextureTilingScale._m0[5u].w));
    vec4 _344 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _346 = _344.x;
    float _358 = dot(vec4(_346, _344.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _375 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_346 - _358) * cbMtdParam._m0[24u].y) + _358) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3553 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _376 = isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0));
    float _383 = (_376 * ((_306.x * cbMtdParam._m0[12u].x) - _285)) + _285;
    float _384 = (_376 * ((_306.y * cbMtdParam._m0[12u].y) - _286)) + _286;
    float _385 = (_376 * ((_306.z * cbMtdParam._m0[12u].z) - _287)) + _287;
    vec4 _403 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _258) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _259) + cbTextureTilingScale._m0[20u].w));
    vec4 _430 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _258) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _259) + cbTextureTilingScale._m0[4u].w));
    vec4 _447 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _449 = _447.x;
    float _450 = _447.y;
    float _451 = _447.z;
    float _460 = ((_430.z - _451) * _376) + _451;
    float _463 = ((((_430.x - _449) * _376) + _449) * 2.0) + (-1.0);
    float _464 = ((((_430.y - _450) * _376) + _450) * 2.0) + (-1.0);
    float _465 = dot(vec2(_463, _464), vec2(_463, _464));
    float _3564 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _470 = sqrt(1.0 - (isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0))));
    vec4 _490 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _502 = (_463 + ((((_403.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_490.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _503 = (_464 + ((((_403.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_490.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _506 = fma(_470, _226, fma(_503, _233, _502 * _219));
    float _509 = fma(_470, _227, fma(_503, _234, _502 * _220));
    float _512 = fma(_470, _228, fma(_503, _235, _502 * _221));
    float _516 = inversesqrt(dot(vec3(_506, _509, _512), vec3(_506, _509, _512)));
    vec4 _543 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _258) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _259) + cbTextureTilingScale._m0[11u].w));
    float _545 = _543.x;
    float _546 = 1.0 - _545;
    float _552 = (cbMtdParam._m0[19u].x + dot(vec4(_516 * _506, _516 * _509, _516 * _512, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_545 - _546) * cbMtdParam._m0[24u].z) + _546) * cbMtdParam._m0[21u].z);
    float _3575 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
    float _553 = isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0));
    float _560 = (_553 * (cbMtdParam._m0[17u].x - _383)) + _383;
    float _561 = (_553 * (cbMtdParam._m0[17u].y - _384)) + _384;
    float _562 = (_553 * (cbMtdParam._m0[17u].z - _385)) + _385;
    vec4 _574 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _588 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _590 = _588.x;
    float _608 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _258) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _259) + cbTextureTilingScale._m0[9u].w)).x - _590) * _376) + _590;
    float _612 = ((_574.x - _608) * cbMtdParam._m0[19u].z) + _608;
    float _614 = _612 - (_612 * _553);
    float _619 = (((_403.z - _460) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _460;
    float _623 = ((_490.z - _619) * cbMtdParam._m0[19u].w) + _619;
    vec4 _636 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _258) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _259) + cbTextureTilingScale._m0[15u].w));
    float _643 = (_636.x * 2.0) + (-1.0);
    float _644 = (_636.y * 2.0) + (-1.0);
    float _645 = dot(vec2(_643, _644), vec2(_643, _644));
    float _3586 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _653 = ((_636.z - _623) * _553) + _623;
    float _663 = ((sqrt(1.0 - (isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0)))) - _470) * _553) + _470;
    float _666 = (((_643 - _502) * _553) + _502) + (cbMtdParam._m0[21u].x * _502);
    float _667 = (((_644 - _503) * _553) + _503) + (cbMtdParam._m0[21u].x * _503);
    float _672 = cbMtdParam._m0[22u].x + _490.w;
    float _675 = fma(_663, _226, fma(_667, _233, _666 * _219));
    float _678 = fma(_663, _227, fma(_667, _234, _666 * _220));
    float _681 = fma(_663, _228, fma(_667, _235, _666 * _221));
    float _685 = inversesqrt(dot(vec3(_675, _678, _681), vec3(_675, _678, _681)));
    float _686 = _685 * _675;
    float _687 = _685 * _678;
    float _688 = _685 * _681;
    float _3597 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
    float _689 = isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0));
    float _3608 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _3619 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _3630 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _3641 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _3652 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _694 = isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0));
    float _708 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _749 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _759 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _749);
    float _760 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _749);
    float _761 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _749);
    float _765 = inversesqrt(dot(vec3(_759, _760, _761), vec3(_759, _760, _761)));
    float _766 = _759 * _765;
    float _767 = _760 * _765;
    float _768 = _761 * _765;
    float _774 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _775 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _793 = fma(_688, cbSceneParam._m0[5u].z, fma(_687, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _686));
    float _796 = fma(_688, cbSceneParam._m0[6u].z, fma(_687, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _686));
    float _799 = fma(_688, cbSceneParam._m0[7u].z, fma(_687, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _686));
    uint _813 = (_238 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _819 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0)))) * cbInstanceData._m0[_813].x;
    float _820 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0)))) * cbInstanceData._m0[_813].y;
    float _821 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0)))) * cbInstanceData._m0[_813].z;
    float _3663 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
    float _822 = isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0));
    float _3674 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
    float _823 = isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0));
    float _3685 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
    float _824 = isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0));
    float _825 = 1.0 - _694;
    float _826 = _822 * _825;
    float _827 = _823 * _825;
    float _828 = _824 * _825;
    float _833 = (_822 + (-0.039999999105930328369140625)) * _694;
    float _834 = (_823 + (-0.039999999105930328369140625)) * _694;
    float _835 = (_824 + (-0.039999999105930328369140625)) * _694;
    float _836 = _833 + 0.039999999105930328369140625;
    float _838 = _834 + 0.039999999105930328369140625;
    float _839 = _835 + 0.039999999105930328369140625;
    vec4 _848 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _774, cbSceneParam._m0[86u].y * _775));
    float _852 = ((isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0))) * TEXCOORD_5.w) * _848.x;
    float _853 = dot(vec3(_686, _687, _688), vec3(_766, _767, _768));
    float _856 = _853 * 2.0;
    float _860 = (_856 * _686) - _766;
    float _861 = (_856 * _687) - _767;
    float _862 = (_856 * _688) - _768;
    float _866 = abs(dot(vec3(_766, _767, _768), vec3(_686, _687, _688)));
    float _3696 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
    float _868 = sqrt(_689);
    float _881 = exp2((_868 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_868 * 3.0));
    float _887 = (1.0 - _881) * ((_868 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _888 = _881 * _868;
    float _916 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _920 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _924 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1225;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _950 = fma(_924, cbModelParam._m0[26u].z, fma(_920, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _916));
        float _954 = fma(_924, cbModelParam._m0[27u].z, fma(_920, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _916));
        float _958 = fma(_924, cbModelParam._m0[28u].z, fma(_920, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _916));
        float _983 = _916 + _686;
        float _984 = _920 + _687;
        float _985 = _924 + _688;
        float _995 = fma(_985, cbModelParam._m0[26u].z, fma(_984, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _983)) - _950;
        float _996 = fma(_985, cbModelParam._m0[27u].z, fma(_984, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _983)) - _954;
        float _997 = fma(_985, cbModelParam._m0[28u].z, fma(_984, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _983)) - _958;
        float _1001 = inversesqrt(dot(vec3(_995, _996, _997), vec3(_995, _996, _997)));
        float _1014 = ((_1001 * _995) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_950 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1015 = ((_1001 * _996) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_954 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1016 = ((_1001 * _997) / cbModelParam._m0[34u].z) + ((((((_958 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1019 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1014, _1015, _1016), 0.0);
        vec4 _1026 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1014, _1015, _1016), 0.0);
        vec4 _1033 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1014, _1015, _1016), 0.0);
        vec4 _1040 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1014, _1015, _1016), 0.0);
        float _1053 = exp2((_1019.w + (-0.5)) * 20.0) * 2.0;
        float _1054 = _1053 * (_1019.x + (-0.5));
        float _1055 = _1053 * (_1019.y + (-0.5));
        float _1056 = _1053 * (_1019.z + (-0.5));
        float _1063 = exp2((_1026.w + (-0.5)) * 20.0) * 2.0;
        float _1064 = _1063 * (_1026.x + (-0.5));
        float _1065 = _1063 * (_1026.y + (-0.5));
        float _1066 = _1063 * (_1026.z + (-0.5));
        float _1073 = exp2((_1033.w + (-0.5)) * 20.0) * 2.0;
        float _1074 = _1073 * (_1033.x + (-0.5));
        float _1075 = _1073 * (_1033.y + (-0.5));
        float _1076 = _1073 * (_1033.z + (-0.5));
        float _1083 = exp2((_1040.w + (-0.5)) * 20.0) * 2.0;
        float _1084 = _1083 * (_1040.x + (-0.5));
        float _1085 = _1083 * (_1040.y + (-0.5));
        float _1086 = _1083 * (_1040.z + (-0.5));
        float _1087 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1088 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1089 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1090 = _1054 * 0.5;
        float _1091 = _1064 * 0.5;
        float _1092 = _1074 * 0.5;
        float _1093 = dot(vec3(_1090, _1091, _1092), vec3(_1090, _1091, _1092));
        float _1098 = (_1093 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1093);
        float _1107 = (dot(vec3(_686, _687, _688), vec3(_1098 * _1090, _1098 * _1091, _1098 * _1092)) + 1.0) * 0.5;
        float _3722 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1117 = sqrt(((_1091 * _1091) + (_1090 * _1090)) + (_1092 * _1092)) / (_1087 + 9.9999997473787516355514526367188e-06);
        float _3733 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1118 = isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0));
        float _1119 = _1118 * 2.0;
        float _1123 = (1.0 - _1118) / (_1118 + 1.0);
        float _3744 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1124 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
        float _1133 = ((((1.0 - _1124) * (_1119 + 2.0)) * exp2(log2(isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0))) * (_1119 + 1.0))) + _1124) * _1087;
        float _1134 = _1055 * 0.5;
        float _1135 = _1065 * 0.5;
        float _1136 = _1075 * 0.5;
        float _1137 = dot(vec3(_1134, _1135, _1136), vec3(_1134, _1135, _1136));
        float _1142 = (_1137 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1137);
        float _1150 = (dot(vec3(_686, _687, _688), vec3(_1142 * _1134, _1142 * _1135, _1142 * _1136)) + 1.0) * 0.5;
        float _3755 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1159 = sqrt(((_1135 * _1135) + (_1134 * _1134)) + (_1136 * _1136)) / (_1088 + 9.9999997473787516355514526367188e-06);
        float _3766 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1160 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
        float _1161 = _1160 * 2.0;
        float _1165 = (1.0 - _1160) / (_1160 + 1.0);
        float _3777 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1166 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
        float _1175 = ((((1.0 - _1166) * (_1161 + 2.0)) * exp2(log2(isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0))) * (_1161 + 1.0))) + _1166) * _1088;
        float _1176 = _1056 * 0.5;
        float _1177 = _1066 * 0.5;
        float _1178 = _1076 * 0.5;
        float _1179 = dot(vec3(_1176, _1177, _1178), vec3(_1176, _1177, _1178));
        float _1184 = (_1179 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1179);
        float _1192 = (dot(vec3(_686, _687, _688), vec3(_1184 * _1176, _1184 * _1177, _1184 * _1178)) + 1.0) * 0.5;
        float _3788 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1201 = sqrt(((_1177 * _1177) + (_1176 * _1176)) + (_1178 * _1178)) / (_1089 + 9.9999997473787516355514526367188e-06);
        float _3799 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1202 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
        float _1203 = _1202 * 2.0;
        float _1207 = (1.0 - _1202) / (_1202 + 1.0);
        float _3810 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1208 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
        float _1217 = ((((1.0 - _1208) * (_1203 + 2.0)) * exp2(log2(isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0))) * (_1203 + 1.0))) + _1208) * _1089;
        _1225 = _1056;
        _1227 = _1055;
        _1228 = _1054;
        _1229 = _1066;
        _1230 = _1065;
        _1231 = _1064;
        _1232 = _1076;
        _1233 = _1075;
        _1234 = _1074;
        _1235 = _1089;
        _1236 = _1088;
        _1237 = _1087;
        _1238 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0)));
        _1239 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0)));
        _1240 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0)));
    }
    else
    {
        _1225 = _1226;
        _1227 = _1226;
        _1228 = _1226;
        _1229 = _1226;
        _1230 = _1226;
        _1231 = _1226;
        _1232 = _1226;
        _1233 = _1226;
        _1234 = _1226;
        _1235 = _1226;
        _1236 = _1226;
        _1237 = _1226;
        _1238 = 0.0;
        _1239 = 0.0;
        _1240 = 0.0;
    }
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    float _1548;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1265 = fma(_924, cbModelParam._m0[30u].z, fma(_920, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _916));
        float _1269 = fma(_924, cbModelParam._m0[31u].z, fma(_920, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _916));
        float _1273 = fma(_924, cbModelParam._m0[32u].z, fma(_920, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _916));
        float _1296 = _916 + _686;
        float _1297 = _920 + _687;
        float _1298 = _924 + _688;
        float _1308 = fma(_1298, cbModelParam._m0[30u].z, fma(_1297, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1296)) - _1265;
        float _1309 = fma(_1298, cbModelParam._m0[31u].z, fma(_1297, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1296)) - _1269;
        float _1310 = fma(_1298, cbModelParam._m0[32u].z, fma(_1297, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1296)) - _1273;
        float _1314 = inversesqrt(dot(vec3(_1308, _1309, _1310), vec3(_1308, _1309, _1310)));
        float _1327 = ((_1314 * _1308) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1265 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1328 = ((_1314 * _1309) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1269 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1329 = ((_1314 * _1310) / cbModelParam._m0[35u].z) + ((((((_1273 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1331 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1327, _1328, _1329), 0.0);
        vec4 _1338 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1327, _1328, _1329), 0.0);
        vec4 _1345 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1327, _1328, _1329), 0.0);
        vec4 _1352 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1327, _1328, _1329), 0.0);
        float _1364 = exp2((_1331.w + (-0.5)) * 20.0) * 2.0;
        float _1365 = _1364 * (_1331.x + (-0.5));
        float _1366 = _1364 * (_1331.y + (-0.5));
        float _1367 = _1364 * (_1331.z + (-0.5));
        float _1374 = exp2((_1338.w + (-0.5)) * 20.0) * 2.0;
        float _1375 = _1374 * (_1338.x + (-0.5));
        float _1376 = _1374 * (_1338.y + (-0.5));
        float _1377 = _1374 * (_1338.z + (-0.5));
        float _1384 = exp2((_1345.w + (-0.5)) * 20.0) * 2.0;
        float _1385 = _1384 * (_1345.x + (-0.5));
        float _1386 = _1384 * (_1345.y + (-0.5));
        float _1387 = _1384 * (_1345.z + (-0.5));
        float _1394 = exp2((_1352.w + (-0.5)) * 20.0) * 2.0;
        float _1395 = _1394 * (_1352.x + (-0.5));
        float _1396 = _1394 * (_1352.y + (-0.5));
        float _1397 = _1394 * (_1352.z + (-0.5));
        float _1398 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1399 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1400 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1401 = _1365 * 0.5;
        float _1402 = _1375 * 0.5;
        float _1403 = _1385 * 0.5;
        float _1404 = dot(vec3(_1401, _1402, _1403), vec3(_1401, _1402, _1403));
        float _1409 = (_1404 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1404);
        float _1417 = (dot(vec3(_686, _687, _688), vec3(_1409 * _1401, _1409 * _1402, _1409 * _1403)) + 1.0) * 0.5;
        float _3851 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1426 = sqrt(((_1402 * _1402) + (_1401 * _1401)) + (_1403 * _1403)) / (_1398 + 9.9999997473787516355514526367188e-06);
        float _3862 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1427 = isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0));
        float _1428 = _1427 * 2.0;
        float _1432 = (1.0 - _1427) / (_1427 + 1.0);
        float _3873 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1433 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
        float _1442 = ((((1.0 - _1433) * (_1428 + 2.0)) * exp2(log2(isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0))) * (_1428 + 1.0))) + _1433) * _1398;
        float _1443 = _1366 * 0.5;
        float _1444 = _1376 * 0.5;
        float _1445 = _1386 * 0.5;
        float _1446 = dot(vec3(_1443, _1444, _1445), vec3(_1443, _1444, _1445));
        float _1451 = (_1446 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1446);
        float _1459 = (dot(vec3(_686, _687, _688), vec3(_1451 * _1443, _1451 * _1444, _1451 * _1445)) + 1.0) * 0.5;
        float _3884 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1468 = sqrt(((_1444 * _1444) + (_1443 * _1443)) + (_1445 * _1445)) / (_1399 + 9.9999997473787516355514526367188e-06);
        float _3895 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1469 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
        float _1470 = _1469 * 2.0;
        float _1474 = (1.0 - _1469) / (_1469 + 1.0);
        float _3906 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1475 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
        float _1484 = ((((1.0 - _1475) * (_1470 + 2.0)) * exp2(log2(isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0))) * (_1470 + 1.0))) + _1475) * _1399;
        float _1485 = _1367 * 0.5;
        float _1486 = _1377 * 0.5;
        float _1487 = _1387 * 0.5;
        float _1488 = dot(vec3(_1485, _1486, _1487), vec3(_1485, _1486, _1487));
        float _1493 = (_1488 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1488);
        float _1501 = (dot(vec3(_686, _687, _688), vec3(_1493 * _1485, _1493 * _1486, _1493 * _1487)) + 1.0) * 0.5;
        float _3917 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
        float _1510 = sqrt(((_1486 * _1486) + (_1485 * _1485)) + (_1487 * _1487)) / (_1400 + 9.9999997473787516355514526367188e-06);
        float _3928 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1511 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
        float _1512 = _1511 * 2.0;
        float _1516 = (1.0 - _1511) / (_1511 + 1.0);
        float _3939 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
        float _1517 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
        float _1526 = ((((1.0 - _1517) * (_1512 + 2.0)) * exp2(log2(isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0))) * (_1512 + 1.0))) + _1517) * _1400;
        _1534 = _1367;
        _1535 = _1366;
        _1536 = _1365;
        _1537 = _1377;
        _1538 = _1376;
        _1539 = _1375;
        _1540 = _1387;
        _1541 = _1386;
        _1542 = _1385;
        _1543 = _1400;
        _1544 = _1399;
        _1545 = _1398;
        _1546 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0)));
        _1547 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0)));
        _1548 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0)));
    }
    else
    {
        _1534 = _1226;
        _1535 = _1226;
        _1536 = _1226;
        _1537 = _1226;
        _1538 = _1226;
        _1539 = _1226;
        _1540 = _1226;
        _1541 = _1226;
        _1542 = _1226;
        _1543 = _1226;
        _1544 = _1226;
        _1545 = _1226;
        _1546 = 0.0;
        _1547 = 0.0;
        _1548 = 0.0;
    }
    float _1558 = (cbModelParam._m0[1u].x * (_1546 - _1238)) + _1238;
    float _1559 = (cbModelParam._m0[1u].x * (_1547 - _1239)) + _1239;
    float _1560 = (cbModelParam._m0[1u].x * (_1548 - _1240)) + _1240;
    float _1581 = fma(_1560, cbSceneParam._m0[89u].z, fma(_1559, cbSceneParam._m0[89u].y, _1558 * cbSceneParam._m0[89u].x));
    float _1584 = fma(_1560, cbSceneParam._m0[90u].z, fma(_1559, cbSceneParam._m0[90u].y, _1558 * cbSceneParam._m0[90u].x));
    float _1587 = fma(_1560, cbSceneParam._m0[91u].z, fma(_1559, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1558));
    float _1602 = _860 * 0.5;
    float _1603 = _861 * 0.5;
    float _1604 = _862 * 0.5;
    float _1605 = dot(vec4(_1602, _1603, _1604, 1.0), vec4(_1536, _1539, _1542, _1545));
    float _1608 = dot(vec4(_1602, _1603, _1604, 1.0), vec4(_1535, _1538, _1541, _1544));
    float _1611 = dot(vec4(_1602, _1603, _1604, 1.0), vec4(_1534, _1537, _1540, _1543));
    float _1645;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1618 = dot(vec4(_1602, _1603, _1604, 1.0), vec4(_1225, _1229, _1232, _1235));
        float _1622 = dot(vec4(_1602, _1603, _1604, 1.0), vec4(_1227, _1230, _1233, _1236));
        float _1626 = dot(vec4(_1602, _1603, _1604, 1.0), vec4(_1228, _1231, _1234, _1237));
        float _1633 = dot(vec4(cbModelParam._m0[39u]), vec4(_1602, _1603, _1604, 1.0));
        _1645 = dot(vec3(isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0)), isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0)), isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1633) ? 0.0 : (isnan(0.0) ? _1633 : max(0.0, _1633))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1645 = 1.0;
    }
    float _1656;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1647 = dot(vec4(cbModelParam._m0[40u]), vec4(_1602, _1603, _1604, 1.0));
        _1656 = dot(vec3(isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0)), isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0)), isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1647) ? 0.0 : (isnan(0.0) ? _1647 : max(0.0, _1647))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1656 = 1.0;
    }
    float _1660 = (_1656 * cbModelParam._m0[1u].x) + (_1645 * (1.0 - cbModelParam._m0[1u].x));
    float _1670 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _689);
    float _1671 = isnan(_1670) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1670 : min(cbModelParam._m0[25u].z, _1670));
    float _1752;
    float _1754;
    float _1756;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1719 = fma(_924, cbModelParam._m0[13u].z, fma(_920, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _916)) + cbModelParam._m0[13u].w;
        float _1723 = fma(_924, cbModelParam._m0[14u].z, fma(_920, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _916)) + cbModelParam._m0[14u].w;
        float _1727 = fma(_924, cbModelParam._m0[15u].z, fma(_920, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _916)) + cbModelParam._m0[15u].w;
        float _1730 = fma(_862, cbModelParam._m0[13u].z, fma(_861, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _860));
        float _1733 = fma(_862, cbModelParam._m0[14u].z, fma(_861, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _860));
        float _1736 = fma(_862, cbModelParam._m0[15u].z, fma(_861, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _860));
        float _1764;
        if (_1730 > 0.0)
        {
            _1764 = abs((1.0 - _1719) / _1730);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1730 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1719 + 1.0) / _1730);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1764 = frontier_phi_14_12_ladder;
        }
        float _1967;
        if (_1733 > 0.0)
        {
            _1967 = abs((1.0 - _1723) / _1733);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1733 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1723 + 1.0) / _1733);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1967 = frontier_phi_23_19_ladder;
        }
        float _2221;
        if (_1736 > 0.0)
        {
            _2221 = abs((1.0 - _1727) / _1736);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1736 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1727 + 1.0) / _1736);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2221 = frontier_phi_35_30_ladder;
        }
        float _2223 = isnan(_1967) ? _1764 : (isnan(_1764) ? _1967 : min(_1764, _1967));
        float _2224 = isnan(_2221) ? _2223 : (isnan(_2223) ? _2221 : min(_2223, _2221));
        float _2228 = (_2224 * _1730) + _1719;
        float _2229 = (_2224 * _1733) + _1723;
        float _2230 = (_2224 * _1736) + _1727;
        float _2231 = _2224 * 9.9999997473787516355514526367188e-05;
        float _2233 = (-1.0) - _2231;
        float _2235 = _2231 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2230 > _2235) || ((_2230 < _2233) || ((_2229 > _2235) || ((_2229 < _2233) || ((_2228 < _2233) || (_2228 > _2235))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2358 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2230, cbModelParam._m0[9u].z, fma(_2229, cbModelParam._m0[9u].y, _2228 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2230, cbModelParam._m0[10u].z, fma(_2229, cbModelParam._m0[10u].y, _2228 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2230, cbModelParam._m0[11u].z, fma(_2229, cbModelParam._m0[11u].y, _2228 * cbModelParam._m0[11u].x))), _1671);
            frontier_phi_13_35_ladder = _2358.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2358.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2358.x * cbModelParam._m0[1u].y;
        }
        _1752 = frontier_phi_13_35_ladder_2;
        _1754 = frontier_phi_13_35_ladder_1;
        _1756 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1740 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_860, _861, _862), _1671);
        _1752 = _1740.x * cbModelParam._m0[1u].y;
        _1754 = _1740.y * cbModelParam._m0[1u].y;
        _1756 = _1740.z * cbModelParam._m0[1u].y;
    }
    float _1760 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _689);
    float _1761 = isnan(_1760) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1760 : min(cbModelParam._m0[25u].w, _1760));
    float _1851;
    float _1853;
    float _1855;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1815 = fma(_924, cbModelParam._m0[21u].z, fma(_920, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _916)) + cbModelParam._m0[21u].w;
        float _1819 = fma(_924, cbModelParam._m0[22u].z, fma(_920, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _916)) + cbModelParam._m0[22u].w;
        float _1823 = fma(_924, cbModelParam._m0[23u].z, fma(_920, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _916)) + cbModelParam._m0[23u].w;
        float _1826 = fma(_862, cbModelParam._m0[21u].z, fma(_861, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _860));
        float _1829 = fma(_862, cbModelParam._m0[22u].z, fma(_861, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _860));
        float _1832 = fma(_862, cbModelParam._m0[23u].z, fma(_861, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _860));
        float _1972;
        if (_1826 > 0.0)
        {
            _1972 = abs((1.0 - _1815) / _1826);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1826 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1815 + 1.0) / _1826);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1972 = frontier_phi_25_21_ladder;
        }
        float _2248;
        if (_1829 > 0.0)
        {
            _2248 = abs((1.0 - _1819) / _1829);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1829 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1819 + 1.0) / _1829);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2248 = frontier_phi_37_32_ladder;
        }
        float _2461;
        if (_1832 > 0.0)
        {
            _2461 = abs((1.0 - _1823) / _1832);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1832 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1823 + 1.0) / _1832);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2461 = frontier_phi_46_43_ladder;
        }
        float _2463 = isnan(_2248) ? _1972 : (isnan(_1972) ? _2248 : min(_1972, _2248));
        float _2464 = isnan(_2461) ? _2463 : (isnan(_2463) ? _2461 : min(_2463, _2461));
        float _2468 = (_2464 * _1826) + _1815;
        float _2469 = (_2464 * _1829) + _1819;
        float _2470 = (_2464 * _1832) + _1823;
        float _2471 = _2464 * 9.9999997473787516355514526367188e-05;
        float _2472 = (-1.0) - _2471;
        float _2474 = _2471 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2470 > _2474) || ((_2470 < _2472) || ((_2469 > _2474) || ((_2469 < _2472) || ((_2468 < _2472) || (_2468 > _2474))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2669 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2470, cbModelParam._m0[17u].z, fma(_2469, cbModelParam._m0[17u].y, _2468 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2470, cbModelParam._m0[18u].z, fma(_2469, cbModelParam._m0[18u].y, _2468 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2470, cbModelParam._m0[19u].z, fma(_2469, cbModelParam._m0[19u].y, _2468 * cbModelParam._m0[19u].x))), _1761);
            frontier_phi_22_46_ladder = _2669.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2669.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2669.x * cbModelParam._m0[1u].z;
        }
        _1851 = frontier_phi_22_46_ladder_2;
        _1853 = frontier_phi_22_46_ladder_1;
        _1855 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1835 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_860, _861, _862), _1761);
        _1851 = _1835.x * cbModelParam._m0[1u].z;
        _1853 = _1835.y * cbModelParam._m0[1u].z;
        _1855 = _1835.z * cbModelParam._m0[1u].z;
    }
    float _1868 = (((_887 * _836) + _888) * _852) * ((cbModelParam._m0[1u].w * (_1851 - _1752)) + _1752);
    float _1870 = (((_887 * _838) + _888) * _852) * ((cbModelParam._m0[1u].w * (_1853 - _1754)) + _1754);
    float _1872 = (((_887 * _839) + _888) * _852) * ((cbModelParam._m0[1u].w * (_1855 - _1756)) + _1756);
    float _1875 = fma(_1872, cbSceneParam._m0[89u].z, fma(_1870, cbSceneParam._m0[89u].y, _1868 * cbSceneParam._m0[89u].x));
    float _1878 = fma(_1872, cbSceneParam._m0[90u].z, fma(_1870, cbSceneParam._m0[90u].y, _1868 * cbSceneParam._m0[90u].x));
    float _1881 = fma(_1872, cbSceneParam._m0[91u].z, fma(_1870, cbSceneParam._m0[91u].y, _1868 * cbSceneParam._m0[91u].x));
    uvec4 _1891 = floatBitsToUint(cbInstanceData._m0[_238 + 5u]);
    uint _1893 = _1891.x * 14u;
    uint _1894 = _1893 + 13u;
    float _1901 = _852 + (-1.0);
    float _1906 = (cbLight._m0[_1894].x * _1901) + 1.0;
    float _1907 = (cbLight._m0[_1894].y * _1901) + 1.0;
    float _1908 = (cbLight._m0[_1894].z * _1901) + 1.0;
    float _1909 = (cbLight._m0[_1894].w * _1901) + 1.0;
    uint _1910 = _1893 + 5u;
    float _1916 = isnan(1.0) ? _1907 : (isnan(_1907) ? 1.0 : min(_1907, 1.0));
    uint _1920 = _1893 + 4u;
    float _1926 = isnan(1.0) ? _1906 : (isnan(_1906) ? 1.0 : min(_1906, 1.0));
    uint _1930 = _1893 | 1u;
    float _1941 = dot(vec3(cbLight._m0[_1893].xyz), vec3(_686, _687, _688));
    float _1944 = dot(vec3(cbLight._m0[_1930].xyz), vec3(_686, _687, _688));
    float _4075 = isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0));
    float _4086 = isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0));
    float _1949 = (isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0))) * 0.3183098733425140380859375;
    float _1951 = (isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0))) * 0.3183098733425140380859375;
    float _1958 = ((cbLight._m0[_1910].x * _1916) * _1951) + ((cbLight._m0[_1920].x * _1926) * _1949);
    float _1959 = ((_1916 * cbLight._m0[_1910].y) * _1951) + ((_1926 * cbLight._m0[_1920].y) * _1949);
    float _1960 = ((_1916 * cbLight._m0[_1910].z) * _1951) + ((_1926 * cbLight._m0[_1920].z) * _1949);
    uvec4 _1964 = floatBitsToUint(cbLight._m0[_1893 + 12u]);
    bool _1966 = _1964.x == 0u;
    float _1977;
    float _1979;
    float _1981;
    if (_1966)
    {
        _1977 = _1958;
        _1979 = _1959;
        _1981 = _1960;
    }
    else
    {
        uint _1985 = _1893 + 6u;
        float _2001 = (dot(vec3(cbLight._m0[_1893 + 2u].xyz), vec3(_686, _687, _688)) * 0.5) + 0.5;
        float _2002 = _2001 * _2001;
        float _4097 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0));
        float _2003 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
        float _2004 = isnan(1.0) ? _1908 : (isnan(_1908) ? 1.0 : min(_1908, 1.0));
        _1977 = (((cbLight._m0[_1985].x * 0.3183098733425140380859375) * _2003) * _2004) + _1958;
        _1979 = (((cbLight._m0[_1985].y * 0.3183098733425140380859375) * _2003) * _2004) + _1959;
        _1981 = (((cbLight._m0[_1985].z * 0.3183098733425140380859375) * _2003) * _2004) + _1960;
    }
    bool _1984 = _1964.y == 0u;
    float _2022;
    float _2024;
    float _2026;
    if (_1984)
    {
        _2022 = _1977;
        _2024 = _1979;
        _2026 = _1981;
    }
    else
    {
        uint _2192 = _1893 + 7u;
        float _2208 = (dot(vec3(cbLight._m0[_1893 + 3u].xyz), vec3(_686, _687, _688)) * 0.5) + 0.5;
        float _2209 = _2208 * _2208;
        float _4113 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
        float _2210 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
        float _2211 = isnan(1.0) ? _1909 : (isnan(_1909) ? 1.0 : min(_1909, 1.0));
        _2022 = (((cbLight._m0[_2192].x * 0.3183098733425140380859375) * _2210) * _2211) + _1977;
        _2024 = (((cbLight._m0[_2192].y * 0.3183098733425140380859375) * _2210) * _2211) + _1979;
        _2026 = (((cbLight._m0[_2192].z * 0.3183098733425140380859375) * _2210) * _2211) + _1981;
    }
    uint _2029 = _1893 + 8u;
    float _2042 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1893].w)) * _689) * 0.949999988079071044921875);
    float _2043 = _2042 * _2042;
    float _2044 = cbLight._m0[_1893].x + _766;
    float _2045 = cbLight._m0[_1893].y + _767;
    float _2046 = cbLight._m0[_1893].z + _768;
    float _2050 = inversesqrt(dot(vec3(_2044, _2045, _2046), vec3(_2044, _2045, _2046)));
    float _2051 = _2050 * _2044;
    float _2052 = _2050 * _2045;
    float _2053 = _2050 * _2046;
    float _2054 = dot(vec3(_686, _687, _688), vec3(cbLight._m0[_1893].xyz));
    float _4129 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
    float _2057 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
    float _4140 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
    float _2058 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
    float _2059 = dot(vec3(_686, _687, _688), vec3(_2051, _2052, _2053));
    float _4151 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
    float _2062 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
    float _2063 = dot(vec3(cbLight._m0[_1893].xyz), vec3(_2051, _2052, _2053));
    float _4162 = isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0));
    float _2067 = _2043 * _2043;
    float _2071 = ((_2062 * _2062) * (_2067 + (-1.0))) + 1.0;
    float _2079 = exp2(log2(1.0 - (isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0)))) * 5.0);
    float _2080 = 0.959999978542327880859375 - _833;
    float _2082 = 0.959999978542327880859375 - _834;
    float _2083 = 0.959999978542327880859375 - _835;
    float _2090 = 1.0 - _2043;
    float _2101 = (0.5 / (((_2058 * ((_2057 * _2090) + _2043)) + 9.9999999392252902907785028219223e-09) + (((_2058 * _2090) + _2043) * _2057))) * _2057;
    float _4173 = isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0));
    float _2103 = (isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0))) * (_2067 / ((_2071 * _2071) * 3.141590118408203125));
    uint _2114 = _1893 + 9u;
    float _2125 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1930].w)) * _689) * 0.949999988079071044921875);
    float _2126 = _2125 * _2125;
    float _2127 = cbLight._m0[_1930].x + _766;
    float _2128 = cbLight._m0[_1930].y + _767;
    float _2129 = cbLight._m0[_1930].z + _768;
    float _2133 = inversesqrt(dot(vec3(_2127, _2128, _2129), vec3(_2127, _2128, _2129)));
    float _2134 = _2133 * _2127;
    float _2135 = _2133 * _2128;
    float _2136 = _2133 * _2129;
    float _2137 = dot(vec3(_686, _687, _688), vec3(cbLight._m0[_1930].xyz));
    float _4184 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
    float _2140 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
    float _2141 = dot(vec3(_686, _687, _688), vec3(_2134, _2135, _2136));
    float _4195 = isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0));
    float _2144 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
    float _2145 = dot(vec3(cbLight._m0[_1930].xyz), vec3(_2134, _2135, _2136));
    float _4206 = isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0));
    float _2149 = _2126 * _2126;
    float _2153 = ((_2144 * _2144) * (_2149 + (-1.0))) + 1.0;
    float _2160 = exp2(log2(1.0 - (isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0)))) * 5.0);
    float _2167 = 1.0 - _2126;
    float _2177 = (0.5 / (((_2058 * ((_2140 * _2167) + _2126)) + 9.9999999392252902907785028219223e-09) + (((_2058 * _2167) + _2126) * _2140))) * _2140;
    float _4217 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
    float _2179 = (isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0))) * (_2149 / ((_2153 * _2153) * 3.141590118408203125));
    float _2189 = (((((_2160 * _2080) + _836) * cbLight._m0[_2114].x) * _2179) * _1916) + (((((_2079 * _2080) + _836) * cbLight._m0[_2029].x) * _2103) * _1926);
    float _2190 = (((((_2160 * _2082) + _838) * cbLight._m0[_2114].y) * _2179) * _1916) + (((((_2079 * _2082) + _838) * cbLight._m0[_2029].y) * _2103) * _1926);
    float _2191 = (((((_2160 * _2083) + _839) * cbLight._m0[_2114].z) * _2179) * _1916) + (((((_2079 * _2083) + _839) * cbLight._m0[_2029].z) * _2103) * _1926);
    float _2253;
    float _2255;
    float _2257;
    if (_1966)
    {
        _2253 = _2189;
        _2255 = _2190;
        _2257 = _2191;
    }
    else
    {
        uint _2259 = _1893 + 2u;
        uint _2263 = _1893 + 10u;
        float _2277 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2259].w)) * _689) * 0.949999988079071044921875);
        float _2278 = _2277 * _2277;
        float _2279 = cbLight._m0[_2259].x + _766;
        float _2280 = cbLight._m0[_2259].y + _767;
        float _2281 = cbLight._m0[_2259].z + _768;
        float _2285 = inversesqrt(dot(vec3(_2279, _2280, _2281), vec3(_2279, _2280, _2281)));
        float _2286 = _2285 * _2279;
        float _2287 = _2285 * _2280;
        float _2288 = _2285 * _2281;
        float _2289 = dot(vec3(_686, _687, _688), vec3(cbLight._m0[_2259].xyz));
        float _4228 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
        float _2292 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
        float _2293 = dot(vec3(_686, _687, _688), vec3(_2286, _2287, _2288));
        float _4239 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
        float _2296 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
        float _2297 = dot(vec3(cbLight._m0[_2259].xyz), vec3(_2286, _2287, _2288));
        float _4250 = isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0));
        float _2301 = _2278 * _2278;
        float _2305 = ((_2296 * _2296) * (_2301 + (-1.0))) + 1.0;
        float _2312 = exp2(log2(1.0 - (isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0)))) * 5.0);
        float _2319 = 1.0 - _2278;
        float _2329 = (0.5 / (((_2058 * ((_2292 * _2319) + _2278)) + 9.9999999392252902907785028219223e-09) + (((_2058 * _2319) + _2278) * _2292))) * _2292;
        float _4261 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
        float _2331 = (isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0))) * (_2301 / ((_2305 * _2305) * 3.141590118408203125));
        float _2332 = isnan(1.0) ? _1908 : (isnan(_1908) ? 1.0 : min(_1908, 1.0));
        _2253 = (((((_2312 * _2080) + _836) * cbLight._m0[_2263].x) * _2331) * _2332) + _2189;
        _2255 = (((((_2312 * _2082) + _838) * cbLight._m0[_2263].y) * _2331) * _2332) + _2190;
        _2257 = (((((_2312 * _2083) + _839) * cbLight._m0[_2263].z) * _2331) * _2332) + _2191;
    }
    float _2367;
    float _2369;
    float _2371;
    if (_1984)
    {
        _2367 = _2253;
        _2369 = _2255;
        _2371 = _2257;
    }
    else
    {
        uint _2378 = _1893 + 3u;
        uint _2382 = _1893 + 11u;
        float _2396 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2378].w)) * _689) * 0.949999988079071044921875);
        float _2397 = _2396 * _2396;
        float _2398 = cbLight._m0[_2378].x + _766;
        float _2399 = cbLight._m0[_2378].y + _767;
        float _2400 = cbLight._m0[_2378].z + _768;
        float _2404 = inversesqrt(dot(vec3(_2398, _2399, _2400), vec3(_2398, _2399, _2400)));
        float _2405 = _2404 * _2398;
        float _2406 = _2404 * _2399;
        float _2407 = _2404 * _2400;
        float _2408 = dot(vec3(_686, _687, _688), vec3(cbLight._m0[_2378].xyz));
        float _4277 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
        float _2411 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
        float _2412 = dot(vec3(_686, _687, _688), vec3(_2405, _2406, _2407));
        float _4288 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
        float _2415 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
        float _2416 = dot(vec3(cbLight._m0[_2378].xyz), vec3(_2405, _2406, _2407));
        float _4299 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
        float _2420 = _2397 * _2397;
        float _2424 = ((_2415 * _2415) * (_2420 + (-1.0))) + 1.0;
        float _2431 = exp2(log2(1.0 - (isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0)))) * 5.0);
        float _2438 = 1.0 - _2397;
        float _2448 = (0.5 / (((_2058 * ((_2411 * _2438) + _2397)) + 9.9999999392252902907785028219223e-09) + (((_2058 * _2438) + _2397) * _2411))) * _2411;
        float _4310 = isnan(0.0) ? _2448 : (isnan(_2448) ? 0.0 : max(_2448, 0.0));
        float _2450 = (isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0))) * (_2420 / ((_2424 * _2424) * 3.141590118408203125));
        float _2451 = isnan(1.0) ? _1909 : (isnan(_1909) ? 1.0 : min(_1909, 1.0));
        _2367 = (((((_2431 * _2080) + _836) * cbLight._m0[_2382].x) * _2450) * _2451) + _2253;
        _2369 = (((((_2431 * _2082) + _838) * cbLight._m0[_2382].y) * _2450) * _2451) + _2255;
        _2371 = (((((_2431 * _2083) + _839) * cbLight._m0[_2382].z) * _2450) * _2451) + _2257;
    }
    float _2586;
    float _2588;
    float _2590;
    float _2592;
    float _2594;
    float _2596;
    if (_1891.y == 0u)
    {
        float _2526 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2527 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2526;
        float _2528 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2526;
        float _2529 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2526;
        uvec4 _2541 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2542 = _2541.x;
        uint _2553 = uint((float(_2541.y) * floor(float(uint(cbSceneParam._m0[85u].y * _775) / _2542))) + floor(float(uint(cbSceneParam._m0[85u].x * _774) / _2542)));
        float _2563 = (log2(_2529 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2564 = isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0));
        uint _2567 = uint(isnan(14.0) ? _2564 : (isnan(_2564) ? 14.0 : min(_2564, 14.0)));
        uvec4 _2572 = texelFetch(g_lightClusterGridBuffer, int(((_2567 << 2u) + (_2553 << 6u)) >> 2u));
        uint _2573 = _2572.x;
        uint _2574 = _2541.z;
        float _2674;
        float _2676;
        float _2678;
        float _2680;
        float _2682;
        float _2684;
        if (((((1u << ((_2574 >> 4u) & 15u)) + 4294967295u) & _2573) == 0u) || ((_2574 & 240u) == 0u))
        {
            _2674 = 0.0;
            _2676 = 0.0;
            _2678 = 0.0;
            _2680 = 0.0;
            _2682 = 0.0;
            _2684 = 0.0;
        }
        else
        {
            float _2675;
            float _2677;
            float _2679;
            float _2681;
            float _2683;
            float _2685;
            float _2819 = 0.0;
            float _2820 = 0.0;
            float _2821 = 0.0;
            float _2822 = 0.0;
            float _2823 = 0.0;
            float _2824 = 0.0;
            uint _2825 = 0u;
            uint _2834;
            bool _2835;
            for (;;)
            {
                _2834 = texelFetch(g_lightClassification, int((((_2567 << 5u) + (_2553 << 9u)) + (_2825 << 2u)) >> 2u)).x;
                _2835 = _2834 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2835)
                {
                    frontier_phi_61_pred = _2819;
                    frontier_phi_61_pred_1 = _2824;
                    frontier_phi_61_pred_2 = _2823;
                    frontier_phi_61_pred_3 = _2822;
                    frontier_phi_61_pred_4 = _2821;
                    frontier_phi_61_pred_5 = _2820;
                }
                else
                {
                    float _2943;
                    float _2944;
                    float _2945;
                    float _2946;
                    float _2947;
                    float _2948;
                    uint _2949;
                    _2943 = _2819;
                    _2944 = _2820;
                    _2945 = _2821;
                    _2946 = _2822;
                    _2947 = _2823;
                    _2948 = _2824;
                    _2949 = _2834;
                    float _2875;
                    float _2876;
                    float _2877;
                    float _2878;
                    float _2879;
                    float _2880;
                    for (;;)
                    {
                        uint _2953 = uint(findLSB(_2949)) + (_2825 << 5u);
                        uint _2950 = (_2949 + 4294967295u) & _2949;
                        uint _2955 = _2953 * 48u;
                        vec4 _2969 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2955)).x, texelFetch(g_PointLightRenderingBuffer, int(_2955 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2955 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2955 + 3u)).x));
                        uint _2975 = (_2953 * 48u) + 4u;
                        vec4 _2988 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2975)).x, texelFetch(g_PointLightRenderingBuffer, int(_2975 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2975 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2975 + 3u)).x));
                        uint _2994 = (_2953 * 48u) + 8u;
                        vec3 _3005 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2994)).x, texelFetch(g_PointLightRenderingBuffer, int(_2994 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2994 + 2u)).x));
                        float _3009 = _2969.x - _2527;
                        float _3010 = _2969.y - _2528;
                        float _3011 = _2969.z - _2529;
                        float _3012 = dot(vec3(_3009, _3010, _3011), vec3(_3009, _3010, _3011));
                        float _3015 = inversesqrt(_3012);
                        float _3016 = _3015 * _3009;
                        float _3017 = _3015 * _3010;
                        float _3018 = _3015 * _3011;
                        float _3019 = dot(vec3(_793, _796, _799), vec3(_3016, _3017, _3018));
                        float _3024 = 1.0 - (_3012 * _2969.w);
                        float _4336 = isnan(0.0) ? _3024 : (isnan(_3024) ? 0.0 : max(_3024, 0.0));
                        float _3025 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
                        float _3026 = sqrt(_3012) * _2988.w;
                        float _3029 = 1.39999997615814208984375 / (_3026 + 1.39999997615814208984375);
                        float _3030 = _3029 * _3029;
                        float _3033 = ((1.0 - _3030) * _3019) + _3030;
                        float _3036 = _3026 * _3026;
                        float _3040 = ((isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : max(_3033, 0.0))) * _3025) / ((_3036 * 0.699999988079071044921875) + 1.0);
                        float _3044 = (-0.0) - _2527;
                        float _3045 = (-0.0) - _2528;
                        float _3046 = (-0.0) - _2529;
                        float _3050 = inversesqrt(dot(vec3(_3044, _3045, _3046), vec3(_3044, _3045, _3046)));
                        float _3051 = _3050 * _3044;
                        float _3052 = _3050 * _3045;
                        float _3053 = _3050 * _3046;
                        float _3061 = exp2(log2(1.0 / ((_3036 * 3.5) + 5.0)) * 0.25);
                        float _3062 = 1.0 - _868;
                        float _3069 = sqrt(1.0 - ((1.0 - (_3062 * _3062)) * (1.0 - (_3061 * _3061))));
                        float _3070 = _3069 * _3069;
                        float _3071 = _3070 * _3070;
                        float _3072 = _3051 + _3016;
                        float _3073 = _3052 + _3017;
                        float _3074 = _3053 + _3018;
                        float _3078 = inversesqrt(dot(vec3(_3072, _3073, _3074), vec3(_3072, _3073, _3074)));
                        float _3082 = dot(vec3(_793, _796, _799), vec3(_3051, _3052, _3053));
                        float _4352 = isnan(0.0) ? _3082 : (isnan(_3082) ? 0.0 : max(_3082, 0.0));
                        float _3085 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
                        float _3086 = dot(vec3(_793, _796, _799), vec3(_3078 * _3072, _3078 * _3073, _3078 * _3074));
                        float _4363 = isnan(0.0) ? _3086 : (isnan(_3086) ? 0.0 : max(_3086, 0.0));
                        float _3089 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
                        float _3093 = ((_3089 * _3089) * (_3071 + (-1.0))) + 1.0;
                        float _3094 = _3029 * _3070;
                        float _3095 = _3094 * _3094;
                        float _3098 = ((1.0 - _3095) * _3019) + _3095;
                        float _4374 = isnan(0.0) ? _3098 : (isnan(_3098) ? 0.0 : max(_3098, 0.0));
                        float _3099 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
                        float _3100 = 1.0 - _3070;
                        float _3110 = (0.5 / (((_3099 * ((_3085 * _3100) + _3070)) + 9.9999999392252902907785028219223e-09) + (((_3099 * _3100) + _3070) * _3085))) * _3099;
                        float _4385 = isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : max(_3110, 0.0));
                        float _3121 = (((_3071 * 3.1415927410125732421875) * (isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0)))) / ((_3093 * _3093) * ((_3036 * 2.1991131305694580078125) + 3.141590118408203125))) * _3025;
                        _2878 = (_3040 * _2988.x) + _2946;
                        _2879 = (_3040 * _2988.y) + _2947;
                        _2880 = (_3040 * _2988.z) + _2948;
                        _2875 = (_3121 * _3005.x) + _2943;
                        _2876 = (_3121 * _3005.y) + _2944;
                        _2877 = (_3121 * _3005.z) + _2945;
                        if (_2950 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2943 = _2875;
                            _2944 = _2876;
                            _2945 = _2877;
                            _2946 = _2878;
                            _2947 = _2879;
                            _2948 = _2880;
                            _2949 = _2950;
                        }
                    }
                    frontier_phi_61_pred = _2875;
                    frontier_phi_61_pred_1 = _2880;
                    frontier_phi_61_pred_2 = _2879;
                    frontier_phi_61_pred_3 = _2878;
                    frontier_phi_61_pred_4 = _2877;
                    frontier_phi_61_pred_5 = _2876;
                }
                _2675 = frontier_phi_61_pred;
                _2685 = frontier_phi_61_pred_1;
                _2683 = frontier_phi_61_pred_2;
                _2681 = frontier_phi_61_pred_3;
                _2679 = frontier_phi_61_pred_4;
                _2677 = frontier_phi_61_pred_5;
                uint _2826 = _2825 + 1u;
                if (_2826 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2819 = _2675;
                    _2820 = _2677;
                    _2821 = _2679;
                    _2822 = _2681;
                    _2823 = _2683;
                    _2824 = _2685;
                    _2825 = _2826;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2674 = _2675;
            _2676 = _2677;
            _2678 = _2679;
            _2680 = _2681;
            _2682 = _2683;
            _2684 = _2685;
        }
        uvec4 _2688 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2689 = _2688.z;
        uint _2691 = (_2689 >> 8u) & 15u;
        float _2787;
        float _2789;
        float _2791;
        float _2793;
        float _2795;
        float _2797;
        if (((4294967295u << _2691) & _2573) == 0u)
        {
            _2787 = _2674;
            _2789 = _2676;
            _2791 = _2678;
            _2793 = _2680;
            _2795 = _2682;
            _2797 = _2684;
        }
        else
        {
            float _2812 = inversesqrt(dot(vec3(_2527, _2528, _2529), vec3(_2527, _2528, _2529)));
            float _2813 = _2812 * _2527;
            float _2814 = _2812 * _2528;
            float _2815 = _2812 * _2529;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2691 < ((_2689 >> 12u) & 15u))
            {
                float _2788;
                float _2790;
                float _2792;
                float _2794;
                float _2796;
                float _2798;
                float _2926 = _2674;
                float _2927 = _2676;
                float _2928 = _2678;
                float _2929 = _2680;
                float _2930 = _2682;
                float _2931 = _2684;
                uint _2932 = _2691;
                uint _2941;
                bool _2942;
                for (;;)
                {
                    _2941 = texelFetch(g_lightClassification, int((((_2567 << 5u) + (_2553 << 9u)) + (_2932 << 2u)) >> 2u)).x;
                    _2942 = _2941 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2942)
                    {
                        frontier_phi_67_pred = _2929;
                        frontier_phi_67_pred_1 = _2930;
                        frontier_phi_67_pred_2 = _2931;
                        frontier_phi_67_pred_3 = _2928;
                        frontier_phi_67_pred_4 = _2927;
                        frontier_phi_67_pred_5 = _2926;
                    }
                    else
                    {
                        float _3126;
                        float _3127;
                        float _3128;
                        float _3129;
                        float _3130;
                        float _3131;
                        float _3419;
                        float _3420;
                        float _3421;
                        float _3422;
                        float _3423;
                        float _3424;
                        float _3139 = _2926;
                        float _3140 = _2927;
                        float _3141 = _2928;
                        float _3142 = _2929;
                        float _3143 = _2930;
                        float _3144 = _2931;
                        uint _3145 = _2941;
                        uint _3146;
                        vec4 _3171;
                        float _3172;
                        vec4 _3187;
                        vec3 _3199;
                        vec4 _3214;
                        vec4 _3229;
                        float _3275;
                        bool _3276;
                        for (;;)
                        {
                            uint _3156 = ((_2932 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3145));
                            _3146 = (_3145 + 4294967295u) & _3145;
                            uint _3158 = _3156 * 40u;
                            _3171 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3158)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 3u)).x));
                            _3172 = _3171.w;
                            uint _3174 = (_3156 * 40u) + 4u;
                            _3187 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3174)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 3u)).x));
                            uint _3189 = (_3156 * 40u) + 8u;
                            _3199 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3189)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 2u)).x));
                            uint _3201 = (_3156 * 40u) + 16u;
                            _3214 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3201)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 3u)).x));
                            uint _3216 = (_3156 * 40u) + 20u;
                            _3229 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3216)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 3u)).x));
                            uint _3231 = (_3156 * 40u) + 24u;
                            vec4 _3244 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3231)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3231 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3231 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3231 + 3u)).x));
                            uint _3250 = (_3156 * 40u) + 28u;
                            vec4 _3263 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3250)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 3u)).x));
                            _3275 = fma(_2529, _3263.z, fma(_2528, _3263.y, _3263.x * _2527)) + _3263.w;
                            _3276 = !((fma(_2529, _3244.z, fma(_2528, _3244.y, _3244.x * _2527)) + _3244.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3276)
                            {
                                float _3303 = _3171.x - _2527;
                                float _3304 = _3171.y - _2528;
                                float _3305 = _3171.z - _2529;
                                float _3306 = dot(vec3(_3303, _3304, _3305), vec3(_3303, _3304, _3305));
                                float _3309 = inversesqrt(_3306);
                                float _3310 = _3309 * _3303;
                                float _3311 = _3309 * _3304;
                                float _3312 = _3309 * _3305;
                                float _3316 = 1.0 - (_3306 / (_3172 * _3172));
                                float _4396 = isnan(0.0) ? _3316 : (isnan(_3316) ? 0.0 : max(_3316, 0.0));
                                float _3317 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
                                float _3321 = sqrt(_3306) * _3187.w;
                                float _3323 = 1.39999997615814208984375 / (_3321 + 1.39999997615814208984375);
                                float _3324 = _3323 * _3323;
                                float _3327 = ((1.0 - _3324) * dot(vec3(_3310, _3311, _3312), vec3(_793, _796, _799))) + _3324;
                                float _3330 = _3321 * _3321;
                                float _3334 = (fma(_2529, _3214.z, fma(_2528, _3214.y, _3214.x * _2527)) + _3214.w) / _3275;
                                float _3335 = (fma(_2529, _3229.z, fma(_2528, _3229.y, _3229.x * _2527)) + _3229.w) / _3275;
                                float _3339 = 1.0 - dot(vec2(_3334, _3335), vec2(_3334, _3335));
                                float _4412 = isnan(0.0) ? _3339 : (isnan(_3339) ? 0.0 : max(_3339, 0.0));
                                float _3340 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
                                float _3341 = _3340 * (((isnan(0.0) ? _3327 : (isnan(_3327) ? 0.0 : max(_3327, 0.0))) * _3317) / ((_3330 * 0.699999988079071044921875) + 1.0));
                                float _3353 = exp2(log2(1.0 / ((_3330 * 3.5) + 5.0)) * 0.25);
                                float _3354 = 1.0 - _868;
                                float _3361 = sqrt(1.0 - ((1.0 - (_3354 * _3354)) * (1.0 - (_3353 * _3353))));
                                float _3362 = _3361 * _3361;
                                float _3363 = _3362 * _3362;
                                float _3364 = _3310 - _2813;
                                float _3365 = _3311 - _2814;
                                float _3366 = _3312 - _2815;
                                float _3370 = inversesqrt(dot(vec3(_3364, _3365, _3366), vec3(_3364, _3365, _3366)));
                                float _3374 = dot(vec3(_793, _796, _799), vec3((-0.0) - _2813, (-0.0) - _2814, (-0.0) - _2815));
                                float _4423 = isnan(0.0) ? _3374 : (isnan(_3374) ? 0.0 : max(_3374, 0.0));
                                float _3377 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
                                float _3378 = dot(vec3(_793, _796, _799), vec3(_3370 * _3364, _3370 * _3365, _3370 * _3366));
                                float _4434 = isnan(0.0) ? _3378 : (isnan(_3378) ? 0.0 : max(_3378, 0.0));
                                float _3381 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
                                float _3385 = ((_3381 * _3381) * (_3363 + (-1.0))) + 1.0;
                                float _3386 = _3323 * _3362;
                                float _3387 = _3386 * _3386;
                                float _3393 = ((1.0 - _3387) * dot(vec3(_793, _796, _799), vec3(_3310, _3311, _3312))) + _3387;
                                float _4445 = isnan(0.0) ? _3393 : (isnan(_3393) ? 0.0 : max(_3393, 0.0));
                                float _3394 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
                                float _3395 = 1.0 - _3362;
                                float _3405 = (0.5 / (((_3394 * ((_3377 * _3395) + _3362)) + 9.9999999392252902907785028219223e-09) + (((_3394 * _3395) + _3362) * _3377))) * _3394;
                                float _4456 = isnan(0.0) ? _3405 : (isnan(_3405) ? 0.0 : max(_3405, 0.0));
                                float _3415 = (_3340 * _3317) * (((_3363 * 3.1415927410125732421875) * (isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0)))) / ((_3385 * _3385) * ((_3330 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3415 * _3199.x;
                                frontier_phi_73_pred_1 = _3415 * _3199.y;
                                frontier_phi_73_pred_2 = _3341 * _3187.z;
                                frontier_phi_73_pred_3 = _3341 * _3187.y;
                                frontier_phi_73_pred_4 = _3341 * _3187.x;
                                frontier_phi_73_pred_5 = _3415 * _3199.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3419 = frontier_phi_73_pred;
                            _3420 = frontier_phi_73_pred_1;
                            _3424 = frontier_phi_73_pred_2;
                            _3423 = frontier_phi_73_pred_3;
                            _3422 = frontier_phi_73_pred_4;
                            _3421 = frontier_phi_73_pred_5;
                            _3129 = _3422 + _3142;
                            _3130 = _3423 + _3143;
                            _3131 = _3424 + _3144;
                            _3126 = _3419 + _3139;
                            _3127 = _3420 + _3140;
                            _3128 = _3421 + _3141;
                            if (_3146 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3139 = _3126;
                                _3140 = _3127;
                                _3141 = _3128;
                                _3142 = _3129;
                                _3143 = _3130;
                                _3144 = _3131;
                                _3145 = _3146;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3129;
                        frontier_phi_67_pred_1 = _3130;
                        frontier_phi_67_pred_2 = _3131;
                        frontier_phi_67_pred_3 = _3128;
                        frontier_phi_67_pred_4 = _3127;
                        frontier_phi_67_pred_5 = _3126;
                    }
                    _2794 = frontier_phi_67_pred;
                    _2796 = frontier_phi_67_pred_1;
                    _2798 = frontier_phi_67_pred_2;
                    _2792 = frontier_phi_67_pred_3;
                    _2790 = frontier_phi_67_pred_4;
                    _2788 = frontier_phi_67_pred_5;
                    uint _2933 = _2932 + 1u;
                    if (_2933 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2926 = _2788;
                        _2927 = _2790;
                        _2928 = _2792;
                        _2929 = _2794;
                        _2930 = _2796;
                        _2931 = _2798;
                        _2932 = _2933;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2796;
                frontier_phi_55_56_ladder_1 = _2798;
                frontier_phi_55_56_ladder_2 = _2794;
                frontier_phi_55_56_ladder_3 = _2792;
                frontier_phi_55_56_ladder_4 = _2790;
                frontier_phi_55_56_ladder_5 = _2788;
            }
            else
            {
                frontier_phi_55_56_ladder = _2682;
                frontier_phi_55_56_ladder_1 = _2684;
                frontier_phi_55_56_ladder_2 = _2680;
                frontier_phi_55_56_ladder_3 = _2678;
                frontier_phi_55_56_ladder_4 = _2676;
                frontier_phi_55_56_ladder_5 = _2674;
            }
            _2787 = frontier_phi_55_56_ladder_5;
            _2789 = frontier_phi_55_56_ladder_4;
            _2791 = frontier_phi_55_56_ladder_3;
            _2793 = frontier_phi_55_56_ladder_2;
            _2795 = frontier_phi_55_56_ladder;
            _2797 = frontier_phi_55_56_ladder_1;
        }
        float _2802 = isnan(1.0) ? _852 : (isnan(_852) ? 1.0 : min(_852, 1.0));
        _2586 = (_2802 * _2793) + _2022;
        _2588 = (_2802 * _2795) + _2024;
        _2590 = (_2802 * _2797) + _2026;
        _2592 = ((_2787 * _836) * _2802) + _2367;
        _2594 = ((_2789 * _838) * _2802) + _2369;
        _2596 = ((_2791 * _839) * _2802) + _2371;
    }
    else
    {
        _2586 = _2022;
        _2588 = _2024;
        _2590 = _2026;
        _2592 = _2367;
        _2594 = _2369;
        _2596 = _2371;
    }
    float _4472 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
    float _4483 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
    float _4494 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
    uint _2616 = _238 + 6u;
    float _2624 = _774 / cbSceneParam._m0[86u].x;
    float _2625 = _775 / cbSceneParam._m0[86u].y;
    vec4 _2639 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2624, _2625, (log2((isnan(cbSceneParam._m0[77u].w) ? _708 : (isnan(_708) ? cbSceneParam._m0[77u].w : min(_708, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2641 = _2639.x;
    float _2642 = _2639.y;
    float _2643 = _2639.z;
    float _2644 = _2639.w;
    float _2737;
    float _2739;
    float _2741;
    float _2743;
    if (_708 > cbSceneParam._m0[78u].w)
    {
        float _2699 = isnan(_708) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _708 : min(cbSceneParam._m0[80u].w, _708));
        float _2700 = _2699 / _708;
        float _2711 = _2700 * _759;
        float _2712 = _760 * _2700;
        float _2713 = (-0.0) - _2712;
        float _2715 = _2700 * _761;
        float _2717 = (cbSceneParam._m0[77u].w * _2713) / _2699;
        float _2718 = _2717 + cbSceneParam._m0[79u].w;
        float _2719 = cbSceneParam._m0[79u].w - _2712;
        float _2725 = sqrt(((_2711 * _2711) + (_2712 * _2712)) + (_2715 * _2715));
        float _2728 = (1.0 - (cbSceneParam._m0[77u].w / _2699)) * _2725;
        float _2733 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2735 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2888;
        if (abs((_2713 - _2717) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2888 = ((((_2718 > 0.0) ? exp2(_2733 * _2718) : (2.0 - exp2(_2735 * _2718))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2728;
        }
        else
        {
            float _2848 = 1.0 / cbSceneParam._m0[80u].x;
            float _2849 = isnan(_2719) ? _2718 : (isnan(_2718) ? _2719 : max(_2718, _2719));
            float _2850 = isnan(_2719) ? _2718 : (isnan(_2718) ? _2719 : min(_2718, _2719));
            float _2859 = isnan(0.0) ? _2849 : (isnan(_2849) ? 0.0 : min(_2849, 0.0));
            float _2860 = isnan(0.0) ? _2850 : (isnan(_2850) ? 0.0 : min(_2850, 0.0));
            _2888 = ((abs(_2725 / _2713) * cbSceneParam._m0[80u].y) * ((((_2859 - _2860) * 2.0) - ((exp2(_2733 * (isnan(0.0) ? _2849 : (isnan(_2849) ? 0.0 : max(_2849, 0.0)))) - exp2(_2733 * (isnan(0.0) ? _2850 : (isnan(_2850) ? 0.0 : max(_2850, 0.0))))) * _2848)) - ((exp2(_2735 * _2859) - exp2(_2735 * _2860)) * _2848))) + (_2728 * cbSceneParam._m0[80u].z);
        }
        vec4 _2890 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2624, _2625, 1.0), 0.0);
        float _2899 = exp2((_2888 * (-1.44269502162933349609375)) * (1.0 - _2890.w));
        float _2900 = log2(_2899);
        float _2916 = log2(_2644);
        _2737 = (exp2(_2916 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2900 * cbSceneParam._m0[78u].x)) * _2890.x) / cbSceneParam._m0[78u].x)) + _2641;
        _2739 = (exp2(_2916 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2900 * cbSceneParam._m0[78u].y)) * _2890.y) / cbSceneParam._m0[78u].y)) + _2642;
        _2741 = (exp2(_2916 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2900 * cbSceneParam._m0[78u].z)) * _2890.z) / cbSceneParam._m0[78u].z)) + _2643;
        _2743 = _2899 * _2644;
    }
    else
    {
        _2737 = _2641;
        _2739 = _2642;
        _2741 = _2643;
        _2743 = _2644;
    }
    float _2755 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2756 = _2755 == 3.0;
    float _2757 = log2(_2743);
    float _2764 = exp2(_2757 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0))) * (_2586 + ((isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0))) * _852))) + ((_2592 + ((isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0))) * _1660)) * cbPerFrame._m0[3u].x));
    float _2765 = exp2(_2757 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0))) * (_2588 + ((isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0))) * _852))) + ((_2594 + ((isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0))) * _1660)) * cbPerFrame._m0[3u].x));
    float _2766 = exp2(_2757 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0))) * (_2590 + ((isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0))) * _852))) + ((_2596 + ((isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0))) * _1660)) * cbPerFrame._m0[3u].x));
    float _2775 = (_2755 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2775 * (_2756 ? _2764 : (_2764 + (cbSceneParam._m0[72u].w * _2737)));
    SV_Target.y = _2775 * (_2756 ? _2765 : (_2765 + (cbSceneParam._m0[72u].w * _2739)));
    SV_Target.z = _2775 * (_2756 ? _2766 : (_2766 + (cbSceneParam._m0[72u].w * _2741)));
    SV_Target.w = cbInstanceData._m0[_2616].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2616].w;
}


