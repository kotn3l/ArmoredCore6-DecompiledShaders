#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1411;
float _3792;
float _3793;
float _3794;
float _3795;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _236 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _237 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _238 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _244 = inversesqrt(dot(vec3(_236, _237, _238), vec3(_236, _237, _238)));
    float _251 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _258 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _273 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3804 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _3815 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _3826 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    uint _283 = uint(roundEven(NORMAL.w)) * 13u;
    uint _288 = _283 + 1u;
    uint _292 = _283 + 2u;
    float _301 = sqrt(((cbInstanceData._m0[_288].x * cbInstanceData._m0[_288].x) + (cbInstanceData._m0[_283].x * cbInstanceData._m0[_283].x)) + (cbInstanceData._m0[_292].x * cbInstanceData._m0[_292].x));
    float _302 = _301 * TEXCOORD.z;
    float _303 = _301 * TEXCOORD.w;
    vec4 _316 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _302) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _303) + cbTextureTilingScale._m0[13u].w));
    vec4 _340 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _345 = _340.x * cbMtdParam._m0[11u].x;
    float _346 = _340.y * cbMtdParam._m0[11u].y;
    float _347 = _340.z * cbMtdParam._m0[11u].z;
    vec4 _366 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _302) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _303) + cbTextureTilingScale._m0[5u].w));
    vec4 _402 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _404 = _402.x;
    float _416 = dot(vec4(_404, _402.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _433 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_404 - _416) * cbMtdParam._m0[24u].y) + _416) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3837 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _434 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
    float _441 = (_434 * ((_366.x * cbMtdParam._m0[12u].x) - _345)) + _345;
    float _442 = (_434 * ((_366.y * cbMtdParam._m0[12u].y) - _346)) + _346;
    float _443 = (_434 * ((_366.z * cbMtdParam._m0[12u].z) - _347)) + _347;
    float _447 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _316.x) * _441;
    float _450 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _316.y) * _442;
    float _453 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _316.z) * _443;
    float _460 = ((_441 - _447) * (isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0)))) + _447;
    float _461 = ((_442 - _450) * (isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0)))) + _450;
    float _462 = ((_443 - _453) * (isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0)))) + _453;
    vec4 _480 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _302) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _303) + cbTextureTilingScale._m0[20u].w));
    vec4 _505 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _302) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _303) + cbTextureTilingScale._m0[4u].w));
    vec4 _522 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _524 = _522.x;
    float _525 = _522.y;
    float _526 = _522.z;
    float _535 = ((_505.z - _526) * _434) + _526;
    float _538 = ((((_505.x - _524) * _434) + _524) * 2.0) + (-1.0);
    float _539 = ((((_505.y - _525) * _434) + _525) * 2.0) + (-1.0);
    float _540 = dot(vec2(_538, _539), vec2(_538, _539));
    float _3848 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _545 = sqrt(1.0 - (isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0))));
    vec4 _558 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _576 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _302) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _303) + cbTextureTilingScale._m0[11u].w));
    float _578 = _576.x;
    float _579 = 1.0 - _578;
    float _585 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _588 = ((isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : min(_585, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _597 = (_588 - ((((((_578 - _579) * cbMtdParam._m0[24u].z) + _579) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _588))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3869 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _598 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
    float _605 = (_598 * (cbMtdParam._m0[17u].x - _460)) + _460;
    float _606 = (_598 * (cbMtdParam._m0[17u].y - _461)) + _461;
    float _607 = (_598 * (cbMtdParam._m0[17u].z - _462)) + _462;
    vec4 _619 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _302) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _303) + cbTextureTilingScale._m0[19u].w));
    float _621 = _619.x;
    float _622 = 1.0 - _621;
    float _647 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_621 - _622) * cbMtdParam._m0[24u].w) + _622) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3880 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _648 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
    float _656 = ((((cbMtdParam._m0[10u].x - _605) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _648) + _605;
    float _657 = ((((cbMtdParam._m0[10u].y - _606) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _648) + _606;
    float _658 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _607)) * _648) + _607;
    vec4 _670 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _684 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _686 = _684.x;
    float _704 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _302) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _303) + cbTextureTilingScale._m0[9u].w)).x - _686) * _434) + _686;
    float _708 = ((_670.x - _704) * cbMtdParam._m0[19u].z) + _704;
    float _710 = _708 - (_708 * _598);
    float _712 = _710 - (_710 * _648);
    float _717 = (((_480.z - _535) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _535;
    vec4 _731 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _302) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _303) + cbTextureTilingScale._m0[15u].w));
    float _738 = (_731.x * 2.0) + (-1.0);
    float _739 = (_731.y * 2.0) + (-1.0);
    float _740 = dot(vec2(_738, _739), vec2(_738, _739));
    float _3891 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _748 = (_598 * (_731.z - _717)) + _717;
    float _751 = ((cbMtdParam._m0[23u].y - _748) * _648) + _748;
    vec4 _770 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _302) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _303) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _776 = (_770.x * 2.0) + (-1.0);
    float _777 = (_770.y * 2.0) + (-1.0);
    float _778 = dot(vec2(_776, _777), vec2(_776, _777));
    float _3902 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _788 = _538 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_480.x * 2.0) + (-1.0)));
    float _789 = _539 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_480.y * 2.0) + (-1.0)));
    float _801 = (((_738 - _788) + (cbMtdParam._m0[21u].x * _788)) * _598) + _788;
    float _802 = (((_739 - _789) + (cbMtdParam._m0[21u].x * _789)) * _598) + _789;
    float _803 = (_598 * (sqrt(1.0 - (isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0)))) - _545)) + _545;
    float _814 = (((_776 - _801) + (_801 * cbMtdParam._m0[22u].z)) * _648) + _801;
    float _815 = (((_777 - _802) + (_802 * cbMtdParam._m0[22u].z)) * _648) + _802;
    float _816 = ((sqrt(1.0 - (isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0)))) - _803) * _648) + _803;
    float _818 = cbMtdParam._m0[22u].x + _558.w;
    float _821 = fma(_816, _251 * NORMAL.x, fma(_815, _258 * TANGENT.x, (_244 * _236) * _814));
    float _824 = fma(_816, _251 * NORMAL.y, fma(_815, _258 * TANGENT.y, (_244 * _237) * _814));
    float _827 = fma(_816, _251 * NORMAL.z, fma(_815, _258 * TANGENT.z, (_244 * _238) * _814));
    float _831 = inversesqrt(dot(vec3(_821, _824, _827), vec3(_821, _824, _827)));
    float _832 = _831 * _821;
    float _833 = _831 * _824;
    float _834 = _831 * _827;
    float _3913 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
    float _835 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
    float _3924 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
    float _3935 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _3946 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _3957 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _3968 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _840 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
    float _854 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _894 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _904 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _894);
    float _905 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _894);
    float _906 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _894);
    float _910 = inversesqrt(dot(vec3(_904, _905, _906), vec3(_904, _905, _906)));
    float _911 = _904 * _910;
    float _912 = _905 * _910;
    float _913 = _906 * _910;
    vec4 _918 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _920 = _918.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1092 = sqrt(((_904 * _904) + (_905 * _905)) + (_906 * _906));
        float _1098 = (cbMatDynParam._m0[5u].x * _1092) + cbMatDynParam._m0[5u].y;
        float _3979 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1099 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
        float _1103 = (cbMatDynParam._m0[5u].z * _1092) + cbMatDynParam._m0[5u].w;
        float _3990 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0))) - _1099)) + _1099) < ((_920 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _931 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _932 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _950 = fma(_834, cbSceneParam._m0[5u].z, fma(_833, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _832));
    float _953 = fma(_834, cbSceneParam._m0[6u].z, fma(_833, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _832));
    float _956 = fma(_834, cbSceneParam._m0[7u].z, fma(_833, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _832));
    uint _969 = _283 + 9u;
    uint _970 = _969 + uint(cbMatDynParam._m0[0u].w);
    float _976 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0)))) * cbInstanceData._m0[_970].x;
    float _977 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0)))) * cbInstanceData._m0[_970].y;
    float _978 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0)))) * cbInstanceData._m0[_970].z;
    float _4001 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
    float _979 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
    float _4012 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
    float _980 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
    float _4023 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
    float _981 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
    float _982 = 1.0 - _840;
    float _983 = _979 * _982;
    float _984 = _980 * _982;
    float _985 = _981 * _982;
    float _990 = (_979 + (-0.039999999105930328369140625)) * _840;
    float _991 = (_980 + (-0.039999999105930328369140625)) * _840;
    float _992 = (_981 + (-0.039999999105930328369140625)) * _840;
    float _993 = _990 + 0.039999999105930328369140625;
    float _995 = _991 + 0.039999999105930328369140625;
    float _996 = _992 + 0.039999999105930328369140625;
    vec4 _1005 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _931, cbSceneParam._m0[86u].y * _932));
    float _1009 = ((isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0))) * TEXCOORD_5.w) * _1005.x;
    float _1010 = dot(vec3(_832, _833, _834), vec3(_911, _912, _913));
    float _1013 = _1010 * 2.0;
    float _1017 = (_1013 * _832) - _911;
    float _1018 = (_1013 * _833) - _912;
    float _1019 = (_1013 * _834) - _913;
    float _1023 = abs(dot(vec3(_911, _912, _913), vec3(_832, _833, _834)));
    float _4034 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
    float _1025 = sqrt(_835);
    float _1038 = exp2((_1025 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1025 * 3.0));
    float _1044 = (1.0 - _1038) * ((_1025 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1045 = _1038 * _1025;
    float _1073 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1077 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1081 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1410;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1135 = fma(_1081, cbModelParam._m0[26u].z, fma(_1077, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1073));
        float _1139 = fma(_1081, cbModelParam._m0[27u].z, fma(_1077, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1073));
        float _1143 = fma(_1081, cbModelParam._m0[28u].z, fma(_1077, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1073));
        float _1168 = _1073 + _832;
        float _1169 = _1077 + _833;
        float _1170 = _1081 + _834;
        float _1180 = fma(_1170, cbModelParam._m0[26u].z, fma(_1169, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1168)) - _1135;
        float _1181 = fma(_1170, cbModelParam._m0[27u].z, fma(_1169, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1168)) - _1139;
        float _1182 = fma(_1170, cbModelParam._m0[28u].z, fma(_1169, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1168)) - _1143;
        float _1186 = inversesqrt(dot(vec3(_1180, _1181, _1182), vec3(_1180, _1181, _1182)));
        float _1199 = ((_1186 * _1180) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1135 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1200 = ((_1186 * _1181) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1139 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1201 = ((_1186 * _1182) / cbModelParam._m0[34u].z) + ((((((_1143 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1204 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1199, _1200, _1201), 0.0);
        vec4 _1211 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1199, _1200, _1201), 0.0);
        vec4 _1218 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1199, _1200, _1201), 0.0);
        vec4 _1225 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1199, _1200, _1201), 0.0);
        float _1238 = exp2((_1204.w + (-0.5)) * 20.0) * 2.0;
        float _1239 = _1238 * (_1204.x + (-0.5));
        float _1240 = _1238 * (_1204.y + (-0.5));
        float _1241 = _1238 * (_1204.z + (-0.5));
        float _1248 = exp2((_1211.w + (-0.5)) * 20.0) * 2.0;
        float _1249 = _1248 * (_1211.x + (-0.5));
        float _1250 = _1248 * (_1211.y + (-0.5));
        float _1251 = _1248 * (_1211.z + (-0.5));
        float _1258 = exp2((_1218.w + (-0.5)) * 20.0) * 2.0;
        float _1259 = _1258 * (_1218.x + (-0.5));
        float _1260 = _1258 * (_1218.y + (-0.5));
        float _1261 = _1258 * (_1218.z + (-0.5));
        float _1268 = exp2((_1225.w + (-0.5)) * 20.0) * 2.0;
        float _1269 = _1268 * (_1225.x + (-0.5));
        float _1270 = _1268 * (_1225.y + (-0.5));
        float _1271 = _1268 * (_1225.z + (-0.5));
        float _1272 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1273 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1274 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1275 = _1239 * 0.5;
        float _1276 = _1249 * 0.5;
        float _1277 = _1259 * 0.5;
        float _1278 = dot(vec3(_1275, _1276, _1277), vec3(_1275, _1276, _1277));
        float _1283 = (_1278 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1278);
        float _1292 = (dot(vec3(_832, _833, _834), vec3(_1283 * _1275, _1283 * _1276, _1283 * _1277)) + 1.0) * 0.5;
        float _4060 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1302 = sqrt(((_1276 * _1276) + (_1275 * _1275)) + (_1277 * _1277)) / (_1272 + 9.9999997473787516355514526367188e-06);
        float _4071 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1303 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
        float _1304 = _1303 * 2.0;
        float _1308 = (1.0 - _1303) / (_1303 + 1.0);
        float _4082 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1309 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
        float _1318 = ((((1.0 - _1309) * (_1304 + 2.0)) * exp2(log2(isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0))) * (_1304 + 1.0))) + _1309) * _1272;
        float _1319 = _1240 * 0.5;
        float _1320 = _1250 * 0.5;
        float _1321 = _1260 * 0.5;
        float _1322 = dot(vec3(_1319, _1320, _1321), vec3(_1319, _1320, _1321));
        float _1327 = (_1322 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1322);
        float _1335 = (dot(vec3(_832, _833, _834), vec3(_1327 * _1319, _1327 * _1320, _1327 * _1321)) + 1.0) * 0.5;
        float _4093 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1344 = sqrt(((_1320 * _1320) + (_1319 * _1319)) + (_1321 * _1321)) / (_1273 + 9.9999997473787516355514526367188e-06);
        float _4104 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1345 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
        float _1346 = _1345 * 2.0;
        float _1350 = (1.0 - _1345) / (_1345 + 1.0);
        float _4115 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1351 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
        float _1360 = ((((1.0 - _1351) * (_1346 + 2.0)) * exp2(log2(isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0))) * (_1346 + 1.0))) + _1351) * _1273;
        float _1361 = _1241 * 0.5;
        float _1362 = _1251 * 0.5;
        float _1363 = _1261 * 0.5;
        float _1364 = dot(vec3(_1361, _1362, _1363), vec3(_1361, _1362, _1363));
        float _1369 = (_1364 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1364);
        float _1377 = (dot(vec3(_832, _833, _834), vec3(_1369 * _1361, _1369 * _1362, _1369 * _1363)) + 1.0) * 0.5;
        float _4126 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1386 = sqrt(((_1362 * _1362) + (_1361 * _1361)) + (_1363 * _1363)) / (_1274 + 9.9999997473787516355514526367188e-06);
        float _4137 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1387 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
        float _1388 = _1387 * 2.0;
        float _1392 = (1.0 - _1387) / (_1387 + 1.0);
        float _4148 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1393 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
        float _1402 = ((((1.0 - _1393) * (_1388 + 2.0)) * exp2(log2(isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0))) * (_1388 + 1.0))) + _1393) * _1274;
        _1410 = _1241;
        _1412 = _1240;
        _1413 = _1239;
        _1414 = _1251;
        _1415 = _1250;
        _1416 = _1249;
        _1417 = _1261;
        _1418 = _1260;
        _1419 = _1259;
        _1420 = _1274;
        _1421 = _1273;
        _1422 = _1272;
        _1423 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0)));
        _1424 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0)));
        _1425 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0)));
    }
    else
    {
        _1410 = _1411;
        _1412 = _1411;
        _1413 = _1411;
        _1414 = _1411;
        _1415 = _1411;
        _1416 = _1411;
        _1417 = _1411;
        _1418 = _1411;
        _1419 = _1411;
        _1420 = _1411;
        _1421 = _1411;
        _1422 = _1411;
        _1423 = 0.0;
        _1424 = 0.0;
        _1425 = 0.0;
    }
    float _1722;
    float _1723;
    float _1724;
    float _1725;
    float _1726;
    float _1727;
    float _1728;
    float _1729;
    float _1730;
    float _1731;
    float _1732;
    float _1733;
    float _1734;
    float _1735;
    float _1736;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1453 = fma(_1081, cbModelParam._m0[30u].z, fma(_1077, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1073));
        float _1457 = fma(_1081, cbModelParam._m0[31u].z, fma(_1077, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1073));
        float _1461 = fma(_1081, cbModelParam._m0[32u].z, fma(_1077, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1073));
        float _1484 = _1073 + _832;
        float _1485 = _1077 + _833;
        float _1486 = _1081 + _834;
        float _1496 = fma(_1486, cbModelParam._m0[30u].z, fma(_1485, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1484)) - _1453;
        float _1497 = fma(_1486, cbModelParam._m0[31u].z, fma(_1485, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1484)) - _1457;
        float _1498 = fma(_1486, cbModelParam._m0[32u].z, fma(_1485, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1484)) - _1461;
        float _1502 = inversesqrt(dot(vec3(_1496, _1497, _1498), vec3(_1496, _1497, _1498)));
        float _1515 = ((_1502 * _1496) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1453 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1516 = ((_1502 * _1497) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1457 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1517 = ((_1502 * _1498) / cbModelParam._m0[35u].z) + ((((((_1461 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1519 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1515, _1516, _1517), 0.0);
        vec4 _1526 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1515, _1516, _1517), 0.0);
        vec4 _1533 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1515, _1516, _1517), 0.0);
        vec4 _1540 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1515, _1516, _1517), 0.0);
        float _1552 = exp2((_1519.w + (-0.5)) * 20.0) * 2.0;
        float _1553 = _1552 * (_1519.x + (-0.5));
        float _1554 = _1552 * (_1519.y + (-0.5));
        float _1555 = _1552 * (_1519.z + (-0.5));
        float _1562 = exp2((_1526.w + (-0.5)) * 20.0) * 2.0;
        float _1563 = _1562 * (_1526.x + (-0.5));
        float _1564 = _1562 * (_1526.y + (-0.5));
        float _1565 = _1562 * (_1526.z + (-0.5));
        float _1572 = exp2((_1533.w + (-0.5)) * 20.0) * 2.0;
        float _1573 = _1572 * (_1533.x + (-0.5));
        float _1574 = _1572 * (_1533.y + (-0.5));
        float _1575 = _1572 * (_1533.z + (-0.5));
        float _1582 = exp2((_1540.w + (-0.5)) * 20.0) * 2.0;
        float _1583 = _1582 * (_1540.x + (-0.5));
        float _1584 = _1582 * (_1540.y + (-0.5));
        float _1585 = _1582 * (_1540.z + (-0.5));
        float _1586 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1587 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
        float _1588 = isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0));
        float _1589 = _1553 * 0.5;
        float _1590 = _1563 * 0.5;
        float _1591 = _1573 * 0.5;
        float _1592 = dot(vec3(_1589, _1590, _1591), vec3(_1589, _1590, _1591));
        float _1597 = (_1592 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1592);
        float _1605 = (dot(vec3(_832, _833, _834), vec3(_1597 * _1589, _1597 * _1590, _1597 * _1591)) + 1.0) * 0.5;
        float _4189 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
        float _1614 = sqrt(((_1590 * _1590) + (_1589 * _1589)) + (_1591 * _1591)) / (_1586 + 9.9999997473787516355514526367188e-06);
        float _4200 = isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0));
        float _1615 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
        float _1616 = _1615 * 2.0;
        float _1620 = (1.0 - _1615) / (_1615 + 1.0);
        float _4211 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
        float _1621 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
        float _1630 = ((((1.0 - _1621) * (_1616 + 2.0)) * exp2(log2(isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0))) * (_1616 + 1.0))) + _1621) * _1586;
        float _1631 = _1554 * 0.5;
        float _1632 = _1564 * 0.5;
        float _1633 = _1574 * 0.5;
        float _1634 = dot(vec3(_1631, _1632, _1633), vec3(_1631, _1632, _1633));
        float _1639 = (_1634 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1634);
        float _1647 = (dot(vec3(_832, _833, _834), vec3(_1639 * _1631, _1639 * _1632, _1639 * _1633)) + 1.0) * 0.5;
        float _4222 = isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0));
        float _1656 = sqrt(((_1632 * _1632) + (_1631 * _1631)) + (_1633 * _1633)) / (_1587 + 9.9999997473787516355514526367188e-06);
        float _4233 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
        float _1657 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
        float _1658 = _1657 * 2.0;
        float _1662 = (1.0 - _1657) / (_1657 + 1.0);
        float _4244 = isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0));
        float _1663 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
        float _1672 = ((((1.0 - _1663) * (_1658 + 2.0)) * exp2(log2(isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0))) * (_1658 + 1.0))) + _1663) * _1587;
        float _1673 = _1555 * 0.5;
        float _1674 = _1565 * 0.5;
        float _1675 = _1575 * 0.5;
        float _1676 = dot(vec3(_1673, _1674, _1675), vec3(_1673, _1674, _1675));
        float _1681 = (_1676 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1676);
        float _1689 = (dot(vec3(_832, _833, _834), vec3(_1681 * _1673, _1681 * _1674, _1681 * _1675)) + 1.0) * 0.5;
        float _4255 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
        float _1698 = sqrt(((_1674 * _1674) + (_1673 * _1673)) + (_1675 * _1675)) / (_1588 + 9.9999997473787516355514526367188e-06);
        float _4266 = isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0));
        float _1699 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
        float _1700 = _1699 * 2.0;
        float _1704 = (1.0 - _1699) / (_1699 + 1.0);
        float _4277 = isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0));
        float _1705 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
        float _1714 = ((((1.0 - _1705) * (_1700 + 2.0)) * exp2(log2(isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0))) * (_1700 + 1.0))) + _1705) * _1588;
        _1722 = _1555;
        _1723 = _1554;
        _1724 = _1553;
        _1725 = _1565;
        _1726 = _1564;
        _1727 = _1563;
        _1728 = _1575;
        _1729 = _1574;
        _1730 = _1573;
        _1731 = _1588;
        _1732 = _1587;
        _1733 = _1586;
        _1734 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0)));
        _1735 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0)));
        _1736 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0)));
    }
    else
    {
        _1722 = _1411;
        _1723 = _1411;
        _1724 = _1411;
        _1725 = _1411;
        _1726 = _1411;
        _1727 = _1411;
        _1728 = _1411;
        _1729 = _1411;
        _1730 = _1411;
        _1731 = _1411;
        _1732 = _1411;
        _1733 = _1411;
        _1734 = 0.0;
        _1735 = 0.0;
        _1736 = 0.0;
    }
    float _1746 = (cbModelParam._m0[1u].x * (_1734 - _1423)) + _1423;
    float _1747 = (cbModelParam._m0[1u].x * (_1735 - _1424)) + _1424;
    float _1748 = (cbModelParam._m0[1u].x * (_1736 - _1425)) + _1425;
    float _1769 = fma(_1748, cbSceneParam._m0[89u].z, fma(_1747, cbSceneParam._m0[89u].y, _1746 * cbSceneParam._m0[89u].x));
    float _1772 = fma(_1748, cbSceneParam._m0[90u].z, fma(_1747, cbSceneParam._m0[90u].y, _1746 * cbSceneParam._m0[90u].x));
    float _1775 = fma(_1748, cbSceneParam._m0[91u].z, fma(_1747, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1746));
    float _1790 = _1017 * 0.5;
    float _1791 = _1018 * 0.5;
    float _1792 = _1019 * 0.5;
    float _1793 = dot(vec4(_1790, _1791, _1792, 1.0), vec4(_1724, _1727, _1730, _1733));
    float _1796 = dot(vec4(_1790, _1791, _1792, 1.0), vec4(_1723, _1726, _1729, _1732));
    float _1799 = dot(vec4(_1790, _1791, _1792, 1.0), vec4(_1722, _1725, _1728, _1731));
    float _1833;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1806 = dot(vec4(_1790, _1791, _1792, 1.0), vec4(_1410, _1414, _1417, _1420));
        float _1810 = dot(vec4(_1790, _1791, _1792, 1.0), vec4(_1412, _1415, _1418, _1421));
        float _1814 = dot(vec4(_1790, _1791, _1792, 1.0), vec4(_1413, _1416, _1419, _1422));
        float _1821 = dot(vec4(cbModelParam._m0[39u]), vec4(_1790, _1791, _1792, 1.0));
        _1833 = dot(vec3(isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0)), isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0)), isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1821) ? 0.0 : (isnan(0.0) ? _1821 : max(0.0, _1821))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1833 = 1.0;
    }
    float _1844;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1835 = dot(vec4(cbModelParam._m0[40u]), vec4(_1790, _1791, _1792, 1.0));
        _1844 = dot(vec3(isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0)), isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0)), isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1835) ? 0.0 : (isnan(0.0) ? _1835 : max(0.0, _1835))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1844 = 1.0;
    }
    float _1848 = (_1844 * cbModelParam._m0[1u].x) + (_1833 * (1.0 - cbModelParam._m0[1u].x));
    float _1858 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _835);
    float _1859 = isnan(_1858) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1858 : min(cbModelParam._m0[25u].z, _1858));
    float _1940;
    float _1942;
    float _1944;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1907 = fma(_1081, cbModelParam._m0[13u].z, fma(_1077, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1073)) + cbModelParam._m0[13u].w;
        float _1911 = fma(_1081, cbModelParam._m0[14u].z, fma(_1077, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1073)) + cbModelParam._m0[14u].w;
        float _1915 = fma(_1081, cbModelParam._m0[15u].z, fma(_1077, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1073)) + cbModelParam._m0[15u].w;
        float _1918 = fma(_1019, cbModelParam._m0[13u].z, fma(_1018, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1017));
        float _1921 = fma(_1019, cbModelParam._m0[14u].z, fma(_1018, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1017));
        float _1924 = fma(_1019, cbModelParam._m0[15u].z, fma(_1018, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1017));
        float _1952;
        if (_1918 > 0.0)
        {
            _1952 = abs((1.0 - _1907) / _1918);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1918 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1907 + 1.0) / _1918);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1952 = frontier_phi_17_15_ladder;
        }
        float _2155;
        if (_1921 > 0.0)
        {
            _2155 = abs((1.0 - _1911) / _1921);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1921 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1911 + 1.0) / _1921);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2155 = frontier_phi_26_22_ladder;
        }
        float _2409;
        if (_1924 > 0.0)
        {
            _2409 = abs((1.0 - _1915) / _1924);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1924 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1915 + 1.0) / _1924);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2409 = frontier_phi_38_33_ladder;
        }
        float _2411 = isnan(_2155) ? _1952 : (isnan(_1952) ? _2155 : min(_1952, _2155));
        float _2412 = isnan(_2409) ? _2411 : (isnan(_2411) ? _2409 : min(_2411, _2409));
        float _2416 = (_2412 * _1918) + _1907;
        float _2417 = (_2412 * _1921) + _1911;
        float _2418 = (_2412 * _1924) + _1915;
        float _2419 = _2412 * 9.9999997473787516355514526367188e-05;
        float _2421 = (-1.0) - _2419;
        float _2423 = _2419 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2418 > _2423) || ((_2418 < _2421) || ((_2417 > _2423) || ((_2417 < _2421) || ((_2416 < _2421) || (_2416 > _2423))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2546 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2418, cbModelParam._m0[9u].z, fma(_2417, cbModelParam._m0[9u].y, _2416 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2418, cbModelParam._m0[10u].z, fma(_2417, cbModelParam._m0[10u].y, _2416 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2418, cbModelParam._m0[11u].z, fma(_2417, cbModelParam._m0[11u].y, _2416 * cbModelParam._m0[11u].x))), _1859);
            frontier_phi_16_38_ladder = _2546.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2546.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2546.x * cbModelParam._m0[1u].y;
        }
        _1940 = frontier_phi_16_38_ladder_2;
        _1942 = frontier_phi_16_38_ladder_1;
        _1944 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1928 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1017, _1018, _1019), _1859);
        _1940 = _1928.x * cbModelParam._m0[1u].y;
        _1942 = _1928.y * cbModelParam._m0[1u].y;
        _1944 = _1928.z * cbModelParam._m0[1u].y;
    }
    float _1948 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _835);
    float _1949 = isnan(_1948) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1948 : min(cbModelParam._m0[25u].w, _1948));
    float _2039;
    float _2041;
    float _2043;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2003 = fma(_1081, cbModelParam._m0[21u].z, fma(_1077, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1073)) + cbModelParam._m0[21u].w;
        float _2007 = fma(_1081, cbModelParam._m0[22u].z, fma(_1077, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1073)) + cbModelParam._m0[22u].w;
        float _2011 = fma(_1081, cbModelParam._m0[23u].z, fma(_1077, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1073)) + cbModelParam._m0[23u].w;
        float _2014 = fma(_1019, cbModelParam._m0[21u].z, fma(_1018, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1017));
        float _2017 = fma(_1019, cbModelParam._m0[22u].z, fma(_1018, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1017));
        float _2020 = fma(_1019, cbModelParam._m0[23u].z, fma(_1018, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1017));
        float _2160;
        if (_2014 > 0.0)
        {
            _2160 = abs((1.0 - _2003) / _2014);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2014 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2003 + 1.0) / _2014);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2160 = frontier_phi_28_24_ladder;
        }
        float _2436;
        if (_2017 > 0.0)
        {
            _2436 = abs((1.0 - _2007) / _2017);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2017 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2007 + 1.0) / _2017);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2436 = frontier_phi_40_35_ladder;
        }
        float _2649;
        if (_2020 > 0.0)
        {
            _2649 = abs((1.0 - _2011) / _2020);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2020 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2011 + 1.0) / _2020);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2649 = frontier_phi_49_46_ladder;
        }
        float _2651 = isnan(_2436) ? _2160 : (isnan(_2160) ? _2436 : min(_2160, _2436));
        float _2652 = isnan(_2649) ? _2651 : (isnan(_2651) ? _2649 : min(_2651, _2649));
        float _2656 = (_2652 * _2014) + _2003;
        float _2657 = (_2652 * _2017) + _2007;
        float _2658 = (_2652 * _2020) + _2011;
        float _2659 = _2652 * 9.9999997473787516355514526367188e-05;
        float _2660 = (-1.0) - _2659;
        float _2662 = _2659 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2658 > _2662) || ((_2658 < _2660) || ((_2657 > _2662) || ((_2657 < _2660) || ((_2656 < _2660) || (_2656 > _2662))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2857 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2658, cbModelParam._m0[17u].z, fma(_2657, cbModelParam._m0[17u].y, _2656 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2658, cbModelParam._m0[18u].z, fma(_2657, cbModelParam._m0[18u].y, _2656 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2658, cbModelParam._m0[19u].z, fma(_2657, cbModelParam._m0[19u].y, _2656 * cbModelParam._m0[19u].x))), _1949);
            frontier_phi_25_49_ladder = _2857.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2857.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2857.x * cbModelParam._m0[1u].z;
        }
        _2039 = frontier_phi_25_49_ladder_2;
        _2041 = frontier_phi_25_49_ladder_1;
        _2043 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2023 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1017, _1018, _1019), _1949);
        _2039 = _2023.x * cbModelParam._m0[1u].z;
        _2041 = _2023.y * cbModelParam._m0[1u].z;
        _2043 = _2023.z * cbModelParam._m0[1u].z;
    }
    float _2056 = (((_1044 * _993) + _1045) * _1009) * ((cbModelParam._m0[1u].w * (_2039 - _1940)) + _1940);
    float _2058 = (((_1044 * _995) + _1045) * _1009) * ((cbModelParam._m0[1u].w * (_2041 - _1942)) + _1942);
    float _2060 = (((_1044 * _996) + _1045) * _1009) * ((cbModelParam._m0[1u].w * (_2043 - _1944)) + _1944);
    float _2063 = fma(_2060, cbSceneParam._m0[89u].z, fma(_2058, cbSceneParam._m0[89u].y, _2056 * cbSceneParam._m0[89u].x));
    float _2066 = fma(_2060, cbSceneParam._m0[90u].z, fma(_2058, cbSceneParam._m0[90u].y, _2056 * cbSceneParam._m0[90u].x));
    float _2069 = fma(_2060, cbSceneParam._m0[91u].z, fma(_2058, cbSceneParam._m0[91u].y, _2056 * cbSceneParam._m0[91u].x));
    uvec4 _2079 = floatBitsToUint(cbInstanceData._m0[_283 + 5u]);
    uint _2081 = _2079.x * 14u;
    uint _2082 = _2081 + 13u;
    float _2089 = _1009 + (-1.0);
    float _2094 = (cbLight._m0[_2082].x * _2089) + 1.0;
    float _2095 = (cbLight._m0[_2082].y * _2089) + 1.0;
    float _2096 = (cbLight._m0[_2082].z * _2089) + 1.0;
    float _2097 = (cbLight._m0[_2082].w * _2089) + 1.0;
    uint _2098 = _2081 + 5u;
    float _2104 = isnan(1.0) ? _2095 : (isnan(_2095) ? 1.0 : min(_2095, 1.0));
    uint _2108 = _2081 + 4u;
    float _2114 = isnan(1.0) ? _2094 : (isnan(_2094) ? 1.0 : min(_2094, 1.0));
    uint _2118 = _2081 | 1u;
    float _2129 = dot(vec3(cbLight._m0[_2081].xyz), vec3(_832, _833, _834));
    float _2132 = dot(vec3(cbLight._m0[_2118].xyz), vec3(_832, _833, _834));
    float _4413 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
    float _4424 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
    float _2137 = (isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0))) * 0.3183098733425140380859375;
    float _2139 = (isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0))) * 0.3183098733425140380859375;
    float _2146 = ((cbLight._m0[_2098].x * _2104) * _2139) + ((cbLight._m0[_2108].x * _2114) * _2137);
    float _2147 = ((_2104 * cbLight._m0[_2098].y) * _2139) + ((_2114 * cbLight._m0[_2108].y) * _2137);
    float _2148 = ((_2104 * cbLight._m0[_2098].z) * _2139) + ((_2114 * cbLight._m0[_2108].z) * _2137);
    uvec4 _2152 = floatBitsToUint(cbLight._m0[_2081 + 12u]);
    bool _2154 = _2152.x == 0u;
    float _2165;
    float _2167;
    float _2169;
    if (_2154)
    {
        _2165 = _2146;
        _2167 = _2147;
        _2169 = _2148;
    }
    else
    {
        uint _2173 = _2081 + 6u;
        float _2189 = (dot(vec3(cbLight._m0[_2081 + 2u].xyz), vec3(_832, _833, _834)) * 0.5) + 0.5;
        float _2190 = _2189 * _2189;
        float _4435 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0));
        float _2191 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
        float _2192 = isnan(1.0) ? _2096 : (isnan(_2096) ? 1.0 : min(_2096, 1.0));
        _2165 = (((cbLight._m0[_2173].x * 0.3183098733425140380859375) * _2191) * _2192) + _2146;
        _2167 = (((cbLight._m0[_2173].y * 0.3183098733425140380859375) * _2191) * _2192) + _2147;
        _2169 = (((cbLight._m0[_2173].z * 0.3183098733425140380859375) * _2191) * _2192) + _2148;
    }
    bool _2172 = _2152.y == 0u;
    float _2210;
    float _2212;
    float _2214;
    if (_2172)
    {
        _2210 = _2165;
        _2212 = _2167;
        _2214 = _2169;
    }
    else
    {
        uint _2380 = _2081 + 7u;
        float _2396 = (dot(vec3(cbLight._m0[_2081 + 3u].xyz), vec3(_832, _833, _834)) * 0.5) + 0.5;
        float _2397 = _2396 * _2396;
        float _4451 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
        float _2398 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
        float _2399 = isnan(1.0) ? _2097 : (isnan(_2097) ? 1.0 : min(_2097, 1.0));
        _2210 = (((cbLight._m0[_2380].x * 0.3183098733425140380859375) * _2398) * _2399) + _2165;
        _2212 = (((cbLight._m0[_2380].y * 0.3183098733425140380859375) * _2398) * _2399) + _2167;
        _2214 = (((cbLight._m0[_2380].z * 0.3183098733425140380859375) * _2398) * _2399) + _2169;
    }
    uint _2217 = _2081 + 8u;
    float _2230 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2081].w)) * _835) * 0.949999988079071044921875);
    float _2231 = _2230 * _2230;
    float _2232 = cbLight._m0[_2081].x + _911;
    float _2233 = cbLight._m0[_2081].y + _912;
    float _2234 = cbLight._m0[_2081].z + _913;
    float _2238 = inversesqrt(dot(vec3(_2232, _2233, _2234), vec3(_2232, _2233, _2234)));
    float _2239 = _2238 * _2232;
    float _2240 = _2238 * _2233;
    float _2241 = _2238 * _2234;
    float _2242 = dot(vec3(_832, _833, _834), vec3(cbLight._m0[_2081].xyz));
    float _4467 = isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0));
    float _2245 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
    float _4478 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
    float _2246 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
    float _2247 = dot(vec3(_832, _833, _834), vec3(_2239, _2240, _2241));
    float _4489 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
    float _2250 = isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0));
    float _2251 = dot(vec3(cbLight._m0[_2081].xyz), vec3(_2239, _2240, _2241));
    float _4500 = isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0));
    float _2255 = _2231 * _2231;
    float _2259 = ((_2250 * _2250) * (_2255 + (-1.0))) + 1.0;
    float _2267 = exp2(log2(1.0 - (isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0)))) * 5.0);
    float _2268 = 0.959999978542327880859375 - _990;
    float _2270 = 0.959999978542327880859375 - _991;
    float _2271 = 0.959999978542327880859375 - _992;
    float _2278 = 1.0 - _2231;
    float _2289 = (0.5 / (((_2246 * ((_2245 * _2278) + _2231)) + 9.9999999392252902907785028219223e-09) + (((_2246 * _2278) + _2231) * _2245))) * _2245;
    float _4511 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
    float _2291 = (isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0))) * (_2255 / ((_2259 * _2259) * 3.141590118408203125));
    uint _2302 = _2081 + 9u;
    float _2313 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2118].w)) * _835) * 0.949999988079071044921875);
    float _2314 = _2313 * _2313;
    float _2315 = cbLight._m0[_2118].x + _911;
    float _2316 = cbLight._m0[_2118].y + _912;
    float _2317 = cbLight._m0[_2118].z + _913;
    float _2321 = inversesqrt(dot(vec3(_2315, _2316, _2317), vec3(_2315, _2316, _2317)));
    float _2322 = _2321 * _2315;
    float _2323 = _2321 * _2316;
    float _2324 = _2321 * _2317;
    float _2325 = dot(vec3(_832, _833, _834), vec3(cbLight._m0[_2118].xyz));
    float _4522 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
    float _2328 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
    float _2329 = dot(vec3(_832, _833, _834), vec3(_2322, _2323, _2324));
    float _4533 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
    float _2332 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
    float _2333 = dot(vec3(cbLight._m0[_2118].xyz), vec3(_2322, _2323, _2324));
    float _4544 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
    float _2337 = _2314 * _2314;
    float _2341 = ((_2332 * _2332) * (_2337 + (-1.0))) + 1.0;
    float _2348 = exp2(log2(1.0 - (isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0)))) * 5.0);
    float _2355 = 1.0 - _2314;
    float _2365 = (0.5 / (((_2246 * ((_2328 * _2355) + _2314)) + 9.9999999392252902907785028219223e-09) + (((_2246 * _2355) + _2314) * _2328))) * _2328;
    float _4555 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
    float _2367 = (isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0))) * (_2337 / ((_2341 * _2341) * 3.141590118408203125));
    float _2377 = (((((_2348 * _2268) + _993) * cbLight._m0[_2302].x) * _2367) * _2104) + (((((_2267 * _2268) + _993) * cbLight._m0[_2217].x) * _2291) * _2114);
    float _2378 = (((((_2348 * _2270) + _995) * cbLight._m0[_2302].y) * _2367) * _2104) + (((((_2267 * _2270) + _995) * cbLight._m0[_2217].y) * _2291) * _2114);
    float _2379 = (((((_2348 * _2271) + _996) * cbLight._m0[_2302].z) * _2367) * _2104) + (((((_2267 * _2271) + _996) * cbLight._m0[_2217].z) * _2291) * _2114);
    float _2441;
    float _2443;
    float _2445;
    if (_2154)
    {
        _2441 = _2377;
        _2443 = _2378;
        _2445 = _2379;
    }
    else
    {
        uint _2447 = _2081 + 2u;
        uint _2451 = _2081 + 10u;
        float _2465 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2447].w)) * _835) * 0.949999988079071044921875);
        float _2466 = _2465 * _2465;
        float _2467 = cbLight._m0[_2447].x + _911;
        float _2468 = cbLight._m0[_2447].y + _912;
        float _2469 = cbLight._m0[_2447].z + _913;
        float _2473 = inversesqrt(dot(vec3(_2467, _2468, _2469), vec3(_2467, _2468, _2469)));
        float _2474 = _2473 * _2467;
        float _2475 = _2473 * _2468;
        float _2476 = _2473 * _2469;
        float _2477 = dot(vec3(_832, _833, _834), vec3(cbLight._m0[_2447].xyz));
        float _4566 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
        float _2480 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
        float _2481 = dot(vec3(_832, _833, _834), vec3(_2474, _2475, _2476));
        float _4577 = isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0));
        float _2484 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
        float _2485 = dot(vec3(cbLight._m0[_2447].xyz), vec3(_2474, _2475, _2476));
        float _4588 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
        float _2489 = _2466 * _2466;
        float _2493 = ((_2484 * _2484) * (_2489 + (-1.0))) + 1.0;
        float _2500 = exp2(log2(1.0 - (isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0)))) * 5.0);
        float _2507 = 1.0 - _2466;
        float _2517 = (0.5 / (((_2246 * ((_2480 * _2507) + _2466)) + 9.9999999392252902907785028219223e-09) + (((_2246 * _2507) + _2466) * _2480))) * _2480;
        float _4599 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0));
        float _2519 = (isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0))) * (_2489 / ((_2493 * _2493) * 3.141590118408203125));
        float _2520 = isnan(1.0) ? _2096 : (isnan(_2096) ? 1.0 : min(_2096, 1.0));
        _2441 = (((((_2500 * _2268) + _993) * cbLight._m0[_2451].x) * _2519) * _2520) + _2377;
        _2443 = (((((_2500 * _2270) + _995) * cbLight._m0[_2451].y) * _2519) * _2520) + _2378;
        _2445 = (((((_2500 * _2271) + _996) * cbLight._m0[_2451].z) * _2519) * _2520) + _2379;
    }
    float _2555;
    float _2557;
    float _2559;
    if (_2172)
    {
        _2555 = _2441;
        _2557 = _2443;
        _2559 = _2445;
    }
    else
    {
        uint _2566 = _2081 + 3u;
        uint _2570 = _2081 + 11u;
        float _2584 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2566].w)) * _835) * 0.949999988079071044921875);
        float _2585 = _2584 * _2584;
        float _2586 = cbLight._m0[_2566].x + _911;
        float _2587 = cbLight._m0[_2566].y + _912;
        float _2588 = cbLight._m0[_2566].z + _913;
        float _2592 = inversesqrt(dot(vec3(_2586, _2587, _2588), vec3(_2586, _2587, _2588)));
        float _2593 = _2592 * _2586;
        float _2594 = _2592 * _2587;
        float _2595 = _2592 * _2588;
        float _2596 = dot(vec3(_832, _833, _834), vec3(cbLight._m0[_2566].xyz));
        float _4615 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0));
        float _2599 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
        float _2600 = dot(vec3(_832, _833, _834), vec3(_2593, _2594, _2595));
        float _4626 = isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : max(_2600, 0.0));
        float _2603 = isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0));
        float _2604 = dot(vec3(cbLight._m0[_2566].xyz), vec3(_2593, _2594, _2595));
        float _4637 = isnan(0.0) ? _2604 : (isnan(_2604) ? 0.0 : max(_2604, 0.0));
        float _2608 = _2585 * _2585;
        float _2612 = ((_2603 * _2603) * (_2608 + (-1.0))) + 1.0;
        float _2619 = exp2(log2(1.0 - (isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0)))) * 5.0);
        float _2626 = 1.0 - _2585;
        float _2636 = (0.5 / (((_2246 * ((_2599 * _2626) + _2585)) + 9.9999999392252902907785028219223e-09) + (((_2246 * _2626) + _2585) * _2599))) * _2599;
        float _4648 = isnan(0.0) ? _2636 : (isnan(_2636) ? 0.0 : max(_2636, 0.0));
        float _2638 = (isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0))) * (_2608 / ((_2612 * _2612) * 3.141590118408203125));
        float _2639 = isnan(1.0) ? _2097 : (isnan(_2097) ? 1.0 : min(_2097, 1.0));
        _2555 = (((((_2619 * _2268) + _993) * cbLight._m0[_2570].x) * _2638) * _2639) + _2441;
        _2557 = (((((_2619 * _2270) + _995) * cbLight._m0[_2570].y) * _2638) * _2639) + _2443;
        _2559 = (((((_2619 * _2271) + _996) * cbLight._m0[_2570].z) * _2638) * _2639) + _2445;
    }
    float _2774;
    float _2776;
    float _2778;
    float _2780;
    float _2782;
    float _2784;
    if (_2079.y == 0u)
    {
        float _2714 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2715 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2714;
        float _2716 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2714;
        float _2717 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2714;
        uvec4 _2729 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2730 = _2729.x;
        uint _2741 = uint((float(_2729.y) * floor(float(uint(cbSceneParam._m0[85u].y * _932) / _2730))) + floor(float(uint(cbSceneParam._m0[85u].x * _931) / _2730)));
        float _2751 = (log2(_2717 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2752 = isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : max(_2751, 0.0));
        uint _2755 = uint(isnan(14.0) ? _2752 : (isnan(_2752) ? 14.0 : min(_2752, 14.0)));
        uvec4 _2760 = texelFetch(g_lightClusterGridBuffer, int(((_2755 << 2u) + (_2741 << 6u)) >> 2u));
        uint _2761 = _2760.x;
        uint _2762 = _2729.z;
        float _2862;
        float _2864;
        float _2866;
        float _2868;
        float _2870;
        float _2872;
        if (((((1u << ((_2762 >> 4u) & 15u)) + 4294967295u) & _2761) == 0u) || ((_2762 & 240u) == 0u))
        {
            _2862 = 0.0;
            _2864 = 0.0;
            _2866 = 0.0;
            _2868 = 0.0;
            _2870 = 0.0;
            _2872 = 0.0;
        }
        else
        {
            float _2863;
            float _2865;
            float _2867;
            float _2869;
            float _2871;
            float _2873;
            float _3015 = 0.0;
            float _3016 = 0.0;
            float _3017 = 0.0;
            float _3018 = 0.0;
            float _3019 = 0.0;
            float _3020 = 0.0;
            uint _3021 = 0u;
            uint _3030;
            bool _3031;
            for (;;)
            {
                _3030 = texelFetch(g_lightClassification, int((((_2755 << 5u) + (_2741 << 9u)) + (_3021 << 2u)) >> 2u)).x;
                _3031 = _3030 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3031)
                {
                    frontier_phi_66_pred = _3015;
                    frontier_phi_66_pred_1 = _3020;
                    frontier_phi_66_pred_2 = _3019;
                    frontier_phi_66_pred_3 = _3018;
                    frontier_phi_66_pred_4 = _3017;
                    frontier_phi_66_pred_5 = _3016;
                }
                else
                {
                    float _3160;
                    float _3161;
                    float _3162;
                    float _3163;
                    float _3164;
                    float _3165;
                    uint _3166;
                    _3160 = _3015;
                    _3161 = _3016;
                    _3162 = _3017;
                    _3163 = _3018;
                    _3164 = _3019;
                    _3165 = _3020;
                    _3166 = _3030;
                    float _3087;
                    float _3088;
                    float _3089;
                    float _3090;
                    float _3091;
                    float _3092;
                    for (;;)
                    {
                        uint _3170 = uint(findLSB(_3166)) + (_3021 << 5u);
                        uint _3167 = (_3166 + 4294967295u) & _3166;
                        uint _3172 = _3170 * 48u;
                        vec4 _3186 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3172)).x, texelFetch(g_PointLightRenderingBuffer, int(_3172 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3172 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3172 + 3u)).x));
                        uint _3192 = (_3170 * 48u) + 4u;
                        vec4 _3205 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3192)).x, texelFetch(g_PointLightRenderingBuffer, int(_3192 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3192 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3192 + 3u)).x));
                        uint _3211 = (_3170 * 48u) + 8u;
                        vec3 _3222 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3211)).x, texelFetch(g_PointLightRenderingBuffer, int(_3211 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3211 + 2u)).x));
                        float _3226 = _3186.x - _2715;
                        float _3227 = _3186.y - _2716;
                        float _3228 = _3186.z - _2717;
                        float _3229 = dot(vec3(_3226, _3227, _3228), vec3(_3226, _3227, _3228));
                        float _3232 = inversesqrt(_3229);
                        float _3233 = _3232 * _3226;
                        float _3234 = _3232 * _3227;
                        float _3235 = _3232 * _3228;
                        float _3236 = dot(vec3(_950, _953, _956), vec3(_3233, _3234, _3235));
                        float _3241 = 1.0 - (_3229 * _3186.w);
                        float _4674 = isnan(0.0) ? _3241 : (isnan(_3241) ? 0.0 : max(_3241, 0.0));
                        float _3242 = isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0));
                        float _3243 = sqrt(_3229) * _3205.w;
                        float _3246 = 1.39999997615814208984375 / (_3243 + 1.39999997615814208984375);
                        float _3247 = _3246 * _3246;
                        float _3250 = ((1.0 - _3247) * _3236) + _3247;
                        float _3253 = _3243 * _3243;
                        float _3257 = ((isnan(0.0) ? _3250 : (isnan(_3250) ? 0.0 : max(_3250, 0.0))) * _3242) / ((_3253 * 0.699999988079071044921875) + 1.0);
                        float _3261 = (-0.0) - _2715;
                        float _3262 = (-0.0) - _2716;
                        float _3263 = (-0.0) - _2717;
                        float _3267 = inversesqrt(dot(vec3(_3261, _3262, _3263), vec3(_3261, _3262, _3263)));
                        float _3268 = _3267 * _3261;
                        float _3269 = _3267 * _3262;
                        float _3270 = _3267 * _3263;
                        float _3278 = exp2(log2(1.0 / ((_3253 * 3.5) + 5.0)) * 0.25);
                        float _3279 = 1.0 - _1025;
                        float _3286 = sqrt(1.0 - ((1.0 - (_3279 * _3279)) * (1.0 - (_3278 * _3278))));
                        float _3287 = _3286 * _3286;
                        float _3288 = _3287 * _3287;
                        float _3289 = _3268 + _3233;
                        float _3290 = _3269 + _3234;
                        float _3291 = _3270 + _3235;
                        float _3295 = inversesqrt(dot(vec3(_3289, _3290, _3291), vec3(_3289, _3290, _3291)));
                        float _3299 = dot(vec3(_950, _953, _956), vec3(_3268, _3269, _3270));
                        float _4690 = isnan(0.0) ? _3299 : (isnan(_3299) ? 0.0 : max(_3299, 0.0));
                        float _3302 = isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0));
                        float _3303 = dot(vec3(_950, _953, _956), vec3(_3295 * _3289, _3295 * _3290, _3295 * _3291));
                        float _4701 = isnan(0.0) ? _3303 : (isnan(_3303) ? 0.0 : max(_3303, 0.0));
                        float _3306 = isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0));
                        float _3310 = ((_3306 * _3306) * (_3288 + (-1.0))) + 1.0;
                        float _3311 = _3246 * _3287;
                        float _3312 = _3311 * _3311;
                        float _3315 = ((1.0 - _3312) * _3236) + _3312;
                        float _4712 = isnan(0.0) ? _3315 : (isnan(_3315) ? 0.0 : max(_3315, 0.0));
                        float _3316 = isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0));
                        float _3317 = 1.0 - _3287;
                        float _3327 = (0.5 / (((_3316 * ((_3302 * _3317) + _3287)) + 9.9999999392252902907785028219223e-09) + (((_3316 * _3317) + _3287) * _3302))) * _3316;
                        float _4723 = isnan(0.0) ? _3327 : (isnan(_3327) ? 0.0 : max(_3327, 0.0));
                        float _3338 = (((_3288 * 3.1415927410125732421875) * (isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0)))) / ((_3310 * _3310) * ((_3253 * 2.1991131305694580078125) + 3.141590118408203125))) * _3242;
                        _3090 = (_3257 * _3205.x) + _3163;
                        _3091 = (_3257 * _3205.y) + _3164;
                        _3092 = (_3257 * _3205.z) + _3165;
                        _3087 = (_3338 * _3222.x) + _3160;
                        _3088 = (_3338 * _3222.y) + _3161;
                        _3089 = (_3338 * _3222.z) + _3162;
                        if (_3167 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3160 = _3087;
                            _3161 = _3088;
                            _3162 = _3089;
                            _3163 = _3090;
                            _3164 = _3091;
                            _3165 = _3092;
                            _3166 = _3167;
                        }
                    }
                    frontier_phi_66_pred = _3087;
                    frontier_phi_66_pred_1 = _3092;
                    frontier_phi_66_pred_2 = _3091;
                    frontier_phi_66_pred_3 = _3090;
                    frontier_phi_66_pred_4 = _3089;
                    frontier_phi_66_pred_5 = _3088;
                }
                _2863 = frontier_phi_66_pred;
                _2873 = frontier_phi_66_pred_1;
                _2871 = frontier_phi_66_pred_2;
                _2869 = frontier_phi_66_pred_3;
                _2867 = frontier_phi_66_pred_4;
                _2865 = frontier_phi_66_pred_5;
                uint _3022 = _3021 + 1u;
                if (_3022 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3015 = _2863;
                    _3016 = _2865;
                    _3017 = _2867;
                    _3018 = _2869;
                    _3019 = _2871;
                    _3020 = _2873;
                    _3021 = _3022;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2862 = _2863;
            _2864 = _2865;
            _2866 = _2867;
            _2868 = _2869;
            _2870 = _2871;
            _2872 = _2873;
        }
        uvec4 _2876 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2877 = _2876.z;
        uint _2879 = (_2877 >> 8u) & 15u;
        float _2983;
        float _2985;
        float _2987;
        float _2989;
        float _2991;
        float _2993;
        if (((4294967295u << _2879) & _2761) == 0u)
        {
            _2983 = _2862;
            _2985 = _2864;
            _2987 = _2866;
            _2989 = _2868;
            _2991 = _2870;
            _2993 = _2872;
        }
        else
        {
            float _3008 = inversesqrt(dot(vec3(_2715, _2716, _2717), vec3(_2715, _2716, _2717)));
            float _3009 = _3008 * _2715;
            float _3010 = _3008 * _2716;
            float _3011 = _3008 * _2717;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2879 < ((_2877 >> 12u) & 15u))
            {
                float _2984;
                float _2986;
                float _2988;
                float _2990;
                float _2992;
                float _2994;
                float _3143 = _2862;
                float _3144 = _2864;
                float _3145 = _2866;
                float _3146 = _2868;
                float _3147 = _2870;
                float _3148 = _2872;
                uint _3149 = _2879;
                uint _3158;
                bool _3159;
                for (;;)
                {
                    _3158 = texelFetch(g_lightClassification, int((((_2755 << 5u) + (_2741 << 9u)) + (_3149 << 2u)) >> 2u)).x;
                    _3159 = _3158 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3159)
                    {
                        frontier_phi_77_pred = _3148;
                        frontier_phi_77_pred_1 = _3147;
                        frontier_phi_77_pred_2 = _3146;
                        frontier_phi_77_pred_3 = _3145;
                        frontier_phi_77_pred_4 = _3144;
                        frontier_phi_77_pred_5 = _3143;
                    }
                    else
                    {
                        float _3352;
                        float _3353;
                        float _3354;
                        float _3355;
                        float _3356;
                        float _3357;
                        float _3645;
                        float _3646;
                        float _3647;
                        float _3648;
                        float _3649;
                        float _3650;
                        float _3365 = _3143;
                        float _3366 = _3144;
                        float _3367 = _3145;
                        float _3368 = _3146;
                        float _3369 = _3147;
                        float _3370 = _3148;
                        uint _3371 = _3158;
                        uint _3372;
                        vec4 _3397;
                        float _3398;
                        vec4 _3413;
                        vec3 _3425;
                        vec4 _3440;
                        vec4 _3455;
                        float _3501;
                        bool _3502;
                        for (;;)
                        {
                            uint _3382 = ((_3149 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3371));
                            _3372 = (_3371 + 4294967295u) & _3371;
                            uint _3384 = _3382 * 40u;
                            _3397 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3384)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 3u)).x));
                            _3398 = _3397.w;
                            uint _3400 = (_3382 * 40u) + 4u;
                            _3413 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3400)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3400 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3400 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3400 + 3u)).x));
                            uint _3415 = (_3382 * 40u) + 8u;
                            _3425 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3415)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3415 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3415 + 2u)).x));
                            uint _3427 = (_3382 * 40u) + 16u;
                            _3440 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3427)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 3u)).x));
                            uint _3442 = (_3382 * 40u) + 20u;
                            _3455 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3442)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 3u)).x));
                            uint _3457 = (_3382 * 40u) + 24u;
                            vec4 _3470 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3457)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3457 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3457 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3457 + 3u)).x));
                            uint _3476 = (_3382 * 40u) + 28u;
                            vec4 _3489 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3476)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 3u)).x));
                            _3501 = fma(_2717, _3489.z, fma(_2716, _3489.y, _3489.x * _2715)) + _3489.w;
                            _3502 = !((fma(_2717, _3470.z, fma(_2716, _3470.y, _3470.x * _2715)) + _3470.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3502)
                            {
                                float _3529 = _3397.x - _2715;
                                float _3530 = _3397.y - _2716;
                                float _3531 = _3397.z - _2717;
                                float _3532 = dot(vec3(_3529, _3530, _3531), vec3(_3529, _3530, _3531));
                                float _3535 = inversesqrt(_3532);
                                float _3536 = _3535 * _3529;
                                float _3537 = _3535 * _3530;
                                float _3538 = _3535 * _3531;
                                float _3542 = 1.0 - (_3532 / (_3398 * _3398));
                                float _4734 = isnan(0.0) ? _3542 : (isnan(_3542) ? 0.0 : max(_3542, 0.0));
                                float _3543 = isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0));
                                float _3547 = sqrt(_3532) * _3413.w;
                                float _3549 = 1.39999997615814208984375 / (_3547 + 1.39999997615814208984375);
                                float _3550 = _3549 * _3549;
                                float _3553 = ((1.0 - _3550) * dot(vec3(_3536, _3537, _3538), vec3(_950, _953, _956))) + _3550;
                                float _3556 = _3547 * _3547;
                                float _3560 = (fma(_2717, _3440.z, fma(_2716, _3440.y, _3440.x * _2715)) + _3440.w) / _3501;
                                float _3561 = (fma(_2717, _3455.z, fma(_2716, _3455.y, _3455.x * _2715)) + _3455.w) / _3501;
                                float _3565 = 1.0 - dot(vec2(_3560, _3561), vec2(_3560, _3561));
                                float _4750 = isnan(0.0) ? _3565 : (isnan(_3565) ? 0.0 : max(_3565, 0.0));
                                float _3566 = isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0));
                                float _3567 = _3566 * (((isnan(0.0) ? _3553 : (isnan(_3553) ? 0.0 : max(_3553, 0.0))) * _3543) / ((_3556 * 0.699999988079071044921875) + 1.0));
                                float _3579 = exp2(log2(1.0 / ((_3556 * 3.5) + 5.0)) * 0.25);
                                float _3580 = 1.0 - _1025;
                                float _3587 = sqrt(1.0 - ((1.0 - (_3580 * _3580)) * (1.0 - (_3579 * _3579))));
                                float _3588 = _3587 * _3587;
                                float _3589 = _3588 * _3588;
                                float _3590 = _3536 - _3009;
                                float _3591 = _3537 - _3010;
                                float _3592 = _3538 - _3011;
                                float _3596 = inversesqrt(dot(vec3(_3590, _3591, _3592), vec3(_3590, _3591, _3592)));
                                float _3600 = dot(vec3(_950, _953, _956), vec3((-0.0) - _3009, (-0.0) - _3010, (-0.0) - _3011));
                                float _4761 = isnan(0.0) ? _3600 : (isnan(_3600) ? 0.0 : max(_3600, 0.0));
                                float _3603 = isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0));
                                float _3604 = dot(vec3(_950, _953, _956), vec3(_3596 * _3590, _3596 * _3591, _3596 * _3592));
                                float _4772 = isnan(0.0) ? _3604 : (isnan(_3604) ? 0.0 : max(_3604, 0.0));
                                float _3607 = isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0));
                                float _3611 = ((_3607 * _3607) * (_3589 + (-1.0))) + 1.0;
                                float _3612 = _3549 * _3588;
                                float _3613 = _3612 * _3612;
                                float _3619 = ((1.0 - _3613) * dot(vec3(_950, _953, _956), vec3(_3536, _3537, _3538))) + _3613;
                                float _4783 = isnan(0.0) ? _3619 : (isnan(_3619) ? 0.0 : max(_3619, 0.0));
                                float _3620 = isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0));
                                float _3621 = 1.0 - _3588;
                                float _3631 = (0.5 / (((_3620 * ((_3603 * _3621) + _3588)) + 9.9999999392252902907785028219223e-09) + (((_3620 * _3621) + _3588) * _3603))) * _3620;
                                float _4794 = isnan(0.0) ? _3631 : (isnan(_3631) ? 0.0 : max(_3631, 0.0));
                                float _3641 = (_3566 * _3543) * (((_3589 * 3.1415927410125732421875) * (isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0)))) / ((_3611 * _3611) * ((_3556 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3567 * _3413.y;
                                frontier_phi_83_pred_1 = _3567 * _3413.x;
                                frontier_phi_83_pred_2 = _3641 * _3425.z;
                                frontier_phi_83_pred_3 = _3641 * _3425.y;
                                frontier_phi_83_pred_4 = _3641 * _3425.x;
                                frontier_phi_83_pred_5 = _3567 * _3413.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3649 = frontier_phi_83_pred;
                            _3648 = frontier_phi_83_pred_1;
                            _3647 = frontier_phi_83_pred_2;
                            _3646 = frontier_phi_83_pred_3;
                            _3645 = frontier_phi_83_pred_4;
                            _3650 = frontier_phi_83_pred_5;
                            _3355 = _3648 + _3368;
                            _3356 = _3649 + _3369;
                            _3357 = _3650 + _3370;
                            _3352 = _3645 + _3365;
                            _3353 = _3646 + _3366;
                            _3354 = _3647 + _3367;
                            if (_3372 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3365 = _3352;
                                _3366 = _3353;
                                _3367 = _3354;
                                _3368 = _3355;
                                _3369 = _3356;
                                _3370 = _3357;
                                _3371 = _3372;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3357;
                        frontier_phi_77_pred_1 = _3356;
                        frontier_phi_77_pred_2 = _3355;
                        frontier_phi_77_pred_3 = _3354;
                        frontier_phi_77_pred_4 = _3353;
                        frontier_phi_77_pred_5 = _3352;
                    }
                    _2994 = frontier_phi_77_pred;
                    _2992 = frontier_phi_77_pred_1;
                    _2990 = frontier_phi_77_pred_2;
                    _2988 = frontier_phi_77_pred_3;
                    _2986 = frontier_phi_77_pred_4;
                    _2984 = frontier_phi_77_pred_5;
                    uint _3150 = _3149 + 1u;
                    if (_3150 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3143 = _2984;
                        _3144 = _2986;
                        _3145 = _2988;
                        _3146 = _2990;
                        _3147 = _2992;
                        _3148 = _2994;
                        _3149 = _3150;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2988;
                frontier_phi_58_59_ladder_1 = _2994;
                frontier_phi_58_59_ladder_2 = _2992;
                frontier_phi_58_59_ladder_3 = _2990;
                frontier_phi_58_59_ladder_4 = _2986;
                frontier_phi_58_59_ladder_5 = _2984;
            }
            else
            {
                frontier_phi_58_59_ladder = _2866;
                frontier_phi_58_59_ladder_1 = _2872;
                frontier_phi_58_59_ladder_2 = _2870;
                frontier_phi_58_59_ladder_3 = _2868;
                frontier_phi_58_59_ladder_4 = _2864;
                frontier_phi_58_59_ladder_5 = _2862;
            }
            _2983 = frontier_phi_58_59_ladder_5;
            _2985 = frontier_phi_58_59_ladder_4;
            _2987 = frontier_phi_58_59_ladder;
            _2989 = frontier_phi_58_59_ladder_3;
            _2991 = frontier_phi_58_59_ladder_2;
            _2993 = frontier_phi_58_59_ladder_1;
        }
        float _2998 = isnan(1.0) ? _1009 : (isnan(_1009) ? 1.0 : min(_1009, 1.0));
        _2774 = (_2998 * _2989) + _2210;
        _2776 = (_2998 * _2991) + _2212;
        _2778 = (_2998 * _2993) + _2214;
        _2780 = ((_2983 * _993) * _2998) + _2555;
        _2782 = ((_2985 * _995) * _2998) + _2557;
        _2784 = ((_2987 * _996) * _2998) + _2559;
    }
    else
    {
        _2774 = _2210;
        _2776 = _2212;
        _2778 = _2214;
        _2780 = _2555;
        _2782 = _2557;
        _2784 = _2559;
    }
    float _4810 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
    float _4821 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
    float _4832 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
    float _2801 = ((isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0))) * (_2774 + ((isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0))) * _1009))) + ((_2780 + ((isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0))) * _1848)) * cbPerFrame._m0[3u].x);
    float _2802 = ((isnan(1.0) ? _4821 : (isnan(_4821) ? 1.0 : min(_4821, 1.0))) * (_2776 + ((isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0))) * _1009))) + ((_2782 + ((isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0))) * _1848)) * cbPerFrame._m0[3u].x);
    float _2803 = ((isnan(1.0) ? _4832 : (isnan(_4832) ? 1.0 : min(_4832, 1.0))) * (_2778 + ((isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0))) * _1009))) + ((_2784 + ((isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0))) * _1848)) * cbPerFrame._m0[3u].x);
    uint _2804 = _283 + 6u;
    float _2812 = _931 / cbSceneParam._m0[86u].x;
    float _2813 = _932 / cbSceneParam._m0[86u].y;
    vec4 _2827 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2812, _2813, (log2((isnan(cbSceneParam._m0[77u].w) ? _854 : (isnan(_854) ? cbSceneParam._m0[77u].w : min(_854, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2829 = _2827.x;
    float _2830 = _2827.y;
    float _2831 = _2827.z;
    float _2832 = _2827.w;
    float _2925;
    float _2927;
    float _2929;
    float _2931;
    if (_854 > cbSceneParam._m0[78u].w)
    {
        float _2887 = isnan(_854) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _854 : min(cbSceneParam._m0[80u].w, _854));
        float _2888 = _2887 / _854;
        float _2899 = _2888 * _904;
        float _2900 = _905 * _2888;
        float _2901 = (-0.0) - _2900;
        float _2903 = _2888 * _906;
        float _2905 = (cbSceneParam._m0[77u].w * _2901) / _2887;
        float _2906 = _2905 + cbSceneParam._m0[79u].w;
        float _2907 = cbSceneParam._m0[79u].w - _2900;
        float _2913 = sqrt(((_2899 * _2899) + (_2900 * _2900)) + (_2903 * _2903));
        float _2916 = (1.0 - (cbSceneParam._m0[77u].w / _2887)) * _2913;
        float _2921 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2923 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3100;
        if (abs((_2901 - _2905) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3100 = ((((_2906 > 0.0) ? exp2(_2921 * _2906) : (2.0 - exp2(_2923 * _2906))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2916;
        }
        else
        {
            float _3044 = 1.0 / cbSceneParam._m0[80u].x;
            float _3045 = isnan(_2907) ? _2906 : (isnan(_2906) ? _2907 : max(_2906, _2907));
            float _3046 = isnan(_2907) ? _2906 : (isnan(_2906) ? _2907 : min(_2906, _2907));
            float _3055 = isnan(0.0) ? _3045 : (isnan(_3045) ? 0.0 : min(_3045, 0.0));
            float _3056 = isnan(0.0) ? _3046 : (isnan(_3046) ? 0.0 : min(_3046, 0.0));
            _3100 = ((abs(_2913 / _2901) * cbSceneParam._m0[80u].y) * ((((_3055 - _3056) * 2.0) - ((exp2(_2921 * (isnan(0.0) ? _3045 : (isnan(_3045) ? 0.0 : max(_3045, 0.0)))) - exp2(_2921 * (isnan(0.0) ? _3046 : (isnan(_3046) ? 0.0 : max(_3046, 0.0))))) * _3044)) - ((exp2(_2923 * _3055) - exp2(_2923 * _3056)) * _3044))) + (_2916 * cbSceneParam._m0[80u].z);
        }
        vec4 _3102 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2812, _2813, 1.0), 0.0);
        float _3111 = exp2((_3100 * (-1.44269502162933349609375)) * (1.0 - _3102.w));
        float _3112 = log2(_3111);
        float _3128 = log2(_2832);
        _2925 = (exp2(_3128 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3112 * cbSceneParam._m0[78u].x)) * _3102.x) / cbSceneParam._m0[78u].x)) + _2829;
        _2927 = (exp2(_3128 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3112 * cbSceneParam._m0[78u].y)) * _3102.y) / cbSceneParam._m0[78u].y)) + _2830;
        _2929 = (exp2(_3128 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3112 * cbSceneParam._m0[78u].z)) * _3102.z) / cbSceneParam._m0[78u].z)) + _2831;
        _2931 = _3111 * _2832;
    }
    else
    {
        _2925 = _2829;
        _2927 = _2830;
        _2929 = _2831;
        _2931 = _2832;
    }
    bool _3138;
    vec4 _2941;
    vec4 _2963;
    float _2965;
    float _2969;
    float _2970;
    float _2971;
    float _2972;
    bool _2982;
    for (;;)
    {
        _2941 = cbMatDynParam._m0[0u];
        float _2943 = roundEven(_2941.y);
        bool _2944 = _2943 == 3.0;
        float _2945 = log2(_2931);
        float _2952 = exp2(_2945 * cbSceneParam._m0[78u].x) * _2801;
        float _2953 = exp2(_2945 * cbSceneParam._m0[78u].y) * _2802;
        float _2954 = exp2(_2945 * cbSceneParam._m0[78u].z) * _2803;
        float _2961 = _920 + (-0.5);
        _2963 = cbMtdParam._m0[1u];
        _2965 = _2963.y * _2961;
        float _2968 = (_2943 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2969 = _2968 * (_2944 ? _2952 : (_2952 + (cbSceneParam._m0[72u].w * _2925)));
        _2970 = _2968 * (_2944 ? _2953 : (_2953 + (cbSceneParam._m0[72u].w * _2927)));
        _2971 = _2968 * (_2944 ? _2954 : (_2954 + (cbSceneParam._m0[72u].w * _2929)));
        _2972 = _2961 * 0.999000012874603271484375;
        _2982 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2982)
        {
            if ((cbInstanceData._m0[_283 + 7u].x + _2972) < 0.5)
            {
                _3138 = true;
                break;
            }
        }
        uint _3079 = _969 + uint(_2941.w);
        if ((cbInstanceData._m0[_3079].w < 1.0) && ((cbInstanceData._m0[_3079].w + _2972) < 0.5))
        {
            _3138 = true;
            break;
        }
        if ((_2965 + 1.0) < _2963.x)
        {
            _3138 = true;
            break;
        }
        _3138 = false;
        break;
    }
    float _3343;
    if (_3138)
    {
        discard_state = true;
        _3343 = 0.0;
    }
    else
    {
        _3343 = cbInstanceData._m0[_2804].w;
    }
    SV_Target.x = _2969;
    SV_Target.y = _2970;
    SV_Target.z = _2971;
    SV_Target.w = _3343;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2804].w;
    discard_exit();
}


