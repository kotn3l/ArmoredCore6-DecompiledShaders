#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1182;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _212 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _213 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _214 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _220 = inversesqrt(dot(vec3(_212, _213, _214), vec3(_212, _213, _214)));
    float _227 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _234 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _240 = uint(roundEven(NORMAL.w)) * 13u;
    uint _246 = _240 + 1u;
    uint _250 = _240 + 2u;
    float _259 = sqrt(((cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x) + (cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x)) + (cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x));
    float _260 = _259 * TEXCOORD.z;
    float _261 = _259 * TEXCOORD.w;
    vec4 _281 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _287 = _281.x * cbMtdParam._m0[11u].x;
    float _288 = _281.y * cbMtdParam._m0[11u].y;
    float _289 = _281.z * cbMtdParam._m0[11u].z;
    vec4 _308 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _260) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _261) + cbTextureTilingScale._m0[5u].w));
    vec4 _347 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _349 = _347.x;
    float _361 = dot(vec4(_349, _347.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _378 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_349 - _361) * cbMtdParam._m0[24u].y) + _361) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3792 = isnan(0.0) ? _378 : (isnan(_378) ? 0.0 : max(_378, 0.0));
    float _379 = isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0));
    float _386 = (_379 * ((_308.x * cbMtdParam._m0[12u].x) - _287)) + _287;
    float _387 = (_379 * ((_308.y * cbMtdParam._m0[12u].y) - _288)) + _288;
    float _388 = (_379 * ((_308.z * cbMtdParam._m0[12u].z) - _289)) + _289;
    vec4 _405 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _260) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _261) + cbTextureTilingScale._m0[3u].w));
    vec4 _425 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _427 = _425.x;
    float _437 = dot(vec4(_427, _425.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _451 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_427 - _437) * cbMtdParam._m0[24u].y) + _437) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3803 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _452 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
    float _459 = (_452 * ((_405.x * cbMtdParam._m0[13u].x) - _386)) + _386;
    float _460 = (_452 * ((_405.y * cbMtdParam._m0[13u].y) - _387)) + _387;
    float _461 = (_452 * ((_405.z * cbMtdParam._m0[13u].z) - _388)) + _388;
    vec4 _474 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _260) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _261) + cbTextureTilingScale._m0[4u].w));
    vec4 _491 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _493 = _491.x;
    float _494 = _491.y;
    float _495 = _491.z;
    float _502 = ((_474.x - _493) * _379) + _493;
    float _503 = ((_474.y - _494) * _379) + _494;
    float _504 = ((_474.z - _495) * _379) + _495;
    vec4 _516 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _260) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _261) + cbTextureTilingScale._m0[2u].w));
    float _529 = ((_516.z - _504) * _452) + _504;
    float _532 = ((((_516.x - _502) * _452) + _502) * 2.0) + (-1.0);
    float _534 = ((((_516.y - _503) * _452) + _503) * 2.0) + (-1.0);
    float _535 = dot(vec2(_532, _534), vec2(_532, _534));
    float _3814 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _540 = sqrt(1.0 - (isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0))));
    vec4 _553 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _567 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _581 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _583 = _581.x;
    float _601 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _260) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _261) + cbTextureTilingScale._m0[9u].w)).x - _583) * _379) + _583;
    float _619 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _260) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _261) + cbTextureTilingScale._m0[21u].w)).x - _601) * _452) + _601;
    float _623 = ((_567.x - _619) * cbMtdParam._m0[19u].z) + _619;
    float _628 = cbMtdParam._m0[22u].x + _553.w;
    float _631 = fma(_540, _227 * NORMAL.x, fma(_534, _234 * TANGENT.x, (_220 * _212) * _532));
    float _634 = fma(_540, _227 * NORMAL.y, fma(_534, _234 * TANGENT.y, (_220 * _213) * _532));
    float _637 = fma(_540, _227 * NORMAL.z, fma(_534, _234 * TANGENT.z, (_220 * _214) * _532));
    float _641 = inversesqrt(dot(vec3(_631, _634, _637), vec3(_631, _634, _637)));
    float _642 = _641 * _631;
    float _643 = _641 * _634;
    float _644 = _641 * _637;
    float _3825 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _645 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
    float _3836 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _3847 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _3858 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _3869 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _3880 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _650 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
    float _664 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _705 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _715 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _705);
    float _716 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _705);
    float _717 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _705);
    float _721 = inversesqrt(dot(vec3(_715, _716, _717), vec3(_715, _716, _717)));
    float _722 = _715 * _721;
    float _723 = _716 * _721;
    float _724 = _717 * _721;
    float _730 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _731 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _749 = fma(_644, cbSceneParam._m0[5u].z, fma(_643, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _642));
    float _752 = fma(_644, cbSceneParam._m0[6u].z, fma(_643, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _642));
    float _755 = fma(_644, cbSceneParam._m0[7u].z, fma(_643, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _642));
    uint _769 = (_240 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _775 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0)))) * cbInstanceData._m0[_769].x;
    float _776 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0)))) * cbInstanceData._m0[_769].y;
    float _777 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0)))) * cbInstanceData._m0[_769].z;
    float _3891 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
    float _778 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
    float _3902 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
    float _779 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
    float _3913 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
    float _780 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
    float _781 = 1.0 - _650;
    float _782 = _778 * _781;
    float _783 = _779 * _781;
    float _784 = _780 * _781;
    float _789 = (_778 + (-0.039999999105930328369140625)) * _650;
    float _790 = (_779 + (-0.039999999105930328369140625)) * _650;
    float _791 = (_780 + (-0.039999999105930328369140625)) * _650;
    float _792 = _789 + 0.039999999105930328369140625;
    float _794 = _790 + 0.039999999105930328369140625;
    float _795 = _791 + 0.039999999105930328369140625;
    vec4 _804 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _730, cbSceneParam._m0[86u].y * _731));
    float _808 = ((isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0))) * TEXCOORD_5.w) * _804.x;
    float _809 = dot(vec3(_642, _643, _644), vec3(_722, _723, _724));
    float _812 = _809 * 2.0;
    float _816 = (_812 * _642) - _722;
    float _817 = (_812 * _643) - _723;
    float _818 = (_812 * _644) - _724;
    float _822 = abs(dot(vec3(_722, _723, _724), vec3(_642, _643, _644)));
    float _3924 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
    float _824 = sqrt(_645);
    float _837 = exp2((_824 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_824 * 3.0));
    float _843 = (1.0 - _837) * ((_824 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _844 = _837 * _824;
    float _872 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _876 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _880 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1181;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _906 = fma(_880, cbModelParam._m0[26u].z, fma(_876, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _872));
        float _910 = fma(_880, cbModelParam._m0[27u].z, fma(_876, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _872));
        float _914 = fma(_880, cbModelParam._m0[28u].z, fma(_876, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _872));
        float _939 = _872 + _642;
        float _940 = _876 + _643;
        float _941 = _880 + _644;
        float _951 = fma(_941, cbModelParam._m0[26u].z, fma(_940, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _939)) - _906;
        float _952 = fma(_941, cbModelParam._m0[27u].z, fma(_940, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _939)) - _910;
        float _953 = fma(_941, cbModelParam._m0[28u].z, fma(_940, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _939)) - _914;
        float _957 = inversesqrt(dot(vec3(_951, _952, _953), vec3(_951, _952, _953)));
        float _970 = ((_957 * _951) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_906 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _971 = ((_957 * _952) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_910 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _972 = ((_957 * _953) / cbModelParam._m0[34u].z) + ((((((_914 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _975 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_970, _971, _972), 0.0);
        vec4 _982 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_970, _971, _972), 0.0);
        vec4 _989 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_970, _971, _972), 0.0);
        vec4 _996 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_970, _971, _972), 0.0);
        float _1009 = exp2((_975.w + (-0.5)) * 20.0) * 2.0;
        float _1010 = _1009 * (_975.x + (-0.5));
        float _1011 = _1009 * (_975.y + (-0.5));
        float _1012 = _1009 * (_975.z + (-0.5));
        float _1019 = exp2((_982.w + (-0.5)) * 20.0) * 2.0;
        float _1020 = _1019 * (_982.x + (-0.5));
        float _1021 = _1019 * (_982.y + (-0.5));
        float _1022 = _1019 * (_982.z + (-0.5));
        float _1029 = exp2((_989.w + (-0.5)) * 20.0) * 2.0;
        float _1030 = _1029 * (_989.x + (-0.5));
        float _1031 = _1029 * (_989.y + (-0.5));
        float _1032 = _1029 * (_989.z + (-0.5));
        float _1039 = exp2((_996.w + (-0.5)) * 20.0) * 2.0;
        float _1040 = _1039 * (_996.x + (-0.5));
        float _1041 = _1039 * (_996.y + (-0.5));
        float _1042 = _1039 * (_996.z + (-0.5));
        float _1043 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1044 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1045 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1046 = _1010 * 0.5;
        float _1047 = _1020 * 0.5;
        float _1048 = _1030 * 0.5;
        float _1049 = dot(vec3(_1046, _1047, _1048), vec3(_1046, _1047, _1048));
        float _1054 = (_1049 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1049);
        float _1063 = (dot(vec3(_642, _643, _644), vec3(_1054 * _1046, _1054 * _1047, _1054 * _1048)) + 1.0) * 0.5;
        float _3950 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1073 = sqrt(((_1047 * _1047) + (_1046 * _1046)) + (_1048 * _1048)) / (_1043 + 9.9999997473787516355514526367188e-06);
        float _3961 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1074 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
        float _1075 = _1074 * 2.0;
        float _1079 = (1.0 - _1074) / (_1074 + 1.0);
        float _3972 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1080 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
        float _1089 = ((((1.0 - _1080) * (_1075 + 2.0)) * exp2(log2(isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0))) * (_1075 + 1.0))) + _1080) * _1043;
        float _1090 = _1011 * 0.5;
        float _1091 = _1021 * 0.5;
        float _1092 = _1031 * 0.5;
        float _1093 = dot(vec3(_1090, _1091, _1092), vec3(_1090, _1091, _1092));
        float _1098 = (_1093 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1093);
        float _1106 = (dot(vec3(_642, _643, _644), vec3(_1098 * _1090, _1098 * _1091, _1098 * _1092)) + 1.0) * 0.5;
        float _3983 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1115 = sqrt(((_1091 * _1091) + (_1090 * _1090)) + (_1092 * _1092)) / (_1044 + 9.9999997473787516355514526367188e-06);
        float _3994 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1116 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
        float _1117 = _1116 * 2.0;
        float _1121 = (1.0 - _1116) / (_1116 + 1.0);
        float _4005 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1122 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
        float _1131 = ((((1.0 - _1122) * (_1117 + 2.0)) * exp2(log2(isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0))) * (_1117 + 1.0))) + _1122) * _1044;
        float _1132 = _1012 * 0.5;
        float _1133 = _1022 * 0.5;
        float _1134 = _1032 * 0.5;
        float _1135 = dot(vec3(_1132, _1133, _1134), vec3(_1132, _1133, _1134));
        float _1140 = (_1135 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1135);
        float _1148 = (dot(vec3(_642, _643, _644), vec3(_1140 * _1132, _1140 * _1133, _1140 * _1134)) + 1.0) * 0.5;
        float _4016 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1157 = sqrt(((_1133 * _1133) + (_1132 * _1132)) + (_1134 * _1134)) / (_1045 + 9.9999997473787516355514526367188e-06);
        float _4027 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1158 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
        float _1159 = _1158 * 2.0;
        float _1163 = (1.0 - _1158) / (_1158 + 1.0);
        float _4038 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1164 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
        float _1173 = ((((1.0 - _1164) * (_1159 + 2.0)) * exp2(log2(isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0))) * (_1159 + 1.0))) + _1164) * _1045;
        _1181 = _1012;
        _1183 = _1011;
        _1184 = _1010;
        _1185 = _1022;
        _1186 = _1021;
        _1187 = _1020;
        _1188 = _1032;
        _1189 = _1031;
        _1190 = _1030;
        _1191 = _1045;
        _1192 = _1044;
        _1193 = _1043;
        _1194 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0)));
        _1195 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0)));
        _1196 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0)));
    }
    else
    {
        _1181 = _1182;
        _1183 = _1182;
        _1184 = _1182;
        _1185 = _1182;
        _1186 = _1182;
        _1187 = _1182;
        _1188 = _1182;
        _1189 = _1182;
        _1190 = _1182;
        _1191 = _1182;
        _1192 = _1182;
        _1193 = _1182;
        _1194 = 0.0;
        _1195 = 0.0;
        _1196 = 0.0;
    }
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1220 = fma(_880, cbModelParam._m0[30u].z, fma(_876, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _872));
        float _1224 = fma(_880, cbModelParam._m0[31u].z, fma(_876, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _872));
        float _1228 = fma(_880, cbModelParam._m0[32u].z, fma(_876, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _872));
        float _1251 = _872 + _642;
        float _1252 = _876 + _643;
        float _1253 = _880 + _644;
        float _1263 = fma(_1253, cbModelParam._m0[30u].z, fma(_1252, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1251)) - _1220;
        float _1264 = fma(_1253, cbModelParam._m0[31u].z, fma(_1252, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1251)) - _1224;
        float _1265 = fma(_1253, cbModelParam._m0[32u].z, fma(_1252, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1251)) - _1228;
        float _1269 = inversesqrt(dot(vec3(_1263, _1264, _1265), vec3(_1263, _1264, _1265)));
        float _1282 = ((_1269 * _1263) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1220 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1283 = ((_1269 * _1264) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1224 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1284 = ((_1269 * _1265) / cbModelParam._m0[35u].z) + ((((((_1228 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1286 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1282, _1283, _1284), 0.0);
        vec4 _1293 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1282, _1283, _1284), 0.0);
        vec4 _1300 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1282, _1283, _1284), 0.0);
        vec4 _1307 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1282, _1283, _1284), 0.0);
        float _1319 = exp2((_1286.w + (-0.5)) * 20.0) * 2.0;
        float _1320 = _1319 * (_1286.x + (-0.5));
        float _1321 = _1319 * (_1286.y + (-0.5));
        float _1322 = _1319 * (_1286.z + (-0.5));
        float _1329 = exp2((_1293.w + (-0.5)) * 20.0) * 2.0;
        float _1330 = _1329 * (_1293.x + (-0.5));
        float _1331 = _1329 * (_1293.y + (-0.5));
        float _1332 = _1329 * (_1293.z + (-0.5));
        float _1339 = exp2((_1300.w + (-0.5)) * 20.0) * 2.0;
        float _1340 = _1339 * (_1300.x + (-0.5));
        float _1341 = _1339 * (_1300.y + (-0.5));
        float _1342 = _1339 * (_1300.z + (-0.5));
        float _1349 = exp2((_1307.w + (-0.5)) * 20.0) * 2.0;
        float _1350 = _1349 * (_1307.x + (-0.5));
        float _1351 = _1349 * (_1307.y + (-0.5));
        float _1352 = _1349 * (_1307.z + (-0.5));
        float _1353 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1354 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1355 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1356 = _1320 * 0.5;
        float _1357 = _1330 * 0.5;
        float _1358 = _1340 * 0.5;
        float _1359 = dot(vec3(_1356, _1357, _1358), vec3(_1356, _1357, _1358));
        float _1364 = (_1359 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1359);
        float _1372 = (dot(vec3(_642, _643, _644), vec3(_1364 * _1356, _1364 * _1357, _1364 * _1358)) + 1.0) * 0.5;
        float _4079 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1381 = sqrt(((_1357 * _1357) + (_1356 * _1356)) + (_1358 * _1358)) / (_1353 + 9.9999997473787516355514526367188e-06);
        float _4090 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1382 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
        float _1383 = _1382 * 2.0;
        float _1387 = (1.0 - _1382) / (_1382 + 1.0);
        float _4101 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1388 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
        float _1397 = ((((1.0 - _1388) * (_1383 + 2.0)) * exp2(log2(isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0))) * (_1383 + 1.0))) + _1388) * _1353;
        float _1398 = _1321 * 0.5;
        float _1399 = _1331 * 0.5;
        float _1400 = _1341 * 0.5;
        float _1401 = dot(vec3(_1398, _1399, _1400), vec3(_1398, _1399, _1400));
        float _1406 = (_1401 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1401);
        float _1414 = (dot(vec3(_642, _643, _644), vec3(_1406 * _1398, _1406 * _1399, _1406 * _1400)) + 1.0) * 0.5;
        float _4112 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1423 = sqrt(((_1399 * _1399) + (_1398 * _1398)) + (_1400 * _1400)) / (_1354 + 9.9999997473787516355514526367188e-06);
        float _4123 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1424 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
        float _1425 = _1424 * 2.0;
        float _1429 = (1.0 - _1424) / (_1424 + 1.0);
        float _4134 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1430 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
        float _1439 = ((((1.0 - _1430) * (_1425 + 2.0)) * exp2(log2(isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0))) * (_1425 + 1.0))) + _1430) * _1354;
        float _1440 = _1322 * 0.5;
        float _1441 = _1332 * 0.5;
        float _1442 = _1342 * 0.5;
        float _1443 = dot(vec3(_1440, _1441, _1442), vec3(_1440, _1441, _1442));
        float _1448 = (_1443 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1443);
        float _1456 = (dot(vec3(_642, _643, _644), vec3(_1448 * _1440, _1448 * _1441, _1448 * _1442)) + 1.0) * 0.5;
        float _4145 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1465 = sqrt(((_1441 * _1441) + (_1440 * _1440)) + (_1442 * _1442)) / (_1355 + 9.9999997473787516355514526367188e-06);
        float _4156 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1466 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
        float _1467 = _1466 * 2.0;
        float _1471 = (1.0 - _1466) / (_1466 + 1.0);
        float _4167 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1472 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
        float _1481 = ((((1.0 - _1472) * (_1467 + 2.0)) * exp2(log2(isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0))) * (_1467 + 1.0))) + _1472) * _1355;
        _1489 = _1322;
        _1490 = _1321;
        _1491 = _1320;
        _1492 = _1332;
        _1493 = _1331;
        _1494 = _1330;
        _1495 = _1342;
        _1496 = _1341;
        _1497 = _1340;
        _1498 = _1355;
        _1499 = _1354;
        _1500 = _1353;
        _1501 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0)));
        _1502 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0)));
        _1503 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0)));
    }
    else
    {
        _1489 = _1182;
        _1490 = _1182;
        _1491 = _1182;
        _1492 = _1182;
        _1493 = _1182;
        _1494 = _1182;
        _1495 = _1182;
        _1496 = _1182;
        _1497 = _1182;
        _1498 = _1182;
        _1499 = _1182;
        _1500 = _1182;
        _1501 = 0.0;
        _1502 = 0.0;
        _1503 = 0.0;
    }
    float _1513 = (cbModelParam._m0[1u].x * (_1501 - _1194)) + _1194;
    float _1514 = (cbModelParam._m0[1u].x * (_1502 - _1195)) + _1195;
    float _1515 = (cbModelParam._m0[1u].x * (_1503 - _1196)) + _1196;
    float _1536 = fma(_1515, cbSceneParam._m0[89u].z, fma(_1514, cbSceneParam._m0[89u].y, _1513 * cbSceneParam._m0[89u].x));
    float _1539 = fma(_1515, cbSceneParam._m0[90u].z, fma(_1514, cbSceneParam._m0[90u].y, _1513 * cbSceneParam._m0[90u].x));
    float _1542 = fma(_1515, cbSceneParam._m0[91u].z, fma(_1514, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1513));
    float _1557 = _816 * 0.5;
    float _1558 = _817 * 0.5;
    float _1559 = _818 * 0.5;
    float _1560 = dot(vec4(_1557, _1558, _1559, 1.0), vec4(_1491, _1494, _1497, _1500));
    float _1563 = dot(vec4(_1557, _1558, _1559, 1.0), vec4(_1490, _1493, _1496, _1499));
    float _1566 = dot(vec4(_1557, _1558, _1559, 1.0), vec4(_1489, _1492, _1495, _1498));
    float _1600;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1573 = dot(vec4(_1557, _1558, _1559, 1.0), vec4(_1181, _1185, _1188, _1191));
        float _1577 = dot(vec4(_1557, _1558, _1559, 1.0), vec4(_1183, _1186, _1189, _1192));
        float _1581 = dot(vec4(_1557, _1558, _1559, 1.0), vec4(_1184, _1187, _1190, _1193));
        float _1588 = dot(vec4(cbModelParam._m0[39u]), vec4(_1557, _1558, _1559, 1.0));
        _1600 = dot(vec3(isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0)), isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0)), isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1588) ? 0.0 : (isnan(0.0) ? _1588 : max(0.0, _1588))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1600 = 1.0;
    }
    float _1611;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1602 = dot(vec4(cbModelParam._m0[40u]), vec4(_1557, _1558, _1559, 1.0));
        _1611 = dot(vec3(isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0)), isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0)), isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1602) ? 0.0 : (isnan(0.0) ? _1602 : max(0.0, _1602))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1611 = 1.0;
    }
    float _1615 = (_1611 * cbModelParam._m0[1u].x) + (_1600 * (1.0 - cbModelParam._m0[1u].x));
    float _1625 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _645);
    float _1626 = isnan(_1625) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1625 : min(cbModelParam._m0[25u].z, _1625));
    float _1708;
    float _1710;
    float _1712;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1675 = fma(_880, cbModelParam._m0[13u].z, fma(_876, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _872)) + cbModelParam._m0[13u].w;
        float _1679 = fma(_880, cbModelParam._m0[14u].z, fma(_876, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _872)) + cbModelParam._m0[14u].w;
        float _1683 = fma(_880, cbModelParam._m0[15u].z, fma(_876, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _872)) + cbModelParam._m0[15u].w;
        float _1686 = fma(_818, cbModelParam._m0[13u].z, fma(_817, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _816));
        float _1689 = fma(_818, cbModelParam._m0[14u].z, fma(_817, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _816));
        float _1692 = fma(_818, cbModelParam._m0[15u].z, fma(_817, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _816));
        float _1720;
        if (_1686 > 0.0)
        {
            _1720 = abs((1.0 - _1675) / _1686);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1686 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1675 + 1.0) / _1686);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1720 = frontier_phi_14_12_ladder;
        }
        float _1892;
        if (_1689 > 0.0)
        {
            _1892 = abs((1.0 - _1679) / _1689);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1689 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1679 + 1.0) / _1689);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1892 = frontier_phi_23_19_ladder;
        }
        float _2187;
        if (_1692 > 0.0)
        {
            _2187 = abs((1.0 - _1683) / _1692);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1692 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1683 + 1.0) / _1692);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2187 = frontier_phi_35_30_ladder;
        }
        float _2189 = isnan(_1892) ? _1720 : (isnan(_1720) ? _1892 : min(_1720, _1892));
        float _2190 = isnan(_2187) ? _2189 : (isnan(_2189) ? _2187 : min(_2189, _2187));
        float _2194 = (_2190 * _1686) + _1675;
        float _2195 = (_2190 * _1689) + _1679;
        float _2196 = (_2190 * _1692) + _1683;
        float _2197 = _2190 * 9.9999997473787516355514526367188e-05;
        float _2199 = (-1.0) - _2197;
        float _2201 = _2197 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2196 > _2201) || ((_2196 < _2199) || ((_2195 > _2201) || ((_2195 < _2199) || ((_2194 < _2199) || (_2194 > _2201))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2341 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2196, cbModelParam._m0[9u].z, fma(_2195, cbModelParam._m0[9u].y, _2194 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2196, cbModelParam._m0[10u].z, fma(_2195, cbModelParam._m0[10u].y, _2194 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2196, cbModelParam._m0[11u].z, fma(_2195, cbModelParam._m0[11u].y, _2194 * cbModelParam._m0[11u].x))), _1626);
            frontier_phi_13_35_ladder = _2341.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2341.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2341.x * cbModelParam._m0[1u].y;
        }
        _1708 = frontier_phi_13_35_ladder_2;
        _1710 = frontier_phi_13_35_ladder_1;
        _1712 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1696 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_816, _817, _818), _1626);
        _1708 = _1696.x * cbModelParam._m0[1u].y;
        _1710 = _1696.y * cbModelParam._m0[1u].y;
        _1712 = _1696.z * cbModelParam._m0[1u].y;
    }
    float _1716 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _645);
    float _1717 = isnan(_1716) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1716 : min(cbModelParam._m0[25u].w, _1716));
    float _1807;
    float _1809;
    float _1811;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1771 = fma(_880, cbModelParam._m0[21u].z, fma(_876, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _872)) + cbModelParam._m0[21u].w;
        float _1775 = fma(_880, cbModelParam._m0[22u].z, fma(_876, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _872)) + cbModelParam._m0[22u].w;
        float _1779 = fma(_880, cbModelParam._m0[23u].z, fma(_876, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _872)) + cbModelParam._m0[23u].w;
        float _1782 = fma(_818, cbModelParam._m0[21u].z, fma(_817, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _816));
        float _1785 = fma(_818, cbModelParam._m0[22u].z, fma(_817, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _816));
        float _1788 = fma(_818, cbModelParam._m0[23u].z, fma(_817, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _816));
        float _1897;
        if (_1782 > 0.0)
        {
            _1897 = abs((1.0 - _1771) / _1782);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1782 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1771 + 1.0) / _1782);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1897 = frontier_phi_25_21_ladder;
        }
        float _2214;
        if (_1785 > 0.0)
        {
            _2214 = abs((1.0 - _1775) / _1785);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1785 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1775 + 1.0) / _1785);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2214 = frontier_phi_37_32_ladder;
        }
        float _2552;
        if (_1788 > 0.0)
        {
            _2552 = abs((1.0 - _1779) / _1788);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1788 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1779 + 1.0) / _1788);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2552 = frontier_phi_47_44_ladder;
        }
        float _2554 = isnan(_2214) ? _1897 : (isnan(_1897) ? _2214 : min(_1897, _2214));
        float _2555 = isnan(_2552) ? _2554 : (isnan(_2554) ? _2552 : min(_2554, _2552));
        float _2559 = (_2555 * _1782) + _1771;
        float _2560 = (_2555 * _1785) + _1775;
        float _2561 = (_2555 * _1788) + _1779;
        float _2562 = _2555 * 9.9999997473787516355514526367188e-05;
        float _2563 = (-1.0) - _2562;
        float _2565 = _2562 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2561 > _2565) || ((_2561 < _2563) || ((_2560 > _2565) || ((_2560 < _2563) || ((_2559 < _2563) || (_2559 > _2565))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2683 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2561, cbModelParam._m0[17u].z, fma(_2560, cbModelParam._m0[17u].y, _2559 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2561, cbModelParam._m0[18u].z, fma(_2560, cbModelParam._m0[18u].y, _2559 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2561, cbModelParam._m0[19u].z, fma(_2560, cbModelParam._m0[19u].y, _2559 * cbModelParam._m0[19u].x))), _1717);
            frontier_phi_22_47_ladder = _2683.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2683.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2683.x * cbModelParam._m0[1u].z;
        }
        _1807 = frontier_phi_22_47_ladder_2;
        _1809 = frontier_phi_22_47_ladder_1;
        _1811 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1791 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_816, _817, _818), _1717);
        _1807 = _1791.x * cbModelParam._m0[1u].z;
        _1809 = _1791.y * cbModelParam._m0[1u].z;
        _1811 = _1791.z * cbModelParam._m0[1u].z;
    }
    float _1824 = (((_843 * _792) + _844) * _808) * ((cbModelParam._m0[1u].w * (_1807 - _1708)) + _1708);
    float _1826 = (((_843 * _794) + _844) * _808) * ((cbModelParam._m0[1u].w * (_1809 - _1710)) + _1710);
    float _1828 = (((_843 * _795) + _844) * _808) * ((cbModelParam._m0[1u].w * (_1811 - _1712)) + _1712);
    float _1831 = fma(_1828, cbSceneParam._m0[89u].z, fma(_1826, cbSceneParam._m0[89u].y, _1824 * cbSceneParam._m0[89u].x));
    float _1834 = fma(_1828, cbSceneParam._m0[90u].z, fma(_1826, cbSceneParam._m0[90u].y, _1824 * cbSceneParam._m0[90u].x));
    float _1837 = fma(_1828, cbSceneParam._m0[91u].z, fma(_1826, cbSceneParam._m0[91u].y, _1824 * cbSceneParam._m0[91u].x));
    float _1871 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1875 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1879 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1883 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1884 = _1871 / _1883;
    float _1885 = _1875 / _1883;
    float _1886 = _1879 / _1883;
    float _2033;
    float _2034;
    float _2035;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1913 = ((uint(_1886 > cbSceneParam._m0[59u].y) + uint(_1886 > cbSceneParam._m0[59u].x)) + uint(_1886 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1914 = _1913 + 43u;
        uint _1922 = _1913 + 44u;
        uint _1930 = _1913 + 45u;
        uint _1938 = _1913 + 46u;
        float _1949 = fma(_1883, cbSceneParam._m0[_1914].w, fma(_1879, cbSceneParam._m0[_1914].z, fma(_1875, cbSceneParam._m0[_1914].y, _1871 * cbSceneParam._m0[_1914].x)));
        float _1953 = fma(_1883, cbSceneParam._m0[_1922].w, fma(_1879, cbSceneParam._m0[_1922].z, fma(_1875, cbSceneParam._m0[_1922].y, _1871 * cbSceneParam._m0[_1922].x)));
        float _1961 = fma(_1883, cbSceneParam._m0[_1938].w, fma(_1879, cbSceneParam._m0[_1938].z, fma(_1875, cbSceneParam._m0[_1938].y, _1871 * cbSceneParam._m0[_1938].x)));
        float _1966 = cbSceneParam._m0[33u].z * _1961;
        float _1968 = cbSceneParam._m0[33u].w * _1961;
        float _1971 = fma(_1883, cbSceneParam._m0[_1930].w, fma(_1879, cbSceneParam._m0[_1930].z, fma(_1875, cbSceneParam._m0[_1930].y, _1871 * cbSceneParam._m0[_1930].x))) / _1961;
        float _2019 = (cbSceneParam._m0[33u].x - sqrt(((_1885 * _1885) + (_1884 * _1884)) + (_1886 * _1886))) * cbSceneParam._m0[33u].y;
        float _4293 = isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0));
        float _2026 = (isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1966 + _1949) / _1961, (_1968 + _1953) / _1961), _1971), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1968 + _1949) / _1961, (_1953 - _1966) / _1961), _1971), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1949 - _1966) / _1961, (_1953 - _1968) / _1961), _1971), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1949 - _1968) / _1961, (_1966 + _1953) / _1961), _1971), 0.0)).x), vec4(0.25)));
        _2033 = 1.0 - (_2026 * cbSceneParam._m0[34u].x);
        _2034 = 1.0 - (_2026 * cbSceneParam._m0[34u].y);
        _2035 = 1.0 - (_2026 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2033 = 1.0;
        _2034 = 1.0;
        _2035 = 1.0;
    }
    float _2099;
    float _2101;
    float _2103;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2087 = fma(_1883, cbSceneParam._m0[63u].w, fma(_1879, cbSceneParam._m0[63u].z, fma(_1875, cbSceneParam._m0[63u].y, _1871 * cbSceneParam._m0[63u].x)));
        float _2088 = fma(_1883, cbSceneParam._m0[60u].w, fma(_1879, cbSceneParam._m0[60u].z, fma(_1875, cbSceneParam._m0[60u].y, _1871 * cbSceneParam._m0[60u].x))) / _2087;
        float _2089 = fma(_1883, cbSceneParam._m0[61u].w, fma(_1879, cbSceneParam._m0[61u].z, fma(_1875, cbSceneParam._m0[61u].y, _1871 * cbSceneParam._m0[61u].x))) / _2087;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2088 >= cbSceneParam._m0[64u].x) && (_2089 >= cbSceneParam._m0[64u].y)) && (_2088 <= cbSceneParam._m0[64u].z)) && (_2089 <= cbSceneParam._m0[64u].w))
        {
            float _2227 = fma(_1883, cbSceneParam._m0[62u].w, fma(_1879, cbSceneParam._m0[62u].z, fma(_1875, cbSceneParam._m0[62u].y, _1871 * cbSceneParam._m0[62u].x))) / _2087;
            float _2231 = isnan(cbSceneParam._m0[41u].w) ? _2227 : (isnan(_2227) ? cbSceneParam._m0[41u].w : max(_2227, cbSceneParam._m0[41u].w));
            float _2274 = (cbSceneParam._m0[33u].x - sqrt(((_1885 * _1885) + (_1884 * _1884)) + (_1886 * _1886))) * cbSceneParam._m0[33u].y;
            float _4309 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
            float _2281 = (isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2088, cbSceneParam._m0[33u].w + _2089), _2231), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2088, _2089 - cbSceneParam._m0[33u].z), _2231), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2088 - cbSceneParam._m0[33u].z, _2089 - cbSceneParam._m0[33u].w), _2231), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2088 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2089), _2231), 0.0)).x), vec4(0.25)));
            float _2285 = 1.0 - (_2281 * cbSceneParam._m0[34u].x);
            float _2286 = 1.0 - (_2281 * cbSceneParam._m0[34u].y);
            float _2287 = 1.0 - (_2281 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2287) ? _2035 : (isnan(_2035) ? _2287 : min(_2035, _2287));
            frontier_phi_34_33_ladder_1 = isnan(_2286) ? _2034 : (isnan(_2034) ? _2286 : min(_2034, _2286));
            frontier_phi_34_33_ladder_2 = isnan(_2285) ? _2033 : (isnan(_2033) ? _2285 : min(_2033, _2285));
        }
        else
        {
            frontier_phi_34_33_ladder = _2035;
            frontier_phi_34_33_ladder_1 = _2034;
            frontier_phi_34_33_ladder_2 = _2033;
        }
        _2099 = frontier_phi_34_33_ladder_2;
        _2101 = frontier_phi_34_33_ladder_1;
        _2103 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2099 = _2033;
        _2101 = _2034;
        _2103 = _2035;
    }
    uvec4 _2108 = floatBitsToUint(cbInstanceData._m0[_240 + 5u]);
    uint _2110 = _2108.x * 14u;
    uint _2111 = _2110 + 13u;
    float _2118 = _808 + (-1.0);
    float _2123 = (cbLight._m0[_2111].x * _2118) + 1.0;
    float _2124 = (cbLight._m0[_2111].y * _2118) + 1.0;
    float _2125 = (cbLight._m0[_2111].z * _2118) + 1.0;
    float _2126 = (cbLight._m0[_2111].w * _2118) + 1.0;
    uint _2127 = _2110 + 5u;
    float _2133 = isnan(1.0) ? _2124 : (isnan(_2124) ? 1.0 : min(_2124, 1.0));
    uint _2137 = _2110 + 4u;
    float _2146 = isnan(1.0) ? _2123 : (isnan(_2123) ? 1.0 : min(_2123, 1.0));
    uint _2150 = _2110 | 1u;
    float _2161 = dot(vec3(cbLight._m0[_2110].xyz), vec3(_642, _643, _644));
    float _2164 = dot(vec3(cbLight._m0[_2150].xyz), vec3(_642, _643, _644));
    float _4345 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
    float _4356 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
    float _2169 = (isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0))) * 0.3183098733425140380859375;
    float _2171 = (isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0))) * 0.3183098733425140380859375;
    float _2178 = ((cbLight._m0[_2127].x * _2133) * _2171) + (((cbLight._m0[_2137].x * _2099) * _2146) * _2169);
    float _2179 = ((_2133 * cbLight._m0[_2127].y) * _2171) + (((cbLight._m0[_2137].y * _2101) * _2146) * _2169);
    float _2180 = ((_2133 * cbLight._m0[_2127].z) * _2171) + (((cbLight._m0[_2137].z * _2103) * _2146) * _2169);
    uvec4 _2184 = floatBitsToUint(cbLight._m0[_2110 + 12u]);
    bool _2186 = _2184.x == 0u;
    float _2288;
    float _2290;
    float _2292;
    if (_2186)
    {
        _2288 = _2178;
        _2290 = _2179;
        _2292 = _2180;
    }
    else
    {
        uint _2296 = _2110 + 6u;
        float _2312 = (dot(vec3(cbLight._m0[_2110 + 2u].xyz), vec3(_642, _643, _644)) * 0.5) + 0.5;
        float _2313 = _2312 * _2312;
        float _4367 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
        float _2314 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
        float _2315 = isnan(1.0) ? _2125 : (isnan(_2125) ? 1.0 : min(_2125, 1.0));
        _2288 = (((cbLight._m0[_2296].x * 0.3183098733425140380859375) * _2314) * _2315) + _2178;
        _2290 = (((cbLight._m0[_2296].y * 0.3183098733425140380859375) * _2314) * _2315) + _2179;
        _2292 = (((cbLight._m0[_2296].z * 0.3183098733425140380859375) * _2314) * _2315) + _2180;
    }
    bool _2295 = _2184.y == 0u;
    float _2350;
    float _2352;
    float _2354;
    if (_2295)
    {
        _2350 = _2288;
        _2352 = _2290;
        _2354 = _2292;
    }
    else
    {
        uint _2523 = _2110 + 7u;
        float _2539 = (dot(vec3(cbLight._m0[_2110 + 3u].xyz), vec3(_642, _643, _644)) * 0.5) + 0.5;
        float _2540 = _2539 * _2539;
        float _4383 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
        float _2541 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
        float _2542 = isnan(1.0) ? _2126 : (isnan(_2126) ? 1.0 : min(_2126, 1.0));
        _2350 = (((cbLight._m0[_2523].x * 0.3183098733425140380859375) * _2541) * _2542) + _2288;
        _2352 = (((cbLight._m0[_2523].y * 0.3183098733425140380859375) * _2541) * _2542) + _2290;
        _2354 = (((cbLight._m0[_2523].z * 0.3183098733425140380859375) * _2541) * _2542) + _2292;
    }
    uint _2357 = _2110 + 8u;
    float _2370 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2110].w)) * _645) * 0.949999988079071044921875);
    float _2371 = _2370 * _2370;
    float _2372 = cbLight._m0[_2110].x + _722;
    float _2373 = cbLight._m0[_2110].y + _723;
    float _2374 = cbLight._m0[_2110].z + _724;
    float _2378 = inversesqrt(dot(vec3(_2372, _2373, _2374), vec3(_2372, _2373, _2374)));
    float _2379 = _2378 * _2372;
    float _2380 = _2378 * _2373;
    float _2381 = _2378 * _2374;
    float _2382 = dot(vec3(_642, _643, _644), vec3(cbLight._m0[_2110].xyz));
    float _4399 = isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0));
    float _2385 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
    float _4410 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
    float _2386 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
    float _2387 = dot(vec3(_642, _643, _644), vec3(_2379, _2380, _2381));
    float _4421 = isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : max(_2387, 0.0));
    float _2390 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
    float _2391 = dot(vec3(cbLight._m0[_2110].xyz), vec3(_2379, _2380, _2381));
    float _4432 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
    float _2395 = _2371 * _2371;
    float _2399 = ((_2390 * _2390) * (_2395 + (-1.0))) + 1.0;
    float _2407 = exp2(log2(1.0 - (isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0)))) * 5.0);
    float _2408 = 0.959999978542327880859375 - _789;
    float _2410 = 0.959999978542327880859375 - _790;
    float _2411 = 0.959999978542327880859375 - _791;
    float _2418 = 1.0 - _2371;
    float _2429 = (0.5 / (((_2386 * ((_2385 * _2418) + _2371)) + 9.9999999392252902907785028219223e-09) + (((_2386 * _2418) + _2371) * _2385))) * _2385;
    float _4443 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
    float _2431 = (isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0))) * (_2395 / ((_2399 * _2399) * 3.141590118408203125));
    uint _2445 = _2110 + 9u;
    float _2456 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2150].w)) * _645) * 0.949999988079071044921875);
    float _2457 = _2456 * _2456;
    float _2458 = cbLight._m0[_2150].x + _722;
    float _2459 = cbLight._m0[_2150].y + _723;
    float _2460 = cbLight._m0[_2150].z + _724;
    float _2464 = inversesqrt(dot(vec3(_2458, _2459, _2460), vec3(_2458, _2459, _2460)));
    float _2465 = _2464 * _2458;
    float _2466 = _2464 * _2459;
    float _2467 = _2464 * _2460;
    float _2468 = dot(vec3(_642, _643, _644), vec3(cbLight._m0[_2150].xyz));
    float _4454 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
    float _2471 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
    float _2472 = dot(vec3(_642, _643, _644), vec3(_2465, _2466, _2467));
    float _4465 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
    float _2475 = isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0));
    float _2476 = dot(vec3(cbLight._m0[_2150].xyz), vec3(_2465, _2466, _2467));
    float _4476 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
    float _2480 = _2457 * _2457;
    float _2484 = ((_2475 * _2475) * (_2480 + (-1.0))) + 1.0;
    float _2491 = exp2(log2(1.0 - (isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0)))) * 5.0);
    float _2498 = 1.0 - _2457;
    float _2508 = (0.5 / (((_2386 * ((_2471 * _2498) + _2457)) + 9.9999999392252902907785028219223e-09) + (((_2386 * _2498) + _2457) * _2471))) * _2471;
    float _4487 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
    float _2510 = (isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0))) * (_2480 / ((_2484 * _2484) * 3.141590118408203125));
    float _2520 = (((((_2491 * _2408) + _792) * cbLight._m0[_2445].x) * _2510) * _2133) + ((((cbLight._m0[_2357].x * _2099) * ((_2407 * _2408) + _792)) * _2431) * _2146);
    float _2521 = (((((_2491 * _2410) + _794) * cbLight._m0[_2445].y) * _2510) * _2133) + ((((cbLight._m0[_2357].y * _2101) * ((_2407 * _2410) + _794)) * _2431) * _2146);
    float _2522 = (((((_2491 * _2411) + _795) * cbLight._m0[_2445].z) * _2510) * _2133) + ((((cbLight._m0[_2357].z * _2103) * ((_2407 * _2411) + _795)) * _2431) * _2146);
    float _2578;
    float _2580;
    float _2582;
    if (_2186)
    {
        _2578 = _2520;
        _2580 = _2521;
        _2582 = _2522;
    }
    else
    {
        uint _2584 = _2110 + 2u;
        uint _2588 = _2110 + 10u;
        float _2602 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2584].w)) * _645) * 0.949999988079071044921875);
        float _2603 = _2602 * _2602;
        float _2604 = cbLight._m0[_2584].x + _722;
        float _2605 = cbLight._m0[_2584].y + _723;
        float _2606 = cbLight._m0[_2584].z + _724;
        float _2610 = inversesqrt(dot(vec3(_2604, _2605, _2606), vec3(_2604, _2605, _2606)));
        float _2611 = _2610 * _2604;
        float _2612 = _2610 * _2605;
        float _2613 = _2610 * _2606;
        float _2614 = dot(vec3(_642, _643, _644), vec3(cbLight._m0[_2584].xyz));
        float _4498 = isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : max(_2614, 0.0));
        float _2617 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
        float _2618 = dot(vec3(_642, _643, _644), vec3(_2611, _2612, _2613));
        float _4509 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0));
        float _2621 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
        float _2622 = dot(vec3(cbLight._m0[_2584].xyz), vec3(_2611, _2612, _2613));
        float _4520 = isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : max(_2622, 0.0));
        float _2626 = _2603 * _2603;
        float _2630 = ((_2621 * _2621) * (_2626 + (-1.0))) + 1.0;
        float _2637 = exp2(log2(1.0 - (isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0)))) * 5.0);
        float _2644 = 1.0 - _2603;
        float _2654 = (0.5 / (((_2386 * ((_2617 * _2644) + _2603)) + 9.9999999392252902907785028219223e-09) + (((_2386 * _2644) + _2603) * _2617))) * _2617;
        float _4531 = isnan(0.0) ? _2654 : (isnan(_2654) ? 0.0 : max(_2654, 0.0));
        float _2656 = (isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0))) * (_2626 / ((_2630 * _2630) * 3.141590118408203125));
        float _2657 = isnan(1.0) ? _2125 : (isnan(_2125) ? 1.0 : min(_2125, 1.0));
        _2578 = (((((_2637 * _2408) + _792) * cbLight._m0[_2588].x) * _2656) * _2657) + _2520;
        _2580 = (((((_2637 * _2410) + _794) * cbLight._m0[_2588].y) * _2656) * _2657) + _2521;
        _2582 = (((((_2637 * _2411) + _795) * cbLight._m0[_2588].z) * _2656) * _2657) + _2522;
    }
    float _2688;
    float _2690;
    float _2692;
    if (_2295)
    {
        _2688 = _2578;
        _2690 = _2580;
        _2692 = _2582;
    }
    else
    {
        uint _2699 = _2110 + 3u;
        uint _2703 = _2110 + 11u;
        float _2717 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2699].w)) * _645) * 0.949999988079071044921875);
        float _2718 = _2717 * _2717;
        float _2719 = cbLight._m0[_2699].x + _722;
        float _2720 = cbLight._m0[_2699].y + _723;
        float _2721 = cbLight._m0[_2699].z + _724;
        float _2725 = inversesqrt(dot(vec3(_2719, _2720, _2721), vec3(_2719, _2720, _2721)));
        float _2726 = _2725 * _2719;
        float _2727 = _2725 * _2720;
        float _2728 = _2725 * _2721;
        float _2729 = dot(vec3(_642, _643, _644), vec3(cbLight._m0[_2699].xyz));
        float _4547 = isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : max(_2729, 0.0));
        float _2732 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
        float _2733 = dot(vec3(_642, _643, _644), vec3(_2726, _2727, _2728));
        float _4558 = isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : max(_2733, 0.0));
        float _2736 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
        float _2737 = dot(vec3(cbLight._m0[_2699].xyz), vec3(_2726, _2727, _2728));
        float _4569 = isnan(0.0) ? _2737 : (isnan(_2737) ? 0.0 : max(_2737, 0.0));
        float _2741 = _2718 * _2718;
        float _2745 = ((_2736 * _2736) * (_2741 + (-1.0))) + 1.0;
        float _2752 = exp2(log2(1.0 - (isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0)))) * 5.0);
        float _2759 = 1.0 - _2718;
        float _2769 = (0.5 / (((_2386 * ((_2732 * _2759) + _2718)) + 9.9999999392252902907785028219223e-09) + (((_2386 * _2759) + _2718) * _2732))) * _2732;
        float _4580 = isnan(0.0) ? _2769 : (isnan(_2769) ? 0.0 : max(_2769, 0.0));
        float _2771 = (isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0))) * (_2741 / ((_2745 * _2745) * 3.141590118408203125));
        float _2772 = isnan(1.0) ? _2126 : (isnan(_2126) ? 1.0 : min(_2126, 1.0));
        _2688 = (((((_2752 * _2408) + _792) * cbLight._m0[_2703].x) * _2771) * _2772) + _2578;
        _2690 = (((((_2752 * _2410) + _794) * cbLight._m0[_2703].y) * _2771) * _2772) + _2580;
        _2692 = (((((_2752 * _2411) + _795) * cbLight._m0[_2703].z) * _2771) * _2772) + _2582;
    }
    float _2838;
    float _2840;
    float _2842;
    float _2844;
    float _2846;
    float _2848;
    if (_2108.y == 0u)
    {
        uvec4 _2793 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2794 = _2793.x;
        uint _2805 = uint((float(_2793.y) * floor(float(uint(cbSceneParam._m0[85u].y * _731) / _2794))) + floor(float(uint(cbSceneParam._m0[85u].x * _730) / _2794)));
        float _2815 = (log2(_1886 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2816 = isnan(0.0) ? _2815 : (isnan(_2815) ? 0.0 : max(_2815, 0.0));
        uint _2819 = uint(isnan(14.0) ? _2816 : (isnan(_2816) ? 14.0 : min(_2816, 14.0)));
        uvec4 _2824 = texelFetch(g_lightClusterGridBuffer, int(((_2819 << 2u) + (_2805 << 6u)) >> 2u));
        uint _2825 = _2824.x;
        uint _2826 = _2793.z;
        float _2905;
        float _2907;
        float _2909;
        float _2911;
        float _2913;
        float _2915;
        if (((((1u << ((_2826 >> 4u) & 15u)) + 4294967295u) & _2825) == 0u) || ((_2826 & 240u) == 0u))
        {
            _2905 = 0.0;
            _2907 = 0.0;
            _2909 = 0.0;
            _2911 = 0.0;
            _2913 = 0.0;
            _2915 = 0.0;
        }
        else
        {
            float _2906;
            float _2908;
            float _2910;
            float _2912;
            float _2914;
            float _2916;
            float _3050 = 0.0;
            float _3051 = 0.0;
            float _3052 = 0.0;
            float _3053 = 0.0;
            float _3054 = 0.0;
            float _3055 = 0.0;
            uint _3056 = 0u;
            uint _3065;
            bool _3066;
            for (;;)
            {
                _3065 = texelFetch(g_lightClassification, int((((_2819 << 5u) + (_2805 << 9u)) + (_3056 << 2u)) >> 2u)).x;
                _3066 = _3065 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3066)
                {
                    frontier_phi_66_pred = _3055;
                    frontier_phi_66_pred_1 = _3054;
                    frontier_phi_66_pred_2 = _3053;
                    frontier_phi_66_pred_3 = _3052;
                    frontier_phi_66_pred_4 = _3051;
                    frontier_phi_66_pred_5 = _3050;
                }
                else
                {
                    float _3174;
                    float _3175;
                    float _3176;
                    float _3177;
                    float _3178;
                    float _3179;
                    uint _3180;
                    _3174 = _3050;
                    _3175 = _3051;
                    _3176 = _3052;
                    _3177 = _3053;
                    _3178 = _3054;
                    _3179 = _3055;
                    _3180 = _3065;
                    float _3106;
                    float _3107;
                    float _3108;
                    float _3109;
                    float _3110;
                    float _3111;
                    for (;;)
                    {
                        uint _3184 = uint(findLSB(_3180)) + (_3056 << 5u);
                        uint _3181 = (_3180 + 4294967295u) & _3180;
                        uint _3186 = _3184 * 48u;
                        vec4 _3200 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3186)).x, texelFetch(g_PointLightRenderingBuffer, int(_3186 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3186 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3186 + 3u)).x));
                        uint _3206 = (_3184 * 48u) + 4u;
                        vec4 _3219 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3206)).x, texelFetch(g_PointLightRenderingBuffer, int(_3206 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3206 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3206 + 3u)).x));
                        uint _3225 = (_3184 * 48u) + 8u;
                        vec3 _3236 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3225)).x, texelFetch(g_PointLightRenderingBuffer, int(_3225 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3225 + 2u)).x));
                        float _3240 = _3200.x - _1884;
                        float _3241 = _3200.y - _1885;
                        float _3242 = _3200.z - _1886;
                        float _3243 = dot(vec3(_3240, _3241, _3242), vec3(_3240, _3241, _3242));
                        float _3246 = inversesqrt(_3243);
                        float _3247 = _3246 * _3240;
                        float _3248 = _3246 * _3241;
                        float _3249 = _3246 * _3242;
                        float _3250 = dot(vec3(_749, _752, _755), vec3(_3247, _3248, _3249));
                        float _3255 = 1.0 - (_3243 * _3200.w);
                        float _4606 = isnan(0.0) ? _3255 : (isnan(_3255) ? 0.0 : max(_3255, 0.0));
                        float _3256 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
                        float _3257 = sqrt(_3243) * _3219.w;
                        float _3260 = 1.39999997615814208984375 / (_3257 + 1.39999997615814208984375);
                        float _3261 = _3260 * _3260;
                        float _3264 = ((1.0 - _3261) * _3250) + _3261;
                        float _3267 = _3257 * _3257;
                        float _3271 = ((isnan(0.0) ? _3264 : (isnan(_3264) ? 0.0 : max(_3264, 0.0))) * _3256) / ((_3267 * 0.699999988079071044921875) + 1.0);
                        float _3275 = (-0.0) - _1884;
                        float _3276 = (-0.0) - _1885;
                        float _3277 = (-0.0) - _1886;
                        float _3281 = inversesqrt(dot(vec3(_3275, _3276, _3277), vec3(_3275, _3276, _3277)));
                        float _3282 = _3281 * _3275;
                        float _3283 = _3281 * _3276;
                        float _3284 = _3281 * _3277;
                        float _3291 = exp2(log2(1.0 / ((_3267 * 3.5) + 5.0)) * 0.25);
                        float _3292 = 1.0 - _824;
                        float _3299 = sqrt(1.0 - ((1.0 - (_3292 * _3292)) * (1.0 - (_3291 * _3291))));
                        float _3300 = _3299 * _3299;
                        float _3301 = _3300 * _3300;
                        float _3302 = _3282 + _3247;
                        float _3303 = _3283 + _3248;
                        float _3304 = _3284 + _3249;
                        float _3308 = inversesqrt(dot(vec3(_3302, _3303, _3304), vec3(_3302, _3303, _3304)));
                        float _3312 = dot(vec3(_749, _752, _755), vec3(_3282, _3283, _3284));
                        float _4622 = isnan(0.0) ? _3312 : (isnan(_3312) ? 0.0 : max(_3312, 0.0));
                        float _3315 = isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0));
                        float _3316 = dot(vec3(_749, _752, _755), vec3(_3308 * _3302, _3308 * _3303, _3308 * _3304));
                        float _4633 = isnan(0.0) ? _3316 : (isnan(_3316) ? 0.0 : max(_3316, 0.0));
                        float _3319 = isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0));
                        float _3323 = ((_3319 * _3319) * (_3301 + (-1.0))) + 1.0;
                        float _3324 = _3260 * _3300;
                        float _3325 = _3324 * _3324;
                        float _3328 = ((1.0 - _3325) * _3250) + _3325;
                        float _4644 = isnan(0.0) ? _3328 : (isnan(_3328) ? 0.0 : max(_3328, 0.0));
                        float _3329 = isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0));
                        float _3330 = 1.0 - _3300;
                        float _3340 = (0.5 / (((_3329 * ((_3315 * _3330) + _3300)) + 9.9999999392252902907785028219223e-09) + (((_3329 * _3330) + _3300) * _3315))) * _3329;
                        float _4655 = isnan(0.0) ? _3340 : (isnan(_3340) ? 0.0 : max(_3340, 0.0));
                        float _3351 = (((_3301 * 3.1415927410125732421875) * (isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0)))) / ((_3323 * _3323) * ((_3267 * 2.1991131305694580078125) + 3.141590118408203125))) * _3256;
                        _3109 = (_3271 * _3219.x) + _3177;
                        _3110 = (_3271 * _3219.y) + _3178;
                        _3111 = (_3271 * _3219.z) + _3179;
                        _3106 = (_3351 * _3236.x) + _3174;
                        _3107 = (_3351 * _3236.y) + _3175;
                        _3108 = (_3351 * _3236.z) + _3176;
                        if (_3181 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3174 = _3106;
                            _3175 = _3107;
                            _3176 = _3108;
                            _3177 = _3109;
                            _3178 = _3110;
                            _3179 = _3111;
                            _3180 = _3181;
                        }
                    }
                    frontier_phi_66_pred = _3111;
                    frontier_phi_66_pred_1 = _3110;
                    frontier_phi_66_pred_2 = _3109;
                    frontier_phi_66_pred_3 = _3108;
                    frontier_phi_66_pred_4 = _3107;
                    frontier_phi_66_pred_5 = _3106;
                }
                _2916 = frontier_phi_66_pred;
                _2914 = frontier_phi_66_pred_1;
                _2912 = frontier_phi_66_pred_2;
                _2910 = frontier_phi_66_pred_3;
                _2908 = frontier_phi_66_pred_4;
                _2906 = frontier_phi_66_pred_5;
                uint _3057 = _3056 + 1u;
                if (_3057 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3050 = _2906;
                    _3051 = _2908;
                    _3052 = _2910;
                    _3053 = _2912;
                    _3054 = _2914;
                    _3055 = _2916;
                    _3056 = _3057;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2905 = _2906;
            _2907 = _2908;
            _2909 = _2910;
            _2911 = _2912;
            _2913 = _2914;
            _2915 = _2916;
        }
        uvec4 _2919 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2920 = _2919.z;
        uint _2922 = (_2920 >> 8u) & 15u;
        float _3018;
        float _3020;
        float _3022;
        float _3024;
        float _3026;
        float _3028;
        if (((4294967295u << _2922) & _2825) == 0u)
        {
            _3018 = _2905;
            _3020 = _2907;
            _3022 = _2909;
            _3024 = _2911;
            _3026 = _2913;
            _3028 = _2915;
        }
        else
        {
            float _3043 = inversesqrt(dot(vec3(_1884, _1885, _1886), vec3(_1884, _1885, _1886)));
            float _3044 = _3043 * _1884;
            float _3045 = _3043 * _1885;
            float _3046 = _3043 * _1886;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2922 < ((_2920 >> 12u) & 15u))
            {
                float _3019;
                float _3021;
                float _3023;
                float _3025;
                float _3027;
                float _3029;
                float _3157 = _2905;
                float _3158 = _2907;
                float _3159 = _2909;
                float _3160 = _2911;
                float _3161 = _2913;
                float _3162 = _2915;
                uint _3163 = _2922;
                uint _3172;
                bool _3173;
                for (;;)
                {
                    _3172 = texelFetch(g_lightClassification, int((((_2819 << 5u) + (_2805 << 9u)) + (_3163 << 2u)) >> 2u)).x;
                    _3173 = _3172 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3173)
                    {
                        frontier_phi_72_pred = _3162;
                        frontier_phi_72_pred_1 = _3161;
                        frontier_phi_72_pred_2 = _3160;
                        frontier_phi_72_pred_3 = _3159;
                        frontier_phi_72_pred_4 = _3158;
                        frontier_phi_72_pred_5 = _3157;
                    }
                    else
                    {
                        float _3356;
                        float _3357;
                        float _3358;
                        float _3359;
                        float _3360;
                        float _3361;
                        float _3649;
                        float _3650;
                        float _3651;
                        float _3652;
                        float _3653;
                        float _3654;
                        float _3369 = _3157;
                        float _3370 = _3158;
                        float _3371 = _3159;
                        float _3372 = _3160;
                        float _3373 = _3161;
                        float _3374 = _3162;
                        uint _3375 = _3172;
                        uint _3376;
                        vec4 _3401;
                        float _3402;
                        vec4 _3417;
                        vec3 _3429;
                        vec4 _3444;
                        vec4 _3459;
                        float _3505;
                        bool _3506;
                        for (;;)
                        {
                            uint _3386 = ((_3163 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3375));
                            _3376 = (_3375 + 4294967295u) & _3375;
                            uint _3388 = _3386 * 40u;
                            _3401 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3388)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3388 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3388 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3388 + 3u)).x));
                            _3402 = _3401.w;
                            uint _3404 = (_3386 * 40u) + 4u;
                            _3417 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3404)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 3u)).x));
                            uint _3419 = (_3386 * 40u) + 8u;
                            _3429 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3419)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 2u)).x));
                            uint _3431 = (_3386 * 40u) + 16u;
                            _3444 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3431)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3431 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3431 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3431 + 3u)).x));
                            uint _3446 = (_3386 * 40u) + 20u;
                            _3459 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3446)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 3u)).x));
                            uint _3461 = (_3386 * 40u) + 24u;
                            vec4 _3474 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3461)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3461 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3461 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3461 + 3u)).x));
                            uint _3480 = (_3386 * 40u) + 28u;
                            vec4 _3493 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3480)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3480 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3480 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3480 + 3u)).x));
                            _3505 = fma(_1886, _3493.z, fma(_1885, _3493.y, _3493.x * _1884)) + _3493.w;
                            _3506 = !((fma(_1886, _3474.z, fma(_1885, _3474.y, _3474.x * _1884)) + _3474.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3506)
                            {
                                float _3533 = _3401.x - _1884;
                                float _3534 = _3401.y - _1885;
                                float _3535 = _3401.z - _1886;
                                float _3536 = dot(vec3(_3533, _3534, _3535), vec3(_3533, _3534, _3535));
                                float _3539 = inversesqrt(_3536);
                                float _3540 = _3539 * _3533;
                                float _3541 = _3539 * _3534;
                                float _3542 = _3539 * _3535;
                                float _3546 = 1.0 - (_3536 / (_3402 * _3402));
                                float _4666 = isnan(0.0) ? _3546 : (isnan(_3546) ? 0.0 : max(_3546, 0.0));
                                float _3547 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
                                float _3551 = sqrt(_3536) * _3417.w;
                                float _3553 = 1.39999997615814208984375 / (_3551 + 1.39999997615814208984375);
                                float _3554 = _3553 * _3553;
                                float _3557 = ((1.0 - _3554) * dot(vec3(_3540, _3541, _3542), vec3(_749, _752, _755))) + _3554;
                                float _3560 = _3551 * _3551;
                                float _3564 = (fma(_1886, _3444.z, fma(_1885, _3444.y, _3444.x * _1884)) + _3444.w) / _3505;
                                float _3565 = (fma(_1886, _3459.z, fma(_1885, _3459.y, _3459.x * _1884)) + _3459.w) / _3505;
                                float _3569 = 1.0 - dot(vec2(_3564, _3565), vec2(_3564, _3565));
                                float _4682 = isnan(0.0) ? _3569 : (isnan(_3569) ? 0.0 : max(_3569, 0.0));
                                float _3570 = isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0));
                                float _3571 = _3570 * (((isnan(0.0) ? _3557 : (isnan(_3557) ? 0.0 : max(_3557, 0.0))) * _3547) / ((_3560 * 0.699999988079071044921875) + 1.0));
                                float _3583 = exp2(log2(1.0 / ((_3560 * 3.5) + 5.0)) * 0.25);
                                float _3584 = 1.0 - _824;
                                float _3591 = sqrt(1.0 - ((1.0 - (_3584 * _3584)) * (1.0 - (_3583 * _3583))));
                                float _3592 = _3591 * _3591;
                                float _3593 = _3592 * _3592;
                                float _3594 = _3540 - _3044;
                                float _3595 = _3541 - _3045;
                                float _3596 = _3542 - _3046;
                                float _3600 = inversesqrt(dot(vec3(_3594, _3595, _3596), vec3(_3594, _3595, _3596)));
                                float _3604 = dot(vec3(_749, _752, _755), vec3((-0.0) - _3044, (-0.0) - _3045, (-0.0) - _3046));
                                float _4693 = isnan(0.0) ? _3604 : (isnan(_3604) ? 0.0 : max(_3604, 0.0));
                                float _3607 = isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0));
                                float _3608 = dot(vec3(_749, _752, _755), vec3(_3600 * _3594, _3600 * _3595, _3600 * _3596));
                                float _4704 = isnan(0.0) ? _3608 : (isnan(_3608) ? 0.0 : max(_3608, 0.0));
                                float _3611 = isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0));
                                float _3615 = ((_3611 * _3611) * (_3593 + (-1.0))) + 1.0;
                                float _3616 = _3553 * _3592;
                                float _3617 = _3616 * _3616;
                                float _3623 = ((1.0 - _3617) * dot(vec3(_749, _752, _755), vec3(_3540, _3541, _3542))) + _3617;
                                float _4715 = isnan(0.0) ? _3623 : (isnan(_3623) ? 0.0 : max(_3623, 0.0));
                                float _3624 = isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0));
                                float _3625 = 1.0 - _3592;
                                float _3635 = (0.5 / (((_3624 * ((_3607 * _3625) + _3592)) + 9.9999999392252902907785028219223e-09) + (((_3624 * _3625) + _3592) * _3607))) * _3624;
                                float _4726 = isnan(0.0) ? _3635 : (isnan(_3635) ? 0.0 : max(_3635, 0.0));
                                float _3645 = (_3570 * _3547) * (((_3593 * 3.1415927410125732421875) * (isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0)))) / ((_3615 * _3615) * ((_3560 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3571 * _3417.y;
                                frontier_phi_78_pred_1 = _3571 * _3417.x;
                                frontier_phi_78_pred_2 = _3645 * _3429.z;
                                frontier_phi_78_pred_3 = _3645 * _3429.y;
                                frontier_phi_78_pred_4 = _3645 * _3429.x;
                                frontier_phi_78_pred_5 = _3571 * _3417.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3653 = frontier_phi_78_pred;
                            _3652 = frontier_phi_78_pred_1;
                            _3651 = frontier_phi_78_pred_2;
                            _3650 = frontier_phi_78_pred_3;
                            _3649 = frontier_phi_78_pred_4;
                            _3654 = frontier_phi_78_pred_5;
                            _3359 = _3652 + _3372;
                            _3360 = _3653 + _3373;
                            _3361 = _3654 + _3374;
                            _3356 = _3649 + _3369;
                            _3357 = _3650 + _3370;
                            _3358 = _3651 + _3371;
                            if (_3376 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3369 = _3356;
                                _3370 = _3357;
                                _3371 = _3358;
                                _3372 = _3359;
                                _3373 = _3360;
                                _3374 = _3361;
                                _3375 = _3376;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3361;
                        frontier_phi_72_pred_1 = _3360;
                        frontier_phi_72_pred_2 = _3359;
                        frontier_phi_72_pred_3 = _3358;
                        frontier_phi_72_pred_4 = _3357;
                        frontier_phi_72_pred_5 = _3356;
                    }
                    _3029 = frontier_phi_72_pred;
                    _3027 = frontier_phi_72_pred_1;
                    _3025 = frontier_phi_72_pred_2;
                    _3023 = frontier_phi_72_pred_3;
                    _3021 = frontier_phi_72_pred_4;
                    _3019 = frontier_phi_72_pred_5;
                    uint _3164 = _3163 + 1u;
                    if (_3164 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3157 = _3019;
                        _3158 = _3021;
                        _3159 = _3023;
                        _3160 = _3025;
                        _3161 = _3027;
                        _3162 = _3029;
                        _3163 = _3164;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3029;
                frontier_phi_60_61_ladder_1 = _3027;
                frontier_phi_60_61_ladder_2 = _3023;
                frontier_phi_60_61_ladder_3 = _3021;
                frontier_phi_60_61_ladder_4 = _3019;
                frontier_phi_60_61_ladder_5 = _3025;
            }
            else
            {
                frontier_phi_60_61_ladder = _2915;
                frontier_phi_60_61_ladder_1 = _2913;
                frontier_phi_60_61_ladder_2 = _2909;
                frontier_phi_60_61_ladder_3 = _2907;
                frontier_phi_60_61_ladder_4 = _2905;
                frontier_phi_60_61_ladder_5 = _2911;
            }
            _3018 = frontier_phi_60_61_ladder_4;
            _3020 = frontier_phi_60_61_ladder_3;
            _3022 = frontier_phi_60_61_ladder_2;
            _3024 = frontier_phi_60_61_ladder_5;
            _3026 = frontier_phi_60_61_ladder_1;
            _3028 = frontier_phi_60_61_ladder;
        }
        float _3033 = isnan(1.0) ? _808 : (isnan(_808) ? 1.0 : min(_808, 1.0));
        _2838 = (_3033 * _3024) + _2350;
        _2840 = (_3033 * _3026) + _2352;
        _2842 = (_3033 * _3028) + _2354;
        _2844 = ((_3018 * _792) * _3033) + _2688;
        _2846 = ((_3020 * _794) * _3033) + _2690;
        _2848 = ((_3022 * _795) * _3033) + _2692;
    }
    else
    {
        _2838 = _2350;
        _2840 = _2352;
        _2842 = _2354;
        _2844 = _2688;
        _2846 = _2690;
        _2848 = _2692;
    }
    float _4742 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _4753 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
    float _4764 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    uint _2868 = _240 + 6u;
    float _2876 = _730 / cbSceneParam._m0[86u].x;
    float _2877 = _731 / cbSceneParam._m0[86u].y;
    vec4 _2891 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2876, _2877, (log2((isnan(cbSceneParam._m0[77u].w) ? _664 : (isnan(_664) ? cbSceneParam._m0[77u].w : min(_664, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2893 = _2891.x;
    float _2894 = _2891.y;
    float _2895 = _2891.z;
    float _2896 = _2891.w;
    float _2968;
    float _2970;
    float _2972;
    float _2974;
    if (_664 > cbSceneParam._m0[78u].w)
    {
        float _2930 = isnan(_664) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _664 : min(cbSceneParam._m0[80u].w, _664));
        float _2931 = _2930 / _664;
        float _2942 = _2931 * _715;
        float _2943 = _716 * _2931;
        float _2944 = (-0.0) - _2943;
        float _2946 = _2931 * _717;
        float _2948 = (cbSceneParam._m0[77u].w * _2944) / _2930;
        float _2949 = _2948 + cbSceneParam._m0[79u].w;
        float _2950 = cbSceneParam._m0[79u].w - _2943;
        float _2956 = sqrt(((_2942 * _2942) + (_2943 * _2943)) + (_2946 * _2946));
        float _2959 = (1.0 - (cbSceneParam._m0[77u].w / _2930)) * _2956;
        float _2964 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2966 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3119;
        if (abs((_2944 - _2948) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3119 = ((((_2949 > 0.0) ? exp2(_2964 * _2949) : (2.0 - exp2(_2966 * _2949))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2959;
        }
        else
        {
            float _3079 = 1.0 / cbSceneParam._m0[80u].x;
            float _3080 = isnan(_2950) ? _2949 : (isnan(_2949) ? _2950 : max(_2949, _2950));
            float _3081 = isnan(_2950) ? _2949 : (isnan(_2949) ? _2950 : min(_2949, _2950));
            float _3090 = isnan(0.0) ? _3080 : (isnan(_3080) ? 0.0 : min(_3080, 0.0));
            float _3091 = isnan(0.0) ? _3081 : (isnan(_3081) ? 0.0 : min(_3081, 0.0));
            _3119 = ((abs(_2956 / _2944) * cbSceneParam._m0[80u].y) * ((((_3090 - _3091) * 2.0) - ((exp2(_2964 * (isnan(0.0) ? _3080 : (isnan(_3080) ? 0.0 : max(_3080, 0.0)))) - exp2(_2964 * (isnan(0.0) ? _3081 : (isnan(_3081) ? 0.0 : max(_3081, 0.0))))) * _3079)) - ((exp2(_2966 * _3090) - exp2(_2966 * _3091)) * _3079))) + (_2959 * cbSceneParam._m0[80u].z);
        }
        vec4 _3121 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2876, _2877, 1.0), 0.0);
        float _3130 = exp2((_3119 * (-1.44269502162933349609375)) * (1.0 - _3121.w));
        float _3131 = log2(_3130);
        float _3147 = log2(_2896);
        _2968 = (exp2(_3147 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3131 * cbSceneParam._m0[78u].x)) * _3121.x) / cbSceneParam._m0[78u].x)) + _2893;
        _2970 = (exp2(_3147 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3131 * cbSceneParam._m0[78u].y)) * _3121.y) / cbSceneParam._m0[78u].y)) + _2894;
        _2972 = (exp2(_3147 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3131 * cbSceneParam._m0[78u].z)) * _3121.z) / cbSceneParam._m0[78u].z)) + _2895;
        _2974 = _3130 * _2896;
    }
    else
    {
        _2968 = _2893;
        _2970 = _2894;
        _2972 = _2895;
        _2974 = _2896;
    }
    float _2986 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2987 = _2986 == 3.0;
    float _2988 = log2(_2974);
    float _2995 = exp2(_2988 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0))) * (_2838 + ((isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0))) * _808))) + ((_2844 + ((isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0))) * _1615)) * cbPerFrame._m0[3u].x));
    float _2996 = exp2(_2988 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0))) * (_2840 + ((isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0))) * _808))) + ((_2846 + ((isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0))) * _1615)) * cbPerFrame._m0[3u].x));
    float _2997 = exp2(_2988 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0))) * (_2842 + ((isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0))) * _808))) + ((_2848 + ((isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0))) * _1615)) * cbPerFrame._m0[3u].x));
    float _3006 = (_2986 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3006 * (_2987 ? _2995 : (_2995 + (cbSceneParam._m0[72u].w * _2968)));
    SV_Target.y = _3006 * (_2987 ? _2996 : (_2996 + (cbSceneParam._m0[72u].w * _2970)));
    SV_Target.z = _3006 * (_2987 ? _2997 : (_2997 + (cbSceneParam._m0[72u].w * _2972)));
    SV_Target.w = cbInstanceData._m0[_2868].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2868].w;
}


