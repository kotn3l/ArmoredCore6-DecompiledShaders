#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1016;
float _3426;
float _3427;
float _3428;
float _3429;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _203 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _204 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _205 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _211 = inversesqrt(dot(vec3(_203, _204, _205), vec3(_203, _204, _205)));
    float _218 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _225 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _239 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _241 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _242 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3438 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _3449 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _3460 = isnan(0.0) ? _242 : (isnan(_242) ? 0.0 : max(_242, 0.0));
    uint _252 = uint(roundEven(NORMAL.w)) * 13u;
    uint _257 = _252 + 1u;
    uint _261 = _252 + 2u;
    float _270 = sqrt(((cbInstanceData._m0[_257].x * cbInstanceData._m0[_257].x) + (cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x)) + (cbInstanceData._m0[_261].x * cbInstanceData._m0[_261].x));
    float _271 = _270 * TEXCOORD.z;
    float _272 = _270 * TEXCOORD.w;
    vec4 _285 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _271) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _272) + cbTextureTilingScale._m0[13u].w));
    vec4 _308 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _313 = _308.x * cbMtdParam._m0[9u].x;
    float _314 = _308.y * cbMtdParam._m0[9u].y;
    float _315 = _308.z * cbMtdParam._m0[9u].z;
    float _319 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _285.x) * _313;
    float _322 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _285.y) * _314;
    float _325 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _285.z) * _315;
    float _332 = ((_313 - _319) * (isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0)))) + _319;
    float _333 = ((_314 - _322) * (isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0)))) + _322;
    float _334 = ((_315 - _325) * (isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0)))) + _325;
    vec4 _347 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _271) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _272) + cbTextureTilingScale._m0[20u].w));
    vec4 _373 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _377 = _373.z;
    float _381 = (_373.x * 2.0) + (-1.0);
    float _382 = (_373.y * 2.0) + (-1.0);
    float _383 = dot(vec2(_381, _382), vec2(_381, _382));
    float _3471 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _388 = sqrt(1.0 - (isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0))));
    float _393 = _381 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_347.x * 2.0) + (-1.0)));
    float _394 = _382 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_347.y * 2.0) + (-1.0)));
    vec4 _407 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _409 = _407.x;
    float _414 = (((_347.z - _377) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _377;
    float _416 = cbMtdParam._m0[22u].x + _373.w;
    float _419 = fma(_388, _218 * NORMAL.x, fma(_394, _225 * TANGENT.x, (_211 * _203) * _393));
    float _422 = fma(_388, _218 * NORMAL.y, fma(_394, _225 * TANGENT.y, (_211 * _204) * _393));
    float _425 = fma(_388, _218 * NORMAL.z, fma(_394, _225 * TANGENT.z, (_211 * _205) * _393));
    float _429 = inversesqrt(dot(vec3(_419, _422, _425), vec3(_419, _422, _425)));
    float _430 = _429 * _419;
    float _431 = _429 * _422;
    float _432 = _429 * _425;
    float _3482 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    float _433 = isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0));
    float _3493 = isnan(0.0) ? _416 : (isnan(_416) ? 0.0 : max(_416, 0.0));
    float _3504 = isnan(0.0) ? _332 : (isnan(_332) ? 0.0 : max(_332, 0.0));
    float _3515 = isnan(0.0) ? _333 : (isnan(_333) ? 0.0 : max(_333, 0.0));
    float _3526 = isnan(0.0) ? _334 : (isnan(_334) ? 0.0 : max(_334, 0.0));
    float _3537 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _438 = isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0));
    float _452 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _494 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _504 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _494);
    float _505 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _494);
    float _506 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _494);
    float _510 = inversesqrt(dot(vec3(_504, _505, _506), vec3(_504, _505, _506)));
    float _511 = _504 * _510;
    float _512 = _505 * _510;
    float _513 = _506 * _510;
    vec4 _518 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _520 = _518.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _695 = sqrt(((_504 * _504) + (_505 * _505)) + (_506 * _506));
        float _701 = (cbMatDynParam._m0[5u].x * _695) + cbMatDynParam._m0[5u].y;
        float _3548 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
        float _702 = isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0));
        float _706 = (cbMatDynParam._m0[5u].z * _695) + cbMatDynParam._m0[5u].w;
        float _3559 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0))) - _702)) + _702) < ((_520 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _532 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _533 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _553 = fma(_432, cbSceneParam._m0[5u].z, fma(_431, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _430));
    float _556 = fma(_432, cbSceneParam._m0[6u].z, fma(_431, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _430));
    float _559 = fma(_432, cbSceneParam._m0[7u].z, fma(_431, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _430));
    uint _572 = _252 + 9u;
    uint _573 = _572 + uint(cbMatDynParam._m0[0u].w);
    float _579 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0)))) * cbInstanceData._m0[_573].x;
    float _580 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0)))) * cbInstanceData._m0[_573].y;
    float _581 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0)))) * cbInstanceData._m0[_573].z;
    float _3570 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _582 = isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0));
    float _3581 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
    float _583 = isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0));
    float _3592 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _584 = isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0));
    float _585 = 1.0 - _438;
    float _586 = _582 * _585;
    float _587 = _583 * _585;
    float _588 = _584 * _585;
    float _593 = (_582 + (-0.039999999105930328369140625)) * _438;
    float _594 = (_583 + (-0.039999999105930328369140625)) * _438;
    float _595 = (_584 + (-0.039999999105930328369140625)) * _438;
    float _596 = _593 + 0.039999999105930328369140625;
    float _598 = _594 + 0.039999999105930328369140625;
    float _599 = _595 + 0.039999999105930328369140625;
    vec4 _608 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _532, cbSceneParam._m0[86u].y * _533));
    float _612 = ((isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0))) * TEXCOORD_5.w) * _608.x;
    float _613 = dot(vec3(_430, _431, _432), vec3(_511, _512, _513));
    float _616 = _613 * 2.0;
    float _620 = (_616 * _430) - _511;
    float _621 = (_616 * _431) - _512;
    float _622 = (_616 * _432) - _513;
    float _626 = abs(dot(vec3(_511, _512, _513), vec3(_430, _431, _432)));
    float _3603 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _628 = sqrt(_433);
    float _641 = exp2((_628 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_628 * 3.0));
    float _647 = (1.0 - _641) * ((_628 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _648 = _641 * _628;
    float _676 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _680 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _684 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1015;
    float _1017;
    float _1018;
    float _1019;
    float _1020;
    float _1021;
    float _1022;
    float _1023;
    float _1024;
    float _1025;
    float _1026;
    float _1027;
    float _1028;
    float _1029;
    float _1030;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _740 = fma(_684, cbModelParam._m0[26u].z, fma(_680, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _676));
        float _744 = fma(_684, cbModelParam._m0[27u].z, fma(_680, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _676));
        float _748 = fma(_684, cbModelParam._m0[28u].z, fma(_680, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _676));
        float _773 = _676 + _430;
        float _774 = _680 + _431;
        float _775 = _684 + _432;
        float _785 = fma(_775, cbModelParam._m0[26u].z, fma(_774, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _773)) - _740;
        float _786 = fma(_775, cbModelParam._m0[27u].z, fma(_774, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _773)) - _744;
        float _787 = fma(_775, cbModelParam._m0[28u].z, fma(_774, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _773)) - _748;
        float _791 = inversesqrt(dot(vec3(_785, _786, _787), vec3(_785, _786, _787)));
        float _804 = ((_791 * _785) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_740 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _805 = ((_791 * _786) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_744 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _806 = ((_791 * _787) / cbModelParam._m0[34u].z) + ((((((_748 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _809 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_804, _805, _806), 0.0);
        vec4 _816 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_804, _805, _806), 0.0);
        vec4 _823 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_804, _805, _806), 0.0);
        vec4 _830 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_804, _805, _806), 0.0);
        float _843 = exp2((_809.w + (-0.5)) * 20.0) * 2.0;
        float _844 = _843 * (_809.x + (-0.5));
        float _845 = _843 * (_809.y + (-0.5));
        float _846 = _843 * (_809.z + (-0.5));
        float _853 = exp2((_816.w + (-0.5)) * 20.0) * 2.0;
        float _854 = _853 * (_816.x + (-0.5));
        float _855 = _853 * (_816.y + (-0.5));
        float _856 = _853 * (_816.z + (-0.5));
        float _863 = exp2((_823.w + (-0.5)) * 20.0) * 2.0;
        float _864 = _863 * (_823.x + (-0.5));
        float _865 = _863 * (_823.y + (-0.5));
        float _866 = _863 * (_823.z + (-0.5));
        float _873 = exp2((_830.w + (-0.5)) * 20.0) * 2.0;
        float _874 = _873 * (_830.x + (-0.5));
        float _875 = _873 * (_830.y + (-0.5));
        float _876 = _873 * (_830.z + (-0.5));
        float _877 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
        float _878 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
        float _879 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
        float _880 = _844 * 0.5;
        float _881 = _854 * 0.5;
        float _882 = _864 * 0.5;
        float _883 = dot(vec3(_880, _881, _882), vec3(_880, _881, _882));
        float _888 = (_883 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_883);
        float _897 = (dot(vec3(_430, _431, _432), vec3(_888 * _880, _888 * _881, _888 * _882)) + 1.0) * 0.5;
        float _3629 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
        float _907 = sqrt(((_881 * _881) + (_880 * _880)) + (_882 * _882)) / (_877 + 9.9999997473787516355514526367188e-06);
        float _3640 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
        float _908 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
        float _909 = _908 * 2.0;
        float _913 = (1.0 - _908) / (_908 + 1.0);
        float _3651 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
        float _914 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
        float _923 = ((((1.0 - _914) * (_909 + 2.0)) * exp2(log2(isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0))) * (_909 + 1.0))) + _914) * _877;
        float _924 = _845 * 0.5;
        float _925 = _855 * 0.5;
        float _926 = _865 * 0.5;
        float _927 = dot(vec3(_924, _925, _926), vec3(_924, _925, _926));
        float _932 = (_927 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_927);
        float _940 = (dot(vec3(_430, _431, _432), vec3(_932 * _924, _932 * _925, _932 * _926)) + 1.0) * 0.5;
        float _3662 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _949 = sqrt(((_925 * _925) + (_924 * _924)) + (_926 * _926)) / (_878 + 9.9999997473787516355514526367188e-06);
        float _3673 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
        float _950 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
        float _951 = _950 * 2.0;
        float _955 = (1.0 - _950) / (_950 + 1.0);
        float _3684 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
        float _956 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
        float _965 = ((((1.0 - _956) * (_951 + 2.0)) * exp2(log2(isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0))) * (_951 + 1.0))) + _956) * _878;
        float _966 = _846 * 0.5;
        float _967 = _856 * 0.5;
        float _968 = _866 * 0.5;
        float _969 = dot(vec3(_966, _967, _968), vec3(_966, _967, _968));
        float _974 = (_969 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_969);
        float _982 = (dot(vec3(_430, _431, _432), vec3(_974 * _966, _974 * _967, _974 * _968)) + 1.0) * 0.5;
        float _3695 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _991 = sqrt(((_967 * _967) + (_966 * _966)) + (_968 * _968)) / (_879 + 9.9999997473787516355514526367188e-06);
        float _3706 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _992 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
        float _993 = _992 * 2.0;
        float _997 = (1.0 - _992) / (_992 + 1.0);
        float _3717 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _998 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
        float _1007 = ((((1.0 - _998) * (_993 + 2.0)) * exp2(log2(isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0))) * (_993 + 1.0))) + _998) * _879;
        _1015 = _846;
        _1017 = _845;
        _1018 = _844;
        _1019 = _856;
        _1020 = _855;
        _1021 = _854;
        _1022 = _866;
        _1023 = _865;
        _1024 = _864;
        _1025 = _879;
        _1026 = _878;
        _1027 = _877;
        _1028 = cbModelParam._m0[36u].z * (isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0)));
        _1029 = cbModelParam._m0[36u].z * (isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0)));
        _1030 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0)));
    }
    else
    {
        _1015 = _1016;
        _1017 = _1016;
        _1018 = _1016;
        _1019 = _1016;
        _1020 = _1016;
        _1021 = _1016;
        _1022 = _1016;
        _1023 = _1016;
        _1024 = _1016;
        _1025 = _1016;
        _1026 = _1016;
        _1027 = _1016;
        _1028 = 0.0;
        _1029 = 0.0;
        _1030 = 0.0;
    }
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1058 = fma(_684, cbModelParam._m0[30u].z, fma(_680, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _676));
        float _1062 = fma(_684, cbModelParam._m0[31u].z, fma(_680, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _676));
        float _1066 = fma(_684, cbModelParam._m0[32u].z, fma(_680, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _676));
        float _1089 = _676 + _430;
        float _1090 = _680 + _431;
        float _1091 = _684 + _432;
        float _1101 = fma(_1091, cbModelParam._m0[30u].z, fma(_1090, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1089)) - _1058;
        float _1102 = fma(_1091, cbModelParam._m0[31u].z, fma(_1090, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1089)) - _1062;
        float _1103 = fma(_1091, cbModelParam._m0[32u].z, fma(_1090, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1089)) - _1066;
        float _1107 = inversesqrt(dot(vec3(_1101, _1102, _1103), vec3(_1101, _1102, _1103)));
        float _1120 = ((_1107 * _1101) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1058 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1121 = ((_1107 * _1102) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1062 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1122 = ((_1107 * _1103) / cbModelParam._m0[35u].z) + ((((((_1066 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1124 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1120, _1121, _1122), 0.0);
        vec4 _1131 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1120, _1121, _1122), 0.0);
        vec4 _1138 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1120, _1121, _1122), 0.0);
        vec4 _1145 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1120, _1121, _1122), 0.0);
        float _1157 = exp2((_1124.w + (-0.5)) * 20.0) * 2.0;
        float _1158 = _1157 * (_1124.x + (-0.5));
        float _1159 = _1157 * (_1124.y + (-0.5));
        float _1160 = _1157 * (_1124.z + (-0.5));
        float _1167 = exp2((_1131.w + (-0.5)) * 20.0) * 2.0;
        float _1168 = _1167 * (_1131.x + (-0.5));
        float _1169 = _1167 * (_1131.y + (-0.5));
        float _1170 = _1167 * (_1131.z + (-0.5));
        float _1177 = exp2((_1138.w + (-0.5)) * 20.0) * 2.0;
        float _1178 = _1177 * (_1138.x + (-0.5));
        float _1179 = _1177 * (_1138.y + (-0.5));
        float _1180 = _1177 * (_1138.z + (-0.5));
        float _1187 = exp2((_1145.w + (-0.5)) * 20.0) * 2.0;
        float _1188 = _1187 * (_1145.x + (-0.5));
        float _1189 = _1187 * (_1145.y + (-0.5));
        float _1190 = _1187 * (_1145.z + (-0.5));
        float _1191 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1192 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1193 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1194 = _1158 * 0.5;
        float _1195 = _1168 * 0.5;
        float _1196 = _1178 * 0.5;
        float _1197 = dot(vec3(_1194, _1195, _1196), vec3(_1194, _1195, _1196));
        float _1202 = (_1197 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1197);
        float _1210 = (dot(vec3(_430, _431, _432), vec3(_1202 * _1194, _1202 * _1195, _1202 * _1196)) + 1.0) * 0.5;
        float _3758 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1219 = sqrt(((_1195 * _1195) + (_1194 * _1194)) + (_1196 * _1196)) / (_1191 + 9.9999997473787516355514526367188e-06);
        float _3769 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1220 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
        float _1221 = _1220 * 2.0;
        float _1225 = (1.0 - _1220) / (_1220 + 1.0);
        float _3780 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1226 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
        float _1235 = ((((1.0 - _1226) * (_1221 + 2.0)) * exp2(log2(isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0))) * (_1221 + 1.0))) + _1226) * _1191;
        float _1236 = _1159 * 0.5;
        float _1237 = _1169 * 0.5;
        float _1238 = _1179 * 0.5;
        float _1239 = dot(vec3(_1236, _1237, _1238), vec3(_1236, _1237, _1238));
        float _1244 = (_1239 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1239);
        float _1252 = (dot(vec3(_430, _431, _432), vec3(_1244 * _1236, _1244 * _1237, _1244 * _1238)) + 1.0) * 0.5;
        float _3791 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1261 = sqrt(((_1237 * _1237) + (_1236 * _1236)) + (_1238 * _1238)) / (_1192 + 9.9999997473787516355514526367188e-06);
        float _3802 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1262 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
        float _1263 = _1262 * 2.0;
        float _1267 = (1.0 - _1262) / (_1262 + 1.0);
        float _3813 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1268 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
        float _1277 = ((((1.0 - _1268) * (_1263 + 2.0)) * exp2(log2(isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0))) * (_1263 + 1.0))) + _1268) * _1192;
        float _1278 = _1160 * 0.5;
        float _1279 = _1170 * 0.5;
        float _1280 = _1180 * 0.5;
        float _1281 = dot(vec3(_1278, _1279, _1280), vec3(_1278, _1279, _1280));
        float _1286 = (_1281 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1281);
        float _1294 = (dot(vec3(_430, _431, _432), vec3(_1286 * _1278, _1286 * _1279, _1286 * _1280)) + 1.0) * 0.5;
        float _3824 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1303 = sqrt(((_1279 * _1279) + (_1278 * _1278)) + (_1280 * _1280)) / (_1193 + 9.9999997473787516355514526367188e-06);
        float _3835 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1304 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
        float _1305 = _1304 * 2.0;
        float _1309 = (1.0 - _1304) / (_1304 + 1.0);
        float _3846 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1310 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
        float _1319 = ((((1.0 - _1310) * (_1305 + 2.0)) * exp2(log2(isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0))) * (_1305 + 1.0))) + _1310) * _1193;
        _1327 = _1160;
        _1328 = _1159;
        _1329 = _1158;
        _1330 = _1170;
        _1331 = _1169;
        _1332 = _1168;
        _1333 = _1180;
        _1334 = _1179;
        _1335 = _1178;
        _1336 = _1193;
        _1337 = _1192;
        _1338 = _1191;
        _1339 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0)));
        _1340 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0)));
        _1341 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0)));
    }
    else
    {
        _1327 = _1016;
        _1328 = _1016;
        _1329 = _1016;
        _1330 = _1016;
        _1331 = _1016;
        _1332 = _1016;
        _1333 = _1016;
        _1334 = _1016;
        _1335 = _1016;
        _1336 = _1016;
        _1337 = _1016;
        _1338 = _1016;
        _1339 = 0.0;
        _1340 = 0.0;
        _1341 = 0.0;
    }
    float _1351 = (cbModelParam._m0[1u].x * (_1339 - _1028)) + _1028;
    float _1352 = (cbModelParam._m0[1u].x * (_1340 - _1029)) + _1029;
    float _1353 = (cbModelParam._m0[1u].x * (_1341 - _1030)) + _1030;
    float _1374 = fma(_1353, cbSceneParam._m0[89u].z, fma(_1352, cbSceneParam._m0[89u].y, _1351 * cbSceneParam._m0[89u].x));
    float _1377 = fma(_1353, cbSceneParam._m0[90u].z, fma(_1352, cbSceneParam._m0[90u].y, _1351 * cbSceneParam._m0[90u].x));
    float _1380 = fma(_1353, cbSceneParam._m0[91u].z, fma(_1352, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1351));
    float _1395 = _620 * 0.5;
    float _1396 = _621 * 0.5;
    float _1397 = _622 * 0.5;
    float _1398 = dot(vec4(_1395, _1396, _1397, 1.0), vec4(_1329, _1332, _1335, _1338));
    float _1401 = dot(vec4(_1395, _1396, _1397, 1.0), vec4(_1328, _1331, _1334, _1337));
    float _1404 = dot(vec4(_1395, _1396, _1397, 1.0), vec4(_1327, _1330, _1333, _1336));
    float _1438;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1411 = dot(vec4(_1395, _1396, _1397, 1.0), vec4(_1015, _1019, _1022, _1025));
        float _1415 = dot(vec4(_1395, _1396, _1397, 1.0), vec4(_1017, _1020, _1023, _1026));
        float _1419 = dot(vec4(_1395, _1396, _1397, 1.0), vec4(_1018, _1021, _1024, _1027));
        float _1426 = dot(vec4(cbModelParam._m0[39u]), vec4(_1395, _1396, _1397, 1.0));
        _1438 = dot(vec3(isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0)), isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0)), isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1426) ? 0.0 : (isnan(0.0) ? _1426 : max(0.0, _1426))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1438 = 1.0;
    }
    float _1449;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1440 = dot(vec4(cbModelParam._m0[40u]), vec4(_1395, _1396, _1397, 1.0));
        _1449 = dot(vec3(isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0)), isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0)), isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1440) ? 0.0 : (isnan(0.0) ? _1440 : max(0.0, _1440))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1449 = 1.0;
    }
    float _1453 = (_1449 * cbModelParam._m0[1u].x) + (_1438 * (1.0 - cbModelParam._m0[1u].x));
    float _1463 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _433);
    float _1464 = isnan(_1463) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1463 : min(cbModelParam._m0[25u].z, _1463));
    float _1546;
    float _1548;
    float _1550;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1513 = fma(_684, cbModelParam._m0[13u].z, fma(_680, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _676)) + cbModelParam._m0[13u].w;
        float _1517 = fma(_684, cbModelParam._m0[14u].z, fma(_680, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _676)) + cbModelParam._m0[14u].w;
        float _1521 = fma(_684, cbModelParam._m0[15u].z, fma(_680, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _676)) + cbModelParam._m0[15u].w;
        float _1524 = fma(_622, cbModelParam._m0[13u].z, fma(_621, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _620));
        float _1527 = fma(_622, cbModelParam._m0[14u].z, fma(_621, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _620));
        float _1530 = fma(_622, cbModelParam._m0[15u].z, fma(_621, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _620));
        float _1558;
        if (_1524 > 0.0)
        {
            _1558 = abs((1.0 - _1513) / _1524);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1524 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1513 + 1.0) / _1524);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1558 = frontier_phi_17_15_ladder;
        }
        float _1785;
        if (_1527 > 0.0)
        {
            _1785 = abs((1.0 - _1517) / _1527);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1527 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1517 + 1.0) / _1527);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1785 = frontier_phi_26_22_ladder;
        }
        float _2042;
        if (_1530 > 0.0)
        {
            _2042 = abs((1.0 - _1521) / _1530);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1530 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1521 + 1.0) / _1530);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2042 = frontier_phi_38_33_ladder;
        }
        float _2044 = isnan(_1785) ? _1558 : (isnan(_1558) ? _1785 : min(_1558, _1785));
        float _2045 = isnan(_2042) ? _2044 : (isnan(_2044) ? _2042 : min(_2044, _2042));
        float _2049 = (_2045 * _1524) + _1513;
        float _2050 = (_2045 * _1527) + _1517;
        float _2051 = (_2045 * _1530) + _1521;
        float _2052 = _2045 * 9.9999997473787516355514526367188e-05;
        float _2054 = (-1.0) - _2052;
        float _2056 = _2052 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2051 > _2056) || ((_2051 < _2054) || ((_2050 > _2056) || ((_2050 < _2054) || ((_2049 < _2054) || (_2049 > _2056))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2179 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2051, cbModelParam._m0[9u].z, fma(_2050, cbModelParam._m0[9u].y, _2049 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2051, cbModelParam._m0[10u].z, fma(_2050, cbModelParam._m0[10u].y, _2049 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2051, cbModelParam._m0[11u].z, fma(_2050, cbModelParam._m0[11u].y, _2049 * cbModelParam._m0[11u].x))), _1464);
            frontier_phi_16_38_ladder = _2179.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2179.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2179.x * cbModelParam._m0[1u].y;
        }
        _1546 = frontier_phi_16_38_ladder_2;
        _1548 = frontier_phi_16_38_ladder_1;
        _1550 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1534 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_620, _621, _622), _1464);
        _1546 = _1534.x * cbModelParam._m0[1u].y;
        _1548 = _1534.y * cbModelParam._m0[1u].y;
        _1550 = _1534.z * cbModelParam._m0[1u].y;
    }
    float _1554 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _433);
    float _1555 = isnan(_1554) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1554 : min(cbModelParam._m0[25u].w, _1554));
    float _1647;
    float _1649;
    float _1651;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1611 = fma(_684, cbModelParam._m0[21u].z, fma(_680, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _676)) + cbModelParam._m0[21u].w;
        float _1615 = fma(_684, cbModelParam._m0[22u].z, fma(_680, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _676)) + cbModelParam._m0[22u].w;
        float _1619 = fma(_684, cbModelParam._m0[23u].z, fma(_680, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _676)) + cbModelParam._m0[23u].w;
        float _1622 = fma(_622, cbModelParam._m0[21u].z, fma(_621, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _620));
        float _1625 = fma(_622, cbModelParam._m0[22u].z, fma(_621, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _620));
        float _1628 = fma(_622, cbModelParam._m0[23u].z, fma(_621, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _620));
        float _1790;
        if (_1622 > 0.0)
        {
            _1790 = abs((1.0 - _1611) / _1622);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1622 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1611 + 1.0) / _1622);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1790 = frontier_phi_28_24_ladder;
        }
        float _2069;
        if (_1625 > 0.0)
        {
            _2069 = abs((1.0 - _1615) / _1625);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1625 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1615 + 1.0) / _1625);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2069 = frontier_phi_40_35_ladder;
        }
        float _2282;
        if (_1628 > 0.0)
        {
            _2282 = abs((1.0 - _1619) / _1628);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1628 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1619 + 1.0) / _1628);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2282 = frontier_phi_49_46_ladder;
        }
        float _2284 = isnan(_2069) ? _1790 : (isnan(_1790) ? _2069 : min(_1790, _2069));
        float _2285 = isnan(_2282) ? _2284 : (isnan(_2284) ? _2282 : min(_2284, _2282));
        float _2289 = (_2285 * _1622) + _1611;
        float _2290 = (_2285 * _1625) + _1615;
        float _2291 = (_2285 * _1628) + _1619;
        float _2292 = _2285 * 9.9999997473787516355514526367188e-05;
        float _2293 = (-1.0) - _2292;
        float _2295 = _2292 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2291 > _2295) || ((_2291 < _2293) || ((_2290 > _2295) || ((_2290 < _2293) || ((_2289 < _2293) || (_2289 > _2295))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2490 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2291, cbModelParam._m0[17u].z, fma(_2290, cbModelParam._m0[17u].y, _2289 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2291, cbModelParam._m0[18u].z, fma(_2290, cbModelParam._m0[18u].y, _2289 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2291, cbModelParam._m0[19u].z, fma(_2290, cbModelParam._m0[19u].y, _2289 * cbModelParam._m0[19u].x))), _1555);
            frontier_phi_25_49_ladder = _2490.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2490.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2490.x * cbModelParam._m0[1u].z;
        }
        _1647 = frontier_phi_25_49_ladder_2;
        _1649 = frontier_phi_25_49_ladder_1;
        _1651 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1631 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_620, _621, _622), _1555);
        _1647 = _1631.x * cbModelParam._m0[1u].z;
        _1649 = _1631.y * cbModelParam._m0[1u].z;
        _1651 = _1631.z * cbModelParam._m0[1u].z;
    }
    float _1664 = (((_647 * _596) + _648) * _612) * ((cbModelParam._m0[1u].w * (_1647 - _1546)) + _1546);
    float _1666 = (((_647 * _598) + _648) * _612) * ((cbModelParam._m0[1u].w * (_1649 - _1548)) + _1548);
    float _1668 = (((_647 * _599) + _648) * _612) * ((cbModelParam._m0[1u].w * (_1651 - _1550)) + _1550);
    float _1671 = fma(_1668, cbSceneParam._m0[89u].z, fma(_1666, cbSceneParam._m0[89u].y, _1664 * cbSceneParam._m0[89u].x));
    float _1674 = fma(_1668, cbSceneParam._m0[90u].z, fma(_1666, cbSceneParam._m0[90u].y, _1664 * cbSceneParam._m0[90u].x));
    float _1677 = fma(_1668, cbSceneParam._m0[91u].z, fma(_1666, cbSceneParam._m0[91u].y, _1664 * cbSceneParam._m0[91u].x));
    vec4 _1685 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_532, _533));
    float _1687 = _1685.w;
    float _1699 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1687);
    float _1700 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1687);
    float _1701 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1687);
    uvec4 _1705 = floatBitsToUint(cbInstanceData._m0[_252 + 5u]);
    uint _1707 = _1705.x * 14u;
    uint _1708 = _1707 + 13u;
    float _1715 = _612 + (-1.0);
    float _1720 = (cbLight._m0[_1708].x * _1715) + 1.0;
    float _1721 = (cbLight._m0[_1708].y * _1715) + 1.0;
    float _1722 = (cbLight._m0[_1708].z * _1715) + 1.0;
    float _1723 = (cbLight._m0[_1708].w * _1715) + 1.0;
    uint _1724 = _1707 + 5u;
    float _1730 = isnan(1.0) ? _1721 : (isnan(_1721) ? 1.0 : min(_1721, 1.0));
    uint _1734 = _1707 + 4u;
    float _1744 = isnan(1.0) ? _1720 : (isnan(_1720) ? 1.0 : min(_1720, 1.0));
    uint _1748 = _1707 | 1u;
    float _1759 = dot(vec3(cbLight._m0[_1707].xyz), vec3(_430, _431, _432));
    float _1762 = dot(vec3(cbLight._m0[_1748].xyz), vec3(_430, _431, _432));
    float _3982 = isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0));
    float _3993 = isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0));
    float _1767 = (isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0))) * 0.3183098733425140380859375;
    float _1769 = (isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0))) * 0.3183098733425140380859375;
    float _1776 = ((cbLight._m0[_1724].x * _1730) * _1769) + (((cbLight._m0[_1734].x * _1699) * _1744) * _1767);
    float _1777 = ((_1730 * cbLight._m0[_1724].y) * _1769) + (((cbLight._m0[_1734].y * _1700) * _1744) * _1767);
    float _1778 = ((_1730 * cbLight._m0[_1724].z) * _1769) + (((cbLight._m0[_1734].z * _1701) * _1744) * _1767);
    uvec4 _1782 = floatBitsToUint(cbLight._m0[_1707 + 12u]);
    bool _1784 = _1782.x == 0u;
    float _1795;
    float _1797;
    float _1799;
    if (_1784)
    {
        _1795 = _1776;
        _1797 = _1777;
        _1799 = _1778;
    }
    else
    {
        uint _1803 = _1707 + 6u;
        float _1819 = (dot(vec3(cbLight._m0[_1707 + 2u].xyz), vec3(_430, _431, _432)) * 0.5) + 0.5;
        float _1820 = _1819 * _1819;
        float _4004 = isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0));
        float _1821 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
        float _1822 = isnan(1.0) ? _1722 : (isnan(_1722) ? 1.0 : min(_1722, 1.0));
        _1795 = (((cbLight._m0[_1803].x * 0.3183098733425140380859375) * _1821) * _1822) + _1776;
        _1797 = (((cbLight._m0[_1803].y * 0.3183098733425140380859375) * _1821) * _1822) + _1777;
        _1799 = (((cbLight._m0[_1803].z * 0.3183098733425140380859375) * _1821) * _1822) + _1778;
    }
    bool _1802 = _1782.y == 0u;
    float _1840;
    float _1842;
    float _1844;
    if (_1802)
    {
        _1840 = _1795;
        _1842 = _1797;
        _1844 = _1799;
    }
    else
    {
        uint _2013 = _1707 + 7u;
        float _2029 = (dot(vec3(cbLight._m0[_1707 + 3u].xyz), vec3(_430, _431, _432)) * 0.5) + 0.5;
        float _2030 = _2029 * _2029;
        float _4020 = isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0));
        float _2031 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
        float _2032 = isnan(1.0) ? _1723 : (isnan(_1723) ? 1.0 : min(_1723, 1.0));
        _1840 = (((cbLight._m0[_2013].x * 0.3183098733425140380859375) * _2031) * _2032) + _1795;
        _1842 = (((cbLight._m0[_2013].y * 0.3183098733425140380859375) * _2031) * _2032) + _1797;
        _1844 = (((cbLight._m0[_2013].z * 0.3183098733425140380859375) * _2031) * _2032) + _1799;
    }
    uint _1847 = _1707 + 8u;
    float _1860 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1707].w)) * _433) * 0.949999988079071044921875);
    float _1861 = _1860 * _1860;
    float _1862 = cbLight._m0[_1707].x + _511;
    float _1863 = cbLight._m0[_1707].y + _512;
    float _1864 = cbLight._m0[_1707].z + _513;
    float _1868 = inversesqrt(dot(vec3(_1862, _1863, _1864), vec3(_1862, _1863, _1864)));
    float _1869 = _1868 * _1862;
    float _1870 = _1868 * _1863;
    float _1871 = _1868 * _1864;
    float _1872 = dot(vec3(_430, _431, _432), vec3(cbLight._m0[_1707].xyz));
    float _4036 = isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0));
    float _1875 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
    float _4047 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _1876 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
    float _1877 = dot(vec3(_430, _431, _432), vec3(_1869, _1870, _1871));
    float _4058 = isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0));
    float _1880 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
    float _1881 = dot(vec3(cbLight._m0[_1707].xyz), vec3(_1869, _1870, _1871));
    float _4069 = isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0));
    float _1885 = _1861 * _1861;
    float _1889 = ((_1880 * _1880) * (_1885 + (-1.0))) + 1.0;
    float _1897 = exp2(log2(1.0 - (isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0)))) * 5.0);
    float _1898 = 0.959999978542327880859375 - _593;
    float _1900 = 0.959999978542327880859375 - _594;
    float _1901 = 0.959999978542327880859375 - _595;
    float _1908 = 1.0 - _1861;
    float _1919 = (0.5 / (((_1876 * ((_1875 * _1908) + _1861)) + 9.9999999392252902907785028219223e-09) + (((_1876 * _1908) + _1861) * _1875))) * _1875;
    float _4080 = isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0));
    float _1921 = (isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0))) * (_1885 / ((_1889 * _1889) * 3.141590118408203125));
    uint _1935 = _1707 + 9u;
    float _1946 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1748].w)) * _433) * 0.949999988079071044921875);
    float _1947 = _1946 * _1946;
    float _1948 = cbLight._m0[_1748].x + _511;
    float _1949 = cbLight._m0[_1748].y + _512;
    float _1950 = cbLight._m0[_1748].z + _513;
    float _1954 = inversesqrt(dot(vec3(_1948, _1949, _1950), vec3(_1948, _1949, _1950)));
    float _1955 = _1954 * _1948;
    float _1956 = _1954 * _1949;
    float _1957 = _1954 * _1950;
    float _1958 = dot(vec3(_430, _431, _432), vec3(cbLight._m0[_1748].xyz));
    float _4091 = isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0));
    float _1961 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
    float _1962 = dot(vec3(_430, _431, _432), vec3(_1955, _1956, _1957));
    float _4102 = isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0));
    float _1965 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
    float _1966 = dot(vec3(cbLight._m0[_1748].xyz), vec3(_1955, _1956, _1957));
    float _4113 = isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0));
    float _1970 = _1947 * _1947;
    float _1974 = ((_1965 * _1965) * (_1970 + (-1.0))) + 1.0;
    float _1981 = exp2(log2(1.0 - (isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0)))) * 5.0);
    float _1988 = 1.0 - _1947;
    float _1998 = (0.5 / (((_1876 * ((_1961 * _1988) + _1947)) + 9.9999999392252902907785028219223e-09) + (((_1876 * _1988) + _1947) * _1961))) * _1961;
    float _4124 = isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0));
    float _2000 = (isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0))) * (_1970 / ((_1974 * _1974) * 3.141590118408203125));
    float _2010 = (((((_1981 * _1898) + _596) * cbLight._m0[_1935].x) * _2000) * _1730) + ((((cbLight._m0[_1847].x * _1699) * ((_1897 * _1898) + _596)) * _1921) * _1744);
    float _2011 = (((((_1981 * _1900) + _598) * cbLight._m0[_1935].y) * _2000) * _1730) + ((((cbLight._m0[_1847].y * _1700) * ((_1897 * _1900) + _598)) * _1921) * _1744);
    float _2012 = (((((_1981 * _1901) + _599) * cbLight._m0[_1935].z) * _2000) * _1730) + ((((cbLight._m0[_1847].z * _1701) * ((_1897 * _1901) + _599)) * _1921) * _1744);
    float _2074;
    float _2076;
    float _2078;
    if (_1784)
    {
        _2074 = _2010;
        _2076 = _2011;
        _2078 = _2012;
    }
    else
    {
        uint _2080 = _1707 + 2u;
        uint _2084 = _1707 + 10u;
        float _2098 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2080].w)) * _433) * 0.949999988079071044921875);
        float _2099 = _2098 * _2098;
        float _2100 = cbLight._m0[_2080].x + _511;
        float _2101 = cbLight._m0[_2080].y + _512;
        float _2102 = cbLight._m0[_2080].z + _513;
        float _2106 = inversesqrt(dot(vec3(_2100, _2101, _2102), vec3(_2100, _2101, _2102)));
        float _2107 = _2106 * _2100;
        float _2108 = _2106 * _2101;
        float _2109 = _2106 * _2102;
        float _2110 = dot(vec3(_430, _431, _432), vec3(cbLight._m0[_2080].xyz));
        float _4135 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
        float _2113 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
        float _2114 = dot(vec3(_430, _431, _432), vec3(_2107, _2108, _2109));
        float _4146 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
        float _2117 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
        float _2118 = dot(vec3(cbLight._m0[_2080].xyz), vec3(_2107, _2108, _2109));
        float _4157 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
        float _2122 = _2099 * _2099;
        float _2126 = ((_2117 * _2117) * (_2122 + (-1.0))) + 1.0;
        float _2133 = exp2(log2(1.0 - (isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0)))) * 5.0);
        float _2140 = 1.0 - _2099;
        float _2150 = (0.5 / (((_1876 * ((_2113 * _2140) + _2099)) + 9.9999999392252902907785028219223e-09) + (((_1876 * _2140) + _2099) * _2113))) * _2113;
        float _4168 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
        float _2152 = (isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0))) * (_2122 / ((_2126 * _2126) * 3.141590118408203125));
        float _2153 = isnan(1.0) ? _1722 : (isnan(_1722) ? 1.0 : min(_1722, 1.0));
        _2074 = (((((_2133 * _1898) + _596) * cbLight._m0[_2084].x) * _2152) * _2153) + _2010;
        _2076 = (((((_2133 * _1900) + _598) * cbLight._m0[_2084].y) * _2152) * _2153) + _2011;
        _2078 = (((((_2133 * _1901) + _599) * cbLight._m0[_2084].z) * _2152) * _2153) + _2012;
    }
    float _2188;
    float _2190;
    float _2192;
    if (_1802)
    {
        _2188 = _2074;
        _2190 = _2076;
        _2192 = _2078;
    }
    else
    {
        uint _2199 = _1707 + 3u;
        uint _2203 = _1707 + 11u;
        float _2217 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2199].w)) * _433) * 0.949999988079071044921875);
        float _2218 = _2217 * _2217;
        float _2219 = cbLight._m0[_2199].x + _511;
        float _2220 = cbLight._m0[_2199].y + _512;
        float _2221 = cbLight._m0[_2199].z + _513;
        float _2225 = inversesqrt(dot(vec3(_2219, _2220, _2221), vec3(_2219, _2220, _2221)));
        float _2226 = _2225 * _2219;
        float _2227 = _2225 * _2220;
        float _2228 = _2225 * _2221;
        float _2229 = dot(vec3(_430, _431, _432), vec3(cbLight._m0[_2199].xyz));
        float _4184 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
        float _2232 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
        float _2233 = dot(vec3(_430, _431, _432), vec3(_2226, _2227, _2228));
        float _4195 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
        float _2236 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
        float _2237 = dot(vec3(cbLight._m0[_2199].xyz), vec3(_2226, _2227, _2228));
        float _4206 = isnan(0.0) ? _2237 : (isnan(_2237) ? 0.0 : max(_2237, 0.0));
        float _2241 = _2218 * _2218;
        float _2245 = ((_2236 * _2236) * (_2241 + (-1.0))) + 1.0;
        float _2252 = exp2(log2(1.0 - (isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0)))) * 5.0);
        float _2259 = 1.0 - _2218;
        float _2269 = (0.5 / (((_1876 * ((_2232 * _2259) + _2218)) + 9.9999999392252902907785028219223e-09) + (((_1876 * _2259) + _2218) * _2232))) * _2232;
        float _4217 = isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0));
        float _2271 = (isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0))) * (_2241 / ((_2245 * _2245) * 3.141590118408203125));
        float _2272 = isnan(1.0) ? _1723 : (isnan(_1723) ? 1.0 : min(_1723, 1.0));
        _2188 = (((((_2252 * _1898) + _596) * cbLight._m0[_2203].x) * _2271) * _2272) + _2074;
        _2190 = (((((_2252 * _1900) + _598) * cbLight._m0[_2203].y) * _2271) * _2272) + _2076;
        _2192 = (((((_2252 * _1901) + _599) * cbLight._m0[_2203].z) * _2271) * _2272) + _2078;
    }
    float _2407;
    float _2409;
    float _2411;
    float _2413;
    float _2415;
    float _2417;
    if (_1705.y == 0u)
    {
        float _2347 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2348 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2347;
        float _2349 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2347;
        float _2350 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2347;
        uvec4 _2362 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2363 = _2362.x;
        uint _2374 = uint((float(_2362.y) * floor(float(uint(cbSceneParam._m0[85u].y * _533) / _2363))) + floor(float(uint(cbSceneParam._m0[85u].x * _532) / _2363)));
        float _2384 = (log2(_2350 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2385 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0));
        uint _2388 = uint(isnan(14.0) ? _2385 : (isnan(_2385) ? 14.0 : min(_2385, 14.0)));
        uvec4 _2393 = texelFetch(g_lightClusterGridBuffer, int(((_2388 << 2u) + (_2374 << 6u)) >> 2u));
        uint _2394 = _2393.x;
        uint _2395 = _2362.z;
        float _2495;
        float _2497;
        float _2499;
        float _2501;
        float _2503;
        float _2505;
        if (((((1u << ((_2395 >> 4u) & 15u)) + 4294967295u) & _2394) == 0u) || ((_2395 & 240u) == 0u))
        {
            _2495 = 0.0;
            _2497 = 0.0;
            _2499 = 0.0;
            _2501 = 0.0;
            _2503 = 0.0;
            _2505 = 0.0;
        }
        else
        {
            float _2496;
            float _2498;
            float _2500;
            float _2502;
            float _2504;
            float _2506;
            float _2648 = 0.0;
            float _2649 = 0.0;
            float _2650 = 0.0;
            float _2651 = 0.0;
            float _2652 = 0.0;
            float _2653 = 0.0;
            uint _2654 = 0u;
            uint _2663;
            bool _2664;
            for (;;)
            {
                _2663 = texelFetch(g_lightClassification, int((((_2388 << 5u) + (_2374 << 9u)) + (_2654 << 2u)) >> 2u)).x;
                _2664 = _2663 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2664)
                {
                    frontier_phi_66_pred = _2648;
                    frontier_phi_66_pred_1 = _2653;
                    frontier_phi_66_pred_2 = _2652;
                    frontier_phi_66_pred_3 = _2651;
                    frontier_phi_66_pred_4 = _2650;
                    frontier_phi_66_pred_5 = _2649;
                }
                else
                {
                    float _2793;
                    float _2794;
                    float _2795;
                    float _2796;
                    float _2797;
                    float _2798;
                    uint _2799;
                    _2793 = _2648;
                    _2794 = _2649;
                    _2795 = _2650;
                    _2796 = _2651;
                    _2797 = _2652;
                    _2798 = _2653;
                    _2799 = _2663;
                    float _2720;
                    float _2721;
                    float _2722;
                    float _2723;
                    float _2724;
                    float _2725;
                    for (;;)
                    {
                        uint _2803 = uint(findLSB(_2799)) + (_2654 << 5u);
                        uint _2800 = (_2799 + 4294967295u) & _2799;
                        uint _2805 = _2803 * 48u;
                        vec4 _2819 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2805)).x, texelFetch(g_PointLightRenderingBuffer, int(_2805 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2805 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2805 + 3u)).x));
                        uint _2825 = (_2803 * 48u) + 4u;
                        vec4 _2838 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2825)).x, texelFetch(g_PointLightRenderingBuffer, int(_2825 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2825 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2825 + 3u)).x));
                        uint _2844 = (_2803 * 48u) + 8u;
                        vec3 _2855 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2844)).x, texelFetch(g_PointLightRenderingBuffer, int(_2844 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2844 + 2u)).x));
                        float _2859 = _2819.x - _2348;
                        float _2860 = _2819.y - _2349;
                        float _2861 = _2819.z - _2350;
                        float _2862 = dot(vec3(_2859, _2860, _2861), vec3(_2859, _2860, _2861));
                        float _2865 = inversesqrt(_2862);
                        float _2866 = _2865 * _2859;
                        float _2867 = _2865 * _2860;
                        float _2868 = _2865 * _2861;
                        float _2869 = dot(vec3(_553, _556, _559), vec3(_2866, _2867, _2868));
                        float _2874 = 1.0 - (_2862 * _2819.w);
                        float _4243 = isnan(0.0) ? _2874 : (isnan(_2874) ? 0.0 : max(_2874, 0.0));
                        float _2875 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
                        float _2876 = sqrt(_2862) * _2838.w;
                        float _2879 = 1.39999997615814208984375 / (_2876 + 1.39999997615814208984375);
                        float _2880 = _2879 * _2879;
                        float _2883 = ((1.0 - _2880) * _2869) + _2880;
                        float _2886 = _2876 * _2876;
                        float _2890 = ((isnan(0.0) ? _2883 : (isnan(_2883) ? 0.0 : max(_2883, 0.0))) * _2875) / ((_2886 * 0.699999988079071044921875) + 1.0);
                        float _2894 = (-0.0) - _2348;
                        float _2895 = (-0.0) - _2349;
                        float _2896 = (-0.0) - _2350;
                        float _2900 = inversesqrt(dot(vec3(_2894, _2895, _2896), vec3(_2894, _2895, _2896)));
                        float _2901 = _2900 * _2894;
                        float _2902 = _2900 * _2895;
                        float _2903 = _2900 * _2896;
                        float _2911 = exp2(log2(1.0 / ((_2886 * 3.5) + 5.0)) * 0.25);
                        float _2912 = 1.0 - _628;
                        float _2919 = sqrt(1.0 - ((1.0 - (_2912 * _2912)) * (1.0 - (_2911 * _2911))));
                        float _2920 = _2919 * _2919;
                        float _2921 = _2920 * _2920;
                        float _2922 = _2901 + _2866;
                        float _2923 = _2902 + _2867;
                        float _2924 = _2903 + _2868;
                        float _2928 = inversesqrt(dot(vec3(_2922, _2923, _2924), vec3(_2922, _2923, _2924)));
                        float _2932 = dot(vec3(_553, _556, _559), vec3(_2901, _2902, _2903));
                        float _4259 = isnan(0.0) ? _2932 : (isnan(_2932) ? 0.0 : max(_2932, 0.0));
                        float _2935 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
                        float _2936 = dot(vec3(_553, _556, _559), vec3(_2928 * _2922, _2928 * _2923, _2928 * _2924));
                        float _4270 = isnan(0.0) ? _2936 : (isnan(_2936) ? 0.0 : max(_2936, 0.0));
                        float _2939 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
                        float _2943 = ((_2939 * _2939) * (_2921 + (-1.0))) + 1.0;
                        float _2944 = _2879 * _2920;
                        float _2945 = _2944 * _2944;
                        float _2948 = ((1.0 - _2945) * _2869) + _2945;
                        float _4281 = isnan(0.0) ? _2948 : (isnan(_2948) ? 0.0 : max(_2948, 0.0));
                        float _2949 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
                        float _2950 = 1.0 - _2920;
                        float _2960 = (0.5 / (((_2949 * ((_2935 * _2950) + _2920)) + 9.9999999392252902907785028219223e-09) + (((_2949 * _2950) + _2920) * _2935))) * _2949;
                        float _4292 = isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : max(_2960, 0.0));
                        float _2971 = (((_2921 * 3.1415927410125732421875) * (isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0)))) / ((_2943 * _2943) * ((_2886 * 2.1991131305694580078125) + 3.141590118408203125))) * _2875;
                        _2723 = (_2890 * _2838.x) + _2796;
                        _2724 = (_2890 * _2838.y) + _2797;
                        _2725 = (_2890 * _2838.z) + _2798;
                        _2720 = (_2971 * _2855.x) + _2793;
                        _2721 = (_2971 * _2855.y) + _2794;
                        _2722 = (_2971 * _2855.z) + _2795;
                        if (_2800 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2793 = _2720;
                            _2794 = _2721;
                            _2795 = _2722;
                            _2796 = _2723;
                            _2797 = _2724;
                            _2798 = _2725;
                            _2799 = _2800;
                        }
                    }
                    frontier_phi_66_pred = _2720;
                    frontier_phi_66_pred_1 = _2725;
                    frontier_phi_66_pred_2 = _2724;
                    frontier_phi_66_pred_3 = _2723;
                    frontier_phi_66_pred_4 = _2722;
                    frontier_phi_66_pred_5 = _2721;
                }
                _2496 = frontier_phi_66_pred;
                _2506 = frontier_phi_66_pred_1;
                _2504 = frontier_phi_66_pred_2;
                _2502 = frontier_phi_66_pred_3;
                _2500 = frontier_phi_66_pred_4;
                _2498 = frontier_phi_66_pred_5;
                uint _2655 = _2654 + 1u;
                if (_2655 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2648 = _2496;
                    _2649 = _2498;
                    _2650 = _2500;
                    _2651 = _2502;
                    _2652 = _2504;
                    _2653 = _2506;
                    _2654 = _2655;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2495 = _2496;
            _2497 = _2498;
            _2499 = _2500;
            _2501 = _2502;
            _2503 = _2504;
            _2505 = _2506;
        }
        uvec4 _2509 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2510 = _2509.z;
        uint _2512 = (_2510 >> 8u) & 15u;
        float _2616;
        float _2618;
        float _2620;
        float _2622;
        float _2624;
        float _2626;
        if (((4294967295u << _2512) & _2394) == 0u)
        {
            _2616 = _2495;
            _2618 = _2497;
            _2620 = _2499;
            _2622 = _2501;
            _2624 = _2503;
            _2626 = _2505;
        }
        else
        {
            float _2641 = inversesqrt(dot(vec3(_2348, _2349, _2350), vec3(_2348, _2349, _2350)));
            float _2642 = _2641 * _2348;
            float _2643 = _2641 * _2349;
            float _2644 = _2641 * _2350;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2512 < ((_2510 >> 12u) & 15u))
            {
                float _2617;
                float _2619;
                float _2621;
                float _2623;
                float _2625;
                float _2627;
                float _2776 = _2495;
                float _2777 = _2497;
                float _2778 = _2499;
                float _2779 = _2501;
                float _2780 = _2503;
                float _2781 = _2505;
                uint _2782 = _2512;
                uint _2791;
                bool _2792;
                for (;;)
                {
                    _2791 = texelFetch(g_lightClassification, int((((_2388 << 5u) + (_2374 << 9u)) + (_2782 << 2u)) >> 2u)).x;
                    _2792 = _2791 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2792)
                    {
                        frontier_phi_77_pred = _2781;
                        frontier_phi_77_pred_1 = _2780;
                        frontier_phi_77_pred_2 = _2779;
                        frontier_phi_77_pred_3 = _2778;
                        frontier_phi_77_pred_4 = _2777;
                        frontier_phi_77_pred_5 = _2776;
                    }
                    else
                    {
                        float _2985;
                        float _2986;
                        float _2987;
                        float _2988;
                        float _2989;
                        float _2990;
                        float _3279;
                        float _3280;
                        float _3281;
                        float _3282;
                        float _3283;
                        float _3284;
                        float _2998 = _2776;
                        float _2999 = _2777;
                        float _3000 = _2778;
                        float _3001 = _2779;
                        float _3002 = _2780;
                        float _3003 = _2781;
                        uint _3004 = _2791;
                        uint _3005;
                        vec4 _3030;
                        float _3031;
                        vec4 _3046;
                        vec3 _3058;
                        vec4 _3073;
                        vec4 _3088;
                        float _3135;
                        bool _3136;
                        for (;;)
                        {
                            uint _3015 = ((_2782 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3004));
                            _3005 = (_3004 + 4294967295u) & _3004;
                            uint _3017 = _3015 * 40u;
                            _3030 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3017)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3017 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3017 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3017 + 3u)).x));
                            _3031 = _3030.w;
                            uint _3033 = (_3015 * 40u) + 4u;
                            _3046 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3033)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 3u)).x));
                            uint _3048 = (_3015 * 40u) + 8u;
                            _3058 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3048)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3048 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3048 + 2u)).x));
                            uint _3060 = (_3015 * 40u) + 16u;
                            _3073 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3060)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3060 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3060 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3060 + 3u)).x));
                            uint _3075 = (_3015 * 40u) + 20u;
                            _3088 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3075)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3075 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3075 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3075 + 3u)).x));
                            uint _3091 = (_3015 * 40u) + 24u;
                            vec4 _3104 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3091)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3091 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3091 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3091 + 3u)).x));
                            uint _3110 = (_3015 * 40u) + 28u;
                            vec4 _3123 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3110)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3110 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3110 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3110 + 3u)).x));
                            _3135 = fma(_2350, _3123.z, fma(_2349, _3123.y, _3123.x * _2348)) + _3123.w;
                            _3136 = !((fma(_2350, _3104.z, fma(_2349, _3104.y, _3104.x * _2348)) + _3104.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3136)
                            {
                                float _3163 = _3030.x - _2348;
                                float _3164 = _3030.y - _2349;
                                float _3165 = _3030.z - _2350;
                                float _3166 = dot(vec3(_3163, _3164, _3165), vec3(_3163, _3164, _3165));
                                float _3169 = inversesqrt(_3166);
                                float _3170 = _3169 * _3163;
                                float _3171 = _3169 * _3164;
                                float _3172 = _3169 * _3165;
                                float _3176 = 1.0 - (_3166 / (_3031 * _3031));
                                float _4303 = isnan(0.0) ? _3176 : (isnan(_3176) ? 0.0 : max(_3176, 0.0));
                                float _3177 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
                                float _3181 = sqrt(_3166) * _3046.w;
                                float _3183 = 1.39999997615814208984375 / (_3181 + 1.39999997615814208984375);
                                float _3184 = _3183 * _3183;
                                float _3187 = ((1.0 - _3184) * dot(vec3(_3170, _3171, _3172), vec3(_553, _556, _559))) + _3184;
                                float _3190 = _3181 * _3181;
                                float _3194 = (fma(_2350, _3073.z, fma(_2349, _3073.y, _3073.x * _2348)) + _3073.w) / _3135;
                                float _3195 = (fma(_2350, _3088.z, fma(_2349, _3088.y, _3088.x * _2348)) + _3088.w) / _3135;
                                float _3199 = 1.0 - dot(vec2(_3194, _3195), vec2(_3194, _3195));
                                float _4319 = isnan(0.0) ? _3199 : (isnan(_3199) ? 0.0 : max(_3199, 0.0));
                                float _3200 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
                                float _3201 = _3200 * (((isnan(0.0) ? _3187 : (isnan(_3187) ? 0.0 : max(_3187, 0.0))) * _3177) / ((_3190 * 0.699999988079071044921875) + 1.0));
                                float _3213 = exp2(log2(1.0 / ((_3190 * 3.5) + 5.0)) * 0.25);
                                float _3214 = 1.0 - _628;
                                float _3221 = sqrt(1.0 - ((1.0 - (_3214 * _3214)) * (1.0 - (_3213 * _3213))));
                                float _3222 = _3221 * _3221;
                                float _3223 = _3222 * _3222;
                                float _3224 = _3170 - _2642;
                                float _3225 = _3171 - _2643;
                                float _3226 = _3172 - _2644;
                                float _3230 = inversesqrt(dot(vec3(_3224, _3225, _3226), vec3(_3224, _3225, _3226)));
                                float _3234 = dot(vec3(_553, _556, _559), vec3((-0.0) - _2642, (-0.0) - _2643, (-0.0) - _2644));
                                float _4330 = isnan(0.0) ? _3234 : (isnan(_3234) ? 0.0 : max(_3234, 0.0));
                                float _3237 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
                                float _3238 = dot(vec3(_553, _556, _559), vec3(_3230 * _3224, _3230 * _3225, _3230 * _3226));
                                float _4341 = isnan(0.0) ? _3238 : (isnan(_3238) ? 0.0 : max(_3238, 0.0));
                                float _3241 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
                                float _3245 = ((_3241 * _3241) * (_3223 + (-1.0))) + 1.0;
                                float _3246 = _3183 * _3222;
                                float _3247 = _3246 * _3246;
                                float _3253 = ((1.0 - _3247) * dot(vec3(_553, _556, _559), vec3(_3170, _3171, _3172))) + _3247;
                                float _4352 = isnan(0.0) ? _3253 : (isnan(_3253) ? 0.0 : max(_3253, 0.0));
                                float _3254 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
                                float _3255 = 1.0 - _3222;
                                float _3265 = (0.5 / (((_3254 * ((_3237 * _3255) + _3222)) + 9.9999999392252902907785028219223e-09) + (((_3254 * _3255) + _3222) * _3237))) * _3254;
                                float _4363 = isnan(0.0) ? _3265 : (isnan(_3265) ? 0.0 : max(_3265, 0.0));
                                float _3275 = (_3200 * _3177) * (((_3223 * 3.1415927410125732421875) * (isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0)))) / ((_3245 * _3245) * ((_3190 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3201 * _3046.y;
                                frontier_phi_83_pred_1 = _3201 * _3046.x;
                                frontier_phi_83_pred_2 = _3275 * _3058.z;
                                frontier_phi_83_pred_3 = _3275 * _3058.y;
                                frontier_phi_83_pred_4 = _3275 * _3058.x;
                                frontier_phi_83_pred_5 = _3201 * _3046.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3283 = frontier_phi_83_pred;
                            _3282 = frontier_phi_83_pred_1;
                            _3281 = frontier_phi_83_pred_2;
                            _3280 = frontier_phi_83_pred_3;
                            _3279 = frontier_phi_83_pred_4;
                            _3284 = frontier_phi_83_pred_5;
                            _2988 = _3282 + _3001;
                            _2989 = _3283 + _3002;
                            _2990 = _3284 + _3003;
                            _2985 = _3279 + _2998;
                            _2986 = _3280 + _2999;
                            _2987 = _3281 + _3000;
                            if (_3005 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2998 = _2985;
                                _2999 = _2986;
                                _3000 = _2987;
                                _3001 = _2988;
                                _3002 = _2989;
                                _3003 = _2990;
                                _3004 = _3005;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2990;
                        frontier_phi_77_pred_1 = _2989;
                        frontier_phi_77_pred_2 = _2988;
                        frontier_phi_77_pred_3 = _2987;
                        frontier_phi_77_pred_4 = _2986;
                        frontier_phi_77_pred_5 = _2985;
                    }
                    _2627 = frontier_phi_77_pred;
                    _2625 = frontier_phi_77_pred_1;
                    _2623 = frontier_phi_77_pred_2;
                    _2621 = frontier_phi_77_pred_3;
                    _2619 = frontier_phi_77_pred_4;
                    _2617 = frontier_phi_77_pred_5;
                    uint _2783 = _2782 + 1u;
                    if (_2783 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2776 = _2617;
                        _2777 = _2619;
                        _2778 = _2621;
                        _2779 = _2623;
                        _2780 = _2625;
                        _2781 = _2627;
                        _2782 = _2783;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2621;
                frontier_phi_58_59_ladder_1 = _2627;
                frontier_phi_58_59_ladder_2 = _2625;
                frontier_phi_58_59_ladder_3 = _2623;
                frontier_phi_58_59_ladder_4 = _2619;
                frontier_phi_58_59_ladder_5 = _2617;
            }
            else
            {
                frontier_phi_58_59_ladder = _2499;
                frontier_phi_58_59_ladder_1 = _2505;
                frontier_phi_58_59_ladder_2 = _2503;
                frontier_phi_58_59_ladder_3 = _2501;
                frontier_phi_58_59_ladder_4 = _2497;
                frontier_phi_58_59_ladder_5 = _2495;
            }
            _2616 = frontier_phi_58_59_ladder_5;
            _2618 = frontier_phi_58_59_ladder_4;
            _2620 = frontier_phi_58_59_ladder;
            _2622 = frontier_phi_58_59_ladder_3;
            _2624 = frontier_phi_58_59_ladder_2;
            _2626 = frontier_phi_58_59_ladder_1;
        }
        float _2631 = isnan(1.0) ? _612 : (isnan(_612) ? 1.0 : min(_612, 1.0));
        _2407 = (_2631 * _2622) + _1840;
        _2409 = (_2631 * _2624) + _1842;
        _2411 = (_2631 * _2626) + _1844;
        _2413 = ((_2616 * _596) * _2631) + _2188;
        _2415 = ((_2618 * _598) * _2631) + _2190;
        _2417 = ((_2620 * _599) * _2631) + _2192;
    }
    else
    {
        _2407 = _1840;
        _2409 = _1842;
        _2411 = _1844;
        _2413 = _2188;
        _2415 = _2190;
        _2417 = _2192;
    }
    float _4379 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
    float _4390 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
    float _4401 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
    float _2434 = ((isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0))) * (_2407 + ((isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0))) * _612))) + ((_2413 + ((isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0))) * _1453)) * cbPerFrame._m0[3u].x);
    float _2435 = ((isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0))) * (_2409 + ((isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0))) * _612))) + ((_2415 + ((isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0))) * _1453)) * cbPerFrame._m0[3u].x);
    float _2436 = ((isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0))) * (_2411 + ((isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0))) * _612))) + ((_2417 + ((isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0))) * _1453)) * cbPerFrame._m0[3u].x);
    uint _2437 = _252 + 6u;
    float _2445 = _532 / cbSceneParam._m0[86u].x;
    float _2446 = _533 / cbSceneParam._m0[86u].y;
    vec4 _2460 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2445, _2446, (log2((isnan(cbSceneParam._m0[77u].w) ? _452 : (isnan(_452) ? cbSceneParam._m0[77u].w : min(_452, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2462 = _2460.x;
    float _2463 = _2460.y;
    float _2464 = _2460.z;
    float _2465 = _2460.w;
    float _2558;
    float _2560;
    float _2562;
    float _2564;
    if (_452 > cbSceneParam._m0[78u].w)
    {
        float _2520 = isnan(_452) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _452 : min(cbSceneParam._m0[80u].w, _452));
        float _2521 = _2520 / _452;
        float _2532 = _2521 * _504;
        float _2533 = _505 * _2521;
        float _2534 = (-0.0) - _2533;
        float _2536 = _2521 * _506;
        float _2538 = (cbSceneParam._m0[77u].w * _2534) / _2520;
        float _2539 = _2538 + cbSceneParam._m0[79u].w;
        float _2540 = cbSceneParam._m0[79u].w - _2533;
        float _2546 = sqrt(((_2532 * _2532) + (_2533 * _2533)) + (_2536 * _2536));
        float _2549 = (1.0 - (cbSceneParam._m0[77u].w / _2520)) * _2546;
        float _2554 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2556 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2733;
        if (abs((_2534 - _2538) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2733 = ((((_2539 > 0.0) ? exp2(_2554 * _2539) : (2.0 - exp2(_2556 * _2539))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2549;
        }
        else
        {
            float _2677 = 1.0 / cbSceneParam._m0[80u].x;
            float _2678 = isnan(_2540) ? _2539 : (isnan(_2539) ? _2540 : max(_2539, _2540));
            float _2679 = isnan(_2540) ? _2539 : (isnan(_2539) ? _2540 : min(_2539, _2540));
            float _2688 = isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : min(_2678, 0.0));
            float _2689 = isnan(0.0) ? _2679 : (isnan(_2679) ? 0.0 : min(_2679, 0.0));
            _2733 = ((abs(_2546 / _2534) * cbSceneParam._m0[80u].y) * ((((_2688 - _2689) * 2.0) - ((exp2(_2554 * (isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0)))) - exp2(_2554 * (isnan(0.0) ? _2679 : (isnan(_2679) ? 0.0 : max(_2679, 0.0))))) * _2677)) - ((exp2(_2556 * _2688) - exp2(_2556 * _2689)) * _2677))) + (_2549 * cbSceneParam._m0[80u].z);
        }
        vec4 _2735 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2445, _2446, 1.0), 0.0);
        float _2744 = exp2((_2733 * (-1.44269502162933349609375)) * (1.0 - _2735.w));
        float _2745 = log2(_2744);
        float _2761 = log2(_2465);
        _2558 = (exp2(_2761 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2745 * cbSceneParam._m0[78u].x)) * _2735.x) / cbSceneParam._m0[78u].x)) + _2462;
        _2560 = (exp2(_2761 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2745 * cbSceneParam._m0[78u].y)) * _2735.y) / cbSceneParam._m0[78u].y)) + _2463;
        _2562 = (exp2(_2761 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2745 * cbSceneParam._m0[78u].z)) * _2735.z) / cbSceneParam._m0[78u].z)) + _2464;
        _2564 = _2744 * _2465;
    }
    else
    {
        _2558 = _2462;
        _2560 = _2463;
        _2562 = _2464;
        _2564 = _2465;
    }
    bool _2771;
    vec4 _2574;
    vec4 _2596;
    float _2598;
    float _2602;
    float _2603;
    float _2604;
    float _2605;
    bool _2615;
    for (;;)
    {
        _2574 = cbMatDynParam._m0[0u];
        float _2576 = roundEven(_2574.y);
        bool _2577 = _2576 == 3.0;
        float _2578 = log2(_2564);
        float _2585 = exp2(_2578 * cbSceneParam._m0[78u].x) * _2434;
        float _2586 = exp2(_2578 * cbSceneParam._m0[78u].y) * _2435;
        float _2587 = exp2(_2578 * cbSceneParam._m0[78u].z) * _2436;
        float _2594 = _520 + (-0.5);
        _2596 = cbMtdParam._m0[1u];
        _2598 = _2596.y * _2594;
        float _2601 = (_2576 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2602 = _2601 * (_2577 ? _2585 : (_2585 + (cbSceneParam._m0[72u].w * _2558)));
        _2603 = _2601 * (_2577 ? _2586 : (_2586 + (cbSceneParam._m0[72u].w * _2560)));
        _2604 = _2601 * (_2577 ? _2587 : (_2587 + (cbSceneParam._m0[72u].w * _2562)));
        _2605 = _2594 * 0.999000012874603271484375;
        _2615 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2615)
        {
            if ((cbInstanceData._m0[_252 + 7u].x + _2605) < 0.5)
            {
                _2771 = true;
                break;
            }
        }
        uint _2712 = _572 + uint(_2574.w);
        if ((cbInstanceData._m0[_2712].w < 1.0) && ((cbInstanceData._m0[_2712].w + _2605) < 0.5))
        {
            _2771 = true;
            break;
        }
        if ((_2598 + 1.0) < _2596.x)
        {
            _2771 = true;
            break;
        }
        _2771 = false;
        break;
    }
    float _2976;
    if (_2771)
    {
        discard_state = true;
        _2976 = 0.0;
    }
    else
    {
        _2976 = cbInstanceData._m0[_2437].w;
    }
    SV_Target.x = _2602;
    SV_Target.y = _2603;
    SV_Target.z = _2604;
    SV_Target.w = _2976;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2437].w;
    discard_exit();
}


