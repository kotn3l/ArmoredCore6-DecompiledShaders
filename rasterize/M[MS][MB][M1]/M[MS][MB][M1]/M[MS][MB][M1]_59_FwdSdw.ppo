#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1274;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _224 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _225 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _226 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _232 = inversesqrt(dot(vec3(_224, _225, _226), vec3(_224, _225, _226)));
    float _233 = _232 * _224;
    float _234 = _232 * _225;
    float _235 = _232 * _226;
    float _239 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _240 = _239 * NORMAL.x;
    float _241 = _239 * NORMAL.y;
    float _242 = _239 * NORMAL.z;
    float _246 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _247 = _246 * TANGENT.x;
    float _248 = _246 * TANGENT.y;
    float _249 = _246 * TANGENT.z;
    float _258 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _260 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _261 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3882 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    float _3893 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    float _3904 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    uint _271 = uint(roundEven(NORMAL.w)) * 13u;
    uint _276 = _271 + 1u;
    uint _280 = _271 + 2u;
    float _289 = sqrt(((cbInstanceData._m0[_276].x * cbInstanceData._m0[_276].x) + (cbInstanceData._m0[_271].x * cbInstanceData._m0[_271].x)) + (cbInstanceData._m0[_280].x * cbInstanceData._m0[_280].x));
    float _290 = _289 * TEXCOORD.z;
    float _291 = _289 * TEXCOORD.w;
    vec4 _304 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _290) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _291) + cbTextureTilingScale._m0[13u].w));
    vec4 _327 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _332 = _327.x * cbMtdParam._m0[9u].x;
    float _333 = _327.y * cbMtdParam._m0[9u].y;
    float _334 = _327.z * cbMtdParam._m0[9u].z;
    float _338 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _304.x) * _332;
    float _341 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _304.y) * _333;
    float _344 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _304.z) * _334;
    float _351 = ((_332 - _338) * (isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0)))) + _338;
    float _352 = ((_333 - _341) * (isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0)))) + _341;
    float _353 = ((_334 - _344) * (isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0)))) + _344;
    vec4 _372 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _290) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _291) + cbTextureTilingScale._m0[14u].w));
    vec4 _392 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _290) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _291) + cbTextureTilingScale._m0[20u].w));
    vec4 _418 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _422 = _418.z;
    float _426 = (_418.x * 2.0) + (-1.0);
    float _427 = (_418.y * 2.0) + (-1.0);
    float _428 = dot(vec2(_426, _427), vec2(_426, _427));
    float _3915 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _433 = sqrt(1.0 - (isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0))));
    float _438 = _426 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_392.x * 2.0) + (-1.0)));
    float _439 = _427 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_392.y * 2.0) + (-1.0)));
    float _442 = fma(_433, _240, fma(_439, _247, _438 * _233));
    float _445 = fma(_433, _241, fma(_439, _248, _438 * _234));
    float _448 = fma(_433, _242, fma(_439, _249, _438 * _235));
    float _452 = inversesqrt(dot(vec3(_442, _445, _448), vec3(_442, _445, _448)));
    vec4 _488 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _290) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _291) + cbTextureTilingScale._m0[11u].w));
    float _490 = _488.x;
    float _491 = 1.0 - _490;
    float _498 = ((_490 - _491) * cbMtdParam._m0[24u].z) + _491;
    float _500 = (cbMtdParam._m0[19u].x + dot(vec4(_452 * _442, _452 * _445, _452 * _448, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_498 * cbMtdParam._m0[21u].z);
    float _3926 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _501 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
    float _503 = (-0.0) - cbMtdParam._m0[24u].x;
    float _505 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _506 = isnan(1.0) ? _505 : (isnan(_505) ? 1.0 : min(_505, 1.0));
    float _513 = _501 - ((_501 * TEXCOORD_8.x) * _506);
    float _514 = _501 - ((_501 * TEXCOORD_8.y) * _506);
    float _515 = _501 - ((_501 * TEXCOORD_8.z) * _506);
    float _522 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _526 = ((isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : min(_522, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _534 = (_526 - (((_498 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _526))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3957 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _535 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
    float _539 = ((_513 * ((_372.x * cbMtdParam._m0[18u].x) - _351)) * _535) + _351;
    float _540 = ((_514 * ((_372.y * cbMtdParam._m0[18u].y) - _352)) * _535) + _352;
    float _541 = ((_515 * ((_372.z * cbMtdParam._m0[18u].z) - _353)) * _535) + _353;
    vec4 _553 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _290) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _291) + cbTextureTilingScale._m0[19u].w));
    float _555 = _553.x;
    float _556 = 1.0 - _555;
    float _583 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_555 - _556) * cbMtdParam._m0[24u].w) + _556) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3968 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _584 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
    float _592 = ((((cbMtdParam._m0[10u].x - _539) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _584) + _539;
    float _593 = ((((cbMtdParam._m0[10u].y - _540) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _584) + _540;
    float _594 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _541)) * _584) + _541;
    vec4 _607 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _609 = _607.x;
    float _612 = _609 - ((_609 * _513) * _535);
    float _614 = _612 - (_612 * _584);
    float _619 = (((_392.z - _422) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _422;
    vec4 _633 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _290) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _291) + cbTextureTilingScale._m0[15u].w));
    float _640 = (_633.x * 2.0) + (-1.0);
    float _641 = (_633.y * 2.0) + (-1.0);
    float _642 = dot(vec2(_640, _641), vec2(_640, _641));
    float _3979 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _651 = (((_633.z - _619) * _513) * _535) + _619;
    float _654 = ((cbMtdParam._m0[23u].y - _651) * _584) + _651;
    vec4 _673 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _290) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _291) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _679 = (_673.x * 2.0) + (-1.0);
    float _680 = (_673.y * 2.0) + (-1.0);
    float _681 = dot(vec2(_679, _680), vec2(_679, _680));
    float _3990 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
    float _701 = (((cbMtdParam._m0[21u].x * _438) + ((_640 - _438) * _513)) * _535) + _438;
    float _702 = (((cbMtdParam._m0[21u].x * _439) + ((_641 - _439) * _514)) * _535) + _439;
    float _703 = (((sqrt(1.0 - (isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0)))) - _433) * _515) * _535) + _433;
    float _714 = (((_679 - _701) + (_701 * cbMtdParam._m0[22u].z)) * _584) + _701;
    float _715 = (((_680 - _702) + (_702 * cbMtdParam._m0[22u].z)) * _584) + _702;
    float _716 = ((sqrt(1.0 - (isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0)))) - _703) * _584) + _703;
    float _718 = cbMtdParam._m0[22u].x + _418.w;
    float _721 = fma(_716, _240, fma(_715, _247, _714 * _233));
    float _724 = fma(_716, _241, fma(_715, _248, _714 * _234));
    float _727 = fma(_716, _242, fma(_715, _249, _714 * _235));
    float _731 = inversesqrt(dot(vec3(_721, _724, _727), vec3(_721, _724, _727)));
    float _732 = _731 * _721;
    float _733 = _731 * _724;
    float _734 = _731 * _727;
    float _4001 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _735 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
    float _4012 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
    float _4023 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _4034 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
    float _4045 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _4056 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _740 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
    float _754 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _794 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _804 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _794);
    float _805 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _794);
    float _806 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _794);
    float _810 = inversesqrt(dot(vec3(_804, _805, _806), vec3(_804, _805, _806)));
    float _811 = _804 * _810;
    float _812 = _805 * _810;
    float _813 = _806 * _810;
    float _819 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _820 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _841 = fma(_734, cbSceneParam._m0[5u].z, fma(_733, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _732));
    float _844 = fma(_734, cbSceneParam._m0[6u].z, fma(_733, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _732));
    float _847 = fma(_734, cbSceneParam._m0[7u].z, fma(_733, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _732));
    uint _861 = (_271 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _867 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0)))) * cbInstanceData._m0[_861].x;
    float _868 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0)))) * cbInstanceData._m0[_861].y;
    float _869 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0)))) * cbInstanceData._m0[_861].z;
    float _4067 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
    float _870 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
    float _4078 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
    float _871 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
    float _4089 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
    float _872 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
    float _873 = 1.0 - _740;
    float _874 = _870 * _873;
    float _875 = _871 * _873;
    float _876 = _872 * _873;
    float _881 = (_870 + (-0.039999999105930328369140625)) * _740;
    float _882 = (_871 + (-0.039999999105930328369140625)) * _740;
    float _883 = (_872 + (-0.039999999105930328369140625)) * _740;
    float _884 = _881 + 0.039999999105930328369140625;
    float _886 = _882 + 0.039999999105930328369140625;
    float _887 = _883 + 0.039999999105930328369140625;
    vec4 _896 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _819, cbSceneParam._m0[86u].y * _820));
    float _900 = ((isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0))) * TEXCOORD_5.w) * _896.x;
    float _901 = dot(vec3(_732, _733, _734), vec3(_811, _812, _813));
    float _904 = _901 * 2.0;
    float _908 = (_904 * _732) - _811;
    float _909 = (_904 * _733) - _812;
    float _910 = (_904 * _734) - _813;
    float _914 = abs(dot(vec3(_811, _812, _813), vec3(_732, _733, _734)));
    float _4100 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
    float _916 = sqrt(_735);
    float _929 = exp2((_916 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_916 * 3.0));
    float _935 = (1.0 - _929) * ((_916 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _936 = _929 * _916;
    float _964 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _968 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _972 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1273;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _998 = fma(_972, cbModelParam._m0[26u].z, fma(_968, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _964));
        float _1002 = fma(_972, cbModelParam._m0[27u].z, fma(_968, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _964));
        float _1006 = fma(_972, cbModelParam._m0[28u].z, fma(_968, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _964));
        float _1031 = _964 + _732;
        float _1032 = _968 + _733;
        float _1033 = _972 + _734;
        float _1043 = fma(_1033, cbModelParam._m0[26u].z, fma(_1032, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1031)) - _998;
        float _1044 = fma(_1033, cbModelParam._m0[27u].z, fma(_1032, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1031)) - _1002;
        float _1045 = fma(_1033, cbModelParam._m0[28u].z, fma(_1032, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1031)) - _1006;
        float _1049 = inversesqrt(dot(vec3(_1043, _1044, _1045), vec3(_1043, _1044, _1045)));
        float _1062 = ((_1049 * _1043) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_998 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1063 = ((_1049 * _1044) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1002 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1064 = ((_1049 * _1045) / cbModelParam._m0[34u].z) + ((((((_1006 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1067 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1062, _1063, _1064), 0.0);
        vec4 _1074 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1062, _1063, _1064), 0.0);
        vec4 _1081 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1062, _1063, _1064), 0.0);
        vec4 _1088 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1062, _1063, _1064), 0.0);
        float _1101 = exp2((_1067.w + (-0.5)) * 20.0) * 2.0;
        float _1102 = _1101 * (_1067.x + (-0.5));
        float _1103 = _1101 * (_1067.y + (-0.5));
        float _1104 = _1101 * (_1067.z + (-0.5));
        float _1111 = exp2((_1074.w + (-0.5)) * 20.0) * 2.0;
        float _1112 = _1111 * (_1074.x + (-0.5));
        float _1113 = _1111 * (_1074.y + (-0.5));
        float _1114 = _1111 * (_1074.z + (-0.5));
        float _1121 = exp2((_1081.w + (-0.5)) * 20.0) * 2.0;
        float _1122 = _1121 * (_1081.x + (-0.5));
        float _1123 = _1121 * (_1081.y + (-0.5));
        float _1124 = _1121 * (_1081.z + (-0.5));
        float _1131 = exp2((_1088.w + (-0.5)) * 20.0) * 2.0;
        float _1132 = _1131 * (_1088.x + (-0.5));
        float _1133 = _1131 * (_1088.y + (-0.5));
        float _1134 = _1131 * (_1088.z + (-0.5));
        float _1135 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1136 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1137 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1138 = _1102 * 0.5;
        float _1139 = _1112 * 0.5;
        float _1140 = _1122 * 0.5;
        float _1141 = dot(vec3(_1138, _1139, _1140), vec3(_1138, _1139, _1140));
        float _1146 = (_1141 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1141);
        float _1155 = (dot(vec3(_732, _733, _734), vec3(_1146 * _1138, _1146 * _1139, _1146 * _1140)) + 1.0) * 0.5;
        float _4126 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1165 = sqrt(((_1139 * _1139) + (_1138 * _1138)) + (_1140 * _1140)) / (_1135 + 9.9999997473787516355514526367188e-06);
        float _4137 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1166 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
        float _1167 = _1166 * 2.0;
        float _1171 = (1.0 - _1166) / (_1166 + 1.0);
        float _4148 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1172 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
        float _1181 = ((((1.0 - _1172) * (_1167 + 2.0)) * exp2(log2(isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0))) * (_1167 + 1.0))) + _1172) * _1135;
        float _1182 = _1103 * 0.5;
        float _1183 = _1113 * 0.5;
        float _1184 = _1123 * 0.5;
        float _1185 = dot(vec3(_1182, _1183, _1184), vec3(_1182, _1183, _1184));
        float _1190 = (_1185 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1185);
        float _1198 = (dot(vec3(_732, _733, _734), vec3(_1190 * _1182, _1190 * _1183, _1190 * _1184)) + 1.0) * 0.5;
        float _4159 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1207 = sqrt(((_1183 * _1183) + (_1182 * _1182)) + (_1184 * _1184)) / (_1136 + 9.9999997473787516355514526367188e-06);
        float _4170 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1208 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
        float _1209 = _1208 * 2.0;
        float _1213 = (1.0 - _1208) / (_1208 + 1.0);
        float _4181 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1214 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
        float _1223 = ((((1.0 - _1214) * (_1209 + 2.0)) * exp2(log2(isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0))) * (_1209 + 1.0))) + _1214) * _1136;
        float _1224 = _1104 * 0.5;
        float _1225 = _1114 * 0.5;
        float _1226 = _1124 * 0.5;
        float _1227 = dot(vec3(_1224, _1225, _1226), vec3(_1224, _1225, _1226));
        float _1232 = (_1227 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1227);
        float _1240 = (dot(vec3(_732, _733, _734), vec3(_1232 * _1224, _1232 * _1225, _1232 * _1226)) + 1.0) * 0.5;
        float _4192 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1249 = sqrt(((_1225 * _1225) + (_1224 * _1224)) + (_1226 * _1226)) / (_1137 + 9.9999997473787516355514526367188e-06);
        float _4203 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1250 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
        float _1251 = _1250 * 2.0;
        float _1255 = (1.0 - _1250) / (_1250 + 1.0);
        float _4214 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1256 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
        float _1265 = ((((1.0 - _1256) * (_1251 + 2.0)) * exp2(log2(isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0))) * (_1251 + 1.0))) + _1256) * _1137;
        _1273 = _1104;
        _1275 = _1103;
        _1276 = _1102;
        _1277 = _1114;
        _1278 = _1113;
        _1279 = _1112;
        _1280 = _1124;
        _1281 = _1123;
        _1282 = _1122;
        _1283 = _1137;
        _1284 = _1136;
        _1285 = _1135;
        _1286 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0)));
        _1287 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0)));
        _1288 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0)));
    }
    else
    {
        _1273 = _1274;
        _1275 = _1274;
        _1276 = _1274;
        _1277 = _1274;
        _1278 = _1274;
        _1279 = _1274;
        _1280 = _1274;
        _1281 = _1274;
        _1282 = _1274;
        _1283 = _1274;
        _1284 = _1274;
        _1285 = _1274;
        _1286 = 0.0;
        _1287 = 0.0;
        _1288 = 0.0;
    }
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1313 = fma(_972, cbModelParam._m0[30u].z, fma(_968, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _964));
        float _1317 = fma(_972, cbModelParam._m0[31u].z, fma(_968, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _964));
        float _1321 = fma(_972, cbModelParam._m0[32u].z, fma(_968, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _964));
        float _1344 = _964 + _732;
        float _1345 = _968 + _733;
        float _1346 = _972 + _734;
        float _1356 = fma(_1346, cbModelParam._m0[30u].z, fma(_1345, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1344)) - _1313;
        float _1357 = fma(_1346, cbModelParam._m0[31u].z, fma(_1345, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1344)) - _1317;
        float _1358 = fma(_1346, cbModelParam._m0[32u].z, fma(_1345, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1344)) - _1321;
        float _1362 = inversesqrt(dot(vec3(_1356, _1357, _1358), vec3(_1356, _1357, _1358)));
        float _1375 = ((_1362 * _1356) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1313 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1376 = ((_1362 * _1357) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1317 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1377 = ((_1362 * _1358) / cbModelParam._m0[35u].z) + ((((((_1321 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1379 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1375, _1376, _1377), 0.0);
        vec4 _1386 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1375, _1376, _1377), 0.0);
        vec4 _1393 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1375, _1376, _1377), 0.0);
        vec4 _1400 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1375, _1376, _1377), 0.0);
        float _1412 = exp2((_1379.w + (-0.5)) * 20.0) * 2.0;
        float _1413 = _1412 * (_1379.x + (-0.5));
        float _1414 = _1412 * (_1379.y + (-0.5));
        float _1415 = _1412 * (_1379.z + (-0.5));
        float _1422 = exp2((_1386.w + (-0.5)) * 20.0) * 2.0;
        float _1423 = _1422 * (_1386.x + (-0.5));
        float _1424 = _1422 * (_1386.y + (-0.5));
        float _1425 = _1422 * (_1386.z + (-0.5));
        float _1432 = exp2((_1393.w + (-0.5)) * 20.0) * 2.0;
        float _1433 = _1432 * (_1393.x + (-0.5));
        float _1434 = _1432 * (_1393.y + (-0.5));
        float _1435 = _1432 * (_1393.z + (-0.5));
        float _1442 = exp2((_1400.w + (-0.5)) * 20.0) * 2.0;
        float _1443 = _1442 * (_1400.x + (-0.5));
        float _1444 = _1442 * (_1400.y + (-0.5));
        float _1445 = _1442 * (_1400.z + (-0.5));
        float _1446 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1447 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1448 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1449 = _1413 * 0.5;
        float _1450 = _1423 * 0.5;
        float _1451 = _1433 * 0.5;
        float _1452 = dot(vec3(_1449, _1450, _1451), vec3(_1449, _1450, _1451));
        float _1457 = (_1452 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1452);
        float _1465 = (dot(vec3(_732, _733, _734), vec3(_1457 * _1449, _1457 * _1450, _1457 * _1451)) + 1.0) * 0.5;
        float _4255 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1474 = sqrt(((_1450 * _1450) + (_1449 * _1449)) + (_1451 * _1451)) / (_1446 + 9.9999997473787516355514526367188e-06);
        float _4266 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1475 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
        float _1476 = _1475 * 2.0;
        float _1480 = (1.0 - _1475) / (_1475 + 1.0);
        float _4277 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1481 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
        float _1490 = ((((1.0 - _1481) * (_1476 + 2.0)) * exp2(log2(isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0))) * (_1476 + 1.0))) + _1481) * _1446;
        float _1491 = _1414 * 0.5;
        float _1492 = _1424 * 0.5;
        float _1493 = _1434 * 0.5;
        float _1494 = dot(vec3(_1491, _1492, _1493), vec3(_1491, _1492, _1493));
        float _1499 = (_1494 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1494);
        float _1507 = (dot(vec3(_732, _733, _734), vec3(_1499 * _1491, _1499 * _1492, _1499 * _1493)) + 1.0) * 0.5;
        float _4288 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1516 = sqrt(((_1492 * _1492) + (_1491 * _1491)) + (_1493 * _1493)) / (_1447 + 9.9999997473787516355514526367188e-06);
        float _4299 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
        float _1517 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
        float _1518 = _1517 * 2.0;
        float _1522 = (1.0 - _1517) / (_1517 + 1.0);
        float _4310 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1523 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
        float _1532 = ((((1.0 - _1523) * (_1518 + 2.0)) * exp2(log2(isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0))) * (_1518 + 1.0))) + _1523) * _1447;
        float _1533 = _1415 * 0.5;
        float _1534 = _1425 * 0.5;
        float _1535 = _1435 * 0.5;
        float _1536 = dot(vec3(_1533, _1534, _1535), vec3(_1533, _1534, _1535));
        float _1541 = (_1536 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1536);
        float _1549 = (dot(vec3(_732, _733, _734), vec3(_1541 * _1533, _1541 * _1534, _1541 * _1535)) + 1.0) * 0.5;
        float _4321 = isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0));
        float _1558 = sqrt(((_1534 * _1534) + (_1533 * _1533)) + (_1535 * _1535)) / (_1448 + 9.9999997473787516355514526367188e-06);
        float _4332 = isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0));
        float _1559 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
        float _1560 = _1559 * 2.0;
        float _1564 = (1.0 - _1559) / (_1559 + 1.0);
        float _4343 = isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0));
        float _1565 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
        float _1574 = ((((1.0 - _1565) * (_1560 + 2.0)) * exp2(log2(isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0))) * (_1560 + 1.0))) + _1565) * _1448;
        _1582 = _1415;
        _1583 = _1414;
        _1584 = _1413;
        _1585 = _1425;
        _1586 = _1424;
        _1587 = _1423;
        _1588 = _1435;
        _1589 = _1434;
        _1590 = _1433;
        _1591 = _1448;
        _1592 = _1447;
        _1593 = _1446;
        _1594 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0)));
        _1595 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0)));
        _1596 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0)));
    }
    else
    {
        _1582 = _1274;
        _1583 = _1274;
        _1584 = _1274;
        _1585 = _1274;
        _1586 = _1274;
        _1587 = _1274;
        _1588 = _1274;
        _1589 = _1274;
        _1590 = _1274;
        _1591 = _1274;
        _1592 = _1274;
        _1593 = _1274;
        _1594 = 0.0;
        _1595 = 0.0;
        _1596 = 0.0;
    }
    float _1606 = (cbModelParam._m0[1u].x * (_1594 - _1286)) + _1286;
    float _1607 = (cbModelParam._m0[1u].x * (_1595 - _1287)) + _1287;
    float _1608 = (cbModelParam._m0[1u].x * (_1596 - _1288)) + _1288;
    float _1629 = fma(_1608, cbSceneParam._m0[89u].z, fma(_1607, cbSceneParam._m0[89u].y, _1606 * cbSceneParam._m0[89u].x));
    float _1632 = fma(_1608, cbSceneParam._m0[90u].z, fma(_1607, cbSceneParam._m0[90u].y, _1606 * cbSceneParam._m0[90u].x));
    float _1635 = fma(_1608, cbSceneParam._m0[91u].z, fma(_1607, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1606));
    float _1650 = _908 * 0.5;
    float _1651 = _909 * 0.5;
    float _1652 = _910 * 0.5;
    float _1653 = dot(vec4(_1650, _1651, _1652, 1.0), vec4(_1584, _1587, _1590, _1593));
    float _1656 = dot(vec4(_1650, _1651, _1652, 1.0), vec4(_1583, _1586, _1589, _1592));
    float _1659 = dot(vec4(_1650, _1651, _1652, 1.0), vec4(_1582, _1585, _1588, _1591));
    float _1693;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1666 = dot(vec4(_1650, _1651, _1652, 1.0), vec4(_1273, _1277, _1280, _1283));
        float _1670 = dot(vec4(_1650, _1651, _1652, 1.0), vec4(_1275, _1278, _1281, _1284));
        float _1674 = dot(vec4(_1650, _1651, _1652, 1.0), vec4(_1276, _1279, _1282, _1285));
        float _1681 = dot(vec4(cbModelParam._m0[39u]), vec4(_1650, _1651, _1652, 1.0));
        _1693 = dot(vec3(isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0)), isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0)), isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1681) ? 0.0 : (isnan(0.0) ? _1681 : max(0.0, _1681))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1693 = 1.0;
    }
    float _1704;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1695 = dot(vec4(cbModelParam._m0[40u]), vec4(_1650, _1651, _1652, 1.0));
        _1704 = dot(vec3(isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0)), isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0)), isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1695) ? 0.0 : (isnan(0.0) ? _1695 : max(0.0, _1695))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1704 = 1.0;
    }
    float _1708 = (_1704 * cbModelParam._m0[1u].x) + (_1693 * (1.0 - cbModelParam._m0[1u].x));
    float _1718 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _735);
    float _1719 = isnan(_1718) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1718 : min(cbModelParam._m0[25u].z, _1718));
    float _1799;
    float _1801;
    float _1803;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1766 = fma(_972, cbModelParam._m0[13u].z, fma(_968, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _964)) + cbModelParam._m0[13u].w;
        float _1770 = fma(_972, cbModelParam._m0[14u].z, fma(_968, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _964)) + cbModelParam._m0[14u].w;
        float _1774 = fma(_972, cbModelParam._m0[15u].z, fma(_968, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _964)) + cbModelParam._m0[15u].w;
        float _1777 = fma(_910, cbModelParam._m0[13u].z, fma(_909, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _908));
        float _1780 = fma(_910, cbModelParam._m0[14u].z, fma(_909, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _908));
        float _1783 = fma(_910, cbModelParam._m0[15u].z, fma(_909, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _908));
        float _1811;
        if (_1777 > 0.0)
        {
            _1811 = abs((1.0 - _1766) / _1777);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1777 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1766 + 1.0) / _1777);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1811 = frontier_phi_14_12_ladder;
        }
        float _1982;
        if (_1780 > 0.0)
        {
            _1982 = abs((1.0 - _1770) / _1780);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1780 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1770 + 1.0) / _1780);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1982 = frontier_phi_23_19_ladder;
        }
        float _2278;
        if (_1783 > 0.0)
        {
            _2278 = abs((1.0 - _1774) / _1783);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1783 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1774 + 1.0) / _1783);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2278 = frontier_phi_35_30_ladder;
        }
        float _2280 = isnan(_1982) ? _1811 : (isnan(_1811) ? _1982 : min(_1811, _1982));
        float _2281 = isnan(_2278) ? _2280 : (isnan(_2280) ? _2278 : min(_2280, _2278));
        float _2285 = (_2281 * _1777) + _1766;
        float _2286 = (_2281 * _1780) + _1770;
        float _2287 = (_2281 * _1783) + _1774;
        float _2288 = _2281 * 9.9999997473787516355514526367188e-05;
        float _2290 = (-1.0) - _2288;
        float _2292 = _2288 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2287 > _2292) || ((_2287 < _2290) || ((_2286 > _2292) || ((_2286 < _2290) || ((_2285 < _2290) || (_2285 > _2292))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2432 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2287, cbModelParam._m0[9u].z, fma(_2286, cbModelParam._m0[9u].y, _2285 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2287, cbModelParam._m0[10u].z, fma(_2286, cbModelParam._m0[10u].y, _2285 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2287, cbModelParam._m0[11u].z, fma(_2286, cbModelParam._m0[11u].y, _2285 * cbModelParam._m0[11u].x))), _1719);
            frontier_phi_13_35_ladder = _2432.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2432.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2432.x * cbModelParam._m0[1u].y;
        }
        _1799 = frontier_phi_13_35_ladder_2;
        _1801 = frontier_phi_13_35_ladder_1;
        _1803 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1787 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_908, _909, _910), _1719);
        _1799 = _1787.x * cbModelParam._m0[1u].y;
        _1801 = _1787.y * cbModelParam._m0[1u].y;
        _1803 = _1787.z * cbModelParam._m0[1u].y;
    }
    float _1807 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _735);
    float _1808 = isnan(_1807) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1807 : min(cbModelParam._m0[25u].w, _1807));
    float _1897;
    float _1899;
    float _1901;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1861 = fma(_972, cbModelParam._m0[21u].z, fma(_968, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _964)) + cbModelParam._m0[21u].w;
        float _1865 = fma(_972, cbModelParam._m0[22u].z, fma(_968, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _964)) + cbModelParam._m0[22u].w;
        float _1869 = fma(_972, cbModelParam._m0[23u].z, fma(_968, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _964)) + cbModelParam._m0[23u].w;
        float _1872 = fma(_910, cbModelParam._m0[21u].z, fma(_909, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _908));
        float _1875 = fma(_910, cbModelParam._m0[22u].z, fma(_909, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _908));
        float _1878 = fma(_910, cbModelParam._m0[23u].z, fma(_909, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _908));
        float _1987;
        if (_1872 > 0.0)
        {
            _1987 = abs((1.0 - _1861) / _1872);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1872 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1861 + 1.0) / _1872);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1987 = frontier_phi_25_21_ladder;
        }
        float _2305;
        if (_1875 > 0.0)
        {
            _2305 = abs((1.0 - _1865) / _1875);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1875 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1865 + 1.0) / _1875);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2305 = frontier_phi_37_32_ladder;
        }
        float _2643;
        if (_1878 > 0.0)
        {
            _2643 = abs((1.0 - _1869) / _1878);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1878 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1869 + 1.0) / _1878);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2643 = frontier_phi_47_44_ladder;
        }
        float _2645 = isnan(_2305) ? _1987 : (isnan(_1987) ? _2305 : min(_1987, _2305));
        float _2646 = isnan(_2643) ? _2645 : (isnan(_2645) ? _2643 : min(_2645, _2643));
        float _2650 = (_2646 * _1872) + _1861;
        float _2651 = (_2646 * _1875) + _1865;
        float _2652 = (_2646 * _1878) + _1869;
        float _2653 = _2646 * 9.9999997473787516355514526367188e-05;
        float _2654 = (-1.0) - _2653;
        float _2656 = _2653 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2652 > _2656) || ((_2652 < _2654) || ((_2651 > _2656) || ((_2651 < _2654) || ((_2650 < _2654) || (_2650 > _2656))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2774 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2652, cbModelParam._m0[17u].z, fma(_2651, cbModelParam._m0[17u].y, _2650 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2652, cbModelParam._m0[18u].z, fma(_2651, cbModelParam._m0[18u].y, _2650 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2652, cbModelParam._m0[19u].z, fma(_2651, cbModelParam._m0[19u].y, _2650 * cbModelParam._m0[19u].x))), _1808);
            frontier_phi_22_47_ladder = _2774.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2774.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2774.x * cbModelParam._m0[1u].z;
        }
        _1897 = frontier_phi_22_47_ladder_2;
        _1899 = frontier_phi_22_47_ladder_1;
        _1901 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1881 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_908, _909, _910), _1808);
        _1897 = _1881.x * cbModelParam._m0[1u].z;
        _1899 = _1881.y * cbModelParam._m0[1u].z;
        _1901 = _1881.z * cbModelParam._m0[1u].z;
    }
    float _1914 = (((_935 * _884) + _936) * _900) * ((cbModelParam._m0[1u].w * (_1897 - _1799)) + _1799);
    float _1916 = (((_935 * _886) + _936) * _900) * ((cbModelParam._m0[1u].w * (_1899 - _1801)) + _1801);
    float _1918 = (((_935 * _887) + _936) * _900) * ((cbModelParam._m0[1u].w * (_1901 - _1803)) + _1803);
    float _1921 = fma(_1918, cbSceneParam._m0[89u].z, fma(_1916, cbSceneParam._m0[89u].y, _1914 * cbSceneParam._m0[89u].x));
    float _1924 = fma(_1918, cbSceneParam._m0[90u].z, fma(_1916, cbSceneParam._m0[90u].y, _1914 * cbSceneParam._m0[90u].x));
    float _1927 = fma(_1918, cbSceneParam._m0[91u].z, fma(_1916, cbSceneParam._m0[91u].y, _1914 * cbSceneParam._m0[91u].x));
    float _1961 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1965 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1969 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1973 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1974 = _1961 / _1973;
    float _1975 = _1965 / _1973;
    float _1976 = _1969 / _1973;
    float _2123;
    float _2124;
    float _2125;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2003 = ((uint(_1976 > cbSceneParam._m0[59u].y) + uint(_1976 > cbSceneParam._m0[59u].x)) + uint(_1976 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2004 = _2003 + 43u;
        uint _2012 = _2003 + 44u;
        uint _2020 = _2003 + 45u;
        uint _2028 = _2003 + 46u;
        float _2039 = fma(_1973, cbSceneParam._m0[_2004].w, fma(_1969, cbSceneParam._m0[_2004].z, fma(_1965, cbSceneParam._m0[_2004].y, _1961 * cbSceneParam._m0[_2004].x)));
        float _2043 = fma(_1973, cbSceneParam._m0[_2012].w, fma(_1969, cbSceneParam._m0[_2012].z, fma(_1965, cbSceneParam._m0[_2012].y, _1961 * cbSceneParam._m0[_2012].x)));
        float _2051 = fma(_1973, cbSceneParam._m0[_2028].w, fma(_1969, cbSceneParam._m0[_2028].z, fma(_1965, cbSceneParam._m0[_2028].y, _1961 * cbSceneParam._m0[_2028].x)));
        float _2056 = cbSceneParam._m0[33u].z * _2051;
        float _2058 = cbSceneParam._m0[33u].w * _2051;
        float _2061 = fma(_1973, cbSceneParam._m0[_2020].w, fma(_1969, cbSceneParam._m0[_2020].z, fma(_1965, cbSceneParam._m0[_2020].y, _1961 * cbSceneParam._m0[_2020].x))) / _2051;
        float _2109 = (cbSceneParam._m0[33u].x - sqrt(((_1975 * _1975) + (_1974 * _1974)) + (_1976 * _1976))) * cbSceneParam._m0[33u].y;
        float _4469 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0));
        float _2116 = (isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2056 + _2039) / _2051, (_2058 + _2043) / _2051), _2061), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2058 + _2039) / _2051, (_2043 - _2056) / _2051), _2061), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2039 - _2056) / _2051, (_2043 - _2058) / _2051), _2061), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2039 - _2058) / _2051, (_2056 + _2043) / _2051), _2061), 0.0)).x), vec4(0.25)));
        _2123 = 1.0 - (_2116 * cbSceneParam._m0[34u].x);
        _2124 = 1.0 - (_2116 * cbSceneParam._m0[34u].y);
        _2125 = 1.0 - (_2116 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2123 = 1.0;
        _2124 = 1.0;
        _2125 = 1.0;
    }
    float _2189;
    float _2191;
    float _2193;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2177 = fma(_1973, cbSceneParam._m0[63u].w, fma(_1969, cbSceneParam._m0[63u].z, fma(_1965, cbSceneParam._m0[63u].y, _1961 * cbSceneParam._m0[63u].x)));
        float _2178 = fma(_1973, cbSceneParam._m0[60u].w, fma(_1969, cbSceneParam._m0[60u].z, fma(_1965, cbSceneParam._m0[60u].y, _1961 * cbSceneParam._m0[60u].x))) / _2177;
        float _2179 = fma(_1973, cbSceneParam._m0[61u].w, fma(_1969, cbSceneParam._m0[61u].z, fma(_1965, cbSceneParam._m0[61u].y, _1961 * cbSceneParam._m0[61u].x))) / _2177;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2178 >= cbSceneParam._m0[64u].x) && (_2179 >= cbSceneParam._m0[64u].y)) && (_2178 <= cbSceneParam._m0[64u].z)) && (_2179 <= cbSceneParam._m0[64u].w))
        {
            float _2318 = fma(_1973, cbSceneParam._m0[62u].w, fma(_1969, cbSceneParam._m0[62u].z, fma(_1965, cbSceneParam._m0[62u].y, _1961 * cbSceneParam._m0[62u].x))) / _2177;
            float _2322 = isnan(cbSceneParam._m0[41u].w) ? _2318 : (isnan(_2318) ? cbSceneParam._m0[41u].w : max(_2318, cbSceneParam._m0[41u].w));
            float _2365 = (cbSceneParam._m0[33u].x - sqrt(((_1975 * _1975) + (_1974 * _1974)) + (_1976 * _1976))) * cbSceneParam._m0[33u].y;
            float _4485 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
            float _2372 = (isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2178, cbSceneParam._m0[33u].w + _2179), _2322), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2178, _2179 - cbSceneParam._m0[33u].z), _2322), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2178 - cbSceneParam._m0[33u].z, _2179 - cbSceneParam._m0[33u].w), _2322), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2178 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2179), _2322), 0.0)).x), vec4(0.25)));
            float _2376 = 1.0 - (_2372 * cbSceneParam._m0[34u].x);
            float _2377 = 1.0 - (_2372 * cbSceneParam._m0[34u].y);
            float _2378 = 1.0 - (_2372 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2378) ? _2125 : (isnan(_2125) ? _2378 : min(_2125, _2378));
            frontier_phi_34_33_ladder_1 = isnan(_2377) ? _2124 : (isnan(_2124) ? _2377 : min(_2124, _2377));
            frontier_phi_34_33_ladder_2 = isnan(_2376) ? _2123 : (isnan(_2123) ? _2376 : min(_2123, _2376));
        }
        else
        {
            frontier_phi_34_33_ladder = _2125;
            frontier_phi_34_33_ladder_1 = _2124;
            frontier_phi_34_33_ladder_2 = _2123;
        }
        _2189 = frontier_phi_34_33_ladder_2;
        _2191 = frontier_phi_34_33_ladder_1;
        _2193 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2189 = _2123;
        _2191 = _2124;
        _2193 = _2125;
    }
    uvec4 _2198 = floatBitsToUint(cbInstanceData._m0[_271 + 5u]);
    uint _2200 = _2198.x * 14u;
    uint _2201 = _2200 + 13u;
    float _2208 = _900 + (-1.0);
    float _2213 = (cbLight._m0[_2201].x * _2208) + 1.0;
    float _2214 = (cbLight._m0[_2201].y * _2208) + 1.0;
    float _2215 = (cbLight._m0[_2201].z * _2208) + 1.0;
    float _2216 = (cbLight._m0[_2201].w * _2208) + 1.0;
    uint _2217 = _2200 + 5u;
    float _2223 = isnan(1.0) ? _2214 : (isnan(_2214) ? 1.0 : min(_2214, 1.0));
    uint _2227 = _2200 + 4u;
    float _2237 = isnan(1.0) ? _2213 : (isnan(_2213) ? 1.0 : min(_2213, 1.0));
    uint _2241 = _2200 | 1u;
    float _2252 = dot(vec3(cbLight._m0[_2200].xyz), vec3(_732, _733, _734));
    float _2255 = dot(vec3(cbLight._m0[_2241].xyz), vec3(_732, _733, _734));
    float _4521 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
    float _4532 = isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0));
    float _2260 = (isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0))) * 0.3183098733425140380859375;
    float _2262 = (isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0))) * 0.3183098733425140380859375;
    float _2269 = ((cbLight._m0[_2217].x * _2223) * _2262) + (((cbLight._m0[_2227].x * _2189) * _2237) * _2260);
    float _2270 = ((_2223 * cbLight._m0[_2217].y) * _2262) + (((cbLight._m0[_2227].y * _2191) * _2237) * _2260);
    float _2271 = ((_2223 * cbLight._m0[_2217].z) * _2262) + (((cbLight._m0[_2227].z * _2193) * _2237) * _2260);
    uvec4 _2275 = floatBitsToUint(cbLight._m0[_2200 + 12u]);
    bool _2277 = _2275.x == 0u;
    float _2379;
    float _2381;
    float _2383;
    if (_2277)
    {
        _2379 = _2269;
        _2381 = _2270;
        _2383 = _2271;
    }
    else
    {
        uint _2387 = _2200 + 6u;
        float _2403 = (dot(vec3(cbLight._m0[_2200 + 2u].xyz), vec3(_732, _733, _734)) * 0.5) + 0.5;
        float _2404 = _2403 * _2403;
        float _4543 = isnan(0.0) ? _2404 : (isnan(_2404) ? 0.0 : max(_2404, 0.0));
        float _2405 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
        float _2406 = isnan(1.0) ? _2215 : (isnan(_2215) ? 1.0 : min(_2215, 1.0));
        _2379 = (((cbLight._m0[_2387].x * 0.3183098733425140380859375) * _2405) * _2406) + _2269;
        _2381 = (((cbLight._m0[_2387].y * 0.3183098733425140380859375) * _2405) * _2406) + _2270;
        _2383 = (((cbLight._m0[_2387].z * 0.3183098733425140380859375) * _2405) * _2406) + _2271;
    }
    bool _2386 = _2275.y == 0u;
    float _2441;
    float _2443;
    float _2445;
    if (_2386)
    {
        _2441 = _2379;
        _2443 = _2381;
        _2445 = _2383;
    }
    else
    {
        uint _2614 = _2200 + 7u;
        float _2630 = (dot(vec3(cbLight._m0[_2200 + 3u].xyz), vec3(_732, _733, _734)) * 0.5) + 0.5;
        float _2631 = _2630 * _2630;
        float _4559 = isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : max(_2631, 0.0));
        float _2632 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
        float _2633 = isnan(1.0) ? _2216 : (isnan(_2216) ? 1.0 : min(_2216, 1.0));
        _2441 = (((cbLight._m0[_2614].x * 0.3183098733425140380859375) * _2632) * _2633) + _2379;
        _2443 = (((cbLight._m0[_2614].y * 0.3183098733425140380859375) * _2632) * _2633) + _2381;
        _2445 = (((cbLight._m0[_2614].z * 0.3183098733425140380859375) * _2632) * _2633) + _2383;
    }
    uint _2448 = _2200 + 8u;
    float _2461 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2200].w)) * _735) * 0.949999988079071044921875);
    float _2462 = _2461 * _2461;
    float _2463 = cbLight._m0[_2200].x + _811;
    float _2464 = cbLight._m0[_2200].y + _812;
    float _2465 = cbLight._m0[_2200].z + _813;
    float _2469 = inversesqrt(dot(vec3(_2463, _2464, _2465), vec3(_2463, _2464, _2465)));
    float _2470 = _2469 * _2463;
    float _2471 = _2469 * _2464;
    float _2472 = _2469 * _2465;
    float _2473 = dot(vec3(_732, _733, _734), vec3(cbLight._m0[_2200].xyz));
    float _4575 = isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0));
    float _2476 = isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0));
    float _4586 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
    float _2477 = isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0));
    float _2478 = dot(vec3(_732, _733, _734), vec3(_2470, _2471, _2472));
    float _4597 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0));
    float _2481 = isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0));
    float _2482 = dot(vec3(cbLight._m0[_2200].xyz), vec3(_2470, _2471, _2472));
    float _4608 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0));
    float _2486 = _2462 * _2462;
    float _2490 = ((_2481 * _2481) * (_2486 + (-1.0))) + 1.0;
    float _2498 = exp2(log2(1.0 - (isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0)))) * 5.0);
    float _2499 = 0.959999978542327880859375 - _881;
    float _2501 = 0.959999978542327880859375 - _882;
    float _2502 = 0.959999978542327880859375 - _883;
    float _2509 = 1.0 - _2462;
    float _2520 = (0.5 / (((_2477 * ((_2476 * _2509) + _2462)) + 9.9999999392252902907785028219223e-09) + (((_2477 * _2509) + _2462) * _2476))) * _2476;
    float _4619 = isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0));
    float _2522 = (isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0))) * (_2486 / ((_2490 * _2490) * 3.141590118408203125));
    uint _2536 = _2200 + 9u;
    float _2547 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2241].w)) * _735) * 0.949999988079071044921875);
    float _2548 = _2547 * _2547;
    float _2549 = cbLight._m0[_2241].x + _811;
    float _2550 = cbLight._m0[_2241].y + _812;
    float _2551 = cbLight._m0[_2241].z + _813;
    float _2555 = inversesqrt(dot(vec3(_2549, _2550, _2551), vec3(_2549, _2550, _2551)));
    float _2556 = _2555 * _2549;
    float _2557 = _2555 * _2550;
    float _2558 = _2555 * _2551;
    float _2559 = dot(vec3(_732, _733, _734), vec3(cbLight._m0[_2241].xyz));
    float _4630 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0));
    float _2562 = isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0));
    float _2563 = dot(vec3(_732, _733, _734), vec3(_2556, _2557, _2558));
    float _4641 = isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0));
    float _2566 = isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0));
    float _2567 = dot(vec3(cbLight._m0[_2241].xyz), vec3(_2556, _2557, _2558));
    float _4652 = isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0));
    float _2571 = _2548 * _2548;
    float _2575 = ((_2566 * _2566) * (_2571 + (-1.0))) + 1.0;
    float _2582 = exp2(log2(1.0 - (isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0)))) * 5.0);
    float _2589 = 1.0 - _2548;
    float _2599 = (0.5 / (((_2477 * ((_2562 * _2589) + _2548)) + 9.9999999392252902907785028219223e-09) + (((_2477 * _2589) + _2548) * _2562))) * _2562;
    float _4663 = isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0));
    float _2601 = (isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0))) * (_2571 / ((_2575 * _2575) * 3.141590118408203125));
    float _2611 = (((((_2582 * _2499) + _884) * cbLight._m0[_2536].x) * _2601) * _2223) + ((((cbLight._m0[_2448].x * _2189) * ((_2498 * _2499) + _884)) * _2522) * _2237);
    float _2612 = (((((_2582 * _2501) + _886) * cbLight._m0[_2536].y) * _2601) * _2223) + ((((cbLight._m0[_2448].y * _2191) * ((_2498 * _2501) + _886)) * _2522) * _2237);
    float _2613 = (((((_2582 * _2502) + _887) * cbLight._m0[_2536].z) * _2601) * _2223) + ((((cbLight._m0[_2448].z * _2193) * ((_2498 * _2502) + _887)) * _2522) * _2237);
    float _2669;
    float _2671;
    float _2673;
    if (_2277)
    {
        _2669 = _2611;
        _2671 = _2612;
        _2673 = _2613;
    }
    else
    {
        uint _2675 = _2200 + 2u;
        uint _2679 = _2200 + 10u;
        float _2693 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2675].w)) * _735) * 0.949999988079071044921875);
        float _2694 = _2693 * _2693;
        float _2695 = cbLight._m0[_2675].x + _811;
        float _2696 = cbLight._m0[_2675].y + _812;
        float _2697 = cbLight._m0[_2675].z + _813;
        float _2701 = inversesqrt(dot(vec3(_2695, _2696, _2697), vec3(_2695, _2696, _2697)));
        float _2702 = _2701 * _2695;
        float _2703 = _2701 * _2696;
        float _2704 = _2701 * _2697;
        float _2705 = dot(vec3(_732, _733, _734), vec3(cbLight._m0[_2675].xyz));
        float _4674 = isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : max(_2705, 0.0));
        float _2708 = isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0));
        float _2709 = dot(vec3(_732, _733, _734), vec3(_2702, _2703, _2704));
        float _4685 = isnan(0.0) ? _2709 : (isnan(_2709) ? 0.0 : max(_2709, 0.0));
        float _2712 = isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0));
        float _2713 = dot(vec3(cbLight._m0[_2675].xyz), vec3(_2702, _2703, _2704));
        float _4696 = isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : max(_2713, 0.0));
        float _2717 = _2694 * _2694;
        float _2721 = ((_2712 * _2712) * (_2717 + (-1.0))) + 1.0;
        float _2728 = exp2(log2(1.0 - (isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0)))) * 5.0);
        float _2735 = 1.0 - _2694;
        float _2745 = (0.5 / (((_2477 * ((_2708 * _2735) + _2694)) + 9.9999999392252902907785028219223e-09) + (((_2477 * _2735) + _2694) * _2708))) * _2708;
        float _4707 = isnan(0.0) ? _2745 : (isnan(_2745) ? 0.0 : max(_2745, 0.0));
        float _2747 = (isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0))) * (_2717 / ((_2721 * _2721) * 3.141590118408203125));
        float _2748 = isnan(1.0) ? _2215 : (isnan(_2215) ? 1.0 : min(_2215, 1.0));
        _2669 = (((((_2728 * _2499) + _884) * cbLight._m0[_2679].x) * _2747) * _2748) + _2611;
        _2671 = (((((_2728 * _2501) + _886) * cbLight._m0[_2679].y) * _2747) * _2748) + _2612;
        _2673 = (((((_2728 * _2502) + _887) * cbLight._m0[_2679].z) * _2747) * _2748) + _2613;
    }
    float _2779;
    float _2781;
    float _2783;
    if (_2386)
    {
        _2779 = _2669;
        _2781 = _2671;
        _2783 = _2673;
    }
    else
    {
        uint _2790 = _2200 + 3u;
        uint _2794 = _2200 + 11u;
        float _2808 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2790].w)) * _735) * 0.949999988079071044921875);
        float _2809 = _2808 * _2808;
        float _2810 = cbLight._m0[_2790].x + _811;
        float _2811 = cbLight._m0[_2790].y + _812;
        float _2812 = cbLight._m0[_2790].z + _813;
        float _2816 = inversesqrt(dot(vec3(_2810, _2811, _2812), vec3(_2810, _2811, _2812)));
        float _2817 = _2816 * _2810;
        float _2818 = _2816 * _2811;
        float _2819 = _2816 * _2812;
        float _2820 = dot(vec3(_732, _733, _734), vec3(cbLight._m0[_2790].xyz));
        float _4723 = isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : max(_2820, 0.0));
        float _2823 = isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0));
        float _2824 = dot(vec3(_732, _733, _734), vec3(_2817, _2818, _2819));
        float _4734 = isnan(0.0) ? _2824 : (isnan(_2824) ? 0.0 : max(_2824, 0.0));
        float _2827 = isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0));
        float _2828 = dot(vec3(cbLight._m0[_2790].xyz), vec3(_2817, _2818, _2819));
        float _4745 = isnan(0.0) ? _2828 : (isnan(_2828) ? 0.0 : max(_2828, 0.0));
        float _2832 = _2809 * _2809;
        float _2836 = ((_2827 * _2827) * (_2832 + (-1.0))) + 1.0;
        float _2843 = exp2(log2(1.0 - (isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0)))) * 5.0);
        float _2850 = 1.0 - _2809;
        float _2860 = (0.5 / (((_2477 * ((_2823 * _2850) + _2809)) + 9.9999999392252902907785028219223e-09) + (((_2477 * _2850) + _2809) * _2823))) * _2823;
        float _4756 = isnan(0.0) ? _2860 : (isnan(_2860) ? 0.0 : max(_2860, 0.0));
        float _2862 = (isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0))) * (_2832 / ((_2836 * _2836) * 3.141590118408203125));
        float _2863 = isnan(1.0) ? _2216 : (isnan(_2216) ? 1.0 : min(_2216, 1.0));
        _2779 = (((((_2843 * _2499) + _884) * cbLight._m0[_2794].x) * _2862) * _2863) + _2669;
        _2781 = (((((_2843 * _2501) + _886) * cbLight._m0[_2794].y) * _2862) * _2863) + _2671;
        _2783 = (((((_2843 * _2502) + _887) * cbLight._m0[_2794].z) * _2862) * _2863) + _2673;
    }
    float _2929;
    float _2931;
    float _2933;
    float _2935;
    float _2937;
    float _2939;
    if (_2198.y == 0u)
    {
        uvec4 _2884 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2885 = _2884.x;
        uint _2896 = uint((float(_2884.y) * floor(float(uint(cbSceneParam._m0[85u].y * _820) / _2885))) + floor(float(uint(cbSceneParam._m0[85u].x * _819) / _2885)));
        float _2906 = (log2(_1976 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2907 = isnan(0.0) ? _2906 : (isnan(_2906) ? 0.0 : max(_2906, 0.0));
        uint _2910 = uint(isnan(14.0) ? _2907 : (isnan(_2907) ? 14.0 : min(_2907, 14.0)));
        uvec4 _2915 = texelFetch(g_lightClusterGridBuffer, int(((_2910 << 2u) + (_2896 << 6u)) >> 2u));
        uint _2916 = _2915.x;
        uint _2917 = _2884.z;
        float _2996;
        float _2998;
        float _3000;
        float _3002;
        float _3004;
        float _3006;
        if (((((1u << ((_2917 >> 4u) & 15u)) + 4294967295u) & _2916) == 0u) || ((_2917 & 240u) == 0u))
        {
            _2996 = 0.0;
            _2998 = 0.0;
            _3000 = 0.0;
            _3002 = 0.0;
            _3004 = 0.0;
            _3006 = 0.0;
        }
        else
        {
            float _2997;
            float _2999;
            float _3001;
            float _3003;
            float _3005;
            float _3007;
            float _3140 = 0.0;
            float _3141 = 0.0;
            float _3142 = 0.0;
            float _3143 = 0.0;
            float _3144 = 0.0;
            float _3145 = 0.0;
            uint _3146 = 0u;
            uint _3155;
            bool _3156;
            for (;;)
            {
                _3155 = texelFetch(g_lightClassification, int((((_2910 << 5u) + (_2896 << 9u)) + (_3146 << 2u)) >> 2u)).x;
                _3156 = _3155 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3156)
                {
                    frontier_phi_66_pred = _3145;
                    frontier_phi_66_pred_1 = _3144;
                    frontier_phi_66_pred_2 = _3143;
                    frontier_phi_66_pred_3 = _3142;
                    frontier_phi_66_pred_4 = _3141;
                    frontier_phi_66_pred_5 = _3140;
                }
                else
                {
                    float _3264;
                    float _3265;
                    float _3266;
                    float _3267;
                    float _3268;
                    float _3269;
                    uint _3270;
                    _3264 = _3140;
                    _3265 = _3141;
                    _3266 = _3142;
                    _3267 = _3143;
                    _3268 = _3144;
                    _3269 = _3145;
                    _3270 = _3155;
                    float _3196;
                    float _3197;
                    float _3198;
                    float _3199;
                    float _3200;
                    float _3201;
                    for (;;)
                    {
                        uint _3274 = uint(findLSB(_3270)) + (_3146 << 5u);
                        uint _3271 = (_3270 + 4294967295u) & _3270;
                        uint _3276 = _3274 * 48u;
                        vec4 _3290 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3276)).x, texelFetch(g_PointLightRenderingBuffer, int(_3276 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3276 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3276 + 3u)).x));
                        uint _3296 = (_3274 * 48u) + 4u;
                        vec4 _3309 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3296)).x, texelFetch(g_PointLightRenderingBuffer, int(_3296 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3296 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3296 + 3u)).x));
                        uint _3315 = (_3274 * 48u) + 8u;
                        vec3 _3326 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3315)).x, texelFetch(g_PointLightRenderingBuffer, int(_3315 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3315 + 2u)).x));
                        float _3330 = _3290.x - _1974;
                        float _3331 = _3290.y - _1975;
                        float _3332 = _3290.z - _1976;
                        float _3333 = dot(vec3(_3330, _3331, _3332), vec3(_3330, _3331, _3332));
                        float _3336 = inversesqrt(_3333);
                        float _3337 = _3336 * _3330;
                        float _3338 = _3336 * _3331;
                        float _3339 = _3336 * _3332;
                        float _3340 = dot(vec3(_841, _844, _847), vec3(_3337, _3338, _3339));
                        float _3345 = 1.0 - (_3333 * _3290.w);
                        float _4782 = isnan(0.0) ? _3345 : (isnan(_3345) ? 0.0 : max(_3345, 0.0));
                        float _3346 = isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0));
                        float _3347 = sqrt(_3333) * _3309.w;
                        float _3350 = 1.39999997615814208984375 / (_3347 + 1.39999997615814208984375);
                        float _3351 = _3350 * _3350;
                        float _3354 = ((1.0 - _3351) * _3340) + _3351;
                        float _3357 = _3347 * _3347;
                        float _3361 = ((isnan(0.0) ? _3354 : (isnan(_3354) ? 0.0 : max(_3354, 0.0))) * _3346) / ((_3357 * 0.699999988079071044921875) + 1.0);
                        float _3365 = (-0.0) - _1974;
                        float _3366 = (-0.0) - _1975;
                        float _3367 = (-0.0) - _1976;
                        float _3371 = inversesqrt(dot(vec3(_3365, _3366, _3367), vec3(_3365, _3366, _3367)));
                        float _3372 = _3371 * _3365;
                        float _3373 = _3371 * _3366;
                        float _3374 = _3371 * _3367;
                        float _3381 = exp2(log2(1.0 / ((_3357 * 3.5) + 5.0)) * 0.25);
                        float _3382 = 1.0 - _916;
                        float _3389 = sqrt(1.0 - ((1.0 - (_3382 * _3382)) * (1.0 - (_3381 * _3381))));
                        float _3390 = _3389 * _3389;
                        float _3391 = _3390 * _3390;
                        float _3392 = _3372 + _3337;
                        float _3393 = _3373 + _3338;
                        float _3394 = _3374 + _3339;
                        float _3398 = inversesqrt(dot(vec3(_3392, _3393, _3394), vec3(_3392, _3393, _3394)));
                        float _3402 = dot(vec3(_841, _844, _847), vec3(_3372, _3373, _3374));
                        float _4798 = isnan(0.0) ? _3402 : (isnan(_3402) ? 0.0 : max(_3402, 0.0));
                        float _3405 = isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0));
                        float _3406 = dot(vec3(_841, _844, _847), vec3(_3398 * _3392, _3398 * _3393, _3398 * _3394));
                        float _4809 = isnan(0.0) ? _3406 : (isnan(_3406) ? 0.0 : max(_3406, 0.0));
                        float _3409 = isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0));
                        float _3413 = ((_3409 * _3409) * (_3391 + (-1.0))) + 1.0;
                        float _3414 = _3350 * _3390;
                        float _3415 = _3414 * _3414;
                        float _3418 = ((1.0 - _3415) * _3340) + _3415;
                        float _4820 = isnan(0.0) ? _3418 : (isnan(_3418) ? 0.0 : max(_3418, 0.0));
                        float _3419 = isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0));
                        float _3420 = 1.0 - _3390;
                        float _3430 = (0.5 / (((_3419 * ((_3405 * _3420) + _3390)) + 9.9999999392252902907785028219223e-09) + (((_3419 * _3420) + _3390) * _3405))) * _3419;
                        float _4831 = isnan(0.0) ? _3430 : (isnan(_3430) ? 0.0 : max(_3430, 0.0));
                        float _3441 = (((_3391 * 3.1415927410125732421875) * (isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0)))) / ((_3413 * _3413) * ((_3357 * 2.1991131305694580078125) + 3.141590118408203125))) * _3346;
                        _3199 = (_3361 * _3309.x) + _3267;
                        _3200 = (_3361 * _3309.y) + _3268;
                        _3201 = (_3361 * _3309.z) + _3269;
                        _3196 = (_3441 * _3326.x) + _3264;
                        _3197 = (_3441 * _3326.y) + _3265;
                        _3198 = (_3441 * _3326.z) + _3266;
                        if (_3271 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3264 = _3196;
                            _3265 = _3197;
                            _3266 = _3198;
                            _3267 = _3199;
                            _3268 = _3200;
                            _3269 = _3201;
                            _3270 = _3271;
                        }
                    }
                    frontier_phi_66_pred = _3201;
                    frontier_phi_66_pred_1 = _3200;
                    frontier_phi_66_pred_2 = _3199;
                    frontier_phi_66_pred_3 = _3198;
                    frontier_phi_66_pred_4 = _3197;
                    frontier_phi_66_pred_5 = _3196;
                }
                _3007 = frontier_phi_66_pred;
                _3005 = frontier_phi_66_pred_1;
                _3003 = frontier_phi_66_pred_2;
                _3001 = frontier_phi_66_pred_3;
                _2999 = frontier_phi_66_pred_4;
                _2997 = frontier_phi_66_pred_5;
                uint _3147 = _3146 + 1u;
                if (_3147 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3140 = _2997;
                    _3141 = _2999;
                    _3142 = _3001;
                    _3143 = _3003;
                    _3144 = _3005;
                    _3145 = _3007;
                    _3146 = _3147;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2996 = _2997;
            _2998 = _2999;
            _3000 = _3001;
            _3002 = _3003;
            _3004 = _3005;
            _3006 = _3007;
        }
        uvec4 _3010 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3011 = _3010.z;
        uint _3013 = (_3011 >> 8u) & 15u;
        float _3108;
        float _3110;
        float _3112;
        float _3114;
        float _3116;
        float _3118;
        if (((4294967295u << _3013) & _2916) == 0u)
        {
            _3108 = _2996;
            _3110 = _2998;
            _3112 = _3000;
            _3114 = _3002;
            _3116 = _3004;
            _3118 = _3006;
        }
        else
        {
            float _3133 = inversesqrt(dot(vec3(_1974, _1975, _1976), vec3(_1974, _1975, _1976)));
            float _3134 = _3133 * _1974;
            float _3135 = _3133 * _1975;
            float _3136 = _3133 * _1976;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3013 < ((_3011 >> 12u) & 15u))
            {
                float _3109;
                float _3111;
                float _3113;
                float _3115;
                float _3117;
                float _3119;
                float _3247 = _2996;
                float _3248 = _2998;
                float _3249 = _3000;
                float _3250 = _3002;
                float _3251 = _3004;
                float _3252 = _3006;
                uint _3253 = _3013;
                uint _3262;
                bool _3263;
                for (;;)
                {
                    _3262 = texelFetch(g_lightClassification, int((((_2910 << 5u) + (_2896 << 9u)) + (_3253 << 2u)) >> 2u)).x;
                    _3263 = _3262 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3263)
                    {
                        frontier_phi_72_pred = _3252;
                        frontier_phi_72_pred_1 = _3251;
                        frontier_phi_72_pred_2 = _3250;
                        frontier_phi_72_pred_3 = _3249;
                        frontier_phi_72_pred_4 = _3248;
                        frontier_phi_72_pred_5 = _3247;
                    }
                    else
                    {
                        float _3446;
                        float _3447;
                        float _3448;
                        float _3449;
                        float _3450;
                        float _3451;
                        float _3739;
                        float _3740;
                        float _3741;
                        float _3742;
                        float _3743;
                        float _3744;
                        float _3459 = _3247;
                        float _3460 = _3248;
                        float _3461 = _3249;
                        float _3462 = _3250;
                        float _3463 = _3251;
                        float _3464 = _3252;
                        uint _3465 = _3262;
                        uint _3466;
                        vec4 _3491;
                        float _3492;
                        vec4 _3507;
                        vec3 _3519;
                        vec4 _3534;
                        vec4 _3549;
                        float _3595;
                        bool _3596;
                        for (;;)
                        {
                            uint _3476 = ((_3253 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3465));
                            _3466 = (_3465 + 4294967295u) & _3465;
                            uint _3478 = _3476 * 40u;
                            _3491 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3478)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3478 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3478 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3478 + 3u)).x));
                            _3492 = _3491.w;
                            uint _3494 = (_3476 * 40u) + 4u;
                            _3507 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3494)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 3u)).x));
                            uint _3509 = (_3476 * 40u) + 8u;
                            _3519 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3509)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 2u)).x));
                            uint _3521 = (_3476 * 40u) + 16u;
                            _3534 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3521)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3521 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3521 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3521 + 3u)).x));
                            uint _3536 = (_3476 * 40u) + 20u;
                            _3549 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3536)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3536 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3536 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3536 + 3u)).x));
                            uint _3551 = (_3476 * 40u) + 24u;
                            vec4 _3564 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3551)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3551 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3551 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3551 + 3u)).x));
                            uint _3570 = (_3476 * 40u) + 28u;
                            vec4 _3583 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3570)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3570 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3570 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3570 + 3u)).x));
                            _3595 = fma(_1976, _3583.z, fma(_1975, _3583.y, _3583.x * _1974)) + _3583.w;
                            _3596 = !((fma(_1976, _3564.z, fma(_1975, _3564.y, _3564.x * _1974)) + _3564.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3596)
                            {
                                float _3623 = _3491.x - _1974;
                                float _3624 = _3491.y - _1975;
                                float _3625 = _3491.z - _1976;
                                float _3626 = dot(vec3(_3623, _3624, _3625), vec3(_3623, _3624, _3625));
                                float _3629 = inversesqrt(_3626);
                                float _3630 = _3629 * _3623;
                                float _3631 = _3629 * _3624;
                                float _3632 = _3629 * _3625;
                                float _3636 = 1.0 - (_3626 / (_3492 * _3492));
                                float _4842 = isnan(0.0) ? _3636 : (isnan(_3636) ? 0.0 : max(_3636, 0.0));
                                float _3637 = isnan(1.0) ? _4842 : (isnan(_4842) ? 1.0 : min(_4842, 1.0));
                                float _3641 = sqrt(_3626) * _3507.w;
                                float _3643 = 1.39999997615814208984375 / (_3641 + 1.39999997615814208984375);
                                float _3644 = _3643 * _3643;
                                float _3647 = ((1.0 - _3644) * dot(vec3(_3630, _3631, _3632), vec3(_841, _844, _847))) + _3644;
                                float _3650 = _3641 * _3641;
                                float _3654 = (fma(_1976, _3534.z, fma(_1975, _3534.y, _3534.x * _1974)) + _3534.w) / _3595;
                                float _3655 = (fma(_1976, _3549.z, fma(_1975, _3549.y, _3549.x * _1974)) + _3549.w) / _3595;
                                float _3659 = 1.0 - dot(vec2(_3654, _3655), vec2(_3654, _3655));
                                float _4858 = isnan(0.0) ? _3659 : (isnan(_3659) ? 0.0 : max(_3659, 0.0));
                                float _3660 = isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0));
                                float _3661 = _3660 * (((isnan(0.0) ? _3647 : (isnan(_3647) ? 0.0 : max(_3647, 0.0))) * _3637) / ((_3650 * 0.699999988079071044921875) + 1.0));
                                float _3673 = exp2(log2(1.0 / ((_3650 * 3.5) + 5.0)) * 0.25);
                                float _3674 = 1.0 - _916;
                                float _3681 = sqrt(1.0 - ((1.0 - (_3674 * _3674)) * (1.0 - (_3673 * _3673))));
                                float _3682 = _3681 * _3681;
                                float _3683 = _3682 * _3682;
                                float _3684 = _3630 - _3134;
                                float _3685 = _3631 - _3135;
                                float _3686 = _3632 - _3136;
                                float _3690 = inversesqrt(dot(vec3(_3684, _3685, _3686), vec3(_3684, _3685, _3686)));
                                float _3694 = dot(vec3(_841, _844, _847), vec3((-0.0) - _3134, (-0.0) - _3135, (-0.0) - _3136));
                                float _4869 = isnan(0.0) ? _3694 : (isnan(_3694) ? 0.0 : max(_3694, 0.0));
                                float _3697 = isnan(1.0) ? _4869 : (isnan(_4869) ? 1.0 : min(_4869, 1.0));
                                float _3698 = dot(vec3(_841, _844, _847), vec3(_3690 * _3684, _3690 * _3685, _3690 * _3686));
                                float _4880 = isnan(0.0) ? _3698 : (isnan(_3698) ? 0.0 : max(_3698, 0.0));
                                float _3701 = isnan(1.0) ? _4880 : (isnan(_4880) ? 1.0 : min(_4880, 1.0));
                                float _3705 = ((_3701 * _3701) * (_3683 + (-1.0))) + 1.0;
                                float _3706 = _3643 * _3682;
                                float _3707 = _3706 * _3706;
                                float _3713 = ((1.0 - _3707) * dot(vec3(_841, _844, _847), vec3(_3630, _3631, _3632))) + _3707;
                                float _4891 = isnan(0.0) ? _3713 : (isnan(_3713) ? 0.0 : max(_3713, 0.0));
                                float _3714 = isnan(1.0) ? _4891 : (isnan(_4891) ? 1.0 : min(_4891, 1.0));
                                float _3715 = 1.0 - _3682;
                                float _3725 = (0.5 / (((_3714 * ((_3697 * _3715) + _3682)) + 9.9999999392252902907785028219223e-09) + (((_3714 * _3715) + _3682) * _3697))) * _3714;
                                float _4902 = isnan(0.0) ? _3725 : (isnan(_3725) ? 0.0 : max(_3725, 0.0));
                                float _3735 = (_3660 * _3637) * (((_3683 * 3.1415927410125732421875) * (isnan(1.0) ? _4902 : (isnan(_4902) ? 1.0 : min(_4902, 1.0)))) / ((_3705 * _3705) * ((_3650 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3661 * _3507.y;
                                frontier_phi_78_pred_1 = _3661 * _3507.x;
                                frontier_phi_78_pred_2 = _3735 * _3519.z;
                                frontier_phi_78_pred_3 = _3735 * _3519.y;
                                frontier_phi_78_pred_4 = _3735 * _3519.x;
                                frontier_phi_78_pred_5 = _3661 * _3507.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3743 = frontier_phi_78_pred;
                            _3742 = frontier_phi_78_pred_1;
                            _3741 = frontier_phi_78_pred_2;
                            _3740 = frontier_phi_78_pred_3;
                            _3739 = frontier_phi_78_pred_4;
                            _3744 = frontier_phi_78_pred_5;
                            _3449 = _3742 + _3462;
                            _3450 = _3743 + _3463;
                            _3451 = _3744 + _3464;
                            _3446 = _3739 + _3459;
                            _3447 = _3740 + _3460;
                            _3448 = _3741 + _3461;
                            if (_3466 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3459 = _3446;
                                _3460 = _3447;
                                _3461 = _3448;
                                _3462 = _3449;
                                _3463 = _3450;
                                _3464 = _3451;
                                _3465 = _3466;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3451;
                        frontier_phi_72_pred_1 = _3450;
                        frontier_phi_72_pred_2 = _3449;
                        frontier_phi_72_pred_3 = _3448;
                        frontier_phi_72_pred_4 = _3447;
                        frontier_phi_72_pred_5 = _3446;
                    }
                    _3119 = frontier_phi_72_pred;
                    _3117 = frontier_phi_72_pred_1;
                    _3115 = frontier_phi_72_pred_2;
                    _3113 = frontier_phi_72_pred_3;
                    _3111 = frontier_phi_72_pred_4;
                    _3109 = frontier_phi_72_pred_5;
                    uint _3254 = _3253 + 1u;
                    if (_3254 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3247 = _3109;
                        _3248 = _3111;
                        _3249 = _3113;
                        _3250 = _3115;
                        _3251 = _3117;
                        _3252 = _3119;
                        _3253 = _3254;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3119;
                frontier_phi_60_61_ladder_1 = _3117;
                frontier_phi_60_61_ladder_2 = _3113;
                frontier_phi_60_61_ladder_3 = _3111;
                frontier_phi_60_61_ladder_4 = _3109;
                frontier_phi_60_61_ladder_5 = _3115;
            }
            else
            {
                frontier_phi_60_61_ladder = _3006;
                frontier_phi_60_61_ladder_1 = _3004;
                frontier_phi_60_61_ladder_2 = _3000;
                frontier_phi_60_61_ladder_3 = _2998;
                frontier_phi_60_61_ladder_4 = _2996;
                frontier_phi_60_61_ladder_5 = _3002;
            }
            _3108 = frontier_phi_60_61_ladder_4;
            _3110 = frontier_phi_60_61_ladder_3;
            _3112 = frontier_phi_60_61_ladder_2;
            _3114 = frontier_phi_60_61_ladder_5;
            _3116 = frontier_phi_60_61_ladder_1;
            _3118 = frontier_phi_60_61_ladder;
        }
        float _3123 = isnan(1.0) ? _900 : (isnan(_900) ? 1.0 : min(_900, 1.0));
        _2929 = (_3123 * _3114) + _2441;
        _2931 = (_3123 * _3116) + _2443;
        _2933 = (_3123 * _3118) + _2445;
        _2935 = ((_3108 * _884) * _3123) + _2779;
        _2937 = ((_3110 * _886) * _3123) + _2781;
        _2939 = ((_3112 * _887) * _3123) + _2783;
    }
    else
    {
        _2929 = _2441;
        _2931 = _2443;
        _2933 = _2445;
        _2935 = _2779;
        _2937 = _2781;
        _2939 = _2783;
    }
    float _4918 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
    float _4929 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
    float _4940 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
    uint _2959 = _271 + 6u;
    float _2967 = _819 / cbSceneParam._m0[86u].x;
    float _2968 = _820 / cbSceneParam._m0[86u].y;
    vec4 _2982 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2967, _2968, (log2((isnan(cbSceneParam._m0[77u].w) ? _754 : (isnan(_754) ? cbSceneParam._m0[77u].w : min(_754, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2984 = _2982.x;
    float _2985 = _2982.y;
    float _2986 = _2982.z;
    float _2987 = _2982.w;
    float _3058;
    float _3060;
    float _3062;
    float _3064;
    if (_754 > cbSceneParam._m0[78u].w)
    {
        float _3021 = isnan(_754) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _754 : min(cbSceneParam._m0[80u].w, _754));
        float _3022 = _3021 / _754;
        float _3033 = _3022 * _804;
        float _3034 = _805 * _3022;
        float _3035 = (-0.0) - _3034;
        float _3036 = _3022 * _806;
        float _3038 = (cbSceneParam._m0[77u].w * _3035) / _3021;
        float _3039 = _3038 + cbSceneParam._m0[79u].w;
        float _3040 = cbSceneParam._m0[79u].w - _3034;
        float _3046 = sqrt(((_3033 * _3033) + (_3034 * _3034)) + (_3036 * _3036));
        float _3049 = (1.0 - (cbSceneParam._m0[77u].w / _3021)) * _3046;
        float _3054 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3056 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3209;
        if (abs((_3035 - _3038) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3209 = ((((_3039 > 0.0) ? exp2(_3054 * _3039) : (2.0 - exp2(_3056 * _3039))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3049;
        }
        else
        {
            float _3169 = 1.0 / cbSceneParam._m0[80u].x;
            float _3170 = isnan(_3040) ? _3039 : (isnan(_3039) ? _3040 : max(_3039, _3040));
            float _3171 = isnan(_3040) ? _3039 : (isnan(_3039) ? _3040 : min(_3039, _3040));
            float _3180 = isnan(0.0) ? _3170 : (isnan(_3170) ? 0.0 : min(_3170, 0.0));
            float _3181 = isnan(0.0) ? _3171 : (isnan(_3171) ? 0.0 : min(_3171, 0.0));
            _3209 = ((abs(_3046 / _3035) * cbSceneParam._m0[80u].y) * ((((_3180 - _3181) * 2.0) - ((exp2(_3054 * (isnan(0.0) ? _3170 : (isnan(_3170) ? 0.0 : max(_3170, 0.0)))) - exp2(_3054 * (isnan(0.0) ? _3171 : (isnan(_3171) ? 0.0 : max(_3171, 0.0))))) * _3169)) - ((exp2(_3056 * _3180) - exp2(_3056 * _3181)) * _3169))) + (_3049 * cbSceneParam._m0[80u].z);
        }
        vec4 _3211 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2967, _2968, 1.0), 0.0);
        float _3220 = exp2((_3209 * (-1.44269502162933349609375)) * (1.0 - _3211.w));
        float _3221 = log2(_3220);
        float _3237 = log2(_2987);
        _3058 = (exp2(_3237 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3221 * cbSceneParam._m0[78u].x)) * _3211.x) / cbSceneParam._m0[78u].x)) + _2984;
        _3060 = (exp2(_3237 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3221 * cbSceneParam._m0[78u].y)) * _3211.y) / cbSceneParam._m0[78u].y)) + _2985;
        _3062 = (exp2(_3237 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3221 * cbSceneParam._m0[78u].z)) * _3211.z) / cbSceneParam._m0[78u].z)) + _2986;
        _3064 = _3220 * _2987;
    }
    else
    {
        _3058 = _2984;
        _3060 = _2985;
        _3062 = _2986;
        _3064 = _2987;
    }
    float _3076 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3077 = _3076 == 3.0;
    float _3078 = log2(_3064);
    float _3085 = exp2(_3078 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4918 : (isnan(_4918) ? 1.0 : min(_4918, 1.0))) * (_2929 + ((isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0))) * _900))) + ((_2935 + ((isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0))) * _1708)) * cbPerFrame._m0[3u].x));
    float _3086 = exp2(_3078 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4929 : (isnan(_4929) ? 1.0 : min(_4929, 1.0))) * (_2931 + ((isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0))) * _900))) + ((_2937 + ((isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0))) * _1708)) * cbPerFrame._m0[3u].x));
    float _3087 = exp2(_3078 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4940 : (isnan(_4940) ? 1.0 : min(_4940, 1.0))) * (_2933 + ((isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0))) * _900))) + ((_2939 + ((isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0))) * _1708)) * cbPerFrame._m0[3u].x));
    float _3096 = (_3076 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3096 * (_3077 ? _3085 : (_3085 + (cbSceneParam._m0[72u].w * _3058)));
    SV_Target.y = _3096 * (_3077 ? _3086 : (_3086 + (cbSceneParam._m0[72u].w * _3060)));
    SV_Target.z = _3096 * (_3077 ? _3087 : (_3087 + (cbSceneParam._m0[72u].w * _3062)));
    SV_Target.w = cbInstanceData._m0[_2959].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2959].w;
}


