#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 18) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_28;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1112;
float _3496;
float _3497;
float _3498;
float _3499;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _207 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _208 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _209 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _215 = inversesqrt(dot(vec3(_207, _208, _209), vec3(_207, _208, _209)));
    float _222 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _223 = _222 * NORMAL.x;
    float _224 = _222 * NORMAL.y;
    float _225 = _222 * NORMAL.z;
    float _229 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _253 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _259 = _253.x * cbMtdParam._m0[9u].x;
    float _260 = _253.y * cbMtdParam._m0[9u].y;
    float _261 = _253.z * cbMtdParam._m0[9u].z;
    vec4 _274 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _278 = _274.z;
    float _283 = (_274.x * 2.0) + (-1.0);
    float _285 = (_274.y * 2.0) + (-1.0);
    float _286 = dot(vec2(_283, _285), vec2(_283, _285));
    float _3508 = isnan(0.0) ? _286 : (isnan(_286) ? 0.0 : max(_286, 0.0));
    float _292 = sqrt(1.0 - (isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0))));
    uint _293 = uint(roundEven(NORMAL.w)) * 13u;
    uint _298 = _293 + 1u;
    uint _302 = _293 + 2u;
    float _311 = sqrt(((cbInstanceData._m0[_298].x * cbInstanceData._m0[_298].x) + (cbInstanceData._m0[_293].x * cbInstanceData._m0[_293].x)) + (cbInstanceData._m0[_302].x * cbInstanceData._m0[_302].x));
    float _312 = _311 * TEXCOORD.z;
    float _313 = _311 * TEXCOORD.w;
    vec4 _326 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _312) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _313) + cbTextureTilingScale._m0[19u].w));
    float _328 = _326.x;
    float _329 = 1.0 - _328;
    float _362 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_328 - _329) * cbMtdParam._m0[24u].w) + _329) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3519 = isnan(0.0) ? _362 : (isnan(_362) ? 0.0 : max(_362, 0.0));
    float _363 = isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0));
    float _371 = ((((cbMtdParam._m0[10u].x - _259) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _363) + _259;
    float _372 = ((((cbMtdParam._m0[10u].y - _260) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _363) + _260;
    float _373 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _261)) * _363) + _261;
    vec4 _386 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _388 = _386.x;
    float _390 = _388 - (_388 * _363);
    float _394 = ((cbMtdParam._m0[23u].y - _278) * _363) + _278;
    vec4 _416 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _312) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _313) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _418 = _416.x;
    float _419 = _416.y;
    float _426 = dot(vec4(cbMtdParam._m0[29u].yzw, 0.0), vec4(_223, _224, _225, 0.0));
    vec4 _441 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_28, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * _312) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * _313) + cbTextureTilingScale._m0[18u].w));
    float _443 = _441.x;
    float _448 = fract(_441.w + cbPerFrame._m0[22u].x);
    float _450 = (1.0 - _448) * _443;
    float _455 = ((_448 + (-1.0)) + _443) * 9.0;
    float _457 = ((_443 + (-1.0)) + _448) * 9.0;
    float _458 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _459 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _473 = (_450 * ((_441.y * 2.0) + (-1.0))) * sin((isnan(3.0) ? _458 : (isnan(_458) ? 3.0 : min(_458, 3.0))) * 3.1415927410125732421875);
    float _475 = (_450 * ((_441.z * 2.0) + (-1.0))) * sin((isnan(3.0) ? _459 : (isnan(_459) ? 3.0 : min(_459, 3.0))) * 3.1415927410125732421875);
    float _479 = inversesqrt(dot(vec3(_473, _475, 1.0), vec3(_473, _475, 1.0)));
    float _495 = (((((0.5 - _418) + ((_473 * 0.5) * _479)) * _426) + _418) * 2.0) + (-1.0);
    float _496 = (((((0.5 - _419) + ((_479 * 0.5) * _475)) * _426) + _419) * 2.0) + (-1.0);
    float _497 = dot(vec2(_495, _496), vec2(_495, _496));
    float _3550 = isnan(0.0) ? _497 : (isnan(_497) ? 0.0 : max(_497, 0.0));
    float _513 = ((((cbMtdParam._m0[22u].z * _283) - _283) + _495) * _363) + _283;
    float _514 = ((((cbMtdParam._m0[22u].z * _285) - _285) + _496) * _363) + _285;
    float _515 = (_363 * (sqrt(1.0 - (isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0)))) - _292)) + _292;
    float _517 = cbMtdParam._m0[22u].x + _274.w;
    float _520 = fma(_515, _223, fma(_514, _229 * TANGENT.x, (_215 * _207) * _513));
    float _523 = fma(_515, _224, fma(_514, _229 * TANGENT.y, (_215 * _208) * _513));
    float _526 = fma(_515, _225, fma(_514, _229 * TANGENT.z, (_215 * _209) * _513));
    float _530 = inversesqrt(dot(vec3(_520, _523, _526), vec3(_520, _523, _526)));
    float _531 = _530 * _520;
    float _532 = _530 * _523;
    float _533 = _530 * _526;
    float _3561 = isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0));
    float _534 = isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0));
    float _3572 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _3583 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _3594 = isnan(0.0) ? _372 : (isnan(_372) ? 0.0 : max(_372, 0.0));
    float _3605 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _3616 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _539 = isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0));
    float _553 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _594 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _604 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _594);
    float _605 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _594);
    float _606 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _594);
    float _610 = inversesqrt(dot(vec3(_604, _605, _606), vec3(_604, _605, _606)));
    float _611 = _604 * _610;
    float _612 = _605 * _610;
    float _613 = _606 * _610;
    vec4 _618 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _620 = _618.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _794 = sqrt(((_604 * _604) + (_605 * _605)) + (_606 * _606));
        float _800 = (cbMatDynParam._m0[5u].x * _794) + cbMatDynParam._m0[5u].y;
        float _3627 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
        float _801 = isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0));
        float _805 = (cbMatDynParam._m0[5u].z * _794) + cbMatDynParam._m0[5u].w;
        float _3638 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0))) - _801)) + _801) < ((_620 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _632 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _633 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _653 = fma(_533, cbSceneParam._m0[5u].z, fma(_532, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _531));
    float _656 = fma(_533, cbSceneParam._m0[6u].z, fma(_532, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _531));
    float _659 = fma(_533, cbSceneParam._m0[7u].z, fma(_532, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _531));
    uint _672 = _293 + 9u;
    uint _673 = _672 + uint(cbMatDynParam._m0[0u].w);
    float _679 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0)))) * cbInstanceData._m0[_673].x;
    float _680 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0)))) * cbInstanceData._m0[_673].y;
    float _681 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0)))) * cbInstanceData._m0[_673].z;
    float _3649 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
    float _682 = isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0));
    float _3660 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
    float _683 = isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0));
    float _3671 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
    float _684 = isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0));
    float _685 = 1.0 - _539;
    float _686 = _682 * _685;
    float _687 = _683 * _685;
    float _688 = _684 * _685;
    float _693 = (_682 + (-0.039999999105930328369140625)) * _539;
    float _694 = (_683 + (-0.039999999105930328369140625)) * _539;
    float _695 = (_684 + (-0.039999999105930328369140625)) * _539;
    float _696 = _693 + 0.039999999105930328369140625;
    float _698 = _694 + 0.039999999105930328369140625;
    float _699 = _695 + 0.039999999105930328369140625;
    vec4 _708 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _632, cbSceneParam._m0[86u].y * _633));
    float _712 = ((isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0))) * TEXCOORD_5.w) * _708.x;
    float _713 = dot(vec3(_531, _532, _533), vec3(_611, _612, _613));
    float _716 = _713 * 2.0;
    float _720 = (_716 * _531) - _611;
    float _721 = (_716 * _532) - _612;
    float _722 = (_716 * _533) - _613;
    float _726 = abs(dot(vec3(_611, _612, _613), vec3(_531, _532, _533)));
    float _3682 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _728 = sqrt(_534);
    float _740 = exp2((_728 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_728 * 3.0));
    float _746 = (1.0 - _740) * ((_728 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _747 = _740 * _728;
    float _775 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _779 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _783 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1111;
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _837 = fma(_783, cbModelParam._m0[26u].z, fma(_779, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _775));
        float _841 = fma(_783, cbModelParam._m0[27u].z, fma(_779, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _775));
        float _845 = fma(_783, cbModelParam._m0[28u].z, fma(_779, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _775));
        float _869 = _775 + _531;
        float _870 = _779 + _532;
        float _871 = _783 + _533;
        float _881 = fma(_871, cbModelParam._m0[26u].z, fma(_870, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _869)) - _837;
        float _882 = fma(_871, cbModelParam._m0[27u].z, fma(_870, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _869)) - _841;
        float _883 = fma(_871, cbModelParam._m0[28u].z, fma(_870, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _869)) - _845;
        float _887 = inversesqrt(dot(vec3(_881, _882, _883), vec3(_881, _882, _883)));
        float _900 = ((_887 * _881) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_837 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _901 = ((_887 * _882) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_841 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _902 = ((_887 * _883) / cbModelParam._m0[34u].z) + ((((((_845 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _905 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_900, _901, _902), 0.0);
        vec4 _912 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_900, _901, _902), 0.0);
        vec4 _919 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_900, _901, _902), 0.0);
        vec4 _926 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_900, _901, _902), 0.0);
        float _939 = exp2((_905.w + (-0.5)) * 20.0) * 2.0;
        float _940 = _939 * (_905.x + (-0.5));
        float _941 = _939 * (_905.y + (-0.5));
        float _942 = _939 * (_905.z + (-0.5));
        float _949 = exp2((_912.w + (-0.5)) * 20.0) * 2.0;
        float _950 = _949 * (_912.x + (-0.5));
        float _951 = _949 * (_912.y + (-0.5));
        float _952 = _949 * (_912.z + (-0.5));
        float _959 = exp2((_919.w + (-0.5)) * 20.0) * 2.0;
        float _960 = _959 * (_919.x + (-0.5));
        float _961 = _959 * (_919.y + (-0.5));
        float _962 = _959 * (_919.z + (-0.5));
        float _969 = exp2((_926.w + (-0.5)) * 20.0) * 2.0;
        float _970 = _969 * (_926.x + (-0.5));
        float _971 = _969 * (_926.y + (-0.5));
        float _972 = _969 * (_926.z + (-0.5));
        float _973 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _974 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _975 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        float _976 = _940 * 0.5;
        float _977 = _950 * 0.5;
        float _978 = _960 * 0.5;
        float _979 = dot(vec3(_976, _977, _978), vec3(_976, _977, _978));
        float _984 = (_979 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_979);
        float _993 = (dot(vec3(_531, _532, _533), vec3(_984 * _976, _984 * _977, _984 * _978)) + 1.0) * 0.5;
        float _3708 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _1003 = sqrt(((_977 * _977) + (_976 * _976)) + (_978 * _978)) / (_973 + 9.9999997473787516355514526367188e-06);
        float _3719 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1004 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
        float _1005 = _1004 * 2.0;
        float _1009 = (1.0 - _1004) / (_1004 + 1.0);
        float _3730 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        float _1010 = isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0));
        float _1019 = ((((1.0 - _1010) * (_1005 + 2.0)) * exp2(log2(isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0))) * (_1005 + 1.0))) + _1010) * _973;
        float _1020 = _941 * 0.5;
        float _1021 = _951 * 0.5;
        float _1022 = _961 * 0.5;
        float _1023 = dot(vec3(_1020, _1021, _1022), vec3(_1020, _1021, _1022));
        float _1028 = (_1023 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1023);
        float _1036 = (dot(vec3(_531, _532, _533), vec3(_1028 * _1020, _1028 * _1021, _1028 * _1022)) + 1.0) * 0.5;
        float _3741 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1045 = sqrt(((_1021 * _1021) + (_1020 * _1020)) + (_1022 * _1022)) / (_974 + 9.9999997473787516355514526367188e-06);
        float _3752 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1046 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
        float _1047 = _1046 * 2.0;
        float _1051 = (1.0 - _1046) / (_1046 + 1.0);
        float _3763 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1052 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
        float _1061 = ((((1.0 - _1052) * (_1047 + 2.0)) * exp2(log2(isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0))) * (_1047 + 1.0))) + _1052) * _974;
        float _1062 = _942 * 0.5;
        float _1063 = _952 * 0.5;
        float _1064 = _962 * 0.5;
        float _1065 = dot(vec3(_1062, _1063, _1064), vec3(_1062, _1063, _1064));
        float _1070 = (_1065 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1065);
        float _1078 = (dot(vec3(_531, _532, _533), vec3(_1070 * _1062, _1070 * _1063, _1070 * _1064)) + 1.0) * 0.5;
        float _3774 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1087 = sqrt(((_1063 * _1063) + (_1062 * _1062)) + (_1064 * _1064)) / (_975 + 9.9999997473787516355514526367188e-06);
        float _3785 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1088 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
        float _1089 = _1088 * 2.0;
        float _1093 = (1.0 - _1088) / (_1088 + 1.0);
        float _3796 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1094 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
        float _1103 = ((((1.0 - _1094) * (_1089 + 2.0)) * exp2(log2(isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0))) * (_1089 + 1.0))) + _1094) * _975;
        _1111 = _942;
        _1113 = _941;
        _1114 = _940;
        _1115 = _952;
        _1116 = _951;
        _1117 = _950;
        _1118 = _962;
        _1119 = _961;
        _1120 = _960;
        _1121 = _975;
        _1122 = _974;
        _1123 = _973;
        _1124 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0)));
        _1125 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0)));
        _1126 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0)));
    }
    else
    {
        _1111 = _1112;
        _1113 = _1112;
        _1114 = _1112;
        _1115 = _1112;
        _1116 = _1112;
        _1117 = _1112;
        _1118 = _1112;
        _1119 = _1112;
        _1120 = _1112;
        _1121 = _1112;
        _1122 = _1112;
        _1123 = _1112;
        _1124 = 0.0;
        _1125 = 0.0;
        _1126 = 0.0;
    }
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1154 = fma(_783, cbModelParam._m0[30u].z, fma(_779, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _775));
        float _1158 = fma(_783, cbModelParam._m0[31u].z, fma(_779, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _775));
        float _1162 = fma(_783, cbModelParam._m0[32u].z, fma(_779, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _775));
        float _1185 = _775 + _531;
        float _1186 = _779 + _532;
        float _1187 = _783 + _533;
        float _1197 = fma(_1187, cbModelParam._m0[30u].z, fma(_1186, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1185)) - _1154;
        float _1198 = fma(_1187, cbModelParam._m0[31u].z, fma(_1186, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1185)) - _1158;
        float _1199 = fma(_1187, cbModelParam._m0[32u].z, fma(_1186, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1185)) - _1162;
        float _1203 = inversesqrt(dot(vec3(_1197, _1198, _1199), vec3(_1197, _1198, _1199)));
        float _1216 = ((_1203 * _1197) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1154 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1217 = ((_1203 * _1198) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1158 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1218 = ((_1203 * _1199) / cbModelParam._m0[35u].z) + ((((((_1162 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1220 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1216, _1217, _1218), 0.0);
        vec4 _1227 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1216, _1217, _1218), 0.0);
        vec4 _1234 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1216, _1217, _1218), 0.0);
        vec4 _1241 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1216, _1217, _1218), 0.0);
        float _1253 = exp2((_1220.w + (-0.5)) * 20.0) * 2.0;
        float _1254 = _1253 * (_1220.x + (-0.5));
        float _1255 = _1253 * (_1220.y + (-0.5));
        float _1256 = _1253 * (_1220.z + (-0.5));
        float _1263 = exp2((_1227.w + (-0.5)) * 20.0) * 2.0;
        float _1264 = _1263 * (_1227.x + (-0.5));
        float _1265 = _1263 * (_1227.y + (-0.5));
        float _1266 = _1263 * (_1227.z + (-0.5));
        float _1273 = exp2((_1234.w + (-0.5)) * 20.0) * 2.0;
        float _1274 = _1273 * (_1234.x + (-0.5));
        float _1275 = _1273 * (_1234.y + (-0.5));
        float _1276 = _1273 * (_1234.z + (-0.5));
        float _1283 = exp2((_1241.w + (-0.5)) * 20.0) * 2.0;
        float _1284 = _1283 * (_1241.x + (-0.5));
        float _1285 = _1283 * (_1241.y + (-0.5));
        float _1286 = _1283 * (_1241.z + (-0.5));
        float _1287 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1288 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1289 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1290 = _1254 * 0.5;
        float _1291 = _1264 * 0.5;
        float _1292 = _1274 * 0.5;
        float _1293 = dot(vec3(_1290, _1291, _1292), vec3(_1290, _1291, _1292));
        float _1298 = (_1293 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1293);
        float _1306 = (dot(vec3(_531, _532, _533), vec3(_1298 * _1290, _1298 * _1291, _1298 * _1292)) + 1.0) * 0.5;
        float _3837 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1315 = sqrt(((_1291 * _1291) + (_1290 * _1290)) + (_1292 * _1292)) / (_1287 + 9.9999997473787516355514526367188e-06);
        float _3848 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1316 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
        float _1317 = _1316 * 2.0;
        float _1321 = (1.0 - _1316) / (_1316 + 1.0);
        float _3859 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1322 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
        float _1331 = ((((1.0 - _1322) * (_1317 + 2.0)) * exp2(log2(isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0))) * (_1317 + 1.0))) + _1322) * _1287;
        float _1332 = _1255 * 0.5;
        float _1333 = _1265 * 0.5;
        float _1334 = _1275 * 0.5;
        float _1335 = dot(vec3(_1332, _1333, _1334), vec3(_1332, _1333, _1334));
        float _1340 = (_1335 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1335);
        float _1348 = (dot(vec3(_531, _532, _533), vec3(_1340 * _1332, _1340 * _1333, _1340 * _1334)) + 1.0) * 0.5;
        float _3870 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1357 = sqrt(((_1333 * _1333) + (_1332 * _1332)) + (_1334 * _1334)) / (_1288 + 9.9999997473787516355514526367188e-06);
        float _3881 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1358 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
        float _1359 = _1358 * 2.0;
        float _1363 = (1.0 - _1358) / (_1358 + 1.0);
        float _3892 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1364 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
        float _1373 = ((((1.0 - _1364) * (_1359 + 2.0)) * exp2(log2(isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0))) * (_1359 + 1.0))) + _1364) * _1288;
        float _1374 = _1256 * 0.5;
        float _1375 = _1266 * 0.5;
        float _1376 = _1276 * 0.5;
        float _1377 = dot(vec3(_1374, _1375, _1376), vec3(_1374, _1375, _1376));
        float _1382 = (_1377 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1377);
        float _1390 = (dot(vec3(_531, _532, _533), vec3(_1382 * _1374, _1382 * _1375, _1382 * _1376)) + 1.0) * 0.5;
        float _3903 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1399 = sqrt(((_1375 * _1375) + (_1374 * _1374)) + (_1376 * _1376)) / (_1289 + 9.9999997473787516355514526367188e-06);
        float _3914 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1400 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
        float _1401 = _1400 * 2.0;
        float _1405 = (1.0 - _1400) / (_1400 + 1.0);
        float _3925 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1406 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
        float _1415 = ((((1.0 - _1406) * (_1401 + 2.0)) * exp2(log2(isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0))) * (_1401 + 1.0))) + _1406) * _1289;
        _1423 = _1256;
        _1424 = _1255;
        _1425 = _1254;
        _1426 = _1266;
        _1427 = _1265;
        _1428 = _1264;
        _1429 = _1276;
        _1430 = _1275;
        _1431 = _1274;
        _1432 = _1289;
        _1433 = _1288;
        _1434 = _1287;
        _1435 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0)));
        _1436 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0)));
        _1437 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0)));
    }
    else
    {
        _1423 = _1112;
        _1424 = _1112;
        _1425 = _1112;
        _1426 = _1112;
        _1427 = _1112;
        _1428 = _1112;
        _1429 = _1112;
        _1430 = _1112;
        _1431 = _1112;
        _1432 = _1112;
        _1433 = _1112;
        _1434 = _1112;
        _1435 = 0.0;
        _1436 = 0.0;
        _1437 = 0.0;
    }
    float _1447 = (cbModelParam._m0[1u].x * (_1435 - _1124)) + _1124;
    float _1448 = (cbModelParam._m0[1u].x * (_1436 - _1125)) + _1125;
    float _1449 = (cbModelParam._m0[1u].x * (_1437 - _1126)) + _1126;
    float _1470 = fma(_1449, cbSceneParam._m0[89u].z, fma(_1448, cbSceneParam._m0[89u].y, _1447 * cbSceneParam._m0[89u].x));
    float _1473 = fma(_1449, cbSceneParam._m0[90u].z, fma(_1448, cbSceneParam._m0[90u].y, _1447 * cbSceneParam._m0[90u].x));
    float _1476 = fma(_1449, cbSceneParam._m0[91u].z, fma(_1448, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1447));
    float _1491 = _720 * 0.5;
    float _1492 = _721 * 0.5;
    float _1493 = _722 * 0.5;
    float _1494 = dot(vec4(_1491, _1492, _1493, 1.0), vec4(_1425, _1428, _1431, _1434));
    float _1497 = dot(vec4(_1491, _1492, _1493, 1.0), vec4(_1424, _1427, _1430, _1433));
    float _1500 = dot(vec4(_1491, _1492, _1493, 1.0), vec4(_1423, _1426, _1429, _1432));
    float _1534;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1507 = dot(vec4(_1491, _1492, _1493, 1.0), vec4(_1111, _1115, _1118, _1121));
        float _1511 = dot(vec4(_1491, _1492, _1493, 1.0), vec4(_1113, _1116, _1119, _1122));
        float _1515 = dot(vec4(_1491, _1492, _1493, 1.0), vec4(_1114, _1117, _1120, _1123));
        float _1522 = dot(vec4(cbModelParam._m0[39u]), vec4(_1491, _1492, _1493, 1.0));
        _1534 = dot(vec3(isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0)), isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0)), isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1522) ? 0.0 : (isnan(0.0) ? _1522 : max(0.0, _1522))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1534 = 1.0;
    }
    float _1545;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1536 = dot(vec4(cbModelParam._m0[40u]), vec4(_1491, _1492, _1493, 1.0));
        _1545 = dot(vec3(isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0)), isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0)), isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1536) ? 0.0 : (isnan(0.0) ? _1536 : max(0.0, _1536))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1545 = 1.0;
    }
    float _1549 = (_1545 * cbModelParam._m0[1u].x) + (_1534 * (1.0 - cbModelParam._m0[1u].x));
    float _1559 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _534);
    float _1560 = isnan(_1559) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1559 : min(cbModelParam._m0[25u].z, _1559));
    float _1642;
    float _1644;
    float _1646;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1609 = fma(_783, cbModelParam._m0[13u].z, fma(_779, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _775)) + cbModelParam._m0[13u].w;
        float _1613 = fma(_783, cbModelParam._m0[14u].z, fma(_779, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _775)) + cbModelParam._m0[14u].w;
        float _1617 = fma(_783, cbModelParam._m0[15u].z, fma(_779, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _775)) + cbModelParam._m0[15u].w;
        float _1620 = fma(_722, cbModelParam._m0[13u].z, fma(_721, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _720));
        float _1623 = fma(_722, cbModelParam._m0[14u].z, fma(_721, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _720));
        float _1626 = fma(_722, cbModelParam._m0[15u].z, fma(_721, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _720));
        float _1654;
        if (_1620 > 0.0)
        {
            _1654 = abs((1.0 - _1609) / _1620);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1620 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1609 + 1.0) / _1620);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1654 = frontier_phi_17_15_ladder;
        }
        float _1858;
        if (_1623 > 0.0)
        {
            _1858 = abs((1.0 - _1613) / _1623);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1623 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1613 + 1.0) / _1623);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1858 = frontier_phi_26_22_ladder;
        }
        float _2112;
        if (_1626 > 0.0)
        {
            _2112 = abs((1.0 - _1617) / _1626);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1626 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1617 + 1.0) / _1626);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2112 = frontier_phi_38_33_ladder;
        }
        float _2114 = isnan(_1858) ? _1654 : (isnan(_1654) ? _1858 : min(_1654, _1858));
        float _2115 = isnan(_2112) ? _2114 : (isnan(_2114) ? _2112 : min(_2114, _2112));
        float _2119 = (_2115 * _1620) + _1609;
        float _2120 = (_2115 * _1623) + _1613;
        float _2121 = (_2115 * _1626) + _1617;
        float _2122 = _2115 * 9.9999997473787516355514526367188e-05;
        float _2124 = (-1.0) - _2122;
        float _2126 = _2122 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2121 > _2126) || ((_2121 < _2124) || ((_2120 > _2126) || ((_2120 < _2124) || ((_2119 < _2124) || (_2119 > _2126))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2249 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2121, cbModelParam._m0[9u].z, fma(_2120, cbModelParam._m0[9u].y, _2119 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2121, cbModelParam._m0[10u].z, fma(_2120, cbModelParam._m0[10u].y, _2119 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2121, cbModelParam._m0[11u].z, fma(_2120, cbModelParam._m0[11u].y, _2119 * cbModelParam._m0[11u].x))), _1560);
            frontier_phi_16_38_ladder = _2249.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2249.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2249.x * cbModelParam._m0[1u].y;
        }
        _1642 = frontier_phi_16_38_ladder_2;
        _1644 = frontier_phi_16_38_ladder_1;
        _1646 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1630 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_720, _721, _722), _1560);
        _1642 = _1630.x * cbModelParam._m0[1u].y;
        _1644 = _1630.y * cbModelParam._m0[1u].y;
        _1646 = _1630.z * cbModelParam._m0[1u].y;
    }
    float _1650 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _534);
    float _1651 = isnan(_1650) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1650 : min(cbModelParam._m0[25u].w, _1650));
    float _1741;
    float _1743;
    float _1745;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1705 = fma(_783, cbModelParam._m0[21u].z, fma(_779, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _775)) + cbModelParam._m0[21u].w;
        float _1709 = fma(_783, cbModelParam._m0[22u].z, fma(_779, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _775)) + cbModelParam._m0[22u].w;
        float _1713 = fma(_783, cbModelParam._m0[23u].z, fma(_779, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _775)) + cbModelParam._m0[23u].w;
        float _1716 = fma(_722, cbModelParam._m0[21u].z, fma(_721, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _720));
        float _1719 = fma(_722, cbModelParam._m0[22u].z, fma(_721, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _720));
        float _1722 = fma(_722, cbModelParam._m0[23u].z, fma(_721, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _720));
        float _1863;
        if (_1716 > 0.0)
        {
            _1863 = abs((1.0 - _1705) / _1716);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1716 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1705 + 1.0) / _1716);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1863 = frontier_phi_28_24_ladder;
        }
        float _2139;
        if (_1719 > 0.0)
        {
            _2139 = abs((1.0 - _1709) / _1719);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1719 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1709 + 1.0) / _1719);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2139 = frontier_phi_40_35_ladder;
        }
        float _2352;
        if (_1722 > 0.0)
        {
            _2352 = abs((1.0 - _1713) / _1722);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1722 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1713 + 1.0) / _1722);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2352 = frontier_phi_49_46_ladder;
        }
        float _2354 = isnan(_2139) ? _1863 : (isnan(_1863) ? _2139 : min(_1863, _2139));
        float _2355 = isnan(_2352) ? _2354 : (isnan(_2354) ? _2352 : min(_2354, _2352));
        float _2359 = (_2355 * _1716) + _1705;
        float _2360 = (_2355 * _1719) + _1709;
        float _2361 = (_2355 * _1722) + _1713;
        float _2362 = _2355 * 9.9999997473787516355514526367188e-05;
        float _2363 = (-1.0) - _2362;
        float _2365 = _2362 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2361 > _2365) || ((_2361 < _2363) || ((_2360 > _2365) || ((_2360 < _2363) || ((_2359 < _2363) || (_2359 > _2365))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2560 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2361, cbModelParam._m0[17u].z, fma(_2360, cbModelParam._m0[17u].y, _2359 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2361, cbModelParam._m0[18u].z, fma(_2360, cbModelParam._m0[18u].y, _2359 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2361, cbModelParam._m0[19u].z, fma(_2360, cbModelParam._m0[19u].y, _2359 * cbModelParam._m0[19u].x))), _1651);
            frontier_phi_25_49_ladder = _2560.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2560.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2560.x * cbModelParam._m0[1u].z;
        }
        _1741 = frontier_phi_25_49_ladder_2;
        _1743 = frontier_phi_25_49_ladder_1;
        _1745 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1725 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_720, _721, _722), _1651);
        _1741 = _1725.x * cbModelParam._m0[1u].z;
        _1743 = _1725.y * cbModelParam._m0[1u].z;
        _1745 = _1725.z * cbModelParam._m0[1u].z;
    }
    float _1758 = (((_746 * _696) + _747) * _712) * ((cbModelParam._m0[1u].w * (_1741 - _1642)) + _1642);
    float _1760 = (((_746 * _698) + _747) * _712) * ((cbModelParam._m0[1u].w * (_1743 - _1644)) + _1644);
    float _1762 = (((_746 * _699) + _747) * _712) * ((cbModelParam._m0[1u].w * (_1745 - _1646)) + _1646);
    float _1765 = fma(_1762, cbSceneParam._m0[89u].z, fma(_1760, cbSceneParam._m0[89u].y, _1758 * cbSceneParam._m0[89u].x));
    float _1768 = fma(_1762, cbSceneParam._m0[90u].z, fma(_1760, cbSceneParam._m0[90u].y, _1758 * cbSceneParam._m0[90u].x));
    float _1771 = fma(_1762, cbSceneParam._m0[91u].z, fma(_1760, cbSceneParam._m0[91u].y, _1758 * cbSceneParam._m0[91u].x));
    uvec4 _1781 = floatBitsToUint(cbInstanceData._m0[_293 + 5u]);
    uint _1783 = _1781.x * 14u;
    uint _1784 = _1783 + 13u;
    float _1791 = _712 + (-1.0);
    float _1796 = (cbLight._m0[_1784].x * _1791) + 1.0;
    float _1797 = (cbLight._m0[_1784].y * _1791) + 1.0;
    float _1798 = (cbLight._m0[_1784].z * _1791) + 1.0;
    float _1799 = (cbLight._m0[_1784].w * _1791) + 1.0;
    uint _1800 = _1783 + 5u;
    float _1806 = isnan(1.0) ? _1797 : (isnan(_1797) ? 1.0 : min(_1797, 1.0));
    uint _1810 = _1783 + 4u;
    float _1817 = isnan(1.0) ? _1796 : (isnan(_1796) ? 1.0 : min(_1796, 1.0));
    uint _1821 = _1783 | 1u;
    float _1832 = dot(vec3(cbLight._m0[_1783].xyz), vec3(_531, _532, _533));
    float _1835 = dot(vec3(cbLight._m0[_1821].xyz), vec3(_531, _532, _533));
    float _4061 = isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0));
    float _4072 = isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0));
    float _1840 = (isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0))) * 0.3183098733425140380859375;
    float _1842 = (isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0))) * 0.3183098733425140380859375;
    float _1849 = ((cbLight._m0[_1800].x * _1806) * _1842) + ((cbLight._m0[_1810].x * _1817) * _1840);
    float _1850 = ((_1806 * cbLight._m0[_1800].y) * _1842) + ((_1817 * cbLight._m0[_1810].y) * _1840);
    float _1851 = ((_1806 * cbLight._m0[_1800].z) * _1842) + ((_1817 * cbLight._m0[_1810].z) * _1840);
    uvec4 _1855 = floatBitsToUint(cbLight._m0[_1783 + 12u]);
    bool _1857 = _1855.x == 0u;
    float _1868;
    float _1870;
    float _1872;
    if (_1857)
    {
        _1868 = _1849;
        _1870 = _1850;
        _1872 = _1851;
    }
    else
    {
        uint _1876 = _1783 + 6u;
        float _1892 = (dot(vec3(cbLight._m0[_1783 + 2u].xyz), vec3(_531, _532, _533)) * 0.5) + 0.5;
        float _1893 = _1892 * _1892;
        float _4083 = isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0));
        float _1894 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
        float _1895 = isnan(1.0) ? _1798 : (isnan(_1798) ? 1.0 : min(_1798, 1.0));
        _1868 = (((cbLight._m0[_1876].x * 0.3183098733425140380859375) * _1894) * _1895) + _1849;
        _1870 = (((cbLight._m0[_1876].y * 0.3183098733425140380859375) * _1894) * _1895) + _1850;
        _1872 = (((cbLight._m0[_1876].z * 0.3183098733425140380859375) * _1894) * _1895) + _1851;
    }
    bool _1875 = _1855.y == 0u;
    float _1913;
    float _1915;
    float _1917;
    if (_1875)
    {
        _1913 = _1868;
        _1915 = _1870;
        _1917 = _1872;
    }
    else
    {
        uint _2083 = _1783 + 7u;
        float _2099 = (dot(vec3(cbLight._m0[_1783 + 3u].xyz), vec3(_531, _532, _533)) * 0.5) + 0.5;
        float _2100 = _2099 * _2099;
        float _4099 = isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0));
        float _2101 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
        float _2102 = isnan(1.0) ? _1799 : (isnan(_1799) ? 1.0 : min(_1799, 1.0));
        _1913 = (((cbLight._m0[_2083].x * 0.3183098733425140380859375) * _2101) * _2102) + _1868;
        _1915 = (((cbLight._m0[_2083].y * 0.3183098733425140380859375) * _2101) * _2102) + _1870;
        _1917 = (((cbLight._m0[_2083].z * 0.3183098733425140380859375) * _2101) * _2102) + _1872;
    }
    uint _1920 = _1783 + 8u;
    float _1933 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1783].w)) * _534) * 0.949999988079071044921875);
    float _1934 = _1933 * _1933;
    float _1935 = cbLight._m0[_1783].x + _611;
    float _1936 = cbLight._m0[_1783].y + _612;
    float _1937 = cbLight._m0[_1783].z + _613;
    float _1941 = inversesqrt(dot(vec3(_1935, _1936, _1937), vec3(_1935, _1936, _1937)));
    float _1942 = _1941 * _1935;
    float _1943 = _1941 * _1936;
    float _1944 = _1941 * _1937;
    float _1945 = dot(vec3(_531, _532, _533), vec3(cbLight._m0[_1783].xyz));
    float _4115 = isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0));
    float _1948 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
    float _4126 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _1949 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
    float _1950 = dot(vec3(_531, _532, _533), vec3(_1942, _1943, _1944));
    float _4137 = isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0));
    float _1953 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
    float _1954 = dot(vec3(cbLight._m0[_1783].xyz), vec3(_1942, _1943, _1944));
    float _4148 = isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0));
    float _1958 = _1934 * _1934;
    float _1962 = ((_1953 * _1953) * (_1958 + (-1.0))) + 1.0;
    float _1970 = exp2(log2(1.0 - (isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0)))) * 5.0);
    float _1971 = 0.959999978542327880859375 - _693;
    float _1973 = 0.959999978542327880859375 - _694;
    float _1974 = 0.959999978542327880859375 - _695;
    float _1981 = 1.0 - _1934;
    float _1992 = (0.5 / (((_1949 * ((_1948 * _1981) + _1934)) + 9.9999999392252902907785028219223e-09) + (((_1949 * _1981) + _1934) * _1948))) * _1948;
    float _4159 = isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0));
    float _1994 = (isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0))) * (_1958 / ((_1962 * _1962) * 3.141590118408203125));
    uint _2005 = _1783 + 9u;
    float _2016 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1821].w)) * _534) * 0.949999988079071044921875);
    float _2017 = _2016 * _2016;
    float _2018 = cbLight._m0[_1821].x + _611;
    float _2019 = cbLight._m0[_1821].y + _612;
    float _2020 = cbLight._m0[_1821].z + _613;
    float _2024 = inversesqrt(dot(vec3(_2018, _2019, _2020), vec3(_2018, _2019, _2020)));
    float _2025 = _2024 * _2018;
    float _2026 = _2024 * _2019;
    float _2027 = _2024 * _2020;
    float _2028 = dot(vec3(_531, _532, _533), vec3(cbLight._m0[_1821].xyz));
    float _4170 = isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0));
    float _2031 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
    float _2032 = dot(vec3(_531, _532, _533), vec3(_2025, _2026, _2027));
    float _4181 = isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0));
    float _2035 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
    float _2036 = dot(vec3(cbLight._m0[_1821].xyz), vec3(_2025, _2026, _2027));
    float _4192 = isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0));
    float _2040 = _2017 * _2017;
    float _2044 = ((_2035 * _2035) * (_2040 + (-1.0))) + 1.0;
    float _2051 = exp2(log2(1.0 - (isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0)))) * 5.0);
    float _2058 = 1.0 - _2017;
    float _2068 = (0.5 / (((_1949 * ((_2031 * _2058) + _2017)) + 9.9999999392252902907785028219223e-09) + (((_1949 * _2058) + _2017) * _2031))) * _2031;
    float _4203 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
    float _2070 = (isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0))) * (_2040 / ((_2044 * _2044) * 3.141590118408203125));
    float _2080 = (((((_2051 * _1971) + _696) * cbLight._m0[_2005].x) * _2070) * _1806) + (((((_1970 * _1971) + _696) * cbLight._m0[_1920].x) * _1994) * _1817);
    float _2081 = (((((_2051 * _1973) + _698) * cbLight._m0[_2005].y) * _2070) * _1806) + (((((_1970 * _1973) + _698) * cbLight._m0[_1920].y) * _1994) * _1817);
    float _2082 = (((((_2051 * _1974) + _699) * cbLight._m0[_2005].z) * _2070) * _1806) + (((((_1970 * _1974) + _699) * cbLight._m0[_1920].z) * _1994) * _1817);
    float _2144;
    float _2146;
    float _2148;
    if (_1857)
    {
        _2144 = _2080;
        _2146 = _2081;
        _2148 = _2082;
    }
    else
    {
        uint _2150 = _1783 + 2u;
        uint _2154 = _1783 + 10u;
        float _2168 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2150].w)) * _534) * 0.949999988079071044921875);
        float _2169 = _2168 * _2168;
        float _2170 = cbLight._m0[_2150].x + _611;
        float _2171 = cbLight._m0[_2150].y + _612;
        float _2172 = cbLight._m0[_2150].z + _613;
        float _2176 = inversesqrt(dot(vec3(_2170, _2171, _2172), vec3(_2170, _2171, _2172)));
        float _2177 = _2176 * _2170;
        float _2178 = _2176 * _2171;
        float _2179 = _2176 * _2172;
        float _2180 = dot(vec3(_531, _532, _533), vec3(cbLight._m0[_2150].xyz));
        float _4214 = isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0));
        float _2183 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
        float _2184 = dot(vec3(_531, _532, _533), vec3(_2177, _2178, _2179));
        float _4225 = isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0));
        float _2187 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
        float _2188 = dot(vec3(cbLight._m0[_2150].xyz), vec3(_2177, _2178, _2179));
        float _4236 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
        float _2192 = _2169 * _2169;
        float _2196 = ((_2187 * _2187) * (_2192 + (-1.0))) + 1.0;
        float _2203 = exp2(log2(1.0 - (isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0)))) * 5.0);
        float _2210 = 1.0 - _2169;
        float _2220 = (0.5 / (((_1949 * ((_2183 * _2210) + _2169)) + 9.9999999392252902907785028219223e-09) + (((_1949 * _2210) + _2169) * _2183))) * _2183;
        float _4247 = isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0));
        float _2222 = (isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0))) * (_2192 / ((_2196 * _2196) * 3.141590118408203125));
        float _2223 = isnan(1.0) ? _1798 : (isnan(_1798) ? 1.0 : min(_1798, 1.0));
        _2144 = (((((_2203 * _1971) + _696) * cbLight._m0[_2154].x) * _2222) * _2223) + _2080;
        _2146 = (((((_2203 * _1973) + _698) * cbLight._m0[_2154].y) * _2222) * _2223) + _2081;
        _2148 = (((((_2203 * _1974) + _699) * cbLight._m0[_2154].z) * _2222) * _2223) + _2082;
    }
    float _2258;
    float _2260;
    float _2262;
    if (_1875)
    {
        _2258 = _2144;
        _2260 = _2146;
        _2262 = _2148;
    }
    else
    {
        uint _2269 = _1783 + 3u;
        uint _2273 = _1783 + 11u;
        float _2287 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2269].w)) * _534) * 0.949999988079071044921875);
        float _2288 = _2287 * _2287;
        float _2289 = cbLight._m0[_2269].x + _611;
        float _2290 = cbLight._m0[_2269].y + _612;
        float _2291 = cbLight._m0[_2269].z + _613;
        float _2295 = inversesqrt(dot(vec3(_2289, _2290, _2291), vec3(_2289, _2290, _2291)));
        float _2296 = _2295 * _2289;
        float _2297 = _2295 * _2290;
        float _2298 = _2295 * _2291;
        float _2299 = dot(vec3(_531, _532, _533), vec3(cbLight._m0[_2269].xyz));
        float _4263 = isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0));
        float _2302 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
        float _2303 = dot(vec3(_531, _532, _533), vec3(_2296, _2297, _2298));
        float _4274 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
        float _2306 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
        float _2307 = dot(vec3(cbLight._m0[_2269].xyz), vec3(_2296, _2297, _2298));
        float _4285 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
        float _2311 = _2288 * _2288;
        float _2315 = ((_2306 * _2306) * (_2311 + (-1.0))) + 1.0;
        float _2322 = exp2(log2(1.0 - (isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0)))) * 5.0);
        float _2329 = 1.0 - _2288;
        float _2339 = (0.5 / (((_1949 * ((_2302 * _2329) + _2288)) + 9.9999999392252902907785028219223e-09) + (((_1949 * _2329) + _2288) * _2302))) * _2302;
        float _4296 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
        float _2341 = (isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0))) * (_2311 / ((_2315 * _2315) * 3.141590118408203125));
        float _2342 = isnan(1.0) ? _1799 : (isnan(_1799) ? 1.0 : min(_1799, 1.0));
        _2258 = (((((_2322 * _1971) + _696) * cbLight._m0[_2273].x) * _2341) * _2342) + _2144;
        _2260 = (((((_2322 * _1973) + _698) * cbLight._m0[_2273].y) * _2341) * _2342) + _2146;
        _2262 = (((((_2322 * _1974) + _699) * cbLight._m0[_2273].z) * _2341) * _2342) + _2148;
    }
    float _2477;
    float _2479;
    float _2481;
    float _2483;
    float _2485;
    float _2487;
    if (_1781.y == 0u)
    {
        float _2417 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2418 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2417;
        float _2419 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2417;
        float _2420 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2417;
        uvec4 _2432 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2433 = _2432.x;
        uint _2444 = uint((float(_2432.y) * floor(float(uint(cbSceneParam._m0[85u].y * _633) / _2433))) + floor(float(uint(cbSceneParam._m0[85u].x * _632) / _2433)));
        float _2454 = (log2(_2420 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2455 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
        uint _2458 = uint(isnan(14.0) ? _2455 : (isnan(_2455) ? 14.0 : min(_2455, 14.0)));
        uvec4 _2463 = texelFetch(g_lightClusterGridBuffer, int(((_2458 << 2u) + (_2444 << 6u)) >> 2u));
        uint _2464 = _2463.x;
        uint _2465 = _2432.z;
        float _2565;
        float _2567;
        float _2569;
        float _2571;
        float _2573;
        float _2575;
        if (((((1u << ((_2465 >> 4u) & 15u)) + 4294967295u) & _2464) == 0u) || ((_2465 & 240u) == 0u))
        {
            _2565 = 0.0;
            _2567 = 0.0;
            _2569 = 0.0;
            _2571 = 0.0;
            _2573 = 0.0;
            _2575 = 0.0;
        }
        else
        {
            float _2566;
            float _2568;
            float _2570;
            float _2572;
            float _2574;
            float _2576;
            float _2718 = 0.0;
            float _2719 = 0.0;
            float _2720 = 0.0;
            float _2721 = 0.0;
            float _2722 = 0.0;
            float _2723 = 0.0;
            uint _2724 = 0u;
            uint _2733;
            bool _2734;
            for (;;)
            {
                _2733 = texelFetch(g_lightClassification, int((((_2458 << 5u) + (_2444 << 9u)) + (_2724 << 2u)) >> 2u)).x;
                _2734 = _2733 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2734)
                {
                    frontier_phi_66_pred = _2718;
                    frontier_phi_66_pred_1 = _2723;
                    frontier_phi_66_pred_2 = _2722;
                    frontier_phi_66_pred_3 = _2721;
                    frontier_phi_66_pred_4 = _2720;
                    frontier_phi_66_pred_5 = _2719;
                }
                else
                {
                    float _2863;
                    float _2864;
                    float _2865;
                    float _2866;
                    float _2867;
                    float _2868;
                    uint _2869;
                    _2863 = _2718;
                    _2864 = _2719;
                    _2865 = _2720;
                    _2866 = _2721;
                    _2867 = _2722;
                    _2868 = _2723;
                    _2869 = _2733;
                    float _2790;
                    float _2791;
                    float _2792;
                    float _2793;
                    float _2794;
                    float _2795;
                    for (;;)
                    {
                        uint _2873 = uint(findLSB(_2869)) + (_2724 << 5u);
                        uint _2870 = (_2869 + 4294967295u) & _2869;
                        uint _2875 = _2873 * 48u;
                        vec4 _2889 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2875)).x, texelFetch(g_PointLightRenderingBuffer, int(_2875 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2875 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2875 + 3u)).x));
                        uint _2895 = (_2873 * 48u) + 4u;
                        vec4 _2908 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2895)).x, texelFetch(g_PointLightRenderingBuffer, int(_2895 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2895 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2895 + 3u)).x));
                        uint _2914 = (_2873 * 48u) + 8u;
                        vec3 _2925 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2914)).x, texelFetch(g_PointLightRenderingBuffer, int(_2914 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2914 + 2u)).x));
                        float _2929 = _2889.x - _2418;
                        float _2930 = _2889.y - _2419;
                        float _2931 = _2889.z - _2420;
                        float _2932 = dot(vec3(_2929, _2930, _2931), vec3(_2929, _2930, _2931));
                        float _2935 = inversesqrt(_2932);
                        float _2936 = _2935 * _2929;
                        float _2937 = _2935 * _2930;
                        float _2938 = _2935 * _2931;
                        float _2939 = dot(vec3(_653, _656, _659), vec3(_2936, _2937, _2938));
                        float _2944 = 1.0 - (_2932 * _2889.w);
                        float _4322 = isnan(0.0) ? _2944 : (isnan(_2944) ? 0.0 : max(_2944, 0.0));
                        float _2945 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
                        float _2946 = sqrt(_2932) * _2908.w;
                        float _2949 = 1.39999997615814208984375 / (_2946 + 1.39999997615814208984375);
                        float _2950 = _2949 * _2949;
                        float _2953 = ((1.0 - _2950) * _2939) + _2950;
                        float _2956 = _2946 * _2946;
                        float _2960 = ((isnan(0.0) ? _2953 : (isnan(_2953) ? 0.0 : max(_2953, 0.0))) * _2945) / ((_2956 * 0.699999988079071044921875) + 1.0);
                        float _2964 = (-0.0) - _2418;
                        float _2965 = (-0.0) - _2419;
                        float _2966 = (-0.0) - _2420;
                        float _2970 = inversesqrt(dot(vec3(_2964, _2965, _2966), vec3(_2964, _2965, _2966)));
                        float _2971 = _2970 * _2964;
                        float _2972 = _2970 * _2965;
                        float _2973 = _2970 * _2966;
                        float _2981 = exp2(log2(1.0 / ((_2956 * 3.5) + 5.0)) * 0.25);
                        float _2982 = 1.0 - _728;
                        float _2989 = sqrt(1.0 - ((1.0 - (_2982 * _2982)) * (1.0 - (_2981 * _2981))));
                        float _2990 = _2989 * _2989;
                        float _2991 = _2990 * _2990;
                        float _2992 = _2971 + _2936;
                        float _2993 = _2972 + _2937;
                        float _2994 = _2973 + _2938;
                        float _2998 = inversesqrt(dot(vec3(_2992, _2993, _2994), vec3(_2992, _2993, _2994)));
                        float _3002 = dot(vec3(_653, _656, _659), vec3(_2971, _2972, _2973));
                        float _4338 = isnan(0.0) ? _3002 : (isnan(_3002) ? 0.0 : max(_3002, 0.0));
                        float _3005 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
                        float _3006 = dot(vec3(_653, _656, _659), vec3(_2998 * _2992, _2998 * _2993, _2998 * _2994));
                        float _4349 = isnan(0.0) ? _3006 : (isnan(_3006) ? 0.0 : max(_3006, 0.0));
                        float _3009 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
                        float _3013 = ((_3009 * _3009) * (_2991 + (-1.0))) + 1.0;
                        float _3014 = _2949 * _2990;
                        float _3015 = _3014 * _3014;
                        float _3018 = ((1.0 - _3015) * _2939) + _3015;
                        float _4360 = isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : max(_3018, 0.0));
                        float _3019 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
                        float _3020 = 1.0 - _2990;
                        float _3030 = (0.5 / (((_3019 * ((_3005 * _3020) + _2990)) + 9.9999999392252902907785028219223e-09) + (((_3019 * _3020) + _2990) * _3005))) * _3019;
                        float _4371 = isnan(0.0) ? _3030 : (isnan(_3030) ? 0.0 : max(_3030, 0.0));
                        float _3040 = (((_2991 * 3.1415927410125732421875) * (isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0)))) / ((_3013 * _3013) * ((_2956 * 2.1991131305694580078125) + 3.141590118408203125))) * _2945;
                        _2793 = (_2960 * _2908.x) + _2866;
                        _2794 = (_2960 * _2908.y) + _2867;
                        _2795 = (_2960 * _2908.z) + _2868;
                        _2790 = (_3040 * _2925.x) + _2863;
                        _2791 = (_3040 * _2925.y) + _2864;
                        _2792 = (_3040 * _2925.z) + _2865;
                        if (_2870 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2863 = _2790;
                            _2864 = _2791;
                            _2865 = _2792;
                            _2866 = _2793;
                            _2867 = _2794;
                            _2868 = _2795;
                            _2869 = _2870;
                        }
                    }
                    frontier_phi_66_pred = _2790;
                    frontier_phi_66_pred_1 = _2795;
                    frontier_phi_66_pred_2 = _2794;
                    frontier_phi_66_pred_3 = _2793;
                    frontier_phi_66_pred_4 = _2792;
                    frontier_phi_66_pred_5 = _2791;
                }
                _2566 = frontier_phi_66_pred;
                _2576 = frontier_phi_66_pred_1;
                _2574 = frontier_phi_66_pred_2;
                _2572 = frontier_phi_66_pred_3;
                _2570 = frontier_phi_66_pred_4;
                _2568 = frontier_phi_66_pred_5;
                uint _2725 = _2724 + 1u;
                if (_2725 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2718 = _2566;
                    _2719 = _2568;
                    _2720 = _2570;
                    _2721 = _2572;
                    _2722 = _2574;
                    _2723 = _2576;
                    _2724 = _2725;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2565 = _2566;
            _2567 = _2568;
            _2569 = _2570;
            _2571 = _2572;
            _2573 = _2574;
            _2575 = _2576;
        }
        uvec4 _2579 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2580 = _2579.z;
        uint _2582 = (_2580 >> 8u) & 15u;
        float _2686;
        float _2688;
        float _2690;
        float _2692;
        float _2694;
        float _2696;
        if (((4294967295u << _2582) & _2464) == 0u)
        {
            _2686 = _2565;
            _2688 = _2567;
            _2690 = _2569;
            _2692 = _2571;
            _2694 = _2573;
            _2696 = _2575;
        }
        else
        {
            float _2711 = inversesqrt(dot(vec3(_2418, _2419, _2420), vec3(_2418, _2419, _2420)));
            float _2712 = _2711 * _2418;
            float _2713 = _2711 * _2419;
            float _2714 = _2711 * _2420;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2582 < ((_2580 >> 12u) & 15u))
            {
                float _2687;
                float _2689;
                float _2691;
                float _2693;
                float _2695;
                float _2697;
                float _2846 = _2565;
                float _2847 = _2567;
                float _2848 = _2569;
                float _2849 = _2571;
                float _2850 = _2573;
                float _2851 = _2575;
                uint _2852 = _2582;
                uint _2861;
                bool _2862;
                for (;;)
                {
                    _2861 = texelFetch(g_lightClassification, int((((_2458 << 5u) + (_2444 << 9u)) + (_2852 << 2u)) >> 2u)).x;
                    _2862 = _2861 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2862)
                    {
                        frontier_phi_77_pred = _2851;
                        frontier_phi_77_pred_1 = _2850;
                        frontier_phi_77_pred_2 = _2849;
                        frontier_phi_77_pred_3 = _2848;
                        frontier_phi_77_pred_4 = _2847;
                        frontier_phi_77_pred_5 = _2846;
                    }
                    else
                    {
                        float _3054;
                        float _3055;
                        float _3056;
                        float _3057;
                        float _3058;
                        float _3059;
                        float _3349;
                        float _3350;
                        float _3351;
                        float _3352;
                        float _3353;
                        float _3354;
                        float _3067 = _2846;
                        float _3068 = _2847;
                        float _3069 = _2848;
                        float _3070 = _2849;
                        float _3071 = _2850;
                        float _3072 = _2851;
                        uint _3073 = _2861;
                        uint _3074;
                        vec4 _3099;
                        float _3100;
                        vec4 _3115;
                        vec3 _3127;
                        vec4 _3143;
                        vec4 _3159;
                        float _3205;
                        bool _3206;
                        for (;;)
                        {
                            uint _3084 = ((_2852 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3073));
                            _3074 = (_3073 + 4294967295u) & _3073;
                            uint _3086 = _3084 * 40u;
                            _3099 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3086)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 3u)).x));
                            _3100 = _3099.w;
                            uint _3102 = (_3084 * 40u) + 4u;
                            _3115 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3102)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3102 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3102 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3102 + 3u)).x));
                            uint _3117 = (_3084 * 40u) + 8u;
                            _3127 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3117)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3117 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3117 + 2u)).x));
                            uint _3130 = (_3084 * 40u) + 16u;
                            _3143 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3130)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 3u)).x));
                            uint _3146 = (_3084 * 40u) + 20u;
                            _3159 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3146)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3146 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3146 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3146 + 3u)).x));
                            uint _3161 = (_3084 * 40u) + 24u;
                            vec4 _3174 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3161)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3161 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3161 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3161 + 3u)).x));
                            uint _3180 = (_3084 * 40u) + 28u;
                            vec4 _3193 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3180)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3180 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3180 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3180 + 3u)).x));
                            _3205 = fma(_2420, _3193.z, fma(_2419, _3193.y, _3193.x * _2418)) + _3193.w;
                            _3206 = !((fma(_2420, _3174.z, fma(_2419, _3174.y, _3174.x * _2418)) + _3174.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3206)
                            {
                                float _3233 = _3099.x - _2418;
                                float _3234 = _3099.y - _2419;
                                float _3235 = _3099.z - _2420;
                                float _3236 = dot(vec3(_3233, _3234, _3235), vec3(_3233, _3234, _3235));
                                float _3239 = inversesqrt(_3236);
                                float _3240 = _3239 * _3233;
                                float _3241 = _3239 * _3234;
                                float _3242 = _3239 * _3235;
                                float _3246 = 1.0 - (_3236 / (_3100 * _3100));
                                float _4382 = isnan(0.0) ? _3246 : (isnan(_3246) ? 0.0 : max(_3246, 0.0));
                                float _3247 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
                                float _3251 = sqrt(_3236) * _3115.w;
                                float _3253 = 1.39999997615814208984375 / (_3251 + 1.39999997615814208984375);
                                float _3254 = _3253 * _3253;
                                float _3257 = ((1.0 - _3254) * dot(vec3(_3240, _3241, _3242), vec3(_653, _656, _659))) + _3254;
                                float _3260 = _3251 * _3251;
                                float _3264 = (fma(_2420, _3143.z, fma(_2419, _3143.y, _3143.x * _2418)) + _3143.w) / _3205;
                                float _3265 = (fma(_2420, _3159.z, fma(_2419, _3159.y, _3159.x * _2418)) + _3159.w) / _3205;
                                float _3269 = 1.0 - dot(vec2(_3264, _3265), vec2(_3264, _3265));
                                float _4398 = isnan(0.0) ? _3269 : (isnan(_3269) ? 0.0 : max(_3269, 0.0));
                                float _3270 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
                                float _3271 = _3270 * (((isnan(0.0) ? _3257 : (isnan(_3257) ? 0.0 : max(_3257, 0.0))) * _3247) / ((_3260 * 0.699999988079071044921875) + 1.0));
                                float _3283 = exp2(log2(1.0 / ((_3260 * 3.5) + 5.0)) * 0.25);
                                float _3284 = 1.0 - _728;
                                float _3291 = sqrt(1.0 - ((1.0 - (_3284 * _3284)) * (1.0 - (_3283 * _3283))));
                                float _3292 = _3291 * _3291;
                                float _3293 = _3292 * _3292;
                                float _3294 = _3240 - _2712;
                                float _3295 = _3241 - _2713;
                                float _3296 = _3242 - _2714;
                                float _3300 = inversesqrt(dot(vec3(_3294, _3295, _3296), vec3(_3294, _3295, _3296)));
                                float _3304 = dot(vec3(_653, _656, _659), vec3((-0.0) - _2712, (-0.0) - _2713, (-0.0) - _2714));
                                float _4409 = isnan(0.0) ? _3304 : (isnan(_3304) ? 0.0 : max(_3304, 0.0));
                                float _3307 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
                                float _3308 = dot(vec3(_653, _656, _659), vec3(_3300 * _3294, _3300 * _3295, _3300 * _3296));
                                float _4420 = isnan(0.0) ? _3308 : (isnan(_3308) ? 0.0 : max(_3308, 0.0));
                                float _3311 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
                                float _3315 = ((_3311 * _3311) * (_3293 + (-1.0))) + 1.0;
                                float _3316 = _3253 * _3292;
                                float _3317 = _3316 * _3316;
                                float _3323 = ((1.0 - _3317) * dot(vec3(_653, _656, _659), vec3(_3240, _3241, _3242))) + _3317;
                                float _4431 = isnan(0.0) ? _3323 : (isnan(_3323) ? 0.0 : max(_3323, 0.0));
                                float _3324 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
                                float _3325 = 1.0 - _3292;
                                float _3335 = (0.5 / (((_3324 * ((_3307 * _3325) + _3292)) + 9.9999999392252902907785028219223e-09) + (((_3324 * _3325) + _3292) * _3307))) * _3324;
                                float _4442 = isnan(0.0) ? _3335 : (isnan(_3335) ? 0.0 : max(_3335, 0.0));
                                float _3345 = (_3270 * _3247) * (((_3293 * 3.1415927410125732421875) * (isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0)))) / ((_3315 * _3315) * ((_3260 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3271 * _3115.y;
                                frontier_phi_83_pred_1 = _3271 * _3115.x;
                                frontier_phi_83_pred_2 = _3345 * _3127.z;
                                frontier_phi_83_pred_3 = _3345 * _3127.y;
                                frontier_phi_83_pred_4 = _3345 * _3127.x;
                                frontier_phi_83_pred_5 = _3271 * _3115.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3353 = frontier_phi_83_pred;
                            _3352 = frontier_phi_83_pred_1;
                            _3351 = frontier_phi_83_pred_2;
                            _3350 = frontier_phi_83_pred_3;
                            _3349 = frontier_phi_83_pred_4;
                            _3354 = frontier_phi_83_pred_5;
                            _3057 = _3352 + _3070;
                            _3058 = _3353 + _3071;
                            _3059 = _3354 + _3072;
                            _3054 = _3349 + _3067;
                            _3055 = _3350 + _3068;
                            _3056 = _3351 + _3069;
                            if (_3074 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3067 = _3054;
                                _3068 = _3055;
                                _3069 = _3056;
                                _3070 = _3057;
                                _3071 = _3058;
                                _3072 = _3059;
                                _3073 = _3074;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3059;
                        frontier_phi_77_pred_1 = _3058;
                        frontier_phi_77_pred_2 = _3057;
                        frontier_phi_77_pred_3 = _3056;
                        frontier_phi_77_pred_4 = _3055;
                        frontier_phi_77_pred_5 = _3054;
                    }
                    _2697 = frontier_phi_77_pred;
                    _2695 = frontier_phi_77_pred_1;
                    _2693 = frontier_phi_77_pred_2;
                    _2691 = frontier_phi_77_pred_3;
                    _2689 = frontier_phi_77_pred_4;
                    _2687 = frontier_phi_77_pred_5;
                    uint _2853 = _2852 + 1u;
                    if (_2853 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2846 = _2687;
                        _2847 = _2689;
                        _2848 = _2691;
                        _2849 = _2693;
                        _2850 = _2695;
                        _2851 = _2697;
                        _2852 = _2853;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2691;
                frontier_phi_58_59_ladder_1 = _2697;
                frontier_phi_58_59_ladder_2 = _2695;
                frontier_phi_58_59_ladder_3 = _2693;
                frontier_phi_58_59_ladder_4 = _2689;
                frontier_phi_58_59_ladder_5 = _2687;
            }
            else
            {
                frontier_phi_58_59_ladder = _2569;
                frontier_phi_58_59_ladder_1 = _2575;
                frontier_phi_58_59_ladder_2 = _2573;
                frontier_phi_58_59_ladder_3 = _2571;
                frontier_phi_58_59_ladder_4 = _2567;
                frontier_phi_58_59_ladder_5 = _2565;
            }
            _2686 = frontier_phi_58_59_ladder_5;
            _2688 = frontier_phi_58_59_ladder_4;
            _2690 = frontier_phi_58_59_ladder;
            _2692 = frontier_phi_58_59_ladder_3;
            _2694 = frontier_phi_58_59_ladder_2;
            _2696 = frontier_phi_58_59_ladder_1;
        }
        float _2701 = isnan(1.0) ? _712 : (isnan(_712) ? 1.0 : min(_712, 1.0));
        _2477 = (_2701 * _2692) + _1913;
        _2479 = (_2701 * _2694) + _1915;
        _2481 = (_2701 * _2696) + _1917;
        _2483 = ((_2686 * _696) * _2701) + _2258;
        _2485 = ((_2688 * _698) * _2701) + _2260;
        _2487 = ((_2690 * _699) * _2701) + _2262;
    }
    else
    {
        _2477 = _1913;
        _2479 = _1915;
        _2481 = _1917;
        _2483 = _2258;
        _2485 = _2260;
        _2487 = _2262;
    }
    float _4458 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
    float _4469 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
    float _4480 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _2504 = ((isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0))) * (_2477 + ((isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0))) * _712))) + ((_2483 + ((isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0))) * _1549)) * cbPerFrame._m0[3u].x);
    float _2505 = ((isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0))) * (_2479 + ((isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0))) * _712))) + ((_2485 + ((isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0))) * _1549)) * cbPerFrame._m0[3u].x);
    float _2506 = ((isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0))) * (_2481 + ((isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0))) * _712))) + ((_2487 + ((isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0))) * _1549)) * cbPerFrame._m0[3u].x);
    uint _2507 = _293 + 6u;
    float _2515 = _632 / cbSceneParam._m0[86u].x;
    float _2516 = _633 / cbSceneParam._m0[86u].y;
    vec4 _2530 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2515, _2516, (log2((isnan(cbSceneParam._m0[77u].w) ? _553 : (isnan(_553) ? cbSceneParam._m0[77u].w : min(_553, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2532 = _2530.x;
    float _2533 = _2530.y;
    float _2534 = _2530.z;
    float _2535 = _2530.w;
    float _2628;
    float _2630;
    float _2632;
    float _2634;
    if (_553 > cbSceneParam._m0[78u].w)
    {
        float _2590 = isnan(_553) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _553 : min(cbSceneParam._m0[80u].w, _553));
        float _2591 = _2590 / _553;
        float _2602 = _2591 * _604;
        float _2603 = _605 * _2591;
        float _2604 = (-0.0) - _2603;
        float _2606 = _2591 * _606;
        float _2608 = (cbSceneParam._m0[77u].w * _2604) / _2590;
        float _2609 = _2608 + cbSceneParam._m0[79u].w;
        float _2610 = cbSceneParam._m0[79u].w - _2603;
        float _2616 = sqrt(((_2602 * _2602) + (_2603 * _2603)) + (_2606 * _2606));
        float _2619 = (1.0 - (cbSceneParam._m0[77u].w / _2590)) * _2616;
        float _2624 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2626 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2803;
        if (abs((_2604 - _2608) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2803 = ((((_2609 > 0.0) ? exp2(_2624 * _2609) : (2.0 - exp2(_2626 * _2609))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2619;
        }
        else
        {
            float _2747 = 1.0 / cbSceneParam._m0[80u].x;
            float _2748 = isnan(_2610) ? _2609 : (isnan(_2609) ? _2610 : max(_2609, _2610));
            float _2749 = isnan(_2610) ? _2609 : (isnan(_2609) ? _2610 : min(_2609, _2610));
            float _2758 = isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : min(_2748, 0.0));
            float _2759 = isnan(0.0) ? _2749 : (isnan(_2749) ? 0.0 : min(_2749, 0.0));
            _2803 = ((abs(_2616 / _2604) * cbSceneParam._m0[80u].y) * ((((_2758 - _2759) * 2.0) - ((exp2(_2624 * (isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : max(_2748, 0.0)))) - exp2(_2624 * (isnan(0.0) ? _2749 : (isnan(_2749) ? 0.0 : max(_2749, 0.0))))) * _2747)) - ((exp2(_2626 * _2758) - exp2(_2626 * _2759)) * _2747))) + (_2619 * cbSceneParam._m0[80u].z);
        }
        vec4 _2805 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2515, _2516, 1.0), 0.0);
        float _2814 = exp2((_2803 * (-1.44269502162933349609375)) * (1.0 - _2805.w));
        float _2815 = log2(_2814);
        float _2831 = log2(_2535);
        _2628 = (exp2(_2831 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2815 * cbSceneParam._m0[78u].x)) * _2805.x) / cbSceneParam._m0[78u].x)) + _2532;
        _2630 = (exp2(_2831 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2815 * cbSceneParam._m0[78u].y)) * _2805.y) / cbSceneParam._m0[78u].y)) + _2533;
        _2632 = (exp2(_2831 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2815 * cbSceneParam._m0[78u].z)) * _2805.z) / cbSceneParam._m0[78u].z)) + _2534;
        _2634 = _2814 * _2535;
    }
    else
    {
        _2628 = _2532;
        _2630 = _2533;
        _2632 = _2534;
        _2634 = _2535;
    }
    bool _2841;
    vec4 _2644;
    vec4 _2666;
    float _2668;
    float _2672;
    float _2673;
    float _2674;
    float _2675;
    bool _2685;
    for (;;)
    {
        _2644 = cbMatDynParam._m0[0u];
        float _2646 = roundEven(_2644.y);
        bool _2647 = _2646 == 3.0;
        float _2648 = log2(_2634);
        float _2655 = exp2(_2648 * cbSceneParam._m0[78u].x) * _2504;
        float _2656 = exp2(_2648 * cbSceneParam._m0[78u].y) * _2505;
        float _2657 = exp2(_2648 * cbSceneParam._m0[78u].z) * _2506;
        float _2664 = _620 + (-0.5);
        _2666 = cbMtdParam._m0[1u];
        _2668 = _2666.y * _2664;
        float _2671 = (_2646 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2672 = _2671 * (_2647 ? _2655 : (_2655 + (cbSceneParam._m0[72u].w * _2628)));
        _2673 = _2671 * (_2647 ? _2656 : (_2656 + (cbSceneParam._m0[72u].w * _2630)));
        _2674 = _2671 * (_2647 ? _2657 : (_2657 + (cbSceneParam._m0[72u].w * _2632)));
        _2675 = _2664 * 0.999000012874603271484375;
        _2685 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2685)
        {
            if ((cbInstanceData._m0[_293 + 7u].x + _2675) < 0.5)
            {
                _2841 = true;
                break;
            }
        }
        uint _2782 = _672 + uint(_2644.w);
        if ((cbInstanceData._m0[_2782].w < 1.0) && ((cbInstanceData._m0[_2782].w + _2675) < 0.5))
        {
            _2841 = true;
            break;
        }
        if ((_2668 + 1.0) < _2666.x)
        {
            _2841 = true;
            break;
        }
        _2841 = false;
        break;
    }
    float _3045;
    if (_2841)
    {
        discard_state = true;
        _3045 = 0.0;
    }
    else
    {
        _3045 = cbInstanceData._m0[_2507].w;
    }
    SV_Target.x = _2672;
    SV_Target.y = _2673;
    SV_Target.z = _2674;
    SV_Target.w = _3045;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2507].w;
    discard_exit();
}


