#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1193;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _215 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _216 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _217 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _223 = inversesqrt(dot(vec3(_215, _216, _217), vec3(_215, _216, _217)));
    float _224 = _223 * _215;
    float _225 = _223 * _216;
    float _226 = _223 * _217;
    float _230 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _231 = _230 * NORMAL.x;
    float _232 = _230 * NORMAL.y;
    float _233 = _230 * NORMAL.z;
    float _237 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _238 = _237 * TANGENT.x;
    float _239 = _237 * TANGENT.y;
    float _240 = _237 * TANGENT.z;
    uint _243 = uint(roundEven(NORMAL.w)) * 13u;
    uint _248 = _243 + 1u;
    uint _252 = _243 + 2u;
    float _261 = sqrt(((cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x) + (cbInstanceData._m0[_243].x * cbInstanceData._m0[_243].x)) + (cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x));
    float _262 = _261 * TEXCOORD.z;
    float _263 = _261 * TEXCOORD.w;
    vec4 _282 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _288 = _282.x * cbMtdParam._m0[9u].x;
    float _289 = _282.y * cbMtdParam._m0[9u].y;
    float _290 = _282.z * cbMtdParam._m0[9u].z;
    vec4 _308 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _262) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _263) + cbTextureTilingScale._m0[20u].w));
    vec4 _334 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _338 = _334.z;
    float _342 = (_334.x * 2.0) + (-1.0);
    float _343 = (_334.y * 2.0) + (-1.0);
    float _344 = dot(vec2(_342, _343), vec2(_342, _343));
    float _3545 = isnan(0.0) ? _344 : (isnan(_344) ? 0.0 : max(_344, 0.0));
    float _350 = sqrt(1.0 - (isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0))));
    float _355 = _342 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_308.x * 2.0) + (-1.0)));
    float _356 = _343 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_308.y * 2.0) + (-1.0)));
    float _359 = fma(_350, _231, fma(_356, _238, _355 * _224));
    float _362 = fma(_350, _232, fma(_356, _239, _355 * _225));
    float _365 = fma(_350, _233, fma(_356, _240, _355 * _226));
    float _369 = inversesqrt(dot(vec3(_359, _362, _365), vec3(_359, _362, _365)));
    vec4 _405 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _262) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _263) + cbTextureTilingScale._m0[11u].w));
    float _407 = _405.x;
    float _408 = 1.0 - _407;
    float _415 = ((_407 - _408) * cbMtdParam._m0[24u].z) + _408;
    float _417 = (cbMtdParam._m0[19u].x + dot(vec4(_369 * _359, _369 * _362, _369 * _365, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_415 * cbMtdParam._m0[21u].z);
    float _3556 = isnan(0.0) ? _417 : (isnan(_417) ? 0.0 : max(_417, 0.0));
    float _418 = isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0));
    float _420 = (-0.0) - cbMtdParam._m0[24u].x;
    float _422 = isnan(0.0) ? _420 : (isnan(_420) ? 0.0 : max(_420, 0.0));
    float _423 = isnan(1.0) ? _422 : (isnan(_422) ? 1.0 : min(_422, 1.0));
    float _430 = _418 - ((_418 * TEXCOORD_8.x) * _423);
    float _431 = _418 - ((_418 * TEXCOORD_8.y) * _423);
    float _432 = _418 - ((_418 * TEXCOORD_8.z) * _423);
    float _439 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _443 = ((isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : min(_439, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _451 = (_443 - (((_415 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _443))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3587 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _452 = isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0));
    float _456 = ((_430 * (cbMtdParam._m0[17u].x - _288)) * _452) + _288;
    float _457 = ((_431 * (cbMtdParam._m0[17u].y - _289)) * _452) + _289;
    float _458 = ((_432 * (cbMtdParam._m0[17u].z - _290)) * _452) + _290;
    vec4 _470 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _262) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _263) + cbTextureTilingScale._m0[19u].w));
    float _472 = _470.x;
    float _473 = 1.0 - _472;
    float _502 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_472 - _473) * cbMtdParam._m0[24u].w) + _473) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3598 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _503 = isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0));
    float _511 = ((((cbMtdParam._m0[10u].x - _456) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _503) + _456;
    float _512 = ((((cbMtdParam._m0[10u].y - _457) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _503) + _457;
    float _513 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _458)) * _503) + _458;
    vec4 _526 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _528 = _526.x;
    float _531 = _528 - ((_528 * _430) * _452);
    float _533 = _531 - (_531 * _503);
    float _538 = (((_308.z - _338) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _338;
    vec4 _552 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _262) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _263) + cbTextureTilingScale._m0[15u].w));
    float _559 = (_552.x * 2.0) + (-1.0);
    float _560 = (_552.y * 2.0) + (-1.0);
    float _561 = dot(vec2(_559, _560), vec2(_559, _560));
    float _3609 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _570 = (((_552.z - _538) * _430) * _452) + _538;
    float _573 = ((cbMtdParam._m0[23u].y - _570) * _503) + _570;
    vec4 _592 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _262) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _263) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _598 = (_592.x * 2.0) + (-1.0);
    float _599 = (_592.y * 2.0) + (-1.0);
    float _600 = dot(vec2(_598, _599), vec2(_598, _599));
    float _3620 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _620 = (((cbMtdParam._m0[21u].x * _355) + ((_559 - _355) * _430)) * _452) + _355;
    float _621 = (((cbMtdParam._m0[21u].x * _356) + ((_560 - _356) * _431)) * _452) + _356;
    float _622 = (((sqrt(1.0 - (isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0)))) - _350) * _432) * _452) + _350;
    float _633 = (((_598 - _620) + (_620 * cbMtdParam._m0[22u].z)) * _503) + _620;
    float _634 = (((_599 - _621) + (_621 * cbMtdParam._m0[22u].z)) * _503) + _621;
    float _635 = ((sqrt(1.0 - (isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0)))) - _622) * _503) + _622;
    float _637 = cbMtdParam._m0[22u].x + _334.w;
    float _640 = fma(_635, _231, fma(_634, _238, _633 * _224));
    float _643 = fma(_635, _232, fma(_634, _239, _633 * _225));
    float _646 = fma(_635, _233, fma(_634, _240, _633 * _226));
    float _650 = inversesqrt(dot(vec3(_640, _643, _646), vec3(_640, _643, _646)));
    float _651 = _650 * _640;
    float _652 = _650 * _643;
    float _653 = _650 * _646;
    float _3631 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _654 = isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0));
    float _3642 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _3653 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _3664 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _3675 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _3686 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _659 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
    float _673 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _713 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _723 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _713);
    float _724 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _713);
    float _725 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _713);
    float _729 = inversesqrt(dot(vec3(_723, _724, _725), vec3(_723, _724, _725)));
    float _730 = _723 * _729;
    float _731 = _724 * _729;
    float _732 = _725 * _729;
    float _738 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _739 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _760 = fma(_653, cbSceneParam._m0[5u].z, fma(_652, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _651));
    float _763 = fma(_653, cbSceneParam._m0[6u].z, fma(_652, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _651));
    float _766 = fma(_653, cbSceneParam._m0[7u].z, fma(_652, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _651));
    uint _780 = (_243 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _786 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0)))) * cbInstanceData._m0[_780].x;
    float _787 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0)))) * cbInstanceData._m0[_780].y;
    float _788 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0)))) * cbInstanceData._m0[_780].z;
    float _3697 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _789 = isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0));
    float _3708 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
    float _790 = isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0));
    float _3719 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
    float _791 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
    float _792 = 1.0 - _659;
    float _793 = _789 * _792;
    float _794 = _790 * _792;
    float _795 = _791 * _792;
    float _800 = (_789 + (-0.039999999105930328369140625)) * _659;
    float _801 = (_790 + (-0.039999999105930328369140625)) * _659;
    float _802 = (_791 + (-0.039999999105930328369140625)) * _659;
    float _803 = _800 + 0.039999999105930328369140625;
    float _805 = _801 + 0.039999999105930328369140625;
    float _806 = _802 + 0.039999999105930328369140625;
    vec4 _815 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _738, cbSceneParam._m0[86u].y * _739));
    float _819 = ((isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0))) * TEXCOORD_5.w) * _815.x;
    float _820 = dot(vec3(_651, _652, _653), vec3(_730, _731, _732));
    float _823 = _820 * 2.0;
    float _827 = (_823 * _651) - _730;
    float _828 = (_823 * _652) - _731;
    float _829 = (_823 * _653) - _732;
    float _833 = abs(dot(vec3(_730, _731, _732), vec3(_651, _652, _653)));
    float _3730 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
    float _835 = sqrt(_654);
    float _848 = exp2((_835 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_835 * 3.0));
    float _854 = (1.0 - _848) * ((_835 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _855 = _848 * _835;
    float _883 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _887 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _891 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1192;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _917 = fma(_891, cbModelParam._m0[26u].z, fma(_887, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _883));
        float _921 = fma(_891, cbModelParam._m0[27u].z, fma(_887, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _883));
        float _925 = fma(_891, cbModelParam._m0[28u].z, fma(_887, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _883));
        float _950 = _883 + _651;
        float _951 = _887 + _652;
        float _952 = _891 + _653;
        float _962 = fma(_952, cbModelParam._m0[26u].z, fma(_951, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _950)) - _917;
        float _963 = fma(_952, cbModelParam._m0[27u].z, fma(_951, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _950)) - _921;
        float _964 = fma(_952, cbModelParam._m0[28u].z, fma(_951, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _950)) - _925;
        float _968 = inversesqrt(dot(vec3(_962, _963, _964), vec3(_962, _963, _964)));
        float _981 = ((_968 * _962) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_917 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _982 = ((_968 * _963) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_921 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _983 = ((_968 * _964) / cbModelParam._m0[34u].z) + ((((((_925 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _986 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_981, _982, _983), 0.0);
        vec4 _993 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_981, _982, _983), 0.0);
        vec4 _1000 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_981, _982, _983), 0.0);
        vec4 _1007 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_981, _982, _983), 0.0);
        float _1020 = exp2((_986.w + (-0.5)) * 20.0) * 2.0;
        float _1021 = _1020 * (_986.x + (-0.5));
        float _1022 = _1020 * (_986.y + (-0.5));
        float _1023 = _1020 * (_986.z + (-0.5));
        float _1030 = exp2((_993.w + (-0.5)) * 20.0) * 2.0;
        float _1031 = _1030 * (_993.x + (-0.5));
        float _1032 = _1030 * (_993.y + (-0.5));
        float _1033 = _1030 * (_993.z + (-0.5));
        float _1040 = exp2((_1000.w + (-0.5)) * 20.0) * 2.0;
        float _1041 = _1040 * (_1000.x + (-0.5));
        float _1042 = _1040 * (_1000.y + (-0.5));
        float _1043 = _1040 * (_1000.z + (-0.5));
        float _1050 = exp2((_1007.w + (-0.5)) * 20.0) * 2.0;
        float _1051 = _1050 * (_1007.x + (-0.5));
        float _1052 = _1050 * (_1007.y + (-0.5));
        float _1053 = _1050 * (_1007.z + (-0.5));
        float _1054 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1055 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1056 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1057 = _1021 * 0.5;
        float _1058 = _1031 * 0.5;
        float _1059 = _1041 * 0.5;
        float _1060 = dot(vec3(_1057, _1058, _1059), vec3(_1057, _1058, _1059));
        float _1065 = (_1060 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1060);
        float _1074 = (dot(vec3(_651, _652, _653), vec3(_1065 * _1057, _1065 * _1058, _1065 * _1059)) + 1.0) * 0.5;
        float _3756 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1084 = sqrt(((_1058 * _1058) + (_1057 * _1057)) + (_1059 * _1059)) / (_1054 + 9.9999997473787516355514526367188e-06);
        float _3767 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1085 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
        float _1086 = _1085 * 2.0;
        float _1090 = (1.0 - _1085) / (_1085 + 1.0);
        float _3778 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1091 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
        float _1100 = ((((1.0 - _1091) * (_1086 + 2.0)) * exp2(log2(isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0))) * (_1086 + 1.0))) + _1091) * _1054;
        float _1101 = _1022 * 0.5;
        float _1102 = _1032 * 0.5;
        float _1103 = _1042 * 0.5;
        float _1104 = dot(vec3(_1101, _1102, _1103), vec3(_1101, _1102, _1103));
        float _1109 = (_1104 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1104);
        float _1117 = (dot(vec3(_651, _652, _653), vec3(_1109 * _1101, _1109 * _1102, _1109 * _1103)) + 1.0) * 0.5;
        float _3789 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1126 = sqrt(((_1102 * _1102) + (_1101 * _1101)) + (_1103 * _1103)) / (_1055 + 9.9999997473787516355514526367188e-06);
        float _3800 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1127 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
        float _1128 = _1127 * 2.0;
        float _1132 = (1.0 - _1127) / (_1127 + 1.0);
        float _3811 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1133 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
        float _1142 = ((((1.0 - _1133) * (_1128 + 2.0)) * exp2(log2(isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0))) * (_1128 + 1.0))) + _1133) * _1055;
        float _1143 = _1023 * 0.5;
        float _1144 = _1033 * 0.5;
        float _1145 = _1043 * 0.5;
        float _1146 = dot(vec3(_1143, _1144, _1145), vec3(_1143, _1144, _1145));
        float _1151 = (_1146 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1146);
        float _1159 = (dot(vec3(_651, _652, _653), vec3(_1151 * _1143, _1151 * _1144, _1151 * _1145)) + 1.0) * 0.5;
        float _3822 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1168 = sqrt(((_1144 * _1144) + (_1143 * _1143)) + (_1145 * _1145)) / (_1056 + 9.9999997473787516355514526367188e-06);
        float _3833 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1169 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
        float _1170 = _1169 * 2.0;
        float _1174 = (1.0 - _1169) / (_1169 + 1.0);
        float _3844 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1175 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
        float _1184 = ((((1.0 - _1175) * (_1170 + 2.0)) * exp2(log2(isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0))) * (_1170 + 1.0))) + _1175) * _1056;
        _1192 = _1023;
        _1194 = _1022;
        _1195 = _1021;
        _1196 = _1033;
        _1197 = _1032;
        _1198 = _1031;
        _1199 = _1043;
        _1200 = _1042;
        _1201 = _1041;
        _1202 = _1056;
        _1203 = _1055;
        _1204 = _1054;
        _1205 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0)));
        _1206 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0)));
        _1207 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0)));
    }
    else
    {
        _1192 = _1193;
        _1194 = _1193;
        _1195 = _1193;
        _1196 = _1193;
        _1197 = _1193;
        _1198 = _1193;
        _1199 = _1193;
        _1200 = _1193;
        _1201 = _1193;
        _1202 = _1193;
        _1203 = _1193;
        _1204 = _1193;
        _1205 = 0.0;
        _1206 = 0.0;
        _1207 = 0.0;
    }
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1232 = fma(_891, cbModelParam._m0[30u].z, fma(_887, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _883));
        float _1236 = fma(_891, cbModelParam._m0[31u].z, fma(_887, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _883));
        float _1240 = fma(_891, cbModelParam._m0[32u].z, fma(_887, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _883));
        float _1263 = _883 + _651;
        float _1264 = _887 + _652;
        float _1265 = _891 + _653;
        float _1275 = fma(_1265, cbModelParam._m0[30u].z, fma(_1264, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1263)) - _1232;
        float _1276 = fma(_1265, cbModelParam._m0[31u].z, fma(_1264, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1263)) - _1236;
        float _1277 = fma(_1265, cbModelParam._m0[32u].z, fma(_1264, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1263)) - _1240;
        float _1281 = inversesqrt(dot(vec3(_1275, _1276, _1277), vec3(_1275, _1276, _1277)));
        float _1294 = ((_1281 * _1275) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1232 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1295 = ((_1281 * _1276) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1236 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1296 = ((_1281 * _1277) / cbModelParam._m0[35u].z) + ((((((_1240 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1298 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1294, _1295, _1296), 0.0);
        vec4 _1305 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1294, _1295, _1296), 0.0);
        vec4 _1312 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1294, _1295, _1296), 0.0);
        vec4 _1319 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1294, _1295, _1296), 0.0);
        float _1331 = exp2((_1298.w + (-0.5)) * 20.0) * 2.0;
        float _1332 = _1331 * (_1298.x + (-0.5));
        float _1333 = _1331 * (_1298.y + (-0.5));
        float _1334 = _1331 * (_1298.z + (-0.5));
        float _1341 = exp2((_1305.w + (-0.5)) * 20.0) * 2.0;
        float _1342 = _1341 * (_1305.x + (-0.5));
        float _1343 = _1341 * (_1305.y + (-0.5));
        float _1344 = _1341 * (_1305.z + (-0.5));
        float _1351 = exp2((_1312.w + (-0.5)) * 20.0) * 2.0;
        float _1352 = _1351 * (_1312.x + (-0.5));
        float _1353 = _1351 * (_1312.y + (-0.5));
        float _1354 = _1351 * (_1312.z + (-0.5));
        float _1361 = exp2((_1319.w + (-0.5)) * 20.0) * 2.0;
        float _1362 = _1361 * (_1319.x + (-0.5));
        float _1363 = _1361 * (_1319.y + (-0.5));
        float _1364 = _1361 * (_1319.z + (-0.5));
        float _1365 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1366 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1367 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1368 = _1332 * 0.5;
        float _1369 = _1342 * 0.5;
        float _1370 = _1352 * 0.5;
        float _1371 = dot(vec3(_1368, _1369, _1370), vec3(_1368, _1369, _1370));
        float _1376 = (_1371 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1371);
        float _1384 = (dot(vec3(_651, _652, _653), vec3(_1376 * _1368, _1376 * _1369, _1376 * _1370)) + 1.0) * 0.5;
        float _3885 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1393 = sqrt(((_1369 * _1369) + (_1368 * _1368)) + (_1370 * _1370)) / (_1365 + 9.9999997473787516355514526367188e-06);
        float _3896 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1394 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
        float _1395 = _1394 * 2.0;
        float _1399 = (1.0 - _1394) / (_1394 + 1.0);
        float _3907 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1400 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
        float _1409 = ((((1.0 - _1400) * (_1395 + 2.0)) * exp2(log2(isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0))) * (_1395 + 1.0))) + _1400) * _1365;
        float _1410 = _1333 * 0.5;
        float _1411 = _1343 * 0.5;
        float _1412 = _1353 * 0.5;
        float _1413 = dot(vec3(_1410, _1411, _1412), vec3(_1410, _1411, _1412));
        float _1418 = (_1413 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1413);
        float _1426 = (dot(vec3(_651, _652, _653), vec3(_1418 * _1410, _1418 * _1411, _1418 * _1412)) + 1.0) * 0.5;
        float _3918 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1435 = sqrt(((_1411 * _1411) + (_1410 * _1410)) + (_1412 * _1412)) / (_1366 + 9.9999997473787516355514526367188e-06);
        float _3929 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1436 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
        float _1437 = _1436 * 2.0;
        float _1441 = (1.0 - _1436) / (_1436 + 1.0);
        float _3940 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1442 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
        float _1451 = ((((1.0 - _1442) * (_1437 + 2.0)) * exp2(log2(isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0))) * (_1437 + 1.0))) + _1442) * _1366;
        float _1452 = _1334 * 0.5;
        float _1453 = _1344 * 0.5;
        float _1454 = _1354 * 0.5;
        float _1455 = dot(vec3(_1452, _1453, _1454), vec3(_1452, _1453, _1454));
        float _1460 = (_1455 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1455);
        float _1468 = (dot(vec3(_651, _652, _653), vec3(_1460 * _1452, _1460 * _1453, _1460 * _1454)) + 1.0) * 0.5;
        float _3951 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1477 = sqrt(((_1453 * _1453) + (_1452 * _1452)) + (_1454 * _1454)) / (_1367 + 9.9999997473787516355514526367188e-06);
        float _3962 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1478 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
        float _1479 = _1478 * 2.0;
        float _1483 = (1.0 - _1478) / (_1478 + 1.0);
        float _3973 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1484 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
        float _1493 = ((((1.0 - _1484) * (_1479 + 2.0)) * exp2(log2(isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0))) * (_1479 + 1.0))) + _1484) * _1367;
        _1501 = _1334;
        _1502 = _1333;
        _1503 = _1332;
        _1504 = _1344;
        _1505 = _1343;
        _1506 = _1342;
        _1507 = _1354;
        _1508 = _1353;
        _1509 = _1352;
        _1510 = _1367;
        _1511 = _1366;
        _1512 = _1365;
        _1513 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0)));
        _1514 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0)));
        _1515 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0)));
    }
    else
    {
        _1501 = _1193;
        _1502 = _1193;
        _1503 = _1193;
        _1504 = _1193;
        _1505 = _1193;
        _1506 = _1193;
        _1507 = _1193;
        _1508 = _1193;
        _1509 = _1193;
        _1510 = _1193;
        _1511 = _1193;
        _1512 = _1193;
        _1513 = 0.0;
        _1514 = 0.0;
        _1515 = 0.0;
    }
    float _1525 = (cbModelParam._m0[1u].x * (_1513 - _1205)) + _1205;
    float _1526 = (cbModelParam._m0[1u].x * (_1514 - _1206)) + _1206;
    float _1527 = (cbModelParam._m0[1u].x * (_1515 - _1207)) + _1207;
    float _1548 = fma(_1527, cbSceneParam._m0[89u].z, fma(_1526, cbSceneParam._m0[89u].y, _1525 * cbSceneParam._m0[89u].x));
    float _1551 = fma(_1527, cbSceneParam._m0[90u].z, fma(_1526, cbSceneParam._m0[90u].y, _1525 * cbSceneParam._m0[90u].x));
    float _1554 = fma(_1527, cbSceneParam._m0[91u].z, fma(_1526, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1525));
    float _1569 = _827 * 0.5;
    float _1570 = _828 * 0.5;
    float _1571 = _829 * 0.5;
    float _1572 = dot(vec4(_1569, _1570, _1571, 1.0), vec4(_1503, _1506, _1509, _1512));
    float _1575 = dot(vec4(_1569, _1570, _1571, 1.0), vec4(_1502, _1505, _1508, _1511));
    float _1578 = dot(vec4(_1569, _1570, _1571, 1.0), vec4(_1501, _1504, _1507, _1510));
    float _1612;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1585 = dot(vec4(_1569, _1570, _1571, 1.0), vec4(_1192, _1196, _1199, _1202));
        float _1589 = dot(vec4(_1569, _1570, _1571, 1.0), vec4(_1194, _1197, _1200, _1203));
        float _1593 = dot(vec4(_1569, _1570, _1571, 1.0), vec4(_1195, _1198, _1201, _1204));
        float _1600 = dot(vec4(cbModelParam._m0[39u]), vec4(_1569, _1570, _1571, 1.0));
        _1612 = dot(vec3(isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0)), isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0)), isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1600) ? 0.0 : (isnan(0.0) ? _1600 : max(0.0, _1600))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1612 = 1.0;
    }
    float _1623;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1614 = dot(vec4(cbModelParam._m0[40u]), vec4(_1569, _1570, _1571, 1.0));
        _1623 = dot(vec3(isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0)), isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0)), isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1614) ? 0.0 : (isnan(0.0) ? _1614 : max(0.0, _1614))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1623 = 1.0;
    }
    float _1627 = (_1623 * cbModelParam._m0[1u].x) + (_1612 * (1.0 - cbModelParam._m0[1u].x));
    float _1637 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _654);
    float _1638 = isnan(_1637) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1637 : min(cbModelParam._m0[25u].z, _1637));
    float _1719;
    float _1721;
    float _1723;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1686 = fma(_891, cbModelParam._m0[13u].z, fma(_887, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _883)) + cbModelParam._m0[13u].w;
        float _1690 = fma(_891, cbModelParam._m0[14u].z, fma(_887, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _883)) + cbModelParam._m0[14u].w;
        float _1694 = fma(_891, cbModelParam._m0[15u].z, fma(_887, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _883)) + cbModelParam._m0[15u].w;
        float _1697 = fma(_829, cbModelParam._m0[13u].z, fma(_828, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _827));
        float _1700 = fma(_829, cbModelParam._m0[14u].z, fma(_828, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _827));
        float _1703 = fma(_829, cbModelParam._m0[15u].z, fma(_828, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _827));
        float _1731;
        if (_1697 > 0.0)
        {
            _1731 = abs((1.0 - _1686) / _1697);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1697 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1686 + 1.0) / _1697);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1731 = frontier_phi_14_12_ladder;
        }
        float _1956;
        if (_1700 > 0.0)
        {
            _1956 = abs((1.0 - _1690) / _1700);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1700 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1690 + 1.0) / _1700);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1956 = frontier_phi_23_19_ladder;
        }
        float _2213;
        if (_1703 > 0.0)
        {
            _2213 = abs((1.0 - _1694) / _1703);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1703 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1694 + 1.0) / _1703);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2213 = frontier_phi_35_30_ladder;
        }
        float _2215 = isnan(_1956) ? _1731 : (isnan(_1731) ? _1956 : min(_1731, _1956));
        float _2216 = isnan(_2213) ? _2215 : (isnan(_2215) ? _2213 : min(_2215, _2213));
        float _2220 = (_2216 * _1697) + _1686;
        float _2221 = (_2216 * _1700) + _1690;
        float _2222 = (_2216 * _1703) + _1694;
        float _2223 = _2216 * 9.9999997473787516355514526367188e-05;
        float _2225 = (-1.0) - _2223;
        float _2227 = _2223 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2222 > _2227) || ((_2222 < _2225) || ((_2221 > _2227) || ((_2221 < _2225) || ((_2220 < _2225) || (_2220 > _2227))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2350 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2222, cbModelParam._m0[9u].z, fma(_2221, cbModelParam._m0[9u].y, _2220 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2222, cbModelParam._m0[10u].z, fma(_2221, cbModelParam._m0[10u].y, _2220 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2222, cbModelParam._m0[11u].z, fma(_2221, cbModelParam._m0[11u].y, _2220 * cbModelParam._m0[11u].x))), _1638);
            frontier_phi_13_35_ladder = _2350.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2350.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2350.x * cbModelParam._m0[1u].y;
        }
        _1719 = frontier_phi_13_35_ladder_2;
        _1721 = frontier_phi_13_35_ladder_1;
        _1723 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1707 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_827, _828, _829), _1638);
        _1719 = _1707.x * cbModelParam._m0[1u].y;
        _1721 = _1707.y * cbModelParam._m0[1u].y;
        _1723 = _1707.z * cbModelParam._m0[1u].y;
    }
    float _1727 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _654);
    float _1728 = isnan(_1727) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1727 : min(cbModelParam._m0[25u].w, _1727));
    float _1818;
    float _1820;
    float _1822;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1782 = fma(_891, cbModelParam._m0[21u].z, fma(_887, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _883)) + cbModelParam._m0[21u].w;
        float _1786 = fma(_891, cbModelParam._m0[22u].z, fma(_887, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _883)) + cbModelParam._m0[22u].w;
        float _1790 = fma(_891, cbModelParam._m0[23u].z, fma(_887, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _883)) + cbModelParam._m0[23u].w;
        float _1793 = fma(_829, cbModelParam._m0[21u].z, fma(_828, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _827));
        float _1796 = fma(_829, cbModelParam._m0[22u].z, fma(_828, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _827));
        float _1799 = fma(_829, cbModelParam._m0[23u].z, fma(_828, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _827));
        float _1961;
        if (_1793 > 0.0)
        {
            _1961 = abs((1.0 - _1782) / _1793);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1793 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1782 + 1.0) / _1793);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1961 = frontier_phi_25_21_ladder;
        }
        float _2240;
        if (_1796 > 0.0)
        {
            _2240 = abs((1.0 - _1786) / _1796);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1796 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1786 + 1.0) / _1796);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2240 = frontier_phi_37_32_ladder;
        }
        float _2453;
        if (_1799 > 0.0)
        {
            _2453 = abs((1.0 - _1790) / _1799);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1799 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1790 + 1.0) / _1799);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2453 = frontier_phi_46_43_ladder;
        }
        float _2455 = isnan(_2240) ? _1961 : (isnan(_1961) ? _2240 : min(_1961, _2240));
        float _2456 = isnan(_2453) ? _2455 : (isnan(_2455) ? _2453 : min(_2455, _2453));
        float _2460 = (_2456 * _1793) + _1782;
        float _2461 = (_2456 * _1796) + _1786;
        float _2462 = (_2456 * _1799) + _1790;
        float _2463 = _2456 * 9.9999997473787516355514526367188e-05;
        float _2464 = (-1.0) - _2463;
        float _2466 = _2463 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2462 > _2466) || ((_2462 < _2464) || ((_2461 > _2466) || ((_2461 < _2464) || ((_2460 < _2464) || (_2460 > _2466))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2661 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2462, cbModelParam._m0[17u].z, fma(_2461, cbModelParam._m0[17u].y, _2460 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2462, cbModelParam._m0[18u].z, fma(_2461, cbModelParam._m0[18u].y, _2460 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2462, cbModelParam._m0[19u].z, fma(_2461, cbModelParam._m0[19u].y, _2460 * cbModelParam._m0[19u].x))), _1728);
            frontier_phi_22_46_ladder = _2661.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2661.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2661.x * cbModelParam._m0[1u].z;
        }
        _1818 = frontier_phi_22_46_ladder_2;
        _1820 = frontier_phi_22_46_ladder_1;
        _1822 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1802 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_827, _828, _829), _1728);
        _1818 = _1802.x * cbModelParam._m0[1u].z;
        _1820 = _1802.y * cbModelParam._m0[1u].z;
        _1822 = _1802.z * cbModelParam._m0[1u].z;
    }
    float _1835 = (((_854 * _803) + _855) * _819) * ((cbModelParam._m0[1u].w * (_1818 - _1719)) + _1719);
    float _1837 = (((_854 * _805) + _855) * _819) * ((cbModelParam._m0[1u].w * (_1820 - _1721)) + _1721);
    float _1839 = (((_854 * _806) + _855) * _819) * ((cbModelParam._m0[1u].w * (_1822 - _1723)) + _1723);
    float _1842 = fma(_1839, cbSceneParam._m0[89u].z, fma(_1837, cbSceneParam._m0[89u].y, _1835 * cbSceneParam._m0[89u].x));
    float _1845 = fma(_1839, cbSceneParam._m0[90u].z, fma(_1837, cbSceneParam._m0[90u].y, _1835 * cbSceneParam._m0[90u].x));
    float _1848 = fma(_1839, cbSceneParam._m0[91u].z, fma(_1837, cbSceneParam._m0[91u].y, _1835 * cbSceneParam._m0[91u].x));
    vec4 _1856 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_738, _739));
    float _1858 = _1856.w;
    float _1870 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1858);
    float _1871 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1858);
    float _1872 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1858);
    uvec4 _1876 = floatBitsToUint(cbInstanceData._m0[_243 + 5u]);
    uint _1878 = _1876.x * 14u;
    uint _1879 = _1878 + 13u;
    float _1886 = _819 + (-1.0);
    float _1891 = (cbLight._m0[_1879].x * _1886) + 1.0;
    float _1892 = (cbLight._m0[_1879].y * _1886) + 1.0;
    float _1893 = (cbLight._m0[_1879].z * _1886) + 1.0;
    float _1894 = (cbLight._m0[_1879].w * _1886) + 1.0;
    uint _1895 = _1878 + 5u;
    float _1901 = isnan(1.0) ? _1892 : (isnan(_1892) ? 1.0 : min(_1892, 1.0));
    uint _1905 = _1878 + 4u;
    float _1915 = isnan(1.0) ? _1891 : (isnan(_1891) ? 1.0 : min(_1891, 1.0));
    uint _1919 = _1878 | 1u;
    float _1930 = dot(vec3(cbLight._m0[_1878].xyz), vec3(_651, _652, _653));
    float _1933 = dot(vec3(cbLight._m0[_1919].xyz), vec3(_651, _652, _653));
    float _4109 = isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0));
    float _4120 = isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0));
    float _1938 = (isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0))) * 0.3183098733425140380859375;
    float _1940 = (isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0))) * 0.3183098733425140380859375;
    float _1947 = ((cbLight._m0[_1895].x * _1901) * _1940) + (((cbLight._m0[_1905].x * _1870) * _1915) * _1938);
    float _1948 = ((_1901 * cbLight._m0[_1895].y) * _1940) + (((cbLight._m0[_1905].y * _1871) * _1915) * _1938);
    float _1949 = ((_1901 * cbLight._m0[_1895].z) * _1940) + (((cbLight._m0[_1905].z * _1872) * _1915) * _1938);
    uvec4 _1953 = floatBitsToUint(cbLight._m0[_1878 + 12u]);
    bool _1955 = _1953.x == 0u;
    float _1966;
    float _1968;
    float _1970;
    if (_1955)
    {
        _1966 = _1947;
        _1968 = _1948;
        _1970 = _1949;
    }
    else
    {
        uint _1974 = _1878 + 6u;
        float _1990 = (dot(vec3(cbLight._m0[_1878 + 2u].xyz), vec3(_651, _652, _653)) * 0.5) + 0.5;
        float _1991 = _1990 * _1990;
        float _4131 = isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0));
        float _1992 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
        float _1993 = isnan(1.0) ? _1893 : (isnan(_1893) ? 1.0 : min(_1893, 1.0));
        _1966 = (((cbLight._m0[_1974].x * 0.3183098733425140380859375) * _1992) * _1993) + _1947;
        _1968 = (((cbLight._m0[_1974].y * 0.3183098733425140380859375) * _1992) * _1993) + _1948;
        _1970 = (((cbLight._m0[_1974].z * 0.3183098733425140380859375) * _1992) * _1993) + _1949;
    }
    bool _1973 = _1953.y == 0u;
    float _2011;
    float _2013;
    float _2015;
    if (_1973)
    {
        _2011 = _1966;
        _2013 = _1968;
        _2015 = _1970;
    }
    else
    {
        uint _2184 = _1878 + 7u;
        float _2200 = (dot(vec3(cbLight._m0[_1878 + 3u].xyz), vec3(_651, _652, _653)) * 0.5) + 0.5;
        float _2201 = _2200 * _2200;
        float _4147 = isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0));
        float _2202 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
        float _2203 = isnan(1.0) ? _1894 : (isnan(_1894) ? 1.0 : min(_1894, 1.0));
        _2011 = (((cbLight._m0[_2184].x * 0.3183098733425140380859375) * _2202) * _2203) + _1966;
        _2013 = (((cbLight._m0[_2184].y * 0.3183098733425140380859375) * _2202) * _2203) + _1968;
        _2015 = (((cbLight._m0[_2184].z * 0.3183098733425140380859375) * _2202) * _2203) + _1970;
    }
    uint _2018 = _1878 + 8u;
    float _2031 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1878].w)) * _654) * 0.949999988079071044921875);
    float _2032 = _2031 * _2031;
    float _2033 = cbLight._m0[_1878].x + _730;
    float _2034 = cbLight._m0[_1878].y + _731;
    float _2035 = cbLight._m0[_1878].z + _732;
    float _2039 = inversesqrt(dot(vec3(_2033, _2034, _2035), vec3(_2033, _2034, _2035)));
    float _2040 = _2039 * _2033;
    float _2041 = _2039 * _2034;
    float _2042 = _2039 * _2035;
    float _2043 = dot(vec3(_651, _652, _653), vec3(cbLight._m0[_1878].xyz));
    float _4163 = isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0));
    float _2046 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
    float _4174 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
    float _2047 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
    float _2048 = dot(vec3(_651, _652, _653), vec3(_2040, _2041, _2042));
    float _4185 = isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0));
    float _2051 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
    float _2052 = dot(vec3(cbLight._m0[_1878].xyz), vec3(_2040, _2041, _2042));
    float _4196 = isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0));
    float _2056 = _2032 * _2032;
    float _2060 = ((_2051 * _2051) * (_2056 + (-1.0))) + 1.0;
    float _2068 = exp2(log2(1.0 - (isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0)))) * 5.0);
    float _2069 = 0.959999978542327880859375 - _800;
    float _2071 = 0.959999978542327880859375 - _801;
    float _2072 = 0.959999978542327880859375 - _802;
    float _2079 = 1.0 - _2032;
    float _2090 = (0.5 / (((_2047 * ((_2046 * _2079) + _2032)) + 9.9999999392252902907785028219223e-09) + (((_2047 * _2079) + _2032) * _2046))) * _2046;
    float _4207 = isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0));
    float _2092 = (isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0))) * (_2056 / ((_2060 * _2060) * 3.141590118408203125));
    uint _2106 = _1878 + 9u;
    float _2117 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1919].w)) * _654) * 0.949999988079071044921875);
    float _2118 = _2117 * _2117;
    float _2119 = cbLight._m0[_1919].x + _730;
    float _2120 = cbLight._m0[_1919].y + _731;
    float _2121 = cbLight._m0[_1919].z + _732;
    float _2125 = inversesqrt(dot(vec3(_2119, _2120, _2121), vec3(_2119, _2120, _2121)));
    float _2126 = _2125 * _2119;
    float _2127 = _2125 * _2120;
    float _2128 = _2125 * _2121;
    float _2129 = dot(vec3(_651, _652, _653), vec3(cbLight._m0[_1919].xyz));
    float _4218 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
    float _2132 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
    float _2133 = dot(vec3(_651, _652, _653), vec3(_2126, _2127, _2128));
    float _4229 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
    float _2136 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
    float _2137 = dot(vec3(cbLight._m0[_1919].xyz), vec3(_2126, _2127, _2128));
    float _4240 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
    float _2141 = _2118 * _2118;
    float _2145 = ((_2136 * _2136) * (_2141 + (-1.0))) + 1.0;
    float _2152 = exp2(log2(1.0 - (isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0)))) * 5.0);
    float _2159 = 1.0 - _2118;
    float _2169 = (0.5 / (((_2047 * ((_2132 * _2159) + _2118)) + 9.9999999392252902907785028219223e-09) + (((_2047 * _2159) + _2118) * _2132))) * _2132;
    float _4251 = isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0));
    float _2171 = (isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0))) * (_2141 / ((_2145 * _2145) * 3.141590118408203125));
    float _2181 = (((((_2152 * _2069) + _803) * cbLight._m0[_2106].x) * _2171) * _1901) + ((((cbLight._m0[_2018].x * _1870) * ((_2068 * _2069) + _803)) * _2092) * _1915);
    float _2182 = (((((_2152 * _2071) + _805) * cbLight._m0[_2106].y) * _2171) * _1901) + ((((cbLight._m0[_2018].y * _1871) * ((_2068 * _2071) + _805)) * _2092) * _1915);
    float _2183 = (((((_2152 * _2072) + _806) * cbLight._m0[_2106].z) * _2171) * _1901) + ((((cbLight._m0[_2018].z * _1872) * ((_2068 * _2072) + _806)) * _2092) * _1915);
    float _2245;
    float _2247;
    float _2249;
    if (_1955)
    {
        _2245 = _2181;
        _2247 = _2182;
        _2249 = _2183;
    }
    else
    {
        uint _2251 = _1878 + 2u;
        uint _2255 = _1878 + 10u;
        float _2269 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2251].w)) * _654) * 0.949999988079071044921875);
        float _2270 = _2269 * _2269;
        float _2271 = cbLight._m0[_2251].x + _730;
        float _2272 = cbLight._m0[_2251].y + _731;
        float _2273 = cbLight._m0[_2251].z + _732;
        float _2277 = inversesqrt(dot(vec3(_2271, _2272, _2273), vec3(_2271, _2272, _2273)));
        float _2278 = _2277 * _2271;
        float _2279 = _2277 * _2272;
        float _2280 = _2277 * _2273;
        float _2281 = dot(vec3(_651, _652, _653), vec3(cbLight._m0[_2251].xyz));
        float _4262 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
        float _2284 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
        float _2285 = dot(vec3(_651, _652, _653), vec3(_2278, _2279, _2280));
        float _4273 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0));
        float _2288 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
        float _2289 = dot(vec3(cbLight._m0[_2251].xyz), vec3(_2278, _2279, _2280));
        float _4284 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
        float _2293 = _2270 * _2270;
        float _2297 = ((_2288 * _2288) * (_2293 + (-1.0))) + 1.0;
        float _2304 = exp2(log2(1.0 - (isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0)))) * 5.0);
        float _2311 = 1.0 - _2270;
        float _2321 = (0.5 / (((_2047 * ((_2284 * _2311) + _2270)) + 9.9999999392252902907785028219223e-09) + (((_2047 * _2311) + _2270) * _2284))) * _2284;
        float _4295 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
        float _2323 = (isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0))) * (_2293 / ((_2297 * _2297) * 3.141590118408203125));
        float _2324 = isnan(1.0) ? _1893 : (isnan(_1893) ? 1.0 : min(_1893, 1.0));
        _2245 = (((((_2304 * _2069) + _803) * cbLight._m0[_2255].x) * _2323) * _2324) + _2181;
        _2247 = (((((_2304 * _2071) + _805) * cbLight._m0[_2255].y) * _2323) * _2324) + _2182;
        _2249 = (((((_2304 * _2072) + _806) * cbLight._m0[_2255].z) * _2323) * _2324) + _2183;
    }
    float _2359;
    float _2361;
    float _2363;
    if (_1973)
    {
        _2359 = _2245;
        _2361 = _2247;
        _2363 = _2249;
    }
    else
    {
        uint _2370 = _1878 + 3u;
        uint _2374 = _1878 + 11u;
        float _2388 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2370].w)) * _654) * 0.949999988079071044921875);
        float _2389 = _2388 * _2388;
        float _2390 = cbLight._m0[_2370].x + _730;
        float _2391 = cbLight._m0[_2370].y + _731;
        float _2392 = cbLight._m0[_2370].z + _732;
        float _2396 = inversesqrt(dot(vec3(_2390, _2391, _2392), vec3(_2390, _2391, _2392)));
        float _2397 = _2396 * _2390;
        float _2398 = _2396 * _2391;
        float _2399 = _2396 * _2392;
        float _2400 = dot(vec3(_651, _652, _653), vec3(cbLight._m0[_2370].xyz));
        float _4311 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
        float _2403 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
        float _2404 = dot(vec3(_651, _652, _653), vec3(_2397, _2398, _2399));
        float _4322 = isnan(0.0) ? _2404 : (isnan(_2404) ? 0.0 : max(_2404, 0.0));
        float _2407 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
        float _2408 = dot(vec3(cbLight._m0[_2370].xyz), vec3(_2397, _2398, _2399));
        float _4333 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
        float _2412 = _2389 * _2389;
        float _2416 = ((_2407 * _2407) * (_2412 + (-1.0))) + 1.0;
        float _2423 = exp2(log2(1.0 - (isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0)))) * 5.0);
        float _2430 = 1.0 - _2389;
        float _2440 = (0.5 / (((_2047 * ((_2403 * _2430) + _2389)) + 9.9999999392252902907785028219223e-09) + (((_2047 * _2430) + _2389) * _2403))) * _2403;
        float _4344 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0));
        float _2442 = (isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0))) * (_2412 / ((_2416 * _2416) * 3.141590118408203125));
        float _2443 = isnan(1.0) ? _1894 : (isnan(_1894) ? 1.0 : min(_1894, 1.0));
        _2359 = (((((_2423 * _2069) + _803) * cbLight._m0[_2374].x) * _2442) * _2443) + _2245;
        _2361 = (((((_2423 * _2071) + _805) * cbLight._m0[_2374].y) * _2442) * _2443) + _2247;
        _2363 = (((((_2423 * _2072) + _806) * cbLight._m0[_2374].z) * _2442) * _2443) + _2249;
    }
    float _2578;
    float _2580;
    float _2582;
    float _2584;
    float _2586;
    float _2588;
    if (_1876.y == 0u)
    {
        float _2518 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2519 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2518;
        float _2520 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2518;
        float _2521 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2518;
        uvec4 _2533 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2534 = _2533.x;
        uint _2545 = uint((float(_2533.y) * floor(float(uint(cbSceneParam._m0[85u].y * _739) / _2534))) + floor(float(uint(cbSceneParam._m0[85u].x * _738) / _2534)));
        float _2555 = (log2(_2521 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2556 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0));
        uint _2559 = uint(isnan(14.0) ? _2556 : (isnan(_2556) ? 14.0 : min(_2556, 14.0)));
        uvec4 _2564 = texelFetch(g_lightClusterGridBuffer, int(((_2559 << 2u) + (_2545 << 6u)) >> 2u));
        uint _2565 = _2564.x;
        uint _2566 = _2533.z;
        float _2666;
        float _2668;
        float _2670;
        float _2672;
        float _2674;
        float _2676;
        if (((((1u << ((_2566 >> 4u) & 15u)) + 4294967295u) & _2565) == 0u) || ((_2566 & 240u) == 0u))
        {
            _2666 = 0.0;
            _2668 = 0.0;
            _2670 = 0.0;
            _2672 = 0.0;
            _2674 = 0.0;
            _2676 = 0.0;
        }
        else
        {
            float _2667;
            float _2669;
            float _2671;
            float _2673;
            float _2675;
            float _2677;
            float _2810 = 0.0;
            float _2811 = 0.0;
            float _2812 = 0.0;
            float _2813 = 0.0;
            float _2814 = 0.0;
            float _2815 = 0.0;
            uint _2816 = 0u;
            uint _2825;
            bool _2826;
            for (;;)
            {
                _2825 = texelFetch(g_lightClassification, int((((_2559 << 5u) + (_2545 << 9u)) + (_2816 << 2u)) >> 2u)).x;
                _2826 = _2825 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2826)
                {
                    frontier_phi_61_pred = _2810;
                    frontier_phi_61_pred_1 = _2815;
                    frontier_phi_61_pred_2 = _2814;
                    frontier_phi_61_pred_3 = _2813;
                    frontier_phi_61_pred_4 = _2812;
                    frontier_phi_61_pred_5 = _2811;
                }
                else
                {
                    float _2934;
                    float _2935;
                    float _2936;
                    float _2937;
                    float _2938;
                    float _2939;
                    uint _2940;
                    _2934 = _2810;
                    _2935 = _2811;
                    _2936 = _2812;
                    _2937 = _2813;
                    _2938 = _2814;
                    _2939 = _2815;
                    _2940 = _2825;
                    float _2866;
                    float _2867;
                    float _2868;
                    float _2869;
                    float _2870;
                    float _2871;
                    for (;;)
                    {
                        uint _2944 = uint(findLSB(_2940)) + (_2816 << 5u);
                        uint _2941 = (_2940 + 4294967295u) & _2940;
                        uint _2946 = _2944 * 48u;
                        vec4 _2960 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2946)).x, texelFetch(g_PointLightRenderingBuffer, int(_2946 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2946 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2946 + 3u)).x));
                        uint _2966 = (_2944 * 48u) + 4u;
                        vec4 _2979 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2966)).x, texelFetch(g_PointLightRenderingBuffer, int(_2966 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2966 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2966 + 3u)).x));
                        uint _2985 = (_2944 * 48u) + 8u;
                        vec3 _2996 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2985)).x, texelFetch(g_PointLightRenderingBuffer, int(_2985 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2985 + 2u)).x));
                        float _3000 = _2960.x - _2519;
                        float _3001 = _2960.y - _2520;
                        float _3002 = _2960.z - _2521;
                        float _3003 = dot(vec3(_3000, _3001, _3002), vec3(_3000, _3001, _3002));
                        float _3006 = inversesqrt(_3003);
                        float _3007 = _3006 * _3000;
                        float _3008 = _3006 * _3001;
                        float _3009 = _3006 * _3002;
                        float _3010 = dot(vec3(_760, _763, _766), vec3(_3007, _3008, _3009));
                        float _3015 = 1.0 - (_3003 * _2960.w);
                        float _4370 = isnan(0.0) ? _3015 : (isnan(_3015) ? 0.0 : max(_3015, 0.0));
                        float _3016 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
                        float _3017 = sqrt(_3003) * _2979.w;
                        float _3020 = 1.39999997615814208984375 / (_3017 + 1.39999997615814208984375);
                        float _3021 = _3020 * _3020;
                        float _3024 = ((1.0 - _3021) * _3010) + _3021;
                        float _3027 = _3017 * _3017;
                        float _3031 = ((isnan(0.0) ? _3024 : (isnan(_3024) ? 0.0 : max(_3024, 0.0))) * _3016) / ((_3027 * 0.699999988079071044921875) + 1.0);
                        float _3035 = (-0.0) - _2519;
                        float _3036 = (-0.0) - _2520;
                        float _3037 = (-0.0) - _2521;
                        float _3041 = inversesqrt(dot(vec3(_3035, _3036, _3037), vec3(_3035, _3036, _3037)));
                        float _3042 = _3041 * _3035;
                        float _3043 = _3041 * _3036;
                        float _3044 = _3041 * _3037;
                        float _3052 = exp2(log2(1.0 / ((_3027 * 3.5) + 5.0)) * 0.25);
                        float _3053 = 1.0 - _835;
                        float _3060 = sqrt(1.0 - ((1.0 - (_3053 * _3053)) * (1.0 - (_3052 * _3052))));
                        float _3061 = _3060 * _3060;
                        float _3062 = _3061 * _3061;
                        float _3063 = _3042 + _3007;
                        float _3064 = _3043 + _3008;
                        float _3065 = _3044 + _3009;
                        float _3069 = inversesqrt(dot(vec3(_3063, _3064, _3065), vec3(_3063, _3064, _3065)));
                        float _3073 = dot(vec3(_760, _763, _766), vec3(_3042, _3043, _3044));
                        float _4386 = isnan(0.0) ? _3073 : (isnan(_3073) ? 0.0 : max(_3073, 0.0));
                        float _3076 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
                        float _3077 = dot(vec3(_760, _763, _766), vec3(_3069 * _3063, _3069 * _3064, _3069 * _3065));
                        float _4397 = isnan(0.0) ? _3077 : (isnan(_3077) ? 0.0 : max(_3077, 0.0));
                        float _3080 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
                        float _3084 = ((_3080 * _3080) * (_3062 + (-1.0))) + 1.0;
                        float _3085 = _3020 * _3061;
                        float _3086 = _3085 * _3085;
                        float _3089 = ((1.0 - _3086) * _3010) + _3086;
                        float _4408 = isnan(0.0) ? _3089 : (isnan(_3089) ? 0.0 : max(_3089, 0.0));
                        float _3090 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
                        float _3091 = 1.0 - _3061;
                        float _3101 = (0.5 / (((_3090 * ((_3076 * _3091) + _3061)) + 9.9999999392252902907785028219223e-09) + (((_3090 * _3091) + _3061) * _3076))) * _3090;
                        float _4419 = isnan(0.0) ? _3101 : (isnan(_3101) ? 0.0 : max(_3101, 0.0));
                        float _3112 = (((_3062 * 3.1415927410125732421875) * (isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0)))) / ((_3084 * _3084) * ((_3027 * 2.1991131305694580078125) + 3.141590118408203125))) * _3016;
                        _2869 = (_3031 * _2979.x) + _2937;
                        _2870 = (_3031 * _2979.y) + _2938;
                        _2871 = (_3031 * _2979.z) + _2939;
                        _2866 = (_3112 * _2996.x) + _2934;
                        _2867 = (_3112 * _2996.y) + _2935;
                        _2868 = (_3112 * _2996.z) + _2936;
                        if (_2941 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2934 = _2866;
                            _2935 = _2867;
                            _2936 = _2868;
                            _2937 = _2869;
                            _2938 = _2870;
                            _2939 = _2871;
                            _2940 = _2941;
                        }
                    }
                    frontier_phi_61_pred = _2866;
                    frontier_phi_61_pred_1 = _2871;
                    frontier_phi_61_pred_2 = _2870;
                    frontier_phi_61_pred_3 = _2869;
                    frontier_phi_61_pred_4 = _2868;
                    frontier_phi_61_pred_5 = _2867;
                }
                _2667 = frontier_phi_61_pred;
                _2677 = frontier_phi_61_pred_1;
                _2675 = frontier_phi_61_pred_2;
                _2673 = frontier_phi_61_pred_3;
                _2671 = frontier_phi_61_pred_4;
                _2669 = frontier_phi_61_pred_5;
                uint _2817 = _2816 + 1u;
                if (_2817 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2810 = _2667;
                    _2811 = _2669;
                    _2812 = _2671;
                    _2813 = _2673;
                    _2814 = _2675;
                    _2815 = _2677;
                    _2816 = _2817;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2666 = _2667;
            _2668 = _2669;
            _2670 = _2671;
            _2672 = _2673;
            _2674 = _2675;
            _2676 = _2677;
        }
        uvec4 _2680 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2681 = _2680.z;
        uint _2683 = (_2681 >> 8u) & 15u;
        float _2778;
        float _2780;
        float _2782;
        float _2784;
        float _2786;
        float _2788;
        if (((4294967295u << _2683) & _2565) == 0u)
        {
            _2778 = _2666;
            _2780 = _2668;
            _2782 = _2670;
            _2784 = _2672;
            _2786 = _2674;
            _2788 = _2676;
        }
        else
        {
            float _2803 = inversesqrt(dot(vec3(_2519, _2520, _2521), vec3(_2519, _2520, _2521)));
            float _2804 = _2803 * _2519;
            float _2805 = _2803 * _2520;
            float _2806 = _2803 * _2521;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2683 < ((_2681 >> 12u) & 15u))
            {
                float _2779;
                float _2781;
                float _2783;
                float _2785;
                float _2787;
                float _2789;
                float _2917 = _2666;
                float _2918 = _2668;
                float _2919 = _2670;
                float _2920 = _2672;
                float _2921 = _2674;
                float _2922 = _2676;
                uint _2923 = _2683;
                uint _2932;
                bool _2933;
                for (;;)
                {
                    _2932 = texelFetch(g_lightClassification, int((((_2559 << 5u) + (_2545 << 9u)) + (_2923 << 2u)) >> 2u)).x;
                    _2933 = _2932 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2933)
                    {
                        frontier_phi_67_pred = _2920;
                        frontier_phi_67_pred_1 = _2921;
                        frontier_phi_67_pred_2 = _2922;
                        frontier_phi_67_pred_3 = _2919;
                        frontier_phi_67_pred_4 = _2918;
                        frontier_phi_67_pred_5 = _2917;
                    }
                    else
                    {
                        float _3117;
                        float _3118;
                        float _3119;
                        float _3120;
                        float _3121;
                        float _3122;
                        float _3411;
                        float _3412;
                        float _3413;
                        float _3414;
                        float _3415;
                        float _3416;
                        float _3130 = _2917;
                        float _3131 = _2918;
                        float _3132 = _2919;
                        float _3133 = _2920;
                        float _3134 = _2921;
                        float _3135 = _2922;
                        uint _3136 = _2932;
                        uint _3137;
                        vec4 _3162;
                        float _3163;
                        vec4 _3178;
                        vec3 _3190;
                        vec4 _3206;
                        vec4 _3221;
                        float _3267;
                        bool _3268;
                        for (;;)
                        {
                            uint _3147 = ((_2923 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3136));
                            _3137 = (_3136 + 4294967295u) & _3136;
                            uint _3149 = _3147 * 40u;
                            _3162 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3149)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3149 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3149 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3149 + 3u)).x));
                            _3163 = _3162.w;
                            uint _3165 = (_3147 * 40u) + 4u;
                            _3178 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3165)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 3u)).x));
                            uint _3180 = (_3147 * 40u) + 8u;
                            _3190 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3180)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3180 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3180 + 2u)).x));
                            uint _3193 = (_3147 * 40u) + 16u;
                            _3206 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3193)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3193 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3193 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3193 + 3u)).x));
                            uint _3208 = (_3147 * 40u) + 20u;
                            _3221 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3208)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3208 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3208 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3208 + 3u)).x));
                            uint _3223 = (_3147 * 40u) + 24u;
                            vec4 _3236 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3223)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3223 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3223 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3223 + 3u)).x));
                            uint _3242 = (_3147 * 40u) + 28u;
                            vec4 _3255 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3242)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 3u)).x));
                            _3267 = fma(_2521, _3255.z, fma(_2520, _3255.y, _3255.x * _2519)) + _3255.w;
                            _3268 = !((fma(_2521, _3236.z, fma(_2520, _3236.y, _3236.x * _2519)) + _3236.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3268)
                            {
                                float _3295 = _3162.x - _2519;
                                float _3296 = _3162.y - _2520;
                                float _3297 = _3162.z - _2521;
                                float _3298 = dot(vec3(_3295, _3296, _3297), vec3(_3295, _3296, _3297));
                                float _3301 = inversesqrt(_3298);
                                float _3302 = _3301 * _3295;
                                float _3303 = _3301 * _3296;
                                float _3304 = _3301 * _3297;
                                float _3308 = 1.0 - (_3298 / (_3163 * _3163));
                                float _4430 = isnan(0.0) ? _3308 : (isnan(_3308) ? 0.0 : max(_3308, 0.0));
                                float _3309 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
                                float _3313 = sqrt(_3298) * _3178.w;
                                float _3315 = 1.39999997615814208984375 / (_3313 + 1.39999997615814208984375);
                                float _3316 = _3315 * _3315;
                                float _3319 = ((1.0 - _3316) * dot(vec3(_3302, _3303, _3304), vec3(_760, _763, _766))) + _3316;
                                float _3322 = _3313 * _3313;
                                float _3326 = (fma(_2521, _3206.z, fma(_2520, _3206.y, _3206.x * _2519)) + _3206.w) / _3267;
                                float _3327 = (fma(_2521, _3221.z, fma(_2520, _3221.y, _3221.x * _2519)) + _3221.w) / _3267;
                                float _3331 = 1.0 - dot(vec2(_3326, _3327), vec2(_3326, _3327));
                                float _4446 = isnan(0.0) ? _3331 : (isnan(_3331) ? 0.0 : max(_3331, 0.0));
                                float _3332 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
                                float _3333 = _3332 * (((isnan(0.0) ? _3319 : (isnan(_3319) ? 0.0 : max(_3319, 0.0))) * _3309) / ((_3322 * 0.699999988079071044921875) + 1.0));
                                float _3345 = exp2(log2(1.0 / ((_3322 * 3.5) + 5.0)) * 0.25);
                                float _3346 = 1.0 - _835;
                                float _3353 = sqrt(1.0 - ((1.0 - (_3346 * _3346)) * (1.0 - (_3345 * _3345))));
                                float _3354 = _3353 * _3353;
                                float _3355 = _3354 * _3354;
                                float _3356 = _3302 - _2804;
                                float _3357 = _3303 - _2805;
                                float _3358 = _3304 - _2806;
                                float _3362 = inversesqrt(dot(vec3(_3356, _3357, _3358), vec3(_3356, _3357, _3358)));
                                float _3366 = dot(vec3(_760, _763, _766), vec3((-0.0) - _2804, (-0.0) - _2805, (-0.0) - _2806));
                                float _4457 = isnan(0.0) ? _3366 : (isnan(_3366) ? 0.0 : max(_3366, 0.0));
                                float _3369 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
                                float _3370 = dot(vec3(_760, _763, _766), vec3(_3362 * _3356, _3362 * _3357, _3362 * _3358));
                                float _4468 = isnan(0.0) ? _3370 : (isnan(_3370) ? 0.0 : max(_3370, 0.0));
                                float _3373 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
                                float _3377 = ((_3373 * _3373) * (_3355 + (-1.0))) + 1.0;
                                float _3378 = _3315 * _3354;
                                float _3379 = _3378 * _3378;
                                float _3385 = ((1.0 - _3379) * dot(vec3(_760, _763, _766), vec3(_3302, _3303, _3304))) + _3379;
                                float _4479 = isnan(0.0) ? _3385 : (isnan(_3385) ? 0.0 : max(_3385, 0.0));
                                float _3386 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
                                float _3387 = 1.0 - _3354;
                                float _3397 = (0.5 / (((_3386 * ((_3369 * _3387) + _3354)) + 9.9999999392252902907785028219223e-09) + (((_3386 * _3387) + _3354) * _3369))) * _3386;
                                float _4490 = isnan(0.0) ? _3397 : (isnan(_3397) ? 0.0 : max(_3397, 0.0));
                                float _3407 = (_3332 * _3309) * (((_3355 * 3.1415927410125732421875) * (isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0)))) / ((_3377 * _3377) * ((_3322 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3407 * _3190.x;
                                frontier_phi_73_pred_1 = _3407 * _3190.y;
                                frontier_phi_73_pred_2 = _3333 * _3178.z;
                                frontier_phi_73_pred_3 = _3333 * _3178.y;
                                frontier_phi_73_pred_4 = _3333 * _3178.x;
                                frontier_phi_73_pred_5 = _3407 * _3190.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3411 = frontier_phi_73_pred;
                            _3412 = frontier_phi_73_pred_1;
                            _3416 = frontier_phi_73_pred_2;
                            _3415 = frontier_phi_73_pred_3;
                            _3414 = frontier_phi_73_pred_4;
                            _3413 = frontier_phi_73_pred_5;
                            _3120 = _3414 + _3133;
                            _3121 = _3415 + _3134;
                            _3122 = _3416 + _3135;
                            _3117 = _3411 + _3130;
                            _3118 = _3412 + _3131;
                            _3119 = _3413 + _3132;
                            if (_3137 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3130 = _3117;
                                _3131 = _3118;
                                _3132 = _3119;
                                _3133 = _3120;
                                _3134 = _3121;
                                _3135 = _3122;
                                _3136 = _3137;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3120;
                        frontier_phi_67_pred_1 = _3121;
                        frontier_phi_67_pred_2 = _3122;
                        frontier_phi_67_pred_3 = _3119;
                        frontier_phi_67_pred_4 = _3118;
                        frontier_phi_67_pred_5 = _3117;
                    }
                    _2785 = frontier_phi_67_pred;
                    _2787 = frontier_phi_67_pred_1;
                    _2789 = frontier_phi_67_pred_2;
                    _2783 = frontier_phi_67_pred_3;
                    _2781 = frontier_phi_67_pred_4;
                    _2779 = frontier_phi_67_pred_5;
                    uint _2924 = _2923 + 1u;
                    if (_2924 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2917 = _2779;
                        _2918 = _2781;
                        _2919 = _2783;
                        _2920 = _2785;
                        _2921 = _2787;
                        _2922 = _2789;
                        _2923 = _2924;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2787;
                frontier_phi_55_56_ladder_1 = _2789;
                frontier_phi_55_56_ladder_2 = _2785;
                frontier_phi_55_56_ladder_3 = _2783;
                frontier_phi_55_56_ladder_4 = _2781;
                frontier_phi_55_56_ladder_5 = _2779;
            }
            else
            {
                frontier_phi_55_56_ladder = _2674;
                frontier_phi_55_56_ladder_1 = _2676;
                frontier_phi_55_56_ladder_2 = _2672;
                frontier_phi_55_56_ladder_3 = _2670;
                frontier_phi_55_56_ladder_4 = _2668;
                frontier_phi_55_56_ladder_5 = _2666;
            }
            _2778 = frontier_phi_55_56_ladder_5;
            _2780 = frontier_phi_55_56_ladder_4;
            _2782 = frontier_phi_55_56_ladder_3;
            _2784 = frontier_phi_55_56_ladder_2;
            _2786 = frontier_phi_55_56_ladder;
            _2788 = frontier_phi_55_56_ladder_1;
        }
        float _2793 = isnan(1.0) ? _819 : (isnan(_819) ? 1.0 : min(_819, 1.0));
        _2578 = (_2793 * _2784) + _2011;
        _2580 = (_2793 * _2786) + _2013;
        _2582 = (_2793 * _2788) + _2015;
        _2584 = ((_2778 * _803) * _2793) + _2359;
        _2586 = ((_2780 * _805) * _2793) + _2361;
        _2588 = ((_2782 * _806) * _2793) + _2363;
    }
    else
    {
        _2578 = _2011;
        _2580 = _2013;
        _2582 = _2015;
        _2584 = _2359;
        _2586 = _2361;
        _2588 = _2363;
    }
    float _4506 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
    float _4517 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
    float _4528 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
    uint _2608 = _243 + 6u;
    float _2616 = _738 / cbSceneParam._m0[86u].x;
    float _2617 = _739 / cbSceneParam._m0[86u].y;
    vec4 _2631 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2616, _2617, (log2((isnan(cbSceneParam._m0[77u].w) ? _673 : (isnan(_673) ? cbSceneParam._m0[77u].w : min(_673, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2633 = _2631.x;
    float _2634 = _2631.y;
    float _2635 = _2631.z;
    float _2636 = _2631.w;
    float _2728;
    float _2730;
    float _2732;
    float _2734;
    if (_673 > cbSceneParam._m0[78u].w)
    {
        float _2691 = isnan(_673) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _673 : min(cbSceneParam._m0[80u].w, _673));
        float _2692 = _2691 / _673;
        float _2703 = _2692 * _723;
        float _2704 = _724 * _2692;
        float _2705 = (-0.0) - _2704;
        float _2706 = _2692 * _725;
        float _2708 = (cbSceneParam._m0[77u].w * _2705) / _2691;
        float _2709 = _2708 + cbSceneParam._m0[79u].w;
        float _2710 = cbSceneParam._m0[79u].w - _2704;
        float _2716 = sqrt(((_2703 * _2703) + (_2704 * _2704)) + (_2706 * _2706));
        float _2719 = (1.0 - (cbSceneParam._m0[77u].w / _2691)) * _2716;
        float _2724 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2726 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2879;
        if (abs((_2705 - _2708) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2879 = ((((_2709 > 0.0) ? exp2(_2724 * _2709) : (2.0 - exp2(_2726 * _2709))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2719;
        }
        else
        {
            float _2839 = 1.0 / cbSceneParam._m0[80u].x;
            float _2840 = isnan(_2710) ? _2709 : (isnan(_2709) ? _2710 : max(_2709, _2710));
            float _2841 = isnan(_2710) ? _2709 : (isnan(_2709) ? _2710 : min(_2709, _2710));
            float _2850 = isnan(0.0) ? _2840 : (isnan(_2840) ? 0.0 : min(_2840, 0.0));
            float _2851 = isnan(0.0) ? _2841 : (isnan(_2841) ? 0.0 : min(_2841, 0.0));
            _2879 = ((abs(_2716 / _2705) * cbSceneParam._m0[80u].y) * ((((_2850 - _2851) * 2.0) - ((exp2(_2724 * (isnan(0.0) ? _2840 : (isnan(_2840) ? 0.0 : max(_2840, 0.0)))) - exp2(_2724 * (isnan(0.0) ? _2841 : (isnan(_2841) ? 0.0 : max(_2841, 0.0))))) * _2839)) - ((exp2(_2726 * _2850) - exp2(_2726 * _2851)) * _2839))) + (_2719 * cbSceneParam._m0[80u].z);
        }
        vec4 _2881 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2616, _2617, 1.0), 0.0);
        float _2890 = exp2((_2879 * (-1.44269502162933349609375)) * (1.0 - _2881.w));
        float _2891 = log2(_2890);
        float _2907 = log2(_2636);
        _2728 = (exp2(_2907 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2891 * cbSceneParam._m0[78u].x)) * _2881.x) / cbSceneParam._m0[78u].x)) + _2633;
        _2730 = (exp2(_2907 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2891 * cbSceneParam._m0[78u].y)) * _2881.y) / cbSceneParam._m0[78u].y)) + _2634;
        _2732 = (exp2(_2907 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2891 * cbSceneParam._m0[78u].z)) * _2881.z) / cbSceneParam._m0[78u].z)) + _2635;
        _2734 = _2890 * _2636;
    }
    else
    {
        _2728 = _2633;
        _2730 = _2634;
        _2732 = _2635;
        _2734 = _2636;
    }
    float _2746 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2747 = _2746 == 3.0;
    float _2748 = log2(_2734);
    float _2755 = exp2(_2748 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0))) * (_2578 + ((isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0))) * _819))) + ((_2584 + ((isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0))) * _1627)) * cbPerFrame._m0[3u].x));
    float _2756 = exp2(_2748 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0))) * (_2580 + ((isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0))) * _819))) + ((_2586 + ((isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0))) * _1627)) * cbPerFrame._m0[3u].x));
    float _2757 = exp2(_2748 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0))) * (_2582 + ((isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0))) * _819))) + ((_2588 + ((isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0))) * _1627)) * cbPerFrame._m0[3u].x));
    float _2766 = (_2746 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2766 * (_2747 ? _2755 : (_2755 + (cbSceneParam._m0[72u].w * _2728)));
    SV_Target.y = _2766 * (_2747 ? _2756 : (_2756 + (cbSceneParam._m0[72u].w * _2730)));
    SV_Target.z = _2766 * (_2747 ? _2757 : (_2757 + (cbSceneParam._m0[72u].w * _2732)));
    SV_Target.w = cbInstanceData._m0[_2608].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2608].w;
}


