#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1508;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _242 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _243 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _244 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _250 = inversesqrt(dot(vec3(_242, _243, _244), vec3(_242, _243, _244)));
    float _257 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _264 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _276 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _278 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _279 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3858 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _3869 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _3880 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    uint _289 = uint(roundEven(NORMAL.w)) * 13u;
    uint _294 = _289 + 1u;
    uint _298 = _289 + 2u;
    float _307 = sqrt(((cbInstanceData._m0[_294].x * cbInstanceData._m0[_294].x) + (cbInstanceData._m0[_289].x * cbInstanceData._m0[_289].x)) + (cbInstanceData._m0[_298].x * cbInstanceData._m0[_298].x));
    float _308 = _307 * TEXCOORD.z;
    float _309 = _307 * TEXCOORD.w;
    vec4 _322 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _308) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _309) + cbTextureTilingScale._m0[13u].w));
    vec4 _346 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _351 = _346.x * cbMtdParam._m0[11u].x;
    float _352 = _346.y * cbMtdParam._m0[11u].y;
    float _353 = _346.z * cbMtdParam._m0[11u].z;
    vec4 _372 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _308) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _309) + cbTextureTilingScale._m0[5u].w));
    vec4 _409 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _411 = _409.x;
    float _423 = dot(vec4(_411, _409.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _440 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_411 - _423) * cbMtdParam._m0[24u].y) + _423) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3891 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _441 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
    float _448 = (_441 * ((_372.x * cbMtdParam._m0[12u].x) - _351)) + _351;
    float _449 = (_441 * ((_372.y * cbMtdParam._m0[12u].y) - _352)) + _352;
    float _450 = (_441 * ((_372.z * cbMtdParam._m0[12u].z) - _353)) + _353;
    vec4 _467 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _308) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _309) + cbTextureTilingScale._m0[3u].w));
    vec4 _487 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _489 = _487.x;
    float _499 = dot(vec4(_489, _487.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _513 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_489 - _499) * cbMtdParam._m0[24u].y) + _499) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3902 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _514 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
    float _521 = (_514 * ((_467.x * cbMtdParam._m0[13u].x) - _448)) + _448;
    float _522 = (_514 * ((_467.y * cbMtdParam._m0[13u].y) - _449)) + _449;
    float _523 = (_514 * ((_467.z * cbMtdParam._m0[13u].z) - _450)) + _450;
    float _527 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _322.x) * _521;
    float _530 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _322.y) * _522;
    float _533 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _322.z) * _523;
    float _540 = ((_521 - _527) * (isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0)))) + _527;
    float _541 = ((_522 - _530) * (isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0)))) + _530;
    float _542 = ((_523 - _533) * (isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0)))) + _533;
    vec4 _559 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _308) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _309) + cbTextureTilingScale._m0[20u].w));
    vec4 _582 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _308) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _309) + cbTextureTilingScale._m0[4u].w));
    vec4 _599 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _601 = _599.x;
    float _602 = _599.y;
    float _603 = _599.z;
    float _610 = ((_582.x - _601) * _441) + _601;
    float _611 = ((_582.y - _602) * _441) + _602;
    float _612 = ((_582.z - _603) * _441) + _603;
    vec4 _624 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _308) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _309) + cbTextureTilingScale._m0[2u].w));
    float _637 = ((_624.z - _612) * _514) + _612;
    float _640 = ((((_624.x - _610) * _514) + _610) * 2.0) + (-1.0);
    float _641 = ((((_624.y - _611) * _514) + _611) * 2.0) + (-1.0);
    float _642 = dot(vec2(_640, _641), vec2(_640, _641));
    float _3913 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _647 = sqrt(1.0 - (isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0))));
    vec4 _661 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _686 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _308) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _309) + cbTextureTilingScale._m0[11u].w));
    float _688 = _686.x;
    float _689 = 1.0 - _688;
    float _695 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _698 = ((isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : min(_695, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _707 = (_698 - ((((((_688 - _689) * cbMtdParam._m0[24u].z) + _689) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _698))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3934 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _708 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
    float _715 = (_708 * (cbMtdParam._m0[17u].x - _540)) + _540;
    float _716 = (_708 * (cbMtdParam._m0[17u].y - _541)) + _541;
    float _717 = (_708 * (cbMtdParam._m0[17u].z - _542)) + _542;
    vec4 _729 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _308) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _309) + cbTextureTilingScale._m0[19u].w));
    float _731 = _729.x;
    float _732 = 1.0 - _731;
    float _757 = (TEXCOORD_8.x - ((cbMtdParam._m0[23u].w * (1.0 - TEXCOORD_8.x)) * ((((_731 - _732) * cbMtdParam._m0[24u].w) + _732) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3945 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
    float _758 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
    float _766 = ((((cbMtdParam._m0[10u].x - _715) * TEXCOORD_8.x) * cbMtdParam._m0[22u].w) * _758) + _715;
    float _767 = ((((cbMtdParam._m0[10u].y - _716) * TEXCOORD_8.y) * cbMtdParam._m0[22u].w) * _758) + _716;
    float _768 = (((cbMtdParam._m0[22u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _717)) * _758) + _717;
    vec4 _794 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _796 = _794.x;
    float _814 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _308) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _309) + cbTextureTilingScale._m0[9u].w)).x - _796) * _441) + _796;
    float _831 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _308) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _309) + cbTextureTilingScale._m0[21u].w)).x - _814) * _514) + _814;
    float _835 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _831) * cbMtdParam._m0[19u].z) + _831;
    float _837 = _835 - (_835 * _708);
    float _839 = _837 - (_837 * _758);
    float _844 = (((_559.z - _637) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _637;
    float _848 = ((_661.z - _844) * cbMtdParam._m0[19u].w) + _844;
    vec4 _862 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _308) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _309) + cbTextureTilingScale._m0[15u].w));
    float _869 = (_862.x * 2.0) + (-1.0);
    float _870 = (_862.y * 2.0) + (-1.0);
    float _871 = dot(vec2(_869, _870), vec2(_869, _870));
    float _3956 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
    float _879 = (_708 * (_862.z - _848)) + _848;
    float _882 = ((cbMtdParam._m0[23u].y - _879) * _758) + _879;
    vec4 _903 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _308) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _309) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _909 = (_903.x * 2.0) + (-1.0);
    float _910 = (_903.y * 2.0) + (-1.0);
    float _911 = dot(vec2(_909, _910), vec2(_909, _910));
    float _3967 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
    float _925 = (_640 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_559.x * 2.0) + (-1.0)))) + (((_661.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _926 = (_641 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_559.y * 2.0) + (-1.0)))) + (((_661.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _938 = (((_869 - _925) + (cbMtdParam._m0[21u].x * _925)) * _708) + _925;
    float _939 = (((_870 - _926) + (cbMtdParam._m0[21u].x * _926)) * _708) + _926;
    float _940 = (_708 * (sqrt(1.0 - (isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0)))) - _647)) + _647;
    float _951 = (((_909 - _938) + (_938 * cbMtdParam._m0[22u].z)) * _758) + _938;
    float _952 = (((_910 - _939) + (_939 * cbMtdParam._m0[22u].z)) * _758) + _939;
    float _953 = ((sqrt(1.0 - (isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0)))) - _940) * _758) + _940;
    float _955 = cbMtdParam._m0[22u].x + _661.w;
    float _958 = fma(_953, _257 * NORMAL.x, fma(_952, _264 * TANGENT.x, (_250 * _242) * _951));
    float _961 = fma(_953, _257 * NORMAL.y, fma(_952, _264 * TANGENT.y, (_250 * _243) * _951));
    float _964 = fma(_953, _257 * NORMAL.z, fma(_952, _264 * TANGENT.z, (_250 * _244) * _951));
    float _968 = inversesqrt(dot(vec3(_958, _961, _964), vec3(_958, _961, _964)));
    float _969 = _968 * _958;
    float _970 = _968 * _961;
    float _971 = _968 * _964;
    float _3978 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
    float _972 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
    float _3989 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
    float _4000 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _4011 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _4022 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _4033 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
    float _977 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
    float _991 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1031 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1041 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1031);
    float _1042 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1031);
    float _1043 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1031);
    float _1047 = inversesqrt(dot(vec3(_1041, _1042, _1043), vec3(_1041, _1042, _1043)));
    float _1048 = _1041 * _1047;
    float _1049 = _1042 * _1047;
    float _1050 = _1043 * _1047;
    float _1056 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1057 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1075 = fma(_971, cbSceneParam._m0[5u].z, fma(_970, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _969));
    float _1078 = fma(_971, cbSceneParam._m0[6u].z, fma(_970, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _969));
    float _1081 = fma(_971, cbSceneParam._m0[7u].z, fma(_970, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _969));
    uint _1095 = (_289 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1101 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0)))) * cbInstanceData._m0[_1095].x;
    float _1102 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0)))) * cbInstanceData._m0[_1095].y;
    float _1103 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0)))) * cbInstanceData._m0[_1095].z;
    float _4044 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
    float _1104 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
    float _4055 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
    float _1105 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
    float _4066 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
    float _1106 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
    float _1107 = 1.0 - _977;
    float _1108 = _1104 * _1107;
    float _1109 = _1105 * _1107;
    float _1110 = _1106 * _1107;
    float _1115 = (_1104 + (-0.039999999105930328369140625)) * _977;
    float _1116 = (_1105 + (-0.039999999105930328369140625)) * _977;
    float _1117 = (_1106 + (-0.039999999105930328369140625)) * _977;
    float _1118 = _1115 + 0.039999999105930328369140625;
    float _1120 = _1116 + 0.039999999105930328369140625;
    float _1121 = _1117 + 0.039999999105930328369140625;
    vec4 _1130 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1056, cbSceneParam._m0[86u].y * _1057));
    float _1134 = ((isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0))) * TEXCOORD_5.w) * _1130.x;
    float _1135 = dot(vec3(_969, _970, _971), vec3(_1048, _1049, _1050));
    float _1138 = _1135 * 2.0;
    float _1142 = (_1138 * _969) - _1048;
    float _1143 = (_1138 * _970) - _1049;
    float _1144 = (_1138 * _971) - _1050;
    float _1148 = abs(dot(vec3(_1048, _1049, _1050), vec3(_969, _970, _971)));
    float _4077 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
    float _1150 = sqrt(_972);
    float _1163 = exp2((_1150 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1150 * 3.0));
    float _1169 = (1.0 - _1163) * ((_1150 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1170 = _1163 * _1150;
    float _1198 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1202 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1206 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1507;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1232 = fma(_1206, cbModelParam._m0[26u].z, fma(_1202, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1198));
        float _1236 = fma(_1206, cbModelParam._m0[27u].z, fma(_1202, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1198));
        float _1240 = fma(_1206, cbModelParam._m0[28u].z, fma(_1202, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1198));
        float _1265 = _1198 + _969;
        float _1266 = _1202 + _970;
        float _1267 = _1206 + _971;
        float _1277 = fma(_1267, cbModelParam._m0[26u].z, fma(_1266, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1265)) - _1232;
        float _1278 = fma(_1267, cbModelParam._m0[27u].z, fma(_1266, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1265)) - _1236;
        float _1279 = fma(_1267, cbModelParam._m0[28u].z, fma(_1266, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1265)) - _1240;
        float _1283 = inversesqrt(dot(vec3(_1277, _1278, _1279), vec3(_1277, _1278, _1279)));
        float _1296 = ((_1283 * _1277) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1232 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1297 = ((_1283 * _1278) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1236 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1298 = ((_1283 * _1279) / cbModelParam._m0[34u].z) + ((((((_1240 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1301 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1296, _1297, _1298), 0.0);
        vec4 _1308 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1296, _1297, _1298), 0.0);
        vec4 _1315 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1296, _1297, _1298), 0.0);
        vec4 _1322 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1296, _1297, _1298), 0.0);
        float _1335 = exp2((_1301.w + (-0.5)) * 20.0) * 2.0;
        float _1336 = _1335 * (_1301.x + (-0.5));
        float _1337 = _1335 * (_1301.y + (-0.5));
        float _1338 = _1335 * (_1301.z + (-0.5));
        float _1345 = exp2((_1308.w + (-0.5)) * 20.0) * 2.0;
        float _1346 = _1345 * (_1308.x + (-0.5));
        float _1347 = _1345 * (_1308.y + (-0.5));
        float _1348 = _1345 * (_1308.z + (-0.5));
        float _1355 = exp2((_1315.w + (-0.5)) * 20.0) * 2.0;
        float _1356 = _1355 * (_1315.x + (-0.5));
        float _1357 = _1355 * (_1315.y + (-0.5));
        float _1358 = _1355 * (_1315.z + (-0.5));
        float _1365 = exp2((_1322.w + (-0.5)) * 20.0) * 2.0;
        float _1366 = _1365 * (_1322.x + (-0.5));
        float _1367 = _1365 * (_1322.y + (-0.5));
        float _1368 = _1365 * (_1322.z + (-0.5));
        float _1369 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1370 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1371 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1372 = _1336 * 0.5;
        float _1373 = _1346 * 0.5;
        float _1374 = _1356 * 0.5;
        float _1375 = dot(vec3(_1372, _1373, _1374), vec3(_1372, _1373, _1374));
        float _1380 = (_1375 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1375);
        float _1389 = (dot(vec3(_969, _970, _971), vec3(_1380 * _1372, _1380 * _1373, _1380 * _1374)) + 1.0) * 0.5;
        float _4103 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1399 = sqrt(((_1373 * _1373) + (_1372 * _1372)) + (_1374 * _1374)) / (_1369 + 9.9999997473787516355514526367188e-06);
        float _4114 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1400 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
        float _1401 = _1400 * 2.0;
        float _1405 = (1.0 - _1400) / (_1400 + 1.0);
        float _4125 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1406 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
        float _1415 = ((((1.0 - _1406) * (_1401 + 2.0)) * exp2(log2(isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0))) * (_1401 + 1.0))) + _1406) * _1369;
        float _1416 = _1337 * 0.5;
        float _1417 = _1347 * 0.5;
        float _1418 = _1357 * 0.5;
        float _1419 = dot(vec3(_1416, _1417, _1418), vec3(_1416, _1417, _1418));
        float _1424 = (_1419 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1419);
        float _1432 = (dot(vec3(_969, _970, _971), vec3(_1424 * _1416, _1424 * _1417, _1424 * _1418)) + 1.0) * 0.5;
        float _4136 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1441 = sqrt(((_1417 * _1417) + (_1416 * _1416)) + (_1418 * _1418)) / (_1370 + 9.9999997473787516355514526367188e-06);
        float _4147 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1442 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
        float _1443 = _1442 * 2.0;
        float _1447 = (1.0 - _1442) / (_1442 + 1.0);
        float _4158 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1448 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
        float _1457 = ((((1.0 - _1448) * (_1443 + 2.0)) * exp2(log2(isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0))) * (_1443 + 1.0))) + _1448) * _1370;
        float _1458 = _1338 * 0.5;
        float _1459 = _1348 * 0.5;
        float _1460 = _1358 * 0.5;
        float _1461 = dot(vec3(_1458, _1459, _1460), vec3(_1458, _1459, _1460));
        float _1466 = (_1461 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1461);
        float _1474 = (dot(vec3(_969, _970, _971), vec3(_1466 * _1458, _1466 * _1459, _1466 * _1460)) + 1.0) * 0.5;
        float _4169 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1483 = sqrt(((_1459 * _1459) + (_1458 * _1458)) + (_1460 * _1460)) / (_1371 + 9.9999997473787516355514526367188e-06);
        float _4180 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1484 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
        float _1485 = _1484 * 2.0;
        float _1489 = (1.0 - _1484) / (_1484 + 1.0);
        float _4191 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1490 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
        float _1499 = ((((1.0 - _1490) * (_1485 + 2.0)) * exp2(log2(isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0))) * (_1485 + 1.0))) + _1490) * _1371;
        _1507 = _1338;
        _1509 = _1337;
        _1510 = _1336;
        _1511 = _1348;
        _1512 = _1347;
        _1513 = _1346;
        _1514 = _1358;
        _1515 = _1357;
        _1516 = _1356;
        _1517 = _1371;
        _1518 = _1370;
        _1519 = _1369;
        _1520 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0)));
        _1521 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0)));
        _1522 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0)));
    }
    else
    {
        _1507 = _1508;
        _1509 = _1508;
        _1510 = _1508;
        _1511 = _1508;
        _1512 = _1508;
        _1513 = _1508;
        _1514 = _1508;
        _1515 = _1508;
        _1516 = _1508;
        _1517 = _1508;
        _1518 = _1508;
        _1519 = _1508;
        _1520 = 0.0;
        _1521 = 0.0;
        _1522 = 0.0;
    }
    float _1815;
    float _1816;
    float _1817;
    float _1818;
    float _1819;
    float _1820;
    float _1821;
    float _1822;
    float _1823;
    float _1824;
    float _1825;
    float _1826;
    float _1827;
    float _1828;
    float _1829;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1546 = fma(_1206, cbModelParam._m0[30u].z, fma(_1202, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1198));
        float _1550 = fma(_1206, cbModelParam._m0[31u].z, fma(_1202, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1198));
        float _1554 = fma(_1206, cbModelParam._m0[32u].z, fma(_1202, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1198));
        float _1577 = _1198 + _969;
        float _1578 = _1202 + _970;
        float _1579 = _1206 + _971;
        float _1589 = fma(_1579, cbModelParam._m0[30u].z, fma(_1578, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1577)) - _1546;
        float _1590 = fma(_1579, cbModelParam._m0[31u].z, fma(_1578, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1577)) - _1550;
        float _1591 = fma(_1579, cbModelParam._m0[32u].z, fma(_1578, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1577)) - _1554;
        float _1595 = inversesqrt(dot(vec3(_1589, _1590, _1591), vec3(_1589, _1590, _1591)));
        float _1608 = ((_1595 * _1589) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1546 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1609 = ((_1595 * _1590) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1550 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1610 = ((_1595 * _1591) / cbModelParam._m0[35u].z) + ((((((_1554 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1612 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1608, _1609, _1610), 0.0);
        vec4 _1619 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1608, _1609, _1610), 0.0);
        vec4 _1626 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1608, _1609, _1610), 0.0);
        vec4 _1633 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1608, _1609, _1610), 0.0);
        float _1645 = exp2((_1612.w + (-0.5)) * 20.0) * 2.0;
        float _1646 = _1645 * (_1612.x + (-0.5));
        float _1647 = _1645 * (_1612.y + (-0.5));
        float _1648 = _1645 * (_1612.z + (-0.5));
        float _1655 = exp2((_1619.w + (-0.5)) * 20.0) * 2.0;
        float _1656 = _1655 * (_1619.x + (-0.5));
        float _1657 = _1655 * (_1619.y + (-0.5));
        float _1658 = _1655 * (_1619.z + (-0.5));
        float _1665 = exp2((_1626.w + (-0.5)) * 20.0) * 2.0;
        float _1666 = _1665 * (_1626.x + (-0.5));
        float _1667 = _1665 * (_1626.y + (-0.5));
        float _1668 = _1665 * (_1626.z + (-0.5));
        float _1675 = exp2((_1633.w + (-0.5)) * 20.0) * 2.0;
        float _1676 = _1675 * (_1633.x + (-0.5));
        float _1677 = _1675 * (_1633.y + (-0.5));
        float _1678 = _1675 * (_1633.z + (-0.5));
        float _1679 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
        float _1680 = isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0));
        float _1681 = isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0));
        float _1682 = _1646 * 0.5;
        float _1683 = _1656 * 0.5;
        float _1684 = _1666 * 0.5;
        float _1685 = dot(vec3(_1682, _1683, _1684), vec3(_1682, _1683, _1684));
        float _1690 = (_1685 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1685);
        float _1698 = (dot(vec3(_969, _970, _971), vec3(_1690 * _1682, _1690 * _1683, _1690 * _1684)) + 1.0) * 0.5;
        float _4232 = isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0));
        float _1707 = sqrt(((_1683 * _1683) + (_1682 * _1682)) + (_1684 * _1684)) / (_1679 + 9.9999997473787516355514526367188e-06);
        float _4243 = isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0));
        float _1708 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
        float _1709 = _1708 * 2.0;
        float _1713 = (1.0 - _1708) / (_1708 + 1.0);
        float _4254 = isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0));
        float _1714 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
        float _1723 = ((((1.0 - _1714) * (_1709 + 2.0)) * exp2(log2(isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0))) * (_1709 + 1.0))) + _1714) * _1679;
        float _1724 = _1647 * 0.5;
        float _1725 = _1657 * 0.5;
        float _1726 = _1667 * 0.5;
        float _1727 = dot(vec3(_1724, _1725, _1726), vec3(_1724, _1725, _1726));
        float _1732 = (_1727 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1727);
        float _1740 = (dot(vec3(_969, _970, _971), vec3(_1732 * _1724, _1732 * _1725, _1732 * _1726)) + 1.0) * 0.5;
        float _4265 = isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0));
        float _1749 = sqrt(((_1725 * _1725) + (_1724 * _1724)) + (_1726 * _1726)) / (_1680 + 9.9999997473787516355514526367188e-06);
        float _4276 = isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0));
        float _1750 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
        float _1751 = _1750 * 2.0;
        float _1755 = (1.0 - _1750) / (_1750 + 1.0);
        float _4287 = isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0));
        float _1756 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
        float _1765 = ((((1.0 - _1756) * (_1751 + 2.0)) * exp2(log2(isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0))) * (_1751 + 1.0))) + _1756) * _1680;
        float _1766 = _1648 * 0.5;
        float _1767 = _1658 * 0.5;
        float _1768 = _1668 * 0.5;
        float _1769 = dot(vec3(_1766, _1767, _1768), vec3(_1766, _1767, _1768));
        float _1774 = (_1769 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1769);
        float _1782 = (dot(vec3(_969, _970, _971), vec3(_1774 * _1766, _1774 * _1767, _1774 * _1768)) + 1.0) * 0.5;
        float _4298 = isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0));
        float _1791 = sqrt(((_1767 * _1767) + (_1766 * _1766)) + (_1768 * _1768)) / (_1681 + 9.9999997473787516355514526367188e-06);
        float _4309 = isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0));
        float _1792 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
        float _1793 = _1792 * 2.0;
        float _1797 = (1.0 - _1792) / (_1792 + 1.0);
        float _4320 = isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0));
        float _1798 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
        float _1807 = ((((1.0 - _1798) * (_1793 + 2.0)) * exp2(log2(isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0))) * (_1793 + 1.0))) + _1798) * _1681;
        _1815 = _1648;
        _1816 = _1647;
        _1817 = _1646;
        _1818 = _1658;
        _1819 = _1657;
        _1820 = _1656;
        _1821 = _1668;
        _1822 = _1667;
        _1823 = _1666;
        _1824 = _1681;
        _1825 = _1680;
        _1826 = _1679;
        _1827 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0)));
        _1828 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0)));
        _1829 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0)));
    }
    else
    {
        _1815 = _1508;
        _1816 = _1508;
        _1817 = _1508;
        _1818 = _1508;
        _1819 = _1508;
        _1820 = _1508;
        _1821 = _1508;
        _1822 = _1508;
        _1823 = _1508;
        _1824 = _1508;
        _1825 = _1508;
        _1826 = _1508;
        _1827 = 0.0;
        _1828 = 0.0;
        _1829 = 0.0;
    }
    float _1839 = (cbModelParam._m0[1u].x * (_1827 - _1520)) + _1520;
    float _1840 = (cbModelParam._m0[1u].x * (_1828 - _1521)) + _1521;
    float _1841 = (cbModelParam._m0[1u].x * (_1829 - _1522)) + _1522;
    float _1862 = fma(_1841, cbSceneParam._m0[89u].z, fma(_1840, cbSceneParam._m0[89u].y, _1839 * cbSceneParam._m0[89u].x));
    float _1865 = fma(_1841, cbSceneParam._m0[90u].z, fma(_1840, cbSceneParam._m0[90u].y, _1839 * cbSceneParam._m0[90u].x));
    float _1868 = fma(_1841, cbSceneParam._m0[91u].z, fma(_1840, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1839));
    float _1883 = _1142 * 0.5;
    float _1884 = _1143 * 0.5;
    float _1885 = _1144 * 0.5;
    float _1886 = dot(vec4(_1883, _1884, _1885, 1.0), vec4(_1817, _1820, _1823, _1826));
    float _1889 = dot(vec4(_1883, _1884, _1885, 1.0), vec4(_1816, _1819, _1822, _1825));
    float _1892 = dot(vec4(_1883, _1884, _1885, 1.0), vec4(_1815, _1818, _1821, _1824));
    float _1926;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1899 = dot(vec4(_1883, _1884, _1885, 1.0), vec4(_1507, _1511, _1514, _1517));
        float _1903 = dot(vec4(_1883, _1884, _1885, 1.0), vec4(_1509, _1512, _1515, _1518));
        float _1907 = dot(vec4(_1883, _1884, _1885, 1.0), vec4(_1510, _1513, _1516, _1519));
        float _1914 = dot(vec4(cbModelParam._m0[39u]), vec4(_1883, _1884, _1885, 1.0));
        _1926 = dot(vec3(isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0)), isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0)), isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1914) ? 0.0 : (isnan(0.0) ? _1914 : max(0.0, _1914))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1926 = 1.0;
    }
    float _1937;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1928 = dot(vec4(cbModelParam._m0[40u]), vec4(_1883, _1884, _1885, 1.0));
        _1937 = dot(vec3(isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0)), isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0)), isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1928) ? 0.0 : (isnan(0.0) ? _1928 : max(0.0, _1928))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1937 = 1.0;
    }
    float _1941 = (_1937 * cbModelParam._m0[1u].x) + (_1926 * (1.0 - cbModelParam._m0[1u].x));
    float _1951 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _972);
    float _1952 = isnan(_1951) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1951 : min(cbModelParam._m0[25u].z, _1951));
    float _2033;
    float _2035;
    float _2037;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2000 = fma(_1206, cbModelParam._m0[13u].z, fma(_1202, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1198)) + cbModelParam._m0[13u].w;
        float _2004 = fma(_1206, cbModelParam._m0[14u].z, fma(_1202, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1198)) + cbModelParam._m0[14u].w;
        float _2008 = fma(_1206, cbModelParam._m0[15u].z, fma(_1202, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1198)) + cbModelParam._m0[15u].w;
        float _2011 = fma(_1144, cbModelParam._m0[13u].z, fma(_1143, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1142));
        float _2014 = fma(_1144, cbModelParam._m0[14u].z, fma(_1143, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1142));
        float _2017 = fma(_1144, cbModelParam._m0[15u].z, fma(_1143, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1142));
        float _2045;
        if (_2011 > 0.0)
        {
            _2045 = abs((1.0 - _2000) / _2011);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2011 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2000 + 1.0) / _2011);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2045 = frontier_phi_14_12_ladder;
        }
        float _2269;
        if (_2014 > 0.0)
        {
            _2269 = abs((1.0 - _2004) / _2014);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2014 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2004 + 1.0) / _2014);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2269 = frontier_phi_23_19_ladder;
        }
        float _2526;
        if (_2017 > 0.0)
        {
            _2526 = abs((1.0 - _2008) / _2017);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2017 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2008 + 1.0) / _2017);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2526 = frontier_phi_35_30_ladder;
        }
        float _2528 = isnan(_2269) ? _2045 : (isnan(_2045) ? _2269 : min(_2045, _2269));
        float _2529 = isnan(_2526) ? _2528 : (isnan(_2528) ? _2526 : min(_2528, _2526));
        float _2533 = (_2529 * _2011) + _2000;
        float _2534 = (_2529 * _2014) + _2004;
        float _2535 = (_2529 * _2017) + _2008;
        float _2536 = _2529 * 9.9999997473787516355514526367188e-05;
        float _2538 = (-1.0) - _2536;
        float _2540 = _2536 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2535 > _2540) || ((_2535 < _2538) || ((_2534 > _2540) || ((_2534 < _2538) || ((_2533 < _2538) || (_2533 > _2540))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2663 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2535, cbModelParam._m0[9u].z, fma(_2534, cbModelParam._m0[9u].y, _2533 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2535, cbModelParam._m0[10u].z, fma(_2534, cbModelParam._m0[10u].y, _2533 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2535, cbModelParam._m0[11u].z, fma(_2534, cbModelParam._m0[11u].y, _2533 * cbModelParam._m0[11u].x))), _1952);
            frontier_phi_13_35_ladder = _2663.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2663.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2663.x * cbModelParam._m0[1u].y;
        }
        _2033 = frontier_phi_13_35_ladder_2;
        _2035 = frontier_phi_13_35_ladder_1;
        _2037 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2021 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1142, _1143, _1144), _1952);
        _2033 = _2021.x * cbModelParam._m0[1u].y;
        _2035 = _2021.y * cbModelParam._m0[1u].y;
        _2037 = _2021.z * cbModelParam._m0[1u].y;
    }
    float _2041 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _972);
    float _2042 = isnan(_2041) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2041 : min(cbModelParam._m0[25u].w, _2041));
    float _2132;
    float _2134;
    float _2136;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2096 = fma(_1206, cbModelParam._m0[21u].z, fma(_1202, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1198)) + cbModelParam._m0[21u].w;
        float _2100 = fma(_1206, cbModelParam._m0[22u].z, fma(_1202, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1198)) + cbModelParam._m0[22u].w;
        float _2104 = fma(_1206, cbModelParam._m0[23u].z, fma(_1202, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1198)) + cbModelParam._m0[23u].w;
        float _2107 = fma(_1144, cbModelParam._m0[21u].z, fma(_1143, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1142));
        float _2110 = fma(_1144, cbModelParam._m0[22u].z, fma(_1143, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1142));
        float _2113 = fma(_1144, cbModelParam._m0[23u].z, fma(_1143, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1142));
        float _2274;
        if (_2107 > 0.0)
        {
            _2274 = abs((1.0 - _2096) / _2107);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2107 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2096 + 1.0) / _2107);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2274 = frontier_phi_25_21_ladder;
        }
        float _2553;
        if (_2110 > 0.0)
        {
            _2553 = abs((1.0 - _2100) / _2110);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2110 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2100 + 1.0) / _2110);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2553 = frontier_phi_37_32_ladder;
        }
        float _2766;
        if (_2113 > 0.0)
        {
            _2766 = abs((1.0 - _2104) / _2113);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2113 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2104 + 1.0) / _2113);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2766 = frontier_phi_46_43_ladder;
        }
        float _2768 = isnan(_2553) ? _2274 : (isnan(_2274) ? _2553 : min(_2274, _2553));
        float _2769 = isnan(_2766) ? _2768 : (isnan(_2768) ? _2766 : min(_2768, _2766));
        float _2773 = (_2769 * _2107) + _2096;
        float _2774 = (_2769 * _2110) + _2100;
        float _2775 = (_2769 * _2113) + _2104;
        float _2776 = _2769 * 9.9999997473787516355514526367188e-05;
        float _2777 = (-1.0) - _2776;
        float _2779 = _2776 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2775 > _2779) || ((_2775 < _2777) || ((_2774 > _2779) || ((_2774 < _2777) || ((_2773 < _2777) || (_2773 > _2779))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2974 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2775, cbModelParam._m0[17u].z, fma(_2774, cbModelParam._m0[17u].y, _2773 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2775, cbModelParam._m0[18u].z, fma(_2774, cbModelParam._m0[18u].y, _2773 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2775, cbModelParam._m0[19u].z, fma(_2774, cbModelParam._m0[19u].y, _2773 * cbModelParam._m0[19u].x))), _2042);
            frontier_phi_22_46_ladder = _2974.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2974.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2974.x * cbModelParam._m0[1u].z;
        }
        _2132 = frontier_phi_22_46_ladder_2;
        _2134 = frontier_phi_22_46_ladder_1;
        _2136 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2116 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1142, _1143, _1144), _2042);
        _2132 = _2116.x * cbModelParam._m0[1u].z;
        _2134 = _2116.y * cbModelParam._m0[1u].z;
        _2136 = _2116.z * cbModelParam._m0[1u].z;
    }
    float _2149 = (((_1169 * _1118) + _1170) * _1134) * ((cbModelParam._m0[1u].w * (_2132 - _2033)) + _2033);
    float _2151 = (((_1169 * _1120) + _1170) * _1134) * ((cbModelParam._m0[1u].w * (_2134 - _2035)) + _2035);
    float _2153 = (((_1169 * _1121) + _1170) * _1134) * ((cbModelParam._m0[1u].w * (_2136 - _2037)) + _2037);
    float _2156 = fma(_2153, cbSceneParam._m0[89u].z, fma(_2151, cbSceneParam._m0[89u].y, _2149 * cbSceneParam._m0[89u].x));
    float _2159 = fma(_2153, cbSceneParam._m0[90u].z, fma(_2151, cbSceneParam._m0[90u].y, _2149 * cbSceneParam._m0[90u].x));
    float _2162 = fma(_2153, cbSceneParam._m0[91u].z, fma(_2151, cbSceneParam._m0[91u].y, _2149 * cbSceneParam._m0[91u].x));
    vec4 _2170 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1056, _1057));
    float _2172 = _2170.w;
    float _2184 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2172);
    float _2185 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2172);
    float _2186 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2172);
    uvec4 _2190 = floatBitsToUint(cbInstanceData._m0[_289 + 5u]);
    uint _2192 = _2190.x * 14u;
    uint _2193 = _2192 + 13u;
    float _2200 = _1134 + (-1.0);
    float _2205 = (cbLight._m0[_2193].x * _2200) + 1.0;
    float _2206 = (cbLight._m0[_2193].y * _2200) + 1.0;
    float _2207 = (cbLight._m0[_2193].z * _2200) + 1.0;
    float _2208 = (cbLight._m0[_2193].w * _2200) + 1.0;
    uint _2209 = _2192 + 5u;
    float _2215 = isnan(1.0) ? _2206 : (isnan(_2206) ? 1.0 : min(_2206, 1.0));
    uint _2219 = _2192 + 4u;
    float _2228 = isnan(1.0) ? _2205 : (isnan(_2205) ? 1.0 : min(_2205, 1.0));
    uint _2232 = _2192 | 1u;
    float _2243 = dot(vec3(cbLight._m0[_2192].xyz), vec3(_969, _970, _971));
    float _2246 = dot(vec3(cbLight._m0[_2232].xyz), vec3(_969, _970, _971));
    float _4456 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
    float _4467 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
    float _2251 = (isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0))) * 0.3183098733425140380859375;
    float _2253 = (isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0))) * 0.3183098733425140380859375;
    float _2260 = ((cbLight._m0[_2209].x * _2215) * _2253) + (((cbLight._m0[_2219].x * _2184) * _2228) * _2251);
    float _2261 = ((_2215 * cbLight._m0[_2209].y) * _2253) + (((cbLight._m0[_2219].y * _2185) * _2228) * _2251);
    float _2262 = ((_2215 * cbLight._m0[_2209].z) * _2253) + (((cbLight._m0[_2219].z * _2186) * _2228) * _2251);
    uvec4 _2266 = floatBitsToUint(cbLight._m0[_2192 + 12u]);
    bool _2268 = _2266.x == 0u;
    float _2279;
    float _2281;
    float _2283;
    if (_2268)
    {
        _2279 = _2260;
        _2281 = _2261;
        _2283 = _2262;
    }
    else
    {
        uint _2287 = _2192 + 6u;
        float _2303 = (dot(vec3(cbLight._m0[_2192 + 2u].xyz), vec3(_969, _970, _971)) * 0.5) + 0.5;
        float _2304 = _2303 * _2303;
        float _4478 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
        float _2305 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
        float _2306 = isnan(1.0) ? _2207 : (isnan(_2207) ? 1.0 : min(_2207, 1.0));
        _2279 = (((cbLight._m0[_2287].x * 0.3183098733425140380859375) * _2305) * _2306) + _2260;
        _2281 = (((cbLight._m0[_2287].y * 0.3183098733425140380859375) * _2305) * _2306) + _2261;
        _2283 = (((cbLight._m0[_2287].z * 0.3183098733425140380859375) * _2305) * _2306) + _2262;
    }
    bool _2286 = _2266.y == 0u;
    float _2324;
    float _2326;
    float _2328;
    if (_2286)
    {
        _2324 = _2279;
        _2326 = _2281;
        _2328 = _2283;
    }
    else
    {
        uint _2497 = _2192 + 7u;
        float _2513 = (dot(vec3(cbLight._m0[_2192 + 3u].xyz), vec3(_969, _970, _971)) * 0.5) + 0.5;
        float _2514 = _2513 * _2513;
        float _4494 = isnan(0.0) ? _2514 : (isnan(_2514) ? 0.0 : max(_2514, 0.0));
        float _2515 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
        float _2516 = isnan(1.0) ? _2208 : (isnan(_2208) ? 1.0 : min(_2208, 1.0));
        _2324 = (((cbLight._m0[_2497].x * 0.3183098733425140380859375) * _2515) * _2516) + _2279;
        _2326 = (((cbLight._m0[_2497].y * 0.3183098733425140380859375) * _2515) * _2516) + _2281;
        _2328 = (((cbLight._m0[_2497].z * 0.3183098733425140380859375) * _2515) * _2516) + _2283;
    }
    uint _2331 = _2192 + 8u;
    float _2344 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2192].w)) * _972) * 0.949999988079071044921875);
    float _2345 = _2344 * _2344;
    float _2346 = cbLight._m0[_2192].x + _1048;
    float _2347 = cbLight._m0[_2192].y + _1049;
    float _2348 = cbLight._m0[_2192].z + _1050;
    float _2352 = inversesqrt(dot(vec3(_2346, _2347, _2348), vec3(_2346, _2347, _2348)));
    float _2353 = _2352 * _2346;
    float _2354 = _2352 * _2347;
    float _2355 = _2352 * _2348;
    float _2356 = dot(vec3(_969, _970, _971), vec3(cbLight._m0[_2192].xyz));
    float _4510 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
    float _2359 = isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0));
    float _4521 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
    float _2360 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
    float _2361 = dot(vec3(_969, _970, _971), vec3(_2353, _2354, _2355));
    float _4532 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
    float _2364 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
    float _2365 = dot(vec3(cbLight._m0[_2192].xyz), vec3(_2353, _2354, _2355));
    float _4543 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
    float _2369 = _2345 * _2345;
    float _2373 = ((_2364 * _2364) * (_2369 + (-1.0))) + 1.0;
    float _2381 = exp2(log2(1.0 - (isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0)))) * 5.0);
    float _2382 = 0.959999978542327880859375 - _1115;
    float _2384 = 0.959999978542327880859375 - _1116;
    float _2385 = 0.959999978542327880859375 - _1117;
    float _2392 = 1.0 - _2345;
    float _2403 = (0.5 / (((_2360 * ((_2359 * _2392) + _2345)) + 9.9999999392252902907785028219223e-09) + (((_2360 * _2392) + _2345) * _2359))) * _2359;
    float _4554 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
    float _2405 = (isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0))) * (_2369 / ((_2373 * _2373) * 3.141590118408203125));
    uint _2419 = _2192 + 9u;
    float _2430 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2232].w)) * _972) * 0.949999988079071044921875);
    float _2431 = _2430 * _2430;
    float _2432 = cbLight._m0[_2232].x + _1048;
    float _2433 = cbLight._m0[_2232].y + _1049;
    float _2434 = cbLight._m0[_2232].z + _1050;
    float _2438 = inversesqrt(dot(vec3(_2432, _2433, _2434), vec3(_2432, _2433, _2434)));
    float _2439 = _2438 * _2432;
    float _2440 = _2438 * _2433;
    float _2441 = _2438 * _2434;
    float _2442 = dot(vec3(_969, _970, _971), vec3(cbLight._m0[_2232].xyz));
    float _4565 = isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0));
    float _2445 = isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0));
    float _2446 = dot(vec3(_969, _970, _971), vec3(_2439, _2440, _2441));
    float _4576 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
    float _2449 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
    float _2450 = dot(vec3(cbLight._m0[_2232].xyz), vec3(_2439, _2440, _2441));
    float _4587 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
    float _2454 = _2431 * _2431;
    float _2458 = ((_2449 * _2449) * (_2454 + (-1.0))) + 1.0;
    float _2465 = exp2(log2(1.0 - (isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0)))) * 5.0);
    float _2472 = 1.0 - _2431;
    float _2482 = (0.5 / (((_2360 * ((_2445 * _2472) + _2431)) + 9.9999999392252902907785028219223e-09) + (((_2360 * _2472) + _2431) * _2445))) * _2445;
    float _4598 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0));
    float _2484 = (isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0))) * (_2454 / ((_2458 * _2458) * 3.141590118408203125));
    float _2494 = (((((_2465 * _2382) + _1118) * cbLight._m0[_2419].x) * _2484) * _2215) + ((((cbLight._m0[_2331].x * _2184) * ((_2381 * _2382) + _1118)) * _2405) * _2228);
    float _2495 = (((((_2465 * _2384) + _1120) * cbLight._m0[_2419].y) * _2484) * _2215) + ((((cbLight._m0[_2331].y * _2185) * ((_2381 * _2384) + _1120)) * _2405) * _2228);
    float _2496 = (((((_2465 * _2385) + _1121) * cbLight._m0[_2419].z) * _2484) * _2215) + ((((cbLight._m0[_2331].z * _2186) * ((_2381 * _2385) + _1121)) * _2405) * _2228);
    float _2558;
    float _2560;
    float _2562;
    if (_2268)
    {
        _2558 = _2494;
        _2560 = _2495;
        _2562 = _2496;
    }
    else
    {
        uint _2564 = _2192 + 2u;
        uint _2568 = _2192 + 10u;
        float _2582 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2564].w)) * _972) * 0.949999988079071044921875);
        float _2583 = _2582 * _2582;
        float _2584 = cbLight._m0[_2564].x + _1048;
        float _2585 = cbLight._m0[_2564].y + _1049;
        float _2586 = cbLight._m0[_2564].z + _1050;
        float _2590 = inversesqrt(dot(vec3(_2584, _2585, _2586), vec3(_2584, _2585, _2586)));
        float _2591 = _2590 * _2584;
        float _2592 = _2590 * _2585;
        float _2593 = _2590 * _2586;
        float _2594 = dot(vec3(_969, _970, _971), vec3(cbLight._m0[_2564].xyz));
        float _4609 = isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0));
        float _2597 = isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0));
        float _2598 = dot(vec3(_969, _970, _971), vec3(_2591, _2592, _2593));
        float _4620 = isnan(0.0) ? _2598 : (isnan(_2598) ? 0.0 : max(_2598, 0.0));
        float _2601 = isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0));
        float _2602 = dot(vec3(cbLight._m0[_2564].xyz), vec3(_2591, _2592, _2593));
        float _4631 = isnan(0.0) ? _2602 : (isnan(_2602) ? 0.0 : max(_2602, 0.0));
        float _2606 = _2583 * _2583;
        float _2610 = ((_2601 * _2601) * (_2606 + (-1.0))) + 1.0;
        float _2617 = exp2(log2(1.0 - (isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0)))) * 5.0);
        float _2624 = 1.0 - _2583;
        float _2634 = (0.5 / (((_2360 * ((_2597 * _2624) + _2583)) + 9.9999999392252902907785028219223e-09) + (((_2360 * _2624) + _2583) * _2597))) * _2597;
        float _4642 = isnan(0.0) ? _2634 : (isnan(_2634) ? 0.0 : max(_2634, 0.0));
        float _2636 = (isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0))) * (_2606 / ((_2610 * _2610) * 3.141590118408203125));
        float _2637 = isnan(1.0) ? _2207 : (isnan(_2207) ? 1.0 : min(_2207, 1.0));
        _2558 = (((((_2617 * _2382) + _1118) * cbLight._m0[_2568].x) * _2636) * _2637) + _2494;
        _2560 = (((((_2617 * _2384) + _1120) * cbLight._m0[_2568].y) * _2636) * _2637) + _2495;
        _2562 = (((((_2617 * _2385) + _1121) * cbLight._m0[_2568].z) * _2636) * _2637) + _2496;
    }
    float _2672;
    float _2674;
    float _2676;
    if (_2286)
    {
        _2672 = _2558;
        _2674 = _2560;
        _2676 = _2562;
    }
    else
    {
        uint _2683 = _2192 + 3u;
        uint _2687 = _2192 + 11u;
        float _2701 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2683].w)) * _972) * 0.949999988079071044921875);
        float _2702 = _2701 * _2701;
        float _2703 = cbLight._m0[_2683].x + _1048;
        float _2704 = cbLight._m0[_2683].y + _1049;
        float _2705 = cbLight._m0[_2683].z + _1050;
        float _2709 = inversesqrt(dot(vec3(_2703, _2704, _2705), vec3(_2703, _2704, _2705)));
        float _2710 = _2709 * _2703;
        float _2711 = _2709 * _2704;
        float _2712 = _2709 * _2705;
        float _2713 = dot(vec3(_969, _970, _971), vec3(cbLight._m0[_2683].xyz));
        float _4658 = isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : max(_2713, 0.0));
        float _2716 = isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0));
        float _2717 = dot(vec3(_969, _970, _971), vec3(_2710, _2711, _2712));
        float _4669 = isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : max(_2717, 0.0));
        float _2720 = isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0));
        float _2721 = dot(vec3(cbLight._m0[_2683].xyz), vec3(_2710, _2711, _2712));
        float _4680 = isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : max(_2721, 0.0));
        float _2725 = _2702 * _2702;
        float _2729 = ((_2720 * _2720) * (_2725 + (-1.0))) + 1.0;
        float _2736 = exp2(log2(1.0 - (isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0)))) * 5.0);
        float _2743 = 1.0 - _2702;
        float _2753 = (0.5 / (((_2360 * ((_2716 * _2743) + _2702)) + 9.9999999392252902907785028219223e-09) + (((_2360 * _2743) + _2702) * _2716))) * _2716;
        float _4691 = isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0));
        float _2755 = (isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0))) * (_2725 / ((_2729 * _2729) * 3.141590118408203125));
        float _2756 = isnan(1.0) ? _2208 : (isnan(_2208) ? 1.0 : min(_2208, 1.0));
        _2672 = (((((_2736 * _2382) + _1118) * cbLight._m0[_2687].x) * _2755) * _2756) + _2558;
        _2674 = (((((_2736 * _2384) + _1120) * cbLight._m0[_2687].y) * _2755) * _2756) + _2560;
        _2676 = (((((_2736 * _2385) + _1121) * cbLight._m0[_2687].z) * _2755) * _2756) + _2562;
    }
    float _2891;
    float _2893;
    float _2895;
    float _2897;
    float _2899;
    float _2901;
    if (_2190.y == 0u)
    {
        float _2831 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2832 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2831;
        float _2833 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2831;
        float _2834 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2831;
        uvec4 _2846 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2847 = _2846.x;
        uint _2858 = uint((float(_2846.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1057) / _2847))) + floor(float(uint(cbSceneParam._m0[85u].x * _1056) / _2847)));
        float _2868 = (log2(_2834 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2869 = isnan(0.0) ? _2868 : (isnan(_2868) ? 0.0 : max(_2868, 0.0));
        uint _2872 = uint(isnan(14.0) ? _2869 : (isnan(_2869) ? 14.0 : min(_2869, 14.0)));
        uvec4 _2877 = texelFetch(g_lightClusterGridBuffer, int(((_2872 << 2u) + (_2858 << 6u)) >> 2u));
        uint _2878 = _2877.x;
        uint _2879 = _2846.z;
        float _2979;
        float _2981;
        float _2983;
        float _2985;
        float _2987;
        float _2989;
        if (((((1u << ((_2879 >> 4u) & 15u)) + 4294967295u) & _2878) == 0u) || ((_2879 & 240u) == 0u))
        {
            _2979 = 0.0;
            _2981 = 0.0;
            _2983 = 0.0;
            _2985 = 0.0;
            _2987 = 0.0;
            _2989 = 0.0;
        }
        else
        {
            float _2980;
            float _2982;
            float _2984;
            float _2986;
            float _2988;
            float _2990;
            float _3124 = 0.0;
            float _3125 = 0.0;
            float _3126 = 0.0;
            float _3127 = 0.0;
            float _3128 = 0.0;
            float _3129 = 0.0;
            uint _3130 = 0u;
            uint _3139;
            bool _3140;
            for (;;)
            {
                _3139 = texelFetch(g_lightClassification, int((((_2872 << 5u) + (_2858 << 9u)) + (_3130 << 2u)) >> 2u)).x;
                _3140 = _3139 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3140)
                {
                    frontier_phi_61_pred = _3124;
                    frontier_phi_61_pred_1 = _3129;
                    frontier_phi_61_pred_2 = _3128;
                    frontier_phi_61_pred_3 = _3127;
                    frontier_phi_61_pred_4 = _3126;
                    frontier_phi_61_pred_5 = _3125;
                }
                else
                {
                    float _3248;
                    float _3249;
                    float _3250;
                    float _3251;
                    float _3252;
                    float _3253;
                    uint _3254;
                    _3248 = _3124;
                    _3249 = _3125;
                    _3250 = _3126;
                    _3251 = _3127;
                    _3252 = _3128;
                    _3253 = _3129;
                    _3254 = _3139;
                    float _3180;
                    float _3181;
                    float _3182;
                    float _3183;
                    float _3184;
                    float _3185;
                    for (;;)
                    {
                        uint _3258 = uint(findLSB(_3254)) + (_3130 << 5u);
                        uint _3255 = (_3254 + 4294967295u) & _3254;
                        uint _3260 = _3258 * 48u;
                        vec4 _3274 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3260)).x, texelFetch(g_PointLightRenderingBuffer, int(_3260 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3260 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3260 + 3u)).x));
                        uint _3280 = (_3258 * 48u) + 4u;
                        vec4 _3293 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3280)).x, texelFetch(g_PointLightRenderingBuffer, int(_3280 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3280 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3280 + 3u)).x));
                        uint _3299 = (_3258 * 48u) + 8u;
                        vec3 _3310 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3299)).x, texelFetch(g_PointLightRenderingBuffer, int(_3299 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3299 + 2u)).x));
                        float _3314 = _3274.x - _2832;
                        float _3315 = _3274.y - _2833;
                        float _3316 = _3274.z - _2834;
                        float _3317 = dot(vec3(_3314, _3315, _3316), vec3(_3314, _3315, _3316));
                        float _3320 = inversesqrt(_3317);
                        float _3321 = _3320 * _3314;
                        float _3322 = _3320 * _3315;
                        float _3323 = _3320 * _3316;
                        float _3324 = dot(vec3(_1075, _1078, _1081), vec3(_3321, _3322, _3323));
                        float _3329 = 1.0 - (_3317 * _3274.w);
                        float _4717 = isnan(0.0) ? _3329 : (isnan(_3329) ? 0.0 : max(_3329, 0.0));
                        float _3330 = isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0));
                        float _3331 = sqrt(_3317) * _3293.w;
                        float _3334 = 1.39999997615814208984375 / (_3331 + 1.39999997615814208984375);
                        float _3335 = _3334 * _3334;
                        float _3338 = ((1.0 - _3335) * _3324) + _3335;
                        float _3341 = _3331 * _3331;
                        float _3345 = ((isnan(0.0) ? _3338 : (isnan(_3338) ? 0.0 : max(_3338, 0.0))) * _3330) / ((_3341 * 0.699999988079071044921875) + 1.0);
                        float _3349 = (-0.0) - _2832;
                        float _3350 = (-0.0) - _2833;
                        float _3351 = (-0.0) - _2834;
                        float _3355 = inversesqrt(dot(vec3(_3349, _3350, _3351), vec3(_3349, _3350, _3351)));
                        float _3356 = _3355 * _3349;
                        float _3357 = _3355 * _3350;
                        float _3358 = _3355 * _3351;
                        float _3366 = exp2(log2(1.0 / ((_3341 * 3.5) + 5.0)) * 0.25);
                        float _3367 = 1.0 - _1150;
                        float _3374 = sqrt(1.0 - ((1.0 - (_3367 * _3367)) * (1.0 - (_3366 * _3366))));
                        float _3375 = _3374 * _3374;
                        float _3376 = _3375 * _3375;
                        float _3377 = _3356 + _3321;
                        float _3378 = _3357 + _3322;
                        float _3379 = _3358 + _3323;
                        float _3383 = inversesqrt(dot(vec3(_3377, _3378, _3379), vec3(_3377, _3378, _3379)));
                        float _3387 = dot(vec3(_1075, _1078, _1081), vec3(_3356, _3357, _3358));
                        float _4733 = isnan(0.0) ? _3387 : (isnan(_3387) ? 0.0 : max(_3387, 0.0));
                        float _3390 = isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0));
                        float _3391 = dot(vec3(_1075, _1078, _1081), vec3(_3383 * _3377, _3383 * _3378, _3383 * _3379));
                        float _4744 = isnan(0.0) ? _3391 : (isnan(_3391) ? 0.0 : max(_3391, 0.0));
                        float _3394 = isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0));
                        float _3398 = ((_3394 * _3394) * (_3376 + (-1.0))) + 1.0;
                        float _3399 = _3334 * _3375;
                        float _3400 = _3399 * _3399;
                        float _3403 = ((1.0 - _3400) * _3324) + _3400;
                        float _4755 = isnan(0.0) ? _3403 : (isnan(_3403) ? 0.0 : max(_3403, 0.0));
                        float _3404 = isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0));
                        float _3405 = 1.0 - _3375;
                        float _3415 = (0.5 / (((_3404 * ((_3390 * _3405) + _3375)) + 9.9999999392252902907785028219223e-09) + (((_3404 * _3405) + _3375) * _3390))) * _3404;
                        float _4766 = isnan(0.0) ? _3415 : (isnan(_3415) ? 0.0 : max(_3415, 0.0));
                        float _3426 = (((_3376 * 3.1415927410125732421875) * (isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0)))) / ((_3398 * _3398) * ((_3341 * 2.1991131305694580078125) + 3.141590118408203125))) * _3330;
                        _3183 = (_3345 * _3293.x) + _3251;
                        _3184 = (_3345 * _3293.y) + _3252;
                        _3185 = (_3345 * _3293.z) + _3253;
                        _3180 = (_3426 * _3310.x) + _3248;
                        _3181 = (_3426 * _3310.y) + _3249;
                        _3182 = (_3426 * _3310.z) + _3250;
                        if (_3255 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3248 = _3180;
                            _3249 = _3181;
                            _3250 = _3182;
                            _3251 = _3183;
                            _3252 = _3184;
                            _3253 = _3185;
                            _3254 = _3255;
                        }
                    }
                    frontier_phi_61_pred = _3180;
                    frontier_phi_61_pred_1 = _3185;
                    frontier_phi_61_pred_2 = _3184;
                    frontier_phi_61_pred_3 = _3183;
                    frontier_phi_61_pred_4 = _3182;
                    frontier_phi_61_pred_5 = _3181;
                }
                _2980 = frontier_phi_61_pred;
                _2990 = frontier_phi_61_pred_1;
                _2988 = frontier_phi_61_pred_2;
                _2986 = frontier_phi_61_pred_3;
                _2984 = frontier_phi_61_pred_4;
                _2982 = frontier_phi_61_pred_5;
                uint _3131 = _3130 + 1u;
                if (_3131 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3124 = _2980;
                    _3125 = _2982;
                    _3126 = _2984;
                    _3127 = _2986;
                    _3128 = _2988;
                    _3129 = _2990;
                    _3130 = _3131;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2979 = _2980;
            _2981 = _2982;
            _2983 = _2984;
            _2985 = _2986;
            _2987 = _2988;
            _2989 = _2990;
        }
        uvec4 _2993 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2994 = _2993.z;
        uint _2996 = (_2994 >> 8u) & 15u;
        float _3092;
        float _3094;
        float _3096;
        float _3098;
        float _3100;
        float _3102;
        if (((4294967295u << _2996) & _2878) == 0u)
        {
            _3092 = _2979;
            _3094 = _2981;
            _3096 = _2983;
            _3098 = _2985;
            _3100 = _2987;
            _3102 = _2989;
        }
        else
        {
            float _3117 = inversesqrt(dot(vec3(_2832, _2833, _2834), vec3(_2832, _2833, _2834)));
            float _3118 = _3117 * _2832;
            float _3119 = _3117 * _2833;
            float _3120 = _3117 * _2834;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2996 < ((_2994 >> 12u) & 15u))
            {
                float _3093;
                float _3095;
                float _3097;
                float _3099;
                float _3101;
                float _3103;
                float _3231 = _2979;
                float _3232 = _2981;
                float _3233 = _2983;
                float _3234 = _2985;
                float _3235 = _2987;
                float _3236 = _2989;
                uint _3237 = _2996;
                uint _3246;
                bool _3247;
                for (;;)
                {
                    _3246 = texelFetch(g_lightClassification, int((((_2872 << 5u) + (_2858 << 9u)) + (_3237 << 2u)) >> 2u)).x;
                    _3247 = _3246 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3247)
                    {
                        frontier_phi_67_pred = _3234;
                        frontier_phi_67_pred_1 = _3235;
                        frontier_phi_67_pred_2 = _3236;
                        frontier_phi_67_pred_3 = _3233;
                        frontier_phi_67_pred_4 = _3232;
                        frontier_phi_67_pred_5 = _3231;
                    }
                    else
                    {
                        float _3431;
                        float _3432;
                        float _3433;
                        float _3434;
                        float _3435;
                        float _3436;
                        float _3724;
                        float _3725;
                        float _3726;
                        float _3727;
                        float _3728;
                        float _3729;
                        float _3444 = _3231;
                        float _3445 = _3232;
                        float _3446 = _3233;
                        float _3447 = _3234;
                        float _3448 = _3235;
                        float _3449 = _3236;
                        uint _3450 = _3246;
                        uint _3451;
                        vec4 _3476;
                        float _3477;
                        vec4 _3492;
                        vec3 _3504;
                        vec4 _3519;
                        vec4 _3534;
                        float _3580;
                        bool _3581;
                        for (;;)
                        {
                            uint _3461 = ((_3237 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3450));
                            _3451 = (_3450 + 4294967295u) & _3450;
                            uint _3463 = _3461 * 40u;
                            _3476 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3463)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 3u)).x));
                            _3477 = _3476.w;
                            uint _3479 = (_3461 * 40u) + 4u;
                            _3492 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3479)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 3u)).x));
                            uint _3494 = (_3461 * 40u) + 8u;
                            _3504 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3494)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 2u)).x));
                            uint _3506 = (_3461 * 40u) + 16u;
                            _3519 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3506)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3506 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3506 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3506 + 3u)).x));
                            uint _3521 = (_3461 * 40u) + 20u;
                            _3534 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3521)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3521 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3521 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3521 + 3u)).x));
                            uint _3536 = (_3461 * 40u) + 24u;
                            vec4 _3549 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3536)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3536 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3536 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3536 + 3u)).x));
                            uint _3555 = (_3461 * 40u) + 28u;
                            vec4 _3568 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3555)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3555 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3555 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3555 + 3u)).x));
                            _3580 = fma(_2834, _3568.z, fma(_2833, _3568.y, _3568.x * _2832)) + _3568.w;
                            _3581 = !((fma(_2834, _3549.z, fma(_2833, _3549.y, _3549.x * _2832)) + _3549.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3581)
                            {
                                float _3608 = _3476.x - _2832;
                                float _3609 = _3476.y - _2833;
                                float _3610 = _3476.z - _2834;
                                float _3611 = dot(vec3(_3608, _3609, _3610), vec3(_3608, _3609, _3610));
                                float _3614 = inversesqrt(_3611);
                                float _3615 = _3614 * _3608;
                                float _3616 = _3614 * _3609;
                                float _3617 = _3614 * _3610;
                                float _3621 = 1.0 - (_3611 / (_3477 * _3477));
                                float _4777 = isnan(0.0) ? _3621 : (isnan(_3621) ? 0.0 : max(_3621, 0.0));
                                float _3622 = isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0));
                                float _3626 = sqrt(_3611) * _3492.w;
                                float _3628 = 1.39999997615814208984375 / (_3626 + 1.39999997615814208984375);
                                float _3629 = _3628 * _3628;
                                float _3632 = ((1.0 - _3629) * dot(vec3(_3615, _3616, _3617), vec3(_1075, _1078, _1081))) + _3629;
                                float _3635 = _3626 * _3626;
                                float _3639 = (fma(_2834, _3519.z, fma(_2833, _3519.y, _3519.x * _2832)) + _3519.w) / _3580;
                                float _3640 = (fma(_2834, _3534.z, fma(_2833, _3534.y, _3534.x * _2832)) + _3534.w) / _3580;
                                float _3644 = 1.0 - dot(vec2(_3639, _3640), vec2(_3639, _3640));
                                float _4793 = isnan(0.0) ? _3644 : (isnan(_3644) ? 0.0 : max(_3644, 0.0));
                                float _3645 = isnan(1.0) ? _4793 : (isnan(_4793) ? 1.0 : min(_4793, 1.0));
                                float _3646 = _3645 * (((isnan(0.0) ? _3632 : (isnan(_3632) ? 0.0 : max(_3632, 0.0))) * _3622) / ((_3635 * 0.699999988079071044921875) + 1.0));
                                float _3658 = exp2(log2(1.0 / ((_3635 * 3.5) + 5.0)) * 0.25);
                                float _3659 = 1.0 - _1150;
                                float _3666 = sqrt(1.0 - ((1.0 - (_3659 * _3659)) * (1.0 - (_3658 * _3658))));
                                float _3667 = _3666 * _3666;
                                float _3668 = _3667 * _3667;
                                float _3669 = _3615 - _3118;
                                float _3670 = _3616 - _3119;
                                float _3671 = _3617 - _3120;
                                float _3675 = inversesqrt(dot(vec3(_3669, _3670, _3671), vec3(_3669, _3670, _3671)));
                                float _3679 = dot(vec3(_1075, _1078, _1081), vec3((-0.0) - _3118, (-0.0) - _3119, (-0.0) - _3120));
                                float _4804 = isnan(0.0) ? _3679 : (isnan(_3679) ? 0.0 : max(_3679, 0.0));
                                float _3682 = isnan(1.0) ? _4804 : (isnan(_4804) ? 1.0 : min(_4804, 1.0));
                                float _3683 = dot(vec3(_1075, _1078, _1081), vec3(_3675 * _3669, _3675 * _3670, _3675 * _3671));
                                float _4815 = isnan(0.0) ? _3683 : (isnan(_3683) ? 0.0 : max(_3683, 0.0));
                                float _3686 = isnan(1.0) ? _4815 : (isnan(_4815) ? 1.0 : min(_4815, 1.0));
                                float _3690 = ((_3686 * _3686) * (_3668 + (-1.0))) + 1.0;
                                float _3691 = _3628 * _3667;
                                float _3692 = _3691 * _3691;
                                float _3698 = ((1.0 - _3692) * dot(vec3(_1075, _1078, _1081), vec3(_3615, _3616, _3617))) + _3692;
                                float _4826 = isnan(0.0) ? _3698 : (isnan(_3698) ? 0.0 : max(_3698, 0.0));
                                float _3699 = isnan(1.0) ? _4826 : (isnan(_4826) ? 1.0 : min(_4826, 1.0));
                                float _3700 = 1.0 - _3667;
                                float _3710 = (0.5 / (((_3699 * ((_3682 * _3700) + _3667)) + 9.9999999392252902907785028219223e-09) + (((_3699 * _3700) + _3667) * _3682))) * _3699;
                                float _4837 = isnan(0.0) ? _3710 : (isnan(_3710) ? 0.0 : max(_3710, 0.0));
                                float _3720 = (_3645 * _3622) * (((_3668 * 3.1415927410125732421875) * (isnan(1.0) ? _4837 : (isnan(_4837) ? 1.0 : min(_4837, 1.0)))) / ((_3690 * _3690) * ((_3635 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3720 * _3504.x;
                                frontier_phi_73_pred_1 = _3720 * _3504.y;
                                frontier_phi_73_pred_2 = _3646 * _3492.z;
                                frontier_phi_73_pred_3 = _3646 * _3492.y;
                                frontier_phi_73_pred_4 = _3646 * _3492.x;
                                frontier_phi_73_pred_5 = _3720 * _3504.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3724 = frontier_phi_73_pred;
                            _3725 = frontier_phi_73_pred_1;
                            _3729 = frontier_phi_73_pred_2;
                            _3728 = frontier_phi_73_pred_3;
                            _3727 = frontier_phi_73_pred_4;
                            _3726 = frontier_phi_73_pred_5;
                            _3434 = _3727 + _3447;
                            _3435 = _3728 + _3448;
                            _3436 = _3729 + _3449;
                            _3431 = _3724 + _3444;
                            _3432 = _3725 + _3445;
                            _3433 = _3726 + _3446;
                            if (_3451 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3444 = _3431;
                                _3445 = _3432;
                                _3446 = _3433;
                                _3447 = _3434;
                                _3448 = _3435;
                                _3449 = _3436;
                                _3450 = _3451;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3434;
                        frontier_phi_67_pred_1 = _3435;
                        frontier_phi_67_pred_2 = _3436;
                        frontier_phi_67_pred_3 = _3433;
                        frontier_phi_67_pred_4 = _3432;
                        frontier_phi_67_pred_5 = _3431;
                    }
                    _3099 = frontier_phi_67_pred;
                    _3101 = frontier_phi_67_pred_1;
                    _3103 = frontier_phi_67_pred_2;
                    _3097 = frontier_phi_67_pred_3;
                    _3095 = frontier_phi_67_pred_4;
                    _3093 = frontier_phi_67_pred_5;
                    uint _3238 = _3237 + 1u;
                    if (_3238 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3231 = _3093;
                        _3232 = _3095;
                        _3233 = _3097;
                        _3234 = _3099;
                        _3235 = _3101;
                        _3236 = _3103;
                        _3237 = _3238;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3101;
                frontier_phi_55_56_ladder_1 = _3103;
                frontier_phi_55_56_ladder_2 = _3099;
                frontier_phi_55_56_ladder_3 = _3097;
                frontier_phi_55_56_ladder_4 = _3095;
                frontier_phi_55_56_ladder_5 = _3093;
            }
            else
            {
                frontier_phi_55_56_ladder = _2987;
                frontier_phi_55_56_ladder_1 = _2989;
                frontier_phi_55_56_ladder_2 = _2985;
                frontier_phi_55_56_ladder_3 = _2983;
                frontier_phi_55_56_ladder_4 = _2981;
                frontier_phi_55_56_ladder_5 = _2979;
            }
            _3092 = frontier_phi_55_56_ladder_5;
            _3094 = frontier_phi_55_56_ladder_4;
            _3096 = frontier_phi_55_56_ladder_3;
            _3098 = frontier_phi_55_56_ladder_2;
            _3100 = frontier_phi_55_56_ladder;
            _3102 = frontier_phi_55_56_ladder_1;
        }
        float _3107 = isnan(1.0) ? _1134 : (isnan(_1134) ? 1.0 : min(_1134, 1.0));
        _2891 = (_3107 * _3098) + _2324;
        _2893 = (_3107 * _3100) + _2326;
        _2895 = (_3107 * _3102) + _2328;
        _2897 = ((_3092 * _1118) * _3107) + _2672;
        _2899 = ((_3094 * _1120) * _3107) + _2674;
        _2901 = ((_3096 * _1121) * _3107) + _2676;
    }
    else
    {
        _2891 = _2324;
        _2893 = _2326;
        _2895 = _2328;
        _2897 = _2672;
        _2899 = _2674;
        _2901 = _2676;
    }
    float _4853 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
    float _4864 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
    float _4875 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
    uint _2921 = _289 + 6u;
    float _2929 = _1056 / cbSceneParam._m0[86u].x;
    float _2930 = _1057 / cbSceneParam._m0[86u].y;
    vec4 _2944 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2929, _2930, (log2((isnan(cbSceneParam._m0[77u].w) ? _991 : (isnan(_991) ? cbSceneParam._m0[77u].w : min(_991, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2946 = _2944.x;
    float _2947 = _2944.y;
    float _2948 = _2944.z;
    float _2949 = _2944.w;
    float _3042;
    float _3044;
    float _3046;
    float _3048;
    if (_991 > cbSceneParam._m0[78u].w)
    {
        float _3004 = isnan(_991) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _991 : min(cbSceneParam._m0[80u].w, _991));
        float _3005 = _3004 / _991;
        float _3016 = _3005 * _1041;
        float _3017 = _1042 * _3005;
        float _3018 = (-0.0) - _3017;
        float _3020 = _3005 * _1043;
        float _3022 = (cbSceneParam._m0[77u].w * _3018) / _3004;
        float _3023 = _3022 + cbSceneParam._m0[79u].w;
        float _3024 = cbSceneParam._m0[79u].w - _3017;
        float _3030 = sqrt(((_3016 * _3016) + (_3017 * _3017)) + (_3020 * _3020));
        float _3033 = (1.0 - (cbSceneParam._m0[77u].w / _3004)) * _3030;
        float _3038 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3040 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3193;
        if (abs((_3018 - _3022) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3193 = ((((_3023 > 0.0) ? exp2(_3038 * _3023) : (2.0 - exp2(_3040 * _3023))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3033;
        }
        else
        {
            float _3153 = 1.0 / cbSceneParam._m0[80u].x;
            float _3154 = isnan(_3024) ? _3023 : (isnan(_3023) ? _3024 : max(_3023, _3024));
            float _3155 = isnan(_3024) ? _3023 : (isnan(_3023) ? _3024 : min(_3023, _3024));
            float _3164 = isnan(0.0) ? _3154 : (isnan(_3154) ? 0.0 : min(_3154, 0.0));
            float _3165 = isnan(0.0) ? _3155 : (isnan(_3155) ? 0.0 : min(_3155, 0.0));
            _3193 = ((abs(_3030 / _3018) * cbSceneParam._m0[80u].y) * ((((_3164 - _3165) * 2.0) - ((exp2(_3038 * (isnan(0.0) ? _3154 : (isnan(_3154) ? 0.0 : max(_3154, 0.0)))) - exp2(_3038 * (isnan(0.0) ? _3155 : (isnan(_3155) ? 0.0 : max(_3155, 0.0))))) * _3153)) - ((exp2(_3040 * _3164) - exp2(_3040 * _3165)) * _3153))) + (_3033 * cbSceneParam._m0[80u].z);
        }
        vec4 _3195 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2929, _2930, 1.0), 0.0);
        float _3204 = exp2((_3193 * (-1.44269502162933349609375)) * (1.0 - _3195.w));
        float _3205 = log2(_3204);
        float _3221 = log2(_2949);
        _3042 = (exp2(_3221 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3205 * cbSceneParam._m0[78u].x)) * _3195.x) / cbSceneParam._m0[78u].x)) + _2946;
        _3044 = (exp2(_3221 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3205 * cbSceneParam._m0[78u].y)) * _3195.y) / cbSceneParam._m0[78u].y)) + _2947;
        _3046 = (exp2(_3221 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3205 * cbSceneParam._m0[78u].z)) * _3195.z) / cbSceneParam._m0[78u].z)) + _2948;
        _3048 = _3204 * _2949;
    }
    else
    {
        _3042 = _2946;
        _3044 = _2947;
        _3046 = _2948;
        _3048 = _2949;
    }
    float _3060 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3061 = _3060 == 3.0;
    float _3062 = log2(_3048);
    float _3069 = exp2(_3062 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4853 : (isnan(_4853) ? 1.0 : min(_4853, 1.0))) * (_2891 + ((isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0))) * _1134))) + ((_2897 + ((isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0))) * _1941)) * cbPerFrame._m0[3u].x));
    float _3070 = exp2(_3062 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4864 : (isnan(_4864) ? 1.0 : min(_4864, 1.0))) * (_2893 + ((isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0))) * _1134))) + ((_2899 + ((isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0))) * _1941)) * cbPerFrame._m0[3u].x));
    float _3071 = exp2(_3062 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4875 : (isnan(_4875) ? 1.0 : min(_4875, 1.0))) * (_2895 + ((isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0))) * _1134))) + ((_2901 + ((isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0))) * _1941)) * cbPerFrame._m0[3u].x));
    float _3080 = (_3060 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3080 * (_3061 ? _3069 : (_3069 + (cbSceneParam._m0[72u].w * _3042)));
    SV_Target.y = _3080 * (_3061 ? _3070 : (_3070 + (cbSceneParam._m0[72u].w * _3044)));
    SV_Target.z = _3080 * (_3061 ? _3071 : (_3071 + (cbSceneParam._m0[72u].w * _3046)));
    SV_Target.w = cbInstanceData._m0[_2921].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2921].w;
}


