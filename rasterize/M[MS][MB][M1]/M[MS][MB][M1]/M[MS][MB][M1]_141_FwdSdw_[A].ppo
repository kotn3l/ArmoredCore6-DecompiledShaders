#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_MB_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1335;
float _3997;
float _3998;
float _3999;
float _4000;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _225 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _226 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _227 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _233 = inversesqrt(dot(vec3(_225, _226, _227), vec3(_225, _226, _227)));
    float _234 = _233 * _225;
    float _235 = _233 * _226;
    float _236 = _233 * _227;
    float _240 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _241 = _240 * NORMAL.x;
    float _242 = _240 * NORMAL.y;
    float _243 = _240 * NORMAL.z;
    float _247 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _248 = _247 * TANGENT.x;
    float _249 = _247 * TANGENT.y;
    float _250 = _247 * TANGENT.z;
    float _261 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _263 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _264 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4009 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    float _4020 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    float _4031 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    uint _274 = uint(roundEven(NORMAL.w)) * 13u;
    uint _279 = _274 + 1u;
    uint _283 = _274 + 2u;
    float _292 = sqrt(((cbInstanceData._m0[_279].x * cbInstanceData._m0[_279].x) + (cbInstanceData._m0[_274].x * cbInstanceData._m0[_274].x)) + (cbInstanceData._m0[_283].x * cbInstanceData._m0[_283].x));
    float _293 = _292 * TEXCOORD.z;
    float _294 = _292 * TEXCOORD.w;
    vec4 _307 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _293) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _294) + cbTextureTilingScale._m0[13u].w));
    vec4 _331 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _336 = _331.x * cbMtdParam._m0[11u].x;
    float _337 = _331.y * cbMtdParam._m0[11u].y;
    float _338 = _331.z * cbMtdParam._m0[11u].z;
    vec4 _357 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _293) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _294) + cbTextureTilingScale._m0[5u].w));
    vec4 _393 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _395 = _393.x;
    float _407 = dot(vec4(_395, _393.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _424 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_395 - _407) * cbMtdParam._m0[24u].y) + _407) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4042 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _425 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
    float _432 = (_425 * ((_357.x * cbMtdParam._m0[12u].x) - _336)) + _336;
    float _433 = (_425 * ((_357.y * cbMtdParam._m0[12u].y) - _337)) + _337;
    float _434 = (_425 * ((_357.z * cbMtdParam._m0[12u].z) - _338)) + _338;
    float _438 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _307.x) * _432;
    float _441 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _307.y) * _433;
    float _444 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _307.z) * _434;
    float _451 = ((_432 - _438) * (isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0)))) + _438;
    float _452 = ((_433 - _441) * (isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0)))) + _441;
    float _453 = ((_434 - _444) * (isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0)))) + _444;
    vec4 _472 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _293) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _294) + cbTextureTilingScale._m0[14u].w));
    vec4 _492 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _293) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _294) + cbTextureTilingScale._m0[20u].w));
    vec4 _519 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _293) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _294) + cbTextureTilingScale._m0[4u].w));
    vec4 _536 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _538 = _536.x;
    float _539 = _536.y;
    float _540 = _536.z;
    float _549 = ((_519.z - _540) * _425) + _540;
    float _552 = ((((_519.x - _538) * _425) + _538) * 2.0) + (-1.0);
    float _553 = ((((_519.y - _539) * _425) + _539) * 2.0) + (-1.0);
    float _554 = dot(vec2(_552, _553), vec2(_552, _553));
    float _4053 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _559 = sqrt(1.0 - (isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0))));
    float _562 = _552 + ((((_492.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x);
    float _563 = _553 + ((((_492.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x);
    float _566 = fma(_559, _241, fma(_563, _248, _562 * _234));
    float _569 = fma(_559, _242, fma(_563, _249, _562 * _235));
    float _572 = fma(_559, _243, fma(_563, _250, _562 * _236));
    float _576 = inversesqrt(dot(vec3(_566, _569, _572), vec3(_566, _569, _572)));
    vec4 _592 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _618 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _293) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _294) + cbTextureTilingScale._m0[11u].w));
    float _620 = _618.x;
    float _621 = 1.0 - _620;
    float _627 = (cbMtdParam._m0[19u].x + dot(vec4(_576 * _566, _576 * _569, _576 * _572, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_620 - _621) * cbMtdParam._m0[24u].z) + _621) * cbMtdParam._m0[21u].z);
    float _4064 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _628 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
    float _635 = (_628 * ((_472.x * cbMtdParam._m0[18u].x) - _451)) + _451;
    float _636 = (_628 * ((_472.y * cbMtdParam._m0[18u].y) - _452)) + _452;
    float _637 = (_628 * ((_472.z * cbMtdParam._m0[18u].z) - _453)) + _453;
    vec4 _649 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _663 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _665 = _663.x;
    float _683 = ((texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _293) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _294) + cbTextureTilingScale._m0[9u].w)).x - _665) * _425) + _665;
    float _687 = ((_649.x - _683) * cbMtdParam._m0[19u].z) + _683;
    float _689 = _687 - (_687 * _628);
    float _694 = (((_492.z - _549) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _549;
    vec4 _707 = texture(sampler2D(M_MS_MB_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _293) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _294) + cbTextureTilingScale._m0[15u].w));
    float _714 = (_707.x * 2.0) + (-1.0);
    float _715 = (_707.y * 2.0) + (-1.0);
    float _716 = dot(vec2(_714, _715), vec2(_714, _715));
    float _4075 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
    float _724 = ((_707.z - _694) * _628) + _694;
    float _734 = ((sqrt(1.0 - (isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0)))) - _559) * _628) + _559;
    float _737 = (((_714 - _562) * _628) + _562) + (cbMtdParam._m0[21u].x * _562);
    float _738 = (((_715 - _563) * _628) + _563) + (cbMtdParam._m0[21u].x * _563);
    float _740 = cbMtdParam._m0[22u].x + _592.w;
    float _743 = fma(_734, _241, fma(_738, _248, _737 * _234));
    float _746 = fma(_734, _242, fma(_738, _249, _737 * _235));
    float _749 = fma(_734, _243, fma(_738, _250, _737 * _236));
    float _753 = inversesqrt(dot(vec3(_743, _746, _749), vec3(_743, _746, _749)));
    float _754 = _753 * _743;
    float _755 = _753 * _746;
    float _756 = _753 * _749;
    float _4086 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
    float _757 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
    float _4097 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _4108 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _4119 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _4130 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _4141 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _762 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
    float _776 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _817 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _827 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _817);
    float _828 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _817);
    float _829 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _817);
    float _833 = inversesqrt(dot(vec3(_827, _828, _829), vec3(_827, _828, _829)));
    float _834 = _827 * _833;
    float _835 = _828 * _833;
    float _836 = _829 * _833;
    vec4 _841 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _843 = _841.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1015 = sqrt(((_827 * _827) + (_828 * _828)) + (_829 * _829));
        float _1021 = (cbMatDynParam._m0[5u].x * _1015) + cbMatDynParam._m0[5u].y;
        float _4152 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1022 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
        float _1026 = (cbMatDynParam._m0[5u].z * _1015) + cbMatDynParam._m0[5u].w;
        float _4163 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0))) - _1022)) + _1022) < ((_843 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _854 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _855 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _873 = fma(_756, cbSceneParam._m0[5u].z, fma(_755, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _754));
    float _876 = fma(_756, cbSceneParam._m0[6u].z, fma(_755, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _754));
    float _879 = fma(_756, cbSceneParam._m0[7u].z, fma(_755, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _754));
    uint _892 = _274 + 9u;
    uint _893 = _892 + uint(cbMatDynParam._m0[0u].w);
    float _899 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0)))) * cbInstanceData._m0[_893].x;
    float _900 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0)))) * cbInstanceData._m0[_893].y;
    float _901 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0)))) * cbInstanceData._m0[_893].z;
    float _4174 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
    float _902 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
    float _4185 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
    float _903 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
    float _4196 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
    float _904 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
    float _905 = 1.0 - _762;
    float _906 = _902 * _905;
    float _907 = _903 * _905;
    float _908 = _904 * _905;
    float _913 = (_902 + (-0.039999999105930328369140625)) * _762;
    float _914 = (_903 + (-0.039999999105930328369140625)) * _762;
    float _915 = (_904 + (-0.039999999105930328369140625)) * _762;
    float _916 = _913 + 0.039999999105930328369140625;
    float _918 = _914 + 0.039999999105930328369140625;
    float _919 = _915 + 0.039999999105930328369140625;
    vec4 _928 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _854, cbSceneParam._m0[86u].y * _855));
    float _932 = ((isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0))) * TEXCOORD_5.w) * _928.x;
    float _933 = dot(vec3(_754, _755, _756), vec3(_834, _835, _836));
    float _936 = _933 * 2.0;
    float _940 = (_936 * _754) - _834;
    float _941 = (_936 * _755) - _835;
    float _942 = (_936 * _756) - _836;
    float _946 = abs(dot(vec3(_834, _835, _836), vec3(_754, _755, _756)));
    float _4207 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
    float _948 = sqrt(_757);
    float _961 = exp2((_948 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_948 * 3.0));
    float _967 = (1.0 - _961) * ((_948 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _968 = _961 * _948;
    float _996 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1000 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1004 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1334;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1059 = fma(_1004, cbModelParam._m0[26u].z, fma(_1000, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _996));
        float _1063 = fma(_1004, cbModelParam._m0[27u].z, fma(_1000, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _996));
        float _1067 = fma(_1004, cbModelParam._m0[28u].z, fma(_1000, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _996));
        float _1092 = _996 + _754;
        float _1093 = _1000 + _755;
        float _1094 = _1004 + _756;
        float _1104 = fma(_1094, cbModelParam._m0[26u].z, fma(_1093, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1092)) - _1059;
        float _1105 = fma(_1094, cbModelParam._m0[27u].z, fma(_1093, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1092)) - _1063;
        float _1106 = fma(_1094, cbModelParam._m0[28u].z, fma(_1093, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1092)) - _1067;
        float _1110 = inversesqrt(dot(vec3(_1104, _1105, _1106), vec3(_1104, _1105, _1106)));
        float _1123 = ((_1110 * _1104) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1059 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1124 = ((_1110 * _1105) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1063 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1125 = ((_1110 * _1106) / cbModelParam._m0[34u].z) + ((((((_1067 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1128 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1123, _1124, _1125), 0.0);
        vec4 _1135 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1123, _1124, _1125), 0.0);
        vec4 _1142 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1123, _1124, _1125), 0.0);
        vec4 _1149 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1123, _1124, _1125), 0.0);
        float _1162 = exp2((_1128.w + (-0.5)) * 20.0) * 2.0;
        float _1163 = _1162 * (_1128.x + (-0.5));
        float _1164 = _1162 * (_1128.y + (-0.5));
        float _1165 = _1162 * (_1128.z + (-0.5));
        float _1172 = exp2((_1135.w + (-0.5)) * 20.0) * 2.0;
        float _1173 = _1172 * (_1135.x + (-0.5));
        float _1174 = _1172 * (_1135.y + (-0.5));
        float _1175 = _1172 * (_1135.z + (-0.5));
        float _1182 = exp2((_1142.w + (-0.5)) * 20.0) * 2.0;
        float _1183 = _1182 * (_1142.x + (-0.5));
        float _1184 = _1182 * (_1142.y + (-0.5));
        float _1185 = _1182 * (_1142.z + (-0.5));
        float _1192 = exp2((_1149.w + (-0.5)) * 20.0) * 2.0;
        float _1193 = _1192 * (_1149.x + (-0.5));
        float _1194 = _1192 * (_1149.y + (-0.5));
        float _1195 = _1192 * (_1149.z + (-0.5));
        float _1196 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1197 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1198 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1199 = _1163 * 0.5;
        float _1200 = _1173 * 0.5;
        float _1201 = _1183 * 0.5;
        float _1202 = dot(vec3(_1199, _1200, _1201), vec3(_1199, _1200, _1201));
        float _1207 = (_1202 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1202);
        float _1216 = (dot(vec3(_754, _755, _756), vec3(_1207 * _1199, _1207 * _1200, _1207 * _1201)) + 1.0) * 0.5;
        float _4233 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1226 = sqrt(((_1200 * _1200) + (_1199 * _1199)) + (_1201 * _1201)) / (_1196 + 9.9999997473787516355514526367188e-06);
        float _4244 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1227 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
        float _1228 = _1227 * 2.0;
        float _1232 = (1.0 - _1227) / (_1227 + 1.0);
        float _4255 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1233 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
        float _1242 = ((((1.0 - _1233) * (_1228 + 2.0)) * exp2(log2(isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0))) * (_1228 + 1.0))) + _1233) * _1196;
        float _1243 = _1164 * 0.5;
        float _1244 = _1174 * 0.5;
        float _1245 = _1184 * 0.5;
        float _1246 = dot(vec3(_1243, _1244, _1245), vec3(_1243, _1244, _1245));
        float _1251 = (_1246 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1246);
        float _1259 = (dot(vec3(_754, _755, _756), vec3(_1251 * _1243, _1251 * _1244, _1251 * _1245)) + 1.0) * 0.5;
        float _4266 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1268 = sqrt(((_1244 * _1244) + (_1243 * _1243)) + (_1245 * _1245)) / (_1197 + 9.9999997473787516355514526367188e-06);
        float _4277 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1269 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
        float _1270 = _1269 * 2.0;
        float _1274 = (1.0 - _1269) / (_1269 + 1.0);
        float _4288 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1275 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
        float _1284 = ((((1.0 - _1275) * (_1270 + 2.0)) * exp2(log2(isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0))) * (_1270 + 1.0))) + _1275) * _1197;
        float _1285 = _1165 * 0.5;
        float _1286 = _1175 * 0.5;
        float _1287 = _1185 * 0.5;
        float _1288 = dot(vec3(_1285, _1286, _1287), vec3(_1285, _1286, _1287));
        float _1293 = (_1288 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1288);
        float _1301 = (dot(vec3(_754, _755, _756), vec3(_1293 * _1285, _1293 * _1286, _1293 * _1287)) + 1.0) * 0.5;
        float _4299 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1310 = sqrt(((_1286 * _1286) + (_1285 * _1285)) + (_1287 * _1287)) / (_1198 + 9.9999997473787516355514526367188e-06);
        float _4310 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1311 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
        float _1312 = _1311 * 2.0;
        float _1316 = (1.0 - _1311) / (_1311 + 1.0);
        float _4321 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1317 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
        float _1326 = ((((1.0 - _1317) * (_1312 + 2.0)) * exp2(log2(isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0))) * (_1312 + 1.0))) + _1317) * _1198;
        _1334 = _1165;
        _1336 = _1164;
        _1337 = _1163;
        _1338 = _1175;
        _1339 = _1174;
        _1340 = _1173;
        _1341 = _1185;
        _1342 = _1184;
        _1343 = _1183;
        _1344 = _1198;
        _1345 = _1197;
        _1346 = _1196;
        _1347 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0)));
        _1348 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0)));
        _1349 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0)));
    }
    else
    {
        _1334 = _1335;
        _1336 = _1335;
        _1337 = _1335;
        _1338 = _1335;
        _1339 = _1335;
        _1340 = _1335;
        _1341 = _1335;
        _1342 = _1335;
        _1343 = _1335;
        _1344 = _1335;
        _1345 = _1335;
        _1346 = _1335;
        _1347 = 0.0;
        _1348 = 0.0;
        _1349 = 0.0;
    }
    float _1646;
    float _1647;
    float _1648;
    float _1649;
    float _1650;
    float _1651;
    float _1652;
    float _1653;
    float _1654;
    float _1655;
    float _1656;
    float _1657;
    float _1658;
    float _1659;
    float _1660;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1377 = fma(_1004, cbModelParam._m0[30u].z, fma(_1000, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _996));
        float _1381 = fma(_1004, cbModelParam._m0[31u].z, fma(_1000, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _996));
        float _1385 = fma(_1004, cbModelParam._m0[32u].z, fma(_1000, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _996));
        float _1408 = _996 + _754;
        float _1409 = _1000 + _755;
        float _1410 = _1004 + _756;
        float _1420 = fma(_1410, cbModelParam._m0[30u].z, fma(_1409, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1408)) - _1377;
        float _1421 = fma(_1410, cbModelParam._m0[31u].z, fma(_1409, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1408)) - _1381;
        float _1422 = fma(_1410, cbModelParam._m0[32u].z, fma(_1409, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1408)) - _1385;
        float _1426 = inversesqrt(dot(vec3(_1420, _1421, _1422), vec3(_1420, _1421, _1422)));
        float _1439 = ((_1426 * _1420) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1377 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1440 = ((_1426 * _1421) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1381 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1441 = ((_1426 * _1422) / cbModelParam._m0[35u].z) + ((((((_1385 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1443 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1439, _1440, _1441), 0.0);
        vec4 _1450 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1439, _1440, _1441), 0.0);
        vec4 _1457 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1439, _1440, _1441), 0.0);
        vec4 _1464 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1439, _1440, _1441), 0.0);
        float _1476 = exp2((_1443.w + (-0.5)) * 20.0) * 2.0;
        float _1477 = _1476 * (_1443.x + (-0.5));
        float _1478 = _1476 * (_1443.y + (-0.5));
        float _1479 = _1476 * (_1443.z + (-0.5));
        float _1486 = exp2((_1450.w + (-0.5)) * 20.0) * 2.0;
        float _1487 = _1486 * (_1450.x + (-0.5));
        float _1488 = _1486 * (_1450.y + (-0.5));
        float _1489 = _1486 * (_1450.z + (-0.5));
        float _1496 = exp2((_1457.w + (-0.5)) * 20.0) * 2.0;
        float _1497 = _1496 * (_1457.x + (-0.5));
        float _1498 = _1496 * (_1457.y + (-0.5));
        float _1499 = _1496 * (_1457.z + (-0.5));
        float _1506 = exp2((_1464.w + (-0.5)) * 20.0) * 2.0;
        float _1507 = _1506 * (_1464.x + (-0.5));
        float _1508 = _1506 * (_1464.y + (-0.5));
        float _1509 = _1506 * (_1464.z + (-0.5));
        float _1510 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1511 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1512 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1513 = _1477 * 0.5;
        float _1514 = _1487 * 0.5;
        float _1515 = _1497 * 0.5;
        float _1516 = dot(vec3(_1513, _1514, _1515), vec3(_1513, _1514, _1515));
        float _1521 = (_1516 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1516);
        float _1529 = (dot(vec3(_754, _755, _756), vec3(_1521 * _1513, _1521 * _1514, _1521 * _1515)) + 1.0) * 0.5;
        float _4362 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
        float _1538 = sqrt(((_1514 * _1514) + (_1513 * _1513)) + (_1515 * _1515)) / (_1510 + 9.9999997473787516355514526367188e-06);
        float _4373 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
        float _1539 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
        float _1540 = _1539 * 2.0;
        float _1544 = (1.0 - _1539) / (_1539 + 1.0);
        float _4384 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1545 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
        float _1554 = ((((1.0 - _1545) * (_1540 + 2.0)) * exp2(log2(isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0))) * (_1540 + 1.0))) + _1545) * _1510;
        float _1555 = _1478 * 0.5;
        float _1556 = _1488 * 0.5;
        float _1557 = _1498 * 0.5;
        float _1558 = dot(vec3(_1555, _1556, _1557), vec3(_1555, _1556, _1557));
        float _1563 = (_1558 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1558);
        float _1571 = (dot(vec3(_754, _755, _756), vec3(_1563 * _1555, _1563 * _1556, _1563 * _1557)) + 1.0) * 0.5;
        float _4395 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
        float _1580 = sqrt(((_1556 * _1556) + (_1555 * _1555)) + (_1557 * _1557)) / (_1511 + 9.9999997473787516355514526367188e-06);
        float _4406 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1581 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
        float _1582 = _1581 * 2.0;
        float _1586 = (1.0 - _1581) / (_1581 + 1.0);
        float _4417 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
        float _1587 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
        float _1596 = ((((1.0 - _1587) * (_1582 + 2.0)) * exp2(log2(isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0))) * (_1582 + 1.0))) + _1587) * _1511;
        float _1597 = _1479 * 0.5;
        float _1598 = _1489 * 0.5;
        float _1599 = _1499 * 0.5;
        float _1600 = dot(vec3(_1597, _1598, _1599), vec3(_1597, _1598, _1599));
        float _1605 = (_1600 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1600);
        float _1613 = (dot(vec3(_754, _755, _756), vec3(_1605 * _1597, _1605 * _1598, _1605 * _1599)) + 1.0) * 0.5;
        float _4428 = isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0));
        float _1622 = sqrt(((_1598 * _1598) + (_1597 * _1597)) + (_1599 * _1599)) / (_1512 + 9.9999997473787516355514526367188e-06);
        float _4439 = isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0));
        float _1623 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
        float _1624 = _1623 * 2.0;
        float _1628 = (1.0 - _1623) / (_1623 + 1.0);
        float _4450 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
        float _1629 = isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0));
        float _1638 = ((((1.0 - _1629) * (_1624 + 2.0)) * exp2(log2(isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0))) * (_1624 + 1.0))) + _1629) * _1512;
        _1646 = _1479;
        _1647 = _1478;
        _1648 = _1477;
        _1649 = _1489;
        _1650 = _1488;
        _1651 = _1487;
        _1652 = _1499;
        _1653 = _1498;
        _1654 = _1497;
        _1655 = _1512;
        _1656 = _1511;
        _1657 = _1510;
        _1658 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0)));
        _1659 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0)));
        _1660 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0)));
    }
    else
    {
        _1646 = _1335;
        _1647 = _1335;
        _1648 = _1335;
        _1649 = _1335;
        _1650 = _1335;
        _1651 = _1335;
        _1652 = _1335;
        _1653 = _1335;
        _1654 = _1335;
        _1655 = _1335;
        _1656 = _1335;
        _1657 = _1335;
        _1658 = 0.0;
        _1659 = 0.0;
        _1660 = 0.0;
    }
    float _1670 = (cbModelParam._m0[1u].x * (_1658 - _1347)) + _1347;
    float _1671 = (cbModelParam._m0[1u].x * (_1659 - _1348)) + _1348;
    float _1672 = (cbModelParam._m0[1u].x * (_1660 - _1349)) + _1349;
    float _1693 = fma(_1672, cbSceneParam._m0[89u].z, fma(_1671, cbSceneParam._m0[89u].y, _1670 * cbSceneParam._m0[89u].x));
    float _1696 = fma(_1672, cbSceneParam._m0[90u].z, fma(_1671, cbSceneParam._m0[90u].y, _1670 * cbSceneParam._m0[90u].x));
    float _1699 = fma(_1672, cbSceneParam._m0[91u].z, fma(_1671, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1670));
    float _1714 = _940 * 0.5;
    float _1715 = _941 * 0.5;
    float _1716 = _942 * 0.5;
    float _1717 = dot(vec4(_1714, _1715, _1716, 1.0), vec4(_1648, _1651, _1654, _1657));
    float _1720 = dot(vec4(_1714, _1715, _1716, 1.0), vec4(_1647, _1650, _1653, _1656));
    float _1723 = dot(vec4(_1714, _1715, _1716, 1.0), vec4(_1646, _1649, _1652, _1655));
    float _1757;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1730 = dot(vec4(_1714, _1715, _1716, 1.0), vec4(_1334, _1338, _1341, _1344));
        float _1734 = dot(vec4(_1714, _1715, _1716, 1.0), vec4(_1336, _1339, _1342, _1345));
        float _1738 = dot(vec4(_1714, _1715, _1716, 1.0), vec4(_1337, _1340, _1343, _1346));
        float _1745 = dot(vec4(cbModelParam._m0[39u]), vec4(_1714, _1715, _1716, 1.0));
        _1757 = dot(vec3(isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0)), isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0)), isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1745) ? 0.0 : (isnan(0.0) ? _1745 : max(0.0, _1745))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1757 = 1.0;
    }
    float _1768;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1759 = dot(vec4(cbModelParam._m0[40u]), vec4(_1714, _1715, _1716, 1.0));
        _1768 = dot(vec3(isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0)), isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0)), isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1759) ? 0.0 : (isnan(0.0) ? _1759 : max(0.0, _1759))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1768 = 1.0;
    }
    float _1772 = (_1768 * cbModelParam._m0[1u].x) + (_1757 * (1.0 - cbModelParam._m0[1u].x));
    float _1782 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _757);
    float _1783 = isnan(_1782) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1782 : min(cbModelParam._m0[25u].z, _1782));
    float _1863;
    float _1865;
    float _1867;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1830 = fma(_1004, cbModelParam._m0[13u].z, fma(_1000, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _996)) + cbModelParam._m0[13u].w;
        float _1834 = fma(_1004, cbModelParam._m0[14u].z, fma(_1000, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _996)) + cbModelParam._m0[14u].w;
        float _1838 = fma(_1004, cbModelParam._m0[15u].z, fma(_1000, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _996)) + cbModelParam._m0[15u].w;
        float _1841 = fma(_942, cbModelParam._m0[13u].z, fma(_941, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _940));
        float _1844 = fma(_942, cbModelParam._m0[14u].z, fma(_941, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _940));
        float _1847 = fma(_942, cbModelParam._m0[15u].z, fma(_941, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _940));
        float _1875;
        if (_1841 > 0.0)
        {
            _1875 = abs((1.0 - _1830) / _1841);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1841 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1830 + 1.0) / _1841);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1875 = frontier_phi_17_15_ladder;
        }
        float _2046;
        if (_1844 > 0.0)
        {
            _2046 = abs((1.0 - _1834) / _1844);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1844 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1834 + 1.0) / _1844);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2046 = frontier_phi_26_22_ladder;
        }
        float _2341;
        if (_1847 > 0.0)
        {
            _2341 = abs((1.0 - _1838) / _1847);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1847 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1838 + 1.0) / _1847);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2341 = frontier_phi_38_33_ladder;
        }
        float _2343 = isnan(_2046) ? _1875 : (isnan(_1875) ? _2046 : min(_1875, _2046));
        float _2344 = isnan(_2341) ? _2343 : (isnan(_2343) ? _2341 : min(_2343, _2341));
        float _2348 = (_2344 * _1841) + _1830;
        float _2349 = (_2344 * _1844) + _1834;
        float _2350 = (_2344 * _1847) + _1838;
        float _2351 = _2344 * 9.9999997473787516355514526367188e-05;
        float _2353 = (-1.0) - _2351;
        float _2355 = _2351 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2350 > _2355) || ((_2350 < _2353) || ((_2349 > _2355) || ((_2349 < _2353) || ((_2348 < _2353) || (_2348 > _2355))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2495 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2350, cbModelParam._m0[9u].z, fma(_2349, cbModelParam._m0[9u].y, _2348 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2350, cbModelParam._m0[10u].z, fma(_2349, cbModelParam._m0[10u].y, _2348 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2350, cbModelParam._m0[11u].z, fma(_2349, cbModelParam._m0[11u].y, _2348 * cbModelParam._m0[11u].x))), _1783);
            frontier_phi_16_38_ladder = _2495.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2495.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2495.x * cbModelParam._m0[1u].y;
        }
        _1863 = frontier_phi_16_38_ladder_2;
        _1865 = frontier_phi_16_38_ladder_1;
        _1867 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1851 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_940, _941, _942), _1783);
        _1863 = _1851.x * cbModelParam._m0[1u].y;
        _1865 = _1851.y * cbModelParam._m0[1u].y;
        _1867 = _1851.z * cbModelParam._m0[1u].y;
    }
    float _1871 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _757);
    float _1872 = isnan(_1871) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1871 : min(cbModelParam._m0[25u].w, _1871));
    float _1961;
    float _1963;
    float _1965;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1925 = fma(_1004, cbModelParam._m0[21u].z, fma(_1000, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _996)) + cbModelParam._m0[21u].w;
        float _1929 = fma(_1004, cbModelParam._m0[22u].z, fma(_1000, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _996)) + cbModelParam._m0[22u].w;
        float _1933 = fma(_1004, cbModelParam._m0[23u].z, fma(_1000, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _996)) + cbModelParam._m0[23u].w;
        float _1936 = fma(_942, cbModelParam._m0[21u].z, fma(_941, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _940));
        float _1939 = fma(_942, cbModelParam._m0[22u].z, fma(_941, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _940));
        float _1942 = fma(_942, cbModelParam._m0[23u].z, fma(_941, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _940));
        float _2051;
        if (_1936 > 0.0)
        {
            _2051 = abs((1.0 - _1925) / _1936);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1936 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1925 + 1.0) / _1936);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2051 = frontier_phi_28_24_ladder;
        }
        float _2368;
        if (_1939 > 0.0)
        {
            _2368 = abs((1.0 - _1929) / _1939);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1939 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1929 + 1.0) / _1939);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2368 = frontier_phi_40_35_ladder;
        }
        float _2706;
        if (_1942 > 0.0)
        {
            _2706 = abs((1.0 - _1933) / _1942);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1942 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1933 + 1.0) / _1942);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2706 = frontier_phi_50_47_ladder;
        }
        float _2708 = isnan(_2368) ? _2051 : (isnan(_2051) ? _2368 : min(_2051, _2368));
        float _2709 = isnan(_2706) ? _2708 : (isnan(_2708) ? _2706 : min(_2708, _2706));
        float _2713 = (_2709 * _1936) + _1925;
        float _2714 = (_2709 * _1939) + _1929;
        float _2715 = (_2709 * _1942) + _1933;
        float _2716 = _2709 * 9.9999997473787516355514526367188e-05;
        float _2717 = (-1.0) - _2716;
        float _2719 = _2716 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2715 > _2719) || ((_2715 < _2717) || ((_2714 > _2719) || ((_2714 < _2717) || ((_2713 < _2717) || (_2713 > _2719))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2837 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2715, cbModelParam._m0[17u].z, fma(_2714, cbModelParam._m0[17u].y, _2713 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2715, cbModelParam._m0[18u].z, fma(_2714, cbModelParam._m0[18u].y, _2713 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2715, cbModelParam._m0[19u].z, fma(_2714, cbModelParam._m0[19u].y, _2713 * cbModelParam._m0[19u].x))), _1872);
            frontier_phi_25_50_ladder = _2837.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2837.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2837.x * cbModelParam._m0[1u].z;
        }
        _1961 = frontier_phi_25_50_ladder_2;
        _1963 = frontier_phi_25_50_ladder_1;
        _1965 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1945 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_940, _941, _942), _1872);
        _1961 = _1945.x * cbModelParam._m0[1u].z;
        _1963 = _1945.y * cbModelParam._m0[1u].z;
        _1965 = _1945.z * cbModelParam._m0[1u].z;
    }
    float _1978 = (((_967 * _916) + _968) * _932) * ((cbModelParam._m0[1u].w * (_1961 - _1863)) + _1863);
    float _1980 = (((_967 * _918) + _968) * _932) * ((cbModelParam._m0[1u].w * (_1963 - _1865)) + _1865);
    float _1982 = (((_967 * _919) + _968) * _932) * ((cbModelParam._m0[1u].w * (_1965 - _1867)) + _1867);
    float _1985 = fma(_1982, cbSceneParam._m0[89u].z, fma(_1980, cbSceneParam._m0[89u].y, _1978 * cbSceneParam._m0[89u].x));
    float _1988 = fma(_1982, cbSceneParam._m0[90u].z, fma(_1980, cbSceneParam._m0[90u].y, _1978 * cbSceneParam._m0[90u].x));
    float _1991 = fma(_1982, cbSceneParam._m0[91u].z, fma(_1980, cbSceneParam._m0[91u].y, _1978 * cbSceneParam._m0[91u].x));
    float _2025 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2029 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2033 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2037 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2038 = _2025 / _2037;
    float _2039 = _2029 / _2037;
    float _2040 = _2033 / _2037;
    float _2187;
    float _2188;
    float _2189;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2067 = ((uint(_2040 > cbSceneParam._m0[59u].y) + uint(_2040 > cbSceneParam._m0[59u].x)) + uint(_2040 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2068 = _2067 + 43u;
        uint _2076 = _2067 + 44u;
        uint _2084 = _2067 + 45u;
        uint _2092 = _2067 + 46u;
        float _2103 = fma(_2037, cbSceneParam._m0[_2068].w, fma(_2033, cbSceneParam._m0[_2068].z, fma(_2029, cbSceneParam._m0[_2068].y, _2025 * cbSceneParam._m0[_2068].x)));
        float _2107 = fma(_2037, cbSceneParam._m0[_2076].w, fma(_2033, cbSceneParam._m0[_2076].z, fma(_2029, cbSceneParam._m0[_2076].y, _2025 * cbSceneParam._m0[_2076].x)));
        float _2115 = fma(_2037, cbSceneParam._m0[_2092].w, fma(_2033, cbSceneParam._m0[_2092].z, fma(_2029, cbSceneParam._m0[_2092].y, _2025 * cbSceneParam._m0[_2092].x)));
        float _2120 = cbSceneParam._m0[33u].z * _2115;
        float _2122 = cbSceneParam._m0[33u].w * _2115;
        float _2125 = fma(_2037, cbSceneParam._m0[_2084].w, fma(_2033, cbSceneParam._m0[_2084].z, fma(_2029, cbSceneParam._m0[_2084].y, _2025 * cbSceneParam._m0[_2084].x))) / _2115;
        float _2173 = (cbSceneParam._m0[33u].x - sqrt(((_2039 * _2039) + (_2038 * _2038)) + (_2040 * _2040))) * cbSceneParam._m0[33u].y;
        float _4576 = isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0));
        float _2180 = (isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2120 + _2103) / _2115, (_2122 + _2107) / _2115), _2125), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2122 + _2103) / _2115, (_2107 - _2120) / _2115), _2125), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2103 - _2120) / _2115, (_2107 - _2122) / _2115), _2125), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2103 - _2122) / _2115, (_2120 + _2107) / _2115), _2125), 0.0)).x), vec4(0.25)));
        _2187 = 1.0 - (_2180 * cbSceneParam._m0[34u].x);
        _2188 = 1.0 - (_2180 * cbSceneParam._m0[34u].y);
        _2189 = 1.0 - (_2180 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2187 = 1.0;
        _2188 = 1.0;
        _2189 = 1.0;
    }
    float _2253;
    float _2255;
    float _2257;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2241 = fma(_2037, cbSceneParam._m0[63u].w, fma(_2033, cbSceneParam._m0[63u].z, fma(_2029, cbSceneParam._m0[63u].y, _2025 * cbSceneParam._m0[63u].x)));
        float _2242 = fma(_2037, cbSceneParam._m0[60u].w, fma(_2033, cbSceneParam._m0[60u].z, fma(_2029, cbSceneParam._m0[60u].y, _2025 * cbSceneParam._m0[60u].x))) / _2241;
        float _2243 = fma(_2037, cbSceneParam._m0[61u].w, fma(_2033, cbSceneParam._m0[61u].z, fma(_2029, cbSceneParam._m0[61u].y, _2025 * cbSceneParam._m0[61u].x))) / _2241;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2242 >= cbSceneParam._m0[64u].x) && (_2243 >= cbSceneParam._m0[64u].y)) && (_2242 <= cbSceneParam._m0[64u].z)) && (_2243 <= cbSceneParam._m0[64u].w))
        {
            float _2381 = fma(_2037, cbSceneParam._m0[62u].w, fma(_2033, cbSceneParam._m0[62u].z, fma(_2029, cbSceneParam._m0[62u].y, _2025 * cbSceneParam._m0[62u].x))) / _2241;
            float _2385 = isnan(cbSceneParam._m0[41u].w) ? _2381 : (isnan(_2381) ? cbSceneParam._m0[41u].w : max(_2381, cbSceneParam._m0[41u].w));
            float _2428 = (cbSceneParam._m0[33u].x - sqrt(((_2039 * _2039) + (_2038 * _2038)) + (_2040 * _2040))) * cbSceneParam._m0[33u].y;
            float _4592 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
            float _2435 = (isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2242, cbSceneParam._m0[33u].w + _2243), _2385), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2242, _2243 - cbSceneParam._m0[33u].z), _2385), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2242 - cbSceneParam._m0[33u].z, _2243 - cbSceneParam._m0[33u].w), _2385), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2242 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2243), _2385), 0.0)).x), vec4(0.25)));
            float _2439 = 1.0 - (_2435 * cbSceneParam._m0[34u].x);
            float _2440 = 1.0 - (_2435 * cbSceneParam._m0[34u].y);
            float _2441 = 1.0 - (_2435 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2441) ? _2189 : (isnan(_2189) ? _2441 : min(_2189, _2441));
            frontier_phi_37_36_ladder_1 = isnan(_2440) ? _2188 : (isnan(_2188) ? _2440 : min(_2188, _2440));
            frontier_phi_37_36_ladder_2 = isnan(_2439) ? _2187 : (isnan(_2187) ? _2439 : min(_2187, _2439));
        }
        else
        {
            frontier_phi_37_36_ladder = _2189;
            frontier_phi_37_36_ladder_1 = _2188;
            frontier_phi_37_36_ladder_2 = _2187;
        }
        _2253 = frontier_phi_37_36_ladder_2;
        _2255 = frontier_phi_37_36_ladder_1;
        _2257 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2253 = _2187;
        _2255 = _2188;
        _2257 = _2189;
    }
    uvec4 _2262 = floatBitsToUint(cbInstanceData._m0[_274 + 5u]);
    uint _2264 = _2262.x * 14u;
    uint _2265 = _2264 + 13u;
    float _2272 = _932 + (-1.0);
    float _2277 = (cbLight._m0[_2265].x * _2272) + 1.0;
    float _2278 = (cbLight._m0[_2265].y * _2272) + 1.0;
    float _2279 = (cbLight._m0[_2265].z * _2272) + 1.0;
    float _2280 = (cbLight._m0[_2265].w * _2272) + 1.0;
    uint _2281 = _2264 + 5u;
    float _2287 = isnan(1.0) ? _2278 : (isnan(_2278) ? 1.0 : min(_2278, 1.0));
    uint _2291 = _2264 + 4u;
    float _2300 = isnan(1.0) ? _2277 : (isnan(_2277) ? 1.0 : min(_2277, 1.0));
    uint _2304 = _2264 | 1u;
    float _2315 = dot(vec3(cbLight._m0[_2264].xyz), vec3(_754, _755, _756));
    float _2318 = dot(vec3(cbLight._m0[_2304].xyz), vec3(_754, _755, _756));
    float _4628 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
    float _4639 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
    float _2323 = (isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0))) * 0.3183098733425140380859375;
    float _2325 = (isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0))) * 0.3183098733425140380859375;
    float _2332 = ((cbLight._m0[_2281].x * _2287) * _2325) + (((cbLight._m0[_2291].x * _2253) * _2300) * _2323);
    float _2333 = ((_2287 * cbLight._m0[_2281].y) * _2325) + (((cbLight._m0[_2291].y * _2255) * _2300) * _2323);
    float _2334 = ((_2287 * cbLight._m0[_2281].z) * _2325) + (((cbLight._m0[_2291].z * _2257) * _2300) * _2323);
    uvec4 _2338 = floatBitsToUint(cbLight._m0[_2264 + 12u]);
    bool _2340 = _2338.x == 0u;
    float _2442;
    float _2444;
    float _2446;
    if (_2340)
    {
        _2442 = _2332;
        _2444 = _2333;
        _2446 = _2334;
    }
    else
    {
        uint _2450 = _2264 + 6u;
        float _2466 = (dot(vec3(cbLight._m0[_2264 + 2u].xyz), vec3(_754, _755, _756)) * 0.5) + 0.5;
        float _2467 = _2466 * _2466;
        float _4650 = isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0));
        float _2468 = isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0));
        float _2469 = isnan(1.0) ? _2279 : (isnan(_2279) ? 1.0 : min(_2279, 1.0));
        _2442 = (((cbLight._m0[_2450].x * 0.3183098733425140380859375) * _2468) * _2469) + _2332;
        _2444 = (((cbLight._m0[_2450].y * 0.3183098733425140380859375) * _2468) * _2469) + _2333;
        _2446 = (((cbLight._m0[_2450].z * 0.3183098733425140380859375) * _2468) * _2469) + _2334;
    }
    bool _2449 = _2338.y == 0u;
    float _2504;
    float _2506;
    float _2508;
    if (_2449)
    {
        _2504 = _2442;
        _2506 = _2444;
        _2508 = _2446;
    }
    else
    {
        uint _2677 = _2264 + 7u;
        float _2693 = (dot(vec3(cbLight._m0[_2264 + 3u].xyz), vec3(_754, _755, _756)) * 0.5) + 0.5;
        float _2694 = _2693 * _2693;
        float _4666 = isnan(0.0) ? _2694 : (isnan(_2694) ? 0.0 : max(_2694, 0.0));
        float _2695 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
        float _2696 = isnan(1.0) ? _2280 : (isnan(_2280) ? 1.0 : min(_2280, 1.0));
        _2504 = (((cbLight._m0[_2677].x * 0.3183098733425140380859375) * _2695) * _2696) + _2442;
        _2506 = (((cbLight._m0[_2677].y * 0.3183098733425140380859375) * _2695) * _2696) + _2444;
        _2508 = (((cbLight._m0[_2677].z * 0.3183098733425140380859375) * _2695) * _2696) + _2446;
    }
    uint _2511 = _2264 + 8u;
    float _2524 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2264].w)) * _757) * 0.949999988079071044921875);
    float _2525 = _2524 * _2524;
    float _2526 = cbLight._m0[_2264].x + _834;
    float _2527 = cbLight._m0[_2264].y + _835;
    float _2528 = cbLight._m0[_2264].z + _836;
    float _2532 = inversesqrt(dot(vec3(_2526, _2527, _2528), vec3(_2526, _2527, _2528)));
    float _2533 = _2532 * _2526;
    float _2534 = _2532 * _2527;
    float _2535 = _2532 * _2528;
    float _2536 = dot(vec3(_754, _755, _756), vec3(cbLight._m0[_2264].xyz));
    float _4682 = isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0));
    float _2539 = isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0));
    float _4693 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
    float _2540 = isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0));
    float _2541 = dot(vec3(_754, _755, _756), vec3(_2533, _2534, _2535));
    float _4704 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0));
    float _2544 = isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0));
    float _2545 = dot(vec3(cbLight._m0[_2264].xyz), vec3(_2533, _2534, _2535));
    float _4715 = isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0));
    float _2549 = _2525 * _2525;
    float _2553 = ((_2544 * _2544) * (_2549 + (-1.0))) + 1.0;
    float _2561 = exp2(log2(1.0 - (isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0)))) * 5.0);
    float _2562 = 0.959999978542327880859375 - _913;
    float _2564 = 0.959999978542327880859375 - _914;
    float _2565 = 0.959999978542327880859375 - _915;
    float _2572 = 1.0 - _2525;
    float _2583 = (0.5 / (((_2540 * ((_2539 * _2572) + _2525)) + 9.9999999392252902907785028219223e-09) + (((_2540 * _2572) + _2525) * _2539))) * _2539;
    float _4726 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0));
    float _2585 = (isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0))) * (_2549 / ((_2553 * _2553) * 3.141590118408203125));
    uint _2599 = _2264 + 9u;
    float _2610 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2304].w)) * _757) * 0.949999988079071044921875);
    float _2611 = _2610 * _2610;
    float _2612 = cbLight._m0[_2304].x + _834;
    float _2613 = cbLight._m0[_2304].y + _835;
    float _2614 = cbLight._m0[_2304].z + _836;
    float _2618 = inversesqrt(dot(vec3(_2612, _2613, _2614), vec3(_2612, _2613, _2614)));
    float _2619 = _2618 * _2612;
    float _2620 = _2618 * _2613;
    float _2621 = _2618 * _2614;
    float _2622 = dot(vec3(_754, _755, _756), vec3(cbLight._m0[_2304].xyz));
    float _4737 = isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : max(_2622, 0.0));
    float _2625 = isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0));
    float _2626 = dot(vec3(_754, _755, _756), vec3(_2619, _2620, _2621));
    float _4748 = isnan(0.0) ? _2626 : (isnan(_2626) ? 0.0 : max(_2626, 0.0));
    float _2629 = isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0));
    float _2630 = dot(vec3(cbLight._m0[_2304].xyz), vec3(_2619, _2620, _2621));
    float _4759 = isnan(0.0) ? _2630 : (isnan(_2630) ? 0.0 : max(_2630, 0.0));
    float _2634 = _2611 * _2611;
    float _2638 = ((_2629 * _2629) * (_2634 + (-1.0))) + 1.0;
    float _2645 = exp2(log2(1.0 - (isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0)))) * 5.0);
    float _2652 = 1.0 - _2611;
    float _2662 = (0.5 / (((_2540 * ((_2625 * _2652) + _2611)) + 9.9999999392252902907785028219223e-09) + (((_2540 * _2652) + _2611) * _2625))) * _2625;
    float _4770 = isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : max(_2662, 0.0));
    float _2664 = (isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0))) * (_2634 / ((_2638 * _2638) * 3.141590118408203125));
    float _2674 = (((((_2645 * _2562) + _916) * cbLight._m0[_2599].x) * _2664) * _2287) + ((((cbLight._m0[_2511].x * _2253) * ((_2561 * _2562) + _916)) * _2585) * _2300);
    float _2675 = (((((_2645 * _2564) + _918) * cbLight._m0[_2599].y) * _2664) * _2287) + ((((cbLight._m0[_2511].y * _2255) * ((_2561 * _2564) + _918)) * _2585) * _2300);
    float _2676 = (((((_2645 * _2565) + _919) * cbLight._m0[_2599].z) * _2664) * _2287) + ((((cbLight._m0[_2511].z * _2257) * ((_2561 * _2565) + _919)) * _2585) * _2300);
    float _2732;
    float _2734;
    float _2736;
    if (_2340)
    {
        _2732 = _2674;
        _2734 = _2675;
        _2736 = _2676;
    }
    else
    {
        uint _2738 = _2264 + 2u;
        uint _2742 = _2264 + 10u;
        float _2756 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2738].w)) * _757) * 0.949999988079071044921875);
        float _2757 = _2756 * _2756;
        float _2758 = cbLight._m0[_2738].x + _834;
        float _2759 = cbLight._m0[_2738].y + _835;
        float _2760 = cbLight._m0[_2738].z + _836;
        float _2764 = inversesqrt(dot(vec3(_2758, _2759, _2760), vec3(_2758, _2759, _2760)));
        float _2765 = _2764 * _2758;
        float _2766 = _2764 * _2759;
        float _2767 = _2764 * _2760;
        float _2768 = dot(vec3(_754, _755, _756), vec3(cbLight._m0[_2738].xyz));
        float _4781 = isnan(0.0) ? _2768 : (isnan(_2768) ? 0.0 : max(_2768, 0.0));
        float _2771 = isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0));
        float _2772 = dot(vec3(_754, _755, _756), vec3(_2765, _2766, _2767));
        float _4792 = isnan(0.0) ? _2772 : (isnan(_2772) ? 0.0 : max(_2772, 0.0));
        float _2775 = isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0));
        float _2776 = dot(vec3(cbLight._m0[_2738].xyz), vec3(_2765, _2766, _2767));
        float _4803 = isnan(0.0) ? _2776 : (isnan(_2776) ? 0.0 : max(_2776, 0.0));
        float _2780 = _2757 * _2757;
        float _2784 = ((_2775 * _2775) * (_2780 + (-1.0))) + 1.0;
        float _2791 = exp2(log2(1.0 - (isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0)))) * 5.0);
        float _2798 = 1.0 - _2757;
        float _2808 = (0.5 / (((_2540 * ((_2771 * _2798) + _2757)) + 9.9999999392252902907785028219223e-09) + (((_2540 * _2798) + _2757) * _2771))) * _2771;
        float _4814 = isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : max(_2808, 0.0));
        float _2810 = (isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0))) * (_2780 / ((_2784 * _2784) * 3.141590118408203125));
        float _2811 = isnan(1.0) ? _2279 : (isnan(_2279) ? 1.0 : min(_2279, 1.0));
        _2732 = (((((_2791 * _2562) + _916) * cbLight._m0[_2742].x) * _2810) * _2811) + _2674;
        _2734 = (((((_2791 * _2564) + _918) * cbLight._m0[_2742].y) * _2810) * _2811) + _2675;
        _2736 = (((((_2791 * _2565) + _919) * cbLight._m0[_2742].z) * _2810) * _2811) + _2676;
    }
    float _2842;
    float _2844;
    float _2846;
    if (_2449)
    {
        _2842 = _2732;
        _2844 = _2734;
        _2846 = _2736;
    }
    else
    {
        uint _2853 = _2264 + 3u;
        uint _2857 = _2264 + 11u;
        float _2871 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2853].w)) * _757) * 0.949999988079071044921875);
        float _2872 = _2871 * _2871;
        float _2873 = cbLight._m0[_2853].x + _834;
        float _2874 = cbLight._m0[_2853].y + _835;
        float _2875 = cbLight._m0[_2853].z + _836;
        float _2879 = inversesqrt(dot(vec3(_2873, _2874, _2875), vec3(_2873, _2874, _2875)));
        float _2880 = _2879 * _2873;
        float _2881 = _2879 * _2874;
        float _2882 = _2879 * _2875;
        float _2883 = dot(vec3(_754, _755, _756), vec3(cbLight._m0[_2853].xyz));
        float _4830 = isnan(0.0) ? _2883 : (isnan(_2883) ? 0.0 : max(_2883, 0.0));
        float _2886 = isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0));
        float _2887 = dot(vec3(_754, _755, _756), vec3(_2880, _2881, _2882));
        float _4841 = isnan(0.0) ? _2887 : (isnan(_2887) ? 0.0 : max(_2887, 0.0));
        float _2890 = isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0));
        float _2891 = dot(vec3(cbLight._m0[_2853].xyz), vec3(_2880, _2881, _2882));
        float _4852 = isnan(0.0) ? _2891 : (isnan(_2891) ? 0.0 : max(_2891, 0.0));
        float _2895 = _2872 * _2872;
        float _2899 = ((_2890 * _2890) * (_2895 + (-1.0))) + 1.0;
        float _2906 = exp2(log2(1.0 - (isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0)))) * 5.0);
        float _2913 = 1.0 - _2872;
        float _2923 = (0.5 / (((_2540 * ((_2886 * _2913) + _2872)) + 9.9999999392252902907785028219223e-09) + (((_2540 * _2913) + _2872) * _2886))) * _2886;
        float _4863 = isnan(0.0) ? _2923 : (isnan(_2923) ? 0.0 : max(_2923, 0.0));
        float _2925 = (isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0))) * (_2895 / ((_2899 * _2899) * 3.141590118408203125));
        float _2926 = isnan(1.0) ? _2280 : (isnan(_2280) ? 1.0 : min(_2280, 1.0));
        _2842 = (((((_2906 * _2562) + _916) * cbLight._m0[_2857].x) * _2925) * _2926) + _2732;
        _2844 = (((((_2906 * _2564) + _918) * cbLight._m0[_2857].y) * _2925) * _2926) + _2734;
        _2846 = (((((_2906 * _2565) + _919) * cbLight._m0[_2857].z) * _2925) * _2926) + _2736;
    }
    float _2992;
    float _2994;
    float _2996;
    float _2998;
    float _3000;
    float _3002;
    if (_2262.y == 0u)
    {
        uvec4 _2947 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2948 = _2947.x;
        uint _2959 = uint((float(_2947.y) * floor(float(uint(cbSceneParam._m0[85u].y * _855) / _2948))) + floor(float(uint(cbSceneParam._m0[85u].x * _854) / _2948)));
        float _2969 = (log2(_2040 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2970 = isnan(0.0) ? _2969 : (isnan(_2969) ? 0.0 : max(_2969, 0.0));
        uint _2973 = uint(isnan(14.0) ? _2970 : (isnan(_2970) ? 14.0 : min(_2970, 14.0)));
        uvec4 _2978 = texelFetch(g_lightClusterGridBuffer, int(((_2973 << 2u) + (_2959 << 6u)) >> 2u));
        uint _2979 = _2978.x;
        uint _2980 = _2947.z;
        float _3059;
        float _3061;
        float _3063;
        float _3065;
        float _3067;
        float _3069;
        if (((((1u << ((_2980 >> 4u) & 15u)) + 4294967295u) & _2979) == 0u) || ((_2980 & 240u) == 0u))
        {
            _3059 = 0.0;
            _3061 = 0.0;
            _3063 = 0.0;
            _3065 = 0.0;
            _3067 = 0.0;
            _3069 = 0.0;
        }
        else
        {
            float _3060;
            float _3062;
            float _3064;
            float _3066;
            float _3068;
            float _3070;
            float _3212 = 0.0;
            float _3213 = 0.0;
            float _3214 = 0.0;
            float _3215 = 0.0;
            float _3216 = 0.0;
            float _3217 = 0.0;
            uint _3218 = 0u;
            uint _3227;
            bool _3228;
            for (;;)
            {
                _3227 = texelFetch(g_lightClassification, int((((_2973 << 5u) + (_2959 << 9u)) + (_3218 << 2u)) >> 2u)).x;
                _3228 = _3227 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3228)
                {
                    frontier_phi_71_pred = _3217;
                    frontier_phi_71_pred_1 = _3216;
                    frontier_phi_71_pred_2 = _3215;
                    frontier_phi_71_pred_3 = _3214;
                    frontier_phi_71_pred_4 = _3213;
                    frontier_phi_71_pred_5 = _3212;
                }
                else
                {
                    float _3357;
                    float _3358;
                    float _3359;
                    float _3360;
                    float _3361;
                    float _3362;
                    uint _3363;
                    _3357 = _3212;
                    _3358 = _3213;
                    _3359 = _3214;
                    _3360 = _3215;
                    _3361 = _3216;
                    _3362 = _3217;
                    _3363 = _3227;
                    float _3284;
                    float _3285;
                    float _3286;
                    float _3287;
                    float _3288;
                    float _3289;
                    for (;;)
                    {
                        uint _3367 = uint(findLSB(_3363)) + (_3218 << 5u);
                        uint _3364 = (_3363 + 4294967295u) & _3363;
                        uint _3369 = _3367 * 48u;
                        vec4 _3383 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3369)).x, texelFetch(g_PointLightRenderingBuffer, int(_3369 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3369 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3369 + 3u)).x));
                        uint _3389 = (_3367 * 48u) + 4u;
                        vec4 _3402 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3389)).x, texelFetch(g_PointLightRenderingBuffer, int(_3389 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3389 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3389 + 3u)).x));
                        uint _3408 = (_3367 * 48u) + 8u;
                        vec3 _3419 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3408)).x, texelFetch(g_PointLightRenderingBuffer, int(_3408 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3408 + 2u)).x));
                        float _3423 = _3383.x - _2038;
                        float _3424 = _3383.y - _2039;
                        float _3425 = _3383.z - _2040;
                        float _3426 = dot(vec3(_3423, _3424, _3425), vec3(_3423, _3424, _3425));
                        float _3429 = inversesqrt(_3426);
                        float _3430 = _3429 * _3423;
                        float _3431 = _3429 * _3424;
                        float _3432 = _3429 * _3425;
                        float _3433 = dot(vec3(_873, _876, _879), vec3(_3430, _3431, _3432));
                        float _3438 = 1.0 - (_3426 * _3383.w);
                        float _4889 = isnan(0.0) ? _3438 : (isnan(_3438) ? 0.0 : max(_3438, 0.0));
                        float _3439 = isnan(1.0) ? _4889 : (isnan(_4889) ? 1.0 : min(_4889, 1.0));
                        float _3440 = sqrt(_3426) * _3402.w;
                        float _3443 = 1.39999997615814208984375 / (_3440 + 1.39999997615814208984375);
                        float _3444 = _3443 * _3443;
                        float _3447 = ((1.0 - _3444) * _3433) + _3444;
                        float _3450 = _3440 * _3440;
                        float _3454 = ((isnan(0.0) ? _3447 : (isnan(_3447) ? 0.0 : max(_3447, 0.0))) * _3439) / ((_3450 * 0.699999988079071044921875) + 1.0);
                        float _3458 = (-0.0) - _2038;
                        float _3459 = (-0.0) - _2039;
                        float _3460 = (-0.0) - _2040;
                        float _3464 = inversesqrt(dot(vec3(_3458, _3459, _3460), vec3(_3458, _3459, _3460)));
                        float _3465 = _3464 * _3458;
                        float _3466 = _3464 * _3459;
                        float _3467 = _3464 * _3460;
                        float _3474 = exp2(log2(1.0 / ((_3450 * 3.5) + 5.0)) * 0.25);
                        float _3475 = 1.0 - _948;
                        float _3482 = sqrt(1.0 - ((1.0 - (_3475 * _3475)) * (1.0 - (_3474 * _3474))));
                        float _3483 = _3482 * _3482;
                        float _3484 = _3483 * _3483;
                        float _3485 = _3465 + _3430;
                        float _3486 = _3466 + _3431;
                        float _3487 = _3467 + _3432;
                        float _3491 = inversesqrt(dot(vec3(_3485, _3486, _3487), vec3(_3485, _3486, _3487)));
                        float _3495 = dot(vec3(_873, _876, _879), vec3(_3465, _3466, _3467));
                        float _4905 = isnan(0.0) ? _3495 : (isnan(_3495) ? 0.0 : max(_3495, 0.0));
                        float _3498 = isnan(1.0) ? _4905 : (isnan(_4905) ? 1.0 : min(_4905, 1.0));
                        float _3499 = dot(vec3(_873, _876, _879), vec3(_3491 * _3485, _3491 * _3486, _3491 * _3487));
                        float _4916 = isnan(0.0) ? _3499 : (isnan(_3499) ? 0.0 : max(_3499, 0.0));
                        float _3502 = isnan(1.0) ? _4916 : (isnan(_4916) ? 1.0 : min(_4916, 1.0));
                        float _3506 = ((_3502 * _3502) * (_3484 + (-1.0))) + 1.0;
                        float _3507 = _3443 * _3483;
                        float _3508 = _3507 * _3507;
                        float _3511 = ((1.0 - _3508) * _3433) + _3508;
                        float _4927 = isnan(0.0) ? _3511 : (isnan(_3511) ? 0.0 : max(_3511, 0.0));
                        float _3512 = isnan(1.0) ? _4927 : (isnan(_4927) ? 1.0 : min(_4927, 1.0));
                        float _3513 = 1.0 - _3483;
                        float _3523 = (0.5 / (((_3512 * ((_3498 * _3513) + _3483)) + 9.9999999392252902907785028219223e-09) + (((_3512 * _3513) + _3483) * _3498))) * _3512;
                        float _4938 = isnan(0.0) ? _3523 : (isnan(_3523) ? 0.0 : max(_3523, 0.0));
                        float _3534 = (((_3484 * 3.1415927410125732421875) * (isnan(1.0) ? _4938 : (isnan(_4938) ? 1.0 : min(_4938, 1.0)))) / ((_3506 * _3506) * ((_3450 * 2.1991131305694580078125) + 3.141590118408203125))) * _3439;
                        _3287 = (_3454 * _3402.x) + _3360;
                        _3288 = (_3454 * _3402.y) + _3361;
                        _3289 = (_3454 * _3402.z) + _3362;
                        _3284 = (_3534 * _3419.x) + _3357;
                        _3285 = (_3534 * _3419.y) + _3358;
                        _3286 = (_3534 * _3419.z) + _3359;
                        if (_3364 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3357 = _3284;
                            _3358 = _3285;
                            _3359 = _3286;
                            _3360 = _3287;
                            _3361 = _3288;
                            _3362 = _3289;
                            _3363 = _3364;
                        }
                    }
                    frontier_phi_71_pred = _3289;
                    frontier_phi_71_pred_1 = _3288;
                    frontier_phi_71_pred_2 = _3287;
                    frontier_phi_71_pred_3 = _3286;
                    frontier_phi_71_pred_4 = _3285;
                    frontier_phi_71_pred_5 = _3284;
                }
                _3070 = frontier_phi_71_pred;
                _3068 = frontier_phi_71_pred_1;
                _3066 = frontier_phi_71_pred_2;
                _3064 = frontier_phi_71_pred_3;
                _3062 = frontier_phi_71_pred_4;
                _3060 = frontier_phi_71_pred_5;
                uint _3219 = _3218 + 1u;
                if (_3219 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3212 = _3060;
                    _3213 = _3062;
                    _3214 = _3064;
                    _3215 = _3066;
                    _3216 = _3068;
                    _3217 = _3070;
                    _3218 = _3219;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3059 = _3060;
            _3061 = _3062;
            _3063 = _3064;
            _3065 = _3066;
            _3067 = _3068;
            _3069 = _3070;
        }
        uvec4 _3073 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3074 = _3073.z;
        uint _3076 = (_3074 >> 8u) & 15u;
        float _3180;
        float _3182;
        float _3184;
        float _3186;
        float _3188;
        float _3190;
        if (((4294967295u << _3076) & _2979) == 0u)
        {
            _3180 = _3059;
            _3182 = _3061;
            _3184 = _3063;
            _3186 = _3065;
            _3188 = _3067;
            _3190 = _3069;
        }
        else
        {
            float _3205 = inversesqrt(dot(vec3(_2038, _2039, _2040), vec3(_2038, _2039, _2040)));
            float _3206 = _3205 * _2038;
            float _3207 = _3205 * _2039;
            float _3208 = _3205 * _2040;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3076 < ((_3074 >> 12u) & 15u))
            {
                float _3181;
                float _3183;
                float _3185;
                float _3187;
                float _3189;
                float _3191;
                float _3340 = _3059;
                float _3341 = _3061;
                float _3342 = _3063;
                float _3343 = _3065;
                float _3344 = _3067;
                float _3345 = _3069;
                uint _3346 = _3076;
                uint _3355;
                bool _3356;
                for (;;)
                {
                    _3355 = texelFetch(g_lightClassification, int((((_2973 << 5u) + (_2959 << 9u)) + (_3346 << 2u)) >> 2u)).x;
                    _3356 = _3355 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3356)
                    {
                        frontier_phi_82_pred = _3345;
                        frontier_phi_82_pred_1 = _3344;
                        frontier_phi_82_pred_2 = _3343;
                        frontier_phi_82_pred_3 = _3342;
                        frontier_phi_82_pred_4 = _3341;
                        frontier_phi_82_pred_5 = _3340;
                    }
                    else
                    {
                        float _3548;
                        float _3549;
                        float _3550;
                        float _3551;
                        float _3552;
                        float _3553;
                        float _3841;
                        float _3842;
                        float _3843;
                        float _3844;
                        float _3845;
                        float _3846;
                        float _3561 = _3340;
                        float _3562 = _3341;
                        float _3563 = _3342;
                        float _3564 = _3343;
                        float _3565 = _3344;
                        float _3566 = _3345;
                        uint _3567 = _3355;
                        uint _3568;
                        vec4 _3593;
                        float _3594;
                        vec4 _3609;
                        vec3 _3621;
                        vec4 _3636;
                        vec4 _3651;
                        float _3697;
                        bool _3698;
                        for (;;)
                        {
                            uint _3578 = ((_3346 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3567));
                            _3568 = (_3567 + 4294967295u) & _3567;
                            uint _3580 = _3578 * 40u;
                            _3593 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3580)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 3u)).x));
                            _3594 = _3593.w;
                            uint _3596 = (_3578 * 40u) + 4u;
                            _3609 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3596)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3596 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3596 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3596 + 3u)).x));
                            uint _3611 = (_3578 * 40u) + 8u;
                            _3621 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3611)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 2u)).x));
                            uint _3623 = (_3578 * 40u) + 16u;
                            _3636 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3623)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3623 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3623 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3623 + 3u)).x));
                            uint _3638 = (_3578 * 40u) + 20u;
                            _3651 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3638)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3638 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3638 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3638 + 3u)).x));
                            uint _3653 = (_3578 * 40u) + 24u;
                            vec4 _3666 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3653)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3653 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3653 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3653 + 3u)).x));
                            uint _3672 = (_3578 * 40u) + 28u;
                            vec4 _3685 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3672)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3672 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3672 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3672 + 3u)).x));
                            _3697 = fma(_2040, _3685.z, fma(_2039, _3685.y, _3685.x * _2038)) + _3685.w;
                            _3698 = !((fma(_2040, _3666.z, fma(_2039, _3666.y, _3666.x * _2038)) + _3666.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3698)
                            {
                                float _3725 = _3593.x - _2038;
                                float _3726 = _3593.y - _2039;
                                float _3727 = _3593.z - _2040;
                                float _3728 = dot(vec3(_3725, _3726, _3727), vec3(_3725, _3726, _3727));
                                float _3731 = inversesqrt(_3728);
                                float _3732 = _3731 * _3725;
                                float _3733 = _3731 * _3726;
                                float _3734 = _3731 * _3727;
                                float _3738 = 1.0 - (_3728 / (_3594 * _3594));
                                float _4949 = isnan(0.0) ? _3738 : (isnan(_3738) ? 0.0 : max(_3738, 0.0));
                                float _3739 = isnan(1.0) ? _4949 : (isnan(_4949) ? 1.0 : min(_4949, 1.0));
                                float _3743 = sqrt(_3728) * _3609.w;
                                float _3745 = 1.39999997615814208984375 / (_3743 + 1.39999997615814208984375);
                                float _3746 = _3745 * _3745;
                                float _3749 = ((1.0 - _3746) * dot(vec3(_3732, _3733, _3734), vec3(_873, _876, _879))) + _3746;
                                float _3752 = _3743 * _3743;
                                float _3756 = (fma(_2040, _3636.z, fma(_2039, _3636.y, _3636.x * _2038)) + _3636.w) / _3697;
                                float _3757 = (fma(_2040, _3651.z, fma(_2039, _3651.y, _3651.x * _2038)) + _3651.w) / _3697;
                                float _3761 = 1.0 - dot(vec2(_3756, _3757), vec2(_3756, _3757));
                                float _4965 = isnan(0.0) ? _3761 : (isnan(_3761) ? 0.0 : max(_3761, 0.0));
                                float _3762 = isnan(1.0) ? _4965 : (isnan(_4965) ? 1.0 : min(_4965, 1.0));
                                float _3763 = _3762 * (((isnan(0.0) ? _3749 : (isnan(_3749) ? 0.0 : max(_3749, 0.0))) * _3739) / ((_3752 * 0.699999988079071044921875) + 1.0));
                                float _3775 = exp2(log2(1.0 / ((_3752 * 3.5) + 5.0)) * 0.25);
                                float _3776 = 1.0 - _948;
                                float _3783 = sqrt(1.0 - ((1.0 - (_3776 * _3776)) * (1.0 - (_3775 * _3775))));
                                float _3784 = _3783 * _3783;
                                float _3785 = _3784 * _3784;
                                float _3786 = _3732 - _3206;
                                float _3787 = _3733 - _3207;
                                float _3788 = _3734 - _3208;
                                float _3792 = inversesqrt(dot(vec3(_3786, _3787, _3788), vec3(_3786, _3787, _3788)));
                                float _3796 = dot(vec3(_873, _876, _879), vec3((-0.0) - _3206, (-0.0) - _3207, (-0.0) - _3208));
                                float _4976 = isnan(0.0) ? _3796 : (isnan(_3796) ? 0.0 : max(_3796, 0.0));
                                float _3799 = isnan(1.0) ? _4976 : (isnan(_4976) ? 1.0 : min(_4976, 1.0));
                                float _3800 = dot(vec3(_873, _876, _879), vec3(_3792 * _3786, _3792 * _3787, _3792 * _3788));
                                float _4987 = isnan(0.0) ? _3800 : (isnan(_3800) ? 0.0 : max(_3800, 0.0));
                                float _3803 = isnan(1.0) ? _4987 : (isnan(_4987) ? 1.0 : min(_4987, 1.0));
                                float _3807 = ((_3803 * _3803) * (_3785 + (-1.0))) + 1.0;
                                float _3808 = _3745 * _3784;
                                float _3809 = _3808 * _3808;
                                float _3815 = ((1.0 - _3809) * dot(vec3(_873, _876, _879), vec3(_3732, _3733, _3734))) + _3809;
                                float _4998 = isnan(0.0) ? _3815 : (isnan(_3815) ? 0.0 : max(_3815, 0.0));
                                float _3816 = isnan(1.0) ? _4998 : (isnan(_4998) ? 1.0 : min(_4998, 1.0));
                                float _3817 = 1.0 - _3784;
                                float _3827 = (0.5 / (((_3816 * ((_3799 * _3817) + _3784)) + 9.9999999392252902907785028219223e-09) + (((_3816 * _3817) + _3784) * _3799))) * _3816;
                                float _5009 = isnan(0.0) ? _3827 : (isnan(_3827) ? 0.0 : max(_3827, 0.0));
                                float _3837 = (_3762 * _3739) * (((_3785 * 3.1415927410125732421875) * (isnan(1.0) ? _5009 : (isnan(_5009) ? 1.0 : min(_5009, 1.0)))) / ((_3807 * _3807) * ((_3752 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3763 * _3609.z;
                                frontier_phi_88_pred_1 = _3763 * _3609.y;
                                frontier_phi_88_pred_2 = _3763 * _3609.x;
                                frontier_phi_88_pred_3 = _3837 * _3621.z;
                                frontier_phi_88_pred_4 = _3837 * _3621.y;
                                frontier_phi_88_pred_5 = _3837 * _3621.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3846 = frontier_phi_88_pred;
                            _3845 = frontier_phi_88_pred_1;
                            _3844 = frontier_phi_88_pred_2;
                            _3843 = frontier_phi_88_pred_3;
                            _3842 = frontier_phi_88_pred_4;
                            _3841 = frontier_phi_88_pred_5;
                            _3551 = _3844 + _3564;
                            _3552 = _3845 + _3565;
                            _3553 = _3846 + _3566;
                            _3548 = _3841 + _3561;
                            _3549 = _3842 + _3562;
                            _3550 = _3843 + _3563;
                            if (_3568 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3561 = _3548;
                                _3562 = _3549;
                                _3563 = _3550;
                                _3564 = _3551;
                                _3565 = _3552;
                                _3566 = _3553;
                                _3567 = _3568;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3553;
                        frontier_phi_82_pred_1 = _3552;
                        frontier_phi_82_pred_2 = _3551;
                        frontier_phi_82_pred_3 = _3550;
                        frontier_phi_82_pred_4 = _3549;
                        frontier_phi_82_pred_5 = _3548;
                    }
                    _3191 = frontier_phi_82_pred;
                    _3189 = frontier_phi_82_pred_1;
                    _3187 = frontier_phi_82_pred_2;
                    _3185 = frontier_phi_82_pred_3;
                    _3183 = frontier_phi_82_pred_4;
                    _3181 = frontier_phi_82_pred_5;
                    uint _3347 = _3346 + 1u;
                    if (_3347 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3340 = _3181;
                        _3341 = _3183;
                        _3342 = _3185;
                        _3343 = _3187;
                        _3344 = _3189;
                        _3345 = _3191;
                        _3346 = _3347;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3187;
                frontier_phi_63_64_ladder_1 = _3191;
                frontier_phi_63_64_ladder_2 = _3189;
                frontier_phi_63_64_ladder_3 = _3185;
                frontier_phi_63_64_ladder_4 = _3183;
                frontier_phi_63_64_ladder_5 = _3181;
            }
            else
            {
                frontier_phi_63_64_ladder = _3065;
                frontier_phi_63_64_ladder_1 = _3069;
                frontier_phi_63_64_ladder_2 = _3067;
                frontier_phi_63_64_ladder_3 = _3063;
                frontier_phi_63_64_ladder_4 = _3061;
                frontier_phi_63_64_ladder_5 = _3059;
            }
            _3180 = frontier_phi_63_64_ladder_5;
            _3182 = frontier_phi_63_64_ladder_4;
            _3184 = frontier_phi_63_64_ladder_3;
            _3186 = frontier_phi_63_64_ladder;
            _3188 = frontier_phi_63_64_ladder_2;
            _3190 = frontier_phi_63_64_ladder_1;
        }
        float _3195 = isnan(1.0) ? _932 : (isnan(_932) ? 1.0 : min(_932, 1.0));
        _2992 = (_3195 * _3186) + _2504;
        _2994 = (_3195 * _3188) + _2506;
        _2996 = (_3195 * _3190) + _2508;
        _2998 = ((_3180 * _916) * _3195) + _2842;
        _3000 = ((_3182 * _918) * _3195) + _2844;
        _3002 = ((_3184 * _919) * _3195) + _2846;
    }
    else
    {
        _2992 = _2504;
        _2994 = _2506;
        _2996 = _2508;
        _2998 = _2842;
        _3000 = _2844;
        _3002 = _2846;
    }
    float _5025 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
    float _5036 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
    float _5047 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
    float _3019 = ((isnan(1.0) ? _5025 : (isnan(_5025) ? 1.0 : min(_5025, 1.0))) * (_2992 + ((isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0))) * _932))) + ((_2998 + ((isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0))) * _1772)) * cbPerFrame._m0[3u].x);
    float _3020 = ((isnan(1.0) ? _5036 : (isnan(_5036) ? 1.0 : min(_5036, 1.0))) * (_2994 + ((isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0))) * _932))) + ((_3000 + ((isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0))) * _1772)) * cbPerFrame._m0[3u].x);
    float _3021 = ((isnan(1.0) ? _5047 : (isnan(_5047) ? 1.0 : min(_5047, 1.0))) * (_2996 + ((isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0))) * _932))) + ((_3002 + ((isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0))) * _1772)) * cbPerFrame._m0[3u].x);
    uint _3022 = _274 + 6u;
    float _3030 = _854 / cbSceneParam._m0[86u].x;
    float _3031 = _855 / cbSceneParam._m0[86u].y;
    vec4 _3045 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3030, _3031, (log2((isnan(cbSceneParam._m0[77u].w) ? _776 : (isnan(_776) ? cbSceneParam._m0[77u].w : min(_776, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3047 = _3045.x;
    float _3048 = _3045.y;
    float _3049 = _3045.z;
    float _3050 = _3045.w;
    float _3122;
    float _3124;
    float _3126;
    float _3128;
    if (_776 > cbSceneParam._m0[78u].w)
    {
        float _3084 = isnan(_776) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _776 : min(cbSceneParam._m0[80u].w, _776));
        float _3085 = _3084 / _776;
        float _3096 = _3085 * _827;
        float _3097 = _828 * _3085;
        float _3098 = (-0.0) - _3097;
        float _3100 = _3085 * _829;
        float _3102 = (cbSceneParam._m0[77u].w * _3098) / _3084;
        float _3103 = _3102 + cbSceneParam._m0[79u].w;
        float _3104 = cbSceneParam._m0[79u].w - _3097;
        float _3110 = sqrt(((_3096 * _3096) + (_3097 * _3097)) + (_3100 * _3100));
        float _3113 = (1.0 - (cbSceneParam._m0[77u].w / _3084)) * _3110;
        float _3118 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3120 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3297;
        if (abs((_3098 - _3102) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3297 = ((((_3103 > 0.0) ? exp2(_3118 * _3103) : (2.0 - exp2(_3120 * _3103))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3113;
        }
        else
        {
            float _3241 = 1.0 / cbSceneParam._m0[80u].x;
            float _3242 = isnan(_3104) ? _3103 : (isnan(_3103) ? _3104 : max(_3103, _3104));
            float _3243 = isnan(_3104) ? _3103 : (isnan(_3103) ? _3104 : min(_3103, _3104));
            float _3252 = isnan(0.0) ? _3242 : (isnan(_3242) ? 0.0 : min(_3242, 0.0));
            float _3253 = isnan(0.0) ? _3243 : (isnan(_3243) ? 0.0 : min(_3243, 0.0));
            _3297 = ((abs(_3110 / _3098) * cbSceneParam._m0[80u].y) * ((((_3252 - _3253) * 2.0) - ((exp2(_3118 * (isnan(0.0) ? _3242 : (isnan(_3242) ? 0.0 : max(_3242, 0.0)))) - exp2(_3118 * (isnan(0.0) ? _3243 : (isnan(_3243) ? 0.0 : max(_3243, 0.0))))) * _3241)) - ((exp2(_3120 * _3252) - exp2(_3120 * _3253)) * _3241))) + (_3113 * cbSceneParam._m0[80u].z);
        }
        vec4 _3299 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3030, _3031, 1.0), 0.0);
        float _3308 = exp2((_3297 * (-1.44269502162933349609375)) * (1.0 - _3299.w));
        float _3309 = log2(_3308);
        float _3325 = log2(_3050);
        _3122 = (exp2(_3325 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3309 * cbSceneParam._m0[78u].x)) * _3299.x) / cbSceneParam._m0[78u].x)) + _3047;
        _3124 = (exp2(_3325 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3309 * cbSceneParam._m0[78u].y)) * _3299.y) / cbSceneParam._m0[78u].y)) + _3048;
        _3126 = (exp2(_3325 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3309 * cbSceneParam._m0[78u].z)) * _3299.z) / cbSceneParam._m0[78u].z)) + _3049;
        _3128 = _3308 * _3050;
    }
    else
    {
        _3122 = _3047;
        _3124 = _3048;
        _3126 = _3049;
        _3128 = _3050;
    }
    bool _3335;
    vec4 _3138;
    vec4 _3160;
    float _3162;
    float _3166;
    float _3167;
    float _3168;
    float _3169;
    bool _3179;
    for (;;)
    {
        _3138 = cbMatDynParam._m0[0u];
        float _3140 = roundEven(_3138.y);
        bool _3141 = _3140 == 3.0;
        float _3142 = log2(_3128);
        float _3149 = exp2(_3142 * cbSceneParam._m0[78u].x) * _3019;
        float _3150 = exp2(_3142 * cbSceneParam._m0[78u].y) * _3020;
        float _3151 = exp2(_3142 * cbSceneParam._m0[78u].z) * _3021;
        float _3158 = _843 + (-0.5);
        _3160 = cbMtdParam._m0[1u];
        _3162 = _3160.y * _3158;
        float _3165 = (_3140 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3166 = _3165 * (_3141 ? _3149 : (_3149 + (cbSceneParam._m0[72u].w * _3122)));
        _3167 = _3165 * (_3141 ? _3150 : (_3150 + (cbSceneParam._m0[72u].w * _3124)));
        _3168 = _3165 * (_3141 ? _3151 : (_3151 + (cbSceneParam._m0[72u].w * _3126)));
        _3169 = _3158 * 0.999000012874603271484375;
        _3179 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3179)
        {
            if ((cbInstanceData._m0[_274 + 7u].x + _3169) < 0.5)
            {
                _3335 = true;
                break;
            }
        }
        uint _3276 = _892 + uint(_3138.w);
        if ((cbInstanceData._m0[_3276].w < 1.0) && ((cbInstanceData._m0[_3276].w + _3169) < 0.5))
        {
            _3335 = true;
            break;
        }
        if ((_3162 + 1.0) < _3160.x)
        {
            _3335 = true;
            break;
        }
        _3335 = false;
        break;
    }
    float _3539;
    if (_3335)
    {
        discard_state = true;
        _3539 = 0.0;
    }
    else
    {
        _3539 = cbInstanceData._m0[_3022].w;
    }
    SV_Target.x = _3166;
    SV_Target.y = _3167;
    SV_Target.z = _3168;
    SV_Target.w = _3539;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3022].w;
    discard_exit();
}


