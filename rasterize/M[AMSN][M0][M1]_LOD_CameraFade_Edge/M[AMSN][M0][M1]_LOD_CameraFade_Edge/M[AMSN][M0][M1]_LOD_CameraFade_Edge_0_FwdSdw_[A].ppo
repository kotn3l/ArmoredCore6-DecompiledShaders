#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_LOD_CameraFade_Edge_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_LOD_CameraFade_Edge_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_LOD_CameraFade_Edge_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _937;
float _3606;
float _3607;
float _3608;
float _3609;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _195 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _202 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _203 = _202 * NORMAL.x;
    float _204 = _202 * NORMAL.y;
    float _205 = _202 * NORMAL.z;
    float _209 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _217;
    float _218;
    float _219;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _217 = (-0.0) - _203;
        _218 = (-0.0) - _204;
        _219 = (-0.0) - _205;
    }
    else
    {
        _217 = _203;
        _218 = _204;
        _219 = _205;
    }
    float _263 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _273 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _263);
    float _274 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _263);
    float _275 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _263);
    vec4 _293 = texture(sampler2D(M_AMSN_M0_M1_LOD_CameraFade_Edge_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _299 = _293.w;
    float _300 = _293.x * cbMtdParam._m0[9u].x;
    float _301 = _293.y * cbMtdParam._m0[9u].y;
    float _302 = _293.z * cbMtdParam._m0[9u].z;
    vec4 _314 = texture(sampler2D(M_AMSN_M0_M1_LOD_CameraFade_Edge_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _316 = _314.x;
    vec4 _328 = texture(sampler2D(M_AMSN_M0_M1_LOD_CameraFade_Edge_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _332 = _328.z;
    float _336 = (_328.x * 2.0) + (-1.0);
    float _338 = (_328.y * 2.0) + (-1.0);
    float _339 = dot(vec2(_336, _338), vec2(_336, _338));
    float _3618 = isnan(0.0) ? _339 : (isnan(_339) ? 0.0 : max(_339, 0.0));
    float _345 = sqrt(1.0 - (isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0))));
    float _357 = cbMtdParam._m0[10u].y - cbMtdParam._m0[10u].x;
    float _361 = gl_FragCoord.x * 0.125;
    float _363 = gl_FragCoord.y * 0.125;
    float _374 = fma(_345, _217, fma(_338, _209 * TANGENT.x, (_195 * _188) * _336));
    float _377 = fma(_345, _218, fma(_338, _209 * TANGENT.y, (_195 * _189) * _336));
    float _380 = fma(_345, _219, fma(_338, _209 * TANGENT.z, (_195 * _190) * _336));
    float _384 = inversesqrt(dot(vec3(_374, _377, _380), vec3(_374, _377, _380)));
    float _385 = _384 * _374;
    float _386 = _384 * _377;
    float _387 = _384 * _380;
    float _3634 = isnan(0.0) ? _332 : (isnan(_332) ? 0.0 : max(_332, 0.0));
    float _388 = isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0));
    float _3645 = isnan(0.0) ? _300 : (isnan(_300) ? 0.0 : max(_300, 0.0));
    float _3656 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _3667 = isnan(0.0) ? _302 : (isnan(_302) ? 0.0 : max(_302, 0.0));
    float _3678 = isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0));
    float _392 = isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0));
    if (!(((sqrt(((_273 * _273) + (_274 * _274)) + (_275 * _275)) - cbMtdParam._m0[10u].x) / (isnan(0.001000000047497451305389404296875) ? _357 : (isnan(_357) ? 0.001000000047497451305389404296875 : max(_357, 0.001000000047497451305389404296875)))) >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_361, _363)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _412 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _452 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _461 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _452);
    float _462 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _452);
    float _463 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _452);
    float _467 = inversesqrt(dot(vec3(_461, _462, _463), vec3(_461, _462, _463)));
    float _468 = _461 * _467;
    float _469 = _462 * _467;
    float _470 = _463 * _467;
    vec4 _472 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_361, _363));
    float _474 = _472.w;
    float _480 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _481 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _502 = fma(_387, cbSceneParam._m0[5u].z, fma(_386, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _385));
    float _505 = fma(_387, cbSceneParam._m0[6u].z, fma(_386, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _385));
    float _508 = fma(_387, cbSceneParam._m0[7u].z, fma(_386, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _385));
    uint _521 = uint(roundEven(NORMAL.w)) * 13u;
    uint _523 = _521 + 9u;
    uint _524 = _523 + uint(cbMatDynParam._m0[0u].w);
    float _530 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0)))) * cbInstanceData._m0[_524].x;
    float _531 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0)))) * cbInstanceData._m0[_524].y;
    float _532 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0)))) * cbInstanceData._m0[_524].z;
    float _3689 = isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : max(_530, 0.0));
    float _533 = isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0));
    float _3700 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _534 = isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0));
    float _3711 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    float _535 = isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0));
    float _536 = 1.0 - _392;
    float _537 = _533 * _536;
    float _538 = _534 * _536;
    float _539 = _535 * _536;
    float _544 = (_533 + (-0.039999999105930328369140625)) * _392;
    float _545 = (_534 + (-0.039999999105930328369140625)) * _392;
    float _546 = (_535 + (-0.039999999105930328369140625)) * _392;
    float _547 = _544 + 0.039999999105930328369140625;
    float _549 = _545 + 0.039999999105930328369140625;
    float _550 = _546 + 0.039999999105930328369140625;
    vec4 _559 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _480, cbSceneParam._m0[86u].y * _481));
    float _562 = _559.x * TEXCOORD.z;
    float _563 = dot(vec3(_385, _386, _387), vec3(_468, _469, _470));
    float _566 = _563 * 2.0;
    float _570 = (_566 * _385) - _468;
    float _571 = (_566 * _386) - _469;
    float _572 = (_566 * _387) - _470;
    float _576 = abs(dot(vec3(_468, _469, _470), vec3(_385, _386, _387)));
    float _3722 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
    float _578 = sqrt(_388);
    float _591 = exp2((_578 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_578 * 3.0));
    float _597 = (1.0 - _591) * ((_578 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _598 = _591 * _578;
    float _626 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _630 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _634 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _936;
    float _938;
    float _939;
    float _940;
    float _941;
    float _942;
    float _943;
    float _944;
    float _945;
    float _946;
    float _947;
    float _948;
    float _949;
    float _950;
    float _951;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _661 = fma(_634, cbModelParam._m0[26u].z, fma(_630, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _626));
        float _665 = fma(_634, cbModelParam._m0[27u].z, fma(_630, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _626));
        float _669 = fma(_634, cbModelParam._m0[28u].z, fma(_630, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _626));
        float _694 = _626 + _385;
        float _695 = _630 + _386;
        float _696 = _634 + _387;
        float _706 = fma(_696, cbModelParam._m0[26u].z, fma(_695, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _694)) - _661;
        float _707 = fma(_696, cbModelParam._m0[27u].z, fma(_695, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _694)) - _665;
        float _708 = fma(_696, cbModelParam._m0[28u].z, fma(_695, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _694)) - _669;
        float _712 = inversesqrt(dot(vec3(_706, _707, _708), vec3(_706, _707, _708)));
        float _725 = ((_712 * _706) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_661 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _726 = ((_712 * _707) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_665 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _727 = ((_712 * _708) / cbModelParam._m0[34u].z) + ((((((_669 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _730 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_725, _726, _727), 0.0);
        vec4 _737 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_725, _726, _727), 0.0);
        vec4 _744 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_725, _726, _727), 0.0);
        vec4 _751 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_725, _726, _727), 0.0);
        float _764 = exp2((_730.w + (-0.5)) * 20.0) * 2.0;
        float _765 = _764 * (_730.x + (-0.5));
        float _766 = _764 * (_730.y + (-0.5));
        float _767 = _764 * (_730.z + (-0.5));
        float _774 = exp2((_737.w + (-0.5)) * 20.0) * 2.0;
        float _775 = _774 * (_737.x + (-0.5));
        float _776 = _774 * (_737.y + (-0.5));
        float _777 = _774 * (_737.z + (-0.5));
        float _784 = exp2((_744.w + (-0.5)) * 20.0) * 2.0;
        float _785 = _784 * (_744.x + (-0.5));
        float _786 = _784 * (_744.y + (-0.5));
        float _787 = _784 * (_744.z + (-0.5));
        float _794 = exp2((_751.w + (-0.5)) * 20.0) * 2.0;
        float _795 = _794 * (_751.x + (-0.5));
        float _796 = _794 * (_751.y + (-0.5));
        float _797 = _794 * (_751.z + (-0.5));
        float _798 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
        float _799 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
        float _800 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
        float _801 = _765 * 0.5;
        float _802 = _775 * 0.5;
        float _803 = _785 * 0.5;
        float _804 = dot(vec3(_801, _802, _803), vec3(_801, _802, _803));
        float _809 = (_804 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_804);
        float _818 = (dot(vec3(_385, _386, _387), vec3(_809 * _801, _809 * _802, _809 * _803)) + 1.0) * 0.5;
        float _3748 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
        float _828 = sqrt(((_802 * _802) + (_801 * _801)) + (_803 * _803)) / (_798 + 9.9999997473787516355514526367188e-06);
        float _3759 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
        float _829 = isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0));
        float _830 = _829 * 2.0;
        float _834 = (1.0 - _829) / (_829 + 1.0);
        float _3770 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
        float _835 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
        float _844 = ((((1.0 - _835) * (_830 + 2.0)) * exp2(log2(isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0))) * (_830 + 1.0))) + _835) * _798;
        float _845 = _766 * 0.5;
        float _846 = _776 * 0.5;
        float _847 = _786 * 0.5;
        float _848 = dot(vec3(_845, _846, _847), vec3(_845, _846, _847));
        float _853 = (_848 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_848);
        float _861 = (dot(vec3(_385, _386, _387), vec3(_853 * _845, _853 * _846, _853 * _847)) + 1.0) * 0.5;
        float _3781 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
        float _870 = sqrt(((_846 * _846) + (_845 * _845)) + (_847 * _847)) / (_799 + 9.9999997473787516355514526367188e-06);
        float _3792 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
        float _871 = isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0));
        float _872 = _871 * 2.0;
        float _876 = (1.0 - _871) / (_871 + 1.0);
        float _3803 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
        float _877 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
        float _886 = ((((1.0 - _877) * (_872 + 2.0)) * exp2(log2(isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0))) * (_872 + 1.0))) + _877) * _799;
        float _887 = _767 * 0.5;
        float _888 = _777 * 0.5;
        float _889 = _787 * 0.5;
        float _890 = dot(vec3(_887, _888, _889), vec3(_887, _888, _889));
        float _895 = (_890 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_890);
        float _903 = (dot(vec3(_385, _386, _387), vec3(_895 * _887, _895 * _888, _895 * _889)) + 1.0) * 0.5;
        float _3814 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
        float _912 = sqrt(((_888 * _888) + (_887 * _887)) + (_889 * _889)) / (_800 + 9.9999997473787516355514526367188e-06);
        float _3825 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
        float _913 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
        float _914 = _913 * 2.0;
        float _918 = (1.0 - _913) / (_913 + 1.0);
        float _3836 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
        float _919 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
        float _928 = ((((1.0 - _919) * (_914 + 2.0)) * exp2(log2(isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0))) * (_914 + 1.0))) + _919) * _800;
        _936 = _767;
        _938 = _766;
        _939 = _765;
        _940 = _777;
        _941 = _776;
        _942 = _775;
        _943 = _787;
        _944 = _786;
        _945 = _785;
        _946 = _800;
        _947 = _799;
        _948 = _798;
        _949 = cbModelParam._m0[36u].z * (isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0)));
        _950 = cbModelParam._m0[36u].z * (isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0)));
        _951 = cbModelParam._m0[36u].z * (isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0)));
    }
    else
    {
        _936 = _937;
        _938 = _937;
        _939 = _937;
        _940 = _937;
        _941 = _937;
        _942 = _937;
        _943 = _937;
        _944 = _937;
        _945 = _937;
        _946 = _937;
        _947 = _937;
        _948 = _937;
        _949 = 0.0;
        _950 = 0.0;
        _951 = 0.0;
    }
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _977 = fma(_634, cbModelParam._m0[30u].z, fma(_630, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _626));
        float _981 = fma(_634, cbModelParam._m0[31u].z, fma(_630, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _626));
        float _985 = fma(_634, cbModelParam._m0[32u].z, fma(_630, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _626));
        float _1008 = _626 + _385;
        float _1009 = _630 + _386;
        float _1010 = _634 + _387;
        float _1020 = fma(_1010, cbModelParam._m0[30u].z, fma(_1009, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1008)) - _977;
        float _1021 = fma(_1010, cbModelParam._m0[31u].z, fma(_1009, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1008)) - _981;
        float _1022 = fma(_1010, cbModelParam._m0[32u].z, fma(_1009, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1008)) - _985;
        float _1026 = inversesqrt(dot(vec3(_1020, _1021, _1022), vec3(_1020, _1021, _1022)));
        float _1039 = ((_1026 * _1020) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_977 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1040 = ((_1026 * _1021) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_981 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1041 = ((_1026 * _1022) / cbModelParam._m0[35u].z) + ((((((_985 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1043 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1039, _1040, _1041), 0.0);
        vec4 _1050 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1039, _1040, _1041), 0.0);
        vec4 _1057 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1039, _1040, _1041), 0.0);
        vec4 _1064 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1039, _1040, _1041), 0.0);
        float _1076 = exp2((_1043.w + (-0.5)) * 20.0) * 2.0;
        float _1077 = _1076 * (_1043.x + (-0.5));
        float _1078 = _1076 * (_1043.y + (-0.5));
        float _1079 = _1076 * (_1043.z + (-0.5));
        float _1086 = exp2((_1050.w + (-0.5)) * 20.0) * 2.0;
        float _1087 = _1086 * (_1050.x + (-0.5));
        float _1088 = _1086 * (_1050.y + (-0.5));
        float _1089 = _1086 * (_1050.z + (-0.5));
        float _1096 = exp2((_1057.w + (-0.5)) * 20.0) * 2.0;
        float _1097 = _1096 * (_1057.x + (-0.5));
        float _1098 = _1096 * (_1057.y + (-0.5));
        float _1099 = _1096 * (_1057.z + (-0.5));
        float _1106 = exp2((_1064.w + (-0.5)) * 20.0) * 2.0;
        float _1107 = _1106 * (_1064.x + (-0.5));
        float _1108 = _1106 * (_1064.y + (-0.5));
        float _1109 = _1106 * (_1064.z + (-0.5));
        float _1110 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1111 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1112 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1113 = _1077 * 0.5;
        float _1114 = _1087 * 0.5;
        float _1115 = _1097 * 0.5;
        float _1116 = dot(vec3(_1113, _1114, _1115), vec3(_1113, _1114, _1115));
        float _1121 = (_1116 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1116);
        float _1129 = (dot(vec3(_385, _386, _387), vec3(_1121 * _1113, _1121 * _1114, _1121 * _1115)) + 1.0) * 0.5;
        float _3877 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1138 = sqrt(((_1114 * _1114) + (_1113 * _1113)) + (_1115 * _1115)) / (_1110 + 9.9999997473787516355514526367188e-06);
        float _3888 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1139 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
        float _1140 = _1139 * 2.0;
        float _1144 = (1.0 - _1139) / (_1139 + 1.0);
        float _3899 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1145 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
        float _1154 = ((((1.0 - _1145) * (_1140 + 2.0)) * exp2(log2(isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0))) * (_1140 + 1.0))) + _1145) * _1110;
        float _1155 = _1078 * 0.5;
        float _1156 = _1088 * 0.5;
        float _1157 = _1098 * 0.5;
        float _1158 = dot(vec3(_1155, _1156, _1157), vec3(_1155, _1156, _1157));
        float _1163 = (_1158 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1158);
        float _1171 = (dot(vec3(_385, _386, _387), vec3(_1163 * _1155, _1163 * _1156, _1163 * _1157)) + 1.0) * 0.5;
        float _3910 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1180 = sqrt(((_1156 * _1156) + (_1155 * _1155)) + (_1157 * _1157)) / (_1111 + 9.9999997473787516355514526367188e-06);
        float _3921 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1181 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
        float _1182 = _1181 * 2.0;
        float _1186 = (1.0 - _1181) / (_1181 + 1.0);
        float _3932 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1187 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
        float _1196 = ((((1.0 - _1187) * (_1182 + 2.0)) * exp2(log2(isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0))) * (_1182 + 1.0))) + _1187) * _1111;
        float _1197 = _1079 * 0.5;
        float _1198 = _1089 * 0.5;
        float _1199 = _1099 * 0.5;
        float _1200 = dot(vec3(_1197, _1198, _1199), vec3(_1197, _1198, _1199));
        float _1205 = (_1200 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1200);
        float _1213 = (dot(vec3(_385, _386, _387), vec3(_1205 * _1197, _1205 * _1198, _1205 * _1199)) + 1.0) * 0.5;
        float _3943 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1222 = sqrt(((_1198 * _1198) + (_1197 * _1197)) + (_1199 * _1199)) / (_1112 + 9.9999997473787516355514526367188e-06);
        float _3954 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1223 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
        float _1224 = _1223 * 2.0;
        float _1228 = (1.0 - _1223) / (_1223 + 1.0);
        float _3965 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1229 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
        float _1238 = ((((1.0 - _1229) * (_1224 + 2.0)) * exp2(log2(isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0))) * (_1224 + 1.0))) + _1229) * _1112;
        _1246 = _1079;
        _1247 = _1078;
        _1248 = _1077;
        _1249 = _1089;
        _1250 = _1088;
        _1251 = _1087;
        _1252 = _1099;
        _1253 = _1098;
        _1254 = _1097;
        _1255 = _1112;
        _1256 = _1111;
        _1257 = _1110;
        _1258 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0)));
        _1259 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0)));
        _1260 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0)));
    }
    else
    {
        _1246 = _937;
        _1247 = _937;
        _1248 = _937;
        _1249 = _937;
        _1250 = _937;
        _1251 = _937;
        _1252 = _937;
        _1253 = _937;
        _1254 = _937;
        _1255 = _937;
        _1256 = _937;
        _1257 = _937;
        _1258 = 0.0;
        _1259 = 0.0;
        _1260 = 0.0;
    }
    float _1270 = (cbModelParam._m0[1u].x * (_1258 - _949)) + _949;
    float _1271 = (cbModelParam._m0[1u].x * (_1259 - _950)) + _950;
    float _1272 = (cbModelParam._m0[1u].x * (_1260 - _951)) + _951;
    float _1293 = fma(_1272, cbSceneParam._m0[89u].z, fma(_1271, cbSceneParam._m0[89u].y, _1270 * cbSceneParam._m0[89u].x));
    float _1296 = fma(_1272, cbSceneParam._m0[90u].z, fma(_1271, cbSceneParam._m0[90u].y, _1270 * cbSceneParam._m0[90u].x));
    float _1299 = fma(_1272, cbSceneParam._m0[91u].z, fma(_1271, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1270));
    float _1314 = _570 * 0.5;
    float _1315 = _571 * 0.5;
    float _1316 = _572 * 0.5;
    float _1317 = dot(vec4(_1314, _1315, _1316, 1.0), vec4(_1248, _1251, _1254, _1257));
    float _1320 = dot(vec4(_1314, _1315, _1316, 1.0), vec4(_1247, _1250, _1253, _1256));
    float _1323 = dot(vec4(_1314, _1315, _1316, 1.0), vec4(_1246, _1249, _1252, _1255));
    float _1357;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1330 = dot(vec4(_1314, _1315, _1316, 1.0), vec4(_936, _940, _943, _946));
        float _1334 = dot(vec4(_1314, _1315, _1316, 1.0), vec4(_938, _941, _944, _947));
        float _1338 = dot(vec4(_1314, _1315, _1316, 1.0), vec4(_939, _942, _945, _948));
        float _1345 = dot(vec4(cbModelParam._m0[39u]), vec4(_1314, _1315, _1316, 1.0));
        _1357 = dot(vec3(isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0)), isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0)), isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1345) ? 0.0 : (isnan(0.0) ? _1345 : max(0.0, _1345))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1357 = 1.0;
    }
    float _1368;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1359 = dot(vec4(cbModelParam._m0[40u]), vec4(_1314, _1315, _1316, 1.0));
        _1368 = dot(vec3(isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0)), isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0)), isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1359) ? 0.0 : (isnan(0.0) ? _1359 : max(0.0, _1359))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1368 = 1.0;
    }
    float _1372 = (_1368 * cbModelParam._m0[1u].x) + (_1357 * (1.0 - cbModelParam._m0[1u].x));
    float _1382 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _388);
    float _1383 = isnan(_1382) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1382 : min(cbModelParam._m0[25u].z, _1382));
    float _1465;
    float _1467;
    float _1469;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1432 = fma(_634, cbModelParam._m0[13u].z, fma(_630, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _626)) + cbModelParam._m0[13u].w;
        float _1436 = fma(_634, cbModelParam._m0[14u].z, fma(_630, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _626)) + cbModelParam._m0[14u].w;
        float _1440 = fma(_634, cbModelParam._m0[15u].z, fma(_630, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _626)) + cbModelParam._m0[15u].w;
        float _1443 = fma(_572, cbModelParam._m0[13u].z, fma(_571, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _570));
        float _1446 = fma(_572, cbModelParam._m0[14u].z, fma(_571, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _570));
        float _1449 = fma(_572, cbModelParam._m0[15u].z, fma(_571, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _570));
        float _1477;
        if (_1443 > 0.0)
        {
            _1477 = abs((1.0 - _1432) / _1443);
        }
        else
        {
            float frontier_phi_18_16_ladder;
            if (_1443 < 0.0)
            {
                frontier_phi_18_16_ladder = abs((_1432 + 1.0) / _1443);
            }
            else
            {
                frontier_phi_18_16_ladder = 5000.0;
            }
            _1477 = frontier_phi_18_16_ladder;
        }
        float _1653;
        if (_1446 > 0.0)
        {
            _1653 = abs((1.0 - _1436) / _1446);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1446 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1436 + 1.0) / _1446);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1653 = frontier_phi_27_23_ladder;
        }
        float _1949;
        if (_1449 > 0.0)
        {
            _1949 = abs((1.0 - _1440) / _1449);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1449 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1440 + 1.0) / _1449);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1949 = frontier_phi_39_34_ladder;
        }
        float _1951 = isnan(_1653) ? _1477 : (isnan(_1477) ? _1653 : min(_1477, _1653));
        float _1952 = isnan(_1949) ? _1951 : (isnan(_1951) ? _1949 : min(_1951, _1949));
        float _1956 = (_1952 * _1443) + _1432;
        float _1957 = (_1952 * _1446) + _1436;
        float _1958 = (_1952 * _1449) + _1440;
        float _1959 = _1952 * 9.9999997473787516355514526367188e-05;
        float _1961 = (-1.0) - _1959;
        float _1963 = _1959 + 1.0;
        float frontier_phi_17_39_ladder;
        float frontier_phi_17_39_ladder_1;
        float frontier_phi_17_39_ladder_2;
        if ((_1958 > _1963) || ((_1958 < _1961) || ((_1957 > _1963) || ((_1957 < _1961) || ((_1956 < _1961) || (_1956 > _1963))))))
        {
            frontier_phi_17_39_ladder = 0.0;
            frontier_phi_17_39_ladder_1 = 0.0;
            frontier_phi_17_39_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2103 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1958, cbModelParam._m0[9u].z, fma(_1957, cbModelParam._m0[9u].y, _1956 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1958, cbModelParam._m0[10u].z, fma(_1957, cbModelParam._m0[10u].y, _1956 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1958, cbModelParam._m0[11u].z, fma(_1957, cbModelParam._m0[11u].y, _1956 * cbModelParam._m0[11u].x))), _1383);
            frontier_phi_17_39_ladder = _2103.z * cbModelParam._m0[1u].y;
            frontier_phi_17_39_ladder_1 = _2103.y * cbModelParam._m0[1u].y;
            frontier_phi_17_39_ladder_2 = _2103.x * cbModelParam._m0[1u].y;
        }
        _1465 = frontier_phi_17_39_ladder_2;
        _1467 = frontier_phi_17_39_ladder_1;
        _1469 = frontier_phi_17_39_ladder;
    }
    else
    {
        vec4 _1453 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_570, _571, _572), _1383);
        _1465 = _1453.x * cbModelParam._m0[1u].y;
        _1467 = _1453.y * cbModelParam._m0[1u].y;
        _1469 = _1453.z * cbModelParam._m0[1u].y;
    }
    float _1473 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _388);
    float _1474 = isnan(_1473) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1473 : min(cbModelParam._m0[25u].w, _1473));
    float _1567;
    float _1569;
    float _1571;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1531 = fma(_634, cbModelParam._m0[21u].z, fma(_630, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _626)) + cbModelParam._m0[21u].w;
        float _1535 = fma(_634, cbModelParam._m0[22u].z, fma(_630, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _626)) + cbModelParam._m0[22u].w;
        float _1539 = fma(_634, cbModelParam._m0[23u].z, fma(_630, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _626)) + cbModelParam._m0[23u].w;
        float _1542 = fma(_572, cbModelParam._m0[21u].z, fma(_571, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _570));
        float _1545 = fma(_572, cbModelParam._m0[22u].z, fma(_571, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _570));
        float _1548 = fma(_572, cbModelParam._m0[23u].z, fma(_571, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _570));
        float _1658;
        if (_1542 > 0.0)
        {
            _1658 = abs((1.0 - _1531) / _1542);
        }
        else
        {
            float frontier_phi_29_25_ladder;
            if (_1542 < 0.0)
            {
                frontier_phi_29_25_ladder = abs((_1531 + 1.0) / _1542);
            }
            else
            {
                frontier_phi_29_25_ladder = 5000.0;
            }
            _1658 = frontier_phi_29_25_ladder;
        }
        float _1976;
        if (_1545 > 0.0)
        {
            _1976 = abs((1.0 - _1535) / _1545);
        }
        else
        {
            float frontier_phi_41_36_ladder;
            if (_1545 < 0.0)
            {
                frontier_phi_41_36_ladder = abs((_1535 + 1.0) / _1545);
            }
            else
            {
                frontier_phi_41_36_ladder = 5000.0;
            }
            _1976 = frontier_phi_41_36_ladder;
        }
        float _2314;
        if (_1548 > 0.0)
        {
            _2314 = abs((1.0 - _1539) / _1548);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1548 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1539 + 1.0) / _1548);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2314 = frontier_phi_51_48_ladder;
        }
        float _2316 = isnan(_1976) ? _1658 : (isnan(_1658) ? _1976 : min(_1658, _1976));
        float _2317 = isnan(_2314) ? _2316 : (isnan(_2316) ? _2314 : min(_2316, _2314));
        float _2321 = (_2317 * _1542) + _1531;
        float _2322 = (_2317 * _1545) + _1535;
        float _2323 = (_2317 * _1548) + _1539;
        float _2324 = _2317 * 9.9999997473787516355514526367188e-05;
        float _2325 = (-1.0) - _2324;
        float _2327 = _2324 + 1.0;
        float frontier_phi_26_51_ladder;
        float frontier_phi_26_51_ladder_1;
        float frontier_phi_26_51_ladder_2;
        if ((_2323 > _2327) || ((_2323 < _2325) || ((_2322 > _2327) || ((_2322 < _2325) || ((_2321 < _2325) || (_2321 > _2327))))))
        {
            frontier_phi_26_51_ladder = 0.0;
            frontier_phi_26_51_ladder_1 = 0.0;
            frontier_phi_26_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2445 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2323, cbModelParam._m0[17u].z, fma(_2322, cbModelParam._m0[17u].y, _2321 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2323, cbModelParam._m0[18u].z, fma(_2322, cbModelParam._m0[18u].y, _2321 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2323, cbModelParam._m0[19u].z, fma(_2322, cbModelParam._m0[19u].y, _2321 * cbModelParam._m0[19u].x))), _1474);
            frontier_phi_26_51_ladder = _2445.z * cbModelParam._m0[1u].z;
            frontier_phi_26_51_ladder_1 = _2445.y * cbModelParam._m0[1u].z;
            frontier_phi_26_51_ladder_2 = _2445.x * cbModelParam._m0[1u].z;
        }
        _1567 = frontier_phi_26_51_ladder_2;
        _1569 = frontier_phi_26_51_ladder_1;
        _1571 = frontier_phi_26_51_ladder;
    }
    else
    {
        vec4 _1551 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_570, _571, _572), _1474);
        _1567 = _1551.x * cbModelParam._m0[1u].z;
        _1569 = _1551.y * cbModelParam._m0[1u].z;
        _1571 = _1551.z * cbModelParam._m0[1u].z;
    }
    float _1584 = (((_597 * _547) + _598) * _562) * ((cbModelParam._m0[1u].w * (_1567 - _1465)) + _1465);
    float _1586 = (((_597 * _549) + _598) * _562) * ((cbModelParam._m0[1u].w * (_1569 - _1467)) + _1467);
    float _1588 = (((_597 * _550) + _598) * _562) * ((cbModelParam._m0[1u].w * (_1571 - _1469)) + _1469);
    float _1591 = fma(_1588, cbSceneParam._m0[89u].z, fma(_1586, cbSceneParam._m0[89u].y, _1584 * cbSceneParam._m0[89u].x));
    float _1594 = fma(_1588, cbSceneParam._m0[90u].z, fma(_1586, cbSceneParam._m0[90u].y, _1584 * cbSceneParam._m0[90u].x));
    float _1597 = fma(_1588, cbSceneParam._m0[91u].z, fma(_1586, cbSceneParam._m0[91u].y, _1584 * cbSceneParam._m0[91u].x));
    float _1632 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1636 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1640 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1644 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1645 = _1632 / _1644;
    float _1646 = _1636 / _1644;
    float _1647 = _1640 / _1644;
    float _1794;
    float _1795;
    float _1796;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1674 = ((uint(_1647 > cbSceneParam._m0[59u].y) + uint(_1647 > cbSceneParam._m0[59u].x)) + uint(_1647 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1675 = _1674 + 43u;
        uint _1683 = _1674 + 44u;
        uint _1691 = _1674 + 45u;
        uint _1699 = _1674 + 46u;
        float _1710 = fma(_1644, cbSceneParam._m0[_1675].w, fma(_1640, cbSceneParam._m0[_1675].z, fma(_1636, cbSceneParam._m0[_1675].y, _1632 * cbSceneParam._m0[_1675].x)));
        float _1714 = fma(_1644, cbSceneParam._m0[_1683].w, fma(_1640, cbSceneParam._m0[_1683].z, fma(_1636, cbSceneParam._m0[_1683].y, _1632 * cbSceneParam._m0[_1683].x)));
        float _1722 = fma(_1644, cbSceneParam._m0[_1699].w, fma(_1640, cbSceneParam._m0[_1699].z, fma(_1636, cbSceneParam._m0[_1699].y, _1632 * cbSceneParam._m0[_1699].x)));
        float _1727 = cbSceneParam._m0[33u].z * _1722;
        float _1729 = cbSceneParam._m0[33u].w * _1722;
        float _1732 = fma(_1644, cbSceneParam._m0[_1691].w, fma(_1640, cbSceneParam._m0[_1691].z, fma(_1636, cbSceneParam._m0[_1691].y, _1632 * cbSceneParam._m0[_1691].x))) / _1722;
        float _1780 = (cbSceneParam._m0[33u].x - sqrt(((_1646 * _1646) + (_1645 * _1645)) + (_1647 * _1647))) * cbSceneParam._m0[33u].y;
        float _4091 = isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0));
        float _1787 = (isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1727 + _1710) / _1722, (_1729 + _1714) / _1722), _1732), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1729 + _1710) / _1722, (_1714 - _1727) / _1722), _1732), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1710 - _1727) / _1722, (_1714 - _1729) / _1722), _1732), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1710 - _1729) / _1722, (_1727 + _1714) / _1722), _1732), 0.0)).x), vec4(0.25)));
        _1794 = 1.0 - (_1787 * cbSceneParam._m0[34u].x);
        _1795 = 1.0 - (_1787 * cbSceneParam._m0[34u].y);
        _1796 = 1.0 - (_1787 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1794 = 1.0;
        _1795 = 1.0;
        _1796 = 1.0;
    }
    float _1860;
    float _1862;
    float _1864;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1848 = fma(_1644, cbSceneParam._m0[63u].w, fma(_1640, cbSceneParam._m0[63u].z, fma(_1636, cbSceneParam._m0[63u].y, _1632 * cbSceneParam._m0[63u].x)));
        float _1849 = fma(_1644, cbSceneParam._m0[60u].w, fma(_1640, cbSceneParam._m0[60u].z, fma(_1636, cbSceneParam._m0[60u].y, _1632 * cbSceneParam._m0[60u].x))) / _1848;
        float _1850 = fma(_1644, cbSceneParam._m0[61u].w, fma(_1640, cbSceneParam._m0[61u].z, fma(_1636, cbSceneParam._m0[61u].y, _1632 * cbSceneParam._m0[61u].x))) / _1848;
        float frontier_phi_38_37_ladder;
        float frontier_phi_38_37_ladder_1;
        float frontier_phi_38_37_ladder_2;
        if ((((_1849 >= cbSceneParam._m0[64u].x) && (_1850 >= cbSceneParam._m0[64u].y)) && (_1849 <= cbSceneParam._m0[64u].z)) && (_1850 <= cbSceneParam._m0[64u].w))
        {
            float _1989 = fma(_1644, cbSceneParam._m0[62u].w, fma(_1640, cbSceneParam._m0[62u].z, fma(_1636, cbSceneParam._m0[62u].y, _1632 * cbSceneParam._m0[62u].x))) / _1848;
            float _1993 = isnan(cbSceneParam._m0[41u].w) ? _1989 : (isnan(_1989) ? cbSceneParam._m0[41u].w : max(_1989, cbSceneParam._m0[41u].w));
            float _2036 = (cbSceneParam._m0[33u].x - sqrt(((_1646 * _1646) + (_1645 * _1645)) + (_1647 * _1647))) * cbSceneParam._m0[33u].y;
            float _4107 = isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0));
            float _2043 = (isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1849, cbSceneParam._m0[33u].w + _1850), _1993), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1849, _1850 - cbSceneParam._m0[33u].z), _1993), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1849 - cbSceneParam._m0[33u].z, _1850 - cbSceneParam._m0[33u].w), _1993), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1849 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1850), _1993), 0.0)).x), vec4(0.25)));
            float _2047 = 1.0 - (_2043 * cbSceneParam._m0[34u].x);
            float _2048 = 1.0 - (_2043 * cbSceneParam._m0[34u].y);
            float _2049 = 1.0 - (_2043 * cbSceneParam._m0[34u].z);
            frontier_phi_38_37_ladder = isnan(_2048) ? _1795 : (isnan(_1795) ? _2048 : min(_1795, _2048));
            frontier_phi_38_37_ladder_1 = isnan(_2047) ? _1794 : (isnan(_1794) ? _2047 : min(_1794, _2047));
            frontier_phi_38_37_ladder_2 = isnan(_2049) ? _1796 : (isnan(_1796) ? _2049 : min(_1796, _2049));
        }
        else
        {
            frontier_phi_38_37_ladder = _1795;
            frontier_phi_38_37_ladder_1 = _1794;
            frontier_phi_38_37_ladder_2 = _1796;
        }
        _1860 = frontier_phi_38_37_ladder_1;
        _1862 = frontier_phi_38_37_ladder;
        _1864 = frontier_phi_38_37_ladder_2;
    }
    else
    {
        _1860 = _1794;
        _1862 = _1795;
        _1864 = _1796;
    }
    uvec4 _1869 = floatBitsToUint(cbInstanceData._m0[_521 + 5u]);
    uint _1871 = _1869.x * 14u;
    uint _1872 = _1871 + 13u;
    float _1879 = _562 + (-1.0);
    float _1884 = (cbLight._m0[_1872].x * _1879) + 1.0;
    float _1885 = (cbLight._m0[_1872].y * _1879) + 1.0;
    float _1886 = (cbLight._m0[_1872].z * _1879) + 1.0;
    float _1887 = (cbLight._m0[_1872].w * _1879) + 1.0;
    uint _1888 = _1871 + 5u;
    float _1894 = isnan(1.0) ? _1885 : (isnan(_1885) ? 1.0 : min(_1885, 1.0));
    uint _1898 = _1871 + 4u;
    float _1908 = isnan(1.0) ? _1884 : (isnan(_1884) ? 1.0 : min(_1884, 1.0));
    uint _1912 = _1871 | 1u;
    float _1923 = dot(vec3(cbLight._m0[_1871].xyz), vec3(_385, _386, _387));
    float _1926 = dot(vec3(cbLight._m0[_1912].xyz), vec3(_385, _386, _387));
    float _4143 = isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0));
    float _4154 = isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0));
    float _1931 = (isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0))) * 0.3183098733425140380859375;
    float _1933 = (isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0))) * 0.3183098733425140380859375;
    float _1940 = ((cbLight._m0[_1888].x * _1894) * _1933) + (((cbLight._m0[_1898].x * _1860) * _1908) * _1931);
    float _1941 = ((_1894 * cbLight._m0[_1888].y) * _1933) + (((cbLight._m0[_1898].y * _1862) * _1908) * _1931);
    float _1942 = ((_1894 * cbLight._m0[_1888].z) * _1933) + (((cbLight._m0[_1898].z * _1864) * _1908) * _1931);
    uvec4 _1946 = floatBitsToUint(cbLight._m0[_1871 + 12u]);
    bool _1948 = _1946.x == 0u;
    float _2050;
    float _2052;
    float _2054;
    if (_1948)
    {
        _2050 = _1940;
        _2052 = _1941;
        _2054 = _1942;
    }
    else
    {
        uint _2058 = _1871 + 6u;
        float _2074 = (dot(vec3(cbLight._m0[_1871 + 2u].xyz), vec3(_385, _386, _387)) * 0.5) + 0.5;
        float _2075 = _2074 * _2074;
        float _4165 = isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0));
        float _2076 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
        float _2077 = isnan(1.0) ? _1886 : (isnan(_1886) ? 1.0 : min(_1886, 1.0));
        _2050 = (((cbLight._m0[_2058].x * 0.3183098733425140380859375) * _2076) * _2077) + _1940;
        _2052 = (((cbLight._m0[_2058].y * 0.3183098733425140380859375) * _2076) * _2077) + _1941;
        _2054 = (((cbLight._m0[_2058].z * 0.3183098733425140380859375) * _2076) * _2077) + _1942;
    }
    bool _2057 = _1946.y == 0u;
    float _2112;
    float _2114;
    float _2116;
    if (_2057)
    {
        _2112 = _2050;
        _2114 = _2052;
        _2116 = _2054;
    }
    else
    {
        uint _2285 = _1871 + 7u;
        float _2301 = (dot(vec3(cbLight._m0[_1871 + 3u].xyz), vec3(_385, _386, _387)) * 0.5) + 0.5;
        float _2302 = _2301 * _2301;
        float _4181 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
        float _2303 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
        float _2304 = isnan(1.0) ? _1887 : (isnan(_1887) ? 1.0 : min(_1887, 1.0));
        _2112 = (((cbLight._m0[_2285].x * 0.3183098733425140380859375) * _2303) * _2304) + _2050;
        _2114 = (((cbLight._m0[_2285].y * 0.3183098733425140380859375) * _2303) * _2304) + _2052;
        _2116 = (((cbLight._m0[_2285].z * 0.3183098733425140380859375) * _2303) * _2304) + _2054;
    }
    uint _2119 = _1871 + 8u;
    float _2132 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1871].w)) * _388) * 0.949999988079071044921875);
    float _2133 = _2132 * _2132;
    float _2134 = cbLight._m0[_1871].x + _468;
    float _2135 = cbLight._m0[_1871].y + _469;
    float _2136 = cbLight._m0[_1871].z + _470;
    float _2140 = inversesqrt(dot(vec3(_2134, _2135, _2136), vec3(_2134, _2135, _2136)));
    float _2141 = _2140 * _2134;
    float _2142 = _2140 * _2135;
    float _2143 = _2140 * _2136;
    float _2144 = dot(vec3(_385, _386, _387), vec3(cbLight._m0[_1871].xyz));
    float _4197 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
    float _2147 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
    float _4208 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _2148 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
    float _2149 = dot(vec3(_385, _386, _387), vec3(_2141, _2142, _2143));
    float _4219 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0));
    float _2152 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
    float _2153 = dot(vec3(cbLight._m0[_1871].xyz), vec3(_2141, _2142, _2143));
    float _4230 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
    float _2157 = _2133 * _2133;
    float _2161 = ((_2152 * _2152) * (_2157 + (-1.0))) + 1.0;
    float _2169 = exp2(log2(1.0 - (isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0)))) * 5.0);
    float _2170 = 0.959999978542327880859375 - _544;
    float _2172 = 0.959999978542327880859375 - _545;
    float _2173 = 0.959999978542327880859375 - _546;
    float _2180 = 1.0 - _2133;
    float _2191 = (0.5 / (((_2148 * ((_2147 * _2180) + _2133)) + 9.9999999392252902907785028219223e-09) + (((_2148 * _2180) + _2133) * _2147))) * _2147;
    float _4241 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
    float _2193 = (isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0))) * (_2157 / ((_2161 * _2161) * 3.141590118408203125));
    uint _2207 = _1871 + 9u;
    float _2218 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1912].w)) * _388) * 0.949999988079071044921875);
    float _2219 = _2218 * _2218;
    float _2220 = cbLight._m0[_1912].x + _468;
    float _2221 = cbLight._m0[_1912].y + _469;
    float _2222 = cbLight._m0[_1912].z + _470;
    float _2226 = inversesqrt(dot(vec3(_2220, _2221, _2222), vec3(_2220, _2221, _2222)));
    float _2227 = _2226 * _2220;
    float _2228 = _2226 * _2221;
    float _2229 = _2226 * _2222;
    float _2230 = dot(vec3(_385, _386, _387), vec3(cbLight._m0[_1912].xyz));
    float _4252 = isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0));
    float _2233 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
    float _2234 = dot(vec3(_385, _386, _387), vec3(_2227, _2228, _2229));
    float _4263 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
    float _2237 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
    float _2238 = dot(vec3(cbLight._m0[_1912].xyz), vec3(_2227, _2228, _2229));
    float _4274 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
    float _2242 = _2219 * _2219;
    float _2246 = ((_2237 * _2237) * (_2242 + (-1.0))) + 1.0;
    float _2253 = exp2(log2(1.0 - (isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0)))) * 5.0);
    float _2260 = 1.0 - _2219;
    float _2270 = (0.5 / (((_2148 * ((_2233 * _2260) + _2219)) + 9.9999999392252902907785028219223e-09) + (((_2148 * _2260) + _2219) * _2233))) * _2233;
    float _4285 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
    float _2272 = (isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0))) * (_2242 / ((_2246 * _2246) * 3.141590118408203125));
    float _2282 = (((((_2253 * _2170) + _547) * cbLight._m0[_2207].x) * _2272) * _1894) + ((((cbLight._m0[_2119].x * _1860) * ((_2169 * _2170) + _547)) * _2193) * _1908);
    float _2283 = (((((_2253 * _2172) + _549) * cbLight._m0[_2207].y) * _2272) * _1894) + ((((cbLight._m0[_2119].y * _1862) * ((_2169 * _2172) + _549)) * _2193) * _1908);
    float _2284 = (((((_2253 * _2173) + _550) * cbLight._m0[_2207].z) * _2272) * _1894) + ((((cbLight._m0[_2119].z * _1864) * ((_2169 * _2173) + _550)) * _2193) * _1908);
    float _2340;
    float _2342;
    float _2344;
    if (_1948)
    {
        _2340 = _2282;
        _2342 = _2283;
        _2344 = _2284;
    }
    else
    {
        uint _2346 = _1871 + 2u;
        uint _2350 = _1871 + 10u;
        float _2364 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2346].w)) * _388) * 0.949999988079071044921875);
        float _2365 = _2364 * _2364;
        float _2366 = cbLight._m0[_2346].x + _468;
        float _2367 = cbLight._m0[_2346].y + _469;
        float _2368 = cbLight._m0[_2346].z + _470;
        float _2372 = inversesqrt(dot(vec3(_2366, _2367, _2368), vec3(_2366, _2367, _2368)));
        float _2373 = _2372 * _2366;
        float _2374 = _2372 * _2367;
        float _2375 = _2372 * _2368;
        float _2376 = dot(vec3(_385, _386, _387), vec3(cbLight._m0[_2346].xyz));
        float _4296 = isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : max(_2376, 0.0));
        float _2379 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
        float _2380 = dot(vec3(_385, _386, _387), vec3(_2373, _2374, _2375));
        float _4307 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
        float _2383 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
        float _2384 = dot(vec3(cbLight._m0[_2346].xyz), vec3(_2373, _2374, _2375));
        float _4318 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0));
        float _2388 = _2365 * _2365;
        float _2392 = ((_2383 * _2383) * (_2388 + (-1.0))) + 1.0;
        float _2399 = exp2(log2(1.0 - (isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0)))) * 5.0);
        float _2406 = 1.0 - _2365;
        float _2416 = (0.5 / (((_2148 * ((_2379 * _2406) + _2365)) + 9.9999999392252902907785028219223e-09) + (((_2148 * _2406) + _2365) * _2379))) * _2379;
        float _4329 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
        float _2418 = (isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0))) * (_2388 / ((_2392 * _2392) * 3.141590118408203125));
        float _2419 = isnan(1.0) ? _1886 : (isnan(_1886) ? 1.0 : min(_1886, 1.0));
        _2340 = (((((_2399 * _2170) + _547) * cbLight._m0[_2350].x) * _2418) * _2419) + _2282;
        _2342 = (((((_2399 * _2172) + _549) * cbLight._m0[_2350].y) * _2418) * _2419) + _2283;
        _2344 = (((((_2399 * _2173) + _550) * cbLight._m0[_2350].z) * _2418) * _2419) + _2284;
    }
    float _2450;
    float _2452;
    float _2454;
    if (_2057)
    {
        _2450 = _2340;
        _2452 = _2342;
        _2454 = _2344;
    }
    else
    {
        uint _2461 = _1871 + 3u;
        uint _2465 = _1871 + 11u;
        float _2479 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2461].w)) * _388) * 0.949999988079071044921875);
        float _2480 = _2479 * _2479;
        float _2481 = cbLight._m0[_2461].x + _468;
        float _2482 = cbLight._m0[_2461].y + _469;
        float _2483 = cbLight._m0[_2461].z + _470;
        float _2487 = inversesqrt(dot(vec3(_2481, _2482, _2483), vec3(_2481, _2482, _2483)));
        float _2488 = _2487 * _2481;
        float _2489 = _2487 * _2482;
        float _2490 = _2487 * _2483;
        float _2491 = dot(vec3(_385, _386, _387), vec3(cbLight._m0[_2461].xyz));
        float _4345 = isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0));
        float _2494 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
        float _2495 = dot(vec3(_385, _386, _387), vec3(_2488, _2489, _2490));
        float _4356 = isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : max(_2495, 0.0));
        float _2498 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
        float _2499 = dot(vec3(cbLight._m0[_2461].xyz), vec3(_2488, _2489, _2490));
        float _4367 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0));
        float _2503 = _2480 * _2480;
        float _2507 = ((_2498 * _2498) * (_2503 + (-1.0))) + 1.0;
        float _2514 = exp2(log2(1.0 - (isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0)))) * 5.0);
        float _2521 = 1.0 - _2480;
        float _2531 = (0.5 / (((_2148 * ((_2494 * _2521) + _2480)) + 9.9999999392252902907785028219223e-09) + (((_2148 * _2521) + _2480) * _2494))) * _2494;
        float _4378 = isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0));
        float _2533 = (isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0))) * (_2503 / ((_2507 * _2507) * 3.141590118408203125));
        float _2534 = isnan(1.0) ? _1887 : (isnan(_1887) ? 1.0 : min(_1887, 1.0));
        _2450 = (((((_2514 * _2170) + _547) * cbLight._m0[_2465].x) * _2533) * _2534) + _2340;
        _2452 = (((((_2514 * _2172) + _549) * cbLight._m0[_2465].y) * _2533) * _2534) + _2342;
        _2454 = (((((_2514 * _2173) + _550) * cbLight._m0[_2465].z) * _2533) * _2534) + _2344;
    }
    float _2599;
    float _2601;
    float _2603;
    float _2605;
    float _2607;
    float _2609;
    if (_1869.y == 0u)
    {
        uvec4 _2555 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2556 = _2555.x;
        uint _2567 = uint((float(_2555.y) * floor(float(uint(cbSceneParam._m0[85u].y * _481) / _2556))) + floor(float(uint(cbSceneParam._m0[85u].x * _480) / _2556)));
        float _2577 = (log2(_1647 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2578 = isnan(0.0) ? _2577 : (isnan(_2577) ? 0.0 : max(_2577, 0.0));
        uint _2581 = uint(isnan(14.0) ? _2578 : (isnan(_2578) ? 14.0 : min(_2578, 14.0)));
        uvec4 _2586 = texelFetch(g_lightClusterGridBuffer, int(((_2581 << 2u) + (_2567 << 6u)) >> 2u));
        uint _2587 = _2586.x;
        uint _2588 = _2555.z;
        float _2666;
        float _2668;
        float _2670;
        float _2672;
        float _2674;
        float _2676;
        if (((((1u << ((_2588 >> 4u) & 15u)) + 4294967295u) & _2587) == 0u) || ((_2588 & 240u) == 0u))
        {
            _2666 = 0.0;
            _2668 = 0.0;
            _2670 = 0.0;
            _2672 = 0.0;
            _2674 = 0.0;
            _2676 = 0.0;
        }
        else
        {
            float _2667;
            float _2669;
            float _2671;
            float _2673;
            float _2675;
            float _2677;
            float _2818 = 0.0;
            float _2819 = 0.0;
            float _2820 = 0.0;
            float _2821 = 0.0;
            float _2822 = 0.0;
            float _2823 = 0.0;
            uint _2824 = 0u;
            uint _2833;
            bool _2834;
            for (;;)
            {
                _2833 = texelFetch(g_lightClassification, int((((_2581 << 5u) + (_2567 << 9u)) + (_2824 << 2u)) >> 2u)).x;
                _2834 = _2833 == 0u;
                float frontier_phi_72_pred;
                float frontier_phi_72_pred_1;
                float frontier_phi_72_pred_2;
                float frontier_phi_72_pred_3;
                float frontier_phi_72_pred_4;
                float frontier_phi_72_pred_5;
                if (_2834)
                {
                    frontier_phi_72_pred = _2823;
                    frontier_phi_72_pred_1 = _2822;
                    frontier_phi_72_pred_2 = _2821;
                    frontier_phi_72_pred_3 = _2820;
                    frontier_phi_72_pred_4 = _2819;
                    frontier_phi_72_pred_5 = _2818;
                }
                else
                {
                    float _2963;
                    float _2964;
                    float _2965;
                    float _2966;
                    float _2967;
                    float _2968;
                    uint _2969;
                    _2963 = _2818;
                    _2964 = _2819;
                    _2965 = _2820;
                    _2966 = _2821;
                    _2967 = _2822;
                    _2968 = _2823;
                    _2969 = _2833;
                    float _2890;
                    float _2891;
                    float _2892;
                    float _2893;
                    float _2894;
                    float _2895;
                    for (;;)
                    {
                        uint _2973 = uint(findLSB(_2969)) + (_2824 << 5u);
                        uint _2970 = (_2969 + 4294967295u) & _2969;
                        uint _2975 = _2973 * 48u;
                        vec4 _2989 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2975)).x, texelFetch(g_PointLightRenderingBuffer, int(_2975 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2975 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2975 + 3u)).x));
                        uint _2995 = (_2973 * 48u) + 4u;
                        vec4 _3008 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2995)).x, texelFetch(g_PointLightRenderingBuffer, int(_2995 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2995 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2995 + 3u)).x));
                        uint _3014 = (_2973 * 48u) + 8u;
                        vec3 _3025 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3014)).x, texelFetch(g_PointLightRenderingBuffer, int(_3014 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3014 + 2u)).x));
                        float _3029 = _2989.x - _1645;
                        float _3030 = _2989.y - _1646;
                        float _3031 = _2989.z - _1647;
                        float _3032 = dot(vec3(_3029, _3030, _3031), vec3(_3029, _3030, _3031));
                        float _3035 = inversesqrt(_3032);
                        float _3036 = _3035 * _3029;
                        float _3037 = _3035 * _3030;
                        float _3038 = _3035 * _3031;
                        float _3039 = dot(vec3(_502, _505, _508), vec3(_3036, _3037, _3038));
                        float _3044 = 1.0 - (_3032 * _2989.w);
                        float _4404 = isnan(0.0) ? _3044 : (isnan(_3044) ? 0.0 : max(_3044, 0.0));
                        float _3045 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
                        float _3046 = sqrt(_3032) * _3008.w;
                        float _3049 = 1.39999997615814208984375 / (_3046 + 1.39999997615814208984375);
                        float _3050 = _3049 * _3049;
                        float _3053 = ((1.0 - _3050) * _3039) + _3050;
                        float _3056 = _3046 * _3046;
                        float _3060 = ((isnan(0.0) ? _3053 : (isnan(_3053) ? 0.0 : max(_3053, 0.0))) * _3045) / ((_3056 * 0.699999988079071044921875) + 1.0);
                        float _3064 = (-0.0) - _1645;
                        float _3065 = (-0.0) - _1646;
                        float _3066 = (-0.0) - _1647;
                        float _3070 = inversesqrt(dot(vec3(_3064, _3065, _3066), vec3(_3064, _3065, _3066)));
                        float _3071 = _3070 * _3064;
                        float _3072 = _3070 * _3065;
                        float _3073 = _3070 * _3066;
                        float _3080 = exp2(log2(1.0 / ((_3056 * 3.5) + 5.0)) * 0.25);
                        float _3081 = 1.0 - _578;
                        float _3088 = sqrt(1.0 - ((1.0 - (_3081 * _3081)) * (1.0 - (_3080 * _3080))));
                        float _3089 = _3088 * _3088;
                        float _3090 = _3089 * _3089;
                        float _3091 = _3071 + _3036;
                        float _3092 = _3072 + _3037;
                        float _3093 = _3073 + _3038;
                        float _3097 = inversesqrt(dot(vec3(_3091, _3092, _3093), vec3(_3091, _3092, _3093)));
                        float _3101 = dot(vec3(_502, _505, _508), vec3(_3071, _3072, _3073));
                        float _4420 = isnan(0.0) ? _3101 : (isnan(_3101) ? 0.0 : max(_3101, 0.0));
                        float _3104 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
                        float _3105 = dot(vec3(_502, _505, _508), vec3(_3097 * _3091, _3097 * _3092, _3097 * _3093));
                        float _4431 = isnan(0.0) ? _3105 : (isnan(_3105) ? 0.0 : max(_3105, 0.0));
                        float _3108 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
                        float _3112 = ((_3108 * _3108) * (_3090 + (-1.0))) + 1.0;
                        float _3113 = _3049 * _3089;
                        float _3114 = _3113 * _3113;
                        float _3117 = ((1.0 - _3114) * _3039) + _3114;
                        float _4442 = isnan(0.0) ? _3117 : (isnan(_3117) ? 0.0 : max(_3117, 0.0));
                        float _3118 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
                        float _3119 = 1.0 - _3089;
                        float _3129 = (0.5 / (((_3118 * ((_3104 * _3119) + _3089)) + 9.9999999392252902907785028219223e-09) + (((_3118 * _3119) + _3089) * _3104))) * _3118;
                        float _4453 = isnan(0.0) ? _3129 : (isnan(_3129) ? 0.0 : max(_3129, 0.0));
                        float _3140 = (((_3090 * 3.1415927410125732421875) * (isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0)))) / ((_3112 * _3112) * ((_3056 * 2.1991131305694580078125) + 3.141590118408203125))) * _3045;
                        _2893 = (_3060 * _3008.x) + _2966;
                        _2894 = (_3060 * _3008.y) + _2967;
                        _2895 = (_3060 * _3008.z) + _2968;
                        _2890 = (_3140 * _3025.x) + _2963;
                        _2891 = (_3140 * _3025.y) + _2964;
                        _2892 = (_3140 * _3025.z) + _2965;
                        if (_2970 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2963 = _2890;
                            _2964 = _2891;
                            _2965 = _2892;
                            _2966 = _2893;
                            _2967 = _2894;
                            _2968 = _2895;
                            _2969 = _2970;
                        }
                    }
                    frontier_phi_72_pred = _2895;
                    frontier_phi_72_pred_1 = _2894;
                    frontier_phi_72_pred_2 = _2893;
                    frontier_phi_72_pred_3 = _2892;
                    frontier_phi_72_pred_4 = _2891;
                    frontier_phi_72_pred_5 = _2890;
                }
                _2677 = frontier_phi_72_pred;
                _2675 = frontier_phi_72_pred_1;
                _2673 = frontier_phi_72_pred_2;
                _2671 = frontier_phi_72_pred_3;
                _2669 = frontier_phi_72_pred_4;
                _2667 = frontier_phi_72_pred_5;
                uint _2825 = _2824 + 1u;
                if (_2825 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2818 = _2667;
                    _2819 = _2669;
                    _2820 = _2671;
                    _2821 = _2673;
                    _2822 = _2675;
                    _2823 = _2677;
                    _2824 = _2825;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2666 = _2667;
            _2668 = _2669;
            _2670 = _2671;
            _2672 = _2673;
            _2674 = _2675;
            _2676 = _2677;
        }
        uvec4 _2680 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2681 = _2680.z;
        uint _2683 = (_2681 >> 8u) & 15u;
        float _2786;
        float _2788;
        float _2790;
        float _2792;
        float _2794;
        float _2796;
        if (((4294967295u << _2683) & _2587) == 0u)
        {
            _2786 = _2666;
            _2788 = _2668;
            _2790 = _2670;
            _2792 = _2672;
            _2794 = _2674;
            _2796 = _2676;
        }
        else
        {
            float _2811 = inversesqrt(dot(vec3(_1645, _1646, _1647), vec3(_1645, _1646, _1647)));
            float _2812 = _2811 * _1645;
            float _2813 = _2811 * _1646;
            float _2814 = _2811 * _1647;
            float frontier_phi_64_65_ladder;
            float frontier_phi_64_65_ladder_1;
            float frontier_phi_64_65_ladder_2;
            float frontier_phi_64_65_ladder_3;
            float frontier_phi_64_65_ladder_4;
            float frontier_phi_64_65_ladder_5;
            if (_2683 < ((_2681 >> 12u) & 15u))
            {
                float _2787;
                float _2789;
                float _2791;
                float _2793;
                float _2795;
                float _2797;
                float _2946 = _2666;
                float _2947 = _2668;
                float _2948 = _2670;
                float _2949 = _2672;
                float _2950 = _2674;
                float _2951 = _2676;
                uint _2952 = _2683;
                uint _2961;
                bool _2962;
                for (;;)
                {
                    _2961 = texelFetch(g_lightClassification, int((((_2581 << 5u) + (_2567 << 9u)) + (_2952 << 2u)) >> 2u)).x;
                    _2962 = _2961 == 0u;
                    float frontier_phi_83_pred;
                    float frontier_phi_83_pred_1;
                    float frontier_phi_83_pred_2;
                    float frontier_phi_83_pred_3;
                    float frontier_phi_83_pred_4;
                    float frontier_phi_83_pred_5;
                    if (_2962)
                    {
                        frontier_phi_83_pred = _2950;
                        frontier_phi_83_pred_1 = _2949;
                        frontier_phi_83_pred_2 = _2948;
                        frontier_phi_83_pred_3 = _2947;
                        frontier_phi_83_pred_4 = _2946;
                        frontier_phi_83_pred_5 = _2951;
                    }
                    else
                    {
                        float _3154;
                        float _3155;
                        float _3156;
                        float _3157;
                        float _3158;
                        float _3159;
                        float _3450;
                        float _3451;
                        float _3452;
                        float _3453;
                        float _3454;
                        float _3455;
                        float _3167 = _2946;
                        float _3168 = _2947;
                        float _3169 = _2948;
                        float _3170 = _2949;
                        float _3171 = _2950;
                        float _3172 = _2951;
                        uint _3173 = _2961;
                        uint _3174;
                        vec4 _3199;
                        float _3200;
                        vec4 _3215;
                        vec3 _3227;
                        vec4 _3243;
                        vec4 _3259;
                        float _3306;
                        bool _3307;
                        for (;;)
                        {
                            uint _3184 = ((_2952 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3173));
                            _3174 = (_3173 + 4294967295u) & _3173;
                            uint _3186 = _3184 * 40u;
                            _3199 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3186)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 3u)).x));
                            _3200 = _3199.w;
                            uint _3202 = (_3184 * 40u) + 4u;
                            _3215 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3202)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 3u)).x));
                            uint _3217 = (_3184 * 40u) + 8u;
                            _3227 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3217)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 2u)).x));
                            uint _3230 = (_3184 * 40u) + 16u;
                            _3243 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3230)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 3u)).x));
                            uint _3246 = (_3184 * 40u) + 20u;
                            _3259 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3246)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 3u)).x));
                            uint _3262 = (_3184 * 40u) + 24u;
                            vec4 _3275 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3262)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3262 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3262 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3262 + 3u)).x));
                            uint _3281 = (_3184 * 40u) + 28u;
                            vec4 _3294 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3281)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 3u)).x));
                            _3306 = fma(_1647, _3294.z, fma(_1646, _3294.y, _3294.x * _1645)) + _3294.w;
                            _3307 = !((fma(_1647, _3275.z, fma(_1646, _3275.y, _3275.x * _1645)) + _3275.w) <= 0.0);
                            float frontier_phi_89_pred;
                            float frontier_phi_89_pred_1;
                            float frontier_phi_89_pred_2;
                            float frontier_phi_89_pred_3;
                            float frontier_phi_89_pred_4;
                            float frontier_phi_89_pred_5;
                            if (_3307)
                            {
                                float _3334 = _3199.x - _1645;
                                float _3335 = _3199.y - _1646;
                                float _3336 = _3199.z - _1647;
                                float _3337 = dot(vec3(_3334, _3335, _3336), vec3(_3334, _3335, _3336));
                                float _3340 = inversesqrt(_3337);
                                float _3341 = _3340 * _3334;
                                float _3342 = _3340 * _3335;
                                float _3343 = _3340 * _3336;
                                float _3347 = 1.0 - (_3337 / (_3200 * _3200));
                                float _4464 = isnan(0.0) ? _3347 : (isnan(_3347) ? 0.0 : max(_3347, 0.0));
                                float _3348 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
                                float _3352 = sqrt(_3337) * _3215.w;
                                float _3354 = 1.39999997615814208984375 / (_3352 + 1.39999997615814208984375);
                                float _3355 = _3354 * _3354;
                                float _3358 = ((1.0 - _3355) * dot(vec3(_3341, _3342, _3343), vec3(_502, _505, _508))) + _3355;
                                float _3361 = _3352 * _3352;
                                float _3365 = (fma(_1647, _3243.z, fma(_1646, _3243.y, _3243.x * _1645)) + _3243.w) / _3306;
                                float _3366 = (fma(_1647, _3259.z, fma(_1646, _3259.y, _3259.x * _1645)) + _3259.w) / _3306;
                                float _3370 = 1.0 - dot(vec2(_3365, _3366), vec2(_3365, _3366));
                                float _4480 = isnan(0.0) ? _3370 : (isnan(_3370) ? 0.0 : max(_3370, 0.0));
                                float _3371 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
                                float _3372 = _3371 * (((isnan(0.0) ? _3358 : (isnan(_3358) ? 0.0 : max(_3358, 0.0))) * _3348) / ((_3361 * 0.699999988079071044921875) + 1.0));
                                float _3384 = exp2(log2(1.0 / ((_3361 * 3.5) + 5.0)) * 0.25);
                                float _3385 = 1.0 - _578;
                                float _3392 = sqrt(1.0 - ((1.0 - (_3385 * _3385)) * (1.0 - (_3384 * _3384))));
                                float _3393 = _3392 * _3392;
                                float _3394 = _3393 * _3393;
                                float _3395 = _3341 - _2812;
                                float _3396 = _3342 - _2813;
                                float _3397 = _3343 - _2814;
                                float _3401 = inversesqrt(dot(vec3(_3395, _3396, _3397), vec3(_3395, _3396, _3397)));
                                float _3405 = dot(vec3(_502, _505, _508), vec3((-0.0) - _2812, (-0.0) - _2813, (-0.0) - _2814));
                                float _4491 = isnan(0.0) ? _3405 : (isnan(_3405) ? 0.0 : max(_3405, 0.0));
                                float _3408 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
                                float _3409 = dot(vec3(_502, _505, _508), vec3(_3401 * _3395, _3401 * _3396, _3401 * _3397));
                                float _4502 = isnan(0.0) ? _3409 : (isnan(_3409) ? 0.0 : max(_3409, 0.0));
                                float _3412 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
                                float _3416 = ((_3412 * _3412) * (_3394 + (-1.0))) + 1.0;
                                float _3417 = _3354 * _3393;
                                float _3418 = _3417 * _3417;
                                float _3424 = ((1.0 - _3418) * dot(vec3(_502, _505, _508), vec3(_3341, _3342, _3343))) + _3418;
                                float _4513 = isnan(0.0) ? _3424 : (isnan(_3424) ? 0.0 : max(_3424, 0.0));
                                float _3425 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
                                float _3426 = 1.0 - _3393;
                                float _3436 = (0.5 / (((_3425 * ((_3408 * _3426) + _3393)) + 9.9999999392252902907785028219223e-09) + (((_3425 * _3426) + _3393) * _3408))) * _3425;
                                float _4524 = isnan(0.0) ? _3436 : (isnan(_3436) ? 0.0 : max(_3436, 0.0));
                                float _3446 = (_3371 * _3348) * (((_3394 * 3.1415927410125732421875) * (isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0)))) / ((_3416 * _3416) * ((_3361 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_89_pred = _3372 * _3215.y;
                                frontier_phi_89_pred_1 = _3372 * _3215.x;
                                frontier_phi_89_pred_2 = _3446 * _3227.z;
                                frontier_phi_89_pred_3 = _3446 * _3227.y;
                                frontier_phi_89_pred_4 = _3446 * _3227.x;
                                frontier_phi_89_pred_5 = _3372 * _3215.z;
                            }
                            else
                            {
                                frontier_phi_89_pred = 0.0;
                                frontier_phi_89_pred_1 = 0.0;
                                frontier_phi_89_pred_2 = 0.0;
                                frontier_phi_89_pred_3 = 0.0;
                                frontier_phi_89_pred_4 = 0.0;
                                frontier_phi_89_pred_5 = 0.0;
                            }
                            _3454 = frontier_phi_89_pred;
                            _3453 = frontier_phi_89_pred_1;
                            _3452 = frontier_phi_89_pred_2;
                            _3451 = frontier_phi_89_pred_3;
                            _3450 = frontier_phi_89_pred_4;
                            _3455 = frontier_phi_89_pred_5;
                            _3157 = _3453 + _3170;
                            _3158 = _3454 + _3171;
                            _3159 = _3455 + _3172;
                            _3154 = _3450 + _3167;
                            _3155 = _3451 + _3168;
                            _3156 = _3452 + _3169;
                            if (_3174 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3167 = _3154;
                                _3168 = _3155;
                                _3169 = _3156;
                                _3170 = _3157;
                                _3171 = _3158;
                                _3172 = _3159;
                                _3173 = _3174;
                                continue;
                            }
                        }
                        frontier_phi_83_pred = _3158;
                        frontier_phi_83_pred_1 = _3157;
                        frontier_phi_83_pred_2 = _3156;
                        frontier_phi_83_pred_3 = _3155;
                        frontier_phi_83_pred_4 = _3154;
                        frontier_phi_83_pred_5 = _3159;
                    }
                    _2795 = frontier_phi_83_pred;
                    _2793 = frontier_phi_83_pred_1;
                    _2791 = frontier_phi_83_pred_2;
                    _2789 = frontier_phi_83_pred_3;
                    _2787 = frontier_phi_83_pred_4;
                    _2797 = frontier_phi_83_pred_5;
                    uint _2953 = _2952 + 1u;
                    if (_2953 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2946 = _2787;
                        _2947 = _2789;
                        _2948 = _2791;
                        _2949 = _2793;
                        _2950 = _2795;
                        _2951 = _2797;
                        _2952 = _2953;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_64_65_ladder = _2797;
                frontier_phi_64_65_ladder_1 = _2793;
                frontier_phi_64_65_ladder_2 = _2795;
                frontier_phi_64_65_ladder_3 = _2789;
                frontier_phi_64_65_ladder_4 = _2787;
                frontier_phi_64_65_ladder_5 = _2791;
            }
            else
            {
                frontier_phi_64_65_ladder = _2676;
                frontier_phi_64_65_ladder_1 = _2672;
                frontier_phi_64_65_ladder_2 = _2674;
                frontier_phi_64_65_ladder_3 = _2668;
                frontier_phi_64_65_ladder_4 = _2666;
                frontier_phi_64_65_ladder_5 = _2670;
            }
            _2786 = frontier_phi_64_65_ladder_4;
            _2788 = frontier_phi_64_65_ladder_3;
            _2790 = frontier_phi_64_65_ladder_5;
            _2792 = frontier_phi_64_65_ladder_1;
            _2794 = frontier_phi_64_65_ladder_2;
            _2796 = frontier_phi_64_65_ladder;
        }
        float _2801 = isnan(1.0) ? _562 : (isnan(_562) ? 1.0 : min(_562, 1.0));
        _2599 = (_2801 * _2792) + _2112;
        _2601 = (_2801 * _2794) + _2114;
        _2603 = (_2801 * _2796) + _2116;
        _2605 = ((_2786 * _547) * _2801) + _2450;
        _2607 = ((_2788 * _549) * _2801) + _2452;
        _2609 = ((_2790 * _550) * _2801) + _2454;
    }
    else
    {
        _2599 = _2112;
        _2601 = _2114;
        _2603 = _2116;
        _2605 = _2450;
        _2607 = _2452;
        _2609 = _2454;
    }
    float _4540 = isnan(0.0) ? _537 : (isnan(_537) ? 0.0 : max(_537, 0.0));
    float _4551 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _4562 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _2626 = ((isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0))) * (_2599 + ((isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0))) * _562))) + ((_2605 + ((isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0))) * _1372)) * cbPerFrame._m0[3u].x);
    float _2627 = ((isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0))) * (_2601 + ((isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0))) * _562))) + ((_2607 + ((isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0))) * _1372)) * cbPerFrame._m0[3u].x);
    float _2628 = ((isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0))) * (_2603 + ((isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0))) * _562))) + ((_2609 + ((isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0))) * _1372)) * cbPerFrame._m0[3u].x);
    uint _2629 = _521 + 6u;
    float _2637 = _480 / cbSceneParam._m0[86u].x;
    float _2638 = _481 / cbSceneParam._m0[86u].y;
    vec4 _2652 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2637, _2638, (log2((isnan(cbSceneParam._m0[77u].w) ? _412 : (isnan(_412) ? cbSceneParam._m0[77u].w : min(_412, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2654 = _2652.x;
    float _2655 = _2652.y;
    float _2656 = _2652.z;
    float _2657 = _2652.w;
    float _2728;
    float _2730;
    float _2732;
    float _2734;
    if (_412 > cbSceneParam._m0[78u].w)
    {
        float _2691 = isnan(_412) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _412 : min(cbSceneParam._m0[80u].w, _412));
        float _2692 = _2691 / _412;
        float _2703 = _2692 * _461;
        float _2704 = _462 * _2692;
        float _2705 = (-0.0) - _2704;
        float _2706 = _2692 * _463;
        float _2708 = (cbSceneParam._m0[77u].w * _2705) / _2691;
        float _2709 = _2708 + cbSceneParam._m0[79u].w;
        float _2710 = cbSceneParam._m0[79u].w - _2704;
        float _2716 = sqrt(((_2703 * _2703) + (_2704 * _2704)) + (_2706 * _2706));
        float _2719 = (1.0 - (cbSceneParam._m0[77u].w / _2691)) * _2716;
        float _2724 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2726 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2903;
        if (abs((_2705 - _2708) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2903 = ((((_2709 > 0.0) ? exp2(_2724 * _2709) : (2.0 - exp2(_2726 * _2709))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2719;
        }
        else
        {
            float _2847 = 1.0 / cbSceneParam._m0[80u].x;
            float _2848 = isnan(_2710) ? _2709 : (isnan(_2709) ? _2710 : max(_2709, _2710));
            float _2849 = isnan(_2710) ? _2709 : (isnan(_2709) ? _2710 : min(_2709, _2710));
            float _2858 = isnan(0.0) ? _2848 : (isnan(_2848) ? 0.0 : min(_2848, 0.0));
            float _2859 = isnan(0.0) ? _2849 : (isnan(_2849) ? 0.0 : min(_2849, 0.0));
            _2903 = ((abs(_2716 / _2705) * cbSceneParam._m0[80u].y) * ((((_2858 - _2859) * 2.0) - ((exp2(_2724 * (isnan(0.0) ? _2848 : (isnan(_2848) ? 0.0 : max(_2848, 0.0)))) - exp2(_2724 * (isnan(0.0) ? _2849 : (isnan(_2849) ? 0.0 : max(_2849, 0.0))))) * _2847)) - ((exp2(_2726 * _2858) - exp2(_2726 * _2859)) * _2847))) + (_2719 * cbSceneParam._m0[80u].z);
        }
        vec4 _2905 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2637, _2638, 1.0), 0.0);
        float _2914 = exp2((_2903 * (-1.44269502162933349609375)) * (1.0 - _2905.w));
        float _2915 = log2(_2914);
        float _2931 = log2(_2657);
        _2728 = (exp2(_2931 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2915 * cbSceneParam._m0[78u].x)) * _2905.x) / cbSceneParam._m0[78u].x)) + _2654;
        _2730 = (exp2(_2931 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2915 * cbSceneParam._m0[78u].y)) * _2905.y) / cbSceneParam._m0[78u].y)) + _2655;
        _2732 = (exp2(_2931 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2915 * cbSceneParam._m0[78u].z)) * _2905.z) / cbSceneParam._m0[78u].z)) + _2656;
        _2734 = _2914 * _2657;
    }
    else
    {
        _2728 = _2654;
        _2730 = _2655;
        _2732 = _2656;
        _2734 = _2657;
    }
    bool _2941;
    vec4 _2744;
    vec4 _2766;
    float _2768;
    float _2772;
    float _2773;
    float _2774;
    float _2775;
    bool _2785;
    for (;;)
    {
        _2744 = cbMatDynParam._m0[0u];
        float _2746 = roundEven(_2744.y);
        bool _2747 = _2746 == 3.0;
        float _2748 = log2(_2734);
        float _2755 = exp2(_2748 * cbSceneParam._m0[78u].x) * _2626;
        float _2756 = exp2(_2748 * cbSceneParam._m0[78u].y) * _2627;
        float _2757 = exp2(_2748 * cbSceneParam._m0[78u].z) * _2628;
        float _2764 = _474 + (-0.5);
        _2766 = cbMtdParam._m0[1u];
        _2768 = _2766.y * _2764;
        float _2771 = (_2746 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2772 = _2771 * (_2747 ? _2755 : (_2755 + (cbSceneParam._m0[72u].w * _2728)));
        _2773 = _2771 * (_2747 ? _2756 : (_2756 + (cbSceneParam._m0[72u].w * _2730)));
        _2774 = _2771 * (_2747 ? _2757 : (_2757 + (cbSceneParam._m0[72u].w * _2732)));
        _2775 = _2764 * 0.999000012874603271484375;
        _2785 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2785)
        {
            if ((cbInstanceData._m0[_521 + 7u].x + _2775) < 0.5)
            {
                _2941 = true;
                break;
            }
        }
        uint _2882 = _523 + uint(_2744.w);
        if ((cbInstanceData._m0[_2882].w < 1.0) && ((cbInstanceData._m0[_2882].w + _2775) < 0.5))
        {
            _2941 = true;
            break;
        }
        if ((_2768 + _299) < _2766.x)
        {
            _2941 = true;
            break;
        }
        _2941 = false;
        break;
    }
    float _3145;
    if (_2941)
    {
        discard_state = true;
        _3145 = 0.0;
    }
    else
    {
        _3145 = cbInstanceData._m0[_2629].w;
    }
    SV_Target.x = _2772;
    SV_Target.y = _2773;
    SV_Target.z = _2774;
    SV_Target.w = _3145;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2629].w;
    discard_exit();
}


